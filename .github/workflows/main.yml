# https://github.com/graueneko/aktools/blob/master/.github/workflows/autoupdate.yml
# https://github.com/Seniru/LineGraph-TFM/blob/master/.github/workflows/build.yml

# The name of your workflow. GitHub displays the names of your workflows
# on your repository's actions page. If you omit name, GitHub sets it to 
# the workflow file path relative to the root of the repository.
name: Auto update data
# 这里的空格在readme.md中的badge里需要使用`%20`替换

# Required 
# The name of the GitHub event that triggers the workflow. 
# You can provide a single event string, array of events, array of event types, 
# or an event configuration map that schedules a workflow or restricts the 
# execution of a workflow to specific files, tags, or branch changes. 
# For a list of available events, see "Events that trigger workflows."
on:
  workflow_dispatch:
  schedule:
    - cron: '00 0/2 * * *'

# A workflow run is made up of one or more jobs. 
# Jobs run in parallel by default. To run jobs sequentially, 
# you can define dependencies on other jobs using the jobs.<job_id>.needs keyword.
jobs:
  # Each job must have an id to associate with the job. 
  # The key job_id is a string and its value is a map of the job's configuration data. 
  # You must replace <job_id> with a string that is unique to the jobs object. 
  # The <job_id> must start with a letter or _ and contain only alphanumeric characters, -, or _.
  auto-update:  # job_id
    name: Update Files  # 作业显示在 GitHub 上的名称。
    # Required The type of machine to run the job on. 
    # The machine can be either a GitHub-hosted runner, or a self-hosted runner.
    runs-on: ubuntu-latest
    # A job contains a sequence of tasks called steps. Steps can run commands, 
    # run setup tasks, or run an action in your repository, a public repository, 
    # or an action published in a Docker registry. Not all steps run actions, 
    # but all actions run as a step. Each step runs in its own process in the runner 
    # environment and has access to the workspace and filesystem. 
    # Because steps run in their own process, changes to environment variables are not 
    # preserved between steps. GitHub provides built-in steps to set up and complete a job. 
    # You can run an unlimited number of steps as long as you are within the workflow usage limits. 
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          # Version range or exact version of a Python version to use, 
          # using SemVer's version range syntax.
          python-version: 3.8 # optional, default is 3.x
          # The target architecture (x86, x64) of the Python interpreter.
          # architecture: x64 # optional
          # Used to pull python distributions from actions/python-versions. 
          # Since there's a default, this is typically not supplied by the user.
          # token: # optional, default is ${{ github.token }}
      - name: Download files
        run: |
          cd scripts
          python download_files_from_list.py
      - name: Download files
        run: |
          cd scripts
          python download_files_from_list1.py
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add changes" || echo "nothing changed"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.USER_TOKEN }}
          branch: ${{ github.ref }}
