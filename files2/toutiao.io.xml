<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>d18963838f3446556f5729338f19aedb</guid>
<title>Python 轻量级 Web 框架：Bottle 库！</title>
<link>https://toutiao.io/k/3arjdch</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;↓&lt;/span&gt;&lt;span&gt;推荐关注↓&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MzA5MzUxMzg5NA==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/AQF4KzdPxcice1Gv5eYdy8vZKxrd4GyjRFTsXmbMy0ibZV040KibVic7aPBoLuz1HHiadKEib0bblbPRXG5UCluia06lA/0?wx_fmt=png&quot; data-nickname=&quot;Python开发精选&quot; data-alias=&quot;BestPython&quot; data-signature=&quot;分享 Python 技术文章、资源、课程、资讯。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Bottle&lt;/span&gt;&lt;span&gt;是一个超轻量级的python库。说是库，其本身只由一个4000行左右的文件构成，并且不需要任何依赖，只靠python标准库即可运作。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;和它本身的轻便一样，Bottle库的使用也十分简单。相信在看到本文前，读者对python也已经有了简单的了解。那么究竟何种神秘的操作，才能用百行代码完成一个服务器的功能？让我们拭目以待。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XicmltibFb8BlUElxV04UprFfvUW9NN7KI1qVwia9RWUlw0ibVcDsqeiaGhLXMAjN9hnUvASTWsJDqLyhN7uP7srcCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;60&quot;/&gt; &lt;section&gt;&lt;p&gt;一． Bottle库安装&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.0057143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OibSlAV6BD9YXsF0v8ic7ZMgttibNq0wiajN0acv6AQgLN1jkk8cLn5b2S9DUuZF0Lg4tSFXYMv2CBliagAyTDYrLqw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1）使用pip安装&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1370192&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2pvqwdFMiaZVLCDZ1dZoH5pMIdumqnwzDdkeR1MyQp87a2vVfVrAjibHA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;416&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）下载Bottle文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/bottlepy/bottle/blob/master/bottle.py&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9166667&quot; data-type=&quot;png&quot; data-w=&quot;60&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XicmltibFb8BlUElxV04UprFfvUW9NN7KI1qVwia9RWUlw0ibVcDsqeiaGhLXMAjN9hnUvASTWsJDqLyhN7uP7srcCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt; &lt;section&gt;&lt;p&gt;二．“HelloWorld！”&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.0057143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OibSlAV6BD9YXsF0v8ic7ZMgttibNq0wiajN0acv6AQgLN1jkk8cLn5b2S9DUuZF0Lg4tSFXYMv2CBliagAyTDYrLqw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;所谓万事功成先HelloWorld，从这个简单的示例中，了解Bottle的基本机制。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;先上代码：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.366167&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2hjlLnt3cEMsibhX12UcL7Tr95OyibLqqJvpshjHWfgickqE49pyibM5bvw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;467&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;首先我们从bottle库中导入&lt;strong&gt;get&lt;/strong&gt;和&lt;strong&gt;run&lt;/strong&gt;两个方法。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;接下来，我们要构建一个网站，首先要有一个ip地址和一个端口（port），这部分功能由run来完成，在测试环节我们就使用127.0.0.1（本机地址）和80端口（浏览器默认端口）来&lt;/span&gt;&lt;span&gt;运行这段代码 python HelloWorld.py&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2NBWBjkyJXopCYRAdLok1DmyuaGAicqYgbBKCodCrLTY2sI9xa6gibd2w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这样网站服务器就处于运行状态啦，打开浏览器，输入127.0.0.1(:80)&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.321875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2OTtgiaIZqSL02iaJAxJPy2AYiaHzP0jBJjYODlNfq4znu05D6F3iaT18SA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;熟悉的404，错误提示Not found：‘/’。这是当然的，因为网站除了服务器之外，还有很重要的成分——网页啊！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;浏览器访问ip地址时，即向这个ip发送了get请求，等待返回网页数据，那么我们的bottle库里，封装了get方法，用来实现这一过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;代码如下：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7763636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2n6b9hdNXiaaB2Iw3Bu7pTmnPROM5j4KicdbhicpVES9BcmiaxBaicQOLSsA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;550&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不知道大家是否认识def上面的@符号，这个符号是python语法中的&lt;strong&gt;装饰器&lt;/strong&gt;的意思，可以简单的理解为使用get函数对homepage进行修饰。在这里，@get(‘/’)即将homepage装饰成了浏览器发送GET 127.0.0.1/这个请求时的相应函数。可以做任意处理，最后返回get请求的相应。这里就返回了简单的HelloWorld页面，再次运行，就有这样的效果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3214286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2KmpvPedPexPicMicmxAOVcTYtMwD1Dia3hZYN4dvia5UDuicWrHjdd1AWlg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;308&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;也可以使用bottle中封装的template方法，将网页数据单独写在.tpl文件中，示例如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2giaibLIKK2DNnHgOMr3iapSDKJ0icoIUYCzP2EQpVb9V6MvwJSK3VO32fA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;run函数还有一个参数reloader，将其设置为True将会打开自动重载，网页服务器会在你做出任何更改时自动重载服务器，可实现网站的热更新。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9166667&quot; data-type=&quot;png&quot; data-w=&quot;60&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XicmltibFb8BlUElxV04UprFfvUW9NN7KI1qVwia9RWUlw0ibVcDsqeiaGhLXMAjN9hnUvASTWsJDqLyhN7uP7srcCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt; &lt;section&gt;&lt;p&gt;三．动态路由及文件下载&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.0057143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OibSlAV6BD9YXsF0v8ic7ZMgttibNq0wiajN0acv6AQgLN1jkk8cLn5b2S9DUuZF0Lg4tSFXYMv2CBliagAyTDYrLqw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;如上我们使用的get(‘/’)，本质上是一种静态路由，在服务器运行前就确定好的地址可以用这种方法来进行路由。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么如果是服务器运行时呢？比如说网站服务器上存取文件，当然不能采取静态的方式，这时候我们就可以采用动态路由。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Bottle的动态路由，由route方法实现，和get类似，也是采用装饰器来修饰函数实现路由功能。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9163987&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2XJzKCO4u76DpcjETq6d5x79fRxMOjFHiaAIZFLkHKPP6Q0iaUh7dsrAw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;622&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;这里我们看到在装饰器的参量中出现了一个与众不同的东西:&#x27;name&#x27;。被其修饰的函数的参数与冒号后的参量同名，而在函数中，就可以使用name这个参数作为处理变量，最后返回响应即可。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3936567&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM29W94GyJ3Qw8WKpWDngobp69SkX0vGCbzNbJjtcJFobK2EicHI87jrzQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;536&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;而动态路由即可为文件路由提供便利。一个服务器中可能存放着成百上千的文件，不可能每个都依靠静态地址。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4078125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2fKlMomcF850QRjicLC8cCDMQorjz8t7qV04TnIu4w7LAaesYZfco2qQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;这里我们可以看到一个新的函数static_file，第一个参数为文件名，第二个参数为根目录地址（即这个文件所在的位置），当前文件系统为：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;--HelloWorld.py&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;--store1.txt&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;访问浏览器得到&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.8143382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2rs9b4t9pwryhqjFMojwD7Rr2Q9nAR3qXRfr8hLNicd3C52LwnYibibPlQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;544&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;当然你也可以把文件放在文件夹里，只要把root参数更换成文件夹的地址即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9166667&quot; data-type=&quot;png&quot; data-w=&quot;60&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XicmltibFb8BlUElxV04UprFfvUW9NN7KI1qVwia9RWUlw0ibVcDsqeiaGhLXMAjN9hnUvASTWsJDqLyhN7uP7srcCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt; &lt;section&gt;&lt;p&gt;四．&lt;span/&gt;&lt;span&gt; POST的响应与文件上传&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.0057143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OibSlAV6BD9YXsF0v8ic7ZMgttibNq0wiajN0acv6AQgLN1jkk8cLn5b2S9DUuZF0Lg4tSFXYMv2CBliagAyTDYrLqw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;如果要实现更复杂的功能，我们不但需要使用GET方法，也需要&lt;strong&gt;POST&lt;/strong&gt;方法。这里我们使用HTML语言中的Form来演示Bottle库对于POST请求的响应。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5109375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2AiciaXu40d95RI8m1cCVk9VmtrI7t7gHtwhVoqs25ow8Bol4vrt4Q6gQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;首先我们实现一个上传文件的窗口，如上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此处的页面为一个简单的表单提交界面，在此不做详细介绍，打开页面如下：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6427256&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2UDT2E9PPKAvO8JPkq1G3ib5dY42k4zJytlCnjF8sCOpdnHHLItz05NA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;543&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;接下来的POST响应，代码如下：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4611212&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2VA9TkCxWptibRIXqCPibYib0I8LOicGeCNEIibJichjDkPc3PRM56miaHBgyg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;从Bottle库中导入post方法和request。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;和get方法类似，使用post装饰响应函数，之后在函数体中使用request即可获取网站服务器接受到的post请求体。request.forms.get()方法可以将表单中对应Key的字符串取出，request.files.get()方法可以将表单中对应Key的文件取出，使用save方法将数据储存就实现了文件的上传。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;接下来我们进行一次测试：&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6716141&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM20iaEs2BPTOLrcTFu10OEhInRXCxmhbLBHBVoibtEkBlyIfAEZAmjQDMQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;点击上传后，我们打开服务器根目录（就是python文件的位置），查看发现文件已经上传成功！&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5665236&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZdwhGRN1ZUB3eWYicQ17RrRT258ZgNaM2cfGMtyOEslolCTj77DtuaD7b2qibK99Ekj7fJFPafQ7Ro4rorf5dd7g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;233&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9166667&quot; data-type=&quot;png&quot; data-w=&quot;60&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XicmltibFb8BlUElxV04UprFfvUW9NN7KI1qVwia9RWUlw0ibVcDsqeiaGhLXMAjN9hnUvASTWsJDqLyhN7uP7srcCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt; &lt;section&gt;&lt;p&gt;五．小结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.0057143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OibSlAV6BD9YXsF0v8ic7ZMgttibNq0wiajN0acv6AQgLN1jkk8cLn5b2S9DUuZF0Lg4tSFXYMv2CBliagAyTDYrLqw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;在完成这些功能后，你一定想把bottle部署到网络上吧，毕竟只在本地运行的话，网站又有什么作用呢？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;清华网为我们每一个网络接入点都提供了公网ip，在cmd中使用ipconfig查看ip地址，将run中的运行参数改为你的公网ip，然后在任何一台设备的浏览器上（建议手机，电脑浏览器有时候会很慢）输入ip地址和端口号(默认80)，就可以访问啦！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Bottle库还有很多强大的功能，Cookie的读写、插件的安装卸载与禁用都不在话下，也可以将Bottle部署到其他的服务器，非常简单的实现多线程，这些功能有待读者大大发掘哦！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;作者：&lt;/span&gt;&lt;span&gt;宋宋讲编程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;https://blog.csdn.net/qiqi1220/article/details/126030157&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;8&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;8&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;0&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;svg&quot; data-w=&quot;150&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/SQd7RF5caa2sRkiaG4Lib8FHMVW1Ne13lrN37SiaB2ibEDF4OD31Vxh71vWXuOC2VaWME2CltDJsGdA5LnsdhdJianUR3GkoXe1Nx/640?wx_fmt=svg&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;p mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;strong mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;加主页君微信，不仅Python技能+1&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;0&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;0&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;8&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;8&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;0&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;svg&quot; data-w=&quot;150&quot; class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/SQd7RF5caa2sRkiaG4Lib8FHMVW1Ne13lr4b5vuiaNBnGZKzQI3kAgC4XOZVFnBxvvrXI2GOpiaH06UjrJSc4fqoPBZDKzPVRicCN/640?wx_fmt=svg&quot;/&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8666666666666667&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;720&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzDNI6O6hCFBc2O6VZiaHtzQn9pYBAmTD9EaEHCDBLkxE8Pln85fKLpIy3sRib8FX0Lzoagbs8TYxC5aAgTubZyw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;p mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;主页君日常还会在个人微信分享&lt;span&gt;&lt;strong&gt;Python相关&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;资源&lt;/strong&gt;&lt;/span&gt;和&lt;strong&gt;精选&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;技术文章&lt;/strong&gt;&lt;/span&gt;，不定期分享一些&lt;span&gt;&lt;strong&gt;有意思的活动&lt;/strong&gt;&lt;/span&gt;、&lt;span&gt;&lt;strong&gt;岗位内推&lt;/strong&gt;&lt;/span&gt;以及&lt;span&gt;&lt;strong&gt;如何用技术做业余项目&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;p mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;147&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;147&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/fhujzoQe7TrFIO8Jm3ZqkmSv8hNC8lLzLF6Zs9s0oibfwtHHVibBNXxzMdZSpHaxCVm9ND86EutaUmfzHjgVic6lw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;512&quot;/&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;span&gt;加个微信，打开一扇窗&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;amp;mid=2652592440&amp;amp;idx=1&amp;amp;sn=92272ba54f2b46dd61791ce0e1df5388&amp;amp;chksm=84657172b312f864c4fa76917e77a3e063c36c7ac15c2dc37f5cedaa0277220d865baae81552&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;最全整理！37 个 Python Web 开发框架总结&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;最全整理！37 个 Python Web 开发框架总结&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;amp;mid=2652596871&amp;amp;idx=1&amp;amp;sn=cedf5f3f4ab29176af984bcfa5799ab3&amp;amp;chksm=846542cdb312cbdb25fcd01d8b819b410d7f85d1258f3c83150b0c80286a303933f31076f66f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;For-else：Python中一个奇怪但有用的特性&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;For-else：Python中一个奇怪但有用的特性&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;amp;mid=2652597282&amp;amp;idx=1&amp;amp;sn=39153237012a7c209394775edc3944c3&amp;amp;chksm=84654468b312cd7e37799d7903f2e6f46b2a7bca157b616aa5addcbcee25a12facd9f4adf416&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;比默认的 Python shell 好太多，IPython 实用小技巧合集&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;比默认的 Python shell 好太多，IPython 实用小技巧合集&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;觉得本文对你有帮助？请分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;推荐关注「Python开发者」，提升Python技能&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MzA4MjEyNTA5Mw==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fhujzoQe7TpvdeLibiaAmU69kV0SyJIicdHKNjs7Cj55MMnHdNdX7mLRzmODUgfYTIb6pQXe10QcibSsPpHib7Ap7rw/0?wx_fmt=png&quot; data-nickname=&quot;Python开发者&quot; data-alias=&quot;PythonCoder&quot; data-signature=&quot;点击获取精选Python开发资源。「Python开发者」日常分享 Python 相关的技术文章、实用案例、工具资源、精选课程、热点资讯等。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;

          

          



                    
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d1607ed04603f6a47a4bc80a03dec653</guid>
<title>图解raft</title>
<link>https://toutiao.io/k/zppxnko</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;
&lt;header id=&quot;header&quot;&gt;
&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;

&lt;/nav&gt;
&lt;/header&gt;


&lt;/body&gt;
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2db63b691ae0141504e170bab0516fce</guid>
<title>如何做好分布式任务调度——Scheduler 的一些探索</title>
<link>https://toutiao.io/k/3aa11k3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MzI1MzYzMjE0MQ==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhkoWTP1gVm0Lqs480XOARyoSYjPEsRVCSF35cbWIp6cliaYic8KUfNfiaSjVnruzTQUTCA0lmv9vUmw/0?wx_fmt=png&quot; data-nickname=&quot;字节跳动技术团队&quot; data-alias=&quot;BytedanceTechBlog&quot; data-signature=&quot;字节跳动的技术实践分享&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;动手点关注 干货不迷路&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 👆&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;quote_container&quot;&gt;&lt;p&gt;作者：张宇轩，章逸，曾丹&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初识 Scheduler&lt;/p&gt;&lt;/section&gt;&lt;h2&gt;找准定位：分布式任务调度平台&lt;/h2&gt;&lt;p&gt;&lt;span&gt;无论是互联网应用或者企业级应用，都充斥着大量的任务。我们常常需要一些任务调度系统帮助我们解决问题。随着微服务化架构的逐步演进，单体架构逐渐演变为分布式、微服务架构。在此的背景下，很多原先的单点式任务调度平台已经不能满足业务系统的需求。于是出现了一些基于分布式的任务调度平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Scheduler 是飞书内的分布式任务调度平台。分布式任务调度能力主要包括：&lt;/span&gt;&lt;/p&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分布式：平台是分布式部署的，各个节点之间可以无状态和无限的水平扩展（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;保证可扩展）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务调度：涉&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;及到任务状态管理、任务调度请求的发送与接收、具体任务的分配、任务的具体执行；（集群中哪些机器什么时候执行什么任务，所以又需要一个可以感知整个集群运行状态的配置中心）；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;配置中心：可以感知整个集群的状态、任务信息的注册。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;摸清脉络：Scheduler的结构和核心模块&lt;/h2&gt;&lt;blockquote data-type=&quot;quote_container&quot;&gt;&lt;p&gt;&lt;strong&gt;名词解释：&lt;/strong&gt;&lt;/p&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Processor: 编程处理器, 拥有一定的编程规范, 用户自定义实现。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Executor: 一个 SDK，运行 Processor 的进行容器，与 Scheduler 通信的载体。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Job：用户创建的任务，其中包含任务的调度规则、调度模型、执行器名称等信息。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Instance：运行态的Job，每当Job触发后会生成一个Instance，记录本次执行的调度信息。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Task：最小执行单元，不同调度模型的任务产生的Task数量不同。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.7116071428571429&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4sSGiaIXXWIYibdzfKibuy2boZI1K4gXF8DogCMg32ic7zeia7bu38fwOnEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1120&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;通过架构图可以发现，Scheduler主要有以下三个部分：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;调度器 (Scheduler)：任务调度中心，负责管理任务的生命周期。接受任务注册，准时准确找出待触发的任务，进行任务拆分下发。找出与之关联的执行器并下发对应任务；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;执行器 (Executor)：接收调度任务，并将自身状态上报给调度器；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;控制台 (Web 前端)：负责配置执行器的信息以及调度任务的配置、任务状态、信息展示。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;因此，我们可以用一句话解释清楚 Scheduler 所做的事情，即：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;在「指定时间」「通知执行器」以「指定方式」执行任务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这句话中包含了三个关键点，也分别代表着 Scheduler 的三个核心模块：&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;指定时间&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：任务的触发规则，如：每天早上8点、每周二、每月15号等。&lt;strong&gt;触发器模块&lt;/strong&gt;（Launcher Cron）负责任务触发；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;指定方式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：任务的执行形式，如：单播任务-指定一个机器执行；广播任务-指定所有机器执行；分片任务-任务分阶段分批的执行。&lt;strong&gt;分派器模块&lt;/strong&gt;（Assignment Cron）负责任务的执行方式；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;通知执行器&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：将任务发送到指定执行器，执行任务。&lt;strong&gt;派遣器模块&lt;/strong&gt;（Dispatcher Cron）负责任务的发送，采用流式通信，调度器以&lt;strong&gt;推送&lt;/strong&gt;的方式将任务发送给执行器。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;在一个Job的调度周期中，各个模块各司其职，整个流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.209375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4A59zI8eK454p5icQjusOLRykMWwGiah7PwmDn98liaicicJx6ibYuKWhnzWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;拥有这三个核心模块后，Scheduler 已具备了成熟的任务调度功能。另外，为了增加 Scheduler 的稳定性，有额外两个模块为其保驾护航：&lt;/span&gt;&lt;/section&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;健康管理模块&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; (Service Health Cron): 负责管理 Job 的生命周期，检测未正常派发执行的 Job、Instance 和 Task，并将结果上报给运维人员。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;任务进度刷新模块&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; (Task Cron): 异步更新 Task 状态，流量较高时进行削峰，保证依赖的 mysql 及 redis 不因为流量过高而出现问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;本篇文章不对 Scheduler 所支持的定时任务能力作赘述，而是从三个方面（&lt;strong&gt;易用性、多功能性、稳定性&lt;/strong&gt;）介绍 Scheduler 对于分布式任务调度的思考和探索：&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;「易用性」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;: 决定了用户是否选择使用该框架的意愿，一个好的框架必须是易用且快速接入的；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;「多功能性」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;: 接入方需求多种多样，要站在用户角度想问题，不能闭门造车；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;「稳定性」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;: 对于分布式任务调度平台来说，不仅仅局限于自身的稳定性，接入方的稳定性也十分重要。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;换位思考-快速接入&lt;/h1&gt;&lt;h2&gt;背景：效率至上，时间是金&lt;/h2&gt;&lt;p&gt;&lt;span&gt;以字节跳动内部为例，当前团队想要实现一个定时任务有多种方式：接入字节云的 cronjob 平台、自己实现一套定时任务框架或者接入第三方定时任务框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于第一种接入 cronjob 平台，每一种定时任务都需要注册各自的 psm 和运行时环境（镜像），当任务需要访问依赖资源如 redis/db 等时，需要各自添加授权。任务代码逻辑有变化时也需要各自升级，导致开发、管理起来较为复杂。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于第二种自己实现一套定时任务框架，不仅整体开发时间较长，且需要大量时间进行测试回归来保证框架的稳定性。如果项目内使用到的定时任务较多，那么自身研发一套框架用途也较广泛；若项目中使用到的定时任务较少，则 ROI 较低，很多时候也只是为了造轮子而造轮子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，大多数项目面对增加定时任务的需求时，都会寻求直接接入第三方成熟的定时任务框架。对于他们来说，是否易于接入、与现有代码联系是否紧密、调试是否方便是很重要的选取指标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于这种背景，Scheduler 在设计时就站在了接入方的角度，思考了如何让接入方能够在最短时间内以最低成本接入 Scheduler，实现自己的定时任务。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;分析：站在用户角度想问题&lt;/h2&gt;&lt;p&gt;&lt;span&gt;站在接入方角度，对定时任务框架进行选型时最关注的几个点无非是定时任务执行准确性、最高支持 qps、定时设置多样性、接入成本这几个。对于前两个指标，Scheduler 目前接入业务方 50+，日均调度任务 20w+ 次，与公司内其他第三方定时任务框架相比也较有竞争性，同时对于后两个关注点，Scheduler 也有自己的风格。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;丰富的调度设置&lt;/h2&gt;&lt;p&gt;&lt;span&gt;一般的定时任务框架只支持 crontab 表达式，例如 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;0 1 * * *&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; ，代表每天凌晨一点执行一次。cronTab 功能强大，但是若配置复杂的定时策略，有一定学习成本，且可读性不高。因此，鉴于这种情况，Scheduler 在 crontab 之上设计了更易读更强大的定时策略，做到所见即所得。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-wrap=&quot;false&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;startTime&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;1648029600000&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;timeZone&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;repeatLevel&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;month&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;repeatInterval&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;repeatDays&quot;&lt;/span&gt;:[&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;23&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;start_time: 开始时间戳，在此之前定时任务不会执行，到达该时间后会执行第一次&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;timeZone: 时区设置，根据当前设置的时区准确派发&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;repeatLevel: 重复级别，目前可以设置按「小时」、「天」、「月」、「周」、「年」以及「工作日」进行重复&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;repeatInterval: 重复间隔，代表每隔 $repertInterval $repeatLevel 执行一次&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;repeatDays: 重复天数，重复级别是周或月时生效&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;因此，该设置所代表的定时间隔为：&lt;strong&gt;每两月的3、5、23号触发一次&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;table data-ace-table-col-widths=&quot;178&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;strong&gt;触发时间（北京时间）&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;2022-03-23 18:00:00&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;2022-05-03 18:00:00&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;2022-05-05 18:00:00&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;2022-05-23 18:00:00&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;span&gt;为什么要做工作日调度&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;可能有同学注意到，Scheduler 对于重复级别的支持十分丰富，不仅可以按照普通的年、月、日等级别进行设置，还可以按照工作日进行重复调度（例如每两个工作日执行一次），这归因在 Scheduler 孵化于字节跳动内部企业服务系统，为诸如人事系统、权限系统等 ToB 服务提供定时任务能力。往往 ToB 客户的需求复杂多变，因此，需要提前具备更多能力，才能更好地服务好 ToB 客户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Scheduler 在调研接入方需求时，得到了有些客户对于定时提醒这类任务的需求是尽量不要在「非工作日」打扰。于是，Scheduler 决定增加工作日调度选项来适配客户潜在需求，也侧面说明了 Scheduler 为了让接入方更快更小成本接入做出的努力。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;轻松的使用方式&lt;/h2&gt;&lt;p&gt;&lt;span&gt;相信「开箱即用」对于人们在采买诸如家电、数码产品时，是十分重要的一个考核指标。而对于对外提供的服务 or 框架，亦是如此。Scheduler 的目标就是让接入方能够在短时间熟悉 Scheduler、编写测试代码以及上线定时任务。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;专注业务&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;如果想实现一个定时任务，接入方只需要三步：引入 Scheduler sdk，绑定相应 processor，在 process 接口中实现具体业务逻辑。同时，由于定时任务的实现位于原代码中，启动配置无需更改，本地测试也较为便捷。同时，在字节跳动环境下，无需新增 psm、授权配置等，尽可能做到了「开箱即用」。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-wrap=&quot;false&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;code.byted.org/apaas/scheduler_sdk/executor&quot;&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    executorSvc, err := executor.NewExecutor(executor.NewDefaultExecutorConfig(), &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &amp;amp;HelloWorld{}) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__built_in&quot;&gt;panic&lt;/span&gt;(err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err = executorSvc.Run(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__built_in&quot;&gt;panic&lt;/span&gt;(err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; HelloWorld &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ProcessorApiName &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(h *HelloWorld)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;GetApiName&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; h.ProcessorApiName&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(h *HelloWorld)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SimpleProcess&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, tc *executor.TaskContext)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(err error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   tc.LogInfo(ctx, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;快速运维&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;没有程序员想主动写出 bug，但问题总是会突然出现。如何在出现问题时快速运维、快速止损，是所有工程师都追求的目标。Scheduler 在这方面做了几种尝试：&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;报警更直观&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;用户可以在创建 job 时，可以选择配置报警机器人，并把 Scheduler 机器人拉入对应报警群组。当检测到对应 job 出现问题时，Scheduler 机器人会把相应报警推送到对应群组，做到实时响应。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;状态更清晰&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;目前 task 的相关状态如下，当一个 task 长期没有到终态时，根据状态码即可知 task 目前处于什么状&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;态，从而推断是哪一步骤出了问题。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;&amp;quot;状态码&amp;quot;&quot;&gt;状态码&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;状态&amp;quot;&quot;&gt;状态&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;100&quot;&gt;100&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;等待触发&amp;quot;&quot;&gt;等待触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;101&quot;&gt;101&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;Ready 就绪态，等待推送&amp;quot;&quot;&gt;Ready 就绪态，等待推送&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;201&quot;&gt;201&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;推送到 Executor，还未实际执行（任务太多排队）&amp;quot;&quot;&gt;推送到 Executor，还未实际执行（任务太多排队）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;202&quot;&gt;202&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;执行中&amp;quot;&quot;&gt;执行中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;203&quot;&gt;203&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;执行超时，逻辑复杂导致&amp;quot;&quot;&gt;执行超时，逻辑复杂导致&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;301&quot;&gt;301&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;执行成功&amp;quot;&quot;&gt;执行成功&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;302&quot;&gt;302&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;执行失败&amp;quot;&quot;&gt;执行失败&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;401&quot;&gt;401&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;Ready 超时，没有 Executor 拉取&amp;quot;&quot;&gt;Ready 超时，没有 Executor 拉取&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;402&quot;&gt;402&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;推送到 Executor 后长期未执行 &amp;quot;&quot;&gt;推送到 Executor 后长期未执行&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;403&quot;&gt;403&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;执行超时，Executor 宕机导致&amp;quot;&quot;&gt;执行超时，Executor 宕机导致&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;并且一些 Scheduler 常见的报错也做了封装，帮助快速定位问题，例如&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;&amp;quot;错误码&amp;quot;&quot;&gt;错误码&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;错误原因&amp;quot;&quot;&gt;错误原因&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;&amp;quot;k_sc_ec_000004&amp;quot;&quot;&gt;k_sc_ec_000004&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;找不到任务{{.jobApiName}}&amp;quot;&quot;&gt;找不到任务{{.jobApiName}}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;&amp;quot;k_sc_ec_100004&amp;quot;&quot;&gt;k_sc_ec_100004&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;找不到任务实例{{.instanceID}}&amp;quot;&quot;&gt;找不到任务实例{{.instanceID}}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;&amp;quot;k_sc_ec_300001&amp;quot;&quot;&gt;k_sc_ec_300001&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;Processor Name 未注册{{.content}}&amp;quot;&quot;&gt;Processor Name 未注册{{.content}}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;&amp;quot;k_sc_ec_300006&amp;quot;&quot;&gt;k_sc_ec_300006&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;processor({{.content}}) 找不到对应 executor&amp;quot;&quot;&gt;processor({{.content}}) 找不到对应 executor&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;&amp;quot;k_sc_ec_400002&amp;quot;&quot;&gt;k_sc_ec_400002&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;找不到Executor {{.content}}&amp;quot;&quot;&gt;找不到Executor {{.content}}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheet-value=&quot;&amp;quot;k_sc_ec_400005&amp;quot;&quot;&gt;k_sc_ec_400005&lt;/td&gt;&lt;td data-sheet-value=&quot;&amp;quot;无权限操作&amp;quot;&quot;&gt;无权限操作&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h1&gt;并肩作战-分片任务&lt;/h1&gt;&lt;h2&gt;背景：任务越多，挑战越大&lt;/h2&gt;&lt;p&gt;&lt;span&gt;一个成熟的项目中避免不了大型批量任务，比如通过 Excel、csv 或其他数据源批量创建或更新数据，批量任务一般数据量很大，如果按照单实例串行执行，那么不能充分利用计算机资源且一次运行会消费大量时间，用户体验不友好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以 Kunlun 举例， 旧阶段的批量任务依赖于消息队列、Redis 实现，总体分为三大部分：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;解析并校验Excel，将数据解析成一条条数据，将每条消息封装成一条消息发送至消息队列；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;消费消息队列，进行创建、更新等操作，并在Redis记录总体进度并推送给用户，如果任务失败，会将行数和错误原因同时记录进redis；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;待所有数据处理结束后，如果redis中没有错误数据，则提示用户成功，否则根据错误信息生成Excel返回给用户。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;271&quot; data-backw=&quot;525&quot; data-ratio=&quot;0.5167394468704513&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4Q5AERM5D3txQMnMrMMiasnJJcoeQYK4tE2vdhW3X6z0TvnN6KPEzdaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;687&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;使用消息队列、redis的定时任务可以提速和优化用户体验，但有以下不足：&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;维护起来不方便，例如当有新服务需要此类功能时，需要自己再实现一套差不多的框架，所以需要将分片功能托管到第三方服务，而业务方只用专注于具体业务；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;依赖于消息队列和Redis两个外部组件，对两个组件的稳定性要求极高，当其中一个出现问题，都会带来不小的麻烦。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;基于这种背景，Scheduler 丰富了原本的任务调度能力，补充了分片能力，以满足复杂繁琐的任务分片处理的需求。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;分析：旧问题，新解法&lt;/h2&gt;&lt;p&gt;&lt;span&gt;若打算做出一套贴合业务需求的分片任务框架，需要先了解现阶段的分片任务的实现步骤。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现阶段的分片任务大致可以抽象成3个步骤：&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。获取数据，可以从上传的文件解析数据、从 DB 查询出大批数据或其他数据源。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。处理数据，聚焦于具体业务，如：创建、查询、更新。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。处理结果，将此次任务运行结果处理成结果报告返回给用户，报告可以为 Excel、一条消息、一封邮件等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;Scheduler 要做的事情则是替换其中分片、消息队列、Redis 的功能，做出以下抽象：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-wrap=&quot;true&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; ShardingProcessor &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   PreProcess(ctx context.Context, tc *TaskContext) error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ShardingProcess(ctx context.Context, tc *TaskContext) error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   Notify(ctx context.Context, tc *TaskContext)error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   PostProcess(ctx context.Context, tc *TaskContext) error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;PreProcess(总)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：数据准备阶段。可在此方法中对数据进行额外处理，如计算拓扑关系，定义数据优先级。单机运行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ShardingProcess(分)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：分片处理阶段。实际处理函数，多机运行。分片处理函数，执行批量导入、更新等处理。（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;入参：Scheduler 对 PreProcess 返回结果的分片子参数）&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Notify(阶段式-总)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：进度更新处理，每当进度变更的大小大于设定阈值，则生成一次 Notify 的Task。Executor 向 Scheduler 汇报子任务进度，Scheduler 计算出总体进度，当总进度发生变更后生成 NotifyTask 通知 Executor 进行处理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;PostProcess(总)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;：结果处理阶段。任务执行完毕后可在此函数进行后续处理，单机运行。当所有分片子任务都执行完后，Scheduler 会将子任务的执行结果发送到此函数处理。（&lt;strong&gt;入参：每一个子任务 ShardingProcess 后的结果数组）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;执行器需要实现ShardingProcessor接口以供调度器进行调度。调度过程如下：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;316&quot; data-backw=&quot;514&quot; data-ratio=&quot;0.614065180102916&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4icUAJ5LBx7RKYjgouRiby19HDMdvS7hV5EZq0SKeHKialepAmHZ64DiaoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;583&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Scheduler 支持分片任务重点在于丰富调度模型，提升调度器调度能力，完善执行器执行能力来达到支持分片任务的目的&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;调度侧能力&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;分批调度的能力&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;调度侧需要根据任务进度依次生成 PreTask、ProcessTask、NotifyTask、PostTask 来调度执行器 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ShardingProcessor&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 中的 PreProcess - Process - Notify - PostProcess 四个方法。单机调度 PreProcess，PostProcess，Notify，并行调度 PostProcess，总体调度呈现总-分-总的形式。调度过程如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.45234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4NwkHW1Fv8Uy7nvQoLtGWWyqIm1NGQzRIU7HhZoB8sicw5YXiaRThwkBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;数据拆分的能力&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;数据拆分即任务分片，指的是将单一任务按照特定的逻辑切分为多个&lt;strong&gt;独立的&lt;/strong&gt;子任务，将其分派到不同的节点执行，以提高任务的执行效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而 Scheduler 要处理的任务内部可能存在&lt;strong&gt;依赖关系&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;（比如 kunlun 业务中 metadata 批量创建的需求，由于存在 lookup 和 reference 字段等，记录创建之间存在拓扑关系）&lt;/span&gt;&lt;span&gt;，所以在执行时需要&lt;strong&gt;优先级&lt;/strong&gt;的概念，而不能被简单拆分为&lt;strong&gt;独立&lt;/strong&gt;的子任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了支持带优先级的任务分片，Scheduler 接收的分片任务的数据特点如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;二维数组可以是下面这样：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-wrap=&quot;true&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 第一优先级的任务&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;，可以是主键&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__number&quot;&gt;101&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 第一优先级的任务&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;，可以是SQL语句&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Insert into tablename xxx&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 第一优先级的任务&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;，可以是结构体等等...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;ID&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;999&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;zhangsan&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    [    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 第二优先级的任务&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;、&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;、...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__number&quot;&gt;102&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__number&quot;&gt;103&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;了解了待分片任务的结构，我们来讨论如何对任务进行分片。比如，分片的数量由什么决定，单个分片上的信息是如何分配的，不同分片又是不同分派到不同的处理器上的...&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分片数的确定&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分片数的确定基于以下参数的值：&lt;strong&gt;数据量&lt;/strong&gt;、任务创建时用户指定的&lt;strong&gt;单片最大数量、单片最小数量&lt;/strong&gt;，以及实际可用的&lt;strong&gt;执行器数量&lt;/strong&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分片&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;算法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分片特征值（sharding key）的选择要遵循的原则应该是&lt;strong&gt;基于最常用的访问方式&lt;/strong&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;由于 Scheduler 分片时并不关心业务数据的结构，所以选用&lt;strong&gt;数据数组的下标&lt;/strong&gt;来&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;作为分片特征值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;由于分片数量确定后，不涉及到由于分片的增加或减少对数据进行 Rehash 的情况，所以无需考虑虚拟节点、一致性哈希等方式进行分片。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里选用哈希分片的分片算法，原因是既可以均匀分布数据，实现起来也很简单。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分片的存储和派发&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分片完成后，需要给每个分片创建一个 Task，并把分片的数据存储下来。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;关于 Task 的派发，根据上面关于分片数的讨论，可以得到分片数和 Executor 数的关系：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在数据量合适的情况下（单片最大数量和单片最小数量设置合理时，是最普遍的情况），分片数和Executor 的数目是一致的；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当数据量很小时，会出现分片数小于 Executor 数；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当数据量很大时，会出现分片数大于 Executor 数，甚至可能是后者的几倍。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;为了让各个 Task / 各个分片 能够均匀派发给各个 Executor，也为了避免某个executor挂掉时，其他Executor 不能均匀分摊挂掉的节点原先承担的分片，需要采用合理的分片策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在分片时，我们保证了各分片的数据是尽量均匀分布的，所以从分片到 Executor 的分派方式可以尽可能地简单，采用平均分配的策略即可。对于挂掉的节点所承担的分片，也采用同样的策略派发到存活的 Executors 上即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如:&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;有3个 Executor，分成9片，则每个 Executor 分到的分片是: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;1=[0,1,2], 2=[3,4,5], 3=[6,7,8]&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果Executor 1挂掉，则将1的分片&lt;em&gt;平均分配*&lt;/em&gt; 到Executor 2、3: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;2=[0,1,3,4,5], 3=[2,6,7,8]&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-type=&quot;quote_container&quot;&gt;&lt;p&gt;&lt;strong&gt;平均分配*&lt;/strong&gt;：对于不能均分的情况，为了避免靠前的 Executor 总是承担更多的压力，可以根据待分配分片数量的奇偶来决定是升序分派还是降序分派。&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;span&gt;进度通知的能力&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Scheduler 支持通知 Executor 任务执行的整体进度&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Executor 上报子任务进度至 Scheduler；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Scheduler 计算总任务进度；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;总任务进度发生变化，则生成 NotifyTask 发送至 Executor。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3936651583710407&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4n9hTBcxHUJMR06QpDiaiaQQIbAeyB2zKuJ8Zk6m0Qd8K1iavp4Fibf27rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;663&quot;/&gt;&lt;/section&gt;&lt;h2&gt;执行侧分批执行的能力&lt;/h2&gt;&lt;p&gt;&lt;span&gt;执行侧需要实现并注册 SDK 提供的ShardingProcessor接口，来处理由调度侧发来的多种类型的Task。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;PreProcess&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;预处理方法，可以进行但不限于以下的操作：&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;启动参数不符合 Scheduler 规定格式，可以通过 PreProcess 方法进行一次转换；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据存在导入优先级，可以在 PreProcess 中编写计算拓扑关系的方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-type=&quot;quote_container&quot;&gt;&lt;p&gt;如果不需要预处理，可直接在方法内 return，分片时数据使用启动时的 Data&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;func&lt;/span&gt; (&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;s&lt;/span&gt; *&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ShardingProcessor&lt;/span&gt;) &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;PreProcess&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Context&lt;/span&gt;, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;tc&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;taskContext&lt;/span&gt;) &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;error&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attribute&quot;&gt;oldData &lt;/span&gt;:= tc.&lt;span class=&quot;code-snippet__built_in&quot;&gt;GetData&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 用户业务, 数据处理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    newData := &lt;span class=&quot;code-snippet__built_in&quot;&gt;Transform&lt;/span&gt;(oldData)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    // 返回带拓扑排序的数据&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    tc.&lt;span class=&quot;code-snippet__built_in&quot;&gt;SetResult&lt;/span&gt;(newData)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    return nil&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ShardingProcess&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分片处理函数，主要是进行数据更新、创建操作。ShardingProcess 的入参是切分后的数组（&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[]interface{}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;）。Executor 需要对参数进行两部分额外处理：&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;将 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;[]interface{} &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;中的 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;interface{} &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;断言成具体 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;struct{}&lt;/strong&gt;&lt;span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;处理后。计算当前子任务执行进度，进行上报；如果省略上报，服务端以分片粒度生成 NotifyTask通知执行器。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code data-wrap=&quot;true&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(s *ShardingProcessor)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ShardingProcess&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, tc taskContext)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   taskData := tc.GetData()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, data := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; taskData{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   tc.SetResult(...)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;PostProcess&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接受所有分片处理结果，进行后续处理，如生成错误文件。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-wrap=&quot;false&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(s *ShardingProcessor)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PostProcess&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, tc taskContext)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;error&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    taskData := tc.GetData()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, result := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; taskData{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    tc.SetResult(...)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Notify&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提供给子任务上报的能力，Scheduler 会根据所有子任务上报结果计算进度，通知 Executor，&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;通知粒度为数据条数&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;。如果接入方不主动上报子任务进度，Scheduler 会根据子任务完成度进行通知，&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;通知粒度为分片粒度&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;分片任务流程&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.2342342342342343&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4crI1FmJdqIhxe9Dod49EtUH6R3mJibzaJ9vaGYmZ5b8T2Tl7Ycz6oKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;444&quot;/&gt;&lt;/p&gt;&lt;h1&gt;削峰填谷-流量控制&lt;/h1&gt;&lt;h2&gt;背景：提供能力，而非施加压力&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在 Scheduler 设计初期时，更多的是把注意力放在了如何能够快速、准确、低延迟的触发任务，为此还多次优化了触发器、分派器、派遣器三大模块的轮询逻辑，但是忽略了任务量过大时下游能否抗住流量的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果 Scheduler 在调度时无法准确感知下游压力，那么很容易将下游打挂，如：在定时任务首次上线时，因为 kunlun 的装包机制导致数千个应用下配置了同样的定时任务，虽然一个包内的数十个定时任务触发时间分散，但是应用包之间的同一个任务触发时间相同，导致下游需要在同一时刻处理数千个任务，再加上任务的处理流程还会通过消息中间件进行扩散，导致数据库在任务执行阶段一直处理低IDLE 阶段。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;分析：流量追踪，剥茧抽丝&lt;/h2&gt;&lt;section&gt;&lt;span&gt;目前大部分后端服务，通过分析任务的流量走向，可以大致确认每一条任务在执行过程中不论扩散还是非扩散流量都会走向DB，流量图大致如图。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.24676850763807284&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv44TBZibG6RLeqgp1jF1u85r9gq99LEKlibxVxticyD0xX7MQtPJABx4NvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;851&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务的流量最终打到了 DB，所以流量控制的目标就更加清晰：对 DB 的流量控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要对 DB 进行流量控制，那么就要设定合理的指标，理论上，只要指标采纳的足够合理，就能严格、准确的控制流量，指标则需要具备以下条件：&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;实时性。能够&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;准时&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;反应数据库健康状况；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;权威性。能够&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;准确&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;反应数据库健康状况。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;优先级：实时性 &amp;gt; 权威性。当一个指标的实时性不够高，那么它的权威性就不再有价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只需要实时监听着 DB 的指标，来判断任务是立刻执行，还是延迟执行就能有效的保护 DB。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;指标选择&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;消费 metrics 的监控点，关于数据库的打点信息非常全面，能够非常轻易的获取到数据库宿主机的CPU、内存或数据库本身的连接数、查询数等指标，这些指标的权威性毋庸置疑，但是 metrics 通过将指标收集到本地代理，代理每 30s 做一次聚合发送至服务端，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;其时效性太差&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;数据库不可用因素为：大量任务触发 -&amp;gt; DB 访问流量增高 -&amp;gt; CPU idle 降低 -&amp;gt; 数据库不可用。造成 CPU idle 降低的因素为 DB 流量增高，可以将 DB 的流量作为指标进行流量控制，缺点是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;需要自己采集指标&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;指标收集&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;指标范围&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;反映 DB 压力较为直接的指标是 cpu idle，但考虑到服务部署往往多实例以及 cpu idle 采集难度大的情况，以近似指标来代替。另一方面，通过历史数据分析，DB 流量与 cpu idle 有一定的关联，因此以 DB 流量作为 DB 压力指标。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;1286&quot; data-ratio=&quot;0.7485448195576252&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4icDib3SOiaLpgJanDcpEFWuGosmEoCcQI0ib4IqibeL09iaq0spcnIY4l1ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1718&quot; data-width=&quot;1718&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;数据存储&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;参考限流的实现方案，采用单独的 Redis 存储流量数据，以 1s 为时间窗口作为 Redis key，每个时间窗口的流量作为 Redis value，每次发生 DB 操作时更新流量数据。系统中存在多个 DB，每个 DB 单独统计，在 Redis key 中加入db信息。Redis key 设置10s过期时间，查询时根据过去3个窗口的加权平均（80%/15%/5%）作为当前流量，以处理窗口交界处的突发流量。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;收集方式&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;目前 DB 流量已有 metrics 监控数据，但由于 metrics 会在本地聚合 30s 数据后上报，至少会有 30s的延迟。而造成 DB 压力大的定时任务多为短期集中触发，使用 metrics 数据会有感知不及时的问题，因此需要额外收集数据。参考 DB metrics 数据采集的方式，通过 Gorm 的 callback 机制插入具体的采集逻辑，减少对业务代码的侵入。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-wrap=&quot;true&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SetMonitorCallBack&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(db *gorm.DB)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   db.Callback().Create().Before(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;gorm:before_create&quot;&lt;/span&gt;).Register(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metric:before_create&quot;&lt;/span&gt;, beforeCreateCallback)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   db.Callback().Delete().Before(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;gorm:before_delete&quot;&lt;/span&gt;).Register(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metric:before_delete&quot;&lt;/span&gt;, beforeDeleteCallback)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;beforeCreateCallback&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(scope *gorm.Scope)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    beforeCallback(scope, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;create&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;beforeCallback&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(scope *gorm.Scope, method &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;在采集逻辑上，需要考虑以下几个问题：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-wrap=&quot;true&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MetricType &lt;span class=&quot;code-snippet__keyword&quot;&gt;int8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  QueryCount MetricType = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; DBMetric &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DBName   &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DBMethod &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Type MetricType&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Timestamp &lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Value     &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;beforeCallback&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(scope *gorm.Scope, method &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dbName := getStringValueFromCtx(scope.DB().Ctx, CtxVariableDBName)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    curMs := time.Now().UnixNano()/&lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;(time.Millisecond)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    metric := DBMetric{dbName, method, QueryCount, curMs, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; ch &amp;lt;- metric:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;metricAgent&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    windowSize := &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    aggrMetrics := &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;int64&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]DBMetric&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    timer := time.NewTicker(windowSize)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       timer.Stop()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; msg := &amp;lt;-ch:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           curWindow := curMs/windowSize&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           更新aggrMetrics中curWindow对应的metric（对queryCount来说是加&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;）&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-timer.C:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           将aggrMetrics中key+windowSize&amp;lt;=curTime的数据上报并清除&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;运维成本：采集逻辑会运行在各个服务上，考虑到后续会收集更多的指标，直接上报 Redis 需要给各个服务开通读写权限，运维管理成本较高。基于此，使用额外的服务来管理指标数据，接收上报的指标数据存入 Redis，并通过接口的方式提供查询服务。指标存放在更加聚焦在DB资源的resource 服务中，在 resource 服务中通过增加接口的方式实现指标数据的管理功能，同时，为了不影响 resource 原有业务的稳定性，使用单独的集群提供服务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8130563798219584&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4kOfmWjv1vpJJGG03BYUjTNV1U1zU6feGtalm5Wp1mNa3oEQs2fvkvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;674&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span data-meta-block-props=&quot;{&amp;quot;blockType&amp;quot;:&amp;quot;DIAGRAM_BLOCK&amp;quot;,&amp;quot;initData&amp;quot;:&amp;quot;%7B%22data%22%3A%7B%22mxCellList%22%3A%5B%22Xfazc13W%22%2C%22Pect1uf9%22%2C%22IzcPPDCM%22%2C%22dKVFLhD7%22%2C%22y9MiJU2P%22%2C%221UWkGJ8U%22%2C%22cZiSN9SC%22%2C%221xAmiJGI%22%2C%22BqbtgSQN%22%2C%22saeOpCAs%22%2C%22AqV2vvLC%22%2C%22IwQZXnox%22%2C%22G11qs1VY%22%2C%22euPp4iCQ%22%2C%22Wq3ezNTp%22%2C%22oKbWjFpV%22%2C%22tkfJr3ne%22%2C%22h9QvUkVa%22%2C%22Oi2BPCn8%22%2C%22o31bDaCF%22%2C%225Ipy4vFs%22%2C%226tMpMM21%22%2C%22ISZYlo1D%22%2C%22rVZr7hBi%22%2C%224ZD4SYXv%22%2C%22cqRlqkVT%22%2C%22oiLT6GWI%22%2C%22oMOyPYSk%22%2C%22rCj21opl%22%2C%2287jAkrS5%22%2C%22FpSoaVYM%22%2C%22ROD88lM4%22%2C%22Oj3VFKah%22%2C%22eBKTH4D0%22%2C%22TaG2Gi4M%22%2C%221VuHPxBA%22%2C%22yF8bVHdP%22%2C%22Mo4BlpfR%22%5D%2C%22mxGraphModel%22%3A%7B%22arrows%22%3A%221%22%2C%22connect%22%3A%221%22%2C%22dx%22%3A%22946%22%2C%22dy%22%3A%22549%22%2C%22fold%22%3A%221%22%2C%22grid%22%3A%221%22%2C%22gridSize%22%3A%2210%22%2C%22guides%22%3A%221%22%2C%22page%22%3A%221%22%2C%22pageHeight%22%3A%221169%22%2C%22pageScale%22%3A%221%22%2C%22pageWidth%22%3A%22827%22%2C%22tooltips%22%3A%221%22%7D%2C%22mxCellMap%22%3A%7B%221UWkGJ8U%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22width%22%3A%2290%22%2C%22x%22%3A%22224%22%2C%22y%22%3A%22365%22%7D%2C%22id%22%3A%221UWkGJ8U%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3BfillColor%3D%23FFE6CC%3B%22%2C%22value%22%3A%22%u6027%u80FD%u6570%u636E%u91C7%u96C6%22%2C%22vertex%22%3A%221%22%7D%2C%221VuHPxBA%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2215%22%2C%22width%22%3A%2277%22%2C%22x%22%3A%22531%22%2C%22y%22%3A%22245%22%7D%2C%22id%22%3A%221VuHPxBA%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3Brotation%3D30%3B%22%2C%22value%22%3A%22%u6027%u80FD%u6570%u636E%u67E5%u8BE2%22%2C%22vertex%22%3A%221%22%7D%2C%221xAmiJGI%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2260%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22194%22%2C%22y%22%3A%22525%22%7D%2C%22id%22%3A%221xAmiJGI%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22shape%3Dmxgraph.flowchart.database%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3BfillColor%3D%23ffffff%3BstrokeColor%3D%23000000%3BstrokeWidth%3D2%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%224ZD4SYXv%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%22150%22%2C%22width%22%3A%22250%22%2C%22x%22%3A%22373%22%2C%22y%22%3A%2270%22%7D%2C%22id%22%3A%224ZD4SYXv%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%225Ipy4vFs%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22width%22%3A%2290%22%2C%22x%22%3A%22534%22%2C%22y%22%3A%22349%22%7D%2C%22id%22%3A%225Ipy4vFs%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%u8D44%u6E90%u8DEF%u7531%22%2C%22vertex%22%3A%221%22%7D%2C%226tMpMM21%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22width%22%3A%2290%22%2C%22x%22%3A%22634%22%2C%22y%22%3A%22349%22%7D%2C%22id%22%3A%226tMpMM21%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3BfillColor%3D%23FFE6CC%3B%22%2C%22value%22%3A%22%u6027%u80FD%u6570%u636E%u7BA1%u7406%22%2C%22vertex%22%3A%221%22%7D%2C%2287jAkrS5%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22483%22%2C%22y%22%3A%2279%22%7D%2C%22id%22%3A%2287jAkrS5%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22Scheduler%22%2C%22vertex%22%3A%221%22%7D%2C%22AqV2vvLC%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22204%22%2C%22y%22%3A%22294%22%7D%2C%22id%22%3A%22AqV2vvLC%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22Metadata%22%2C%22vertex%22%3A%221%22%7D%2C%22BqbtgSQN%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2260%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22263%22%2C%22y%22%3A%22525%22%7D%2C%22id%22%3A%22BqbtgSQN%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22shape%3Dmxgraph.flowchart.database%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3BfillColor%3D%23ffffff%3BstrokeColor%3D%23000000%3BstrokeWidth%3D2%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%22FpSoaVYM%22%3A%7B%22-0-mxGeometry%22%3A%7B%22-0-mxPoint%22%3A%7B%22as%22%3A%22sourcePoint%22%2C%22x%22%3A%22568.75%22%2C%22y%22%3A%22420%22%7D%2C%22-1-mxPoint%22%3A%7B%22as%22%3A%22targetPoint%22%2C%22x%22%3A%22568.25%22%2C%22y%22%3A%22490%22%7D%2C%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22relative%22%3A%221%22%2C%22width%22%3A%2250%22%7D%2C%22edge%22%3A%221%22%2C%22id%22%3A%22FpSoaVYM%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22endArrow%3Dclassic%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%7D%2C%22G11qs1VY%22%3A%7B%22-0-mxGeometry%22%3A%7B%22-0-mxPoint%22%3A%7B%22as%22%3A%22sourcePoint%22%2C%22x%22%3A%22214.5%22%2C%22y%22%3A%22445%22%7D%2C%22-1-mxPoint%22%3A%7B%22as%22%3A%22targetPoint%22%2C%22x%22%3A%22214%22%2C%22y%22%3A%22515%22%7D%2C%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22relative%22%3A%221%22%2C%22width%22%3A%2250%22%7D%2C%22edge%22%3A%221%22%2C%22id%22%3A%22G11qs1VY%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22endArrow%3Dclassic%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%7D%2C%22ISZYlo1D%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2260%22%2C%22x%22%3A%22599%22%2C%22y%22%3A%22314%22%7D%2C%22id%22%3A%22ISZYlo1D%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22resource%22%2C%22vertex%22%3A%221%22%7D%2C%22IwQZXnox%22%3A%7B%22-0-mxGeometry%22%3A%7B%22-0-mxPoint%22%3A%7B%22as%22%3A%22sourcePoint%22%2C%22x%22%3A%22154%22%2C%22y%22%3A%22445%22%7D%2C%22-1-mxPoint%22%3A%7B%22as%22%3A%22targetPoint%22%2C%22x%22%3A%22153.5%22%2C%22y%22%3A%22515%22%7D%2C%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22relative%22%3A%221%22%2C%22width%22%3A%2250%22%7D%2C%22edge%22%3A%221%22%2C%22id%22%3A%22IwQZXnox%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22endArrow%3Dclassic%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%7D%2C%22IzcPPDCM%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%22150%22%2C%22width%22%3A%22250%22%2C%22x%22%3A%2294%22%2C%22y%22%3A%22285%22%7D%2C%22id%22%3A%22IzcPPDCM%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%22Mo4BlpfR%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2215%22%2C%22width%22%3A%2277%22%2C%22x%22%3A%22416%22%2C%22y%22%3A%22367.5%22%7D%2C%22id%22%3A%22Mo4BlpfR%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22%u6027%u80FD%u6570%u636E%u4E0A%u62A5%22%2C%22vertex%22%3A%221%22%7D%2C%22Oi2BPCn8%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22623%22%2C%22y%22%3A%22499%22%7D%2C%22id%22%3A%22Oi2BPCn8%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22redis%22%2C%22vertex%22%3A%221%22%7D%2C%22Oj3VFKah%22%3A%7B%22-0-mxGeometry%22%3A%7B%22-0-mxPoint%22%3A%7B%22as%22%3A%22sourcePoint%22%2C%22x%22%3A%22689.25%22%2C%22y%22%3A%22420%22%7D%2C%22-1-mxPoint%22%3A%7B%22as%22%3A%22targetPoint%22%2C%22x%22%3A%22688.75%22%2C%22y%22%3A%22490%22%7D%2C%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22relative%22%3A%221%22%2C%22width%22%3A%2250%22%7D%2C%22edge%22%3A%221%22%2C%22id%22%3A%22Oj3VFKah%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22endArrow%3Dclassic%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%7D%2C%22Pect1uf9%22%3A%7B%22id%22%3A%22Pect1uf9%22%2C%22parent%22%3A%22Xfazc13W%22%7D%2C%22ROD88lM4%22%3A%7B%22-0-mxGeometry%22%3A%7B%22-0-mxPoint%22%3A%7B%22as%22%3A%22sourcePoint%22%2C%22x%22%3A%22629.25%22%2C%22y%22%3A%22420%22%7D%2C%22-1-mxPoint%22%3A%7B%22as%22%3A%22targetPoint%22%2C%22x%22%3A%22628.75%22%2C%22y%22%3A%22490%22%7D%2C%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22relative%22%3A%221%22%2C%22width%22%3A%2250%22%7D%2C%22edge%22%3A%221%22%2C%22id%22%3A%22ROD88lM4%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22endArrow%3Dclassic%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%7D%2C%22TaG2Gi4M%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2215%22%2C%22width%22%3A%2257%22%2C%22x%22%3A%22510%22%2C%22y%22%3A%22260%22%7D%2C%22id%22%3A%22TaG2Gi4M%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3Brotation%3D30%3B%22%2C%22value%22%3A%22%u8DEF%u7531%u67E5%u8BE2%22%2C%22vertex%22%3A%221%22%7D%2C%22Wq3ezNTp%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22124%22%2C%22y%22%3A%22549%22%7D%2C%22id%22%3A%22Wq3ezNTp%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22DB%22%2C%22vertex%22%3A%221%22%7D%2C%22Xfazc13W%22%3A%7B%22id%22%3A%22Xfazc13W%22%7D%2C%22cZiSN9SC%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2260%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22124%22%2C%22y%22%3A%22525%22%7D%2C%22id%22%3A%22cZiSN9SC%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22shape%3Dmxgraph.flowchart.database%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3BfillColor%3D%23ffffff%3BstrokeColor%3D%23000000%3BstrokeWidth%3D2%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%22cqRlqkVT%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%22100%22%2C%22width%22%3A%22210%22%2C%22x%22%3A%22393%22%2C%22y%22%3A%22110%22%7D%2C%22id%22%3A%22cqRlqkVT%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%22dKVFLhD7%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%22100%22%2C%22width%22%3A%22210%22%2C%22x%22%3A%22114%22%2C%22y%22%3A%22325%22%7D%2C%22id%22%3A%22dKVFLhD7%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%22eBKTH4D0%22%3A%7B%22-0-mxGeometry%22%3A%7B%22-0-mxPoint%22%3A%7B%22as%22%3A%22sourcePoint%22%2C%22x%22%3A%22170%22%2C%22y%22%3A%22240%22%7D%2C%22-1-mxPoint%22%3A%7B%22as%22%3A%22targetPoint%22%2C%22x%22%3A%22220%22%2C%22y%22%3A%22190%22%7D%2C%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22relative%22%3A%221%22%2C%22width%22%3A%2250%22%7D%2C%22edge%22%3A%221%22%2C%22id%22%3A%22eBKTH4D0%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22source%22%3A%22IzcPPDCM%22%2C%22style%22%3A%22endArrow%3Dclassic%3Bhtml%3D1%3BexitX%3D1%3BexitY%3D0.5%3BexitDx%3D0%3BexitDy%3D0%3BentryX%3D0%3BentryY%3D0.5%3BentryDx%3D0%3BentryDy%3D0%3B%22%2C%22target%22%3A%22o31bDaCF%22%2C%22value%22%3A%22%22%7D%2C%22euPp4iCQ%22%3A%7B%22-0-mxGeometry%22%3A%7B%22-0-mxPoint%22%3A%7B%22as%22%3A%22sourcePoint%22%2C%22x%22%3A%22274.5%22%2C%22y%22%3A%22445%22%7D%2C%22-1-mxPoint%22%3A%7B%22as%22%3A%22targetPoint%22%2C%22x%22%3A%22274%22%2C%22y%22%3A%22515%22%7D%2C%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22relative%22%3A%221%22%2C%22width%22%3A%2250%22%7D%2C%22edge%22%3A%221%22%2C%22id%22%3A%22euPp4iCQ%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22endArrow%3Dclassic%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%7D%2C%22h9QvUkVa%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22width%22%3A%22102%22%2C%22x%22%3A%22592%22%2C%22y%22%3A%22494%22%7D%2C%22id%22%3A%22h9QvUkVa%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22shape%3Dcube%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3BboundedLbl%3D1%3BbackgroundOutline%3D1%3BdarkOpacity%3D0.05%3BdarkOpacity2%3D0.1%3BfillColor%3D%23E6E6E6%3Bsize%3D32%3B%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%22o31bDaCF%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%22100%22%2C%22width%22%3A%22210%22%2C%22x%22%3A%22524%22%2C%22y%22%3A%22309%22%7D%2C%22id%22%3A%22o31bDaCF%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%22%2C%22vertex%22%3A%221%22%7D%2C%22oKbWjFpV%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22194%22%2C%22y%22%3A%22549%22%7D%2C%22id%22%3A%22oKbWjFpV%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22DB%22%2C%22vertex%22%3A%221%22%7D%2C%22oMOyPYSk%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22width%22%3A%2290%22%2C%22x%22%3A%22503%22%2C%22y%22%3A%22150%22%7D%2C%22id%22%3A%22oMOyPYSk%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3BfillColor%3D%23FFE6CC%3B%22%2C%22value%22%3A%22%u6027%u80FD%u6570%u636E%u67E5%u8BE2%22%2C%22vertex%22%3A%221%22%7D%2C%22oiLT6GWI%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22width%22%3A%2290%22%2C%22x%22%3A%22403%22%2C%22y%22%3A%22150%22%7D%2C%22id%22%3A%22oiLT6GWI%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%u8D44%u6E90%u8DEF%u7531%22%2C%22vertex%22%3A%221%22%7D%2C%22rCj21opl%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2260%22%2C%22x%22%3A%22403%22%2C%22y%22%3A%22120%22%7D%2C%22id%22%3A%22rCj21opl%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22resource_sdk%22%2C%22vertex%22%3A%221%22%7D%2C%22rVZr7hBi%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22relative%22%3A%221%22%7D%2C%22edge%22%3A%221%22%2C%22id%22%3A%22rVZr7hBi%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22source%22%3A%224ZD4SYXv%22%2C%22style%22%3A%22rounded%3D0%3BorthogonalLoop%3D1%3BjettySize%3Dauto%3Bhtml%3D1%3BexitX%3D0.5%3BexitY%3D1%3BexitDx%3D0%3BexitDy%3D0%3BentryX%3D0.5%3BentryY%3D0%3BentryDx%3D0%3BentryDy%3D0%3B%22%2C%22target%22%3A%22o31bDaCF%22%7D%2C%22saeOpCAs%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2260%22%2C%22x%22%3A%22124%22%2C%22y%22%3A%22335%22%7D%2C%22id%22%3A%22saeOpCAs%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22resource_sdk%22%2C%22vertex%22%3A%221%22%7D%2C%22tkfJr3ne%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2220%22%2C%22width%22%3A%2240%22%2C%22x%22%3A%22263%22%2C%22y%22%3A%22550%22%7D%2C%22id%22%3A%22tkfJr3ne%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22DB%22%2C%22vertex%22%3A%221%22%7D%2C%22y9MiJU2P%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2250%22%2C%22width%22%3A%2290%22%2C%22x%22%3A%22124%22%2C%22y%22%3A%22365%22%7D%2C%22id%22%3A%22y9MiJU2P%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%2C%22value%22%3A%22%u8D44%u6E90%u8DEF%u7531%22%2C%22vertex%22%3A%221%22%7D%2C%22yF8bVHdP%22%3A%7B%22-0-mxGeometry%22%3A%7B%22as%22%3A%22geometry%22%2C%22height%22%3A%2215%22%2C%22width%22%3A%2257%22%2C%22x%22%3A%22423%22%2C%22y%22%3A%22341%22%7D%2C%22id%22%3A%22yF8bVHdP%22%2C%22parent%22%3A%22Pect1uf9%22%2C%22style%22%3A%22text%3Bhtml%3D1%3BstrokeColor%3Dnone%3BfillColor%3Dnone%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3BwhiteSpace%3Dwrap%3Brounded%3D0%3B%22%2C%22value%22%3A%22%u8DEF%u7531%u67E5%u8BE2%22%2C%22vertex%22%3A%221%22%7D%7D%7D%2C%22diagramType%22%3A%22flowchart%22%2C%22lastEditTime%22%3A0%7D&amp;quot;,&amp;quot;props&amp;quot;:{&amp;quot;diagramType&amp;quot;:&amp;quot;flowchart&amp;quot;,&amp;quot;viewType&amp;quot;:&amp;quot;card&amp;quot;},&amp;quot;blockId&amp;quot;:&amp;quot;d70932ee-7e6d-403a-bfcb-1563dab93403&amp;quot;}&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Scheduler 调度反馈&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;流量阈值限制&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Scheduler 调度速率与 DB 负载之间的关系较为复杂，本期采用简单的阈值反馈机制，设置 DB 流量阈值，当流量超出阈值时，停止 Scheduler 当前周期调度。根据历史数据，设置阈值为5K。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;当流量未超出阈值时，不能预估任务对 DB 流量的影响，采用简单策略对任务数进行限制：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;任务数 = max(（DB流量阈值 - DB当前流量）* 100 / DB 流量阈值, 0)&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;DB路由&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;目前 Kunlun 的 DB 资源根据租户进行分配，不同租户的数据和流量会落在不同的 DB 上。Scheduler会记录 Job 所处租户，所以在调度时，需要根据租户查找真实的 DB 资源，通过 DB 指标的健康状况来决定是否派遣任务：&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;调度控制流程&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.620253164556962&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhTYhABQhe0A6BKcF0zBhv4urevd2cYIubSziaicP3CGWqJEzmwEGRQhKwRvZZia43mcr5xWwBLhBJEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI1MzYzMjE0MQ==&quot; data-alias=&quot;BytedanceTechBlog&quot; data-from=&quot;2&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/5EcwYhllQOhkoWTP1gVm0Lqs480XOARyoSYjPEsRVCSF35cbWIp6cliaYic8KUfNfiaSjVnruzTQUTCA0lmv9vUmw/0?wx_fmt=png&amp;amp;wx_head=1&quot; data-nickname=&quot;字节跳动技术团队&quot; data-signature=&quot;字节跳动的技术实践分享&quot; has-insert-preloading=&quot;1&quot; data-index=&quot;1&quot; data-origin_num=&quot;223&quot; data-is_biz_ban=&quot;0&quot; data-isban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/div&gt;

          

          



                    
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dd86dc0d8017e64370096e96d414c33e</guid>
<title>一文读懂遗传算法工作原理（附Python实现）</title>
<link>https://toutiao.io/k/s1n7zj2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;103122&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;转自：机器之心&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;近日，Analyticsvidhya 上发表了一篇题为《Introduction to Genetic Algorithm &amp;amp; their application in data science》的文章，作者 Shubham Jain 现身说法，用通俗易懂的语言对遗传算法作了一个全面而扼要的概述，并列举了其在多个领域的实际应用，其中重点介绍了遗传算法的数据科学应用。机器之心对该文进行了编译。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;几天前，我着手解决一个实际问题——大型超市销售问题。在使用了几个简单模型做了一些特征工程之后，我在排行榜上名列第 219 名。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicyZUu8hYJEyfOianQaWmGE42BicSIc6DRguB6e4Np1UdoxXibufzevjppg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1366&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然结果不错，但是我还是想做得更好。于是，我开始研究可以提高分数的优化方法。结果我果然找到了一个，它叫遗传算法。在把它应用到超市销售问题之后，最终我的分数在排行榜上一下跃居前列。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicpgJzeZPt53awiamyMSllU9HgXTibicguEIR8iciaHoByibIblFalRfwvtMIA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1366&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;没错，仅靠遗传算法我就从 219 名直接跳到 15 名，厉害吧！相信阅读完本篇文章后，你也可以很自如地应用遗传算法，而且会发现，当把它用到你自己正在处理的问题时，效果也会有很大提升。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;1、遗传算法理论的由来&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、生物学的启发&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、遗传算法定义&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、遗传算法具体步骤&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、遗传算法的应用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6、实际应用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;7、结语&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1、遗传算法理论的由来&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们先从查尔斯·达尔文的一句名言开始：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;能够生存下来的往往不是最强大的物种，也不是最聪明的物种，而是最能适应环境的物种。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你也许在想：这句话和遗传算法有什么关系？其实遗传算法的整个概念就基于这句话。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;让我们用一个基本例子来解释 ：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们先假设一个情景，现在你是一国之王，为了让你的国家免于灾祸，你实施了一套法案：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;你选出所有的好人，要求其通过生育来扩大国民数量。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这个过程持续进行了几代。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;你将发现，你已经有了一整群的好人。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个例子虽然不太可能，但是我用它是想帮助你理解概念。也就是说，我们改变了输入值（比如：人口），就可以获得更好的输出值（比如：更好的国家）。现在，我假定你已经对这个概念有了大致理解，认为遗传算法的含义应该和生物学有关系。那么我们就快速地看一些小概念，这样便可以将其联系起来理解。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2、生物学的启发&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相信你还记得这句话：「细胞是所有生物的基石。」由此可知，在一个生物的任何一个细胞中，都有着相同的一套染色体。所谓染色体，就是指由 DNA 组成的聚合体。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.646551724137931&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicUXWfsAzBOYE5AcSt4dZmwXzRfiaEjKJtoAMwte8A36xJJh4FdzYllbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;348&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统上看，这些染色体可以被由数字 0 和 1 组成的字符串表达出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9513888888888888&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicACJ2pBGIADneyoEic9nJRGe58hPwtVIYSOVzQzRF60JBPb6p1tIdOeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;288&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一条染色体由基因组成，这些基因其实就是组成 DNA 的基本结构，DNA 上的每个基因都编码了一个独特的性状，比如，头发或者眼睛的颜色。希望你在继续阅读之前先回忆一下这里提到的生物学概念。结束了这部分，现在我们来看看所谓遗传算法实际上指的是什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;3、遗传算法定义&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先我们回到前面讨论的那个例子，并总结一下我们做过的事情。&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;首先，我们设定好了国民的初始人群大小。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;然后，我们定义了一个函数，用它来区分好人和坏人。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;再次，我们选择出好人，并让他们繁殖自己的后代。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最后，这些后代们从原来的国民中替代了部分坏人，并不断重复这一过程。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;遗传算法实际上就是这样工作的，也就是说，它基本上尽力地在某种程度上模拟进化的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，为了形式化定义一个遗传算法，我们可以将它看作一个优化方法，它可以尝试找出某些输入，凭借这些输入我们便可以得到最佳的输出值或者是结果。&lt;/span&gt;&lt;span&gt;遗传算法的工作方式也源自于生物学，具体流程见下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4285714285714286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicWWGdX1VsSm5RPS8ZfyZJialP8cMYF4rbDYVDgYRmLMqxd8C3gZW78ibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;343&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么现在我们来逐步理解一下整个流程。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;4、遗传算法具体步骤&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了让讲解更为简便，我们先来理解一下著名的组合优化问题「背包问题」。如果你还不太懂，这里有一个我的解释版本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如，你准备要去野游 1 个月，但是你只能背一个限重 30 公斤的背包。现在你有不同的必需物品，它们每一个都有自己的「生存点数」（具体在下表中已给出）。因此，你的目标是在有限的背包重量下，最大化你的「生存点数」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3292867981790592&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicJXmIYksickaCVAv7RsF7XibI4HRtbwDiaK54YtSD3EnpJXz3iaZTXFJqdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;659&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;4.1 初始化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里我们用遗传算法来解决这个背包问题。第一步是定义我们的总体。总体中包含了个体，每个个体都有一套自己的染色体。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们知道，染色体可表达为二进制数串，在这个问题中，1 代表接下来位置的基因存在，0 意味着丢失。&lt;/span&gt;&lt;span&gt;（译者注：&lt;/span&gt;&lt;span&gt;作者这里借用染色体、基因来解决前面的背包问题，所以特定位置上的基因代表了上方背包问题表格中的物品，比如第一个位置上是 Sleeping Bag，那么此时反映在染色体的『基因』位置就是该染色体的第一个『基因』。&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6212389380530974&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqic1GdO92UpdDgU8fCR2aIl0JSFDQ5oyH0J3Zb8MQz2ia3Kiaj72nulmgibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;565&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在，我们将图中的 4 条染色体看作我们的总体初始值。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;4.2 适应度函数&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，让我们来计算一下前两条染色体的适应度分数。对于 A1 染色体 [100110] 而言，有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24605678233438485&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicKg5hnbkF996R2qzzN0a9qf6A8fvRCz6lowaInM9ZpWP7oqB6eqsSUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;类似地，对于 A2 染色体 [001110] 来说，有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24726134585289514&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicZO3siarbdHWzliaiafk1cn6vTtmWAa0q26SVAVt3OCArOnkMzls86sadA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于这个问题，我们认为，当染色体包含更多生存分数时，也就意味着它的适应性更强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，由图可知，染色体 1 适应性强于染色体 2。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;4.3 选择&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;现在，我们可以开始从总体中选择适合的染色体，来让它们互相『交配』，产生自己的下一代了。这个是进行选择操作的大致想法，但是这样将会导致染色体在几代之后相互差异减小，失去了多样性。因此，我们一般会进行「轮盘赌选择法」（Roulette Wheel Selection method）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6266666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicRiaTvQJibuUqzX1mjQWrU94dLkZAG1C7k780Dia2v6Q6NIWe7JOF0SPEA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想象有一个轮盘，现在我们将它分割成 m 个部分，这里的 m 代表我们总体中染色体的个数。每条染色体在轮盘上占有的区域面积将根据适应度分数成比例表达出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2406832298136646&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicZicibSxuff00qlGpKZ2ibQQVZaSOLOO6JFJIz4p1CXOwJjwI2Kz64kyCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于上图中的值，我们建立如下「轮盘」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6808510638297872&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqic3yjUfXmBnhSjtQTO2pCkJtyj82zYfseKtSGVtVtKxTg301sQenaH9Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;564&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在，这个轮盘开始旋转，我们将被图中固定的指针（fixed point）指到的那片区域选为第一个亲本。然后，对于第二个亲本，我们进行同样的操作。有时候我们也会在途中标注两个固定指针，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6459854014598541&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicvoVrWHKXCEc6EfZIDibvSmk3MvRwG1aToxbHJ7K4jd9jkF89V567hzg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;548&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这种方法，我们可以在一轮中就获得两个亲本。我们将这种方法成为「随机普遍选择法」（Stochastic Universal Selection method）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;4.4 交叉&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在上一个步骤中，我们已经选择出了可以产生后代的亲本染色体。&lt;/span&gt;&lt;span&gt;那么用生物学的话说，所谓「交叉」，其实就是指的繁殖。&lt;/span&gt;&lt;span&gt;现在我们来对染色体 1 和 4（在上一个步骤中选出来的）进行「交叉」，见下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3089983022071307&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicF0HK6n6x2aKJnZbMvQAhFoFUExMrP9r149iaXFOU3NzuicicxYuks2eng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;589&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是交叉最基本的形式，我们称其为「单点交叉」。这里我们随机选择一个交叉点，然后，将交叉点前后的染色体部分进行染色体间的交叉对调，于是就产生了新的后代。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你设置两个交叉点，那么这种方法被成为「多点交叉」，见下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3373913043478261&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicQhb7uTjNvMUibv7hXB6CrYMf8vGdWNCibvryuaUm3cO1GK8mkPdo2wsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;575&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.5 变异&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如&lt;/span&gt;&lt;span&gt;果现在我们从生物学的角度来看这个问题，那么请问：&lt;/span&gt;&lt;span&gt;由上述过程产生的后代是否有和其父母一样的性状呢？&lt;/span&gt;&lt;span&gt;答案是否。&lt;/span&gt;&lt;span&gt;在后代的生长过程中，它们体内的基因会发生一些变化，使得它们与父母不同。&lt;/span&gt;&lt;span&gt;这个过程我们称为「变异」，它可以被定义为染色体上发生的随机变化，正是因为变异，种群中才会存在多样性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图为变异的一个简单示例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18538324420677363&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqic31Mrmic55ho29H6615RwicFiboe4tM8NsvVntSvmiaibJyTPJiaScBm0DhXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;561&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;变异完成之后，我们就得到了新为个体，进化也就完成了，整个过程如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6549707602339181&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicialTJMibRI1A5qy6kSpTibZkPKVn2fjjAEQMr6aPryBPicWUL0jCic3F8rg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;513&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在进行完一轮「遗传变异」之后，我们用适应度函数对这些新的后代进行验证，如果函数判定它们适应度足够，那么就会用它们从总体中替代掉那些适应度不够的染色体。这里有个问题，我们最终应该以什么标准来判断后代达到了最佳适应度水平呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般来说，有如下几个终止条件：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在进行 X 次迭代之后，总体没有什么太大改变。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们事先为算法定义好了进化的次数。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当我们的适应度函数已经达到了预先定义的值。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好了，现在我假设你已基本理解了遗传算法的要领，那么现在让我们用它在数据科学的场景中应用一番。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;5、遗传算法的应用&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.1 特征选取&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;试想一下每当你参加一个数据科学比赛，你会用什么方法来挑选那些对你目标变量的预测来说很重要的特征呢？你经常会对模型中特征的重要性进行一番判断，然后手动设定一个阈值，选择出其重要性高于这个阈值的特征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，有没有什么方法可以更好地处理这个问题呢？其实处理特征选取任务最先进的算法之一就是遗传算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们前面处理背包问题的方法可以完全应用到这里。现在，我们还是先从建立「染色体」总体开始，这里的染色体依旧是二进制数串，「1」表示模型包含了该特征，「0 表示模型排除了该特征」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过，有一个不同之处，即我们的适应度函数需要改变一下。这里的适应度函数应该是这次比赛的的精度的标准。也就是说，如果染色体的预测值越精准，那么就可以说它的适应度更高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在我假设你已经对这个方法有点一概念了。下面我不会马上讲解这个问题的解决过程，而是让我们先来用 TPOT 库去实现它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.2 用 TPOT 库来实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个部分相信是你在一开始读本文时心里最终想实现的那个目标。即：实现。那么首先我们来快速浏览一下 TPOT 库（Tree-based Pipeline Optimisation Technique，树形传递优化技术），该库基于 scikit-learn 库建立。下图为一个基本的传递结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5243243243243243&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicic9NcTbRPVYictibQdzemqgQajicibs2kicYJiapQWnibRBXdpvxP1JpgSjT1Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;925&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图中的灰色区域用 TPOT 库实现了自动处理。实现该部分的自动处理需要用到遗传算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们这里不深入讲解，而是直接应用它。为了能够使用 TPOT 库，你需要先安装一些 TPOT 建立于其上的 python 库。下面我们快速安装它们：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code codemark=&quot;1&quot;&gt;&lt;span&gt;# installing DEAP, update_checker and tqdm &lt;br/&gt;&lt;br/&gt;&lt;/span&gt;pip install deap update_checker tqdm&lt;br/&gt;&lt;span&gt;# installling TPOT &lt;br/&gt;&lt;/span&gt;pip install tpot&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;这里，我用了 Big Mart Sales（数据集地址：https://datahack.analyticsvidhya.com/contest/practice-problem-big-mart-sales-iii/）数据集，为实现做准备，我们先快速下载训练和测试文件，以下是 python 代码：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code codemark=&quot;1&quot;&gt;&lt;span&gt;# import basic libraries&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; numpy &lt;span&gt;as&lt;/span&gt; np &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; pandas &lt;span&gt;as&lt;/span&gt; pd &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span&gt;as&lt;/span&gt; plt &lt;br/&gt;%matplotlib inline &lt;br/&gt;&lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt; preprocessing &lt;br/&gt;&lt;span&gt;from&lt;/span&gt; sklearn.metrics &lt;span&gt;import&lt;/span&gt; mean_squared_error &lt;br/&gt;&lt;span&gt;## preprocessing &lt;br/&gt;&lt;/span&gt;&lt;span&gt;### mean imputations &lt;br/&gt;&lt;br/&gt;&lt;/span&gt;train[&lt;span&gt;&#x27;Item_Weight&#x27;&lt;/span&gt;].fillna((train[&lt;span&gt;&#x27;Item_Weight&#x27;&lt;/span&gt;].mean()), inplace=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;test[&lt;span&gt;&#x27;Item_Weight&#x27;&lt;/span&gt;].fillna((test[&lt;span&gt;&#x27;Item_Weight&#x27;&lt;/span&gt;].mean()), inplace=&lt;span&gt;True&lt;/span&gt;) &lt;br/&gt;&lt;span&gt;### reducing fat content to only two categories &lt;br/&gt;&lt;br/&gt;&lt;/span&gt;train[&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;] = train[&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;].replace([&lt;span&gt;&#x27;low fat&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;LF&#x27;&lt;/span&gt;], [&lt;span&gt;&#x27;Low Fat&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Low Fat&#x27;&lt;/span&gt;]) &lt;br/&gt;train[&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;] = train[&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;].replace([&lt;span&gt;&#x27;reg&#x27;&lt;/span&gt;], [&lt;span&gt;&#x27;Regular&#x27;&lt;/span&gt;]) &lt;br/&gt;test[&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;] = test[&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;].replace([&lt;span&gt;&#x27;low fat&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;LF&#x27;&lt;/span&gt;], [&lt;span&gt;&#x27;Low Fat&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Low Fat&#x27;&lt;/span&gt;]) &lt;br/&gt;test[&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;] = test[&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;].replace([&lt;span&gt;&#x27;reg&#x27;&lt;/span&gt;], [&lt;span&gt;&#x27;Regular&#x27;&lt;/span&gt;]) &lt;br/&gt;train[&lt;span&gt;&#x27;Outlet_Establishment_Year&#x27;&lt;/span&gt;] = &lt;span&gt;2013&lt;/span&gt; - train[&lt;span&gt;&#x27;Outlet_Establishment_Year&#x27;&lt;/span&gt;] &lt;br/&gt;test[&lt;span&gt;&#x27;Outlet_Establishment_Year&#x27;&lt;/span&gt;] = &lt;span&gt;2013&lt;/span&gt; - test[&lt;span&gt;&#x27;Outlet_Establishment_Year&#x27;&lt;/span&gt;] &lt;br/&gt;&lt;br/&gt;train[&lt;span&gt;&#x27;Outlet_Size&#x27;&lt;/span&gt;].fillna(&lt;span&gt;&#x27;Small&#x27;&lt;/span&gt;,inplace=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;test[&lt;span&gt;&#x27;Outlet_Size&#x27;&lt;/span&gt;].fillna(&lt;span&gt;&#x27;Small&#x27;&lt;/span&gt;,inplace=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;train[&lt;span&gt;&#x27;Item_Visibility&#x27;&lt;/span&gt;] = np.sqrt(train[&lt;span&gt;&#x27;Item_Visibility&#x27;&lt;/span&gt;])&lt;br/&gt;test[&lt;span&gt;&#x27;Item_Visibility&#x27;&lt;/span&gt;] = np.sqrt(test[&lt;span&gt;&#x27;Item_Visibility&#x27;&lt;/span&gt;])&lt;br/&gt;&lt;br/&gt;col = [&lt;span&gt;&#x27;Outlet_Size&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Outlet_Location_Type&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Outlet_Type&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Item_Fat_Content&#x27;&lt;/span&gt;]&lt;br/&gt;test[&lt;span&gt;&#x27;Item_Outlet_Sales&#x27;&lt;/span&gt;] = &lt;span&gt;0&lt;/span&gt;combi = train.append(test)&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; col:&lt;br/&gt; combi[i] = number.fit_transform(combi[i].astype(&lt;span&gt;&#x27;str&#x27;&lt;/span&gt;))&lt;br/&gt; combi[i] = combi[i].astype(&lt;span&gt;&#x27;object&#x27;&lt;/span&gt;)&lt;br/&gt;train = combi[:train.shape[&lt;span&gt;0&lt;/span&gt;]]&lt;br/&gt;test = combi[train.shape[&lt;span&gt;0&lt;/span&gt;]:]&lt;br/&gt;test.drop(&lt;span&gt;&#x27;Item_Outlet_Sales&#x27;&lt;/span&gt;,axis=&lt;span&gt;1&lt;/span&gt;,inplace=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;## removing id variables &lt;br/&gt;&lt;br/&gt;&lt;/span&gt;tpot_train = train.drop([&lt;span&gt;&#x27;Outlet_Identifier&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Item_Type&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Item_Identifier&#x27;&lt;/span&gt;],axis=&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;tpot_test = test.drop([&lt;span&gt;&#x27;Outlet_Identifier&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Item_Type&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Item_Identifier&#x27;&lt;/span&gt;],axis=&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;target = tpot_train[&lt;span&gt;&#x27;Item_Outlet_Sales&#x27;&lt;/span&gt;]&lt;br/&gt;tpot_train.drop(&lt;span&gt;&#x27;Item_Outlet_Sales&#x27;&lt;/span&gt;,axis=&lt;span&gt;1&lt;/span&gt;,inplace=&lt;span&gt;True&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;# finally building model using tpot library&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tpot &lt;span&gt;import&lt;/span&gt; TPOTRegressor&lt;br/&gt;X_train, X_test, y_train, y_test = train_test_split(tpot_train, target,&lt;br/&gt; train_size=&lt;span&gt;0.75&lt;/span&gt;, test_size=&lt;span&gt;0.25&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;tpot = TPOTRegressor(generations=&lt;span&gt;5&lt;/span&gt;, population_size=&lt;span&gt;50&lt;/span&gt;, verbosity=&lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;tpot.fit(X_train, y_train)&lt;br/&gt;print(tpot.score(X_test, y_test))&lt;br/&gt;tpot.export(&lt;span&gt;&#x27;tpot_boston_pipeline.py&#x27;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46806569343065696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicXoE0AcP7nVvUG7ppmpEgxSIYIs0uMm5xeCjXCFObFBsiaicXOUUpV4LA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1096&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一旦这些代码运行完成，tpot_exported_pipeline.py 里就将会放入用于路径优化的 python 代码。我们可以发现，ExtraTreeRegressor 可以最好地解决这个问题。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code codemark=&quot;1&quot;&gt;&lt;span&gt;## predicting using tpot optimised pipeline&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;tpot_pred = tpot.predict(tpot_test)&lt;br/&gt;sub1 = pd.DataFrame(data=tpot_pred)&lt;br/&gt;&lt;span&gt;#sub1.index = np.arange(0, len(test)+1)&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;sub1 = sub1.rename(columns = {&lt;span&gt;&#x27;0&#x27;&lt;/span&gt;:&lt;span&gt;&#x27;Item_Outlet_Sales&#x27;&lt;/span&gt;})&lt;br/&gt;sub1[&lt;span&gt;&#x27;Item_Identifier&#x27;&lt;/span&gt;] = test[&lt;span&gt;&#x27;Item_Identifier&#x27;&lt;/span&gt;]&lt;br/&gt;sub1[&lt;span&gt;&#x27;Outlet_Identifier&#x27;&lt;/span&gt;] = test[&lt;span&gt;&#x27;Outlet_Identifier&#x27;&lt;/span&gt;]&lt;br/&gt;sub1.columns = [&lt;span&gt;&#x27;Item_Outlet_Sales&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Item_Identifier&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Outlet_Identifier&#x27;&lt;/span&gt;]&lt;br/&gt;sub1 = sub1[[&lt;span&gt;&#x27;Item_Identifier&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Outlet_Identifier&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Item_Outlet_Sales&#x27;&lt;/span&gt;]]&lt;br/&gt;sub1.to_csv(&lt;span&gt;&#x27;tpot.csv&#x27;&lt;/span&gt;,index=&lt;span&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你提交了这个 csv，那么你会发现我一开始保证的那些还没有完全实现。那是不是我在骗你们呢？当然不是。实际上，TPOT 库有一个简单的规则。如果你不运行 TPOT 太久，那么它就不会为你的问题找出最可能传递方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，你得增加进化的代数，拿杯咖啡出去走一遭，其它的交给 TPOT 就行。此外，你也可以用这个库来处理分类问题。进一步内容可以参考这个文档：http://rhiever.github.io/tpot/。除了比赛，在生活中我们也有很多应用场景可以用到遗传算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;6、 实际应用&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;遗传算法在真实世界中有很多应用。这里我列了部分有趣的场景，但是由于篇幅限制，我不会逐一详细介绍。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;6.1 工程设计&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;工程设计非常依赖计算机建模以及模拟，这样才能让设计周期过程即快又经济。遗传算法在这里可以进行优化并给出一个很好的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相关资源：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;6.2 交通与船运路线（Travelling Salesman Problem，巡回售货员问题）&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;这是一个非常著名的问题，它已被很多贸易公司用来让运输更省时、经济。解决这个问题也要用到遗传算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6237006237006237&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqicibtRICeMAAzWb0S1ibcngmP5gz40qrSzicDpvibyFRFgQXsczgww0iamCmQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;962&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6242171189979123&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqic3NymezfnfV410updqoX9JsYCFrcJ5qzp8e7mgCdvOpFshOBiaED2zuw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;958&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.3 机器人&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;遗传算法在机器人领域中的应用非常广泛。实际上，目前人们正在用遗传算法来创造可以像人类一样行动的自主学习机器人，其执行的任务可以是做饭、洗衣服等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相关资源：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;7、结语&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;希望通过本文介绍，你现在已经对遗传算法有了足够的理解，而且也会用 TPOT 库来实现它了。但是如果你不亲身实践，本文的知识也是非常有限的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，请各位读者朋友一定要在无论是数据科学比赛或是生活中尝试自己去实现它。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原文链接：https://www.analyticsvidhya.com/blog/2017/07/introduction-to-genetic-algorithm/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDC8P6KB1m4Ypg3DcCJ2icFKqic9UUhs5Qcw9MsGap2IfPt15rOwphMvA6yo7ZqicCiaoYsUYbnyz8oGFDg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          

          



                    
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bcac511453017690ef2a78ad3e25c821</guid>
<title>从单体架构迁移到 CQRS 后，我觉得 DDD 并不可怕</title>
<link>https://toutiao.io/k/5xlk9fg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;
作者 | Chunting Wu&lt;/section&gt;&lt;section&gt;
译者 | 平川&lt;/section&gt;&lt;section&gt;
策划 | 闫园园&lt;/section&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本文最初发布于 InterviewNoodle 博客。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;软件设计是一个不断发展演进的过程。每个大型系统都是从小微系统开始的。当现有的架构遇到问题而又无法解决时，系统就会开始演进。每一次演进都会伴随着一些技术上的选择。需要解决什么问题？需要付出什么样的代价？作为一名架构师或高级工程师，必须找到一种合理的演进方式，在开发进度、技术栈、团队水平等各方面都能满足条件，这样才能制定出可行的解决方案。&lt;/p&gt;&lt;p&gt;本文将介绍 CQRS（命令查询职责分离）的基本理念和要解决的问题。我们将从一个小型单体架构开始，逐步演进，像每一个软件系统的演进一样。本文将介绍每一次演进背后的原因和方法。&lt;/p&gt;&lt;section&gt;&lt;span&gt;1&lt;/span&gt; 传统单体架构&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7330210772833724&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfMrcfIJibhKU0XLKYXgCGP7KZmu8QwVf4fScJHz6EEqKtQ2WXVIryVmCN66YKgWibDm16P7BA5C1VHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;854&quot;/&gt;&lt;/p&gt;&lt;p&gt;这是最常见的系统设计。有一台 API 服务器，通常是 restful API，和一个数据库。客户端事先与后端协商好传输格式。读和写都是通过 DTO，即数据传输对象完成的。然而，后端在处理业务逻辑时需要将 DTO 转换为具有领域知识的领域对象，并使用领域对象作为数据库的存储单元。&lt;/p&gt;&lt;p&gt;为了实现读 / 写分离，在左边的写路径中，客户端向后端发送 DTO，对数据库进行 CUD（创建 / 更新 / 删除）操作，后端在处理完成后向客户端返回表示成功的 Ack 或表示失败的 Nak。通常，在 restful API 中，2xx 表示成功，4xx 表示失败。右边的读路径只是通过读请求来获得相应的 DTO。&lt;/p&gt;&lt;p&gt;再从客户端的的角度来说下 DTO 的含义。在客户端，DTO 通常包含要在屏幕上呈现的所有数据。例如，当你在社交媒体上查看自己的个人资料时，它将包括你的名字、账户和其他个人信息，以及你自己最近的活动，甚至你关注的活动。DTO 包含所有需要在这个页面上呈现的信息。&lt;/p&gt;&lt;p&gt;为什么我们要强调读 / 写分离？我们不能在读 / 写路径上使用同一个程序吗？因为我们想在将来更好地优化我们的系统。写路径有特定的优化方法，读路径也是如此。比如说，做一个缓存，在读路径上可以使用预读缓存来减少响应时间。而且，写路径可以通过写入缓存来优化。其次，也可以把写入操作异步执行。将所有 DTO 写入消息队列中，并由工作者进程负责处理，通过这种方式来处理大量的数据写入。此外，可以使用适当的数据库进行写入和读取。&lt;/p&gt;&lt;p&gt;因此，读 / 写分离是必不可少的。而且，在系统设计的早期阶段就应该考虑到这一点。写路径专注于数据的持久化；而读路径则专注于数据的查询。&lt;/p&gt;&lt;p&gt;然而，这个系统设计模型有两个主要问题：&lt;/p&gt;&lt;section&gt;
&lt;span&gt;2&lt;/span&gt; 基于任务的单体架构&lt;/section&gt;&lt;p&gt;为了解决上述传统单体架构中存在的问题，这里我们尝试引入域的概念。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7330210772833724&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfMrcfIJibhKU0XLKYXgCGP7KibjbERDf8fnZxxIY8Tz6dbibEQvZHVeW9hINXmIDleMkHtFsuwHvEb7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;854&quot;/&gt;&lt;/p&gt;&lt;p&gt;这个图与上面的图基本相同。唯一的区别是在写路径上用消息代替了 DTO。消息包含动作和数据，而不是像 DTO 那样只包含数据本身。因此，我们可以在消息中携带特定域的动作，使后端更容易识别每个动作，并有一个相应的域实现。&lt;/p&gt;&lt;p&gt;在这个阶段，CQRS 中的 C 出现了，消息就是一种命令。然而，可扩展性问题仍未得到解决。&lt;/p&gt;&lt;p&gt;另外，虽然我们简化了 DTO，改为使用消息进行通信，但在读路径上我们仍然需要 DTO。还是以社交媒体为例。在修改昵称时，消息的格式可能是{&quot;rename&quot;: &quot;LazyDr&quot;}。但是当呈现个人资料时，我们还需要额外的信息，如活动。这种信息缺口使得我们有必要在读路径上做大量的处理来获取 DTO。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;3&lt;/span&gt; CQS（命令查询分离）&lt;/section&gt;&lt;p&gt;CQS 的出现就是为了解决以上读写分离的痛点。&lt;/p&gt;&lt;p&gt;读取时，客户端需要 DTO，所以后端可以在读路径上做一些专门针对读取的优化，比如从原来的域对象预先生成 DTO，并将 DTO 存储在专门的数据库中以供读取。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.4227272727272726&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfMrcfIJibhKU0XLKYXgCGP7KBSQAnPrNdqo6JbHwtAdRGBgdXBguHwxpqygepTtrWU98F8o4ZJCKNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;440&quot;/&gt;&lt;/p&gt;&lt;p&gt;这样一来，在读路径上，应用服务的实现变得更加简单。应用服务会成为一个很薄的读取层，只负责分页、排序等工作。发出请求后，客户端很容易从数据库中检索到 DTO。&lt;/p&gt;&lt;p&gt;那么问题来了，谁来生成这些预建的 DTO 呢？这是写路径的职责。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.4227272727272726&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfMrcfIJibhKU0XLKYXgCGP7Kw2dyu414ae9shmDrg0ichYlmgS5rIB9ZmxNtyQrcYNcrvXgtU6jrC0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;440&quot;/&gt;&lt;/p&gt;&lt;p&gt;虽然这幅图与之前看到的例子类似，但实际上，除了持久化域对象，应用服务还必须持久化 DTO。换句话说，大部分的业务逻辑都压在了写路径上，它还需要准备各种读视图。&lt;/p&gt;&lt;p&gt;至此，我们已经解决了遇到的大部分问题，但扩展性问题仍然没有得到解决。现在，我们进一步明确下扩展性，主要包括两个方面：流量：写入量增加。扩展：功能需求增加，例如需要各种不同的读视图。继续以社交媒体为例，它有一个个人资料的展示，但可能有另一个按照时间线的展示。CQRS为什么写路径要负责准备读视图？写应该专注于持久化，各种读视图不应该在写路径上处理。但是，读路径上只有读，谁该准备那些读视图？&lt;/p&gt;&lt;p&gt;因此，完整的解决方案是这样的：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9031531531531531&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfMrcfIJibhKU0XLKYXgCGP7KH4cx1u9Qhld4VLu9PHmCyLR4IYjzRVyhxnnQt4I71O15YKycurh5jA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/p&gt;&lt;p&gt;左边的写路径和右边的读路径已经在 CQS 部分介绍过了。唯一的区别是增加了 Eventually，负责将写路径使用的数据库转换为读路径使用的数据库。一旦涉及到数据同步，就可能遇到数据一致性问题，所以这里列出了几种实现最终一致性的方法，按耗时从短到长排序如下：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;后台线程：典型代表是 Redis。在数据写入主节点后，Redis 会立即在后台将数据发送到的副本中。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消息队列加工作者。这是异步数据复制的一种常见做法。在写入数据库时，会创建一个事件并发送到消息队列，然后由工作者处理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提取 - 转换 - 加载：这个时间间隔最长，从几分钟到几小时不等。使用 map-reduce 或其他方法将结果写到另一边。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;无论采用哪种方法，单一真相来源都是必须的。也就是说，如果在转换过程中发生任何故障，系统必须能够恢复未完成的工作。因此，数据必须唯一而且可靠。&lt;/p&gt;&lt;p&gt;通常，数据有两种类型：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;状态：状态指你此刻看到的东西，比如说写在银行存折上的余额。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;事件：事件是修改每个状态的动作，例如银行存折上的每一条交易记录。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;实际上，我们已经有了可以作为事件存储的消息。对于写路径，按顺序存储消息非常有效。借助这些消息，很容易根据需要创建出不同的读视图。这种方法也被称为事件源。&lt;/p&gt;&lt;p&gt;但仅有事件还很难有效地利用。为了获得最终结果，每一次转换都必须从头到尾运行，以重建读视图。因此，最好是采用一种混合方法。在写路径上，将状态和事件都保留，转换过程可以根据实际情况选择数据源。&lt;/p&gt;&lt;p&gt;总结一下 CQRS 中数据的整个生命周期：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2462526766595289&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfMrcfIJibhKU0XLKYXgCGP7KFvYvVCfBEPvedHYdwsr0jItXKjLdxbPAwlb1jHagtXIw8SGPTmByOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;934&quot;/&gt;&lt;/p&gt;&lt;p&gt;数据从客户端开始，以命令格式进入后端。根据业务逻辑，它被转换为域对象并存储在数据库中。这些域对象被转换为各种读视图，并根据要求存储在不同的专用读数据库中。最后，客户端以 DTO 的形式获取这些读视图。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;4&lt;/span&gt; 小结&lt;/section&gt;&lt;p&gt;有许多书籍和文章以各种方式介绍了 DDD 和 CQRS。在我看来，这些模式限制了我们在进行 DDD 设计时的想象力，如实体、价值对象、聚合等。这使得大多数开发人员觉得，DDD 离自己很远，很难实现，也很难实施。事实上，DDD 的概念并不复杂；相反，DDD 是为了封装业务逻辑，促进功能需求的扩展。&lt;/p&gt;&lt;p&gt;CQRS 就更简单了。在这篇文章中，我们从系统演进的过程出发，介绍了整个系统的设计过程和需要解决的问题，最后自然地得出 CQRS 的结论。&lt;/p&gt;&lt;p&gt;系统设计中没有银弹。每一次演进都是为了解决一些特定的问题。然而，它可能会带来新的问题。以本文的设计过程为例，CQRS 似乎解决了所有提到的问题，“贫血模型”和可扩展性不足，但也带来了新的问题，如数据一致性。每一种技术选择都有它的权衡，只要了解每个选项背后的所有威胁因素，就可以选出相对可以接受的方法。&lt;/p&gt;&lt;p&gt;即使你选择了 CQRS，在实践中，实现最终的一致性仍然有三种方法可以选择。系统设计是不断选择的结果。&lt;/p&gt;&lt;p&gt;这篇文章的目的是告诉你，DDD 没有那么可怕，CQRS 也没有那么复杂，只是一个决定而已。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;查看英文原文：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://medium.com/interviewnoodle/shift-from-monolith-to-cqrs-a34bab75617e&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section data-recommend-type=&quot;list-normal&quot; data-recommend-tid=&quot;2&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501257_1&quot; data-recommend-article-time=&quot;1636251616&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/0?wx_fmt=jpeg&amp;amp;amp;random=0.27521905775014543&quot; data-recommend-article-title=&quot;强势开源一款小程序！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强势开源一款小程序！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-11-07&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501242_1&quot; data-recommend-article-time=&quot;1634952613&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;强力推荐一个完善的物流（WMS）管理项目（附代码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强力推荐一个完善的物流（WMS）管理项目（附代码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-23&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501238_1&quot; data-recommend-article-time=&quot;1634606700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-19&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501208_1&quot; data-recommend-article-time=&quot;1632101100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;分享一套家庭理财系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;分享一套家庭理财系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-20&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42407407407407405&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501192_1&quot; data-recommend-article-time=&quot;1630718700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个互联网企业级别的开源支付系统&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个互联网企业级别的开源支付系统&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-04&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501176_1&quot; data-recommend-article-time=&quot;1629509100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一套开源通用后台管理系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一套开源通用后台管理系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-21&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501153_1&quot; data-recommend-article-time=&quot;1627704022&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;一款神仙接私活儿软件，吊到不行！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;一款神仙接私活儿软件，吊到不行！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-31&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501139_1&quot; data-recommend-article-time=&quot;1626571500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;基于 SpringBoot 的仿豆瓣平台【源码分享】&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;基于 SpringBoot 的仿豆瓣平台【源码分享】&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42427884615384615&quot; data-type=&quot;jpeg&quot; data-w=&quot;832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501105_1&quot; data-recommend-article-time=&quot;1623979500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;干掉 Wordpress！这个开源建站神器有点吊！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;干掉 Wordpress！这个开源建站神器有点吊！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-06-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42578125&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501098_2&quot; data-recommend-article-time=&quot;1623461160&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;从朋友那里搞了 20 个实战项目，速领！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4#rd&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;从朋友那里搞了 20 个实战项目，速领！&lt;/a&gt;&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;2021-06-12&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;200&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4703703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Baq5lYpIw7X6YPYGQITyP8Zdk96ab7CX0Ind5E05VokoepTP9Adic0xRwiaQrAvfTeC7iafngRibhBShpVqibqNcCCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如有收获，点个在看，诚挚感谢&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100018364&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;19&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk54JM0xl7WLNGnqqwbcXQBWIOCMuOgPHRoOjMamXzrCqMS2xgOo5ibic9icPk7u3zsVgic3s1ZUYJ4xHXg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>