<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b38d018b071ddf6f5539d0bd7166e141</guid>
<title>优质网站同好者周刊（第 093 期）</title>
<link>https://toutiao.io/k/lxvhagy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%8D%8F%E4%BD%9C&quot;&gt;&lt;code&gt;协作&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86&quot;&gt;&lt;code&gt;知识管理&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%87%AA%E6%89%98%E7%AE%A1&quot;&gt;&lt;code&gt;自托管&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;An open-source, self-hosted memo hub with knowledge management and collaboration.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/usememos.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Memos - 具有知识管理和协作功能的开源自托管备忘录中心&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://usememos.com/&quot;&gt;Memos&lt;/a&gt; ，具有 &lt;a href=&quot;https://nicelinks.site/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86&quot;&gt;知识管理&lt;/a&gt; 和 &lt;a href=&quot;https://nicelinks.site/tags/%E5%8D%8F%E4%BD%9C&quot;&gt;协作&lt;/a&gt; 功能的开源&lt;strong&gt;自托管&lt;/strong&gt;备忘录中心；基于 &lt;a href=&quot;https://nicelinks.site/post/606aa86a00d67605dca7de5c&quot;&gt;Go&lt;/a&gt; 、TypeScript、 &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;React&lt;/a&gt; 、Less、 &lt;a href=&quot;https://nicelinks.site/post/5fd20cb4c06d6302c1907ec7&quot;&gt;Tailwind CSS&lt;/a&gt; HTML 等编写；该团队在 Github 上有介绍到它具备以下功能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;🦄 开源并永久免费。&lt;/li&gt;&lt;li&gt;🚀 支持在几秒钟内用 Docker、docker-compose 进行自我托管。&lt;/li&gt;&lt;li&gt;📜 首先是普通文本区，并支持一些有用的 markdown 语法。&lt;/li&gt;&lt;li&gt;👥 协作并与你的队友分享。&lt;/li&gt;&lt;li&gt;🧑💻 用于自助服务的 RESTful API。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;仅简单这么介绍，在笔者看来并不完备。在笔者看来，&lt;a href=&quot;https://nicelinks.site/redirect?url=https://usememos.com/&quot;&gt;Memos&lt;/a&gt; 是理想中的「随笔/知识管理工具/个人微博」应用。主要因为以下几点：设计简洁、打开即写（类推特）；支持&lt;strong&gt;自托管&lt;/strong&gt;，且操作方便；满足&lt;strong&gt;个性化定制&lt;/strong&gt;设置；良好的内置搜索体验；可开启其他人注册 ®️；拥有类 Github Contribution 格子记录 📝；支持创建快捷方式（Filter Shortcut，即根据标签、文本、展示时间等创建的过滤规则）......虽然存在些待优化点，如暂不支持设置标题（Title）、图标（ICON） 以及评论，注入 GA 统计需要额外编写 loadScript 函数，页面直出是 SPA 等，但瑕不掩瑜，Memos 已然成为业余文字阵地的新宠（已于 2022 年 11 月 22 日晚，迫不及待搭建了 &lt;a href=&quot;https://memo.lovejade.cn/&quot;&gt;半缘修道舫&lt;/a&gt; ，感兴趣朋友可前往以查看效果）。如果您也有欲构建属于个人的微博或知识管理工具，Memos 值得考虑。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/637e1ebc984fb92197ab0f73&quot;&gt;倾城之链 - Memos - 具有知识管理和协作功能的开源自托管备忘录中心&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%AD%A6%E4%B9%A0&quot;&gt;&lt;code&gt;学习&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%95%99%E8%82%B2&quot;&gt;&lt;code&gt;教育&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E4%B9%A6%E7%B1%8D&quot;&gt;&lt;code&gt;书籍&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;CS 自学指南（计算机自学指南），Everyone should enjoy CS if you have a good teacher to teach you a good course.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/csdiy.wiki.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - CS 自学指南&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://csdiy.wiki/&quot;&gt;CS 自学指南&lt;/a&gt; ，一本计算机科学自学指南（&lt;code&gt;CS&lt;/code&gt;：Computer Science 的缩写），主要由北京大学一名同学编写（贡献者颇多），也是作者对自己大学三年自学生涯的一个纪念。该课程支持&lt;strong&gt;免费在线&lt;/strong&gt;阅读，并在 Github 开源，截止 2022 年 11 月，已有 14K Star。作者认为：如果你有一位好老师教你一门好课程，每个人都应该喜欢 CS（计算机科学），深有同感。&lt;/p&gt;&lt;h3 id=&quot;项目初衷&quot;&gt;&lt;a href=&quot;#%E9%A1%B9%E7%9B%AE%E5%88%9D%E8%A1%B7&quot; aria-label=&quot;项目初衷 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;项目初衷&lt;/h3&gt;&lt;p&gt;新冠肆虐，网课当道，CS 爆火，这一系列的事件都让自学计算机成为了一种潮流。&lt;/p&gt;&lt;p&gt;随着欧美众多名校将质量极高的计算机课程全部开源，自学 CS（计算机科学） 成了一件可操作性极强的事情。毫不夸张地说，只要你有毅力和兴趣，自学的成果完全不亚于你在国内任何一所大学受到的本科 CS 教育（当然，这里单指计算机专业领域，大学带给你的显然不止是专业知识）。&lt;/p&gt;&lt;p&gt;作者非常庆幸在自己大一的时候就选择了自学 CS 这条路，它让我爱上了计算机这门学科，也无比丰富了我的视野。但同时，自学这条路也有很多困难和阻力：课程繁多不知如何选择，资料零散甚至残缺，作业难度不知深浅，课内任务还需要花时间应付······这些主客观因素叠加到一起，使得好课虽多，却只能在收藏夹里吃灰。&lt;/p&gt;&lt;p&gt;在大学的第四个年头，作者想把这一路自学走来的经验和教训，把那些让我受益终身的课程记录下来，分享给大家，形成了这本 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://csdiy.wiki/&quot;&gt;CS 自学指南&lt;/a&gt; ，以期能给所有想自学计算机的朋友一点帮助。&lt;/p&gt;&lt;h3 id=&quot;课程目标&quot;&gt;&lt;a href=&quot;#%E8%AF%BE%E7%A8%8B%E7%9B%AE%E6%A0%87&quot; aria-label=&quot;课程目标 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;课程目标&lt;/h3&gt;&lt;p&gt;作者目标是让一个刚刚接触计算机的小白，可以完全凭借这些开源社区的优质资源，少走弯路，在 2-3 年内成长为一个有扎实的数学功底和代码能力，经历过数十个千行代码量的 Project 的洗礼，掌握至少 C / C++ / Java / JS / Python / Go / Rust 等主流语言，对算法、电路、体系、网络、操统、编译、人工智能、 &lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&quot;&gt;机器学习&lt;/a&gt; 、计算机视觉、自然语言处理、强化学习、密码学、信息论、博弈论、数值分析、统计学、分布式、数据库、图形学、 &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot;&gt;Web 开发&lt;/a&gt; 、云服务、超算等等方面均有所涉猎的全能程序员。此后，无论是选择科研还是就业，相信你都会有相当的竞争力。&lt;/p&gt;&lt;p&gt;关乎 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://csdiy.wiki/&quot;&gt;CS 自学指南&lt;/a&gt; 背后更多故事，作者在&lt;strong&gt;前言&lt;/strong&gt;部分有做阐述，诸如：梦开始的地方 —— CS61A、为什么写这本书、自学的好处与坏处、及书籍适合哪些人群等。其中绝大部分观点，深表认同，如数学与英文的重要性、学会提问、必备工具、自学所存在好处与缺陷等等。&lt;/p&gt;&lt;p&gt;正如作者在前言里所谈，任何有志于&lt;strong&gt;自学计算机&lt;/strong&gt;的朋友，都可以参考 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://csdiy.wiki/&quot;&gt;CS 自学指南&lt;/a&gt; 这本书。如果你已经有了一定的计算机基础，只是对某个特定的领域感兴趣，可以选择性地挑选你感兴趣的内容进行学习，相信会有所收获。但，大致翻阅其中内容，更多是国外优质课程的&lt;code&gt;目录&lt;/code&gt;（视频或网站地址），意在解决“想学好、但不知道怎么学”的问题，能帮助有自学之心和毅力朋友少走些弯路，选择性地挑选感兴趣内容进行参考学习即可，不必奉为圭臬。毕竟，能否学到，更大程度取决于&lt;strong&gt;个人求知欲&lt;/strong&gt;、&lt;strong&gt;自律&lt;/strong&gt;及&lt;strong&gt;英文阅读能力&lt;/strong&gt;等。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6379dc24049fa51046c4b83c&quot;&gt;倾城之链 - CS 自学指南&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%95%88%E7%8E%87&quot;&gt;&lt;code&gt;效率&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Mac&quot;&gt;&lt;code&gt;Mac&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%BD%AF%E4%BB%B6&quot;&gt;&lt;code&gt;软件&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Limitless productivity in a productivity-less world.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.raycast.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Raycast - Supercharged productivity&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.raycast.com/&quot;&gt;Raycast&lt;/a&gt; 是一款速度极快、完全可扩展的发射器。它可以让您完成任务、计算、共享常用链接等。与其功能类似的产品有：macOS 的「聚焦（Spotlight）」、&lt;a href=&quot;https://nicelinks.site/post/5ae926e67b44827edbc5c69a&quot;&gt;Alfred&lt;/a&gt; 等；Raycast 堪称是为开发人员定制的生产力工具，它具有以下功能特性：&lt;/p&gt;&lt;h3 id=&quot;提高您的生产力&quot;&gt;&lt;a href=&quot;#%E6%8F%90%E9%AB%98%E6%82%A8%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B&quot; aria-label=&quot;提高您的生产力 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;提高您的生产力&lt;/h3&gt;&lt;p&gt;在已经内置的核心 &lt;strong&gt;Raycast 扩展&lt;/strong&gt;之上，您可以安装由社区开发人员构建的扩展。您所要求的一切，都集中在一个地方。搜索和浏览您的工具、操作等的扩展。 &lt;a href=&quot;https://www.raycast.com/store&quot;&gt;浏览扩展&lt;/a&gt; 。&lt;/p&gt;&lt;h3 id=&quot;轻巧活泼&quot;&gt;&lt;a href=&quot;#%E8%BD%BB%E5%B7%A7%E6%B4%BB%E6%B3%BC&quot; aria-label=&quot;轻巧活泼 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;轻巧活泼&lt;/h3&gt;&lt;p&gt;旨在无缝和即时，使用非常方便。查看扩展并点击  &lt;code&gt;↵&lt;/code&gt;  以在几毫秒内简单地安装它。&lt;/p&gt;&lt;h3 id=&quot;一个不断增长的收藏&quot;&gt;&lt;a href=&quot;#%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%96%AD%E5%A2%9E%E9%95%BF%E7%9A%84%E6%94%B6%E8%97%8F&quot; aria-label=&quot;一个不断增长的收藏 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;一个不断增长的收藏&lt;/h3&gt;&lt;p&gt;只需按一下按钮即可控制 Spotify 或 Apple Music。在 Figma、Notion 和 Xcode 中搜索。无需浏览器即可查看您的网速和天气，甚至可以玩贪吃蛇游戏。&lt;/p&gt;&lt;h3 id=&quot;构建您一直想要的&quot;&gt;&lt;a href=&quot;#%E6%9E%84%E5%BB%BA%E6%82%A8%E4%B8%80%E7%9B%B4%E6%83%B3%E8%A6%81%E7%9A%84&quot; aria-label=&quot;构建您一直想要的 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;构建您一直想要的&lt;/h3&gt;&lt;p&gt;你的 Raycast，你的游乐场。每个人的生产力都是独一无二的。个性化是关键。以您想要的方式扩展 Raycast，并使用 API 为您和您的团队构建工具。&lt;/p&gt;&lt;p&gt;开始使用 Raycast API 构建您的完美工具，并简化您的工作流程。轻松创建扩展并直接无缝发布到 Raycast Store。开始使用 Raycast 中的集成开发人员工具，立即构建您的第一个扩展。 &lt;a href=&quot;https://www.raycast.com/developers&quot;&gt;学到更多&lt;/a&gt; 。&lt;/p&gt;&lt;h3 id=&quot;节省日常任务的时间&quot;&gt;&lt;a href=&quot;#%E8%8A%82%E7%9C%81%E6%97%A5%E5%B8%B8%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%97%B6%E9%97%B4&quot; aria-label=&quot;节省日常任务的时间 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;节省日常任务的时间&lt;/h3&gt;&lt;p&gt;Raycast 不仅仅是个人的工具。它也是一种工具，&lt;strong&gt;专为共享而设计&lt;/strong&gt;。从自定义扩展到快速链接和代码段。您的团队需要完成什么，我们提供了一个非常丰富的工具包来快速完成，并且与您的整个组织和谐相处。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;共享命令&lt;/strong&gt;：使用 &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;React&lt;/a&gt; 和 TypeScript 构建自定义工具，使组织内的团队能够快速完成最佳工作。在您的私人扩展商店中分享它们。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;共享快速链接&lt;/strong&gt;：毫不费力地与您的团队共享公共链接，例如概念中的项目文档、GitHub 存储库、线性项目和数据仪表板 - 所有这些都带有快速链接。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;共享片段&lt;/strong&gt;：与保存的支持响应、电子邮件或地址等常用文本保持一致，并使用动态占位符进行智能关键字扩展。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;生产力更上一层楼&quot;&gt;&lt;a href=&quot;#%E7%94%9F%E4%BA%A7%E5%8A%9B%E6%9B%B4%E4%B8%8A%E4%B8%80%E5%B1%82%E6%A5%BC&quot; aria-label=&quot;生产力更上一层楼 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;生产力更上一层楼&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;脚本命令&lt;/strong&gt;：使用您最喜欢的编程语言编写脚本以连接到 Web API、控制应用程序、工具等。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;捷径&lt;/strong&gt;：直接从 Raycast 搜索并运行您的 macOS 快捷方式。将所有内容保存在一个地方以便快速访问。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;文件搜索&lt;/strong&gt;：以简单的方式搜索文件和文件夹、查看元数据并执行常见操作。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;系统命令&lt;/strong&gt;：使用 20 多个内置系统命令控制您的 Mac。从调高或调低音量，到清空垃圾箱、睡眠或重新启动系统，等等。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;快速链接&lt;/strong&gt;：在浏览器中打开链接，在终端中打开文件夹或在任何文本编辑器中打开项目。并更有效地搜索网络。使用查询在 Google、Dribbble 或其他网站上执行搜索，如下所示。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;快速链接&lt;/strong&gt;在浏览器中打开链接，在终端中打开文件夹或在任何文本编辑器中打开项目。并更有效地搜索网络。使用查询在 Google、Dribbble 或其他网站上执行搜索，如下所示。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;浮动笔记&lt;/strong&gt;：是一种在处理其他事情时记下想法的快速方法。在您需要时总是得心应手。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;计算器&lt;/strong&gt;：解决简单的数学表达式、转换单位、检查时区、计算日、月和年之间的差异，以及用自然语言做更多事情。将答案复制到剪贴板以继续您之前的操作。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;窗口管理&lt;/strong&gt;：使用方便的命令清理您的窗口混乱，以便即时整理您的桌面和调整应用程序窗口的大小。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;启动应用程序&lt;/strong&gt;：只需敲击几下即可启动和切换应用程序窗口。退出运行、复制详细信息、搜索菜单项等。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;剪贴板历史&lt;/strong&gt;：搜索您之前复制的文本、图像、文件、链接和颜色，然后再次粘贴。固定您经常使用的项目以更快地访问它们。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;文本片段&lt;/strong&gt;：通过插入常用文本（例如固定电子邮件、代码段等）来加快书写速度。使用关键字就地自动扩展代码段。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;我的日程表&lt;/strong&gt;：绝不会错过任何一次会议。加入 Zoom、Google Meet、Around 会议等，无需四处寻找链接并直接进入通话。检查您即将到来的日程安排，安排专注时间或了解您的日常计划。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;更专注减少混乱&quot;&gt;&lt;a href=&quot;#%E6%9B%B4%E4%B8%93%E6%B3%A8%E5%87%8F%E5%B0%91%E6%B7%B7%E4%B9%B1&quot; aria-label=&quot;更专注减少混乱 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;更专注，减少混乱。&lt;/h3&gt;&lt;p&gt;让您的工作空间集中、干净、整洁。设计时考虑到性能和您的隐私。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;默认安全&lt;/strong&gt;，始终 所有内容都以加密方式存储在您的本地磁盘上，不会跟踪任何敏感信息。您和您的个人数据保持匿名。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;做你自己的，为你量身定做&lt;/strong&gt;：启用内置扩展以提高初始生产力。使用脚本命令和我们的 API 构建自定义扩展以优化您的工作流程。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;一次学习，永远记住&lt;/strong&gt;：受命令行界面的启发，您的工具统一为命令，并遵循相同的结构以提高您的工作效率。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;在几秒钟内完成任务&lt;/strong&gt;：Raycast 是为更快、更轻量级和更高效而原生构建的。每个动作都针对速度和可访问性进行了优化。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.raycast.com/&quot;&gt;Raycast&lt;/a&gt; 和 Alfred、Spotlight（个人极少使用） 存在很多相似之处，但 Raycast 似乎对第三方服务的整合更加彻底，包括操作视图、信息展示更详细，除了本身涵盖的一些系统快捷设置之外，还可以通过命令脚本扩展，并提供了 扩展 Raycast 所需的一切： &lt;a href=&quot;https://github.com/raycast/extensions&quot;&gt;Raycast Extensions&lt;/a&gt; ，使其可玩性极大增强。目前，仅支持 MacOS，于 Windows、Linux 用户，尚需等待。就个人初步学习、体验来看，Raycast 有足够的潜力成为下一个&lt;strong&gt;效率神器&lt;/strong&gt;，让我等极客爱好者拭目以待。另外值得一提的是，&lt;strong&gt;创建和分享&lt;/strong&gt;源代码美丽图像的小工具： &lt;a href=&quot;https://nicelinks.site/post/609d1c43a0289c0663f94dc4&quot;&gt;ray.so&lt;/a&gt; 、图标制造工具： &lt;a href=&quot;https://icon.ray.so/&quot;&gt;icon.ray.so&lt;/a&gt; 也都是出自该团队。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6378d324049fa51046c4ac75&quot;&gt;倾城之链 - Raycast - Supercharged productivity&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/WebAssembly&quot;&gt;&lt;code&gt;WebAssembly&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0&quot;&gt;&lt;code&gt;跨平台&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：webassembly, wasm, heroku, cloudflare, docker&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Wasmer - The Universal WebAssembly Runtime&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/wasmer.io.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Wasmer - The Universal WebAssembly Runtime&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;： &lt;a href=&quot;https://nicelinks.site/redirect?url=https://wasmer.io/&quot;&gt;Wasmer&lt;/a&gt; 🚀 支持 WASI 和 Emscripten 的领先 WebAssembly 运行时。它提供基于 &lt;a href=&quot;https://nicelinks.site/tags/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt; 的超轻量级容器，使得可以在任何地方运行：从桌面到云、以及 IoT 设备，并且也能嵌入到 &lt;a href=&quot;https://github.com/wasmerio/wasmer#language-integrations&quot;&gt;任何编程语言&lt;/a&gt; 中。它具有以下功能特性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;快速又安全&lt;/strong&gt;. Wasmer 在完全沙盒化的环境中以“接近本机”的速度运行 WebAssembly。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;可插拔&lt;/strong&gt;. Wasmer 可以根据你的需求支持不同的编译框架 (LLVM，Cranelift ...)。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;通用的&lt;/strong&gt;. 你可以在&lt;strong&gt;任何平台&lt;/strong&gt;(macOS, Linux and Windows) 和芯片组运行 Wasmer。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;符合标准&lt;/strong&gt;. 运行时通过了 &lt;a href=&quot;https://github.com/WebAssembly/testsuite&quot;&gt;官方 WebAssembly 测试集&lt;/a&gt; 支持 &lt;a href=&quot;https://github.com/WebAssembly/WASI&quot;&gt;WASI&lt;/a&gt; 和 &lt;a href=&quot;https://emscripten.org/&quot;&gt;Emscripten&lt;/a&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;如何快速开始&quot;&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B&quot; aria-label=&quot;如何快速开始 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;如何快速开始？&lt;/h3&gt;&lt;h4 id=&quot;安装-wasmer--wapm&quot;&gt;&lt;a href=&quot;#%E5%AE%89%E8%A3%85-wasmer--wapm&quot; aria-label=&quot;安装 wasmer  wapm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;安装 wasmer &amp;amp; wapm&lt;/h4&gt;&lt;p&gt;Wasmer 不需要安装其他依赖， 你可以在终端运行如下命令进行安装:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl https://get.wasmer.io -sSfL | sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行如上命令，在你下次打开终端时，wasmer 和 wapm 将可用。如果你想让这两个命令现在就可用，按照提示执行 &lt;code&gt;source&lt;/code&gt; 命令即可。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;check&lt;/strong&gt;: wasmer 2.3.0 installed successfully ✓&lt;br/&gt;wasmer &amp;amp; wapm will be available the next time you open the terminal.&lt;br/&gt;If you want to have the commands available now please execute:&lt;/p&gt;&lt;p&gt;source /Users/[UserName]/.wasmer/wasmer.sh&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;使用-wasmer--wapm&quot;&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8-wasmer--wapm&quot; aria-label=&quot;使用 wasmer  wapm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;使用 wasmer &amp;amp; wapm&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;WAPM&lt;/strong&gt;，WebAssembly 包管理器。类似于 &lt;a href=&quot;https://nicelinks.site/post/6216392f2d17f22050cf1a2b&quot;&gt;npm&lt;/a&gt; 之于 Node.js。wapm 安装工具包，在其目录下会产生：&lt;code&gt;wapm_packages&lt;/code&gt;目录和 &lt;code&gt;wapm.lock&lt;/code&gt;。非常类似于前端项目 &lt;code&gt;node_modules&lt;/code&gt; 和 &lt;code&gt;-lock.json&lt;/code&gt;。您可以从运行 &lt;a href=&quot;https://wapm.io/saghul/quickjs&quot;&gt;QuickJS&lt;/a&gt; 开始，它是一个编译为 WebAssembly 模块 ( &lt;code&gt;qjs.wasm&lt;/code&gt; ) 的小型可嵌入 Javascript 引擎：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 通过 wasmer 执行 WebAssembly 文件
wasmer qjs.wasm

# 通过 wapm 安装己编译好的 wasm 工具包
wapm install cowsay
# 通过 wapm 调用 cowsay 程序
wapm run cowsay &#x27;倾城之链&#x27;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 WebAssembly 和 Wasmer，在任何客户端上运行任何代码。使用您熟悉的工具和您喜欢的语言，将所有内容编译为 WebAssembly。 在任何操作系统上运行它或将其嵌入到其他语言中。值得一提的是，&lt;a href=&quot;https://github.com/wasmerio/wasmer&quot;&gt;Wasmer 在 Github 开源&lt;/a&gt;，如果您对 WebAssembly 或 Wasmer 感兴趣，可前往从而了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63789f3c049fa51046c4a8f3&quot;&gt;倾城之链 - Wasmer - The Universal WebAssembly Runtime&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&quot;&gt;&lt;code&gt;深度学习&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/TensorFlow&quot;&gt;&lt;code&gt;TensorFlow&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Python&quot;&gt;&lt;code&gt;Python&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Deep Learning for humans. Keras documentation.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/keras.io.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Keras: the Python deep learning API&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=http://keras.io/&quot;&gt;Keras&lt;/a&gt; 是一个用 Python 编写的开源神经网路库，从 2021 年 8 月的版本 2.6 开始，它是在 &lt;a href=&quot;https://nicelinks.site/tags/TensorFlow&quot;&gt;TensorFlow 2&lt;/a&gt; 上建立的高层 API；在版本 2.4 及以前能够在 TensorFlow、Microsoft Cognitive Toolkit、Theano 或 PlaidML 多个后端之上执行。Keras 旨在&lt;strong&gt;快速实现深度神经网路，专注于使用者友好、模组化和可延伸性&lt;/strong&gt;，是 ONEIROS（开放式神经电子智慧机器人作业系统）专案研究工作的部分产物，主要作者和维护者是 Google 工程师 François Chollet (弗朗索瓦·肖莱，也是 XCeption 深度神经网路模型的作者)。Keras 主要特征是：&lt;strong&gt;简单&lt;/strong&gt;、&lt;strong&gt;灵活&lt;/strong&gt;、&lt;strong&gt;强大&lt;/strong&gt;。除此之外，它还具有以下特色：&lt;/p&gt;&lt;h3 id=&quot;人类的深度学习&quot;&gt;&lt;a href=&quot;#%E4%BA%BA%E7%B1%BB%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&quot; aria-label=&quot;人类的深度学习 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;人类的深度学习&lt;/h3&gt;&lt;p&gt;Keras 是为人类而非机器设计的 API。Keras 遵循减少认知负荷的最佳实践：它提供一致且简单的 API，最大限度地减少常见用例所需的用户操作数量，并提供清晰且可操作的错误消息。它还具有广泛的文档和开发人员指南。&lt;/p&gt;&lt;h3 id=&quot;以思想的速度迭代&quot;&gt;&lt;a href=&quot;#%E4%BB%A5%E6%80%9D%E6%83%B3%E7%9A%84%E9%80%9F%E5%BA%A6%E8%BF%AD%E4%BB%A3&quot; aria-label=&quot;以思想的速度迭代 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;以思想的速度迭代&lt;/h3&gt;&lt;p&gt;Keras 是 &lt;a href=&quot;https://www.kaggle.com/&quot;&gt;Kaggle&lt;/a&gt; 前 5 名获胜团队中使用最多的深度学习框架。因为 Keras 使运行新实验变得更容易，它使您能够比竞争对手更快地尝试更多的想法。这就是您获胜的方式。&lt;/p&gt;&lt;h3 id=&quot;百万亿级机器学习&quot;&gt;&lt;a href=&quot;#%E7%99%BE%E4%B8%87%E4%BA%BF%E7%BA%A7%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&quot; aria-label=&quot;百万亿级机器学习 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;百万亿级机器学习&lt;/h3&gt;&lt;p&gt;Keras 建立在 TensorFlow 2 之上，是一个行业实力框架，可以扩展到大型 GPU 集群或整个 TPU pod。这不仅是可能的；这很简单。&lt;/p&gt;&lt;h3 id=&quot;部署在任何地方&quot;&gt;&lt;a href=&quot;#%E9%83%A8%E7%BD%B2%E5%9C%A8%E4%BB%BB%E4%BD%95%E5%9C%B0%E6%96%B9&quot; aria-label=&quot;部署在任何地方 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;部署在任何地方&lt;/h3&gt;&lt;p&gt;利用 TensorFlow 平台的完整部署功能。您可以将 Keras 模型导出为 JavaScript 以直接在浏览器中运行，也可以导出为 TF Lite 以在 iOS、Android 和嵌入式设备上运行。通过 Web API 为 Keras 模型提供服务也很容易。&lt;/p&gt;&lt;h3 id=&quot;广阔的生态系统&quot;&gt;&lt;a href=&quot;#%E5%B9%BF%E9%98%94%E7%9A%84%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F&quot; aria-label=&quot;广阔的生态系统 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;广阔的生态系统&lt;/h3&gt;&lt;p&gt;Keras 是紧密相连的 TensorFlow 2 生态系统的核心部分，涵盖机器学习工作流程的每一步，从数据管理到超参数训练再到部署解决方案。&lt;/p&gt;&lt;h3 id=&quot;最先进的研究&quot;&gt;&lt;a href=&quot;#%E6%9C%80%E5%85%88%E8%BF%9B%E7%9A%84%E7%A0%94%E7%A9%B6&quot; aria-label=&quot;最先进的研究 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;最先进的研究&lt;/h3&gt;&lt;p&gt;CERN、NASA、NIH 和世界上更多的科学组织都在使用 Keras（是的，LHC 也使用了 Keras）。Keras 具有实现任意研究想法的低级灵活性，同时提供可选的高级便利功能以加快实验周期。&lt;/p&gt;&lt;p&gt;Keras，&lt;strong&gt;人类的深度学习&lt;/strong&gt;。由于其易用性和对用户体验的关注，Keras 成为许多大学课程的首选深度学习解决方案。它被广泛推荐为学习深度学习的最佳方法之一。值得一提的是，Keras 在 &lt;a href=&quot;https://github.com/keras-team/keras&quot;&gt;Github 开源&lt;/a&gt;，如果您对机器学习、深度学习感兴趣，可以前往以了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6378946e049fa51046c4a72e&quot;&gt;倾城之链 - Keras: the Python deep learning API&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8&quot;&gt;&lt;code&gt;网站生成器&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Pull content from anywhere and serve it fast with Astro&#x27;s next-gen island architecture. Astro is the web framework that you&#x27;ll enjoy using.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/astro.build.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Astro | Build faster websites&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://astro.build/&quot;&gt;Astro&lt;/a&gt; ，是现代网络的网站构建工具：强大的开发者体验满足轻量级输出。从任何地方提取内容并使用 Astro 的下一代岛式架构快速提供内容，受到超过 30,000 名开发人员和世界级团队的信赖。它具有以下功能特征：&lt;/p&gt;&lt;h3 id=&quot;专为速度而设计&quot;&gt;&lt;a href=&quot;#%E4%B8%93%E4%B8%BA%E9%80%9F%E5%BA%A6%E8%80%8C%E8%AE%BE%E8%AE%A1&quot; aria-label=&quot;专为速度而设计 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;专为速度而设计&lt;/h3&gt;&lt;p&gt;Astro Islands 代表了前端 Web 架构的领先范式转变。Astro 将您的 UI 提取到页面上更小、独立的组件中。未使用的 JavaScript 被轻量级 HTML 取代，保证更快的加载和交互时间 (TTI)。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;零 JavaScript 运行时&lt;/strong&gt;：Astro 在服务器上呈现 HTML 并去除任何剩余的、未使用的 JavaScript。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;岛屿的力量&lt;/strong&gt;：需要交互式用户界面？并行加载单独的、非阻塞的组件岛（component islands）。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;懒加载孤岛&lt;/strong&gt;（Lazy-Loading Islands）：组件只有在滚动到视图中时才会渲染。如果您没有看到它，Astro 将不会加载它。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;为内容而设计&quot;&gt;&lt;a href=&quot;#%E4%B8%BA%E5%86%85%E5%AE%B9%E8%80%8C%E8%AE%BE%E8%AE%A1&quot; aria-label=&quot;为内容而设计 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;为内容而设计&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;你的内容，你的方式&lt;/strong&gt;。Astro 与您最喜欢的内容源一起工作。从文件系统中提取内容或从您最喜欢的 CMS（内容管理系统）、Markdown、MDX、数据库或 API 远程获取内容。Astro 支持静态输出 (SSG) 和实时服务器输出 (SSR)，可以按需呈现您的内容。&lt;/p&gt;&lt;h3 id=&quot;旨在让您感到熟悉&quot;&gt;&lt;a href=&quot;#%E6%97%A8%E5%9C%A8%E8%AE%A9%E6%82%A8%E6%84%9F%E5%88%B0%E7%86%9F%E6%82%89&quot; aria-label=&quot;旨在让您感到熟悉 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;旨在让您感到熟悉&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;使用您已经喜爱的工具&lt;/strong&gt;。自带组件框架。Astro 为 &lt;a href=&quot;https://nicelinks.site/post/6329ab4f36feb75b35987e2a&quot;&gt;Solid&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;React&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot;&gt;Vue&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/62a9c2ad90509e23cea772c0&quot;&gt;Svelte&lt;/a&gt; 和 &lt;a href=&quot;https://nicelinks.site/post/5fd20cb4c06d6302c1907ec7&quot;&gt;Tailwind CSS&lt;/a&gt; 、Scss、TS、Markdown 等前端工具提供一流的支持。避免混淆配置并在几秒钟内开始：只需键入 &lt;code&gt;astro add&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&quot;按比例设计&quot;&gt;&lt;a href=&quot;#%E6%8C%89%E6%AF%94%E4%BE%8B%E8%AE%BE%E8%AE%A1&quot; aria-label=&quot;按比例设计 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;按比例设计&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;部署到任何地方，甚至是边缘&lt;/strong&gt;（edge）。Astro 支持静态输出 (SSG) 和实时服务器输出 (SSR)。无论您选择构建什么，Astro 灵活的适配器系统都能让部署设置和配置变得轻而易举。您可以选择 cloudflare、 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/59ba80d93df6765c75b77911&quot;&gt;Github&lt;/a&gt; 、netlify、Node.js、Google Cloud、AWS 等平台进行部署。&lt;/p&gt;&lt;h3 id=&quot;旨在与您一起成长&quot;&gt;&lt;a href=&quot;#%E6%97%A8%E5%9C%A8%E4%B8%8E%E6%82%A8%E4%B8%80%E8%B5%B7%E6%88%90%E9%95%BF&quot; aria-label=&quot;旨在与您一起成长 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;旨在与您一起成长&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;探索 Astro 的生态系统&lt;/strong&gt;。借助包含 100 多个集成和主题的生态系统，充分利用 Astro。社区包可以轻松地向您的项目添加新功能，以提高性能、SEO、分析、可访问性等。&lt;/p&gt;&lt;h3 id=&quot;专为所有人设计&quot;&gt;&lt;a href=&quot;#%E4%B8%93%E4%B8%BA%E6%89%80%E6%9C%89%E4%BA%BA%E8%AE%BE%E8%AE%A1&quot; aria-label=&quot;专为所有人设计 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;专为所有人设计&lt;/h3&gt;&lt;p&gt;Astro 社区很棒。Astro 最好的地方在于它的社区。Astro Discord 包含 5000 多个构建器，随时准备帮助您解决问题、寻找灵感，并在您使用 Astro 进行探索时获得乐趣。我们的开放治理模型允许任何人贡献并参与 Astro 的发展和维护。欢迎所有经验水平！&lt;/p&gt;&lt;p&gt;Astro 是一个&lt;strong&gt;一体化的&lt;/strong&gt; &lt;strong&gt;网络框架&lt;/strong&gt;，用于构建&lt;strong&gt;快速、以&lt;/strong&gt; &lt;strong&gt;内容为中心的网站&lt;/strong&gt;。为什么选择 Astro 而不是其他 Web 框架？这里有五个核心设计原则，可帮助解释构建 Astro 的原因、它要解决的问题，以及为什么 Astro 可能是您的项目或团队的最佳选择。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;以内容为中心&lt;/strong&gt;：Astro 专为内容丰富的网站而设计。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;服务器优先&lt;/strong&gt;：网站在服务器上呈现 HTML 时运行速度更快。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;极速访问&lt;/strong&gt; : 应该不可能在 Astro 中建立一个缓慢的网站。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;易于使用&lt;/strong&gt;：您无需成为专家即可使用 Astro 构建东西。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;功能齐全但灵活&lt;/strong&gt;：超过 100 多种 Astro 集成可供选择。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Astro 在 Github 开源，通过 &lt;a href=&quot;https://nicelinks.site/post/6216392f2d17f22050cf1a2b&quot;&gt;npm&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/62989af00f40a860b1599de2&quot;&gt;pnpm&lt;/a&gt; 或 yarn 来安装，即可在本地启动并运行一个新的 Astro 项目。如果您从事前端开发，或意欲构建&lt;strong&gt;内容丰富的网站&lt;/strong&gt;，建议移步 &lt;a href=&quot;https://docs.astro.build/en/getting-started/&quot;&gt;Astro 入门教程&lt;/a&gt; ，从而了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63788ad1049fa51046c4a5bd&quot;&gt;倾城之链 - Astro | Build faster websites&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;将欲取天下而为之，吾见其不得已。天下神器，不可为也，不可执也。为者败之，执者失之。是以圣人无为，故无败，故无失。夫物或行或随；或觑或吹；或强或羸；或载或隳。是以圣人去甚、去奢、去泰。── 春秋末期人 · 老子李耳《道德经》第二十九章&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8996ce078a932b6dc5edea93daf14f93</guid>
<title>重塑认识 Java 编译器的执行过程（消除数组边界检查 + 公共子表达式）</title>
<link>https://toutiao.io/k/ixhipj5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h2&gt;&lt;a id=&quot;_0&quot;/&gt;前提概要&lt;/h2&gt; 
&lt;p&gt;Java的class字节码并不是机器语言，要想让机器能够执行，还需要把字节码翻译成机器指令。这个过程是Java虚拟机做的，这个过程也叫编译。是更深层次的编译。&lt;/p&gt; 
&lt;p&gt;在编译原理中，把源代码翻译成机器指令，一般要经过以下几个重要步骤：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3112940a532e8df1a143064fad3ae5fe.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;根据完成任务不同，可以将编译器的组成部分划分为前端（Front End）与后端（Back End）。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;前端编译主要指与源语言有关但与目标机无关的部分，包括词法分析、语法分析、语义分析与中间代码生成。&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;后端编译主要指与目标机有关的部分，包括代码优化和目标代码生成等。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;我们可以把将&lt;code&gt;.java&lt;/code&gt;文件编译成&lt;code&gt;.class&lt;/code&gt;的编译过程称之为前端编译。把将&lt;code&gt;.class&lt;/code&gt;文件翻译成机器指令的编译过程称之为后端编译。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/d9e0fcd631ff75cbbfddecc05fa1355a.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;Java_18&quot;/&gt;Java中的前端编译&lt;/h2&gt; 
 
&lt;h3&gt;&lt;a id=&quot;_24&quot;/&gt;词法分析&lt;/h3&gt; 
 
&lt;h3&gt;&lt;a id=&quot;_30&quot;/&gt;语法分析&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如“程序”，“语句”，“表达式”等等，语法分析程序判断源程序在结构上是否正确。源程序的结构由上下文无关文法描述。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a id=&quot;_34&quot;/&gt;语义分析&lt;/h3&gt; 
 
&lt;h3&gt;&lt;a id=&quot;_40&quot;/&gt;中间代码生成&lt;/h3&gt; 
&lt;p&gt;在源程序的语法分析和语义分析完成之后，很多编译器生成一个明确的低级的或类机器语言的中间表示。该中间表示有两个重要的性质： 1.易于生成； 2.能够轻松地翻译为目标机器上的语言。&lt;/p&gt; 
&lt;p&gt;在Java中，&lt;code&gt;javac&lt;/code&gt;执行的结果就是得到一个字节码，而这个字节码其实就是一种中间代码。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;著名的解语法糖操作，也是在javac中完成的。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;a id=&quot;Java_48&quot;/&gt;Java中的后端编译&lt;/h2&gt; 
&lt;p&gt;首先，我们大家都知道，通常通过 &lt;code&gt;javac&lt;/code&gt; 将程序源代码编译，转换成 java 字节码，JVM 通过解释字节码将其翻译成对应的机器指令，逐条读入，逐条解释翻译。很显然，经过解释执行，其执行速度必然会比可执行的二进制字节码程序慢很多。这就是传统的JVM的**解释器（Interpreter）**的功能。为了解决这种效率问题，引入了 &lt;strong&gt;JIT&lt;/strong&gt; 技术。&lt;/p&gt; 
&lt;p&gt;JAVA程序还是通过解释器进行解释执行，当JVM发现某个方法或代码块运行特别频繁的时候，就会认为这是“热点代码”（Hot Spot Code)。然后JIT会把部分“热点代码”&lt;strong&gt;翻译&lt;/strong&gt;成本地机器相关的机器码，并进行&lt;strong&gt;优化&lt;/strong&gt;，然后再把翻译后的机器码&lt;strong&gt;缓存&lt;/strong&gt;起来，以备下次使用。&lt;/p&gt; 
&lt;p&gt;HotSpot虚拟机中内置了两个JIT编译器：Client Complier和Server Complier，分别用在客户端和服务端，目前主流的HotSpot虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。&lt;/p&gt; 
&lt;p&gt;当 JVM 执行代码时，它并不立即开始编译代码。首先，如果这段代码本身在将来只会被执行一次，那么从本质上看，编译就是在浪费精力。因为将代码翻译成 java 字节码相对于编译这段代码并执行代码来说，要快很多。第二个原因是最优化，当 JVM 执行某一方法或遍历循环的次数越多，就会更加了解代码结构，那么 JVM 在编译代码的时候就做出相应的优化。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_58&quot;/&gt;热点检测&lt;/h3&gt; 
&lt;p&gt;上面我们说过，要想触发JIT，首先需要识别出热点代码。目前主要的热点代码识别方式是热点探测（Hot Spot Detection），有以下两种：&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;基于采样的方式探测（Sample Based Hot Spot Detection) ：周期性检测各个线程的栈顶，发现某个方法经常出险在栈顶，就认为是热点方法。好处就是简单，缺点就是无法精确确认一个方法的热度。容易受线程阻塞或别的原因干扰热点探测。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;基于计数器的热点探测（Counter Based Hot Spot Detection)。采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，某个方法超过阀值就认为是热点方法，触发JIT编译。&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;p&gt;在HotSpot虚拟机中使用的是第二种——基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。&lt;/p&gt; 
 
&lt;h3&gt;&lt;a id=&quot;_72&quot;/&gt;编译优化&lt;/h3&gt; 
&lt;p&gt;前面提到过，JIT除了具有缓存的功能外，还会对代码做各种优化。说到这里，不得不佩服HotSpot的开发者，他们在JIT中对于代码优化真的算是面面俱到了。&lt;/p&gt; 
&lt;p&gt;这里简答提及几个我觉得比较重要的优化技术，并不准备直接展开，读者感兴趣的话，我后面再写文章单独介绍。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;逃逸分析、 锁消除、 锁膨胀、 方法内联、 空值检查消除、 类型检测消除、 公共子表达式消除&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a id=&quot;_80&quot;/&gt;公共子表达式消除&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;公共子表达式消除是一项非常经典的、普遍应用于各种编译器的优化技术，它的含义是： 如果一个表达式E之前已经被计算过了，并且从先前的计算到现在E中所有变量的值都没有发生变化，那么E的这次出现就称为公共子表达式。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;h5&gt;&lt;a id=&quot;_88&quot;/&gt;如下代码：&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; b &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; c &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如果这段代码交给 Javac 编译器则不会进行优化，那么生成的代码将如下所示：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;iload_2        // b
imul           // 计算 b * c
bipush 12      // 推入 12
imul           // 计算 ( c * b ) * 12
iload_1        // a
iadd           // 计算 ( c * b ) * 12 + a
iload_1        // a
iload_2        // b
iload_3        // c
imul           // 计算 b * c
iadd           // 计算 a + b * c
iadd           // 计算 ( c * b ) * 12 + a + a + b * c
istore 4
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;是完全按照遵照 Java 源码的写法直译而成的。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;当这段代码进人虚拟机即时编译器后，它将进行如下优化：编译器检测到 c * b 与 b * c 是一样的表达式， 而且在计算期间 b 与 c 的值是不变的。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;&lt;a id=&quot;_115&quot;/&gt;因此这条表达式就可能被视为:&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;这时候、编译器还可能(取决于哪种虚拟机的编译器以及具体的上下文而定)进行另外一种优化——代数化简 (Algebraic Simplification) ， 在E本来就有乘法运算的前提下， 把表达式变为:&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;表达式进行变换之后，再计算起来就可以节省一些时间了。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a id=&quot;_129&quot;/&gt;数组边界检查消除&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;数组边界检查消除 ( Array Bounds Checking Elimination) 是即时编译器中的一项语言相关的经典优化技术。我们知道Java语言是一门动态安全的语言，对数组的读写访问也不像 C、C++ 那样实质上就是裸指针操作。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;如果有一个数组 a[]，在Java语言中访问数组元素 foo[i] 的时候系统将会自动进行上下界的范围检查，即 i 必须满足 &quot; i &amp;gt;= 0 &amp;amp;&amp;amp; i &amp;lt; a.length &quot; 的访问条件，否则将抛出一个运行时异常: java.lang.ArrayIndexOutOfBondsException&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;这对软件开发者来说是一件很友好的事情，即使程序员没有专门编写防御代码，也能够避免大多数的溢出攻击。但是对于虚拟机的执行子系统来说，每次数组元素的读写都带有一次隐含的条件判定操作，对于拥有大量数组访问的程序代码，这必定是一种性能负担&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;无论如何，为了安全，数组边界检查肯定是要做的，但数组边界检查是不是必须在运行期间一次不漏地进行则是可以 “商量” 的事情。例如下面这个简单的情况: 数组下标是一个常量，如 a[3]，只要在编译期根据数据流分析来确定 foo.length 的值，并判断下标 “3” 没有越界，执行的时候就无须判断了。更加常见的情况是，数组访问发生在循环之中，并且使用循环变量来进行数组的访问。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;如果编译器只要通过数据流分析就可以判定循环变量的取值范围永远在区间 [ 0，a.length ) 之内，那么在循环中就可以把整个数组的上下界检查消除掉，这可以节省很多次的条件判断操作。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;把这个数组边界检查的例子放在更高的视角来看，大量的安全检查使编写 Java 程序比编写 C 和 C++ 程序容易了很多，比如: 数组越界会得到ArrayIndexOutfBoundsExcepion 异常；空指针访问会得到 NullPointExceptioen 异常；除数为零会得到 ArithmeticExceptinon 异常…在和C++程序中出现类似的问题，一个不小心就会出现 Segment Fault 信号或者 Windows 编程中常见的 “XXX内存不能为 Read/Write” 之类的提示，处理不好程序就直接崩溃退出了。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;但这些安全检查也导致出现相同的程序，从而使 Java 比 C 和 C++ 要做更多的事情(各种检查判断)，这些事情就会导致一些隐式开销， 如果不处理好它们，就很可能成为一项 “ Java语言天生就比较慢” 的原罪。为了消除这些隐式开销，除了如数组边界检查优化这种尽可能把运行期检查提前到编译期完成的思路之外、还有一种避开的处理思路——隐式异常处理， Java中空指针检查和算术运算中除数为零的检查都采用了这种方案。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;举个例子，程序中访问一个对象(假设对象叫 a )的某个属性(假设属性叫 value )，那以 Java 伪代码来表示虚拟机访问 a.value 的过程为:&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NullPointException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;在使用隐式异常优化之后，虚拟机会把上面的伪代码所表示的访问过程变为如下伪代码:&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;segment_fault&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
uncommon_ &lt;span class=&quot;token function&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;虚拟机会注册一个 Segment Fault 信号的异常处理器 ( 伪代码中的uncommon_trap()，务必注意这里是指进程层面的异常处理器，并非真的 Java 的 try-catch 语句的异常处理器)，这样当 a 不为空的时候，对 value 的访问是不会有任何额外对 a 判空的开销的，而代价就是当 a 真的为空时，必须转到异常处理器中恢复中断并抛出 NullPointException 异常。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;进人异常处理器的过程涉及进程从用户态转到内核态中处理的过程，结束后会再回到用户态，速度远比一次判空检查要慢得多。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;当 foo 极少为空的时候，隐式异常优化是值得的，但假如 foo 经常为空，这样的优化反而会让程序更慢。幸好 HotSpot 虚拟机足够聪明，它会根据运行期收集到的性能监控信息自动选择最合适的方案。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9752fc3d3f7f8b21f1b6b3a96c4765bb</guid>
<title>干货！用大白话告诉你什么是 Mock 测试</title>
<link>https://toutiao.io/k/jaz776u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个动词，&lt;code&gt;mock&lt;/code&gt;是模拟、模仿的意思；作为一个名词，&lt;code&gt;mock&lt;/code&gt;是能够模仿真实对象行为的模拟对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在软件测试中，mock所模拟的对象是什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它一定不是我们所测试的对象，而是 SUT 的依赖（dependency）。换句话说，mock 的作用是模拟 SUT 依赖对象的行为。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;测试的对象一般称之为&lt;code&gt;SUT(Software Under Test)&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文字不好理解，我们画个图，如下图所示，被测试对象是 A，A 依赖的是B，B 依赖的是 C。而我们要 mock 的是 B 的行为。图中 A 就是 SUT。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;300&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;181&quot; data-ratio=&quot;0.6047058823529412&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicyib3ul5U3tutWsPAp9d3ewq4zgEO9R7sfjzudbCN3h7NghlVXYu74Low/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;850&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;为什么需要模拟 B 的行为呢？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;（1）提高 A 的测试覆盖率。A 依赖 B，本质上依赖的是 B 的返回结果，也就是说 B 的返回结果会影响 A 的行为。通过 mock B 我们可以构造各种正常和异常的来自 B 的返回结果，从而更充分测试 A 的行为。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（2）避免 B 的因素从而对 A 产生影响。依赖真实的 B 去测试 A 可能有很多问题：B 的开发没有完成时无法测试 A；B 有阻塞性bug 时无法测试 A；B 的依赖 C 有阻塞性 bug 时无法测试 A；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（3）提高 A 的测试效率。B 的真实行为可能很慢，而 B 的模拟行为是非常快的，因此可以加快 A 的测试执行速度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;mock 种族&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的 mock 类型如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;300&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;283&quot; data-ratio=&quot;0.9441340782122905&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicyTeZXrZW5lbNsXMYpu1HvsRBx1Ir6gL128V3s56fvUBnhb1g83wafew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;716&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从下往上依次解释一下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;（1）&lt;code&gt;方法级别 mock&lt;/code&gt;：mock 的对象是一个函数调用，例如获取系统环境变量。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（2）&lt;code&gt;类级别 mock&lt;/code&gt;：mock 的对象是一个类，例如一个 HTTP server。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（3）&lt;code&gt;接口级别 mock&lt;/code&gt;：mock 的对象是一个 API 接口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（4）&lt;code&gt;服务级别 mock&lt;/code&gt;：mock 的对象是整个服务。比如前端工程师自测试时，可以讲后端整个服务都 mock 掉，这其实等同于将后端的所有接口都 mock。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;接口mock注入的五种方式&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在使用 mock 进行接口测试时，一般要做两件事情，即&lt;code&gt;打桩&lt;/code&gt;和&lt;code&gt;调桩&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实&lt;code&gt;打桩&lt;/code&gt;就是创建mock 桩，指定 API 请求内容及其映射的 mock 响应内容；所谓&lt;code&gt;调桩&lt;/code&gt;就是被测服务来请求 mock 桩并接收 mock 响应。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上，在&lt;code&gt;打桩&lt;/code&gt;和&lt;code&gt;调桩&lt;/code&gt;之间还隐藏着一件不显山露水、但是及其重要的事情，那就是 mock 桩的注入（mock injection）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;什么是 mock 注入？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mock 的本质就是用&lt;code&gt;模拟桩&lt;/code&gt;来替换&lt;code&gt;真实的依赖&lt;/code&gt;。所谓 &lt;code&gt;mock 桩注入&lt;/code&gt;就是阻断被测服务与真实服务之间的链路，建立被测服务与 mock 之间的链路过程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;400&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;195&quot; data-ratio=&quot;0.4879120879120879&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicynmQuHDTQhqNjQrtiaeVPyIN4Zwb35KmugmOtwUAdnphibSA5rp6oJ01A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何注入 mock？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的来说 mock 桩的注入方式与架构、被测服务的架构等因素相关，在实际中常见的 mock 桩注入方式包括但不限于以下五种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（1）API 请求构造&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 mock 接口中被测服务是 API 的请求方，即客户端；依赖服务是 API 的响应方，即服务端。根据 mock 工作的位置，mock 可以分为&lt;code&gt;客户端 mock&lt;/code&gt; 和&lt;code&gt;服务端 mock&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;客户端 mock&lt;/code&gt;：mock 在被测服务内部工作，直接拦截被测服务的 API 请求方法（比如 HTTP Client方法），在被测服务调用 API 请求方法时，直接从方法内部返回预定义的 mock 响应。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;服务端 mock&lt;/code&gt;：mock 在被测服务外部工作，作为 HTTP 服务器接收被测服务发送的 API 请求，并返回预定义的 mock 响应。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端 mock 的注入其实就是改造被测服务的 API 请求方法，即在 API 请求方法中加入 mock 处理逻辑。当满足某些条件时执行 mock 分支，不满足时执行真实分支。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过两种方式实现，&lt;code&gt;一种是直接改造源代码&lt;/code&gt;，&lt;code&gt;另一种是利用字节码增强技术对字节码进行改造（Java 语言）&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;400&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;167&quot; data-ratio=&quot;0.4173387096774194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicy1r3wzS4XnoEVqiaHmLDFZAdWcGx3HWMOACeqQcVBQonX5V3UPdCjQ5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;992&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;API 请求改造这种注入方式适用于客户端 mock，其优势性能极好，其不足是实现成本较高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（2）本地配置&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于服务端 mock，打桩之后会生成唯一的 mock 桩地址。被测服务要想调用这个桩需要知道桩地址，如何让被测服务知道桩地址呢？一种最直接的方法就是被测服务提供一个依赖服务地址配置项，在需要使用 mock 时将依赖服务地址修改成 mock 地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本地配置的优势是实现简单，不足之处是修改配置项&lt;code&gt;需要重启&lt;/code&gt;被测服务，在需要进行 mock 服务与真实服务切换时不方便。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;400&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;181&quot; data-ratio=&quot;0.45286885245901637&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicyt0ugVBwOLzmBYY6AwnVSKd2PbGAOZFD2oRNBmBGBxGJBhvG0xSgh9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;976&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（3）配置中心&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在服务端 mock 中，为了避免修改依赖服务地址配置项导致被测服务重启，可以采用配置中心（如 Spring Cloud Config Server）存储和管理依赖服务地址配置，或者使用注册中心（如 Spring Cloud Eureka）记录服务与服务地址的映射关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用配置或者注册中心时，mock 注入的方法是修改配置中心，将依赖服务地址改成 mock 地址。这种注入方法不需要重启被测服务，但是从配置改变到配置生效可以&lt;code&gt;存在一定的延时&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;400&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;224&quot; data-ratio=&quot;0.5612244897959183&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicycInn9lZIqjnJM1icfR4IMtcia0u9Licibib9B23U0ic7WpAiazd8JcibhticJ8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（4）反向代理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在微服务架构下，被测服务与依赖服务之间可能不是直连的，而是经过了一层反向代理，例如 API 网关。在这种情况下，被测服务是通过调用 API 网关来间接调用依赖服务的接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 API 网关模式下，mock 注入的具体做法就是修改 API 网关配置，将依赖服务 API 网关接口绑定的地址改成 mock 地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种注入的优势是对被测服务&lt;code&gt;无侵入&lt;/code&gt;，并且实现更细粒度（接口级）的 mock。当然，根据 API 网关的实现不同，仍然可能&lt;code&gt;存在一定的时延&lt;/code&gt;。亚马逊 AWS 的 API 网关就是采用这种方式进行 mock。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;450&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;148&quot; data-ratio=&quot;0.3286118980169972&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicytSAGGbUKPmpHmSk3LkjOvRA9vkIiaAAqNDd9R0QuVyUpygIFmhyrPCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1412&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（5）前向代理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务端 mock 除了作为 HTTP 服务器，还可以兼备 HTTP 代理的功能，这种架构又叫做 &lt;code&gt;mock 代理&lt;/code&gt;，例如 &lt;code&gt;mock server proxy&lt;/code&gt;。对于 mock 代理来说，它不仅能够返回 mock 响应，而且能够在需要的时候将 API 请求转发给依赖服务，并将依赖服务的真实响应返回给被测服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用前向代理模式，mock 注入的方式是将被测服务的依赖地址或网络代理修改为 mock 地址，这种注入方法&lt;code&gt;需要重启被测服务&lt;/code&gt;，其优势是能够实现细粒度的 mock，并且能够根据录制的真实响应自动生成 mock。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;400&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;104&quot; data-ratio=&quot;0.260932944606414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicy8oJu3Rsnrnwib9Jr78QIibJBkria9ickIkpZA4haaQdcQRmNBUNQwnWibpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1372&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;五种注入方式对比&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一张表格总结一下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;400&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;169&quot; data-ratio=&quot;0.4227353463587922&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicygdbqRicIL7UicibOJzjqIM8WalMmmgbjHxTepM8K2oziabrdyyM7nPVW8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1126&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;不可忽视的mock两大功能&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 mock，经常容易被误解的是：认为 mock 只是模拟返回的结果而已。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上 mock 还可以提供两大功能：（1）记录真实的调用信息；（2）生成模拟的返回信息；&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;500&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;190&quot; data-ratio=&quot;0.3797250859106529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicyykCYMYey1jAG2tiaRgqgLOmr8YfdCLLeLKY4sjibnyKQw57ThBpmmvOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1164&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于测试用例来说，我们不仅关心 mock 是否返回了期望的结果，还需要关心 SUT 是否以期望的方式调用了 mock 对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 SUT 没有以期望的方式调用，比如：没有传参或者参数不对，那么 SUT 就存在问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mock 需要详细记录来自SUT 的调用信息，并提供给用例来校验。比如 &lt;code&gt;Java mockito&lt;/code&gt; 就提供了此类校验功能：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;List&amp;lt;String&amp;gt; mockedList = mock(MyList&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;mockedList.size();&lt;br/&gt;&lt;span&gt;// 校验 size 函数调用且只调用了1次&lt;/span&gt;&lt;br/&gt;verify(mockedList, times(&lt;span&gt;1&lt;/span&gt;)).size();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;常用 mock 工具&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;单元测试级别&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个级别的mock工具有easymock、jMock、Mockito、Unitils Mock、PowerMock、JMockit等，关于各自优劣势大家可以上网查询。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;接口测试级别&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口级别的mock工具完成的主要功能是对一个用户的请求，模拟server返回一个接口的响应数据。常用的有：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Wiremock&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Mockserver&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Moco&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Mock.js&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RAP&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;mock 不是银弹&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了这么多 mock 的好处，实际上 mock 也有很多不足，比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;（1）mock 可能导致问题遗漏。mock 的模拟行为与真实行为可能存在 GAP，导致基于 mock 的测试虽然通过了，但是基于真实对象的测试却失败了，这意味着问题被遗漏了。mock 很难模拟所有的真实情况。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（2）mock 带来较高的维护成本。基于 mock 的测试用例结构比较复杂，实现和维护都不容易，后期被测代码有变动时需要适配 mock 代码。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单一句话：mock 不是银弹。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;有态度的总结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mock 不是银弹，mock 是有利有弊的，一张图总结一下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;400&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;186&quot; data-ratio=&quot;0.46459412780656306&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EoWW98ZaJgrfic2JCjFKhWicyzajBH6pmLkVvsFMFvYDgaAXJxInS1WRSWsOIia8jRzuiclz23BSd2Cew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1158&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了这么多，在工作中如何正确使用 mock 呢？这里提两点建议，敲黑板啦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）不要过度使用 mock。测试用例中掌握好使用 mock 的度。在涉及网络访问、数据库读写、操作系统交互等系统级调用，优先使用 mock。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）不要过度依赖基于 mock 的测试结果。基于 mock 的测试无论多么充分，这都不能保证不出现问题的遗漏。一个完整的测试策略一定是由基于 mock 的测试和基于非 mock 的测试共同组成的，二者相辅相成缺一不可。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7493aad9bbdc16fed02e396598ac6791</guid>
<title>14 个 SpringBoot 优化小妙招，看完后同事说写代码像写诗</title>
<link>https://toutiao.io/k/ej9cqom</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;span&gt;（给&lt;/span&gt;&lt;span&gt;捡田螺的小男孩&lt;/span&gt;&lt;span&gt;加星标，提高Java技能）&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每次聊到代码优化，都会有很多人说理论、架构、核心思路，其实我觉得代码优化这事说简单了很简单，说复杂了吧它也有一定的难度，但是我觉得有一个良好的编码习惯很重要，下面分享一下14个springboot项目中优化代码的小技巧，让代码优化跟容易，就像完成一件小事。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3NTY2NDMwMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/iaPU220ia3N7QfHsbKk3mGa1lsrNh9kID5jJsopIGBnric9v4xKcFOv50y6N3A3CVRteuJ9tQI0IAIh37R3dpvGog/0?wx_fmt=png&quot; data-nickname=&quot;程序员田螺&quot; data-alias=&quot;&quot; data-signature=&quot;专注分享后端面试题，包括计算机网络、MySql数据库、Redis缓存、操作系统、Java后端、大厂面试真题等领域。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 定义配置文件信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有时候我们为了统一管理会把一些变量放到 yml 配置文件中&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;例如&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3208791208791209&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmVia1o4y9kt1snBGkmaXfCzILXic9LE5eUFQOQAruPzXriaZsqIxiazZeDw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;random=0.5683281393430091&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用 @ConfigurationProperties 代替 @Value&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;使用方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;定义对应字段的实体&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;// 指定前缀&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span&gt;&quot;developer&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;public class DeveloperProperty {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;website&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;qq&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;phoneNumber&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;// 指定前缀&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span&gt;&quot;developer&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;public class DeveloperProperty {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;website&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;qq&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;phoneNumber&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用时注入这个bean&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;public class PropertyController {&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;DeveloperProperty&lt;/span&gt; &lt;span&gt;developerProperty&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;br mpa-from-tpl=&quot;t&quot;/&gt;    @&lt;span&gt;GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/property&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; &lt;span&gt;index&lt;/span&gt;() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;developerProperty&lt;/span&gt;&lt;span&gt;.getName&lt;/span&gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. 用@RequiredArgsConstructor代替@Autowired&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们都知道注入一个 bean 有三种方式哦（set 注入, 构造器注入, 注解注入），Spring 推荐我们使用构造器的方式注入 Bean，我们来看看上段代码编译完之后的样子&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4111111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmiakpowLVFmmoQiaxePpgqNYHQq8CVhsiaobpibpscw9H7r5h6cBfTNObuQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;RequiredArgsConstructor：lombok提供&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.代码模块化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里巴巴 Java 开发手册中说到每个方法的代码不要超过 50 行（我没记错的话），手册：https://www.yoodb.com/deployment/handbook/alibaba-java-specification.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;，在实际的开发中我们要善于拆分自己的接口或方法, 做到一个方法只处理一种逻辑, 说不定以后某个功能就用到了, 拿来即用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibm2doec2xRGdTXt9Wv4Ru8JOZFr40aFAWwT3NqwYuWlnW0RttzJbgz0Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. 抛异常而不是返回&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在写业务代码的时候，经常会根据不同的结果返回不同的信息，尽量减少返回，会显得代码比较乱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45555555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmgNsyFicx9AE3rycnbzxsGWfTMI4oZEH7uMrAib6yDZdicST33EOm82Z5w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;正例&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2388888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmjAdRTiaufN2x98ibeX6icxRLMuJFcic6wreO74WWdOc2CbxTTPricp8B93g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5. 减少不必要的db&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尽可能的减少对数据库的查询，面试推荐公众 号Java精选，回复java面试，获取面试资料，支持在线刷题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;举例子&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;删除一个服务（已下架或未上架的才能删除），之前有看别人写的代码，会先根据id查询该记录，然后做一些判断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmrbo9QPtYWyDmBwSXsJu7leu2mH0LAWUX7eInO5QYbPgKPvo3nbRpLw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21203703703703702&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmrsFY4Vz0PXnYgQ0FmqGtxcRhhIJuVyu6YYxXkV3mTI5ticTrM5Pn4Pg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6. 不要返回 null&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23796296296296296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmQ33IbBHZMZnNI1JDGxozKCPabsqrbfjp5ylTybHWQxzyn8SFoKbnBw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21203703703703702&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmtibdicTufibD0eaYs0cpuEA4P1ibSR3zmcCjUfkjzcVVsnEKiaFoEKicuwMA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;别处调用方法时，避免不必要的空指针&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;7. if else&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不要太多了if else if，可以试试策略模式代替&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;8. 减少controller业务代码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务代码尽量放到service层进行处理，后期维护起来也好操作而且美观。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6296296296296297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmlSIpcsh17nnfEm2soqekfYiaEpL9g0y3vdXoMRtWVTSBTsTEniad1WWA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7546296296296297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibml7QvMfPWFDjM4zxb2ghGXRFTtV5oK3AKIquLzYSYglxQ0Lhaz9eZjA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;9. 利用好Idea&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前为止市面上的企业基本都用idea作为开发工具了吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举一个小例子&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;idea会对我们的代码进行判断，提出合理的建议&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;例如&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19907407407407407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibma1vX8ZiacMWoUbosXmajKxINMXQEK63LAsWPJLLl1WwM2g2iaW1iadttA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它推荐我们用lanbda的形式代替，点击replace&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13240740740740742&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YscRq4LT5WvhkOUmiafOgKctFpWKdSdibmQPGq62DiaGHSoQno2fvGxLkkNWmx5FwsTN4Il8gDTxHiaxaNduCNDaTg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;10. 阅读源码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一定要养成阅读源码的好习惯包括优秀的开源项目GitHub上stars:&amp;gt;1000, 会从中学好好多知识包括其对代码的设计思想以及高级API，面试加分（好多面试官习惯问源码相关的知识，推荐公众 号Java精选，回复java面试，获取面试资料，支持在线刷题）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;11. 设计模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;23种设计模式，要尝试代码中运用设计模式思想，写出的代码即规范又美观还高大上哈哈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;12. 拥抱新知识&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;像我们这种工作年限少的程序员，我觉得要多学习自己认知之外的知识，不能每天crud，有机会就多用用有点难度的知识，没有机会（项目较传统），可以自己下班多些相关demo练习&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;13. 基础问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;map遍历&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;HashMap&amp;lt;&lt;span&gt;String&lt;/span&gt;, &lt;span&gt;String&lt;/span&gt;&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;map.put(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;du&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;String&lt;/span&gt; key : map.keySet()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;String&lt;/span&gt; value = map.get(key);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;map.forEach((k, v) -&amp;gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;});&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;// 推荐&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;Map&lt;/span&gt;.Entry&amp;lt;&lt;span&gt;String&lt;/span&gt;, &lt;span&gt;String&lt;/span&gt;&amp;gt; entry : map.entrySet()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;optional 判空&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;//获取子目录列表&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&amp;lt;CatalogueTreeNode&amp;gt; getChild(String pid) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt; (V.isEmpty(pid)) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            pid = BasicDic.TEMPORARY_DIRECTORY_ROOT;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        CatalogueTreeNode node = treeNodeMap.get(pid);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; Optional.ofNullable(node)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .map(CatalogueTreeNode::getChild)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .orElse(Collections.emptyList());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;递归&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;43&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;大数据量的递归时，避免在递归方法里new对象，可以试试把对象当作方法参数进行传递使用&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;注释&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;51&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;类 接口方法 注解 较复杂的方法 注释都要写而且要写清楚, 有时候写注释不是给别人看的 而是给自己看的&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;14. 判断元素是否存在&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;hashSet 而不是 list，list 判断一个元素是否存在的代码&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;ArrayList&amp;lt;String&amp;gt; &lt;span&gt;list&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;// 判断a是否在list中&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;list&lt;/span&gt;.size(); i++)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;a&quot;&lt;/span&gt;.equals(elementData[i]))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由此可见其复杂度为On，而hashSet底层采用hashMap作为数据结构进行存储，元素都放到map的key（即链表中）&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;HashSet&amp;lt;String&amp;gt; &lt;span&gt;set&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;// 判断a是否在set中&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;int&lt;/span&gt; index = hash(a);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;return&lt;/span&gt; getNode(index) != &lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3NTY2NDMwMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/iaPU220ia3N7QfHsbKk3mGa1lsrNh9kID5jJsopIGBnric9v4xKcFOv50y6N3A3CVRteuJ9tQI0IAIh37R3dpvGog/0?wx_fmt=png&quot; data-nickname=&quot;程序员田螺&quot; data-alias=&quot;&quot; data-signature=&quot;专注分享后端面试题，包括计算机网络、MySql数据库、Redis缓存、操作系统、Java后端、大厂面试真题等领域。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;由此可见其复杂度为O1。&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;64&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;作者：国涛i&lt;br/&gt;来源：blog.csdn.net/weixin_44912855/article/details/120866194&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(167, 167, 167)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(63, 63, 63)&quot; data-style=&quot;letter-spacing: 0.544px; font-size: 16px; color: rgb(63, 63, 63); word-spacing: 1px; line-height: inherit;&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8821c1328f6c7f8a7ab78f7078aa77fd</guid>
<title>SpringBoot 整合 JWT + Redis 实现双Token 校验 Demo</title>
<link>https://toutiao.io/k/gju5suq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;htmledit_views&quot;&gt;
                    &lt;h1&gt;一、新建一个SpringBoot 项目，springboot项目创建过程详见 &lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wang_jing_jing/article/details/115075991&quot; title=&quot;mac idea 创建 springboot 项目_JAVA·Ｄ·WangJing的博客-CSDN博客_mac idea创建springboot项目&quot;&gt;mac idea 创建 springboot 项目_JAVA·Ｄ·WangJing的博客-CSDN博客_mac idea创建springboot项目&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;二、SpringBoot 整合使用 Rdis&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wang_jing_jing/article/details/117455080&quot; title=&quot;SpringBoot 项目 添加 redis配置_JAVA·Ｄ·WangJing的博客-CSDN博客_springboot添加redis&quot;&gt;SpringBoot 项目 添加 redis配置_JAVA·Ｄ·WangJing的博客-CSDN博客_springboot添加redis&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;三、SpringBoot 整合 JWT&lt;/h1&gt; 
&lt;h2&gt;3.1、pom.xml依赖配置&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&amp;lt;!-- JWT依赖 --&amp;gt;

&amp;lt;dependency&amp;gt;

&amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;

&amp;lt;artifactId&amp;gt;jjwt&amp;lt;/artifactId&amp;gt;

&amp;lt;version&amp;gt;0.7.0&amp;lt;/version&amp;gt;

&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;

&amp;lt;groupId&amp;gt;com.auth0&amp;lt;/groupId&amp;gt;

&amp;lt;artifactId&amp;gt;java-jwt&amp;lt;/artifactId&amp;gt;

&amp;lt;version&amp;gt;3.4.0&amp;lt;/version&amp;gt;

&amp;lt;/dependency&amp;gt;

&amp;lt;!-- JSON 解析器和生成器 --&amp;gt;

&amp;lt;dependency&amp;gt;

&amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;

&amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;

&amp;lt;version&amp;gt;1.2.83&amp;lt;/version&amp;gt;

&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3.2、application.yml 增加配置&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;# 应用服务 WEB 访问端口
server:
  port: 8080

spring:
  # 应用名称
  application:
    name: jwt-demo
  # redis配置
  redis:
    # 地址
    host: 127.0.0.1
    # 端口，默认为6379
    port: 6379
    # 连接超时时间
    timeout: 10s
    # 密码
    password: wangjing

# JWT 配置
jwt:
  # 加密密钥
  secret: wangjing
  # header 名称
  header: Authorization
  # token有效时长 S
  expire:
    accessToken: 3600
    refreshToken: 4000&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3.3、JwtToken 工具类&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;package com.wangjing.jwtdemo.util;

import com.alibaba.fastjson.JSONObject;
import com.wangjing.jwtdemo.constants.Constants;
import com.wangjing.jwtdemo.vo.UserToken;
import com.wangjing.jwtdemo.vo.UserTokenInfo;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;

/**
 * @author: wangjing
 * @createTime: 2022-11-23 14:55
 * @version: 1.0.0
 * @Description: JwtToken 工具类
 */
@Component
public class JwtTokenUtil {

    @Value(&quot;${jwt.secret}&quot;)
    public String secret;

    @Value(&quot;${jwt.header}&quot;)
    public String header;

    @Value(&quot;${jwt.expire.accessToken}&quot;)
    public Integer accessTokenExpire;

    @Value(&quot;${jwt.expire.refreshToken}&quot;)
    public Integer refreshTokenExpire;

    @Autowired
    RedisUtil redisUtil;


    /**
     * 创建 刷新令牌 与 访问令牌 关联关系
     *
     * @param userToken
     * @param refreshTokenExpireDate
     */
    public void tokenAssociation(UserToken userToken, Date refreshTokenExpireDate) {
        Long time = (refreshTokenExpireDate.getTime() - System.currentTimeMillis()) / 1000 + 100;
        redisUtil.set(userToken.getRefreshToken(), userToken.getAccessToken(), time);
    }

    /**
     * 根据 刷新令牌 获取 访问令牌
     *
     * @param refreshToken
     */
    public String getAccessTokenByRefresh(String refreshToken) {
        Object value = redisUtil.get(refreshToken);
        return value == null ? null : String.valueOf(value);
    }


    /**
     * 添加至黑名单
     *
     * @param token
     * @param expireTime
     */
    public void addBlacklist(String token, Date expireTime) {
        Long expireTimeLong = (expireTime.getTime() - System.currentTimeMillis()) / 1000 + 100;
        redisUtil.set(getBlacklistPrefix(token), &quot;1&quot;, expireTimeLong);
    }

    /**
     * 校验是否存在黑名单
     *
     * @param token
     * @return true 存在 false不存在
     */
    public Boolean checkBlacklist(String token) {
        return redisUtil.hasKey(getBlacklistPrefix(token));
    }

    /**
     * 获取黑名单前缀
     *
     * @param token
     * @return
     */
    public String getBlacklistPrefix(String token) {
        return Constants.TOKEN_BLACKLIST_PREFIX + token;
    }


    /**
     * 获取 token 信息
     *
     * @param userTokenInfo
     * @return
     */
    public UserToken createToekns(UserTokenInfo userTokenInfo) {
        Date nowDate = new Date();
        Date accessTokenExpireDate = new Date(nowDate.getTime() + accessTokenExpire * 1000);
        Date refreshTokenExpireDate = new Date(nowDate.getTime() + refreshTokenExpire * 1000);

        UserToken userToken = new UserToken();
        BeanUtils.copyProperties(userTokenInfo, userToken);
        userToken.setAccessToken(createToken(userTokenInfo, nowDate, accessTokenExpireDate));
        userToken.setRefreshToken(createToken(userTokenInfo, nowDate, refreshTokenExpireDate));

        // 创建 刷新令牌 与 访问令牌 关联关系
        tokenAssociation(userToken, refreshTokenExpireDate);
        return userToken;
    }

    /**
     * 生成token
     *
     * @param userTokenInfo
     * @return
     */
    public String createToken(UserTokenInfo userTokenInfo, Date nowDate, Date expireDate) {
        return Jwts.builder()
                .setHeaderParam(&quot;typ&quot;, &quot;JWT&quot;)
                .setSubject(JSONObject.toJSONString(userTokenInfo))
                .setIssuedAt(nowDate)
                .setExpiration(expireDate)
                .signWith(SignatureAlgorithm.HS512, secret)
                .compact();
    }

    /**
     * 获取 token 中注册信息
     *
     * @param token
     * @return
     */
    public Claims getTokenClaim(String token) {
        try {
            return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * 验证 token 是否过期失效
     *
     * @param token
     * @return true 过期 false 未过期
     */
    public Boolean isTokenExpired(String token) {
        return getExpirationDate(token).before(new Date());
    }

    /**
     * 获取 token 失效时间
     *
     * @param token
     * @return
     */
    public Date getExpirationDate(String token) {
        return getTokenClaim(token).getExpiration();
    }


    /**
     * 获取 token 发布时间
     *
     * @param token
     * @return
     */
    public Date getIssuedAtDate(String token) {
        return getTokenClaim(token).getIssuedAt();
    }


    /**
     * 获取用户信息
     *
     * @param token
     * @return
     */
    public UserTokenInfo getUserInfoToken(String token) {
        String subject = getTokenClaim(token).getSubject();
        UserTokenInfo userTokenInfo = JSONObject.parseObject(subject, UserTokenInfo.class);
        return userTokenInfo;
    }

    /**
     * 获取用户名
     *
     * @param token
     * @return
     */
    public String getUserName(String token) {
        UserTokenInfo userInfoToken = getUserInfoToken(token);
        return userInfoToken.getUserName();
    }

    /**
     * 获取用户Id
     *
     * @param token
     * @return
     */
    public Long getUserId(String token) {

        UserTokenInfo userInfoToken = getUserInfoToken(token);
        return userInfoToken.getUserId();
    }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3.4、JwtFilter 拦截器&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;package com.wangjing.jwtdemo.filter;

import com.wangjing.jwtdemo.util.JwtTokenUtil;
import com.wangjing.jwtdemo.vo.UserTokenInfo;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @author: wangjing
 * @createTime: 2022-10-17 19:03
 * @version: 1.0.0
 * @Description: Jwt 拦截器
 */
@Slf4j
@Component
public class JwtFilter extends HandlerInterceptorAdapter {

    @Resource
    JwtTokenUtil jwtTokenUtil;


    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        // 获取token
        String token = request.getHeader(jwtTokenUtil.header);

        if (StringUtils.isEmpty(token)) {
            token = request.getParameter(jwtTokenUtil.header);
        }

        if (StringUtils.isEmpty(token)) {
            // 只是简单DEMO，这里直接返回false，可以自己进行添加
            log.error(&quot;token 不能为空！&quot;);
            return false;
        }

        // 判断token是否超时
        if (jwtTokenUtil.isTokenExpired(token)) {
            log.error(&quot;token 已失效！&quot;);
            return false;
        }

        // 判断 token 是否已在黑名单
        if (jwtTokenUtil.checkBlacklist(token)) {
            log.error(&quot;token 已被加入黑名单！&quot;);
            return false;
        }

        // 获取用户信息
        UserTokenInfo userInfoToken = jwtTokenUtil.getUserInfoToken(token);
        // 通过用户信息去判断用户状态，等业务
        //TODO 涉及到业务，这里不在阐述

        return true;
    }
}&lt;/code&gt;&lt;/pre&gt; 
&lt;p/&gt; 
&lt;h2&gt;3.5、WebConfig 类（注入拦截器）&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;package com.wangjing.jwtdemo.config;

import com.wangjing.jwtdemo.filter.JwtFilter;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import javax.annotation.Resource;

/**
 * @author: wangjing
 * @createTime: 2022-10-17 19:02
 * @version: 1.0.0
 * @Description: 请求拦截器
 */
@Configuration
public class WebConfig implements WebMvcConfigurer {
    @Resource
    private JwtFilter jwtFilter;

    /**
     * 不需要拦截地址
     */
    public static final String[] EXCLUDE_URLS = {
            &quot;/login/**&quot;
    };

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(jwtFilter).addPathPatterns(&quot;/**&quot;)
                .excludePathPatterns(EXCLUDE_URLS);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;3.6、LoginController（简单的代码实现）&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;package com.wangjing.jwtdemo.controller;


import com.wangjing.jwtdemo.entity.Result;
import com.wangjing.jwtdemo.enums.ResultTypeEnum;
import com.wangjing.jwtdemo.util.JwtTokenUtil;
import com.wangjing.jwtdemo.vo.LoginBody;
import com.wangjing.jwtdemo.vo.UserToken;
import com.wangjing.jwtdemo.vo.UserTokenInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;


/**
 * @author wangjing
 * @since 2022-10-18
 */
@RestController
@RequestMapping(&quot;/login&quot;)
public class LoginController {

    @Autowired
    JwtTokenUtil jwtTokenUtil;

    /**
     * 登录
     *
     * @param loginBody
     * @return
     */
    @PostMapping(&quot;/login&quot;)
    public Result&amp;lt;UserToken&amp;gt; login(@RequestBody LoginBody loginBody) {
        // 业务验证：入参校验 + 用户信息校验查询
        //TODO 涉及到业务，这里不在阐述
        UserTokenInfo userTokenInfo = new UserTokenInfo();
        userTokenInfo.setUserId(1L);
        userTokenInfo.setUserName(&quot;wangjing&quot;);
        userTokenInfo.setRealName(&quot;王京&quot;);

        // 生成Token
        UserToken userToken = jwtTokenUtil.createToekns(userTokenInfo);

        return new Result&amp;lt;&amp;gt;(ResultTypeEnum.SUCCESS, userToken);
    }

    /**
     * 刷新令牌
     *
     * @param refreshToken
     * @return
     */
    @PostMapping(&quot;/refreshToken/{refreshToken}&quot;)
    public Result&amp;lt;UserToken&amp;gt; refreshToken(@PathVariable(&quot;refreshToken&quot;) String refreshToken) {

        // 判断token是否超时
        if (jwtTokenUtil.isTokenExpired(refreshToken)) {
            return new Result&amp;lt;&amp;gt;(ResultTypeEnum.TOKEN_INVALID);
        }

        // 刷新令牌 放入黑名单
        jwtTokenUtil.addBlacklist(refreshToken, jwtTokenUtil.getExpirationDate(refreshToken));
        // 访问令牌 放入黑名单
        String odlAccessToken = jwtTokenUtil.getAccessTokenByRefresh(refreshToken);
        if (!StringUtils.isEmpty(odlAccessToken)) {
            jwtTokenUtil.addBlacklist(odlAccessToken, jwtTokenUtil.getExpirationDate(odlAccessToken));
        }

        // 生成新的 访问令牌 和 刷新令牌
        UserTokenInfo userInfoToken = jwtTokenUtil.getUserInfoToken(refreshToken);

        // 生成Token
        UserToken userToken = jwtTokenUtil.createToekns(userInfoToken);

        return new Result&amp;lt;&amp;gt;(ResultTypeEnum.TOKEN_INVALID, userToken);
    }


    /**
     * 登出
     *
     * @return
     */
    @PostMapping(&quot;/logOut/{token}&quot;)
    public Result logOut(@PathVariable(&quot;token&quot;) String token) {
        // 放入黑名单
        jwtTokenUtil.addBlacklist(token, jwtTokenUtil.getExpirationDate(token));
        return new Result&amp;lt;&amp;gt;(ResultTypeEnum.SUCCESS);
    }

    /**
     * 注销
     *
     * @return
     */
    @PostMapping(&quot;/logOff/{token}&quot;)
    public Result logOff(@PathVariable(&quot;token&quot;) String token) {
        // 修改用户状态
        //TODO 涉及到业务，这里不在阐述

        // 放入黑名单
        jwtTokenUtil.addBlacklist(token, jwtTokenUtil.getExpirationDate(token));

        return new Result&amp;lt;&amp;gt;(ResultTypeEnum.SUCCESS);
    }


}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt; 3.7、本文只列出相对重要的类，具体Demo 下载地址：&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://download.csdn.net/download/wang_jing_jing/87127439&quot; title=&quot;https://download.csdn.net/download/wang_jing_jing/87127439&quot;&gt;https://download.csdn.net/download/wang_jing_jing/87127439&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;四、通过postman 简单测试&lt;/h1&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/6a50da48fdce4c2188568c25b4a21e70.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/434c64e72d90481e8cad063fba7291db.png&quot;/&gt; &lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;注：以上内容仅提供参考和交流，请勿用于商业用途，如有侵权联系本人删除！&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>