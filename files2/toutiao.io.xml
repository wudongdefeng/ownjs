<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>41d051fcc911088eb6cc94d07b9c8021</guid>
<title>轻量级的架构决策记录机制</title>
<link>https://toutiao.io/k/zwvkvt6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：倪新明&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ADR&lt;/strong&gt;是一种性价比非常高的&lt;strong&gt;架构决策文档化实践&lt;/strong&gt;，团队引入和实践成本很低，却能为团队带来极大收益！&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;1 团队研发面临的问题&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;不论是在传统的IT行业，还是互联网行业，研发团队在架构决策层面或多或少的都会&lt;strong&gt;面临以下问题或挑战&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;•新成员加入团队，对系统现有的架构决策可能会&lt;strong&gt;盲目遵守&lt;/strong&gt;，只知其然，不知其所以然；或者&lt;strong&gt;挑战或违反&lt;/strong&gt;约束，持续挑战当前决策，“质疑”决策的合理性和正确性，负责人需要不间断的解释、同步、推动达成共识&lt;/p&gt;

&lt;p&gt;•架构决策的潜在问题随着时间推移暴露，但，&lt;strong&gt;如果决策时进行充分分析这些问题可能会提前发现和规避&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;•现有系统架构决策是&lt;strong&gt;如何演进&lt;/strong&gt;？当前决策背后的&lt;strong&gt;动机是什么&lt;/strong&gt;？有可能团队内已经没有人能准确的回答&lt;/p&gt;

&lt;p&gt;•相似架构决策场景在系统中&lt;strong&gt;重复出现&lt;/strong&gt;，由于遗忘决策原因，或团队成员变化等因素，仍要花时间去分析、设计和推动干系人达成共识&lt;/p&gt;

&lt;p&gt;•团队内&lt;strong&gt;只有少部分人负责架构设计&lt;/strong&gt;，其他团队成员无机会参与，但实际上&lt;strong&gt;团队成员有相应诉求&lt;/strong&gt;，至少能够了解某项关键架构设计的决策过程&lt;/p&gt;

&lt;p&gt;•即使团队内部接手的项目，&lt;strong&gt;你能快速获取系统关键架构决策及其原因吗&lt;/strong&gt;？你可能会从代码库中寻找架构决策的蛛丝马迹，但很难获取架构决策背后的动机以及决策的演进过程&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基于以上这些问题，我们想&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;•通过&lt;strong&gt;最小但依然高效&lt;/strong&gt;的方式记录系统的架构决策&lt;/p&gt;

&lt;p&gt;•能够&lt;strong&gt;识别系统关键决策的演进过程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;•架构决策以及设计最佳实践能够在团队间&lt;strong&gt;高效同步&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;•团队成员都有机会参与到架构设计决策过程中&lt;/p&gt;

&lt;p&gt;通过文档形式记录架构决策首当其冲的问题是：&lt;strong&gt;文档过期&lt;/strong&gt;！！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;确实，过期问题是文档化必然面临的问题&lt;/strong&gt;。无论通过什么机制，比如强流程、自动化更新等都存在过期风险。那为什么还要选择记录架构决策呢?基于以下两个原因：&lt;/p&gt;

&lt;p&gt;•&lt;strong&gt;性价比&lt;/strong&gt;：架构决策文档化的收益远大于维护过期带来的成本&lt;/p&gt;

&lt;p&gt;•&lt;strong&gt;轻量级&lt;/strong&gt;：保持ADR的简短、轻量，&lt;strong&gt;规模越小的文档越容易保持与实际的同步&lt;/strong&gt;。&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;2 ADR剖析&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Architecture Decision Record&lt;/strong&gt;，缩写ADR，即架构决策记录，该实践最先由Michael Nygard发起，是记录架构决策最有效的方式之一。简单来说，ADR是一种对架构决策的文档化记录，其&lt;strong&gt;目的是通过文档化的形式记录系统的架构决策、原因以及决策过程&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;通过对系统架构决策进行有效记录，团队可以从以下几个层面获得收益：&lt;/p&gt;

&lt;p&gt;•新人引导，便于快速熟悉系统新的团队成员可以快速获取系统的历史架构决策，理解决策背后的背景、决策过程以及相关影响&lt;/p&gt;

&lt;p&gt;•项目交接，对已有决策进行文档化积累敏捷环境强调团队对知识的快速学习，基于ADRs团队可以快速熟悉已有系统的架构演进过程&lt;/p&gt;

&lt;p&gt;•对齐认知通过推动落地ADRs，团队成员更容易对设计最佳实践达成一致认识和理解，进一步避免后续建设过程中的“重复造轮子”，提升设计知识在团队间复用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;的ADR的基本结构包括&lt;strong&gt;标题、状态、背景、决策、影响&lt;/strong&gt;共五个部分，一般情况下，推荐增加&lt;strong&gt;一致性和备注&lt;/strong&gt;两个极具价值的额外章节作为补充。&lt;/p&gt;

&lt;p&gt;需要说明的是，&lt;strong&gt;团队可以按需增加其他章节以增强ADR的表现能力&lt;/strong&gt;，比如增加可选方案章节对可选方案进行详细描述。&lt;/p&gt;

&lt;p&gt;﻿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f1bdc6e4b5b4d6a8230fdb01fc07c11%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;﻿﻿  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;标题【必选】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ADR的 “标题” 部分主要包括两部分，其一是顺序编号，其二是对架构决策的简短描述。标题的描述需要确保对架构决策进行准确描述、清晰无歧义，同时，也要&lt;strong&gt;保持简短明了&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;例如：ADR 01. 订单服务和履约服务之间采用异步消息机制&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;状态【必选】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ADR的 &quot;状态&quot; 限定为 &lt;strong&gt;待审核 , 审核通过，被取代&lt;/strong&gt; 三种状态之一。&lt;/p&gt;

&lt;p&gt;•待审核：决策必须被高级别决策者或ARB审核&lt;/p&gt;

&lt;p&gt;•审核通过：架构决策已经被审核，并已准备就绪进行实现&lt;/p&gt;

&lt;p&gt;•被取代：架构决策已发生变更，并被另一个ADR取代。该状态表明，之前的ADR一定是被审核通过的，处于提议状态未审核通过的ADR是不允许流向该状态。处于提议状态的ADR只能持续修改直到审核通过。&lt;strong&gt;被取代状态提供了一种有效的架构决策追溯机制，能够帮助团队识别架构决策的演进过程&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;背景【必选】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;推动架构师对此项&lt;strong&gt;架构决策的具体背景或问题进行描述，以及简洁扼要地表述可能的可选方案&lt;/strong&gt;。决策背景在一定程度上也是对系统架构的一种描述。&lt;/p&gt;

&lt;p&gt;说明：&lt;strong&gt;不建议&lt;/strong&gt;在此章节进行详细的替代方案分析和说明，如果确实需要进行详细阐述，则建议增加额外的章节进行说明。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可选方案【可选】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对可选的替代方案进行详细描述，对比不同方案的优劣势&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;决策【必选】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该部分包含了&lt;strong&gt;具体的架构决策以及相应的决策依据&lt;/strong&gt;，原则上要使用肯定式、命令式的描述方式表述具体的架构决策，不要存在主观的、消极的、模棱两可的、可能存在歧义的措辞。说明：关注Why 而非 How，理解架构决策的原因比理解怎么实现更加重要&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;影响【必选】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该部分描述此项架构决策的整体影响。&lt;strong&gt;每项决策都会或多或少的对现有系统产生影响，包括好的影响和坏的影响&lt;/strong&gt;，通过该章节推动架构师思考这些影响&lt;strong&gt;是否超过架构决策的收益&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一致性【可选】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该部分并不是标准ADR元素，但同样颇具价值，&lt;strong&gt;其作用在于推动架构师从架构一致性的视角思考所作架构决策如何进行度量和治理&lt;/strong&gt;。&lt;strong&gt;架构师必须确定该项架构决策的一致性保证是通过人工方式还是通过自动化方式实现&lt;/strong&gt;。如果可以通过自动化方式进行，则在该章节明确说明自动化的执行方案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;备注【必选】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;备注部分并不是标准ADR的结构，但是强烈推荐增加该章节。备注部分主要包含的ADR的各种元数据，例如：&lt;/p&gt;

&lt;p&gt;原作者、审核日期、审核人、替代日期、最后修改日期、修改人、最后修改内容&lt;/p&gt;

&lt;p&gt;说明：有些团队认为备注部分的元数据信息没有太大价值，特别是，当团队将ADRs与代码一同存储在配置库时(并不推荐该种存储方式)。但实际上，&lt;strong&gt;将元信息作为ADR的一部分比依赖配置库更具价值和优势&lt;/strong&gt;。&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;3 ADR的组织和存储&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;ADR文档具体存放在什么位置，比如FTP服务器、WIKI或者同项目代码配置库，不同的团队可以根据情况进行灵活选择。原则：ADR能够被干系人便捷地获取。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方式一：基于类似Git的配置库存储&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;p&gt;•架构决策离代码很近，方便研发人员获取&lt;/p&gt;

&lt;p&gt;•通过配置库的版本管理能力轻松的实现ADR的变更管理&lt;/p&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;p&gt;ADR的干系人不仅仅是研发人员，还有技术经理、产品经理、业务人员等其他角色的项目干系人。基于太技术性的配置库进行存储，显然对除研发以外的角色不太友好。同时，还需要对非研发人员开通仓库权限，代码安全性也是须要考虑的因素。另外，基于配置库存储不太方便存放同一系统不同应用下通用的架构决策以及应用间的集成架构决策。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方式二：类似WIKI的在线协同编辑共享系统内&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;优点：干系人友好在线协作方便处理跨应用的架构决策&lt;/p&gt;

&lt;p&gt;缺点：开发人员不友好，离开发库较远&lt;/p&gt;

&lt;p&gt;基于对跨应用架构决策的存储，团队选择将ADR存储在在线协同文档平台，并通过合理的文件夹结构进行组织，参考以下组织形式：&lt;/p&gt;

&lt;p&gt;﻿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d9b90d9c37744e19523c5ec0bbefd91%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;﻿﻿  &lt;/p&gt;

&lt;h1&gt;4 ADR融入研发流程&lt;/h1&gt;

&lt;p&gt;如果要落地ADR，则须要将其融入到现有的研发过程中。ADR涵盖的流程活动主要是：&lt;/p&gt;

&lt;p&gt;﻿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ebfbfe6f1ef4b63b24c2deaa10a5b4f%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;﻿﻿  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;制定ADR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;•活动名称：制定架构决策记录(ADRs)&lt;/p&gt;

&lt;p&gt;•前置要求：无&lt;/p&gt;

&lt;p&gt;•干系人职责： 子系统负责人负责制定子系统作用域内的ADR，系统架构师负责跨系统架构决策制定&lt;/p&gt;

&lt;p&gt;•活动输入：PRD活动输出：《架构决策记录》&lt;/p&gt;

&lt;p&gt;•执行形式：线下，或非正式的头脑风暴&lt;/p&gt;

&lt;p&gt;•执行时间：属于系统设计的一个子活动，在系统设计阶段进行&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;评审ADR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;•活动名称：评审ADR&lt;/p&gt;

&lt;p&gt;•活动目的：评审ADR的完整性和正确性，确保架构决策的合理性&lt;/p&gt;

&lt;p&gt;•前置要求：已完成ADR制定&lt;/p&gt;

&lt;p&gt;•干系人职责：ADR指定人发起评审，系统架构师及核心研发参与评审活动&lt;/p&gt;

&lt;p&gt;•活动输入：ADRs&lt;/p&gt;

&lt;p&gt;•活动输出：ADR评审记录（在ADR文档上更新评审信息）&lt;/p&gt;

&lt;p&gt;•执行形式：正式或非正式的评审会&lt;/p&gt;

&lt;p&gt;•执行时间：技术方案内部评审时，对该方案相关的ADR进行评审&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;5 ADR实践过程中的常见疑问&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;问题一：写ADR的 “时间成本较高” ，延长了技术方案设计周期 ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答：&lt;strong&gt;否！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该疑问可能主要来自于以下几个原因：&lt;/p&gt;

&lt;p&gt;•写文档 = 费时间？大多数研发人员排斥文档，且没有写文档的习惯。&lt;/p&gt;

&lt;p&gt;•对ADR模板理解不够深入和准确，撰写过程中无从下手&lt;/p&gt;

&lt;p&gt;•决策缺少必要的分析习惯，对架构决策缺少必要的对比、分析，在撰写ADR时，缺少必要的依据，不得不额外查找资料，所以写的“很慢”&lt;/p&gt;

&lt;p&gt;但实际上，如果作为架构决策者具备决策分析的习惯，特别是在技术方案设计时，进行过充分的决策分析，&lt;strong&gt;1-2页的ADR文档撰写不会超过 1 个小时，甚至在半个小时内完成&lt;/strong&gt;。即使制定和评审ADR影响了一小部分设计时间，通过对关键决策的充分分析和审重决策所带来的价值远胜过返工造成额外成本&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题二：遗留系统没有必要再写ADR ？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答：&lt;strong&gt;否！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;价值是决定是否写ADR的因素之一&lt;/strong&gt;，切忌ADR只对当前架构决策进行记录。对于遗留系统，在团队遗忘之前，记录其关键架构决策依然具有较大价值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题三：ADR这种文档化机制与敏捷冲突 ？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答：&lt;strong&gt;否！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;敏捷宣言中指出：可以工作的软件胜过面面俱到的文档。其强调左侧更有价值，但不否定右侧的价值。&lt;/p&gt;

&lt;p&gt;因此，&lt;strong&gt;文档化并不一定与敏捷理念发生冲突&lt;/strong&gt;。&lt;strong&gt;通过采用轻量级的文档机制，记录具有核心价值的东西，确保文档机制不会成为团队负担，本身与敏捷文化相互契合&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题四：ADR评审是不是流程太重 ？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答：&lt;strong&gt;可能，但是有必要！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ADR评审是引入ADR机制的重要活动之一，不可忽略！&lt;strong&gt;正是通过多干系人参与下的评审活动，才能产生ADR的诸多重要价值&lt;/strong&gt;。通过这种正式或非正式的评审活动：&lt;/p&gt;

&lt;p&gt;•提升架构决策的合理性和正确性&lt;/p&gt;

&lt;p&gt;•提升团队的技术氛围&lt;/p&gt;

&lt;p&gt;•提升团队成员的技术思考能力、技术水平、架构决策的参与感，实现架构决策在团队成员间的高效同步......&lt;/p&gt;

&lt;p&gt;因此，ADR的评审活动是必要的，从效率考虑，团队可以优化评审过程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题五：ADR模板很多，团队应该如何选择？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答：&lt;strong&gt;没有标准的，只有最适合的 ！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ADR没有统一的模板，选择适合团队的，建议：&lt;/p&gt;

&lt;p&gt;模板保持轻量，不要试图覆盖所有的场景，否则，ADR会成为团队成员的负担&lt;/p&gt;

&lt;p&gt;更重要的是，ADR模板和模板元素的含义一定要在团队成员间达成一致&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题六：什么时候需要写ADR没有量化条件，所以很难落地？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答：&lt;strong&gt;否！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;原则上：对系统产生显著影响的架构决策需要写ADR。&lt;/p&gt;

&lt;p&gt;如何定义 &quot;显著影响&quot; 没有量化指标，但如果存在以下场景可能是需要写ADR的信号：&lt;/p&gt;

&lt;p&gt;•直接影响高优先级的架构属性&lt;/p&gt;

&lt;p&gt;•修改对外接口：对外提供的接口修改往往需要进行充分影响分析&lt;/p&gt;

&lt;p&gt;•引入或者移除依赖：依赖的加入和移除往往标示着组件能力的引进和废弃&lt;/p&gt;

&lt;p&gt;•改变系统的通用结构：工程结构是应用架构的重要维度之一&lt;/p&gt;

&lt;p&gt;•迫使研发人员改变开发方式接受战略性技术债：重构影响较大的技术债往往对现有系统会有较大影响&lt;/p&gt;

&lt;p&gt;以上场景只是可能需要写ADR的一些信号，但并不是强制约定。&lt;/p&gt;

&lt;p&gt;是否需要写ADR的终极实践准则是：具体情况，具体分析&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;6 ADR撰写中的常见误区&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;ADR的结构虽然非常简单，但团队在开始实践过程时对于每个章节的内容表述极易出现偏差，在撰写ADR文档时常见的问题如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【背景】部分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;典型反例：&lt;/p&gt;

&lt;p&gt;未直接说明推动进行决策的原因：正确的方式是要明确说明进行此次架构决策的背景或动机是什么，明确 WHY对可选方案进行详细说明：ADR实践初期，团队常犯的错误式在 “背景” 部分对方案进行详细的大篇幅论述&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【决策】部分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;典型反例：&lt;/p&gt;

&lt;p&gt;缺少决策依据说明：决策依据过于简单，不充分，不能推到选择当前决策的论据决策结果表述措辞不够明确、模棱两可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【可选方案】部分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;典型反例：分析角度存在明显倾向性，不够客观&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【一致性】部分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该章节的目的是&lt;strong&gt;推动架构师对如何确保决策被团队遵守进行深入思考，特别是考虑是否可以通过自动化方式进行&lt;/strong&gt;。典型的反例词汇是：系统落地、开发实现......&lt;/p&gt;

&lt;p&gt;如果不能不同自动化方式进行检查，可能 设计评审、同行代码评审、专家代码评审是可能的方式如果可以通过自动化方式进行，则要说明如何进行自动化方式进行约束校验。例如，如果工程实践通过Archunit进行单测，则可以表述基于Archunit的规则代码。&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;7 结语&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;ADR不仅仅是一份文档，团队将获得以下收益：&lt;/p&gt;

&lt;p&gt;•系统关键决策知识留存有助于新团队成员快速融入，知其然也知其所以然&lt;/p&gt;

&lt;p&gt;•提升团队技术氛围提升团队技术思考力和技术能力，同步最佳实践&lt;/p&gt;

&lt;p&gt;•提升架构决策的&lt;strong&gt;合理性和正确性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;•管理技术债的能力&lt;/p&gt;

&lt;p&gt;•更高效的&lt;strong&gt;架构决策沟通机制&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;•减少重复性的决策讨论和分析&lt;/p&gt;

&lt;p&gt;•架构决策一致性&lt;strong&gt;推动系统架构约束自动化检查&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开始&lt;/strong&gt;团队的ADR之旅吧！&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>72e7764aadb60a7b1d1951c2e18c0f42</guid>
<title>携程微服务体系下的服务治理之道和优化实践</title>
<link>https://toutiao.io/k/oh5jqac</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;HongLiang，携程高级技术专家，专注系统性能、稳定性、承载能力和交易质量，在技术架构演进、高并发等领域有丰富的实践经验。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一、背景&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;微服务架构在中大型互联网公司中被广泛应用，随着业务的发展，应用数越来越多、调用关系也越来越复杂。中台化后，交易系统要支持业务线多，系统复杂性高，原系统虽然能支撑业务量的持续增长，但在稳定性、吞吐力和资源利用率上面，还存在优化空间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;分享的目的&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文站在业务开发角度介绍开发在微服务架构下遇到的相关问题（微服务架构的优缺点这里不再赘述），以门票活动预订流程查询引擎为例，分享微服务治理的实战经验，希望能给遇到同样问题的同学提供一些借鉴思路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如下图所示，蓝色部分为本文的重点&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7869955156950673&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cySCt22h0ickynohV84lRtiabia3GfiaTQsibngCOMhcnWWF4o3ICRJ0biaibUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;892&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1 微服务架构关注点&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在微服务治理之前，我们先简单了解一下微服务历史和陷阱。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、微服务简史&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;微服务概念在2005年被提出，2011年用来代表架构风格。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;定义&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成，每个微服务仅关注于完成一件任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.1 微服务与SOA的关系&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大家在使用SOA (Service-Oriented Architecture)的时候往往分不清和微服务有什么关系，总结如下：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;微服务是SOA的实现方式&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;微服务是去掉ESB后的SOA&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;微服务是一种和SOA相似但是两种不同的架构设计风格&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.39296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cy5nosN9IQt0TS2AMib21dO4DvUfYGsQKvicMZbpLlMSVlFHiaEiaCXS17NA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图2 微服务与SOA的关系&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;了解微服务与SOA关系后，再对比一下功能差异：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.39666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cyFUWv6ncPe3icmo9A3Nx1B121iasv7ryhOXXd229ImnhSplqA0UCzkCjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;表1 微服务与SOA对比&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.2 携程SOA从1.0到 2.0演进&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cyFho8IXAw40XV3mGSpe57NCFMLfjq7X9MYsicu5IxSWIlFZx7A0DqiciaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图3 携程SOA演进&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;携程微服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：携程SOA2.0是微服务架构，推荐单机、单应用、单服务。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、微服务的陷阱&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;微服务这个话术会将关注点错误的聚焦在“微”上，大家会误以为服务越小越好，实际上大小并不是第一考虑因素。接下来我们来看看开发微服务应用的时候容易踩到的陷阱。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图可以看出，服务拆分越细，调用关系越复杂。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调用链路理论上有 n * （n-1） 条：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.635593220338983&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cyDc8645ibqFutrWzcWXOHjqrFM7ZT9ImsibpQY2MQRgVIleOKVPDEDZMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1180&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图4 服务粒度越细调用关系越复杂&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;应用粒度拆分过细容易带来以下几个问题：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 重复调用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;调用路径 C - &amp;gt;D -&amp;gt;E 和 C -&amp;gt;E， 对于E的一次请求，可能会被调用了多次。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.7378277153558053&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cyXoohY2FLyyx7kI0uKxPVTYvovafxaI0hDe9Vnr84Yicnzjbu4bWSu8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;534&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图5 一次请求中服务E被重复调用&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 循环依赖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;一条链路出问题，导致其他链路故障。当服务B1或B2 性能变差时，最终导致链路A/B都会被影响，严重情况下导致宕机。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0303030303030303&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cy63k8bIRrfoEObhy6PaNIllc5BXz2fpgvFpnBWElseSZk1ica0xicap7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图6 循环依赖&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.3 链路太长&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;服务层级过深，一次请求链路太长会导致性能下降，每层网络延时和序列化反序列化时间都有性能损失，层级越深，下游性能越差。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;链路太长，定位问题困难（效率低），当服务F出现故障时，下游A~E 应用 owner 需要排查原因。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.9377431906614786&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cyk5FzzkuT7icTqicgAQMNYrXJBZS8SiaoCGXiatUm5zopVNiakYVSfQUJxpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;514&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图7 链路越长，性能损失越大&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上这些问题，在日常开发中容易遇到，下面我们看看怎么解决这些问题。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、微服务治理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;从下图中可以看到应用之间调用关系复杂，并且有严重的循环依赖问题。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41338582677165353&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cyDaVgOuO9zZ8xbRF7FIjAvKdcvZgm1cGNBmk4oSXTebJSgcGu2x7wTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;762&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图8 应用调用关系图（双黄线表示循环依赖）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;循环依赖是微服务里面容易忽视的问题，系统稳定的情况下不会出现问题，由于某些原因，当系统从稳定变成非稳定状态时，循环依赖容易导致更严重的故障。我们先看1个生产案例：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;案例：&lt;/span&gt;&lt;span&gt;发布过程中下游超时，订单下跌&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;刚接入流量的机器因线程初始化、类加载锁、JIT等会产生慢请求。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8200836820083682&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cy27tFRXLiaJJRKibErPGb9LZQKKmSUMeBibmDpTzPx6qHBQTKLkKzQibeEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;717&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图9 发布过程中的慢请求&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当流量接入时，请求在刚拉入的机器中多次来回调用，因多次慢请求叠加，导致接口越来越慢，机器资源耗尽，一台一台被拖垮，最终整个服务不可用，产生雪崩（如下图）。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6719298245614035&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1ev4346udJnGia8hicXTMq3cycY9JNKmOBib7TtLe7MV2MDRpic0yqpfEWvbhflpzppmqkIkXrIyK6dhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1140&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图10 发布过程中循环依赖导致应用雪崩&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然如果应用间循环依赖QPS很小，例如单机QPS在10以内，少量慢请求无法将资源耗尽，一般不导致故障，但是这种“坏味道”会给系统埋下隐患，严重的时候会演变为接口级的循环依赖，导致死循环，并且这种死循环可能在测试环境由于命中缓存没有被发现，发布到生产后有些缓存穿透的请求就会导致循环调用，直到超时；如果单机QPS上百，产生的慢请求短时间内耗尽资源，阻塞后续请求，导致性能下降，产生故障。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;故障恢复期间，由于调用关系复杂，分不清上下游关系，无法根据调用关系来限流，导致定位困难，恢复时间长。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上述案例主要是由循环依赖引起，像一颗炸弹，为系统埋下隐患。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了循环依赖，还有下面几类问题可以优化：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1）层级太深：&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）&lt;/span&gt;&lt;span&gt;重复缓存&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;同一个DB不同应用重复构建缓存&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）流量大：&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重复调用，直接调用或者间接调用，末尾服务压力大&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;离线任务峰值波动太大&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;4）&lt;/span&gt;&lt;span&gt;未&lt;/span&gt;&lt;span&gt;隔离：&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;核心、非核心流量&lt;/span&gt;&lt;span&gt;未隔离&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5）效能低：&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span&gt;人均应用多/资源使用率低&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;针对上面的几类问题，我们制定了微服务治理目标、原则和治理策略。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.1 治理目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）稳定&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：故障隔离，提升系统稳定性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）交付&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：独立迭代、独立扩展、快速交付&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;横向拆分：减少耦合，独立迭代。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;纵向拆分：减少应用层级，提高开发效率，缩短交付周期。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）重用&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：相同功能复用&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;不同系统重复功能复用，减少重复开发，提升一致性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.2 治理原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1）避免跨团队维护一套代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）服务粒度要与团队规模匹配，人均应用数在3个以内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根&lt;/span&gt;&lt;span&gt;据历史经验，一个人在超过3个应用之间来回切换开发，开发效率会降低，日常处理告警繁&lt;/span&gt;&lt;span&gt;琐，业务和性能优化也无法聚焦。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）应用分层：&lt;/span&gt;&lt;span&gt;上一层可以依赖任意下一层级(不可反向依赖)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）层级深度：垂直域/小组内，应用层级控制在5层以内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里的“5层”是我们根据实际业务实际情况来定的。&lt;/span&gt;&lt;span&gt;一个垂直域/小组内应用层级超过5层，一个需求上下游依赖太多，开发效率会降低。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.3 构建原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1）业务领域拆分：单一职责，业务建模（对人员要求高）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）数据存储：独立的数据读写API&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）复用性：功能复用(比如基础数据提供能力，提供给不同小组使用)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4）&lt;/span&gt;&lt;span&gt;稳&lt;/span&gt;&lt;span&gt;定规则与易变动规则隔离&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5）快速失败：设置合理的熔断规则&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6）异步通信：将与此次请求无关的操作/调用异步化&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.4 治理策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）去除循环依赖&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;服务B和服务C 循环依赖&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7859375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXWoTMcc5Yg1jtHobyibf4IokOEiaAPbR0dwqPaksAQQsfvan09AfykZNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图11 循环依赖治理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）缩短调用链路&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;服务BCD 链路太长（垂直域/小组内)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoX8F9Bt1B8sich4FNiakRUF0vbreVic9IF0YnGGjzlOJ5A5oJaBSDLFrejw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图12 缩短调用链路&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3）复用性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;服务BCD 对相同数据重复缓存（存在一致性问题）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下沉基础服务，提供基础数据：&lt;/span&gt;&lt;span&gt;将相同的功能下沉为基础服务，例如：&lt;/span&gt;&lt;span&gt;基础数据服务提供缓存，翻译等功能。&lt;/span&gt;&lt;span&gt;避免不同的使用方重复缓存，重复接入翻译。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXBp5Boc21fwbRNW5ibKqITo9l8WXjxDIvIa7MtSEzEGbHvut4YF8IEWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图13 重复功能下沉&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果：&lt;/span&gt;&lt;span/&gt;&lt;span&gt;下沉基础数据服务，统一缓存，翻译等功能，提供给不同的开发组使用。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4）流量治理&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;a)   重复调用&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;一次请求，服务C同一个接口被重复调用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;功能内聚：&lt;/span&gt;&lt;span&gt;将同一个功能对下游的依赖放到同一个服务内调用。&lt;/span&gt;&lt;span&gt;由于系统自身迭代导致的不合理调用，可以按照上述方法优化。&lt;/span&gt;&lt;span&gt;如果为了解耦将功能拆开，可以根据实际情况评估影响和收益。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.618421052631579&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXwqJtIhRic99G686tMaHzEqWu3QFedLkrdL8zbBvgjkPR6xbVIVgDjWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图14 功能内聚合并重复调用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果：&lt;/span&gt;&lt;span&gt;功能内聚，多次调用合并为一次调用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;b)   降低调用量&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：一个服务中，不同的接口功能拆分太细，下游使用的时候都需要调用多个接口组装结果。例如：一次请求服务B的a、b、c、d、e接口都被调用，下游为实现一个功能，需要调用太多小接口。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;合&lt;/span&gt;&lt;span&gt;并服务B中同一领域功能：&lt;/span&gt;&lt;span&gt;将相同的功能合并到一个接口，减少调用量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一个接口提供模块参数，按需调用：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持按需使用，对不同业务场景非必须的功能，提供模块参数，按需传参。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对于独立的前端页面接口，对外透明，内部封装对应场景需要的模块参数，例如前端首屏请求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4723756906077348&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXqia6H7beDJEdlgIogg0OYP1NAWSDKHKh2Cy7dUFkGzlcTTZMn696Nrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图15 请求合并&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;效果：聚合相同功能，合并小接口，多次调用合并为一次调用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;c)   流量隔离&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：非核心流量(例如：Job调度)大于用户流量&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流量隔离：一套代码，隔离部署，将核心和非核心流量隔离。核心流量承载用户请求，保证交易的稳定性，非核心流量承载离线任务调度和非核心场景调用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6079734219269103&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXxGgYdNwDsTgTs6epRKSWWz7occCxeX0DUA9WCowB0M9crK5W3prSicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1204&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图16 流量隔离&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;效果：总成本不变，核心链路稳定性得到提升，非核心链路CPU使用率得到提升。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;d)   离线调度流量消峰&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：单位时间内调度过于集中(Job)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;合理的延长调度时间：适当延迟调度时间，降低每分钟的调用峰值，让每分钟内调用量更加平稳。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.680672268907563&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXWendVTVbxS0CeDOIia4ibuA63R5I8IYMWzCCXNDxE866AhQaf5rSzjFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1190&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图17 离线调度流量消峰&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;效果：调度总时间在可接受范围内，调度时间拉长，单位时间内调用总量降低，降低服务端峰值压力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：每秒内调度不均衡(Job)，导致服务稳定性差或为了能承载请求需要冗余更多服务器资源。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.40737636211232187&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXTc00icjkSyYRfjFzah5HnuSIfiaDSlz7voIqzaqJQunRPMoS6tPXu2KA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1193&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图18 客户端调度QPS不均衡&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;客户端削峰填谷：调度波动太大，会导致请求到了服务端被限流或者服务端扩缩容。对于调度不均衡的离线任务，我们在客户端控制每秒内发送的请求量，让每秒内请求更加平稳，任务调度总时间不变。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXDjjMTY0UBRGEqmMpVKS461YnHespBd1cOjQtJo0kJt1vGmthS1MsYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图19 客户端调度从不均衡变为均衡&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;效果：分钟内总的调用量不变，服务端调用量从波动变为平稳。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;5）降低人均应用数/提升CPU使用率&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;人均应用过多，开发效率降低&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CPU使用率6%以下应用数占比超过50% 且总核数占比超过30%&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;短期：&lt;/span&gt;&lt;span&gt;缩容，将单边服务器数缩容到SRE标准最小配置。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;长期：&lt;/span&gt;&lt;span&gt;合并拆分过细的应用，参考历史、现状和将来的规划，将拆分过细、CPU使用率长期小于6%的应用做合并。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9493670886075949&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXlBksib05dTSU5CTD5Y79dlUyHvOPhw5sVnQ8YBbRia6icn6GCg0gDB51A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;948&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图20 应用合并&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、实施效果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）循环依赖（应用分层，解除应用间循环依赖）&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;去掉65条循环依赖链路，消除雪崩的风险&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;超时类告警降低99%&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;排障效率提升至分钟级别&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;2）链路长（减少应用层级）：&lt;/span&gt;&lt;span&gt;调用链深度缩短 40%&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）复用性（下沉基础数据服务，减少重复功能）&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新增基础数据服务，缓存统一，解决一致性问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;缓存容量减少60%&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;4）&lt;/span&gt;&lt;span&gt;流量治理（降低水位线）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5）&lt;/span&gt;&lt;span&gt;开发效率（解耦&amp;amp;减少中间层）&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;水平拆分独立功能，减少耦合，独立开发&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;垂直领域减少3层，开发效率提升&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;6）&lt;/span&gt;&lt;span&gt;查询引擎性能提升65%，QPS从8w提升至24w&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;减少了系统不稳定导致的服务变慢&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;领域划分，垂直优化系统，专注用户端到底层的优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;7）&lt;/span&gt;&lt;span&gt;人均应用：&lt;/span&gt;&lt;span&gt;人均应用数控制在2个以内&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;8）资源使用率（应用合并，提升CPU使用率）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.71015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXib0R03sl8GXgRubzNmsJkylpmgo5ZKm6YsicU5XrcGaJyxGls29KSrTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图21 门票活动查询引擎微服务治理前后对比&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;微服务架构下服务拆分越细，调用关系越复杂，层级越深，性能损耗越大，开发效率越低(垂直域/小组内)，所以服务不是越小越好，而是“合适的大小”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在构建微服务的时候，要根据业务体量、团队规模、成本等因素综合考虑，按照合理的原则，构建出适合的大小，以达到预期的目标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;服务治理是一个长期的过程，制定目标持续优化，让系统更快更稳定，为业务赋能。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;【推荐阅读】&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1cicAzUcpiczgicVlCLIhibOIoXkYIwvxiaGxCHOYRAFMnIduGrwhWO5P3EHAjcaTQgy28xuq1GjOAqGng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; “携程技术”公众号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  分享，交流，成长&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>183a0946bc695398ffad1fb09ad62be8</guid>
<title>61 张图，剖析 Spring 事务，就是要钻到底</title>
<link>https://toutiao.io/k/czhx8th</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这篇源码解析，和 Spring AOP 中的知识有很多重合的地方，但是比 AOP 要稍微简单一些，&lt;strong&gt;建议两篇文章对比学习。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面我会简单介绍一下 Spring 事务的基础知识，以及使用方法，然后直接对源码进行拆解。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不 BB，上文章目录。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.78&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpCOb1d986YIxfvgVe0YZibJu6dHM7MaO8BLn8icZ11ehav8Vc5TuqsQRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;1. 项目准备&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;需要搭建环境的同学，代码详见&lt;/strong&gt;：https://github.com/lml200701158/program_demo/tree/main/spring-transaction&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面是 DB 数据和 DB 操作接口：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 提供的接口&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;UserDao&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// select * from user_test where uid = &quot;#{uid}&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; MyUser &lt;span&gt;selectUserById&lt;/span&gt;&lt;span&gt;(Integer uid)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// update user_test set uname =#{uname},usex = #{usex} where uid = #{uid}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;updateUser&lt;/span&gt;&lt;span&gt;(MyUser user)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基础测试代码，testSuccess() 是事务生效的情况：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Louzai&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; UserDao userDao;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;&lt;span&gt;(Integer id)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        MyUser user = &lt;span&gt;new&lt;/span&gt; MyUser();&lt;br/&gt;        user.setUid(id);&lt;br/&gt;        user.setUname(&lt;span&gt;&quot;张三-testing&quot;&lt;/span&gt;);&lt;br/&gt;        user.setUsex(&lt;span&gt;&quot;女&quot;&lt;/span&gt;);&lt;br/&gt;        userDao.updateUser(user);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; MyUser &lt;span&gt;query&lt;/span&gt;&lt;span&gt;(Integer id)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        MyUser user = userDao.selectUserById(id);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; user;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 正常情况&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testSuccess&lt;/span&gt;() &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Integer id = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        MyUser user = query(id);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;原记录:&quot;&lt;/span&gt; + user);&lt;br/&gt;        update(id);&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;事务生效&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行入口：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SpringMyBatisTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        String xmlPath = &lt;span&gt;&quot;applicationContext.xml&quot;&lt;/span&gt;;&lt;br/&gt;        ApplicationContext applicationContext = &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(xmlPath);&lt;br/&gt;        Louzai uc = (Louzai) applicationContext.getBean(&lt;span&gt;&quot;louzai&quot;&lt;/span&gt;);&lt;br/&gt;        uc.testSuccess();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;16:44:38.267 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean &lt;span&gt;&#x27;org.springframework.transaction.interceptor.TransactionInterceptor#0&#x27;&lt;/span&gt;&lt;br/&gt;16:44:38.363 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean &lt;span&gt;&#x27;txManager&#x27;&lt;/span&gt;&lt;br/&gt;16:44:40.966 [main] DEBUG org.springframework.jdbc.datasource.DataSourceTransactionManager - Creating new transaction with name [com.mybatis.controller.Louzai.testSuccess]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-java.lang.Exception&lt;br/&gt;16:44:40.968 [main] DEBUG org.springframework.jdbc.datasource.DriverManagerDataSource - Creating new JDBC DriverManager Connection to [jdbc:mysql://127.0.0.1:3306/java_study?useUnicode=&lt;span&gt;true&lt;/span&gt;&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=&lt;span&gt;false&lt;/span&gt;&amp;amp;serverTimezone=Asia/Shanghai]&lt;br/&gt;16:44:41.228 [main] DEBUG org.springframework.jdbc.datasource.DataSourceTransactionManager - Acquired Connection [com.mysql.cj.jdbc.ConnectionImpl@5b5caf08] &lt;span&gt;for&lt;/span&gt; JDBC transaction&lt;br/&gt;16:44:41.231 [main] DEBUG org.springframework.jdbc.datasource.DataSourceTransactionManager - Switching JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@5b5caf08] to manual commit&lt;br/&gt;原记录:MyUser(uid=1, uname=张三, usex=女)&lt;br/&gt;16:42:59.345 [main] DEBUG org.springframework.jdbc.datasource.DataSourceTransactionManager - Initiating transaction rollback&lt;br/&gt;16:42:59.346 [main] DEBUG org.springframework.jdbc.datasource.DataSourceTransactionManager - Rolling back JDBC transaction on Connection [com.mysql.cj.jdbc.ConnectionImpl@70807224]&lt;br/&gt;16:42:59.354 [main] DEBUG org.springframework.jdbc.datasource.DataSourceTransactionManager - Releasing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@70807224] after transaction&lt;br/&gt;Exception &lt;span&gt;in&lt;/span&gt; thread &lt;span&gt;&quot;main&quot;&lt;/span&gt; java.lang.Exception: 事务生效&lt;br/&gt; at com.mybatis.controller.Louzai.testSuccess(Louzai.java:34)&lt;br/&gt;  // 异常日志省略...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;2. Spring 事务工作流程&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了方便大家能更好看懂后面的源码，我先整体介绍一下源码的执行流程，让大家有一个整体的认识，否则容易被绕进去。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个 Spring 事务源码，其实分为 2 块，我们会结合上面的示例，给大家进行讲解。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1801470588235294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpfJZoicjK7NPX6VTXw5DsPeRhkm4FTNZ5uJRcV7nfaHMNLtF1qLTXoHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1088&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一块是&lt;strong&gt;后置处理&lt;/strong&gt;，我们在创建 Louzai Bean 的后置处理器中，里面会做两件事情：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;获取 Louzai 的切面方法&lt;/strong&gt;：首先会拿到所有的切面信息，和 Louzai 的所有方法进行匹配，然后找到 Louzai 所有需要进行事务处理的方法，匹配成功的方法，还需要将事务属性保存到缓存 attributeCache 中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;创建 AOP 代理对象&lt;/strong&gt;：结合 Louzai 需要进行 AOP 的方法，选择 Cglib 或 JDK，创建 AOP 代理对象。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.21875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibppq4P12r9hvR6xWWqj5zYibibD8j4ygSI8c2UD2GHdTYaedulKt4KopRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二块是&lt;strong&gt;事务执行&lt;/strong&gt;，整个逻辑比较复杂，我只选取 4 块最核心的逻辑，分别为&lt;strong&gt;从缓存拿到事务属性、创建并开启事务、执行业务逻辑、提交或者回滚事务。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;3. 源码解读&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;注意：Spring 的版本是 5.2.15.RELEASE，否则和我的代码不一样！！！&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面的知识都不难，下面才是我们的重头戏，让你跟着楼仔，走一遍代码流程。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.1 代码入口&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0429594272076372&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpTrbkT2fPFTuY7ZLAePWsvNfB2IQxgsuANWviahmibZGuOoZCVTxKM2qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;838&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7092651757188498&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpARk0dHb5mmQmiaonYY4TXWPl4r7Yr0lZP7hf9uGT3hcOflDibSqBW2nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;939&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里需要多跑几次，把前面的 beanName 跳过去，只看 louzai。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8032128514056225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpLlmbIt4dStHGH9usHkeibLScJO02onGeqzGngTibqQiafa9DNESWCD6kA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;996&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11744186046511627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibplNibWbwkzqKkgvl1xun1DHacZroW0DABllvwGY6nT0hBYcOktt7TUFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;860&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进入 doGetBean()，进入创建 Bean 的逻辑。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3389473684210526&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpanr1LbNBUeZrSh6Hu2VUQVEcBgqkX4TTLwkFNoOsrg2OJ9LBb2Mo3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;950&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进入 createBean()，调用 doCreateBean()。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47002398081534774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpkic6V4KPRMEzFL65PXrp2xFcQ0oengv8xhEJyzbFSYjtvPiaKUscLCdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1668&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进入 doCreateBean()，调用 initializeBean()。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5410798122065728&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp8Ne10BibqiavibKDOBmg9cvD2udafrowYYceVicYID8lInQ1QvQnnHxd2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1704&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6455696202531646&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpjyDXP0PCqt6oOEfYrUk7NmXdiaqbQEpVTUL9Onicia5sicHUprqIFpia82A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1896&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38650306748466257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpH2VkdfglCibcXgpOzSMmJGwiclFkYstRSvJLDYHGqmcVHZmK6yrQEFibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1630&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5950590762620838&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp2licgnaw2tHbwfJdgFlvK1x22nHs4vFJhKcuUV5v09QLic7uK0QL0NGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1862&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果看过我前面几期系列源码的同学，对这个入口应该会非常熟悉，其实就是用来&lt;strong&gt;创建代理对象。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.2 创建代理对象&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9921722113502935&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp2HtkEEtcOtxGnfB6jlfvKkPuVXHcQvpqiafdBllUMcXqFU5UicZ2CchA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1022&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;这里是重点！敲黑板！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;先获取 louzai 类的所有切面列表；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建一个 AOP 的代理对象。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7186897880539499&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibphGkavrAI9N8Y7erhCk611Hpsa6Xg5PHHfUmlZDoibkjxYyMLsIa9ezw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1038&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.2.1 获取切面列表&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29191090269636577&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp3J25AVUkqgwj5w2ThawWvibn88uPicW4oxQ8HPicfsKnOc6licxPDQfSpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1706&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里有 2 个重要的方法，先执行 findCandidateAdvisors()，待会我们还会再返回 findEligibleAdvisors()。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.670045045045045&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpmu47egAkbHTIOsUGenLeE6r2GGb8Hg3U9p9wTFDaXWXBtbBbj7AJ0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1776&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2756183745583039&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpFicSYKic6x3lFQMF219OZPr5E7gQZHiaxaopCIficPkPpSVpqbuzTqI0EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1698&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22652582159624413&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp24PzRWSIMakZPQ7QXiamSFQy1rXrrNibVcvh3YOt7rJ9c4J5MHXqtJQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1704&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8020833333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpfRhZKMS0Cyp47f2T7h3C26tiaTLeuPVQPs0nDbOJ4RoHkYpmv8KqcCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;依次返回，重新来到 findEligibleAdvisors()。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5516888433981576&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp4VRCia0xpjKIT120JHNfgjksjsYUe8otTucAa73sQibDIYQQt8BoqZOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1954&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2762119503945885&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpEemBojEjZVuIBLouMufLourmbQRbARWJure8NQ8yZjGA2H1e5iar1pQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1774&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5295983086680761&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpkt7F9rayUOkKYU13C7P7xicTzYV5z4hOx4KFd6bibHZKM2b10vRsHRZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1892&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3404977375565611&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpicCYqKic8UvtARo3d9TrkodklUsMBnWhyJsMiawhQcqkmF8aUcCtJeSFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1768&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进入 canApply()，开始匹配 louzai 的切面。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6326714801444043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibporrr16loWS9OUlrHv1rLhG30YfDKvdmQPF5DWGoAbR7NGmn66MuI6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2216&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;这里是重点！敲黑板！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里只会匹配到 Louzai.testSuccess() 方法，我们直接进入匹配逻辑。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3232758620689655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpN3No6kaDOKm2j7OD7ucPFrFjUWMtQ2v92wcJoVJTiazlS5VNCJajxiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1856&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果匹配成功，还会把事务的属性配置信息放入 attributeCache 缓存。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6678614097968937&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp5qbjm68JSkj1Cv7HG8PDX4eK2f5ylWNQDh8LCK1sDibuAMfGiaB1CPCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1674&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpzVTNYlrkhy7ic9yVF2HyLmJ3QBRbW31Em8vXBPcXbQl4LurruBgx5gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1800&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16415868673050615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpZ0SlzEAmvic5eAcKDRibTaHNsrW8KVsNVK9XA4eWWW4YK2jib9yYKQIoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1462&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4720168954593453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp9JWhOejX2iaUuGqpD6EZduVXxyO82e0fgoC1juhtEnIPWk1ziaUUq3Aw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1894&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6630669546436285&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp396ZQ4ZWB4o02aZkibvWLqhMYyZWLEun3skhBP4Q6K7xZia9BWezib7AA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1852&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.674074074074074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp3NZsibtaOGTU4CbDRK6eo39oIBqiblGtYfsSAmQfJMj0RHzgve0SgK5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1890&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们依次返回到 getTransactionAttribute()，再看看放入缓存中的数据。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7749445676274944&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpNltNqKgfCwd9dnRJj7cMQE6hk20ZM6lSRas5D6oGWnyO7e0OCrujEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1804&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;再回到该小节开头，我们拿到 louzai 的切面信息，去创建 AOP 代理对象。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7186897880539499&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibphGkavrAI9N8Y7erhCk611Hpsa6Xg5PHHfUmlZDoibkjxYyMLsIa9ezw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1038&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.2.2 创建 AOP 代理对象&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;创建 AOP 代理对象的逻辑，在上一篇文章（Spring AOP）讲解过，我是通过 Cglib 创建，感兴趣的同学可以关注公众号「&lt;strong&gt;楼仔&lt;/strong&gt;」，翻一下楼仔的历史文章。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.3 事务执行&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;回到业务逻辑，通过 &lt;strong&gt;louzai 的 AOP 代理对象&lt;/strong&gt;，开始执行主方法。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26405867970660146&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpv0icPCZlUib9GpCfNZYAm2fNZgHBGWASiaQHxLibQ5UibBkQnGIKLgexhVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1636&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为代理对象是 Cglib 方式创建，所以通过 Cglib 来执行。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7158006362672322&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp6GwPic5dEZWhwibM9IibwhsZrZ3eNgKv9WvwVOZK51Nletk21kFpNkwSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1886&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2746835443037975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpj3Lg9nJmkgk9rpWawgbtficMX379H9OatM2IN7TynZjIicib4sicLAox8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1580&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6758544652701213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpfW5QHRicKVnBCTVIVGh0aNWz9I2HOyxzEibbpTTJCjanwOW2afbejlvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1814&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28809788654060065&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp40DRK6OtgZfDcsBTvhEM9U4ia8mIvcy2EueB8SVmic33DQvH31CJzehw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1798&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;这里是重点！敲黑板！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面的代码是事务执行的核心逻辑 invokeWithinTransaction()。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0051993067590987&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpy7d9gSDRwfXbibtaPVoaDHk2q9bicDAiaYSk6ghMqxP91moMD8ibZDpKKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt; Object &lt;span&gt;invokeWithinTransaction&lt;/span&gt;&lt;span&gt;(Method method, @Nullable Class&amp;lt;?&amp;gt; targetClass,&lt;br/&gt;            &lt;span&gt;final&lt;/span&gt; InvocationCallback invocation)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//获取我们的事务属源对象&lt;/span&gt;&lt;br/&gt;        TransactionAttributeSource tas = getTransactionAttributeSource();&lt;br/&gt;        &lt;span&gt;//通过事务属性源对象获取到我们的事务属性信息&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; TransactionAttribute txAttr = (tas != &lt;span&gt;null&lt;/span&gt; ? tas.getTransactionAttribute(method, targetClass) : &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//获取我们配置的事务管理器对象&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; PlatformTransactionManager tm = determineTransactionManager(txAttr);&lt;br/&gt;        &lt;span&gt;//从tx属性对象中获取出标注了@Transactionl的方法描述符&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; String joinpointIdentification = methodIdentification(method, targetClass, txAttr);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//处理声明式事务&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (txAttr == &lt;span&gt;null&lt;/span&gt; || !(tm &lt;span&gt;instanceof&lt;/span&gt; CallbackPreferringPlatformTransactionManager)) {&lt;br/&gt;            &lt;span&gt;//有没有必要创建事务&lt;/span&gt;&lt;br/&gt;            TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);&lt;br/&gt;&lt;br/&gt;            Object retVal;&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;//调用钩子函数进行回调目标方法&lt;/span&gt;&lt;br/&gt;                retVal = invocation.proceedWithInvocation();&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;catch&lt;/span&gt; (Throwable ex) {&lt;br/&gt;                &lt;span&gt;//抛出异常进行回滚处理&lt;/span&gt;&lt;br/&gt;                completeTransactionAfterThrowing(txInfo, ex);&lt;br/&gt;                &lt;span&gt;throw&lt;/span&gt; ex;&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;//清空我们的线程变量中transactionInfo的值&lt;/span&gt;&lt;br/&gt;                cleanupTransactionInfo(txInfo);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;//提交事务&lt;/span&gt;&lt;br/&gt;            commitTransactionAfterReturning(txInfo);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; retVal;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;//编程式事务&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;          &lt;span&gt;// 这里不是我们的重点，省略...&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.3.1 获取事务属性&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 invokeWithinTransaction() 中，我们找到获取事务属性的入口。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2548223350253807&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpo7m3IZ5bJUJl9IEbSSVIltwWhzYNc1VPkH6kKvDPsuorBAAaYF9eCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1970&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从 attributeCache 获取事务的缓存数据，缓存数据是在 “2.2.1 获取切面列表” 中保存的。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4306569343065693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp3K6hyUUUe2ytcmvr4wCaPKmUKic6Ha7Hgz3rDEFo54lIgWK7jmWzIxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1918&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.3.2 创建事务&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5563725490196079&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpCiaiclJeomwpVWsBx6sexibHzBE3an0z92B1RPAnzicY02d3RgQyibjXW9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1632&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.683046683046683&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp58tNmC32bNibPJEopnhEoozRPZXFr6P3XKlJtzmwz5g6Sn3HiaeYSwrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1628&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.880184331797235&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibp0VoicjwVbntJPd08M3G2m3bA6fzAHDs9XxvSgJRFHHjDD7FlnqwviaMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1736&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过 doGetTransaction() 获取事务。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt; Object &lt;span&gt;doGetTransaction&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//创建一个数据源事务对象&lt;/span&gt;&lt;br/&gt;        DataSourceTransactionObject txObject = &lt;span&gt;new&lt;/span&gt; DataSourceTransactionObject();&lt;br/&gt;        &lt;span&gt;//是否允许当前事务设置保持点&lt;/span&gt;&lt;br/&gt;        txObject.setSavepointAllowed(isNestedTransactionAllowed());&lt;br/&gt;        &lt;span&gt;/**&lt;br/&gt;         * TransactionSynchronizationManager 事务同步管理器对象(该类中都是局部线程变量)&lt;br/&gt;         * 用来保存当前事务的信息,我们第一次从这里去线程变量中获取 事务连接持有器对象 通过数据源为key去获取&lt;br/&gt;         * 由于第一次进来开始事务 我们的事务同步管理器中没有被存放.所以此时获取出来的conHolder为null&lt;br/&gt;         */&lt;/span&gt;&lt;br/&gt;        ConnectionHolder conHolder =&lt;br/&gt;                (ConnectionHolder) TransactionSynchronizationManager.getResource(obtainDataSource());&lt;br/&gt;        txObject.setConnectionHolder(conHolder, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//返回事务对象&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; txObject;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过 startTransaction() 开启事务。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.359039190897598&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpIz3yCAgRAztwy5ZNKqggkLpAzoQoXib9XavmmIujIj9G650oNKPiajdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1582&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面是开启事务的详细逻辑，了解一下即可。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doBegin&lt;/span&gt;&lt;span&gt;(Object transaction, TransactionDefinition definition)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//强制转化事务对象&lt;/span&gt;&lt;br/&gt;        DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;&lt;br/&gt;        Connection con = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;//判断事务对象没有数据库连接持有器&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!txObject.hasConnectionHolder() ||&lt;br/&gt;                    txObject.getConnectionHolder().isSynchronizedWithTransaction()) {&lt;br/&gt;                &lt;span&gt;//通过数据源获取一个数据库连接对象&lt;/span&gt;&lt;br/&gt;                Connection newCon = obtainDataSource().getConnection();&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (logger.isDebugEnabled()) {&lt;br/&gt;                    logger.debug(&lt;span&gt;&quot;Acquired Connection [&quot;&lt;/span&gt; + newCon + &lt;span&gt;&quot;] for JDBC transaction&quot;&lt;/span&gt;);&lt;br/&gt;                }&lt;br/&gt;                &lt;span&gt;//把我们的数据库连接包装成一个ConnectionHolder对象 然后设置到我们的txObject对象中去&lt;/span&gt;&lt;br/&gt;                txObject.setConnectionHolder(&lt;span&gt;new&lt;/span&gt; ConnectionHolder(newCon), &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//标记当前的连接是一个同步事务&lt;/span&gt;&lt;br/&gt;            txObject.getConnectionHolder().setSynchronizedWithTransaction(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;            con = txObject.getConnectionHolder().getConnection();&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//为当前的事务设置隔离级别&lt;/span&gt;&lt;br/&gt;            Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);&lt;br/&gt;            txObject.setPreviousIsolationLevel(previousIsolationLevel);&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//关闭自动提交&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (con.getAutoCommit()) {&lt;br/&gt;                txObject.setMustRestoreAutoCommit(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (logger.isDebugEnabled()) {&lt;br/&gt;                    logger.debug(&lt;span&gt;&quot;Switching JDBC Connection [&quot;&lt;/span&gt; + con + &lt;span&gt;&quot;] to manual commit&quot;&lt;/span&gt;);&lt;br/&gt;                }&lt;br/&gt;                con.setAutoCommit(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//判断事务为只读事务&lt;/span&gt;&lt;br/&gt;            prepareTransactionalConnection(con, definition);&lt;br/&gt;            &lt;span&gt;//设置事务激活&lt;/span&gt;&lt;br/&gt;            txObject.getConnectionHolder().setTransactionActive(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//设置事务超时时间&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; timeout = determineTimeout(definition);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {&lt;br/&gt;                txObject.getConnectionHolder().setTimeoutInSeconds(timeout);&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;// 绑定我们的数据源和连接到我们的同步管理器上   把数据源作为key,数据库连接作为value 设置到线程变量中&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (txObject.isNewConnectionHolder()) {&lt;br/&gt;                TransactionSynchronizationManager.bindResource(obtainDataSource(), txObject.getConnectionHolder());&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;catch&lt;/span&gt; (Throwable ex) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (txObject.isNewConnectionHolder()) {&lt;br/&gt;                &lt;span&gt;//释放数据库连接&lt;/span&gt;&lt;br/&gt;                DataSourceUtils.releaseConnection(con, obtainDataSource());&lt;br/&gt;                txObject.setConnectionHolder(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CannotCreateTransactionException(&lt;span&gt;&quot;Could not open JDBC Connection for transaction&quot;&lt;/span&gt;, ex);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后返回到 invokeWithinTransaction()，得到 txInfo 对象。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7447513812154696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpWAqvEPYbtibwvtvv97ZkUqtnUn7hkt8R4pRiaQYjic0BWSOHa97BvASCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1810&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.3.3 执行逻辑&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;还是在 invokeWithinTransaction() 中，开始执行业务逻辑。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2857142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpeCbGfr7EqwS9NrjHibx9nCoP9EWxb0qfCvX5webuRb5rq3RTxtwUHlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1722&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34540750323415265&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpZssAoDv9jrwGjxhenmsjJu1vV36QtGF8OmKvKBWacutqZ7P9RWQJvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1546&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21563682219419925&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpwW71NWqo5kMKYyjjS8zgzhJbq00MPO1b5PHeVUV2WzqQt3fhZktdYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1586&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2928870292887029&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpWBXytZfwsfUo81G2nyOZxuQu8b7fQDwUR6l0uzoric4sUsbEOViauyKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1434&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2836218375499334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpWNXBe4CXSvnKaxlKdiauStLYK289hIKicSibu1VEJmSUmZsbQA5oBhmJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1502&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进入到真正的业务逻辑。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27380952380952384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpHJKOGKB3BCj6LfciaD19t52xkYM8ia9b9mibLTyYCM5uZcqgFTicIeQLsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1512&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行完毕后抛出异常，依次返回，走后续的回滚事务逻辑。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.3.4 回滚事务&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;还是在 invokeWithinTransaction() 中，进入回滚事务的逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4592178770949721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpWOEiafHDvoZEzViczxSJBeAGszsuFNxgzmElm0A4euS5kjcMOibKdvL3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1790&quot;/&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4223013048635824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpCBOGEELKeta94DHTia1wicCPwnc9bQuRtJ8gicMyqQNPsCp0zdVsribeeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1686&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行回滚逻辑很简单，我们只看如何判断是否回滚。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1389290882778582&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpt4ufEw0hfl6RRrTd9Nof42tvAK2Dq7lY1iagHXbUsXV5PLMcTJsOvbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1382&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8238153098420413&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpM5icOiaawwibJCqbHsYy53a3jx5nc4WE2OIjV1uMTs03OebxasgJkibkcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1646&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3295638126009693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpCuBRnnbh4HqanC3RdHb4OAkiaQtjVGzv7ZX1SBD249mRjWDS7TPwjdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1238&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;如果抛出的异常类型，和事务定义的异常类型匹配，证明该异常需要捕获。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;之所以用递归，不仅需要判断抛出异常的本身，还需要判断它继承的父类异常，满足任意一个即可捕获。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4827956989247312&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLGkfceIjEFtoPD83XRDZAibpOt71icTbODCGqp2UO41Jibr4ka48471OWFNaxbGLERePk8sznxrM48ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1860&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;到这里，所有的流程结束。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;4. 结语&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们再小节一下，文章先介绍了事务的使用示例，以及事务的执行流程。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;之后再剖析了事务的源码，分为 2 块：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;先匹配出 louzai 对象所有关于事务的切面列表，并将匹配成功的事务属性保存到缓存；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从缓存取出事务属性，然后创建、启动事务，执行业务逻辑，最后提交或者回滚事务。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651521957&amp;amp;idx=1&amp;amp;sn=96c5bd1613107179a315844b82865f1b&amp;amp;chksm=bd246fda8a53e6cc413b8da8b08ec4e0857d2dc921804481ab3bacee9d19e2255a1effe47d0f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;IntelliJ IDEA终于支持对Redis 的可视化窗口操作了，真香！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;IntelliJ IDEA终于支持对Redis 的可视化窗口操作了，真香！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651521953&amp;amp;idx=1&amp;amp;sn=c6d48bd0a0e6e9617054eeae3018ae95&amp;amp;chksm=bd246fde8a53e6c8996d8d6cbc98bf6e764434556b5ba2aac8355d1d96921058d60348378950&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;面试官：断网了，还能 ping 通 127.0.0.1 吗？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;面试官：断网了，还能 ping 通 127.0.0.1 吗？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651519126&amp;amp;idx=1&amp;amp;sn=d11c2556c5a248794dc7a5e30215efdc&amp;amp;chksm=bd2594e98a521dff133960f92950690665fb5370844fdaf4eab5a50e815c1f4a8a314fe8a3ef&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;两万字！多线程硬核50问！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;两万字！多线程硬核50问！&lt;/a&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>114fa4c9f7775838104fb4bee78b3210</guid>
<title>Vue3 如何实现一个全局搜索框</title>
<link>https://toutiao.io/k/ghjfatd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Vue3 如何实现一个全局搜索框&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言：&lt;/span&gt;&lt;span&gt;自从学习 vue 以来，就对 vue 官网全局的 &lt;/span&gt;&lt;strong&gt;command + K&lt;/strong&gt;&lt;span&gt; 调出全局关键词搜索这个功能心心念念。&lt;/span&gt;&lt;span&gt;恰好最近项目也是需要实现一个全局搜索的功能，也正好可以正大光明的带薪学习这个功能的思路。&lt;/span&gt;&lt;span&gt;网上的教程水平参差不齐，而恰好之前的项目中我有做过一个类似于全局弹出面包屑的功能，于是举一反三写出了一个我们项目需要的全局搜索框，特来分享一下自己的思路。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文不会马上教你如何编写代码，而是作为一个引路人，一步一步引导你去理解这个组件的设计思路。会以 &lt;strong&gt;“假如我是一个初学者，如果我在学习这个知识的时候，别人能这样告诉我，那么我也可以很快的去理解”&lt;/strong&gt; 的角度去讲解 ，&lt;strong&gt;授人以鱼不如授人以渔&lt;/strong&gt;。希望你在阅读本文的时候可以拓展思路，举一反三。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一. 文件准备&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前期你需要准备三个文件，来完成这个全局搜索框&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;SearchBar.ts&lt;/strong&gt; 文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;SearchBar.vue&lt;/strong&gt; 文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;useSearch.ts&lt;/strong&gt; 文件&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3879310344827586&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCWIkxXLia5PrKPHuT0JiaAA10MuWyWHYUva04KNcZD6zN7YeFk35YZ0ug/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;348&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二. 搜索框的样式&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;样式问题不是本文的重点，你可以花费五分钟在 &lt;strong&gt;SearchBar.vue&lt;/strong&gt; 文件内速写一个非常简易的正方形 &lt;strong&gt;div&lt;/strong&gt; 包裹着一个 &lt;strong&gt;input&lt;/strong&gt; 标签即可快速进行下面的学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是首先我们需要理清思路，这个组件是会出现在我们页面的最顶部的，所以它组件内部需要用到绝对布局。我们去 &lt;code&gt;SearchBar.vue&lt;/code&gt; 去设置一个样式给最外层的 &lt;code&gt;div&lt;/code&gt;，这里其它样式的写法使用的是 &lt;code&gt;Uno CSS&lt;/code&gt;，没用过的小伙伴也不需要担心，它只是单纯的样式，和本文中心内容不牵扯。（CSS写成计算属性在这个场景也毫无特殊意义，只是单纯设计时考虑多了） &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29003021148036257&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJC5M3YFps6Zib2MvtrbzqbTIHQetM6vbskhuRqCicDkSz55uCXNthc2TwA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;662&quot;/&gt; &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5988372093023255&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCBYdUjEEurlUtIyeTCgeC83Cx62atiax1aVDXebYvLnYKaQnI1oaHscA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;688&quot;/&gt; &lt;img data-ratio=&quot;0.11304347826086956&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCgrxEiaI3foWssXneniaaODyG5aetu2SdWfmBRuW4EBoAUciabM2tRUPRg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三. 渲染函数 &lt;strong&gt;h&lt;/strong&gt; 和 &lt;strong&gt;render&lt;/strong&gt; 函数(重点)&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;打开之前准备的 &lt;strong&gt;SearchBar.ts&lt;/strong&gt; 文件，从 &lt;strong&gt;vue&lt;/strong&gt; 里引入这两个函数，并且把在上一步写好的简陋版搜索框（SearchBar.vue）引入到这个文件内。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCHxkX9h9beB6OgJYkdCAu9ibbnZibFQygv1ZE5UrDicgoXDGTMmpz1Pp5A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;534&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;看过我之前文章 &lt;span&gt;Vue3实现一个 Toast&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 的读者可能会比较熟悉一点点，但是在那一篇文章内由于我也是初次接触这两个函数，所以当时总结的也不是特别精确，所以重新捋清思路，这里再讲解一下。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;首先我们从官网的介绍，先看一下这个函数的定义。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8709302325581395&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCdKGbOvKldF7kjxuLE4d6eWJhdyMVuWxKTic5PUmlCr6JRGKC58YvH2w/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;860&quot;/&gt;&lt;br/&gt;可以看出，这个函数第一个参数是必填的，可以是一个 &lt;code&gt;string&lt;/code&gt; 和 &lt;code&gt;Component&lt;/code&gt;，这篇文章重点讨论参数为 &lt;code&gt;Component&lt;/code&gt; 的情况。重点是这个函数的返回值，是一个 &lt;code&gt;VNode&lt;/code&gt;，这个你一定不陌生，&lt;strong&gt;Virtual Node&lt;/strong&gt; ，看本篇文章的读者可能对虚拟 &lt;strong&gt;dom&lt;/strong&gt; 的原理可能不是那么清楚，但是我相信你们一定知道它的基本机制。&lt;strong&gt;Vue&lt;/strong&gt; 其实是先渲染 &lt;strong&gt;虚拟 dom --&amp;gt;然后 转换成真实 dom&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;先别急着写代码，我想你可能更清楚这样的写法，比如我们前面在 &lt;strong&gt;SearchBar.vue&lt;/strong&gt; 文件内写的简单的弹出框。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5233100233100233&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJClE9k7XyK2BEnbcFE7cxICylrk9PNUic5K6ICrWKbzsBTMwoYktnNt8Q/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;858&quot;/&gt; 整个组件的样式都是在 &lt;strong&gt;Vue&lt;/strong&gt; 提供的 &lt;strong&gt;&amp;lt;template&amp;gt;&lt;/strong&gt; 组件内写的，但是你要知道，&lt;strong&gt;Vue&lt;/strong&gt; 在底层还是通过调用 &lt;strong&gt;h()&lt;/strong&gt; 来完成虚拟 &lt;strong&gt;dom&lt;/strong&gt; 的构建。而 &lt;strong&gt;&amp;lt;template&amp;gt;&lt;/strong&gt; 仅仅只是 &lt;strong&gt;Vue&lt;/strong&gt; 为了让你用熟悉的原生 &lt;strong&gt;html&lt;/strong&gt; 开发而为你提供的语法糖🍬而已。（嗯，你可以这样理解）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;那么我们可以根据上面 &lt;strong&gt;h()&lt;/strong&gt; 函数的介绍，它接收的第一参数可以是 &lt;code&gt;Component&lt;/code&gt; ，那我们这个 &lt;code&gt;SearchBar.vue&lt;/code&gt; 不就是组件吗？那如果我不想使用 &lt;strong&gt;&amp;lt;template&amp;gt;&lt;/strong&gt; 去展示这个组件的话，我是否可以这样写呢？&lt;code&gt;h(SearchBar.vue)&lt;/code&gt;。没错，是的，你就是可以这样写。别忘了 &lt;code&gt;h&lt;/code&gt; 的返回值就是我们想拿到的 &lt;strong&gt;Vnode&lt;/strong&gt; ，所以按照正确的写法是这样的。&lt;img data-ratio=&quot;0.3674911660777385&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJC8YuAf4pdhbEZHmqmBTsAUFv47GSZSWcQ80QYwUL00Mkc7Ulftq1PxA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三. 编写 &lt;strong&gt;SearchBarMaker&lt;/strong&gt; 构造函数和 &lt;strong&gt;present&lt;/strong&gt; 方法&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;让我们回到 &lt;code&gt;SearchBar.ts&lt;/code&gt; 文件。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6052631578947368&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCFicxHxyJfK0koGjiaRvr7WKMG5NxHzvyEM1lM1Mo8A4abqJuIlTvfG3A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;418&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;首先思考，这个搜索框一定有一个出现的函数，和一个消失的函数🤔，ok，起名字，一个 &lt;strong&gt;present&lt;/strong&gt;，一个 &lt;strong&gt;dismiss&lt;/strong&gt; 。&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9133489461358314&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCzyRHyRcU0cpnIQLqCZkNOSJJgt6VgqHnhZXUSl0beth8Z5DjdYwOBg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;427&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;接下来我需要创建出一个 &lt;strong&gt;VNode&lt;/strong&gt; ，然后想办法处理成真实 &lt;strong&gt;dom&lt;/strong&gt;。经过上面的学习，第一步马上就可以想到下面的写法。&lt;br/&gt;&lt;img data-ratio=&quot;0.23684210526315788&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJC0pyUOHzkhVHWqiciaYhbRCNot0u2gkg8DjacsXuTwjdwvTTuO2TMFUXg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;456&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;下面这位更是重量级，&lt;code&gt;render()&lt;/code&gt; 函数。虚拟 &lt;strong&gt;dom&lt;/strong&gt; 有了，&lt;strong&gt;真实dom&lt;/strong&gt; 该如何拿到呢？&lt;strong&gt;Vue&lt;/strong&gt; 为我们提供了这样一个函数，这里我们需要重点去看这个函数的类型是值，是一个 &lt;code&gt;RootRenderFunction&lt;/code&gt; 类型的。&lt;img data-ratio=&quot;0.1721194879089616&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCw56uAlpckuCsibr517XPlZPPoatpybCDWC6wrfuicWhCtEQOYFX2ErbQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;703&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;这里我们转变一下思路，我们看一下 &lt;strong&gt;render&lt;/strong&gt; 函数的第二个参数是 一个 &lt;strong&gt;container:HostElement&lt;/strong&gt; ，然后让我们打开我们 &lt;strong&gt;main.ts&lt;/strong&gt; 文件，我们跳进 &lt;code&gt;mount&lt;/code&gt;的定义部分， &lt;img data-ratio=&quot;0.2175226586102719&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJChmu2H6bVde9yDPgPLrqrPFQJ1uybSa8oWwVpZzcBOuzwurDrWt0PGQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;662&quot;/&gt; &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24375624375624375&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCmfONoiau0TH4R7IVyuvKaNAB7jpZOk4GFe4J3mJYtN8gnjcMZ9FcicKw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1001&quot;/&gt; 发现神奇的地方了吗，我们虽然不知道 &lt;strong&gt;HostElement&lt;/strong&gt; 的类型是什么，但是你知道你 &lt;code&gt;mount&lt;/code&gt; 函数内填的参数是什么了吗？（忘掉的转头自觉复习官网哈。）&lt;br/&gt;没错，就是全局唯一的一个真实 &lt;strong&gt;dom&lt;/strong&gt;，一个朴实无华的id叫 &lt;code&gt;app&lt;/code&gt; 的 &lt;strong&gt;div&lt;/strong&gt; 元素。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5159574468085106&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCicrtZTSDV7d5FJXgULN0LLDz1gCrww1NicZXTpibAfXicb50t3jht7fQxA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;752&quot;/&gt; 由于篇幅限制，在这里你可以先暂时简单的理解，&lt;strong&gt;render&lt;/strong&gt; 函数会将你的虚拟 &lt;strong&gt;dom&lt;/strong&gt; 包装成一个真实 &lt;strong&gt;dom&lt;/strong&gt; 元素，但是你需要给它一个真实的 &lt;strong&gt;外壳dom&lt;/strong&gt; 来告诉它将虚拟 &lt;strong&gt;dom&lt;/strong&gt; 渲染到哪个位置。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;ok，拿到一个包装后的虚拟 dom ，接下来就是告诉浏览器在哪里渲染这个元素。这里我们需要思考🤔，既然是全局都可以弹出的，并且需要在所有组件之上弹出。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1026438569206843&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJC47jdYP9YcHhQeic8jKf5MQAiayiagyf8d4xZIsWYvRic0CpfgYuCUf8k8g/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1286&quot;/&gt; 那么最简单的方法就是让它出现在 &lt;strong&gt;body&lt;/strong&gt;的第一个元素，那么它一定会和我们网页所有的组件同级别（tips：通常我们所有的页面构成都会写在 &lt;strong&gt;body内&lt;/strong&gt; 的一个 &lt;strong&gt;div&lt;/strong&gt; 内。什么？你问我为什么？请打开你的 &lt;strong&gt;index.html&lt;/strong&gt; 看一下，你是否忘记了我们的 &lt;strong&gt;App.vue&lt;/strong&gt; 是挂在这个真实的，&lt;strong&gt;id为 app&lt;/strong&gt; 的元素内的） &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7963483146067416&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJC41RwtYtykyWZUC7JTeZNwfPGba0owzcoplZy6YtVibaFGkOOr0PfQSw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;712&quot;/&gt; 那其实我们的操作的思路就是非常简单的，当我按下全局搜索按钮，那么你就在 &lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&lt;/code&gt; 的元素之前插入我的组件即可。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5949197860962567&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCSOjYIzBe6Z3Ln2gcbO3vy6eTVxDpSxN1ctRfibD9yibhOpDDtBSLFxVg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;748&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;ok，到这里我们已经可以看到基本效果了，我们来测试一下。让我们在 &lt;code&gt;App.vue&lt;/code&gt; 组件内随便写一个按钮，然后调用 &lt;code&gt;SearchBarCreator&lt;/code&gt; 实例身上的 &lt;code&gt;present&lt;/code&gt; 方法。(&lt;strong&gt;maker&lt;/strong&gt; 感觉不是那么合理，之后我们将 &lt;code&gt;SearchBarMaker&lt;/code&gt; 变更为 &lt;code&gt;SeachBarCreator&lt;/code&gt; 的叫法，仅仅是名字变了而已，逻辑什么的根本没变哦。🍦) &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4824561403508772&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCxNl9h0BtRBZ0Z36PFUdxgTsbFv9qXqibziaPzNbHd9mQ9VTYU6Ezd6CA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;684&quot;/&gt; 效果如下：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;到这里 &lt;strong&gt;searchBar&lt;/strong&gt; 已经可以呈现在页面上了，但是我们还不知道怎样让它消失，其实也非常简单，我们只需要在合适的时机移除这个 &lt;strong&gt;dom&lt;/strong&gt; 元素即可。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3227016885553471&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJC4B5bMticuibFlJH6PYic4UZOIeEiaVOAagLoy1eDU1IQnXaelaHDia8ZNibw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1066&quot;/&gt; 在这里我们需要知道一点，我们需要将 &lt;code&gt;searchBar&lt;/code&gt; 提升到当前文件的全局，不能仅只在 &lt;code&gt;open&lt;/code&gt; 中去 &lt;code&gt;new&lt;/code&gt; 了。&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5918367346938775&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCBOZFJicbUd5SSRh9CCox7D7gUufPpMwics18QA25tLvabd040vV0euPw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;686&quot;/&gt; ok，我们测试一下&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四. 优化 SearchBarCreator 构造函数的代码逻辑&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写到这里的时候，你可能发现了一个小问题，当我一直去按&lt;strong&gt;搜索按钮&lt;/strong&gt;的时候，它会出现多个搜索框，但是我们希望的是它在全局只能出现一个搜索框。换个角度思考，也就是同一时间，这个被我们 &lt;code&gt;new&lt;/code&gt; 出来的 &lt;code&gt;SeachBar&lt;/code&gt; 实例只能出现一个。思考一下🤔，我加一个变量，&lt;code&gt;isShowing 是否正在被展示&lt;/code&gt; ，如果正在被展示的话，那么用户再次调用 &lt;code&gt;present&lt;/code&gt; 的时候，我就去调用实例自身的 &lt;code&gt;dismiss&lt;/code&gt; 方法让它消失，是否可行呢？&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9261838440111421&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCZkXfhx4q4ctug56xicykicD8kUByv3npqRJtatp2c5X2h3etVIeed2kw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;718&quot;/&gt; 测试一下：&lt;br/&gt;OK，看来完美解决当前的问题了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五. 编写全局唯一的调用实例&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在上面的这种情况下，我们已经可以在 &lt;code&gt;App.vue&lt;/code&gt; 文件内去 &lt;code&gt;new&lt;/code&gt; 一个实例来调用这个搜索框了。但是我们加入现在需要在 &lt;code&gt;XXX.vue&lt;/code&gt; 文件内调用这个搜索框呢？我难道还需要重新去引入，然后重新 &lt;code&gt;new&lt;/code&gt; 吗？nonono，某位大佬说过，程序员都是很懒的，不可能写这种低级的重复代码的。那么该如何实现呢&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;打开我们之前准备的 &lt;strong&gt;useSearch.ts&lt;/strong&gt; 文件，我们把之前在 &lt;code&gt;App.vue&lt;/code&gt; 的全局生成的这个 SearchBar 实例转换思路，使它在全局的一个 &lt;strong&gt;ts&lt;/strong&gt; 文件内生成一个，然后把这个实例自身的一些方法封装成函数，暴露给外部。那么我就可以在全局任意一个地方去调用这个实例身上的这两个方法。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7699115044247787&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCvRSobT83TBmFPsZYqveVz2Gicr6STxSKoFrMnYnhEPcgoia92gYtWNJQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1130&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;让我们在 &lt;code&gt;App.vue&lt;/code&gt; 去试一下。&lt;br/&gt;这是我们之前的 &lt;code&gt;App.vue&lt;/code&gt; 文件的调用方法。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7550702028081123&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCySfHWNeQCgI8zmtbibbfPjzJgnK4fTnqMTJsetppfsdsW9Q6qn9xekw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1282&quot;/&gt; 我们改造一下它。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5934489402697495&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCBHh8CTAPlDKLwM1lQ1aOceWoGV2TduBOCkVEdwboAmSXDiaCLc8arWQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1038&quot;/&gt; 我们再次测试一下功能有没有什么问题 &lt;br/&gt;如此一来就方便很多了，我们可以在任意位置去调用这个“唯一的搜索框”&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;六. 添加全局的快捷键 &lt;strong&gt;Command + K&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;再此之前，我们需要理解一个概念，注意我们的 &lt;code&gt;main.ts&lt;/code&gt; 文件，我们是把谁挂在了全局的那一个 &lt;code&gt;id=&#x27;app&#x27;&lt;/code&gt; 的真实 &lt;strong&gt;dom&lt;/strong&gt; 下的？&lt;img data-ratio=&quot;0.5119047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCpN0P2Ac5lbPS3vup0koNeRXY3ShgA5iaM49sDsC8fdLfEzzictAFAF3A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;420&quot;/&gt;&lt;br/&gt;没错，就是前面我们提到的 &lt;strong&gt;App.vue&lt;/strong&gt; 组件。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;那么假如我在这个 &lt;code&gt;App.vue&lt;/code&gt; 组件挂载的时候，给全局 &lt;strong&gt;window&lt;/strong&gt; 对象身上添加一个键盘事件，是不是就可以了呢？怎么添加呢？其实非常非常简单，要用到见组合按键，我们就需要使用到 &lt;strong&gt;“keydown”&lt;/strong&gt;，具体为什么不是 &lt;strong&gt;“keypress”&lt;/strong&gt; ，读者可以自行查阅这两者的区别，不属于本文的主要探讨内容。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2775423728813559&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCic0UqAXJ4KZaiaibtarxVbRicubN2NOAfsGTRpcQyTQkVKbNibZDzjscVQw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;944&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;这时候，我们先来按一下 &lt;code&gt;command&lt;/code&gt; 看看打印的内容是什么。这里重点的内容是该键盘事件身上的&lt;code&gt;metaKey&lt;/code&gt; 属性。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5883534136546185&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCI7CDduzQiaN5JGDft6XPeiazibpmkKKN6mOicVhjm7hasnJcht89JyoWiaw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;996&quot;/&gt; 在这里我们还可以推算出按下 &lt;strong&gt;“ctrl”&lt;/strong&gt; 的事件为&lt;img data-ratio=&quot;0.11224489795918367&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJC4L4hMpnjySKz5GfQh3k9ZOEwpzM3NFhOrEUqI7Twp0ZQaUHe2zaPYA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;392&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;keydown&lt;/strong&gt; 事件支持多个按键同时按下。当我们同时按下 “command” 和 “K” 键，会发生什么呢？&lt;img data-ratio=&quot;0.5730858468677494&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCEgHvMXcBxslaicQznXm2GuWsibusctToYWYh1grxF2EbULUqK2qGzzUw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1724&quot;/&gt; 但是我们发现好像并没有 &lt;code&gt;K:true&lt;/code&gt; 这个属性呀，那我们怎么去判断呢？别着急接着往下看。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;我们可以看到键盘事件 &lt;strong&gt;event&lt;/strong&gt; 身上有个 &lt;strong&gt;key&lt;/strong&gt; 属性，它的值恰好是字符串类型的 &lt;strong&gt;“k”&lt;/strong&gt;，&lt;img data-ratio=&quot;0.17391304347826086&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCFy3ibk4fNoscic1FuzCAauOkO3ak3mmxkdo0vr91CYRBJPJ7VCxV5Eicw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;184&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我直接公布写法，js 允许我们这样判断是否同时按下两个按键。&lt;img data-ratio=&quot;0.36&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCueRfibKZymTG7ia2vBVHE8LN08gibqIXlMacWHoIRcFibVRzBHdYDZfhsg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;950&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;6&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们测试一下，我们去吧 &lt;strong&gt;App.vue&lt;/strong&gt; 文件内的这两个按钮给去掉 &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6487730061349694&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCLK5lp28h9n5uHiaproMYSLBeXeBQt6YibpWZIksfkcfs74btR2EDkicbA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1304&quot;/&gt; 然后再打印一下我们按下 &lt;code&gt;command&lt;/code&gt; 和 &lt;code&gt;k&lt;/code&gt; 的时候。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4211618257261411&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCMiaktJbMIiaic3rtzB7cZps4PkKTd0rZNbyzsjw5gU9LU8Pv4jSDlibnYg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;964&quot;/&gt; 测试一下：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;七. 添加出现的动画&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在上面我们可以看到，这样突然的出现好像有一丝丝的突兀。我希望这个搜索框在出现的时候，可以有那么一丝丝的平移效果，（类似于下面的效果）该如何做呢？🤔&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;我这里介绍一种较为简单的思路，我们在 &lt;code&gt;App.vue&lt;/code&gt; 文件的 &lt;strong&gt;style&lt;/strong&gt; 内预设一个 &lt;strong&gt;Css&lt;/strong&gt; 动画，并起好名字。叫做 &lt;strong&gt;&quot;searchInput&quot;&lt;/strong&gt; &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1195840554592722&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCoCu44tcUFurFMx4Ds0KQtyQTHd62X0wA13Shp4v4ZwqdzCIjPpiarEw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;577&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;然后回到我们 &lt;code&gt;searBar.vue&lt;/code&gt; 的组件去，给我们这个组件最外层的起一个好听的名字，我这里就叫做 &lt;code&gt;searchBarWrapper&lt;/code&gt;。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8309037900874635&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCibxLibRicJTNyy3JsEFbRMRHF7WoJ2KttRNGQRaFwoKqOjQia6UK2l44HQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;686&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;然后回到我们的 &lt;code&gt;SearchBar.ts&lt;/code&gt; 文件内，也就是放我们 &lt;strong&gt;SeachBarCreator&lt;/strong&gt; 构造函数的那个文件内。（tips：不是 &lt;strong&gt;useSearch.ts&lt;/strong&gt; 哦） 我这里解释一下思路，在调用 &lt;strong&gt;render&lt;/strong&gt; 函数后，这个组件其实已经渲染成为一个真实的 &lt;strong&gt;dom&lt;/strong&gt; 元素，只不过我们还没给它指定渲染的位置。既然是真实的 &lt;strong&gt;dom&lt;/strong&gt; ，那么我们就可以通过 &lt;code&gt;document.getElementById这个方法（querySelector同理，一个意思）&lt;/code&gt;拿到这个&lt;code&gt;SearchBar.vue组件&lt;/code&gt; ，接下来我只需要在调用 &lt;code&gt;document.body.insertBefore&lt;/code&gt; 方法前，给它添加上刚刚我们在 &lt;code&gt;App.vue&lt;/code&gt; 里预设好的类名，&lt;code&gt;searchInput&lt;/code&gt; ，就完美达成我们想要的效果了。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.582716049382716&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCYTQVtAhLoF9WyUmz7vp8rhz4fhxEmLHAHz1lm5ANI3ia53enUykeE6g/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;810&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;注意：&lt;strong&gt;style&lt;/strong&gt; ，这个点仅仅是类名选择器，不要忘记了基础知识。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCL5aH5AWxUem3aKRXy3f15riaWaXibJ7McruiaQwr3u7IDbpenPZkFx9ew/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;448&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;测试一下效果：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;八. 自动聚焦&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在弹出框的 &lt;strong&gt;input&lt;/strong&gt; 框实现自动聚焦相比于之前讲的就非常简单了，我在这里一笔带过了。只需要在 &lt;strong&gt;nextTick&lt;/strong&gt; 中调用 &lt;strong&gt;input&lt;/strong&gt; 本身的 &lt;strong&gt;focus&lt;/strong&gt; 方法即可。&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8870967741935484&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHqPicmscogLvbF77AUY8byJCBibH0zqgmIXWLA7MfDxEWIkSTOKlaDlm8VonGQAwrk6bojyZPRFZsKQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;434&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以不喜欢使用真代码去写文章而大量使用截图的原因是：我自己在搜索到自己想要的文章后，也会喜欢直接看有没有最后的成品代码，然后直接复制就拿过去用了，而往往忽略了自己动手去实现一遍才是真正理解了的过程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我写代码的时候，尽量不写特别复杂的逻辑，而写一些很简单的几行代码去实现某一个功能。是因为我希望你们真正带入自己的思考，和一步步体会这个实现过程，从而举一反三。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你认真看了该文章，你也许会明白现在很多组件库的底层实现原理其实就是这样的，比如全局弹出的&lt;strong&gt;dialog&lt;/strong&gt; ，&lt;strong&gt;modal&lt;/strong&gt; 框等等。我们要去理解组件库组件实现的思路，而不是一味的复制粘贴。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个搜索框有很多可以更加优化的地方，你们可以带入自己的思考去想一想。比如&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1.如何保存搜索历史？&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;2.如何实现实时的给出搜索联想&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与君共勉才是我的初衷...&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关于本文&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作者：韩振方&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://juejin.cn/post/7170345858938961957&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-color-16057140139831=&quot;rgb(162, 162, 162)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(68, 68, 68)&quot; data-style=&quot;padding-top: 7px; padding-bottom: 7px; color: rgb(68, 68, 68); font-size: 14px; line-height: 1.8; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Lucida Grande&amp;quot;, Arial, &amp;quot;Hiragino Sans GB&amp;quot;, 微软雅黑, &amp;quot;WenQuanYi Micro Hei&amp;quot;, STHeiti, SimSun, sans-serif; text-align: center;&quot;&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(63, 63, 63)&quot; data-style=&quot;color: rgb(63, 63, 63); font-family: monospace; font-size: 20px; letter-spacing: 0.544px; white-space: pre-wrap; widows: 1; caret-color: rgb(51, 51, 51);&quot;&gt;The End&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果你觉得这篇内容对你挺有启发，我想请你帮我三个小忙：&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(0,0,0)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; font-size: 16px; color: black; line-height: 1.6; letter-spacing: 0px; word-break: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif;&quot;&gt;&lt;section&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;1、点个 &lt;span data-darkmode-color-16057140139831=&quot;rgb(71, 193, 168)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(71, 193, 168)&quot;&gt;「在看」&lt;/span&gt;，让更多的人也能看到这篇内容&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;2、关注官网 &lt;span data-darkmode-color-16057140139831=&quot;rgb(71, 193, 168)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(71, 193, 168)&quot;&gt;https://muyiy.cn&lt;/span&gt;，让我们成为长期关系&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;3、关注公众号「高级前端进阶」，公众号后台回复 &lt;span data-darkmode-color-16057140139831=&quot;rgb(71, 193, 168)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(71, 193, 168)&quot;&gt;「加群」&lt;/span&gt; ，加入我们一起学习并送你精心整理的高级前端面试题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile data-index=&quot;0&quot; data-id=&quot;MzA4Nzg0MDM5Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/H8M5QJDxMHpg1ClH18gOQIicISIoSybyDNK203zFMpSM7jHdovb4elgdqNoy6Bylk7XicC6Rpj5QrCv3FkOpR6tw/0?wx_fmt=png&quot; data-nickname=&quot;高级前端进阶&quot; data-alias=&quot;FrontendGaoji&quot; data-signature=&quot;网易 &amp;amp; 蚂蚁前端，专注前端进阶领域，已帮助无数前端跳槽涨薪。每日一题「Daily-Interview-Question」 Github 收获近 25000 颗小星星，各公司面试官都在使用。接下来带你走进高级前端的世界，在进阶的路上，共勉！&quot; data-origin_num=&quot;48&quot; data-is_biz_ban=&quot;0&quot; data-isban=&quot;0&quot; class=&quot;js_wx_tap_highlight&quot; data-from=&quot;2&quot; has-insert-preloading=&quot;1&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(89, 89, 89);&quot;&gt;&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wx27c980b913cbfb08&quot; data-miniprogram-path=&quot;pages/index/index?_um_campaign=5ec14536978eea0825f4eb6f&amp;amp;_um_channel=5ec14536978eea0825f4eb70&quot; data-miniprogram-nickname=&quot;高级前端面试&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-servicetype=&quot;0&quot; data-darkmode-bgcolor-15950741730771=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15950741730771=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15950741730771=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15950741730771=&quot;rgb(0,0,0)&quot; data-darkmode-color-15963792901125=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15963792901125=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16018219266315=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16018219266315=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16018219266315=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16018219266315=&quot;rgb(58, 58, 58)&quot; data-darkmode-bgcolor-16020008769986=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16020008769986=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16020008769986=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16020008769986=&quot;rgb(58, 58, 58)&quot; data-darkmode-color-16021670869911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(58, 58, 58)&quot; data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16030305897056=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030305897056=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030305897056=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(58, 58, 58)&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(58, 58, 58)&quot; wah-hotarea=&quot;click&quot; href=&quot;&quot;&gt;》》面试官都在用的题库，快来看看《&lt;/a&gt;《&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(89, 89, 89);&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-darkmode-color-16030305897056=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(63, 63, 63)&quot; data-style=&quot;color: rgb(63, 63, 63); font-size: 16px; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(63, 63, 63)&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; line-height: 1.6; word-break: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 15px; letter-spacing: 0.05em; color: rgb(89, 89, 89);&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;pre data-darkmode-bgcolor-15987645674728=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15987645674728=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15987645674728=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15987645674728=&quot;rgb(0, 0, 0)&quot; data-style=&quot;color: rgb(0, 0, 0); text-align: left; letter-spacing: 0.544px; word-spacing: 2px; font-size: 20px; font-weight: 700; background-color: rgb(255, 255, 255);&quot; data-original-code=&quot;&amp;lt;br&amp;gt;扩展阅读1、一篇文章上手Vue3中新增的API&amp;lt;br&amp;gt;2、Vue源码解析——异步组件是如何使用的&amp;lt;br&amp;gt;3、写好JavaScript条件语句的5条守则&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;The End如果你觉得这篇内容对你挺有启发，我想请你帮我三个小忙：点个「在看」，让更多的人也能看到这篇内容&amp;lt;br&amp;gt;关注官网 https://muyiy.cn，让我们成为长期关系&amp;lt;br&amp;gt;关注公众号「高级前端进阶」，公众号后台回复「加群」 加入我们一起学习并送你精心整理的高级前端面试题。&amp;lt;br&amp;gt;》》面试官都在用的题库，快来看看《《                        高级前端进阶 发起了一个读者讨论         写留言                                        &amp;lt;br&amp;gt;“在看”吗？在看就点一下吧&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&quot; data-snippet-id=&quot;ext.dfdc660f8db84bdd3e9d3d519ceaec46&quot; data-snippet-saved=&quot;false&quot; data-codota-status=&quot;done&quot; data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section data-darkmode-bgcolor-15987645674728=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15987645674728=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15987645674728=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15987645674728=&quot;rgb(62, 62, 62)&quot; data-style=&quot;letter-spacing: 0px; white-space: normal; font-size: 16px; color: rgb(62, 62, 62); font-family: &#x27;Helvetica Neue&#x27;, Helvetica, &#x27;Hiragino Sans GB&#x27;, &#x27;Microsoft YaHei&#x27;, Arial, sans-serif; widows: 1; line-height: 1.6;&quot; data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-bgcolor-15987645674728=&quot;rgba(112, 0, 0, 0.018750000000000003)&quot; data-darkmode-original-bgcolor-15987645674728=&quot;rgba(20, 0, 0, 0.018750000000000003)&quot; data-darkmode-color-15987645674728=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-15987645674728=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding: 10px; word-break: break-word; line-height: 1.75; color: rgb(89, 89, 89); font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;&quot; data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;pre data-original-code=&quot;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;The End如果你觉得这篇内容对你挺有启发，我想请你帮我三个小忙：点个「在看」，让更多的人也能看到这篇内容&amp;lt;br&amp;gt;关注官网 https://muyiy.cn，让我们成为长期关系&amp;lt;br&amp;gt;关注公众号「高级前端进阶」，公众号后台回复「加群」 加入我们一起学习并送你精心整理的高级前端面试题。&amp;lt;br&amp;gt;》》面试官都在用的题库，快来看看《《                        高级前端进阶 发起了一个读者讨论         参与讨论                                        &amp;lt;br&amp;gt;“在看”吗？在看就点一下吧&amp;lt;br&amp;gt;&quot; data-snippet-id=&quot;ext.89a96a6ef2d46757b2677de8206703d5&quot; data-snippet-saved=&quot;false&quot; data-codota-status=&quot;done&quot; data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-bgcolor-16018219266315=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16018219266315=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16018219266315=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16018219266315=&quot;rgb(0,0,0)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; letter-spacing: 0px; background-color: rgb(255, 255, 255); line-height: 1.6; word-break: break-word;&quot; data-darkmode-bgcolor-16020008769986=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16020008769986=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16020008769986=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16020008769986=&quot;rgb(0,0,0)&quot; data-darkmode-color-16021670869911=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0,0,0)&quot; data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;13777&quot; data-style-type=&quot;关注&quot; data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section data-darkmode-color-16030305897056=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section data-darkmode-color-16030305897056=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16030305897056=&quot;rgb(0, 0, 0)&quot; data-style=&quot;font-family: &amp;quot;PingFang SC&amp;quot;, 微软雅黑, mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 14px; color: rgb(0, 0, 0); letter-spacing: 1.56px; font-weight: 600; line-height: 20px;&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(0, 0, 0)&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(89, 89, 89);&quot;&gt;&lt;span&gt;最后不要忘了点赞呦！&lt;span&gt;&lt;img data-ratio=&quot;1.0076923076923077&quot; data-type=&quot;gif&quot; data-w=&quot;260&quot; data-fileid=&quot;100022933&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/H8M5QJDxMHo0BmF9r9Z5jmnjiaRjia63KdItrdfQPpQLTn685ib4pQK1j8wNibqXIQb5m7oLf2v7pke7SMTzCFVs3w/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(89, 89, 89);&quot;&gt;&lt;span&gt;祝 2022 年暴富！暴美！暴瘦！&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b382452e3d9740793d55a925d06592d8</guid>
<title>Glacier：OPPO 智能湖仓服务底座</title>
<link>https://toutiao.io/k/z7iyprv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;01 前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;沉寂已久的大数据技术圈，因为数据湖的概念变得热了起来，一时间，数据湖，湖仓一体，智能湖仓，众多概念如雨后春笋。数据湖用来存储和处理大量结构化、半结构化和非结构化数据。提供更灵活的数据组织，与传统数仓相比，数据湖的schema可以在分析数据时编写，而数仓是在数据写入之前编写。可以说数仓中的数据更多是提前设计好的固定格式，而数据湖的数据组织更灵活。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同时，随着机器学习技术的发展，实时训练，实时推荐不仅推进着机器学习架构的升级，同时对底层数据处理的架构也产生着巨大的影响，这也是近几年流批一体、湖仓一体、实时数仓技术发展的一个重要动力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前数据湖开源产品主要技术以Iceberg、Hudi、DeltaLake为代表，这三款产品各自提供了一种数据湖的Table Format，三者各有各的背景和特点，其中，Iceberg以更开放的接口设计逐渐显露出快速的发展势头。Iceberg对多种引擎的适配，对元数据以及partition的变更更强的兼容性，使得Iceberg在技术选型中占据有利的位置。同时，我们在实际应用对比中，发现Iceberg设计更合理，问题更少，所以，在数据湖仓的Table Format的选型上，我们选取了Iceberg作为依托。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02 数据湖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;数据湖的概念和技术近些年日新月异，但什么样的数据湖是我们真正所需的，数据湖要服务哪些类型的用户，都是需要我们结合实际的业务需求进行取舍构建。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;早期的数据湖更偏重于数据存储，比如Amazon的S3对象存储，将各种规格的数据统一存到对象存储系统。随着技术演进及需求发展，对数据湖的灵活性提出更高的要求，于是数据湖技术发展到了提供ACID、TimeTravel、Schema Evolution、Partition Evolution等更高级的feature。这一阶段，促进了数据湖进一步繁荣。不过，这些功能仍然集中在传统数仓的结构化数据上。数据湖的初衷是要支持结构化，非结构化数据共存共享，不仅要支持数据仓库，机器学习也是数据湖的一等公民。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么，我们对数据湖的愿景是什么？在传统数仓的流批一体，机器学习实时训练等技术的推动之下，促使对数据湖的实时性，快速检索以及对机器学习非结构化数据管理等能力提出更高的要求。因此，我们理想中的智能湖仓基础架构应该能够提供以上能力，并且尽量做到用户无感，自动完成索引的构建，实时数据的合并等操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Iceberg作为一个TableFormat，距离提供一套完善的数据湖服务还是有一定的差距。把TableFormat比作一台车的发动机，想要让车子跑的快跑的稳，还需要变速箱，需要电控系统。同理，智能湖仓除了底层灵活的TableFormat支持，更需要将数据湖仓和机器学习等智能化技术结合，使大数据更方便的支持智能服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面借助一些实际的业务场景来分析一下目前数据湖存在的痛点：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8807496&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQJMTRSUKqAiabur5uI6MZXqiawg9kib5sMWyrldSB0TVulDvvnWwLEy6jA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;587&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图 1：实时推荐整体架构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;线上实时推荐的流程架构中，实时样本拼接和实时特征计算对时效性要求比较高。同时，该场景会经常变动表的schema，所以，传统的hive数仓已经不适合该场景，非常适合使用数据湖仓的TableFormat来支持。以Iceberg为例，我们分析一下以上典型的场景下，存在哪些问题：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8595194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQN4kBTpnvJ5egA4IsXFyUKfJWWHq7cyJN6zYRvxzrS7zoibP9CogOo0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;541&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图 2：Flink任务commit 数据入 Iceberg&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;实时特征计算和用户实时行为数据落数仓的过程中，为了尽量保持数据的实时性，Flink任务每隔数秒或者数十秒commit一次数据到Iceberg，随时间推进，产生大量的小文件，一方面会对底层存储造成比较大的压力，另一方面也会降低查询数据的性能。同时，实时样本拼接对实时性和数据查询性能要求都比较高。开源Iceberg提供触发spark任务额外来合并小文件的功能，但是，无法满足实时推荐等对实时性和性能要求比较高的场景的需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;机器学习场景下，训练样本会经常变化，以前面的实时推荐场景为例，样本准实时变化，在模型调整或者回退的时候，需要对样本数据提供方便的版本管理能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结来说，智能湖仓为了更好的支持机器学习和大数据结合，需要提供以下能力：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;基于上面的分析，我们提出来OPPO的自研技术Glacier，作为智能湖仓的基石，Glacier提供一套完善的服务，重点解决了上面提到的实际业务痛点。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;03 &lt;/span&gt;&lt;/span&gt;Glacier 架构设计&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;首先，看一下Glacier的整体架构，整体架构在设计之初，不但考虑基本的湖仓查询加速，并且为解决机器学习的实时性，训练的多次回滚对数据多版本管理的需求，倾注了更多的设计思考。Glacier整体架构如图3所示：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.437037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQDrjjkBaqo1FCyfS5lcMEWLzMDaJW58SsmkziaxmBDcmxjX0V89Zg8xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图3：Glacier 整体架构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Glacier整体架构设计有以下几个特点：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;引擎透明，通过完全兼容Iceberg接口，Glacier不强绑定某个引擎，天然支持多种引擎&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Glacier Service以常驻服务形式提供数据合并，索引构建等辅助能力&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;结合大内存发展趋势，使用分布式内存提供实时数据读写支撑&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Glacier Version 提供数据版本管理功能，精准管理结构化，半结构化，非结构化数据&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;04 秒级实时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Append场景&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;前面提到，我们利用分布式内存支持实时数据读写，实现数据实写实查。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先，需要一套完备的分布式内存文件系统。我们改进的分布式缓存系统Glacier cache，提供数据高可用，一致性的高性能缓存服务。Glacier cache数据传输基于Netty封装RPC协议，通过灵活使用底层API，利用零拷贝，预读，流控等机制，充分挖掘数据传输性能。同时，Glacier cache通过Raft协议保障数据块多副本一致性；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有了实现实时性的基础设施Glacier cache，计算引擎通过Iceberg读写接口，实时写入Glacier cache中，数据在Glacier cache中以Arrow格式进行组织，使用Arrow接口方便查询内存数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当实时数据累积达到阈值，会由Glacier Service合并转存到底层存储系统。为了能对实时数据和底层存储数据进行合并查询，保障数据完整性，需要元数据能够感知两种数据的存在形式。下面看一下Glacier元数在内存中如何组织：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5361111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQfqWibibFlGHYSeibFtib1P6t7DeexpDPib6d27GqN4zlwIdsqAMQLThoMHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图4：Glacier 元数据组织形式&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;总体上，元数据组织形式保持对Iceberg一致，只不过将manifest等元数据从底层分布式存储系统转移到Glacier cache中，加速对元数据的访问速度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;元数据中，为内存数据单独新增一个manifest管理，如图4所示，在snapshot文件内容中，对内存和底层存储manifest区分管理，source属性为RT指的是内存数据源，BASE为底层分布式存储数据源。当内存数据被Glacier Service写入到底层存储，相应的元数据也会跟着改变。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;CDC场景&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;CDC数据实时同步入湖场景中，CDC数据变化多样，不仅有插入操作，也有大量的删除更新操作。所以不仅对数据append的实时性提出了比较高的要求，同时在删除数据场景下，对数据的合并和查询的实时性也提出了挑战。下面结合Iceberg的处理删除数据的方式，介绍一下我们在删除数据的实时性方面做的工作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Iceberg提供两种delete数据方式：Position delete 和 Equality delete。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Position delete记录要删除数据在文件中的位置，Merge On Read时，流式的读取源数据，跳过Position delete的中记录即可，非常高效，但这种删除数据方式需要感知删除数据在文件中的位置；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Equality delete 根据删除列值过滤，在读取效率上不及Position delete方式，但不需要获取要删除的数据在文件中的位置，根据列值删除数据的场景更常见。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Iceberg的Equality delete，待删除数据写入一个delete文件，读数据文件的时候，均需要与delete文件内容对比过滤。对于多个数据文件来说，待删除数据可能只对应部分数据文件，同时，每次查询也可能只需要查询部分文件的数据。鉴于此，我们做了删除的专项优化，大幅提高的Equality delete的效率，测试数据（见表3）显示，优化后的Equality delete性能达到Position delete相当。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;删除优化的主要思路将唯一delete文件拆解，待删数据与数据文件对应，减少不必的待删数据过滤匹配操作。下面介绍具体优化方案：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;待删数据插入到内存的del map中；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GlacierService在将内存数据转存到磁盘过程中，先对内存的DataBlock数据过滤；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;DataBlock过滤后的数据写入磁盘的datafile；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Del map数据根据 BloomFilter 找到对应的datafile，并写入对应的del-file；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;读取数据过程中，只过滤datafile对应的del-file的删除数据，缩小匹配规模，提高查询效率；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1211009&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQg5TNrtOkd9rTu9t5LJIvfgic7FdlTfqZwOJ22EVwm5AsTEic0jVVY09Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;545&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图5：delete性能优化示意图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Delete优化后查询性能对比：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3944444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQrJdlEtaISegBnHP5Ew9uTN1uSxky0mRdT6rAfbLpG2W1O95eKTqOWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;表3：delete优化性能对比&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;注：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;原生EqDel：Iceberg原生Equal delete模式。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;EqToPosDel：将Iceberg的Equal delete数据转换成Position delete，查询性能最快，但是前期转化需要消耗过长时间，同时这种方案不具备实时转换能力。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Glacier方案1：通过BloomFilter将delete数据分配到data file 对应的 del file中，删除模式仍然是Equal delete。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Glacier方案2：在Glacier方案1的基础之上，将对应的del file数据转换成Position delete，查询效率更高，但转换时间更长。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;05 索引加速&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Glacier service负责同步内存数据到磁盘存储，同时，对同步数据和历史数据构建索引。借助于常驻服务的优势，构建索引与数据同步过程统一，降低单独构建索引的数据IO成本。Glacier Indexer构建索引的流程示意图见图6所示。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8080614&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQ4JO07raRCQJ28iacIW3QJcq6G24zOYXv3yrPiacI583L2SxZMQFXzYyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;521&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图6：Glacier Service 数据构建索引示意图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;目前Glacier支持orc和parquet两种数据格式的布隆索引，位图索引，Z-Order索引，增量Z-Order索引，以及主键索引等主流索引功能；布隆索引和位图索引比较常见，重点介绍一下增量Z-Order和主键索引的应用效果。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;增量Z-Order索引&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Z-Order索引的构建需要对全量数据排序，消耗大量的算力，且计算时间较长，对于数据频繁变动的场景，如果频繁的构建zorder索引，构建索引消耗的算力的成本将变的不可接受。所以，我们提出来增量zorder模式，全量数据可以在算力充沛期定期排序，实时新增数据可以构建增量zorder，常驻的Glacier Service可以方便的构建增量zorder索引；增量zorder在TPCH测试集上的测试结果显示（图7所示），增量zorder在可接受的算力支出范围内，取得了明显的加速查询效果。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.687963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQhWulUFNhick8ibz9KsVniaaWGfzLPoumTsbSvJBDcib70aXrvySBspPTicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图7：增量zorder查询加速效果对比图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;倒排索引&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;另外，我们新增了主键索引，并不是只针对表的主键才可以加，是针对单列数据加的倒排索引。这种索引对查询性能提升非常明显，针对于等值和范围查询，查询条件落到了索引列上，性能将会提升数十倍。不过，索引没有银弹，超高的性能提升带来的代价就是索引数据本身占空间较大，所以该索引还是需要挑场景使用。我们通过线上几个线上针对单列条件查询的SQL对比一下该索引的加速性能，如图8所示：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQdd43qPgZWggQFqP6pPJnPJq1CKtWxb842gEOtCdVnQBmCtMLycR06A/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1080&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;696.9550173010381&quot; data-ratio=&quot;0.6444444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQGFm8OtbibFia8sCJElJ46Q5gEg6RyfiaiaB0bFM5oCXHiabht7hicPYNyGxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图8：主键倒排索引查询加速效果（时间单位: min）&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;主键索引主要采用倒排反向索引和FST作为数据字典来存储，FST优点在于内存占用率低，压缩率一般在3倍~20倍之间、模糊查询支持好、查询快，相比于HashMap，性能相差不多，但是占用空间有10倍左右的减少，这对于大数据检索规模至关重要。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4453901&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQlGtEGh8rSW1OaXTeZdnksoHOtjTGUqzqvg8tsR91gKdzoTiaxN42Ewg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;705&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图9：FST示意图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为了进一步降低索引占用的空间，我们选用 FST 的 LZ4 high压缩模式，保障压缩比例最大化。同时，我们对索引内容做了进一步裁剪。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4367622&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQpb2SJwL4aib7ico7icODu4BhCiacTeM5Exric7AicZ719BGWdQzVNTSM3qhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;593&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图10：&lt;/strong&gt;&lt;strong&gt;主键索引数据裁剪示意图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;主键索引的FST实现中主要包含了Chunk的一些信息，chunk块的大小，其他块位置的偏移量，以及被索引的原始数据，在内容文本索引场景中索引命中后可以直接返回原始数据提供查询，但是作为主键索引来说，该索引主要判断当前文本在不在某个列式文件中，以便数据湖ScanFile Task决定扫描该文件与否，所以去掉该部分可以降低索引占用空间，同时不影响索引效率。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;06 数据多版本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;数据多版本管理，在大数据计算领域和机器学习领域均有特殊的需求。比如：在大数据计算场景中，开发者要用测试验证数据应用程序，可以通过数据版本管理，克隆部分数据作为测试版本；另外，对于ABTest场景，对实验的多种对照组数据均可用版本管理工具进行管控；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，数据版本管理，在机器学习应用中使用的更普遍，不仅可以对训练样本的变更，回滚等进行版本管理，还可以对模型版本进行管理。总之，数据版本管理对数据湖来说，有着不可或缺的地位。下面介绍一下Glacier Version，我们的智能湖仓数据版本管控技术。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;提到版本管理技术，不得不提代码管理工具git，但是在大数据场景下，git在技术设计本身存在天然的缺陷，下面通过表4介绍对比一下Git和Glacier Version的差异：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:94.classicTable1:0&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:0.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;比较项&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:0.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:0.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Glacier Version&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:0.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:94.classicTable1:1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:1.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Clones&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:1.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Y&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:1.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;N&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:1.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;数据集通常很大，不适合clone，通过branch提供类似功能&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:94.classicTable1:2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:2.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;速度（rw/second）&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:2.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&amp;lt;1&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:2.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;5000+&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;2&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:2.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;git 通过blob对象对文件进行管理，每次提交会对文件进行内容比较，速度慢，而且会生成大量版本数据&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:94.classicTable1:3&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:3.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;速度（seconds/commit）&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:3.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3-5s&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:3.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;30ms&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:94.classicTable1:4&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:4.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;管理对象&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:4.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;文件&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:4.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;表、文件&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:94.classicTable1:4.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Glacier Version可以支持结构化非结构化数据的版本管理&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;表4：&lt;/strong&gt;&lt;strong&gt;Glacier Version与Git对比&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在大数据、大容量的场景下，Git的缺陷是不能容忍的，所以在设计Glacier Version时基于Merkle Tree加文件pointer的模式对文件进行管理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Merkle Tree是一种基于哈希的树形数据结构，该树中的每一个叶子结点都是一个数据块，而每一个非叶子结点都是其子结点组合的哈希，Merkle Tree在分布式系统中被广泛使用于进行数据校验。在分布式系统中，可以保证数据可靠性及一致性，而不需要对文件逐一比较。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Merkle Tree的结构如图所示：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4872825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQo2LSXuBTBAaEnResIjibs5LsFIQE7iaQ8UdeWQaBXBFX0XR3DI8Gcx4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;747&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图11: Merkle Tree组织示意图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于上述思想，智能湖仓的版本管理方案Glacier Version架构如下图12所示：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4688091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQlr45OBh0dXFQQufUv2vS0T1SSTv4eaCTwxFdrlYsujGqYib3Rk2mgvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图12：Glacier Version架构图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Glacier Version主要的特性有以下几点：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;支持Git常用命令：clone、commit、branch、merge等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持多种引擎，并针对PyTorch等机器学习框架进行适配&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于版本提交使用Merkle Tree对文件进行管理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果新提交基于之前的版本进行提交，其中未更改的文件可以复用&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用manifest方式进行管理，不再需要将blob对象下载到本地&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持外部源的文件管理（由于外部文件的删除不在系统内，可能存在clone异常的情况）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Glacier Version性能延迟以及吞吐指标：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;平均操作延迟在30ms以内&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;创建分支及读写操作支持5000+ rps&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;每次提交支持数据量达到PB级别&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Glacier Version设计之初，融合了Git的操作特性，契合用户使用习惯。同时支持多种大数据计算引擎和机器学习引擎，为大数据和机器学习提供统一便利。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;07 非结构化数据管理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Glacier-Version支持快速将非结构化数据转成结构化数据并入湖管理，支持对其进行打标，并能够统一进行数据版本管理。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.420205&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQniavqzZtznVUAQCReG3cEiaSYOlnY0roiaic6MVgtcOKScHmy3anqUhkOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;683&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图13：Glacier-version 对非结构化数据管理&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;针对机器学习的场景，对非结构化数据进行文件格式设计，块化存储，并带有标签，方便查询过滤及流式传输。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对机器学习场景存在的IO瓶颈问题计划从下面几个方面入手：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1、数据存储格式，基于列式存储，数据存储在特定大小数据块中，一个块中可以存多条数据，如果文件比较大，也可以分成多个块存储，这样做可以提升传输效率，同时可以支持流式传输&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2、缓存提速：Glacier cache提供高速缓存数据读写支持，在机器学习场景下，可以利用该分布式缓存进行调度算法优化，基于调度系统提前进行缓存，并可以将容器调度到指定已有缓存的机器上，提升缓存命中率并降低网络IO，降低IO的等待瓶颈。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;非结构化-Tensor存储：&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;HDF5（Hierarchical Data Format），用于存储和组织大量数据的文件格式。侧重图像、数组。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.370098&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQNNA1XWP7svxjhkpo3R7SbSZdpNDNq6Z93EUhh3SczEBaGsYfOcKaaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;816&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图14：HDF5存储格式示意图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如图15所示，&lt;strong&gt;数据存储&lt;/strong&gt;为大小为4 x 5 x 6的三维数据集，数据类型为整数。属性为时间和压力，同时数据被分块和压缩 。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5287187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQ6SELhWpWZnrFNpvRYe2FOPrKDj0QW06F5GWIf450qHDbK72Tx1ZoicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;679&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图15：HDF5分块压缩示意图&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;zarr , n5 继承并扩展了HDF5的规范定义，对机器学习框架的支持更加友好。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;非结构化-Data Stream Loader：&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过将非结构化数据转换成结构化数据，原本松散的文件会以固定大小的块以列存的模式进行存储，同时可以通过index把标注、时间戳等信息进行关联。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.420205&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQniavqzZtznVUAQCReG3cEiaSYOlnY0roiaic6MVgtcOKScHmy3anqUhkOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;683&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图16&lt;/strong&gt;&lt;strong&gt;：非结构化数据转结构化数据&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;以机器学习场景进行说明，非结构化的数据不可避免的需要通过网络将数据传输到本地再进行处理，而我们在转成结构化数据后，由于固定的块和列式的存储的模式，使得我们可以进行流式数据传输，这样无需等待所有数据都传输完成，在传输的同时将数据进行处理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过将非结构化数据转成结构化数据，可以得到：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;传输效率：可以支持流式读取，降低反复网络建链，无需等待所有数据都传输完成，就可以对数据进行处理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;内存效率：使用固定大小的块进行存储，可以提升内存的复用度，减少内存频繁的申请销毁带来的碎片化问题&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;执行效率：可以充分提升CPU和GPU的并发能力对数据进行处理&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6688654&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQD7NGwsST3CUAxT7c65HBictfVUwYxb8EB74xCvASLGYbo4J3RN5ONcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;758&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图17：流式读取&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1741071&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ECThdibSVDxiaEaric7WG6LCBLRbleUQxdQgNYDCtbGwVVFiaLjeeiaHFCg4HGxKCwSYWbkIYCYibuwzHL8ZotICjM5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;672&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;图18：基于Ring Queue的内存复用模型&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;08 总结与展望&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;作为智能湖仓的底座，Glacier提供一套完整的数据湖服务，不仅包括传统湖仓服务，更与机器学习紧密结合，为机器学习和大数据结合提供更便捷的平台。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据湖仓应用，使用户只需要关注数据应用本身，不必过度的关注数据的排布，合并等问题。提供秒级入仓，实写实查高效的实时性增强。利用常驻服务，自动的创建相应的索引，创新的提供增量zorder索引，在计算成本和加速效果两者之间做到更平衡，更高效。同时，在删除数据的merge on read场景，对内存和磁盘数据两种模式分别做了优化，使 Equality delete与Position delete性能相当。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在机器学习方面，提供完备的代码、模型、数据版本管理服务，使Glacier融合到整个机器学习线上流程；同时，可以利用Glacier高性能基础设施，优化数据传输和读写性能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;未来的Glacier发展方向，将向着更加智能化，更完备的方向发展。对于湖仓领域的延伸，Glacier可以根据数据查询的特征，自动创建合适的索引；对于机器学习领域的支持延伸，Glacier将支持向量数据的查询加速，主要针对图形数据的应用场景。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;OPPO的智能湖仓，是对数据基础架构的一次全面技术升级。除了Glacier这一服务底座，还包括  Shuttle：OPPO智能湖仓计算加速器， 提供对Shuffle, Sort, Broadcast等算子的优化增强服务。LakeLink：OPPO智能湖仓引擎适配器，提供自动化，智能化的大数据计算接入方式，降低用户使用数据平台的门槛，提升资源利用率。后续系列文章将陆续为大家揭秘，敬请期待。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>