<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3cf7224c90ab58ec644ccff8d8b61f93</guid>
<title>胜者为王 (Winner-take-all)，202 3年 3 月 1 日的 ChatGPT</title>
<link>https://toutiao.io/k/a8g8rng</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;胜者为王是一个成语，意思是在竞争或竞赛中获胜的个人或团体得到一切，而其他人什么也得不到。它表明没有第二名，赢家是唯一获得奖品或奖励的人。这个短语通常被用于各种场合，如政治、商业、体育和娱乐。在这些领域中，这个短语可以描述只有一个赢家的情况，或者奖金向赢家严重倾斜。&lt;/p&gt;&lt;p&gt;例如，在选举中，赢家拥有所有权力和控制权，而输家则被排除在外。在体育比赛中，赢家获得奖品、奖杯和荣誉，而输家则什么都没有得到。同样，在商业交易中，赢家拿走所有的利润，而其他各方则一无所有。&lt;/p&gt;&lt;p&gt;2023年3月1日，OpenAI 发布了关于 ChatGPT 的编程接口，这意味着从现在开始，任何软件和工具，都可以像 ChatGPT 一样整合对话功能。&lt;/p&gt;&lt;p&gt;你能想象会发生什么吗？&lt;/p&gt;&lt;p&gt;任何人都将能够建立一个友好的、可定制的聊天机器人，它可以提供建议，甚至为朋友写一首诗，为工作写一份总结，或者在几秒钟内为领导起草一份演讲稿。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;事实上，国外的聊天软件 Snapchat 已经利用 ChatGPT 的接口做到了这一点。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FQdpHx6HeJydbBx2mAyb7duOScbWSQuMQHZqmquibWQg0jsr8EXGZc8Gz8Ko2DN2ibxiaWaZzCLvQv3oopnyccYBA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;任何想学习任何东西的人都可以按照自己的理解和兴趣的节奏来学习。你能想象吗？每个人都可以有一个个人老师，他将解释你提出的任何相关问题。(当然他不会是完全正确的，和你的老师一样😃)&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;事实上，Quizlet 已经做了这件事了，它是一个全球学习平台，主要以构建抽出式卡片而闻名。它现在推出了 Q-Chat，一个完全自适应的人工智能导师，允许学生根据通过有趣的聊天体验提供的相关学习材料，并提出自适应的问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FQdpHx6HeJydbBx2mAyb7duOScbWSQuM715GAMxicEsArY6EM1Ofr4uHriaMXosialrLniapzNP9xDTHtuyHd5p58g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;任何人都可以聘请一个个人外教，帮助练习各种语言的口语。学习英语口语？聘请外教？这已经是过去的事情了。你想谈什么话题？没问题，任何话题都可以。还想让他纠正你口语中的错误？没问题。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;事实上，已经有工具可以做到这一点。只是价格贵了一点。但是按照今天的成本估算，将来会非常非常便宜。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.56328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FQdpHx6HeJydbBx2mAyb7duOScbWSQuMIdd1P9WgaaWhv0GE14mHcC6EuYcnNVuf3KB7u3uuiaqAKdQAp9Nym2w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;任何人都想知道手头这堆客户信息中是否有他们想要的东西。本来需要一个文件一个文件地找相关的内容，或搜索相关内容，变成了，你只需要不停的提出问题，然后核对事实就可以了。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;事实上，已经有工具可以做到这一点。研究人员在阅读一篇论文就有一个类似的工具，只需提供文件，然后不断对文章的内容发问即可。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在 ChatGPT 编程接口的调用成本是 1k token 0.002美元，简单地说，如果你用 500 个字来提问，它用 500 个字来回答，那么这一次的成本是 0.014人民币，即 1.4分钱。&lt;/p&gt;&lt;p&gt;在接下来的几个月里，相信很多工具都会整合 ChatGPT 的对话功能。&lt;/p&gt;&lt;p&gt;在全球范围内，OpenAI 的 ChatGPT 编程接口肯定会在聊天机器人方面击败其他公司（当然他不需要自己出场，他只需要在后面技术支持即可）。但好在中文和其语料库是一个很大的障碍，国内公司还是有很多机会的。&lt;/p&gt;&lt;p&gt;我在考虑这样一个问题，如果在一个胜者为王/赢家通吃的市场或领域，已经有其他人领先了，那么接下来你应该做什么呢🙃&lt;span/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;更新下书籍进度：&amp;lt;&amp;lt;KNIME视觉化数据分析&amp;gt;&amp;gt; 已经在当当网列出来，但还没货，京东还没列出来。大概是因为，去年疫情印刷厂挤压了不少印刷任务...又鸽子了🤣🤣🤣 😶🌫️😶🌫️😶🌫️ http://product.dangdang.com/29520187.html&lt;/p&gt;&lt;/blockquote&gt;&lt;p dir=&quot;auto&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1e05a5e34c475f24eabe1b62edbe8a7d</guid>
<title>手写模拟 Spring 底层原理：Bean 的创建与获取</title>
<link>https://toutiao.io/k/8pisyoj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;作者：京东物流 张鼎元&lt;/p&gt;

&lt;h1&gt;1 引言&lt;/h1&gt;

&lt;p&gt;大家好，相信大家对Spring的底层原理都有一定的了解，这里我们会针对Spring底层原理，在海量的Spring源代码中进行抽丝剥茧手动实现一个Spring简易版本，来促进我们对Spring架构有个更深的理解，对Spring的常用功能进行手写模拟实现。&lt;/p&gt;

&lt;h1&gt;2 启动Spring&lt;/h1&gt;

&lt;p&gt;针对Bean的创建和获取功能，我们来进行功能的实&lt;/p&gt;

&lt;p&gt;首先我们创建JdApplicationContext类做为Spring启动类，实现bean的加载和获取功能。&lt;/p&gt;

&lt;p&gt;UserService和OrderService类作为Bean的实现类，通过JdApplicationContext类中的getBean方法获取到前面两个类的实现。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  App为启动测试类&lt;/li&gt;
&lt;li&gt;  AppConfig为启动配置类&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：下面的代码会顺着内容讲解逐步完成&lt;/p&gt;

&lt;p&gt;首先创建App类做为入口，测试Spring功能。通过初始化JdApplicationContext类，动态加载bean实例。 通过getBean方法获取bean实例。 &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5236391df2a43387943a88dd193bae175ad.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;创建JdApplicationContext类，提供获取Bean实例方法，通过构造函数动态初始化bean实例。 &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-79b9ab1f6f2ec64f482f435a7bb03d2c21f.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;3 扫描类路径并缓存BeanDefinition数据&lt;/h1&gt;

&lt;p&gt;在JdApplicationContext类初始化的时候，通过AppConfig配置类获取类的扫描路径，在扫描路径下，找到需要创建Bean的类，通过标注Component注解的类识别需要创建的Bean。&lt;/p&gt;

&lt;p&gt;通过Component注解识别出的类，进行封装成BeanDefinition. 再缓存到beanDefinitionMap内存中。 &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-51673ad13822b68b83e5aa44ae575c90f1a.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;上述的代码中，我们发现创建BeanDefinition类时，封装了class类，beanName,scope三个主要属性。用于创建bean的时候，提供class类进行初始化和属性的注入，创建单例类或原型类提供数据依据。&lt;/p&gt;

&lt;h1&gt;4 初始化Bean和依赖注入&lt;/h1&gt;

&lt;p&gt;接下来，在上面的扫描操作完成后，所有待初始化的bean数据存储beanDefinitionMap中。我们只需要遍历beanDefinitionMap数据进行逐个初始化和属性的注入。 &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c9d25f9eece284521904065d47350bc269e.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;上述代码中，对bean进行初始化时候，从beanDefinition中获取要初始化的class，通过反射机构进行无参初始化。&lt;/p&gt;

&lt;p&gt;初始化完成后，再对有Autowired注解的属性进行依赖注入，Autowired注解没有传递value值时默认取属性名称作为beanName，通过getBean方法获取bean实例。&lt;/p&gt;

&lt;p&gt;getBean方法会通过beanName，从beanDefinitionMap中取得beanDefinition数据。通过beanDefinition确认该bean为单例类原型类&lt;/p&gt;

&lt;p&gt;如果为原型类，直接调用createBean方法进行bean初始化。&lt;/p&gt;

&lt;p&gt;如果为单例类，首先从singletonBeanMap缓存中获取bean实例。如果未获取到，调用createBean方法获取bean实例，同时将已创建bean实例缓存到singletonBeanMap缓存中。&lt;/p&gt;

&lt;p&gt;此时，在上述的功能中，依赖注入简易版本已实现。同时我们注意到UserService和OrderService可能会产生循环依赖的问题，在这里如何解决呢？&lt;/p&gt;

&lt;p&gt;问题代码如下 ： &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-bfb7946a511c8ded49ddf5958bb580ef719.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-d9365da6cbc06bb4a64d4e5f84b5eb3c520.png&quot; alt=&quot;&quot;/&gt; 上图就是循环依赖问题代码导致的异常。重复创建bean进入死循环。&lt;/p&gt;

&lt;p&gt;在初始化bean和属性注入之间，我们可以增加二级缓存作为突破口，解决死循环问题。&lt;/p&gt;

&lt;p&gt;userService初始化后，需要注入orderService,通过getBean方法获取，因为orderService没有在singletonBeanMap缓存中，也需要初始化并注入userService属性, 同时userService还在初始化过程中，不能缓存到singletonBeanMap缓存中。造成彼此循环等待属性的注入。为解决此问题，我们只需要设立初始化过程中缓存到creatingBeanMap中，在userService初始化过后，未进行属性注入前缓存到creatingBeanMap中，userService需要的orderService属性在创建bean实例过程中，优先从creatingBeanMap缓存中得到userService实例，来完成bean实例的创建过程。orderService完成bean实例创建后，userService也相应的完成实例创建。 &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-269ed66ac3bd10d2c01f9586a6bc6939fc1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;5 实现InitializingBean接口&lt;/h1&gt;

&lt;p&gt;在createBean过程中，我们可以对外提供初始化扩展接口InitializingBean接口。只要实现该接口，我们就可以针对bean的初始化进行扩展功能实现。 ![] &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-8f4dbae04a24d6188c419bf1444559050d8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;6 实现BeanPostProcessor接口模拟AOP&lt;/h1&gt;

&lt;p&gt;首先创建BeanPostProcessor接口，作为所有bean实例的对外扩展接口&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-28b00f3dbb6253625dbe44ce71c0796a4bf.png&quot; alt=&quot;&quot;/&gt;创建BeanPostProcessor接口实现类，模拟AOP功能，指定userService类进行切面。 &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6598122904d4102bb01843416c623c8161c.png&quot; alt=&quot;&quot;/&gt; 在扫描类的时候，将已实现BeanPostProcessor接口类缓存到beanPostProcessorList中。 &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-ea98419641b880bb0e747868423a77b9011.png&quot; alt=&quot;&quot;/&gt; 通过上面的扫描，beanPostProcessorList已缓存所有的BeanPostProcessor实现类。在createBean的时候，对已创建的bean实例进行预处理扩展。 &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-a38c50f00c792a87f7068a163dd66a074fc.png&quot; alt=&quot;&quot;/&gt; 通过上述代码的实现效果如下： &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5ea143944f1a2e74c4c047c8cf3f9a0b283.png&quot; alt=&quot;&quot;/&gt;源代码：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://3.cn/109Aj-Zok&quot;&gt;https://3.cn/109Aj-Zok&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;7 总结&lt;/h1&gt;

&lt;p&gt;在上述的讲解中，我们对Spring底层原理进行简单的实现，通过对类的扫描，注解标识的判断，beanDefinition的定义和缓存。通过反射和代理进行bean实例的创建和扩展。相信大家也看出来在实现过程中，有很多地方需要改进，还可以继续扩展Spring很多其它功能。例如扩展beanDefinition的注册，引入Bean工厂，延迟加载等。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7a0ba8d4f3dc9cf26f6cff01e3535bb2</guid>
<title>Kruise Rollout v0.3.0：教你玩转 Deployment 分批发布和流量灰度</title>
<link>https://toutiao.io/k/34he6w3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-backh=&quot;108&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/yvBJb5IiafvmiaBnXvbGDru5fwoNCGwhCdc2xA5ahKkfBePMIjkboicYBKINVBY43ZVG1CibXJORibIAzkhpAke0PhQ/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Kruise Rollout &lt;/span&gt;&lt;span&gt;是 OpenKruise 社区开源提出的一个渐进式交付框架。其设计理念是提供一组能够将流量发布与实例灰度相结合，支持金丝雀、蓝绿、A/B Testing等多样化发布形式，以及支持基于 Prometheus Metrics 等自定义 Metrics 实现发布过程自动化，无感对接、易扩展的旁路式标准 Kubernetes 发布组件。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;67&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;https://github.com/openkruise/rollouts&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在最新发布的 Kruise Rollout 0.3.0 版本中，我们为大家带来了几个非常有趣的新特性：一是针对 Kubernetes 社区应用最为广泛的 Deployment 工作负载的发布能力进行了重磅增强；二是对流量灰度能力进行了进一步扩展；三是支持以插入 Lua 脚本的方式来支持更多网关协议的扩展：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Deployment 分批发布&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Deployment 能够像 StatefulSet 或 CloneSet 一样具有分批发布 Pod 的能力。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;基于 Header&amp;amp;Cookie 南北向流量灰度&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：允许用户在发布时对七层流量按照 Header&amp;amp;Cookie 匹配规则进行划分，并将不同流量群体导入不同版本实例，以便对新特性进行 A/B Testing 或进行更细粒度的流量调度。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;基于 Lua 脚本的 Ingress 流量扩展&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：允许用户以配置 Lua 脚本的方式，为更多类型的流量组件制定 Kruise Rollout 插件，支持更多类型的 Ingress 扩展协议。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;概念说明&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在介绍新特性之前，让我们先一起梳理一下目前 Kubernetes 工作负载主流的发布形式：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;滚动升级&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：原生 Deployment 自带的主流发布模式，流式滚动升级，无法设置卡点。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;优势：发布效率高；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;劣势：爆炸半径大，容易出现大规模发布故障。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;金丝雀发布&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Flagger 和 Kruise Rollout 等组件都支持的一种针对 Deployment 的发布模式，在发布时会创建一个金丝雀版本的 Deployment 进行验证，当验证通过后，再进行全量的工作负载升级，并删除金丝雀版本的 Deployment。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;优势：回滚无需重建或重新发布 Pod，所以回滚非常快速和方便；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;劣势：发布时需要额外的资源消耗，并且需要重复发布新版本 Pod，发布时不能完全兼容 HPA。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3473895582329317&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORjv9IT4v6ralKPBW5tUN2eo6RCSLIibRndqdYiae5WibMnrFvUYHOwuhu8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;996&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;图 1：金丝雀发布方式&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;标准分批发布&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：借助类似 StatefulSet 或 CloneSet 提供的 Partition 能力完成的标准形式的分批发布，发布时始终保持原工作负载名称等元属性不变，并且不会裂变出其他工作负载。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;优势：发布不浪费资源，可控制爆炸半径，可完全兼容 HPA 等需要 Ref 工作负载的其他组件；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;劣势：Deployment 很难支持此类型发布（目前仅知 Kruise Rollout 支持 Deployment 进行此类型发布）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34814814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORjYjnfwPrV5a1YeLRYnpAv70IGRPOgRjpO7Gianicd9GibhnsXw2bnt6H3A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;图 2：标准分批发布方式&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;非标准分批发布&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：由于 Deployment 原生逻辑无法支持分批能力，所以像 KubeVela 等社区提出的 Rollout 方案，使用的是两个 Deployment 滚动的形式进行发布。每次发布时都会创建新的 Deployment，并且对 Deployment 扩容的同时，缩容旧的 Deployment，相当于每次发布完成后 Deployment 都会被替换。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;优势：发布时不需要额外资源，可控制爆炸半径；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;劣势：发布时会裂变多个工作负载导致缺少统一控制平面，容易造成发布和扩缩动作相冲突，难以兼容 HPA 等场景，容易造成发布卡单。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34629629629629627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORjsicawyymugB4K6UTn2uLLhibbKnsZhlrib2iafBuJAEEqMU6oEQbHvKMJQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;图 3：非标准分批发布方式&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;A/B Testing&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：按照一定的规则将用户流量切分成 A、B 两个不相交通路，并将导入不同版本的 Pod 实例进行处理，以此来更好地观察、对比或者灰度新版本能力。一般来说，A/B Testing 需要结合金丝雀发布或分批发布进行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4398148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORjHbupnY5uPawibxBlMBAnbTXibv0oEIic9fRTq4HXJUNDnkDL2gTic428lg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;图 4：A/B Testing&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;方案对比&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于上述发布形式，除了 Deployment 自带的滚动升级“一把梭”的方式不需要依靠其他三方组件之外，其余发布方式或多或少都需要依靠其他组件或上层 PaaS 平台的能力支持。那么 Kruise Rollout 作为其中的一种解决方案，与其他方案相比，又有何优缺点？下面我们比较了开源社区目前相对较为流行的两种解决方案：Flux 社区提出的 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;Flagger&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;1]&lt;/strong&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，以及 Argo 社区提出的 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;Argo-Rollout&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;2]&lt;/strong&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8728246318607764&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORj1N60Uvgd3kadOLewnlEr9qLklzbkricnmkrZ4zwjzRc1z6k4GqeiaVdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1494&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总的来说，Kruise-Rollout 的优势可以总结为以下几点：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;灵活性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：具备旁路式可插拔能力，即，当用户下发 Kruise Rollout 配置后，对应的 Deployment 会立刻具有标准分批发布的能力；当用户不在需要该能力时，可随时删除 Kruise Rollout 配置（甚至在发布过程中也可以删除），Deployment 立刻会恢复至原生滚动发布行为。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;兼容性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：完美兼容 HPA 或其他需要 Ref Workload 的三方组件;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;接入简便&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：由于 Kruise Rollout 极具灵活性，用户只需要下发配置即可生效，&lt;strong&gt;用户无需做任何 Pod 或 Workload 的迁移工作，对存量运行时容器无影响，不影响扩缩容链路，故接入相对十分简便。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;特性介绍&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在介绍新特性之前，再啰嗦一下为什么 OpenKruise 社区要执着于做 Rollout 这件事情。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我们知道在 Kubernetes 中，容器生命周期与流量生命周期异步管理的设计使得 Deployment 本身无法感知流量的挂载与卸载，我们曾遇到某客户在一次 Deployment 流式滚动升级过程中，流量组件出现异常，导致流量全部挂空的事故，虽然只有短短十几分钟，但却也造成了非常大的损失。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务逻辑导致的 Bug 在 Deployment 流式滚动更新的发布阶段无法感知，一旦全量上线后，可能会造成严重故障，很难控制故障的爆炸半径（因为 Deployment 滚动升级只要 Pod 可用就会全量发布）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我们也经常遇到在测试环境中跑的好好的，为什么到了生产却不行了之类的问题。其实只靠环境隔离解决不了所有问题，生产发布环境最好还是不要升级“一把梭哈”，循序渐进才能“一步一个脚印”。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;上述场景如果使用分批的发布形式，其实是可以尽可能地将问题的爆炸半径控制在灰度范围之内，并且可以留下充足的灰度和观察的时间。然而，Deployment 原生逻辑并不支持分批操作，但如果使用 Argo-Rollout，还需要把所有工作负载和 Pod 进行迁移，风险太高，而且适配也太麻烦；如果使用 Flagger，仍然要迁移 Pod，并且发布时候还需要双倍资源，代价也太高。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这时候，你需要的可能是 Kruise-Rollout ！&lt;strong&gt;仅需两步，就可以让你的存量 Deployment 立刻具备标准分批发布能力！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;新特性一：&lt;/span&gt;&lt;span&gt;教你玩转 Deployment 标准分批发布&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;前置步骤&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;存量或新建 Kubernetes 集群并要求：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kubernetes version &amp;gt;= 1.19&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;67&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;注：该版本要求主要是 Ingress API 在 1.19 有较大变动所引起，如果你不需要复杂的流量灰度的能力（即不需要配置 TrafficRouting 字段），可以自行拉取和修改 charts，来规避该版本要求。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;步骤一：一键安装 Kruise-Rollout&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;$ helm install kruise-rollout openkruise/kruise-rollout --version 0.3.0&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;步骤二：为你的 Deployment 绑定并下发分批发布规则&lt;/span&gt;&lt;/h4&gt;&lt;pre data-language=&quot;yaml&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;apiVersion&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;rollouts.kruise.io/v1alpha1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;kind&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Rollout&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;metadata&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;rollouts-demo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;namespace&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;default&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;annotations&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;rollouts.kruise.io/rolling-style&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;partition&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;spec&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;objectRef&lt;/span&gt;:  &lt;span class=&quot;code-snippet__string&quot;&gt;# 绑定你的 Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;workloadRef&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;apiVersion&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;apps/v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;kind&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;echoserver&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;strategy&lt;/span&gt;:   &lt;span class=&quot;code-snippet__string&quot;&gt;# 制定你的分批发布规则&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;canary&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;steps&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;replicas: 1     #第一批发一个 Pod，发布完后暂停，手动确认后进入下一批&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;replicas: 60%   #第二批发60% Pod，发布完后暂停，手动确认后进入下一批&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;replicas: 100%  #第三批发全量 Pod，最后一批发布完后默认自动完成&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;步骤三：玩转 Deployment 的分批发布&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;如此一来，当你后续进行发布时，Deployment 的流式滚动升级将会直接变为分批发布。下面我们以一个名为 echoserver 的 Deployment 为例，描述一次分批发布过程。&lt;/span&gt;&lt;/section&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;1. 发布前&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt; 检查一下 Deployment 副本数为 5，当前版本为 789b88f977：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22407407407407406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORjKsQsAsrmpyyH6kLhLrKpwKqQu7ct1SH3gia8EuhNTWibAKh5Z65OZ6qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;2. 开始发布第一批&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;此时，我们修改容器的某个环境变量来触发发布，可以看到第一批只发布了一个 Pod，版本号为 d8db56c5b：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2175925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORj1aEgico7dT5cIpiclJCAax1ASSOGcrWxOmsy7k2hvS4PaicjMv2L18KSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;3. 继续发布第二批&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;第一批 Pod 发布完毕后，此时假设我们已经完成第一批的验证，想要继续发第二批 Pod，我们可以借助 kubectl-kruise 这个命令行工具来进行批次完成的确认操作。该工具是基于 kubectl 的拓展，目前也是由 OpenKruise 社区维护。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3277777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORjUwpZe9Ehak632z4lYSk6zEOtT5dlDYEehgtoibst541XPn2puv5Fh8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;注：确认发下一批的命令为 kubectl-kruise rollout approve rollout/rollouts-demo&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上述过程可以看出，在该批次发布过程中且未完成时，Rollout 会进入 StepUpgrade 状态，而当该批次发布完成，会转变成 StepPaused 状态。&lt;/span&gt;&lt;/section&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;4. 发布最后一批&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;当第二批发布确认完成后，发最后一批后，Rollout 会进入 Completed 状态，表示发布完成：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44166666666666665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORjxQAhEZ9Bp3LFrQDug198f5GmTEPVbueXRRNNxhx2yh8nfAiboWviagXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;特别要说明的是，在分批发布的&lt;strong&gt;单个发布批次内，我们仍然会遵循流式滚动发布的规则&lt;/strong&gt;，也就是说你仍然可以通过调整 Deployment 的MaxUnavailable和MaxSurge来兼顾你发布时的稳定性和效率，例如在以下场景，你依然可以遵循 Deployment 的如下配置：&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;yaml&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;kind&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;spec&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;strategy&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;rollingUpdate&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;maxUnavailble&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;maxSurge&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;20%&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;pre data-language=&quot;yaml&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;kind&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;spec&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;strategy&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;rollingUpdate&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;maxUnavailble&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;20%&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;maxSurge&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;pre data-language=&quot;yaml&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;kind&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;spec&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;strategy&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;rollingUpdate&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;maxUnavailble&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;25%&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;maxSurge&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;25%&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;此外，该方案还充分考虑了各种发布场景，最大程度地提高方案的灵活性：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;连续发布场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：v1 到 v2 的发布过程中（v2 未发布完成），又发布了 v3，此时 v3 仍然会从第一批开始走标准分批发布流程；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;快速回滚场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：v1 到 v2 发布到中途，回滚回 v1，则会进行快速回滚，默认不再进行分批发布。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;发布策略删除&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：无论是在发布完成后，甚至是在发布过程中，正常删除 Rollout 资源后，相应的 Deployment 都会无缝回退至流式滚动发布场景，方便某些特殊情况下快速进行变更。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;新特性二：&lt;/span&gt;&lt;span&gt;基于 Header&amp;amp;Cookie 的流量灰度&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 Kruise-Rollout 0.3.0 之前的版本中，我们提供了基于调整流量权重 （Weight） 的流量灰度方案，但是考虑到在实际大多数场景中，各类 Ingress 等本身已经具备的载均衡能力就能满足日常流量灰度的需求，例如 10% 的 canary 副本本身就会默认打入 10% 的流量，如果不是特殊的精细化流量调整场景（ 例如 10% 的 canary 副本只导入 1% 流量），一般不需要单独配置该能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是，对于一些发布敏感性业务，是可能需要 A/B Test 等这类特殊的发布形式：即在发布时，需先将特定的一批带有标记的流量，定向导入新版本 Pod，将新旧版本的流量进行隔离，比如如下场景：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务新特性只对白名单用户开放，可以很大程度减少业务新特性的不确定性带来的风险；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将新旧两个版本进行流量隔离，方便进行对照实验，更好地观察新版本特性的有效性；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;对于 Kruise-Rollout 的用户来说，可以通过以下配置来开启该能力：&lt;/span&gt;&lt;/p&gt;&lt;pre data-language=&quot;yaml&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;apiVersion&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;rollouts.kruise.io/v1alpha1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;kind&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Rollout&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;metadata&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;rollouts-demo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;namespace&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;default&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;annotations&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;rollouts.kruise.io/rolling-style&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;partition&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;spec&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;objectRef&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;workloadRef&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;apiVersion&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;apps/v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;kind&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;echoserver&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;strategy&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;canary&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;steps&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;matches:   #设置 header&amp;amp;cookie 匹配规则&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;headers:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;name: UserAgent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;Exact&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;iOS&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;pause&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;replicas&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;replicas: 50%&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;replicas: 100%&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;trafficRoutings&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;ingress:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;classType&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;nginx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;echoserver&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;service&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;echoserver&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上述相较于单纯的分批发布配置，多了 Header &amp;amp; Cookie 匹配规则的描述，以及 TrafficRouting 的引用，这里是以 Ingress-Nginx 为例进行的配置，也就是说，想要使用该能力，相应的 Ingress 控制器必须要具备该基础能力（可以理解为 Nginx 提供数据面的能力，Kruise-Rollout 提供管控面的能力）。&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;在该配置下，假设有副本数量为 10 的 Deployment，则其将被划分为三批进行发布，具体行为如下：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一批共计有 1 个新版本 Pod，9 个旧版本Pod， 并且指定满足 UserAgent=iOS 这一匹配规则的用户流量才会打入新版本 Pod，其余流量会均匀打入剩余 9 个旧版本 Pod；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二批共计有 5 个新版本 Pod，5 个旧版本Pod，并且取消流量匹配规则，流量直接全部走负载均衡策略；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第三批共计有 10个新版本 Pod，0 个旧版本Pod，并且取消流量匹配规则，流量直接全部走负载均衡策略；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;新特性三：&lt;/span&gt;&lt;span&gt;基于Lua脚本的Ingress流量扩展方案&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;云原生技术发展到今天，云原生网关也呈现出百花齐放的状态，除了 Kubernetes 原生提供的 Nginx Ingress 以及 Gateway API之外，也存在着非常多的 Network Provider 方案，比如阿里云 ALB、MSE、ASM；社区的 Istio、Kong、Apisix ，甚至是许多公司是自研网关方案和协议等等。Kruise Rollout 设计之初就考虑过百花齐放的云原生网关应该如何支持，常规的硬编码的方式既费时费力，也不方便不同公司的同学对接使用和维护。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最终，Kruise Rollout 选择基于Lua脚本的方式，让用户以插件化的形式支持更多类型的网关协议（此版本只支持基于 Ingress 的扩展协议，其它自定义资源协议将在下个版本支持），Kruise Rollout 完成一些通用部分的能力，而不同 NetWork Provider 的具体实现则由 Lua 脚本来解决，这样针对不同的实现，只需要编写对应的 Lua 脚本即可，可参考：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Nginx与Alb Lua脚本示例&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;3]&lt;/strong&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30185185185185187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvmpsw2JtNJrFc4ZulFDoORja47bibsbk5QXl3ztGek2OxgWAibueRePh47doIz2KZFfkpASHvStbryA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了方便大家根据自己的需求编写自己的Lua脚本，下面针对 Nginx Ingress 解读一下lua脚本（对应的 Rollout 配置可以参考 新特性二），该脚本可以放置于特定目录或特定ConfigMap：&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;lua&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- 因为 Ingress 灰度发布协议都是基于 Annotations 来实现的，所以此脚本的所有操作&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- 都是修改 Annotations 到目标状态，kruise rollout会将此 annotations patch 到&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- ingress canary 资源当中&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;annotations = {}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- obj.annotations 是Ingress.Annotations 此句不需要变化，固定即可&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( obj.annotations )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    annotations = obj.annotations&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- 这是 nginx 灰度发布协议的标准，其它的实现也可以根据自己的实际情况调整&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- nginx 的灰度发布协议变化主要是下面这些变化，为了简化多个批次间来回切换的复杂度，每次&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- 都先将这些 annotations 置空&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-by-cookie&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-by-header&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-by-header-pattern&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-by-header-value&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-weight&quot;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- obj.weight 是 rollout.spec.strategy.canary.steps[x].weight&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- 代表当前批次的灰度百分比，当不设置时为 ‘-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;’(lua脚本不支持&lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;，所以用‘-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;’表示)，&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- 所以如果不是 ‘-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;’，需要将 obj.weight 设置到 annotations 中&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( obj.weight ~= &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;-1&quot;&lt;/span&gt; )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-weight&quot;&lt;/span&gt;] = obj.weight&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- obj.matches 是 rollout.spec.strategy.canary.steps[x].matches（数据结构一样），&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- 当没有设置时表明此step不需要进行 A/B Testing 发布，直接返回即可&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; obj.matches )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; annotations&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- A/B Testing发布，遍历 matches ，将 matches 设置到 annotations 中&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- 注意：nginx 并不支持多个header，所以这里并不需要真正的遍历，默认只取第一个数组&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;,match &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; ipairs(obj.matches) &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -- 注意 lua 脚本当中数组是从下标 ‘&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;’ 开始&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    local header = match.headers[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -- cookie&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( header.name == &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;canary-by-cookie&quot;&lt;/span&gt; )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-by-cookie&quot;&lt;/span&gt;] = header.value&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -- header&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-by-header&quot;&lt;/span&gt;] = header.name&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -- 是否是“正则”&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( header.type == &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;RegularExpression&quot;&lt;/span&gt; )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-by-header-pattern&quot;&lt;/span&gt;] = header.value&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            annotations[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nginx.ingress.kubernetes.io/canary-by-header-value&quot;&lt;/span&gt;] = header.value&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-- must be &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; annotations&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; annotations&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;注&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：此版本只针对 Ingress 资源来实现的，面对 Apisix、Kong 等其它自定义资源（CRD）将在下一个版本支持。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;相关 PR&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;4]&lt;/strong&gt;&lt;/sup&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;已经提交 Github，欢迎大家一起讨论。&lt;/span&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;未来规划&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;更多网关协议支持&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Kruise Rollout 目前是以 Lua 脚本插件化的方式支持多类型的网关协议，我们后续会重点加大这方面的投入，但面对百花齐放的协议类型，单靠社区 Maintainer 的单薄力量还远远不够，希望更多的社区小伙伴加入我们，一起来不断完善这方面的内容。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;更完善的发布体系&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：为支撑包括灰度、告警、可观测、自动回滚、无人值守等在内的较为完整的发布体系，需要继续建设一些发布发布时的 Hook 调用与 Prometheus Metrics Analysis 等相关能力，这块我们目前正在与 KubeVela 社区紧密合作，通过 KubeVela 现有的 Workflow 体系集成来弥补目前这些能力的缺失，至于后续是否需要将这些能力做到 Kruise Rollout 之中，我们也希望聆听更多的社区意见，欢迎大家一块讨论沟通。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;社区参与&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;非常欢迎你通过 Github/Slack/钉钉/微信 等方式加入我们来参与 OpenKruise 开源社区。&lt;br/&gt;你是否已经有一些希望与我们社区交流的内容呢？&lt;br/&gt;可以在我们的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;社区双周会&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;5]&lt;/strong&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;上分享你的声音，或通过以下渠道参与讨论：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加入社区 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;Slack channel&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;6]&lt;/strong&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;(English)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加入社区钉钉群：搜索群号 23330762 (Chinese)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加入社区微信群（新）：添加用户 openkruise 并让机器人拉你入群 (Chinese)&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;span&gt;flagger&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/fluxcd/flagger&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;span&gt;Argo-Rollout&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/argoproj/argo-rollouts&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;[3] &lt;span&gt;&lt;span&gt;Nginx与Alb Lua脚本示例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;em&gt;&lt;span&gt;https://github.com/openkruise/rollouts/tree/master/lua_configuration/trafficrouting_ingress&lt;/span&gt;&lt;/em&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[4] 相关 PR&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/openkruise/rollouts/pull/111&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[5] &lt;span&gt;&lt;span&gt;社区双周会&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://shimo.im/docs/gXqmeQOYBehZ4vqo&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[6] &lt;span&gt;&lt;span&gt;Slack channel&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;em&gt;&lt;span&gt;https://kubernetes.slack.com/?redir=%2Farchives%2Fopenkruise&lt;/span&gt;&lt;/em&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;戳原文，查看 OpenKruise 项目官方主页与文档&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>00749ec1185d22ac96eee5be0fb5ff3a</guid>
<title>对谈 | AI 大咖告诉你，有关 ChatGPT 的一切（下篇）</title>
<link>https://toutiao.io/k/v9jzxfs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;👆&lt;/span&gt;&lt;span&gt;点击“&lt;/span&gt;&lt;span&gt;博文视点Broadview&lt;/span&gt;&lt;span&gt;”，获取更多书讯&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05669291338582677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nr1VNxfeqxVOw2nPJHVH4xeZibzPY5F4ibOuOZLMsUMrzIibGB6KMw7EurSKv6DkrtLzuhYdBa30A9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.10027855153203342&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PW0wIHxgg3npgLu0khEqdibc8UNib9mUOF5Oic7ofxC1krfeqOz5wtoEWMiczOpKGic8QcQLLuSPHicTEZhBqib9LGTeA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1077&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;121695&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_live_iframe&quot; data-pluginname=&quot;videosnap&quot; data-headimgurl=&quot;https://wx.qlogo.cn/finderhead/oLU121BePGlK5gCzY9FXd7w0qDZtIDcFtaSTNicpYrEvHvAA2kfCLKg/0&quot; data-username=&quot;v2_060000231003b20faec8c7e48b1dc6dccd04e436b0771df137f3e0832e32a92192ea2165411c@finder&quot; data-nickname=&quot;博文视点Broadview&quot; data-desc=&quot;将在03月02日 20:00 直播&quot; data-intro=&quot;博文视点每周书摊儿，全场五折，购书1+1&quot; data-noticeid=&quot;finderlivenotice-v2_060000231003b20faec8c7e48b1dc6dccd04e436b0771df137f3e0832e32a92192ea2165411c@finder-1677673152099333-215034036&quot; data-type=&quot;live&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ChatGPT如今已经无人不知无人不晓，相关话题大家也都非常关注。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;无论是它给我们工作生活带来的影响和变革、AI生成式产品未来的发展方向，还是为了应对其带来的挑战，深扒其背后的技术，让自己更有竞争力，都是大家所想要了解和关心的内容~~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对这个话题，博文视点“怎么看”栏目邀请到领域内非常权威的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;王文广老师和鲍捷老师做客直播间，&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;从ChatGPT产品影响、技术使用及投资前景、个人学习路线等多个角度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;为我们带来了精彩解读！&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;7&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p data-autoskip=&quot;1&quot;&gt;&lt;strong&gt;&lt;span&gt;王文广：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;达观数据副总裁，《知识图谱：认知智能理论与实战》作者，“走向未来”公众号主理人。&lt;/span&gt;&lt;/p&gt;&lt;p data-autoskip=&quot;1&quot;&gt;&lt;/p&gt;&lt;p data-autoskip=&quot;1&quot;&gt;&lt;strong&gt;&lt;span&gt;鲍捷：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;文因互联董事长和创始人，爱荷华州立大学（Iowa State University）博士，金融知识图谱工作组主席。&lt;/span&gt;&lt;/p&gt;&lt;p data-autoskip=&quot;1&quot;&gt;&lt;/p&gt;&lt;p data-autoskip=&quot;1&quot;&gt;&lt;span&gt;以下为部分简单整理的访谈文字稿，由于内容过多，分上下两篇发布，已发布上篇&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTk0NjMwOQ==&amp;amp;mid=2651171533&amp;amp;idx=1&amp;amp;sn=49be4b0679c28d3a5146e6441abb2310&amp;amp;chksm=bd01c0e78a7649f1208cc599d05e854d8e098cc467178c099fd4b2739b7aff55e86465c59b01&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;对谈 | AI大咖告诉你，有关ChatGPT的一切（上篇）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;对谈 | AI大咖告诉你，有关ChatGPT的一切（上篇）&lt;/a&gt;，本文为下篇，也欢迎关注“博文视点Broadview”视频号观看完整直播视频！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3346666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lYuBtn8xp0m5YtHeje4pzXukmsAN9iaE0yBP9yr4yvoUNMeDUwPgp5ldJTjfhy3pImcLx0NxosQxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;既然现在全球人民都被ChatGPT的表现惊到，那它现在是不是已经很完美了，有哪些是有待改进的地方？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;王文广：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;其实&lt;/span&gt;&lt;span&gt;ChatGPT远达不到完美&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们现在觉得它很牛，是因为它和我们以前的人工智能相比有一个&lt;/span&gt;&lt;strong/&gt;&lt;span&gt;大的跃进，但不能说它是完美的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;凡是用过ChatGPT的人要么为它所信服，觉得特别牛，要么觉得它是个大忽悠。但没人会认为它是一个人工智障产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们以前有很多叫人工智障的产品。相信大家用各种智能助手的时候，都会发现这么一个问题，比如我家就有那种智能音箱，现在基本上只干一件事情——放音乐，好像也没别的用处。当然有时候会开关台灯、窗帘这种。干不了别的事情，因为你一旦给它多说一点，它就根本不管你讲什么了，基本就干不了活，或者干的和预期的完全不一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但ChatGPT其实不会，你给它一个输入，它总能给你一个看起来合理的回答。&lt;span&gt;至于看起来是不是真的合理，要基于两点来讨论：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section&gt;&lt;span&gt;你可以把它当作领域内非常好用的效率工具，但不能把它当作完全不懂的领域的知识来源。&lt;/span&gt;&lt;span&gt;因为一旦它给你一个看起来正确但实际上错误的回答时，你根本分辨不出。&lt;/span&gt;&lt;span&gt;你认为它的回答就是正确的，然后被它带到沟里去。&lt;/span&gt;&lt;span&gt;这沟有可能是深渊。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这个问题是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;基于大模型本身所固有的缺陷&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要解决这个问题可能还是回归到符号主义。你可能需要使用知识图谱，或者&lt;span&gt;注入&lt;/span&gt;知识计算引擎，并且让它在回复事实的时候给你基于这个知识图谱里可信的知识，把它的可信的知识来源也给到你。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;谷歌在这方面做得其实比较多。谷歌&lt;span&gt;内部一直有&lt;/span&gt;类似于ChatGPT的产品，也在发相关论文。其中有非常完整的论文描述了如何引入知识图谱或外部知识语言。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事实上，虽然大家对ChatGPT了解很多，但是我觉得谷歌的技术还是优于ChatGPT，而且他可以给出一个比ChatGPT更好的聊天机器人。但是他&lt;span&gt;怕&lt;/span&gt;一给会出错，造成的负面舆论对公司影响太大。然而ChatGPT无所谓，他相对是一个小公司，一般人对小公司都比较宽容，对大公司比较苛刻。&lt;span&gt;发生&lt;/span&gt;同样的问题，小公司就无所谓，但大公司会被骂得很惨，包括微软。微软使用了ChatGPT，其实实现的能力比ChatGPT要强，但最近被骂得可多了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;OpenAI就像一个小孩子，他有一点优点就值得赞扬，现在他有这么大的一个优点，那肯定可以把它吹上天。如果一个小学三年级的学生能够解微积分，那他肯定非常牛，是个天才。但如果是一个数学专业的大学生，还做不出微积分，那就不是一个天才了。这就是本质的区别。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;谷歌的思路一直是，要用知识图谱把外部可信的知识源引入模型里，让它给出来的东西尽可能是可信的。而且谷歌的论文里一直在强调可信这个东西。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;鲍捷：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;我刚又去调戏了一下ChatGPT，想验证一下我的一些观点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我问了他一些数学问题，包括微积分、不等式解方程、质数分解，这一系列的问题它都能做出来。我不相信这些东西是语言模型带给他的。这些能力应该不只是语言模型本身的能力，背后肯定找到了一系列的方法，把这种计算模型隐藏在后面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;谷歌每出来一套新的这种机器翻译系统，我们都要去调戏调戏，然后我总会发现它对一类非常简单的问题搞不定。什么问题呢？抽象来讲就叫递归文法。用大白话来说的话，就是能不能做算数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是算数是一种最基础的递归文法。我们需要用有限的词汇和有限的规则去表达无限的知识。这是之前基于统计的方法，包括基于神经网络的方法，一直没有解决的问题。这也是之前为什么人工智能各个不同的学派相爱相杀这么多年，但谁也没有办法把对方杀死。乔姆斯基的整套文法理论到最上面的图灵机，都有一系列的表达式，再往下就有完全没有文法的东西——你可以理解为一种语言只有名词没有动词。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我在10多年前的时候研究了一个方向，叫语义信息论，试图想去建模一个问题，就是大规模的语言模型。之前其实是一系列基于概率的方法，包括早年的贝尔斯网络，后来的MDP。这个东西对应到我们的语言里可以大致理解为一种只有名词而没有动词的语言。那怎样把动词给加进来呢？动词在文法理论里面叫谓词。然后我们发现，一旦把谓词加到语言里，这个东西的概率化就变得几乎不可能。如果你想去建模语言本身的这种复杂结构，传统的理论认为，如果你仅仅只是通过联合概率或者条件概率几乎没有办法做到，所以这也是为什么之前相当多的各种嵌入方法在比较复杂的需要动词的上下文中做得都不是特别好。它更多的时候是一种鹦鹉学舌。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ChatGPT带给我最大的一个震惊就在于，它居然可以很好地处理动词问题。在目前这个版本里，他把知识建模做得相当不错，包括各种算数问题、微积分问题。所以我们之前拿它做了一系列正则表达式的测试，它对正则语言掌握得非常好。这是很了不起的！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;我想&lt;/span&gt;这一部分可能更多来自于Codex训练。这是它的一个核心突破。还是如我刚才所说，我依然不相信这仅仅是通过所谓的参数数量本身带来的，一定是里面有精细化的模型结构。它一定有大量的子模块，融合了各种不同的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;王文广：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;这点我可以纠正一下，他的数学能力、逻辑能力、代码能力、正则表达式能力都是通过语言模型展现出来的。这个有很多研究，比如T5模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;早期的时候，你给它算&lt;span&gt;几万亿或者几万万亿以下的&lt;/span&gt;加法，它都能算对，但再大时也会算错，还有乘法或者很多算数也会算错。但现在升级了，基本上是靠语言模型所展现出来的，所以才会让整个业界震惊，就是因为它的能力就是语言模型所表现出来的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然这个语言模型表现出来的前提是这个大模型喂进去了足够多的语料，不管是它记住了也好还是真的像人一样有这种数学思维能力也好，但它确实是通过足够多的语料，加上足够大的模型所展现出来的能力。在小模型里面它表现很差。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在很多数学的评估，包括SAT还有GSK，美国各种英文的入学考试，全部成为评估材料了。而且不仅在ChatGPT上做，OpenAI有很多历史遗留的不同版本的开放API可以去测。其他家也开源过很多这种语料，包括谷歌内部也有好多模型，他们还有一些像斯坦福和MIT的老师在谷歌内部做过一些实验，都表明了足够大的模型加上足够多的语料，就能够展现出非常强大的逻辑能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;鲍捷：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;这一点是让我非常吃惊的，打破了我对这件事的认知。我的认知本身就需要被突破，但是对这种完全基于概率模型的、底层的知识表现结构能够实现这种递归式知识表现，感到非常不可思议。如果这是一个非凡的成绩，那需要非凡的证据，我还不确定是不是已经有了，至少他做算数经常出错&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以从它的缺陷的角度来讲，怎么能够让它不一本正经地胡说八道呢？还是需要知识的validator。如果真的被用到能挣钱的领域，就像我们在做的金融领域，那是绝对不允许一本正经胡说八道的，你必须每句话都是真的，你生成的一张财务报表里面所有的数据必须经得起考验。如果我们在垂直领域里面应用它的话，那我们会更强调接口，从而使得它的结果本身能够更好地有安全保证。这也是刚刚文广说的，如果仅仅只保留这种不可约的纯概率的方式的话，那么在这些需要强安全性的应用领域里是很难落地的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我最关注的就是这种领域，有明确的数据边界，有明确的任务边界，以及必须要避免不可逆的严重后果，满足这三个条件后，我相信ChatGPT的路线会非常好，但要真正落地的话，不一定用和它同样的架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;王文广：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;我同意！我看评论里面有讲，很多数学算法不是语言模型所解决的，ChatGPT后来升级过一次，没有公开是不是调用第三方的模块。但是我刚才说的是当语言模型足够时，能够解决很多数学问题，当然也不能解决所有的数学问题。&lt;span&gt;ChatGPT现在是表现得很强，每个领域都能解决很多问题，但不能解决每个领域的所有问题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;如今，各大公司也都开始聚焦研发自己的ChatGPT产品，可能也有很多人开始想要把它作为创业方向，两位老师觉得这件事的实际意义是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;王文广：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;如果你想做一个比较通用的ChatGPT的话，那除非自带5,000万美元进来，否则我是不太建议进入这个赛道的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的公众号“走向未来”里把OpenAI称作屠龙刀，把谷歌称作倚天剑，都是神兵利器，不是普通刀刃。别的兵器跟它相撞肯定没戏，因为它们是那种特殊的材质锻造出来的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，没戏的时候就&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不要跟他正面PK，可以找一个自己的领域。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;比如我们会深耕制造业和金融领域去做一些事情，然后在这个领域里可能还会再找细分领域去做一些事情。&lt;/span&gt;&lt;span&gt;可以&lt;/span&gt;&lt;span&gt;在这个领域里面&lt;/span&gt;&lt;span&gt;把护城河给构建起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外还是有很多新的机遇出现！比如，ChatGPT或者国内以后有类似版本的话，你可以用来提升自己领域的工作效率。做营销的可以拿它来写文章，效率可以翻10倍、100倍；写网文的原来一天只能更1,000字，现在1天可以更10万字；以前不会画画，只会写字，得找人合作，现在可以把这些AI工具组合起来去做一些事情……在它的帮助下可以做很多很多，各种各样的事情都可以做。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个人得想清楚自己占山为王要占哪个山头，在哪个山头里称王。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;机遇非常多，因为它是刚出现的东西，所以谁现在优先想到一个点，这个点是别人没想到的，就有机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;鲍捷：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;如果你是想创业的话，就不要信我说的东西。我认为在目前的这种环境下，不建议年轻人没有准备好就去创业，现在的创业难度比七八年前或者10年前上升了一个数量级不止。其实我最近这几年劝退了无数的朋友，但是最后发现那些就是不听劝的人才是真正的创业者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你真去做的话，我还有另外一个观点，就是这个世界上压根就不应该有人工智能公司。就好像世界上绝大多数的公司都不是操作系统公司，也都不是所谓的浏览器公司，也都不是所谓的编译器公司（有极少数，但绝大多数公司肯定不是&lt;span&gt;）&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，世界上不应该有一个神经网络的公司，不应该有一个强化学习的公司，不应该有一个ChatGPT公司，尤其是在当前的市场环境下，不管&lt;span&gt;人工智能&lt;/span&gt;有多强大，都依然只是那个蛋糕上面的樱桃。那个蛋糕是什么呢？就是业务系统！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你没有基于业务系统去追求一个先进算法，那除非你有50亿美元使劲去烧。即使像OpenAI这样的公司，他们扛了三四年之后也会扛不住，最后还是变成一个商业公司。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以对于是不是用ChatGPT去创业，我的建议是，第一，你既然要开始创业了，就别考虑什么算法，算法不重要，任何一种算法都能用，你首先要做的事情就是找到属于自己山头的那个业务系统。先能够让现金流跑起来，让业务闭环，再一步一步迭代上去，&lt;/span&gt;&lt;span&gt;逐步把&lt;span&gt;强化学习模块、&lt;/span&gt;&lt;span&gt;语言模型模块&lt;/span&gt;加进来，千万不要一开始做一个复杂的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;strong&gt;&lt;span&gt;对于目前这场ChatGPT军备赛，两位老师从技术上和产业应用上有没有一些建议给到想参与这场游戏的公司或创业者？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;鲍捷：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;不要迷信技术！技术不能自己就能够解决领域问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你真的对语言特别感兴趣，你要学的不是人工智能，而应该学操作系统。就像很多运维的知识和Linux这种底层的操作能力，以及大规模内存存储和通信服务的架构能力，会帮助你在落地的过程中真正能够把业务系统跑起来，而不是虚无缥缈地说这东西好好，却跑不起来，要等有多少GPU之后再去跑。有一块GPU就能先跑起来，然后学会迭代！架构系统要占到成功的90%以上，具体算法本身不是那么关键。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;王文广：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;我也一直强调这一点，就是大工程这个概念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AI发展到今天，已经不是一个小模型，或者搞一个算法就能解决的一个问题，而是一个一个大团队综合实力的体现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;没有一个技术是新的，但是把这些东西都组合起来，是一个巨大的工程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在大家可能觉得没钱、没卡做不出来，但当你有1万张卡的时候，能不能跑起来，可能都是一个巨大的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如，业务实现中有很多数据标注工作，你如何去标注这个数据，不是随随便便就能把数据标注好的。就光这件事情本身其实能做的东西太多了，所以这其实是一个大产业链，而不是学算法这么一个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里面每个环节不同的角色、不同的人都能找到机会。有一双慧眼，你才能找到&lt;span&gt;机会&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;最后，老师们留一些寄语给大家吧~~&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;鲍捷：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;不要临渊羡鱼，开始干起来。如果你手上没有足够的资源，就先从一个小模块开始做起来。如果完全没有做过这方面的工作，就先从play它的API开始。如果你有一些基础，可以先从小规模的语言模型开始尝试，迭代起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你还在读书的话，还是建议把人工智能各个不同的古老分支多学一点，没有什么东西是落伍的。因为强化学习我最早学是 1998年，这已经25年过去了，所以没有任何一个东西是新的，你永远不知道什么时候用到哪种算法。如果你袋子里的武器足够多的话，就会发现遇到的这些算法层面上的问题总有一个方法帮你去解决。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你现在是一个工程师的话，无论你要解决哪种问题，首先让自己成为一个非常优秀的程序员，然后才考虑成为一个人工智能的程序员。如果连基本的工程都搞不定的话，想太多也没有用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是业务人员，并不是技术人员，也想去尝试这件事情，那就要么跟人合作，要么完全可以从一些最简单的业务闭环验证开始，当你真正在业务层面上能够验证一个闭环的时候，技术上的加速只是一个技术问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，不管你有什么样的基础，总是可以立即开始，不要等！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;王文广：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;我深有体会，我也是一直在做产业落地，或者说工程实践方面的工作，就是要脚踏实地！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从鲍捷老师的脚踏实地之上，我再补充一点仰望星空的内容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一方面就是数学基础，这点很重要，特别是微积分、线性代数。这东西不新，都已经几百年历史了，大家也都学过。基础打牢之后会对你学人工智能的内容很有帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二就是在打牢基础之后可以展望得远一点。比如，可以了解一下通用人工智能是不是就要来临，有没有更好的方法促使它来临。符号主义、行为主义、连接主义都有几十年的历史了。那未来是否有更好的方法可以做到更好的融合？一旦通用人工智能到来之后，我们不仅仅在AI这个领域，在各行各业都有巨大的机会。因为这是一个巨大的机遇期，是各行各业巨大的机遇期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;ChatGPT相关图书请戳&lt;/strong&gt;&lt;/span&gt;👇&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;119077&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTk0NjMwOQ==&amp;amp;mid=2651170970&amp;amp;idx=1&amp;amp;sn=cbc1b003e19cd0295c8a5610e73d1c5b&amp;amp;chksm=bd01c2b08a764ba6a3ec3db91e81681ed23f9b914c697b0383a93799c6f0369367f35ee6db66&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3kMbkibZkKBXgOJtTn7YFj45HE47Y9icsNRUuRxeVuLHM9Bl6Y8YmAlkvrWDsCY2Fto1xCdIhvicBbow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-width=&quot;100%&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTk0NjMwOQ==&amp;amp;mid=2651170970&amp;amp;idx=1&amp;amp;sn=cbc1b003e19cd0295c8a5610e73d1c5b&amp;amp;chksm=bd01c2b08a764ba6a3ec3db91e81681ed23f9b914c697b0383a93799c6f0369367f35ee6db66&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;书单 | 深扒ChatGPT核心技术，在AI浪潮中狂飙！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;书单 | 深扒ChatGPT核心技术，在AI浪潮中狂飙！&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每日抽奖&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3l9YFquHzI8guqcZBF3KibvG5Ne7kcR7BpIwGNc3DLDpAJw68bHRB8mrPu4iaBpuXHYsFPwIx87soWw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;450&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;发布：刘恩惠&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;审核：陈歆懿&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;section data-role=&quot;splitline&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;16401&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果喜欢本文&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;欢迎&lt;/span&gt; &lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;留言&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;分享至朋友圈&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 三连&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;574&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;244&quot; data-ratio=&quot;0.4777777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3npgLu0khEqdibc8UNib9mUOFWz3Av7aEWkgib7uEOIIVCVonIgnJrUgibElFcvUXFAIMOvoxHX3gqU5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;900-400_画板 1-1.png&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0efc1277856601b857d1ce81f8343a96</guid>
<title>职场新人 - 如何快速变得专业（下）？</title>
<link>https://toutiao.io/k/rhrf4tw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             defaultNoSetting&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.8333333333333334&quot; data-type=&quot;png&quot; data-w=&quot;12&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/U1t4cV273bFcfDLY5ErqtmibjRlr3uibJ7b8GGxN1uwLhOGW53rAbzhPicNBohQhdhtv0GK0PLU0jsia22x8pTsqEA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.8333333333333334&quot; data-type=&quot;png&quot; data-w=&quot;12&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zz0je9TdHtTwVDKX4DCUniacOWlIQ1DkQwtae0vicgoqIerUdB5ib3iayg8Tj0qN00mk1aVaZhquadAR1lWpEdW5vg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;每一个你都可以成为架构师&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.8333333333333334&quot; data-type=&quot;png&quot; data-w=&quot;12&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fy5l9ibUUElo1VrmNNvbIPd72k158cia9SaWcp7O0ntH5pGSJ1N0In4agRUpUpHXUW8J1XvqykdIBRVSuiasmcEKQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.8333333333333334&quot; data-type=&quot;png&quot; data-w=&quot;12&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZcWNHRSIjJGs9bvuzwV9GxaCvA4ic5qN3mWFg24MxBaxufb0SNIB7ibCiatwxeU5UJPQsk45phWM1ZeNhj6XILkEg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.8&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FlVldQMtUg1yYoic9jIrbicqTk7cqGBKzAXfMiahvPwO9njbqI7W11RMFCU0YED3ibSUBRiahp2BHbMrl2Mf5XATypw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;前言&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4tFX0yPcrrjicx2V9rWgT008ubiaJJG1bNibQZKe6zribxia56R9jBsYX45SpZvTdhwE3phw4zyLyD46JJzaLic3c9dw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tYCsq548t3ic3XajhCuu3HEnT5ptCn2rxSawia4LLyVb2M4AdbibuNKCnuBGicJicGMxibMhsXOvvAXH9shpabicQGUVw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6785714285714286&quot; data-type=&quot;png&quot; data-w=&quot;56&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KCA6lb3uZgZSrchcNOUK1gYjovEibfAp3WNHIFYQtX6nFTd1dR8tqPaDOgXZiadQFL5jFxNJWaflEQDTicl48XSdg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上一篇文章我们讲了，作为新人最重要的事情就是“&lt;strong&gt;快速变得专业”&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们先自问自答了一个问题：“新人为何要快速变得专业？新人难道不能就循序渐进的往前走吗？”&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我的回答是“可以”。但我相信你期待的肯定不是仅仅跟上正常的发展节奏。再来，&lt;strong&gt;一些公司尤其是大厂非常注重对新人的潜力观察&lt;/strong&gt;，并愿意为这些人提供一定程度的资源倾斜，你想不想获得呢？&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.8&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FlVldQMtUg1yYoic9jIrbicqTk7cqGBKzAXfMiahvPwO9njbqI7W11RMFCU0YED3ibSUBRiahp2BHbMrl2Mf5XATypw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;今日内容&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4tFX0yPcrrjicx2V9rWgT008ubiaJJG1bNibQZKe6zribxia56R9jBsYX45SpZvTdhwE3phw4zyLyD46JJzaLic3c9dw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tYCsq548t3ic3XajhCuu3HEnT5ptCn2rxSawia4LLyVb2M4AdbibuNKCnuBGicJicGMxibMhsXOvvAXH9shpabicQGUVw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6785714285714286&quot; data-type=&quot;png&quot; data-w=&quot;56&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KCA6lb3uZgZSrchcNOUK1gYjovEibfAp3WNHIFYQtX6nFTd1dR8tqPaDOgXZiadQFL5jFxNJWaflEQDTicl48XSdg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上一讲我们对“如何快速变得专业”做了总结性的概述，也就是：&lt;/span&gt;&lt;strong&gt;快速变得熟练、能够系统化思考、以严谨的态度和开放的心态去展开工作&lt;/strong&gt;&lt;span&gt;。我们已经讲了前面两点，今天我们就后面两点做一些展开。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;凡事不苟且&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;先来解释下什么叫做不严谨。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不严谨指的是在做技术方案的时候较为随意，得过且过。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;现在有一个需求，需要在返回的接口里新增加一个信息。比如新增加一个用户类型（是普通用户还是vip用户）的返回，或者新增加一个业务需要的业务字段（比如订单备注）。那这个信息你是“新增一个强字段返回”还是“直接放在返回模型已有的扩展字段里”？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你是不是想起了曾经的某个需求？&lt;/span&gt;&lt;span&gt;我相信只要是做过研发的同学一定碰到过类似的问题。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个问题要解决其实很容易，采用扩展字段的方案最简单。调用方甚至不需要升级jar包就可以获取到新字段。但这真的是好的解决方案吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当你看到过为了方便而把一大串信息json序列化后放到扩展字段中，你就应该好好的想一下，&lt;strong&gt;这是合理，还是偷懒？&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.271875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KExqX4mSOWibZ9zyxNG9lgRIKJq86pVSQwHxIOMMsRyKbKFicQjicpU8tGR7Mbf7RIwlBS6HzcTeibLkpBabxM7UBA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;当然，这样的设计并非都不合理，针对较为底层的平台类系统，这样的设计相当常见。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是，&lt;strong&gt;在做类似的设计方案时，你必须好好思考是否合理，而不是苟且一下完事儿&lt;/strong&gt;。当你要做出这样方案的时候你要能够给出充分的理由，而不是在别人追问起来的时候来一句“这样实现方便”。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;严谨就是不苟且，&lt;strong&gt;面对任何问题思考解决方案的时候，要立足于“长期正确性”&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;“长期”和“正确”一个不能少。只有面向未来对的方案，才是专业的方案。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9915966386554622&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KExqX4mSOWibj5sUcXD4st0GvpYz7heyrmIB0YAcKM8AseOlbib7ZIYBSSKrpGewNkO63WMxu8vszEXtulWqmBsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;238&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;针对一个方案是否具有“长期正确性”，我给大家一个方法去评估，你可以做一个假设性实验，思考以下几个假设性问题。如果你的答案都是“是”，那这就是一个对的方案：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;【&lt;span&gt;从时间维度假设】&lt;/span&gt;&lt;span&gt;如果你要负责这个系统10年，你愿意这么设计吗？&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;【&lt;span&gt;从频率维度假设】&lt;/span&gt;如果在相同的时间范围内，这类需求的数量变成了10倍，你愿意这么设计吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;【&lt;span&gt;从严重性维度假设】&lt;/span&gt;如果这样的错误出一个就要走人，你愿意这么设计吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;【&lt;span&gt;从影响面纬度假设】&lt;/span&gt;如果这些代码要开源，你愿意这么设计吗？&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KExqX4mSOWibcicP6mZHmn8PKHNm7Gt0yqq2k1ldLHWKQvicPOODIxTLAT37Um2jbJjLkDmYrhSL4qRasdTwLM9LQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以说，对自己狠一点，也许你就不敢苟且了。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;心态要开放&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;心态开放是一个比较鸡汤的词汇。今天我就尝试给一个勺子，告诉你往哪些方向去开放。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;用于承担各种事&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，多承担一些工作，主动揽一些活儿来做。这背后的逻辑并不是要显得吃苦耐劳，而是&lt;strong&gt;实践出真知&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在蚂蚁的时候，我见过身边一位应届生，毕业入职后主动或被动地承担了非常多不同业务或不同系统的研发工作。然后厚积薄发，在两年不到的时间成为了一个相当资深的同学。&lt;/span&gt;&lt;span&gt;在和专家们讨论较高层面的架构问题时都能有清晰的观点和逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于一直奋战在最一线，他对很多细节是最了解的，这使得他提出的质疑和观点都非常有说服力。这位同学的成长让所有的同学都感到惊喜。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KExqX4mSOWibj5sUcXD4st0GvpYz7heyr8j2kz4BOBQVtIv5rWLXezpR5g7JWTKdicBoIWBOkXlteY8FkGXGTEnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;234&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;揽活儿辛不辛苦？辛苦，但是有意义。不过揽活儿也是技术活儿。那就是：&lt;strong&gt;不要揽重复的活儿，就揽你不懂的活儿，这是成长的捷径&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;另外，除了研发工作外，还有一类事情多去承担也可以帮助快速地成长和专业，那就是值班类工作。&lt;/span&gt;&lt;span&gt;无论是业务类值班（指用户询问的一些产品使用方面的问题）还是系统类值班（指针对一些系统报警），都起码有下面这些作用：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;1. 让你熟练使用一些重要的工具，尤其是线上问题排查类工具。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;2. 让你对系统的稳定性有更深刻的理解。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;3. 让你了解各种产品和业务逻辑。你会发现很多看似成熟的系统和业务中都多少存在一些问题，你可以将这些问题反馈给相关的负责人。你的心理感受会从被动的跟学者变成发现问题的推动者。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;4. 让你感受到做产品要时刻保持对细节的关注，有些设计用户真实苦不堪言。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;别害怕犯错&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;很多新人，尤其是应届生（也包括当年刚毕业时候的我），基本上都会有“害怕犯错，不敢表达”的情况。与其说是新人容易出现这样的问题，不如说其实这是每个人都有的“害怕被指责”的一种防御。所以这很正常，但是谁能勇敢地面对它，谁就有机会成长地更快。&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KExqX4mSOWibj5sUcXD4st0GvpYz7heyr9onrvO5mGc1aADsRV2Nwhz04LXZdtlOS10K6yjfVv3tJZFf0u6PVaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;238&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;其实我们一直都在说“要快速摆脱新人标签”，但是新人标签也有好处，那就是不怕错。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;当和别人沟通的时候，尤其是涉及专业的时候，其实你才是强势方&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你想，对方因为专业，所以如果犯错会显得尴尬，但是你却可以勇敢地提出各种看法和质疑。你要是在一个公开场合“战胜”了老司机，大家都会对你“刮目相看”，你自己也会变得更有信心。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/KExqX4mSOWibj5sUcXD4st0GvpYz7heyr6QQjdNXynNQvPz0ibFg13vNEzPmJJfEz1QJicn28vyE0FTibCUNTvbQPg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;270&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好吧，说正经的。勇于表达其实是为了有思维的碰撞。&lt;strong&gt;有些东西你不表达出&lt;/strong&gt;&lt;strong&gt;来去碰撞，你根本意识不到他们是不对的&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;就比如还是上面那个扩展字段的例子。你如果只是被动接受了强字段的方案。你是不知道为什么不能用“看似简单”的扩展字段方案的。如果你后面独立承担一个改造，这个坑可能你就掉下去了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;拿出来碰撞你才会知道，为什么某些场景下要这么设计，你的设计存在怎样的缺陷和风险&lt;/strong&gt;。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这其实是一种快速的“试错”。就像我们要更多地在高考前碰到那些不会做的题目，通过做错来弥补自己知识的盲区，修正知识的错误。这其实是相同的道理。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.8&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FlVldQMtUg1yYoic9jIrbicqTk7cqGBKzAXfMiahvPwO9njbqI7W11RMFCU0YED3ibSUBRiahp2BHbMrl2Mf5XATypw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;今日总结&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4tFX0yPcrrjicx2V9rWgT008ubiaJJG1bNibQZKe6zribxia56R9jBsYX45SpZvTdhwE3phw4zyLyD46JJzaLic3c9dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;30&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tYCsq548t3ic3XajhCuu3HEnT5ptCn2rxSawia4LLyVb2M4AdbibuNKCnuBGicJicGMxibMhsXOvvAXH9shpabicQGUVw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6785714285714286&quot; data-type=&quot;png&quot; data-w=&quot;56&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KCA6lb3uZgZSrchcNOUK1gYjovEibfAp3WNHIFYQtX6nFTd1dR8tqPaDOgXZiadQFL5jFxNJWaflEQDTicl48XSdg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;今天我们讲了“如何变得专业”的另外两个方面，也就是&lt;strong&gt;“凡事不苟且”&lt;/strong&gt;以及&lt;strong&gt;“心态要开放”&lt;/strong&gt;。&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;凡事不苟且&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：指我们做任何结论，都要以“长期正确性”作为判断标准。我提供了一个假设性思考来帮助大家判断你的方案是否具备“长期正确性”。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心态要开放&lt;/strong&gt;：开放体现在两个点。其一，要勇于去承担更多的事情，让足够的问题和困难去驱动你成长。其二，不要害怕犯错，快速低成本试错是非常划算的事情。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于新人“如何快速变得专业”我们通过两篇文章已经把内容都说清了，也就是：&lt;strong&gt;快速变得熟练、能够系统化思考、以严谨的态度和开放的心态去展开工作&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下一篇文章我们来讲一个新人不太容易注意到，但是越早注意到就对整个职业生涯越好的技巧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加油吧，未来的架构师们！&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;原创不易，未经允许不可转载，违者必究&lt;/span&gt;。喜欢的欢迎&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;点赞、在看、分享&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于整个架构师系列文章的大纲，你可以在关注我后，回复“成为架构师”这几个关键字，就可以获得完整的52篇文章大纲&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;如果你或者你身边的同事，同学有志于成为架构师，欢迎你分享并邀请他们一起加入，你一定不负此行。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weuitheme=&quot;light&quot; data-id=&quot;MzkzMDI0ODg4NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/KExqX4mSOW8Ctf2NY2wvIyfNY3XeSMO0b7HoSRLpt6OowFdnXhQl7EicqrVXia0yAKnvUXIhvBaTaNq2qN0zKrMg/0?wx_fmt=png&quot; data-nickname=&quot;CodingBetterLife&quot; data-alias=&quot;LoveCodeLoveLife&quot; data-signature=&quot;做个温暖有趣的技术人。有技术也有生活，懂科技也懂人情。&quot; data-from=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;10000&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>