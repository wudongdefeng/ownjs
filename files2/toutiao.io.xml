<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>33ff5db8d5154704f8385d944885eb2c</guid>
<title>MySQL 索引 15 连问，抗住！</title>
<link>https://toutiao.io/k/kvj44bf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;金三银四很快就要来啦，准备了索引的15连问，相信大家看完肯定会有帮助的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4842689697717458&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicdgXSeo8CAyiblD0tznKPPIZDJpGNwVS59hXjiacQhGoKALSS4VIZ23icuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1621&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 索引是什么？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34979973297730305&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicd4oCJXicPAIOPT3giaGN9gmT7xB2ObdSfoh6ic0Fzn1RNLEebbDUcoqz2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;749&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;索引是一种能提高数据库查询效率的数据结构。它可以比作一本字典的目录，可以帮你快速找到对应的记录。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;索引一般存储在磁盘的文件中，它是占用物理空间的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;正所谓水能载舟，也能覆舟。适当的索引能提高查询效率，过多的索引会影响数据库表的插入和更新功能。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. MySQL索引有哪些类型&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9365671641791045&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicd0aEqEPUqzNtdpS0Shy5BPORuiaCtox9F0wh7tex6X0WnLKJR0gbvKbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数据结构维度&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;B+树索引：所有数据存储在叶子节点，复杂度为&lt;code&gt;O(logn)&lt;/code&gt;，适合范围查询。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;哈希索引:  适合等值查询，检索效率高，一次到位。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;全文索引：&lt;code&gt;MyISAM&lt;/code&gt;和&lt;code&gt;InnoDB&lt;/code&gt;中都支持使用全文索引，一般在文本类型&lt;code&gt;char,text,varchar&lt;/code&gt;类型上创建。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;R-Tree&lt;/code&gt;索引: 用来对&lt;code&gt;GIS&lt;/code&gt;数据类型创建&lt;code&gt;SPATIAL&lt;/code&gt;索引&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;物理存储维度&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;聚集索引：聚集索引就是以主键创建的索引，在叶子节点存储的是表中的数据。（&lt;code&gt;Innodb&lt;/code&gt;存储引擎）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;非聚集索引：非聚集索引就是以非主键创建的索引，在叶子节点存储的是主键和索引列。（&lt;code&gt;Innodb&lt;/code&gt;存储引擎）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;逻辑维度&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;主键索引：一种特殊的唯一索引，不允许有空值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;普通索引：&lt;code&gt;MySQL中&lt;/code&gt;基本索引类型，允许空值和重复值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;联合索引：多个字段创建的索引，使用时遵循最左前缀原则。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;唯一索引：索引列中的值必须是唯一的，但是允许为空值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;空间索引：&lt;code&gt;MySQL5.7&lt;/code&gt;之后支持空间索引，在空间索引这方面遵循&lt;code&gt;OpenGIS&lt;/code&gt;几何数据模型规则。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 索引什么时候会失效？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;查询条件包含&lt;code&gt;or&lt;/code&gt;，可能导致索引失效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果字段类型是字符串，&lt;code&gt;where&lt;/code&gt;时一定用引号括起来，否则索引失效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;like&lt;/code&gt;通配符可能导致索引失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在索引列上使用 mysql 的内置函数，索引失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对索引列运算（如，&lt;code&gt;+、-、*、/&lt;/code&gt;），索引失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;索引字段上使用&lt;code&gt;（！= 或者 &amp;lt; &amp;gt;，not in）&lt;/code&gt;时，可能会导致索引失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;索引字段上使用&lt;code&gt;is null， is not null&lt;/code&gt;，可能导致索引失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;左连接查询或者右连接查询查询关联的字段编码格式不一样，可能导致索引失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;mysql 估计使用全表扫描要比使用索引快,则不使用索引。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 哪些场景不适合建立索引？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据量少的表，不适合加索引&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;更新比较频繁的也不适合加索引&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;区分度低的字段不适合加索引（如性别）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;where、group by、order by&lt;/code&gt;等后面没有使用到的字段，不需要建立索引&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;已经有冗余的索引的情况（比如已经有&lt;code&gt;a,b&lt;/code&gt;的联合索引，不需要再单独建立&lt;code&gt;a&lt;/code&gt;索引）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 为什么要用 B+树，为什么不用二叉树？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;可以从几个维度去看这个问题，查询是否够快，效率是否稳定，存储数据多少，
以及查找磁盘次数，为什么不是二叉树，为什么不是平衡二叉树，为什么不是
B 树，而偏偏是 B+树呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;为什么不是一般二叉树？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果二叉树特殊化为一个链表，相当于全表扫描。平衡二叉树相比于二叉查找 树来说，查找效率更稳定，总体的查找速度也更快。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;为什么不是平衡二叉树呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，在内存比在磁盘的数据，查询效率快得多。如果树这种数据结构作
为索引，那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说
的一个磁盘块，但是平衡二叉树可是每个节点只存储一个键值和数据的，如果
是 B 树，可以存储更多的节点数据，树的高度也会降低，因此读取磁盘的次数
就降下来啦，查询效率就快啦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那为什么不是 B 树而是 B+树呢？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;B+树非叶子节点上是不存储数据的，仅存储键值，而 B 树节点中不仅存储
键值，也会存储数据。innodb 中页的默认大小是 16KB，如果不存储数据，那 么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就 会更矮更胖，如此一来我们查找数据进行磁盘的 IO 次数有会再次减少，数据查
询的效率也会更快。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的，链
表连着的。那么 B+树使得范围查找，排序查找，分组查找以及去重查找变得 异常简单。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. 一次B+树索引树查找过程&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;假设有以下表结构，并且初始化了这几条数据&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CREATE TABLE `employee` (&lt;br/&gt;  `id` int(11) NOT NULL,&lt;br/&gt;  `name` varchar(255) DEFAULT NULL,&lt;br/&gt;  `age` int(11) DEFAULT NULL,&lt;br/&gt;  `date` datetime DEFAULT NULL,&lt;br/&gt;  `sex` int(1) DEFAULT NULL,&lt;br/&gt;  PRIMARY KEY (`id`),&lt;br/&gt;  KEY `idx_age` (`age`) USING BTREE&lt;br/&gt;) ENGINE=InnoDB DEFAULT CHARSET=utf8;&lt;br/&gt;&lt;br/&gt;insert into employee values(100,&lt;span&gt;&#x27;小伦&#x27;&lt;/span&gt;,43,&lt;span&gt;&#x27;2021-01-20&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;0&#x27;&lt;/span&gt;);&lt;br/&gt;insert into employee values(200,&lt;span&gt;&#x27;俊杰&#x27;&lt;/span&gt;,48,&lt;span&gt;&#x27;2021-01-21&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;0&#x27;&lt;/span&gt;);&lt;br/&gt;insert into employee values(300,&lt;span&gt;&#x27;紫琪&#x27;&lt;/span&gt;,36,&lt;span&gt;&#x27;2020-01-21&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;1&#x27;&lt;/span&gt;);&lt;br/&gt;insert into employee values(400,&lt;span&gt;&#x27;立红&#x27;&lt;/span&gt;,32,&lt;span&gt;&#x27;2020-01-21&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;0&#x27;&lt;/span&gt;);&lt;br/&gt;insert into employee values(500,&lt;span&gt;&#x27;易迅&#x27;&lt;/span&gt;,37,&lt;span&gt;&#x27;2020-01-21&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;1&#x27;&lt;/span&gt;);&lt;br/&gt;insert into employee values(600,&lt;span&gt;&#x27;小军&#x27;&lt;/span&gt;,49,&lt;span&gt;&#x27;2021-01-21&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;0&#x27;&lt;/span&gt;);&lt;br/&gt;insert into employee values(700,&lt;span&gt;&#x27;小燕&#x27;&lt;/span&gt;,28,&lt;span&gt;&#x27;2021-01-21&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;1&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行这条查询SQL，需要执行几次的树搜索操作？可以画下对应的索引树结构图~&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;select * from Temployee &lt;span&gt;where&lt;/span&gt; age=32;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这个，这个大家可以先画出&lt;code&gt;idx_age&lt;/code&gt;普通索引的索引结构图，大概如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5664621676891616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicdFCyRyicMuBJlvs9XJroboq8yWLl2zfP0mBJibnVHBofttuvoDOh3WY4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;978&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再画出&lt;code&gt;id&lt;/code&gt;主键索引，我们先画出聚族索引结构图，如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4027237354085603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicd4fpq0FIAHLIP9G6rD6SIvT53OYdm0ic0NYOe7MjqLmSHxag6WRmSJMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这条 SQL 查询语句执行大概流程是这样的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;搜索&lt;code&gt;idx_age&lt;/code&gt; 索引树，将&lt;code&gt;磁盘块1&lt;/code&gt;加载到内存，由于&lt;code&gt;32&amp;lt;43&lt;/code&gt;,搜索左路分支，到磁盘寻址&lt;code&gt;磁盘块2&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将&lt;code&gt;磁盘块2&lt;/code&gt;加载到内存中，由于&lt;code&gt;32&amp;lt;36&lt;/code&gt;,搜索左路分支，到磁盘寻址&lt;code&gt;磁盘块4&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将&lt;code&gt;磁盘块4&lt;/code&gt;加载到内存中，在内存继续遍历，找到&lt;code&gt;age=32&lt;/code&gt;的记录，取得&lt;code&gt;id = 400&lt;/code&gt;.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拿到&lt;code&gt;id=400&lt;/code&gt;后，回到&lt;code&gt;id主键索引树&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;搜索&lt;code&gt;id主键索引树&lt;/code&gt;，将&lt;code&gt;磁盘块1&lt;/code&gt;加载到内存，因为&lt;code&gt;300&amp;lt;400&amp;lt;500&lt;/code&gt;,所以在选择中间分支，到磁盘寻址&lt;code&gt;磁盘块3&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;虽然在&lt;code&gt;磁盘块3&lt;/code&gt;，找到了id=400，但是它不是叶子节点，所以会继续往下找。到磁盘寻址&lt;code&gt;磁盘块8&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将&lt;code&gt;磁盘块8&lt;/code&gt;加载内存，在内存遍历，找到&lt;code&gt;id=400&lt;/code&gt;的记录，拿到&lt;code&gt;R4&lt;/code&gt;这一行的数据，好的，大功告成。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 什么是回表？如何减少回表？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当查询的数据在索引树中，找不到的时候，需要回到&lt;strong&gt;主键索引树&lt;/strong&gt;中去获取，这个过程叫做&lt;strong&gt;回表&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如在&lt;strong&gt;第6&lt;/strong&gt;小节中，使用的查询SQL&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;select * from Temployee &lt;span&gt;where&lt;/span&gt; age=32;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要查询所有列的数据，&lt;code&gt;idx_age&lt;/code&gt;普通索引不能满足，需要拿到主键id的值后，再回到&lt;code&gt;id&lt;/code&gt;主键索引查找获取，这个过程就是回表。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 什么是覆盖索引？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们查询SQL的&lt;code&gt;select *&lt;/code&gt; 修改为 &lt;code&gt;select id, age&lt;/code&gt;的话，其实是&lt;strong&gt;不需要回表&lt;/strong&gt;的。因为&lt;code&gt;id&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;的值，都在&lt;code&gt;idx_age&lt;/code&gt;索引树的叶子节点上，这就涉及到覆盖索引的知识点了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;覆盖索引是&lt;code&gt;select&lt;/code&gt;的数据列只用从索引中就能够取得，不必回表，换句话说，查询列要被所建的索引覆盖。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9. 聊聊索引的最左前缀原则&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;索引的最左前缀原则，可以是&lt;strong&gt;联合索引的最左N个字段&lt;/strong&gt;。比如你建立一个组合索引&lt;code&gt;（a,b,c）&lt;/code&gt;，其实可以相当于建了&lt;code&gt;（a），（a,b）,(a,b,c)&lt;/code&gt;三个索引，大大提高了索引复用能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，最左前缀也可以是&lt;strong&gt;字符串索引的最左M个字符。&lt;/strong&gt;。比如，你的普通索引树是酱紫：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34629629629629627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicdiaVx3GzpZFCfLUnwLdNiabMC0sL0W6qkTmrCZoiarVic9e7QEgmcmglZxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个SQL:&lt;code&gt; select * from employee where name like &#x27;小%&#x27; order by age desc;&lt;/code&gt; 也是命中索引的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicdN6WvfhxJcaSDw8fULO4JxxqyGaScKiboOm3cZwDDlPV1CyAOLbOhfRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10. 索引下推了解过吗？什么是索引下推&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给你这个SQL：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;select * from employee &lt;span&gt;where&lt;/span&gt; name like &lt;span&gt;&#x27;小%&#x27;&lt;/span&gt; and age=28 and sex=&lt;span&gt;&#x27;0&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;age&lt;/code&gt;为联合索引（&lt;code&gt;idx_name_age&lt;/code&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是&lt;strong&gt;Mysql5.6之前&lt;/strong&gt;，在&lt;code&gt;idx_name_age&lt;/code&gt;索引树，找出所有名字第一个字是&lt;code&gt;“小”&lt;/code&gt;的人，拿到它们的&lt;code&gt;主键id&lt;/code&gt;，然后回表找出数据行，再去对比年龄和性别等其他字段。如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44166666666666665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicdHQ3zkfMOU0bsJ9d1ibOwCwS0289lcU7OcJQMVPnm96CjARgz0UBDdzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些朋友可能觉得奇怪，&lt;code&gt;idx_name_age（name,age)&lt;/code&gt;不是联合索引嘛？为什么选出包含&lt;code&gt;“小”&lt;/code&gt;字后，不再顺便看下年龄&lt;code&gt;age&lt;/code&gt;再回表呢，不是更高效嘛？所以呀，&lt;code&gt;MySQL 5.6&lt;/code&gt;就引入了&lt;strong&gt;索引下推优化&lt;/strong&gt;，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，MySQL5.6版本之后，选出包含&lt;code&gt;“小”&lt;/code&gt;字后，顺表过滤&lt;code&gt;age=28&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4398148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicdZgnTbKsY4lMmLJWmYjUCJspFwl0kDbcicBeNiapYcUhSN7JOnmsIajLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11. 大表如何添加索引&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一张表数据量级是千万级别以上的，那么，如何给这张表添加索引？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要知道一点，&lt;strong&gt;给表添加索引的时候&lt;/strong&gt;，&lt;strong&gt;是会对表加锁的&lt;/strong&gt;。如果不谨慎操作，有可能出现生产事故的。可以参考以下方法：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;先创建一张跟原表&lt;code&gt;A&lt;/code&gt;数据结构相同的新表&lt;code&gt;B&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在新表&lt;code&gt;B&lt;/code&gt;添加需要加上的新索引。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;把原表&lt;code&gt;A&lt;/code&gt;数据导到新表&lt;code&gt;B&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;rename&lt;/code&gt;新表&lt;code&gt;B&lt;/code&gt;为原表的表名&lt;code&gt;A&lt;/code&gt;，原表&lt;code&gt;A&lt;/code&gt;换别的表名；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12. 如何知道语句是否走索引查询？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;explain&lt;/code&gt;查看SQL的执行计划，&lt;strong&gt;这样就知道是否命中索引了&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当&lt;code&gt;explain&lt;/code&gt;与&lt;code&gt;SQL&lt;/code&gt;一起使用时，MySQL将显示来自优化器的有关语句执行计划的信息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15925925925925927&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwSP2IkzhZw4BticmiaDmFnicdKg5D72uRIF2WmSgPsdkInJJWicLTkDgUosicsibz83S1o3Lna17syzapw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说，我们需要重点关注&lt;code&gt;type、rows、filtered、extra、key&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.1 type&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;type表示&lt;strong&gt;连接类型&lt;/strong&gt;，查看索引执行情况的一个重要指标。以下性能从好到坏依次：&lt;code&gt;system  &amp;gt; const &amp;gt; eq_ref &amp;gt; ref  &amp;gt; ref_or_null &amp;gt; index_merge &amp;gt; unique_subquery &amp;gt; index_subquery &amp;gt; range &amp;gt; index &amp;gt; ALL&lt;/code&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;system：这种类型要求数据库表中只有一条数据，是&lt;code&gt;const&lt;/code&gt;类型的一个特例，一般情况下是不会出现的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;const：通过一次索引就能找到数据，一般用于主键或唯一索引作为条件，这类扫描效率极高，，速度非常快。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;eq_ref：常用于主键或唯一索引扫描，一般指使用主键的关联查询&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ref : 常用于非主键和唯一索引扫描。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ref_or_null：这种连接类型类似于&lt;code&gt;ref&lt;/code&gt;，区别在于&lt;code&gt;MySQL&lt;/code&gt;会额外搜索包含&lt;code&gt;NULL&lt;/code&gt;值的行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;index_merge：使用了索引合并优化方法，查询使用了两个以上的索引。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;unique_subquery：类似于&lt;code&gt;eq_ref&lt;/code&gt;，条件用了&lt;code&gt;in&lt;/code&gt;子查询&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;index_subquery：区别于&lt;code&gt;unique_subquery&lt;/code&gt;，用于非唯一索引，可以返回重复值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;range：常用于范围查询，比如：between ... and 或 In 等操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;index：全索引扫描&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ALL：全表扫描&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.2 rows&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该列表示MySQL估算要找到我们所需的记录，需要读取的行数。对于InnoDB表，此数字是估计值，并非一定是个准确值。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.3 filtered&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该列是一个百分比的值，表里符合条件的记录数的百分比。简单点说，这个字段表示存储引擎返回的数据在经过过滤后，剩下满足条件的记录数量的比例。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.4 extra&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该字段包含有关MySQL如何解析查询的其他信息，它一般会出现这几个值：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Using filesort：表示按文件排序，一般是在指定的排序和索引排序不一致的情况才会出现。一般见于order by语句&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Using index ：表示是否用了覆盖索引。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Using temporary: 表示是否使用了临时表,性能特别差，需要重点优化。一般多见于group by语句，或者union语句。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Using where : 表示使用了where条件过滤.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Using index condition：MySQL5.6之后新增的索引下推。在存储引擎层进行数据过滤，而不是在服务层过滤，利用索引现有的数据减少回表的数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.5 key&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该列表示&lt;strong&gt;实际用到的索引&lt;/strong&gt;。一般配合&lt;code&gt;possible_keys&lt;/code&gt;列一起看。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13.Hash 索引和 B+树区别是什么？你在设计索引是怎么抉择的？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;B+树可以进行范围查询，Hash 索引不能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B+树支持联合索引的最左侧原则，Hash 索引不支持。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B+树支持 order by 排序，Hash 索引不支持。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Hash 索引在等值查询上比 B+树效率更高。（但是索引列的重复值很多的话，Hash冲突，效率降低）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B+树使用 like 进行模糊查询的时候，like 后面（比如%开头）的话可以起到优化的作用，Hash 索引根本无法进行模糊查询。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;14.  索引有哪些优缺点？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;索引可以加快数据查询速度，减少查询时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;唯一索引可以保证数据库表中每一行的数据的唯一性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;创建索引和维护索引要耗费时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以表中的数据进行增、删、改的时候，索引也要动态的维护。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;15. 聚簇索引与非聚簇索引的区别&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聚簇索引并不是一种单独的索引类型，而是一种&lt;strong&gt;数据存储方式&lt;/strong&gt;。它表示索引结构和数据一起存放的索引。非聚集索引是&lt;strong&gt;索引结构和数据分开存放的索引&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们分不同存存储引擎去聊哈~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;MySQL&lt;/code&gt;的&lt;code&gt;InnoDB&lt;/code&gt;存储引擎中， 聚簇索引与非聚簇索引最大的区别，在于叶节点是否存放一整行记录。聚簇索引叶子节点存储了一整行记录，而非聚簇索引叶子节点存储的是主键信息，&lt;strong&gt;因此，一般非聚簇索引还需要回表查询。&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一个表中只能拥有一个聚集索引（因为一般聚簇索引就是&lt;strong&gt;主键索引&lt;/strong&gt;），而非聚集索引一个表则可以存在多个。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一般来说，相对于非聚簇索引，聚簇索引查询效率更高，因为不用回表。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在&lt;code&gt;MyISM&lt;/code&gt;存储引擎中，它的主键索引，普通索引都是非聚簇索引，因为数据和索引是分开的，叶子节点都使用&lt;strong&gt;一个地址指向真正的表数据&lt;/strong&gt;。&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzIxMjE5MTE1Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/NtO5sialJZGrOaned81pMkwib5Voibzes9ibatWlia3ZiceXRbsEWCZbyeOdoQTP1b4licNGR2qbzfaicvstXFztqQJ0wg/0?wx_fmt=png&quot; data-nickname=&quot;程序员小灰&quot; data-alias=&quot;chengxuyuanxiaohui&quot; data-signature=&quot;一群喜爱编程技术和算法的小仓鼠。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给个赞支持一下，谢谢啦~&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>78fa97b9210d010d587ea4cf9e7bd545</guid>
<title>K8S 异步 API 的原因和优缺点？</title>
<link>https://toutiao.io/k/aacvzce</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43448275862068964&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K1sI6IqaK7ZEVjsNdVk4P5ruZqjTb73OLHicXEbviaibATvf0uiaia6IrBsfGVYia1M3xqg3Hau0y89iayngts6U1cMAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1160&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当协作成员变得很多时往往很难同步交流，比如一个微信群同时在线的用户不可能太多。因此，在参与人员庞大的开源社区自然优先选择邮件列表或论坛等异步沟通等手段，在Node.js中也是通过异步编程来消除不同协作对象速度的差异。所以很多实践的地方在无法提供很好的同步API体验时，会采用事件异步触发或者定期等异步触发执行提前缓存好的操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在传统编程领域异步API主要是带来了性能优势，在运维场景异步API缓解了各种操作顺序差异带来的同步困难。&lt;/span&gt;&lt;span&gt;但是异步API也有其缺点，举例来说Node.js程序会面临复杂的异步导致的嵌套问题，因为多层嵌套又引发了程序真实执行顺序难以理解的问题。&lt;/span&gt;&lt;span&gt;简单来说，异步API如果配合需要严格依赖执行顺序的过程式编程模式将会带来Node.js面临的相似的问题。&lt;/span&gt;&lt;span&gt;面对这个问题，Go语言尝试通过带缓存的管道来缓解异步的困难是另一种选择。&lt;/span&gt;&lt;span&gt;而K8S则通过顺序无关的YAML数据表示的操作以配合异步API。&lt;/span&gt;&lt;span&gt;两种手段都是在牺牲少量性能的前提下获得灵活性和便于理解的平衡，前者更适合于计算的场景、而后者更适合于资源管理场景。&lt;/span&gt;&lt;span&gt;K8S 通过将基础设施抽象为对应的资源，实现了通过声明式描述资源期望的状态和异步状态控制达成了平衡。&lt;/span&gt;&lt;span&gt;大家常举的例子就是空调恒温反馈系统：&lt;/span&gt;&lt;span&gt;用户指定一个期望的稳定，空调慢慢调整到该温度，而空调本身始终处于一个动态调整的状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一个额外的好处，是K8S的生命式API需要明确抽象资源的特征属性，而基于这些相对独立的属性（或者叫维度）可以让不同角色的运维和开发同学可以在同一个平台协同工作。类似开发同学在调整空调的温度之时，运维同学可以放心地调整空调的吹风方向。即可以协调又不会引起冲突正是DevOps理念同学期望的状态，因此也可以说 K8S 这种顺序无关的声明式异步API是天生DevOps亲和的（这也正是诞生的目的）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然K8S本身设计已经远远超出了异步API：它不仅仅通过etcd存储期望的状态，同时也时刻反映了平台本身状态，基于etcd和控制器它像粘合剂一样将所有部件连接在一起。正是这种机制，让其可以保持可扩展性、可观测性的同时与组织生态系统共存，而自身还可以不断渐进式发展保持更持久的生命力。K8S 采用的是上帝编程范式：帝哥说要有光于是就有了光，App开发者说要有超大内存就有了超大内存，SRE说要有网络于是就有了网络。这对于日常打工人来说是最大的挑战，需要将思维方式努力调整为上帝或老板模式，从干活角色变成向 K8S 发命令的角色。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5057471264367817&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K1sI6IqaK7a9yqzqNrGQzz5syNFibkOyDxRn4uEFpsricnNLBiaefqqgxlB9wDibGHhHiaM5PVtBHaY2obIhpSCnicdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;522&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d6c3941597cef3e82b711fb89f098442</guid>
<title>秒杀系统上云，从 1342ms 提升到 138ms</title>
<link>https://toutiao.io/k/9w9b3m0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当一回标题鬼才，哈哈&lt;br/&gt;&lt;/span&gt;&lt;span&gt;小伙伴们好呀，拖拖拉拉的我，终于把 秒杀项目 部署到云端上去了！&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40524781341107874&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabHpK9lkw7qVDU7NxuJPSmxL5wktnbQh7J2fAttJdOl4kzGx4L528OkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次过程也比较顺利，搭建下 RabbitMQ 就好了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;helm install rabbitmq bitnami/rabbitmq --namespace prod -f config.yaml&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过我发现，每次都得研究下这个配置文件，真的是头大，而且后面如果要装插件，开启插件这些好像也挺麻烦的，像 Redis 的 布隆过滤器，RabbitMQ 的延迟插件 等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且捣鼓到最后，还得打包成自己的镜像才能好好保存下来🐷&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;越操作越不耐烦，还是写代码省心🙃&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个算是我部署在云端的第一个有意义的 k8s 应用，有点小激动，狠狠地测试下👇&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码基本没啥改动，简单地调整下这些 host 。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14615384615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabusP4AzEk1ibLmTrwX3qwYNwJQUiaP0W8PfuHFvricwUBzYicJfBibuYiaBjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顺手将 redisson 改成了主从，代码中 lettuce 还没修改。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38513513513513514&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1Xniab8kAkbNU5Voa9DgviaR3SZ38TxKPDmSDT0HIZpmH7K5PmepSbKGh3PWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;444&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写个 Dockerfile 部署下。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;FROM&lt;/span&gt; adoptopenjdk:&lt;span&gt;11&lt;/span&gt;-jre-hotspot as builder&lt;br/&gt;&lt;span&gt;MAINTAINER&lt;/span&gt; Jav4ye&lt;br/&gt;&lt;span&gt;WORKDIR&lt;/span&gt;&lt;span&gt; application&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ARG&lt;/span&gt; JAR_FILE=/target/seckill-demo.jar&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; &lt;span&gt;${JAR_FILE}&lt;/span&gt; application.jar&lt;/span&gt;&lt;br/&gt;&lt;span&gt;RUN&lt;/span&gt;&lt;span&gt; java -Djarmode=layertools -jar application.jar extract&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; adoptopenjdk:&lt;span&gt;11&lt;/span&gt;-jre-hotspot&lt;br/&gt;&lt;span&gt;WORKDIR&lt;/span&gt;&lt;span&gt; application&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; --from=builder application/dependencies/ ./&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; --from=builder application/spring-boot-loader/ ./&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; --from=builder application/snapshot-dependencies/ ./&lt;/span&gt;&lt;br/&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt; --from=builder application/application/ ./&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; TZ=&lt;span&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENV&lt;/span&gt; JVM_OPTS=&lt;span&gt;&quot;-Xmx512m -Xms512m&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ENTRYPOINT&lt;/span&gt;&lt;span&gt; [&lt;span&gt;&quot;sh&quot;&lt;/span&gt;,&lt;span&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span&gt;&quot;java &lt;span&gt;${JVM_OPTS}&lt;/span&gt; org.springframework.boot.loader.JarLauncher&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29608404966571156&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabS2NE5f7otNbSQiaw8iajRw12YaWaZC7YjbUlA3N9pOdIp0wBSFz9jIfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1047&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;单机&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8523809523809524&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabbTGNmRv1EmiaGHf0Km2jVYN8gkTa2j6wNFbMHTkCBA4dYghaV1UTia1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;210&quot;/&gt;&lt;figcaption&gt;jmeter 测试&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是 &lt;strong&gt;十次&lt;/strong&gt; 测试结果数据，可以跳到阅读 &lt;strong&gt;小结&lt;/strong&gt; 内容&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第一次 平均响应 是 1711 ms ， 50 % 的请求是 1808ms，99% 是 2552 ms ，最小是 708 ms，最大是 2961 ms ，吞吐量是 224.1/s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23103748910200522&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabU0vBA33GGwUDlQIj7lwHUE7XeGjSAJB0Lbwdu27mRfeSETmoFsiaoOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1147&quot;/&gt;&lt;figcaption&gt;第一次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第二次 平均响应 是 400 ms ， 50 % 的请求是 394 ms，99% 是 1002 ms ，最小是 21 ms，最大是 1198 ms ，吞吐量是 503.3 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22933333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabyDPXv4Ut9ribMs8RHyvQSkUX0BWNqMPFKdSCuvyNngeBU8LyKSGLaiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1125&quot;/&gt;&lt;figcaption&gt;第二次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第三次 平均响应 是 337 ms ， 50 % 的请求是 311 ms，99% 是 791 ms ，最小是 11 ms，最大是 847 ms ，吞吐量是 557.4 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2209405501330967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabC5Kibx53kVT0ZOMiazzIemYXbyDo2COcErGrvVcbdAkefiaewccK7qBAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1127&quot;/&gt;&lt;figcaption&gt;第三次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第四次 平均响应 是 97 ms ， 50 % 的请求是 85 ms，99% 是 236 ms ，最小是 17 ms，最大是 365 ms ，吞吐量是 745.2 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23733333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabcZjzEOicwOE42f0TW5yVd4Z2Luqpwpib0n2Z8VnQCXoC4IWePY7mtqVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1125&quot;/&gt;&lt;figcaption&gt;第四次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第五次 平均响应 是 124 ms ， 50 % 的请求是 109 ms，99% 是 332 ms ，最小是 11 ms，最大是 3033 ms ，吞吐量是 248 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24264049955396966&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1Xniabib312Tv3YDic592yNdFSted6PbNbDyhev1YUua6WxNB1NHyKibEIS6QyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1121&quot;/&gt;&lt;figcaption&gt;第五次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第六次 平均响应 是 84 ms ， 50 % 的请求是 83 ms，99% 是 156 ms ，最小是 14 ms，最大是 217 ms ，吞吐量是 805 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24468085106382978&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1Xniabiaf14n6zic8CtIkr54kmWrzcRqibZ20NN2W3g6shspO735RtrFGjhrBQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1128&quot;/&gt;&lt;figcaption&gt;第六次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第七次 平均响应 是 224 ms ， 50 % 的请求是 224 ms，99% 是 486 ms ，最小是 18 ms，最大是 565 ms ，吞吐量是 657.5 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24822064056939502&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabglZu923B7T9Mr6iawbogY76nq78bB3lEIhEYcxbvrZABT7zvBpGVTyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1124&quot;/&gt;&lt;figcaption&gt;第七次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第八次 平均响应 是 92 ms ， 50 % 的请求是 81 ms，99% 是 326 ms ，最小是 9 ms，最大是 3024 ms ，吞吐量是 250.5 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24955595026642985&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabAWC4sEaqWVT8U2iadDadepbiaRliaDIxXU5S9W7nLEibjIibhQibsRz3CUSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1126&quot;/&gt;&lt;figcaption&gt;第八次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第九次 平均响应 是 80 ms ， 50 % 的请求是 72 ms，99% 是 173 ms ，最小是 14 ms，最大是 396 ms ，吞吐量是 789.9 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24823321554770317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabZtmqnRSBthJyhoJFnJibicjianljxQI5nzkU30vvqIGR9zyhzGHarxm8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1132&quot;/&gt;&lt;figcaption&gt;第九次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第十次 平均响应 是 72 ms ， 50 % 的请求是 63 ms，99% 是 138 ms ，最小是 12 ms，最大是 347 ms ，吞吐量是 792.4 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22638146167557932&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabIGWF20bjfQ07UlySib8LlrXSbmcgQE274CghXTzXksWBddabA3PF6sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1122&quot;/&gt;&lt;figcaption&gt;第十次&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一次这么认真的测试，但是这种测试还不严谨，看网上说要 命令行的方式去运行 jmeter 测试，但是我还是偷个懒，这样和上文测试出来的结果也好有个比较。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上文 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2MjUzODc5Mw==&amp;amp;mid=2247492265&amp;amp;idx=1&amp;amp;sn=c2e02a681c47d8241af79e87f51e41e3&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《写个简易版秒杀系统练练手》&lt;/a&gt; 中，有下面这份报告 👇&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5565912117177098&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1Xniab0JZLUn4qhowqf0nGF4ibkt7Cgkiad2YdLcRicc96E7Ws3Ykp3o2NZjRog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;751&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，上文的这个报告是 &lt;strong&gt;取最好&lt;/strong&gt; 的那一次，也就是 &lt;strong&gt;预热 JVM&lt;/strong&gt; 后的结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次，测试了 &lt;strong&gt;十次&lt;/strong&gt; ，也是 500 并发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到 &lt;strong&gt;第一次&lt;/strong&gt; 请求的数据效果非常差！99% 的请求要 2552 ms，这可能就是没 &lt;strong&gt;预热JVM&lt;/strong&gt; 的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二次，第三次，效果也很差，但是到 &lt;strong&gt;第四次&lt;/strong&gt; 开始，效果就好起来了 99% 的请求在 350 ms以下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最好的一次，是第十次， 99% 的请求在 &lt;strong&gt;138 ms&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对比上文的结果，从 &lt;strong&gt;1342ms&lt;/strong&gt; 提升到 &lt;strong&gt;138ms&lt;/strong&gt; ，硬生生提升了 &lt;strong&gt;10倍&lt;/strong&gt; 的效率，这要是放在生产环境下，那不得把牛吹坏了😂&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;次数&lt;/th&gt;&lt;th&gt;平均响应&lt;/th&gt;&lt;th&gt;50%&lt;/th&gt;&lt;th&gt;99%&lt;/th&gt;&lt;th&gt;min&lt;/th&gt;&lt;th&gt;max&lt;/th&gt;&lt;th&gt;吞吐量&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1711 ms&lt;/td&gt;&lt;td&gt;1808 ms&lt;/td&gt;&lt;td&gt;2552 ms&lt;/td&gt;&lt;td&gt;708 ms&lt;/td&gt;&lt;td&gt;2961 ms&lt;/td&gt;&lt;td&gt;224.1/s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;400 ms&lt;/td&gt;&lt;td&gt;394 ms&lt;/td&gt;&lt;td&gt;1002 ms&lt;/td&gt;&lt;td&gt;21 ms&lt;/td&gt;&lt;td&gt;1198 ms&lt;/td&gt;&lt;td&gt;503.3 /s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;337 ms&lt;/td&gt;&lt;td&gt;311 ms&lt;/td&gt;&lt;td&gt;791 ms&lt;/td&gt;&lt;td&gt;11 ms&lt;/td&gt;&lt;td&gt;847 ms&lt;/td&gt;&lt;td&gt;557.4 /s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;97 ms&lt;/td&gt;&lt;td&gt;85 ms&lt;/td&gt;&lt;td&gt;236 ms&lt;/td&gt;&lt;td&gt;17 ms&lt;/td&gt;&lt;td&gt;365 ms&lt;/td&gt;&lt;td&gt;745.2 /s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;124 ms&lt;/td&gt;&lt;td&gt;109 ms&lt;/td&gt;&lt;td&gt;332 ms&lt;/td&gt;&lt;td&gt;11 ms&lt;/td&gt;&lt;td&gt;3033 ms&lt;/td&gt;&lt;td&gt;248 /s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;84 ms&lt;/td&gt;&lt;td&gt;83 ms&lt;/td&gt;&lt;td&gt;156 ms&lt;/td&gt;&lt;td&gt;14 ms&lt;/td&gt;&lt;td&gt;217 ms&lt;/td&gt;&lt;td&gt;805 /s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;224 ms&lt;/td&gt;&lt;td&gt;224 ms&lt;/td&gt;&lt;td&gt;486 ms&lt;/td&gt;&lt;td&gt;18 ms&lt;/td&gt;&lt;td&gt;565 ms&lt;/td&gt;&lt;td&gt;657.5 /s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;92 ms&lt;/td&gt;&lt;td&gt;81 ms&lt;/td&gt;&lt;td&gt;326 ms&lt;/td&gt;&lt;td&gt;9 ms&lt;/td&gt;&lt;td&gt;3024 ms&lt;/td&gt;&lt;td&gt;250.5 /s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;80 ms&lt;/td&gt;&lt;td&gt;72 ms&lt;/td&gt;&lt;td&gt;173 ms&lt;/td&gt;&lt;td&gt;14 ms&lt;/td&gt;&lt;td&gt;396 ms&lt;/td&gt;&lt;td&gt;789.9 /s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;72 ms&lt;/td&gt;&lt;td&gt;63 ms&lt;/td&gt;&lt;td&gt;138 ms&lt;/td&gt;&lt;td&gt;12 ms&lt;/td&gt;&lt;td&gt;347 ms&lt;/td&gt;&lt;td&gt;792.4 /s&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，从表中还可以发现，这 &lt;strong&gt;网络抖动&lt;/strong&gt; 还有点大，不知道怎的，这个 max 突然就卡到 3024 ms 去，严重降低了这个 &lt;strong&gt;吞吐量&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上文也提到过，最大的问题应该是 &lt;strong&gt;网络开销&lt;/strong&gt;，毕竟还是用了 &lt;strong&gt;MQ 异步下单&lt;/strong&gt; ，&lt;strong&gt;内存标记&lt;/strong&gt;，&lt;strong&gt;Redis 预扣库存&lt;/strong&gt; 等手段去优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在都部署到 k8s 上，RabbitMQ，Redis，MySQL 都在上面，就不会有这么大的网路开销了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;接下来怎么优化呢？&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前只有零星的思路，比如吞吐量的话，我可能会尝试下这个 &lt;strong&gt;reactive&lt;/strong&gt; 的方式，或者将 Springboot 内嵌的 &lt;strong&gt;Tomcat&lt;/strong&gt; 换成 &lt;strong&gt;jetty&lt;/strong&gt; ，&lt;strong&gt;undertow&lt;/strong&gt; 试试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码的话，试试将 lettuce 也更换成主从模式的看看，再看看 API 有哪些可以优化的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最主要的，还是这个 &lt;strong&gt;JVM&lt;/strong&gt; ，下次用 &lt;strong&gt;VisualVM&lt;/strong&gt; 连上去看看 JVM 在这期间的变化，看看 CPU，内存，等的变化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabXyqGPvp4ROnQlwTtGKVqoZu5UOSnzlhWlu7ibvaY1VSDSyoRCvQ7yVQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;50&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;集群（3个）&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然一直吐槽部署变得麻烦，但是这个点一点就扩容，一下子就变成集群真的太赞了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我在上文提到直接用 &lt;strong&gt;分布式锁&lt;/strong&gt; 就好了，毕竟很难忍住不试下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一下子变成多个消费者，但是好在用了这个分布式锁，避免了 &lt;strong&gt;重复消费订单&lt;/strong&gt; 的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也很符合我理想中的代码，业务代码就归业务代码好了，微服务那一套能分离的就尽量分离出来，现在靠这个 k8s 就能实现 &lt;strong&gt;负载均衡&lt;/strong&gt; 了，确实好方便，当然，不方便的就落到 k8s 运维人员身上去了，比如负载均衡策略的调整啥的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3579595426561126&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabL9DQkA4yn0C5tKVsNT8Dg9GpHiaVtUyAdibE18g8sw5lRq6vdFq0J3xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1137&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第一次 平均响应 是 1705 ms ， 50 % 的请求是 1795 ms，99% 是 3838 ms ，最小是 16 ms，最大是 4155ms ，吞吐量是 157.1 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24312333629103816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1Xniabvp3ZeZWBC59biaU7vBzXH9n3lWlB52Ticl3YyiblIhSD7ZZ0a9eUtObqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1127&quot;/&gt;&lt;figcaption&gt;第一次&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;第二次 平均响应 是 587 ms ， 50 % 的请求是 529 ms，99% 是 2162 ms，最小是 20 ms，最大是 2265 ms ，吞吐量是 388.7 /s 。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24779541446208111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabYeWwHcRBybehuZ00YRzHmu7kgv631uLFxKT9STpzSGXQibVPjbh9hAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;figcaption&gt;第二次&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这我就有点纳闷了，怎么还这么慢的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按理说，我这集群是来提高吞吐量的啊！难道是因为我这是 假的集群（都在 minikube 节点上）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2520852641334569&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1Xniabo3MNZKibicVVcjwORbLJ72PuHunarEZDBuzLW4PouhLoicSvrlknRCCaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1079&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果查看容器日志时，发现居然有错😱&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1581532416502947&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabnSe0eNBFiauKAa5fImGHibRum6IiapMJzohXxj7RlZ3norgtMqhbiaxS8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1018&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把日志下载到本地发现，原来是这个 ID 重复了……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前偷个懒，直接用 hutool 工具生成了，现在变成集群也不好修改呀。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1505016722408027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEAA2CA2n6XDCAkpDl1XniabZqRKXD91tMMNia6LZgPBzPHnNd5K3e2hg2cRAuU6ZkpKKkj60C4giavQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;598&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那好吧，先暂时作罢，看来还得把这个 &lt;strong&gt;分布式&lt;/strong&gt;ID 生成器搭建下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那咱们下文见，下文就来看看单机下 JVM 的变化先吧，over！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4040e5b8d60e897dd40f269c1d54d60d</guid>
<title>一种基于图片搜索视频的方案</title>
<link>https://toutiao.io/k/d0jftv6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：京东零售 谷伟&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;1.商品搜索&lt;/h1&gt;

&lt;p&gt;1.1网络购物的搜索手段&lt;/p&gt;

&lt;p&gt;随着移动互联网发展，手机端购物已成为人们生活的常态。人们在搜索商品时采用的手段也越来越丰富，当前的主要搜索方式是文本搜索与拍照搜索。&lt;/p&gt;

&lt;p&gt;1.2文本搜索&lt;/p&gt;

&lt;p&gt;文本搜索应用比较广泛，较为常用的是关键字匹配，针对商品信息的相关描述进行分词，并对分词建立索引库，从而达到查找的目的。随着人工智能的发展，语义搜索得到了快速的发展，它通过用户输入的搜索内容来理解用户真正的意图，从而获得更有价值的内容。其本质是将所有要搜索的内容转化为高维数学向量，用统一的特征向量来描述不同内容，把检索输入的内容向量化，并与要搜索的内容进行向量匹配，把相似度最高的结果展现出来。&lt;/p&gt;

&lt;p&gt;1.3拍照搜索&lt;/p&gt;

&lt;p&gt;拍照搜索也就是以图搜图，是近几年的视觉AI发展的一个产物。用户登录电商平台，可以通过上传图片，经过图像分析与识别来查找相似的商品主图，从而找出相关的商品。其基本原理是经图像分析抽取图像的颜色、形状、纹理等特征，建立特征索引库，对用户上传的图像进行特征化描述，从索引库中查找出与之近似的特征图像。&lt;/p&gt;

&lt;h1&gt;2. 现状分析&lt;/h1&gt;

&lt;p&gt;2.1需要专业人员参与&lt;/p&gt;

&lt;p&gt;文本搜索需要文本描述的支持，也就是需要对短视频进行文本描述，需要人员对短视频进行准确的文本描述，尤其描述中要含有代表其商品的关键词，否则可能难以被搜索引擎所命中，这对视频的发布人员产生了一定的门槛，增加搜索命中的难度。&lt;/p&gt;

&lt;p&gt;拍照搜索主要是对商品的主图进行特征匹配，这也就需要商品发布人员要制作尽可能与之匹配的图片，尤其需要美工设计人员的参与，从而增加了人力成本。&lt;/p&gt;

&lt;p&gt;2.2难以支持短视频搜索&lt;/p&gt;

&lt;p&gt;随着近几年自媒体的发展，短视频逐渐成为互联网信息传播的主要手段。而短视频可以认为是大量图片的集合，不可能对短视频的每张图片建立特征索引，因为这会浪费大量的计算机算力。&lt;/p&gt;

&lt;h1&gt;3. 技术方案&lt;/h1&gt;

&lt;h2&gt;3.1 技术问题&lt;/h2&gt;

&lt;p&gt;以前商品介绍主要以图文方式来展现商品，不仅要展示商品主图还要配细节图，以及产品参数，从而达到全面涵盖产品信息的能力。而短视频能够全方位的展示商品，并搭配语言描述以及背景音乐，可进一步形象的给消费者介绍商品的功能，给顾客更直观的体验，有助于促进下单。同时商家制作的短视频可将其推送到自媒体平台上，便于给商品引流，提高商品销量，从而拓宽了销售市场。&lt;/p&gt;

&lt;p&gt;因此短视频营销相对于图文营销更有优势，如何让顾客能够更快更便捷地搜索到其感兴趣的商品短视频，是本发明所要解决的主要问题。本方案主要解决的是商品短视频搜索，按照类目维度对商品短视频进行筛选，并提高视频搜索的命中率，为商品短视频搜索建立桥梁。&lt;/p&gt;

&lt;h2&gt;3.2 技术方案&lt;/h2&gt;

&lt;h3&gt;3.2.1 流程图&lt;/h3&gt;

&lt;p&gt;流程图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d369840ad31d41888411365b90a55e17%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;﻿﻿&lt;/p&gt;

&lt;h3&gt;3.2.2 详细描述&lt;/h3&gt;

&lt;p&gt;1.关键帧提取&lt;/p&gt;

&lt;p&gt;卖家在制作好商品介绍的短视频后，在发布商品时对短视频进行上传，视频时长不能超过2分钟。对该视频进行关键帧提取。视频是由一组连续的图像组成，如果每张图片都存储下来，则会导致视频文件过大，因此视频都会被压缩，在压缩过程中，产生了I帧、P帧、B帧。I帧是画面的完整保存，它尽可能去除了图像空间的冗余信息；P帧则是记录与前一个关键帧的差别；B帧是记录本帧与上一帧和下一帧的差别。&lt;/p&gt;

&lt;p&gt;因此只需提取出I帧即可。在MPEG-4标准中，stss部分标识了哪些sample是关键帧，如果没有stss则全部sample是关键帧。当获取的关键帧太多时，以时间轴维度，随机选取20帧的图像供商家选择，把商家选取的5张图片与视频文件一同保存到文件数据库中。&lt;/p&gt;

&lt;p&gt;Mp4标准&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Box类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th/&gt;
&lt;th/&gt;
&lt;th/&gt;
&lt;th/&gt;
&lt;th/&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ftyp&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;文件类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;moov&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;记录媒体信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;mvhd&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;视频文件信息，如时长、创建时间等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;track&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;存放视频的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;tkhd&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;媒体总体信息，如宽高等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;mdia&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;媒体容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;mdhd&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;换算真实事件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;hdlr&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;媒体类型，指明是video、audio、hint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;minf&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;媒体信息容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;stbl&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;偏移映射关系表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;stsd&lt;/td&gt;
&lt;td&gt;sample描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;stts&lt;/td&gt;
&lt;td&gt;时戳-sample序号映射表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;stsc&lt;/td&gt;
&lt;td&gt;sample与chunk的映射表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;stsz&lt;/td&gt;
&lt;td&gt;sample的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;stz2&lt;/td&gt;
&lt;td&gt;另一种存储sample的大小，更节省空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;stss&lt;/td&gt;
&lt;td&gt;关键帧列表（从该处获得I帧）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;stco&lt;/td&gt;
&lt;td&gt;每个chunk的偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;co64&lt;/td&gt;
&lt;td&gt;64位chunk的偏移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mdat&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;﻿&lt;/td&gt;
&lt;td&gt;具体的媒体数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;2.特征向量计算&lt;/p&gt;

&lt;p&gt;本次的特征向量计算采用的是VGG16模型。由于关键帧的图片都是彩色图片，因此采用3通道。卷积核为3×3，池化核为2×2。以224×224的视频图像为例，过程如下：&lt;/p&gt;

&lt;p&gt;1) 输入图像大小为224×224×3，经64个通道的卷积核3×3，步长为1，共卷积2次，输出尺寸为224×224×64的特征向量。进行池化，采用池化核2×2，步长为2，输出尺寸为112×112×64的特征向量。&lt;/p&gt;

&lt;p&gt;2) 经128个3×3的卷积核，步长为1，卷积2次，尺寸变为112×112×128，进行池化，步长为2，输出尺寸为56×56×128。&lt;/p&gt;

&lt;p&gt;3) 经256个3×3的卷积核，步长为1，卷积3次，尺寸变为56×56×256，进行池化，步长为2，输出尺寸为28×28×256。&lt;/p&gt;

&lt;p&gt;4) 经512个3×3的卷积核，步长为1，卷积3次，尺寸变为28×28×512，进行池化，步长为2，输出尺寸为14×14×256。&lt;/p&gt;

&lt;p&gt;5) 经512个3×3的卷积核，步长为1，卷积3次，尺寸变为14×14×512，进行池化，步长为2，输出尺寸为7×7×256。&lt;/p&gt;

&lt;p&gt;6) 将数据拉平成一维数组，7×7×256=25088。&lt;/p&gt;

&lt;p&gt;7) 经两层1×1×4096与一层1×1×1000的全连接层，最终输出1×1000的特征向量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f888d0a15f3c4c80b8d23fafa1f89c7d%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;﻿﻿&lt;/p&gt;

&lt;p&gt;3.向量数据库&lt;/p&gt;

&lt;p&gt;向量在存储时要把文件数据库中的ID同时存下来，以及商品ID，从而建立向量、文件、商品的关系。向量搜索都是相似性搜索，通过两个向量在高位空间的距离来做判断，其实就是在高维空间中找到与目标向量最接近的K个向量，一般采用欧式距离计算，其公式：&lt;/p&gt;

&lt;p&gt;﻿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9491d859e7b42d2ae8a02913d998084%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;﻿﻿  &lt;/p&gt;

&lt;p&gt;为了召回精度高，暴力搜索的是最好的选择。但这会产生大量的不必要的计算，浪费了计算机资源。因此本方案采用类目维度进行切割。减少搜索范围。&lt;/p&gt;

&lt;p&gt;4.视频搜索&lt;/p&gt;

&lt;p&gt;买家需要选择要搜索的类目再进行图片上传，通过VGG16模型计算出特征向量，然后基于类目维度进行暴力搜索把最接近的K个向量筛选出来。最后再根据向量与文件的关系，把视频文件查找出来，返回给买家。&lt;/p&gt;

&lt;p&gt;5.视频淘汰策略&lt;/p&gt;

&lt;p&gt;每日进行定时巡检，对于长时间没有流量或者流量低于阈值的商品，需要从向量库中对其短视频进行逻辑删除，尽可能减少搜索的体积，减少计算资源的浪费。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/448d8089a0fa45ceac16369f01b44757%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54fe7cf3541c7c085a09b5aeac5e723f</guid>
<title>用户行为分析模型实践（三）——H5 通用分析模型</title>
<link>https://toutiao.io/k/hddfgjn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;作者：vivo 互联网大数据团队- Zhao Wei、Tian Fengbiao、Li Xiong&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;本文从提升用户行为分析效率角度出发，详细介绍了H5埋点方案规划，埋点数据采集流程，提供可借鉴的用户行为数据采集方案；且完整呈现了针对页面分析，留存分析的数仓模型规划方案，在数仓模型设计过程中遇见的痛点难点问题也相应的给出了解决思路及案例代码；在数据展示模块，提供了分析指标数据展示的逻辑流程及UI案例，旨在帮助有需要的同学全方位的了解用户行为数据全链路分析流程。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、背景&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;针对用户行为数据进行采集有个专业术语叫埋点，在h5页面上做的埋点统称为H5埋点。H5页面因其灵活性，便捷的交互和丰富的功能，以及在移动设备上支持多媒体等特点目前被广泛应用于网页app开发。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;现阶段H5埋点的自由度较高，行业数据产品在同类高频的业务场景上设计的时间花费较多，埋点开发、埋点测试等事项耗时，且需重复劳动；同样的埋点数据分析层面-基础分析指标，留存指标，页面分析等需求需多次开发模型，浪费宝贵的人力资源。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;H5通用分析模型旨在通过规范化埋点设计方案，开发设计一套通用度高，扩展方便，需求响应迅速的模型，减少行业数据产品和开发在类似需求上的人力投入，提升数据分析效率。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、分析模型概述&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;2.1 术语解释&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.42039542143600417&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVwMmZcH25xoicjgUUunJcy3ovp2UYbaq1uwmXm1uVcEuWcMtktJcgPxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;961&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;2.2 模型概述&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;针对业务发展的不同阶段，会有相应的数据分析需求。如图（1），在业务初期，用户的访问，留存情况等是阶段性分析重点，业务产品运营可以根据分析数据适时的调整页面布局，运营策略等；应用发展中后期可能会更多的关注订单、转化、路径等相关分析指标。如果能在应用上线之初，快速的拿到核心分析指标数据，对产品的推广，迭代无疑是收益良多。所以，本次模型构建从应用初期分析最广泛的核心指标出发，落地应用概况、页面访问、用户留存等维度全方位核心分析指标体系。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.46796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVu3mAIeAB5yI2ibbZ5cpBAIX6rctic8uSfIspZb1spyneoSZna4oz57xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图（1）应用生命周期内指标分析情况&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;2.2.1 分析模型主题&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;本次通用分析模型围绕以下分析主题构建。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;【基础分析】：&lt;/strong&gt;从用户浏览次数，人均访问页面数，人均使用时长，新老用户等基础指标展示用户访问大盘数据。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;【页面分析】：&lt;/strong&gt;面向具体页面，分析用户访问pv,uv,访问时长等核心指标，有针对性的发现页面访量薄弱环节，为合理化页面管理提供数据支撑，协助产品经理通过信息重组，提升页面访问量。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;【留存分析】：&lt;/strong&gt;通过用户的留存，了解目前的产品现状（用户的哪些行为导致留存率的不同）; 判断产品的改进有无效果（用户行为是否发生了改变导致留存率的提升）；留存分析反映了用户由初期的不稳定用户转化为活跃用户，稳定用户，忠诚用户的过程。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;2.2.2 分析指标定义&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;（以下示例中数据均为参考数据，非真实数据）&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;1、基础分析：&lt;/strong&gt;访问pv，uv等指标（全维度）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.12256267409470752&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URV65Zguiauu2Kq4PPPbaBmqeH5ZnwcuSbicz4Mw5lE28E6Ur5TGqSuibiaSw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;718&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;2、页面分析：&lt;/strong&gt;页面访问相关pv，uv，时长等指标&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.11724137931034483&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVhotbnwZ5HVhwJz4uapt0zH4tojSJmyENumL5zDRfTMZG1ReoKhCNUw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;725&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;注：用户对访问页面进行命名，分析平台提供配置入口，方便用户对页面进行命名。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3、留存分析：&lt;/strong&gt;新用户留存，活跃用户留存  包括：N日内留存 和 第N日留存。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通常意义上的留存分析指的是：用户在APP产生行为后，在固定的第N日继续访问或使用APP的用户；包括活跃用户留存和新用户留存&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;为满足不同业务的分析需求。此次留存模型包含 n日内留存分析，即用户在APP产生行为后，在固定的第N日内继续访问或使用APP的用户（日期范围留存）。&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.21337266470009833&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVVOk3ds42YXtXfOicKaBHrvsgF2724BjlkczNaLBnpY15Xg0nyNnQaiaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1017&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、埋点方案&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.1 业务目标&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.2 自动采集&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.2.1 什么是自动采集&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;自动采集是相对于前端开发者而言，目的是为了帮助前端开发者提升数据采集效率。通过自动采集开关配置，无需在手动实现上报逻辑。使用时前端开发者通过引入h5sdk.js(也称jssdk.js)，打开自动采集开关，我们就会在适当的时机，以适当的规则采集数据，并进行上报。开发者无需在关注采集代码内部逻辑，以此来减轻同类数据采集的开发工作量。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.2.2 如何自动采集&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;按照给定的规则进行页面事件EventListener，当用户活动触发对应的事件时，我们会组装好数据，然后将组装好的数据通过https传入到后台。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.2.3 自动采集的三大规则场景&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们的网站是一个SPA应用。SPA应用通过改变前端路由的变化，实现页面内组件的切换。组件的切换，对于一个非前端开发者来说，可以泛指页面的切换。所以我们第一场景是要覆盖url变化的这类事件。在实践中，我们发现，当我们需要采集页面的用户停留时长时，往往会不准确。为什么不准确？用户可以缩小化浏览器，也可以切换tab到其他网站，这个时候计算的用户时长是不准确的。因为用户虽然打开了我们网页，但是并没有聚焦到我们的网页。这种不应该算作用户停留时长，因此对于这些行为，我们又加上了失去焦点，得到焦点，以及切换浏览器tab事件的EventListener，这两种场景。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;综上三大场景总结如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;页面切换时，进行采集，即url变化时触发的事件；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;页面失去焦点，得到焦点时，进行采集。即focus，blur事件；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;页面通过浏览器tab切换离开，切换回来时，进行采集，即visibilitychange事件；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.2.3.1 三大规则场景的界定&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;上文我们已经在实践中总结出了自动采集的三大场景，在实际应用针对三大场景的使用我们也总结出了一套界定方案。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;（1）规则一界定——怎么判断页面切换？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;a、现在的网站要么是MPA，要么是SPA模式，或者两种模式混合，MPA主要是后台路由，SPA主要是前端路由（hash模式和history模式）。但无论是SPA还是MPA，当页面需要切换时，url一定会变化，基于此点，我们判断当url变化时，用户一定切换了页面。此时触发规则一的事件，产生数据上报。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里需要注意2个问题：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;第1个问题：&lt;/strong&gt;url变化 = window.location.origin + window.location.pathname + window.location.hash 这三部分的任一部分变化，即为url变化，并不包括window.location.search这部分的变化；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;第2个问题：&lt;/strong&gt;在SPA中，如果一个页面内有多个tab，当切换tab时，开发者也改变他的url的window.location.pathname，此时也会认为是页面切换，也会产生上报数据，如下这种情况。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.475609756097561&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URViaBCtHnp8CDScR9p15Zxa4MF9Vq1yibibd2ibr69F4Aa2nKJWwdTlT1Bibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图（2）&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;b、完整页面切换上报流程，由页面A切换到页面B时，一共上报4个埋点；&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6754385964912281&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVSicbnyH4ALibX67Sf5LiaRibdEk6Nrz0sAM2Jp1frMScp4AfUCB4layLhA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;798&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图（3）&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;c、关于路由的EventListener&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;现在的大多网站，大多是SPA应用，SPA的前端路由有hash模式和history模式这两种模式，当通过前端路由来页面切换时，肯定会触发hash模式或history相关的api。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，我们只需要把所有触发事件的场景给全部进行EventListener即可。有如下2种路由的EventListener：window.hashchange事件——触发hash模式时、window.popstate事件、pushstate,replacestate自定义事件——触发history模式时。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里有2个问题需要关注：一是当某个SPA应用的路由事件，触发了history模式时，我们应该移除hash模式的EventListener。二是pushstate,replacestate自定义事件，因为BOM并没有提供相关的api支持EventListener，需要自行封装使用，如下code。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;引入JSSDK&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;resetHistoryFun&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; originMethod = &lt;span class=&quot;code-snippet__built_in&quot;&gt;window&lt;/span&gt;.history[&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; rs = originMethod.apply(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;arguments&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;let&lt;/span&gt; e = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Event(&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt;.toLocaleLowerCase())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        e.arguments = &lt;span class=&quot;code-snippet__built_in&quot;&gt;arguments&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;window&lt;/span&gt;.dispatchEvent(e)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; rs;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;window&lt;/span&gt;.history.pushState = resetHistoryFun(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;pushState&#x27;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;window&lt;/span&gt;.history.replaceState = resetHistoryFun(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;replaceState&#x27;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;pushstate&#x27;&lt;/span&gt;, reportBothEvent)          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;replacestate&#x27;&lt;/span&gt;, reportBothEvent)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;（2）规则二界定——怎么判断页面失去焦点，得到焦点？&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;失去焦点，得到焦点。我们主要进行如下这两个事件的EventListener：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;引入JSSDK&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;window.addEventListener(&#x27;focus&#x27;, ()=&amp;gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    console.log(&#x27;页面得到焦点&#x27;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;window.addEventListener(&#x27;blur&#x27;, ()=&amp;gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    console.log(&#x27;页面失去焦点&#x27;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;（3）规则三界定——怎么判断浏览器tab切换离开，切换回来？&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;tab切换离开，切换回来。我们主要进行如下这一个事件的EventListener：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;引入JSSDK&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;document.addEventListener(&#x27;visibilitychange&#x27;,  () =&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    if(document.hidden) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        console.log(&#x27;页面离开&#x27;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } else {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        console.log(&#x27;页面进入&#x27;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;注意：&lt;/strong&gt;如果一个行为同时满足2个及2个以上的规则时，只会取一个规则上报数据。避免不重复上报数据。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.3 埋点设计&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.3.1 埋点个数&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为了得到pv和uv的相关数据，我们设计了&lt;strong&gt;2个&lt;/strong&gt;埋点，1个为&lt;strong&gt;页面进入&lt;/strong&gt;时上报的埋点，另外1个为&lt;strong&gt;页面离开&lt;/strong&gt;时的埋点，上报的数据都是一对的，&lt;strong&gt;离开-进入页&lt;/strong&gt;面为一对，&lt;strong&gt;失去焦点-得到焦点&lt;/strong&gt;为一对，切换tab离开当前页面-返回当前页面也为一对；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为什么要设计2个埋点？设计2个埋点，能覆盖全面上述我们所说的3种规则场景；其次，方面计算页面停留时长；最后就是方便逻辑判断，避免重复上报；&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.3.2 参数的设计&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;按照不同的需求，参数的设计分为如下4类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;pv，uv需要参数，开发者传入参数：&lt;/strong&gt;unique_id——标识用户唯一标识、topic_id——当前网站唯一标识、current_env——当前网站环境，默认为prod，可用户传入；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;pv，uv需要参数，sdk内部获取参数&lt;/strong&gt;：duration——页面停留时长、last_page_url——上个页面url、page_url——当前页面url；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;SDK需要的参数&lt;/strong&gt;，帮助判断事件触发类型，SDK内部获取参数：eventType&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;用户其他需要补充的参数：&lt;/strong&gt;自定义参数&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.4 数据上报&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;数据上报方式是XMLHttpRequest、window.navigator.sendBeacon，基于h5sdk上报逻辑架构。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVIaLqrMzz86LYF6uKK27sgLs9HEePZ3lkicArNBp5M1o175sB0Q17b1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图（4）&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.5 兼容性和容错性&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;关于兼容性，依赖于window对象、不兼容IE6、IE7，IE8;&lt;/p&gt;&lt;p&gt;关于容错性，对通用化内部逻辑做了try catch的容错兼容，保证出错时不影响业务主逻辑运行，同时上报一个出错的事件类型，知道出错的原因，以便提前做好对应的优化方案。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.6 个人数据保护合规&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;为了保护好用户的个人数据及其隐私并满足法律法规要求，在埋点的设计、采集、使用等环节需要进行充分的隐私保护设计。例如，在埋点设计阶段，需要确定标识符的选择、埋点参数的最小必要、采集频率的最小必要等；在埋点的采集、使用阶段，需要确保相关处理行为的透明、可控，包括对用户进行告知，获取用户的有效同意，提供撤回同意的渠道等等。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、数仓方案&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;埋点方案已经具备，接下来的工作就是设计一套接入高效，拓展便捷的数仓分析模型；为实现以上既定的分析目标，模型设计过程中需要解决以下核心问题。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.1 核心问题列表&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41857923497267757&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVpVqPOhbiaibQ8f3via8TA2hbtbibj9fXp5D6LR3ltHVcFFgTIjU1L1LLRg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;915&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.2 模型分层标准&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;介绍模型设计前，先说下vivo 数仓模型分层基本原则，及本次模型分层思路，各层模型设计原则参照《vivo中台数仓建设方法论》，层级设计摘要如下：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.40198511166253104&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URV3jHUrAibjC7331H17FFDBes98WWx1iagFbnfloiaP4h4U7prricaPLibYPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1209&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.3 模型层级架构&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;通过核心问题拆解发现，为实现通用分析模型方案，需要从数据接入层收口，在数据接入时统一参数解析，统一字段命名，并设置相应的应用id字段，区分各个业务数据源；接着需要生成活跃数据明细表，可统计相应的基础分析，页面分析指标；同时为满足留存分析的需要，我们需要构建相应的活跃全量表，留存分析主题表基于活跃增量表和活跃全量表生成，用户活跃信息通过打标签的方式标记。至此涉及三个主题分析的模型规划完毕。层级划分原则及规划逻辑模型明细，如：图（5）&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.68203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVqCcPXvqH3jpYzzB3UIHC2IMglia3mx8hJQWz8iaLAbgTWhzqBfCIjzrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图（5）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;从分层架构图可看出H5通用分析模型分为明细层(dw)、轻度汇总层(dma)、分析主题表 (dmt) 和指标层(da); 其中轻度汇总层可作为中间数据提供行业分析师及数据开发、业务产品等查询分析使用；汇总层作为分析平台通用分析模型报表数据源，导入mysql存储，前端基于mysql表实现数据展示,各个模型设计细则如下：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.34375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVBtuAlOK0ua397xydnq6sLxhb665PvgnhW1q0s0yiceIMs2I8yhiaZaPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;992&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;数据模型规划及设计的核心在于三点：&lt;strong&gt;确定appid和用户id映射关系，留存方案实现及留存记录入库bitmap方式读写。&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;1、确定appid和用户id映射关系-unique_id 关联设计&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;多业务id统一&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;## 明细层收口数据,统一id字段&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT  xx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,xx1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,CASE WHEN appid IN(1)       THEN  1   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             WHEN appid IN(2)   THEN  2  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             WHEN appid IN(3)       THEN  3    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             WHEN appid IN(4,5,6,...)       THEN  4      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ELSE 0  END   AS  id_flag   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,CASE WHEN appid IN(1)      THEN  id1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             WHEN appid IN(2)  THEN  id2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             WHEN appid IN(3)      THEN  id3     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             WHEN appid IN(4,5,6,...)  THEN  IF(NVL(params[&#x27;id1&#x27;],&#x27;&#x27;)=&#x27;&#x27;,NVL(params[&#x27;id2&#x27;],&#x27;NA&#x27;),params[&#x27;id1&#x27;])            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ELSE &#x27;NA&#x27; END  AS  unique_id        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,appid        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  FROM ods_table_name_XXX  a     -- 各个接入业务线数据源 ods&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; WHERE day=&#x27;${today}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   AND hour = &#x27;${etl_hour}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   -- APPID 和 事件id 要匹配新增&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   AND appid  in (1,2,3 ...)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   AND 事件id  in (XXX|167,XXX|168,...);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;## id字段后续关联使用方式&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;## 增量关联全量，确定是否新用户&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT if(b.unique_id is null,1,0) AS is_new&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FROM&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT *&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  FROM table_XXX_hi&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; WHERE day= &#x27;${today}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   AND hour = &#x27;${etl_hour}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; GROUP BY XX&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ) a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       -- 取全量表唯一 unique_id 作为关联条件，判断新老用户&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       -- 新用户是相对于历史全量的&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  LEFT JOIN ( SELECT unique_id,appid&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                FROM      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ( SELECT unique_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        ,appid&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        ,row_number() over(partition by unique_id,appid order by 活跃日期 asc)  as rn_0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   FROM table_XXX_df&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  WHERE day=&#x27;${etl_date}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ) a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                WHERE rn_0 = 1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             ) b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ON a.unique_id = b.unique_id AND a.appid = b.appid;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;2、留存方案实现及留存记录入库bitmap方式读写&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;留存方案&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;## 利用bitmap思想，留存标签满8位转化为16进制组合到retain_tag之前，这样可以利用很少的位数记录较长的活跃情况&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;## 示例代码如下&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT user_unique_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,if(length(tmp_retain_tag) = 8,is_active,concat(is_active,tmp_retain_tag))          as tmp_retain_tag&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       --  如果tmp_retain_tag长度为8的时候，将数据转化为十六进制添加到retain_tag前，并将本字段清空，从头开始计数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,if(length(tmp_retain_tag) = 8,concat(con_tmp_retain_tag,retain_tag),retain_tag)    as retain_tag&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,is_active&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  FROM&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SELECT unique_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            -- 前一天的临时存储，与con_tmp_retain_tag保持一致&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ,tmp_retain_tag                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            -- 如果转换为十六进制后的长度不为2，则在左边添加0          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ,if(length(conv(tmp_retain_tag,2,16)) = 2,conv(tmp_retain_tag,2,16),concat(&#x27;0&#x27;,conv(tmp_retain_tag,2,16))) as con_tmp_retain_tag &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            -- 历史轨迹&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ,retain_tag                                                                                      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ,first_value(is_active) over(partition by unique_id,appid,topic_id  order by first_active_day desc)  as is_active&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       FROM&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ( SELECT unique_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,topic_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,appid &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,first_active_day&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,last_active_day&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               -- 留存标签&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,&#x27;0&#x27; as is_active&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,tmp_retain_tag -- 形如 11101010&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,retain_tag       -- 形如 A0E3&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          FROM table_active_XX_df  -- 活跃全量表&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         WHERE day= &#x27;${last_etl_date}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         UNION ALL&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SELECT unique_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,topic_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,appid &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,day as first_active_day&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,day as last_active_day&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               -- 留存标签           &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,&#x27;1&#x27; as is_active&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,&#x27;&#x27;  as tmp_retain_tag&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,&#x27;&#x27;  as retain_tag&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          FROM table_active_XX_hi  -- 活跃明细表&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         WHERE day= &#x27;${etl_date}&#x27;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         ) a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;WHERE rn =1;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;## 留存指标统计：## 以3日内及第3日留存为例&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;WITH tmp_table AS (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT DAY&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,unique_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,appid&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,首次活跃日期&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,CONCAT(tmp_retain_tag,retain_tag) AS login_trace    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   FROM (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SELECT DAY&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ,unique_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ,tmp_retain_tag&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,appid&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,首次活跃日期&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               ,IF(nvl(retain_tag,&#x27;&#x27;) &amp;lt;&amp;gt; &#x27;&#x27;,CONV(SUBSTR(retain_tag,1,8),16,2),&#x27;&#x27;) AS retain_tag&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              -- 如果retain_tag为空时，直接取空值。如果长度超过8位数，取最后八位数；如果长度不超过8位数，取全部。如果是30日内新用户，长度不超过8位&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          FROM table_active_XX_df WHERE DAY = 统计日&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ) x1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;## 以3日内及第3日留存为例：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SELECT -- 第N日留存指标：第N日来访&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,SUM(IF(SUBSTR(login_trace,3,1) = &#x27;1&#x27;,1,null))    AS retain_cnt_3th&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       -- N日内留存指标:N日内访问过1次或N次&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ,SUM(IF(instr(SUBSTR(login_trace,2,2) ,&#x27;1&#x27;)= 0,null,1))  AS retain_cnt_between_3th&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; FROM (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       SELECT &#x27;统计日-2天&#x27; AS dt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              ,unique_id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              ,REVERSE(SUBSTR(login_trace,1,3)) AS login_trace&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              ,appid&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         FROM tmp_table WHERE SUBSTR(login_trace,3,1) = &#x27;1&#x27; AND 首次活跃日期 = 统计日-2天&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) X GROUP BY dt,appid;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.4 模型数据流图&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;至此，模型的设计落地全部完成，模型包含埋点数据表2张，dw明细层模型1张，维表1张，dma轻度汇总主题层2张，dmt主题表2张，任务层深4层，模型层2层，模型数据接入0.5人日可完成。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据流图如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.96484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVZFJtgcGwsMFIgY1qy2Lv5fs05j63Ke31osicf5nv6khtXKKjIibCfJAg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图（6）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、数据展示&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;模型数据展示可基于用户行为分析平台，数据指标存储使用 MySQL 数据库，数据展示逻辑实现如下：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URV6raLsNO1fCwgOI4UvsuVhRibicpD3t3KdUPQ1XC3jMSjPkwicqnQ0t57A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图（7）&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;5.1 报表展示&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;报表配置完成后，各个分析模块的前台展示示例如下：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.51015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVB7jKEP0kkIvAhgtTh1YiaEPOMibvvuBHOXia0FcDUwTwJzf2OHhsk8Iibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图（8）应用概况报表&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVDrmbVESV6QJVqfyzTSjcEAeURHicYQS0DsKMWoh4w9y2Z29v5Rrt6fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图（9）用户留存报表&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.50546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4GpmhdsA6Px0Y1yiayw4URVzdwIibDBBbvLbaUf2JvJNmgtEAVukcJ3cfoJmLUZsk7MjicqC6kh4Psg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图（10）页面分析报表&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;六、未来展望&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;至此，H5通用分模型落地流程已介绍完毕。本文主要是基于业务初期诉求，快速落地通用的、统一的数据解决方案，满足业务分析人员在产品初期最迫切的分析需求。随着业务的不断发展迭代，运营产品的分析方向也会不断的扩展和深入，同时不同的业务关注点不同，针对分析模型的诉求也不尽相同。例如在业务中后期，简单的访问留存分析已经支撑不了更进一步的决策制定，此时针对页面访问的路径分析模型；针对营销分析的订单转化模型、归因分析模型；针对页面跳转分析的用户漏斗模型等需求会相应变多。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以，为更好的支撑业务目标达成，H5通用分析模型系列在后期会根据业务诉求落地相应的分析模型，持续为产品运营提供高效稳定的数据解决方案。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:176.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>