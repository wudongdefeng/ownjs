<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f69a1d1e108f9b49e40b0022b574c4b5</guid>
<title>究竟该如何理解「前端工程化」？</title>
<link>https://toutiao.io/k/ujjeuz5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为前端工程师，前端工程化是经常听到的概念，但虽然经常听到，很多人对它的认识依然很模糊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，提到前端工程化，他并不能说出什么是前端工程化。给出一门具体的技术，他也不能确定是不是属于工程化范畴的技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是因为他没有对前端工程化有一个概念上的认识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，这篇文章我们就来给前端工程化下个定义吧。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是前端工程化&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提到前端工程化，最容易想到的就是编译了。很多代码需要经过编译才能运行在目标环境：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;高版本的语法需要用 babel 编译成低版本的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;less、sass 要经过各自的编译器转换成 css 代码。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;TypeScript 代码需要经过 tsc 或者 babel 等编译器转成 JS 代码。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;...&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前端工程化首先要做的就是支持各种代码的编译。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最早的前端工程化是通过任务的形式组织这些编译过程的，指定对什么文件用什么编译器编译，然后输出到哪个目录。任务之间可以规定先后顺序、串行并行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gulp 就是这一类工具，叫做&lt;strong&gt;任务运行器（task runner）&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一类工具能够组织整个编译流程，对不同的文件分别做相应的处理，使之能运行在目标环境。但因为每个任务都比较独立，很难做一些全局的优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来出现了另一种思路，不通过任务组织了，而是分析模块之间的依赖关系，从入口模块开始构建一棵依赖图，中间遇到的用到的 js、css、图片等都会作为他的依赖。然后对依赖图的每个节点分别用对应的编译器处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的同学说，这个和 task runner 的方式有啥区别，不都是对不同的文件用不同的编译器处理么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那肯定有区别呀，现在有了模块之间的依赖图了，那就可以做一些全局的优化：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如通过分析依赖关系来去掉一些没有用到的代码，这叫做 tree shaking。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如把这些模块拆分到不同的分组（chunk）里，然后生成不同的文件，这样把变动频繁的模块和不咋变动的模块分到不同的 chunk，进而生成到不同的文件里，就可以更好的利用缓存，这叫做 code splitting。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且，因为生成的代码是自己控制的，有自己的 runtime 代码，那就可以配合 runtime 来实现一些功能，比如实现模块的 lazy load，也就是把 code splitting 分出来的 chunk，在运行时动态加载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这叫做&lt;strong&gt;打包工具（bundler）&lt;/strong&gt;，典型的是 webpack。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任务运行器和打包工具的区别还是很明显的：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任务运行器只是把不同的编译任务组织起来，并不参与具体的代码处理，具体处理啥文件，怎么处理都是开发者指定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而打包工具则是分析模块依赖关系，构成依赖图，通过这种方式确定处理哪些文件，可以基于这种依赖关系实现 tree shking、code splitting 等优化，并且生成的代码会有自己的 runtime，可以配合 runtime 实现 lazy load 等功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为打包工具这种明显的优势，慢慢的就取代了任务运行器，成为了构建的主流方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是打包工具也不是完美的，因为每次都要构建整个依赖图，对不同文件分别做处理，之后才能生成代码，所以当项目的模块多了就会很慢，大项目打包几分钟也是很常见的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有痛点问题，大家就会想办法去解决，所以出现了 &lt;strong&gt;no bundle&lt;/strong&gt; 的方案，也就是不打包，比如 vite。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不打包也就不会进行依赖分析，那怎么确定处理哪些文件呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;no bundle 是基于浏览器支持 es module 来实现的，浏览器会做 es module 的依赖分析，然后加载对应的模块，这样自然就不用自己做依赖分析了，只需要实现模块的编译即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，no bundle 工具会启动一个开发服务器，根据请求的模块路径来进行相应的编译，然后返回编译后的代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，生产环境还是需要打包的，会用打包工具来处理。no bundle 方案只是解决了开发环境下打包工具要构建整个依赖图导致比较慢的痛点问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们回过头来综合看一下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;构建的核心是对不同的文件做不同的编译，最早的任务运行器的方案实现了编译流程的组织，但是并没有做全局的优化，也没有自己的 runtime 代码，所以出现了基于依赖分析的打包工具，打包工具可以基于依赖分析实现 treeshking、code splitting 等优化，可以配合 runtime 代码实现 lazy load。但成也依赖分析，败也依赖分析，这个太慢了，所以出现了 no bundle 的方案，配合浏览器对 es module 的支持，只要实现对应模块的编译服务即可，不过生产环境还是要打包的。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们马后炮一下，假如回到 gulp 当时的时代，能够实现打包工具和 no bundle 服务么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还真不一定，因为打包工具的实现是基于模块规范的，很早的时候并没有，所以只能简单的对编译流程做下组织。更不用说 no bundle 还要浏览器支持 es module 了，这个也是近几年才可以的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，不管是任务运行器、打包工具、no bundle 服务都是在当时的环境下的最优的解决方案，并不是说被淘汰的就是不好的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面我们只聊了构建，那前端工程化就等于构建么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;肯定不是呀，还有很多别的方面，比如代码的规范和静态分析：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;JS 代码会用 ESLint 来禁止掉一些写法，比如 concole、debugger 的使用，还可以修复格式问题，比如缩进方式，还能检查出一些逻辑错误，比如 if 中用了赋值。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;CSS 代码也同样会用 StyleLint 来禁用一些写法，修复格式问题，检查出一些逻辑错误&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;ESLint、StyleLint 只是局部的格式修复，我们还可以用 prettier 来进行整体的格式化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果我们用了 TypeScript，那就可以用 tsc 来进行类型检查，发现代码中潜在的类型不匹配的错误&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;静态分析工具、格式化工具并不影响构建，他们一般是单独来跑的，用来发现一些代码潜在的问题，规范代码格式等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码写完之后，会上传到代码仓库，比如 gitlab，代码托管也是工程化的一部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码上线的话，需要进行构建和部署，我们可以通过 jenkins 来组织构建流程，当 gitlab 代码有新的 push 的时候触发，进行构建，然后把产物部署到服务器，基于 git hook 的构建部署流程就叫做持续集成、持续部署（CI/CD）。这也是前端工程化的一部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好像很多东西都属于前端工程化，那怎么给前端工程化下个定义呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面聊了构建、静态分析、格式化、代码托管、CI/CD，不知道大家有没有发现这些工具的共同特点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们的处理对象都是代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们只是把代码当作字符串来处理，并不管你用的是 vue、react 还是 angular，你用的啥状态管理库、动画库之类的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以说，&lt;strong&gt;前端工程化就是处理代码的一系列工具链，他们并不会运行代码，只是把代码作为字符串来进行一系列处理。编译构建、ci/cd、代码托管、静态分析、格式化等都是。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道大家是否理解了。我们来看两个例子：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们项目用了 react，公共组件比较多，所以封装了 react 的组件库。这属于前端工程化么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不属于。前端框架还有组件都是运行时才有的，工程化并不会运行代码，只会处理代码。所以组件库属于前端基建，但不属于前端工程化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们好几个项目之间公共代码比较多，所以改造成了 monorepo 的形式，也就是一个工程下保存了多个项目的代码，使用了 pnpm workspace 来作为 monorepo 的管理工具，可以自动的进行依赖的关联，统一的进行依赖安装、构建、发版等。这属于前端工程化么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;属于。monorepo 是组织代码的方式，pnpm workspace 是管理 monorepo 的工具，它也是处理代码的工具，不会运行代码，所以也属于前端工程化的范畴。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们公司自研了 IDE，集成了很多内部工具，这属于前端工程化么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;属于。IDE 是围绕代码编辑的场景来打造一系列工具链，也是处理代码但不会运行代码，所以属于前端工程化的范畴。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过这些例子，相信大家对什么是前端工程化，哪些技术属于前端工程化就比较清晰了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们是前端工程师，所以经常谈的是前端的工程化，其实别的语言也有工程化，比如 java 代码，同样需要构建、格式化、静态分析、CI/CD，所以也有工程化的概念。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实大公司都会有一个工程效能部门，他们做的就是工程化的事情，不过一般是跨语言的工程化，并不局限于前端工程化、后端工程化等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;前端工程化是指围绕代码处理的一系列工具链，他们把代码当作字符串处理，并不运行代码，包括编译构建、静态分析、格式化、CI/CD 等等。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们详细了解了编译构建的历史，从任务运行器、打包工具到 no bundle 服务的演变历史，他们都是特定时代下的产物。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再就是静态分析和格式化用的 eslint、stylelint、prettier、tsc 等工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前端工程化的范围可以很大，可以囊括很多工具进来，比如 monorepo、IDE 等等，因为在不同的场景下对代码处理，也就是工程化有不同的需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你对前端工程化有了清晰的定义之后，对于前端工程化要做哪些事情，哪些技术属于前端工程化、哪些不属于，就很容易理清了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;296&quot; data-ratio=&quot;0.5299270072992701&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/5Q3ZxrD2qNDvxh93JHfZD80m7GhBmGicoYpnLCanxmxvpVm4ACYNms63xnCgKt1Py5rvMCEDkWebYCTpfDVBq7g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong/&gt;&lt;strong&gt;&lt;span&gt;彦祖，亦菲，&lt;/span&gt;&lt;span&gt;点个&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;「在看」&lt;/strong&gt;&lt;span&gt;吧&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f61a392a332124ec9bffc84b4ad50c3c</guid>
<title>掌握了这一招，Go版本的管理不用愁</title>
<link>https://toutiao.io/k/j2wtexh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;section&gt;&lt;span&gt;今天带来一篇关于Go版本管理器gvm的小短文。&lt;/span&gt;&lt;span&gt;废话不多说，开始安装。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;安装&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你使用的mac，mac 需要先安装xcode-select，没安装过的同学可以按照如下命令进行执行安装，这里不做太多说明了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;xcode-select --install&lt;br/&gt;brew update&lt;br/&gt;brew install mercurial&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照github上面指示，我们这里按照命令行进行下载gvm-installer进行安装，终端执行有问题的同学也可以到&lt;span&gt;gvm-installer&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;页面进行clone安装。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$bash&lt;/span&gt; &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)&lt;br/&gt;Cloning from https://github.com/moovweb/gvm.git to /Users/admin/.gvm&lt;br/&gt;Created profile &lt;span&gt;for&lt;/span&gt; existing install of Go at &lt;span&gt;&quot;/opt/homebrew/Cellar/go/1.18.1/libexec&quot;&lt;/span&gt;&lt;br/&gt;Installed GVM v1.0.22&lt;br/&gt;&lt;br/&gt;Please restart your terminal session or to get started right away run&lt;br/&gt; `&lt;span&gt;source&lt;/span&gt; /Users/admin/.gvm/scripts/gvm`&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来为了使gvm生效，需要执行一下上面提示的&lt;code&gt;source /Users/admin/.gvm/scripts/gvm&lt;/code&gt;命令即可，执行结束就可以在新终端使用gvm来切换控制go的版本了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;使用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装好了，咱们就可以来简单了解一下gvm的支持的一些功能。这下可以呼唤gvm的help选项了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; &lt;span&gt;help&lt;/span&gt;&lt;br/&gt;Usage: gvm [&lt;span&gt;command&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;Description:&lt;br/&gt;  GVM is the Go Version Manager&lt;br/&gt;&lt;br/&gt;Commands:&lt;br/&gt;  version    - &lt;span&gt;print&lt;/span&gt; the gvm version number &lt;span&gt;# 查看gvm的版本&lt;/span&gt;&lt;br/&gt;  get        - gets the latest code (&lt;span&gt;for&lt;/span&gt; debugging) &lt;span&gt;# 获取最新的代码（一般为了调试）&lt;/span&gt;&lt;br/&gt;  use        - select a go version to use (--default to &lt;span&gt;set&lt;/span&gt; permanently) &lt;span&gt;# 选择使用的Go版本 （--default 可以永久设置）&lt;/span&gt;&lt;br/&gt;  diff       - view changes to Go root &lt;span&gt;# 查看Go root中的变更&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;help&lt;/span&gt;       - display this usage text &lt;br/&gt;  implode    - completely remove gvm &lt;span&gt;# 完全删除 gvm 和所有已安装的 Go 版本和包&lt;/span&gt;&lt;br/&gt;  install    - install go versions &lt;span&gt;# 安装某个版本的Go&lt;/span&gt;&lt;br/&gt;  uninstall  - uninstall go versions &lt;span&gt;# 卸载某个版本的Go&lt;/span&gt;&lt;br/&gt;  cross      - install go cross compilers &lt;span&gt;# 安装跨平台Go编译器&lt;/span&gt;&lt;br/&gt;  linkthis   - link this directory into GOPATH &lt;span&gt;# 将项目路径链接到GOPATH中&lt;/span&gt;&lt;br/&gt;  list       - list installed go versions &lt;span&gt;# 罗列已经安装的Go版本列表&lt;/span&gt;&lt;br/&gt;  listall    - list available versions &lt;span&gt;# 罗列可用的Go版本&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alias&lt;/span&gt;      - manage go version aliases &lt;span&gt;# 管理Go版本别名&lt;/span&gt;&lt;br/&gt;  pkgset     - manage go packages sets &lt;span&gt;# 管理Go包的设置&lt;/span&gt;&lt;br/&gt;  pkgenv     - edit the environment &lt;span&gt;for&lt;/span&gt; a package &lt;span&gt;set&lt;/span&gt; &lt;span&gt;# 编辑Go包集合的环境&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;gvm的简单使用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先通过&lt;code&gt;gvm listall&lt;/code&gt;命令来看下目前的Go版本列表，如下，列表太长了，这里Go1-15的版本列表省略了，可以看出最新的是Go1.19的beta和几个rc版本了。那么咱们接下来通过下载Go1.19的rc版本来做示例。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; listall&lt;br/&gt;&lt;br/&gt;gvm gos (available)&lt;br/&gt;&lt;br/&gt;   go1&lt;br/&gt;   ...&lt;br/&gt;   go1.16&lt;br/&gt;   go1.16beta1&lt;br/&gt;   go1.16rc1&lt;br/&gt;   go1.16.1&lt;br/&gt;   go1.16.2&lt;br/&gt;   go1.16.3&lt;br/&gt;   go1.16.4&lt;br/&gt;   go1.16.5&lt;br/&gt;   go1.16.6&lt;br/&gt;   go1.16.7&lt;br/&gt;   go1.16.8&lt;br/&gt;   go1.16.9&lt;br/&gt;   go1.16.10&lt;br/&gt;   go1.16.11&lt;br/&gt;   go1.16.12&lt;br/&gt;   go1.16.13&lt;br/&gt;   go1.16.14&lt;br/&gt;   go1.16.15&lt;br/&gt;   go1.17&lt;br/&gt;   go1.17beta1&lt;br/&gt;   go1.17rc1&lt;br/&gt;   go1.17rc2&lt;br/&gt;   go1.17.1&lt;br/&gt;   go1.17.2&lt;br/&gt;   go1.17.3&lt;br/&gt;   go1.17.4&lt;br/&gt;   go1.17.5&lt;br/&gt;   go1.17.6&lt;br/&gt;   go1.17.7&lt;br/&gt;   go1.17.8&lt;br/&gt;   go1.17.9&lt;br/&gt;   go1.17.10&lt;br/&gt;   go1.17.11&lt;br/&gt;   go1.17.12&lt;br/&gt;   go1.18&lt;br/&gt;   go1.18beta1&lt;br/&gt;   go1.18beta2&lt;br/&gt;   go1.18rc1&lt;br/&gt;   go1.18.1&lt;br/&gt;   go1.18.2&lt;br/&gt;   go1.18.3&lt;br/&gt;   go1.18.4&lt;br/&gt;   go1.19beta1&lt;br/&gt;   go1.19rc1&lt;br/&gt;   go1.19rc2&lt;br/&gt;   release.r56&lt;br/&gt;   release.r57&lt;br/&gt;   release.r58&lt;br/&gt;   release.r59&lt;br/&gt;   release.r60&lt;br/&gt;   release.r57.1&lt;br/&gt;   release.r57.2&lt;br/&gt;   release.r58.1&lt;br/&gt;   release.r58.2&lt;br/&gt;   release.r60.1&lt;br/&gt;   release.r60.2&lt;br/&gt;   release.r60.3&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;安装一个Go版本&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看下目前使用的Go版本，小土这里使用的是go1.18.1的版本。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$go&lt;/span&gt; version&lt;br/&gt;go version go1.18.1 darwin/arm64&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装一个最新Go1.19的rc1版本。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; install go1.19rc1&lt;br/&gt;Installing go1.19rc1...&lt;br/&gt; * Compiling...&lt;br/&gt;go1.19rc1 successfully installed!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;版本切换&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，咱们切换一下下载好的go版本，这里使用&lt;code&gt;gvm use  version&lt;/code&gt;即可切换。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; use go1.19rc1&lt;br/&gt;Now using version go1.19rc1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何永久切换呢？加上&lt;code&gt;--default&lt;/code&gt;即可永久设置，可以通过新建终端执行&lt;code&gt;go version&lt;/code&gt;,验证查看Go版本是否完全切换。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; use go1.19rc1 --default&lt;br/&gt;Now using version go1.19rc1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后我们使用&lt;code&gt;go version&lt;/code&gt;查看当前使用的Go版本，看来是切换成功了。那么你就可以来去自如地切换Go版本了。尤其是在调试不同Go版本带来的问题代码时候特别有用。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$go&lt;/span&gt; version&lt;br/&gt;go version go1.19rc1 darwin/arm64&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;升级问题排查&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若在升级Go过程中，gvm文件的状态发生错乱或者其他问题，可以通过执行&lt;code&gt;rm -rf ~/.gvm&lt;/code&gt;来删除gvm进行问题的fix。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天的短文主要介绍了一个gvm的使用，希望对大家有所帮助，更多详情可以查看&lt;span&gt;gvm&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，另外站长之前写了一篇关于升级Go版本的文章，主要讲的是使用&lt;span&gt;goup&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;来进行Go版本的管理。小土这里就不介绍了，😆，感兴趣的同学可以查看&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzY0NDE3NA==&amp;amp;mid=2247485026&amp;amp;idx=1&amp;amp;sn=dcc047b6afe0e4e4daf37f8c9e499fce&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;终于找到了一款我喜欢的安装和管理 Go 版本的工具&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;gvm-installer: &lt;em&gt;https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;gvm: &lt;em&gt;https://github.com/moovweb/gvm&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;goup: &lt;em&gt;https://github.com/owenthereal/goup&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UzjmETLXwBYuP3ncUTaemHXQYjOZDS40VoicqII73Hu9RncJv06g0kJhnrVicSmUfJRg5Wf9qcDHj7zf5vTjns5A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是 polarisxu，北大硕士毕业，曾在 360 等知名互联网公司工作，10多年技术研发与架构经验！2012 年接触 Go 语言并创建了 Go 语言中文网！著有《&lt;/span&gt;&lt;span&gt;Go语言编程之旅&lt;/span&gt;&lt;span&gt;》、开源图书《&lt;/span&gt;&lt;span&gt;Go语言标准库&lt;/span&gt;&lt;span&gt;》等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;坚持输出技术（包括 Go、Rust 等技术）、职场心得和创业感悟！欢迎关注「polarisxu」一起成长！也欢迎加我微信好友交流：&lt;/span&gt;&lt;span&gt;gopherstudio&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ffe67a3af70b68f2ad21c231a026f685</guid>
<title>RocketMQ 消息集成：多类型业务消息——定时消息</title>
<link>https://toutiao.io/k/nvsge96</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;108&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/yvBJb5Iiafvm62SLm1ZNNZqZy4p7sx1z2zvcRiaGCibBT6ptwkLNVZe1tVm1dLRaWIWK3wHSxS5cWxniaFPBNQVMNg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;引言&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Apache RocketMQ 诞生至今，历经十余年大规模业务稳定性打磨，服务了 100% 阿里集团内部业务以及阿里云数以万计的企业客户。作为金融级可靠的业务消息方案，RocketMQ 从创建之初就一直专注于业务集成领域的异步通信能力构建。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;本篇将继续业务消息集成的场景，从使用场景、应用案例、功能原理以及最佳实践等角度介绍 RocketMQ 的定时消息功能。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAJMcr2tQg4AAAAAstQy6ubaLX4KHWvLEZgBPEg4FIPCozEOqCzNPgMIvprdW4lqSqgqfdkg8ItU1z&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqztZqgwVbbBB12P46s7F6doQLU7SK2MMLeJQyxPVlkL4IOGkVl4fIpy3TdpxLKbclEnbVROGx4QzlcNscTWeiciaicw&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibAja4RIWiaVlwAELiavs4cdCY9QjsN1nycsksiboib56kI9kJk2axia6X5AYKoKEZaiaHicvg&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/0nn3FBrD9a1ibNCickvTOoVzsfSN3MTOtOlceqLCtZ6vV3RHXAmBqmGQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08119c3d5c904ea3db077cb7448ce1b497dcc26334037f75ae77e@finder&quot; data-nickname=&quot;阿里云云原生&quot; data-desc=&quot;RocketMQ 消息集成：多类型业务消息——定时消息&amp;#10;&amp;#10;在分布式定时调度触发、任务超时处理等场景，需要实现精准、可靠的定时事件触发。本期主要介绍RocketMQ定时消息，通过功能场景、应用案例以及最佳实践等角度介绍RocketMQ定时消息类型的使用。&amp;#10;&amp;#10;#RocketMQ消息集成&amp;#10;&quot; data-nonceid=&quot;4484842228834176589&quot; data-type=&quot;video&quot; data-width=&quot;1728&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;概念：什么是定时消息&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在业务消息集成场景中，定时消息是，生产者将一条消息发送到消息队列后并不期望这条消息马上会被消费者消费到，而是期望到了指定的时间，消费者才可以消费到。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;相似地，延迟消息其实是对于定时消息的另外一种解释，指的是生产者期望消息延迟一定时间，消费者才可以消费到。可以理解为定时到当前时间加上一定的延迟时间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对比一下定时消息和普通消息的流程。普通消息，可以粗略的分为消息发送，消息存储和消息消费三个过程。当一条消息发送到 Topic 之后，那么这条消息就可以马上处于等待消费者消费的状态了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;176&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.30407303370786515&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlbaFyN4tpD3Eunf98G3jQLofwUGLtglLSYaCJmLVMGbFsBRQqSF8k1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2848&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而对于定时/延时消息来说，其可以理解为在普通消息的基础上叠加了定时投递到消费者的特性。生产者发送了一条定时消息之后，消息并不会马上进入用户真正的Topic里面，而是会被 RocketMQ 暂存到一个系统 Topic 里面，当到了设定的时间之后，RocketMQ 才会将这条消息投递到真正的 Topic 里面，让消费者可以消费到。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;216&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.37430555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlKI4tIria6kiaawiae6hxTZJhoIgXFVxrdgicS4j53to1O9R17knvsCRibRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2880&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;场景：为什么需要使用定时消息&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在分布式定时调度触发、任务超时处理等场景，需要实现精准、可靠的定时事件触发。往往这类定时事件触发都会存在以下诉求：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高性能吞吐：需要大量事件触发，不能有性能瓶颈。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高可靠可重试：不能丢失事件触发。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式可扩展：定时调度不能是单机系统，需要能够均衡的调度到多个服务负载。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;传统的定时调度方案，往往基于数据库的任务表扫描机制来实现。大概的思路就是将需要定时触发的任务放到数据库，然后微服务应用定时触发扫描数据库的操作，实现任务捞取处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这类方案虽然可以实现定时调度，但往往存在很多不足之处：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重复扫描：在分布式微服务架构下，每个微服务节点都需要去扫描数据库，带来大量冗余的任务处理，需要做去重处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;定时间隔不准确：基于定时扫描的机制无法实现任意时间精度的延时调度。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;横向扩展性差：为规避重复扫描的问题，数据库扫表的方案里往往会按照服务节点拆分表，但每个数据表只能被单节点处理，这样会产生性能瓶颈。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlw5wd9D5iaeXJhLAYKwicdJUg2LPAHXHK1A2Q9kuozFvqzo43LkI1wiaWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;span&gt;在这类定时调度类场景中，使用 RocketMQ 的定时消息可以简化定时调度任务的开发逻辑，实现高性能、可扩展、高可靠的定时触发能力。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;精度高、开发门槛低：基于消息通知方式不存在定时阶梯间隔。可以轻松实现任意精度事件触发，无需业务去重。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高性能可扩展：传统的数据库扫描方式较为复杂，需要频繁调用接口扫描，容易产生性能瓶颈。消息队列 RocketMQ 版的定时消息具有高并发和水平扩展的能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;278&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.48089887640449436&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlicGdR6yiaYbCRZX5B13GgRibR6iayIoZRtISMwm28b7bHI71tLUqH1Rtrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;890&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;案例：使用定时消息实现金融支付超时需求&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;利用定时消息可以实现在一定的时间之后才进行某些操作而业务系统不用管理定时的状态。下面介绍一个典型的案例场景：金融支付超时。现在有一个订单系统，希望在用户下单 30 分钟后检查用户的订单状态，如果用户还没有支付，那么就自动取消这笔订单。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;250&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4334828101644245&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvl7gV428oPW5puLqDCI02fZtnNscp11mnKiby2r1lk7JicUQoO9QHSkSnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1338&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;基于 RocketMQ 定时消息，我们可以在用户下单之后发送一条定时到 30 分钟之后的定时消息。&lt;/span&gt;&lt;span&gt;同时，我们可以使用将订单 ID 设置为 MessageKey。&lt;/span&gt;&lt;span&gt;当 30 分钟之后，订单系统收到消息之后，就可以通过订单 ID 检查订单的状态。&lt;/span&gt;&lt;span&gt;如果用户超时未支付，那么就自动的将这笔订单关闭。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;原理：RocketMQ 定时消息如何实现&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;固定间隔定时消息&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如前文介绍，定时消息的核心是如何在特定的时间把处于系统定时 Topic 里面的消息转移到用户的 Topic 里面去。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;187&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.32299741602067183&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvl288eHGbia6pubUib3kgTMbPBBhKPXwTdsvhFg5wQrWCGhlicA7mPvTZJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1548&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Apache RocketMQ 4.x 的版本的定时消息是先将定时消息放到按照 DelayLevel 放到 SCHEDULE_TOPIC_XXXX 这个系统的不同 Queue 里面，然后为每一个 Queue 启动一个定时任务，定时的拉取消息并将到了时间的消息转投到用户的 Topic 里面去。这样虽然实现简单，但也导致只能支持特定 DelayLevel 的定时消息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当下，支持定时到任意秒级时间的定时消息的实现的 pr 提出到了社区，下面简单的介绍一下其基本的实现原理。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;时间轮算法&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在介绍具体的实现原理之前，先介绍一下经典的时间轮算法，这是定时消息实现的核心算法。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;247&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.42774936061381075&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlohQHASdjtPzWZI5Vw1bsnhOaqLbFaRibM0Xeuc6b4BFh1hWCp3g0oUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3128&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上所示，这是一个一圈定时为 7 秒的时间轮，定时的最小精度的为秒。同时，时间轮上面会有一个指向当前时间的指针，其会定时的移向下一个刻度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在我们想定时到 1 秒以后，那么就将数据放到 “1” 这个刻度里面，同时如果有多个数据需要定时到同一个时间，那么会以链表的方式添加到后面。当时间轮转到 “1” 这个刻度之后，就会将其读取并从链表出队。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那如果想定到超过时间轮一圈的时间怎么处理呢？例如我们想定时到 14 秒，由于一圈的时间是 7 秒，那么我们将其放在“6”这个刻度里面。当第一次时间轮转到“6” 时，发现当前时间小于期望的时间，那么忽略这条数据。当第二次时间轮转到“6”时，这个时候就会发现已经到了我们期望的 14 秒了。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;任意秒级定时消息&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在 RocketMQ 中，使用 TimerWheel 对于时间轮进行描述和存储，同时使用一个 AppendOnly 的 TimerLog 记录时间轮上面每一个刻度所对应的所有的消息。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;TimerLog 记录了一条定时消息的一些重要的元数据，用于后面定时的时间到了之后，将消息转移到用户的 Topic 里面去。其中几个重要的属性如下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;205&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.35384615384615387&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlYOqTLaeXudJvqx7JBv3wjI4uuoyvuj2pRWIrsBYtUTevTlWUeruVmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1040&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于 TimerWheel 来说，可以抽象的认为是一个定长的数组，数组中的每一格代表时间轮上面的一个“刻度”。TimerWheel 的一个“刻度”拥有以下属性。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;118&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2034548944337812&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvl2xgYbRjJ1SCz8ziahcOVKr2xVCicCnlWT1eMMaJIvMtdQ7bc2puFMHhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1042&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;TimerWheel 和 TimerLog 直接的关系如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;352&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6088709677419355&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlkpHjIw3XauleYUH5AJ4TUb4ud7TrjzJZJ8mdrfPwTJ2H9cnYaicvhwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;992&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TimerWheel 中的每一格代表着一个时间刻度，同时会有一个 firstPos 指向这个刻度下所有定时消息的首条 TimerLog 记录的地址，一个 lastPos 指向这个刻度下所有定时消息最后一条 TimerLog 的记录的地址。并且，对于所处于同一个刻度的的消息，其 TimerLog 会通过 prevPos 串联成一个链表。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;352&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6088709677419355&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlW3Qn4NiaVA6s20lBonCC5lPMqmdXqMqiaibTM3J61ibnyg5MBc9ibOIwmdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;992&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当需要新增一条记录的时候，例如现在我们要新增一个 “1-4”。那么就将新记录的 prevPos 指向当前的 lastPos，即 “1-3”，然后修改 lastPos 指向 “1-4”。这样就将同一个刻度上面的 TimerLog 记录全都串起来了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有了 TimerWheel 和 TimerLog 之后，我们再来看一下一条定时消息从发送到 RocketMQ 之后是怎么最终投递给用户的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;257&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.44579646017699115&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlphFde4ofCibt7CuIm5F0ck4fAhNHEN73IkTlzcl08KcPvt07ENRMicpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1808&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，当发现用户发送的是一个定时消息过后，RocketMQ 实际上会将这条消息发送到一个专门用于处理定时消息的系统 Topic 里面去&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后在 TimerMessageStore 中会有五个 Service 进行分工合作，但整体可以分为两个阶段：入时间轮和出时间轮&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于入时间轮：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TimerEnqueueGetService 负责从系统定时 Topic 里面拉取消息放入 enqueuePutQueue 等待 TimerEnqueuePutService 的处理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TimerEnqueuePutService 负责构建 TimerLog 记录，并将其放入时间轮的对应的刻度中&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;对于出时间轮：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TimerDequeueGetService 负责转动时间轮，并取出当前时间刻度的所有 TimerLog 记录放入 dequeueGetQueue&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TimerDequeueGetMessageService 负责根据 TimerLog 记录，从 CommitLog 中读取消息&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TimerDequeuePutMessageService 负责判断队列中的消息是否已经到期，如果已经到期了，那么将其投入用户的 Topic 中，等待消费消费；如果还没有到期，那么重新投入系统定时 Topic，等待重新进入时间轮。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;实战：使用定时消息&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;了解了 RocketMQ 秒级定时消息的原理后，我们看下如何使用定时消息。首先，我们需要创建一个 “定时/延时消息” 类型的 Topic，可以使用控制台或者 CLi 命令创建。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;419&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7244623655913979&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlUT8mHKy9XOIcrOCibP9Veuzl4T14MGnaR6byIKQPlAoEk97Jta9qrlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1488&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从前面可以看出，对于定时消息来说，是在发送消息的时候 “做文章”。所以，对于生产者，相对于发送普通消息，我们可以在发送的时候设置期望的投递时间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;515&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.8905405405405405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlXrfE88K6mdx4b4jLwDkmia5pvEZkWIcwsEs5OKX5zwkdCSCDDWc0Y0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1480&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当定时的时间到了之后，这条消息其实就是一条投递到用户 Topic 的普通消息而已。所以对于消费者来说，和普通消息的消费没有区别。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;447&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.774496644295302&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvn3sMBMoQiaoJPaVLnKTdmvlwicBd9kKFANQ6Y3fQKytqVdeS0kAzJmViaicQctibFSn4jvrsAcXbibvibqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1490&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注意：定时消息的实现逻辑需要先经过定时存储等待触发，定时时间到达后才会被投递给消费者。因此，如果将大量定时消息的定时时间设置为同一时刻，则到达该时刻后会有大量消息同时需要被处理，会造成系统压力过大。所以一般建议尽量不要设置大量相同触发时刻的消息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点击阅读原文，进入官网了解更多详情～&lt;/span&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8095487fccf0aeafef88e2d690b6e7ee</guid>
<title>Why not RocksDB in Streaming State?</title>
<link>https://toutiao.io/k/wkye2vn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;本文以 Apache Flink 为例，聊聊为什么 RocksDB 不是流计算引擎中理想的状态存储。Flink 中使用 RocksDB 作为大状态的存储后端，但在实际线上大规模的生产应用中，我们发现 RocksDB 和流计算场景的组合，即使在参数调优及技术优化后，也始终达不到预期的理想状态。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;背景&lt;/h1&gt;&lt;p&gt;RocksDB 是一个非常优秀的 Key-Value 存储，并且在经过 Facebook 多年的迭代和优化后，稳定性和功能的丰富性都能满足于各种主流场景的需要。我相信当开发者在进行 Embeded KV 存储选型时，RocksDB 仍然是一个很主流的选择，这可能也是为什么 Apache Flink 最初设计大状态 KeyedStateBackend 时，选择了 RocksDB 作为底层存储的原因吧（当然近年来也有不少优秀的存储如 Titan、TerarkDB 被设计出来解决新硬件和新场景下 RocksDB 不太给力的问题，在此不作讨论）。RocksDB 作为流计算引擎的状态存储，从使用者的角度来说，一般情况下并不会有很大的缺陷，但从分布式计算引擎角度来看，在实际线上大规模的生产应用中，我们会发现 RocksDB 和流计算放在一起，始终无法成为一个完美的组合。&lt;/p&gt;&lt;h1&gt;RocksDB&lt;/h1&gt;&lt;p&gt;&lt;span&gt;RocksDB&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 使用 LSM-Tree 的结构，数据以类似 Log 的方式追加写入，不断产生新文件，并通过 Compaction 合并来去除不同文件中重复、过期、已删除的 Key-Value 数据。底层文件使用 SSTable 格式，SST 文件中的 Key-Value 数据按 Key 进行排序，并以一定规则划分为多个 Data Block，并基于 Data Block 的元信息来构建 Index Block，以保证较好的读取性能。&lt;/p&gt;&lt;p&gt;SST 文件在 RocksDB 中，以不同 Level（层级）的形式来组织。数据从内存中持久化成 SST 文件后，会先存在于 L0 层，当 L0 层数据到达 Compaction 触发条件时，数据会被 compact 到 L1 层，以此类推，存活时间越长的数据，最终到达的 Level 层级会越高。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6589147286821705&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LPVpEXa2xuApNUv5GMZH2yblotfTzc5YvxljR97xjzUHf86dKCV39xqWQTfGTlxxGQQqPE642F0Jyruqx2JIgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;h2&gt;数据写入&lt;/h2&gt;&lt;p&gt;如上图所示，数据写入会经过如下的过程：序列化、API 调用、写入 Memtable、持久化到 SST 文件。RocksDB 默认（可配置）在内存中维护了 2 个 Memtable，当用户调用 RocksDB 的写入 API 时，数据会同步写入到 Memtable 中，如果 Memtable 已经写满或达到其他 flush 条件，则会转换为 Immutable Memtable，并调度 RocksDB 的 flush 线程异步对其按 Key 整理、去重等操作，并持久化成 L0 层的一个新的 SST 文件。（如果用户开启 WAL，数据会同步写入到 WAL 中）&lt;/p&gt;&lt;p&gt;这里要注意，数据的写入一定是 append-only 的，这里的写入同样包括了更新。因为 RocksDB 采用 LSM-Tree 的数据结构，所以多次写入相同 Key 的数据，会在触发 Compaction 或者 Flush 操作时进行合并，而不是直接在 Memtable 中原地更新（update in-place）。这同样适用于 Delete 操作，对于单个 Key 的删除操作，在 SST 文件中以 (Key -&amp;gt; DeleteType) 的形式存在。（Memtable 使用的数据结构默认以 Skip-List 形式存在）&lt;/p&gt;&lt;h2&gt;数据读取&lt;/h2&gt;&lt;p&gt;这里先介绍 RocksDB SST 文件在不同 Level 的特性：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;L0 层：SST 文件资身是按 Key 排序，但 L0 层的 SST 文件之间是无序的，每个 L0 层的 SST 文件之间会发生 Key Range 的重合，也就是说相同 Key 的数据可能存在于在 L0 层的每一个 SST 文件中。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;L1 ~ Ln 层：多个 L0 层的 SST 文件达到 Compaction 条件后，与若干个 L1 层文件进行 Compaction 后形成新的 L1 层 SST 文件，L1 层 SST 文件之间不会出现 Key Range 的重合，也就是说相同 Key 的数据最多只会存在于 L1 层的一个 SST 文件中（L2 ~ Ln 层同理）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;读取数据时，数据可能存在于 Memtable、Block Cache、SST 文件中。读取操作分为两种类型：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Point Lookup（点查）：先从 Memtable 和 Block Cache 中尝试获取结果，如果没有找到则会按照层级查找 SST 文件。对于 L0 层 SST 文件，先通过 KeyRange 过滤出可能包含此 Key 的 SST 文件再进行查找；再对于 L1~Ln 层的文件进行二分查找定位对应的 SST 文件并进行读取。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Range Scan：多路归并的思想，返回给用户的 Iterator 由多个 Iterator 组成：每个 Memtable、Immutable Memtable、L0 层 SST 文件、以及多个 L1 ~ Ln 层 SST 文件中构建 Iterator，并以多路归并的方式返回给用户具体的值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;上述的操作有很多默认的优化策略在此不一一列举了，比如点查操作中每个 SST 文件可以构建 bloom filter 来快速判断 Key 是否存在，遍历操作中每个 Iterator 会对底层的数据进行预读取以获得更少的 IO 次数。对于单个 SST 文件而言，它的&lt;span&gt;文件结构&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;如下所示，单个 SST 文件查询会通过对 index block 进行二分查找来定位到具体的 data block ：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;beginning_of_file&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;data block &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;// 具体的 KV 数据&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;data block &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// 具体的 KV 数据&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;data block N&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// 具体的 KV 数据&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;meta block &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; filter block&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;// Filter 信息，比如 bloom filter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;meta block &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; index block&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;              &lt;/span&gt;&lt;span&gt;// data block 对应的 index，查询中通过对 index block 进行二分查找来定位到具体的 data block &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;compression&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;range deletion&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;stats block&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;meta block K&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; future extended block&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;metaindex block&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Footer&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;                         &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;end_of_file&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;Compaction 策略&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;为什么要进行 Compaction?&lt;/strong&gt;：或者说 Compaction 有什么作用，我们都知道 Compaction 是将多个文件合并成一个文件的过程，在合并过程中会进行相同 Key 的去重，过期 Key 的删除等操作。一次 Compaction 可以简单看作将 N 个文件数据读取后，经过整理再重新写一遍的过程。在这里举两个极端的例子：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;完全不发生 Compaction：SST 文件只存在于 L0 层，由于 L0 层不保证 SST 之间的 Key Range 不发生重合，所以数据读取需要访问很多 L0 层 SST 文件，在读取性能上会非常差。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;持续发生 Compaction：假如每生成一个 SST 文件，我们就将它和其他 SST 文件进行 Compaction，那么数据写入的开销则会非常大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;可以看出，Compaction 策略的不同决定了读写放大，也决定了读写的性能，所以一个合理的 Compaction 策略其实是对读写性能的平衡，针对不同场景的需求，我们应该认真考虑其场景所适合的 Compaction 策略。RocksDB 默认提供三种 Compaction 策略，每个策略的触发条件都比较复杂，原理可看对应链接，这里仅描述一下它们的特点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Leveled Compaction（默认策略）&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;：Compaction 触发频率相对高，读放大低，写放大高&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Universal Compaction&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;：Compaction 触发频率相对低，读放大高，写放大低&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;FIFO Compaction&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;：几乎不发生 Compaction，读放大高，写放大几乎没有&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;流式场景和状态访问&lt;/h1&gt;&lt;p&gt;这里以 Apache Flink 为例来看看 Streaming State 在流式场景中是如何使用的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;场景一：WordCount，统计每 60s 内，每个 word 出现的次数&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;对于每条数据：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;Window 算子根据 word 和时间戳，找到该数据所属的窗口&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;将 word、窗口标识符（即窗口起始时间和结束时间）和其他信息（如 KeyGroup）拼接成 RocksDB 的 Key 并序列化成 byte[]&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;调用 RocksDB API 读取窗口的中间结果数据并反序列化&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;使用新 word 更新中间结果&lt;/span&gt;&lt;span&gt;&lt;span&gt;5.&lt;/span&gt;序列化中间结果并调用 RocksDB API 写入&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;场景二：A 流 Join B 流，逻辑如下&lt;/strong&gt;：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;SELECT &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;FROM a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;WHERE a&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;AND a&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;time BETWEEN b&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;time &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; INTERVAL &lt;/span&gt;&lt;span&gt;&#x27;4&#x27;&lt;/span&gt;&lt;span&gt; HOUR AND b&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;对于 A 流的每条数据（B 流同理）：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;Join 算子收到 A 流数据后，遍历 B 流的状态数据列表并逐一反序列化&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;从 B 流的状态中找到符合 Join 条件的数据并拼接起来发送给下游&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;取出 A 流状态数据列表，反序列化后将新数据 append 到列表末尾&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;A 流状态数据列表重新序列化并写入&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们发现，不管是窗口聚合还是双流 Join 的场景，&lt;strong&gt;我们可以看到状态存储的读写总是和当前数据所涉及的时间边界范围内的状态有关&lt;/strong&gt;，比如窗口聚合场景中只会对数据所在的窗口进行读写，双流 Join 场景中只会对 Join 条件中的时间范围内状态进行读取和写入，而并非像 Web 服务中的 ACID 一样去操作所有时间段的数据。这个特性点恰好也和我们常说的，越接近当前时间的数据价值越高，越久远的数据价值越低是不谋而合的。&lt;/p&gt;&lt;h1&gt;RocksDB 作为状态存储&lt;/h1&gt;&lt;p&gt;Apache Flink 目前使用 RocksDB 作为状态存储，在小状态场景下，可以使用少量冗余的资源来掩盖状态存储带来的问题；在大状态场景或是数据倾斜的场景下，我们为了流式作业的高性能吞吐需要，往往需要付出非常大的 overhead。&lt;/p&gt;&lt;h2&gt;选择哪一种 Compaction 策略？&lt;/h2&gt;&lt;p&gt;上面提到 RocksDB 内置的三种 Compaction 策略，以 &lt;strong&gt;Leveled Compaction&lt;/strong&gt; 为例，会出现以下问题：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;写放大问题&lt;/strong&gt;：Leveled Compaction 针对的是少写多读的场景，而在流式计算中，新数据的处理通常都会产生多次的状态访问和状态更新，大部分场景更接近于读写比例 1：1（比如典型的滚动窗口计算场景中间结果的 update）。频繁的数据写入会造成 Leveled Compaction 上各个层级频繁触发 Full Compaction，尤其是每次 Checkpoint 都会强制产生一个 L0 层文件，很容易就达到 Leveled Compaction 的默认触发条件。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;共振问题&lt;/strong&gt;：如果用户侧有 TaskManager 整体的 CPU 监控，我们很容易看到，每 4 个 Checkpoint 触发时间点，就会有一次 CPU 陡增的现象，并且作业的吞吐会出现明显的下降，这是因为 RocksDB 的 Leveled Compaction 默认在 L0 层的 SST 文件数量达到 4 个时就会触发 L0-&amp;gt;L1 层的 Compaction 操作，而各个 Task 的 Checkpoint 操作通常在一两分钟内同时触发，所以此时会导致 Compaction 共振问题，CPU 陡增也会影响 Task 正常的数据处理线程。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;潮汐问题&lt;/strong&gt;：通常来说，数据流量越大，RocksDB 的写入越多，Compaction 的触发越频繁。而恰好流式场景会有非常典型的潮汐现象，高峰和低峰流量往往会差好几倍，但是实际情况中，我们会发现 Compaction 的资源开销越在高峰阶段，开销越大，而真正处理作业逻辑的算力更加不够，只能通过继续增大资源的方式来缓解问题，也就造成了低峰时期的资源利用率会非常非常低。&lt;/p&gt;&lt;p&gt;对于 &lt;strong&gt;Universal Compaction&lt;/strong&gt;，会稍微好一些但仍然有类似的问题。这里我们可以着重看一下功能最少，表面看起来最鸡肋的 RocksDB 的 &lt;strong&gt;FIFO Compaction&lt;/strong&gt;，描述摘自 &lt;span&gt;wiki&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;FIFO compaction style &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; the simplest compaction strategy&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;It&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; suited &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; keeping &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt; log &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;data &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; very low overhead &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;query log &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; example&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;It&lt;/span&gt;&lt;span&gt; periodically deletes the old data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; so it&lt;/span&gt;&lt;span&gt;&#x27;s &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;basically a TTL compaction style&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;In&lt;/span&gt;&lt;span&gt; FIFO compaction&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; all files are &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; level &lt;/span&gt;&lt;span&gt;0.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;When&lt;/span&gt;&lt;span&gt; total size of the data exceeds configured size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;CompactionOptionsFIFO&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;max_table_files_size&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; we &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; the oldest table file&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;This&lt;/span&gt;&lt;span&gt; means that &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt; write amplification of data &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; always &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; addition to WAL write amplification&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;FIFO 的方式，其实是在 L0 层以 SST 文件的形式维护了一个“流”，存活时间越长的数据优先级越低，越有可能被 TTL 删除，这样就和流式场景比较相像了。不过使用 FIFO Compaction 策略会导致 L0 层文件过多，数据读取性能变差，RocksDB 也提供了一些非常简易的 Compaction 策略来缓解这一问题，我们也可以通过增加 bloom filter + cache 的形式来减少数据查询的文件 IO 次数。&lt;/p&gt;&lt;p&gt;在我看来 FIFO 是三者中最适合流式场景的 Compaction 策略，但是由于没有和 Flink 内部机制打通（比如 TTL 两边不对齐），可能会出现数据丢失的风险，我们也不推荐用户进行使用。（当然，我们可以通过 RocksDB 的 API 来自定义 Compaction 策略，或者去稍微改改 Flink or RocksDB 的源码以满足需求）&lt;/p&gt;&lt;h2&gt;Embeded Storage 和分布式计算&lt;/h2&gt;&lt;p&gt;RocksDB 是 Embeded Storage，Embeded 也就意味着在分布式计算应用中，每个 Task 维护的 DB 实例是相互隔离的，很难拿到一个&lt;strong&gt;全局视角&lt;/strong&gt;以做出最优的方案。关于状态存储，我在 &lt;span&gt;Hazelcast Jet 论文&lt;sup&gt;[7]&lt;/sup&gt;&lt;/span&gt; 中有提到过 Embeded 和 Distributed Storage 的对比，这里从另一个角度讲讲。&lt;/p&gt;&lt;p&gt;以上面提到的 Compaction 共振问题为例，如果我们像 HBase 一样，可以通过 jitter（抖动因子参数）将各个 Compaction 操作的时间错开，那么我们看到的作业输出可能是平稳且符合预期的。除此之外，扩缩容问题也是类似的，Apache Flink 中作业的扩缩容，对应着状态扩缩容示意图如下：&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6453703703703704&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/LPVpEXa2xuApNUv5GMZH2yblotfTzc5Yme10OzrlHN9kgPmR4Yde31pLofTWDZeJicKRa35R1DjLT99uhpcnicew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;rocksdb-state-rescale&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;假设算子最大允许存在 6 个 KeyGroup（任何数据都会被映射到 6 个 KeyGroup 范围内），缩容前这个算子有 3 个 Task，分别负责 {1,2}，{3,4}，{5,6} 三个 KeyGroup 的数据处理，在算子并行度从 3 调整为 2 后，新的 2 个 Task 需要处理 6 个 KeyGroup 的数据，则对应负责的 KeyGroup Range 就变成了 {1,2,3} 和 {4,5,6}。这也是流式计算中应对扩缩容的通用做法，每个 Task 会负责一定 KeyGroup Range 内的数据处理，在进行扩缩容时，KeyGroup Range 会根据 Task 的数量进行重新分配，相对应的，每个 Task 负责的 KeyGroup Range 发生变化，也就意味着之前不同 Task 中 RocksDB 实例之间需要进行数据迁移和合并。从单机存储的设计角度来考虑，在设计之初便是为了服务于单机场景，往往不会为这种扩缩容情况作过多考虑（更别提流式计算这类对扩缩容耗时敏感的场景了）。&lt;/p&gt;&lt;h2&gt;资源竞争&lt;/h2&gt;&lt;p&gt;资源竞争的问题上面已经提到，RocksDB flush 线程和 compaction 线程所用的 CPU 资源，会和作业处理数据线程的 CPU 资源产生竞争。分布式计算任务，部署在 Yarn 或者 K8s 上，为了保证其他资源（如 Memory）不到达瓶颈，通常部署的一个实例（container）上 CPU 数不会特别多，也就是个位数的级别。在这种情况下，RocksDB 的异步操作对于作业处理产生的资源竞争影响就会非常大。当然，RocksDB 的 Compaction 线程会被设置为 low-priority，但这在流式场景中数据持续流入的情况下并不起太大的作用，而且当 Compaction 过于滞后时，RocksDB 会出现 Write Stall 等现象，让 Task 的处理线程在短时间内完全 hang 住。&lt;/p&gt;&lt;h2&gt;其它&lt;/h2&gt;&lt;p&gt;除了上述问题，篇幅原因，在这里简要概括过去在工作中遇到过的其他问题（或是在流式场景中可以改进的问题）：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;序列化&lt;/strong&gt;：在 Flink 的使用下，RocksDB 并不能很好地处理 Read-Modify-Write 的场景，尤其是用户数据结构较为复杂时，现象会非常明显，一次 Update 即意味着一次读取时的反序列化和一次写入时的序列化，很多用户自定义 UDAF 时不注意存储数据结构的复杂度，这里很容易出现瓶颈。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;压缩&lt;/strong&gt;：数据的压缩和解压缩，同上。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;小文件&lt;/strong&gt;：频繁 update，造成生成的 SST 文件都是小文件。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;时间语义&lt;/strong&gt;：缺乏丰富的时间语义（比如事件时间）&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;retract&lt;/strong&gt;：retract 操作会造成大量 delete 从而降低 scan 和 seek 的性能 ....&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;p&gt;本文主要介绍了 RocksDB 的相关原理和与流式场景结合时存在的若干问题。这并不影响用户继续使用 RocksDBStateBackend 作为大状态的存储后端，只是期待未来会有一个跟流式场景更加贴合的 Storage 吧，可能是 Embeded Storage，也可能是 Distributed Storage，随着流式场景越来越流行，这件事情一定会有人在做或者即将准备做的。&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; RocksDB: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/RocksDB-Overview&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 文件结构: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/Rocksdb-BlockBasedTable-Format#file-format&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; Leveled Compaction（默认策略）: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/Leveled-Compaction&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; Universal Compaction: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/Universal-Compaction&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; FIFO Compaction: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/FIFO-compaction-style&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; wiki: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/FIFO-compaction-style&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[7]&lt;/code&gt; Hazelcast Jet 论文: &lt;em&gt;http://www.liaojiayi.com/Hazelcast-jet/&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c4bf873050e5f75b5ead713547698e17</guid>
<title>十种实现延迟任务的方案</title>
<link>https://toutiao.io/k/72twanf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;延迟任务，相信大家都不陌生，很多业务场景都会用到。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;js_darkmode__1&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;js_darkmode__1&quot;&gt;&lt;span&gt;比如，你在淘宝上买了件商品，收到货物后，很少有人主动去点 “确认收货”，但细心的我们发现，经过若干天后，系统会自动确认收货，完结订单。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;js_darkmode__1&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;js_darkmode__1&quot;&gt;&lt;span&gt;这是怎么回事？&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdBduS6EiatWo08iblKT72jaG4G7Z7YDg9ZkurncaiaO84nmXJgoAdUtlB9l1vCT1sAyIQkwxXMIXicHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdBduS6EiatWo08iblKT72jaG4G7Z7YDg9ZkurncaiaO84nmXJgoAdUtlB9l1vCT1sAyIQkwxXMIXicHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdBduS6EiatWo08iblKT72jaG4G7Z7YDg9ZkurncaiaO84nmXJgoAdUtlB9l1vCT1sAyIQkwxXMIXicHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;什么是延迟任务？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;顾明思议，我们把需要延迟执行的任务叫做延迟任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;延迟任务的使用场景有以下这些：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;红包 24 小时未被查收，需要延迟执退还业务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个月账单日，需要给用户发送当月的对账单；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;订单下单之后 30 分钟后，用户如果没有付钱，系统需要自动取消订单。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;等事件都需要使用延迟任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;延迟任务实现思路分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;延迟任务实现的关键是在某个时间节点执行某个任务。基于这个信息我们可以想到实现延迟任务的手段有以下两个：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自己手写一个“死循环”一直判断当前时间节点有没有要执行的任务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;借助 JDK 或者第三方提供的工具类来实现延迟任务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而通过 JDK 实现延迟任务我们能想到的关键词是：DelayQueue、ScheduledExecutorService，而第三方提供的延迟任务执行方法就有很多了，例如：Redis、Netty、MQ 等手段。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;延迟任务实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;下面我们将结合代码来讲解每种延迟任务的具体实现。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案1、无限循环实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;此方式我们需要开启一个无限循环一直扫描任务，然后使用一个 Map 集合用来存储任务和延迟执行的时间，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.time.Instant;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.time.LocalDateTime;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayTaskExample&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-snippet__type&quot;&gt;Long&lt;/span&gt;&amp;gt; _TaskMap = new &lt;span class=&quot;code-snippet__type&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt;[] args) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.out.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;程序启动时间：&quot;&lt;/span&gt; + &lt;span class=&quot;code-snippet__type&quot;&gt;LocalDateTime&lt;/span&gt;.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        _TaskMap.put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;task-1&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__type&quot;&gt;Instant&lt;/span&gt;.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;).toEpochMilli()); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        loopTask();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; void loopTask() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Long&lt;/span&gt; itemLong = 0L;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__type&quot;&gt;Iterator&lt;/span&gt; it = _TaskMap.entrySet().iterator();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (it.hasNext()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__type&quot;&gt;Map&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Entry&lt;/span&gt; entry = (&lt;span class=&quot;code-snippet__type&quot;&gt;Map&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Entry&lt;/span&gt;) it.next();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                itemLong = (&lt;span class=&quot;code-snippet__type&quot;&gt;Long&lt;/span&gt;) entry.getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__type&quot;&gt;Instant&lt;/span&gt;.now().toEpochMilli() &amp;gt;= itemLong) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.out.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;执行任务：&quot;&lt;/span&gt; + entry.getKey() +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; ，执行时间：&quot;&lt;/span&gt; + &lt;span class=&quot;code-snippet__type&quot;&gt;LocalDateTime&lt;/span&gt;.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    _TaskMap.remove(entry.getKey());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序执行的结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;程序启动时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T18&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:51&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28.188&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;执行任务：&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;task-1&lt;/span&gt; ，执行时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T18&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:51&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:31.189&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看出任务延迟了 3s 钟执行了，符合我们的预期。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Java API 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Java API 提供了两种实现延迟任务的方法：DelayQueue 和 ScheduledExecutorService。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;ScheduledExecutorService 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们可以使用 ScheduledExecutorService 来以固定的频率一直执行任务，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayTaskExample&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;程序启动时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        scheduledExecutorServiceTask();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;scheduledExecutorServiceTask&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ScheduledExecutorService executor = Executors.newScheduledThreadPool(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        executor.scheduleWithFixedDelay(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Runnable() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;执行任务&quot;&lt;/span&gt; +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; ，执行时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                TimeUnit.SECONDS);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序执行的结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;程序启动时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T21&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:10.416&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;执行任务 ，执行时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T21&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:12.421&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;执行任务 ，执行时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T21&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:14.422&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;......&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看出使用 ScheduledExecutorService#scheduleWithFixedDelay(...) 方法之后，会以某个频率一直循环执行延迟任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案3、&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;DelayQueue 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;DelayQueue 是一个支持延时获取元素的无界阻塞队列，队列中的元素必须实现 Delayed 接口，并重写 getDelay(TimeUnit) 和 compareTo(Delayed) 方法，DelayQueue 实现延迟队列的完整代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        DelayQueue delayQueue = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DelayQueue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        delayQueue.put(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DelayElement(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        delayQueue.put(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DelayElement(&lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        delayQueue.put(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DelayElement(&lt;span class=&quot;code-snippet__number&quot;&gt;5000&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;开始时间：&quot;&lt;/span&gt; +  DateFormat.getDateTimeInstance().format(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Date()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (!delayQueue.isEmpty()){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(delayQueue.take());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;结束时间：&quot;&lt;/span&gt; +  DateFormat.getDateTimeInstance().format(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Date()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayElement&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Delayed&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; delayTime = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayElement&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; delayTime)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.delayTime = (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.delayTime + delayTime);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getDelay&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(TimeUnit unit)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; unit.convert(delayTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Delayed o)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.getDelay(TimeUnit.MILLISECONDS) &amp;gt; o.getDelay(TimeUnit.MILLISECONDS)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.getDelay(TimeUnit.MILLISECONDS) &amp;lt; o.getDelay(TimeUnit.MILLISECONDS)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;code-snippet__title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; DateFormat.getDateTimeInstance().format(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Date(delayTime));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序执行的结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;开始时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:38&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:39&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:41&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:43&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;结束时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:43&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Redis 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用 Redis 实现延迟任务的方法大体可分为两类：通过 zset 数据判断的方式，和通过键空间通知的方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;方案4、通过数据判断的方式&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们借助 zset 数据类型，把延迟任务存储在此数据集合中，然后在开启一个无线循环查询当前时间的所有任务进行消费，实现代码如下（需要借助 Jedis 框架）：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; redis.clients.jedis.Jedis;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; utils.JedisUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.time.Instant;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Set;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayQueueExample&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String _KEY = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;myDelayQueue&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Jedis jedis = JedisUtils.getJedis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; delayTime = Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;).getEpochSecond();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, delayTime, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;).getEpochSecond(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;).getEpochSecond(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_3&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;).getEpochSecond(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_4&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;).getEpochSecond(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_5&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        doDelayQueue(jedis);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;doDelayQueue&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Jedis jedis)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前时间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Instant nowInstant = Instant.now();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; lastSecond = nowInstant.plusSeconds(-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;).getEpochSecond(); &lt;span class=&quot;code-snippet__comment&quot;&gt;// 上一秒时间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; nowSecond = nowInstant.getEpochSecond();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 查询当前时间的所有任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Set&amp;lt;String&amp;gt; data = jedis.zrangeByScore(_KEY, lastSecond, nowSecond);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (String item : data) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 消费任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;消费：&quot;&lt;/span&gt; + item);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 删除已经执行的任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            jedis.zremrangeByScore(_KEY, lastSecond, nowSecond);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Thread.sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;); &lt;span class=&quot;code-snippet__comment&quot;&gt;// 每秒轮询一次&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;方案5、通过键空间通知&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;默认情况下 Redis 服务器端是不开启键空间通知的，需要我们通过 config set notify-keyspace-events Ex 的命令手动开启，开启键空间通知后，我们就可以拿到每个键值过期的事件，我们利用这个机制实现了给每个人开启一个定时任务的功能，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; redis.clients.jedis.Jedis;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; redis.clients.jedis.JedisPubSub;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; utils.JedisUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; TaskExample {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; final &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; _TOPIC = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;__keyevent@0__:expired&quot;&lt;/span&gt;; &lt;span class=&quot;code-snippet__comment&quot;&gt;// 订阅频道名称&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[] args) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Jedis jedis = JedisUtils.getJedis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 执行定时任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        doTask(jedis);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 订阅过期消息，执行定时任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * @param jedis Redis 客户端&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; doTask(Jedis jedis) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 订阅过期消息&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.psubscribe(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; JedisPubSub() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; onPMessage(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; pattern, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; channel, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; message) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 接收到消息，执行定时任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;收到消息：&quot;&lt;/span&gt; + message);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }, _TOPIC);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案6、Netty 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Netty 是由 JBOSS 提供的一个 Java 开源框架，它是一个基于 NIO 的客户、服务器端的编程框架，使用 Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、服务端应用。Netty 相当于简化和流线化了网络应用的编程开发过程，例如：基于 TCP 和 UDP 的 socket 服务开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以使用 Netty 提供的工具类 HashedWheelTimer 来实现延迟任务，实现代码如下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先在项目中添加 Netty 引用，配置如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/io.netty/netty-common --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.netty&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;netty-common&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.1.48.Final&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;Netty 实现的完整代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayTaskExample&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;程序启动时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        NettyTask();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 基于 Netty 的延迟任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;NettyTask&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 创建延迟任务实例&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        HashedWheelTimer timer = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashedWheelTimer(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__comment&quot;&gt;// 时间间隔&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                TimeUnit.SECONDS,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;); &lt;span class=&quot;code-snippet__comment&quot;&gt;// 时间轮中的槽数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 创建一个任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        TimerTask task = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TimerTask() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Timeout timeout&lt;/span&gt;) throws Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;执行任务&quot;&lt;/span&gt; +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; ，执行时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 将任务添加到延迟队列中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        timer.newTimeout(task, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, TimeUnit.SECONDS);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序执行的结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;程序启动时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T10&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:16&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:23.033&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;执行任务 ，执行时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T10&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:16&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:26.118&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;HashedWheelTimer 是使用定时轮实现的，定时轮其实就是一种环型的数据结构，可以把它想象成一个时钟，分成了许多格子，每个格子代表一定的时间，在这个格子上用一个链表来保存要执行的超时任务，同时有一个指针一格一格的走，走到那个格子时就执行格子对应的延迟任务，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5205811138014528&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/HrWw6ZuXCsjJ5ZkIvjsIlossH2WTNtSJA2D4ELea2Kias5Ie6SugsBuWrHkC8GokGnRibBqRvZFGeaIuEPTEgBeA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;413&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(图片来源于网络)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上的图片可以理解为，时间轮大小为 8，某个时间转一格（例如 1s），每格指向一个链表，保存着待执行的任务。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案7、8 MQ 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果专门开启一个 MQ 中间件来执行延迟任务，就有点杀鸡用宰牛刀般的奢侈了，不过已经有了 MQ 环境的话，用它来实现延迟任务的话，还是可取的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;几乎所有的 MQ 中间件都可以实现延迟任务，在这里更准确的叫法应该叫延队列。本文就使用 RabbitMQ 为例，来看它是如何实现延迟任务的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;RabbitMQ 实现延迟队列的方式有两种：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 rabbitmq-delayed-message-exchange 插件实现延迟功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注意：延迟插件 rabbitmq-delayed-message-exchange 是在 RabbitMQ 3.5.7 及以上的版本才支持的，依赖 Erlang/OPT 18.0 及以上运行环境。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于使用死信交换器比较麻烦，所以推荐使用第二种实现方式 rabbitmq-delayed-message-exchange 插件的方式实现延迟队列的功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，我们需要下载并安装 rabbitmq-delayed-message-exchange 插件，下载地址：http://www.rabbitmq.com/community-plugins.html&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;选择相应的对应的版本进行下载，然后拷贝到 RabbitMQ 服务器目录，使用命令 rabbitmq-plugins enable rabbitmq_delayed_message_exchange 开启插件，在使用命令 rabbitmq-plugins list 查询安装的所有插件，安装成功如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37130801687763715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HrWw6ZuXCsjJ5ZkIvjsIlossH2WTNtSJbwicYpVV6eFDmuW6bicqlz8Hu5sgNHebX2Uy5toiavDf1sicqsYOtGgzeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;474&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后重启 RabbitMQ 服务，使插件生效。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，我们先要配置消息队列，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.example.rabbitmq.mq.DirectConfig;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.*;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayedConfig&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; String QUEUE_NAME = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;delayed.goods.order&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; String EXCHANGE_NAME = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;delayedec&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Queue &lt;span class=&quot;code-snippet__title&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Queue(DelayedConfig.QUEUE_NAME);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 配置默认的交换机&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;CustomExchange &lt;span class=&quot;code-snippet__title&quot;&gt;customExchange&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Map&amp;lt;String, Object&amp;gt; args = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        args.put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;x-delayed-type&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;direct&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;//参数二为类型：必须是x-delayed-message&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; CustomExchange(DelayedConfig.EXCHANGE_NAME, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;x-delayed-message&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;, args);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 绑定队列到交换器&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;Binding &lt;span class=&quot;code-snippet__title&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Queue queue, CustomExchange exchange)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; BindingBuilder.bind(queue).to(exchange).with(DelayedConfig.QUEUE_NAME).noargs();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;然后添加增加消息的代码，具体实现如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.AmqpException;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.AmqpTemplate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.Message;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.MessagePostProcessor;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayedSender&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; AmqpTemplate rabbitTemplate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String msg)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleDateFormat sf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;发送时间：&quot;&lt;/span&gt; + sf.format(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Date()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rabbitTemplate.convertAndSend(DelayedConfig.EXCHANGE_NAME, DelayedConfig.QUEUE_NAME, msg, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; MessagePostProcessor() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Message &lt;span class=&quot;code-snippet__title&quot;&gt;postProcessMessage&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Message message)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; AmqpException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                message.getMessageProperties().setHeader(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;x-delay&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; message;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;再添加消费消息的代码：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;.RabbitHandler;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;.RabbitListener;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@RabbitListener(queues = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;delayed.goods.order&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayedReceiver&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@RabbitHandler&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void process(String msg) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleDateFormat sdf = new SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;接收时间:&quot;&lt;/span&gt; + sdf.format(new Date()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;消息内容：&quot;&lt;/span&gt; + msg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;最后，我们使用代码测试一下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.example.rabbitmq.RabbitmqApplication;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.example.rabbitmq.mq.delayed.DelayedSender;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.junit.runner.RunWith;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.boot.test.context.SpringBootTest;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.test.context.junit4.SpringRunner;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__type&quot;&gt;RunWith&lt;/span&gt;(&lt;span class=&quot;code-snippet__type&quot;&gt;SpringRunner&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__type&quot;&gt;SpringBootTest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayedTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @&lt;span class=&quot;code-snippet__type&quot;&gt;Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;DelayedSender&lt;/span&gt; sender;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @&lt;span class=&quot;code-snippet__type&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void &lt;span class=&quot;code-snippet__type&quot;&gt;Test&lt;/span&gt;() &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;InterruptedException&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;SimpleDateFormat&lt;/span&gt; sf = new &lt;span class=&quot;code-snippet__type&quot;&gt;SimpleDateFormat&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sender.send(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hi Admin.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Thread&lt;/span&gt;.sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;); &lt;span class=&quot;code-snippet__comment&quot;&gt;//等待接收程序执行之后，再退出测试&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序的执行结果如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;发送时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:47&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:51&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;接收时间&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:2020-04-13&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:47&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:54&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;消息内容：&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Hi&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Admin&lt;/span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从结果可以看出，以上程序执行符合延迟任务的实现预期。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案9、使用 Spring 定时任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你使用的是 Spring 或 SpringBoot 的项目的话，可以使用借助 Scheduled 来实现，本文将使用 SpringBoot 项目来演示 Scheduled 的实现，实现我们需要声明开启 Scheduled，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@EnableScheduling&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Application&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SpringApplication.run(Application.class, args);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;然后添加延迟任务，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ScheduleJobs&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Scheduled&lt;/span&gt;(fixedDelay = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;fixedDelayJob&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;任务执行，时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;此时当我们启动项目之后就可以看到任务以延迟了 2s 的形式一直循环执行，结果如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;任务执行，时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T14&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:07&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:53.349&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;任务执行，时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T14&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:07&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:55.350&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;任务执行，时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T14&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:07&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:57.351&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们也可以使用 Corn 表达式来定义任务执行的频率，例如使用 @Scheduled(cron = &quot;0/4 * * * * ?&quot;) 。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案10、Quartz 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Quartz 是一款功能强大的任务调度器，可以实现较为复杂的调度功能，它还支持分布式的任务调度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们使用 Quartz 来实现一个延迟任务，首先定义一个执行任务代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.quartz.JobExecutionContext;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.quartz.JobExecutionException;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.scheduling.quartz.QuartzJobBean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.time.LocalDateTime;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SampleJob&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;QuartzJobBean&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;executeInternal&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(JobExecutionContext jobExecutionContext)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; JobExecutionException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;任务执行，时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;在定义一个 JobDetail 和 Trigger 实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.quartz.*;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;.Bean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;.Configuration;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SampleScheduler&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; JobDetail sampleJobDetail() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; JobBuilder.newJob(SampleJob.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;).withIdentity(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;sampleJob&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                .storeDurably().build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Trigger sampleJobTrigger() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 3s 后执行&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleScheduleBuilder scheduleBuilder =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;).withRepeatCount(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; TriggerBuilder.newTrigger().forJob(sampleJobDetail()).withIdentity(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;sampleTrigger&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                .withSchedule(scheduleBuilder).build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;最后在 SpringBoot 项目启动之后开启延迟任务，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.boot.CommandLineRunner;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.scheduling.quartz.SchedulerFactoryBean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt; * SpringBoot 项目启动后执行&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MyStartupRunner&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; SchedulerFactoryBean schedulerFactoryBean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; SampleScheduler sampleScheduler;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String... args)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 启动定时任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        schedulerFactoryBean.getScheduler().scheduleJob(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                sampleScheduler.sampleJobTrigger());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序的执行结果如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13&lt;/span&gt; 19&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:02&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:12.331&lt;/span&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;INFO&lt;/span&gt; 17768 &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-attr&quot;&gt;[  restartedMain]&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.example&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.DemoApplication&lt;/span&gt;         : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Started&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;DemoApplication&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;in&lt;/span&gt; 1&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.815&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;seconds&lt;/span&gt; (&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;JVM&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;for&lt;/span&gt; 3&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.088&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;任务执行，时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T19&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:02&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:15.019&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从结果可以看出在项目启动 3s 之后执行了延迟任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文讲了延迟任务的使用场景，以及延迟任务的 10 种实现方式：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;手动无限循环；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;ScheduledExecutorService；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DelayQueue；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Redis zset 数据判断的方式；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Redis 键空间通知的方式；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Netty 提供的 HashedWheelTimer 工具类；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RabbitMQ 死信队列；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RabbitMQ 延迟消息插件 rabbitmq-delayed-message-exchange；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Spring Scheduled；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Quartz。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651515017&amp;amp;idx=1&amp;amp;sn=a290eb47d904f571a52ed0538dabf8e1&amp;amp;chksm=bd2584f68a520de01e5df6932e8ef341108b9b733b43ce79c090c99a35ac15eb373594f3ec9b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;延时消息常见实现方案&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;延时消息常见实现方案&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651479415&amp;amp;idx=1&amp;amp;sn=1676ed0dcad2863036d54888e07c528f&amp;amp;chksm=bd2531088a52b81e2e44bb1fd75f42f237dc855d59b63486da770115103c5160bca4c98c19f0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SpringBoot 定时任务踩坑记录&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;SpringBoot 定时任务踩坑记录&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651479415&amp;amp;idx=1&amp;amp;sn=1676ed0dcad2863036d54888e07c528f&amp;amp;chksm=bd2531088a52b81e2e44bb1fd75f42f237dc855d59b63486da770115103c5160bca4c98c19f0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SpringBoot 定时任务踩坑记录&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651513303&amp;amp;idx=1&amp;amp;sn=f24b13d9d2ca23c8296f657ead20c6b5&amp;amp;chksm=bd258da88a5204be37a07c0078e6137ec0999421ebcf528ae86fccc32fc79d36628e35f811e0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;几种简单实用的分布式定时任务！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;几种简单实用的分布式定时任务！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>