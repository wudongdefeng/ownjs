<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e738c34aefdcc735e7690a81907c4b7c</guid>
<title>全网最通透：MySQL 的 redo log 保证数据不丢的原理</title>
<link>https://toutiao.io/k/1x2qzr6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-yvdm7v&quot; options=&quot;[object Object]&quot;&gt;&lt;p data-first-child=&quot;&quot; data-pid=&quot;wV3Oy55c&quot;&gt;&lt;b&gt;欢迎关注公众号：柳双六&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;LFXAnM2e&quot;&gt;总会有面试官问：你知道 MySQL 如何保障数据不丢的吗？实际上这个问题是十分不准确的，MySQL 保障数据不丢的手段可太多了。但通常面试官想听的内容就是 redo log 两段式提交是如何保障数据不丢的。（不过个人感觉这么说还是不太准确）&lt;/p&gt;&lt;p data-pid=&quot;dDrk32N2&quot;&gt;所谓「redo log」，意即「重做日志」，也就是用来恢复数据用的日志。所谓「两段式提交」，也被称作「两阶段提交」（Two-Phase Commit，简称 2PC）。本文主要讲 MySQL 内部 XA 事务中 redo log 两段式提交的细节。为了让大家饱餐一顿，我会先为大家上亿点点前菜，虽然有点多，但是相信会很开胃。&lt;/p&gt;&lt;h3 id=&quot;h_552706911_0&quot; data-into-catalog-status=&quot;&quot;&gt;开胃前菜&lt;/h3&gt;&lt;p data-pid=&quot;TBkhXklU&quot;&gt;你知道什么是存储引擎、随机 IO 和顺序 IO吗？你知道 MySQL 中的缓冲池吗？binlog、redo log 听说过吗？都有什么用？什么？你都不知道？面试结束了。&lt;/p&gt;&lt;p data-pid=&quot;dJJ8VU-S&quot;&gt;&lt;b&gt;什么是存储引擎？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;A3Y4FkZs&quot;&gt;存储引擎是 MySQL 中直接与磁盘交互部分。页是存储引擎读写数据的最小单位，一个页里可以有一条或多条表记录。MySQL 中的存储引擎有很多种，比如 InnoDB、MyISAM、Memory 等。其中最常用的是 InnoDB。而 InnoDB 是 MySQL 中唯一能够完整支持事务特性的存储引擎，也是一个高性能的存储引擎。本文要讲的「两段式提交」就发生在 InnoDB 中。&lt;/p&gt;&lt;p data-pid=&quot;h6fHBt3x&quot;&gt;&lt;b&gt;什么是随机 IO 和顺序 IO？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;F67Sgg2b&quot;&gt;磁盘读写数据的两种方式。随机 IO 需要先找到地址，再读写数据，每次拿到的地址都是随机的。就像送外卖，每一单送的地址都不一样，到处跑，效率极低。而顺序 IO，由于地址是连贯的，找到地址后，一次可以读写许多数据，效率比较高。就像送外卖，所有的单子地址都在一栋楼，一下可以送很多，效率很高。&lt;/p&gt;&lt;p data-pid=&quot;mRzDDMun&quot;&gt;&lt;b&gt;什么是缓冲池？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;4itN5Yl8&quot;&gt;关系型数据库的特点就是需要对磁盘中大量的数据进行存取，所以有时候也被叫做基于磁盘的数据库。正是因为数据库需要频繁对磁盘进行 IO 操作，为了改善因为直接读写磁盘导致的 IO 性能问题，所以引入了缓冲池。&lt;/p&gt;&lt;p data-pid=&quot;zqvYEI4h&quot;&gt;缓冲池是一片内存区域，存储引擎在读取数据时，会先将页读取到缓冲池中。下次读取时，先判断是否在缓冲池，如果在，则直接读取，否则从磁盘中读取。在修改数据时，如果缓冲池中不存在所需的数据页，则从磁盘读入缓冲池，否则直接对缓冲池中的数据页进行修改。&lt;/p&gt;&lt;p data-pid=&quot;GvJYZWUf&quot;&gt;这样的好处是，如果我们频繁修改某一个位于磁盘的数据页，我们可以不用每次都去磁盘读写（注意是读和写）该页，而是直接对缓冲池中的内容修改，在一定的时机再把数据刷新到磁盘。这样就会使得对磁盘的多次操作变为一次。即便修改的内容在磁盘中相距较远的不同数据页上，我们也可以将对多次对磁盘的 IO 合并为一次随机 IO。被修改的数据页会与磁盘上的数据产生短暂的不一致，我们称此时缓冲池中的数据页为&lt;b&gt;脏页&lt;/b&gt;，将该页刷到磁盘的操作称为&lt;b&gt;刷脏页&lt;/b&gt;（本句是重点，后面要吃）。这个刷脏页的时机我们看看就好：[^1]&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;HyHKD4ih&quot;&gt;每 10 秒必刷新一次&lt;/li&gt;&lt;li data-pid=&quot;68lvz4VR&quot;&gt;脏页太多时（默认占比超过 &lt;code&gt;innodb_max_dirty_pages_pct&lt;/code&gt; 配置的值时刷新）&lt;/li&gt;&lt;li data-pid=&quot;19NYav0L&quot;&gt;redo log 空间不足时&lt;/li&gt;&lt;li data-pid=&quot;OFcAClMj&quot;&gt;数据库关闭时&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;U3od1Hvg&quot;&gt;由于这个刷脏页的过程还是异步的，这样更新操作就不需要等待磁盘的 IO 操作了。因此这些特点极大地提升了 InnoDB 的性能。&lt;/p&gt;&lt;p data-pid=&quot;AzEmhbH9&quot;&gt;&lt;b&gt;什么是binlog？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;8HlNriYQ&quot;&gt;binlog 是 MySQL 服务器层面实现的一种二进制日志，用于记录所有对数据库的更改操作（这种日志被称为逻辑日志）。比如你 update 一条记录，服务器就会记录一条对应的信息到 binlog。但在 InnoDB 中，这个 binlog 是以事务为单位刷新到磁盘的[^2]。基于 binlog 的这种特性，一般我们会将 binlog 用于以下几个方面：[^2]&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;bLpLP_BZ&quot;&gt;数据库增量备份与恢复：在使用备份还原数据后，可以使用 binlog 中记录的内容对备份时间点（简称备份点）后的数据进行恢复。因为 binlog 会还会记录下更改操作的时间，所以 binlog 可以恢复到某一具体时间点的数据。这就为我们删库后提供了除跑路以外的第二个选项：使用 binlog 恢复数据。&lt;/li&gt;&lt;li data-pid=&quot;czAieDsB&quot;&gt;主从复制：MySQL 从服务器可以通过订阅 binlog 实现对主服务器的增量复制。&lt;/li&gt;&lt;li data-pid=&quot;hKhit9N6&quot;&gt;审计：通过对 binlog 中的数据进行审计，判断是否存在安全问题，比如 SQL 注入。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;kATyxzof&quot;&gt;使用 binlog 进行恢复的流程是：[^5]&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;QlzXpLBo&quot;&gt;先通过最新的备份恢复数据库的数据，并记录下备份文件备份的时间点。&lt;/li&gt;&lt;li data-pid=&quot;QzgSfi1Q&quot;&gt;在 binlog 中找到这个时间点，提取这个时间点以后的数据用于实现对备份点后数据的恢复（这个特性被称为 Point in Time，简称 PIT）。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;1Ml5hzyH&quot;&gt;&lt;b&gt;各个部分之间的关系&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1cceff1e162d155afd524c30f4fd8448_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1147&quot; data-rawheight=&quot;954&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-1cceff1e162d155afd524c30f4fd8448_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1147&quot; data-rawheight=&quot;954&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-1cceff1e162d155afd524c30f4fd8448_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-1cceff1e162d155afd524c30f4fd8448_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h3 id=&quot;h_552706911_1&quot; data-into-catalog-status=&quot;&quot;&gt;正餐开始&lt;/h3&gt;&lt;p data-pid=&quot;-A7-8G6i&quot;&gt;食欲打开了，后面的内容我们就能吃的下了。&lt;/p&gt;&lt;p data-pid=&quot;o9BJiBpc&quot;&gt;&lt;b&gt;什么是 redo log？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;c6ODT4Bo&quot;&gt;前面我们讲到数据页在缓冲池中被修改会变成脏页。如果这时宕机，脏页就会失效，这就导致我们修改的数据丢失了，也就无法保证事务的持久性。保证数据不丢，就是 redo log 的一个重要功能。我们已经了解，如果我们修改了缓冲池中的数据页就立刻刷脏页，会产生大量随机 IO，导致磁盘性能变差；但如果我们先写缓冲，一段时间后再刷脏页，就有可能造成数据丢失，无法保证事务的持久性。这可有点难了。&lt;/p&gt;&lt;p data-pid=&quot;DONtT_At&quot;&gt;于是救世主来了，救世主的名字叫 &lt;b&gt;WAL（Write-Ahead Logging，日志先行）&lt;/b&gt;。即：事务提交前先写日志，再修改页（修改页的时机就是刷脏页的时机）。这里所谓的日志，就是 redo log。redo log 不会记录对整个页的修改，而是大概像这种： &lt;/p&gt;&lt;p data-pid=&quot;tPZkzyEG&quot;&gt;记录下对磁盘中某某页某某位置数据的修改结果（这种日志被称为物理日志），这样会节省很多磁盘空间。&lt;b&gt;由于 redo log 是顺序写（顺序 IO），因此能有效提升 IO 效率；又因为每次事务提交前会先写 redo log，因此可以保障更新的数据不丢失。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;4tG7yjJ4&quot;&gt;我们知道，一旦脏页刷新，磁盘上对应的 redo log 就会失效，所以 redo log 用完后，可以再回头使用，这样更节省空间。直到需要刷 redo log buffer 时发现接下来的 redo log 对应的脏页未被刷新，此时会强制刷新脏页。缓冲池的好处我们前面已经讲过，所以 redo log 弄了个类似作用的 redo log buffer。在写 redo log 时会先写 redo log buffer，并在以下时机将 redo log 刷新到磁盘：[^3]&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;CMICW4TW&quot;&gt;每秒刷新一次&lt;/li&gt;&lt;li data-pid=&quot;PmwHh3rb&quot;&gt;事务提交时&lt;/li&gt;&lt;li data-pid=&quot;Hu5uscDY&quot;&gt;redo log buffer 剩余空间小于 1/2 时&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;o70V0AH2&quot;&gt;我们理应想到，如果脏页没刷完，数据库宕机了，那么必然是需要使用 redo log 来恢复数据的。那么 redo log 应该从哪开始恢复数据呢？为解决这个问题 InnoDB 为 redo log 记录了序列号，这被称为 LSN（Log Sequence Number），可以理解为偏移量，越新的日志 LSN 越大。InnoDB 用检查点（&lt;code&gt;checkpoint_lsn&lt;/code&gt;）指示未被刷盘的数据从这里开始，用 &lt;code&gt;lsn&lt;/code&gt; 指示下一个应该被写入日志的位置。不过由于有 redo log buffer 的缘故，实际被写入磁盘的位置往往比 &lt;code&gt;lsn&lt;/code&gt; 要小。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d48467dc645cca4a5fad2aaeff9063fc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1154&quot; data-rawheight=&quot;792&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-d48467dc645cca4a5fad2aaeff9063fc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1154&quot; data-rawheight=&quot;792&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-d48467dc645cca4a5fad2aaeff9063fc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d48467dc645cca4a5fad2aaeff9063fc_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;8SNUaJlm&quot;&gt;为了大家能有个更整体的概念，咱们再多吃一道配菜：undo log。InnoDB 能够保证对事务的完整支持，这主要就得益于 redo log 和 undo log。redo log 我们讲了，能够保证缓冲池中被修改的数据页不丢以及在数据库宕机后对丢失的数据进行自动恢复。而 undo log 则用于实现 MVCC 和事务回滚。在事务执行的过程中，不但会记录 redo log，还会记录 undo log。至于更多细节，大家自行去了解吧。&lt;/p&gt;&lt;p data-pid=&quot;0CL73dxh&quot;&gt;那么 redo log 到底如何保障数据不丢的？&lt;/p&gt;&lt;p data-pid=&quot;BmVuLqkT&quot;&gt;&lt;b&gt;如何保障数据不丢？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;BXwZaFPG&quot;&gt;假设我们有一个表 t1，数据如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; select * from t1;
+----+------+
| id | name |
+----+------+
|  1 | a    |
+----+------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;KEsnKmz_&quot;&gt;当我们执行如下 update 语句时：&lt;/p&gt;&lt;p data-pid=&quot;T65gqIc2&quot;&gt;&lt;code&gt;mysql  begin;  update t1 set name=&#x27;aa&#x27; where id=1;  commit;&lt;/code&gt;&lt;/p&gt;&lt;p data-pid=&quot;BqvwTBKk&quot;&gt;InnoDB 内部的流程是这样的：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;oRGiV6jO&quot;&gt;服务器收到事务开始的指令，为事务生成一个全局唯一的事务 id。这个事务 id 在记录 binlog 和 redo log 时都会使用。&lt;/li&gt;&lt;li data-pid=&quot;3sRCRu5N&quot;&gt;如果缓存池中没有 id=1 所在数据页的数据，从磁盘中找到对应的数据页（注意，这里是一个数据页，不是一条记录），把数据页加载到缓存。&lt;/li&gt;&lt;li data-pid=&quot;DB3nIAsU&quot;&gt;修改缓存数据页中 id=1 的数据。&lt;/li&gt;&lt;li data-pid=&quot;nZzNAGvH&quot;&gt;记录数据到 redo log buffer[^4]、binlog cache[^2]。根据 redo log 刷盘的策略，这个过程中 redo log buffer 可能会被刷新到磁盘。&lt;/li&gt;&lt;li data-pid=&quot;txb0pm8I&quot;&gt;服务器收到事务提交的指令。&lt;/li&gt;&lt;li data-pid=&quot;AlzmDv_K&quot;&gt;刷新 redo log buffer 到磁盘，并标记该事务的状态为 prepare。此操作称为 redo log prepare。&lt;/li&gt;&lt;li data-pid=&quot;y-neoUsd&quot;&gt;刷新 binlog cache 到磁盘。&lt;/li&gt;&lt;li data-pid=&quot;Lr6LuOSw&quot;&gt;刷新 redo log buffer 到磁盘，并标记该事务的状态为 commit。此操作称为 redo log commit。&lt;/li&gt;&lt;li data-pid=&quot;GakU_ZSg&quot;&gt;向客户端返回事务执行的结果。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;B2M4PW1-&quot;&gt;这样 redo log 先 prepare，再刷新 binlog ，再 redo log commit 的过程就是一次两段式提交。这种只在 MySQL 内部组件间保障数据一致性的操作，也被称作内部 XA 事务；与之对应的是，保障跨服务器间数据一致性的两段式提交，被称为外部 XA 事务，即分布式事务。&lt;/p&gt;&lt;blockquote data-pid=&quot;t-DSTaLe&quot;&gt; 注：XA 事务属于分布式事务中两段式提交事务的一种实现&lt;/blockquote&gt;&lt;p data-pid=&quot;sYEMyNwx&quot;&gt;在宕机后，重启 MySQL 时，InnoDB 会自动恢复 redo log 中 &lt;code&gt;checkpoint_lsn&lt;/code&gt; 后的，且处于 commit 状态的事务。如果 redo log 中事务的状态为 prepare，则需要先查看 binlog 中该事务是否存在，是的话就恢复，否则就回滚（通过 undo log 回滚。脏页一直在刷，更新了脏页，但事务没提交就宕机了，所以需要回滚）。&lt;/p&gt;&lt;h3 id=&quot;h_552706911_2&quot; data-into-catalog-status=&quot;&quot;&gt;消化一下&lt;/h3&gt;&lt;p data-pid=&quot;fIiXjeZi&quot;&gt;&lt;b&gt;发生宕机怎么办？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;-iNn7_fU&quot;&gt;MySQL 宕机可能会发生在整个过程中的任意时刻。以刚才的流程为例，假设宕机发生在第 5 步后、第 6 步前。此时服务器还未向客户端返回事务的结果，而 redo log 中可能记录了该事务的 redo log，也可能没有。但是只要该事务没有被标记为 prepare，我们就认为该事务没有执行完，否则 redo log 用于恢复事务的数据可能是不完整的。因此，只要此时我们选择抛弃未 prepare 的 redo log，不会导致任何数据一致性的问题。&lt;/p&gt;&lt;p data-pid=&quot;IzKgeoyQ&quot;&gt;那么后面的步骤宕机会怎样呢？这就涉及到为什么非得要两阶段提交了。&lt;/p&gt;&lt;p data-pid=&quot;aGCFi--C&quot;&gt;&lt;b&gt;为什么非得要两阶段提交？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;bz-4A84f&quot;&gt;在说明以前，我们还需要弄清两个问题：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;NeASqebk&quot;&gt;有 binlog 为什么还要 redo log ？&lt;/li&gt;&lt;li data-pid=&quot;9YB3O70Z&quot;&gt;有 redo log 为什么还要 binlog？&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;NYX-gMdW&quot;&gt;&lt;i&gt;有 binlog 为什么还要 redo log ？&lt;/i&gt;&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;JhvyP-F9&quot;&gt;binlog 不知道数据库究竟是在哪一时刻丢失了哪部分数据，只能从备份点开始对 binlog 记录重放来恢复数据，比较耗时。&lt;/li&gt;&lt;li data-pid=&quot;wfSEnpVb&quot;&gt;binlog 恢复是需要我们手动执行的，而 redo log 可以在服务器重启后自动恢复数据。&lt;/li&gt;&lt;li data-pid=&quot;GLYfpCta&quot;&gt;WAL + 先写缓冲 + 异步刷脏页有效提升了磁盘的 IO 效率。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;jeF-DuvJ&quot;&gt;&lt;i&gt;有 redo log 为什么还要 binlog？&lt;/i&gt;&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;Vhair1dz&quot;&gt;binlog 是服务器层面的功能，redo log 是 innoDB 的功能。redo log 帮助 InnoDB 实现了性能提升、自动恢复。但其他存储引擎是无法使用 redo log 的能力的。&lt;/li&gt;&lt;li data-pid=&quot;8bQr5J2J&quot;&gt;我们也可以关闭 binlog，但大多数情况下我们都会开启，因为开启的好处更多。比如，主从模式需要订阅 binlog 进行主从复制，以及可以通过 binlog 进行数据库的增量备份和恢复。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;5fQPNAah&quot;&gt;redo log 有很多好处，所以我们不能放弃；binlog 也有很多好处，我们也不能放弃。也就是说，这两个功能我们都需要开启。既然都要开启，那么&lt;b&gt;我们必须保证 redo log 和 binlog 数据的一致性。&lt;/b&gt;如果 binlog 有 redo log 没有，那么 redo log 宕机自动恢复时的数据就会缺少；反之，redo log 有，binlog 没有，如果开启了主从模式，主服务器因为 redo log 恢复了数据，但从服务器靠消费 binlog 保证和主服务器数据一致，这就导致从服务器比主服务器数据少。&lt;/p&gt;&lt;p data-pid=&quot;7_0Ty6SF&quot;&gt;&lt;i&gt;那么为什么非得要写两次，我们能不能只写一次 redo log？&lt;/i&gt;&lt;/p&gt;&lt;p data-pid=&quot;idf2XStp&quot;&gt;这样仍然会有不一致问题。比方说，先写 binlog 再写 redo log：&lt;/p&gt;&lt;p data-pid=&quot;nf1BSfgL&quot;&gt;此时如果有大量并发，我们 binlog 噌噌噌往上写，redo log 还没写完，宕机机了，两者的数据就会出现大量不一致现象。此外，因为 binlog 数据最完整，这样会导致我们必须从 binlog 回滚，而且还得是手动回滚。InnoDB 本来是可以自恢复的存储引擎，这样一来，自恢复的特性不是没了，redo log 不是白开发了？使用 binlog 恢复 redo log 更不用想了，因为 binlog 根本不知道从何处开始恢复（它没有 &lt;code&gt;checkpoint_lsn&lt;/code&gt;）。&lt;/p&gt;&lt;p data-pid=&quot;NSugVzUH&quot;&gt;再说先写 redo log 再写 binlog：&lt;/p&gt;&lt;p data-pid=&quot;pTVcV-15&quot;&gt;不一致性的问题与上述内容相似。另外还会导致 redo log 在恢复时，每次都需要去 binlog 查看该事务是否已写入，严重影响性能。而如果是两阶段提交，处于 commit 阶段的事务都会直接恢复，处于 prepare 阶段才需要去看 binlog。&lt;/p&gt;&lt;p data-pid=&quot;tiRWKs-H&quot;&gt;那用 redo log 恢复 binlog 不行吗？&lt;/p&gt;&lt;p data-pid=&quot;awEC4VaH&quot;&gt;第一，binlog 是服务器的特性，redo log 是 InnoDB 的特性，两者并不在一个层面上，能不能这么做，很难说。第二，即便可以，也增加了很大的复杂度， redo log 中记录的数据（物理日志）能不能复原 SQL 语句，如何复原，这都是需要思考的问题。远远不如直接使用两阶段提交方便。&lt;/p&gt;&lt;p data-pid=&quot;6-D1DFbH&quot;&gt;&lt;b&gt;两段式提交会不会影响性能？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;3CGn1bV-&quot;&gt;InnoDB 使用了组提交的方式，尽量降低了两阶段提交带来的性能影响。在并发事务较多的情况下，MySQL 会将多个事务的 redo log 放在一起提交，大大节省了磁盘 IO。具体就不在此展开了。binlog 刷盘时同样也会采取类似的策略。&lt;/p&gt;&lt;h3 id=&quot;h_552706911_3&quot; data-into-catalog-status=&quot;&quot;&gt;吃点饭后甜点吧&lt;/h3&gt;&lt;p data-pid=&quot;xVLJC9QY&quot;&gt;如果你搞明白了上面的内容，你会发现「基于事务消息的分布式事务」使用的就是典型的 2PC 思想，你又会发现「基于本地消息的分布式事务」使用的就是典型的 WAL 思想。如果你不了解，马上去学一下吧！&lt;/p&gt;&lt;h3 id=&quot;h_552706911_4&quot; data-into-catalog-status=&quot;&quot;&gt;参考资料&lt;/h3&gt;&lt;p data-pid=&quot;sfFxZZhD&quot;&gt;[^1]: 机械工业出版社《MySQL技术内幕》2.4 Checkpoint 技术 &lt;br/&gt;[^2]: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//dev.mysql.com/doc/refman/8.0/en/binary-log.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《MySQL 官方文档》5.4.4 Binary Log&lt;/a&gt; &lt;br/&gt;[^3]: 机械工业出版社《MySQL技术内幕》2.3.2 内存  3.重做日志缓冲 &lt;br/&gt;[^4]: 机械工业出版社《MySQL技术内幕》7.2.1 redo &lt;br/&gt;[^5]: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//dev.mysql.com/doc/refman/8.0/en/point-in-time-recovery-positions.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《MySQL 官方文档》7.5.2 Point-in-Time Recovery Using Event Positions&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;-MzMWAOP&quot;&gt;除此之外，也参考了《MySQL 45讲》《MySQL是怎样运行的》&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.csdn.net/wang_luwei/article/details/120064895&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《MySQL如何确保数据不丢失的？》&lt;/a&gt;&lt;/p&gt;&lt;blockquote data-pid=&quot;FKtsU0Jr&quot;&gt;&lt;b&gt;推荐&lt;/b&gt;&lt;/blockquote&gt;&lt;p data-pid=&quot;3HaE0g6-&quot;&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/super9du&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;我的 Github 主页&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;umyrFxHd&quot;&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitee.com/super9du&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;我的 Gitee 主页&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;iEsOA9qK&quot;&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/nEop-Yy12VF_QntzoKgAsg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阅读原文&lt;/a&gt;&lt;/p&gt;&lt;blockquote data-pid=&quot;pLihX2Yr&quot;&gt; 声明：我不是 MySQL 专家，文中一些内容是基于我已掌握的资料推理出来的，我不保证文中内容绝对准确，但可以预见一定会有错误。大家注意甄别，不要盲从盲信。欢迎大家批评指正。&lt;br/&gt;&lt;b&gt;谢绝任何形式未经允许的转载。如需转载，请在公众号「柳双六」中向我留言，或点击&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/nEop-Yy12VF_QntzoKgAsg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阅读原文&lt;/a&gt;&lt;b&gt;向我留言。&lt;/b&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a022042530c9dade997b1ecc31044fe1</guid>
<title>如何给注册中心锦上添花？</title>
<link>https://toutiao.io/k/j3g3q3r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hello，大家好，我是小楼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上一篇文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5NjE2MDQwNg==&amp;amp;mid=2247487763&amp;amp;idx=1&amp;amp;sn=ab4004d42242ee6363538143ea2e976d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《如何组装一个注册中心》&lt;/a&gt;中，我们看到了如何利用一些现有的技术方案来组装出一个生产可用的注册中心最小集。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的同学看完表示学到了，也有同学直呼不过瘾，能不能手写一个注册中心？能不能继续展开说说？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于精力有限，手写一个注册中心暂时还不行，展开说说倒是可以满足。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是本期打算以注册中心的周边能力展开说说，这些能力属于锦上添花，没有它们注册中心可以正常运行，有了它们也不一定变得更强，但一定会更加花里胡哨。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那可能有读者会问，花里胡哨的有什么用呢？我觉得主要是了解一些新的、奇怪的知识，说不定哪天能用上呢，是吧？&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;控制台&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想让注册中心变得花里胡哨，首先肯定是开发一个控制台，控制台的基本功能就是展示服务的消费者与提供者，展示的用处有查找服务，排查问题等等，下图是Nacos的控制台&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43876882776686316&quot; data-type=&quot;png&quot; data-w=&quot;1527&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0R5uvadPVicrCSE0opkLibfgGKrhibVicHsqJwxwv1ZS0ETibkFPSt56ianibn5TYxQb1BlGb7vUSibFZaNfQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了基本的展示功能，我们还可以在控制台上搞些别的事情，比如下面这些。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;服务配置&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置本不是注册中心必备的功能，配置一般由配置中心管理，但配置中心似乎又和注册中心脱不了干系，Nacos就是一个集注册中心和配置中心于一体的组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注册中心也可以做一点和服务相关配置的事情，比如服务的超时时间、熔断降级等等元数据，不过要注意的是注册中心本身只能保存、修改，至于这些配置真正起作用的还是得和RPC框架配合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能你会问，为什么注册中心要去做配置中心的事儿呢？这不是职责不清？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以这么理解，服务发现基本是个服务都要接入，但配置中心可不一定要接，如果只想做点简单的服务相关的动态配置，引入一个配置中心是有点重。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是公司生产级的服务配置，最好再附带上一个灰度的能力，如果一次下发配置到全部机器，可能会出现故障，所以需要一种灰度下发的机制，分批下发，控制风险。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;事件追踪&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到问题排查，光展示提供者、消费者可能还不够，有时候启动一个提供者，消费者就是没感知到，或者很久之后才感知到，这时有点摸不着头脑，如果我们拿出这个事件的时间线，哪个环节出问题便一目了然。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Nacos的企业版中就支持了类似的&lt;strong&gt;推送轨迹&lt;/strong&gt;功能，当然这么好的功能，肯定是收费项。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;拓扑关系&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能我们忽略了注册中心的绘制服务之间的拓扑关系的能力，开源注册中心基本没提到这个，一般来说拓扑关系是链路追踪的活。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.851764705882353&quot; data-type=&quot;png&quot; data-w=&quot;425&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0R5uvadPVicrCSE0opkLibfgGhEicatsyr2Vx6ibWmw1tgs0z2y3TqtwH3fV3Ylxfvh3DB5t4RIIn3lyA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注册中心其实也大致可以干这个活，不过注册中心是按照服务的订阅关系绘制出来，并不是按照真实的调用关系，但这几乎也近似调用关系了，有了这个，我们就可以去做一些服务治理相关的事了，比如循环依赖、依赖层级太深等问题都可以看出来。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;流量控制&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流量控制也不一定非要在注册中心上做，比如Dubbo就是在RPC框架上做了很多流量相关的事情，像集群的选择、路由、负载均衡等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果RPC框架没这么强大的能力，或者RPC框架是多语言的实现，能力尚未打平，那么在注册中心上实现也是一个不错的选择。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;路由偏好&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;路由偏好简单来说，如果提供者有多个集群，挑选一个&lt;strong&gt;更适合&lt;/strong&gt;的集群来提供服务，这就叫&lt;strong&gt;路由偏好&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，例如消费者在杭州，提供者有两个集群，一个在上海，一个在北京，这两个机房提供的服务完全对等，这时消费者更适合调用本地的集群，这样时延更小。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40184563758389263&quot; data-type=&quot;png&quot; data-w=&quot;1192&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0R5uvadPVicrCSE0opkLibfgGTFdlqR0LWGPlznYz8WPaUfMKiaOMcBmLxsm2lpg1LTMicnsH22MoSBKA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然我们还可以根据服务器的性能、甚至自定义的规则来做路由偏好。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;动态切流&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了上面路由偏好的铺垫，想必你也能想到一个场景，万一有一天上海的提供者不可用了，我们可以通过对注册中心的干预，手动把北京的提供者下发给消费者，实现一个客户端无侵入的&lt;strong&gt;动态切流&lt;/strong&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;流量劫持&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流量劫持和动态切流的原理一样，实现也基本差不多，只不过下发的数据不太一样，原先的提供者列表，被注册中心偷天换日，换成了本地的一个端口&lt;strong&gt;127.0.0.1:8001&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样替换有什么作用呢？比如用agent来承接流量，像service mesh都有这种需求，注册中心就可以完成流量劫持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实劫持还有其他作用，如果服务的提供方压力太大，想降级，但消费者和提供者都没有降级能力，眼看着服务快挂了，千钧一发之际，你想到了注册中心，手动下发一个不存在的提供者地址，让消费者请求报错，以保护其他服务正常运行，这些奇奇怪怪的想法说不定都可以在注册中心上实现。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;探活&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;探活算是注册中心的一个小功能，我们看看在这个小功能上还能玩出什么花样。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;探活扩展&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最简单的探活是端口探活，即注册中心向提供者注册的端口发起TCP连接请求，如果能成功建立连接说明服务正常。但有时又不是这样，比如服务僵死，端口还能连接，但服务没法提供了，这时我们需要语义级的探活。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据提供者提供的服务和配置发起一个请求，如果返回和预期相符合，则判定为服务存活。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通常将这个探活留出扩展点，一般可以扩展出HTTP、MySQL、Redis、Thrift等协议的语义探活，以HTTP为例，服务提供方配置探活的URI，注册中心把提供方的ip、port与URI进行拼接、发起请求，如果响应符合预期（如返回码为2xx），则这次探活成功，同理，也可扩展出其他协议的语义级探活。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;探活兜底&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;探活虽好，但有时候又很危险，如果注册中心与提供者的网络闪断，则可能将提供者全部摘除，这是个非常危险的操作，为了防止这种情况，探活兜底是很有必要的一种行为，比如同一个服务集群不能摘除超过1/3，当然这个比例是个经验值，也最好可以配置化。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;生态建设&lt;/span&gt;&lt;/h1&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优雅发布&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优雅发布包括优雅退出和优雅上线，优雅是指在应用退出和上线过程中没有报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注册中心结合发布系统来做优雅发布是最好的搭配。发布系统在停止应用前，向注册中心发起禁用请求（停止接流），注销后再停止应用，服务上线后启动完成后，再将服务开启，接受流量。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;框架适配&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个注册中心如果想要更多的人来使用，则需要适配各种主流开发语言如Go/Java/Cpp等，适配一些主流框架如Dubbo/SpringCloud/gRPC等，这样用户用起来才更加方便，缺点是维护成本变高。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DNS 服务发现&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于无法接入服务发现SDK的用户，如果也想享受服务发现能力，怎么做呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业界有一种做法是自定义一个DNS拦截器，将DNS请求拦截，通过域名（对应到服务名）去注册中心找提供者。但这样做有一个缺点是DNS只能发现ip，端口没法自动发现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般这种拦截器可通过中心的DNS服务器或者本地的DNS agent代理来实现，也可以自定义编程语言的DNS解析插件来实现，像Go/Java都可以自定义DNS解析插件，但这种就属于入侵比较强了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;最后&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文信息点有点多，但深度不够，很多地方只是一笔带过，一方面本文的宗旨就是点到即可，这也正好符合 &lt;strong&gt;后端启示录&lt;/strong&gt; 的特点，另一方面每个点都可以展开独立成一篇甚至多篇文章，如果读者朋友对其中某些点感兴趣，我们可以私下交流。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;搜索关注微信公众号&quot;捉虫大师&quot;，后端技术分享，架构设计、性能优化、源码阅读、问题排查、踩坑实践。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;想进技术交流群的小伙伴加我微信「MrRoshi」备注加群即可，群里大佬如云，带你起飞~&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>45895c021ea9d181d3036e0c518556db</guid>
<title>《阿里巴巴 Java 开发手册》为什么建议使用 BigDecimal 进行浮点数运算？</title>
<link>https://toutiao.io/k/ou4wma0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-yvdm7v&quot; options=&quot;[object Object]&quot;&gt;&lt;p data-first-child=&quot;&quot; data-pid=&quot;ThjBSbZw&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt; 是大厂 Java 面试常问的一个知识点。&lt;/p&gt;&lt;p data-pid=&quot;FwhLGOlb&quot;&gt;《阿里巴巴 Java 开发手册》中提到：“为了避免精度丢失，可以使用 &lt;code&gt;BigDecimal&lt;/code&gt; 来进行浮点数的运算”。&lt;/p&gt;&lt;p data-pid=&quot;YLVZpntZ&quot;&gt;浮点数的运算竟然还会有精度丢失的风险吗？确实会！&lt;/p&gt;&lt;p data-pid=&quot;JHg3p22-&quot;&gt;示例代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;9f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;8f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;7f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 0.100000024
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 0.099999905
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;gZZVcMst&quot;&gt;&lt;b&gt;为什么浮点数 &lt;code&gt;float&lt;/code&gt; 或 &lt;code&gt;double&lt;/code&gt; 运算的时候会有精度丢失的风险呢？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;L5Fy4D3Y&quot;&gt;这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。&lt;/p&gt;&lt;p data-pid=&quot;FSOovOWw&quot;&gt;就比如说十进制下的 0.2 就没办法精确转换成二进制小数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止，
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;发生循环&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;bYNp-1Jy&quot;&gt;关于浮点数的更多内容，建议看一下&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//kaito-kidd.com/2018/08/08/computer-system-float-point/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;计算机系统基础（四）浮点数&lt;/a&gt;这篇文章。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;BigDecimal 介绍&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;bHMbKO4X&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt; 可以实现对浮点数的运算，不会造成精度丢失。&lt;/p&gt;&lt;p data-pid=&quot;4XywdY5P&quot;&gt;通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 &lt;code&gt;BigDecimal&lt;/code&gt; 来做的。&lt;/p&gt;&lt;p data-pid=&quot;J9tbUHH9&quot;&gt;《阿里巴巴 Java 开发手册》中提到：&lt;b&gt;浮点数之间的等值判断，基本数据类型不能用 == 来比较，包装数据类型不能用 equals 来判断。&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2e4a7657e22f927b94bda6cfa08c8286_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1246&quot; data-rawheight=&quot;1192&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-2e4a7657e22f927b94bda6cfa08c8286_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1246&quot; data-rawheight=&quot;1192&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-2e4a7657e22f927b94bda6cfa08c8286_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-2e4a7657e22f927b94bda6cfa08c8286_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;_KPxkg7S&quot;&gt;具体原因我们在上面已经详细介绍了，这里就不多提了。&lt;/p&gt;&lt;p data-pid=&quot;qYIE-S4q&quot;&gt;想要解决浮点数运算精度丢失这个问题，可以直接使用 &lt;code&gt;BigDecimal&lt;/code&gt; 来定义浮点数的值，然后再进行浮点数的运算操作即可。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;BigDecimal a = new BigDecimal(&quot;1.0&quot;);
BigDecimal b = new BigDecimal(&quot;0.9&quot;);
BigDecimal c = new BigDecimal(&quot;0.8&quot;);

BigDecimal x = a.subtract(b);
BigDecimal y = b.subtract(c);

System.out.println(x.compareTo(y));// 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;BigDecimal 常见方法&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;&lt;b&gt;创建&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;Pa29P1sO&quot;&gt;我们在使用 &lt;code&gt;BigDecimal&lt;/code&gt; 时，为了防止精度丢失，推荐使用它的&lt;code&gt;BigDecimal(String val)&lt;/code&gt;构造方法或者 &lt;code&gt;BigDecimal.valueOf(double val)&lt;/code&gt; 静态方法来创建对象。&lt;/p&gt;&lt;p data-pid=&quot;MKnBZX97&quot;&gt;《阿里巴巴 Java 开发手册》对这部分内容也有提到，如下图所示。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3d5985f3ee08d285615ced2e72c08d84_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;923&quot; data-rawheight=&quot;246&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-3d5985f3ee08d285615ced2e72c08d84_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;923&quot; data-rawheight=&quot;246&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-3d5985f3ee08d285615ced2e72c08d84_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-3d5985f3ee08d285615ced2e72c08d84_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;b&gt;加减乘除&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;rPfuLt2x&quot;&gt;&lt;code&gt;add&lt;/code&gt; 方法用于将两个 &lt;code&gt;BigDecimal&lt;/code&gt; 对象相加，&lt;code&gt;subtract&lt;/code&gt; 方法用于将两个 &lt;code&gt;BigDecimal&lt;/code&gt; 对象相减。&lt;code&gt;multiply&lt;/code&gt; 方法用于将两个 &lt;code&gt;BigDecimal&lt;/code&gt; 对象相乘，&lt;code&gt;divide&lt;/code&gt; 方法用于将两个 &lt;code&gt;BigDecimal&lt;/code&gt; 对象相除。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.9&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 1.9
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 0.1
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 0.90
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 无法除尽，抛出 ArithmeticException 异常
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoundingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HALF_UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 1.11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;3eou2lRf&quot;&gt;这里需要注意的是，在我们使用 &lt;code&gt;divide&lt;/code&gt; 方法的时候尽量使用 3 个参数版本，并且&lt;code&gt;RoundingMode&lt;/code&gt; 不要选择 &lt;code&gt;UNNECESSARY&lt;/code&gt;，否则很可能会遇到 &lt;code&gt;ArithmeticException&lt;/code&gt;（无法除尽出现无限循环小数的时候），其中 &lt;code&gt;scale&lt;/code&gt; 表示要保留几位小数，&lt;code&gt;roundingMode&lt;/code&gt; 代表保留规则。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoundingMode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roundingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roundingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oldMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;lNRMBSi1&quot;&gt;保留规则非常多，这里列举几种:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoundingMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// 2.5 -&amp;gt; 3 , 1.6 -&amp;gt; 2
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;   &lt;span class=&quot;c1&quot;&gt;// -1.6 -&amp;gt; -2 , -2.5 -&amp;gt; -3
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROUND_UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// 2.5 -&amp;gt; 2 , 1.6 -&amp;gt; 1
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;   &lt;span class=&quot;c1&quot;&gt;// -1.6 -&amp;gt; -1 , -2.5 -&amp;gt; -2
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROUND_DOWN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2.5 -&amp;gt; 3 , 1.6 -&amp;gt; 2
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;   &lt;span class=&quot;c1&quot;&gt;// -1.6 -&amp;gt; -1 , -2.5 -&amp;gt; -2
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;n&quot;&gt;CEILING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROUND_CEILING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2.5 -&amp;gt; 2 , 1.6 -&amp;gt; 1
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;   &lt;span class=&quot;c1&quot;&gt;// -1.6 -&amp;gt; -2 , -2.5 -&amp;gt; -3
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;n&quot;&gt;FLOOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROUND_FLOOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2.5 -&amp;gt; 3 , 1.6 -&amp;gt; 2
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;   &lt;span class=&quot;c1&quot;&gt;// -1.6 -&amp;gt; -2 , -2.5 -&amp;gt; -3
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;n&quot;&gt;HALF_UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROUND_HALF_UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//......
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;大小比较&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;4ik-29Y8&quot;&gt;&lt;code&gt;a.compareTo(b)&lt;/code&gt; : 返回 -1 表示 &lt;code&gt;a&lt;/code&gt; 小于 &lt;code&gt;b&lt;/code&gt;，0 表示 &lt;code&gt;a&lt;/code&gt; 等于 &lt;code&gt;b&lt;/code&gt; ， 1 表示 &lt;code&gt;a&lt;/code&gt; 大于 &lt;code&gt;b&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.9&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;保留几位小数&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;dqpGNDDD&quot;&gt;通过 &lt;code&gt;setScale&lt;/code&gt;方法设置保留几位小数以及保留规则。保留规则有挺多种，不需要记，IDEA 会提示。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.255433&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setScale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RoundingMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HALF_DOWN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 1.255
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;BigDecimal 等值比较问题&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;PvZTFiOa&quot;&gt;《阿里巴巴 Java 开发手册》中提到：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-439e5d155c91f45e8b686fc8aab245be_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;850&quot; data-rawheight=&quot;75&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-439e5d155c91f45e8b686fc8aab245be_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;850&quot; data-rawheight=&quot;75&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-439e5d155c91f45e8b686fc8aab245be_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-439e5d155c91f45e8b686fc8aab245be_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;Z540NO3m&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt; 使用 &lt;code&gt;equals()&lt;/code&gt; 方法进行等值比较出现问题的代码示例：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;qCmpOyJe&quot;&gt;这是因为 &lt;code&gt;equals()&lt;/code&gt; 方法不仅仅会比较值的大小（value）还会比较精度（scale），而 &lt;code&gt;compareTo()&lt;/code&gt; 方法比较的时候会忽略精度。&lt;/p&gt;&lt;p data-pid=&quot;44Euu8qC&quot;&gt;1.0 的 scale 是 1，1 的 scale 是 0，因此 &lt;code&gt;a.equals(b)&lt;/code&gt; 的结果是 false。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c60c12282d127f21cb797fc4e49430d5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;850&quot; data-rawheight=&quot;841&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-c60c12282d127f21cb797fc4e49430d5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;850&quot; data-rawheight=&quot;841&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-c60c12282d127f21cb797fc4e49430d5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c60c12282d127f21cb797fc4e49430d5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;UXr4mc_h&quot;&gt;&lt;code&gt;compareTo()&lt;/code&gt; 方法可以比较两个 &lt;code&gt;BigDecimal&lt;/code&gt; 的值，如果相等就返回 0，如果第 1 个数比第 2 个数大则返回 1，反之返回-1。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;uMzOp9E2&quot;&gt;浮点数没有办法用二进制精确表示，因此存在精度丢失的风险。&lt;/p&gt;&lt;p data-pid=&quot;SCpKDgmC&quot;&gt;不过，Java 提供了&lt;code&gt;BigDecimal&lt;/code&gt; 来操作浮点数。&lt;code&gt;BigDecimal&lt;/code&gt; 的实现利用到了 &lt;code&gt;BigInteger&lt;/code&gt; （用来操作大整数）, 所不同的是 &lt;code&gt;BigDecimal&lt;/code&gt; 加入了小数位的概念。&lt;/p&gt;&lt;p data-pid=&quot;fUXnBoeh&quot;&gt;自荐一个非常不错的 Java 教程类开源项目：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//javaguide.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaGuide&lt;/a&gt;。这是我在大三开始准备秋招面试的时候创建的，已经维护了 4 年多了，目前这个项目在 Github 上收到了 125k+ 的 star。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c51e8319b096e5c855e3e7583168a44e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1451&quot; data-rawheight=&quot;1143&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-c51e8319b096e5c855e3e7583168a44e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1451&quot; data-rawheight=&quot;1143&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-c51e8319b096e5c855e3e7583168a44e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-c51e8319b096e5c855e3e7583168a44e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;NsgBmz9V&quot;&gt;&lt;b&gt;Java&lt;/b&gt; ：&lt;/p&gt;&lt;p data-pid=&quot;ivHGwk5C&quot;&gt;&lt;b&gt;计算机基础&lt;/b&gt; ：&lt;/p&gt;&lt;p data-pid=&quot;nLUl4cYw&quot;&gt;&lt;b&gt;数据库&lt;/b&gt; ：&lt;/p&gt;&lt;p data-pid=&quot;gT8jDdcX&quot;&gt;&lt;b&gt;常用框架&lt;/b&gt; ：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.zhihu.com/question/333684160/answer/2392017639&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-dad0b34024ad631f06ada75b1abd6f1c_180x120.jpg&quot; data-image-width=&quot;1727&quot; data-image-height=&quot;652&quot; data-text=&quot;请问如何短时间突击 Java 通过面试？185 赞同 · 5 评论回答&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>20f7715a399779e328dfc0cf6486b488</guid>
<title>Replication（上）：常见的复制模型&amp;分布式系统的挑战</title>
<link>https://toutiao.io/k/irtkssl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;58&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBVHPgeBXgTUj0ib1Kwfosl82xO1Aw7x6gccLuuYs1dbxI7REI7OcjbGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总第530&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2022年 第047篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;103&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBic5ADGrKxgSd0tibyMiasOHXjb46qFBw7PTfuWAxXzWq32lDkL05icwkMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot; data-width=&quot;100%&quot; opacity=&quot;&quot; title=&quot;undefined&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; data-style=&quot;text-align: left; font-size: 14px; color: inherit;&quot;&gt;&lt;p&gt;&lt;span&gt;分布式系统设计是一项十分复杂且具有挑战性的事情。其中，数据复制与一致性更是其中十分重要的一环。数据复制领域概念庞杂、理论性强，如果对应的算法没有理论验证大概率会出错。如果在设计过程中，不了解对应理论所解决的问题以及不同理论之间的联系，势必无法设计出一个合理的分布式系统。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;本系列文章分上下两篇，以《数据密集型应用系统设计（DDIA）》（下文简称《DDIA》）为主线，文中的核心理论讲解与图片来自于此书。在此基础上，加入了日常工作中对这些概念的理解与个性化的思考，并将它们映射到Kafka中，跟大家分享一下如何将具体的理论应用于实际生产环境中。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1. 简介&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.1 简介——使用复制的目的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.2 文章系列概述&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2. 数据复制模式&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.1 最简单的复制模式——主从模式&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.2 多主节点复制&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.3 无主节点复制&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.4 本章小结&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3. 分布式系统的挑战&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.1 部分失效&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.2 分布式系统特有的故障&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.2 不可靠的时钟&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4. 总结&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 简介&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.1 简介——使用复制的目的&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在分布式系统中，数据通常需要被分散在多台机器上，主要为了达到以下目的：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;扩展性，数据量因读写负载巨大，一台机器无法承载，数据分散在多台机器上可以有效地进行负载均衡，达到灵活的横向扩展。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;容错、高可用，在分布式系统中，单机故障是常态，在单机故障下仍然希望系统能够正常工作，这时候就需要数据在多台机器上做冗余，在遇到单机故障时其他机器就可以及时接管。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;统一的用户体验，如果系统客户端分布在多个地域，通常考虑在多个地域部署服务，以方便用户能够就近访问到他们所需要的数据，获得统一的用户体验。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;数据的多机分布的方式主要有两种，一种是将数据分片保存，每个机器保存数据的部分分片（&lt;/span&gt;&lt;span&gt;Kafka中称为Partition，其他部分系统称为Shard&lt;/span&gt;&lt;span&gt;），另一种则是完全的冗余，其中每一份数据叫做一个副本（&lt;/span&gt;&lt;span&gt;Kafka中称为Replica&lt;/span&gt;&lt;span&gt;），通过数据复制技术实现。在分布式系统中，两种方式通常会共同使用，最后的数据分布往往是下图的样子，一台机器上会保存不同数据分片的若干个副本。本系列博文主要介绍的是数据如何做复制，分区则是另一个主题，不在本文的讨论范畴。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;542&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;379&quot; data-ratio=&quot;0.6982758620689655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaVNvuEiaCBRCEhicsCPa5hKaOghTMFRR4UbenmODqD2SLUtSiaHk4Wjcyg/640?wx_fmt=png&quot; data-w=&quot;696&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图1 常见数据分布&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;复制的目标需要保证若干个副本上的数据是一致的，这里的“一致”是一个十分不确定的词，既可以是不同副本上的数据在任何时刻都保持完全一致，也可以是不同客户端不同时刻访问到的数据保持一致。一致性的强弱也会不同，有可能需要任何时候不同客端都能访问到相同的新的数据，也有可能是不同客户端某一时刻访问的数据不相同，但在一段时间后可以访问到相同的数据。因此，“一致性”是一个值得单独抽出来细说的词。在下一篇文章中，我们将重点介绍这个词在不同上下文之间的含义。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此时，大家可能会有疑问，直接让所有副本在任意时刻都保持一致不就行了，为啥还要有各种不同的一致性呢？我们认为有两个考量点，第一是性能，第二则是复杂性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;性能&lt;/strong&gt;比较好理解，因为冗余的目的不完全是为了高可用，还有延迟和负载均衡这类提升性能的目的，如果只一味地为了地强调数据一致，可能得不偿失。&lt;strong&gt;复杂性&lt;/strong&gt;是因为分布式系统中，有着比单机系统更加复杂的不确定性，节点之间由于采用不大可靠的网络进行传输，并且不能共享统一的一套系统时间和内存地址（&lt;/span&gt;&lt;span&gt;后文会详细进行说明&lt;/span&gt;&lt;span&gt;），这使得原本在一些单机系统上很简单的事情，在转到分布式系统上以后就变得异常复杂。这种复杂性和不确定性甚至会让我们怀疑，这些副本上的数据真的能达成一致吗？下一篇文章会专门详细分析如何设计算法来应对这种复杂和不确定性。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.2 文章系列概述&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;本系列博文将分为上下两篇，第一篇将主要介绍几种常见的数据复制模型，然后介绍分布式系统的挑战，让大家对分布式系统一些稀奇古怪的故障有一些感性的认识。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二篇文章将针对本篇中提到的问题，分别介绍事务、分布式共识算法和一致性，以及三者的内在联系，再分享如何在分布式系统中保证数据的一致性，进而让大家对数据复制技术有一个较为全面的认识。此外，本系列还将介绍业界验证分布式算法正确性的一些工具和框架。接下来，让我们一起开始数据复制之旅吧！&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 数据复制模式&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;总体而言，最常见的复制模式有三种，分别为&lt;strong&gt;主从模式&lt;/strong&gt;、&lt;strong&gt;多主节点模式&lt;/strong&gt;、&lt;strong&gt;无主节点模式&lt;/strong&gt;，下面分别进行介绍。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.1 最简单的复制模式——主从模式&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简介&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;对复制而言，最直观的方法就是将副本赋予不同的角色，其中有一个主副本，主副本将数据存储在本地后，将数据更改作为日志，或者以更改流的方式发到各个从副本（&lt;/span&gt;&lt;span&gt;后文也会称节点&lt;/span&gt;&lt;span&gt;）中。在这种模式下，所有写请求就全部会写入到主节点上，读请求既可以由主副本承担也可以由从副本承担，这样对于读请求而言就具备了扩展性，并进行了负载均衡。但这里面存在一个权衡点，就是客户端视角看到的一致性问题。这个权衡点存在的核心在于，数据传输是通过网络传递的，数据在网络中传输的时间是不能忽略的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;542&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;354&quot; data-ratio=&quot;0.653169014084507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaV4npqp9G5pxgX4Mzv49Uib32Y4iaAtcT2OE65qAazFIV6p1g7Tu1Rbxg/640?wx_fmt=png&quot; data-w=&quot;1136&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图2 同步复制与异步复制&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上图所示，在这个时间窗口中，任何情况都有可能发生。在这种情况下，客户端何时算写入完成，会决定其他客户端读到数据的可能性。这里我们假设这份数据有一个主副本和一个从副本，如果主副本保存后即向客户端返回成功，这样叫做异步复制（1）。而如果等到数据传送到从副本1，并得到确认之后再返回客户端成功，称为同步复制（2）。这里我们先假设系统正常运行，在异步同步下，如果从副本承担读请求，假设reader1和reader2同时在客户端收到写入成功后发出读请求，两个reader就可能读到不一样的值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了避免这种情况，实际上有两种角度的做法，第一种角度是让客户端只从主副本读取数据，这样，在正常情况下，所有客户端读到的数据一定是一致的（&lt;/span&gt;&lt;span&gt;Kafka当前的做法&lt;/span&gt;&lt;span&gt;）；另一种角度则是采用同步复制，假设使用纯的同步复制，当有多个副本时，任何一个副本所在的节点发生故障，都会使写请求阻塞，同时每次写请求都需要等待所有节点确认，如果副本过多会极大影响吞吐量。而如果仅采用异步复制并由主副本承担读请求，当主节点故障发生切换时，一样会发生数据不一致的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多系统会把这个决策权交给用户，这里我们以Kafka为例，首先提供了同步与异步复制的语义（&lt;/span&gt;&lt;span&gt;通过客户端的acks参数确定&lt;/span&gt;&lt;span&gt;），另外提供了ISR机制，而只需要ISR中的副本确认即可，系统可以容忍部分节点因为各种故障而脱离ISR，那样客户端将不用等待其确认，增加了系统的容错性。当前Kafka未提供让从节点承担读请求的设计，但在高版本中已经有了这个Feature。这种方式使系统有了更大的灵活性，用户可以根据场景自由权衡一致性和可用性。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主从模式下需要的一些能力&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;增加新的从副本（节点）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1. 在Kafka中，我们所采取的的方式是通过新建副本分配的方式，以追赶的方式从主副本中同步数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 数据库所采用的的方式是通过快照+增量的方式实现。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;a.在某一个时间点产生一个一致性的快照。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;b.将快照拷贝到从节点。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;c.从节点连接到主节点请求所有快照点后发生的改变日志。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;d.获取到日志后，应用日志到自己的副本中，称之为追赶。  &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;e.可能重复多轮a-d。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;处理节点失效&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;从节点失效——追赶式恢复&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;针对从节点失效，恢复手段较为简单，一般采用追赶式恢复。而对于数据库而言，从节点可以知道在崩溃前所执行的最后一个事务，然后连接主节点，从该节点将拉取所有的事件变更，将这些变更应用到本地记录即可完成追赶。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于Kafka而言，恢复也是类似的，Kafka在运行过程中，会定期项磁盘文件中写入checkpoint，共包含两个文件，一个是recovery-point-offset-checkpoint，记录已经写到磁盘的offset，另一个则是replication-offset-checkpoint，用来记录高水位（&lt;/span&gt;&lt;span&gt;下文简称HW&lt;/span&gt;&lt;span&gt;），由ReplicaManager写入，下一次恢复时，Broker将读取两个文件的内容，可能有些被记录到本地磁盘上的日志没有提交，这时就会先截断（&lt;/span&gt;&lt;span&gt;Truncate&lt;/span&gt;&lt;span&gt;）到HW对应的offset上，然后从这个offset开始从Leader副本拉取数据，直到认追上Leader，被加入到ISR集合中&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;主节点失效——节点切换&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主节点失效则会稍稍复杂一些，需要经历三个步骤来完成节点的切换。&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;确认主节点失效，由于失效的原因有多种多样，大多数系统会采用超时来判定节点失效。一般都是采用节点间互发心跳的方式，如果发现某个节点在较长时间内无响应，则会认定为节点失效。具体到Kafka中，它&lt;/span&gt;是通过和Zookeeper（&lt;span&gt;下文简称ZK&lt;/span&gt;）间的会话来保持心跳的&lt;span&gt;，在启动时Kafka会在ZK上注册临时节点，此后会和ZK间维持会话，假设Kafka节点出现故障（&lt;/span&gt;&lt;span&gt;这里指被动的掉线，不包含主动执行停服的操作&lt;/span&gt;&lt;span&gt;），当会话心跳超时时，ZK上的临时节点会掉线，这时会有专门的组件（&lt;/span&gt;&lt;span&gt;Controller&lt;/span&gt;&lt;span&gt;）监听到这一信息，并认定节点失效。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;选举新的主节点。这里可以通过通过选举的方式（&lt;/span&gt;&lt;span&gt;民主协商投票，通常使用共识算法&lt;/span&gt;&lt;span&gt;），或由某个特定的组件指定某个节点作为新的节点（&lt;/span&gt;&lt;span&gt;Kafka的Controller&lt;/span&gt;&lt;span&gt;）。在选举或指定时，需要尽可能地让新主与原主的差距最小，这样会最小化数据丢失的风险（&lt;/span&gt;&lt;span&gt;让所有节点都认可新的主节点是典型的共识问题&lt;/span&gt;&lt;span&gt;）--这里所谓共识，就是让一个小组的节点就某一个议题达成一致，下一篇文章会重点进行介绍。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重新配置系统是新的主节点生效，这一阶段基本可以理解为对集群的元数据进行修改，让所有外界知道新主节点的存在（&lt;/span&gt;&lt;span&gt;Kafka中Controller通过元数据广播实现&lt;/span&gt;&lt;span&gt;），后续及时旧的节点启动，也需要确保它不能再认为自己是主节点，从而承担写请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然上述三个步骤较为清晰，但在实际发生时，还会存在一些问题：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;假设采用异步复制，在失效前，新的主节点与原主节点的数据存在Gap，选举完成后，原主节点很快重新上线加入到集群，这时新的主节点可能会收到冲突的写请求，此时还未完全执行上述步骤的第三步，也就是原主节点没有意识到自己的角色发生变化，还会尝试向新主节点同步数据。这时，一般的做法是，将原主节点上未完成复制的写请求丢掉，但这又可能会发生数据丢失或不一致，假设我们每条数据采用MySQL的自增ID作为主键，并且使用Redis作为缓存，假设发生了MySQL的主从切换，从节点的计数器落后于主节点，那样可能出现应用获取到旧的自增ID，这样就会与Redis上对应ID取到的数据不一致，出现数据泄露或丢失。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;假设上面的问题，原主节点因为一些故障永远不知道自己角色已经变更，则可能发生“脑裂”，两个节点同时操作数据，又没有相应解决冲突（&lt;/span&gt;&lt;span&gt;没有设计这一模块&lt;/span&gt;&lt;span&gt;），就有可能对数据造成破坏。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;此外，对于超时时间的设定也是个十分复杂的问题，过长会导致服务不可用，设置过短则会导致节点频繁切换，假设本身系统处于高负载状态，频繁角色切换会让负载进一步加重（&lt;/span&gt;&lt;span&gt;团队内部对Kafka僵尸节点的处理逻辑&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;异步复制面临的主要问题——复制滞后&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;如前文所述，如果我们使用纯的同步复制，任何一台机器发生故障都会导致服务不可写入，并且在数较多的情况下，吞吐和可用性都会受到比较大的影响。很多系统都会采用半步复制或异步复制来在可用性和一致性之间做权衡。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在异步复制中，由于写请求写到主副本就返回成功，在数据复制到其他副本的过程中，如果客户端进行读取，在不同副本读取到的数据可能会不一致，《DDIA》将这个种现象称为复制滞后（&lt;/span&gt;&lt;span&gt;Replication Lag&lt;/span&gt;&lt;span&gt;），存在这种问题的复制行为所形成的数据一致性统称为最终一致性。未来还会重点介绍一下一致性和共识，但在本文不做过多的介绍，感兴趣的同学可以提前阅读《Problems with Replication Lag》这一章节。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 多主节点复制&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;前文介绍的主从复制模型中存在一个比较严重的弊端，就是所有写请求都需要经过主节点，因为只存在一个主节点，就很容易出现性能问题。虽然有从节点作为冗余应对容错，但对于写入请求实际上这种复制方式是不具备扩展性的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此外，如果客户端来源于多个地域，不同客户端所感知到的服务相应时间差距会非常大。因此，有些系统顺着传统主从复制进行延伸，采用多个主节点同时承担写请求，主节点接到写入请求之后将数据同步到从节点，不同的是，这个主节点可能还是其他节点的从节点。复制模式如下图所示，可以看到两个主节点在接到写请求后，将数据同步到同一个数据中心的从节点。此外，该主节点还将不断同步在另一数据中心节点上的数据，由于每个主节点同时处理其他主节点的数据和客户端写入的数据，因此需要模型中增加一个冲突处理模块，最后写到主节点的数据需要解决冲突。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;542&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;347&quot; data-ratio=&quot;0.6405797101449275&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaAhTQYqibdFibJUtZMlM6yjkI2k1FhMZU4ueUROzpiagEyv7lTU2piaIKrA/640?wx_fmt=png&quot; data-w=&quot;1380&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图3 多主节点复制&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用场景&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;a. 多数据中心部署&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一般采用多主节点复制，都是为了做多数据中心容灾或让客户端就近访问（&lt;/span&gt;&lt;span&gt;用一个高大上的名词叫做异地多活&lt;/span&gt;&lt;span&gt;），在同一个地域使用多主节点意义不大，在多个地域或者数据中心部署相比主从复制模型有如下的优势：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;b. 离线客户端操作&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了解决多个地域容错和就近访问的问题，还有一些有趣的场景，其中一个场景则是在网络离线的情况下还能继续工作，例如我们笔记本电脑上的笔记或备忘录，我们不能因为网络离线就禁止使用该程序，我们依然可以在本地愉快的编辑内容（&lt;/span&gt;&lt;span&gt;图中标记为Offline状态&lt;/span&gt;&lt;span&gt;），当我们连上网之后，这些内容又会同步到远程的节点上，这里面我们把本地的App也当做其中的一个副本，那么就可以承担用户在本地的变更请求。联网之后，再同步到远程的主节点上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;134&quot; data-ratio=&quot;0.23768736616702354&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaoricH2puJXI2eJH8lB8I0pjauw7JONnGMV18xdwa4B2hF8H8n9Y4kCA/640?wx_fmt=png&quot; data-w=&quot;934&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图4 Notion界面&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;c. 协同编辑&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里我们对离线客户端操作进行扩展，假设我们所有人同时编辑一个文档，每个人通过Web客户端编辑的文档都可以看做一个主节点。这里我们拿美团内部的学城（&lt;/span&gt;&lt;span&gt;内部的Wiki系统&lt;/span&gt;&lt;span&gt;）举例，当我们正在编辑一份文档的时候，基本上都会发现右上角会出现“xxx也在协同编辑文档”的字样，当我们保存的时候，系统就会自动将数据保存到本地并复制到其他主节点上，各自处理各自端上的冲突。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，当文档出现了更新时，学城会通知我们有更新，需要我们手动点击更新，来更新我们本地主节点的数据。书中说明，虽然不能将协同编辑完全等同于数据库复制，但却是有很多相似之处，也需要处理冲突问题。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;冲突解决&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;通过上面的分析，我们了解到多主复制模型最大挑战就是解决冲突，下面我们简单看下《DDIA》中给出的通用解法，在介绍之前，我们先来看一个典型的冲突。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;a. 冲突实例&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;298&quot; data-ratio=&quot;0.5305555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaVibtd4LFU7PaVibWQjiceJtMDqqNF8eD9ibMxEQNx0CvtnVmN2ma9Fd0icA/640?wx_fmt=png&quot; data-w=&quot;1440&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图5 冲突实例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在图中，由于多主节点采用异步复制，用户将数据写入到自己的网页就返回成功了，但当尝试把数据复制到另一个主节点时就会出问题，这里我们如果假设主节点更新时采用类似CAS的更新方式时更新时，都会由于预期值不符合从而拒绝更新。针对这样的冲突，书中给出了几种常见的解决思路。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;b. 解决思路&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1. 避免冲突&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所谓解决问题最根本的方式则是尽可能不让它发生，如果能够在应用层保证对特定数据的请求只发生在一个节点上，这样就没有所谓的“写冲突”了。继续拿上面的协同编辑文档举例，如果我们把每个人的都在填有自己姓名表格的一行里面进行编辑，这样就可以最大程度地保证每个人的修改范围不会有重叠，冲突也就迎刃而解了&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2. 收敛于一致状态&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然而，对更新标题这种情况而言，冲突是没法避免的，但还是需要有方法解决。对于单主节点模式而言，如果同一个字段有多次写入，那么最后写入的一定是最新的。&lt;/span&gt;ZK、KafkaController、KafkaReplica都有类似Epoch的方式去屏蔽过期的写操作&lt;span&gt;，由于所有的写请求都经过同一个节点，顺序是绝对的，但对于多主节点而言，由于没有绝对顺序的保证，就只能试图用一些方式来决策相对顺序，使冲突最终收敛，这里提到了几种方法：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;给每个写请求分配Uniq-ID，例如一个时间戳，一个随机数，一个UUID或Hash值，最终取最高的ID作为最新的写入。如果基于时间戳，则称作最后写入者获胜（&lt;/span&gt;&lt;span&gt;LWW&lt;/span&gt;&lt;span&gt;），这种方式看上去非常直接且简单，并且非常流行。但很遗憾，文章一开始也提到了，分布式系统没有办法在机器间共享一套统一的系统时间，所以这个方案很有可能因为这个问题导致数据丢失（&lt;/span&gt;&lt;span&gt;时钟漂移&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每个副本分配一个唯一的ID，ID高的更新优先级高于地域低的，这显然也会丢失数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然，我们可以用某种方式做拼接，或利用预先定义的格式保留冲突相关信息，然后由用户自行解决。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3. 用户自行处理&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实，把这个操作直接交给用户，让用户自己在读取或写入前进行冲突解决，这种例子也是屡见不鲜，Github采用就是这种方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里只是简单举了一些冲突的例子，其实冲突的定义是一个很微妙的概念。《DDIA》第七章介绍了更多关于冲突的概念，感兴趣同学可以先自行阅读，在下一篇文章中也会提到这个问题。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;c. 处理细节介绍&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;此外，在书中将要结束《复制》这一章时，也详细介绍了如何进行冲突的处理，这里也简单进行介绍。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里我们可以思考一个问题，为什么会发生冲突？通过阅读具体的处理手段后，我们可以尝试这样理解，正是因为我们对事件发生的先后顺序不确定，但这些事件的处理主体都有重叠（&lt;/span&gt;&lt;span&gt;比如都有设置某个数据的值&lt;/span&gt;&lt;span&gt;）。通过我们对冲突的理解，加上我们的常识推测，会有这样几种方式可以帮我们来判断事件的先后顺序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1. 直接指定事件顺序&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于事件发生的先后顺序，我们一个最直观的想法就是，两个请求谁新要谁的，那这里定义“最新”是个问题，一个很简单的方式是使用时间戳，这种算法叫做最后写入者获胜LWW。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但分布式系统中没有统一的系统时钟，不同机器上的时间戳无法保证精确同步，那就可能存在数据丢失的风险，并且由于数据是覆盖写，可能不会保留中间值，那么最终可能也不是一致的状态，或出现数据丢失。如果是一些缓存系统，覆盖写看上去也是可以的，这种简单粗暴的算法是非常好的收敛冲突的方式，但如果我们对数据一致性要求较高，则这种方式就会引入风险，除非数据写入一次后就不会发生改变。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2. 从事件本身推断因果关系和并发&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上面直接简单粗暴的制定很明显过于武断，那么有没有可能时间里面就存在一些因果关系呢，如果有我们很显然可以通过因果关系知道到底需要怎样的顺序，如果不行再通过指定的方式呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;362&quot; data-ratio=&quot;0.6442105263157895&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaYyNjicV7VyzvIbd40a9wsa7TQPZusGPEG8UEzrv6UAKnapXkAXvNhnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;950&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图6 违背因果关系示例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里是书中一个多主节点复制的例子，这里ClientA首先向Leader1增加一条数据x=1，然Leader1采用异步复制的方式，将变更日志发送到其他的Leader上。在复制过程中，ClientB向Leader3发送了更新请求，内容则是更新Key为x的Value，使Value=Value+1。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;原图中想表达的是，update的日志发送到Leader2的时间早于insert日志发送到Leader2的时间，会导致更新的Key不存在。但是，这种所谓的事件关系本身就不是完全不相干的，书中称这种关系为依赖或者Happens-before。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们可能在JVM的内存模型（&lt;/span&gt;&lt;span&gt;JMM&lt;/span&gt;&lt;span&gt;）中听到过这个词，在JMM中，表达的也是多个线程操作的先后顺序关系。这里，如果我们把线程或者请求理解为对数据的操作（&lt;/span&gt;&lt;span&gt;区别在于一个是对本地内存数据，另一个是对远程的某处内存进行修改&lt;/span&gt;&lt;span&gt;），线程或客户端都是一种执行者（&lt;/span&gt;&lt;span&gt;区别在于是否需要使用网络&lt;/span&gt;&lt;span&gt;），那这两种Happens-before也就可以在本质上进行统一了，都是为了描述事件的先后顺序而生。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;书中给出了检测这类事件的一种算法，并举了一个购物车的例子，如图所示（&lt;/span&gt;&lt;span&gt;以餐厅扫码点餐的场景为例&lt;/span&gt;&lt;span&gt;）：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;365&quot; data-ratio=&quot;0.6491228070175439&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfValSE1IIzd1E2MfLz3RsN8luhk4wlUkpSUqOdArWEG3rXAJIic9E6r5Zw/640?wx_fmt=png&quot; data-w=&quot;912&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图7 扫码点餐示例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图中两个客户端同时向购物车里放东西，事例中的数据库假设只有一个副本。&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;首先Client1向购物车中添加牛奶，此时购物车为空，返回版本1，Value为[牛奶]。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;此时Client2向其中添加鸡蛋，其并不知道Client1添加了牛奶，但服务器可以知道，因此分配版本号为2，并且将鸡蛋和牛奶存成两个单独的值，最后将两个值和版本号2返回给客户端。此时服务端存储了[鸡蛋] 2 [牛奶]1。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同理，Client1添加面粉，这时候Client1只认为添加了[牛奶]，因此将面粉与牛奶合并发送给服务端[牛奶，面粉]，同时还附带了之前收到的版本号1，此时服务端知道，新值[牛奶，面粉]可以替换同一个版本号中的旧值[牛奶]，但[鸡蛋]是并发事件，分配版本号3，返回值[牛奶，面粉] 3 [鸡蛋]2。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同理，Client2向购物车添加[火腿]，但在之前的请求中，返回了[鸡蛋][牛奶]，因此和火腿合并发送给服务端[鸡蛋，牛奶，火腿]，同时附带了版本号2，服务端直接将新值覆盖之前版本2的值[鸡蛋]，但[牛奶，面粉]是并发事件，因此存储值为[牛奶，面粉] 3 [鸡蛋，牛奶，火腿] 4并分配版本号4。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最后一次Client添加培根，通过之前返回的值里，知道有[牛奶，面粉，鸡蛋]，Client将值合并[牛奶，面粉，鸡蛋，培根]联通之前的版本号一起发送给服务端，服务端判断[牛奶，面粉，鸡蛋，培根]可以覆盖之前的[牛奶，面粉]但[鸡蛋，牛奶，火腿]是并发值，加以保留。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;通过上面的例子，我们看到了一个根据事件本身进行因果关系的确定。书中给出了进一步的抽象流程：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有了这套算法，我们就可以检测出事件中有因果关系的事件与并发的事件，而对于并发的事件，仍然像上文提到的那样，需要依据一定的原则进行合并，如果使用LWW，依然可能存在数据丢失的情况。因此，需要在服务端程序的合并逻辑中需要额外做些事情。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在购物车这个例子中，比较合理的是合并新值和旧值，即最后的值是[牛奶，鸡蛋，面粉，火腿，培根]，但这样也会导致一个问题，假设其中的一个用户删除了一项商品，但是union完还是会出现在最终的结果中，这显然不符合预期。因此可以用一个类似的标记位，标记记录的删除，这样在合并时可以将这个商品踢出，这个标记在书中被称为墓碑（&lt;/span&gt;&lt;span&gt;Tombstone&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.3 无主节点复制&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;之前介绍的复制模式都是存在明确的主节点，从节点的角色划分的，主节点需要将数据复制到从节点，所有写入的顺序由主节点控制。但有些系统干脆放弃了这个思路，去掉了主节点，任何副本都能直接接受来自客户端的写请求，或者再有一些系统中，会给到一个协调者代表客户端进行写入（&lt;/span&gt;&lt;span&gt;以Group Commit为例，由一个线程积攒所有客户端的请求统一发送&lt;/span&gt;&lt;span&gt;），与多主模式不同，协调者不负责控制写入顺序，这个限制的不同会直接影响系统的使用方式。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;处理节点失效&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;假设一个数据系统拥有三个副本，当其中一个副本不可用时，在主从模式中，如果恰好是主节点，则需要进行节点切换才能继续对外提供服务，但在无主模式下，并不存在这一步骤，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;335&quot; data-ratio=&quot;0.5951417004048583&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaNZxIY65pIRwGWSzfCJiaaEBetia28c9KZKbE4ZX8V2t32Az8UibicMvx1w/640?wx_fmt=png&quot; data-w=&quot;988&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图8 Quorum写入处理节点失效&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里的Replica3在某一时刻无法提供服务，此时用户可以收到两个Replica的写入成功的确认，即可认为写入成功，而完全可以忽略那个无法提供服务的副本。当失效的节点恢复时，会重新提供读写服务，此时如果客户端向这个副本读取数据，就会请求到过期值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了解决这个问题，这里客户端就不是简单向一个节点请求数据了，而是向所有三个副本请求，这时可能会收到不同的响应，这时可以通过类似版本号来区分数据的新旧（&lt;/span&gt;&lt;span&gt;类似上文中并发写入的检测方式&lt;/span&gt;&lt;span&gt;）。这里可能有一个问题，副本恢复之后难道就一直让自己落后于其他副本吗？这肯定不行，这会打破一致性的语义，因此需要一个机制。有两种思路：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端读取时对副本做修复，如果客户端通过并行读取多个副本时，读到了过期的数据，可以将数据写入到旧副本中，以便追赶上新副本。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;反熵查询，一些系统在副本启动后，后台会不断查找副本之间的数据diff，将diff写到自己的副本中，与主从复制模式不同的是，此过程不保证写入的顺序，并可能引发明显的复制滞后。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;读写Quorum&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;上文中的实例我们可以看出，这种复制模式下，要想保证读到的是写入的新值，每次只从一个副本读取显然是有问题的，那么需要每次写几个副本呢，又需要读取几个副本呢？这里的一个核心点就是让写入的副本和读取的副本有交集，那么我们就能够保证读到新值了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;直接上公式：&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 4611 765&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;77&quot; d=&quot;M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(938.2, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1938.4, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2667.2, 0)&quot;&gt;&lt;path data-c=&quot;3E&quot; d=&quot;M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3723, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 。其中N为副本的数量，w为每次并行写入的节点数，r为每次同时读取的节点数，这个公式非常容易理解，就不做过多赘述。不过这里的公式虽然看着比较直白也简单，里面却蕴含了一些系统设计思考：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;一般配置方法，取&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1047.1 7243.8 1392.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;77&quot; d=&quot;M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(993.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2049.6, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2778.3, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3834.1, 0)&quot;&gt;&lt;path data-c=&quot;2308&quot; d=&quot;M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mfrac&quot; transform=&quot;translate(4278.1, 0)&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(220, 516.8) scale(0.707)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1277, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2055, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2555, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1084.1, -345) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;rect x=&quot;120&quot; y=&quot;220&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6799.8, 0)&quot;&gt;&lt;path data-c=&quot;2309&quot; d=&quot;M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;w，r与N的关系决定了能够容忍多少的节点失效&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;假设N=3, w=2, r=2，可以容忍1个节点故障。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;假设N=5，w=3, r=3 可以容忍2个节点故障。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;N个节点可以容忍可以容忍&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1047.1 5132.2 1392.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2308&quot; d=&quot;M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mfrac&quot; transform=&quot;translate(444, 0)&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(220, 516.8) scale(0.707)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1277, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2055, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2555, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1084.1, -345) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;rect x=&quot;120&quot; y=&quot;220&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2965.7, 0)&quot;&gt;&lt;path data-c=&quot;2309&quot; d=&quot;M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3631.9, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(4632.2, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;个节点故障。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;在实际实现中，一般数据会发送或读取所有节点，w和r决定了我们需要等待几个节点的写入或读取确认。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Quorum一致性的局限性&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;看上去这个简单的公式就可以实现很强大的功能，但这里有一些问题值得注意：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;首先，Quorum并不是一定要求多数，重要的是读取的副本和写入副本有重合即可，可以按照读写的可用性要求酌情考虑配置。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;另外，对于一些没有很强一致性要求的系统，可以配置w+r &amp;lt;= N，这样可以等待更少的节点即可返回，这样虽然有可能读取到一个旧值，但这种配置可以很大提升系统的可用性，当网络大规模故障时更有概率让系统继续运行而不是由于没有达到Quorum限制而返回错误。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;假设在w+r&amp;gt;N的情况下，实际上也存在边界问题导致一些一致性问题：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;首先假设是Sloppy Quorum（&lt;/span&gt;&lt;span&gt;一个更为宽松的Quorum算法&lt;/span&gt;&lt;span&gt;），写入的w和读取的r可能完全不相交，因此不能保证数据一定是新的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果两个写操作同时发生，那么还是存在冲突，在合并时，如果基于LWW，仍然可能导致数据丢失。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果写读同时发生，也不能保证读请求一定就能取到新值，因为复制具有滞后性（&lt;/span&gt;&lt;span&gt;上文的复制窗口&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果某些副本写入成功，其他副本写入失败（&lt;/span&gt;&lt;span&gt;磁盘空间满&lt;/span&gt;&lt;span&gt;）且总的成功数少于w，那些成功的副本数据并不会回滚，这意味着及时写入失败，后续还是可能读到新值。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;虽然，看上去Quorum复制模式可以保证获取到新值，但实际情况并不是我们想象的样子，这个协议到最后可能也只能达到一个最终的一致性，并且依然需要共识算法的加持。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.4 本章小结&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;以上我们介绍了所有常见的复制模式，我们可以看到，每种模式都有一定的应用场景和优缺点，但是很明显，光有复制模式远远达不到数据的一致性，因为分布式系统中拥有太多的不确定性，需要后面各种事务、共识算法的帮忙才能去真正对抗那些“稀奇古怪”的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;到这里，可能会有同学就会问，到底都是些什么稀奇古怪的问题呢？相比单机系统又有那些独特的问题呢？下面本文先来介绍分布式系统中的几个最典型的挑战（&lt;/span&gt;&lt;span&gt;Trouble&lt;/span&gt;&lt;span&gt;），让一些同学小小地“绝望”一下，然后我们会下一篇文章中再揭晓答案。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 分布式系统的挑战&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;这部分存在的意义主要想让大家理解，为什么一些看似简单的问题到了分布式系统中就会变得异常复杂。顺便说一声，这一章都是一些“奇葩”现象，并没有过于复杂的推理和证明，希望大家能够较为轻松愉悦地看完这些内容。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 部分失效&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;这是分布式系统中特有的一个名词，这里先看一个现实当中的例子。假设老板想要处理一批文件，如果让一个人做，需要十天。但老板觉得有点慢，于是他灵机一动，想到可以找十个人来搞定这件事，然后自己把工作安排好，认为这十个人一天正好干完，于是向他的上级信誓旦旦地承诺一天搞定这件事。他把这十个人叫过来，把任务分配给了他们，他们彼此建了个微信群，约定每个小时在群里汇报自己手上的工作进度，并强调在晚上5点前需要通过邮件提交最后的结果。于是老版就去愉快的喝茶去了，但是现实却让他大跌眼镜。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，有个同学家里信号特别差，报告进度的时候只成功报告了3个小时的，然后老板在微信里问，也收不到任何回复，最后结果也没法提交。另一个同学家的表由于长期没换电池，停在了下午四点，结果那人看了两次表都是四点，所以一点都没着急，中间还看了个电影，慢慢悠悠做完交上去了，他还以为老板会表扬他，提前了一小时交，结果实际上已经是晚上八点了。还有一个同学因为前一天没睡好，效率极低，而且也没办法再去高强度的工作了。结果到了晚上5点，只有7个人完成了自己手头上的工作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个例子可能看起来并不是非常恰当，但基本可以描述分布式系统特有的问题了。在分布式的系统中，我们会遇到各种“稀奇古怪”的故障，例如家里没信号（网络故障)，不管怎么叫都不理你，或者断断续续的理你。另外，因为每个人都是通过自己家的表看时间的，所谓的5点需要提交结果，在一定程度上旧失去了参考的绝对价值。因此，作为上面例子中的“老板”，不能那么自信的认为一个人干工作需要10天，就可以放心交给10个人，让他们一天搞定。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们需要有各种措施来应对分派任务带来的不确定性，回到分布式系统中，部分失效是分布式系统一定会出现的情况。作为系统本身的设计人员，我们所设计的系统需要能够容忍这种问题，相对单机系统来说，这就带来了特有的复杂性。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 分布式系统特有的故障&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不可靠的网络&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;对于一个纯的分布式系统而言，它的架构大多为Share Nothing架构，即使是存算分离这种看似的Share Storage，它的底层存储一样是需要解决Share Nothing的。所谓Nothing，这里更倾向于叫Nothing but Network，网络是不同节点间共享信息的唯一途径，数据的传输主要通过以太网进行传输，这是一种异步网络，也就是网络本身并不保证发出去的数据包一定能被接到或是何时被收到。这里可能发生各种错误，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;545&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;237&quot; data-ratio=&quot;0.43524416135881105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaZaia0hO33oibAUlw3l4lJ71ZuuLavAGv8IgpLQwic8bzsNjy8WKuLkz7g/640?wx_fmt=png&quot; data-w=&quot;942&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图9 不可靠的网络&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;请求丢失&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;请求正在某个队列中等待&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;远程节点已经失效&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;远程节点无法响应&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;远程节点已经处理完请求，但在ack的时候丢包&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;远程接收节点已经处理完请求，但回复处理很慢&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;本文认为，造成网络不可靠的原因不光是以太网和IP包本身，其实应用本身有时候异常也是造成网络不可靠的一个诱因。因为，我们所采用的节点间传输协议大多是TCP，TCP是个端到端的协议，是需要发送端和接收端两端内核中明确维护数据结构来维持连接的，如果应用层发生了下面的问题，那么网络包就会在内核的Socket Buffer中排队得不到处理，或响应得不到处理。&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用程序GC。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;处理节点在进行重的磁盘I/O，导致CPU无法从中断中恢复从而无法处理网络请求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;由于内存换页导致的颠簸。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;这些问题和网络本身的不稳定性相叠加，使得外界认为的网络不靠谱的程度更加严重。因此这些不靠谱，会极大地加重上一章中的 复制滞后性，进而带来各种各样的一致性问题。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;应对之道&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;网络异常相比其他单机上的错误而言，可能多了一种不确定的返回状态，即延迟，而且延迟的时间完全无法预估。这会让我们写起程序来异常头疼，对于上一章中的问题，我们可能无从知晓节点是否失效，因为你发的请求压根可能不会有人响应你。因此，我们需要把上面的“不确定”变成一种确定的形式，那就是利用“超时”机制。这里引申出两个问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1.  假设能够检测出失效，我们应该如何应对？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;a. 负载均衡需要避免往失效的节点上发数据（&lt;/span&gt;&lt;span&gt;服务发现模块中的健康检查功能&lt;/span&gt;&lt;span&gt;）。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;b. 如果在主从复制中，如果主节点失效，需要出发选举机制（&lt;/span&gt;&lt;span&gt;Kafka中的临时节点掉线，Controller监听到变更触发新的选举，Controller本身的选举机制&lt;/span&gt;&lt;span&gt;）。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;c. 如果服务进程崩溃，但操作系统运行正常，可以通过脚本通知其他节点，以便新的节点来接替（&lt;/span&gt;&lt;span&gt;Kafka的僵尸节点检测，会触发强制的临时节点掉线&lt;/span&gt;&lt;span&gt;）。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;d. 如果路由器已经确认目标节点不可访问，则会返回ICMP不可达（&lt;/span&gt;&lt;span&gt;ping不通走下线&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2. 如何设置超时时间是合理的？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很遗憾地告诉大家，这里面实际上是个权衡的问题，短的超时时间会更快地发现故障，但同时增加了误判的风险。这里假设网络正常，那么如果端到端的ping时间为d，处理时间为r，那么基本上请求会在2d+r的时间完成。但在现实中，我们无法假设异步网络的具体延迟，实际情况可能会更复杂。因此这是一个十分靠经验的工作。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 不可靠的时钟&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;说完了“信号”的问题，下面就要说说每家的“钟表”——时钟了，它主要用来做两件事：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;描述当前的绝对时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;描述某件事情的持续时间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;在DDIA中，对于这两类用途给出了两种时间，一类成为墙上时钟，它们会返回当前的日期和时间，例如clock_gettime(&lt;/span&gt;&lt;span&gt;CLOCK_REALTIME&lt;/span&gt;&lt;span&gt;) 或者System.currentTimeMills，但这类反应精确时间的API，由于时钟同步的问题，可能会出现回拨的情况。因此，作为持续时间的测量通常采用单调时钟，例如clock_gettime(&lt;/span&gt;&lt;span&gt;CLOCK_MONOTONIC&lt;/span&gt;&lt;span&gt;) 或者System.nanoTime。高版本的Kafka中把请求的相应延迟计算全部换成了这个API实现，应该也是这个原因。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里时钟同步的具体原理，以及如何会出现不准确的问题，这里就不再详细介绍了，感兴趣的同学可以自行阅读书籍。下面将介绍一下如何使用时间戳来描述事件顺序的案例，并展示如何因时钟问题导致事件顺序判断异常的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5462012320328542&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVboL0PYL0ZTicsMU8qhtfVaRZJjmUCibeeicuia9wUP3SFksGialPzMUkcnKtic5ZyNgyVbfPSdmhSpywA/640?wx_fmt=png&quot; data-w=&quot;974&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图10 不可靠的时钟&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里我们发现，Node1的时钟比Node3快，当两个节点在处理完本地请求准备写Node2时发生了问题，原本ClientB的写入明显晚于ClientA的写入，但最终的结果，却由于Node1的时间戳更大而丢弃了本该保留的x+=1，这样，如果我们使用LWW，一定会出现数据不符合预期的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于时钟不准确，这里就引入了统计学中的置信区间的概念，也就是这个时间到底在一个什么样的范围里，一般的API是无法返回类似这样的信息的。不过，Google的TrueTime API则恰恰能够返回这种信息，其调用结果是一个区间，有了这样的API，确实就可以用来做一些对其有依赖的事情了，例如Google自家的Spanner，就是使用TrueTime实现快照隔离。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如何在这艰难的环境中设计系统&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;上面介绍的问题是不是挺“令人绝望”的？你可能发现，现在时间可能是错的，测量可能是不准的，你的请求可能得不到任何响应，你可能不知道它是不是还活着......这种环境真的让设计分布式系统变得异常艰难，就像是你在100个人组成的大部门里面协调一些工作一样，工作量异常的巨大且复杂。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但好在我们并不是什么都做不了，以协调这件事为例，我们肯定不是武断地听取一个人的意见，让我们回到学生时代。我们需要评选一位班长，肯定我们都经历过投票、唱票的环节，最终得票最多的那个人当选，有时可能还需要设置一个前提，需要得票超过半数。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;映射到分布式系统中也是如此，我们不能轻易地相信任何一台节点的信息，因为它有太多的不确定，因此更多的情况下，在分布式系统中如果我们需要就某个事情达成一致，也可以采取像竞选或议会一样，大家协商、投票、仲裁决定一项提议达成一致，真相由多数人商议决定，从而达到大家的一致和统一，这也就是后面要介绍的分布式共识协议。这个协议能够容忍一些节点的部分失效，或者莫名其妙的故障带来的问题，让系统能够正常地运行下去，确保请求到的数据是可信的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面给出一些实际分布式算法的理论模型，根据对于延迟的假设不同，这里介绍三种系统模型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1. 同步模型&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该模型主要假设网络延迟是有界的，我们可以清楚地知道这个延迟的上下界，不管出现任何情况，它都不会超出这个界限。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2. 半同步模型（大部分模型都是基于这个假设）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;半同步模型认为大部分情况下，网络和延迟都是正常的，如果出现违背的情况，偏差可能会非常大。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3. 异步模型&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对延迟不作任何假设，没有任何超时机制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而对于节点失效的处理，也存在三种模型，这里我们忽略恶意谎言的拜占庭模型，就剩下两种。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1.&lt;strong&gt;崩溃-终止模型（Crash-Stop）&lt;/strong&gt;：该模型中假设一个节点只能以一种方式发生故障，即崩溃，可能它会在任意时刻停止响应，然后永远无法恢复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.&lt;strong&gt;崩溃-恢复模型&lt;/strong&gt;：节点可能在任何时刻发生崩溃，可能会在一段时间后恢复，并再次响应，在该模型中假设，在持久化存储中的数据将得以保存，而内存中的数据会丢失。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;而多数的算法都是基于半同步模型+崩溃-恢复模型来进行设计的。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Safety and Liveness&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;这两个词在分布式算法设计时起着十分关键的作用，其中安全性（&lt;/span&gt;&lt;span&gt;Safety&lt;/span&gt;&lt;span&gt;）表示没有意外发生，假设违反了安全性原则，我们一定能够指出它发生的时间点，并且安全性一旦违反，无法撤销。而活性（&lt;/span&gt;&lt;span&gt;Liveness&lt;/span&gt;&lt;span&gt;）则表示“预期的事情最终一定会发生”，可能我们无法明确具体的时间点，但我们期望它在未来某个时间能够满足要求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在进行分布式算法设计时，通常需要必须满足安全性，而活性的满足需要具备一定的前提。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 总结&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;以上就是第一篇文章的内容，简单做下回顾，本文首先介绍了复制的三种常见模型，分别是主从复制、多主复制和无主复制，然后分别介绍了这三种模型的特点、适用场景以及优缺点。接下来，我们用了一个现实生活中的例子，向大家展示了分布式系统中常见的两个特有问题，分别是节点的部分失效以及无法共享系统时钟的问题，这两个问题为我们设计分布式系统带来了比较大的挑战。如果没有一些设计特定的措施，我们所设计的分布式系统将无法很好地满足设计的初衷，用户也无法通过分布式系统来完成自己想要的工作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上这些问题，我们会下篇文章《Replication（下）：事务，一致性与共识》中逐一进行解决，而事务、一致性、共识这三个关键词，会为我们在设计分布式系统时保驾护航。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. 作者简介&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;仕禄，美团基础研发平台/数据科学与平台部工程师。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;也许你还想看&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  | &lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651770296&amp;amp;idx=1&amp;amp;sn=058448855d5ce0a9af2e495903fc0d05&amp;amp;chksm=bd1214f58a659de30c3974f7658ebbc54cbb3bf4371beb13ea1efd7868f556fd3d423eab27a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Kafka在美团数据平台的实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Kafka在美团数据平台的实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt;&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651756933&amp;amp;idx=1&amp;amp;sn=a23c294fe1873d6b2c50730e47eda608&amp;amp;chksm=bd1240c88a65c9de720b8568bf7cf90a365c1df45732a36493eb58cc1ff8cf8461cb4829f102&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;基于SSD的Kafka应用层缓存架构设计与实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;基于SSD的Kafka应用层缓存架构设计与实现&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=203083582&amp;amp;idx=1&amp;amp;sn=701022c664d42b54b55d43e6bc46056b&amp;amp;chksm=2f06167318719f65e90a8154a48e875f474c56e47b66aa6607f27c9ba6779ae062195720e6f6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;美团技术团队博客：Kafka文件存储机制那些事&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Kafka文件存储机制那些事&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阅读更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;---&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765958&amp;amp;idx=1&amp;amp;sn=8201546812e5a95a2bee9dffc6d12f00&amp;amp;chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;前端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://t.1yb.co/jo7v&quot; textvalue=&quot; 安全&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765981&amp;amp;idx=1&amp;amp;sn=c2dd86f15dee2cbbc89e27677d985060&amp;amp;chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;算‍法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;算法&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765982&amp;amp;idx=1&amp;amp;sn=231b41f653ac7959f3e3b8213dcec2b0&amp;amp;chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;后端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765964&amp;amp;idx=1&amp;amp;sn=ab6d8db147234fe57f27dd46eec40fef&amp;amp;chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数‍据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;数据&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765965&amp;amp;idx=1&amp;amp;sn=37e0c56c8b080146ce5249243bfd84d8&amp;amp;chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;安‍全&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;安全&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765972&amp;amp;idx=1&amp;amp;sn=afe02ec92762c1ce18740d03324c4ac3&amp;amp;chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;And‍roid&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Android&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765973&amp;amp;idx=1&amp;amp;sn=32a23bf1d278dda0398f993ab60a697e&amp;amp;chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;iO‍S&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;iOS&lt;/span&gt;&lt;/a&gt;&lt;span&gt; &lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765963&amp;amp;idx=1&amp;amp;sn=a3de9ef267d07d94118c1611776a4b28&amp;amp;chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运‍维&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;运维&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765974&amp;amp;idx=1&amp;amp;sn=763c1e37d04acffd0142a2852ecfb000&amp;amp;chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;测‍试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NjQ5MTI5OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVGibnsaEib3aNlqF0tOrA2RGEmNSbia2nnohE4Tpf95UyTiaSjDVbHRfY8WNBeTuLLTaVdSckkNyEx1Q/0?wx_fmt=png&quot; data-nickname=&quot;美团技术团队&quot; data-alias=&quot;meituantech&quot; data-signature=&quot;10000+工程师，如何支撑中国领先的生活服务电子商务平台？数亿消费者、数百万商户、2000多个行业、几千亿交易额背后是哪些技术在支撑？这里是美团、大众点评、美团外卖、美团配送、美团优选等技术团队的对外窗口。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c0519f7c3306ecefcf90403758257651</guid>
<title>Java 日期处理易踩的十个坑</title>
<link>https://toutiao.io/k/ssuyj5l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;整理了 Java 日期处理的十个坑，希望对大家有帮助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1. 用 Calendar 设置时间的坑&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;pre highlighted=&quot;true&quot; has-selection=&quot;true&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;Calendar&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;code-snippet__type&quot;&gt;Calendar&lt;/span&gt;.getInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__type&quot;&gt;Calendar&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;HOUR&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.out.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.getTime());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Thu&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Mar&lt;/span&gt; 26 22&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:05&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;GMT&lt;/span&gt;+08&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:00&lt;/span&gt; 2020&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们设置了 10 小时，但运行结果是 22 点，而不是 10 点。因为 Calendar.HOUR 默认是按 12 小时制处理的，需要使用 Calendar.HOUR_OF_DAY，因为它才是按 24 小时处理的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;pre highlighted=&quot;true&quot; has-selection=&quot;true&quot;&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;Calendar&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;code-snippet__type&quot;&gt;Calendar&lt;/span&gt;.getInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__type&quot;&gt;Calendar&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;HOUR_OF_DAY&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2. Java 日期格式化 YYYY 的坑&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Calendar calendar = Calendar.getInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;calendar.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;2019&lt;/span&gt;, Calendar.DECEMBER, &lt;span class=&quot;code-snippet__number&quot;&gt;31&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Date testDate = calendar.getTime();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SimpleDateFormat dtf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;YYYY-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2019-12-31 转 YYYY-MM-dd 格式后 &quot;&lt;/span&gt; + dtf.format(testDate));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;pre highlighted=&quot;true&quot; has-selection=&quot;true&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2019-12-31 转 YYYY-MM-dd 格式后 2020-12-31&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么明明是 2019 年 12 月 31 号，就转了一下格式，就变成了 2020 年 12 月 31 号了？因为 YYYY 是基于周来计算年的，它指向当天所在周属于的年份，一周从周日开始算起，周六结束，只要本周跨年，那么这一周就算下一年的了。正确姿势是使用 yyyy 格式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Calendar calendar = Calendar.getInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;calendar.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;2019&lt;/span&gt;, Calendar.DECEMBER, &lt;span class=&quot;code-snippet__number&quot;&gt;31&lt;/span&gt;);Date testDate = calendar.getTime();SimpleDateFormat dtf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2019-12-31 转 yyyy-MM-dd 格式后 &quot;&lt;/span&gt; + dtf.format(testDate));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3. Java日期格式化hh的坑。&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2020-03-18 12:00&quot;&lt;/span&gt;;SimpleDateFormat dtf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd hh:mm&quot;&lt;/span&gt;);&lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; newDate = dtf.parse(str);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.out.println(newDate);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Wed&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Mar&lt;/span&gt; 18 00&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:00&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:00&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;GMT&lt;/span&gt;+08&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:00&lt;/span&gt; 2020&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;设置的时间是 12 点，为什么运行结果是 0 点呢？因为 hh 是 12 制的日期格式，当时间为 12 点，会处理为 0 点。正确姿势是使用 HH，它才是 24 小时制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; str = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2020-03-18 12:00&quot;&lt;/span&gt;;SimpleDateFormat dtf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; newDate = dtf.parse(str);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.out.println(newDate);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. Calendar 获取的月份比实际数字少 1 即 (0-11)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;当前&quot;&lt;/span&gt;+calendar.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(Calendar.MONTH)+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;月份&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;当前2月份&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;The first month of the year in the Gregorian and Julian calendarsis &lt;/span&gt;&lt;code&gt;&lt;span&gt;JANUARY&lt;/span&gt;&lt;/code&gt;&lt;span&gt; which is 0;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是1月对应的是下标 0，依次类推。因此获取正确月份需要加 1。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;当前&quot;&lt;/span&gt;+(calendar.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(Calendar.MONTH)+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;月份&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;5. Java 日期格式化 DD 的坑&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Calendar calendar = Calendar.getInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;calendar.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;2019&lt;/span&gt;, Calendar.DECEMBER, &lt;span class=&quot;code-snippet__number&quot;&gt;31&lt;/span&gt;);Date testDate = calendar.getTime();SimpleDateFormat dtf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-DD&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2019-12-31 转 yyyy-MM-DD 格式后 &quot;&lt;/span&gt; + dtf.format(testDate));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2019-12-31 转 yyyy-MM-DD 格式后 2019-12-365&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;DD 和 dd 表示的不一样，DD 表示的是一年中的第几天，而 dd 表示的是一月中的第几天，所以应该用的是 dd。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Calendar calendar = Calendar.getInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;calendar.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;2019&lt;/span&gt;, Calendar.DECEMBER, &lt;span class=&quot;code-snippet__number&quot;&gt;31&lt;/span&gt;);Date testDate = calendar.getTime();SimpleDateFormat dtf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2019-12-31 转 yyyy-MM-dd 格式后 &quot;&lt;/span&gt; + dtf.format(testDate));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;6. SimleDateFormat的format 初始化问题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SimpleDateFormat sdf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(sdf.format(&lt;span class=&quot;code-snippet__number&quot;&gt;20200323&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1970-01-01&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用 format 格式化日期是，要输入的是一个 Date 类型的日期，而不是一个整型或者字符串。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Calendar calendar = Calendar.getInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;calendar.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;2020&lt;/span&gt;, Calendar.MARCH, &lt;span class=&quot;code-snippet__number&quot;&gt;23&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SimpleDateFormat sdf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(sdf.format(calendar.getTime()));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;7. 日期本地化问题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; dateStr = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Wed Mar 18 10:00:00 2020&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;EEE MMM dd HH:mm:ss yyyy&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;LocalDateTime dateTime = LocalDateTime.parse(dateStr, formatter);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.out.println(dateTime);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Exception in thread &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.time.format.DateTimeParseException: Text &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Wed Mar 18 10:00:00 2020&#x27;&lt;/span&gt; could &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; be parsed at &lt;span class=&quot;code-snippet__keyword&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;at java.time.format.DateTimeFormatter.parseResolved&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;(DateTimeFormatter.java:&lt;span class=&quot;code-snippet__number&quot;&gt;1949&lt;/span&gt;) at java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:&lt;span class=&quot;code-snippet__number&quot;&gt;1851&lt;/span&gt;) at java.time.LocalDateTime.parse(LocalDateTime.java:&lt;span class=&quot;code-snippet__number&quot;&gt;492&lt;/span&gt;) at com.example.demo.SynchronizedTest.main(SynchronizedTest.java:&lt;span class=&quot;code-snippet__number&quot;&gt;19&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DateTimeFormatter 这个类默认进行本地化设置，如果默认是中文，解析英文字符串就会报异常。可以传入一个本地化参数（Locale.US）解决这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; dateStr = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Wed Mar 18 10:00:00 2020&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;EEE MMM dd HH:mm:ss yyyy&quot;&lt;/span&gt;,Locale.US);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;LocalDateTime dateTime = LocalDateTime.parse(dateStr, formatter);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.out.println(dateTime);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;8. SimpleDateFormat 解析的时间精度问题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SimpleDateFormat sdf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; time = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2020-03&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.out.println(sdf.parse(time));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;thread&lt;/span&gt; &quot;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;main&lt;/span&gt;&quot; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.text&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.ParseException&lt;/span&gt;: &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Unparseable&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;date&lt;/span&gt;: &quot;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-03&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.text&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.DateFormat&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.parse&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;DateFormat&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.java&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:366)&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.example&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.SynchronizedTest&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.main&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;SynchronizedTest&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.java&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:19)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SimpleDateFormat 可以解析长于/等于它定义的时间精度，但是不能解析小于它定义的时间精度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SimpleDateFormat sdf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; time = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2020-03&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.out.println(sdf.parse(time));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;9. SimpleDateFormat 的线性安全问题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import java.util.regex.Matcher;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import java.util.regex.Pattern;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RegexMatches&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String args[]&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String line = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;This order was placed for QT3000! OK?&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String pattern = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;(.*)(\\d+)(.*)&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Pattern r = Pattern.compile(pattern);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Matcher m = r.matcher(line);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (m.find()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Found value: &quot;&lt;/span&gt; + m.&lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Found value: &quot;&lt;/span&gt; + m.&lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Found value: &quot;&lt;/span&gt; + m.&lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;NO MATCH&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;powershell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Exception &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; thread &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pool-1-thread-49&quot;&lt;/span&gt; java.lang.NumberFormatException: &lt;span class=&quot;code-snippet__keyword&quot;&gt;For&lt;/span&gt; input string: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;5151.&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;at java.lang.NumberFormatException.forInputString(NumberFormatException.java:&lt;span class=&quot;code-snippet__number&quot;&gt;65&lt;/span&gt;) at java.lang.Long.parseLong(Long.java:&lt;span class=&quot;code-snippet__number&quot;&gt;589&lt;/span&gt;) at java.lang.Long.parseLong(Long.java:&lt;span class=&quot;code-snippet__number&quot;&gt;631&lt;/span&gt;) at java.text.DigitList.getLong(DigitList.java:&lt;span class=&quot;code-snippet__number&quot;&gt;195&lt;/span&gt;) at java.text.DecimalFormat.parse(DecimalFormat.java:&lt;span class=&quot;code-snippet__number&quot;&gt;2051&lt;/span&gt;) at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:&lt;span class=&quot;code-snippet__number&quot;&gt;2162&lt;/span&gt;) at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:&lt;span class=&quot;code-snippet__number&quot;&gt;1514&lt;/span&gt;) at java.text.DateFormat.parse(DateFormat.java:&lt;span class=&quot;code-snippet__number&quot;&gt;364&lt;/span&gt;) at com.example.demo.SimpleDateFormatTest.lambda&lt;span class=&quot;code-snippet__variable&quot;&gt;$main&lt;/span&gt;&lt;span class=&quot;code-snippet__variable&quot;&gt;$0&lt;/span&gt;(SimpleDateFormatTest.java:&lt;span class=&quot;code-snippet__number&quot;&gt;19&lt;/span&gt;) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:&lt;span class=&quot;code-snippet__number&quot;&gt;1149&lt;/span&gt;) at java.util.concurrent.ThreadPoolExecutor&lt;span class=&quot;code-snippet__variable&quot;&gt;$Worker&lt;/span&gt;.run(ThreadPoolExecutor.java:&lt;span class=&quot;code-snippet__number&quot;&gt;624&lt;/span&gt;) at java.lang.Thread.run(Thread.java:&lt;span class=&quot;code-snippet__number&quot;&gt;748&lt;/span&gt;)Exception &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; thread &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pool-1-thread-47&quot;&lt;/span&gt; java.lang.NumberFormatException: &lt;span class=&quot;code-snippet__keyword&quot;&gt;For&lt;/span&gt; input string: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;5151.&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;at java.lang.NumberFormatException.forInputString(NumberFormatException.java:&lt;span class=&quot;code-snippet__number&quot;&gt;65&lt;/span&gt;) at java.lang.Long.parseLong(Long.java:&lt;span class=&quot;code-snippet__number&quot;&gt;589&lt;/span&gt;) at java.lang.Long.parseLong(Long.java:&lt;span class=&quot;code-snippet__number&quot;&gt;631&lt;/span&gt;) at java.text.DigitList.getLong(DigitList.java:&lt;span class=&quot;code-snippet__number&quot;&gt;195&lt;/span&gt;) at java.text.DecimalFormat.parse(DecimalFormat.java:&lt;span class=&quot;code-snippet__number&quot;&gt;2051&lt;/span&gt;) at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:&lt;span class=&quot;code-snippet__number&quot;&gt;2162&lt;/span&gt;) at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:&lt;span class=&quot;code-snippet__number&quot;&gt;1514&lt;/span&gt;) at java.text.DateFormat.parse(DateFormat.java:&lt;span class=&quot;code-snippet__number&quot;&gt;364&lt;/span&gt;) at com.example.demo.SimpleDateFormatTest.lambda&lt;span class=&quot;code-snippet__variable&quot;&gt;$main&lt;/span&gt;&lt;span class=&quot;code-snippet__variable&quot;&gt;$0&lt;/span&gt;(SimpleDateFormatTest.java:&lt;span class=&quot;code-snippet__number&quot;&gt;19&lt;/span&gt;) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:&lt;span class=&quot;code-snippet__number&quot;&gt;1149&lt;/span&gt;) at java.util.concurrent.ThreadPoolExecutor&lt;span class=&quot;code-snippet__variable&quot;&gt;$Worker&lt;/span&gt;.run(ThreadPoolExecutor.java:&lt;span class=&quot;code-snippet__number&quot;&gt;624&lt;/span&gt;) at java.lang.Thread.run(Thread.java:&lt;span class=&quot;code-snippet__number&quot;&gt;748&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全局变量的 SimpleDateFormat，在并发情况下，存在安全性问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SimpleDateFormat 继承了 DateFormat；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DateFormat 类中维护了一个全局的 Calendar 变量；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;sdf.parse(dateStr) 和 sdf.format(date)，都是由 Calendar 引用来储存的；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果 SimpleDateFormat 是 static 全局共享的，Calendar 引用也会被共享；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;又因为 Calendar 内部并没有线程安全机制，所以全局共享的 SimpleDateFormat 不是线性安全的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决 SimpleDateFormat 线性不安全问题，有三种方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; SimpleDateFormatTest {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; final &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; DATE_FORMAT = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; ThreadLocal &amp;lt; DateFormat &amp;gt; threadLocal = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ThreadLocal &amp;lt; DateFormat &amp;gt; ();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; DateFormat getDateFormat() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        DateFormat df = threadLocal.get();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (df == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            df = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(DATE_FORMAT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            threadLocal.set(df);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; df;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; formatDate(&lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; date) throws ParseException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; getDateFormat().format(date);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; parse(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; strDate) throws ParseException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; getDateFormat().parse(strDate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[] args) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ThreadPoolExecutor threadPoolExecutor = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, TimeUnit.MINUTES, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue &amp;lt; &amp;gt; (&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            threadPoolExecutor.execute(() - &amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; dateString = formatDate(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt;());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Date&lt;/span&gt; parseDate = parse(dateString);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; dateString2 = formatDate(parseDate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    System.out.println(dateString.equals(dateString2));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (ParseException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;10. Java日期的夏令时问题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;TimeZone.setDefault(TimeZone.getTimeZone(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SimpleDateFormat sdf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(sdf.parse(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1986-05-04 00:30:00&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Sun&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;May&lt;/span&gt; 04 01&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:30&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:00&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;CDT&lt;/span&gt; 1986&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解析：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先了解一下夏令时：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;夏令时，表示为了节约能源，人为规定时间的意思。&lt;/span&gt;&lt;span&gt;一般在天亮早的夏季人为将时间调快一小时，可以使人早起早睡，减少照明量，以充分利用光照资源，从而节约照明用电。&lt;/span&gt;&lt;span/&gt;&lt;span&gt;各个采纳夏时制的国家具体规定不同。目前全世界有近110个国家每年要实行夏令时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1986年4月，中国中央有关部门发出“在全国范围内实行夏时制的通知”，具体作法是：每年从四月中旬第一个星期日的凌晨2时整（北京时间），将时钟拨快一小时。(1992年起，夏令时暂停实行。)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;夏时令这几个时间可以注意一下哈，1986-05-04, 1987-04-12, 1988-04-10, 1989-04-16, 1990-04-15, 1991-04-14.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结合 Demo 代码，中国在 1986-05-04 当天还在使用夏令时，时间被拨快了 1 个小时。所以 0 点 30 分打印成了 1 点 30 分。如果要打印正确的时间，可以考虑修改时区为东 8 区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;正例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre highlighted=&quot;true&quot; has-selection=&quot;true&quot; cnb-code-toolbar-active=&quot;true&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;TimeZone.setDefault(TimeZone.getTimeZone(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GMT+8&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SimpleDateFormat sdf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(sdf.parse(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1986-05-04 00:30:00&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651492514&amp;amp;idx=1&amp;amp;sn=4102f57635ae3c7594c70b100551eda3&amp;amp;chksm=bd25fcdd8a5275cb468f9090ef39a41758340d6a367c11f8d4810d70584908e9d29faec91da4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;死磕18个Java8日期处理，工作必用！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;死磕18个Java8日期处理，工作必用！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651492514&amp;amp;idx=1&amp;amp;sn=4102f57635ae3c7594c70b100551eda3&amp;amp;chksm=bd25fcdd8a5275cb468f9090ef39a41758340d6a367c11f8d4810d70584908e9d29faec91da4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;死磕18个Java8日期处理，工作必用！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651515379&amp;amp;idx=2&amp;amp;sn=d84371bbe36ed4e98a7a33f24267ad12&amp;amp;chksm=bd25858c8a520c9a1b38ca4a1e70b4ec6928d693ca318cfaf176fca24dc9ae63b25b4c45afa0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据库日期类型字段设计，应该如何选择？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数据库日期类型字段设计，应该如何选择？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651497941&amp;amp;idx=2&amp;amp;sn=f74161345cff588f62d9a52d601c5094&amp;amp;chksm=bd25c9aa8a5240bcc32b8965c25bcbbba1660d4ca034dcbb3eb118493af6b63c86d403d77331&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;计算机时间到底是怎么来的？程序员必看的时间知识！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;计算机时间到底是怎么来的？程序员必看的时间知识！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>