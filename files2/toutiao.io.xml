<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9e715facc761e37bf9690072e4795970</guid>
<title>Java 虚拟机内存优化实战案例分析指南</title>
<link>https://toutiao.io/k/gy1rlq0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h1&gt;&lt;a id=&quot;_0&quot;/&gt;问题总结&lt;/h1&gt; 
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;内存多占1G左右，CPU利用率没有明显变化，但随着CMS收集抖动，最高达40%，CPU load平均高出1.0左右&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;几乎0停顿，相比于之前每隔5分钟应用停顿3-4s，调优后的应用几乎没有停顿时间，每次”stop the world” 由 youngGC 引起，最高也不过200+ms&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;GC总时间开销显著减小20%多，吞吐量显著提升&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;应用超过500ms的请求响应时间减少3%&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt; 
&lt;h1&gt;&lt;a id=&quot;_6&quot;/&gt;参数对比&lt;/h1&gt; 
&lt;h2&gt;&lt;a id=&quot;_7&quot;/&gt;调优前&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;-Dfile.encoding=UTF-8 -server -Xms8000M -Xmx8000M -Xmn5000M -Xss256K - 
XX:ThreadStackSize=256 -XX:StackShadowPages=8  -verbose:gc -XX:+PrintGCDetails 
-XX:+PrintGCTimeStamps -XX:PermSize=128m -XX:MaxPermSize=128m -XX:+UseParallelGC
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_14&quot;/&gt;调优后&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;-Dfile.encoding=UTF-8 -server -Xms10000M -Xmx10000M -Xmn5000M -
XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=30 -XX:TargetSurvivorRatio=50 
-Xnoclassgc -Xss256K -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:PermSize=256m -
XX:MaxPermSize=256m  -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -
XX:CMSInitiatingOccupancyFraction=80  -XX:ParallelGCThreads=24  -XX:ConcGCThreads=24 
-XX:+CMSParallelRemarkEnabled -XX:+CMSScavengeBeforeRemark 
-XX:+ExplicitGCInvokesConcurrent -XX:+UseTLAB  -XX:TLABSize=64K
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_26&quot;/&gt;经验分享&lt;/h2&gt; 
&lt;p&gt;在开始前，我们需要一些数据，因为jvm调优没有一个标准的答案，根据实际应用不同而不同，但也不是完全没有章法可言，从一个实际的应用，我们也可以找出一些规律来，找出一些比较公用的，比如下面三条：&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;应用平均和最大暂停时间（stop the world）&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;吞吐量，真正运行时间/（GC时间+真正运行时间），而相对的GC开销为：GC时间/（GC时间+真正运行时间）&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;URL的请求响应时间&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt; 
&lt;h3&gt;&lt;a id=&quot;_34&quot;/&gt;查看可以设置的所有参数&lt;/h3&gt; 
&lt;p&gt;使用 &lt;code&gt;-XX:+PrintFlagsFinal&lt;/code&gt; 参数：可以查看当前版本的虚拟机所能设置的所有参数，还可以看到其默认值。&lt;strong&gt;我使用6u26版本的java虚拟机&lt;/strong&gt;，一共有663个参数，很多参数不必完全搞懂什么意思，而且很多优化项在JDK6版本中已经默认开启，所以我们只需要了解一些常用的即可。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_38&quot;/&gt;最大堆的设置&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;在单机web server的情况下，最大堆的设置建议在物理内存的1/2到2/3之间，如果是16G的物理内存的话，最大堆的设置应该在8000M-10000M之间&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;Java进程消耗的总内存肯定大于最大堆设置的内存：&lt;strong&gt;堆内存（Xmx）+ 方法区内存（MaxPermSize）+ 栈内存（Xss,包括虚拟机栈和本地方法栈）线程数 + NIO direct memory + socket 缓存区（receive37KB，send25KB）+ JNI代码 + 虚拟机和GC本身&lt;/strong&gt; = java的内存。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;我们经常碰到内存巨高的线上问题，留更多的内存给“意外情况”是一件好事也是一件坏事，好事是更多的内存可以给“错误”提供扩展空间，&lt;strong&gt;提升“容错性”，不至于马上宕机&lt;/strong&gt;，但另一方面来说技术人员不会第一时间收到“&lt;strong&gt;吃swap&lt;/strong&gt;”这个告警信息。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;GC_46&quot;/&gt;GC策略的选择&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;GC调优是JVM调优很重要的一步，当前比较成熟的GC基本上有三种选择，&lt;strong&gt;serial、Parallel和CMS&lt;/strong&gt;，大型互联网应用基本上选择后两种，&lt;strong&gt;但Parallel的暂停时间实在太长&lt;/strong&gt;，以 &lt;strong&gt;-Xmx 8000M -Xmn5000M&lt;/strong&gt; 为例，&lt;strong&gt;平均一次youngGC需要100ms-200ms，而FullGC最长需要6s，平均也要4s&lt;/strong&gt;，虽然当前没有哪种GC策略能完全做到没有暂停时间，&lt;strong&gt;但太长的“stop the world”时间也让人无法忍受&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;serial 和ParallelGC都是完全stop the world的GC，而CMS分为六步骤&lt;/strong&gt;：&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/350cc32f4f1f1cce0265829e72deb366.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;stop_the_world_54&quot;/&gt;初始标记（stop the world）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1093.220: [GC [1 CMS-initial-mark: 4113308K(5120000K)] 4180786K(10080000K), 0.0732930 
secs] [Times: user=0.07 sys=0.00, real=0.07 secs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_60&quot;/&gt;运行时标记（并发）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1094.275: [CMS-concurrent-mark: 0.980/0.980 secs]
[Times: user=19.95 sys=0.51, real=0.98 secs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_67&quot;/&gt;运行时清理（并发）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1094.305: [CMS-concurrent-preclean: 0.028/0.029 secs] 
[Times: user=0.10 sys=0.02, real=0.03 secs]

CMS: abort preclean due to time 1099.643:
[CMS-concurrent-abortable-preclean: 5.288/5.337 secs] 
[Times: user=12.64 sys=1.19, real=5.34 secs]

&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;重新标记（stop the world，这个例子remark前执行了一次youngGC）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1099.647: [GC [YG occupancy: 3308479 K (4960000 K)]
1099.648: [GC 1099.649: [ParNew: 3308479K-&amp;gt;42384K(4960000K), 0.1420310 secs]
7421787K-&amp;gt;4180693K(10080000K), 0.1447160 secs] [Times: user=2.69 sys=0.03, real=0.15 secs]

1099.793: [Rescan (parallel) , 0.0121000 secs]1099.805: [weak refs processing, 0.0664790 secs] 
[1 CMS-remark: 4138308K(5120000K)] 4180693K(10080000K), 0.2254870 secs] 
[Times: user=3.00 sys=0.05, real=0.23 secs]

&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_91&quot;/&gt;运行时清理（并发）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1104.895: [CMS-concurrent-sweep: 4.970/5.020 secs] 
[Times: user=12.43 sys=1.05, real=5.02 secs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_99&quot;/&gt;复原（并发）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;
1104.908: [CMS-concurrent-reset: 0.012/0.012 secs]
[Times: user=0.03 sys=0.01, real=0.01 secs]

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;要想知道应用真正的停顿时间，可以使用&lt;code&gt;PrintGCApplicationStoppedTime&lt;/code&gt; 参数：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;63043.344: [GC [PSYoungGen: 5009217K-&amp;gt;34119K(5049600K)] 
5985479K-&amp;gt;1034614K(8121600K), 0.1721890 secs] [Times: user=2.62 sys=0.01, real=0.18 secs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt;&lt;li&gt;Total time for which application threads were stopped: 0.1806210 seconds&lt;/li&gt;&lt;li&gt;Total time for which application threads were stopped: 0.0074870 seconds&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;这样看来，真正应用暂停的时间要比stop the world时间还要稍长一点点。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt;&lt;li&gt;本次调优我基本上放弃了ParallelGC而选择了CMS，CMS在old区很大的时候绝对是个利器，它不仅能大幅降低应用“stop the world”时间，而且还能增加应用的响应时间和小部分吞吐量。&lt;/li&gt;&lt;li&gt;CMS还有一种增量模式：iCMS，适用于单CPU模式，会将回收动作分作小块进行，但会增加回收时间，降低吞吐量，对于多CPU来说，可以不用考虑这种模式。&lt;/li&gt;&lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr/&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;年轻代（eden和Survivor）、年老代的设置选择了GC策略之后，年轻代和年老代的设置就很重要了，&lt;strong&gt;如果一味的追求响应时间，可以尽量把年轻代调大一点，youngGC的回收频率减小了，但回收时间也增大了，5000M的年轻代，平均回收时间在150+ms，3000M的年轻代平均回收时间在90+ms&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;如果一味的增大年轻代，CMS前提下的年老代的威力也发挥不出来，更容易出现promotion failed&lt;/strong&gt;，&lt;strong&gt;导致一次FullGC&lt;/strong&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;但如果一味的调小年轻代，虽然单次回收时间减小，但回收频率会陡增，应用STW时间也会增加，总体年轻代回收的时间也可能会增大，所以调整年轻代和年老代的比例就是一个找平衡的过程&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;我的经验是年轻代的比例在&lt;strong&gt;2/8到4/8&lt;/strong&gt;之间，具体情况要看实际应用情况而定。&lt;/p&gt; 
&lt;p&gt;我们都知道年轻代采用的是“copy”算法，有两个survivor空间，每次回收总有一个是空的，另一个存放的是前几次youngGC存留下来而且还不够提升到old资格的对象，所以有三个参数很重要：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;-XX:MaxTenuringThreshold=15&lt;/strong&gt;：对象晋升到old的年龄，&lt;strong&gt;parallelGC和Serial默认是15，CMS默认是4&lt;/strong&gt;，&lt;strong&gt;设置的越大，对象就越难进入到old区，youngGC反复copy的时间就会增大&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;-XX:SurvivorRatio=8，eden和survivor的比例，默认是8&lt;/strong&gt;，也就是说如果eden为2400M，&lt;strong&gt;那么两个survivor都为300M，如果MaxTenuringThreshold设置的很小，那么survivor区的使用率就会降低，反之，survivor的使用率就会增大&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;-XX:TargetSurvivorRatio=80，survivor空间的利用率，默认是50&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;如果设置SurvivorRatio为65536，MaxTenuringThreshold为0就表示禁止使用survivor空间&lt;/strong&gt;，在这种模式下，对象直接进入old区，而且我发现在这种模式下，photo的resin启动时间大大减少，以前170s在这种模式下只需要90+s，足足降低了一半，因为这个，我顿时对这种模式产生的兴趣，&lt;strong&gt;但CMS的压力就增大了，威力根本发挥不出来了，GC的时间没有减少反而增加，remark的时间也增大到3s，最后不得不忍痛割爱放弃了这种模式&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;-XX:+CMSScavengeBeforeRemark：这个参数还蛮重要的，它的意思是在执行CMS remark之前进行一次youngGC&lt;/strong&gt;，&lt;strong&gt;这样能有效降低remark的时间，之前我没有加这个参数，remark时间最大能达到3s，加上这个参数之后remark时间减少到1s之内&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;-XX:+UseCMSCompactAtFullCollection&lt;/strong&gt;，用于指定在Full GC之后进行内存整理，内存整理会使得垃圾收集停顿时间变长，CMS提供了另外一个参数。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;-XX:CMSFullGCsBeforeCompaction&lt;/strong&gt;，用于设置在执行多少次不压缩的Full GC之后，跟着再来一次内存整理。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;另外，我发现survivor空间并没有像预期的那样大（eden的1/8），通过跟踪JVM的启动过程中发现，JVM在一定的条件下（&lt;strong&gt;可能跟parallelGC和默认SurvivorRatio有关&lt;/strong&gt;）&lt;strong&gt;会动态调整survivor的大小&lt;/strong&gt;，避免内存浪费。&lt;/p&gt; 
&lt;/blockquote&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>000d2d7c31d117de113d43ef073f86a1</guid>
<title>美团开放平台SDK自动生成技术与实践</title>
<link>https://toutiao.io/k/xh6e3lb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;89&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10841121495327102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsE4Nicq51WdnKEhcaEEYDS4h6jA6JOZ3fnENgFV1B6ianDTqaQ3nzNOjvHUB79ocldrVj4YlkAW6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总第549&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2023年 第001篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;103&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBic5ADGrKxgSd0tibyMiasOHXjb46qFBw7PTfuWAxXzWq32lDkL05icwkMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot; data-width=&quot;100%&quot; opacity=&quot;&quot; title=&quot;undefined&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; data-style=&quot;text-align: left; font-size: 14px; color: inherit;&quot;&gt;&lt;section&gt;&lt;span&gt;美团开放平台为整个美团提供了20+业务场景的开放API，为了使开发者能够快速且安全的接入美团开放平台，美团开放平台提供了多种语言的SDK来提高开发者的接入效率。本文介绍了美团开放平台如何自动生成SDK代码的相关技术实现方案，希望对大家能够有所帮助或者启发。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1. 引言&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2. SDK自动生成技术详解&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.1 整体设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.2 自动生成参数模型代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.3 自动生成API调用示例代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.4 持续集成和持续发布&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3. 结语&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4. 写在后面&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 引言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://developer.meituan.com&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;美团开放平台&lt;/span&gt;&lt;/a&gt;&lt;span&gt;对外提供了外卖、团购、配送等20余个业务场景的OpenAPI，供第三方开发者搭建应用时使用，是美团系统与外部系统通讯的最重要平台。本文主要讲述开放平台如何通过技术手段自动生成支持接口参数富模型和多种编程语言的SDK，以提高开发者对接开放平台API的效率。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;286&quot; data-ratio=&quot;0.5628458498023715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCswloiaXQiasFBibFwk6tnC8sOgG4ew0zc66brDhXzvFSViad1jAgt94L9Q/640?wx_fmt=png&quot; data-w=&quot;1265&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;美团开放平台架构&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.1 背景&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;美团开放平台将美团各类业务提供的扩展服务封装成一系列应用程序编程接口（&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt;）对外开放，供第三方开发者使用。开发者可通过调用开放平台提供的OpenAPI获取数据和能力，以实现自身系统与美团系统协同工作的业务逻辑。以外卖业务场景为例，开发者可以在自己为外卖商户开发的应用中通过调用美团开放平台提供的API，提供外卖订单查询、接单、订单管理等一系列功能。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;272&quot; data-ratio=&quot;0.487378640776699&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCYNO0D05VHlXRE22TvzdicY1XZTY4PrccEhACwtGcYuMBNUJGXm58rsA/640?wx_fmt=png&quot; data-w=&quot;1030&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;开放平台为开发者提供的OpenAPI以HTTP接口的形式提供。以平台提供的订单查询接口为例，对应的HTTP请求如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;POST https://api-open-cater.meituan.com/api/order/queryById&lt;br/&gt;Content-Type: application/x-www-form-urlencoded;charset=utf-8&lt;br/&gt;&lt;br/&gt;appAuthToken=eeee860a3d2a8b73cfb6604b136d6734283510c4e92282&amp;amp;&lt;br/&gt;charset=utf-8&amp;amp;&lt;br/&gt;developerId=106158&amp;amp;&lt;br/&gt;sign=4656285a4c2493e279d929b8b9f4e29310da8b2b&amp;amp;&lt;br/&gt;timestamp=1618543567&amp;amp;&lt;br/&gt;biz={&quot;orderId&quot;: &quot;10046789912119&quot;}&lt;br/&gt;&lt;br/&gt;Response:{&lt;br/&gt;  &quot;orderId&quot;:&quot;10046789912119&quot;,&lt;br/&gt;  &quot;payAmount&quot;:&quot;45.67&quot;,&lt;br/&gt;  &quot;status&quot;:7,&lt;br/&gt;  ......,&lt;br/&gt;  &quot;products&quot;:[{&quot;pid&quot;:&quot;8213&quot;,&quot;num&quot;:2,...,&quot;price&quot;:&quot;3.67&quot;}{&quot;pid&quot;:&quot;6556&quot;,&quot;num&quot;:1,...,&quot;price&quot;:&quot;11.99&quot;}]&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;由上述示例可以看出，美团开放平台提供给开发者的接口契约较为复杂，其中包含了业务规则复杂及安全性要求高等原因。若开发者需要直接从0到1编码对接平台提供的HTTP API，需要关注通信协议、接口契约规范、认证标识传递和安全签名等细节，成本较高。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着业务的发展，平台支持的OpenAPI数量在近两年增长约一倍，达到近1000个，平台运营和研发人员需要投入越来越多的精力去帮助开发者解决接口对接过程中的疑难问题。因此，提供SDK以帮助开发者提高开发对接效率，变得十分有必要。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.2 SDK目标概述&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;SDK，英文名称为 Software Development Kit，即软件开发工具包，广义上指辅助开发某一类软件的相关工具、文档和范例的集合。在开放平台的场景，我们为开发者提供的SDK应能为其屏蔽调用OpenAPI的通信协议、参数传递规范、接口基础契约（&lt;/span&gt;&lt;span&gt;如时间戳、安全签名&lt;/span&gt;&lt;span&gt;）等细节，以降低其对接平台API所需的开发成本。具备基本功能的开放平台SDK的架构和功能模块如下所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;377&quot; data-ratio=&quot;0.675392670157068&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCXPmm0D3weA0vqXsY0nV95bI76FAwm54IF63EshoZJz8shM4hDwbLYg/640?wx_fmt=png&quot; data-w=&quot;1146&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从使用SDK的开发者角度来看，基于SDK封装的基础功能来编写调用开放平台接口的代码，大致逻辑如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;MeituanClient client = DefaultMeituanClient.builder(developerId, signKey).build();&lt;br/&gt;&lt;span&gt;//设置请求参数&lt;/span&gt;&lt;br/&gt;MeituanRequest request = &lt;span&gt;new&lt;/span&gt; MeituanRequest(&lt;span&gt;&quot;/api/order/queryById&quot;&lt;/span&gt;);&lt;br/&gt;request.setParam(&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;,&lt;span&gt;&quot;10046789912119&quot;&lt;/span&gt;);&lt;br/&gt;MeituanResponse response = client.invokeApi(req);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(response.isSuccess()) {&lt;br/&gt;  &lt;span&gt;long&lt;/span&gt; price = (&lt;span&gt;long&lt;/span&gt;)response.getField(&lt;span&gt;&quot;price&quot;&lt;/span&gt;);&lt;br/&gt;  String phone = response.getField(&lt;span&gt;&quot;customerPhone&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; orderStatus = (&lt;span&gt;int&lt;/span&gt;)response.getField(&lt;span&gt;&quot;status&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;//完成业务逻辑&lt;/span&gt;&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  log.warn(&lt;span&gt;&quot;query order failed with response={}&quot;&lt;/span&gt;, response);&lt;br/&gt;  &lt;span&gt;//处理接口调用失败的逻辑&lt;/span&gt;&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;从上述代码可以看出，提供基础功能的SDK已经能够为使用者提供较大的便利。相比从零开始编码对接OpenAPI，使用SDK可以帮助开发者省去处理通信协议、公共参数放置、安全签名计算和返回状态码解析的工作量。但开发者在编写代码设置API的业务参数字段的环节，仍需对照API文档逐个手工填充字段名并按字段类型赋值，并且在获取API返回的业务字段时也需自主填充字段名并解析数据类型，存在较大的不便且易出错。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为解决此问题，我们需要在SDK的能力上更进一步提供对参数富模型的支持，即为每个API提供模型化封装的请求参数和返回参数结构，让使用SDK的开发者可以更加专注于业务逻辑的开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在SDK加入参数富模型的支持后，从使用者的角度来看，需要编写的代码如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;MeituanClient client = DefaultMeituanClient.builder(developerId, signKey).build();&lt;br/&gt;&lt;span&gt;//设置请求参数&lt;/span&gt;&lt;br/&gt;QueryOrderRequest request = &lt;span&gt;new&lt;/span&gt; QueryOrderRequest();&lt;br/&gt;request.setOrderId(&lt;span&gt;&quot;10046789912119&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;//调用接口&lt;/span&gt;&lt;br/&gt;MeituanResponse&amp;lt;QueryOrderResponse&amp;gt; response = client.invokeApi(req);&lt;br/&gt;&lt;span&gt;//处理接口返回&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(response.isSuccess()) {&lt;br/&gt;  QueryOrderResponse orderResponse = response.getData();&lt;br/&gt;  &lt;span&gt;long&lt;/span&gt; price = orderResponse.getPrice();&lt;br/&gt;  String phone = orderResponse.getCustomerPhone();&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; orderStatus = orderResponse.getStatus();&lt;br/&gt;  log.info(&lt;span&gt;&quot;query order finish, price={}, orderStatus={}&quot;&lt;/span&gt;, price, phone, orderStatus);&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  log.warn(&lt;span&gt;&quot;query order failed with response={}&quot;&lt;/span&gt;, response);&lt;br/&gt;  &lt;span&gt;//处理接口调用失败的逻辑&lt;/span&gt;&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;可以看出，参数富模型功能可以进一步减少开发者使用SDK的复杂度。以Java语言版本为例，QueryOrderRequest和QueryOrderResponse两个富模型类中封装了API的请求参数和返回参数的所有字段名、字段类型和字段校验规则等信息，开发者可简单使用字段的getter和setter方法完成对字段的赋值和取值操作，大幅降低了理解成本和出错可能。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;虽然在SDK中支持参数富模型功能，可以有效提高使用者的效率，但也会带来SDK的开发和维护成本增加。如果采用纯人工的方式去开发维护SDK中支持的所有API的参数模型代码，需要投入的开发维护成本与SDK支持的编程语言数量和API数量呈正相关性，其成本公式为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.09154929577464789&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCje6InZY7bntu3YEEVDH6ATUFnVb377SaNXXCbm4IGSYs0l7bULicKYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;852&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上述公式可以看出，当SDK所需支持的API数量和编程语言数量达到一定数量时，通过纯人工编码去开发和维护SDK的成本会非常高。需要通过技术手段自动生成和测试SDK中的绝大部分代码，以达到在成本可控的前提下，为开发者提供支持多种编程语言版本的富模型SDK的目标。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. SDK自动生成技术详解&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.1 整体设计&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;要为开发者提供一个支持参数富模型功能的OpenAPI SDK，我们需要实现以下主要功能：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;通信协议封装&lt;/strong&gt;：让开发者无需关注调用API的通信协议和通信逻辑。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;接口基础契约封装&lt;/strong&gt;：让开发者无需关注调用API的参数传递格式、时间戳、安全签名、返回Code码处理等细节。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;请求参数模型封装&lt;/strong&gt;：让开发者便捷地设置API请求参数。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;返回参数模型封装&lt;/strong&gt;：让开发者便捷地使用API返回的数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;210&quot; data-ratio=&quot;0.36387782204515273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCdWzXGdYibuuUpz7vH7BQWVX490wqOFk3ldapdprmqicj6HxnpOZEjqBg/640?wx_fmt=png&quot; data-w=&quot;1506&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;其中，通信协议封装和接口基础契约封装是一次性工作，并且其逻辑是相对稳定的。&lt;/span&gt;&lt;span&gt;对于SDK所需支持的每一种编程语言，只需投入有限的成本开发一次对应代码逻辑，即可支撑SDK的整个生命周期。&lt;/span&gt;&lt;span&gt;而要为平台开放的1000余个API提供支持多种编程语言的参数富模型功能，靠人工编写和维护代码是极其低效的，我们考虑通过代码自动生成技术，对SDK中的参数富模型代码进行自动化生成。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;更进一步，在实现了参数富模型代码自动生成后，我们可以通过持续集成（&lt;/span&gt;&lt;span&gt;Continious Integration&lt;/span&gt;&lt;span&gt;）和持续发布（&lt;/span&gt;&lt;span&gt;Continuous Delivery&lt;/span&gt;&lt;span&gt;）技术，将SDK的生成、测试和发布流程也尽可能地做到自动化。整体的SDK自动生成流程设计如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;127&quot; data-ratio=&quot;0.22075782537067545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCzEHMNSa3h1OYAS6oOSRM3IZaR2QaianP5737DyXIezZL7UBdErfg1xQ/640?wx_fmt=png&quot; data-w=&quot;2428&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;实现了以上流程后，即可做到在开放平台的任意API的参数模型发生变化时，由系统自动生成和发布最新版本的SDK供开发者使用。&lt;/span&gt;&lt;span&gt;我们将在下文详述如何通过代码自动生成、持续集成和持续发布等技术手段实现上述流程。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 自动生成参数模型代码&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我们最终的目标是为开放平台的每个OpenAPI，自动生成供SDK使用的请求参数模型代码（&lt;/span&gt;&lt;span&gt;Request类&lt;/span&gt;&lt;span&gt;）、返回参数模型代码（&lt;/span&gt;&lt;span&gt;Response类&lt;/span&gt;&lt;span&gt;）和调用示例代码（&lt;/span&gt;&lt;span&gt;Example&lt;/span&gt;&lt;span&gt;），并且代码自动生成机制要支持SDK适配的多种编程语言。以Java和C#编程语言为例，我们要生成的目标代码如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;379&quot; data-ratio=&quot;0.655705996131528&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCKopL8UOSYpXGbsENF2A4fBFb8RQrA9mbq1Z5KvOsYdN8ib4tJd1ibJdw/640?wx_fmt=png&quot; data-w=&quot;2068&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;从上面的示例中可以看出，在请求参数模型（&lt;/span&gt;&lt;span&gt;Request类&lt;/span&gt;&lt;span&gt;）中需要生成Request Path、鉴权配置、字段强类型定义、字段取值、赋值及校验逻辑等代码。在返回参数模型（&lt;/span&gt;&lt;span&gt;Response类&lt;/span&gt;&lt;span&gt;）中，需要生成接口返回的各个数据字段的强类型定义、取值逻辑及校验规则。调用示例代码则需要包含请求参数赋值、发起接口调用和处理接口返回数据等相关逻辑。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;要达成上述目标，首先需要考虑的是代码自动生成技术的选型，目前业界主流的代码生成技术分为以下几类：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;105&quot; data-ratio=&quot;0.18118466898954705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCX870DyOhMsWJwAUHf0ic504Xwf7EOjUibyNRmdWCzibxokM9iayFkJmEJA/640?wx_fmt=png&quot; data-w=&quot;1722&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于模版编排生成代码&lt;/strong&gt;：最原始最简单也是目前应用最广泛的一种代码生成方式。包括后端MVC框架的Controller、Service、DAO层模式化代码一键生成，还有前端Vue CLI 和Create-React-App两款脚手架的代码生成，都属于此类。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于可视化UI生成代码&lt;/strong&gt;：目前市场上运用得很广的一门技术，也被称为代码可视化生成工具。从Eclipse的Web可视化编辑器，到.NET Framework提供的MVC，及Winform界面及控件代码可视化拖拽生成，到汽车行业广泛使用的可视化原型搭建工具（&lt;/span&gt;&lt;span&gt;自动生成C代码&lt;/span&gt;&lt;span&gt;）都属于此类。在近几年比较火的低代码平台（&lt;/span&gt;&lt;span&gt;如aPaaS&lt;/span&gt;&lt;span&gt;）中，通过可视化UI生成代码的技术也被大量使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于代码语料生成代码&lt;/strong&gt;：基于代码语料生产代码的前提是要有足够的语料，例如伪代码/中间语言/描述性代码模板，再基于一套生成规则去生成目标代码。常见的落地场景包括RPC框架中基于IDL（&lt;/span&gt;&lt;span&gt;Interface description language，接口描述语言&lt;/span&gt;&lt;span&gt;）自动生成多种编程语言的RPC Client和Service代码，以及IDE插件中的代码自动生成功能（&lt;/span&gt;&lt;span&gt;例如Eclipse的&lt;/span&gt;&lt;a href=&quot;https://marketplace.eclipse.org/content/telosys-tools&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;telosys&lt;/span&gt;&lt;/a&gt;&lt;span&gt;插件可通过DSL生成多种语言代码&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于人工智能技术生成代码&lt;/strong&gt;：属于比较前沿的技术范畴，多和AI领域的图像识别和机器学习技术结合。现有的一些典型案例包括：微软开发的可将手绘图转化HTML代码的智能化代码生成工具&lt;/span&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/ai/ai-lab-sketch2code&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;sketch2code&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，基于AI技术自动生成UI逻辑的&lt;/span&gt;&lt;a href=&quot;https://github.com/teleporthq&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;teleporthq&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;考虑到开放平台SDK中，需要自动生成的OpenAPI参数富模型代码和调用示例代码均具备相对较强的规则性和模式性，我们选择基于代码语料自动生成代码的技术路线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于代码语料自动生成代码需要“语料”+“规则”两个核心元素，我们可以通过解析API元数据并结合领域专用语言（&lt;/span&gt;&lt;span&gt;DSL&lt;/span&gt;&lt;span&gt;）作为语料模板，生成代码语料，再基于语料特性为不同的编程语言定制代码生成规则，最终将“语料”+“规则”输入代码生成器以完成目标代码的生成。整体流程如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;560&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;351&quot; data-ratio=&quot;0.6261808367071525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCXm3kyATwXASmiaiamibzpZ2lVibUmMzvbUdDpMYTNM5OJVV7Bd6rlGnPKg/640?wx_fmt=png&quot; data-w=&quot;1482&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在上述流程中，首先关注作为代码语料生成数据源的API元数据，其来源于开放平台实现的零编码API网关底层维护的基础配置。开放平台网关基于API元数据配置化的技术，可做到零编码将业务服务的RPC接口转化为HTTP协议的API进行开放。其基本运行结构如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;440&quot; data-ratio=&quot;0.7612456747404844&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCFqOL3Cib5Hic26jTg1KFibdT0ib0fDf8SlibMmSWPOepzcKia9YiaVkGBPOiaA/640?wx_fmt=png&quot; data-w=&quot;1156&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;作为驱动开放平台网关运行的核心数据，API元数据中包含了HTTP Method、URL、请求参数、返回参数等信息。&lt;/span&gt;&lt;span&gt;在参数信息中，又以树形结构记录了每个参数字段的字段名、字段类型、字段描述、校验规则和示例值。&lt;/span&gt;&lt;span&gt;我们以“按订单id查询订单详情”的API为例，其元数据中和SDK生成相关的数据如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;APIGroup:waimai&lt;/span&gt;&lt;br/&gt;&lt;span&gt;APISubGroup:order&lt;/span&gt;&lt;br/&gt;&lt;span&gt;APIName:&lt;/span&gt; &lt;span&gt;order_query_by_id&lt;/span&gt;&lt;br/&gt;&lt;span&gt;HTTP METHOD:&lt;/span&gt; &lt;span&gt;POST&lt;/span&gt;&lt;br/&gt;&lt;span&gt;HTTP PATH:&lt;/span&gt; &lt;span&gt;/api/order/queryById&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Description:&lt;/span&gt; &lt;span&gt;按订单id查询订单详情&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Request&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;orderId&lt;/span&gt; &lt;span&gt;LONG&lt;/span&gt; &lt;span&gt;NOT_NULL&lt;/span&gt; &lt;span&gt;要查询的订单的id&lt;/span&gt; &lt;span&gt;example:1000224201796844308&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Response&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;orderId&lt;/span&gt;  &lt;span&gt;LONG&lt;/span&gt; &lt;span&gt;NOT_NULL&lt;/span&gt; &lt;span&gt;订单id&lt;/span&gt;  &lt;span&gt;example:1000224201796844308&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;price&lt;/span&gt;  &lt;span&gt;LONG&lt;/span&gt; &lt;span&gt;NOT_NULL&lt;/span&gt; &lt;span&gt;订单金额（单位为人民币“分”）&lt;/span&gt; &lt;span&gt;example:3308&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;phone&lt;/span&gt;  &lt;span&gt;STRING&lt;/span&gt;  &lt;span&gt;顾客联系电话&lt;/span&gt;   &lt;span&gt;example:&quot;13000000002&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;products&lt;/span&gt;  &lt;span&gt;ARRAY&amp;lt;Product&amp;gt;&lt;/span&gt;  &lt;span&gt;订单商品列表&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;pid&lt;/span&gt;  &lt;span&gt;LONG&lt;/span&gt;  &lt;span&gt;商品id&lt;/span&gt;   &lt;span&gt;example:&quot;13000000002&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;  &lt;span&gt;String&lt;/span&gt;  &lt;span&gt;商品名&lt;/span&gt;  &lt;span&gt;example:&quot;珍珠奶茶&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;num&lt;/span&gt;  &lt;span&gt;INTEGER&lt;/span&gt;  &lt;span&gt;商品数量&lt;/span&gt;  &lt;span&gt;example:1&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;price&lt;/span&gt;  &lt;span&gt;LONG&lt;/span&gt;  &lt;span&gt;商品单价&lt;/span&gt;   &lt;span&gt;example:1199&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;properties&lt;/span&gt;  &lt;span&gt;ARRAY&amp;lt;Property&amp;gt;&lt;/span&gt;  &lt;span&gt;商品属性列表&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;STRING&lt;/span&gt; &lt;span&gt;商品属性名&lt;/span&gt;  &lt;span&gt;example:&quot;甜度&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;STRING&lt;/span&gt; &lt;span&gt;商品属性值&lt;/span&gt;  &lt;span&gt;example:&quot;七分糖&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;remark&lt;/span&gt;  &lt;span&gt;STRING&lt;/span&gt;  &lt;span&gt;商品备注&lt;/span&gt;  &lt;span&gt;example:&quot;请做常温的&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;status&lt;/span&gt;  &lt;span&gt;INTEGER&lt;/span&gt;  &lt;span&gt;订单状态&lt;/span&gt;  &lt;span&gt;example:7&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;以上信息足以支撑我们为SDK生成参数富模型和调用示例代码。下一步我们需要开始处理代码语料，并为最终的代码自动化生成做好准备。不同编程语言所需的代码语料有所差异，但同一类编程语言（&lt;/span&gt;&lt;span&gt;如Java和C#都是面向对象的编程语言&lt;/span&gt;&lt;span&gt;）大致相同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以生成Java SDK中的参数富模型代码为例，需要用到的代码语料包含两部分。第一部分为类的基本信息，由元数据解析器在解析API的元数据时生成，其包含的内容和具体生成方式如下表所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;234&quot; data-ratio=&quot;0.4040485829959514&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCdq5hBpSYPyawDoZYo7XJmb6WBAL510MibwoEuQx9luVdwqqdYlicvEpQ/640?wx_fmt=png&quot; data-w=&quot;2470&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;第二部分为语料模板，我们以DSL（&lt;/span&gt;&lt;span&gt;Domain Specific Language&lt;/span&gt;&lt;span&gt;）作为中间语言加以描述，如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&amp;lt;&lt;span&gt;@class&lt;/span&gt; className=className metaInfo=javaApiMeta baseClass=baseClass interfaces=interfaces classDesc=classDesc &lt;span&gt;package&lt;/span&gt;=packageName importPackages=importPackages&amp;gt;&lt;br/&gt;    &amp;lt;#-- 静态字段   --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; staticFields?? &amp;amp;&amp;amp; (staticFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;#list staticFields as param&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@staticField&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;        &amp;lt;/#list&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;#-- 字段   --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; privateFields?? &amp;amp;&amp;amp; (privateFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;#list privateFields as param&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@field&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;        &amp;lt;/#list&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;   &amp;lt;#-- Getter/Setter --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; privateFields?? &amp;amp;&amp;amp; (privateFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;#list privateFields as param&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@getterMethod&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@setterMethod&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;        &amp;lt;/#list&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;    &lt;br/&gt;    &amp;lt;#-- 静态字段Getter --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; staticFields?? &amp;amp;&amp;amp; (staticFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;#list staticFields as param&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@getterMethod&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;        &amp;lt;/#list&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; javaApiMeta?has_content&amp;gt;&lt;br/&gt;        &amp;lt;&lt;span&gt;@deserializeResponse&lt;/span&gt; metaInfo=javaApiMeta/&amp;gt;&lt;br/&gt;        &amp;lt;&lt;span&gt;@serializeToJson&lt;/span&gt; metaInfo=javaApiMeta/&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;    &amp;lt;#-- toString方法 --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; privateFields?? &amp;amp;&amp;amp; (privateFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;&lt;span&gt;@toString&lt;/span&gt; className=className params=privateFields/&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/&lt;span&gt;@class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;有了上述的代码语料，我们即可通过语言转换引擎生成Java代码。我们将解析好的API元数据作为输入，执行基于DSL的语言转换引擎。语言转换引擎通过执行宏命令将要生成的代码类的基本信息在DSL语料模板中进行填充，最终得到Java编程语言的目标类及其附属类的代码。以生成Response类代码为例，代码生成的具体执行过程如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;161&quot; data-ratio=&quot;0.2789005658852061&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCgCsmGtGibEibCMSgpCBLyQMWKLNuiaBp7ibIFL57TOaS2G1F5YicXib8Kr4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2474&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Request和Response类中其余的&lt;/span&gt;&lt;code&gt;&lt;span&gt;getter&lt;/span&gt;&lt;/code&gt;&lt;span&gt;方法、&lt;/span&gt;&lt;code&gt;&lt;span&gt;setter&lt;/span&gt;&lt;/code&gt;&lt;span&gt;方法、类注解等元素的生成原理和步骤均和以上相同，此处不再赘述。在DSL语料模板中所有的元素处理完成后，我们即可得到供Java编程语言使用的请求参数类和返回参数类的完整代码。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于其他的编程语言（&lt;/span&gt;&lt;span&gt;例如Python&lt;/span&gt;&lt;span&gt;），我们使用的API元数据和元数据解析逻辑和Java是一致的，不同点在于DSL语料模板和语言转换引擎。当需要对SDK新增一种编程语言的支持时，我们只需要对目标语言建立DSL语料模板并提供相应的转换逻辑，即可支持该语言的请求参数类和返回参数类的代码自动生成。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.3 自动生成API调用示例代码&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;通过同样的技术手段，我们还可以自动生成每个OpenAPI的调用示例代码，并将示例代码展示接口文档中供开发者参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;调用示例代码的生成的逻辑相对参数模型代码更加简单。我们使用API元数据中的类名和字段信息（&lt;/span&gt;&lt;span&gt;元数据中也包含了每个字段的examle值，可用于在代码示例中生成字段赋值的逻辑&lt;/span&gt;&lt;span&gt;）填入代码语料中，再执行语言转换引擎生成目标代码即可。以Java编程语言为例，用于生成API调用示例代码的DSL语料模板如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&amp;lt;#setting number_format=&lt;span&gt;&quot;computer&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;MeituanClient meituanClient = DefaultMeituanClient.builder(&lt;span&gt;10000L&lt;/span&gt;, &lt;span&gt;&quot;xxxxx&quot;&lt;/span&gt;).build();&lt;br/&gt;&lt;br/&gt;&amp;lt;#assign reqVarName = className?uncap_first/&amp;gt;&lt;br/&gt;${className} ${reqVarName} = &lt;span&gt;new&lt;/span&gt; ${className}();&lt;br/&gt;&lt;br/&gt;&amp;lt;#&lt;span&gt;if&lt;/span&gt; privateFields?? &amp;amp;&amp;amp; (privateFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;)&amp;gt;&lt;br/&gt;&amp;lt;#list privateFields as field&amp;gt;&lt;br/&gt;${reqVarName}.set${field.fieldName?cap_first}(${field.exampleValue!&lt;span&gt;&quot;&quot;&lt;/span&gt;});&lt;br/&gt;&amp;lt;/#list&amp;gt;&lt;br/&gt;&amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;#&lt;span&gt;if&lt;/span&gt; javaApiMeta.needAuth&amp;gt;&lt;br/&gt;String appAuthToken = &lt;span&gt;&quot;xxxx&quot;&lt;/span&gt;;&lt;br/&gt;MeituanResponse&amp;lt;${javaApiMeta.responseClass}&amp;gt; response = meituanClient.invokeApi(request, appAuthToken);&lt;br/&gt;&amp;lt;#&lt;span&gt;else&lt;/span&gt; &amp;gt;&lt;br/&gt;MeituanResponse&amp;lt;${javaApiMeta.responseClass}&amp;gt; response = meituanClient.invokeApi(request);&lt;br/&gt;&amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (response.isSuccess()) {&lt;br/&gt;&amp;lt;#&lt;span&gt;if&lt;/span&gt; javaApiMeta.responseClass == &lt;span&gt;&quot;Void&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;调用成功&quot;&lt;/span&gt;);&lt;br/&gt;&amp;lt;#&lt;span&gt;else&lt;/span&gt;&amp;gt;&lt;br/&gt;    ${javaApiMeta.responseClass} resp = response.getData();&lt;br/&gt;    System.out.println(resp);&lt;br/&gt;&amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;调用失败&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;在使用API元数据和代码语料模板执行基于DSL的语言转换引擎后，生成的API调用示例代码如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;MeituanClient client = DefaultMeituanClient.builder(developerId, signKey).build();&lt;br/&gt;&lt;span&gt;//设置请求参数&lt;/span&gt;&lt;br/&gt;OrderQueryByIdRequest request = &lt;span&gt;new&lt;/span&gt; OrderQueryByIdRequest();&lt;br/&gt;request.setOrderId(&lt;span&gt;1000224201796844308L&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;//调用接口&lt;/span&gt;&lt;br/&gt;MeituanResponse&amp;lt;OrderQueryByIdResponse&amp;gt; response = client.invokeApi(req);&lt;br/&gt;&lt;span&gt;//处理接口返回&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(response.isSuccess()) {&lt;br/&gt;  OrderQueryByIdResponse orderResponse = response.getData();&lt;br/&gt;  System.out.println(orderResponse);&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  System.out.println(&lt;span&gt;&quot;调用失败&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;可以看出，我们生成的API调用示例代码可以为开发者呈现出每个请求参数赋值的示例逻辑，可有效降低开发者在对接API时的理解成本。后续我们可以进一步优化DSL语料模板，在示例代码中增加对返回数据结构中各个字段的取值逻辑示范，以进一步降低开发者在处理API返回数据时的理解和开发成本。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.4 持续集成和持续发布&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;搞定参数富模型代码和调用示例代码的自动生成后，下一步是通过持续集成和持续发布技术，确保开发者在任何时刻均能获取到最新版本的SDK。传统由人工编译、测试和上传发布SDK的模式，开发者得到SDK版本更新的周期短则数周，长则数月。我们的目标是将这个周期缩短到分钟级别：当SDK的基础逻辑和API参数模型有任何变更发生时，通过持续集成和持续发布的能力，在数分钟内将包含此变更的新版本SDK发布给开发者使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们基于美团自研的流水线引擎来驱动SDK的持续集成和持续发布。流水线的执行可以看作是对生成SDK的“原材料”一步步加工，最终交付到线上的过程。先通过下图了解整体流程：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;374&quot; data-ratio=&quot;0.6477438136826783&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCnVcia1QTjYCJCMtcxgN8Vn40QibXSmzsCPw3hxPPTeEqiaaibA3DxT2XcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1374&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;首先我们监听可能导致SDK需要发布的变更，包括通过Binlog机制监听API元数据的变更，以及通过Git Hook机制监听SDK基础逻辑代码仓库Master分支的变更。一旦监听到有变更产生，通过触发器去触发SDK持续集成和发布流水线的运作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;流水线开始运作后，首先执行SDK构建组件，SDK构建组件会并发执行两个操作：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;获取SDK基础逻辑代码（&lt;/span&gt;&lt;span&gt;人工编写&lt;/span&gt;&lt;span&gt;）并完成静态代码检查；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;拉取API元数据并自动生成参数富模型代码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;以上两个操作完成后，执行代码合并和代码编译，将结果提交到流水线执行下一个步骤。接下来由自动化测试组件完成对SDK的单元测试和端到端自动化测试，通过后提交到流水线执行下一个步骤。最后由自动发布组件完成SDK的打包、上传、下载链接生成和版本信息生成等一系列操作，并最终将最新版本SDK发布到官网供开发者下载。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 结语&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;通过上述能力的建设，我们打通了SDK自动生成的整个环节，以自动化的方式完成代码生成、构建、测试、集成、发布等一系列行为，最终实现了在低人力投入的前提下持续向开发者交付最新版本SDK的目标。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;通过最近半年数据的对比，我们可以看出开发者使用SDK后在接口对接环节遇到的疑难问题明显减少。基本达到了我们最初提高开发者接入效率，降低平台研发和运营处理工单成本的目标。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;195&quot; data-ratio=&quot;0.33731739707835323&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCDJRlzM9Tk0vzxlLQ8niaUmWLnl63ibcqZhkj5jqYM5BBG2WqophIQiciaA/640?wx_fmt=png&quot; data-w=&quot;1506&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;后续，我们将会计划继续完善SDK的代码自动生成逻辑，并为SDK添加更多编程语言的支持，为接入美团开放平台的开发者提供更好的体验。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 写在后面&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;不久前，“美团开放平台”正式获批智慧生活国家新一代人工智能开放创新平台，&lt;/span&gt;&lt;span&gt;这是美团&lt;/span&gt;&lt;a href=&quot;https://developer.meituan.com/isv/announcement/detail?dockey=anno-all&amp;amp;id=announcement-1733&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;第一个国家级科研平台&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;span&gt;此前，已有百度、阿里、腾讯等15家公司先后获批建设。&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.66328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCRBERMBXwYDfJcXAqqgMwI9p0x9Iz61qzEXK7yRrlB2QCqS8Pia1tZtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;国家新一代人工智能开放创新平台被称为“人工智能国家队”，是聚焦人工智能重点细分领域，充分发挥行业领军企业的引领示范作用，有效整合技术资源、产业链资源和金融资源，持续输出人工智能核心研发能力和服务能力的重要创新载体。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. 本文作者&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;飞宏、照东、宇豪、王鸿等，均来自美团到店事业群/餐饮SaaS事业部。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;也许你还想看&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  | &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769938&amp;amp;idx=1&amp;amp;sn=6f6456ff0642815571e426639ef3af90&amp;amp;chksm=bd12151f8a659c09d273dd5e8d35bd915ee382d323329f3b0e6724139509723f32be359d26a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程效能CI/CD之流水线引擎的建设实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769938&amp;amp;idx=1&amp;amp;sn=6f6456ff0642815571e426639ef3af90&amp;amp;chksm=bd12151f8a659c09d273dd5e8d35bd915ee382d323329f3b0e6724139509723f32be359d26a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程效能CI/CD之流水线引擎的建设实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;工程效能CI/CD之流水线引擎的建设实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt;&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769043&amp;amp;idx=1&amp;amp;sn=06214b6b59b894cf504a50ed4aacc02a&amp;amp;chksm=bd12119e8a6598885762f40ace12ef0bdf78c90a588a794c4363db79a3b8e45c14ac227e828b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据库全量SQL分析与审计系统性能优化之旅&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数据库全量SQL分析与审计系统性能优化之旅&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651750679&amp;amp;idx=1&amp;amp;sn=c204c3f7774c099f63860c04193cdc07&amp;amp;chksm=bd12585a8a65d14cd13390328f4410246a6f82caa46b80b394ab9c165ab4f50f8d610315c3f4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;降低软件复杂性的一般原则和方法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;降低软件复杂性的一般原则和方法&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阅读更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765958&amp;amp;idx=1&amp;amp;sn=8201546812e5a95a2bee9dffc6d12f00&amp;amp;chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;前端&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://t.1yb.co/jo7v&quot; textvalue=&quot; 安全&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765981&amp;amp;idx=1&amp;amp;sn=c2dd86f15dee2cbbc89e27677d985060&amp;amp;chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;算‍法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;算法&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765982&amp;amp;idx=1&amp;amp;sn=231b41f653ac7959f3e3b8213dcec2b0&amp;amp;chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;后端&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765964&amp;amp;idx=1&amp;amp;sn=ab6d8db147234fe57f27dd46eec40fef&amp;amp;chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数‍据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;数据&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765965&amp;amp;idx=1&amp;amp;sn=37e0c56c8b080146ce5249243bfd84d8&amp;amp;chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;安‍全&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;安全&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765972&amp;amp;idx=1&amp;amp;sn=afe02ec92762c1ce18740d03324c4ac3&amp;amp;chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;And‍roid&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;Android&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765973&amp;amp;idx=1&amp;amp;sn=32a23bf1d278dda0398f993ab60a697e&amp;amp;chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;iO‍S&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;iOS&lt;/a&gt;&lt;span&gt; &lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765963&amp;amp;idx=1&amp;amp;sn=a3de9ef267d07d94118c1611776a4b28&amp;amp;chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运‍维&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;运维&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765974&amp;amp;idx=1&amp;amp;sn=763c1e37d04acffd0142a2852ecfb000&amp;amp;chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;测‍试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MjM5NjQ5MTI5OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVGibnsaEib3aNlqF0tOrA2RGEmNSbia2nnohE4Tpf95UyTiaSjDVbHRfY8WNBeTuLLTaVdSckkNyEx1Q/0?wx_fmt=png&quot; data-nickname=&quot;美团技术团队&quot; data-alias=&quot;meituantech&quot; data-signature=&quot;10000+工程师，如何支撑中国领先的生活服务电子商务平台？数亿消费者、数百万商户、2000多个行业、几千亿交易额背后是哪些技术在支撑？这里是美团、大众点评、美团外卖、美团配送、美团优选等技术团队的对外窗口。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cb2cb6a7dac0c9c3a28312d02ee180d3</guid>
<title>独立开发变现周刊（第86期）：月收入4000美元的日程规划器</title>
<link>https://toutiao.io/k/vyxb3i9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;分享独立开发、产品变现相关内容，每周五发布。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;1、NotionReads: 在Notion中管理你的阅读书籍&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;2、Zaap.ai: 面向创作者的一站式工具&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;3、microfeed: 开源的可自我托管的轻量级内容管理系统(CMS)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;4、Reactive Resume：一个免费的开源简历生成器&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;5、一个月收入4000美元的日程规划器&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;1、NotionReads: 在Notion中管理你的阅读书籍&lt;/h2&gt;&lt;p&gt;你可能喜欢让事情有条理，总是对你读过的书有一个概述，跟踪你当前阅读的进度，并计划接下来要读什么。将书籍的所有信息(作者、页数、封面图片等)复制并粘贴到您的concept数据库中需要花费大量时间和精力。&lt;/p&gt;&lt;p&gt;所有这些都可以在Notion中实现。这就是NotionReads来拯救的地方。它为您提供了一个完整的图书搜索，集成到一个漂亮的Notion模板中。这样，你就可以找到世界上任何一本书，并将其添加到你的数字书架上，只需点击一下。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.587730451366815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwVibFDbdPY4U7hXMzTRApL13tia0yLqQn3nAoQhesk9kQ830yvY0ic3uTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3146&quot;/&gt;&lt;/p&gt;&lt;p&gt;NotionReads官网&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;2、Zaap.ai: 面向创作者的一站式工具&lt;/h2&gt;&lt;p&gt;Zaap是一个面向创作者的工具包:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;为你所有的链接建立一个页面&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;自动化显示最新内容&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;销售数字产品和下载&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;收集电邮地址&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;发送电子邮件简报&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;它就像是Linktree + Gumroad + Mailchimp的合体。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5472175379426644&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwfFfsAxd1rK6qNX8naUYZj1ODWRUuDd8bibmqAQibIaqN72lQbLQOpe8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2372&quot;/&gt;&lt;/p&gt;&lt;p&gt;Zaap.ai官网&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;3、microfeed: 开源的可自我托管的轻量级内容管理系统(CMS)&lt;/h2&gt;&lt;p&gt;Microfeed是基于Cloudflare的可以自我托管的轻量级内容管理系统(CMS)。是一个开源项目，可以轻松地将各种内容(如音频、视频、照片、文档、博客文章和外部url)以web、RSS和JSON的形式发布。对于那些精通技术的人来说，这是一个完美的解决方案，他们希望自己托管自己的CMS，而不必运行自己的服务器。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5973468591494343&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwIvITEEYGY4zuEUSQ0qpe7Agxt1RK4wHkpSiatfxaI85ic3kwOmPIIRNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2563&quot;/&gt;&lt;/p&gt;&lt;p&gt;microfeed开源项目地址&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;4、Reactive Resume：一个免费的开源简历生成器&lt;/h2&gt;&lt;p&gt;一个独一无二的简历生成器。安全，可定制，可移植，开源，永远免费。&lt;/p&gt;&lt;p&gt;Reactive Resume是一个免费的开源简历生成器，它可以让创建、更新和分享你的简历。有了这个应用程序，你可以创建多份简历，生成特定链接，并打印成PDF格式，所有这些都是免费的，没有广告，不会失去数据的完整性和隐私。&lt;/p&gt;&lt;p&gt;你可以完全控制简历的内容、外观、颜色、模板，甚至是各部分的布局。你输入的每一项内容，你修改的每一项内容，都会立即出现在你的简历上，并实时更新。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5211047420531527&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwabcScJib9JCG3lnobWmuH7DiaMNpt7nwNibJelPTOARgicJpHbh5OEQTnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1919&quot;/&gt;&lt;/p&gt;&lt;p&gt;Reactive Resume开源代码地址&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;5、一个月收入4000美元的日程规划器&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwOk718z1MrkdzVemiavTSjUpPwEMNxx1czFiaDHUIViaRh7J5fskxdpKeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;我是Ralu Petrea, Outline Planner的创始人，我花了一周时间推出无纸化规划器产品，之后用了两年时间来完善。我开始这个项目是作为一个测试，最早投入了499欧元，从第一周开始就收到了回报。两年后，这变成了我的全职工作。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.432753164556962&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwicwKTp2IU7dB0JRSE2LrcDawQZWqvG4rLjHO5gY9R4ACianiclzYOE99w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2528&quot;/&gt;&lt;/p&gt;&lt;p&gt;我总是制定适合自己的计划，所以，我创造了一个工具，他们可以插入并在他们的ipad上玩。我把我的想法加进去，以更有逻辑和有组织的方式制定可执行的计划。&lt;/p&gt;&lt;p&gt;我应该提一下什么是无纸化计划。从字面上看，它们就像你平板电脑上的纸质规划师。想象一个容易携带的笔记本，里面有你所有的生活;这感觉就像在纸上写字，但它允许你为笔记添加无尽的空间，排版，纠正错误，添加图像，在上面写写画画。这就是一个数字规划器。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3920265780730897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwDTIOJHiaAW6GzibqDXu5bD29gotNoHH1oMDID9cC7NQEaMSXy9PxXLlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;从技术上讲，数字记事本是一个PDF模板，只在应用程序中工作。&lt;/p&gt;&lt;p&gt;我的旗舰产品是WINNERS大纲计划表，这是一款适用于iPad的每月、每周和每日一体化数字计划表，可以插入Goodnotes 5和 Noteshelf Notability 应用程序。这个无纸化的生活工作计划表就像一个漏斗，帮助你把大蓝图和日常任务联系起来。&lt;/p&gt;&lt;p&gt;奇怪的是，一开始，我并不了解我的客户。直到项目的后期，我才了解到，企业家、首席执行官、校长、医生、蛋糕艺术家、职业母亲、健康博主都在使用我的数字计划来保持每天的计划。这些人中大部分是来自美国、德国、英国和澳大利亚。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwGNzicKNiaUUtjOPFUadSvP9R5n3xEuL3tR132K4y8RmXpRiahJicicXiaUNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;2018年11月，作为测试，我在Etsy上推出了第一个记事本，投资499欧元(用于购买我的iPad和Apple Pencil)，没有粉丝，没有商业计划。从2018年11月到2020年10月，我只通过我的Etsy商店销售我的产品，销售额达到8万欧元以上，利润率约为70%(主要是广告支出)。在两年的时间里，我获得了4K+的订单(15-20%是回头客)，平均客户价值为58欧元，而这一切都是在我的用户体验设计服务业务中完成的。&lt;/p&gt;&lt;h3&gt;你是怎么想到这个想法的?&lt;/h3&gt;&lt;p&gt;Outline Planner并不是我的第一个项目。&lt;/p&gt;&lt;p&gt;2011年，我创建了自己的数字设计公司(出于爱好)，并学习成为一名用户体验设计师。大部分项目都是为环境机构或欧洲网络安全机构提供的应用程序和工具。然而，并非一切都按计划进行。&lt;/p&gt;&lt;p&gt;我还创造了一个皮革装订的纸质记事本产品，由于缺乏客户和销售，它只存活了两年。&lt;/p&gt;&lt;p&gt;一天早上，我偶然在Etsy上发现(并买了)我的第一个电子记事本，我的旅程完全改变了。我震惊地发现，这个数字记事本只是一个PDF文件，里面有超链接，可以在一个注释应用程序中使用(当时我用的是Goodnotes 4);我还喜欢它看起来像平板电脑上的纸质记事本。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42358803986710963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwaMjEkFbNc9Sd6WpWr8A6rmbMr2GZZflZSJCickMarfmSKSNjY2WsZtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;当我告诉自己:“我也能做到!”我可以做得更好!”第二天，我花499欧元买了我的第一台iPad，配有兼容的苹果铅笔(Apple Pencil)。我决心开始设计我的新数码产品，但我向自己保证，如果我没有卖出任何记事本，我将在30天内退还iPad。一周后，我出版了我的第一本数字周计划，第一天就卖出了两本。在短短两周内，我卖出了499欧元多一点，所以我保住了我的iPad!!从那一刻起，我开始投入更多精力!&lt;/p&gt;&lt;h3&gt;带我们了解下你第一个产品开发的过程&lt;/h3&gt;&lt;p&gt;有了建筑学的背景和7年的UX设计经验，这是基础技能。但让它起作用的是我设定的理念:我必须在一周内推出一个基本的计划，并与使用它的人一起构建它。&lt;/p&gt;&lt;p&gt;再说一次，这个概念不是我发明的;我只是进入了一个已经存在的市场。我只是需要做得更好一点，使用我的设计技能，并将我的计划驱动的想法加载到工具中。从一开始，我的重点是创建一个易于使用的数字计划工具，使人们能够一步一步的编写计划，保持逻辑，简化他们的生活。&lt;/p&gt;&lt;p&gt;我花了三天时间研究现有的数字规划师，并学习如何做得更好。使用Adobe InDesign和Adobe Acrobat Pro，我建立了一个540页的周计划，有13421个流畅的超链接，可以直观地导航。再加上9折的独家发行价。我收到了很多要求改进的请求;我了解了人们的需求和困难。以下是对我早期工作有帮助的一些初步评价:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4069767441860465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwjzWXK0GsjsCGZ1icZ7DiaLiaPxWKVic3MGpfjNEo92TFlQibGnBqY5Jib8uA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;在发行后，我便不断更新数字计划器。我疯狂地测试着记事本的布局、要包含的逻辑功能、要使用的颜色以及按钮的最佳位置。我花了大量时间测试适合所有iPad屏幕的完美页面大小。有了这么多的变量，设计、测试和改进真的很痛苦。&lt;/p&gt;&lt;p&gt;在最初的六个月里，我发布了30多个数字计划的更新版本，最终创建了我今天使用的大纲计划结构的60%。在那之后，我每2-3个月才更新一次计划，而今天，我正在收集反馈，只更新下一年的计划。如今，大纲计划是一个1511页的PDF计划，有53,726个超链接。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwQsR3JhQ0vNMf6P5JJ9t4nb7v77xuqqtCbdticeWu4DfKrJbiagdYWKng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;好的方面是，除了购买iPad和苹果铅笔的499欧元，以及每天在Etsy广告上花费5-10美元外，我并不需要大量的成本。然而，对于一个人的企业来说，工作量太大了。有这么多信息和实时更新，前六个月的压力非常高。&lt;/p&gt;&lt;h3&gt;描述下创业的过程&lt;/h3&gt;&lt;p&gt;从第一天起，我就在Etsy上独家推出我的计划。在Etsy上有一大批的粉丝，他们已经知道这种类型的产品!所以我不需要教育他们什么是数字记事本以及如何使用它!此外，Etsy让这一切都变得简单!该平台负责运营数字业务的几乎所有基本事项——从交付、支付处理、发票、客户通信、数字增值税、基本统计信息等等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43853820598006643&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwV3J3LU94NQpWAlXcka5PJ0qBznLicYvRsd0PdWyTmsPP5lwtep5HVpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;回顾过去，我发现花更少的时间在技术上，把大部分时间花在外面，与人交谈，创建社区，虽然不舒服，但这是正确的做法。另一个教训是，独自做这件事是一个相当大的挑战，会对你的健康和精神造成损害，所以你最好做好准备。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6528239202657807&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwlnHFOScRA5HvbfhYnzbbiagnkBiaEfdfksAYGEKxEjl4z5QxObxpEd7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;h3&gt;是什么吸引和留住了客户?&lt;/h3&gt;&lt;p&gt;自从Etsy推出以来，帮助我获得更多客户的前三件事是: (1)通过Etsy广告 (2)提供一流的客户服务 (3)提供专业的产品&lt;/p&gt;&lt;p&gt;投资Etsy广告是吸引人们到我新的和不断增长的商店是必不可少的。在两年的时间里，我从Etsy广告中赚了44,560.63美元，而我只花了12,986.35美元。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7452631578947368&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwUg8sfK6BbvRuCOHwCvnfEHtvwib9jKsdqw0cmsURJwbT04Siasx8ZaEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;475&quot;/&gt;&lt;/p&gt;&lt;p&gt;花时间快速回答客户的问题，并提供详细的说明，帮助提高了我的商业信誉。客户服务让他们信任我，而产品的质量让他们回来买更多的东西。很快，人们开始向朋友和同事谈论我的数字规划器。&lt;/p&gt;&lt;p&gt;在过去的两年里，我测试了许多产品的缩略图，使我的计划在Etsy搜索中可见。我有一些产品根本卖不出去，当我把缩略图换成更简洁、更吸引人的东西时，它们表现得更好。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4209650582362729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwjJgFV83nEpsuCYmw7elXDHiaSvad1aDUmJ2VTqMI9rrF5vkXkOniat8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;/p&gt;&lt;p&gt;在这个过程中，我测试了很多促销渠道。我使用Instagram、Pinterest和Facebook，同时也在各种网站上付费发表文章。然而，我发现增加我的社区(和销售)的最好方法是:发展我的Newsletter，在Youtube上发布视频教程，以及投Facebook广告。&lt;/p&gt;&lt;p&gt;我的产品类型非常特别，我的利基市场很小。然而，在过去的8个月里，我成功地将我的订阅列表增加到3000个订阅者，打开率为33.1%，退订率为1.2%。&lt;/p&gt;&lt;p&gt;我的订阅社区对我的业务至关重要，因为这是我分享新数字产品更好折扣的唯一地方。&lt;/p&gt;&lt;p&gt;Facebook广告的情况则有所不同。在参加了弗兰克·克恩(Frank Kern)关于如何在Facebook上销售产品的在线课程后，我使用他的策略进行了测试，结果成功了。他们的计划是推广一些关于数字规划的意识视频，因为大多数人甚至不知道它的存在，然后通过教程和优惠重新定位这些潜在客户。我只在有限的时间内使用了这一策略，并成功地吸引了14万人，并卖出了大约110个我的计划，尽管我花的钱比计划多一些。然而，我可以看到这一战略的潜力，以及如何扩大规模，并在2021年发挥作用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3976342129208371&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicw8ibWKWIHqfgqdse726uJcCqsHlCsNpDXdlBKh61ZVwyiaenNU6r5QhMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2198&quot;/&gt;&lt;/p&gt;&lt;p&gt;在COVID-19大流行期间，我决定给人们一个全新的品牌，以激发改变和对未来的乐观。所以，在2020年4月开启新的品牌。我的新WordPress网站上线了。这是一个聪明的举动，因为人们对这个变化产生了很好的共鸣，当我推出新网站时，我还提供了一个免费的计划样本，这为谷歌搜索带来了相当大的流量。当我决定停止分发免费的计划时，流量急剧下降。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30564784053156147&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwAHURjEsCmrgJic02mia3bYouNzia79kGqnoLgj3y3rCqm8QiabohG1T15A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;h3&gt;通过创业，你学到了什么特别有用或有利的东西吗?&lt;/h3&gt;&lt;p&gt;自从2011年我开始自己创业以来，我的主要目的就是全力以赴，让客户满意。这也是我做Outline Planner的目的，但我现在明白，这可能不是最好的决定。&lt;/p&gt;&lt;p&gt;在构建产品时，为了满足所有需求，我创建了34个版本的同一个数字规划器。处理34个规划师不仅是对商店的挑战，而且对客户来说也是非常混乱和压倒性的。如今，人们希望在1分钟内买到一件产品，所以花5分钟比较版本对许多人来说是一种交易破坏者。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49750415973377704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwN69UuQSaxYIiavCbJLrA5dmQLNeYu10TFqFg7YpDShCtFsx3lrINshg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;/p&gt;&lt;p&gt;然而，到目前为止，与客户的持续沟通才是成功的决定。&lt;/p&gt;&lt;p&gt;第二个成功的决定是，在我还没准备好之前，我就强迫自己出去销售一个不完美的产品。开放地考虑所有的反馈(好的或坏的)，一次又一次地设计、测试和改进数字计划器，这帮助我很快地得到了实际的框架，而不是花费数年的时间来设计。&lt;/p&gt;&lt;p&gt;在构建产品时，来自真实客户的反馈是业务的整个基础。改进你的产品，你会创造一个喜欢你的社区，成为你所在领域的权威。&lt;/p&gt;&lt;h3&gt;对其他想要起步或刚刚起步的创业者的建议?&lt;/h3&gt;&lt;p&gt;你总是听到人们说:“get out of your own way”。虽然听起来很痛苦，但这是事实。勇敢的跳出舒适区，别想太多，这是一种对包括我在内的许多人都有效的思维方式。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwBQqpTRn5qX9ItGQ7B7MqyO1BuV6hicFZQnn4dLS0vbMx4xWHMohzhwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;另外，不要让自己太分散精力。不要一开始就推出太多产品，也不要尝试一下子发展太多社交渠道。做测试很好，可以看看什么对你有用，但一次只能专注于一件事。&lt;/p&gt;&lt;p&gt;设计，构建，测试，重复。这是我开始用户体验设计之旅的口头禅。这是一个漫长的过程，所以要慢慢来。在设计产品时，相信你的直觉，但不要跳过测试步骤。&lt;/p&gt;&lt;p&gt;在构建产品时，来自真实客户的反馈是业务的整个基础。你会改进你的产品，你会创造一个喜欢你的社区，并成为你所在领域的权威。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;NotionReads官网: https://www.notionreads.com/&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Zaap.ai官网: https://www.zaap.ai/&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;microfeed开源项目地址: https://github.com/microfeed/microfeed&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Reactive Resume开源代码地址: https://github.com/AmruthPillai/Reactive-Resume&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649284865&amp;amp;idx=1&amp;amp;sn=7970d9a2ccc02fee5ba6fdf4eedcc92a&amp;amp;chksm=bf2020008857a916afd9a5b2aae4af2978df1f883a0a6a329d28fb259b130d9acc4679da3402&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;独立开发变现周刊（第85期）：一个会员服务的SaaS，月收入2万美金&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;（第85期）：一个会员服务的SaaS，月收入2万美金&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649284834&amp;amp;idx=1&amp;amp;sn=8cbc139af66fdde68c93b5adae6fb106&amp;amp;chksm=bf2021e38857a8f5745f1129be95c7fa080c929c6894fffb81a803246afdbab1c5579c840606&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;7个基于ChatGPT的有意思小产品&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;7个基于ChatGPT的有意思小产品&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4010582010582011&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqxplJYrINXumqtVdQcxYLtztgN2kZoYgTAbQCTEAkKmiaHicw4eTppCJfz4CibHYl3DTPlE2GmSXpxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加入知识星球，和我一起做自己产品的独立变现，内有独家资料&lt;/span&gt;&lt;br/&gt;&lt;span&gt;星球内分享最新个人实战和经验、成员专属福利&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1b86e8f850431b814b2d00087fb2edda</guid>
<title>如何实现一个用于查看 OpenSumi 通信消息的 Chrome 插件？| OpenSumi Contributor 专访</title>
<link>https://toutiao.io/k/8zwupau</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;PROFILE&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;唐烨男&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（GitHub：tyn1998）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;华东师范大学，数据科学与工程学院，X-lab开放实验室，硕士二年级&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;个人网站：&lt;/p&gt;&lt;p&gt;https://tyn1998.github.io/&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLmRPlJEf5vMFZdCiar0kTChfU2BLOj6LF8k4DxJDpoNVwbtlEP4W2FqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;935&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;可以简单说下你的开源项目经历吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;虽然早在大一我就注册了GitHub，但是直到2021年以前我的贡献图都是一片灰色。&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2021是我的贡献图由灰转绿的一年&lt;/span&gt;&lt;/strong&gt;，在这一年里：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;我将 Manjaro XFCE 作为主力桌面系统并一直在折腾 Vim 编辑器，为了解决使用 Linux 系统和 shell 工具时遇到的问题，我开始被动探索开源世界（回头看，我愿称之为 Unix 文化潜移默化的熏陶）；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由于保研我提前加入了现在所在的 X-lab 开放实验室，接触了实验室的开源浏览器插件项目 Hypercrx，第一次体验并爱上了 Work in public 的感觉。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这两个契机大大拉近了我与开源世界的距离，在 Hypercrx 项目中的摸爬滚打更是让我迅速成长。一年多后的今天，我已经&lt;span&gt;成为了 Hypercrx 的主要维护者并拥有了仓库的 Owner 权限&lt;/span&gt;。&lt;strong&gt;&lt;span&gt;在 Hypercrx 中亲身验证了开源洋葱模型是我目前最棒的开源项目经历&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;开源之夏有很多项目，&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;为什么选择参与 OpenSumi 项目？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;开源之夏中的项目的确很多，但是前端领域的项目占比却不高。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我本人喜欢折腾工具，用 Tmux+Vim 配了一个我叫它&lt;span&gt;「&lt;span&gt;tIDE&lt;/span&gt;」&lt;/span&gt;的东西，这就是我日用的开发环境。在折腾这套工具的过程中，我对&lt;span&gt;「&lt;/span&gt;&lt;span&gt;tIDE&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;三个字母中代表&lt;span&gt;「&lt;/span&gt;&lt;span&gt;Integrated&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;的&lt;span&gt;&lt;span&gt;「&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/span&gt;有了一定体会，并对 IDE 的原理产生了兴趣。而 &lt;span&gt;&lt;strong&gt;OpenSumi 是一个 IDE 框架，这是一个打造 IDE 的工具&lt;/strong&gt;&lt;/span&gt;，我没想太多就迫不及待地去 OpenSumi 的 Discussion 下留言了！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.31665062560153995&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLibPRld8JVKxyrD8ccGMZND2icDd9Qa6KmiaAgjm9NQpazfiarfBALJTgsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1039&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;遗憾的是我没有赶上 OpenSumi 在 OSPP Summer 2022 的第一趟车，因为那段时间忙着课程任务，我只能忍痛割爱。但是 ASoC 2022 让我看到第二次机会，其中 Yantze 老师指导的课题还是和 Chrome 插件相关的，我当时看到这个课题激动的不得了，赶紧在课题对应的Issue下留言。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有了更加充分的准备后，最终我如愿以偿拿到了&lt;span&gt;「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实现一个用于查看 OpenSumi 通信消息的 Chrome 插件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/span&gt;这个课题。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;可以介绍下参与的项目任务内容&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;以及自己所做的贡献吗？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;133&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;“OpenSumi 的架构是前后端分离的，桌面端前端要和多个进程进行通信，或者 Web 端要和后端服务通信。目前通信的方式有 IPC、RPC 等，但通信的问题会比较难以直观的看到或者调试。希望提供一个可视化的显示通信数据的 Chrome 插件，方便的查看通信流量。”&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该项目的最终产物是一个 Chrome DevTools 插件（名称为 “OpenSumi DevTools” ），实现时&lt;span&gt;分为三步：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;先设法捕获OpenSumi的通信消息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;再将它们传递到OpenSumi DevTools中&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最后将这些通信消息呈现在OpenSumi DevTools的UI中&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里我只展开讲一下第2步，即&lt;span&gt;&lt;strong&gt;如何将捕获到的 OpenSumi 内部通信消息传递给一个外部的Chrome 插件&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如下图灰色虚线框和蓝色虚线框重叠处所示，凭借 &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.devtools&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.inspectedWindow&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.eval&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;这个 Chrome 插件API，我们可以在 OpenSumi 前端运行环境和 OpenSumi DevTools 运行环境之间架起一座桥梁，这座桥梁就是全局变量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;window&lt;/span&gt;&lt;span&gt;.__OPENSUMI_DEVTOOLS_GLOBAL_HOOK__&lt;/span&gt;&lt;span&gt;，以下简称 &lt;/span&gt;&lt;span&gt;HOOK&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9157407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLYw1euBgPgeGwPmDdl74HsKWicAzZabnELmlrHlzV8Gkcwv4ls4ZvK4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;HOOK&lt;/span&gt;&lt;/section&gt;&lt;span&gt;由 OpenSumi 在初始化的时候注入到&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;window &lt;/span&gt;&lt;span/&gt;&lt;span&gt;中，并赋初&lt;/span&gt;&lt;span&gt;值为&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当Chrome DevTools被打开时，OpenSumi DevTools会首先判断当前页面是否存在该 &lt;span&gt;HOOK&lt;/span&gt;&lt;span&gt;，以此来判断当前应用是否为基于 OpenSumi 开发的 IDE 产品，进而决定是否继续加载。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;若加载成功，则向&lt;span&gt; HOOK &lt;/span&gt;&lt;span&gt;注入一些函数和变量，经过改造后的 OpenSumi 会调用 &lt;/span&gt;&lt;span&gt;HOOK &lt;/span&gt;&lt;span&gt;中的捕获函数，并将捕获到的 RPC 和 IPC 消息放到 &lt;/span&gt;&lt;span&gt;HOOK &lt;/span&gt;&lt;span&gt;中的数组变量中。&lt;/span&gt;&lt;span&gt;之后，OpenSumi DevTools 便能读取 &lt;/span&gt;&lt;span&gt;HOOK &lt;/span&gt;&lt;span&gt;中的数据并将他们呈现在 UI 中了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果大家对其他实现细节也感兴趣，可以看看这篇博客：&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://tyn1998.github.io/2023/01/02/ASoC2022-实现一个用于查看OpenSumi通信消息的Chrome插件&lt;/span&gt;。下图展示了结项时 OpenSumi DevTools 在 Electron 客户端的运行效果：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7055555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLdO3McLqxBiau7b4rTPnMfFh5ZqNbEsJ37IY9huIxYl7oiaqLicGVIQJ4g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;由于该课题要实现一个全新的Chrome DevTools插件，所以新建了一个仓库&lt;span&gt;opensumi/devtools&lt;/span&gt; 用于开发；并且，由于需要在 OpenSumi 内部捕获通信消息，所以也对&lt;span&gt;opensumi/core&lt;/span&gt; 中的代码进行了改造。经过简单的统计，我在两个仓库一共提了40个 Issue和31个 PR。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLoIPLBtuNkMQhfibKnXyzWLgzSyjnCfqxVbajF7A0oUvzeSjB6Lz3ibDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;项目开发过程中，&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有遇到过什么困难吗？&lt;/strong&gt;&lt;strong&gt;是如何解决的？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我有写日记的习惯，这是2022年6月26日的日记开头：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;99&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;昨天晚上带着ipad上床，看了10分钟讲 js 的 Proxy 的视频后接着上 GitHub 看&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;opensumi/core/packages/connection&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;的代码，看到两点多，想到三点，有收获，有激动。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;回首整个开发周期，遇到的困难可太多了。其中，connection 模块是第一只拦路虎，因为当时的我：没有掌握依赖注入机制、对TypeScript不够熟悉、之前没有接触过RPC、对OpenSumi的生命周期不了解……&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那几天，我利用 LSP 服务在代码间跳来跳去，还创建了好几篇语雀文档用来小心地捕获偶尔闪过的灵光。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我在搜索引擎中既深搜又广搜，反复阅读 OpenSumi 的官方文档，翻阅过往 PR和 Commit 历史，在 Issue 中提问并得到了核心成员们的答复，使用开发者工具进行调试。有了更多的前置知识后再回头咀嚼 connection 模块的代码，如此反复使得我最后终于对 connection 有了一个基本的了解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结一下便是：&lt;strong&gt;&lt;span&gt;多查、多想、多记、多问、多调试&lt;/span&gt;&lt;/strong&gt;。这些方法对所有遇到的困难都适用。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;开发过程中，&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;导师有给予什么样的帮助吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Yantze 导师以及 OpenSumi 的其他小伙伴们（Dan、bytemain）在 GitHub、钉钉都解答过我的许多困惑，使我对 OpenSumi 源码的了解日益增加。在 PR review 时，我的代码在他们的帮助下变得更加规范和整洁。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我非常感谢 OpenSumi 核心开发者们的帮助，&lt;strong&gt;&lt;span&gt;他们让我感受到了开源社区的活力和友善&lt;/span&gt;&lt;/strong&gt;！&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;参与 OpenSumi 编程之夏活动后，&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;最大的收获是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;06&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过在 OpenSumi 社区三个月来的见闻和参与，无论大到项目的发版，还是小到 CSS 的样式细节，&lt;strong&gt;&lt;span&gt;我从核心开发者身上学到了太多书上没有的知识与技巧&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从6月份的试探，到7月份的摸索，再到8月份的发力，我在开源洋葱模型中慢慢从边缘向内靠拢。所有的困惑、焦虑、思索、灵感、激动、兴奋都化成文字和代码，散落在2个仓库、40个Issue 和31个 PR 中。这是一段绝佳的经历！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对了，Dan老师还邀请我加入了 OpenSumi 的 GitHub Organization，所以我现在还是OpenSumi 的一个 Member，很光荣！&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7509259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybL4n8b3GuxPSTTQE0VPaHK4E91SdGveAqtCGjhucmdlQqr2tmILhzvoQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;*OpenSumi 是阿里 &amp;amp; 蚂蚁集团联合开源的一款面向 IDE 定制化研发的框架。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;以后还会为 OpenSumi &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;提 PR 和 Issue 吗？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;07&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;必须的！我有 &lt;span&gt;opensumi/devtools&lt;/span&gt; 仓库的写权限，并 watch 着所有事件，如果有人提Issue反馈 Bug 我肯定尽快处理，ASAP。对于主仓库 &lt;span&gt;opensumi/core&lt;/span&gt;，我在 ASoC 期间只是解锁了其中很小一部分，希望未来我能搞懂整个架构，提更多有料的 PR。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;有什么其他想说的吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;08&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;“OpenSumi IDE框架”公众号的所有文章我都一一拜读，非常赞！&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;导师寄语&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;”&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;唐烨男在开源之夏 ASoC 2022 的 OpenSumi 课题中，很多问题都是自己在研究，面对困难有很好的劲头去解决。他也能很好地把碰到的问题沉淀到 issue 中，对自己或者对其他人都能提供帮助。可以看出来，他在开源的道路上比较成熟了，很多的协作方式都非常开源化，未来加油！&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;——BY 与天&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;👇欢迎了解 OpenSumi，参与开源共建～&lt;/p&gt;&lt;p&gt;GitHub 地址：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;https://github.com/opensumi &lt;/em&gt;&lt;/span&gt;&lt;br/&gt;（点击文末&lt;span&gt;阅读原文&lt;/span&gt;即可跳转）&lt;/p&gt;&lt;p&gt;OpenSumi 官网：&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;https://opensumi.com/zh&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;扫二维码，加入 OpenSumi 社区交流：&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4054316&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLjmnzpI1Z5eLNcXpZN25Rb8Ihyt1ias5mgJPUnlrayAibUiaNwc69ibWicRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1031&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;微信&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLolFZiavYfsAwibs4uy1nrPmribxWkn9VunvYzq1ibLM0W467HHxHym6j6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;247&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;钉钉&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLsNzXuz0ibnDdLQj0lYITkzxa9FQF0fslt9NbOGAYicWDlia1BjPoF1BXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;410&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;QQ&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3Njg3NDQyNA==&amp;amp;mid=2247483685&amp;amp;idx=1&amp;amp;sn=adffdfd39e80ef01a9520b186bf2e3ac&amp;amp;chksm=cf2adef2f85d57e4827c359dd47012bf31637890606d280f95426d3f1c4b86f7a5ec039da688&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;231&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;143&quot; data-ratio=&quot;0.42592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybL7uhGBzZZDSFz3h6Su9ZBNvgTDWhorxyic1mckdzz4TEyBkGCdawDk0A/640?wx_fmt=png&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3Njg3NDQyNA==&amp;amp;mid=2247483685&amp;amp;idx=1&amp;amp;sn=adffdfd39e80ef01a9520b186bf2e3ac&amp;amp;chksm=cf2adef2f85d57e4827c359dd47012bf31637890606d280f95426d3f1c4b86f7a5ec039da688&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;OpenSumi Contributor 专访 | 司徒永聪：开源让世界更美好&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;OpenSumi Contributor 专访 | 司徒永聪：开源让世界更美好&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg3Njg3NDQyNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIdtWPrVoqSEo6lMtkZGicv7D6tapDdbIEQlGT7D0ib4PjsfTcBXIUzO8MEJicsIibZpp99y8qxdwGxmA/0?wx_fmt=png&quot; data-nickname=&quot;OpenSumi IDE 框架&quot; data-alias=&quot;&quot; data-signature=&quot;OpenSumi 框架旨在解决阿里经济体内部 IDE 产品研发的重复建设问题，满足 IDE 在更多垂直场景的定制能力，同时实现 Web 与本地客户端共用底层，让 IDE 研发从早期的“刀耕火种”时代向“机器化大生产”时代迈进。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6d248ffcb566a699f628550163f035b2</guid>
<title>看谁还不会 Redis 高级特性</title>
<link>https://toutiao.io/k/f6lxvkv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;点击关注公众号，Java干货&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;及时送达&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzU4MDUyMDQyNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/knmrNHnmCLEX3M6DvCn5gKuBOaMMVu9lUJAvwH2k66nV9VgGG0cyczd1ryib06P1z5pF72Le3HUr5loicnQx36lg/0?wx_fmt=png&quot; data-nickname=&quot;小哈学Java&quot; data-alias=&quot;xiaoha_java&quot; data-signature=&quot;专注于Java领域干货分享，不限于BAT面试, 算法，数据库，Spring Boot, 微服务,高并发, JVM, Docker容器，ELK相关知识，期待与您一同进步。&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; data-index=&quot;0&quot; data-origin_num=&quot;45&quot; data-isban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5597082953509571&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/knmrNHnmCLEYnaSZZTibzbPPiaED1XlcsI7aUumoO0YF4A9s9iaibkqfWB6txNuw8VTibnEfTVWoK7xHpsjcCicviaVLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1097&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 基础&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果对 Redis 还不了解的同学可以先看一下这篇 https://www.cnblogs.com/wugongzi/p/12841273.html 这里面介绍了 Redis 是什么，以及怎么用。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 管道&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们通常使用 Redis 的方式是，发送命令，命令排队，Redis 执行，然后返回结果，这个过程称为Round trip time(简称RTT, 往返时间)。但是如果有多条命令需要执行时，需要消耗 N 次 RTT，经过 N 次 IO 传输，这样效率明显很低。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;于是 Redis 管道（pipeline）便产生了，一次请求/响应服务器能实现处理新的请求即使旧的请求还未被响应。这样就可以将&lt;em&gt;多个命令&lt;/em&gt;发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。这就是管道（pipelining），减少了 RTT，提升了效率&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;重要说明&lt;/strong&gt;: 使用管道发送命令时，服务器将被迫回复一个队列答复，占用很多内存。所以，如果你需要发送大量的命令，最好是把他们按照合理数量分批次的处理，例如10K的命令，读回复，然后再发送另一个10k的命令，等等。这样速度几乎是相同的，但是在回复这10k命令队列需要非常大量的内存用来组织返回数据内容。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 发布订阅&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;发布订阅是一种消息模式，发送者（sub）发送消息，订阅者（pub）接收消息&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7328687572590011&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jZCicJY2ug3olFfZ7m0Y8IQI3icBoURp9Ihp5wllFxAf96ssnIu9gfWvw/640?wx_fmt=png&amp;amp;random=0.16124612770612146&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如上图所示，发布订阅基于频道实现的，同一个频道可以有多个订阅者，多个发布者。其中任意一个发布者发布消息到频道中，所以订阅者都可以收到该消息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;发布订阅 Redis 演示&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我在服务器上启动了 4 个 Redis 客户端，2 个订阅者，2 个发布者，订阅者订阅的频道为 channel01&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3234946871310508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jZkaOyHtyr5unPFBibkhESFX0kiby74uJPpEMQ8Jl4qFoT2icZ7UuD1aTw/640?wx_fmt=png&amp;amp;random=0.5331072286879976&quot; data-type=&quot;png&quot; data-w=&quot;847&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一步：发布者 1 往 channel01 中发送消息 &quot;wugongzi&quot;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35798319327731093&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0j7miciciaZQjnwXw4LDiaPmlhs6PYNeJRf2cYw4piaewmCQB2MgoMMvfBLxA/640?wx_fmt=png&amp;amp;random=0.7107839681184107&quot; data-type=&quot;png&quot; data-w=&quot;595&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;订阅者 1 收到消息：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6912114014251781&quot; data-type=&quot;png&quot; data-w=&quot;421&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jxjicZXU82hzuFmLIdswWegyic7icGswyE0IEsV3JPQ3lESZGJVvaPPN9w/640?wx_fmt=png&amp;amp;random=0.932801702642438&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;订阅者 2 收到消息：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7142857142857143&quot; data-type=&quot;png&quot; data-w=&quot;420&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0j2jeG6bmibrRhMkKrvqo9G2jH3GsZbu0hOOFHVoib5sqwkSHjKYQOPKKA/640?wx_fmt=png&amp;amp;random=0.2957567053663015&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二步：发布者 2 往频道中发布消息 &quot;hello-redis&quot;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2148962148962149&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jhl56JNzQ6mZDdibwT1K4FnEv2A48IMGhbtPWtWQl0OBosZaOrTShIBg/640?wx_fmt=png&amp;amp;random=0.4554117703504412&quot; data-type=&quot;png&quot; data-w=&quot;819&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;订阅者 1 收到消息：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9268867924528302&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jVYoianCF0YXJIePphNuxXKSq3NoZnzMZ7QjZS2vkbs2CRZRLlwt0p2w/640?wx_fmt=png&amp;amp;random=0.4084262064096338&quot; data-type=&quot;png&quot; data-w=&quot;424&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;订阅者 2 收到消息：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9147465437788018&quot; data-type=&quot;png&quot; data-w=&quot;434&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jNwN3gyNJSDbJX0kNhsEkZeciaiaZZ6t0gmAR7cRMwNTuRTKbwsDXIgEw/640?wx_fmt=png&amp;amp;random=0.0549752796242815&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 同时支持订阅多个频道：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7017114914425427&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jic6iaicrMLMmLmWDYHicbiakibiaBYWl2XRaRJGv3YicT8icICWicuhpicscfpIqg/640?wx_fmt=png&amp;amp;random=0.3368015515822096&quot; data-type=&quot;png&quot; data-w=&quot;409&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 过期策略&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;过期时间使用&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 可以给每个 key 都设置一个过期时间，过期时间到达后，Redis 会自动删除这个 key。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实际生产中，我们还是要求必须要为每个 Redis 的 Key 设置一个过期时间，如果不设置过期时间，时间一久，Redis 内存就会满了，有很多冷数据，依然存在。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;设置过期时间的命令：EXPIRE key seconds&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在使用过程中有一点需要注意，就是在每次更新 Redis 时，都需要重新设置过期时间，如果不设置，那个 key 就是永久的，下面给大家演示一下如何使用：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.475177304964539&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jyoMGV6MiaehDicQx1iaesvbNnb7nklDYoTBdzz6JY3aw2HvD8OuHuUiaicw/640?wx_fmt=png&amp;amp;random=0.5586942244204203&quot; data-type=&quot;png&quot; data-w=&quot;423&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;过期删除策略&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis keys过期有两种方式：被动和主动方式。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当一些客户端尝试访问过期 key 时，Redis 发现 key 已经过期便删除掉这些 key&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然，这样是不够的，因为有些过期的 keys，可能永远不会被访问到。 无论如何，这些 keys 应该过期，所以 Redis 会定时删除这些 key&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;具体就是Redis每秒10次做的事情：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;测试随机的20个keys进行相关过期检测。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;删除所有已经过期的keys。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果有多于25%的keys过期，重复步奏1&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是一个平凡的概率算法，基本上的假设是，Redis的样本是这个密钥控件，并且我们不断重复过期检测，直到过期的keys的百分百低于25%,这意味着，在任何给定的时刻，最多会清除1/4的过期keys。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 事务&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;事务基本使用&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 事务可以一次执行多条命令，Redis 事务有如下特点：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 事务通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;MULTI&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 、&lt;/span&gt;&lt;code&gt;&lt;span&gt;EXEC&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;DISCARD&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;WATCH&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 几个命令来实现，MULTI 命令用于开启事务，EXEC 用于提交事务，DISCARD 用于放弃事务，WATCH 可以为 Redis 事务提供 check-and-set （CAS）行为。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0227920227920229&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jL1W3E9nJM0b4s8Sic8deBmks2FaeKKiaIEzzg0vvvfxHEv6OITCyjodQ/640?wx_fmt=png&amp;amp;random=0.3889124070730787&quot; data-type=&quot;png&quot; data-w=&quot;351&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;事务发生错误&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reids 事务发生错误分为两种情况。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一种：事务提交前发生错误，也就是在发送命令过程中发生错误，看演示&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5039494470774092&quot; data-type=&quot;png&quot; data-w=&quot;633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0j6gpNicNVZgpHlZR3J0iaQSicqtFylGhZ7NlMcZofnMeqQaZnNcWdJI0Jg/640?wx_fmt=png&amp;amp;random=0.5303901933630635&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面我故意将 incr 命令写错，从结果我们可以看到，这条 incr 没有入队，并且事务执行失败，k1 和 k2 都没有值&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二种：事务提交后发生错误，也就是在执行命令过程中发生错误，看演示&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5287569573283859&quot; data-type=&quot;png&quot; data-w=&quot;539&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0juz7HgSwuGGlnicmR86kauLxjIMniaiae1y8eicHZIHK4VicStOs0oZZcPLQ/640?wx_fmt=png&amp;amp;random=0.6915067831550987&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面的事务命令中，我给 k1 设置了一个 d，然后执行自增命令，最后获取 k1 的值，我们发现第二条命令执行发生了错误，但是整个事务依然提交成功了，从上面现象中可以得出，&lt;strong&gt;Redis 事务不支持回滚操作&lt;/strong&gt;。如果支持的话，整个事务的命令都不应该被执行。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么 Redis 不支持回滚&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果你有使用关系式数据库的经验， 那么 “Redis 在事务失败时不进行回滚，而是继续执行余下的命令”这种做法可能会让你觉得有点奇怪。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以下是这种做法的优点：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有种观点认为 Redis 处理事务的做法会产生 bug ， 然而需要注意的是， 在通常情况下， 回滚并不能解决编程错误带来的问题。 举个例子， 如果你本来想通过 incr 命令将键的值加上 1 ， 却不小心加上了 2 ， 又或者对错误类型的键执行了 incr ， 回滚是没有办法处理这些情况的。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;放弃事务&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当执行 discard 命令时， 事务会被放弃， 事务队列会被清空， 并且客户端会从事务状态中退出&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0038022813688212&quot; data-type=&quot;png&quot; data-w=&quot;263&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jMTgZ90Zl59k768hnd4d0Ja0C8T1hrBAF0V7ZiagKmYtRlicOeeelibvPQ/640?wx_fmt=png&amp;amp;random=0.4380218120697472&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;WATCH 命令使用&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;watch 使得 exec 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8434504792332268&quot; data-type=&quot;png&quot; data-w=&quot;313&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jvEgFnL0ia3puuA1ZkSFbd5fZ91W20Ev5QDdibqibvyK37SgUjOLNvLyXQ/640?wx_fmt=png&amp;amp;random=0.7640523923259128&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面我用 watch 命令监听了 k1 和 k2，然后开启事务，在事务提交之前，k1 的值被修改了，watch 监听到 k1 值被修改，所以事务没有被提交。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 脚本和事务&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从定义上来说， Redis 中的脚本本身就是一种事务， 所以任何在事务里可以完成的事， 在脚本里面也能完成。 并且一般来说， 使用脚本要来得更简单，并且速度更快。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为脚本功能是 Redis 2.6 才引入的， 而事务功能则更早之前就存在了， 所以 Redis 才会同时存在两种处理事务的方法。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reids 持久化&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么需要持久化&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们知道 Redis 是内存数据库，主打高性能，速度快。相比 Redis 而言，MySQL 的数据则是保存再硬盘中（其实也有内存版的 MySQL 数据库，但是价格极其昂贵，一般公司不会使用），速度慢，但是稳定性好。你想想 Redis 数据保存在内存中，一旦服务器宕机了，数据岂不是全部都没了，这将会出现很大问题。所以 Redis 为了弥补这一缺陷，提供数据持久化机制，即使服务器宕机，依然可以保证数据不丢失。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;持久化简介&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 提供了两种持久化机制 RDB 和 AOF，适用于不同场景&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RDB&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RDB 持久化是通过在指定时间间隔对数据进行快照，比如在 8 点钟对数据进行持久化，那么 Redis 会 fork 一个子进程将 8 点那一刻内存中的数据持久化到磁盘上。触发 RDB 持久化有以下几种方法&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;RDB 持久化方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、执行 save 命令&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行 save 命令进行持久会阻塞 Redis，备份期间 Redis 无法对外提供服务，&lt;strong&gt;一般不建议使用&lt;/strong&gt;，使用场景为 Redis 服务器需要停机维护的情况下。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、执行 bgsave 命令&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;bgsave 命令不会阻塞 Redis 主进程，持久化期间 Redis 依然可以正常对外提供服务&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、通过配置文件中配置的 save 规则来触发&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4558303886925795&quot; data-type=&quot;png&quot; data-w=&quot;283&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0j4LhazAicrsjibhdSwxVGRsv47NQX7iazEHWELzBztT7uvibFoib1TwianFsQ/640?wx_fmt=png&amp;amp;random=0.16968829594073265&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;save 900 1：900s 内有 1 个 key 发生变化，则触发 RDB 快照&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;save 300 10：300s 内有 10 个 key 发生变化，则触发 RDB 快照&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;save 60 10000：60s 内有 10000 个 key 发生变化（新增、修改、删除），则触发 RDB 快照&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;save &quot;&quot;：该配置表示关闭 RDB 持久化&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;RDB 持久化原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 进行 RDB 时，会 fork 一个子进程来进行数据持久化，这样不妨碍 Redis 继续对外提供服务，提高效率。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;曾经面试官出过这样面试题：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假如 Redis 在 8 点触发了 RDB 持久化，持久化用时 2 分钟，在持久化期间，Redis 中有 100 个 key 被修改了，那么 RDB 文件中的 key 是 8 点那一刻的数据，还是变化的呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先不要看答案，自己思考 1 分钟，一个问题只有你自己思考了，才能印象深刻。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好，下面我们一起来看下这张图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5009107468123861&quot; data-type=&quot;png&quot; data-w=&quot;1098&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jl5WibYNL8NC5GMbBswQcTiawQeqMgqY8Hjs40snVYjYtOVEAc0L3BovA/640?wx_fmt=png&amp;amp;random=0.4056195687710038&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从图中我们可以清晰的看到，Redis 备份时，fork 了一个子进程，子进程去做持久化的工作，子进程中的 key 指向了 8 点那一刻的数据，后面 k1 的值修改了，redis 会在内存中创建一个新的值，然后主进程 k1 指针指向新的值，子进程 k1 指针依然指向 19，这样 Redis 持久化的就是 8 点那一刻的数据，不会发生变化。同时，从图中我们也可以看到，Redis 持久化时并不是将内存中数据全部拷贝一份进行备份。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;RDB 优缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;RDB是一个非常紧凑的文件,它保存了某个时间点得数据集,非常适用于数据集的备份,比如你可以在每个小时报保存一下过去24小时内的数据,同时每天保存过去30天的数据,这样即使出了问题你也可以根据需求恢复到不同版本的数据集&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程,接下来的工作全部由子进程来做，父进程不需要再做其他IO操作，所以RDB持久化方式可以最大化redis的性能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;与AOF相比,在恢复大的数据集的时候，RDB方式会更快一些&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果备份间隔时间较长，RDB 会丢失较多的数据。比如 8 点备份一次，8 点半服务器宕机，那么这半小时内的数据就会丢失了&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;AOF&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;AOF 持久化是通过日志的方式，记录每次 Redis 的写操作。当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以Redis 协议追加保存每次写的操作到文件末尾。Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;AOF 持久化配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 是否开启 aof no：关闭；yes: 开启&lt;/span&gt;&lt;br/&gt;appendonly no&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# aof 文件名&lt;/span&gt;&lt;br/&gt;appendfilename &lt;span&gt;&quot;appendonly.aof&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# aof 同步策略&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# appendfsync always  # 每个命令都写入磁盘，性能较差&lt;/span&gt;&lt;br/&gt;appendfsync everysec  &lt;span&gt;# 每秒写一次磁盘，Redis 默认配置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# appendfsync no      # 由操作系统执行，默认Linux配置最多丢失30秒&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# aof 重写期间是否同步&lt;/span&gt;&lt;br/&gt;no-appendfsync-on-rewrite no&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 重写触发策略&lt;/span&gt;&lt;br/&gt;auto-aof-rewrite-percentage 100 &lt;span&gt;# 触发重写百分比 （指定百分比为0，将禁用aof自动重写功能）&lt;/span&gt;&lt;br/&gt;auto-aof-rewrite-min-size 64mb &lt;span&gt;# 触发自动重写的最低文件体积（小于64mb不自动重写）&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 加载aof时如果有错如何处理&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 如果该配置启用，在加载时发现aof尾部不正确是，会向客户端写入一个log，但是会继续执行，如果设置为 no ，发现错误就会停止，必须修复后才能重新加载。&lt;/span&gt;&lt;br/&gt;aof-load-truncated yes&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# aof 中是否使用 rdb&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 开启该选项，触发AOF重写将不再是根据当前内容生成写命令。而是先生成RDB文件写到开头，再将RDB生成期间的发生的增量写命令附加到文件末尾。&lt;/span&gt;&lt;br/&gt;aof-use-rdb-preamble yes&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;AOF 文件写入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;aof 文件是命令追加的方式，先将命令写入缓冲区，时间到了再写如磁盘中&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;appendfsync always    &lt;span&gt;# 每个命令都写入磁盘，性能较差&lt;/span&gt;&lt;br/&gt;appendfsync everysec  &lt;span&gt;# 每秒写一次磁盘，Redis 默认配置&lt;/span&gt;&lt;br/&gt;appendfsync no        &lt;span&gt;# 由操作系统执行，默认Linux配置最多丢失30秒&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面配置就是何时写入磁盘中&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;AOF 重写&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;aof 文件虽然丢失的数据少，但是随着时间的增加，aof 文件体积越来越大，占用磁盘空间越来越大，恢复时间长。所以 redis 会对 aof 文件进行重写，以减少 aof 文件体积&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面以一个例子说明&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;-- 重写前的 aof&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; k1 20&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; k2 40&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; k1 35&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; k3 34&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; k2 19&lt;br/&gt;&lt;br/&gt;-- 这里 k1 最终的值为 35，k2 最终值为 19，所以不需要写入两个命令&lt;br/&gt;-- 重写后&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; k1 35&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; k3 34&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; k2 19&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;混合持久化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从 Redis 4.0 版本开始，引入了混合持久化机制，纯AOF方式、RDB+AOF方式，这一策略由配置参数&lt;/span&gt;&lt;code&gt;&lt;span&gt;aof-use-rdb-preamble&lt;/span&gt;&lt;/code&gt;&lt;span&gt;（使用RDB作为AOF文件的前半段）控制，默认关闭(no)，设置为yes可开启&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;no：按照AOF格式写入命令，与4.0前版本无差别；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;yes：先按照RDB格式写入数据状态，然后把重写期间AOF缓冲区的内容以AOF格式写入，文件前半部分为RDB格式，后半部分为AOF格式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;混合持久化优点如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;大大减少了 aof 文件体积&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加快了 aof 文件恢复速度，前面是 rdb ，恢复速度快&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;AOF 数据恢复&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一种：纯 AOF&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;恢复时，取出 AOF 中命令，一条条执行恢复&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二种：RDB+AOF&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先执行 RDB 加载流程，执行完毕后，再取出余下命令，开始一条条执行&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;AOF 优缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;AOF 实时性更好，丢失数据更少&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AOF 已经支持混合持久化，文件大小可以有效控制，并提高了数据加载时的效率&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;对于相同的数据集合，AOF 文件通常会比 RDB 文件大&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在特定的 fsync 策略下，AOF 会比 RDB 略慢&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AOF 恢复速度比 RDB 慢&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 分布式锁&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分布式锁介绍&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;学习过 Java 的同学，应该对锁都不陌生。Java 中多个线程访问共享资源时，会出现并发问题，我们通常利用 synchronized 或者 Lock 锁来解决多线程并发访问从而出现的安全问题。细心的同学可能已经发现了， synchronized 或者 Lock 锁解决线程安全问题在单节点情况下是可行的，但是如果服务部署在多台服务器上，本地锁就失效了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分布式场景下，需要采用新的解决方案，就是今天要说的 Redis 分布式锁。日常业务中，类似抢红包，秒杀等场景都可以使用 Redis 分布式锁来解决并发问题。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分布式锁特点&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分布式在保障安全、高可用的情况下需要具备以下特性&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;互斥性：任意一个时刻，只能有一个客户端获取到锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安全性：锁只能被持久的客户端删除，不能被其他人删除&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高可用，高性能：加锁和解锁消耗的性能少，时间短&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;锁超时：当客户端获取锁后出现故障，没有立即释放锁，该锁要能够在一定时间内释放，否则其他客户端无法获取到锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可重入性：客户端获取到锁后，在持久锁期间可以再次获取到该锁&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;解决方案&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;方案一：SETNX 命令&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 提供了一个获取分布式锁的命令 SETNX&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;setnx key value&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果获取锁成功，redis 返回 1，获取锁失败 redis 返回 0&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5354523227383863&quot; data-type=&quot;png&quot; data-w=&quot;409&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jdqtYzLiaT4G7HKEIx52aSSTWcIm8e5Ze7Auu7lfiazAMQZh04Y2SAoUQ/640?wx_fmt=png&amp;amp;random=0.18636350476979135&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端使用伪代码&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; (setnx(k1,v1) == &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 执行逻辑&lt;/span&gt;&lt;br/&gt;     ....&lt;br/&gt;    }&lt;span&gt;catch&lt;/span&gt;() {&lt;br/&gt;        &lt;br/&gt;    }&lt;span&gt;finally&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 执行完成后释放锁&lt;/span&gt;&lt;br/&gt;        del k1;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个命令看似可以达到我们的目的，但是不符合分布式锁的特性，如果客户端在执行业务逻辑过程中，服务器宕机了，finally 中代码还没来得及执行，锁没有释放，也就意味其他客户端永远无法获取到这个锁&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;方案二：SETNX + EXPIRE&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;该方案获取锁之后，立即给锁加上一个过期时间，这样即使客户端没有手动释放锁，锁到期后也会自动释放&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0223463687150838&quot; data-type=&quot;png&quot; data-w=&quot;358&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jSRSFuy6ic1onxOznjH5phM2mbMiaia7xibPJ7ZAjMjnLG50jIgkprUPJibw/640?wx_fmt=png&amp;amp;random=0.7840977315093971&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们来看下伪代码&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; (setnx(k1, v1) == &lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;    expire(key, &lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;       &lt;span&gt;//.... 你的业务逻辑&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;        del(key);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个方案很完美，既可以获取到，又不用担心客户端宕机。等等，这里面真的没有问题吗？再仔细瞅瞅，一瞅就瞅出问题来了&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; (setnx(k1, v1) == &lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;    &lt;span&gt;// 再刚获取锁之后，想要给锁设置过期时间，此时服务器挂了&lt;/span&gt;&lt;br/&gt;    expire(key, &lt;span&gt;10&lt;/span&gt;); &lt;span&gt;// 这条命令没有执行&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;       &lt;span&gt;//.... 你的业务逻辑&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;        del(key);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里的 setnx 命令和 expire 命令不是原子性的，他们之间执行需要一定的等等时间，虽然这个时间很短，但是依然有极小概率出现问题&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;使用 Lua 脚本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;既然 setnx 和 expire 两个命令非原子性，那么我们让其符合原子性即可，通过 Lua 脚本即可实现。Redis 使用单个 Lua 解释器去运行所有脚本，并且， Redis 也保证脚本会以原子性(atomic)的方式执行： 当某个脚本正在运行的时候，不会有其他脚本或 Redis 命令被执行&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;具体实现如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; redis.call(&lt;span&gt;&#x27;setnx&#x27;&lt;/span&gt;,KEYS[1],ARGV[1]) == 1 &lt;span&gt;then&lt;/span&gt;&lt;br/&gt;   redis.call(&lt;span&gt;&#x27;expire&#x27;&lt;/span&gt;,KEYS[1],ARGV[2])&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; 0&lt;br/&gt;end;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样应该没问题了吧，看似上面的几个问题都很好解决了。不对，再想想，肯定还有没考虑到的&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们再来看一段伪代码&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;// 执行 lua 脚本&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 获取 k1 锁，过期时间 10 s&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (execlua()==&lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        buyGoods();&lt;br/&gt;    } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;        del(key);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6255380200860832&quot; data-type=&quot;png&quot; data-w=&quot;1394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0j0hPSJVFIcbu3icBuSMmr1ajZuPSEMbjePz9a9tS9E3OvhzSplxB8n3Q/640?wx_fmt=png&amp;amp;random=0.6737068050849393&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从图中我们可以很清晰发现问题所在&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端 A 还未执行完毕，客户端 B 就获取到了锁，这样就可能导致并发问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端 A 执行完毕，开始删除锁。但此时的锁为 B 所有，相当于删除了属于客户端 B 的锁，这样肯定会发生问题&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;方案四：SET EX PX NX + 校验唯一随机值，再删除&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;既然锁有可能被别的客户端删除，那么在删除锁的时候我们加上一层校验，判断释放锁是当前客户端持有的，如果是当前客户端，则允许删除，否则不允许删除。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;EX second&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ：设置键的过期时间为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;second&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 秒。 &lt;/span&gt;&lt;code&gt;&lt;span&gt;SET key value EX second&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 效果等同于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;SETEX key second value&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;PX millisecond&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ：设置键的过期时间为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;millisecond&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 毫秒。 &lt;/span&gt;&lt;code&gt;&lt;span&gt;SET key value PX millisecond&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 效果等同于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;PSETEX key millisecond value&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;NX&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ：只在键不存在时，才对键进行设置操作。 &lt;/span&gt;&lt;code&gt;&lt;span&gt;SET key value NX&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 效果等同于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;SETNX key value&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;XX&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ：只在键已经存在时，才对键进行设置操作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用示例：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;（jedis.set(resource_name, random_value, &lt;span&gt;&quot;NX&quot;&lt;/span&gt;, &lt;span&gt;&quot;EX&quot;&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;s) == &lt;span&gt;1&lt;/span&gt;）{ &lt;span&gt;//加锁, value 传入一个随机数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;do&lt;/span&gt; something  &lt;span&gt;//业务处理&lt;/span&gt;&lt;br/&gt;    }&lt;span&gt;catch&lt;/span&gt;(){&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;       &lt;span&gt;// 判断 value 是否相等, 相等才释放锁, 这里判断和删除是非原子性, 真实场景下可以将这两步放入 Lua 脚本中执行&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;if&lt;/span&gt; (random_value.equals(jedis.get(resource_name))) {&lt;br/&gt;         jedis.del(lockKey); &lt;span&gt;//释放锁&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Lua 脚本如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; redis.call(&lt;span&gt;&quot;get&quot;&lt;/span&gt;,KEYS[1]) == ARGV[1] &lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; redis.call(&lt;span&gt;&quot;del&quot;&lt;/span&gt;,KEYS[1])&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; 0&lt;br/&gt;end&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此方案解决了锁被其他客户端解除的问题，但是依然没有解决锁过期释放，但是业务还没有执行完成的问题&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;Redisson框架&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;方案四中并没有解决方法未执行完成，锁就超时释放的问题。这里有个方案大家比较容易想到，那就是锁的超时时间设置长一点，比如2min，一个接口执行时间总不能比 2 min 还长，那你就等着领盒饭吧，哈哈哈。但是这么做，一来是不能每个锁都设置这么久超时时间，二来是如果接口出现异常了，锁只能 2 min 后才能释放，其他客户端等待时间较长。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个问题早就有人想到了，并给出了解决方案，开源框架 Redisson 解决了这个问题。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5883084577114428&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0j6WBlCKQ5WddXCQFOAIE7oWCIsCDGU8FrgBEW3fL3jyx6R1xISsaQtw/640?wx_fmt=png&amp;amp;random=0.8792207864280699&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redisson 在方法执行期间，会不断的检测锁是否到期，如果发现锁快要到期，但是方法还没有执行完成，便会延长锁的过期时间，从而解决了锁超时释放问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;Redlock&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面所介绍的分布式锁，都是在单台 Redis 服务器下的解决方案。真实的生产环境中，我们通常会部署多台 Redis 服务器，也就是集群模式，这种情况上述解决方案就失效了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于集群 Redis，Redis 的作者 antirez 提出了另一种解决方案，Redlock 算法&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redlock 算法大致流程如下：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0juIt0zaKPMW5QHFXuLrUe8MG8y4T6LQF8TaHxWKjdftANuoHw4A4Qow/640?wx_fmt=png&amp;amp;random=0.4016757215005047&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、获取当前Unix时间，以毫秒为单位。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、依次尝试从N个实例，使用相同的key和随机值获取锁。在步骤2，当向Redis设置锁时,客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、如果因为某些原因，获取锁失败（&lt;em&gt;没有&lt;/em&gt;在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt; 简单总结一下就是客户端向 Redis 集群中所有服务器发送获取锁的请求，只有半数以上的锁获取成功后，才代表锁获取成功，否则锁获取失败。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 集群&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 集群的三种模式&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在生产环境中，我们使用 Redis 通常采用集群模式，因为单机版 Redis 稳定性可靠性较低，而且存储空间有限。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 支持三种集群模式&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主从复制&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;主从复制概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主从复制模式，有一个主，多个从，从而实现读写分离。主机负责写请求，从机负责读请求，减轻主机压力&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26366120218579236&quot; data-type=&quot;png&quot; data-w=&quot;732&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jhhYEMnsCdQJzn6pe3icLwxfZWjAgSd1PQuRVeibKfHx39c44eHsdymRg/640?wx_fmt=png&amp;amp;random=0.22686800259705708&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;主从复制原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5512295081967213&quot; data-type=&quot;png&quot; data-w=&quot;976&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jTOcoPpZzhQLHqvVOh5yd9giaCFbXNEfqUgXIN8IohEpwkvaVibz74MaA/640?wx_fmt=png&amp;amp;random=0.6779851845067002&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;从数据库启动成功后，连接主数据库，发送 SYNC 命令；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（&lt;strong&gt;从数据库初始化完成&lt;/strong&gt;）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（&lt;strong&gt;从数据库初始化完成后的操作&lt;/strong&gt;）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;主从复制优缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;支持主从复制，主机会自动将数据同步到从机，可以进行读写分离&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;主从不具备容错和恢复能力，一旦主机挂了，那么整个集群处理可读状态，无法处理写请求，会丢失数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主机宕机后无法自动恢复，只能人工手动恢复&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集群存储容量有限，容量上线就是主库的内存的大小，无法存储更多内容&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;###哨兵集群&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;哨兵概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哨兵，我们经常在电视剧中看到一些放哨的，哨兵的作用和这些放哨的差不多，起到监控作用。一旦 Redis 集群出现问题了，哨兵会立即做出相应动作，应对异常情况。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哨兵模式是基于主从复制模式上搭建的，因为主从复制模式情况下主服务器宕机，会导致整个集群不可用，需要人工干预，所以哨兵模式在主从复制模式下引入了哨兵来监控整个集群，哨兵模式架构图如下：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7422818791946308&quot; data-type=&quot;png&quot; data-w=&quot;745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jtuMzqm4enkY4fyBYEmbsVaXhcnAC1QS0jmahdLD5DQfyjGg27HP4Zw/640?wx_fmt=png&amp;amp;random=0.378912921304267&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;哨兵功能&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;监控（Monitoring）&lt;/strong&gt;：哨兵会不断地检查主节点和从节点是否运作正常。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;自动故障转移（Automatic failover）&lt;/strong&gt;：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;配置提供者（Configuration provider）&lt;/strong&gt;：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;通知（Notification）&lt;/strong&gt;：哨兵可以将故障转移的结果发送给客户端。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;下线判断&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 下线分为主观下线和客观下线两种&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;主观下线：单台哨兵任务主库处于不可用状态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客观下线：整个哨兵集群半数以上的哨兵都认为主库处于可不用状态&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哨兵集群中任意一台服务器判断主库不可用时，此时会发送命令给哨兵集群中的其他服务器确认，其他服务器收到命令后会确认主库的状态，如果不可用，返回 YES，可用则返回 NO，当有半数的服务器都返回 YES，说明主库真的不可用，此时需要重新选举&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5426356589147286&quot; data-type=&quot;jpeg&quot; data-w=&quot;2322&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jnlOibfic8iblejg3B4kibY2nP67I9bN0jhoHd8p3WgXLwdtsGP40qqm1vg/640?wx_fmt=jpeg&amp;amp;random=0.9688652998736997&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;主库选举&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当哨兵集群判定主库下线了，此时需要重新选举出一个新的主库对外提供服务。那么该由哪个哨兵来完成这个新库选举和切换的动作呢？&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;注意：这里不能让每个哨兵都去选举，可能会出现每个哨兵选举出的新主库都不同，这样就没法判定，所以需要派出一个代表&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;哨兵代表选择&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哨兵的选举机制其实很简单，就是一个Raft选举算法： &lt;strong&gt;选举的票数大于等于num(sentinels)/2+1时，将成为领导者，如果没有超过，继续选举&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;任何一个想成为 Leader 的哨兵，要满足两个条件：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一，拿到半数以上的赞成票；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以 3 个哨兵为例，假设此时的 quorum 设置为 2，那么，任何一个想成为 Leader 的哨兵只要拿到 2 张赞成票，就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;新库选择&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面已经选举出了哨兵代表，此时代表需要完成新主库的选择，新库的选择需要满足以下几个标准&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;新库需要处于健康状态，也就是和哨兵之间保持正常的网络连接&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;选择&lt;/span&gt;&lt;code&gt;&lt;span&gt;salve-priority&lt;/span&gt;&lt;/code&gt;&lt;span&gt;从节点优先级最高（redis.conf）的&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择复制偏移量最大，只复制最完整的从节点&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;故障转移&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面一小节哨兵已经选举出了新的主库，故障转移要实现新老主库之间的切换&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;故障转移流程如下：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5997830802603037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jTia9m3qSAe6O5Q689Hxricjmpl4Hib4hEOuDd5QLicBjHQKbt1ybeloIuw/640?wx_fmt=png&amp;amp;random=0.5338738046927538&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;哨兵模式优缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;实现了集群的监控，故障转移，实现了高可用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有主从复制模式的所有优点&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;集群存储容量有限，容量上线就是主库的内存的大小，无法存储更多内容&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Cluser 集群&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 的哨兵模式实现了高可用了，但是每台 Redis 服务器上存储的都是相同的数据，浪费内存，而且很难实现容量上的扩展。所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，&lt;strong&gt;也就是说每台 Redis 节点上存储不同的内容&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;Redis 集群的数据分片&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 集群没有使用一致性hash, 而是引入了 &lt;strong&gt;哈希槽&lt;/strong&gt;的概念.&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 集群有16384个哈希槽,每个key通过CRC16校验后对16384取模来决定放置哪个槽.集群的每个节点负责一部分hash槽,举个例子,比如当前集群有3个节点,那么:&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;节点 A 包含 0 到 5500号哈希槽.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;节点 B 包含5501 到 11000 号哈希槽.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;节点 C 包含11001 到 16384号哈希槽.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这种结构很容易添加或者删除节点. 比如如果我想新添加个节点D, 我需要从节点 A, B, C中得部分槽到D上. 如果我想移除节点A,需要将A中的槽移到B和C节点上,然后将没有任何槽的A节点从集群中移除即可. 由于从一个节点将哈希槽移动到另一个节点并不会停止服务,所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态.&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 集群实战&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;环境：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Vmware 虚拟机&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CentOS 7&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis 6.0.6&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为我是在本机上演示的，所以用的虚拟机&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主从复制&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;集群信息如下：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;节点&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;配置文件&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;端口&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;master&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis6379.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;6379&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;slave1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis6380.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;6380&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;slave1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis6381.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;6380&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一步：准备三个 redis.conf 配置文件，配置文件信息如下&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# redis6379.conf    master&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 包含命令，有点复用的意思&lt;/span&gt;&lt;br/&gt;include /soft/redis6.0.6/bin/redis.conf&lt;br/&gt;pidfile redis_6379.pid&lt;br/&gt;port    6379&lt;br/&gt;dbfilename dump6379.rdb&lt;br/&gt;logfile &lt;span&gt;&quot;redis-6379.log&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# redis6380.conf    slave1&lt;/span&gt;&lt;br/&gt;include /soft/redis6.0.6/bin/redis.conf&lt;br/&gt;pidfile redis_6380.pid&lt;br/&gt;port    6380&lt;br/&gt;dbfilename dump6380.rdb&lt;br/&gt;logfile &lt;span&gt;&quot;redis-6380.log&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 最后一行设置了主节点的 ip 端口&lt;/span&gt;&lt;br/&gt;replicaof 127.0.0.1 6379&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# redis6381.conf    slave2&lt;/span&gt;&lt;br/&gt;include /soft/redis6.0.6/bin/redis.conf&lt;br/&gt;pidfile redis_6381.pid&lt;br/&gt;port    6381&lt;br/&gt;dbfilename dump6381.rdb&lt;br/&gt;logfile &lt;span&gt;&quot;redis-6381.log&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 最后一行设置了主节点的 ip 端口&lt;/span&gt;&lt;br/&gt;replicaof 127.0.0.1 6379&lt;br/&gt;&lt;br/&gt;&lt;span&gt;## 注意 redis.conf 要调整一项，设置后台运行，对咱们操作比较友好&lt;/span&gt;&lt;br/&gt;daemonize yes&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二步：启动服务器&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;-- 首先启动 6379 这台服务器，因为他是主库（启动命令在 redis 安装目录的 bin 目录下）&lt;br/&gt;../bin/redis-server redis6379.conf&lt;br/&gt;-- 接口启动 6380 和 6381&lt;br/&gt;../bin/redis-server redis6380.conf&lt;br/&gt;../bin/redis-server redis6381.conf&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第三步：用客户端连接服务器&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;cd&lt;/span&gt; bin&lt;br/&gt;redis-cli -p 6379&lt;br/&gt;redis-cli -p 6380&lt;br/&gt;redis-cli -p 6381&lt;br/&gt;&lt;br/&gt;这里我开了三个窗口分别连接三台 redis 服务器，方便查看&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 6379 客户端输入命令： info replication 可用查看集群信息&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6642201834862386&quot; data-type=&quot;png&quot; data-w=&quot;545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jfKj0UTbV8cKA47Hn7zTDA7TzXwXMAtWb8VDSgMDukYUCZ40TchBwjQ/640?wx_fmt=png&amp;amp;random=0.4535142205236311&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第四步：数据同步&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在集群已经搭建好了，我们在 6379 服务器写入几条数据，看下可不可以同步到 6380 和 6381&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;6379：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35128205128205126&quot; data-type=&quot;png&quot; data-w=&quot;390&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jwn62a33KeOC57m4Q2jEXwEbwfWFQHHVUWhdbmicyAhyqkGPS0LPUY4g/640?wx_fmt=png&amp;amp;random=0.7336346243927414&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;6380：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5749318801089919&quot; data-type=&quot;png&quot; data-w=&quot;367&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jWtAUeJZiaF0XPxtxDn889IefibLrBRd2y2MhC9TJOkiaxXbkmVckgsQyg/640?wx_fmt=png&amp;amp;random=0.9077540820945631&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;6381：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.361244019138756&quot; data-type=&quot;png&quot; data-w=&quot;418&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jYe6b47x9SpoTEPwBpNMYpXib1BZnwxj6gV2285UnRiaEsDRMuzGpK98w/640?wx_fmt=png&amp;amp;random=0.7282853023446518&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从图中可用看出，数据已经成功同步了&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哨兵模式&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哨兵集群是在主从复制的基础上构建的，相当于是主从+哨兵&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;搭建哨兵模式分为两步：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;搭建主从复制集群&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加哨兵配置&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哨兵模式节点信息如下，一主二从，三个哨兵组成一个哨兵集群&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;节点&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;配置&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;端口&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;master&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis6379.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;6379&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;slave1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis6380.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;6380&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;slave2&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis6381.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;6381&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;sentinel1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;sentinel1.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;26379&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;sentinel2&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;sentinel2.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;26380&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;sentinel3&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;sentinel3.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;26381&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主从复制集群的配置同上，这里就不再赘述，下面主要介绍下哨兵的配置，哨兵的配置文件其实非常简单&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 文件内容&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# sentinel1.conf&lt;/span&gt;&lt;br/&gt;port 26379&lt;br/&gt;sentinel monitor mymaster 127.0.0.1 6379 1&lt;br/&gt;&lt;span&gt;# sentinel2.conf&lt;/span&gt;&lt;br/&gt;port 26380&lt;br/&gt;sentinel monitor mymaster 127.0.0.1 6379 1&lt;br/&gt;&lt;span&gt;# sentinel3.conf&lt;/span&gt;&lt;br/&gt;port 26381&lt;br/&gt;sentinel monitor mymaster 127.0.0.1 6379 1&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;配置文件创建好了以后就可以启动了，首先启动主从服务器，然后启动哨兵&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;../bin/redis-server redis6379.conf&lt;br/&gt;../bin/redis-server redis6380.conf&lt;br/&gt;../bin/redis-server redis6381.conf&lt;br/&gt;&lt;br/&gt;-- 启动哨兵&lt;br/&gt;../bin/redis-sentinel sentinel1.conf &lt;br/&gt;../bin/redis-sentinel sentinel2.conf &lt;br/&gt;../bin/redis-sentinel sentinel3.conf &lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.377491961414791&quot; data-type=&quot;png&quot; data-w=&quot;1555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0j5aIY6nOeibMW54njDI1Z0a5xIkFr6kP615AAWC3OoIDnMTVaSibagiaJA/640?wx_fmt=png&amp;amp;random=0.9036448846001819&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从哨兵的启动日志中我们可用看到主从服务器的信息，以及其他哨兵节点的信息&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;故障转移&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主从同步功能上面已经演示过了，这里主要测试一下哨兵的故障转移&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在我手动将主节点停掉，在 6379 上执行 shutdown 命令&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此时我们观察一下哨兵的页面：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4626865671641791&quot; data-type=&quot;png&quot; data-w=&quot;1273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jqADulpCE8oxo8hptgF6yh6RY9ZC1y45DewUv40dUB6O8nFfKMTcciaQ/640?wx_fmt=png&amp;amp;random=0.819906181075247&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哨兵检测到了 6379 下线，然后选举出了新的主库 6380&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此时我们通过 info replication 命令查看集群信息，发现 6380 已经是主库了，他有一个从节点 6381&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5098360655737705&quot; data-type=&quot;png&quot; data-w=&quot;610&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jNEZLboicBicmLJEeDX7ibaPxjZxMw4DDW6Fk3fhpkibWiaArxtkD5CF6kyQ/640?wx_fmt=png&amp;amp;random=0.7949051846788313&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在我手动将 6379 启动，看下 6379 会不会重新变成主库&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4847605224963715&quot; data-type=&quot;png&quot; data-w=&quot;689&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jYyhnHuDlLYlffBd0wQOcPHTWYLPdiaTkTo4u09wIia88JKGFsjx8tpBQ/640?wx_fmt=png&amp;amp;random=0.9967648860480147&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重新启动后，我们发现 6379 变成了 80 的从库&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Cluser 集群&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;官方推荐，Cluser 集群至少要部署 3 台以上的 master 节点，最好使用 3 主 3 从&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;节点&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;配置&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;端口&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;cluster-master1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis7001.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;7001&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;cluster-master2&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis7002.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;7002&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;cluster-master3&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis7003.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;7003&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;cluster-slave1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis7004.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;7004&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;cluster-slave2&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis7006.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;7005&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;cluster-slave3&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;redis7006.conf&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;7006&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;配置文件内容如下，6 个配置文件信息基本相同，编辑好一份后其他文件直接复制修改端口即可&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 端口&lt;/span&gt;&lt;br/&gt;port 7001  &lt;br/&gt;&lt;span&gt;# 启用集群模式&lt;/span&gt;&lt;br/&gt;cluster-enabled yes &lt;br/&gt;&lt;span&gt;# 根据你启用的节点来命名，最好和端口保持一致，这个是用来保存其他节点的名称，状态等信息的&lt;/span&gt;&lt;br/&gt;cluster-config-file nodes_7001.conf &lt;br/&gt;&lt;span&gt;# 超时时间&lt;/span&gt;&lt;br/&gt;cluster-node-timeout 5000&lt;br/&gt;appendonly yes&lt;br/&gt;&lt;span&gt;# 后台运行&lt;/span&gt;&lt;br/&gt;daemonize yes&lt;br/&gt;&lt;span&gt;# 非保护模式&lt;/span&gt;&lt;br/&gt;protected-mode no &lt;br/&gt;pidfile  redis_7001.pid&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然后分别启动 6 个节点&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;../bin/redis-server redis7001.conf&lt;br/&gt;../bin/redis-server redis7002.conf&lt;br/&gt;../bin/redis-server redis7003.conf&lt;br/&gt;../bin/redis-server redis7004.conf&lt;br/&gt;../bin/redis-server redis7005.conf&lt;br/&gt;../bin/redis-server redis7006.conf&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;启动集群&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 执行命令&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# --cluster-replicas 1 命令的意思是创建master的时候同时创建一个slave&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;$ redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006  --cluster-replicas 1&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;启动过程有个地方需要输入 yes 确认：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15089163237311384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jOLiavc7PkNSqb6mfNtTLjk6YeoI7fA2iafJsOIWnGGwJ3yYhTLPQomEA/640?wx_fmt=png&amp;amp;random=0.4605689354700546&quot; data-type=&quot;png&quot; data-w=&quot;729&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;启动成功后可用看到控制台输出结果：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12996632996632998&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jHDj1JZ5qbGE2AVKBwbhedFFrCIcFF19KHbxas7XctfiaPQbWGrmzm5w/640?wx_fmt=png&amp;amp;random=0.04272848378632821&quot; data-type=&quot;png&quot; data-w=&quot;1485&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3 个 master 节点，3 个 slave 节点，&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;master[0]槽位：0-5460&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;master[1]槽位：5461-10922&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;master[2]槽位：10923-16383&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;数据验证&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;连接 7001 服务器&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;redis-cli -p 7001 -c 集群模式下需要加上 -c 参数&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31281198003327787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jTuUMTBctN3pIbSGoiblzHXp1RcKXBiakYJ4BnKstiaXSGJ9pPygcRNaicg/640?wx_fmt=png&amp;amp;random=0.9317448817045257&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从图中可用看出，k1 被放到 7003 主机上了，我们此时获取 k1 ，可用正常获取到&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;登录 7003 也可以正常拿到数据&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23382045929018788&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaQurMdlahuWxJ6MGMIROg0jnNfzesxPoNsqKcbpNquBAxYwDSjBtLib7JcPrlFnZibUupxf30uX6Opg/640?wx_fmt=png&amp;amp;random=0.8581943808899719&quot; data-type=&quot;png&quot; data-w=&quot;479&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Redis 缓存问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在服务端中，数据库通常是业务上的瓶颈，为了提高并发量和响应速度，我们通常会采用 Redis 来作为缓存，让尽量多的数据走 Redis 查询，不直接访问数据库。同时 Redis 在使用过程中也会出现各种各样的问题，面对这些问题我们该如何处理？&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存穿透&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、定义：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存穿透是指，当缓存和数据中都没有对应记录，但是客户端却一直在查询。比如黑客攻击系统，不断的去查询系统中不存在的用户，查询时先走缓存，缓存中没有，再去查数据库；或者电商系统中，用户搜索某类商品，但是这类商品再系统中根本不存在，这次的搜索应该直接返回空&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、解决方案&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;网关层增加校验，进行用户鉴权，黑名单控制，接口流量控制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于同一类查询，如果缓存和数据库都没有获取到数据，那么可用用一个空缓存记录下来，过期时间 60s，下次遇到同类查询，直接取出缓存中的空数据返回即可&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用布隆过滤器，布隆过滤器可以用来判断某个元素是否存在于集合中，利用布隆过滤器可以过滤掉一大部分无效请求&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存击穿&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、定义：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存击穿是指，缓存中数据失效，在高并发情况下，所有用户的请求全部都打到数据库上，短时间造成数据库压力过大&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、解决方案：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;接口限流、熔断&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加锁，当第一个用户请求到时，如果缓存中没有，其他用户的请求先锁住，第一个用户查询数据库后立即缓存到 Redis，然后释放锁，这时候其他用户就可以直接查询缓存&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存雪崩&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、定义&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存雪崩是指 Redis 中大批量的 key 在同一时间，或者某一段时间内一起过期，造成多个 key 的请求全部无法命中缓存，这些请求全部到数据库中，给数据库带来很大压力。与缓存击穿不同，击穿是指一个 key 过期，雪崩是指很多 key 同时过期。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、解决方案&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;缓存过期时间设置成不同时间，不要再统一时间过期&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存污染&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、定义&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存污染是指，由于历史原因，缓存中有很多 key 没有设置过期时间，导致很多 key 其实已经没有用了，但是一直存放在 redis 中，时间久了，redis 内存就被占满了&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、解决方案&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;缓存尽量设置过期时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设置缓存淘汰策略为最近最少使用的原则，然后将这些数据删除&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;文章转载自 https://www.cnblogs.com/wugongzi/p/16827473.html&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作者：说故事的五公子&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100015743&quot; data-ratio=&quot;0.08658008658008658&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/TNUwKhV0JpTGQqtlGfEHkjibtshlaDwVKzjqq2pnpmYC14bKxDtSuhpWZWfVcicj5PFsoSMzuzicKIWZbsBpGXiaicg/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-type=&quot;gif&quot; data-w=&quot;462&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;pre&gt;&lt;pre&gt;&lt;pre data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(167, 167, 167)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(63, 63, 63)&quot; data-style=&quot;letter-spacing: 0.544px; font-size: 16px; color: rgb(63, 63, 63); word-spacing: 1px; line-height: inherit;&quot;&gt;&lt;section data-mpa-template-id=&quot;1250&quot; data-mpa-category=&quot;divider&quot; data-style=&quot;margin-right: 0.5em; margin-left: 0.5em; white-space: normal; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; color: rgb(0, 0, 0); letter-spacing: 0px; word-spacing: 2px;&quot; data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(230, 230, 230)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(0, 0, 0)&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; data-style=&quot;margin: 10px 0em; color: rgb(89, 89, 89); letter-spacing: 0.544px;&quot; data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(138, 138, 138)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(138, 138, 138)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(89, 89, 89)&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(138, 138, 138)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(89, 89, 89)&quot;&gt;&lt;p data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(106, 104, 111)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(106, 104, 111)&quot;&gt;1. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDUyMDQyNQ==&amp;amp;mid=2247512984&amp;amp;idx=1&amp;amp;sn=e122f95a893ca6b8613576375c4a92e1&amp;amp;chksm=fd57631eca20ea081ecf463e06ea5092789b5bb7f4ce262fa0ab937ab2752f86438b26a8c242&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;这 30 款 IDEA 宝贝插件 yyds&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;这 30 款 IDEA 宝贝插件 yyds&lt;/a&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(138, 138, 138)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(89, 89, 89)&quot;&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(106, 104, 111)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(106, 104, 111)&quot;&gt;2. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDUyMDQyNQ==&amp;amp;mid=2247512903&amp;amp;idx=1&amp;amp;sn=3c6afe891aeb94cf297d73e4c4ae8d5f&amp;amp;chksm=fd5763c1ca20ead7a0b2a79f65b58c84307b43ef2cf5a972e9686e1bbdb4792be7365196d518&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;千万级数据查询：CK、ES、RediSearch 谁才是王炸？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;千万级数据查询：CK、ES、RediSearch 谁才是王炸？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(138, 138, 138)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(89, 89, 89)&quot;&gt;&lt;span&gt;3. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDUyMDQyNQ==&amp;amp;mid=2247512899&amp;amp;idx=1&amp;amp;sn=44504d53cc705ad1868c1710b020a7e3&amp;amp;chksm=fd5763c5ca20ead3d69a7bc76e461c8143c22733c491f1c69fe2c1f4dcdf622f3616f92c2a3f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Spring Cloud Sleuth 全链路日志跟踪解决方案（强烈推荐）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Spring Cloud Sleuth 全链路日志跟踪解决方案（强烈推荐）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(106, 104, 111)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(106, 104, 111)&quot;&gt;4. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDUyMDQyNQ==&amp;amp;mid=2247512862&amp;amp;idx=1&amp;amp;sn=4fbb83b2fa78c751c2e814bb1ef1bf4c&amp;amp;chksm=fd576398ca20ea8edaf90a077584699f3549845235fbf1db5cce8b666b56f05e09ade1a3482f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;个人网站总被攻击？写个自动封禁IP的脚本给你！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;个人网站总被攻击？写个自动封禁IP的脚本给你！&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-style=&quot;margin-right: 0.5em; margin-left: 0.5em; white-space: normal; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0px; word-spacing: 2px; color: rgb(62, 62, 62); text-align: center;&quot; data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(168, 168, 168)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(62, 62, 62)&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100015744&quot; data-ratio=&quot;0.5552731893265566&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/knmrNHnmCLEVGGmicJODkfibhcqyUwmTSC8CUvAMG78wPemfibvQ502uFs9jlziaLP50YcTs4rL9hQuzX32PAUOPHA/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;gif&quot; data-w=&quot;787&quot;/&gt;&lt;/p&gt;&lt;pre data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(138, 138, 138)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(89, 89, 89)&quot; data-style=&quot;letter-spacing: 0.544px; text-size-adjust: auto; word-spacing: 2px; color: rgb(89, 89, 89);&quot;&gt;&lt;p data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(168, 168, 168)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(62, 62, 62)&quot; data-style=&quot;margin-top: 5px; margin-bottom: 5px; white-space: normal; color: rgb(62, 62, 62); letter-spacing: 0.544px; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 14px; line-height: normal;&quot;&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(120, 172, 254)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(120, 172, 254)&quot;&gt;最近面试BAT，整理一份面试资料&lt;/span&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(61, 167, 66)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(61, 167, 66)&quot;&gt;《&lt;strong data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(61, 167, 66)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(61, 167, 66)&quot;&gt;Java面试BATJ通关手册&lt;/strong&gt;》&lt;/span&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(120, 172, 254)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(120, 172, 254)&quot;&gt;，覆盖了Java核心技术、JVM、Java并发、SSM、微服务、数据库、数据结构等等。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(156, 156, 156)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(74, 74, 74)&quot; data-style=&quot;margin-top: 15px; margin-bottom: 15px; letter-spacing: 0.544px; white-space: pre-line; line-height: 30px; color: rgb(74, 74, 74); font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;&quot;&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(120, 172, 254)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(120, 172, 254)&quot;&gt;获取方式：点“&lt;/span&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(61, 167, 66)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(61, 167, 66)&quot;&gt;在看&lt;/span&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(120, 172, 254)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(120, 172, 254)&quot;&gt;”，关注公众号并回复 &lt;/span&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(61, 167, 66)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(61, 167, 66)&quot;&gt;Java&lt;/span&gt;&lt;span data-darkmode-bgcolor-15923650965579=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15923650965579=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15923650965579=&quot;rgb(120, 172, 254)&quot; data-darkmode-original-color-15923650965579=&quot;rgb(120, 172, 254)&quot;&gt; 领取，更多内容陆续奉上。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;PS：因公众号平台更改了推送规则，如果不想错过内容，记得读完点一下&lt;/span&gt;&lt;strong&gt;“&lt;span&gt;在看&lt;/span&gt;”&lt;/strong&gt;&lt;span&gt;，加个&lt;/span&gt;&lt;strong&gt;“&lt;span&gt;星标&lt;/span&gt;”&lt;/strong&gt;&lt;span&gt;，这样每次新文章推送才会第一时间出现在你的订阅列表里。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;点&lt;strong&gt;“在看”&lt;/strong&gt;支持小哈呀，谢谢啦&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>