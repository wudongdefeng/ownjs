<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a84340a876bd2c937c066f2a42cb9a9d</guid>
<title>如何在 Nuxt 3 中使用 wavesurfer.js</title>
<link>https://toutiao.io/k/1eferiy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h1&gt;安装 wavesurfer.js&lt;/h1&gt;

&lt;p&gt;在项目中安装 &lt;code&gt;wavesurfer.js&lt;/code&gt;&lt;/p&gt;

&lt;pre lang=&quot;bash&quot;&gt;&lt;code&gt;npm install --save wavesurfer.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;常规方式引入&lt;/h1&gt;

&lt;p&gt;如果你的根目录中没有 &lt;code&gt;components&lt;/code&gt; 目录则需要创建该目录，并在此目录中创建 &lt;code&gt;WaveSurfer.vue&lt;/code&gt; 内容如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
import WaveSurfer from &#x27;wavesurfer.js&#x27;  

const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  options:{  
    type:Object,  
  }  
});
const wavesurferMain = ref(null);  
const waveSurfer = ref(null);  


let options = props.options;  
let wsOptions = Object.assign({  
      container: wavesurferMain.value  
    },  
    options);  

waveSurfer.value = new WaveSurfer.create(wsOptions);  
waveSurfer.value.load(props.src); 
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们集成该组件，在这个例子中我们将在 &lt;code&gt;app.vue&lt;/code&gt; 直接引用，并且我将测试音频文件 &lt;code&gt;demo.wav&lt;/code&gt;，放在根目录的&lt;code&gt;public&lt;/code&gt; 中。&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div&amp;gt;
    &amp;lt;WaveSurfer src=&quot;/demo.wav&quot;:options=&quot;waveSurferOption&quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const waveSurferOption = {  
  height: 340,  
  progressColor: &#x27;#e03639&#x27;,  
  waveColor: &#x27;#e7e7e7&#x27;,  
  cursorColor: &#x27;#FFDDDD&#x27;,  
  barWidth: 2,  
  mediaControls: true,  
  backend: &#x27;MediaElement&#x27;,  
  scrollParent:true,  
  xhr: {  
    mode: &#x27;no-cors&#x27;  
  }  
};  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在执行 &lt;code&gt;npm run dev&lt;/code&gt;  ，页面将报错 &lt;code&gt;self is not defined&lt;/code&gt;。
这是因为在 &lt;code&gt;setup&lt;/code&gt; 这个生命周期中，DOM 节点并未创建，所以我们需要在&lt;code&gt;mounted&lt;/code&gt; 阶段进行导入。&lt;/p&gt;

&lt;h1&gt;正确的引入方式&lt;/h1&gt;

&lt;p&gt;更改  &lt;code&gt;WaveSurfer.vue&lt;/code&gt;  文件内容如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  options:{  
    type:Object,  
  }  
});  

const wavesurferMain = ref(null);  
const waveSurfer = ref(null);  

onMounted(async ()=&amp;gt;{  
  const WaveSurfer = (await import(&#x27;wavesurfer.js&#x27;)).default;  
  const options = props.options;  
  const wsOptions = Object.assign({  
        container: wavesurferMain.value  
      },  
      options);  
  waveSurfer.value = new WaveSurfer.create(wsOptions);  
  waveSurfer.value.load(props.src);  
});  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在你应该能看到已经可以正常加载了。&lt;/p&gt;

&lt;h1&gt;加载插件&lt;/h1&gt;

&lt;p&gt;加载方式和插件一样，官方的插件在 &lt;code&gt;wavesurfer.js/dist/plugin&lt;/code&gt; 目录下，这个例子将加载时间线插件如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
  &amp;lt;div ref=&quot;waveTimeline&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  options:{  
    type:Object,  
  }  
});  

const wavesurferMain = ref(null);  
const waveTimeline = ref(null);  
const waveSurfer = ref(null);  

onMounted(async ()=&amp;gt;{  
  const WaveSurfer = (await import(&#x27;wavesurfer.js&#x27;)).default;  
  const Timeline  = (await import(&#x27;wavesurfer.js/dist/plugin/wavesurfer.timeline&#x27;)).default;  
  const options = props.options;  
  const wsOptions = Object.assign({  
        container: wavesurferMain.value,  
        plugins:[  
          Timeline.create({container:waveTimeline.value})  
        ]  
      },  
      options);  
  waveSurfer.value = new WaveSurfer.create(wsOptions);  
  waveSurfer.value.load(props.src);  

});  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;加载波形数据&lt;/h1&gt;

&lt;p&gt;如果音频文件过大，使用插件原生的波形生成方式会非常慢。这个时候可以通过服务端生成波形数据，并让插件直接通过波形数据进行渲染。具体生成方式可以参考官方的解决方案&lt;a href=&quot;https://wavesurfer-js.org/faq/&quot;&gt;FAQ&lt;/a&gt;。在这个项目中，生成波形数据文件后，我把它移动到项目的&lt;code&gt;public&lt;/code&gt;中，更改 &lt;code&gt;WaveSurfer.vue&lt;/code&gt; 内容如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
  &amp;lt;div ref=&quot;waveTimeline&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  peaksData:{  
    type:String,  
  },  
  options:{  
    type:Object,  
  }  
});  

const wavesurferMain = ref(null);  
const waveTimeline = ref(null);  
const waveSurfer = ref(null);  

onMounted(async ()=&amp;gt;{  
  const WaveSurfer = (await import(&#x27;wavesurfer.js&#x27;)).default;  
  const Timeline  = (await import(&#x27;wavesurfer.js/dist/plugin/wavesurfer.timeline&#x27;)).default;  
  const options = props.options;  
  const wsOptions = Object.assign({  
        container: wavesurferMain.value,  
        plugins:[  
          Timeline.create({container:waveTimeline.value})  
        ]  
      },  
      options);  
  waveSurfer.value = new WaveSurfer.create(wsOptions);  
  fetch(props.peaksData)  
      .then(response =&amp;gt; {  
        if (!response.ok) {  
          throw new Error(&quot;HTTP error &quot; + response.status);  
        }  
        return response.json();  
      })  
      .then(peaks =&amp;gt; {  
        waveSurfer.value.load(props.src,peaks.data);  
      })  
      .catch((e) =&amp;gt; {  
        console.error(&#x27;error&#x27;, e);  
      });  

});  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;app.vue&lt;/code&gt; 中变更如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div&amp;gt; 
    &amp;lt;WaveSurfer src=&quot;/demo.wav&quot; peaks-data=&quot;/demo.json&quot; :options=&quot;waveSurferOption&quot; /&amp;gt;  
  &amp;lt;/div&amp;gt;
  &amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const waveSurferOption = {  
  height: 340,  
  progressColor: &#x27;#e03639&#x27;,  
  waveColor: &#x27;#e7e7e7&#x27;,  
  cursorColor: &#x27;#FFDDDD&#x27;,  
  barWidth: 2,  
  mediaControls: false,  
  backend: &#x27;MediaElement&#x27;,  
  scrollParent:true,  
  xhr: {  
    mode: &#x27;no-cors&#x27;  
  }  
}  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;暴露插件的方法&lt;/h1&gt;

&lt;p&gt;现在我们只是正常初始化插件并让它加载了音频文件，目前我们并不能操作它。
因为 &lt;code&gt;Vue3&lt;/code&gt; 中，默认并不会暴露 &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; 中声明的绑定。我们需要使用 &lt;code&gt;defineExpose&lt;/code&gt; 来暴露对应的属性。&lt;code&gt;WaveSurfer.vue&lt;/code&gt; 如下变更：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
  &amp;lt;div ref=&quot;waveTimeline&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  peaksData:{  
    type:String,  
  },  
  options:{  
    type:Object,  
  }  
});  

const wavesurferMain = ref(null);  
const waveTimeline = ref(null);  
const waveSurfer = ref(null);  

onMounted(async ()=&amp;gt;{  
  // 省略逻辑

});  
defineExpose(  
    {  
      waveSurfer  
    }  
)  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;app.vue&lt;/code&gt; 中我们可以这样调用：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div&amp;gt;    
  &amp;lt;WaveSurfer ref=&quot;refWaveSurfer&quot; src=&quot;/demo.wav&quot; peaks-data=&quot;/demo.json&quot; :options=&quot;waveSurferOption&quot;/&amp;gt;  
    &amp;lt;button @click=&quot;play&quot;&amp;gt;play&amp;lt;/button&amp;gt;  
    &amp;lt;button @click=&quot;pause&quot;&amp;gt;pause&amp;lt;/button&amp;gt;  
  &amp;lt;/div&amp;gt;
  &amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const waveSurferOption = {  
  height: 340,  
  progressColor: &#x27;#e03639&#x27;,  
  waveColor: &#x27;#e7e7e7&#x27;,  
  cursorColor: &#x27;#FFDDDD&#x27;,  
  barWidth: 2,  
  mediaControls: false,  
  backend: &#x27;MediaElement&#x27;,  
  scrollParent:true,  
  xhr: {  
    mode: &#x27;no-cors&#x27;  
  }  
}  
const refWaveSurfer = ref(null);  

function play() {  
  refWaveSurfer.value.waveSurfer.play();  // 调用播放方法 
}  

function pause(){  
  refWaveSurfer.value.waveSurfer.pause();  // 调用暂停方法
}  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;项目&lt;/h1&gt;

&lt;p&gt;你可以在以下仓库看到完整的示例
&lt;a href=&quot;https://github.com/AnyStudy/nuxt-3-wavesurfer-demo&quot;&gt;https://github.com/AnyStudy/nuxt-3-wavesurfer-demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2faf9b5d0bc27d539d60ccccdeba2f20</guid>
<title>【并发编程技术】「技术辩证分析」在并发编程模式下进行线程安全以及活跃性问题简析_洛神灬殇的博客-CSDN博客</title>
<link>https://toutiao.io/k/7qtmazq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot;&gt;
        
        
                &lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h3&gt;&lt;a id=&quot;_0&quot;/&gt;什么是线程安全？&lt;/h3&gt; 
&lt;p&gt;线程安全，有两个重要的特征说明：“&lt;strong&gt;共享&lt;/strong&gt;”和“&lt;strong&gt;可变&lt;/strong&gt;”。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;共享是指可以被多个线程同时访问；&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;可变是指变量的值在生命周期内是可以变化的；&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;_8&quot;/&gt;如何实现线程安全&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;一个对象是否需要线程安全的，取决于它是否被多个线程访问；&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;如何保证一个对象的线程安全，则需要采用同步机制来协同对对象可变状态的访问；&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;给线程安全下一个明确的定义：当多个线程访问这个对象或者资源时，如果这个对象或资源始终都能表现出数据的一致性的状态，那么就称这个对象或者资源是线程安全的；&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;_16&quot;/&gt;数据资源的有无状态化&lt;/h4&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;比如：count++，其实是不具备原子性的，因为这个步骤实际会被拆分为三个步骤，即 读取、修改和写入，而这三个步骤有可能在某个时刻因CPU时间片的切换问题，而只执行其中一两个步骤，这就不具备原子性。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e70fe4b76f039207ce56fa8b70f72d19.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_26&quot;/&gt;原子化能力支持&lt;/h4&gt; 
&lt;p&gt;在Java中，为了解决这个问题，java.util.concurrent.atomic包提供了很多的类，来保证数据操作的原子性，比如我们之前的程序可以修改为&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;基本数据类型 AtomicInteger&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;数组类型 AtomicIntegerArray&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;AtomicInteger&lt;/span&gt; integer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
integer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;内部的原理是采用了CAS机制&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;CAS_41&quot;/&gt;那么什么是CAS机制？&lt;/h5&gt; 
&lt;p&gt;CAS有人翻译为Compare And Set或Compare And Swap都是正确的。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;多线程并发执行的状态下，锁的状态改变，基本都是使用CAS原理，它有一个比较别扭的叫法“CPU硬件同步原语”，算法是基于CPU硬件的，原子性操作，不会被其他线程打断。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;CAS的算法，比较当前值和期望的值是否相等，如果相等，则将当前值赋予一个新值。&lt;/p&gt; 
&lt;p&gt;再比如修改一个Boolean的类型的变量的值，我们也可以采用&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AtomicBoolean&lt;/span&gt; atomicBoolean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AtomicBoolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    atomicBoolean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compareAndSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_60&quot;/&gt;同步锁机制支持&lt;/h4&gt; 
&lt;p&gt;只要程序中存在“先判断，再更新”，那么就要保证这两个操作在一个原子操作里面，才能保证线程安全。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;a id=&quot;Java_69&quot;/&gt;Java锁机制的一些特点&lt;/h5&gt; 
&lt;p&gt;监视锁、互斥锁、可重入锁都是在这个锁的特点。&lt;/p&gt; 
 
&lt;h5&gt;&lt;a id=&quot;Java_79&quot;/&gt;Java锁机制的简单原理&lt;/h5&gt; 
&lt;p&gt;JVM为每个锁设置两个属性，获取计数值和所有者线程，当计数值为0时，这个锁就被认为是没有被任何线程持有，当线程请求一个未被持有的锁时，JVM将记录锁的持有者，并且计数值+1。&lt;/p&gt; 
&lt;p&gt;如果同一个线程再次获取这个锁，则计数值将递增，而当线程退出同步代码块时，计数器会相应递减，当计数值为0，这个锁将被释放。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_86&quot;/&gt;活跃性问题&lt;/h3&gt; 
&lt;p&gt;承接上面解决安全性的问题分析，锁机制会存在活跃性问题，比如：死锁，饥饿，活锁，这些都是属于活跃性问题。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_90&quot;/&gt;死锁&lt;/h4&gt; 
&lt;p&gt;多个线程，各自占对方的资源，都不愿意释放，从而造成死锁，A线程需要等待的锁被B线程占用，而B线程需要的等待的锁被A线程占用，所以相互都不释放，于是就陷入了死锁。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_94&quot;/&gt;饥饿&lt;/h4&gt; 
&lt;p&gt;多个线程访问同一个同步资源，有些线程总是没有机会得到互斥锁，这种就叫做饥饿。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_98&quot;/&gt;出现饥饿的三种情况&lt;/h5&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;高优先级的线程吞噬了低优先级的线程的CPU时间片&lt;/p&gt; 
   &lt;/li&gt;&lt;li&gt; &lt;p&gt;线程被永久阻塞在等待进入同步代码块的状态&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;等待的线程永远不被唤醒&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;建议大家采用公平锁来代替synchronized这种互斥锁&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a id=&quot;_114&quot;/&gt;活锁&lt;/h4&gt; 
&lt;p&gt;两个人在走廊上碰见，大家都互相很有礼貌，互相礼让，A从左到右，B也从从左转向右，发现又挡住了地方，继续转换方向，但又碰到了，反反复复，一直没有机会运行下去。&lt;/p&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4477b36cd9f54dab40b491688cf7dbf6</guid>
<title>一分钟读论文：《30年软件重构研究：系统性文献综述》 | Micropaper一分钟读论文：《30年软件重构研究：系统性文献综述》 | Micropaper</title>
<link>https://toutiao.io/k/bzl6j7y</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;article-post&quot;&gt;                
&lt;p&gt;如何评估重构的收益？IEEE 软件工程期刊登的论文&lt;a href=&quot;https://arxiv.org/pdf/2007.02194.pdf&quot;&gt;《30 Years of Software Refactoring Research: A Systematic Literature Review》&lt;/a&gt;分析了过去&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30年3183篇&lt;/code&gt;关于重构的研究论文，对现有重构研究的最具可扩展性和最全面的文献综述。&lt;/p&gt;

&lt;h3 id=&quot;论文研究的问题和结论&quot;&gt;论文研究的问题和结论&lt;/h3&gt;
&lt;h4 id=&quot;rq1重构生命周期是什么&quot;&gt;RQ1：重构生命周期是什么？&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/screenshot-20230114-000959.jpg&quot; alt=&quot;lifecycle&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;重构检测：&lt;/code&gt;识别重构机会是实际重构过程之前的一个重要阶段。 它可以通过手动检查和分析系统的工件来识别重构机会来完成。  该领域的研究人员通常会提出全自动或半自动化技术来识别重构机会。 这些技术可能适用于不同的工件，应该根据经验进行评估。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;重构优先级：&lt;/code&gt;重构机会的数量通常超过开发人员可以处理的问题数量，尤其是当可用于执行重构的工作量有限时。 此外，并非所有重构机会都与系统目标或其健康状况同等相关。 在此阶段，根据开发人员的需要，使用不同的标准（例如，最大限度地重构具有大量反模式或具有以前的错误历史等的类）对重构操作进行优先级排序。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;重构测试：&lt;/code&gt;选择要应用的重构后，需要进行测试以确保工件转换的正确性并避免将来出现错误。 这是通过检查重构操作的前置条件和后置条件的满足以及系统行为的保存来完成的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;重构文档：&lt;/code&gt;应用和测试重构后，我们需要记录重构、它们的位置、应用它们的原因以及质量改进&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;预测：&lt;/code&gt;对于开发人员来说，了解哪些位置可能需要在其软件产品的未来版本中进行重构是很有趣的。 这将帮助他们专注于将来会发生变化的相关工件，为进一步改进和扩展功能做好准备，并优化有限资源和时间的管理。 可以使用开发历史来预测未来重构的位置。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rq2在重构生命周期的每个步骤中重构的工件类型是什么&quot;&gt;RQ2：在重构生命周期的每个步骤中重构的工件类型是什么？&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;重构不仅限于软件代码，它可以应用于任何类型的软件工件（例如，软件架构、数据库模式、模型、用户界面和代码）。&lt;/li&gt;
  &lt;li&gt;最受欢迎的重构工件是代码 (72.89%)。&lt;/li&gt;
  &lt;li&gt;模型重构也受到了相当大的关注，占比高达59.25%。&lt;/li&gt;
  &lt;li&gt;图形用户界面 (GUI) 和数据库重构受到的关注最少，分别只有 4.12% 和 2.58%。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rq3为什么软件从业者和研究人员要重构&quot;&gt;RQ3：为什么软件从业者和研究人员要重构？&lt;/h4&gt;

&lt;p&gt;通过对主要研究的分析确定了五种范式：面向对象设计、云计算、移动应用程序、模型驱动和面向方面。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;超过 34% 的与重构相关的研究集中在面向对象的设计上。&lt;/li&gt;
  &lt;li&gt;不到 5% 的论文研究了云计算和移动应用程序开发的重构。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于分类法的重构目标分类，考虑了五个子类：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;外部质量&lt;/code&gt;：如正确性、可用性、效率、可靠性等，提高外部质量的论文占比22.68%；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;内部质量&lt;/code&gt;：如可维护性、灵活性、可移植性、可重用性、可读性等，提高内部质量的论文占比41.63%；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;性能&lt;/code&gt;：例如响应时间，错误率，请求率，内存使用等；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;迁移&lt;/code&gt;：例如类层次结构中的分散，引用变量的数量，分配的变量数量等，&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;安全性&lt;/code&gt;：例如解决漏洞所需的时间，数量 被阻止的病毒和垃圾邮件数量、端口探测数量、应用的补丁数量、每个缺陷的成本、攻击面等。 只有 3.11% 的论文出于安全原因调查了重构。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rq4软件从业者和研究人员使用哪些不同的方法来执行重构&quot;&gt;RQ4：软件从业者和研究人员使用哪些不同的方法来执行重构？&lt;/h4&gt;

&lt;p&gt;重构技术分为四大类：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;数据挖掘（例如聚类、分类、决策树、关联、神经网络等），17.59%的论文使用数据挖掘的技术来解决重构问题；&lt;/li&gt;
  &lt;li&gt;基于搜索的方法（例如遗传算法、爬山法、模拟退火法、多目标法） 进化算法等），超过 25% 的论文使用基于搜索的技术来解决重构问题；&lt;/li&gt;
  &lt;li&gt;形式化方法（B-Method、用于自动定理证明的规范语言、RAISE、Z 表示法、SPARK Ada 等）和&lt;/li&gt;
  &lt;li&gt;模糊逻辑。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rq5软件从业者和研究人员使用哪些类型的数据集来验证重构&quot;&gt;RQ5：软件从业者和研究人员使用哪些类型的数据集来验证重构？&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;61.1% 的研究使用开源系统来验证他们的工作&lt;/li&gt;
  &lt;li&gt;38.9% 的研究使用工业项目来验证他们的工作&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;该综述的主要贡献&quot;&gt;该综述的主要贡献&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/screenshot-20230114-005355.jpg&quot; alt=&quot;flow&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;确定了一组截至 2020 年 5 月发表的与重构相关的 3183 项研究，符合质量评估标准。 这些研究可以被研究和行业社区用作可靠的基础，并帮助他们对重构进行进一步的研究。&lt;/li&gt;
  &lt;li&gt;提出了一个全面的定性和定量综合，反映了从 3183 项高严谨性研究中提取的数据重构的最新技术水平。 我们的综合涵盖以下主题：工件、重构工具、不同的方法以及重构研究中的性能评估。&lt;/li&gt;
  &lt;li&gt;提供指南和建议，以支持该领域的进一步研究。&lt;/li&gt;
  &lt;li&gt;提供了一个平台：
    &lt;ul&gt;
      &lt;li&gt;(1) 基于综述提议的分类法的重构出版物的可搜索存储库；&lt;/li&gt;
      &lt;li&gt;(2) 对重构社区做出贡献的作者的可搜索存储库；&lt;/li&gt;
      &lt;li&gt;(3) 基于收集的论文分析和可视化重构趋势和技术。 拟议的基础设施将使研究人员和从业人员能够轻松报告重构出版物并上传有关重构领域活跃作者的信息。 它还将连接不同的社区，以推进重构研究领域，并提供教育下一代重构的机会。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

                
&lt;/article&gt;


&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1c99463195a2c0211f507ee2da1baece</guid>
<title>某百度程序员中午面试一个阿里程序员，晚上去阿里面试，面试官竟是中午那个人！</title>
<link>https://toutiao.io/k/19gswwt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d60721a1b9a2af8c4a566498df41ad85</guid>
<title>看我是如何用C#编写一个小于8KB的贪吃蛇游戏的</title>
<link>https://toutiao.io/k/n8fxr18</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;blockquote data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;由于微信排版问&lt;/span&gt;&lt;span&gt;题，在PC端浏览&lt;/span&gt;&lt;span&gt;效果最佳&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;译者注：这是Michal Strehovský大佬的一篇文章，他目前在微软.NET Runtime团队工作，主要是负责.NET NativeAOT功能的开发。我在前几天看到这篇文章，非常喜欢，虽然它的内容稍微有点过时(还是使用的.NET Core 3.0)，不过其中的一些编程技巧和思维方式很受用，特意找到Michal大佬要到了授权，翻译给大家看。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;作者：Michal Strehovský&lt;/p&gt;&lt;p&gt;译者：InCerry&lt;/p&gt;&lt;p&gt;原文链接：https://medium.com/@MStrehovsky/building-a-self-contained-game-in-c-under-8-kilobytes-74c3cf60ea04&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;作为一个在1.44MB软盘和56kbit调制解调器时代长大的人，我一直喜欢小程序。我可以在随身携带的软盘上装下许多小程序。如果一个程序不能放在我的软盘上，我就开始思考为什么-它有大量的图形吗？有音乐吗？这个程序能做很多复杂的事情吗？还是它根本就是&lt;strong&gt;臃肿&lt;/strong&gt;的？&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7497142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibAFIiaib8jric0IbjDxHlTibf6ZYrQXMVvyxLsib5u3B7ibNt5eyuDibwgTlVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;p&gt;图片来自 Brett Jordan Unsplash&lt;/p&gt;&lt;p&gt;现在，磁盘空间变得如此便宜（巨大的闪存盘无处不在），人们放弃了对程序大小的优化。&lt;/p&gt;&lt;p&gt;有一个场景的大小仍然很重要，那就是传输：当在线路上传输一个程序时，每秒只能传递兆字节的数据。一个快速的100MBit连接在最好的情况下每秒只能传输12MB。如果在线路的另一端是一个等待下载完成的人，五秒和一秒之间的差异会对他们的体验产生很大的影响。&lt;/p&gt;&lt;p&gt;此人可能直接（用户通过网络下载程序）或间接（部署Severless服务以响应 Web 请求）暴露在传输时间中。&lt;/p&gt;&lt;p&gt;人们通常认为任何快于0.1秒的东西都是即时的，3.0秒大约是用户的流量保持不间断的极限，而你很难在10秒后让用户保持参与。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;虽然更小一点程序不再是必须的，但它仍然是&lt;strong&gt;更好&lt;/strong&gt;的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这篇文章是作为一个实验而出现的，目的是找出一个有用的自包含运行时的C#可执行文件可以有多小。C#应用程序能否达到用户会认为瞬间就能下载完毕的大小？它是否能使C#被用于现在还没有被使用的场景？&lt;/p&gt;&lt;h2&gt;究竟什么是 “自包含”?&lt;/h2&gt;&lt;p&gt;一个自包含的应用程序是指包括在操作系统的虚构安装上运行所需的一切。&lt;/p&gt;&lt;p&gt;C#编译器属于一组以虚拟机为目标的编译器（Java和Kotlin是该组的另一个知名的语言）：C#编译器的输出是一个可执行文件，需要某种虚拟机（VM）来执行。人们不能只安装一个裸机操作系统，并期望能够在上面运行由C#编译器产生的程序。&lt;/p&gt;&lt;p&gt;至少在Windows上，过去人们可以依靠在整个机器上安装.NET Framework来运行C#编译器的输出。现在，有许多Windows SKU不再携带.NET Framework（物联网、Nano Server、ARM64......）。.NET Framework也不支持C#语言的最新增强功能。它有点像在走下坡路。&lt;/p&gt;&lt;p&gt;为了使C#应用程序自成一体，它需要包括运行时和它使用的所有类库。在我们的计划中，要把很多东西装进只有8KB的预算中！这是很重要的。&lt;/p&gt;&lt;h2&gt;8KB的游戏&lt;/h2&gt;&lt;p&gt;我们要创建一个克隆版的贪吃蛇游戏，下面是完成后的演示:&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1968503937007875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibHA39zV9Xtib98RCV6icwxEkNdFe2NBn2LVbPezDrkZvMRbuBT0OPhdAg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;381&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如果你对游戏机制不感兴趣，请随意跳到有趣的部分，我们在9个步骤中将游戏从&lt;strong&gt;65MB&lt;/strong&gt;缩小到&lt;strong&gt;8KB&lt;/strong&gt;（向下滚动到你看到图形的地方）。&lt;/p&gt;&lt;p&gt;游戏将在文本模式下运行，我们将使用框画字符来画蛇。我相信Vulcan或DirectX会更有趣，但我们会用&lt;code&gt;System.Console&lt;/code&gt;来搞定。&lt;/p&gt;&lt;h2&gt;一个无分配的游戏&lt;/h2&gt;&lt;p&gt;我们将建立一个无分配的游戏 - 我所说的无分配并不是指C#游戏开发者中常见的 &quot;不要在游戏循环中分配&quot;。我的意思是 &quot;在整个代码库中禁止使用引用类型的&lt;code&gt;new&lt;/code&gt;关键字&quot;。其原因将在缩小游戏的最后阶段变得明显。&lt;/p&gt;&lt;p&gt;有了这样的限制，人们可能会想，使用C#到底有没有意义：没有&lt;code&gt;new&lt;/code&gt;关键字，我们就不会使用垃圾收集器，我们就不能抛出异常，等等 - 像C语言一样，也可以工作。&lt;/p&gt;&lt;p&gt;使用C#的一个原因是 &quot;因为我们可以&quot;。另一个原因是可测试性和代码共享 - 虽然游戏整体上是无分配的，但这并不意味着它的一部分不能在没有这种限制的不同项目中重复使用。例如，游戏的部分内容可以包含在xUnit项目中，以获得单元测试覆盖。如果选择C语言来构建游戏，那么即使代码从其他地方被重用，事情也必须受到C语言所能做到的限制。但由于C#提供了高水平和低水平结构的良好组合，我们可以遵循&quot;&lt;strong&gt;默认为高水平，必要时为低水平&lt;/strong&gt;(译者注：也就是说C#语言下限很低，上限很高的意思，99%的情况可以直接编写简单的高抽象的代码，1%的情况可以直接写类似C++低级代码)&quot;的哲学。&lt;/p&gt;&lt;p&gt;为了达到8KB的部署大小，低级别的部分将是必要的。&lt;/p&gt;&lt;h2&gt;游戏结构&lt;/h2&gt;&lt;p&gt;让我们从一个表示帧缓冲器的&lt;code&gt;结构体&lt;/code&gt;开始。帧缓冲器是一个组件，用来保存要绘制到屏幕上的像素（或者在这里是字符）：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;FrameBuffer&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Width &lt;span&gt;=&lt;/span&gt; &lt;span&gt;40&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Height &lt;span&gt;=&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Area &lt;span&gt;=&lt;/span&gt; Width &lt;span&gt;*&lt;/span&gt; Height&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;fixed&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; _chars&lt;span&gt;[&lt;/span&gt;Area&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;SetPixel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; character&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _chars&lt;span&gt;[&lt;/span&gt;y &lt;span&gt;*&lt;/span&gt; Width &lt;span&gt;+&lt;/span&gt; x&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; character&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Clear&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; Area&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            _chars&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27; &#x27;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Render&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;const&lt;/span&gt; &lt;span&gt;ConsoleColor&lt;/span&gt; snakeColor &lt;span&gt;=&lt;/span&gt; ConsoleColor&lt;span&gt;.&lt;/span&gt;Green&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;ForegroundColor &lt;span&gt;=&lt;/span&gt; snakeColor&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;=&lt;/span&gt; Area&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; c &lt;span&gt;=&lt;/span&gt; _chars&lt;span&gt;[&lt;/span&gt;i &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;c &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&#x27;*&#x27;&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;c &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;&#x27;A&#x27;&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; c &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;&#x27;Z&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;c &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;&#x27;a&#x27;&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; c &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;&#x27;z&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;ForegroundColor &lt;span&gt;=&lt;/span&gt; c &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&#x27;*&#x27;&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; ConsoleColor&lt;span&gt;.&lt;/span&gt;Red &lt;span&gt;:&lt;/span&gt; ConsoleColor&lt;span&gt;.&lt;/span&gt;White&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;ForegroundColor &lt;span&gt;=&lt;/span&gt; snakeColor&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;else&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;i &lt;span&gt;%&lt;/span&gt; Width &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; i &lt;span&gt;/&lt;/span&gt; Width &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们提供了一些方法来设置各个像素，清除帧缓冲区，并将帧缓冲区的内容渲染到&lt;code&gt;System.Console&lt;/code&gt;中。渲染步骤对几个字符进行了特殊处理，这样我们就可以得到彩色的输出，而不需要对帧缓冲区的每个像素进行颜色跟踪。&lt;/p&gt;&lt;p&gt;需要指出的一个有趣的事情是&lt;code&gt;fixed _chars[Area]&lt;/code&gt;字段：这是C#的语法，用于声明一个固定数组。固定数组是一个数组，其各个元素是结构的一部分。您可以将其视为一组字段&lt;code&gt;char _char_0, _char_1, _char_2, _char_3,...的快捷方式。_char_Area&lt;/code&gt;，可以作为一个数组访问。这个数组的大小需要是一个编译时的常数，以便整个结构的大小是固定的。&lt;/p&gt;&lt;p&gt;我们不能过分追求固定数组的大小，因为作为结构的一部分，数组需要住在堆栈中，而堆栈往往被限制在很小的字节数内（通常每个线程1MB）。但是，&lt;code&gt;40*20*2字节（width*height*sizeof(char)）&lt;/code&gt;应该没问题。&lt;/p&gt;&lt;p&gt;接下来我们需要的是一个随机数发生器。.NET自带的随机数发生器是一个引用类型（有很好的理由！），我们禁止自己使用&lt;code&gt;new&lt;/code&gt;关键字 - 我们不能使用它。一个简单的&lt;code&gt;结构&lt;/code&gt;就可以了。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; _val&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; seed&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _val &lt;span&gt;=&lt;/span&gt; seed&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; _val &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;1103515245&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; _val &lt;span&gt;+&lt;/span&gt; &lt;span&gt;12345&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; &lt;span&gt;2147483648&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个随机数发生器不是很好，但我们不需要任何复杂的东西。&lt;/p&gt;&lt;p&gt;现在，我们只需要一些东西来包装蛇的逻辑。是时候建立一个 &quot;蛇&quot;结构了。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Snake&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; MaxLength &lt;span&gt;=&lt;/span&gt; &lt;span&gt;30&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; _length&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 身体是一个打包的整数，打包了X坐标、Y坐标和字符。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 为蛇的身体。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 只有原始类型可以使用C#的`固定`，因此这是一个`int`。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;fixed&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; _body&lt;span&gt;[&lt;/span&gt;MaxLength&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; _direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; _oldDirection&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; Course &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;set&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;_oldDirection &lt;span&gt;!=&lt;/span&gt; _direction&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                _oldDirection &lt;span&gt;=&lt;/span&gt; _direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;_direction &lt;span&gt;-&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; _direction &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                _direction &lt;span&gt;=&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;Snake&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; direction&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _body&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;x&lt;span&gt;,&lt;/span&gt; y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;DirectionToChar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;direction&lt;span&gt;,&lt;/span&gt; direction&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Pack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _direction &lt;span&gt;=&lt;/span&gt; direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _oldDirection &lt;span&gt;=&lt;/span&gt; direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _length &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Update&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;Part&lt;/span&gt; oldHead &lt;span&gt;=&lt;/span&gt; Part&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_body&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;Part&lt;/span&gt; newHead &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_direction &lt;span&gt;switch&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Direction&lt;span&gt;.&lt;/span&gt;Left &lt;span&gt;=&amp;gt;&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Width &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Direction&lt;span&gt;.&lt;/span&gt;Right &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;oldHead&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                _ &lt;span&gt;=&amp;gt;&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;X&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_direction &lt;span&gt;switch&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Direction&lt;span&gt;.&lt;/span&gt;Up &lt;span&gt;=&amp;gt;&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Direction&lt;span&gt;.&lt;/span&gt;Down &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;oldHead&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                _ &lt;span&gt;=&amp;gt;&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;DirectionToChar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_direction&lt;span&gt;,&lt;/span&gt; _direction&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        oldHead &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;oldHead&lt;span&gt;.&lt;/span&gt;X&lt;span&gt;,&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;DirectionToChar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_oldDirection&lt;span&gt;,&lt;/span&gt; _direction&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; _length &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Part&lt;/span&gt; current &lt;span&gt;=&lt;/span&gt; Part&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_body&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;current&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;==&lt;/span&gt; newHead&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; current&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;==&lt;/span&gt; newHead&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        _body&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Pack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; _length &lt;span&gt;-&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;--&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            _body&lt;span&gt;[&lt;/span&gt;i &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; _body&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        _body&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; newHead&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Pack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        _oldDirection &lt;span&gt;=&lt;/span&gt; _direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; result&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Draw&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;FrameBuffer&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; _length&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Part&lt;/span&gt; p &lt;span&gt;=&lt;/span&gt; Part&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_body&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetPixel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;p&lt;span&gt;.&lt;/span&gt;X&lt;span&gt;,&lt;/span&gt; p&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;,&lt;/span&gt; p&lt;span&gt;.&lt;/span&gt;Character&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Extend&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;_length &lt;span&gt;&amp;lt;&lt;/span&gt; MaxLength&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            _length &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span&gt;HitTest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; _length&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Part&lt;/span&gt; current &lt;span&gt;=&lt;/span&gt; Part&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_body&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;current&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;==&lt;/span&gt; x &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; current&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;==&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; &lt;span&gt;DirectionToChar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Direction&lt;/span&gt; oldDirection&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; newDirection&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; DirectionChangeToChar &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;│┌?┐┘─┐??└│┘└?┌─&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; DirectionChangeToChar&lt;span&gt;[&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;oldDirection &lt;span&gt;*&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;newDirection&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 帮助结构来打包和解压_body中打包的整数。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; X&lt;span&gt;,&lt;/span&gt; Y&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; Character&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; c&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            X &lt;span&gt;=&lt;/span&gt; x&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            Y &lt;span&gt;=&lt;/span&gt; y&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            Character &lt;span&gt;=&lt;/span&gt; c&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Pack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; X &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;24&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Y &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;16&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Character&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt; &lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; packed&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;packed &lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;24&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;packed &lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;packed&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Up&lt;span&gt;,&lt;/span&gt; Right&lt;span&gt;,&lt;/span&gt; Down&lt;span&gt;,&lt;/span&gt; Left &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;蛇需要跟踪的状态是。代表蛇的身体的每个像素的坐标：&lt;/p&gt;&lt;p&gt;蛇提供了一些方法来&quot;延长&quot;蛇的长度（如果蛇已经长到一定长度则返回false），用蛇的身体来 &quot;测试&quot;一个像素，&quot;绘制&quot;蛇到一个 &quot;FrameBuffer&quot;中，以及&quot;更新&quot;蛇的位置，作为对游戏tick的响应（如果蛇吃了自己则返回false）。还有一个属性用于设置蛇的当前&quot;路线&quot;。&lt;/p&gt;&lt;p&gt;我们使用与帧缓冲区相同的固定数组技巧来保持蛇的无分配。这意味着蛇的最大长度必须是一个编译时常数。&lt;/p&gt;&lt;p&gt;我们需要的最后一件事是游戏循环:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Game&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;Result&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Win&lt;span&gt;,&lt;/span&gt; Loss &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt; _random&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Game&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; randomSeed&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _random &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;randomSeed&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Result&lt;/span&gt; &lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;FrameBuffer&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;Snake&lt;/span&gt; s &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Snake&lt;/span&gt;&lt;span&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;MakeFood&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; foodX&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;&lt;span&gt;long&lt;/span&gt;&lt;/span&gt; gameTime &lt;span&gt;=&lt;/span&gt; Environment&lt;span&gt;.&lt;/span&gt;TickCount64&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Clear&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Draw&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;return&lt;/span&gt; Result&lt;span&gt;.&lt;/span&gt;Loss&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Draw&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;Console&lt;span&gt;.&lt;/span&gt;KeyAvailable&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;ConsoleKeyInfo&lt;/span&gt; ki &lt;span&gt;=&lt;/span&gt; Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ReadKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;intercept&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;switch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;ki&lt;span&gt;.&lt;/span&gt;Key&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;case&lt;/span&gt; ConsoleKey&lt;span&gt;.&lt;/span&gt;UpArrow&lt;span&gt;:&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        s&lt;span&gt;.&lt;/span&gt;Course &lt;span&gt;=&lt;/span&gt; Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;.&lt;/span&gt;Up&lt;span&gt;;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;case&lt;/span&gt; ConsoleKey&lt;span&gt;.&lt;/span&gt;DownArrow&lt;span&gt;:&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        s&lt;span&gt;.&lt;/span&gt;Course &lt;span&gt;=&lt;/span&gt; Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;.&lt;/span&gt;Down&lt;span&gt;;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;case&lt;/span&gt; ConsoleKey&lt;span&gt;.&lt;/span&gt;LeftArrow&lt;span&gt;:&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        s&lt;span&gt;.&lt;/span&gt;Course &lt;span&gt;=&lt;/span&gt; Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;.&lt;/span&gt;Left&lt;span&gt;;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;case&lt;/span&gt; ConsoleKey&lt;span&gt;.&lt;/span&gt;RightArrow&lt;span&gt;:&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        s&lt;span&gt;.&lt;/span&gt;Course &lt;span&gt;=&lt;/span&gt; Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;.&lt;/span&gt;Right&lt;span&gt;;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HitTest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;foodX&lt;span&gt;,&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Extend&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;MakeFood&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; foodX&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;else&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;return&lt;/span&gt; Result&lt;span&gt;.&lt;/span&gt;Win&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetPixel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;foodX&lt;span&gt;,&lt;/span&gt; foodY&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&#x27;*&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Render&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            gameTime &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;long&lt;/span&gt;&lt;/span&gt; delay &lt;span&gt;=&lt;/span&gt; gameTime &lt;span&gt;-&lt;/span&gt; Environment&lt;span&gt;.&lt;/span&gt;TickCount64&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;delay &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Thread&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;delay&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;else&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                gameTime &lt;span&gt;=&lt;/span&gt; Environment&lt;span&gt;.&lt;/span&gt;TickCount64&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;MakeFood&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;in&lt;/span&gt; &lt;span&gt;Snake&lt;/span&gt; snake&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; foodX&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;do&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            foodX &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            foodY &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;snake&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HitTest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;foodX&lt;span&gt;,&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetWindowSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;,&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetBufferSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;,&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;Title &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;See Sharp Snake&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;CursorVisible &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;FrameBuffer&lt;/span&gt; fb &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FrameBuffer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Game&lt;/span&gt; g &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Game&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;Environment&lt;span&gt;.&lt;/span&gt;TickCount64&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Result&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; g&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; message &lt;span&gt;=&lt;/span&gt; result &lt;span&gt;==&lt;/span&gt; Result&lt;span&gt;.&lt;/span&gt;Win &lt;span&gt;?&lt;/span&gt; &lt;span&gt;&quot;You win&quot;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;You lose&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; position &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;FrameBuffer&lt;span&gt;.&lt;/span&gt;Width &lt;span&gt;-&lt;/span&gt; message&lt;span&gt;.&lt;/span&gt;Length&lt;span&gt;)&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; message&lt;span&gt;.&lt;/span&gt;Length&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetPixel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;position &lt;span&gt;+&lt;/span&gt; i&lt;span&gt;,&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height &lt;span&gt;/&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; message&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Render&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ReadKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;intercept&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用随机数发生器生成蛇的随机位置和方向，我们随机地将食物放在游戏表面，确保它不与蛇重叠，然后开始游戏循环。&lt;/p&gt;&lt;p&gt;在游戏循环中，我们要求蛇更新它的位置并检查它是否吃了自己。然后我们画出蛇，检查键盘的输入，用食物对蛇进行测试，并将所有内容渲染到控制台。&lt;/p&gt;&lt;p&gt;这就差不多了。让我们看看我们在尺寸方面的情况。&lt;/p&gt;&lt;h2&gt;.NET Core 3.0 贪吃蛇的大小&lt;/h2&gt;&lt;p&gt;我把游戏放在GitHub repo中，这样你就可以跟着做了。该项目文件将根据传递给&lt;code&gt;publish&lt;/code&gt;的&lt;code&gt;Mode&lt;/code&gt;属性，以不同的配置制作游戏。要用CoreCLR生成默认配置，请运行：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将产生一个单一的EXE文件，其容量高达65MB。产生的EXE包括游戏、.NET运行时和作为.NET标准部分的基础类库。你可能会说 &quot;仍然比Electron好&quot;，但让我们看看我们是否能做得更好。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibG6kqtibBRgiagKia0tyrlZvmysOmmd9nibMxIy5Y0guhwtJmApZ6ibPTJrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;IL Linker&lt;/h2&gt;&lt;p&gt;IL Linker是一个随.NET Core 3.0出厂的工具 - 该工具通过扫描整个程序并删除未被引用的程序集来删除你的应用程序中未使用的代码。要在项目中使用它，需要传递一个&lt;code&gt;PublishTrimmed&lt;/code&gt;属性来发布。像这样：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:PublishTrimmed&lt;span&gt;=&lt;/span&gt;true &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这种设置下，游戏缩减到25MB。这是一个很好的开端，带来了60%的缩减，但离我们10KB的目标还很远。&lt;/p&gt;&lt;p&gt;IL Linker有更积极的设置，但没有公开，它们可以进一步降低这个数字，最终，我们将受到CoreCLR运行时本身coreclr.dll(5.3MB的限制)。我们可能已经在通往8KB游戏的道路上走到了死胡同。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibtibH9TliaFHHs1sYf7tV2EjHYCcDEj1rNsU2hnmvRrKo6DznibibCaqqzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;曲线救国: Mono&lt;/h2&gt;&lt;p&gt;Mono是另一个.NET运行时，对很多人来说是Xamarin的同义词。为了用C#贪吃蛇构建一个可执行文件，我们可以使用Mono自带的mkbundle工具。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;mkbundle SeeSharpSnake.dll &lt;span&gt;--simple&lt;/span&gt; &lt;span&gt;-o&lt;/span&gt; SeeSharpSnake.exe &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将产生一个12.3MB的可执行文件，它依赖于mono-2.0-sgen.dll，它本身有5.9MB - 所以我们看到总共有18.2MB。当试图启动它时，我碰到了 &quot;错误的映射文件：&lt;code&gt;mono_file_map_error&lt;/code&gt;失败&quot;，但是除了这个错误之外，还会有其它问题，mono最终的结果是18.2 MB。&lt;/p&gt;&lt;p&gt;与CoreCLR不同，Mono还依赖于Visual C++运行时再分配库，而该库在默认的Windows安装中是不可用的：为了保持应用程序自成一体的目标，我们需要将该库与应用程序一起携带。这使应用程序的占用空间又增加了一兆字节左右。&lt;/p&gt;&lt;p&gt;我们有可能通过添加IL链接器来缩小体积，但我们会遇到与CoreCLR相同的问题-运行时（mono-2.0-sgen.dll）的大小为5.9MB（加上它上面的C++运行时库的大小），它代表了任何可能的IL级优化可能带给我们的底限。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibutfMSkTjNzm3DjfLxqhvxzJNfvN63FHia05x0C9s6e2OXDJm7GLR3UQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;我们可以把运行时拿掉吗？&lt;/h2&gt;&lt;p&gt;很明显，为了达到接近8KB的目标，我们需要把运行时从应用程序中剥离出来。唯一可以做到这一点的.NET运行时是CoreRT。虽然人们通常称CoreRT为&quot;运行时&quot;，但它更接近于一个&quot;运行时库&quot;。它不是像CoreCLR或Mono那样的虚拟机 - CoreRT的运行时只是一组函数，支持由CoreRT的AOT编译器产生的本地代码。&lt;/p&gt;&lt;p&gt;CoreRT自带的库使CoreRT看起来像其他的.NET运行时：有一个添加GC的库，添加支持反射的库，添加JIT的库，添加解释器的库，等等。但所有这些库都是可选的（包括GC）。&lt;/p&gt;&lt;p&gt;更多关于CoreRT与CoreCLR和Mono的不同之处在这篇文章。当我在阅读D语言的运行时间时，它让我想起了CoreRT的很多内容。这篇文章也是一个有趣的阅读。&lt;/p&gt;&lt;p&gt;让我们看看我们在默认的CoreRT配置下的情况:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这降到了4.7MB。这是迄今为止最小的，但仍然不够好。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibibFyzunSaiaSE6rLkhgcKnRbCuGt3ia69TDm3zm4nj98d1l7RCvTtWrxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;在CoreRT中设置节省级别为中等&lt;/h2&gt;&lt;p&gt;CoreRT-AOT编译器提供了大量影响代码生成的设置。默认情况下，编译器试图以牺牲生成的可执行文件的大小为代价，最大限度地提高生成代码的速度和与其他.NET运行机制的兼容性。&lt;/p&gt;&lt;p&gt;编译器有一个内置的链接器，可以删除未使用的代码。我们在Snake项目中定义的 &quot;CoreRT-Moderate &quot;设置放宽了对删除未使用代码的一个限制，允许更多的删除。我们还要求编译器用程序速度换取一些额外的字节。大多数.NET程序在这种模式下都能正常工作。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT-Moderate &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们现在是4.3 MB。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibd846baveibVPaFWgtELs0NUf6CHI0ib0aJYqAiaR7HN5j94pdLMcEPgicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;在CoreRT中设置节省级别为高&lt;/h2&gt;&lt;p&gt;我把另外几个编译选项归纳为&quot;高&quot;模式。这个模式将删除对许多会影响到应用程序的东西的支持，但Snake（作为低级别的东西）不会有问题。&lt;/p&gt;&lt;p&gt;我们将删除：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;框架实施细节的堆栈跟踪数据&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;框架产生的异常中的异常信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对非英语区的支持&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;EventSource工具化&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT-High &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们已经达到了3.0MB。这是我们开始时的5%，但CoreRT还有一招。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibgiaMMsVOfaz0Ulb8yhtMlBWxqibTpEciboOYDTFZe3hRlyicZp4VyCIEVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;关闭反射&lt;/h2&gt;&lt;p&gt;CoreRT运行时库的很大一部分是用于实现.NET的反射。因为CoreRT是一个提前编译的基于运行时库的.NET实现，它不需要典型的基于虚拟机的运行时（如CoreCLR和Mono）需要的大部分数据结构。这些数据包括诸如类型、方法、签名、基础类型等的名称。CoreRT嵌入这些数据是因为使用.NET反射的程序需要它，但不是因为运行时需要它。我把这些数据称为 &quot;反射开销&quot;，因为它对运行时来说就是这样的。&lt;/p&gt;&lt;p&gt;CoreRT支持一种无反射模式，可以避免这种开销。你可能会觉得很多.NET代码在没有反射的情况下无法工作，你可能是对的，但有很多东西确实可以工作，令人惊讶。Gui.cs、System.IO.Pipelines，甚至是一个基本的WinForms应用程序。贪吃蛇肯定会工作，所以让我们把这个模式打开。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT-ReflectionFree &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们现在是1.2MB。反映反射开销是相当大的!&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4iby6BhAvICy7PtxeQ9n9P8oiavOLHXibiaCvZUe1F3iaEknXEeFu36SwwTMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;来点骚操作&lt;/h2&gt;&lt;p&gt;现在我们已经走到了.NET SDK可能实现的尽头，我们需要来点骚操作。我们现在要做的事情已经开始变得很荒谬了，我不指望其他人能做到这一点。我们要依靠CoreRT编译器和运行时的实现细节。&lt;/p&gt;&lt;p&gt;正如我们前面所看到的，CoreRT是一套运行时库，加上一个超前的编译器。如果我们用一个最小的重新实现来取代运行时库呢？我们已经决定不使用垃圾收集器，这使得这项工作更加可行。&lt;/p&gt;&lt;p&gt;让我们从简单的事情开始：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-synch-l1-2-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; delayMs&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Environment&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-sysinfo-l1-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;&lt;span&gt;long&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetTickCount64&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;long&lt;/span&gt;&lt;/span&gt; TickCount64 &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;GetTickCount64&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里我们重新实现了&lt;code&gt;Thread.Sleep&lt;/code&gt;和&lt;code&gt;Environment.TickCount64&lt;/code&gt;（用于Windows），同时避免了对现有运行时库的所有依赖。&lt;/p&gt;&lt;p&gt;让我们对游戏使用的&lt;code&gt;System.Console&lt;/code&gt;子集做同样的事情：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Console&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            FALSE &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            TRUE &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-processenvironment-l1-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; &lt;span&gt;GetStdHandle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; s_outputHandle &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GetStdHandle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; s_inputHandle &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GetStdHandle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0.dll&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EntryPoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;SetConsoleTitleW&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; Title &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;set&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;fixed&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; c &lt;span&gt;=&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;SetConsoleTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;CONSOLE_CURSOR_INFO&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; Size&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; Visible&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleCursorInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; CONSOLE_CURSOR_INFO&lt;span&gt;*&lt;/span&gt; cursorInfo&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; CursorVisible &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;set&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;CONSOLE_CURSOR_INFO&lt;/span&gt; cursorInfo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;CONSOLE_CURSOR_INFO&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    Size &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    Visible &lt;span&gt;=&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;TRUE &lt;span&gt;:&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;FALSE &lt;/span&gt;&lt;span&gt;                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;SetConsoleCursorInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;cursorInfo&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleTextAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;ushort&lt;/span&gt;&lt;/span&gt; attribute&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;ConsoleColor&lt;/span&gt; ForegroundColor &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;set&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;SetConsoleTextAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;ushort&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;KEY_EVENT_RECORD&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; KeyDown&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; RepeatCount&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; VirtualKeyCode&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; VirtualScanCode&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; UChar&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; ControlKeyState&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;INPUT_RECORD&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; EventType&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;KEY_EVENT_RECORD&lt;/span&gt; KeyEvent&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l1-2-0&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EntryPoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;PeekConsoleInputW&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; CharSet &lt;span&gt;=&lt;/span&gt; CharSet&lt;span&gt;.&lt;/span&gt;Unicode&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;PeekConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; hConsoleInput&lt;span&gt;,&lt;/span&gt; INPUT_RECORD&lt;span&gt;*&lt;/span&gt; lpBuffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; nLength&lt;span&gt;,&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; lpNumberOfEventsRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; KeyAvailable &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;get&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; nRead&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;INPUT_RECORD&lt;/span&gt; buffer&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;PeekConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_inputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;nRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;nRead &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;buffer&lt;span&gt;.&lt;/span&gt;EventType &lt;span&gt;==&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; buffer&lt;span&gt;.&lt;/span&gt;KeyEvent&lt;span&gt;.&lt;/span&gt;KeyDown &lt;span&gt;!=&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;FALSE&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;ReadConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_inputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;nRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l1-2-0&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EntryPoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;ReadConsoleInputW&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; CharSet &lt;span&gt;=&lt;/span&gt; CharSet&lt;span&gt;.&lt;/span&gt;Unicode&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;ReadConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; hConsoleInput&lt;span&gt;,&lt;/span&gt; INPUT_RECORD&lt;span&gt;*&lt;/span&gt; lpBuffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; nLength&lt;span&gt;,&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; lpNumberOfEventsRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;ConsoleKeyInfo&lt;/span&gt; &lt;span&gt;ReadKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; intercept&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; nRead&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;INPUT_RECORD&lt;/span&gt; buffer&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;do&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;ReadConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_inputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;nRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;buffer&lt;span&gt;.&lt;/span&gt;EventType &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; buffer&lt;span&gt;.&lt;/span&gt;KeyEvent&lt;span&gt;.&lt;/span&gt;KeyDown &lt;span&gt;==&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;FALSE&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ConsoleKeyInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;buffer&lt;span&gt;.&lt;/span&gt;KeyEvent&lt;span&gt;.&lt;/span&gt;UChar&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;ConsoleKey&lt;span&gt;)&lt;/span&gt;buffer&lt;span&gt;.&lt;/span&gt;KeyEvent&lt;span&gt;.&lt;/span&gt;VirtualKeyCode&lt;span&gt;,&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;SMALL_RECT&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; Left&lt;span&gt;,&lt;/span&gt; Top&lt;span&gt;,&lt;/span&gt; Right&lt;span&gt;,&lt;/span&gt; Bottom&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleWindowInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; absolute&lt;span&gt;,&lt;/span&gt; SMALL_RECT&lt;span&gt;*&lt;/span&gt; consoleWindow&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;SetWindowSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;SMALL_RECT&lt;/span&gt; rect &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;SMALL_RECT&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Left &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Top &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Right &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;x &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Bottom &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;y &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;SetConsoleWindowInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;TRUE&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;rect&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; X&lt;span&gt;,&lt;/span&gt; Y&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleScreenBufferSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; size&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;SetBufferSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;SetConsoleScreenBufferSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; X &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;x&lt;span&gt;,&lt;/span&gt; Y &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;y &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; position&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;SetCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;SetConsoleCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; X &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;x&lt;span&gt;,&lt;/span&gt; Y &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;y &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l1-2-0&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EntryPoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;WriteConsoleW&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;WriteConsole&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; numChars&lt;span&gt;,&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; charsWritten&lt;span&gt;,&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; reserved&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; c&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; dummy&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;WriteConsole&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;c&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;dummy&lt;span&gt;,&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们用这个替换框架重建游戏：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT-ReflectionFree /p:IncludePal&lt;span&gt;=&lt;/span&gt;true &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不出所料，这并没有为我们节省多少。我们要替换的API已经是相对轻量级的了，重写它们只获得了几千字节，不值得一提。但这是通往我们旅程中最后一步的重要垫脚石。&lt;/p&gt;&lt;h2&gt;替换所有的运行时库&lt;/h2&gt;&lt;p&gt;在Snake游戏中剩下的1.2MB的代码和数据是用来支持我们看不到的东西，但却在那里 - 在我们需要它们的时候准备好了。有垃圾收集器，对异常处理的支持，当发生未处理的异常时格式化和打印堆栈痕迹到控制台的代码，以及许多其他隐藏在底层的东西。&lt;/p&gt;&lt;p&gt;编译器可以检测到这些都不需要，并避免生成它们，但我们要做的事情非常奇怪，不值得添加编译器功能来支持它。避免这种情况的方法是简单地提供一个替代的运行时库。&lt;/p&gt;&lt;p&gt;让我们从重新定义一个最小版本的基本类型开始：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 对象的布局是与编译器的契约.&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; m_pEEType&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 原始类型的布局是特例，因为它将是递归的。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 这些真的不需要任何字段来工作。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Char&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;SByte&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Byte&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Int16&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;UInt16&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Int32&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;UInt32&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Int64&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;UInt64&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;UIntPtr&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Single&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Double&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ValueType&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Enum&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ValueType&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Nullable&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 字符串类型的布局是与编译器的契约。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Length&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; _firstChar&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;span&gt;.&lt;/span&gt;Intrinsic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;get&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;return&lt;/span&gt; Internal&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;span&gt;.&lt;/span&gt;Unsafe&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; _firstChar&lt;span&gt;,&lt;/span&gt; index&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Delegate&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MulticastDelegate&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Delegate&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;RuntimeTypeHandle&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;RuntimeMethodHandle&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;RuntimeFieldHandle&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Attribute&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;IntrinsicAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;RuntimeHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; OffsetToStringData &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;CharSet&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        None &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Ansi &lt;span&gt;=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Unicode &lt;span&gt;=&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Auto &lt;span&gt;=&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;DllImportAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; EntryPoint&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CharSet&lt;/span&gt; CharSet&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;DllImportAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; dllName&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;LayoutKind&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Sequential &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Explicit &lt;span&gt;=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Auto &lt;span&gt;=&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;StructLayoutAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;StructLayoutAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;LayoutKind&lt;/span&gt; layoutKind&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Internal&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Unsafe&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 这个方法的主体是由编译器生成的。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 它将做Unsafe.Add应该做的事情。只是不可能用C#来表达它。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;span&gt;.&lt;/span&gt;Intrinsic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; source&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; elementOffset&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这一点上，让我们放弃项目文件和dotnet CLI，直接启动各个工具。我们首先启动C#编译器（CSC）。我建议从 &quot;x64 Native Tools Command Prompt for VS 2019 &quot;启动这些命令 - 如果你安装了Visual Studio，它就在你的开始菜单中。正确的工具版本在该窗口的PATH上。&lt;/p&gt;&lt;p&gt;&lt;code&gt;/noconfig&lt;/code&gt;、&lt;code&gt;/nostdlib&lt;/code&gt;和&lt;code&gt;/runtimemetadataversion&lt;/code&gt;是编译定义&lt;code&gt;System.Object&lt;/code&gt;的东西需要的神奇开关。我选择了&lt;code&gt;.lexe&lt;/code&gt;文件扩展名而不是&lt;code&gt;.exe&lt;/code&gt;，因为&lt;code&gt;.exe&lt;/code&gt;将被用于成品。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;csc.exe /debug /O /noconfig /nostdlib /runtimemetadataversion:v4.0.30319 MiniBCL.cs Game&lt;span&gt;\&lt;/span&gt;FrameBuffer.cs Game&lt;span&gt;\&lt;/span&gt;Random.cs Game&lt;span&gt;\&lt;/span&gt;Game.cs Game&lt;span&gt;\&lt;/span&gt;Snake.cs Pal&lt;span&gt;\&lt;/span&gt;Thread.Windows.cs Pal&lt;span&gt;\&lt;/span&gt;Environment.Windows.cs Pal&lt;span&gt;\&lt;/span&gt;Console.Windows.cs /out:zerosnake.ilexe /langversion:latest /unsafe &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将成功地用C#编译器编译出游戏的IL字节码版本。我们仍然需要某种运行时来执行它。&lt;/p&gt;&lt;p&gt;让我们尝试将其送入CoreRT提前编译器，从IL中生成本地代码。如果你按照上面的步骤，你会在你的NuGet软件包缓存中找到ilc.exe，即CoreRT提前编译器（类似于&lt;code&gt;%USERPROFILE%\.nuget\packages\runtime.win-x64.microsoft.dotnet.ilcompiler\1.0.0-alpha-27402-01\Tools&lt;/code&gt;的地方）。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;ilc.exe zerosnake.ilexe &lt;span&gt;-o&lt;/span&gt; zerosnake.obj &lt;span&gt;--systemmodule&lt;/span&gt; zerosnake &lt;span&gt;--Os&lt;/span&gt; &lt;span&gt;-g&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将会以 &quot;预期类型&#x27;Internal.Runtime.CompilerHelpers.StartupCodeHelpers&#x27;未在模块&#x27;zerosnake&#x27;中找到&quot;的异常而崩溃。事实证明，除了一个托管的开发者所期望的明显的最低限度外，还有一个CoreRT编译器编译输入的最低限度。&lt;/p&gt;&lt;p&gt;让我们跳到后面去，添加需要的东西：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Internal&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 编译器寻找的一个类，它有帮助器来初始化&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 进程。编译器可以优雅地处理不存在的帮助器。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 但是类本身不存在则无法处理。让我们添加一个空类。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;class&lt;/span&gt; &lt;span&gt;StartupCodeHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 一种特殊的类型，编译器用它来实现通用接口&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// (例如IEnumerable&amp;lt;T&amp;gt;)的数组。我们的数组将不会实现任何通用接口。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Array&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 自定义属性，标志着一个类具有特殊的&quot;调用&quot;。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 编译器有特殊的逻辑处理类型，有这个属性。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;McgIntrinsicsAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 一个负责运行静态构造函数的类。编译器将调用这个&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;//代码以确保静态构造函数的运行，并且只运行一次。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;span&gt;.&lt;/span&gt;McgIntrinsics&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ClassConstructorRunner&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; &lt;span&gt;CheckStaticClassConstructionReturnNonGCStaticBase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;StaticClassConstructionContext&lt;/span&gt; context&lt;span&gt;,&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; nonGcStaticBase&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;CheckStaticClassConstruction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; context&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;return&lt;/span&gt; nonGcStaticBase&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;CheckStaticClassConstruction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;StaticClassConstructionContext&lt;/span&gt; context&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 非常简化的类构造函数运行器。在现实世界中，类构造器运行器&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 需要能够处理潜在的多个线程竞相初始化的问题。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 一个单一的类，并需要能够处理潜在的死锁&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 类构造函数之间的潜在死锁。&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 如果该类已经被初始化，我们就完成了。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;initialized &lt;span&gt;==&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 将该类标记为初始化。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            context&lt;span&gt;.&lt;/span&gt;initialized &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 运行类的构造函数。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;Call&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;cctorMethodAddress&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 这是一个特殊的编译器内在因素，调用pfn所指向的方法。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 编译器会为此生成代码，我们只需将其标记为 &quot;extern&quot;。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 一旦C#得到适当的函数指针支持（计划在C#9中），就不需要这个了。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;span&gt;.&lt;/span&gt;Intrinsic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span&gt;&lt;span&gt;Call&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; pfn&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 这个数据结构是与编译器的契约。它持有一个静态&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 构造函数的地址，以及一个指定该构造函数是否已经执行的标志。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;span&gt;.&lt;/span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;span&gt;.&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;StaticClassConstructionContext&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 指向静态类构造方法代码的指针。这是由&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 绑定器/运行时。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; cctorMethodAddress&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 该类的初始化状态。这被初始化为0&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 时，运行时都会调用类库的CheckStaticClassConstruction，并使用这个上下文。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;//结构，除非初始化==1。这个检查是特定的，以允许类库为每一个Cctor存储更多的&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 比二进制状态更多，如果它想这样做的话。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; initialized&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们用这些新添加的代码重建IL字节码，并重新运行ILC。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;csc.exe /debug /O /noconfig /nostdlib /runtimemetadataversion:v4.0.30319 MiniRuntime.cs MiniBCL.cs Game&lt;span&gt;\&lt;/span&gt;FrameBuffer.cs Game&lt;span&gt;\&lt;/span&gt;Random.cs Game&lt;span&gt;\&lt;/span&gt;Game.cs Game&lt;span&gt;\&lt;/span&gt;Snake.cs Pal&lt;span&gt;\&lt;/span&gt;Thread.Windows.cs Pal&lt;span&gt;\&lt;/span&gt;Environment.Windows.cs Pal&lt;span&gt;\&lt;/span&gt;Console.Windows.cs /out:zerosnake.ilexe /langversion:latest /unsafeilc.exe zerosnake.ilexe &lt;span&gt;-o&lt;/span&gt; zerosnake.obj &lt;span&gt;--systemmodule&lt;/span&gt; zerosnake &lt;span&gt;--Os&lt;/span&gt; &lt;span&gt;-g&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们有了zerosnake.obj - 一个标准的对象文件，与其他本地编译器（如C或C++）产生的对象文件没有区别。最后一步是连接它。我们将使用link.exe工具，它应该在我们的 &quot;x64本地工具命令提示符 &quot;的PATH中（你可能需要在Visual Studio中安装C/C++开发工具）。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;link.exe /debug:full /subsystem:console zerosnake.obj /entry:__managed__Main &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;__managed__Main&lt;/code&gt;符号名称是与编译器的契约 - 它是ILC创建的程序的托管入口的名称。&lt;/p&gt;&lt;p&gt;但它并没有发挥作用:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpPInvoke &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol SetConsoleTextAttribute &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol WriteConsoleW &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol GetStdHandle &lt;/span&gt;&lt;span&gt;&lt;span&gt;..&lt;/span&gt;. &lt;/span&gt;&lt;span&gt;fatal error LNK1120: &lt;span&gt;17&lt;/span&gt; unresolved externals &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中一些符号看起来很熟悉 - 链接器不知道在哪里寻找我们调用的Windows API。让我们来添加这些的导入库:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;link.exe /debug:full /subsystem:console zerosnake.obj /entry:__managed__Main kernel32.lib ucrt.lib &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这看起来更好 - 只有4个未解决的符号:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpPInvoke &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpPInvokeReturn &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpReversePInvoke2 &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpReversePInvokeReturn2 &lt;/span&gt;&lt;span&gt;fatal error LNK1120: &lt;span&gt;4&lt;/span&gt; unresolved externals &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其余缺失的符号是编译器希望在运行时库中找到的辅助工具。它们的缺失只有在链接时才会被发现，因为这些辅助工具通常是在汇编中实现的，而且编译器只用它们的符号名称来指代它们（而不是我们上面提供的其他编译器需要的类型和方法）。&lt;/p&gt;&lt;p&gt;当本机代码调用到托管代码，以及托管代码调用到本机代码时，这些帮助程序会建立和拆除堆栈框架。这对于GC的运行是必要的。由于我们没有GC，让我们用一段C#和另一个编译器能理解的神奇属性来存根它们。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 编译器理解的自定义属性，指示它&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 在给定的符号名称下导出方法。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;RuntimeExportAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;RuntimeExportAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; entry&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Internal&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;class&lt;/span&gt; &lt;span&gt;StartupCodeHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 这些方法的包含类型并不重要。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 让我们把它们放在StarupCodeHelpers中。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;RuntimeExport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;RhpReversePInvoke2&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;RhpReversePInvoke2&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; frame&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;RuntimeExport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;RhpReversePInvokeReturn2&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;RhpReversePInvokeReturn2&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; frame&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;RuntimeExport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;RhpPInvoke&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;RhpPinvoke&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; frame&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;RuntimeExport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;RhpPInvokeReturn&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;RhpPinvokeReturn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; frame&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在用这些修改重建C#源代码并重新运行ILC后，链接终于会成功。&lt;/p&gt;&lt;p&gt;我们现在已经只有27KB，而且游戏还能正常运行!&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibVZgpEBAvDs6Tu7ZV3dMtL0TRUKRo4ObRdrmMgFM40lh5o0vf2Q7Oicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;扰乱链接器&lt;/h2&gt;&lt;p&gt;剩余的几千字节可以通过使用本地开发者用来缩小其本地应用程序的技巧来削减。&lt;/p&gt;&lt;p&gt;我们要做的是&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;禁用增量链接&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;剥离重定位信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;合并可执行文件中的类似部分&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将可执行文件中的内部对齐设置为一个小值&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;link&lt;span&gt;.&lt;/span&gt;exe &lt;span&gt;/&lt;/span&gt;debug&lt;span&gt;:&lt;/span&gt;full &lt;span&gt;/&lt;/span&gt;subsystem&lt;span&gt;:&lt;/span&gt;console zerosnake&lt;span&gt;.&lt;/span&gt;obj &lt;span&gt;/&lt;/span&gt;entry&lt;span&gt;:&lt;/span&gt;__managed__Main kernel32&lt;span&gt;.&lt;/span&gt;lib ucrt&lt;span&gt;.&lt;/span&gt;lib &lt;span&gt;/&lt;/span&gt;merge&lt;span&gt;:&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;modules&lt;span&gt;=&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;rdata &lt;span&gt;/&lt;/span&gt;merge&lt;span&gt;:&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;pdata&lt;span&gt;=&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;rdata &lt;span&gt;/&lt;/span&gt;incremental&lt;span&gt;:&lt;/span&gt;no &lt;span&gt;/&lt;/span&gt;DYNAMICBASE&lt;span&gt;:&lt;/span&gt;NO &lt;span&gt;/&lt;/span&gt;filealign&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;align&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成功! 最后只有8176字节，不到8KB !&lt;/p&gt;&lt;p&gt;游戏仍然可以运行，有趣的是，它仍然是完全可调试的 - 请在Visual Studio中打开EXE（文件-&amp;gt;打开解决方案），打开作为游戏一部分的一个C#文件，在其中设置一个断点，点击F5启动EXE，并看到断点被击中。你可以在ILC中禁用优化，使可执行文件更容易被调试 - 只要放弃&lt;code&gt;--Os&lt;/code&gt;参数。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibyrdb9n7A3Lll4zT3zKzfDwpicz97bW5TH6LpZFmtHiauaN0cX33jPxHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;我们可以把它编译得更小吗？&lt;/h2&gt;&lt;p&gt;可执行文件仍然携带着一些并非必要的数据 - ILC编译器只是没有提供命令行选项来禁止其生成。&lt;/p&gt;&lt;p&gt;其中一个被生成但我们不需要的数据结构是各个方法的GC信息。CoreRT有一个精确的垃圾收集器，它要求每个方法描述GC堆的引用在方法主体的每个指令中的位置。由于我们在Snake游戏中没有垃圾收集器，这些数据是不必要的。其他运行时（例如Mono）使用保守的垃圾收集器，不需要这些数据（它只是假设堆栈和CPU寄存器的任何部分都可能是GC引用）- 保守的垃圾收集器以GC性能换取额外的大小节省。CoreRT中使用的精确的垃圾收集器也可以在保守模式下运行，但它还没有被连接起来。这是一个潜在的未来补充，我们可以利用它来使程序编译得更小。&lt;/p&gt;&lt;p&gt;也许有一天，我们可以使我们的游戏的简化版本适合于512字节的启动扇区。在那之前，祝你黑客行动愉快.&lt;/p&gt;&lt;h2&gt;.NET性能优化交流群&lt;/h2&gt;&lt;p&gt;相信大家在开发中经常会遇到一些性能问题，苦于没有有效的工具去发现性能瓶颈，或者是发现瓶颈以后不知道该如何优化。之前一直有读者朋友询问有没有技术交流群，但是由于各种原因一直都没创建，现在很高兴的在这里宣布，我创建了一个专门交流.NET性能优化经验的群组，主题包括但不限于：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;如何找到.NET性能瓶颈，如使用APM、dotnet tools等工具&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;.NET框架底层原理的实现，如垃圾回收器、JIT等等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何编写高性能的.NET代码，哪些地方存在性能陷阱&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;希望能有更多志同道合朋友加入，分享一些工作中遇到的.NET性能问题和宝贵的性能分析优化经验。&lt;strong&gt;目前一群已满，现在开放二群，可以直接扫码进入。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果提示已经达到200人，可以加我微信，我拉你进群: &lt;strong&gt;ls1075&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;微信长按下图即可加群&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4500484966052376&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibRDDf9x0B66JZWpOpPFsRpqH6mKl51ccwiaBHf2PG2LL2pwL1r5Ej4Kg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1031&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;另外也创建了&lt;strong&gt;QQ群&lt;/strong&gt;，群号: 687779078，欢迎大家加入。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.792&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibpo1gbx6sq1cYiaQw85WPwboEDh6QR6DqC01lDPvJhwra39yEFic7bO4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>