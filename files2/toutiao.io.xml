<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bcc1df8172995b2d04d8e3e5f62b74ad</guid>
<title>高并发下如何保证接口的幂等性？</title>
<link>https://toutiao.io/k/mjihi83</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODkzNTQ3Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uL371281oDFEpxenPicr7Kh8c9P0I97yVWw9JfljjPy5gVBLDiaIrWkzAGHGib09Kib4TQtyw8jpLicW3yoyibMY8yMA/0?wx_fmt=png&quot; data-nickname=&quot;苏三说技术&quot; data-alias=&quot;&quot; data-signature=&quot;「苏三说技术」 维护者目前就职于某知名互联网公司，从事开发、架构和部分管理工作。实战经验丰富，对jdk、spring、springboot、springcloud、mybatis等开源框架源码有一定研究，欢迎关注，和我一起交流。&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;前言&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;接口幂等性&lt;/code&gt;问题，对于开发人员来说，是一个跟语言无关的公共问题。本文分享了一些解决这类问题非常实用的办法，绝大部分内容我在项目中实践过的，给有需要的小伙伴一个参考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道你有没有遇到过这些场景：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有时我们在填写某些&lt;code&gt;form表单&lt;/code&gt;时，保存按钮不小心快速点了两次，表中竟然产生了两条重复的数据，只是id不一样。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们在项目中为了解决&lt;code&gt;接口超时&lt;/code&gt;问题，通常会引入了&lt;code&gt;重试机制&lt;/code&gt;。第一次请求接口超时了，请求方没能及时获取返回结果（此时有可能已经成功了），为了避免返回错误的结果（这种情况不可能直接返回失败吧？），于是会对该请求重试几次，这样也会产生重复的数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;mq消费者在读取消息时，有时候会读取到&lt;code&gt;重复消息&lt;/code&gt;（至于什么原因这里先不说，有兴趣的小伙伴，可以找我私聊），如果处理不好，也会产生重复的数据。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没错，这些都是幂等性问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;接口幂等性&lt;/code&gt;是指用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类问题多发于接口的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;insert&lt;/code&gt;操作，这种情况下多次请求，可能会产生重复数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;update&lt;/code&gt;操作，如果只是单纯的更新数据，比如：&lt;code&gt;update user set status=1 where id=1&lt;/code&gt;，是没有问题的。如果还有计算，比如：&lt;code&gt;update user set status=status+1 where id=1&lt;/code&gt;，这种情况下多次请求，可能会导致数据错误。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么我们要如何保证接口幂等性？本文将会告诉你答案。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. insert前先select&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常情况下，在保存数据的接口中，我们为了防止产生重复数据，一般会在&lt;code&gt;insert&lt;/code&gt;前，先根据&lt;code&gt;name&lt;/code&gt;或&lt;code&gt;code&lt;/code&gt;字段&lt;code&gt;select&lt;/code&gt;一下数据。如果该数据已存在，则执行&lt;code&gt;update&lt;/code&gt;操作，如果不存在，才执行  &lt;code&gt;insert&lt;/code&gt;操作。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0972762645914398&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEulLjl08cXVC1y0sFSlxNrFw4QIBGFicltUPsasY7lgUVEK7cVLS1GK3mibMW5Jcy4t1TvNmaBnGew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;514&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方案可能是我们平时在防止产生重复数据时，使用最多的方案。但是该方案不适用于并发场景，在并发场景中，要配合其他方案一起使用，否则同样会产生重复数据。我在这里提一下，是为了避免大家踩坑。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 加悲观锁&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在支付场景中，用户A的账号余额有150元，想转出100元，正常情况下用户A的余额只剩50元。一般情况下，sql是这样的：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;update&lt;/span&gt; user amount = amount-&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; where id=&lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果出现多次相同的请求，可能会导致用户A的余额变成负数。这种情况，用户A来可能要哭了。于此同时，系统开发人员可能也要哭了，因为这是很严重的系统bug。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，可以加悲观锁，将用户A的那行数据锁住，在同一时刻只允许一个请求获得锁，更新数据，其他的请求则等待。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常情况下通过如下sql锁住单行数据：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;update&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9544554455445544&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEulLjl08cXVC1y0sFSlxNrlFMScuviaupFRboxZnOVWkojRVNxya7e2a0BUvnU7cwcAw9jYMLvJXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1010&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;多个请求同时根据id查询用户信息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断余额是否不足100，如果余额不足，则直接返回余额不足。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果余额充足，则通过for update再次查询用户信息，并且尝试获取锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;只有第一个请求能获取到行锁，其余没有获取锁的请求，则等待下一次获取锁的机会。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第一个请求获取到锁之后，判断余额是否不足100，如果余额足够，则进行update操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果余额不足，说明是重复请求，则直接返回成功。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;需要特别注意的是：如果使用的是mysql数据库，存储引擎必须用innodb，因为它才支持事务。此外，这里id字段一定要是主键或者唯一索引，不然会锁住整张表。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;悲观锁需要在同一个事务操作过程中锁住一行数据，如果事务耗时比较长，会造成大量的请求等待，影响接口性能&lt;/span&gt;。&lt;/section&gt;&lt;section&gt;此外，每次请求接口很难保证都有相同的返回值，所以不适合幂等性设计场景，但是在防重场景中是可以的使用的。&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这里顺便说一下，&lt;/span&gt;&lt;code&gt;防重设计&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;幂等设计&lt;/code&gt;&lt;span&gt;，其实是有区别的。&lt;/span&gt;&lt;span&gt;防重设计主要为了避免产生重复数据，对接口返回没有太多要求。&lt;/span&gt;&lt;span&gt;而幂等设计除了避免产生重复数据之外，还要求每次请求都返回一样的结果。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3. 加乐观锁&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然悲观锁有性能问题，为了提升接口性能，我们可以使用乐观锁。需要在表中增加一个&lt;code&gt;timestamp&lt;/code&gt;或者&lt;code&gt;version&lt;/code&gt;字段，这里以&lt;code&gt;version&lt;/code&gt;字段为例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在更新数据之前先查询一下数据：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;,amount,&lt;span class=&quot;code-snippet__keyword&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果数据存在，假设查到的&lt;code&gt;version&lt;/code&gt;等于&lt;code&gt;1&lt;/code&gt;，再使用&lt;code&gt;id&lt;/code&gt;和&lt;code&gt;version&lt;/code&gt;字段作为查询条件更新数据：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;update&lt;/span&gt; user set amount=amount+&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;,version=version+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;where id=&lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt; and version=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更新数据的同时&lt;code&gt;version+1&lt;/code&gt;，然后判断本次&lt;code&gt;update&lt;/code&gt;操作的影响行数，如果大于0，则说明本次更新成功，如果等于0，则说明本次更新没有让数据变更。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于第一次请求&lt;code&gt;version&lt;/code&gt;等于&lt;code&gt;1&lt;/code&gt;是可以成功的，操作成功后&lt;code&gt;version&lt;/code&gt;变成&lt;code&gt;2&lt;/code&gt;了。这时如果并发的请求过来，再执行相同的sql：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__attribute&quot;&gt;update&lt;/span&gt; user set amount=amount+&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;,version=version+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;where id=&lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt; and version=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该&lt;code&gt;update&lt;/code&gt;操作不会真正更新数据，最终sql的执行结果影响行数是&lt;code&gt;0&lt;/code&gt;，因为&lt;code&gt;version&lt;/code&gt;已经变成&lt;code&gt;2&lt;/code&gt;了，&lt;code&gt;where&lt;/code&gt;中的&lt;code&gt;version=1&lt;/code&gt;肯定无法满足条件。但为了保证接口幂等性，接口可以直接返回成功，因为&lt;code&gt;version&lt;/code&gt;值已经修改了，那么前面必定已经成功过一次，后面都是重复的请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程如下：&lt;img data-ratio=&quot;1.5942028985507246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEulLjl08cXVC1y0sFSlxNrVUKwejvF2k3OTVPD2JPAiaV5diaMl16ictoclcWwgcvJsMV8mibVOartVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;552&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先根据id查询用户信息，包含version字段&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据id和version字段值作为where条件的参数，更新用户信息，同时version+1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断操作影响行数，如果影响1行，则说明是一次请求，可以做其他数据操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果影响0行，说明是重复请求，则直接返回成功。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. 加唯一索引&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;绝大数情况下，为了防止重复数据的产生，我们都会在表中加唯一索引，这是一个非常简单，并且有效的方案。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;alter table &lt;span class=&quot;code-snippet__string&quot;&gt;`order`&lt;/span&gt; add UNIQUE KEY &lt;span class=&quot;code-snippet__string&quot;&gt;`un_code`&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;`code`&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加了唯一索引之后，第一次请求数据可以插入成功。但后面的相同请求，插入数据时会报&lt;code&gt;Duplicate entry &#x27;002&#x27; for key &#x27;order.un_code&lt;/code&gt;异常，表示唯一索引有冲突。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽说抛异常对数据来说没有影响，不会造成错误数据。但是为了保证接口幂等性，我们需要对该异常进行捕获，然后返回成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是&lt;code&gt;java&lt;/code&gt;程序需要捕获：&lt;code&gt;DuplicateKeyException&lt;/code&gt;异常，如果使用了&lt;code&gt;spring&lt;/code&gt;框架还需要捕获：&lt;code&gt;MySQLIntegrityConstraintViolationException&lt;/code&gt;异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.47766323024055&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEulLjl08cXVC1y0sFSlxNrs24WBMr0ktqAewryz7neZsASO9B8Qseqb8ict8CyLyia8lzv2YlY5LQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;582&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户通过浏览器发起请求，服务端收集数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将该数据插入mysql&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断是否执行成功，如果成功，则操作其他数据（可能还有其他的业务逻辑）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果执行失败，捕获唯一索引冲突异常，直接返回成功。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. 建防重表&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候表中并非所有的场景都不允许产生重复的数据，只有某些特定场景才不允许。这时候，直接在表中加唯一索引，显然是不太合适的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这种情况，我们可以通过&lt;code&gt;建防重表&lt;/code&gt;来解决问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该表可以只包含两个字段：&lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;唯一索引&lt;/code&gt;，唯一索引可以是多个字段比如：name、code等组合起来的唯一标识，例如：susan_0001。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程图如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.198952879581152&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEulLjl08cXVC1y0sFSlxNrbAGE1PLlnV6ibnZcTeNeyic7bv6jewYbu1Tfo7KO99iciaZcbf5icgSPovA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;764&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户通过浏览器发起请求，服务端收集数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将该数据插入mysql防重表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断是否执行成功，如果成功，则做mysql其他的数据操作（可能还有其他的业务逻辑）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果执行失败，捕获唯一索引冲突异常，直接返回成功。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;需要特别注意的是：防重表和业务表必须在同一个数据库中，并且操作要在同一个事务中。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6. 根据状态机&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多时候业务表是有状态的，比如订单表中有：1-下单、2-已支付、3-完成、4-撤销等状态。如果这些状态的值是有规律的，按照业务节点正好是从小到大，我们就能通过它来保证接口的幂等性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如id=123的订单状态是&lt;code&gt;已支付&lt;/code&gt;，现在要变成&lt;code&gt;完成&lt;/code&gt;状态。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`order`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;status&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;status&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一次请求时，该订单的状态是&lt;code&gt;已支付&lt;/code&gt;，值是&lt;code&gt;2&lt;/code&gt;，所以该&lt;code&gt;update&lt;/code&gt;语句可以正常更新数据，sql执行结果的影响行数是&lt;code&gt;1&lt;/code&gt;，订单状态变成了&lt;code&gt;3&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面有相同的请求过来，再执行相同的sql时，由于订单状态变成了&lt;code&gt;3&lt;/code&gt;，再用&lt;code&gt;status=2&lt;/code&gt;作为条件，无法查询出需要更新的数据，所以最终sql执行结果的影响行数是&lt;code&gt;0&lt;/code&gt;，即不会真正的更新数据。但为了保证接口幂等性，影响行数是&lt;code&gt;0&lt;/code&gt;时，接口也可以直接返回成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程图如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5646551724137931&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEulLjl08cXVC1y0sFSlxNrWHME47uFVibJDCibIPILsuFib5nq3batoka8m58tN42JdX4HgKSrKiaF9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;464&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户通过浏览器发起请求，服务端收集数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据id和当前状态作为条件，更新成下一个状态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断操作影响行数，如果影响了1行，说明当前操作成功，可以进行其他数据操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果影响了0行，说明是重复请求，直接返回成功。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;主要特别注意的是，该方案仅限于要更新的&lt;code&gt;表有状态字段&lt;/code&gt;，并且刚好要更新&lt;code&gt;状态字段&lt;/code&gt;的这种特殊情况，并非所有场景都适用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7. 加分布式锁&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实前面介绍过的&lt;code&gt;加唯一索引&lt;/code&gt;或者&lt;code&gt;加防重表&lt;/code&gt;，本质是使用了&lt;code&gt;数据库&lt;/code&gt;的&lt;code&gt;分布式锁&lt;/code&gt;，也属于分布式锁的一种。但由于&lt;code&gt;数据库分布式锁&lt;/code&gt;的性能不太好，我们可以改用：&lt;code&gt;redis&lt;/code&gt;或&lt;code&gt;zookeeper&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鉴于现在很多公司分布式配置中心改用&lt;code&gt;apollo&lt;/code&gt;或&lt;code&gt;nacos&lt;/code&gt;，已经很少用&lt;code&gt;zookeeper&lt;/code&gt;了，我们以&lt;code&gt;redis&lt;/code&gt;为例介绍分布式锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前主要有三种方式实现redis的分布式锁：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;setNx命令&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;set命令&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redission框架&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每种方案各有利弊，具体实现细节我就不说了，有兴趣的朋友可以加我微信找我私聊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程图如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.2676470588235293&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEulLjl08cXVC1y0sFSlxNrkm3ibIJnLzKpwSdxcSPGh8lfuCCGLO2QVnYp2msIvLgoLuHsyOjHdWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;680&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户通过浏览器发起请求，服务端会收集数据，并且生成订单号code作为唯一业务字段。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用redis的set命令，将该订单code设置到redis中，同时设置超时时间。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断是否设置成功，如果设置成功，说明是第一次请求，则进行数据操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果设置失败，说明是重复请求，则直接返回成功。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;需要特别注意的是：分布式锁一定要设置一个合理的过期时间，如果设置过短，无法有效的防止重复请求。如果设置过长，可能会浪费&lt;code&gt;redis&lt;/code&gt;的存储空间，需要根据实际业务情况而定。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8. 获取token&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了上述方案之外，还有最后一种使用&lt;code&gt;token&lt;/code&gt;的方案。该方案跟之前的所有方案都有点不一样，需要两次请求才能完成一次业务操作。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一次请求获取&lt;code&gt;token&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二次请求带着这个&lt;code&gt;token&lt;/code&gt;，完成业务操作。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体流程图如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，先获取token。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>03419fdfa92fe506caa5e87581e0d039</guid>
<title>Elasticsearch Head 插件使用小结</title>
<link>https://toutiao.io/k/itpgo7c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b07b32d5593fc3efdc59846cd08db769</guid>
<title>阿里二面：用过 GC 日志可视化工具进行 JVM 调优吗？</title>
<link>https://toutiao.io/k/7qyo540</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家好，我是不才陈某~&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上周&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3MDAzNDg1MA==&amp;amp;mid=2247518914&amp;amp;idx=1&amp;amp;sn=b3fdfd78c32b15077ac67535ccc10a00&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;知识星球&lt;/a&gt;的小伙伴面了阿里，在二面中被问到GC日志分析，感觉回答的不是很好，过来找我复盘，大致听了他的回答，虽然回答出了部分，但是没抓到重点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GC日志分析算是JVM调优中比较难的部分，今天这篇文章就来聊聊如何利用JDK现有的命令并且借助可视化工具如何去分析GC日志。&lt;/p&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;JVM实践调优主要步骤&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认的策略是最普用，但不是最佳的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一步&lt;/span&gt;：监控分析GC日志&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二步&lt;/span&gt;：判断JVM问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果各项参数设置合理，系统没有超时日志出现，GC频率不高，GC耗时不高，那么没有必要进行GC优化;如果GC时间超过1-3秒，或者频繁GC，则必须优化。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第三步&lt;/span&gt;：确定调优目标&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第四步&lt;/span&gt;：调整参数&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;调优一般是从满足程序的内存使用需求开始，之后是时间延迟要求，最后才是吞吐量要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第五步&lt;/span&gt;：对比调优前后差距&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第六步&lt;/span&gt;：重复：1 、 2 、 3 、 4 、 5 步骤&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第七步&lt;/span&gt;：应用JVM到应用服务器：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上，就是我们进行jvm调优得一些步骤了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们就从第一步开始喽！！！^_^&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分析GC日志&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;初始参数设置&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;机器环境：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;指标&lt;/th&gt;&lt;th&gt;参数&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;机器&lt;/td&gt;&lt;td&gt;CPU 12核，内存16GB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;集群规模&lt;/td&gt;&lt;td&gt;单机&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;seqb_web版本&lt;/td&gt;&lt;td&gt;1.0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;数据库&lt;/td&gt;&lt;td&gt;4核 16G&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Jvm调优典型参数设置;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;-Xms堆内存的最小值：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;默认情况下，当堆中可用内存小于40%时，堆内存会开始增加，一直增加到-Xmx的大小。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;-Xmx堆内存的最大值：&lt;/span&gt; 默认值是总内存/64（且小于1G）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;默认情况下，当堆中可用内存大于70%时，堆内存会开始减少，一直减小到-Xms的大小；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;-Xmn新生代内存的最大值：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;包括Eden区和两个Survivor区的总和&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置写法如：-Xmn1024k，-Xmn1024m，-Xmn1g&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;7&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;-Xss每个线程的栈内存：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;默认1M，一般来说是不需要改。线程栈越小意味着可以创建的线程数越多&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个堆的大小 = 年轻代大小 + 年老代大小，堆的大小不包含元空间大小，如果增大了年轻代，年老代相应就会减小，官方默认的配置为年老代大小/年轻代大小=2/1左右；关注公众号：码猿技术专栏，回复关键词 1111 获取阿里内部java性能调优手册&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议在开发测试环境可以用Xms和Xmx分别设置最小值最大值，但是在线上生产环境，&lt;span&gt;Xms和Xmx设置的值必须一样，防止抖动；&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这里比较重要喔，一般我们都是将Xms和Xmx的值设置为一样的！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9863945578231292&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYEeibg8RxVOF7GkJdibZmJdoxhfkvozkOCpBR7761PFXu6iaENmVibwglHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;147&quot;/&gt;&lt;figcaption&gt;比较重要喔&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;JVM调优设置合大小堆内存空间，既不能太大，也不能太小。那么应该设置为多少呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认的配置是否存在性能瓶颈。&lt;span&gt;关注公众号：&lt;/span&gt;&lt;span&gt;码猿技术专栏，回复关键词 1111 获取阿里内部java性能调优手册；&lt;/span&gt;如果想要确定JVM性能问题瓶颈，需要进一步分析&lt;span&gt;GC日志&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;-XX:+PrintGCDetails&lt;/span&gt; 开启GC日志创建更详细的GC日志 ，默认情况下，GC日志是关闭的&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;-XX:+PrintGCTimeStamps，-XX:+PrintGCDateStamps&lt;/span&gt; 开启GC时间提示&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;开启时间便于我们更精确地判断几次GC操作之间的时两个参数的区别&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;时间戳是相对于 0 （依据JVM启动的时间）的值，而日期戳（date stamp）是实际的日期字符串&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;由于日期戳需要进行格式化，所以它的效率可能会受轻微的影响，不过这种操作并不频繁，它造成的影响也很难被我们感知。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;-XX:+PrintHeapAtGC&lt;/span&gt; 打印堆的GC日志&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;-Xloggc:./logs/gc.log&lt;/span&gt; 指定GC日志路径&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里，我们是在window下面进行测试，idea配置如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5047862156987875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYU32edOMYwAYuvaaCe6vkw8SZCWIM8mVGPdprj2rRQgk0C4V1IXLu9g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1567&quot;/&gt;&lt;figcaption&gt;idea配置&lt;/figcaption&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:E:/logs/gc-default.log&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就会在e盘下logs文件夹下面，生成&lt;code&gt;gc-default.log&lt;/code&gt;日志&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7110481586402266&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCY8Yic3Zsa6iavYPZj5LYJSQrKfegBI3bHkJWcu5fc8b1QGCKKUYc1zUDQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1059&quot;/&gt;&lt;figcaption&gt;gc-default.log&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GC日志解读&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Young GC 日志含义&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;2022&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;T13:&lt;span&gt;45&lt;/span&gt;:&lt;span&gt;23.336&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt;: &lt;span&gt;4.866&lt;/span&gt;: [GC (Metadata GC Threshold) [PSYoungGen: &lt;span&gt;136353&lt;/span&gt;K-&amp;gt;&lt;span&gt;20975&lt;/span&gt;K(&lt;span&gt;405504&lt;/span&gt;K)] &lt;span&gt;160049&lt;/span&gt;K-&amp;gt;&lt;span&gt;48437&lt;/span&gt;K(&lt;span&gt;720384&lt;/span&gt;K), &lt;span&gt;0.0092260&lt;/span&gt; secs] [Times: user=&lt;span&gt;0.00&lt;/span&gt; sys=&lt;span&gt;0.02&lt;/span&gt;, real=&lt;span&gt;0.02&lt;/span&gt; secs] &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的内容，我们一个一个解析：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;2022&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;T13:&lt;span&gt;45&lt;/span&gt;:&lt;span&gt;23.336&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt;: 本次GC发生时间&lt;br/&gt;&lt;span&gt;4.866&lt;/span&gt;: 举例启动应用的时间&lt;br/&gt;[GC【表示GC的类型，youngGC】 (Metadata GC Threshold) 元空间超阈值&lt;br/&gt;[PSYoungGen: &lt;span&gt;136353&lt;/span&gt;K-&amp;gt;&lt;span&gt;20975&lt;/span&gt;K(&lt;span&gt;405504&lt;/span&gt;K年轻代总空间)] &lt;span&gt;160049&lt;/span&gt;K-&amp;gt;&lt;span&gt;48437&lt;/span&gt;K(&lt;span&gt;720384&lt;/span&gt;K)整堆), &lt;span&gt;0.0092260&lt;/span&gt; secs本次垃圾回收耗时]&lt;br/&gt;[Times: user=&lt;span&gt;0.00&lt;/span&gt;本次GC消耗CPU的时间 sys=&lt;span&gt;0.02&lt;/span&gt;系统暂停时间, real=&lt;span&gt;0.02&lt;/span&gt; secs实际应用暂停时间]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这里的解析，应该很详细了吧，还有谁看不懂的呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1411764705882352&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYwjVIhDXjibNyiceEibPxGHA0mGLWicrdYXtVNP1X8xN5Ev7aSxdMOTXPQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;170&quot;/&gt;&lt;figcaption&gt;有谁看不懂&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;FullGC 日志含义&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;2022&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;T20:&lt;span&gt;24&lt;/span&gt;:&lt;span&gt;47.815&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt;: &lt;span&gt;6.955&lt;/span&gt;: [&lt;span&gt;Full &lt;span&gt;GC&lt;/span&gt; &lt;span&gt;(Metadata GC Threshold)&lt;/span&gt; [PSYoungGen: 701K-&amp;gt;0&lt;span&gt;K&lt;/span&gt;&lt;span&gt;(&lt;span&gt;72704&lt;/span&gt;K)&lt;/span&gt;] [ParOldGen: 38678K-&amp;gt;35960&lt;span&gt;K&lt;/span&gt;&lt;span&gt;(&lt;span&gt;175104&lt;/span&gt;K)&lt;/span&gt;] 39380K-&amp;gt;35960&lt;span&gt;K&lt;/span&gt;&lt;span&gt;(&lt;span&gt;247808&lt;/span&gt;K)&lt;/span&gt;, [Metaspace: 56706K-&amp;gt;56706&lt;span&gt;K&lt;/span&gt;&lt;span&gt;(&lt;span&gt;1099776&lt;/span&gt;K)&lt;/span&gt;], 0.1921975 secs] [Times: user&lt;/span&gt;=&lt;span&gt;1.03&lt;/span&gt; sys=&lt;span&gt;0.00&lt;/span&gt;, real=&lt;span&gt;0.19&lt;/span&gt; secs] &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的内容，我们也是一个一个解析：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;2022&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;T20:&lt;span&gt;24&lt;/span&gt;:&lt;span&gt;47.815&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt;:&lt;br/&gt;&lt;span&gt;6.955&lt;/span&gt;: 刚启动服务就Full GC【整堆回收！！】&lt;br/&gt;&lt;br/&gt;[&lt;span&gt;Full &lt;span&gt;GC&lt;/span&gt; &lt;span&gt;(Metadata GC Threshold)&lt;/span&gt; Metaspace空间超限！&lt;br/&gt;[PSYoungGen: 701K-&amp;gt;0&lt;span&gt;K&lt;/span&gt;&lt;span&gt;(&lt;span&gt;72704&lt;/span&gt;K)&lt;/span&gt;] 年轻代没有回收空间&lt;br/&gt;[ParOldGen: 38678K-&amp;gt;35960&lt;span&gt;K&lt;/span&gt;&lt;span&gt;(&lt;span&gt;175104&lt;/span&gt;K)&lt;/span&gt;] 39380K-&amp;gt;35960&lt;span&gt;K&lt;/span&gt;&lt;span&gt;(&lt;span&gt;247808&lt;/span&gt;K)&lt;/span&gt;, 老年代也没有到阈值，整堆更没有到阈值&lt;br/&gt;[Metaspace: 56706K-&amp;gt;56706&lt;span&gt;K&lt;/span&gt;&lt;span&gt;(&lt;span&gt;1099776&lt;/span&gt;K)&lt;/span&gt;], 0.1921975 secs]&lt;br/&gt;[Times: user&lt;/span&gt;=&lt;span&gt;1.03&lt;/span&gt;本次GC消耗CPU的时间 sys=&lt;span&gt;0.00&lt;/span&gt;系统暂停时间, real=&lt;span&gt;0.19&lt;/span&gt; secs实际应用暂停时间] &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这里，有些哥们就会说，这么看，也太恶心了吧，密密麻麻的日志，看着头疼！！！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么接下来我们来学一个GC日志可视化工具&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GC日志可视化分析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析GC日志，就必须让GC日志输出到一个文件中，然后使用GC日志分析工具（&lt;span&gt;gceasy.io&lt;/span&gt;：&lt;code&gt;https://gceasy.io/&lt;/code&gt;) 进行分析&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46510416666666665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYv9jjupRxbiafjibCzulMmIjcwKfCzFXc3bxKeV8DZ2KHWM6X8MggdL9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;figcaption&gt;GC日志可视化分析&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里分析完之后，可以下载分析报告&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26670910248249524&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYTGjvMqT59Z0NMzQiaEdSrpXmjvDtDL6eVHFT9yBLDt9ELN3P7Gxbu3g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1571&quot;/&gt;&lt;figcaption&gt;下载分析报告&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;JVM内存占用情况&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38052530429212045&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYnRp7RJRZ4VxVJjfEJiaaibWiciatt3OsghIm3SIsqt1wnHToluuHto7ITg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1561&quot;/&gt;&lt;figcaption&gt;JVM内存占用情况&lt;/figcaption&gt;&lt;/figure&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Generation【区域】&lt;/th&gt;&lt;th&gt;Allocated【最大值】&lt;/th&gt;&lt;th&gt;Peak【占用峰值】&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Young Generation【年轻代】&lt;/td&gt;&lt;td&gt;74.5 mb&lt;/td&gt;&lt;td&gt;74.47 mb&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Old Generation【老年轻代】&lt;/td&gt;&lt;td&gt;171 mb&lt;/td&gt;&lt;td&gt;95.62 mb&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Meta Space【元空间】&lt;/td&gt;&lt;td&gt;1.05 gb&lt;/td&gt;&lt;td&gt;55.38 mb&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Young + Old + Meta space【整体】&lt;/td&gt;&lt;td&gt;1.3 gb&lt;/td&gt;&lt;td&gt;212.64 mb&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关键性能指标&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4788273615635179&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYWDJQEyiaKMrlLe8RbpT82pMQQLCOwwyyIq7Oss3WicUPdICaj3NLibmSg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1535&quot;/&gt;&lt;figcaption&gt;关键性能指标&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1 、&lt;span&gt;吞吐量&lt;/span&gt;：百分比越高表明GC开销越低。这个指标反映了JVM的吞吐量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2 、&lt;span&gt;GC 延迟&lt;/span&gt;：&lt;span&gt;Latency&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Avg Pause GC Time&lt;/code&gt;：&lt;span&gt;7.80 ms&lt;/span&gt; 平均GC暂停时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Max Pause GC Time&lt;/code&gt;：&lt;span&gt;190 ms&lt;/span&gt; 最大GC暂停时间&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GC 可视化交互聚合结果&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48152948801036943&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYoXuAcg8KM3Y3TIl4U2X0zJx2jK8EqlmiaCscIxQZRh5eicOickhAhLoqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1543&quot;/&gt;&lt;figcaption&gt;可视化交互聚合结果&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由上图可以看到，发生了3次full gc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存在问题：一开始就发生了 3 次full gc , 很明显不太正常；&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GC 统计&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6587755102040816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYBDgk3sciazsSia7olyERiaGDUnbOmKKxIZWibXE0ibq5Yq9NX4ROZPRbdfw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1225&quot;/&gt;&lt;figcaption&gt;GC 统计&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;GC Statistics&lt;/span&gt;：GC统计&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由上图可以得到，发生gc的总次数，young gc，full gc的统计，gc 暂停时间统计。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GC原因&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3652230122818358&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/19cc2hfD2rD74nX01ONhAWdK2Hh8GrCYdsCZD7IM039iahHlAibxQBibcDfmUmwScrnmEvhjITfsSLpP9MgxLKCbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1547&quot;/&gt;&lt;figcaption&gt;GC原因&lt;/figcaption&gt;&lt;/figure&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;原因&lt;/th&gt;&lt;th&gt;次数&lt;/th&gt;&lt;th&gt;平均时间&lt;/th&gt;&lt;th&gt;最大时间&lt;/th&gt;&lt;th&gt;总耗时&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Metadata GC Threshold&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;43.3 ms&lt;/td&gt;&lt;td&gt;190 ms&lt;/td&gt;&lt;td&gt;260 ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation Failure&lt;/td&gt;&lt;td&gt;53&lt;/td&gt;&lt;td&gt;3.77 ms&lt;/td&gt;&lt;td&gt;10.0 ms&lt;/td&gt;&lt;td&gt;200 ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里对这些原因解析一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Metadata GC Threshold&lt;/span&gt;：元空间超阈值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Allocation Failure&lt;/span&gt; ：年轻代空间不足&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里补充一个原因，本案例还没出现的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Ergonomics&lt;/span&gt;：译文是“人体工程学”，GC中的Ergonomics含义是负责自动调解gc暂停时间和吞吐量之间平衡从而产生的GC。&lt;span&gt;关注公众号：&lt;/span&gt;&lt;span&gt;码猿技术专栏，回复关键词 1111 获取阿里内部java性能调优手册；&lt;/span&gt;目的是使得虚拟机性能更好的一种做法。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此可见，通过可视化的工具，可以快速的帮我们分析GC的日志。我们得善于利用工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为gc的日志文件，内容太多，都是密密麻麻的数字，文本。看得实在是头疼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了&lt;span&gt;gc easy&lt;/span&gt;可视化工具，而且还是在线的，十分的方便。&lt;span&gt;GC日志分析是免费的&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于jvm调优实践的分析，篇幅比较长，所以今天就先到这里，剩下的留着下次分享了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;来源：https://juejin.cn/post/7128377003224334373&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4793fd68e714863af1466cbb27386173</guid>
<title>个人/团队/公司开源，Joyqi 谈贡献开源的「不同姿势」</title>
<link>https://toutiao.io/k/dvlz20z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;前不久，Answer.dev 创始人 @Joyqi 受到邀请，在刚刚结束的 GitHub Universe 的 Local Party 上做了题为「用 GitHub 构建开源项目的各种姿势」的主题分享。以下为他的分享实录。&lt;/p&gt;

&lt;p&gt;Hello 大家好，我是 Joyqi。&lt;/p&gt;

&lt;p&gt;刚有同学提问，很多学生在大学期间怎样参与开源项目，怎样做自己的第一个开源项目。我的开源生涯也是从大学时间开始，稍后我会分享一下我的开源历程。其实开源可以有不同的姿势，不一定是你去一家公司里面参与开源项目，也可以通过其他方式开始。&lt;/p&gt;

&lt;p&gt;先从技术的角度自我介绍一下，我自 2006 年开始参与开源，因为我 2007 年毕业，所以其实大学时就已开始做开源项目。那时全世界的开源运动还处于兴起的阶段，中国的开源项目也应该是第一批，所以当时我算是挺有幸能参与到开源的世界。&lt;/p&gt;

&lt;p&gt;下面是当时的一些开源平台，有些如果你在互联网待的时间比较长的话，会知道这些平台。在 GitHub 之前就有这种开源平台，最早叫 SourceFroge，如果知道那你们够 「老」 的。后面是 Google Code，不过很遗憾，他们做了一段时间且在 GitHub 起来后就不做了。这两个前面应该都是用 SVN，即在 Git 之前的版本管理工具都用 SVN 来做的。我自己本身的技术栈、服务端、前端移动端其实都做过，所谓全栈工程师，其实就是全干，因为之前从事的工作岗位要求我做这些工作，所以我对技术上是很开放的。我自己的开源项目也是各种端都有，我觉得开源是一件挺好玩的事情。&lt;/p&gt;

&lt;p&gt;个人开源：用得好所以开源了&lt;/p&gt;

&lt;p&gt;说到参与开源的各种姿势，先从最普通的姿势，即大家很多同学或朋友最能接受的一个开源姿势 —— 用得好所以开源了。&lt;/p&gt;

&lt;p&gt;这是我的一个小的个人项目，用着比较开心，那它是一个什么项目呢？——给你的身份证图片打码。&lt;/p&gt;

&lt;p&gt;我们现在经常要在一些平台做验证，需要上传证件照，但又不放心，就会在上面打码，比如会打上「仅供用于某些身份验证」这种透明的码。当然如果我们用一些网站的 online 项目，其实也会不放心，因为要把我们的图片传上去，相当于把身份证也传上去了，其实更不放心。所以说我就做了一个这样的项目。&lt;/p&gt;

&lt;p&gt;这很简单，前端的同学应该知道，我当时在学 CoffeeScript，半天时间就搞定了。代码其实也只有一两百行，它没有任何网络请求，全部用 canvas 去做图片，然后在图片上写上一行字，可以调整间距及颜色，还有透明度。&lt;/p&gt;

&lt;p&gt;当初这个简单的功能并没有做宣传，只在群里面发了一下，后面就不断有人去 star 去 fork， 这个项目的 fork 数和 star 数的比例还挺高，别看 star 仅不到 300 个，但  fork 却相当多，有很多人拿这个简单的项目去实现自己的打码平台，我觉得还挺好玩的。&lt;/p&gt;

&lt;p&gt;之所以提这个项目，就是因为做开源的初心。我做开源的初心是先解决自己个人的真实痛点，这个痛点是存在的，是我自己想去解决的，且这个痛点对其他人也特别适用。因为我觉得在互联网上普遍存在隐私泄露的风险，而大家都有这种担心，所以我把它做出来后，尽管周期很短，但依旧会有这么多人关注，有这么多人用，还有很多人提意见，包括有人还给我提 PR 等，这是个好现象。所以，我觉得这种项目对于很多人来说其实难度不大，你们可以去尝试去做一下这种项目。&lt;/p&gt;

&lt;p&gt;另一个项目也挺有意思，我把它取名叫「闪光时刻」。&lt;/p&gt;

&lt;p&gt;很多程序学员都会有突发奇想，即突然觉得我有个想法特别牛，其他人都没实现过，我想把它给做出来。然后当时我就写了一个这样的项目——Mobile Device JS ，我们知道 WebGL 有个接口，它可以读取我们显卡的信息，比如像 iPhone ，它就可以通过其接口读取你手机的显卡/处理器 A1 还是 A12 或是 A13 的信息。将处理器信息读取后，根据分辨率就可以很精确地判断你的机器属于哪一代 iPhone，可精确的判断到底是属于哪个型号的 iPhone，这对很多特殊行业有很大帮助。比如网游等行业，这是我后来了解到的，但是当时我只是觉得这个东西很有趣，我突然发现了这样的用法，就把它做出来了。&lt;/p&gt;

&lt;p&gt;对此，我还写了一篇文章发在了 SegmentFault 上，文章的题目叫 「思路清奇：XXXX」，当时挺多人给我评论，挺有趣的。后来有个开发者加我微信，啥话不说先发红包，我从来没见过这种情况。有的同学会给自己的开源项目设立赞助通道，大家会去赞助平台去赞助，但我从没见过有人上来直接给红包的。我当时跟他聊了一下，他说他们是一个比较特殊的行业，这个产品给他们解决了一个很大的问题 —— 原来他们一直想很精确的判断用户的手机到底是什么型号，不能只判断 iPhone 和安卓，必须得判断是哪一代机型，所以说他觉得我的产品对他特别有帮助，我觉得特别有成就感。当然，我的产品给他带来的价值其实肯定不止这些钱，但我依旧觉得挺高兴的。我觉得这是一个特别特殊的经历，可以给大家分享一下，所以说开源其实还是可以创造价值的。&lt;/p&gt;

&lt;p&gt;开源还有一种姿势，有很多的朋友自己从编码习惯出发做开源，这其实是一种「偷懒」。我自己就做了一个这样项目，这个项目刚做还没有什么 star 和 contributor，它就是一个 GitHub 的模板，比如说你有段时间经常想做一类项目，可以把它做成一个模板。然后你可以做一类项目的时候，用这个模板发布项目就可以省很多事。最近我写了很多这种 TS 的项目，就是用 TS 发到 npm 上去，但发现很多动作都是重复的。因此，我看到 GitHub 有这样的模板功能，便在模板里面写了一个 GitHub Action 后，它可以根据你的初始化条目，等初始化项目以后，就可以得到一个标准的 TS 的一个脚手架的项目，在里面直接写代码就可以，很多东西都不用去配，tsconfig 可以不用去配置。以上就是我从个人角度出发的项目。&lt;/p&gt;

&lt;p&gt;其实，该类项目不仅仅是上面所说的模板项目，其实还有很多，比如很多人之前会将 vim 的配置作为一个开源项目。如果大家用 vim 的话，应该会关注这种项目或者 VS Code 的配置或者是诸如此类的这种项目还有脚本，我们可以提升平时开发效率的一些项目，也可以做开源项目，这是我个人的一些开发项目及怎样去参与这些开源项目的经验。&lt;/p&gt;

&lt;p&gt;很多项目会有一些 star，有的没有 star 或是刚发布出来也没有关注。但我认为追求 star 并不重要，首先是开源的态度，能把东西做出来，把文档写好，对其他人有帮助，我觉得能做到这个态度是特别重要的。&lt;/p&gt;

&lt;p&gt;社区开源：玩大一点&lt;/p&gt;

&lt;p&gt;后面可以玩一点高级的开源姿势，我可以把它叫社区开源。&lt;/p&gt;

&lt;p&gt;这是「中国开源码力榜」，一个网站，这是我们和开源社以及 OpenDigger 合作的项目。OpenDigger 负责把 GitHub 上最优秀、协作影响力最大的 100 位中国程序员找出来，然后我们再把程序员的 profile 放到 GitHub 上，去做成一个 Repo，然后这些程序员可以来 fork 该 Repo，更新 profile。我们整个项目就完全托管在 GitHub 上，这是完全社区的项目。所以如果你在这个榜单中，就可以 fork 这个项目，然后去提 PR 跟进你的 profile， 然后我们后面写了一堆 Actions 会自动 build 这个网站，会更新你的 profile。&lt;/p&gt;

&lt;p&gt;大家可以看到，该项目的 PR 其实就是很多人在去更新自己的 profile，然后去增加自己的项目经验。右边我们的 Actions 会去做构建然后发布。我们这个项目是全自动运行的。因为当时我们目标是不想把项目做成一个动态的网站，后面有数据库，我觉得那个太不酷了，太老了，我们把它做成一个完全公开的，所有的数据、所有的构建过程都以社区化的方式运行。所以，我们就选择了这样的方式来做这个项目。&lt;/p&gt;

&lt;p&gt;然后，就是我人生中比较重要的一个项目——我在 2007 年的时候开始做了这个项目，叫 Typecho ， 这个项目现在有 9000 多 star ，从 2007 年做到现在，想想已经有 15 年了，很不可思议，生命力已经出乎了我的意料。创业以后，我工作比较忙，更新的频次很低，在我们 Typecho 的用户群里面，流行一个梗，就是「Typecho 什么时候更新」。这个梗，在我去参加用户聚会的时候，大家经常就会拿出来问。因为更新实在太慢，人家都是以月以周为节点更新，我们则是以年为节点来计算更新时间，但我们其实只是大版本没有更新， commit 还是在经常更新的。&lt;/p&gt;

&lt;p&gt;Typecho 项目其实特别纯粹，特别理想化。大学时我就想做一个中国的 WordPress， 因为 WordPress 当时也在 0.1，我跟他当时基本上是同时间发布的这个版本。然后我就想做一个中国的博客软件出来，也是 PHP 的，因为当时在大学里面接触的第一门动态脚本语言就是 PHP。我们在做的过程中，遇到了当时在中国开的第一个 WordCamp， 一个面向 WordPress 开发者和爱好者的聚会，因此我就认识了我的很多团队成员，他们对 Typecho 这个项目很有兴趣，想来参与这个项目。所以我们 2007 年的时候就以完全远程的方式组建了一个这个社区化的开源团队。&lt;/p&gt;

&lt;p&gt;大家都来自天南海北，我们都当时就用邮件列表去做沟通，项目管理也是用 GitHub 的 issue 来做。这么多年下来，该项目之所以还有如此强的生命力，这也跟我们当初选择社区化运作分不开。尽管有的人可能比较忙，没时间更新，但 Typecho 依旧社区运作的项目，大家也可以去提交 PR，可以去提交 issue，也可以去参与到项目中，所以我觉得这个项目可以持续到现在是有原因的。&lt;/p&gt;

&lt;p&gt;在该项目的成长过程中，遇到了很多有意思的事，我不知道大家知不知道 PHP 这个语言，其实它分很多版本，每个版本又可以部署在不同的平台上，然后部署的平台上又可以有很多不同的部署方式。所以后面我们每天有一个 nightly 版本，每晚会编译该版本。但编译环境特别复杂，即多版本多操作、多环境、多 CPU 架构交叉定义。&lt;/p&gt;

&lt;p&gt;GitHub 有一个好处，就是 GitHub Actions Runner 对开源项目是完全免费的。所以尽管编译特别耗时（每天晚上编译一次大概需要三个半小时），如果让我们自己机器去编译的话，这个是很费钱的。但用 GitHub Runner 来做的话，我觉得还是薅到了很多「羊毛」。最早的时候是所有平台全部并行全部并发的去编译，编译的时候直接把 runner 给搞挂了（不知道是我搞挂了还是它自己本身有问题），所以我们后来换了一下，每个平台会有一个 stage， 编译完以后进入到下一个平台，也相当于做了一个小小的分发，这是我们这个项目比较特殊的一点。&lt;/p&gt;

&lt;p&gt;还有一点，就是我们的项目用到了比较多的 GitHub 交叉。GitHub Actions 有 API，我们会在 GitHub 多个项目之间，因为整个 Typecho 项目下面会有多个 Repo，比如说有 Typecho 这个 Repo 它是用来放项目主要代码的，Languages 这个 Repo 是用来放所有的多语言的，大家可以看到现大概 17 种语言的都是用户去提交，然后这两个 Repo 之间其实是有联动关系的，做了一个相互交叉的 Trigger。&lt;/p&gt;

&lt;p&gt;如果 Typecho 这边修改了某一些语句的话，它会 Trigger 到 Typecho Languages 项目，Languages 项目编译自动把 Typecho 项目的代码 clone 下来，然后去编译 message.bot 这文件，发布语言包，之后 Typecho 再从该项目里下载语言包编译成一个多语言版本的 Typecho，这实际上是多方触发的关系，我们把它用 GitHub Actions 做了个实现，这样就可以减少很多手动过程，由于我们本身人就少，人工特别金贵，因此尽量都自动化。&lt;/p&gt;

&lt;p&gt;以上就是 Typecho 的情况。&lt;/p&gt;

&lt;p&gt;公司开源：技术能力溢出&lt;/p&gt;

&lt;p&gt;由于我们自己在 SegmentFault 也开源了很多自己用到的组件，所以如果公司要做开源项目，或公司的某个产品要去开源，我觉得这是很多国内大厂经常用到的一种开源模式，更多的是来自公司的能力的溢出。&lt;/p&gt;

&lt;p&gt;如果你做了一个项目，但由于该项目只能在公司内部用，所以会觉得自己的能力被埋没了，或是自己的影响力应该可以覆盖到更远的地方，所以此时你就该将它开源出来。公司开源的项目有几个特点：&lt;/p&gt;

&lt;p&gt;把项目开源出来肯定是来自公司项目的能力溢出 —— 因为你的公司能力，你能达到这个地步，你才会去开源这个项目，所以可能只有优秀的公司才有能力去做开源或做成功的开源。
它是以公司的技术团队为主体的，就像我们这些项目可能现在还没有做社区化，只是一起提 issue 或修小的 bug 提一下 PR，但主要还是以我们公司的团队为主，因为是我们主动将其开源出来的。
另外就是这里面重复造轮子的事情会比较多，下面两个例子就是有点吐槽的意味：比如现在看不少大厂的开源项目有很多重复的轮子，早前前端行业里被吐槽比较多，mix 还有前端很多渲染的项目，都会重复造很多轮子。
为什么？我觉得可能就是因为在大厂内部有很多能力需要去释放，可能受到 KPI 影响，所以会重复造轮子，给后面长远发展造成了影响，有「人走茶凉」的风险。如果团队有调整的话，该项目就会因为没有人维护而被「搁浅」。这也是为什么我们之前用开源，如果没有基金会维护，只是一个厂商去开源的项目，我们会有这样的疑虑 —— 他会否有可能过段时间就不维护了？&lt;/p&gt;

&lt;p&gt;我们在做功能的时候，就遇到了刚与 GitLab 的同学一直在聊的这个问题 —— 社区与内部同步。因为这个项目是从公司内部开源出来的，所以它肯定是在公司内部的代码托管平台先做了开发，然后再放到 GitHub 上去。它的开发主体可能还是在内部，只是它会定期地去 push 到外面的 GitHub 的 Repo 上去。因此，这就会存在同步问题。&lt;/p&gt;

&lt;p&gt;该问题我们目前已经有了一些解决方法，但也不能说完全解决了 —— 因为存在一些代码的同步问题。&lt;/p&gt;

&lt;p&gt;目前，我们在代码同步方面采用镜像的方式，就是 GitLab Mirror 到 GitHub  上去。但这有一个问题，如果你在 GitHub 上有 PR 的话，merge 就会有很大的问题。
所以我们现在也不用 Mirror 的方式了，而是两边分开，会有机器人去做同步，如果那边 GitHub 有 merge 的话，它就会同步到 GitLab 里面， PR 管理也是这样，它有一个 webhook，如果那边有 PR 的话，我们就不会接收这个同步的信号，而是将其同步到内部的代码里面。
分支里我们用了一些比较常用的 Flow ，之前用的是 Git Flow ，现在则不常用 。
在这里，为什么要强调说一下  CI/CD 呢？就像之前所说，如果将其放 GitHub 上，它的 runner 的计算能力是有限制的，除非买付费 plan，不然其 build 能力是受限的。所以，现在将 build 部分放在我们自己的内部平台里面打包编译，然后社区只做测试，跑单元测试代码或是去做比较轻量的一些计算。&lt;/p&gt;

&lt;p&gt;以上就是我们内部和外部的代码管理平台的一些经验。&lt;/p&gt;

&lt;p&gt;做了这么多个人开源项目、公司的开源项目以及社区的开源项目之后，我们就开始思考一个事情，我们能不能将开源这件事情做成一家公司，将公司做成一个开源公司，把我们自己的能力充分展现，把我们主要产品的能力开源出来。&lt;/p&gt;

&lt;p&gt;有了以上积累，我们做了开源问答社区软件 Answer，该项目正式发布于 10.24，发布后的第一个星期，就在 GitHub Tending 霸榜了一周左右，不到一个月时间已有 4000 多 star。正因为 SegmentFault 是做问答社区起家的，所以我们积累了大部分问答社区的经验。在我们做社区的过程中，有很多 B 端的用户提到他们也需要这样的社区，能不能帮他们搭这样的社区，或是怎样去实现这样的社区。之前我们很难去响应这种需求，只能提议他来我们社区建一个专区或子站，但我觉得这样的话他们的需求不能完全满足，因为他们有些内容是需要完全自定义的或自己去控制自己的数据。&lt;/p&gt;

&lt;p&gt;基于这样的想法，也基于我们在社区开源这么多年的思考，我们在想能不能把我们在问答社区领域的能力完全开放出来，变成一个开源的项目让大家来用。这样其实是颠覆了我们整个商业模式 —— 之前我们就是一个社区公司，通过广告服务来赚钱。如今，我们变成了一家开源商业公司，一家软件公司，我们的驱动力也变成了用社区驱动来开发，跟我们此前的驱动方式完全不一样。&lt;/p&gt;

&lt;p&gt;但我觉得开源对商业公司来说是至关重要的，正如刚才有人问韩骏老师是否有想法将开源项目做商业化的时候，我们也在想这个问题 —— 开源带给商业化最大的一个作用是什么？其实对商业用户来说，建立信任是很重要的步骤，为什么让用户相信你去买你的产品？你可以想象一下，为什么我们要付费买 GitLab ？如果你的公司足够大，可以支持买 GitLab 这样产品的话，你为什么心甘情愿掏钱买？或者你买 JetBrians 这种编辑器的理由是什么？为什么？因为你用过它的开源产品，你知道它的代码，你知道它整个运作流程，你相信它有一个坚持的社区在支撑着这一切的运作，它有着很健壮的力量。对我们软件开发者而言，健壮性是很必要的一个条件。如果你只是一个小作坊或小公司的话，我很难把自己内部的能力展现给你。但如果开源的话，我可以把我对社区的管理能力统统展现给你。我觉得这对商业化来说是很重要的一步，用户可以通过这个过程来相信你的产品，相信你的产品可以给他们带来价值，也相信你可以很好地去发展这个产品。因为他不可能就用一次，肯定要长期去用的。所以，这也是当时我们要做开源公司的最初的思考。&lt;/p&gt;

&lt;p&gt;具体到开源公司后面怎么去做商业化、商业模式，我们想得比较多的就是软件 SaaS 方面了，后面我们可能会围绕这样的能力来去构建商业化产品。以开源模式做公司的话我们会有会遇到一些转变，首先就是国际化。&lt;/p&gt;

&lt;p&gt;由于我们的项目是完全国际化的项目，其文档全是英文，发布渠道也是在国际渠道，所以它给我们带来了很多思维上的转变。之前我们没有过多地思考这些问题的，但我可以分享出来，大家可以借鉴一下，我们现在也还在处理这些问题当中，比如我们的文档、注释都是全英文。这一点之前我们可能有些人没有写注释的习惯，或是写文档的习惯，对他来说是一件很难的事情。但如果你要做一个社区，这两样都是特别重要，特别是对一个国际化产品而言，全英文的文档，是用户了解你的第一步。&lt;/p&gt;

&lt;p&gt;我们也把英语作为社区的官方语言，现在也有很多中文用户来提问，我们不会拒绝，但我们会引导大家尽量用英文去提问。&lt;/p&gt;

&lt;p&gt;现在，我们在做的一步是将语言档剥离，然后交给社区去维护。我们现在把它交给到第三方的开源平台，大家可以在上面帮我们翻译一些词条，目前已经有一些翻译了。&lt;/p&gt;

&lt;p&gt;接下来，就是社区化的过程。&lt;/p&gt;

&lt;p&gt;其实刚刚也提到过，我们现在的产品路线图已是完全社区化了，现在用 GitHub 的 Project 来做路径图，用 GitHub 的 Project 来发布这些功能，或是参与讨论这些功能，或是它已经实现的功能我们都放在上面。然后告诉大家我们会在哪一个阶段完成，比如 Q1、Q2、Q3、Q4，或者还要标注它是哪个版本，比如在 0.3、0.4 哪个版本发布。在这个过程中，这些功能你都可以参与讨论。如果你还有其他的功能建议，也可以在 issue 里面提出来。提出来后，我们觉得合适的话会把它列入到我们的 Roadmap 里，这些过程全部是公开的，大家可以在里面自由讨论自己想要的功能。&lt;/p&gt;

&lt;p&gt;还有一个就是我们的社区，现在除了传统社区如 GitHub 社区及 Stack Overflow 等其他类似的社区以外，我们还在一些比较新的国外社区做推广及社区建设，在上面也可以讨论我们的产品，我们在 Reddit 上有频道，在 Product Hunt 上也发布了，当时也收获了特别好的反响和回馈，我们还建立了 Discord 聊天频道，大家可以在里面聊我们的产品，和我们官方沟通。&lt;/p&gt;

&lt;p&gt;最后，聊一下在 Answer 项目里遇到的一些挑战：&lt;/p&gt;

&lt;p&gt;第一，就是文档。刚才也说了，文档对我们很重要，因为之前没有受过这种专业的文档训练，所以我觉得这个课我们必须补上。现在我们实际上是在集体学习怎样编写一份好的文档，包括文档结构，描述性的语言，包括它的排版。目前都在疯狂的学习当中，现在还没有做到足够好，但我们的态度是一定要编写一份能让大家、能让开发者或用户阅读起来很舒心的一份文档。&lt;/p&gt;

&lt;p&gt;第二，就是社区答复时间和工作时间的分配。这是项目发布以后我们遇到的一个比较大的问题，用户的问题会集中一段时间在上面提出来，我们要解决的话得要 Debug 复现他的问题，要跟他讨论，很费时间，所以该如何平衡这个时间呢？如果所有工程师都在花时间在这里解决这些问题的话，很可能会影响到我们正常的产品开发。
因此，我们现在有一个定期轮值的机制，即前端或后端会分出一个人力来在一段时间重点跟踪这些项目，他的时间会分配得比较多，使得其他人在社区答复上面受到的影响少一点，以此来做正常的项目迭代。这是我们目前的一个做法，还在调整中，后面如果还有更好的解决方式的话大家也可以去讨论。&lt;/p&gt;

&lt;p&gt;第三，如何将产品和技术理念国际化。现在我用中文跟大家交流，但如果在更广阔的国际平台上用英语，就是用或写文章或是做演讲的话，对我们自己的语言能力是一个挑战。很多人之前没有重视这方面，但我觉得这是让其他用户对你的项目产生信任的很重要的一步。可以通过这些了解你对产品的态度很重要。&lt;/p&gt;

&lt;p&gt;第四，就是社区的规则。这一点我们现在还在建立中，包括怎样奖励对我们贡献比较大的人，我们希望建立成一种规则性的东西 —— 比如：你对我们产品有很大的贡献，我们有实物的奖励或给你有一些荣誉；如果你的贡献足够大，你又有兴趣比较全职性的参与进来的话，我们会给你怎样的身份来将你吸纳进来。还有就是大家怎样参与到项目方向性的讨论中来，这是我们后面社区要去建立规则的一个重点。现在的讨论还比较分散，但我希望我们能有一些定期的话题去讨论，讨论完后可以形成某些提案，大家可以去投票，去决定做不做，很多成熟的基金会是有这样的机制的。&lt;/p&gt;

&lt;p&gt;最后是我们项目的一个小广告，大家如果想贡献的话，可以一起来贡献，不管什么形式，哪怕是言语上的鼓励也可以。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://answer.dev&quot;&gt;https://answer.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/answerdev/answer&quot;&gt;https://github.com/answerdev/answer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/AnswerDev&quot;&gt;https://twitter.com/AnswerDev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这是我们的官网主页，包括我们 GitHub 主页及我们在 Twitter 的官方账号，欢迎大家随时与我们互动。&lt;/p&gt;

&lt;p&gt;我的 ID 是 @joyqi，大家可以在各个平台都可以通过该 ID 搜到我，欢迎大家和我联系！&lt;/p&gt;

&lt;p&gt;点击链接查看视频回放：&lt;a href=&quot;https://ke.segmentfault.com/course/1650000042881825/section/1500000042881829&quot;&gt;https://ke.segmentfault.com/course/1650000042881825/section/1500000042881829&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>eb1259915ce5721847a9035e648ad226</guid>
<title>一万字带你入门 Activiti 工作流，通俗易懂</title>
<link>https://toutiao.io/k/fdxklic</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;👇推荐大家关注一个公众号👇&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzIzNjM3MDEyMg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/gHvX5TiczgWlCsOPBib3qa34WKGOy72FcvqTvt9icWjB0223JqDtJtD25EmBcaFxlJJ8P2r6KEADI3KYw7H1zuMRg/0?wx_fmt=png&quot; data-nickname=&quot;顶级架构师&quot; data-alias=&quot;TopFramework&quot; data-signature=&quot;顶级架构师，专注分享架构技术干货，企业架构、系统架构、网站架构、大规模分布式架构、高可用架构等架构讨论，以及结合互联网技术的架构调整。欢迎有想法、乐于分享的架构师朋友们交流学习。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点击上方 &quot;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247490920&amp;amp;idx=2&amp;amp;sn=84fa3d94375cac784eeb24472f885020&amp;amp;chksm=eca95686dbdedf90db774b5e1b09caaffbb95e72513a579a5c37c16325ccde7e1d75f0a4e736&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;编程技术圈&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;编程技术圈&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&quot;关注, &lt;span&gt;星标或置顶一起成长&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后台回复“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大礼包&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”有惊喜礼包！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;figure&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;每&lt;/strong&gt;&lt;strong&gt;日英文&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sometime you just have to hold your head up high, blink away the tears and say good-bye. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有时候，我们只需高高地扬起头，甩掉泪水，跟过去说再见。&lt;/span&gt; &lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;每日掏心话&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;你一定得认识到自己想往哪个方向发展，然后一定要对准那个方向出发，要马上。你再也浪费不起多一秒的时间了，你浪费不起。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;责编：乐乐 | 来&lt;/span&gt;&lt;span&gt;自：&lt;span&gt;blog.csdn.net/Mr_97xu/article/details/112899079&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247489132&amp;amp;idx=1&amp;amp;sn=c15c4bf118abad5bea9afc287585f760&amp;amp;chksm=eca95d82dbded494d33755649ad9879e32a3fe8b287cb2ecadb173238aa4ac65df3b6cf16aa7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员小乐(ID:study_tech)第 918 次推文  图源：百度&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;编程技术圈(ID:study_tech)&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247489132&amp;amp;idx=1&amp;amp;sn=c15c4bf118abad5bea9afc287585f760&amp;amp;chksm=eca95d82dbded494d33755649ad9879e32a3fe8b287cb2ecadb173238aa4ac65df3b6cf16aa7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员小乐(ID:study_tech)第 918 次推文  图源：百度&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;第 1790&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247489132&amp;amp;idx=1&amp;amp;sn=c15c4bf118abad5bea9afc287585f760&amp;amp;chksm=eca95d82dbded494d33755649ad9879e32a3fe8b287cb2ecadb173238aa4ac65df3b6cf16aa7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员小乐(ID:study_tech)第 918 次推文  图源：百度&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;期推文&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;p&gt;&lt;span&gt;往日回顾：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247627522&amp;amp;idx=1&amp;amp;sn=9f65677c9717af6159c265b000acfbb3&amp;amp;chksm=eca4b8ecdbd331fadbd789904572b3a0192239109aa1506504c2351939d957e54a3984f8eeb5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;刘强东分享感染新冠经历！王石也发声&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;刘强东分享感染新冠经历！王石也发声&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>