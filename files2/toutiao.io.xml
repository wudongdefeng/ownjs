<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>87d58d3746964d4a7e6ce5a6866d84c7</guid>
<title>20+ 前端开发好用组件 &amp; 插件轮子</title>
<link>https://toutiao.io/k/eugemzz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry&quot;&gt;
      
        &lt;p&gt;对前端开发中常用的组件 &amp;amp; 插件，进行了整理，一个好的插件库可以大大的提升我们开发的效率。更不需要自己再花费时间创造重复的轮子。大家可以收藏，以备后用，也会持续更新~&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;
&lt;h2 id=&quot;Vue-UI-组件库&quot;&gt;&lt;a href=&quot;#Vue-UI-组件库&quot; class=&quot;headerlink&quot; title=&quot;Vue UI 组件库&quot;/&gt;Vue UI 组件库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Element UI&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt; Element Plus支持Vue3，国内用的非常多，组件丰富，且可以自定义覆盖样式的组件库，适合PC和桌面端应用。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://element-plus.org/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://element-plus.org/zh-CN/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vant&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 有赞公司旗下的开源组件库，适用于移动端开发。组件齐全，使用简单，UI设计也非常漂亮。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;http://youzan.github.io/vant/#/zh-C%E2%80%A6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;youzan.github.io/vant/#/zh-C…&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vuetify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 建立在Vue.js之上的完备的界面框架。符合 Material Design设计规范。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://vuetifyjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://vuetifyjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Naive UI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一个 Vue 3 组件库，主题可调，使用 TypeScript，快。只需要提供一个样式覆盖的对象，就可以自定义主题系统。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.naiveui.com/zh-CN/os-theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.naiveui.com/zh-CN/os-theme&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;React-UI-组件库&quot;&gt;&lt;a href=&quot;#React-UI-组件库&quot; class=&quot;headerlink&quot; title=&quot;React UI 组件库&quot;/&gt;React UI 组件库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ant Design&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt; 文档齐全，社区生态良好，有手机版，还有PC版。可以用来快速创建手机/后台/内部应用的UI组件库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://ant.design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ant.design/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mui&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 符合谷歌Material Design 设计语言的React组件UI库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://mui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mui.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;动画库&quot;&gt;&lt;a href=&quot;#动画库&quot; class=&quot;headerlink&quot; title=&quot;动画库&quot;/&gt;动画库&lt;/h2&gt;&lt;p&gt;1、&lt;strong&gt;Animate.css&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;纯css的动画库，内置了超多的动画效果，可以直接在线预览动画效果。&lt;/p&gt;
&lt;p&gt;网址：&lt;a href=&quot;https://animate.style/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://animate.style/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;Lottiefiles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动画效果的图片，小部件，可以在线创建编辑，生成Gif或者导出Svg。也有很多现成的很多动画效果部件，可以方便的将动画效果组件集成到产品里。&lt;/p&gt;
&lt;p&gt;网址：&lt;a href=&quot;https://lottiefiles.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lottiefiles.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;交互效果组件&quot;&gt;&lt;a href=&quot;#交互效果组件&quot; class=&quot;headerlink&quot; title=&quot;交互效果组件&quot;/&gt;交互效果组件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Swiper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 滑动特效插件，纯javascript打造，面向手机、平板电脑等移动终端。不依赖于公共库。支持流行的前端框架，如React，Svelte，Vue.js，Angular等&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.swiper.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.swiper.com.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mescroll&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 下拉刷新和上拉刷新的js框架，适用H5，原生js, 不依赖jquery,zepto，支持vue。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;http://www.mescroll.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mescroll.com/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;图标组件库&quot;&gt;&lt;a href=&quot;#图标组件库&quot; class=&quot;headerlink&quot; title=&quot;图标组件库&quot;/&gt;图标组件库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iconfont&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 千万矢量图标素材，支持单、多色图标。支持在线搜索，一键查询海量图标库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.iconfont.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.iconfont.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;xicons&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 整合自 fluentui-system-icons、ionicons、ant-design-icons、material-design-icons、Font-Awesome tabler-icons 和 carbon 的 SVG格式的 Vue/React 组件。可以很方便的将图标集成到产品里。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/07akioni/xicons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/07akioni/xicons&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Feather&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一个简单漂亮的开源SVG图标集合。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/feathericons/feather&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/feathericons/feather&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;日期时间&quot;&gt;&lt;a href=&quot;#日期时间&quot; class=&quot;headerlink&quot; title=&quot;日期时间&quot;/&gt;日期时间&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Day.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 解析、验证、操作和显示日期和时间。支持国际化。文件大小只有2KB左右，是一个极简的JavaScript库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://dayjs.fenxianglu.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dayjs.fenxianglu.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;timeago.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 显示(天、小时、分)之前效果，为了有更好的用户体验，xx time ago在很多产品里应用。i18n支持。文件小于2KB。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/hustcc/timeago.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hustcc/timeago.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Moment.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; JavaScript 日期处理类库。在浏览器和 Node.js 中都能工作。支持多语言。支持日期格式化、相对时间、日历时间。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;http://momentjs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://momentjs.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;工具类&quot;&gt;&lt;a href=&quot;#工具类&quot; class=&quot;headerlink&quot; title=&quot;工具类&quot;/&gt;工具类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lodash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 是一个一致性、模块化、高性能的JavaScript实用工具库。降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.lodashjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.lodashjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ECharts&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt; 一个基于 JavaScript 的开源可视化图表库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://echarts.apache.org/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://echarts.apache.org/zh/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Ant Design Charts&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 简单好用的 React 图表库。蚂蚁集团全新一代数据可视化解决方案。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://charts.ant.design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://charts.ant.design/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MEditor.md&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一款开源在线 Markdown 编辑器&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://pandao.github.io/editor.md/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pandao.github.io/editor.md/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Validator.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 针对字符串的验证和串联库。比如：isEmail、isDate、isMobilePhone等&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/validatorjs/validator.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/validatorjs/validator.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vue.draggable.next&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Vue拖拽组件，基于Sortable.js的Vue 3 拖放组件。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/SortableJS/vue.draggable.next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/SortableJS/vue.draggable.next&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vue-qr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Vue组件，支持Vue2 / Vue3 /Vite。可以方便的生成各种格式二维码，包括彩色和自定义样式。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.npmjs.com/package/vue-qr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/package/vue-qr&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vue-cropper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一个优雅的图片裁剪插件。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/xyxiao001/vue-cropper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xyxiao001/vue-cropper&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上，欢迎👏🏻收藏备用，如果有好的轮子可以留言分享~&lt;/p&gt;

      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d54c4a9b8f43b29b6b08a5d5a08bbf7b</guid>
<title>QPS 和 TPS 是什么？</title>
<link>https://toutiao.io/k/978p5gj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-4em6pe&quot; options=&quot;[object Object]&quot;&gt;&lt;h2 data-first-child=&quot;&quot;&gt;&lt;b&gt;一、qps是什么&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;zUHIS4vM&quot;&gt;&lt;b&gt;QPS&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;LhRZHX3M&quot;&gt;QPS即每秒查询率，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。&lt;/p&gt;&lt;p data-pid=&quot;C2GGs9DK&quot;&gt;&lt;b&gt;每秒查询率&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;Otc8N_Bd&quot;&gt;因特网上，经常用每秒查询率来衡量域名系统服务器的机器的性能，即为QPS。&lt;/p&gt;&lt;p data-pid=&quot;oRXZxcZi&quot;&gt;对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。&lt;/p&gt;&lt;p data-pid=&quot;7ePtu5bF&quot;&gt;&lt;b&gt;计算关系：&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;fDvOOvII&quot;&gt;QPS = 并发量 / 平均响应时间&lt;/p&gt;&lt;p data-pid=&quot;Le0Li4BF&quot;&gt;并发量 = QPS * 平均响应时间&lt;/p&gt;&lt;h2&gt;&lt;b&gt;二、&lt;/b&gt; &lt;b&gt;TPS是什么&lt;/b&gt; &lt;/h2&gt;&lt;p data-pid=&quot;U5MO-PfU&quot;&gt;TPS：Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS = CAPS × 每个呼叫平均TPS）&lt;/p&gt;&lt;p data-pid=&quot;BvVxT-a-&quot;&gt;TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。&lt;/p&gt;&lt;p data-pid=&quot;sltYrcO7&quot;&gt;一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。&lt;/p&gt;&lt;p data-pid=&quot;SdSJRtBZ&quot;&gt;  例如：天猫双十一，一秒完成多少订单 &lt;/p&gt;&lt;h2&gt;&lt;b&gt;三、QPS与TPS的区别是什么呢？&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;1D9ZtSfx&quot;&gt;举个栗子：假如一个大胃王一秒能吃10个包子，一个女孩子0.1秒能吃1个包子，那么他们是不是一样的呢？答案是否定的，因为这个女孩子不可能在一秒钟吃下10个包子，她可能要吃很久。这个时候这个大胃王就相当于TPS，而这个女孩子则是QPS。虽然很相似，但其实是不同的。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;四、如何提高单机qps&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li data-pid=&quot;uY58OyPf&quot;&gt;1、机器本身&lt;/li&gt;&lt;li data-pid=&quot;gXk8cnwa&quot;&gt;   1.1、cpu&lt;/li&gt;&lt;li data-pid=&quot;k2NkLD09&quot;&gt;   1.2、内存&lt;/li&gt;&lt;li data-pid=&quot;YBQ1OU7z&quot;&gt;   1.3、IO&lt;/li&gt;&lt;li data-pid=&quot;Lz0h1zP0&quot;&gt;   1.4、网络&lt;/li&gt;&lt;li data-pid=&quot;dlcRH8XD&quot;&gt;2、程序代码&lt;/li&gt;&lt;li data-pid=&quot;yKGwlZi2&quot;&gt;3、逻辑架构&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;CJNiI1W7&quot;&gt;&lt;br/&gt;&lt;b&gt;五、机器本身&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;DQ3yc8Fj&quot;&gt;分析的整体方法是由浅入深、层层深入，先看服务器本身的指标有没有遇到短板，这个层面的分析也是相对最容易的，在配置层面（ulimit相关例如fd等）检查没有问题后，从下面四个方面进行分析。&lt;/p&gt;&lt;p data-pid=&quot;Lt2TrQtu&quot;&gt;&lt;b&gt;1、cpu&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;38bJFI6T&quot;&gt;cpu粗面上看有两个指标，当前使用率和负载，使用率反应的是当前cpu使用的情况，而负载反应的是cpu任务的队列情况，也就是说任务排队情况。一般cpu使用率在70%以下，负载在0.7*核心数以下，cpu的指标就算正常。&lt;/p&gt;&lt;p data-pid=&quot;tSARVuqf&quot;&gt;也有例外情况得分析cpu的详细指标，在运维小米消息系统的一个模块时，服务器用的是阿里云的ecs，整体cpu利用率不到30%，但业务就是跑不上量，和肖坤同学查后发现cpu0的软中断极高，单核经常打到100%，继续查后发现网络中断都在cpu0上无法自动负载，和阿里云工程师确认后是所在机型不支持网卡多队列造成的，最终定位cpu的单核瓶颈造成了业务整体瓶颈，如下图：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-53cb963b59758218634c5e10fb198c9a_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1316&quot; data-rawheight=&quot;202&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-53cb963b59758218634c5e10fb198c9a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1316&quot; data-rawheight=&quot;202&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-53cb963b59758218634c5e10fb198c9a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-53cb963b59758218634c5e10fb198c9a_b.png&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;-FlZkcu-&quot;&gt;cpu用满的解决办法简单粗暴，在程序无bug的前提下，换机型加机器，cpu本身没单独加过。&lt;/p&gt;&lt;p data-pid=&quot;ZFVWNJP9&quot;&gt;&lt;b&gt;2、内存&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;nXd16GEX&quot;&gt;内存常规看的是使用率。这个在做cdn的小文件缓存时遇到过，当时用的是ats，发现程序经常重启，业务跟着抖动，查日志后发现系统OOM了，当内存快要被占满的时候，kernel直接把ats的进程给杀掉，然后报out of socket memory，留的截图如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-424e39bf40f4897471b696dd9ebf2e0c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1464&quot; data-rawheight=&quot;350&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-424e39bf40f4897471b696dd9ebf2e0c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1464&quot; data-rawheight=&quot;350&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-424e39bf40f4897471b696dd9ebf2e0c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-424e39bf40f4897471b696dd9ebf2e0c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;En2QoZDr&quot;&gt;同样，在应用层没有优化空间时，那就加内存吧！！&lt;/p&gt;&lt;p data-pid=&quot;EsBYJkx0&quot;&gt;&lt;b&gt;3、IO&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;sCI9zbj7&quot;&gt;IO主要指硬盘，一般用iostat -kdx 1看各种指标，当 %util超过50%，且偶发到100%，这说明磁盘肯定是到瓶颈了。&lt;/p&gt;&lt;p data-pid=&quot;92giMpqt&quot;&gt;要进一步查看是否由于IO问题造成了系统堵塞可以用vmstat 1 查看，下图b对应因IO而block的进程数量。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c456232d43b2704a529fe8ea5ba3e3e8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1360&quot; data-rawheight=&quot;228&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-c456232d43b2704a529fe8ea5ba3e3e8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1360&quot; data-rawheight=&quot;228&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-c456232d43b2704a529fe8ea5ba3e3e8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c456232d43b2704a529fe8ea5ba3e3e8_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;phg2ZDpx&quot;&gt;这个在新浪做图片业务时遇到过，是一个源站的裁图业务，设计上为了避免重复裁图，在本地硬盘上存了一份近7天的数据，由于用python写的，没有像JVM那种内存管理机制，所有的IO都在硬盘上。有一天业务突然挂了，和开发查了2个多小时未果，中间调整了各种参数，紧急扩容了两台机器依然不起作用，服务的IO高我们是知道的，查看IO数据和历史差不多，就没往那方面深考虑，后邀请经验颇多的徐焱同学参与排查，当机立断将IO处理逻辑由硬盘迁到内存上，IO立马下来了，服务恢复。&lt;/p&gt;&lt;p data-pid=&quot;OP4d22Jp&quot;&gt;IO问题也得综合的解决，一般从程序逻辑到服务器都要改造，程序上把重IO的逻辑放在内存，服务器上加SSD吧。&lt;/p&gt;&lt;p data-pid=&quot;p1heTqag&quot;&gt;&lt;b&gt;4、网络&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;r7_BL4kO&quot;&gt;网络主要是看出、入口流量，要做好监控，当网卡流量跑平了，那么业务就出问题了。&lt;/p&gt;&lt;p data-pid=&quot;KmV83EYr&quot;&gt;同样在运维图片业务时遇到过网卡跑满的情况，是一个图片（小文件）的源站业务，突然就开始各种5XX告警，查后5XX并无规律，继而查网卡发现出口流量跑满了，继续分析，虽然网卡是千兆的，但按理就cdn的几个二级回源点回源，不至于跑满，将文件大小拿出来分析后，发现开发的同学为了省事儿，将带有随机数几十M的apk升级包放这里了，真是坑！！&lt;/p&gt;&lt;p data-pid=&quot;nGp1cwCd&quot;&gt;网卡的解决方式很多，做bond和换万兆网卡（交换机要支持），当前的情况我们后来改了业务逻辑，大于多少M时强制走大文件服务。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;六、程序代码&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;HkWfAPRu&quot;&gt;当查了cpu、内存、IO、网络都没什么问题，就可以和开发好好掰扯掰扯了，为什么服务器本身没什么压力，量却跑不上去，不要以为开发写的程序都很优良，人无完人何况是人写出来的程序呢？&lt;/p&gt;&lt;p data-pid=&quot;8jqzIP72&quot;&gt;很多时候就是程序或框架本身的问题跑不上去量，这个过程运维还是要协助开发分析代码逻辑的，是不是程序cpu和内存使用的不合理？是不是线程池跑慢了？是不是用的同步没改异步？要把代码执行的所有逻辑环节一一分析，找出瓶颈点，解决掉，常用的方法是日志埋点或者用专业的apm工具做钻取分析。&lt;/p&gt;&lt;p data-pid=&quot;-j6HuYaa&quot;&gt;如果暂时不好解决，可以考虑&lt;b&gt;是不是可以跑一下多实例&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;七、逻辑架构&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;HypPvJR0&quot;&gt;发展至今，微服务架构设计已成为大型互联网应用的标配，各模块间通过HTTP、RPC等相互依赖调用，如果查完服务器、程序依然没有问题，再往深处走就得协同开发分析系统架构了，这也是微服务系统下的一个特色，不是因为服务器或者程序本身bug造成了业务瓶颈，而是某个模块的短板造成了整个业务吞吐量上不去，这个很好理解，模块中甚至有很多接口用的是公网外部服务，慢是正常的。&lt;/p&gt;&lt;p data-pid=&quot;LsHV1oob&quot;&gt;具体分析上，从一次完整的请求分析一遍所有模块调用，从头到尾理一遍外部依赖的上下游资源和调用关系，外部资源包括api接口、DB、队列等，然后在每个点做埋点日志，将数据进行分析，我们在线上用这种方法不知道分析出了多少瓶颈。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;如果某个模块没有做好降级熔断，再加上程序的执行是堵塞的，一个模块慢拖累整个请求，进而QPS上来后拖夸整个系统的例子很多，在这种情况下，如果瓶颈模块依赖的接口是别的部门或外网资源，加多少服务器都解决不了问题，进行改造吧。&lt;/b&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cf2c9f5753bbe470d56126d38476871f</guid>
<title>聊聊 K8S：K8S 集群搭建实战</title>
<link>https://toutiao.io/k/qap844a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2&gt;&lt;span&gt;一、环境准备&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;1.1 硬件要求&lt;/span&gt;&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;序号&lt;/th&gt;&lt;th&gt;硬件&lt;/th&gt;&lt;th&gt;硬件&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;CPU&lt;/td&gt;&lt;td&gt;至少2核&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;内存&lt;/td&gt;&lt;td&gt;至少2G&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;磁盘&lt;/td&gt;&lt;td&gt;至少50G&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;span&gt;1.2 集群节点&lt;/span&gt;&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;主机名&lt;/th&gt;&lt;th&gt;主机IP&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;k8s-master01&lt;/td&gt;&lt;td&gt;10.211.55.15&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node01&lt;/td&gt;&lt;td&gt;10.211.55.16&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node02&lt;/td&gt;&lt;td&gt;10.211.55.17&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node03&lt;/td&gt;&lt;td&gt;10.211.55.18&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;span&gt;二、下载 centos&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;centos下载地址：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://mirrors.aliyun.com/centos/7/isos/x86_64/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;推荐大家使用 centos7.6 以上版本&lt;/p&gt;&lt;p&gt;查看 centos 系统版本命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cat /etc/centos-release&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置阿里云 yum 源：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 1.下载安装wget &lt;/span&gt;&lt;br/&gt;yum install -y wget &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 2.备份默认的yum &lt;/span&gt;&lt;br/&gt;mv /etc/yum.repos.d /etc/yum.repos.d.backup &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 3.设置新的yum目录 &lt;/span&gt;&lt;br/&gt;mkdir -p /etc/yum.repos.d &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 4.下载阿里yum配置到该目录中，选择对应版本 &lt;/span&gt;&lt;br/&gt;wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 5.更新epel源为阿里云epel源 &lt;/span&gt;&lt;br/&gt;mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup &lt;br/&gt;mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel- testing.repo.backup&lt;br/&gt;wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel- 7.repo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 6.重建缓存 &lt;/span&gt;&lt;br/&gt;yum clean all yum makecache &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 7.看一下yum仓库有多少包 &lt;/span&gt;&lt;br/&gt;yum repolist &lt;br/&gt;yum update&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;升级系统内核&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm &lt;br/&gt;yum --enablerepo=elrepo-kernel install -y kernel&lt;span&gt;-lt&lt;/span&gt; &lt;br/&gt;grep initrd16 /boot/grub2/grub.cfg &lt;br/&gt;grub2-set-default 0&lt;br/&gt;reboot&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看centos系统内核命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;uname -r &lt;br/&gt;uname -a&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看CPU命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lscpu&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看内存命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;free &lt;br/&gt;free -h&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看硬盘信息：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;fdisk -l&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;三、centos7 系统配置&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;3.1 关闭防火墙&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;systemctl stop firewalld &lt;br/&gt;systemctl &lt;span&gt;disable&lt;/span&gt; firewalld&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.2 关闭 selinux&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;sed -i &lt;span&gt;&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;&lt;/span&gt; /etc/sysconfig/selinux&lt;br/&gt;setenforce 0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.3 网桥过滤&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;vi /etc/sysctl.conf &lt;br/&gt;&lt;br/&gt;net.bridge.bridge-nf-call-ip6tables = 1 &lt;br/&gt;net.bridge.bridge-nf-call-iptables = 1 &lt;br/&gt;net.bridge.bridge-nf-call-arptables = 1 &lt;br/&gt;net.ipv4.ip_forward=1 net.ipv4.ip_forward_use_pmtu = 0 &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 生效命令 &lt;/span&gt;&lt;br/&gt;sysctl --system&lt;br/&gt;&lt;span&gt;# 查看效果 &lt;/span&gt;&lt;br/&gt;sysctl -a|grep &lt;span&gt;&quot;ip_forward&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.4 开启 IPVS&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 安装IPVS &lt;/span&gt;&lt;br/&gt;yum -y install ipset ipvsdm&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 编译ipvs.modules文件&lt;/span&gt;&lt;br/&gt;vi /etc/sysconfig/modules/ipvs.modules&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 文件内容如下&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#!/bin/bash &lt;/span&gt;&lt;br/&gt;modprobe -- ip_vs &lt;br/&gt;modprobe -- ip_vs_rr &lt;br/&gt;modprobe -- ip_vs_wrr &lt;br/&gt;modprobe -- ip_vs_sh &lt;br/&gt;modprobe -- nf_conntrack_ipv4&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 赋予权限并执行 &lt;/span&gt;&lt;br/&gt;chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;amp;&amp;amp; bash /etc/sysconfig/modules/ipvs.modules &amp;amp;&amp;amp;lsmod | grep -e ip_vs -e nf_conntrack_ipv4&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 重启电脑，检查是否生效&lt;/span&gt;&lt;br/&gt;reboot &lt;br/&gt;lsmod | grep ip_vs_rr&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.5 同步时间&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 安装软件&lt;/span&gt;&lt;br/&gt;yum -y install ntpdate&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 向阿里云服务器同步时间&lt;/span&gt;&lt;br/&gt;ntpdate time1.aliyun.com&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 删除本地时间并设置时区为上海&lt;/span&gt;&lt;br/&gt;rm -rf /etc/localtime &lt;br/&gt;ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 查看时间 &lt;/span&gt;&lt;br/&gt;date -R || date&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.6 命令补全&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 安装bash-completion &lt;/span&gt;&lt;br/&gt;yum -y install bash-completion bash-completion-extras &lt;br/&gt;&lt;span&gt;# 使用bash-completion &lt;/span&gt;&lt;br/&gt;&lt;span&gt;source&lt;/span&gt; /etc/profile.d/bash_completion.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.7 关闭 swap 分区&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 临时关闭&lt;/span&gt;&lt;br/&gt;swapoff -a&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 永久关闭&lt;/span&gt;&lt;br/&gt;vi /etc/fstab&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 将文件中的/dev/mapper/centos-swap这行代码注释掉&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# /dev/mapper/centos-swap swap swap defaults 0 0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 确认swap已经关闭：若swap行都显示 0 则表示关闭成功&lt;/span&gt;&lt;br/&gt;free -m&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.8 hosts 配置&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;vi /etc/hosts&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 文件内容如下: &lt;/span&gt;&lt;br/&gt;10.211.55.15 k8s-master01 &lt;br/&gt;10.211.55.16 k8s-node01 &lt;br/&gt;10.211.55.17 k8s-node02 &lt;br/&gt;10.211.55.18 k8s-node03&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;四、安装 docker&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;4.1 阿里云开发者平台&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;开发者平台官网地址：可以参考阿里云官网提供的docker安装教程进行安装。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;https://www.aliyun.com/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.2 安装 docker 前置条件&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;yum install -y yum-utils device-mapper-persistent-data lvm2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.3 添加源&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo &lt;br/&gt;&lt;br/&gt;yum makecache fast&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.4 查看 docker 更新版本&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;yum list docker-ce --showduplicates | sort -r&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.5 安装 docker 最新版本&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;yum -y install docker-ce&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 安装指定版本： &lt;/span&gt;&lt;br/&gt;yum -y install docker-ce-18.09.8&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.6 开启 docker 服务&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;systemctl start docker&lt;br/&gt;&lt;br/&gt;systemctl status docker&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.7 安装阿里云镜像加速器&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&lt;span&gt;&#x27;EOF&#x27;&lt;/span&gt; &lt;br/&gt;{ &lt;br/&gt;    &lt;span&gt;&quot;registry-mirrors&quot;&lt;/span&gt;: [&lt;span&gt;&quot;自己的阿里云镜像加速地址&quot;&lt;/span&gt;] &lt;br/&gt;}&lt;br/&gt;EOF&lt;br/&gt;&lt;br/&gt;systemctl daemon-reload &lt;br/&gt;systemctl restart docker&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.8 设置 docker 开机启动服务&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;systemctl &lt;span&gt;enable&lt;/span&gt; docker&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.9 修改 Cgroup Driver&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 修改daemon.json，新增：&lt;/span&gt;&lt;br/&gt;vi /etc/docker/daemon.json&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&quot;exec-opts&quot;&lt;/span&gt;: [&lt;span&gt;&quot;native.cgroupdriver=systemd&quot;&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 重启docker服务&lt;/span&gt;&lt;br/&gt;systemctl daemon-reload&lt;br/&gt;systemctl restart docker&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 查看修改后状态&lt;/span&gt;&lt;br/&gt;docker info | grep Cgroup&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;修改cgroupdriver是为了消除安装k8s集群时的告警：&lt;br/&gt;[WARNING IsDockerSystemdCheck]:&lt;br/&gt;detected “cgroupfs” as the Docker cgroup driver. The recommended driver is “systemd”.&lt;br/&gt;Please follow the guide at https://kubernetes.io/docs/setup/cri/……&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;span&gt;4.10 复习 docker 常用命令&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;docker -v &lt;br/&gt;docker version &lt;br/&gt;docker info&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;五、使用 kubeadm 快速安装&lt;/span&gt;&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;软件&lt;/th&gt;&lt;th&gt;kubeadm&lt;/th&gt;&lt;th&gt;kubelet&lt;/th&gt;&lt;th&gt;kubectl&lt;/th&gt;&lt;th&gt;docker-ce&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;版本&lt;/td&gt;&lt;td&gt;初始化集群管理集群，版本：1.17.5&lt;/td&gt;&lt;td&gt;用于接收api-server指令，对pod生命周期进行管理，版本：1.17.5&lt;/td&gt;&lt;td&gt;集群命令行管理工具，版本：1.17.5&lt;/td&gt;&lt;td&gt;推荐使用版本：19.03.8&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;span&gt;5.1 安装 yum 源&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;5.1.1 新建 repo 文件&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; vi /etc/yum.repos.d/kubernetes.repo&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.1.2 文件内容&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;[kubernetes]&lt;br/&gt;name=Kubernetes&lt;br/&gt;baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64&lt;br/&gt;enabled=1&lt;br/&gt;gpgcheck=1&lt;br/&gt;repo_gpgcheck=1&lt;br/&gt;gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg&lt;br/&gt;       https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果有报错，则把 gpgcheck、repo_gpgcheck 的值设置成0。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5.1.3 更新缓存&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;yum clean all &lt;br/&gt;yum -y makecache&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.1.4 验证源是否可用&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;yum list | grep kubeadm &lt;br/&gt;&lt;span&gt;# 如果提示要验证yum-key.gpg是否可用，输入y。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 查找到kubeadm。显示版本&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.1.5 查看 k8s 版本&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; yum list kubelet --showduplicates | sort -r&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.1.6 安装 k8s-1.17.5&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; yum install -y kubelet-1.17.5 kubeadm-1.17.5 kubectl-1.17.5&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.2 设置 kubelet&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;5.2.1 增加配置信息&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 如果不配置kubelet，可能会导致K8S集群无法启动。为实现docker使用的cgroupdriver与kubelet 使用的cgroup的一致性。&lt;/span&gt;&lt;br/&gt;vi /etc/sysconfig/kubelet &lt;br/&gt;&lt;br/&gt;KUBELET_EXTRA_ARGS=&lt;span&gt;&quot;--cgroup-driver=systemd&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.2.2 设置开机启动&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;systemctl &lt;span&gt;enable&lt;/span&gt; kubelet&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.3 初始化镜像&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;如果是第一次安装k8s，手里没有备份好的镜像，可以执行如下操作。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5.3.1 查看安装集群需要的镜像&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;kubeadm config images list&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.3.2 编写执行脚本&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;mkdir -p /data&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; /data &lt;br/&gt;vi k8s.1.17.5-images.sh&lt;br/&gt;&lt;br/&gt;images=( &lt;br/&gt;    kube-apiserver:v1.17.5 &lt;br/&gt;    kube-controller-manager:v1.17.5 &lt;br/&gt;    kube-scheduler:v1.17.5 &lt;br/&gt;    kube-proxy:v1.17.5 &lt;br/&gt;    pause:3.1 &lt;br/&gt;    etcd:3.4.3-0 &lt;br/&gt;    coredns:1.6.5 &lt;br/&gt;)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; imageName &lt;span&gt;in&lt;/span&gt; &lt;span&gt;${images[@]}&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;do&lt;/span&gt;&lt;br/&gt;    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/&lt;span&gt;$imageName&lt;/span&gt;&lt;br/&gt;    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/&lt;span&gt;$imageName&lt;/span&gt; k8s.gcr.io/&lt;span&gt;$imageName&lt;/span&gt;&lt;br/&gt;    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/&lt;span&gt;$imageName&lt;/span&gt;&lt;br/&gt;&lt;span&gt;done&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.3.3 执行脚本&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;cd&lt;/span&gt; /data &lt;br/&gt;&lt;span&gt;# 给脚本授权 &lt;/span&gt;&lt;br/&gt;chmod +x images.sh&lt;br/&gt;&lt;span&gt;# 执行脚本 &lt;/span&gt;&lt;br/&gt;./k8s.1.17.5-images.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.3.4 保存镜像&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;docker save -o k8s.1.17.5.tar \ &lt;br/&gt;k8s.gcr.io/kube-proxy:v1.17.5 \ &lt;br/&gt;k8s.gcr.io/kube-apiserver:v1.17.5 \ &lt;br/&gt;k8s.gcr.io/kube-controller-manager:v1.17.5 \ &lt;br/&gt;k8s.gcr.io/kube-scheduler:v1.17.5 \ &lt;br/&gt;k8s.gcr.io/coredns:1.6.5 \ &lt;br/&gt;k8s.gcr.io/etcd:3.4.3-0 \ &lt;br/&gt;k8s.gcr.io/pause:3.1 \&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.3.5 导入镜像&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;导入master节点镜像tar包&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# master节点需要全部镜像 &lt;/span&gt;&lt;br/&gt;docker load -i k8s.1.17.5.tar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;导入node节点镜像tar包&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# node节点需要kube-proxy:v1.17.5和pause:3.1,2个镜像 &lt;/span&gt;&lt;br/&gt;docker load -i k8s.1.17.5.node.tar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.4 初始化集群&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;配置k8s集群网络&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5.4.1 calico 官网地址&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 官网下载地址： &lt;/span&gt;&lt;br/&gt;https://docs.projectcalico.org/v3.14/manifests/calico.yaml &lt;br/&gt;&lt;span&gt;# github地址： &lt;/span&gt;&lt;br/&gt;https://github.com/projectcalico/calico &lt;br/&gt;&lt;span&gt;# 镜像下载： &lt;/span&gt;&lt;br/&gt;docker pull calico/cni:v3.14.2 &lt;br/&gt;docker pull calico/pod2daemon-flexvol:v3.14.2 &lt;br/&gt;docker pull calico/node:v3.14.2 &lt;br/&gt;docker pull calico/kube-controllers:v3.14.2&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 配置hostname： &lt;/span&gt;&lt;br/&gt;hostnamectl &lt;span&gt;set&lt;/span&gt;-hostname k8s-master01&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2980769230769231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/80icw67Ot0qIYpv4hZfPSMYw8wkhEJktk1PbbO3ffvpQDmVw9V7PTEEWSH67HvibRC34QBicnvylAJL6EhmPjNYhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1872&quot; title=&quot;在这里插入图片描述&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;需要这么多镜像&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5.4.2 初始化集群信息:calico网络&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;kubeadm init --apiserver-advertise-address=192.168.198.156 --kubernetes- version v1.17.5 --service-cidr=10.1.0.0/16 --pod-network-cidr=10.81.0.0/16&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;192.168.198.156 替换成你主节点的IP地址。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39148073022312374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/80icw67Ot0qIYpv4hZfPSMYw8wkhEJktkQzd6LYcBtuwN4q53HMOLy23zNxyibWYLZ6CBribtIxYHV0HAF9NY2qiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1972&quot; title=&quot;在这里插入图片描述&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;5.4.3 执行配置命令&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;mkdir -p &lt;span&gt;$HOME&lt;/span&gt;/.kube &lt;br/&gt;sudo cp -i /etc/kubernetes/admin.conf &lt;span&gt;$HOME&lt;/span&gt;/.kube/config &lt;br/&gt;sudo chown $(id -u):$(id -g) &lt;span&gt;$HOME&lt;/span&gt;/.kube/config&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.4.4 node节点加入集群信息&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;kubeadm join 192.168.198.186:6443 --token kksfgq.b9bhf82y35ufw4np \ &lt;br/&gt;    --discovery-token-ca-cert-hash sha256:e1e347e6db1db5c13fcdc2c7d51a2f9029100a4cc13c2d89a2dbfa5077f5b07f&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.4.5 kubectl命令自动补全&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;source &amp;lt;(kubectl completion bash)&quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile &lt;br/&gt;&lt;span&gt;source&lt;/span&gt; ~/.bash_profile&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.4.6 测试 k8s 集群环境&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;kubectl get nodes&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.20722135007849293&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/80icw67Ot0qIYpv4hZfPSMYw8wkhEJktkPL30TibkwnOictmZXJBV14xfwz7QiaU86Jas0RmbQ5YnLowWK1syLg01Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot; title=&quot;在这里插入图片描述&quot;/&gt;&lt;/figure&gt;&lt;br/&gt;发现集群的节点都是 NotReady 的状态，这是因为你还没有应用 calico 网络的配置。&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a79060eb3a9cb298f0258a3b4bcdda7b</guid>
<title>从程序员到架构师开发运维场景实战篇：一人一套测试环境</title>
<link>https://toutiao.io/k/vcznb5m</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100032171&quot; data-ratio=&quot;0.271875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/RQueXibgo0KP4mOic3fe02VJ1icuIJYLUIUUENk0IicFwiaWH8ZOV5RkvNoBoictFGmBqTtbwHpwybGMZ6e0vlPgpBsw/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/h1&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;一人一套测试环境&lt;/h1&gt;&lt;p data-track=&quot;6&quot;&gt;&lt;span&gt;本篇开始讲第16次架构经历：一人一套测试环境。同样，先介绍业务场景。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;业务场景：&lt;span&gt;测试环境何时能释放出来使用&lt;/span&gt;&lt;/h1&gt;&lt;p data-track=&quot;9&quot;&gt;&lt;span&gt;当时，公司的基础设施使用的是虚拟机，而且还未迁移到容器。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;10&quot;&gt;&lt;span&gt;公司一共搭建了3套测试环境。之所以是3套而不是只有1套，主要是考虑到多个项目同时进行时需要分开测试和分开上线，而3套测试环境在一定程度上可以避免这些并行项目因为排队而导致延期的情况。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;13&quot;&gt;&lt;span&gt;一般来说，研发流程是这样的：需求宣讲——&amp;gt;接口/方案设计——&amp;gt;功能开发——&amp;gt;联调——&amp;gt;测试——&amp;gt;预生产——&amp;gt;上线。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;15&quot;&gt;&lt;span&gt;在这3套测试环境中，一套专门用于联调，另外两套专门用于测试。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;16&quot;&gt;&lt;span&gt;那么，一套联调测试环境够用吗？答案是不太够，因为经常需要排期使用。那么两套测试环境够用吗？也不够。这里讲一个具体的例子。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;18&quot;&gt;&lt;span&gt;之前有一个项目已经进入测试环节，功能测试反馈没问题后等待第三方验收，可是第三方的验收拖了很久，以至于不得不继续占用测试环境。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;20&quot;&gt;&lt;span&gt;之后又有一个小的迭代项目要求一周后上线，并且还有一个上百人做的超大项目刚进入测试阶段，所以又需要两套测试环境。此时测试环境就不够用了，而且联调环境都被征用了。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;23&quot;&gt;&lt;span&gt;然后，业务方还提了一个加急需求要求当周上线，于是出现了下面这段对话。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;甲：“我们有个紧急需求这周四要求上线，你们能不能把测试1让一&lt;/p&gt;&lt;p data-track=&quot;185&quot;&gt;下？”&lt;/p&gt;&lt;p data-track=&quot;186&quot;&gt;乙：“不行，我们这个功能需要测试一周，下周四就要上线了。如果让&lt;/p&gt;&lt;p data-track=&quot;187&quot;&gt;给你们一天，我们就要延期一天上线了。”&lt;/p&gt;&lt;p data-track=&quot;188&quot;&gt;甲：“其实是两天……”乙：“那更不行了。要不你问问XX，他们在做的项目周期长，应该能让&lt;/p&gt;&lt;p data-track=&quot;189&quot;&gt;给你们两天。”&lt;/p&gt;&lt;p data-track=&quot;190&quot;&gt;甲：“不行吧，那个项目号称公司第一优先级，我开不了口啊！”&lt;/p&gt;&lt;p data-track=&quot;191&quot;&gt;乙：“不然你们就用测试3？”&lt;/p&gt;&lt;p data-track=&quot;192&quot;&gt;甲：“我哪敢啊，那个验收项目是领导亲自跟的。”&lt;/p&gt;&lt;p data-track=&quot;193&quot;&gt;乙：“可是我们也不能延期啊，业务方都确认过很多次了，我们也跟合&lt;/p&gt;&lt;p data-track=&quot;194&quot;&gt;作伙伴谈好了。”&lt;/p&gt;&lt;p data-track=&quot;195&quot;&gt;“……”&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-track=&quot;37&quot;&gt;&lt;span&gt;最终就是因为抢测试环境的问题，导致紧急需求上不了线，有苦也没地方说。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;39&quot;&gt;&lt;span&gt;在实际工作中，一个组同时开展好几个项目的情况经常发生，尤其是业务对接方比较多的小组。为此，公司决定着手解决这个问题。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;解决思路&lt;/h1&gt;&lt;p data-track=&quot;42&quot;&gt;&lt;span&gt;公司希望达成的目标是可以快速搭建一套新的测试环境，用完马上销毁。针对这个目标，解决思路如下。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;44&quot;&gt;&lt;span&gt;1）利用容器的特性，在几秒内快速启动服务实例。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;45&quot;&gt;&lt;span&gt;2）将测试环境需要搭建的服务通过容器实例部署起来。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;46&quot;&gt;&lt;span&gt;3）将这些容器通过Kubernetes管理（编排）起来。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;47&quot;&gt;&lt;span&gt;那么，这一整套测试环境都需要包含哪些服务器？&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;48&quot;&gt;&lt;span&gt;如图17-1所示，每套测试环境中需要部署的组件有MQ、ZooKeeper、Redis、配置中心、数据库、API服务、后台服务、网关等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44507575757575757&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQueXibgo0KMg4yILhYgmXSyH56CcWHEoVxIHI4kecJwNRa7vDOq2sGMwqtwrTyLeibc7nibLkficdOtorCIBlib0NA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1056&quot;/&gt;&lt;/p&gt;&lt;p&gt;• 图17-1 测试环境服务范围&lt;/p&gt;&lt;p data-track=&quot;50&quot;&gt;&lt;span&gt;决定使用容器灵活创建测试环境后，项目组针对每一套容器环境是包含全部组件还是部分特定组件调研了很久。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;52&quot;&gt;&lt;span&gt;用过容器的开发人员都知道，在容器中部署MQ、ZooKeeper、Redis或配置中心是一件很简单的事情。比如使用容器部署Redis，只需要输入以下两行命令即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;55&quot;&gt;&lt;span&gt;使用容器部署ZooKeeper、MQ的方法与之类似。不过这里有点不一样的是，公司所有的中间件基本都不是纯净的开源版本。比如配置中心，公司并没有使用Spring Cloud Config，也没有使用Nacos，而是使用了一个完全自研的产品（MQ和网关都是自研的），它既不支持容器，也不支持单机版。而ZooKeeper、Redis是基于开源版本的，并在服务端加了一些封装。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;60&quot;&gt;&lt;span&gt;此时，客户端强制使用一个自定义的客户端SDK，且使用的中间件必须强绑定配置中心。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;62&quot;&gt;&lt;span&gt;之前评估过，如果把这些中间件部署到容器中，将会出现以下3种情况。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;63&quot;&gt;&lt;span&gt;1）中间件服务端改造成本大。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;64&quot;&gt;&lt;span&gt;2）客户端的SDK需要进行大量的改造。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;65&quot;&gt;&lt;span&gt;3）最重要的一点是，会导致容器环境与其他普通环境存在很大的代码差异。因此，即使在容器中测试没问题，也需要在其他环境中进行大量测试，此时容器测试环境就没有什么意义了。为此，最终决定在容器测试环境中只部署独立的API服务或后端服务，其他组件直接重用测试环境的中间件，如图17-2所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6292042657916325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQueXibgo0KMg4yILhYgmXSyH56CcWHEokj3ly6gRwqfiaUFBmb8m9THqz5xVsgTbycmXKYnVLOwk3iaRsdIG1DLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1219&quot;/&gt;&lt;/p&gt;&lt;p&gt;• 图17-2 容器测试环境示意图&lt;/p&gt;&lt;p data-track=&quot;70&quot;&gt;&lt;span&gt;基于以上设计方案，如果想快速部署一套独立的测试环境，一般需要解决哪些问题？因为容器测试环境复用了测试环境的一些组件，所以需要解决以下5个问题。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;API服务间的隔离&lt;/h1&gt;&lt;p data-track=&quot;74&quot;&gt;&lt;span&gt;如何确保容器环境的客户端请求能到达容器的API服务，而非仍然到达测试环境的API服务？&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;76&quot;&gt;&lt;span&gt;当 时 的 系 统 是 这 么 设 计 的 ：每 一 个 API 服 务 中 都 会 带 一 个 配 置 项channelID，然后客户端每次访问API时都需要加上一个channelID参数；网关层接收到这个请求后，会根据channelID将请求匹配到对应channelID的API服务中（当然URL也需要匹配），此时整个隔离过程就比较简单了。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;80&quot;&gt;&lt;span&gt;先介绍一下具体的研发流程：每个项目都有一个JIRA Issue，而XXX123就是一个JIRA Issue ID，项目组会为每个项目单独创建一套容器测试环境，于是这个Issue ID自然而然地被当作了环境标识。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;82&quot;&gt;&lt;span&gt;再回到API的隔离。一般来说，客户端会把上面的channelID放在配置文件中，等到容器测试时再打一个包，此包中channelID的配置值为JIRA IssueID，也就是容器测试环境的标识。最后，会在容器环境打包API服务时，自动将channelID的配置值改为JIRA Issue ID。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;86&quot;&gt;&lt;span&gt;具体的调用请求处理过程如图17-3所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5680224403927069&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQueXibgo0KMg4yILhYgmXSyH56CcWHEocWOibRMfibrCqOPuZMong41lIQhXf9iaSpRl2YJiaoqrXXFf1wEZufu0aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1426&quot;/&gt;&lt;/p&gt;&lt;p&gt;• 图17-3 利用channelID导向不同容器环境&lt;/p&gt;&lt;p data-track=&quot;88&quot;&gt;&lt;span&gt;在图17-3中，网关层接收到所有请求后，会根据不同的channelID将请求分发到不同的API服务中。这样，API服务的隔离问题就解决了。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;后台服务间的隔离&lt;/h1&gt;&lt;p data-track=&quot;91&quot;&gt;&lt;span&gt;如何确保容器环境部署的服务只调用容器服务，而测试环境虚拟机的服务只调用虚拟机服务？&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;93&quot;&gt;&lt;span&gt;当时的系统是这样设计的：在打包RPC服务时，将一个环境变量env的值设置为容器测试环境的标识，也就是JIRA Issue ID，比如XXX123；然后每个RPC服务注册ZooKeeper时，将在Service的metadata中加一个tag参数，并设置tag的值为XXX123。之后，RPC服务只会调用同样tag的服务。这是什么意思？&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;96&quot;&gt;&lt;span&gt;比如测试环境中有3个UserService，其中，一个是测试环境的虚拟机，两个 是 容 器 测 试 环 境 部 署 的 UserService 。前 者 的 tag 为 空 ， 后 两 个 容 器UserService 注 册 ZooKeeper 后 ， 它 们 的 tag 值 分 别 为 XXX123 和 XXX245 。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;99&quot;&gt;&lt;span&gt;OrderService调用UserService时，如果OrderService也是XXX123这个容器环境的服务，则它只会调用带XXX123这个tag值的UserService；如果它是正常虚拟机的服务，则只会调用不带tag值的UserService。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;102&quot;&gt;&lt;span&gt;这样，后台RPC服务间的隔离问题就解决了。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;103&quot;&gt;&lt;span&gt;以上要点中并没有提及ZooKeeper，因为API和RPC服务的隔离问题解决后，ZooKeeper的数据隔离问题基本也解决了。其实，ZooKeeper在每套测试环境中起到的作用只是API服务和RPC服务的注册发现。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;MQ和Redis隔离&lt;/h1&gt;&lt;p data-track=&quot;107&quot;&gt;&lt;span&gt;如何确保容器环境和虚拟机之间的MQ消息不互串、Redis数据不互相影响？&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;109&quot;&gt;&lt;span&gt;项目组本来想使用类似tag的概念来解决这个问题，通过封装MQ与Redis的客户端代码让它们只消费同样env值的服务生产的内容。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;111&quot;&gt;&lt;span&gt;但是，还需要遵循以下原则：尽量减少容器测试环境与正式环境的代码差异。针对这个问题，项目组讨论了很久，最终认为没必要专门定制，只需保证走测试流程时使用不同的测试数据就可以了（不同的项目一般都会使用不同的测试数据，包括不同的用户、不同的订单等），这样基本不会再出现不同容器测试环境流转相同MQ消息、缓存数据的情况了。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;116&quot;&gt;&lt;span&gt;当然，Redis中的一些通用数据还是会被共同使用，比如城市的基础数据。不过这些数据即使在不同容器测试环境之间互相串联也没关系。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;配置中心数据的隔离&lt;/h1&gt;&lt;p data-track=&quot;119&quot;&gt;&lt;span&gt;对于配置中心是这样设计的：如果容器测试环境的值与虚拟机测试环境的值不一样，不会修改配置中心的值，而是在容器环境的启动脚本中动态加上针对各自容器测试环境的环境变量，然后在业务代码中启动环境变量优先级高于配置中心的参数，这样就确保了容器测试环境的特殊配置，从而不影响配置中心的值。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;数据库间的数据隔离&lt;/h1&gt;&lt;p data-track=&quot;124&quot;&gt;&lt;span&gt;数据库互相影响的情况一般有两种。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;1.测试数据互相影响&lt;/h1&gt;&lt;p data-track=&quot;126&quot;&gt;&lt;span&gt;这一点其实和MQ、Redis的情况一样，只需要保证测试数据各自独立即可。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;2.数据库结构兼容问题&lt;/h1&gt;&lt;p data-track=&quot;129&quot;&gt;&lt;span&gt;比如同时进行两个项目，XXX123这个项目删除了user这张表的updateFlag字段，而XXX100这个项目还需要使用这个字段，此时如果两个项目共用一个数据库就会互相影响。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;132&quot;&gt;&lt;span&gt;其实，这一点在第2章中介绍过：每次版本迭代时，都需要保证数据库可以兼容前一个版本的代码。比如刚刚那个例子，不能直接在XXX123中删掉updateFlag字段，而是等XXX100上线后再删掉。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;135&quot;&gt;&lt;span&gt;关于数据库兼容前一个版本，再举一个例子。比如在XXX123这个项目中增加了一个字段updateUserID，且该字段的值为必填，否则数据就会报错；而XXX100这个项目并不会更新updateUserID，这样如果XXX123读到了XXX100写入的数据就会报错。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;139&quot;&gt;&lt;span&gt;这种情况该如何处理？此时可以在项目XXX123中增加一些代码让它可以容错，即允许updateUserID为空。也可以将项目XXX123与项目XXX100部署到不同测试环境的数据库中。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;142&quot;&gt;&lt;span&gt;解决完上面这些问题后，基于现有测试环境快速部署多套容器环境的方案设计就基本完成了，接下来再简单介绍一下使用流程。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-track=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;◆&lt;/span&gt;&lt;/strong&gt;使用流程&lt;/h1&gt;&lt;p data-track=&quot;145&quot;&gt;&lt;span&gt;使用流程是这样的，每次新建一个工程时（新的API或者后台服务）都会在Jenkins上配置一个Job，而这个Job需要接受以下3个参数。1）Branch，即需要部署的代码分支。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;147&quot;&gt;&lt;span&gt;2）测试环境test1/test2/test3（已经有3个测试环境，它决定了部署需要使用哪个测试环境的中间件）。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;149&quot;&gt;&lt;span&gt;3）容器测试环境标识，也就是JIRA Issue ID。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;150&quot;&gt;&lt;span&gt;这 个 Job 启 动 时 ， 需 要 调 用 一 个 小 工 具 ， 而 这 个 小 工 具 需 要 连 接Kubernetes创建namespace（=JIRA Issue ID），然后在namespace中增加一个pod（pod中运行的是专门为JIRA Issue ID打包的代码）。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;153&quot;&gt;&lt;span&gt;在 做 某 个 项 目 时 ， 假 设 XXX123 需 要 使 用 UserAPI 、 UserService 、OrderService 、 ProductService ， 就 会 配 置 一 个 新 的 Jenkins Job 来 联 动UserAPI、UserService、OrderService、ProductService的Job，并且将各个服务对应的Branch、测试环境和JIRA Issue ID传入Jenkins Job（这些值都通过硬编码配置在新的Jenkins Job中）。之后，每次点击这个项目的JenkinsJob时，就可以对其容器测试环境进行部署了。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;159&quot;&gt;&lt;span&gt;当然，如果项目成员想自己部署一套环境，此时只需单独配置一个新的Jenkins Job，并找一个不一样的（比如开发任务的Issue ID）容器测试环境标识即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;162&quot;&gt;&lt;span&gt;通过这套方案可以实现图17-4所示的效果，项目基本不会再陷入因缺少测试环境而延期的境地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5918803418803419&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQueXibgo0KMg4yILhYgmXSyH56CcWHEoEWOqU4eFvjdp33Q5ibEKQIsM46gaoylj0SpSqHCIT2icbHDGVsCInLxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;936&quot;/&gt;&lt;/p&gt;&lt;p&gt;• 图17-4 每个需求独立的测试进程&lt;/p&gt;&lt;p data-track=&quot;180&quot;&gt;&lt;span&gt;一人一套测试环境的方案成本其实非常小，因为代码改动很少，且一两周就可以把整个方案实施完成（时间主要用在申请服务器和部署Kubernetes上）。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;167&quot;&gt;&lt;span&gt;此方案上线后，得到了使用者的一致好评，尤其是测试人员，这里总结了3点原因。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;169&quot;&gt;&lt;span&gt;1）再也不需要因为协调测试环境花很多时间沟通了。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;170&quot;&gt;&lt;span&gt;2）一键就可以将相关服务部署起来，不再需要一个服务一个服务地部署。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;172&quot;&gt;&lt;span&gt;3）因为容器测试环境的搭建很简单，开发人员每完成一个功能，测试人员即可介入测试，而不需要等整个项目提测后再介入，大大缩短了提测后的测试周期。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;175&quot;&gt;&lt;span&gt;总体来说，这个项目的效果非常好，而且之后的容器测试环境基本上保持人均一套的使用状态。&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;175&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-track=&quot;52&quot;&gt;&lt;span&gt;来源&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://www.toutiao.com/article/7161611269383012868/?log_from=7277336160927_1667523457944&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;“IT大咖说”欢迎广大技术人员投稿，投稿邮箱：aliang@itdks.com&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94329&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100032172&quot; data-ratio=&quot;0.3208955223880597&quot; data-type=&quot;gif&quot; data-w=&quot;134&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/RQueXibgo0KNrzPFsmantZnUrxKJEnD7KM7UXUc0VMDKiaguau3uRf6zm5msPR7GJgQKViaUBU1fIXu2qj5IdOa8A/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;来都来了，走啥走，留个言呗~&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; IT大咖说  | &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 关于版权&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;由“IT大咖说（ID：itdakashuo）”原创的文章，转载时请注明作者、出处及微信公众号。&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;投稿、约稿、转载请加微信：ITDKS10（备注：投稿），茉莉小姐姐会及时与您联系！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;感谢您对IT大咖说的热心支持！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;blockquote&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6f5a66d3f2e4646c5604e6520a42ba1b</guid>
<title>Python 类型系统发展史</title>
<link>https://toutiao.io/k/gcene6a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-content&quot;&gt;
      &lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;我已经使用 Python 超过 12 年，在国内可能是应用 Python 最广泛的前公司工作超过 6 年，接触无数 Python 项目，其中少的几千行，多的几百万行 Python 代码。除此之外我非常关注类型系统的发展，可以说我见证了类型系统从无到有，从有到优，发展到今天的整个过程，借着 Python 3.11 发布，就想到了这么个主题。&lt;/p&gt;
&lt;h3 id=&quot;我从反对到支持&quot;&gt;我从反对到支持&lt;/h3&gt;
&lt;p&gt;最有意思的是，刚有类型注解时我是坚决的反对者，而现在我是坚定的支持者。为什么呢？&lt;/p&gt;
&lt;p&gt;有很多静态语言开发者吐槽 Python 经常引用的一句话是:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt; 动态类型一时爽，代码重构火葬场 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一直到现在对这句话我还是嗤之以鼻，我认为【代码重构火葬场】的根源还是开发者的能力和编程规范的问题，静态语言只是相对于动态语言，提供了门槛不让你犯错。而使用 Python 语言的开发者的上限和下限区别就太大了，这也是 Python 在国内发展缓慢的原因之一：优秀的 Python 工程师实在太少了。&lt;/p&gt;
&lt;p&gt;从前公司离职前我印象里没有一个项目的代码是有类型注解的，尤其是那些上百万行的大型项目可以说完全没有类型注解，其中很多逻辑极为复杂，代码逻辑诡异，我甚至觉得以当时的 Python 类型系统并不能完美的支持前公司把代码都加上类型注解。在早些年，这些项目都是相对稳定迭代的，我认为如果团队的开发者对 Python 熟悉，有好的编程习惯和工作态度，在加上有一些工作流保证代码质量，没有类型注解不是什么问题。&lt;/p&gt;
&lt;p&gt;以我阅读过很多优秀开源项目和认识一些非常优秀的 Python 工程师的经历来说，代码大面积重构一般难点在两个地方:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;很多高效率、聪明的代码非常简短难懂，如果能力不够是很难理解和维护它的。&lt;/li&gt;
&lt;li&gt;很多能力一般的开发者写的代码设计有问题、细节考虑不周，这样的代码在野蛮生长的过程中满足了产品开发进度要求，但是在不断地留坑。这些代码几经迭代，参数、逻辑非常混乱复杂，能力稍差的维护者不敢动它的逻辑。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;所以长久的、从根本的解决代码的质量问题其实要编写可维护的代码，而不要滥用或者错误使用语言特性，尤其是不要炫技。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好，回到正题。我一开始反对 Python 引入类型系统，是因为我用的就是你 Python 这个动态语言的不受约束，写代码爽 (没写过 Python 你是真不知道有多爽)，你别管我怎么传值，反正我能高效完成开发，也能利用例如标准库、元类、描述符、自省、IPython 等等语言特性和工具快速迭代，正常下班。结果你现在告诉我，你推荐我对参数、变量、返回值标注类型？你 Python 不想着提高你的运行效率还要求我使用静态语言的类型系统，那我为什么不直接用静态语言？隔壁 Golang 它不香吗？&lt;/p&gt;
&lt;p&gt;我逐渐地「被动」接受和支持，是因为现在 Python 开发者能力的下限真的是一年不如一年，如果没有类型注解的约束，很多 Python 开发者写的代码真的一言难尽。我是从大概 17 年开始认为类型注解应该是一个好的商业应用的必选，在前公司我就深刻的感受到新来的很多工程师对 Python 的熟悉程度、写代码的能力等等越来越差，如果你关注微博和前公司的话，一定见过 #XX 崩了 #这个热搜。其实有大部分都是人为的问题，事实上，如果有一个好的类型注解支持其中大部分是可以避免的。&lt;/p&gt;
&lt;h3 id=&quot;为什么需要类型系统&quot;&gt;为什么需要类型系统&lt;/h3&gt;
&lt;p&gt;在这里先解释一下，文章会多次的使用【类型系统】、【类型注解】等词，你可能感觉很混乱。我觉得它们是不一样的，我认为【类型系统】是实现检查对特定类型的使用是否符合该类型的规范的系统，【类型注解】是 Python 语言特性，类型系统除此之外还有执行类型检查的工具（做类型检查器，Type Checker，本文提到的是 mypy，一会还会介绍还有其他的工具)。&lt;/p&gt;
&lt;p&gt;Python 是一种动态类型语言，Python 解释器仅在代码运行时进行类型检查，并且变量的类型在其生命周期内是进行更改的:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# `type()`返回对象的类型&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;string&#x27;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 改变了变量的类型&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# OK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;s&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Error  因为字符串和数字不能相加&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;                                 &lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;s&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;int&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相比于静态语言（像 Java、C/C++ 和 Go 等）在编译期间就能发现并改进代码问题，动态语言直到运行时才会发现这类类型问题，所以就会出现低级错误把整站搞挂了这种直觉上让开发者不能理解和接受的事件。&lt;/p&gt;
&lt;p&gt;现在 Python 社区的推荐的实践是「给 Python 代码标注类型，再配合静态检查工具，那么也会向静态语言那样在代码提交前就发现问题」，这样的方式已经在其他语言里面获得了成功，如 Javascript 到 TypeScript、PHP 到 Hack。&lt;/p&gt;
&lt;p&gt;Python 这种动态语言在阅读代码时很考验编程经验，即便是再资深的 Python 工程师也需要通过代码了解变量的类型，而加了类型注解后，对于开发者理解和维护会容易很多。&lt;/p&gt;
&lt;p&gt;另外一个需要类型注解的理由是它给 IDE（如 Pycharm、VS Code 等）提供了尽量多甚至是准确的信息，这对于形参的类型提示、检查、批量处理等操作来说如有神助。&lt;/p&gt;
&lt;p&gt;接下来，按着时间线，来了解下 Python 类型系统的发展，看看类型注解都能帮助 Python 开发者做什么。&lt;/p&gt;
&lt;h3 id=&quot;PEP3107–FunctionAnnotations&quot;&gt;PEP 3107 – Function Annotations&lt;/h3&gt;
&lt;p&gt;从 Python 3.0 开始就加入了 PEP 3107 里面设计的新的语法「可以给函数参数和返回值注释」:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;this is str&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;this is int&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 形参冒号后面的就是注释&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__annotations__&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 注释信息存在__annotations__里面&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;a&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;this is str&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;b&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;this is int&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__annotations__&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;a&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;b&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;2&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# OK 即便不符合注释内容也无所谓&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 使用-&amp;gt; 后面对返回值注释&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;a&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 返回值只是注释&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;a&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;aa&#x27;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__annotations__&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;a&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;b&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;return&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个语法里面的注释的值是表达式，所以可以是字符串、类名、类型名、变量等等，但这些注释并不附加没有任何语义，也不会做检查。&lt;/p&gt;
&lt;h3 id=&quot;mypy&quot;&gt;mypy&lt;/h3&gt;
&lt;p&gt;mypy 是作者 Jukka Lehtosalo 2012 年为了完成博士学位论文而做的，当时 Jukka 认为 Python 效率低下，且应该有健全的静态类型，所以它实现了这个 Python 的变种。注意此时 mypy 的定位并不是静态检查工具。&lt;/p&gt;
&lt;p&gt;在 PyCon 2013 时，Jukka 做了&amp;lt;Mypy: Optional Static Typing for Python&amp;gt; 这个分享，之后和 Python 之父 Guido van Rossum (以下都简称 Guido) 对于它的课题以及 mypy 进行了交流，发现 Guido 也在思考类似的问题 (但是没有行动)。最终他接受了 Guido 的建议:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让 mypy 的语法和 CPython 兼容。&lt;/li&gt;
&lt;li&gt;可以使用普通的 Python 解释器直接运行 mypy 程序。&lt;/li&gt;
&lt;li&gt;加强 mypy 的类型检查器部分的实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对，到这里 mypy 就开始走向了静态检查工具的方向，如果早期你使用它就会发现它其实叫做&lt;code&gt;mypy-lang&lt;/code&gt;，现在已经不在提&lt;code&gt;lang&lt;/code&gt;，而是&lt;code&gt;static analyzer&lt;/code&gt;或者&lt;code&gt;lint tool&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接着 Guido 邀请他访问 Dropbox (Guido13-19 年在 Dropbox）并最终给了 Jukka 工作机会。由于类型系统需要解决和讨论的问题还很多，入职后 Jukka 并没有专门从事 mypy 的工作，但是对 mypy 研究一直在进行。&lt;/p&gt;
&lt;h3 id=&quot;Guido的类型注解提案&quot;&gt;Guido 的类型注解提案&lt;/h3&gt;
&lt;p&gt;在 Europython 2014 上 simplejson 作者 Bob Ippolito 做了&amp;lt;What can python learn from Haskell?&amp;gt; 的演讲，提到了一些类型方面的建议，之后 Guido、Jukka 和 Bob 进行了深入交流。其中「用 mypy 语法给函数注解」这个方案获得了 Guido 认可。&lt;/p&gt;
&lt;p&gt;不久，Guido 在 Python 邮件组提交了提案:&amp;lt;Proposal: Use mypy syntax for function annotations&amp;gt;(延伸阅读链接 2)。&lt;/p&gt;
&lt;p&gt;在这个最初的草案中，明确了把 mypy 作为一个类型检查的 linter，而不是作为编译器或解释器，并确定了类型注解的定位:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在运行时不能进行数据类型推断。&lt;/li&gt;
&lt;li&gt;类型注解会被解释器当作注释丢弃掉。类型注解功能是为了提高开发者的体验而生的，所以不应该影响原有程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类型标注风格在一开始就已经确定了:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;word_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#type: Dict[str, int]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;形参&lt;code&gt;input: &amp;lt;type&amp;gt;&lt;/code&gt;是语言支持时的语法 (Python 3), 而&lt;code&gt;#type: type&lt;/code&gt;这种注释是当语言不支持语法的兼容用法 (Python 2)。&lt;/p&gt;
&lt;p&gt;这个提案中还提到了很多内容，例如把 mypy 的 typing.py 文件拷贝到标准库、调整 PEP 3107 的注释方式等，就不挨个介绍了。在之后的 PEP 里面还有具体介绍最终的实现。&lt;/p&gt;
&lt;h3 id=&quot;类型注解的PEP提案(Python3.5)&quot;&gt;类型注解的 PEP 提案 (Python 3.5)&lt;/h3&gt;
&lt;p&gt;接着，Guido 和 Ivan Levkivskyi 的&amp;lt;PEP 483 – The Theory of Type Hints&amp;gt;(延伸阅读链接 3, 也就是类型注解理论) 和 Guido、Jukka 和Łukasz Langa 的&amp;lt;PEP 484 – Type Hints&amp;gt;(延伸阅读链接 4，类型注解最主要的 PEP) 提交了。这些 PEP 提案在 Python 3.5 实现了，所以从 Python 3.5 开始正式支持类型注解了。&lt;/p&gt;
&lt;p&gt;先统一一下对&lt;type hints=&quot;&quot;&gt;的翻译。它直译「类型提示」，也有人翻译成「类型标注」，而我一般使用「类型注解」，主要是因为 Python 的中文官网是这么用的 (延伸阅读 5)，所以我认为还是以官网用词为准。&lt;/type&gt;&lt;/p&gt;
&lt;p&gt;虽然 PEP 的 id 更小，但是在我的理解 PEP 483 是 PEP 484 的理论补充，对于开发者来说，类型注解主要看 PEP 484。这个 PEP 的内容很多，我把它总结成如下几部分内容。&lt;/p&gt;
&lt;h3 id=&quot;类型注解不会强制推行&quot;&gt;类型注解不会强制推行&lt;/h3&gt;
&lt;p&gt;PEP 明确提出，Python 将永远保留动态类型语言的特性，而类型注解将来也不会作为默认策略强制推行。走到现在，可以看到它的进化非常平缓，非侵入性的，如果你不关注可以完全忽略这部分内容。&lt;/p&gt;
&lt;h4 id=&quot;确定了注解语法&quot;&gt;确定了注解语法&lt;/h4&gt;
&lt;p&gt;如之前 Guido 在邮件组的草案一样，我就不重复了。另外一个重要语法是用中括号把类型括起来表现容器 / 泛型结构的元素类型:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 因为有键和值2个类型&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;T&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;泛型和TypeVar&quot;&gt;泛型和 TypeVar&lt;/h4&gt;
&lt;p&gt;在之前的文章 &lt;a href=&quot;https://www.dongwm.com/post/python-3-11-new-typing-feature/#PEP646–VariadicGenerics&quot;&gt;Python 3.11 新加入的和类型系统相关的新特性: PEP 646 – Variadic Generics&lt;/a&gt; 已经介绍过了泛型和 TypeVar，这里不重复了。&lt;/p&gt;
&lt;h4 id=&quot;用Union组合多个类型&quot;&gt;用 Union 组合多个类型&lt;/h4&gt;
&lt;p&gt;当单个参数可以是多个类型时可以使用 Union 组合。不过在 Python 3.10 的 PEP 604 中提供了新的&lt;code&gt;|&lt;/code&gt;语法，更 Pythonic，具体的可以看我之前的文章 &lt;a href=&quot;https://www.dongwm.com/post/python-3-10-new-typing-feature/#PEP604:NewTypeUnionOperator&quot;&gt;Python 3.10 新加入的四个和类型系统相关的新特性: PEP 604: New Type Union Operator&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Stub文件&quot;&gt;Stub 文件&lt;/h4&gt;
&lt;p&gt;Stub (存根) 文件是包含类型注解的文件，这些注解仅供类型检查器使用，而不是在运行时使用。&lt;/p&gt;
&lt;p&gt;Stub 文件通常后缀是&lt;code&gt;pyi&lt;/code&gt;，你可以理解为在 Stub 文件中重新定义了一遍相关的函数 / 类 / 变量等内容的类型，而原来的&lt;code&gt;.py&lt;/code&gt;源文件不受影响。&lt;/p&gt;
&lt;p&gt;这个 Stub 机制之后还会专门说。&lt;/p&gt;
&lt;h4 id=&quot;后记&quot;&gt;后记&lt;/h4&gt;
&lt;p&gt;Python 3.5 发布后，Guido、Jukka 等人组建了一个专门的专门研究 mypy，并且对它做了很多性能改进，在 Python 3.6 发布时 (也就是 16 年底)，Dropbox 完成了超过 400 万行代码的类型注解，mypy 在各个团队里面迅速普及。当时他们还专门写了一篇文章介绍这个事情，这个是 Python 类型系统发展的里程碑事件了 (延伸阅读 16)。&lt;/p&gt;
&lt;h3 id=&quot;Python3.6&quot;&gt;Python3.6&lt;/h3&gt;
&lt;p&gt;Python 3 的大的 feature 除了类型系统就是 asyncio，Python 3.6 里面除了引入异步生成器、异步推导式以外还加入了非常好用的 f-string。这个版本是我心目中第一个可以用生产环境的 Python 3 版本。&lt;/p&gt;
&lt;p&gt;不过这个版本里面对于类型注解相关的新特性只有&amp;lt;PEP 526 – Syntax for Variable Annotations&amp;gt;(延伸阅读链接 6)。在 Python 3.5 引入的类型注解主要是针对函数 / 方法的，而 PEP 526 是针对于变量的:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;my_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 不带默认值&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 带默认值&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# OK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;other_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;a&#x27;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Rejected&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;some_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicStarship&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;captain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;Picard&#x27;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# 带默认值的实例变量&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;# 不带不认知&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 使用ClassVar就是类变量&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python3.7&quot;&gt;Python 3.7&lt;/h3&gt;
&lt;p&gt;这个版本中主要有 2 个类型系统的修改。&lt;/p&gt;
&lt;h4 id=&quot;PEP560–Coresupportfortypingmoduleandgenerictypes&quot;&gt;PEP 560 – Core support for typing module and generic types&lt;/h4&gt;
&lt;p&gt;最初 PEP 484 中的设计是不会对核心 CPython 解释器进行任何和类型标注相关更改，完全由标准库 typing 和外部的 mypy 等静态检查工具来完成。但是可以想象这会存在潜在的限制，在很多特殊场景里面需要做很多 hack，存在一些不好解决的 bug，还有性能问题 (具体的可以看 PEP 内容，延伸阅读链接 7)。但是此时已经有大量的开发者在使用类型注解，所以官方决定解除这个限制，可以通过添加两个特殊方法&lt;code&gt;__class_getitem__&lt;/code&gt;和&lt;code&gt;__mro_entries__&lt;/code&gt;以便更好地支持泛型类型。&lt;/p&gt;
&lt;p&gt;这 2 个新方法日常基本接触不到，就不介绍了。&lt;/p&gt;
&lt;h4 id=&quot;PEP563–PostponedEvaluationofAnnotations&quot;&gt;PEP 563 – Postponed Evaluation of Annotations&lt;/h4&gt;
&lt;p&gt;当时的类型注解是在函数 / 变量定义时进行评估的，这就有了 2 个问题，第一个是类型注解是在模块导入时执行的，它的执行是需要有开销的，而第二个是向前引用 (Forward References) 的问题，我举个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 期待返回Item类型的结果&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;ne&quot;&gt;NameError&lt;/span&gt;                                 &lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;ne&quot;&gt;NameError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;Item&#x27;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样用会报错，因为如果按照方法定义时计算的话，那个时候 Item 类还没有创建成功呢。&lt;/p&gt;
&lt;p&gt;所以这个 PEP 是建议更改函数 / 变量注释的评估 (Evaluate) 时机，以便在函数 / 变量定义时不再对它们进行评估：会先在&lt;code&gt;__annotations__&lt;/code&gt;以字符串形式保存在之后评估:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotations&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__annotations__&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;cls&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;Item&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;return&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;Item&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 返回值被自动保存成了字符串类型&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_type_hints&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_type_hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;cls&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;return&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 别担心，typing提供方法获得正确的类型&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Python 3.11 之前，解决这个问题的其中一个方案就是使用&lt;code&gt;from __future__ import annotations&lt;/code&gt;（当然，还可以直接让返回值的标注为字符串）。&lt;/p&gt;
&lt;p&gt;当时说这个 PEP 的评估设想会在 Python 3.10 作为默认的方案，但是在 Python 3.11 引入了新的 Self 类型更好的解决了这个问题，具体的可以看我之前写的: &lt;a href=&quot;https://www.dongwm.com/post/python-3-11-new-typing-feature/#PEP673–SelfType&quot;&gt;Python 3.11 新加入的和类型系统相关的新特性: PEP 673 – Self Type&lt;/a&gt; ，这个方案也就被抛弃了，Python 3.11 的会更新日志里明确说了「PEP 563 may not be the future」，这个计划已经被无限期的搁置。&lt;/p&gt;
&lt;h3 id=&quot;Python3.8&quot;&gt;Python 3.8&lt;/h3&gt;
&lt;p&gt;这个版本是类型系统的一次重大的更新，它主要包含如下几个新功能。&lt;/p&gt;
&lt;h4 id=&quot;PEP589–TypedDict:TypeHintsforDictionarieswithaFixedSetofKeys&quot;&gt;PEP 589 – TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys&lt;/h4&gt;
&lt;p&gt;新增的&lt;code&gt;TypedDict&lt;/code&gt;是具有一组固定键的字典的类型提示，非常有价值。具体的在 &lt;a href=&quot;https://www.dongwm.com/post/python-3-11-new-typing-feature/#PEP655%E2%80%93MarkingindividualTypedDictitemsasrequiredorpotentially-missing&quot;&gt;Python 3.11 新加入的和类型系统相关的新特性: PEP 655 – Marking individual TypedDict items as required or potentially-missing&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;PEP586–LiteralTypes&quot;&gt;PEP 586 – Literal Types&lt;/h4&gt;
&lt;p&gt;之前定义参数或者返回使用的都是抽象的类型，而这个字面值类型可以直接定义一 (多) 个具体的可选值:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accepts_only_four&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;accepts_only_four&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# OK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;accepts_only_four&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Rejected&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;accepts_only_four&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Rejected  这就是字面量哈，需要直接写值，不能通过计算&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;r+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;


&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;1.py&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;r&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# OK&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;1.py&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;xx&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Rejected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;1.py&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;b&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Rejected&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;union_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 其实这就是一个字面量值的组合罢了&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;union_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# OK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;union_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;foo&#x27;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# OK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;union_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# OK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;union_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Rejected&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后那个&lt;code&gt;union_var&lt;/code&gt;其实就是个演示，实际工作中用处不大。&lt;/p&gt;
&lt;h4 id=&quot;PEP591–Addingafinalqualifiertotyping&quot;&gt;PEP 591 – Adding a final qualifier to typing&lt;/h4&gt;
&lt;p&gt;这个 PEP 定义了 Final 限定符，可以通过 final 装饰器或者 Final 作为类型注解。它用在:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被声明的方法不能被重载&lt;/li&gt;
&lt;li&gt;被声明的类不能被继承 (子类化)&lt;/li&gt;
&lt;li&gt;被声明的属性或者变量不能被重新设值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个 PEP 比较好理解，直接粘贴 PEP 里面的例子一看就懂了:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Final&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@final&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Error: Cannot inherit from final class &quot;Base&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;RATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DEFAULT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;RATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Error: can&#x27;t assign to final attribute&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Error: can&#x27;t override a final attribute&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个我没实际用过，总之如果你不希望某个方法 / 函数 / 类 / 属性 / 变量等内容的类型在运行过程中被修改就可以使用它。&lt;/p&gt;
&lt;h4 id=&quot;PEP544–Protocols:Structuralsubtyping(staticducktyping)&quot;&gt;PEP 544 – Protocols: Structural subtyping (static duck typing)&lt;/h4&gt;
&lt;p&gt;鸭子类型（duck typing）在程序设计中是动态类型的一种风格。 在这种风格中，「当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子」。&lt;/p&gt;
&lt;p&gt;所以在 Python 中编写接收特定输入的函数时，我们只需要关心该函数输入的行为、属性，而不是该函数输入的显式类型:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Quack.&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sonorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;sonorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述例子里，&lt;code&gt;sonorize&lt;/code&gt;函数并不关心形参 duck 的类型，只要它有&lt;code&gt;quack&lt;/code&gt;方法就可以让函数正常执行。&lt;/p&gt;
&lt;p&gt;在过去，类型注解只支持上述直接方案 (可以传入当前类 Duck 或者其子类)，这个 PEP 提供了&lt;code&gt;Protocol&lt;/code&gt;来对鸭子类型进行支持。那么只需要判断是否有同样的结构就可以了，这种类型叫做&lt;code&gt;Structural subtyping&lt;/code&gt;。看个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Quacker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OtherDuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QUACK!&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sonorize2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Quacker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;sonorize2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sonorize2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OtherDuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义类时只需要继承 Protocol 就可以声明一个接口类型，当遇到接口类型的注解时，只要接收到的对象实现了接口类型的所有方法，即可通过类型注解的检查。所以&lt;code&gt;Duck&lt;/code&gt;和&lt;code&gt;OtherDuck&lt;/code&gt;都可以作为参数传给&lt;code&gt;sonorize2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你学过 Golang 的接口，会更好理解这个 PEP 的内容。mypy 官网列出了很多使用 protocol 的例子，链接是延伸阅读 9。&lt;/p&gt;
&lt;h3 id=&quot;Python3.9&quot;&gt;Python 3.9&lt;/h3&gt;
&lt;p&gt;这个版本中只有一个主要的类型系统的新特性，就是&amp;lt;PEP 585 – Type Hinting Generics In Standard Collections&amp;gt;。&lt;/p&gt;
&lt;p&gt;原来注解使用的 Collection 类型 (列表、字典、集合、元组、collections 模块内的结构等等) 需要从 typing 模块显示的 import，举个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CounterType&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;key&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CounterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;abbddx&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而现在这些类型已经原生支持泛型了，可以直接当做类型用了:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dct2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;key&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;abbddx&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样非常方便。&lt;/p&gt;
&lt;h3 id=&quot;Python3.10&quot;&gt;Python 3.10&lt;/h3&gt;
&lt;p&gt;这个版本有四个新的特性，我之前专门写过: &lt;a href=&quot;https://www.dongwm.com/post/python-3-10-new-typing-feature/&quot;&gt;Python 3.10 新加入的四个和类型系统相关的新特性&lt;/a&gt; ，具体的可以看原文。简单说一下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PEP 604: New Type Union Operator。可以使用 &lt;code&gt;|&lt;/code&gt; 组合不同的类型。&lt;/li&gt;
&lt;li&gt;PEP 613: TypeAlias。「类型别名」这个类型可以帮助分辨是 TypeAlias，还是普通的赋值。&lt;/li&gt;
&lt;li&gt;PEP 647: User-Defined Type Guards。当某个参数类型本来可以符合多个类型，但是在特定的条件里可以让类型范围缩小。&lt;/li&gt;
&lt;li&gt;PEP 612 – Parameter Specification Variables。新增的 &lt;code&gt;typing.ParamSpec&lt;/code&gt; 帮助我们方便【引用】位置和关键字参数，而这个 PEP 另外一个新增的 &lt;code&gt;typing.Concatenate&lt;/code&gt; 是提供一种添加、删除或转换另一个可调用对象的参数的能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Python3.11&quot;&gt;Python 3.11&lt;/h3&gt;
&lt;p&gt;刚刚发布的版本，这个版本有五个新的特性，我之前专门写过: &lt;a href=&quot;https://www.dongwm.com/post/python-3-11-new-typing-feature/&quot;&gt;Python 3.11 新加入的和类型系统相关的新特性&lt;/a&gt; ，具体的可以看原文。这个就简单说一下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PEP 646 – Variadic Generics。可变数量的泛型类型，之前介绍的 TypeVar 是单个泛型，而这次引入了数量不确定的泛型类型 TypeVarTuple。&lt;/li&gt;
&lt;li&gt;PEP 673 – Self Type。解决前面提到的向前引用的问题，替代 PEP 563 成为解决这个问题的新方案。&lt;/li&gt;
&lt;li&gt;PEP 675 – Arbitrary Literal String Type。&lt;code&gt;LiteralString&lt;/code&gt; 可以表示任意的字符串字面值，不像前面的 typing.Literal，只能规定几个对应的确定的值，灵活性太差。&lt;/li&gt;
&lt;li&gt;PEP 681 – Data Class Transforms。实现了一种把普通类的一些和标准库 dataclasses 相似的行为的类型检查自动转换的方案。&lt;/li&gt;
&lt;li&gt;PEP 655 – Marking individual TypedDict items as required or potentially-missing。可以明确 &lt;code&gt;TypedDict&lt;/code&gt; 内各个键值的类型是可选还是必选。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python 的发展史目前就到这里了，相信未来很有很多路要走，我们继续期待吧。接着说一点和类型系统相关的主题。&lt;/p&gt;
&lt;h3 id=&quot;类型注解代码存放分发方案&quot;&gt;类型注解代码存放分发方案&lt;/h3&gt;
&lt;p&gt;类型注解通常是直接在源码上加，但是也有相当多的项目使用 Stub 文件把代码和注解分开，这里继续展开 Stub 文件的存放分发方案。&lt;/p&gt;
&lt;p&gt;受「懒」、「不喜欢」、「兼容性考虑」或者「不认可类型」注解等等原因影响，我们日常使用的大部分库是没有注解的的，知名项目的情况越来越好，但是一些相对受众少不太知名的项目类型注解没有或者极少。&lt;/p&gt;
&lt;p&gt;为此缓解这个问题，社区提供了 Library stub 机制，也就是 PEP 561 (延伸阅读链接 11)。Stub 文件为库的公共接口定义类型注解，使静态检查器可以覆盖到对应库的使用。这样可以在第三方引入库这个角度缓解开发者的负担，也间接提供了很多范例帮助开发者快速熟悉和理解类型注解，甚至可以作为借鉴。&lt;/p&gt;
&lt;p&gt;这部分通过不同的知名项目来了解一下这类文件的存放方案，从而了解这个机制。&lt;/p&gt;
&lt;h4 id=&quot;1.将它们与代码放在同一目录中&quot;&gt;1. 将它们与代码放在同一目录中&lt;/h4&gt;
&lt;p&gt;这个方式是最简单的，开发者和静态检查工具可以容易的发现，当然在开源项目中见得不多，主要场景是私有的代码库。日志库 &lt;a href=&quot;https://github.com/Delgan/loguru&quot;&gt;loguru&lt;/a&gt; 就是这样的:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;err&quot;&gt;➜&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loguru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weiming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dong&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;626&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loguru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weiming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dong&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loguru&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyi&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;loguru 库使用&lt;code&gt;__init__.py&lt;/code&gt;暴露接口，所以它把想要注解的都放在了&lt;code&gt;loguru/__init__.pyi&lt;/code&gt;里。&lt;/p&gt;
&lt;h4 id=&quot;2.上传到PYPI&quot;&gt;2. 上传到 PYPI&lt;/h4&gt;
&lt;p&gt;另外一个方式就是把 Stub 文件独立作为一个包上传到 PYPI，可以在需要时安装或者更新它。把类型注解和原始代码完全分离，这样的好处是不会影响原来的代码逻辑，这样既不影响开发的进度和效率，也能尽量的覆盖类型标注。不过这主要是一个管理的问题，类型注解理论上永远都会滞后于代码迭代。&lt;/p&gt;
&lt;p&gt;我觉得这个方案比较好的场景是完成注解的开发者不是源项目的开发者，更适合社区行为。例如 Django 就没有官方的类型标注支持，如果你需要的话可以使用 &lt;a href=&quot;https://github.com/typeddjango/django-stubs&quot;&gt;django-stubs&lt;/a&gt; ，它的目录结构和 Django 的一样，但只有&lt;code&gt;.pyi&lt;/code&gt;文件标注类型。&lt;/p&gt;
&lt;h4 id=&quot;3.官方的typeshed&quot;&gt;3. 官方的 typeshed&lt;/h4&gt;
&lt;p&gt;社区提供了一个独立的项目 typeshed (&lt;a href=&quot;https://github.com/python/typeshed)，包含了Python标准库(stdlib目录)及一些第三方库(stubs目录)的stub文件。&quot;&gt;https://github.com/python/typeshed)，包含了Python标准库(stdlib目录)及一些第三方库(stubs目录)的stub文件。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如 Flask-SQLAlchemy、redis、requests 等知名项目。看一个例子了解下这套流程吧:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;https://httpbin.org/post&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;key&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;value&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在一个新的项目中，准备用 requests 这个库，运行 mypy 会报如下错误:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;err&quot;&gt;➜&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;➜&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mypy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reuquests_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reuquests_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stubs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;requests&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incompatible&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reuquests_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;python3 -m pip install types-requests&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reuquests_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mypy --install-types&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reuquests_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;See&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mypy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readthedocs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;running_mypy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#missing-imports&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Found&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checked&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它会非常明确的告诉你有这样的 Stub 文件，只是还没有安装，安装了再运行 mypy 就好了:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;err&quot;&gt;➜&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;➜&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mypy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reuquests_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个&lt;code&gt;types-requests&lt;/code&gt;库其实就是上面这个 typepushed 里面的 &lt;a href=&quot;https://github.com/python/typeshed/tree/master/stubs/requests&quot;&gt;stubs/requests&lt;/a&gt; ，这是项目自己实现的一个上传 PYPI 功能，具体的可以看 README 页面的说明。&lt;/p&gt;
&lt;h3 id=&quot;typing_extensions&quot;&gt;typing_extensions&lt;/h3&gt;
&lt;p&gt;Python 标准库的 typing 更新受限于 Python 版本发布，如果你想提前使用一些在未来新的版本才会有的特性，可以安装最新版的&lt;code&gt;typing_extensions&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;err&quot;&gt;➜&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing_extensions&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如现在 Python 3.11 才发布，Python 3.12 需要等到明年 10 月份。但是通过&lt;code&gt;typing_extensions&lt;/code&gt;，你可以现在就体验:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;lt;PEP 698 – Override Decorator for Static Typing&amp;gt; 里面的 override。&lt;/li&gt;
&lt;li&gt;&amp;lt;PEP 696 – Type defaults for TypeVarLikes&amp;gt; 里面的 &lt;code&gt;TypeVar&lt;/code&gt;、&lt;code&gt;ParamSpec&lt;/code&gt;、&lt;code&gt;TypeVarTuple&lt;/code&gt; 的默认值。&lt;/li&gt;
&lt;li&gt;&amp;lt;PEP 695 – Type Parameter Syntax&amp;gt; 里面的 &lt;code&gt;infer_variance&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当一个版本发布后，下一个版本的那些 PEP 就或慢慢实现和完善，目前&lt;code&gt;typing_extensions&lt;/code&gt;对 PEP 688、PEP 692 的功能还没实现，需要再等等。当然，受 CPython 解释器限制，也不是下一个版本的每个 PEP 都可以提前体验，可以关注社区对应讨论。&lt;/p&gt;
&lt;h3 id=&quot;其他静态类型检查工具&quot;&gt;其他静态类型检查工具&lt;/h3&gt;
&lt;p&gt;前面我只用了 mypy 这一种官方提供的静态类型检查工具，它是最主流的，但是依然有另外几个工具也值得提一下。&lt;/p&gt;
&lt;p&gt;注：下面这几个我只是列出来，生产环境使用 mypy 永远是第一选择，其他的如果有必要可以作为额外的检查工具。其他的如 Pydantic 这种在运行时强制执行类型检查的我并不赞同所以本文就不涉及了。&lt;/p&gt;
&lt;h4 id=&quot;pyright&quot;&gt;pyright&lt;/h4&gt;
&lt;p&gt;pyright 是微软开源的静态类型检查工具，它是用 TypeScript 编写的，它的特点主要是和 VS Code (毕竟也是微软家的) 的集成 (通过部分功能开源的 Pylance)。&lt;/p&gt;
&lt;h4 id=&quot;pytype&quot;&gt;pytype&lt;/h4&gt;
&lt;p&gt;pytype 是谷歌开源的静态类型检查工具，它没有 mypy 对类型的那么严格的要求，更宽松一些，另外是可以通过代码对没有注解的逻辑进行类型推测。在 PyCon 2019 时，开发者做一个演讲介绍和 mypy 的区别，可以看延伸阅读链接 14，其中举了 2 个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight python3&quot; data-lang=&quot;python3&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;hljs python3&quot;&gt;&lt;span/&gt;&lt;span class=&quot;c1&quot;&gt;# Case 1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PyCon&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# str和int相加其实会报错，pytype会报错，但是mypy不会&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Case 2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PyCon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# mypy会报错，但是pytype会报错&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外我的感受是它的开发迭代更慢，对于社区的响应和支持差 mypy 很多。&lt;/p&gt;
&lt;h4 id=&quot;pyre&quot;&gt;pyre&lt;/h4&gt;
&lt;p&gt;pre 是 Facebook 开源的静态类型检查工具，它的存在感比较低。它的价值按官网说主要是比 mypy 快，因为在大型项目中 mypy 会非常慢，这会让本地的检查非常耗时，不过我暂时没有大型项目的经验这部分不了解。&lt;/p&gt;
&lt;p&gt;pyre 另外一个功能是通过&lt;code&gt;pyre infer&lt;/code&gt;对代码做自动的类型推断，可以直接修改源代码，不过我试了一下效率很差。目前没有可以自动做类型注解的能在生产环境中使用工具，还是人工更靠谱。&lt;/p&gt;
&lt;h3 id=&quot;怎么让自己成为TypeHints专家？&quot;&gt;怎么让自己成为 Type Hints 专家？&lt;/h3&gt;
&lt;p&gt;在我的理解里面:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;typing 模块和 mypy 的官方文档都非常完善，也有对应的例子，熟读和理解它。&lt;/li&gt;
&lt;li&gt;熟悉和类型注解的那些 PEP 提案。&lt;/li&gt;
&lt;li&gt;在自己的项目或者公司小型的 1-2 个项目中实战一下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我认为这样就可以足够了。&lt;/p&gt;
&lt;p&gt;另外我特别推荐 &lt;a href=&quot;https://adamj.eu/&quot;&gt;Adam Johnson&lt;/a&gt; 的博客，里面有很多非常细的类型注解知识点的理解和案例，非常值得去阅读。&lt;/p&gt;
&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;
&lt;p&gt;这些年随着越来越多的库开始使用类型注解，类型注解越来越受到开发者的关注，未来也势必会变得流行。在最后，从一个 Python 开发的角度尝试说服大家成为类型注解的支持者。&lt;/p&gt;
&lt;p&gt;从我的角度，看看当时我不喜欢类型标注的理由吧:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发成本。必须承认给项目引入静态检查增加了学习和完成工作的成本，但是如果从长远得看，它能带来的收益是远大于开发者的付出。Python 不加注解写起来真的很爽，但是出现 bug 的几率高的太多了，即便是现在的我也会时常编写一些会有低级的、类型有关的错误的代码跑到服务器上，等报错了才发现，哎呀，这里没考虑到，然后紧急改一下，而使用类型注解可以在运行前就发现绝大部分这类问题。&lt;/li&gt;
&lt;li&gt;降低了可读性。本来简洁的 Python 代码加了注解就变得很混乱，让你有一种写的不是 Python 的感觉。是的，使用类型注解是一种心理的转变，这个是需要过程适应的，其实如果你写过短短几天，你就会习惯在读代码时忽略对应的类型注解。当然如果你正在关注它的类型，那么类型注解反而直接给你答案而不会自己读逻辑去总结，这个角度反而是提高了代码可读性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我以前写的时候偶尔会遇到对于一些复杂逻辑注解非常难表达的，即便表达出来也会有注解的内容非常冗长、不易理解、类型不准确、不灵活等问题，这个时候特别容易怀疑这个类型注解到底行不行，很劝退。不过后来都解决了，其实是自己对类型注解了解的不够深刻，所以要善用&lt;code&gt;TypeVar+bound&lt;/code&gt;、&lt;code&gt;TypeDict&lt;/code&gt;、&lt;code&gt;Protocol&lt;/code&gt;、&lt;code&gt;Generics&lt;/code&gt;、&lt;code&gt;@overload&lt;/code&gt;等等特性。&lt;/p&gt;
&lt;h3 id=&quot;代码目录&quot;&gt;代码目录&lt;/h3&gt;
&lt;p&gt;本文代码可以在 &lt;a href=&quot;https://github.com/dongweiming/mp/tree/master/2022-10-29&quot;&gt;mp&lt;/a&gt; 项目找到&lt;/p&gt;
&lt;h3 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://mypy-lang.blogspot.com/2012/12/why-mypy-can-be-more-efficient-than.html&quot;&gt;http://mypy-lang.blogspot.com/2012/12/why-mypy-can-be-more-efficient-than.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mail.python.org/pipermail/python-ideas/2014-August/028618.html&quot;&gt;https://mail.python.org/pipermail/python-ideas/2014-August/028618.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0483/&quot;&gt;https://peps.python.org/pep-0483/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0484/&quot;&gt;https://peps.python.org/pep-0484/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/glossary.html&quot;&gt;https://docs.python.org/zh-cn/3/glossary.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0526/&quot;&gt;https://peps.python.org/pep-0526/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0560/&quot;&gt;https://peps.python.org/pep-0560/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0563/&quot;&gt;https://peps.python.org/pep-0563/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mypy.readthedocs.io/en/stable/protocols.html&quot;&gt;https://mypy.readthedocs.io/en/stable/protocols.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0585/&quot;&gt;https://peps.python.org/pep-0585/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0561/&quot;&gt;https://peps.python.org/pep-0561/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/pyright&quot;&gt;https://github.com/microsoft/pyright&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/pytype&quot;&gt;https://github.com/google/pytype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yFcCuinRVnU&amp;amp;t=2300s&quot;&gt;https://www.youtube.com/watch?v=yFcCuinRVnU&amp;amp;t=2300s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/pyre-check&quot;&gt;https://github.com/facebook/pyre-check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python&quot;&gt;https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://adamj.eu/tech/&quot;&gt;https://adamj.eu/tech/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

    &lt;/div&gt;

  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>