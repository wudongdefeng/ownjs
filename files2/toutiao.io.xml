<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>0b3880a3ab51349f33b1dcc8f365a339</guid>
<title>我在京东做研发 | 从好玩到好用，爆火 ChatGPT 前沿分享</title>
<link>https://toutiao.io/k/ylyedwu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-4b594e6693bd6bdb72b79fa4bcf69762c5a.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;| 嘉宾：吴友政，京东集团高级总监、京东科技语音语言算法部负责人。&lt;/p&gt;

&lt;p&gt;2006年中科院自博士毕业后，先后在日本国立信息通信研究机构、英国爱丁堡大学、索尼中国研究院从事自然语言处理相关研究工作，主要聚焦自然语言处理、人机对话、语音识别、机器翻译等前沿技术研究和产品研发，取得了诸多技术突破，累计发表顶级国际会议和期刊论文30余篇，斩获得语音识别（IWSLT2012、IWSLT2013）和自然语言处理（QuAC2021，DROP2022，Multiwoz2022）领域多项国际比赛的冠军。&lt;/p&gt;

&lt;p&gt;在京东，他与团队密切合作打造了言犀人工智能应用平台，为客户提供涵盖客户服务、营销导购、流程自动化的整体智能化解决方案，为京东超5.8亿用户提供智能服务，也为零售、政务、金融、交通等行业提供产品与解决方案，京东集团最高奖【技术金牛奖】获得者。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q1：对话式AI技术是什么？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;吴友政：人机对话系统是通过对话式AI的技术，去解决大众用户和计算机之间的交流障碍问题。我们可以从这4个维度对对话系统进行一些分类，比如说从交互方式的维度，我们的对话系统可以是基于自然语言的交互方式，也可以是基于命令行的交互方式，当然在手机上我们也可以通过触摸屏的方式实现和我们的手机之间的自然的交互。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果从交互模态上进行分类的话，我们的交互可以是基于文本的，也可以是基于语音的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然多模态的交互方式也是非常重要的一种交互方式。如果从交互设备上来看的话，我们和机器之间的交互可以是在电脑上进行，也可以从手机上进行，但是车载的对话系统也是非常重要的交互方式，还包括我们在一些 AR VR的设备上，通过对话的方式实现和设备之间的对话交互。从交互的主动性来看的话，可以是系统主导对话，当然也可以是用户主导的对话，甚至是系统和用户之间轮流主导的对话。&lt;/p&gt;

&lt;p&gt;其实对话技术的发展历史是比较久的，从1966年第一个人机对话系统ELIZA发布至今，对话技术已经经历了接近六七十年的发展历程，ELIZA是MIT人工智能实验室在1966年发布的关于心理咨询方面的人机对话系统，后面每一段时间都会推出一些有代表性的推动对话技术发展的数据集，包括1990年的atis这个数据集，后面还有 multiwoz的数据集，这些数据集的发布都大大的推动了对话技术的发展。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e04a9eba6c0326ea74e3cf2e878ab620ae5.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;从应用层面我们也看到了很多里程碑式的对话系统，像2011年IBM的Watson对话系统，在益智类的比赛中击败了人类，获得了冠军，后面还包括像苹果的Siri的对话系统，以及像亚马逊的echo的音响助手，以及我们在今年的11月份看到了Open AI发布的ChatGPT这一系列的数据集的提出，方法的提出以及应用的发布，我们都可以看到对话技术整个在发展过程中非常大的一些进步。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q2：&lt;/strong&gt; &lt;strong&gt;ChatGPT&lt;/strong&gt;&lt;strong&gt;能做什么？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;吴友政：22年11月份OpenAI发布的Chat GPT对话的系统，结果非常让人的惊艳，在人工智能的技术领域和产业领域都受到了广泛的关注，最重要的原因就是通过一个模型或者是通过一个系统可以实现非常多的NLP的相关的任务。&lt;/p&gt;

&lt;p&gt;像这里展示的，我们可以将一句话解析成一个SQL的查询语言，也可以让其他ChatGPT去撰写一篇文章，比如说这里我给的一些指令是说可以在acl上发表的关于自然语言生成方面的学术论文，它就生成了包括标题、摘要、介绍、方法、结果、结论这一整篇的结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-24b28e93ed0128a77e72e2bdf6a403c97b6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ChatGPT背后的技术原理OPenAI还没有发布，但是InstructGPT是ChatGPT一个基础的模型。因此InstructGPT实际上是把很多的NLP任务都看成了一个语言模型，然后通过增强语言模型的能力去实现多个NLP的任务。增强语言模型有很多方式，包括像改变语言模型结构，在这里面ChatGPT或者是InstructGPT采用的是一个解码器的模型结构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-84418812dfd185b896f6f7b6735c524d096.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;但在这里ChatGPT或者说InstructGPT所采用的方式是从模型生成的，大量的结果中让人工去做两两比较哪个结果会更优，然后通过这种数据去学习模型，最后实现在新的无标注数据上强化学习，让模型进一步得到优化。InstructGPT大致可以分成这三个阶段——&lt;/p&gt;

&lt;p&gt;第一个是预训练的阶段， ChatGPT整体应该是基于GPT-3实现的。&lt;/p&gt;

&lt;p&gt;第二个阶段是fin-tuning的阶段，就是我们说的京条是基于一定数量的标注数据，这里面最左边展示的步骤1，其实就是我们如何构建京条的数据集，以及基于京条的数据集如何去调优或者是京条我们的模型。&lt;/p&gt;

&lt;p&gt;第三个阶段是通过两两比较的数据，我们可以去训练一个奖励模型叫reward model。在第三步我们通过reward model，让模型在一些新的数据上，而且是无标注的数据上进行自我迭代，通过这三步来组成最后的训练模型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;&lt;strong&gt;可以完成哪些&lt;/strong&gt;&lt;strong&gt;任务&lt;/strong&gt; &lt;strong&gt;？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最左边的表格其实列出了ChatGPT可以完成的任务，包括我们生成的任务、开放域的问答，还包括像聊天、摘要、分类、信息抽取等十大类的任务。&lt;/p&gt;

&lt;p&gt;但实际上在每一个大类里，其实又分很多细分的小类。比如说在生成的任务里面，其实可以写一封邮件、一封推荐信，包括生成歌词，也可以生成一些关于产品的营销文案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-d2443373c26494e536208fb6ab258a91647.png&quot; alt=&quot;&quot;/&gt; 简单总结ChatGPT的一些特点，第一个其实ChatGPT所带来的技术突破，我相信大家都是认可的，但ChatGPT并不是短期之内研发出来的，实际上是OpenAI近些年一系列工作的集大成者，而且ChatGPT是基于非常强大的预训练语言模型，GPT-3.5的基础上做出来的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-daefd3a0df0d55822340e324402a5077d96.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;另外，ChatGPT是通过语言模型的方式解决众多的自然语言处理中的语言理解和生成任务，其实也让我们看到了通用人工智能的可行性。&lt;/p&gt;

&lt;p&gt;第三个方面其实是我们可以看到通过增加模型参数，就是我们让模型变得越来越大，其实是可以提高语言模型输出的流畅度的。但如果是希望在这个模型输出的有用的方面或者是忠实度，甚至是可信度方面要有进一步的提高，简单的去提高模型参数的大小，实际上并没有显著的提升。我们还需要有一些新的策略去进一步的提升模型在这三个方面的表现。&lt;/p&gt;

&lt;p&gt;ChatGPT提出的方案就是通过预训练&lt;strong&gt;京条&lt;/strong&gt;以及基于用户反馈的强化学习，去进一步提升模型在流畅度之外的像在有用性真实性以及我们的可信性方面的一些性能，但这一种新的预训练加微调加基于用户反馈的强化学习，有可能成为新的AI的模型的方式，但我们另一方面也看到了，其实ChatGPT 中的很多技术也是借鉴了其他领域的一些相关的技术，比如说借鉴了搜索推荐领域里面的基于用户反馈的模型的迭代，其实在推荐和搜索领域及用户实时反馈的模型训练，其实引用得非常成熟了。&lt;/p&gt;

&lt;p&gt;刚才说的Reward model实际上是借鉴了搜索里面的Learning to Ranking的一些思想，另外ChatGPT也可以看成是一个多任务学习的模型，但同时我们也可以看到ChatGPT在一些公开的NLP的数据集上，至少在Zero-shot还有Few-sho是这种设定下面，它的性能还有待进一步的提升。但非常重要的就是ChatGPT如何应用到实际业务系统中，对真实的业务系统或者是产品有帮助，这里面还有非常多的关键的技术问题需要进一步的研究。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q3：业内还有哪些令人惊艳的对话系统？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;吴友政：去年11月Meta发布了新的对话系统叫Cicero。&lt;/p&gt;

&lt;p&gt;Cicero不仅具备像ChatGPT或者是GPT Siri这样的语言组织能力，还需要像AlphaGo这样的战略推理能力。因为Cicero所参与的游戏是一个需要策略推理的游戏，在这个游戏中，我们的机器人需要通过结盟、谈判、说服甚至威胁的方式达成自己的目标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-2078075c92c7c5ded7824762249ddb97f3a.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;此外，从19年微软的 DialoGPT是8亿的参数，到今年的ChatGPT，一共有1,500亿整个参数量，但是大家的模型的结构其实没有特别大的差别，大部分采用的还是单纯的解码器模型结构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-74cb3fde27954905e7905edbc73c75a4320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q4：&lt;/strong&gt; &lt;strong&gt;ChatGPT&lt;/strong&gt;&lt;strong&gt;能直接应用到产品中去吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;吴友政：我们刚才说到了 ChatGPT，像cicero还有一些其他的对话大模型，这些模型是不是可以直接应用到我们的产品，我觉得是接下来需要大家去研究的问题。&lt;/p&gt;

&lt;p&gt;我们在这里也给出了一些数据，最左边的红色数字是现在的模型，甚至是一些比较小的模型，取得一些Sota的结果，有的达到了93%的准确率，但是我们在zero-shot和Few-shot上所取得的效果，离当前的Sota还有比较大的差距。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-7e53b27c189ddfc85ffcc6e5c7b95a70f51.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q5：在对话式AI领域，京东云在开展哪些工作？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;吴友政：刚才提到的实际上是关于在对话技术方面的一些最新的进展，我们在京东做的工作是怎么样把对话的技术应用到真正的产品或者是业务系统里面，而京东实际上是有提供了非常多的人机对话的场景。。&lt;/p&gt;

&lt;p&gt;举几个例子。&lt;/p&gt;

&lt;p&gt;京东具有庞大的自建客服团队，仅仅在零售的场景上，我们的全职客服就超过了1.4万，以及2万多分布在四大客服中心的兼职客服。因为京东品牌的要求，实际上客户其实对我们的体验要求是非常高的，这也要求我们在对话系统这个方面提供非常接近于人的对话交互的服务。&lt;/p&gt;

&lt;p&gt;另外京东的全链路的客户服务涉及的链路也是非常长，业务也非常复杂，包括自营的店铺，也包括多主体的店铺，业务是非常复杂的，像售中、售前售后的全链路的客户服务，涉及商家非常多，涉及商品也超过了1000多万。&lt;/p&gt;

&lt;p&gt;全链路的客户服务场景，能让京东的技术在这些场景中进一步得到打磨。基于京东场景，我们做了很多技术产品，服务于零售、金融、物流、健康、保险等行业，沉淀了很多 AI的能力，包括像语音识别合成像对话的能力，从而进一步打磨出产品，比如文本机器人、语音应答机器人偏对话生成的数字对话产品，还有培训机器人，包括智能质检，去服务于更广泛的我们的客户。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d90542cd04bdedbe629e4f6a1ebd1bbf</guid>
<title>分享 7  个 VUE 项目超级好用的库，看源码都能学习很多！</title>
<link>https://toutiao.io/k/1omcprm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;blockquote data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;模拟面试、简历指导可私信找我，最低的价格收获最高的指导~&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;大家好，我是林三心，&lt;strong&gt;用最通俗易懂的话讲最难的知识点&lt;/strong&gt;是我的座右铭，&lt;strong&gt;基础是进阶的前提&lt;/strong&gt;是我的初心。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.010204081632653&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/TZL4BdZpLdjpwPfAfiaDWibzfb2uDicfgvkP1OQs8dEcjGT8EaMyPevs1bXj2AjI8n8Ve3cC7cwO6bHh0N4rEKFrw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;196&quot;/&gt;&lt;/figure&gt;&lt;p&gt;借助开源库加速VUE项目的开发进度是现代前端开发比较常见的方式，平常收集一些JavaScript库介绍，在遇到需要的时候可以信手拈来。&lt;/p&gt;&lt;p&gt;VUE 生态有很多不错的依赖库或者组件，是使用VUE开发前端的原因之一。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;1. vueuse&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这是 GitHub 上星最多的库之一，拥有超过 &lt;code&gt;12.8k&lt;/code&gt; 颗星，这是一组基于&lt;span&gt;组合式 API&lt;/span&gt;&lt;span&gt;[1]&lt;/span&gt; 的实用函数库。&lt;/p&gt;&lt;p&gt;它的初衷就是将一切原本并不支持响应式的 JS API 变得支持响应式，省去程序员自己写相关代码。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import { useLocalStorage, useMouse, usePreferredDark } from &lt;span&gt;&quot;@vueuse/core&quot;&lt;/span&gt;;&lt;span&gt;export&lt;/span&gt; default {    &lt;span&gt;&lt;span&gt;setup&lt;/span&gt;&lt;/span&gt;() {        // tracks mouse position        const { x, y } = useMouse();        // is user prefers dark theme        const isDark = usePreferredDark();        // persist state &lt;span&gt;in&lt;/span&gt; localStorage        const store = useLocalStorage(&lt;span&gt;&quot;my-storage&quot;&lt;/span&gt;, {            name: &lt;span&gt;&quot;Apple&quot;&lt;/span&gt;,            color: &lt;span&gt;&quot;red&quot;&lt;/span&gt;,        });        &lt;span&gt;return&lt;/span&gt; { x, y, isDark, store };    },};复制代码&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2. vue-js-modal&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这是一个易于使用、高度可定制的 Vue.js 模态库，该库支持静态和动态两种类型的模态，静态是通过模板明确定义的，动态是根据传递给“显示模态”函数的配置生成的。这个库在 Github 上有超过 &lt;code&gt;4.2k&lt;/code&gt; 星。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1162790697674418&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/TZL4BdZpLdjpwPfAfiaDWibzfb2uDicfgvk1mYdL9USnthAtJxotPHic6XWlYebicPiavGxV7yy6kQLev1UMD6X4M5gw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;430&quot;/&gt;&lt;figcaption&gt;vue-js-modal.gif&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;3. vue-wait&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这个库可以在没有任何冲突的情况下控制页面上的各种加载状态。它的核心原理是管理一个具有多个加载状态的数组（或者，可选地，一个 Vuex 存储）。集成加载器组件开始监听其注册的加载器并立即进入加载状态。这个库在 Github 上有超过 &lt;code&gt;1.9k&lt;/code&gt; 颗星。&lt;/p&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;4. good-table&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;表格是软件开发中最常用的组件之一，这是一个易于使用的强大数据表，具有高级自定义功能，包括排序、列过滤、分页、分组等。它在 GitHub 上拥有超过 &lt;code&gt;2k&lt;/code&gt; 星。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;5. vue-notification&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;向用户显示消息是应用程序的基本功能之一，这个库将帮助构建漂亮的通知。它提供了许多功能，如动画、自定义位置、自定义样式等等。这个库在 Github 上有超过 &lt;code&gt;2.3K&lt;/code&gt; 颗星。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2060301507537687&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/TZL4BdZpLdjpwPfAfiaDWibzfb2uDicfgvkUwiaBlicmWWKosKxE2S6oRa37ichHMbtxlVhRVUbB8V4aAUD5HHHmKoJQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;398&quot;/&gt;&lt;figcaption&gt;vue-notification.gif&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;GitHub：&lt;span&gt;github.com/euvl/vue-no…&lt;/span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;6. tree select&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;顾名思义，这是一个带有嵌套选项的多选组件。它包括许多功能，如支持嵌套选项的单选和多选、模糊匹配、异步搜索、延迟加载（仅在需要时加载深层选项的数据）等等。它在 GitHub 上拥有超过 &lt;code&gt;2.6K&lt;/code&gt; 颗星。&lt;/p&gt;&lt;p&gt;GitHub：&lt;span&gt;github.com/riophae/vue…&lt;/span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;7. egjs-infinite grid&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;如果必须使用网格布局，那么这个库是一个很好的资源，该库用于根据网格类型无限排列包括内容的元素。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.580253723110866&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/TZL4BdZpLdjpwPfAfiaDWibzfb2uDicfgvkdPF8QAX3iaXmtiat0ClLlFjpfM4PAsYyVRrA2hH3K9c9lwwEfXFek1lA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1813&quot;/&gt;&lt;figcaption&gt;grid.jpg&lt;/figcaption&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;import { MasonryInfiniteGrid } from &lt;span&gt;&quot;@egjs/infinitegrid&quot;&lt;/span&gt;;&lt;span&gt;function&lt;/span&gt; getItems(nextGroupKey, count) {    const nextItems = [];    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = 0; i &amp;lt; count; ++i) {        const num = nextGroupKey * count + i;        nextItems.push(`&amp;lt;div class=&lt;span&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;`);    }    &lt;span&gt;return&lt;/span&gt; nextItems;}const ig = new MasonryInfiniteGrid(&lt;span&gt;&quot;.container&quot;&lt;/span&gt;, {    gap: 5,});ig.on(&lt;span&gt;&quot;requestAppend&quot;&lt;/span&gt;, (e) =&amp;gt; {    const nextGroupKey = (+e.groupKey || 0) + 1;    ig.append(getItems(nextGroupKey, 10), nextGroupKey);});ig.renderItems();复制代码&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;作者：天行无忌&lt;/p&gt;&lt;p&gt;链接：https://juejin.cn/post/7175905647018377277&lt;/p&gt;&lt;p&gt;来源：稀土掘金&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;结语&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;我是林三心，一个热心的前端菜鸟程序员。如果你上进，喜欢前端，想学习前端，那咱们可以交朋友，一起摸鱼哈哈，摸鱼群，关注我，拉你进群，有5000多名前端小伙伴在等着一起学习哦 --&amp;gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;模拟面试、简历指导可私信找我，价格超级实惠~&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6d101f99d8c6cc30aceb4762462b0984</guid>
<title>面试官：谈谈 Tomcat 架构及启动过程，我一脸懵逼。。</title>
<link>https://toutiao.io/k/uebwias</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section&gt;&lt;span&gt;点击上方 &lt;/span&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;java那些事 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，选择 &lt;/span&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;星标 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;公众号&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;pre&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;重磅资讯，干货，第一时间送达&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;---&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个题目命的其实是很大的，写的时候还是很忐忑的，但我尽可能把这个过程描述清楚。因为这是读过源码以后写的总结，在写的过程中可能会忽略一些前提条件，如果有哪些比较突兀就出现，或不好理解的地方可以给我提 Issue，我会尽快补充修订相关内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多东西在时序图中体现的已经非常清楚了，没有必要再一步一步的作介绍，所以本文以图为主，然后对部分内容加以简单解释。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;绘制图形使用的工具是 PlantUML + Visual Studio Code + PlantUML Extension&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文对 Tomcat 的介绍以 Tomcat-9.0.0.M22 为标准。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247507113&amp;amp;idx=1&amp;amp;sn=90d0fb468bfadcd07c68625110c5fd32&amp;amp;chksm=ea5f11cfdd2898d96b5a0b2d171300ffaea38c8baa4672f5bf50b61a06c9a6584411151f1e56&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;https://tomcat.apache.org/tomcat-9.0-doc/index.html&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;https://tomcat.apache.org/tomcat-9.0-doc/index.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Overview&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;634&quot; data-backw=&quot;558&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TNUwKhV0JpS3nRJsYhb2p3LsNLBWdmTQ3CtEdopnlbHGVPa8GqeN9dF61y2DmHsereazOBFKvC4YEWgx6aQQnQ/640?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;932&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;1002.9284627092848&quot; data-ratio=&quot;1.0751072961373391&quot; data-type=&quot;jpeg&quot; data-w=&quot;932&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/9mQQWOf4KRLM1JEiaDiaMk1WcYsrmfIEqPgjEmeBRnOk2o08gro3gzc0W3Dd7S3anrNA4TqWeicXUnwVVnAsPw8qw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Bootstrap 作为 Tomcat 对外界的启动类,在 $CATALINA_BASE/bin 目录下，它通过反射创建 Catalina 的实例并对其进行初始化及启动。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Catalina 解析 $CATALINA_BASE/conf/server.xml 文件并创建 StandardServer、StandardService、StandardEngine、StandardHost 等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardServer 代表的是整个 Servlet 容器，他包含一个或多个 StandardService&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardService 包含一个或多个 Connector，和一个 Engine，Connector 和 Engine 都是在解析 conf/server.xml 文件时创建的，Engine 在 Tomcat 的标准实现是 StandardEngine&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MapperListener 实现了 LifecycleListener 和 ContainerListener 接口用于监听容器事件和生命周期事件。该监听器实例监听所有的容器，包括 StandardEngine、StandardHost、StandardContext、StandardWrapper，当容器有变动时，注册容器到 Mapper。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Mapper 维护了 URL 到容器的映射关系。当请求到来时会根据 Mapper 中的映射信息决定将请求映射到哪一个 Host、Context、Wrapper。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Http11NioProtocol 用于处理 HTTP/1.1 的请求&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;NioEndpoint 是连接的端点，在请求处理流程中该类是核心类，会重点介绍。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CoyoteAdapter 用于将请求从 Connctor 交给 Container 处理。使 Connctor 和 Container 解耦。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardEngine 代表的是 Servlet 引擎，用于处理 Connector 接受的 Request。包含一个或多个 Host（虚拟主机）, Host 的标准实现是 StandardHost。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardHost 代表的是虚拟主机，用于部署该虚拟主机上的应用程序。通常包含多个 Context (Context 在 Tomcat 中代表应用程序)。Context 在 Tomcat 中的标准实现是 StandardContext。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardContext 代表一个独立的应用程序，通常包含多个 Wrapper，一个 Wrapper 容器封装了一个 Servlet，Wrapper的标准实现是 StandardWrapper。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardPipeline 组件代表一个流水线，与 Valve（阀）结合，用于处理请求。StandardPipeline 中含有多个 Valve， 当需要处理请求时，会逐一调用 Valve 的 invoke 方法对 Request 和 Response 进行处理。特别的，其中有一个特殊的 Valve 叫 basicValve,每一个标准容器都有一个指定的 BasicValve，他们做的是最核心的工作。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;StandardEngine 的是 StandardEngineValve，他用来将 Request 映射到指定的 Host;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardHost 的是 StandardHostValve, 他用来将 Request 映射到指定的 Context;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardContext 的是 StandardContextValve，它用来将 Request 映射到指定的 Wrapper；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StandardWrapper 的是 StandardWrapperValve，他用来加载 Rquest 所指定的 Servlet,并调用 Servlet 的 Service 方法。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Tomcat init&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/TNUwKhV0JpS3nRJsYhb2p3LsNLBWdmTQQtY4X0nP1nDJbLRvz3hmJPw5zNcC2bNIYwTjoskzwia698Fm1vE1sOQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505653&amp;amp;idx=2&amp;amp;sn=0de924fc385f24e8920b015af9dc4d88&amp;amp;chksm=ea5f1b93dd2892859344750ab4aef13c0d16feb8a4c58f9f59b6e6e7474e3ac0de9481630535&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;当通过 ./startup.sh 脚本或直接通过 java 命令来启动 Bootstrap 时，Tomcat 的启动过程就正式开始了，启动的入口点就是 Bootstrap 类的 main 方法。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;通过从 CatalinaProperties 类中获取 common.loader 等属性，获得类加载器的扫描仓库。CatalinaProperties 类在的静态块中调用了 loadProperties() 方法，从 conf/catalina.properties 文件中加载了属性.(即在类创建的时候属性就已经加载好了)。&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505653&amp;amp;idx=2&amp;amp;sn=0de924fc385f24e8920b015af9dc4d88&amp;amp;chksm=ea5f1b93dd2892859344750ab4aef13c0d16feb8a4c58f9f59b6e6e7474e3ac0de9481630535&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;当通过 ./startup.sh 脚本或直接通过 java 命令来启动 Bootstrap 时，Tomcat 的启动过程就正式开始了，启动的入口点就是 Bootstrap 类的 main 方法。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;通过 ClassLoaderFactory 创建 URLClassLoader 的实例&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505653&amp;amp;idx=2&amp;amp;sn=0de924fc385f24e8920b015af9dc4d88&amp;amp;chksm=ea5f1b93dd2892859344750ab4aef13c0d16feb8a4c58f9f59b6e6e7474e3ac0de9481630535&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;当通过 ./startup.sh 脚本或直接通过 java 命令来启动 Bootstrap 时，Tomcat 的启动过程就正式开始了，启动的入口点就是 Bootstrap 类的 main 方法。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;EngineConfig。LifecycleListener 的实现类,触发 Engine 的生命周期事件后调用，这个监听器没有特别大的作用，就是打印一下日志&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505653&amp;amp;idx=2&amp;amp;sn=0de924fc385f24e8920b015af9dc4d88&amp;amp;chksm=ea5f1b93dd2892859344750ab4aef13c0d16feb8a4c58f9f59b6e6e7474e3ac0de9481630535&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;当通过 ./startup.sh 脚本或直接通过 java 命令来启动 Bootstrap 时，Tomcat 的启动过程就正式开始了，启动的入口点就是 Bootstrap 类的 main 方法。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;HostConfig。LifecycleListener 的实现类，触发 Host 的生命周期事件后调用。这个监听器的作用就是部署应用程序，这包括 conf/&lt;/span&gt;&lt;/a&gt;&lt;engine&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505653&amp;amp;idx=2&amp;amp;sn=0de924fc385f24e8920b015af9dc4d88&amp;amp;chksm=ea5f1b93dd2892859344750ab4aef13c0d16feb8a4c58f9f59b6e6e7474e3ac0de9481630535&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;当通过 ./startup.sh 脚本或直接通过 java 命令来启动 Bootstrap 时，Tomcat 的启动过程就正式开始了，启动的入口点就是 Bootstrap 类的 main 方法。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;/&lt;/span&gt;&lt;/a&gt;&lt;host&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505653&amp;amp;idx=2&amp;amp;sn=0de924fc385f24e8920b015af9dc4d88&amp;amp;chksm=ea5f1b93dd2892859344750ab4aef13c0d16feb8a4c58f9f59b6e6e7474e3ac0de9481630535&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;当通过 ./startup.sh 脚本或直接通过 java 命令来启动 Bootstrap 时，Tomcat 的启动过程就正式开始了，启动的入口点就是 Bootstrap 类的 main 方法。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;/ 目录下所有的 Context xml 文件 和 webapps 目录下的应用程序，不管是 war 文件还是已解压的目录。另外后台进程对应用程序的热部署也是由该监听器负责的。&lt;/span&gt;&lt;/a&gt;&lt;/host&gt;&lt;/engine&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505653&amp;amp;idx=2&amp;amp;sn=0de924fc385f24e8920b015af9dc4d88&amp;amp;chksm=ea5f1b93dd2892859344750ab4aef13c0d16feb8a4c58f9f59b6e6e7474e3ac0de9481630535&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;当通过 ./startup.sh 脚本或直接通过 java 命令来启动 Bootstrap 时，Tomcat 的启动过程就正式开始了，启动的入口点就是 Bootstrap 类的 main 方法。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;ContextConfig。LifecycleListener 的实现类，触发 Context 的生命周期事件时调用。这个监听器的作用是配置应用程序，它会读取并合并 conf/web.xml 和 应用程序的 web.xml，分析 /WEB-INF/classes/ 和 /WEB-INF/lib/*.jar中的 Class 文件的注解，将其中所有的 Servlet、ServletMapping、Filter、FilterMapping、Listener 都配置到 StandardContext 中，以备后期使用。当然了 web.xml 中还有一些其他的应用程序参数，最后都会一并配置到 StandardContext 中。&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Tomcat Start[Deployment]&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/TNUwKhV0JpS3nRJsYhb2p3LsNLBWdmTQQtY4X0nP1nDJbLRvz3hmJPw5zNcC2bNIYwTjoskzwia698Fm1vE1sOQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505575&amp;amp;idx=1&amp;amp;sn=fea1514a1918c1721f38a01557eabb1b&amp;amp;chksm=ea5f1bc1dd2892d7678d54d3529d82e408ae37bdf39d50c75ed3a40f116ce3a1b24f1044cca6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图中从 StandardHost Start StandardContext 的这步其实在真正的执行流程中会直接跳过，因为 conf/server.xml 文件中并没有配置任何的 Context，所以在 findChildren() 查找子容器时会返回空数组，所以之后遍历子容器来启动子容器的 for 循环就直接跳过了。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;解析 $CATALINA_BASE/conf/&lt;/span&gt;&lt;/a&gt;&lt;engine&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505575&amp;amp;idx=1&amp;amp;sn=fea1514a1918c1721f38a01557eabb1b&amp;amp;chksm=ea5f1bc1dd2892d7678d54d3529d82e408ae37bdf39d50c75ed3a40f116ce3a1b24f1044cca6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图中从 StandardHost Start StandardContext 的这步其实在真正的执行流程中会直接跳过，因为 conf/server.xml 文件中并没有配置任何的 Context，所以在 findChildren() 查找子容器时会返回空数组，所以之后遍历子容器来启动子容器的 for 循环就直接跳过了。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;/&lt;/span&gt;&lt;/a&gt;&lt;host&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505575&amp;amp;idx=1&amp;amp;sn=fea1514a1918c1721f38a01557eabb1b&amp;amp;chksm=ea5f1bc1dd2892d7678d54d3529d82e408ae37bdf39d50c75ed3a40f116ce3a1b24f1044cca6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图中从 StandardHost Start StandardContext 的这步其实在真正的执行流程中会直接跳过，因为 conf/server.xml 文件中并没有配置任何的 Context，所以在 findChildren() 查找子容器时会返回空数组，所以之后遍历子容器来启动子容器的 for 循环就直接跳过了。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;/ 目录下所有定义 Context 的 XML 文件，并添加到 StandardHost。这些 XML 文件称为应用程序描述符。正因为如此，我们可以配置一个虚拟路径来保存应用程序中用到的图片，详细的配置过程请参考 开发环境配置指南 – 6.3. 配置图片存放目录&lt;/span&gt;&lt;/a&gt;&lt;/host&gt;&lt;/engine&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505575&amp;amp;idx=1&amp;amp;sn=fea1514a1918c1721f38a01557eabb1b&amp;amp;chksm=ea5f1bc1dd2892d7678d54d3529d82e408ae37bdf39d50c75ed3a40f116ce3a1b24f1044cca6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图中从 StandardHost Start StandardContext 的这步其实在真正的执行流程中会直接跳过，因为 conf/server.xml 文件中并没有配置任何的 Context，所以在 findChildren() 查找子容器时会返回空数组，所以之后遍历子容器来启动子容器的 for 循环就直接跳过了。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;部署 $CATALINA_BASE/webapps 下所有的 WAR 文件，并添加到 StandardHost。&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505575&amp;amp;idx=1&amp;amp;sn=fea1514a1918c1721f38a01557eabb1b&amp;amp;chksm=ea5f1bc1dd2892d7678d54d3529d82e408ae37bdf39d50c75ed3a40f116ce3a1b24f1044cca6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图中从 StandardHost Start StandardContext 的这步其实在真正的执行流程中会直接跳过，因为 conf/server.xml 文件中并没有配置任何的 Context，所以在 findChildren() 查找子容器时会返回空数组，所以之后遍历子容器来启动子容器的 for 循环就直接跳过了。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;部署 $CATALINA_BASE/webapps 下所有已解压的目录，并添加到 StandardHost。&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特别的，添加到 StandardHost 时，会直接调用 StandardContext 的 start() 方法来启动应用程序。启动应用程序步骤请看 Context Start 一节。另外，MySQL 系列面试题和答案全部整理好了，微信搜索互联网架构师，在后台发送：2T，可以在线阅读。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505146&amp;amp;idx=2&amp;amp;sn=0c6c3fd1637f23b1e0eb2596e6b5fb45&amp;amp;chksm=ea5f199cdd28908a258d4450c0960cd85237608c0c09ab26a9c56680668b77b28169f048356c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;在 StandardEngine 和 StandardContext 启动时都会调用各自的 threadStart() 方法，该方法会创建一个新的后台线程来处理该该容器和子容器及容器内各组件的后台事件。StandardEngine 会直接创建一个后台线程，StandardContext 默认是不创建的，和 StandardEngine 共用同一个。后台线程处理机制是周期调用组件的 backgroundProcess() 方法。详情请看 Background process 一节。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;addListeners(engine) 方法会将该监听器添加到 StandardEngine 和它的所有子容器中&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505146&amp;amp;idx=2&amp;amp;sn=0c6c3fd1637f23b1e0eb2596e6b5fb45&amp;amp;chksm=ea5f199cdd28908a258d4450c0960cd85237608c0c09ab26a9c56680668b77b28169f048356c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;在 StandardEngine 和 StandardContext 启动时都会调用各自的 threadStart() 方法，该方法会创建一个新的后台线程来处理该该容器和子容器及容器内各组件的后台事件。StandardEngine 会直接创建一个后台线程，StandardContext 默认是不创建的，和 StandardEngine 共用同一个。后台线程处理机制是周期调用组件的 backgroundProcess() 方法。详情请看 Background process 一节。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;registerHost() 会注册所有的 Host 和他们的子容器到 Mapper 中，方便后期请求处理时使用。&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247505146&amp;amp;idx=2&amp;amp;sn=0c6c3fd1637f23b1e0eb2596e6b5fb45&amp;amp;chksm=ea5f199cdd28908a258d4450c0960cd85237608c0c09ab26a9c56680668b77b28169f048356c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;在 StandardEngine 和 StandardContext 启动时都会调用各自的 threadStart() 方法，该方法会创建一个新的后台线程来处理该该容器和子容器及容器内各组件的后台事件。StandardEngine 会直接创建一个后台线程，StandardContext 默认是不创建的，和 StandardEngine 共用同一个。后台线程处理机制是周期调用组件的 backgroundProcess() 方法。详情请看 Background process 一节。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;当有新的应用(StandardContext)添加进来后，会触发 Host 的容器事件，然后通过 MapperListener 将新应用的映射注册到 Mapper 中。&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Context Start&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6222222222222222&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/TNUwKhV0JpS3nRJsYhb2p3LsNLBWdmTQozgkm8bC6OKLmA19piau4cD383Ecea2KqLxXAFeFWboyUt3d31fk3KQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;StandRoot 类实现了 WebResourceRoot 接口，它容纳了一个应用程序的所有资源，通俗的来说就是部署到 webapps 目录下对应 Context 的目录里的所有资源。因为我对 Tomcat 的资源管理部分暂时不是很感兴趣，所以资源管理相关类只是做了简单了解，并没有深入研究源代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;resourceStart() 方法会对 StandardRoot 进行初始配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;postWorkDirectory() 用于创建对应的工作目录 $CATALINA_BASE/work/&lt;engine&gt;/&lt;host&gt;/&lt;context&gt;, 该目录用于存放临时文件。&lt;/context&gt;&lt;/host&gt;&lt;/engine&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StardardContext 只是一个容器，而 ApplicationContext 则是一个应用程序真正的运行环境，相关类及操作会在请求处理流程看完以后进行补充。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;StardardContext 触发 CONFIGURE_START_EVENT 生命周期事件，ContextConfig 开始调用 configureStart() 对应用程序进行配置。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;这个过程会解析并合并 conf/web.xml &amp;amp; conf/&lt;engine&gt;/&lt;host&gt;/web.xml.default &amp;amp; webapps/&lt;context&gt;/WEB-INF/web.xml 中的配置。&lt;/context&gt;&lt;/host&gt;&lt;/engine&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置配置文件中的参数到 StandardContext, 其中主要的包括 Servlet、Filter、Listener。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因为从 Servlet3.0 以后是直接支持注解的，所以服务器必须能够处理加了注解的类。Tomcat 通过分析 WEB-INF/classes/ 中的 Class 文件和 WEB-INF/lib/ 下的 jar 包将扫描到的 Servlet、Filter、Listerner 注册到 StandardContext。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;setConfigured(true)，是非常关键的一个操作，它标识了 Context 的成功配置，若未设置该值为 true 的话，Context 会启动失败。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Background process&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.49444444444444446&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/TNUwKhV0JpS3nRJsYhb2p3LsNLBWdmTQl7fSUKbEMs4yv2ic3KxPkxc8BrtKWuO8rpibPKzwbcRiaMSTjUkVH5NZQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;后台进程的作用就是处理一下 Servlet 引擎中的周期性事件，处理周期默认是 10s。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;特别的 StandardHost 的 backgroundProcess() 方法会触发 Host 的 PERIODIC_EVENT 生命周期事件。然后 HostConfig 会调用其 check() 方法对已加载并进行过重新部署的应用程序进行 reload 或对新部署的应用程序进行热部署。热部署跟之前介绍的部署步骤一致， reload() 过程只是简单的顺序调用 setPause(true)、stop()、start()、setPause(false)，其中 setPause(true) 的作用是暂时停止接受请求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;How to read excellent open source projects&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247507170&amp;amp;idx=1&amp;amp;sn=bde225ad3ce570c98c8d8e636b9f4991&amp;amp;chksm=ea5f1184dd289892c61a068961d382123721fd3ac23ddb3a208104ba80454f62c8b079394470&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;真正的第一次阅读开源项目源代码，收获还是很大的。让我在架构设计、面向对象思想、设计模式、Clean Code等等各个方面都有了进步。阅读优秀的开源项目其实是一件很爽的事，因为时不时的会发现一个新的设计思路，然后不由自主的感叹一声居然还可以这样！&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;真正的第一次阅读开源项目源代码，收获还是很大的。让我在架构设计、面向对象思想、设计模式、Clean Code等等各个方面都有了进步。阅读优秀的开源项目其实是一件很爽的事，因为时不时的会发现一个新的设计思路，然后不由自主的感叹一声居然还可以这样！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247507170&amp;amp;idx=1&amp;amp;sn=bde225ad3ce570c98c8d8e636b9f4991&amp;amp;chksm=ea5f1184dd289892c61a068961d382123721fd3ac23ddb3a208104ba80454f62c8b079394470&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;真正的第一次阅读开源项目源代码，收获还是很大的。让我在架构设计、面向对象思想、设计模式、Clean Code等等各个方面都有了进步。阅读优秀的开源项目其实是一件很爽的事，因为时不时的会发现一个新的设计思路，然后不由自主的感叹一声居然还可以这样！&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;当然了，读的时候还是会有一些痛点的，比如说碰到一个变量，但是死活就是找不到初始化的位置，有时通过 Find Usage 工具可以找到，但有些找不到的只能从头开始再过一边源码。有时碰到一个设计思路死活都想不明白为什么这样设计等等，这种情况就只能通过分析更高一层的架构来解决了等等。&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面我简单分享一下我是如何阅读开源项目源码的。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;先找一些介绍该项目架构的书籍来看，项目架构是项目核心中的核心，读架构读的是高层次的设计思路，读源码读的是低层次的实现细节。有了高层次的设计思路做指导，源码读起来才会得心应手，因为读的时候心里很清楚现在在读的源码在整个项目架构中处于什么位置。我在读 Tomcat 源码之前先把 《How Tomcat works》 一书过了一边，然后又看了一下 《Tomcat 架构解析》 的第二章，对 Tomcat 的架构有了初步了解。（PS:《How Tomcat works》一书是全英文的，但读起来非常流畅，虽然它是基于 Tomcat 4 和 5 的，但 Tomcat 架构没有非常大的变化，新版的 Tomcat 只是增加了一些组件，如果你要学习 Tomcat 的话，首推这本书！）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果实在找不到讲架构的书，那就自己动手画类图吧！一般来说，开源项目都是为了提供服务的，我们把提供服务的流程作为主线来分析源代码，这样目的性会更强一些，将该流程中涉及到的类画到类图中，最后得到的类图就是架构！不过分析之前你要先找到流程的入口点，否则分析就无从开始。以 Tomcat 为例，他的主线流程大致可以分为 3 个：启动、部署、请求处理。他们的入口点就是 Bootstrap 类和 接受请求的 Acceptor 类！&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;有了阅读思路我们下面来说说工具吧。我使用的阅读工具是 IntelliJ IDEA，一款十分强大的 IDE，可能比较重量级，如果你有其他更加轻量级的 Linux 平台源码阅读工具，可以推荐给我～&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Structure 栏目可以自定义列出类中的域、方法，然后还可以按照继承结构对域和方法进行分组，这样就可以直接看出来域和方法是在继承结构中哪个类里定义的。当你点击方法和域时，还可以自动滚动到源代码等等。&lt;/p&gt;&lt;p&gt;在源代码中 点击右键 -&amp;gt; Diagrams -&amp;gt; show Diagram 可以显示类的继承结构，图中包含了该类所有的祖先和所有的接口。在该图中选择指定的父类和接口，点击右键 -&amp;gt; show Implementations， IDEA 会列出接口的实现类或该类的子类。&lt;/p&gt;&lt;p&gt;FindUsage、Go To Declaration 等等就不再多说了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;更多精彩内容，&lt;strong&gt;关注我们&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;▼▼&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile data-weui-theme=&quot;light&quot; class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MjM5MTM0NjQ2MQ==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/jNmCBexQlC5YGTbia3dRd6YFXWAlPsJK3gZQap6oK8Vk7BLiaBbsvq3BwicyEKwJiaIfeAYXzucAvXP00PKQKVLzJQ/0?wx_fmt=png&quot; data-nickname=&quot;java那些事&quot; data-alias=&quot;csh624366188&quot; data-signature=&quot;分享java开发中常用的技术，分享软件开发中各种新技术的应用方法。每天推送java技术相关或者互联网相关文章。关注“java那些事”，让自己做一个潮流的java技术人！《java程序员由笨鸟到菜鸟》系列文章火热更新中。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果看到这里，说明你喜欢这篇文章，&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;标星（置顶）&lt;/span&gt;&lt;span&gt;本公众号可以第一时间接受到博文推送。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt; “分享、点赞&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;在看” 支持一波&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lolOWBY1tkwzw3lDgVHOcuEv7IVq2gCXN5rPlfruYGicNRAP8M5fbZZk7VHjtM8Yv1XVjLFxXnrCQKicmser8veQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;64&quot;/&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4c06c3f0b1f8780ed39bea77144a2153</guid>
<title>一张图看懂小米的大数据架构</title>
<link>https://toutiao.io/k/upvllj3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg4OTU0NzY1NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/oeqMOybW2r35mDemNvB6gnDtjicqQibss1EicbDkf7pF4zRjYqropSEpYxKyBOV4Ts7ictTRYDIkJCdjpfP17ByfVA/0?wx_fmt=png&quot; data-nickname=&quot;数仓宝贝库&quot; data-alias=&quot;DataBaby_Family&quot; data-signature=&quot;数据人的充电站，专注于分享大数据、数据库、数据分析、数字化转型，以及数据管理与运营等学习干货。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;今天整个分享分两部分，第一部分我们先来聊聊大数据运维数字化转型相关的内容
看看运维层面如何做到化繁为简，打造极致效率的；&lt;/span&gt;&lt;span&gt;紧接着第二部分，会给大家介绍一下小米大数据的技术架构
大家可以从中了解到小米怎样应对海量数据挑战的。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;服务定位&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.570694087403599&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9TybYcKh0AdEnbzbew0jQoSL41yHibhoJ1RVxUYckdVnzD1r9ok6nzuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1556&quot;/&gt;&lt;span&gt;为了帮助大家理解，我们先来简单聊一聊小米服务的架构&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个业务架构按照云计算的分层模型来说分为三层，依次是iass层、pass层、sass层&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小米的iass层是一个混合云的现状，涉及IDC、公有云、网络等资源&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小米的saas层不仅包含战略业务手机 * IOT * 汽车，还包括互联网、电商等数百个业务线&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大数据作为pass层的一员，向下对接基础资源，向上承接业务的数据需求&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;提供离线报表、实时数仓等多种场景化能力&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进一步帮助业务沉淀数据资产，提升整体数据效率&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时，大数据是的集团数字化底座，起到中流砥柱的作用&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大数据服务架构&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5613810741687979&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9EdKLNUdTHbCdBTtLBNC49dEaEV298pb2UCyXia7PXNbGGicCmWDxaMSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们再来看下小米服务架构&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个小米的大数据服务是立足于x86和ecs之上的自下而上分为4层，依次是数据采集层、数据存储层、数据计算层、数据平台层&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据存储层：各类开源和自研存储引擎，包含我们的文件存储HDFS、KV存储HBase、对象存储Ceph等等；其中Pegasus是小米自研的，目前在apache已经开源。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据计算层：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;小米使用Yarn作为统一的资源管理，基于Yarn之上提供了批处理、流处理多种计算引擎，比如我们常见的MapReduce、Spark、Flink等；除此之外提供丰富的Olap引擎, 满足即席查询和检索需求。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数据平台层：&lt;/strong&gt;&lt;span&gt;我们内部称之为数据工场，主要提供一站式的数据开发和数据管理能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;小米大数据业务发展非常迅速，已经覆盖国内海外多个区域&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现已达到千+集群，数万节点的规模，在存储总量上已经近EB，计算任务30w/天&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大数据运维转型挑战&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5663265306122449&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9CH6tolyPWzmCcmjxfWUr41iapGicM9lqf5Aw7zZEttBl99uUavhHmmAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1568&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如此数据规模，给服务运维带来了很多挑战，接下来，我们重点聊一聊&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;运维成本高：传统运维方案和服务快速发展间的摩擦越来越多，导致运维成本呈熵增趋势，表现在质量、成本、效率各方面&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务生命周期断层：大数据服务场景多、差异大，进一步增加了运维复杂度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据孤岛问题导致数据效率难以达到最佳状态&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;运维层面呈经验型单核心发展，导致流程多落地难&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;轻舟整体能力结构&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5659411011523687&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk99B3xzpcCdO2Oaia3OT1mDvE7WWNa4Uk0ZBdr5D0uRibED9T7F1cpqIuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1562&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;识别到问题后我们内部经过充分讨论，结合小米长期处于混合云的状态，发起了大数据运维中台-轻舟的整体规划&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;轻舟的主线是通过建设通用的基线能力、打造极致的垂域能力，来彻底贯通服务的生命周期&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;轻舟的整体能力结构是两能力+三中心&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基线能力层包含数据集市和发布中心，是整个运维管理体系的基础&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;垂域能力层是贯穿服务的生命周期的，从服务的创建、运营到消亡，运营是我们日常工作花费时间精力最多的部分，包含服务升级迭代、机器管理、巡检管理等等&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;轻舟-一体化运维数据集市&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5615384615384615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9Ey9AT1AArXzibNA2dIVlyGcLRPn2lWRRFhBFCBlwkQjdwxpqHicxpmmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1560&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在数据上为了解决孤岛问题，我们的解决方案是数据集成、架构解耦&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过构建大数据的一体化运维数据集市，收敛运维周边的所有数据，在数据源头和数据使用方之间做了一层解耦&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在数据集市层我们制定了数据规范，将运维数据进行建模和分层处理&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后针对现有的数据源进行ETL调度，最终实现数据统一存储和使用&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新的数据架构统一了运维数据体系，解决数据孤岛问题的同时，降低数据使用门槛，&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目前整套数据体系已经应用到所有的大数据服务当中，真正做到了数出一孔&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;再有整个数据场景是闭环的，复杂度由O(n^2)变成O(n)，并且核心数据分析逻辑可复用&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个新的数据架构是以数据场景为中心，取代之前以人为中心&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;轻舟-发布中心&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5626598465473146&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk94Lw49w0rD3yRuhs400WddT0e4sSkewWn6zmULN3uSEHJoNfiaHmvEBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;轻舟的发布中心，通过调度编排+低代码的模式，去灵活定义工作流&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时依托模版将SOP进行沉淀，将个人经验转化为组织能力&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上图就是发布中心的工作流模版，我们将执行系统和自定义脚本抽象为操作池&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在调度编排上定义了多种逻辑区域，如我们的单次执行区，循环区和异步执行区。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目前整套正在逐步推广到所有大数据服务中，并且在一些场景中实现了变更的无人值守，效率提升30%；&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;后续整个发布中心也会在现有基础上继续优化和迭代，打造全局互联互通，最终实现全流程自动化&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;轻舟-运营中心&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5633802816901409&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9chU2jMl9iaiaT7JD5ewVvibgznDxiclP35IrdoeFUqurn5XrGTsYFkoBKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1562&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在运营中心中，我们结合数据和混合ops的理念，重点解决协同、服务差异和经验化等多个核心痛点&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目前整体的效果还是不错的，比如在机器故障处理上已经实现了全流程自动&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;覆盖了95%的大数据服务，年均自动化处理机器故障近万次&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在容量管理上，通过数据趋势的分析，覆盖全场景的容量的检测，降低大量的人工介入&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在巡检管理上，通过将风险量化打分，进一步固化了巡检标准和处理流程&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此外还有环境管理、配置管理，这里由于时间关系，就不一一介绍了&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目前整个运营中心还在持续建设和完善中&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;核心数据链路&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5648267008985879&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9OYiac83M0EkmMoefiafI92KcicbShOjxyFkMdNwiaocswbNXppCM9zKDDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1558&quot;/&gt;&lt;span&gt;接下来是第二部分，大数据的架构实践&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小米的核心数据链路，是以消息队列Talos+接入转储这样的组合，作为数据总线去实现数据从端到端的打通&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;各类原始数据，通过Agent的采集方式，进入到消息队列中，同时也支持基于binlog的存量和增量采集&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在转储层一般通过的统一transfer模块，将数据灌入其他大数据的存储引擎中，供进一步使用&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目前小米半数以上的数据都是通过这套方案接入的&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整套流程做了产品化的设计，用户可以基于平台可自由定义数据链路&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实时+离线湖仓架构&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5635430038510911&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9hx7K6LgSGbTghddFCjkNhGfcQfZzzpgQxL13Y8l2kthGjb5fjuymdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1558&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小米在数仓这个方向上也经历了基于Hadoop的离线数仓、Kappa实时数仓、Lambda架构数仓的过程&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最新的数仓体系是基于数据湖iceberg+flink+spark构建的离线+实时数仓&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;结合上面提到的，数据经过MQ，最终进入到数据湖当中&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数仓的每一层之间通过spark或flink方式进行etl建设&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时小米的olap引擎经过改造可直接查询湖中数据&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个方案在性能上效果表现很好，相比历史架构，其复杂度更低&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于了数仓存储层的统一和ztsd压缩算法的升级，在存储上也有很大的优化&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HDFS Tiering 冷热数据分层&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5613810741687979&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9lZNFE4GNeo6b2JtawdaX9uQaYmAbLgCqiaJUQ3qMpVoJiaBUUR0klC9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面提到的数据湖iceberg的底座也是基于HDFS的，这里我们聊聊HDFS 的数据架构实践&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一般业界实现中，为了实现数据分层的目的，会使用固态盘、机械盘和高密度存储的方式&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在小米内部实现中，为了进一步压缩成本，自研了一套HDFS Tering的架构，将冷数据直接上云管理&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上面就是整体的架构图，可以看到后台会有一个mover程序自动的将HDFS冷数据的转储到阿里云OSS上&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随后更新Namenode上的元数据，实现文件属性到block到对象的变化&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时对用户透明，在架构上增加了proxydn模块&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目前整套方案，已经累计冷备了200+PB数据，数据成本降低80+%&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Lindorm引入（一）&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5641025641025641&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9ibcLRv65iaJAXjL9FdQJ05jY9By1Lln3gicIlAWd0QosQOtZBRHm7kLGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1560&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了支撑小米IOT的战略，解决业务海量数据索引+事务的需求&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小米历史是基于封装HBase Coprocessor实现的自研存储，我们内部称之为SDS&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但随着数据规模不断上涨，暴露了很多架构问题，比如基于范围分片，failover时间慢，依赖链路多等等&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时无法支撑业务的时序数据需求；此外SDS在开发维护成本上也非常高昂&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Lindorm引入（二）&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5648267008985879&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9XAB9kMKwRwjpYt4O2nV83l76E11AZshkwcvFibHHpYItV6IVMhaIibkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1558&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经过我们选型后，阿里云的Lindorm是非常符合我们需求的，在图中我们可以看到&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Lindorm兼容HBase、Hadoop等协议，提供了宽表引擎的同时，还提供了时序等多种引擎&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;与此同时结合多级混合存储、Serverless等多种特性，可以解决很多遗留问题&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小米内部测试后性能还是蛮不错的，符合我们的整体需求&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Lindorm引入（三）&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5653846153846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk9E60hvUsfPia4J1PSIjjojgC16cdSlrqWqHg1lTL3UAl7ze7rLdmZm1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1560&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;选型完成后，如何低成本的由sds迁移到lindorm上也是一个至关重要的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;图中就是整体的迁移架构，我们为IDC到云间打通百G的网络链路&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;服务层面，SDS和Lindorm之间会提前建立好数据同步链路，保证SDS 和Lindorm都是最新数据&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了最小化业务改动成本，提供了sds proxy的组件&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;将数据代理到lindorm上，最终实现业务迁移&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大数据事件云图&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5656050955414013&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QYkComlkTx68hOxsKnTxVlKL9SV8lXk90x0oQFV5yJz1gOiaNfvLcVCyyZ39ztnumHTns0rVGRIn3UyBMSB1ksg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1570&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关于作者&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/oeqMOybW2r1dmnU2L4ZPibS7L0P0xnb06h78sH0NBYsjzuCibpSnRDCg3hqvO3DCSO4g0ahFWtEavW9BalBuzgjA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1080&quot; data-cropy1=&quot;145.16129032258064&quot; data-cropy2=&quot;427.7419354838709&quot; data-ratio=&quot;0.2611111111111111&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/oeqMOybW2r1dmnU2L4ZPibS7L0P0xnb06h9LupaQ4cIK0jZSOLdGDy34zSGiaHWFyvezaQ8E6mDKSmkqziada30fw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93709&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span data-role=&quot;width&quot; data-width=&quot;80%&quot;&gt;&lt;img border=&quot;0&quot; class=&quot;__bg_gif rich_pages wxw-img&quot; data-ratio=&quot;0.08658008658008658&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/7QRTvkK2qC7IHABFmuMlWQkSSzOMicicfBLfsdIjkOnDvssu6Znx4TTPsH8yZZNZ17hSbD95ww43fs5OFEppRTWg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;462&quot; data-width=&quot;80%&quot; height=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;●&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504915&amp;amp;idx=1&amp;amp;sn=90e8dbb94ff2d68bce4fe2052966c981&amp;amp;chksm=cfe8aafaf89f23ecd51e36ce140f61b8833d5f0d38d508e5c6aa88ff677a85c437358b16799d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;ClickHouse的查询性能优势&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;ClickHouse的查询性能优势&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504649&amp;amp;idx=1&amp;amp;sn=def54957857a51ab3dcf943ca356a85a&amp;amp;chksm=cfe8ade0f89f24f619f4d6362953da987f7a4a1af1e276c4129fc853a95c190012b100cc7629&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;重磅发布！2023年十大科技趋势预测&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247483865&amp;amp;idx=1&amp;amp;sn=d7ac74c1cfbfe5ebc881bf8d842ddffa&amp;amp;chksm=cfeb7f30f89cf6262ee9752dab9714169c8b6815b2325b20080d8732be21ab1764f3a99aa354&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;●&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504906&amp;amp;idx=1&amp;amp;sn=879b09d4a24b1ecb7fedd06bff8ebb68&amp;amp;chksm=cfe8aae3f89f23f5becc8c5af22ea6859ee46f24f51d60704dc7b8f003091a7de9abb37e6017&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C++为什么能重夺年度语言？| 文末福利&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;C++为什么能重夺年度语言？| 文末福利&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504642&amp;amp;idx=1&amp;amp;sn=7c6f3fbb54afc0f050d33c689062c71a&amp;amp;chksm=cfe8adebf89f24fda8545a8c326743c533c14fde4dbd9a4b88f739dc8386d7cf88ac8fb68fc1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2022年全球程序员收入报告出炉：字节跳动成国内唯一上榜公司&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/p&gt;&lt;p&gt;●&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504842&amp;amp;idx=1&amp;amp;sn=5dee276f211c24efc20b12b36fff8ea2&amp;amp;chksm=cfe8ad23f89f243523fb703ef651ec762ceda3a4b2fa6515a30ac2c68adfb85e278274dd9547&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SQL必知必会！ SQL学习路径总结梳理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;SQL必知必会！SQL学习路径总结梳理&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504570&amp;amp;idx=1&amp;amp;sn=4366206d0d46a758058fc4d43fdc2f6a&amp;amp;chksm=cfe8ac53f89f25456a232819037da873409f71ca0b21028f59a874655a13bcf884986319c62f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;元数据管理在数据仓库的实践应用&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/p&gt;&lt;p&gt;●&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504837&amp;amp;idx=1&amp;amp;sn=fb8a43bfb300558c2bfff5c26c6211f9&amp;amp;chksm=cfe8ad2cf89f243afba78f9e70e0c672578f85448150611c768e596663b96d42e48f48a45a0f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;ChatGPT能让DBA失业吗？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;ChatGPT能让DBA失业吗？&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504536&amp;amp;idx=1&amp;amp;sn=7f678f444de65bee7e2fbbf9e8fc05a0&amp;amp;chksm=cfe8ac71f89f2567f078f75aed4314934e4b1bbc8dd6015d1d8a21c3cb41e69f379df7fd5ee3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;陶景文：华为最新的数字化转型实践分享&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/p&gt;&lt;p&gt;●&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504833&amp;amp;idx=1&amp;amp;sn=65c78f368367da89b65480590409ff38&amp;amp;chksm=cfe8ad28f89f243ef31040f04396157adddeab3f7562490ea69629fa5c7be39d456ea62f3262&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一篇讲明白DevOps时代下的持续架构实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一篇讲明白DevOps时代下的持续架构实践&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504524&amp;amp;idx=1&amp;amp;sn=a47fc12dc0e8b1f6df0850b506d1d9f3&amp;amp;chksm=cfe8ac65f89f257366ce703d6da302ee3b37974d3922bcdc40e3a02e9c297e6d4b4360f63580&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;OLAP和OLTP的本质区别，一篇文章讲明白&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/p&gt;&lt;p&gt;●&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504829&amp;amp;idx=1&amp;amp;sn=52ebd6c3e9d341f7bd5d0af9c6ad31ba&amp;amp;chksm=cfe8ad54f89f2442fb66e04af7fcfcb8cd10241097744205dbe212bfb6c2935419c9c6cb0e7a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;7个实践总结！搞明白主数据管理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;7个实践总结！搞明白主数据管理&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504454&amp;amp;idx=1&amp;amp;sn=6f53a3d49ca65e4f11b3664b13e828ee&amp;amp;chksm=cfe8acaff89f25b9fd1827ca3c833f3aff4851f50342a42280215d2ab651735ae272fefcc1e4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;全方位解读 “数据二十条” 新政 ！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/p&gt;&lt;p&gt;●&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504830&amp;amp;idx=1&amp;amp;sn=c465c9868c6a98172448d73c1156d941&amp;amp;chksm=cfe8ad57f89f24419e09a067a1902597358b22ff65dcd9ce23141054bfaba98e9978b7ff7250&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一篇讲明白”可持续IT架构”战略技术趋势&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一篇讲明白”可持续IT架构”战略技术趋势&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504655&amp;amp;idx=1&amp;amp;sn=60806502b0811d371c9adb5eacf5b490&amp;amp;chksm=cfe8ade6f89f24f0dc848c216ebb16eaf03e44af039ce91990ecc4b87380f5b2afa7517ac5eb&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;传统数仓的3大缺陷，一篇梳理清楚&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/p&gt;&lt;p&gt;●&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504807&amp;amp;idx=1&amp;amp;sn=8b4c585379ce5a82a22242e64c2f2f35&amp;amp;chksm=cfe8ad4ef89f24583314e7cd8e127d042f99c848904e96452b9c04801f2d818d8ca77b408c83&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2023年大数据技术的四大挑战与十大趋势&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;2023年大数据技术的四大挑战与十大趋势&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4OTU0NzY1NA==&amp;amp;mid=2247504906&amp;amp;idx=1&amp;amp;sn=879b09d4a24b1ecb7fedd06bff8ebb68&amp;amp;chksm=cfe8aae3f89f23f5becc8c5af22ea6859ee46f24f51d60704dc7b8f003091a7de9abb37e6017&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C++为什么能重夺年度语言？| 文末福利&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;Mzg4OTU0NzY1NA==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/oeqMOybW2r35mDemNvB6gnDtjicqQibss1EicbDkf7pF4zRjYqropSEpYxKyBOV4Ts7ictTRYDIkJCdjpfP17ByfVA/0?wx_fmt=png&quot; data-nickname=&quot;数仓宝贝库&quot; data-alias=&quot;DataBaby_Family&quot; data-signature=&quot;分享数据库、大数据、数据仓库等知识&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bc25bd54680b0ff0ca727bb24e4c70d3</guid>
<title>[译] 2023 年的 Rust 与 Go</title>
<link>https://toutiao.io/k/goxltnz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文译自&lt;span&gt;《Rust vs Go in 2023》&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注：从2022年下半年开始，我们研发团队的产品研发不再局限于云端，车端也是将来的一个重要方向。于是我除了继续对Go语言保持常规的高度关注之外，也逐步开始留意Rust语言的发展。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust和Go哪个更好？Go还是Rust？在2023年，你应该为你的下一个项目选择哪种语言，为什么？两者在性能、简单性、安全性、功能、规模和并发性等方面如何比较？它们的共同点是什么，它们有哪些根本性的不同？让我们在这个友好而公平的Rust和Go的比较中找到答案。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Rust和Go都很棒&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我必须要说的是，&lt;strong&gt;Go和Rust都是绝对优秀的编程语言&lt;/strong&gt;。它们都是现代的、强大的、被广泛采用的编程语言，并且都提供出色的性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可能读过一些说Go比Rust好的文章，或者相反。但这真的没有意义；每一种编程语言都代表了一系列的权衡和取舍。每种语言都有自己的优化重点，所以你对语言的选择应该由适合你的东西和你想用它解决的问题决定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这篇文章中，我将尝试告诉你何时使用Go是理想选择以及何时使用Rust更佳。我也会试着介绍一下这两种语言的本质（如果你愿意的话，就是&lt;span&gt;Go和Rust的道&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然它们在语法和风格上有很大不同，但Rust和Go都是构建软件的一流工具。接下来，让我们仔细看看这两种语言。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Go和Rust的相似之处&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust和Go有很多共同点，这也是你经常听到它们一起被提及的原因之一。两种语言的共同目标是什么呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Rust是一种低级静态类型的多范式编程语言，专注于安全和性能。 - &lt;span&gt;Gints Dreimanis&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go是一种开源的编程语言，可以轻松构建简单、可靠、高效的软件。 - &lt;span&gt;go.dev&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;内存安全&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go和Rust都属于现代编程语言，它们的首要任务是内存安全。经过几十年对C和C++等旧语言的使用，我们可以清楚地看到，导致错误和安全漏洞的最大原因之一是不安全地或不正确地访问内存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust和Go以不同的方式处理这个问题，但它们的目标都是在管理内存方面比其他语言更聪明、更安全，并帮助你写出&lt;span&gt;正确&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;和&lt;span&gt;高性能&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;的程序。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;快速、紧凑的可执行文件&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go和Rust都是编译型语言，这意味着你的程序被直接翻译成可执行的机器码，因此你可以以单一二进制文件形式来部署你的程序；与&lt;span&gt;Python&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;和Ruby等解释型语言不同，你不需要将解释器和大量的库和依赖关系与你的程序一起分发，这是一个很大的优点。这也使得Rust和Go的程序与解释型语言相比都非常快。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;通用语言&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust和Go都是强大的、可扩展的通用编程语言，你可以用它们来开发各种现代软件，从网络应用到分布式微服务，或者从嵌入式微控制器到移动应用程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两者都有优秀的标准库、繁荣的第三方生态系统以及巨大的商业支持和庞大的用户基础。它们都已经存在了很多年，并将在未来几年内继续被广泛使用。今天学习Go或Rust将是对你时间和精力的合理投资。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;务实的编程风格&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go和Rust都不是&lt;span&gt;以函数式编程为主的语言&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;（例如像Scala或Elixir），也不是完全面向对象的语言（像Java和C#）。相反，虽然Go和Rust都有与函数式和面向对象编程相关的特性，但它们是务实的语言，旨在以最合适的方式解决问题，而不是强迫你采用特定的做事方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你喜欢函数式编程风格，你会在Rust中发现更多对这种风格的支持，因为Rust在语法特性数量上要比Go更多。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我们可以讨论什么是“面向对象”语言，但可以说C++、Java或C#用户所期望的面向对象编程风格在Go或Rust中都不存在。 - Jack Mott&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;规模化的开发&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust和Go都有一些有用的特性，使它们适合于大规模的编程，不管是指大型团队，还是大型代码库，或者两者兼具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，C语言的程序员们多年来一直在争论将括号放在哪里，以及代码应该用制表符还是空格缩进，而Rust和Go通过使用标准的格式化工具（Go为gofmt，Rust为rustfmt）使用规范的风格自动重写你的代码，完全消除了这些问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这并不是说这种特殊的风格本身有多好：而是Rust和Go的程序员都喜欢这种&lt;strong&gt;标准化&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;gofmt的风格是没有人喜欢的，但gofmt却是所有人的最爱。 - &lt;span&gt;Rob Pike&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两种语言的另一个高分领域是**构建管道(pipeline)**。两种语言都有优秀的、内置的、高性能的标准构建和依赖管理工具；不再需要与复杂的第三方构建系统搏斗，也不再需要每隔几年就学习一个新的系统。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;对于早期职业生涯以Java和Ruby为背景的我而言，构建Go和Rust代码感觉就像从我的肩上卸下了一个不可能的重担。当我在谷歌工作时，遇到用Go编写的服务是一种解脱，因为我知道它很容易构建和运行。Rust也是如此，尽管我只在较小规模的Rust项目上工作过。我希望可无限配置的构建系统的时代已经过去了，所有语言都会有自己专门的构建工具，开箱即可使用。- &lt;span&gt;山姆-罗斯&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Rust还是Go？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上可知，这两种语言都设计得很好、很强大，那么你可能会想知道那些关于两门语言的“圣战”究竟是怎么回事（我也是）。为什么人们对“Go vs.Rust”如此大惊小怪，在社交媒体上大打出手，并且写长篇博文说只有傻瓜才会使用Rust，或者Go不是真正的编程语言，或者其他什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这可能会让他们感觉好些，但这并不能完全帮助你，因为你正试图决定在你的项目中使用哪种语言，或者你应该学习哪种语言来推动你的编程生涯。一个明智的人不会根据谁喊得声最大来做出重要的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在让我们继续我们成熟的讨论，看看在某些领域，一个有理智的人可能更喜欢哪一种语言。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Go与Rust的性能对比&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们已经说过，Go和Rust都能生产出高性能的程序，因为它们被编译成了本地机器代码，而不必通过解释器或虚拟机。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而，Rust的性能尤其突出。它可以与C和C++相媲美，这两种语言通常被认为是性能最高的编译语言，但与这些老语言不同的是，Rust还提供了内存安全和并发安全，并且基本上不会给执行速度上带去没有任何开销。Rust还允许你创建复杂的抽象，而不需要在运行时付出任何性能上的代价。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比之下，尽管Go程序的性能也非常好，但Go主要是为开发速度（包括编译）而设计的，而不是执行速度。Go程序员&lt;span&gt;更倾向于清晰的代码而不是快速的代码&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go编译器也不会花很多时间去尝试生成最有效的机器代码；它更关心的是快速编译大量代码。所以Rust通常会在运行时基准测试中击败Go。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust的运行时性能也是一致和可预测的，因为它不使用垃圾收集。Go的垃圾收集器非常高效，并且经过优化，使其“STW(停止世界)”的停顿时间尽可能短（每一个新的Go版本都会越来越短）。但是垃圾收集不可避免地在程序的行为方式中引入了一些不可预测的因素，这在某些应用中可能是一个严重的问题，例如嵌入式系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为Rust旨在让程序员完全控制底层硬件，所以有可能将Rust程序优化到相当接近机器的最大理论性能。这使得Rust在执行速度胜过所有其他考虑因素的领域是一个很好的选择，比如游戏编程、操作系统内核、网络浏览器组件和实时控制系统。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;简单性&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果没有人能够弄清楚如何使用一种编程语言，那么这种语言有多快也无所谓。Go语言是为了应对C++等语言不断增长的复杂性而特意设计的；它的语法非常少，关键字也非常少，事实上，功能特性也很少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这意味着&lt;span&gt;学习Go语言&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;不需要很长时间，就可以用它来编写有用的程序。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go是非常容易学习的。我知道这是一个经常被吹捧的好处，但我真的很惊讶于我能够如此迅速地提高工作效率。多亏了这个语言、文档和工具，我在两天后就写出了有趣的、可提交的代码。 - &lt;span&gt;一个Rust程序员对Go的早期印象&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的关键词是&lt;strong&gt;简单性&lt;/strong&gt;。当然，简单并不等同于容易，但是小而简单的语言比大而复杂的语言更容易学习。Go语言没有提供那么多不同的方法来做一件事情，所以所有写得好的Go代码往往看起来都一样。快速学习一个不熟悉的服务并理解它在做什么很容易。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;fmt.Println(&lt;span&gt;&quot;Gopher&#x27;s Diner Breakfast Menu&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; dish, price := range menu {&lt;br/&gt;    fmt.Println(dish, price)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我的&lt;span&gt;代码俱乐部视频系列&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;中，我正是这样做的：从GitHub上半随机地挑选Go项目，并与一群Go初学者一起探索它们，看看我们能理解多少的代码。结果总是比我们预期的要多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然核心语言很小，但Go的标准库却非常强大。这意味着你的学习曲线也需要包括你需要的标准库的部分，而不仅仅是Go语法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面，将功能从语言中转移到标准库中，意味着你可以只专注于学习与你现在相关的库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go也是为大规模的软件开发而设计的，支持有大型代码库的大型团队。在这种情况下，新的开发人员能够尽快上手是非常重要的。出于这个原因，Go社区十分看重：&lt;span&gt;简单、明显、常规、直接的程序&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用Go，你可以快速完成工作。Go是我所使用过的生产力最高的语言之一。它的口号是：今天解决实际问题。 - &lt;span&gt;马蒂亚斯-恩德勒&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;特性&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Rust比其他几种编程语言支持更多的复杂语法特性，因此，你可以用它实现更多。 - &lt;span&gt;devathon&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust是专门设计用来帮助程序员用最少的代码做最多的事情，它包括很多强大而有用的功能特性。例如，Rust的match功能可以让你以十分简洁地方式写出灵活的、富有表现力的逻辑：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;fn is_prime(n: u64) -&amp;gt; bool {&lt;br/&gt;    match n {&lt;br/&gt;        0...1 =&amp;gt; &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;        _ =&amp;gt; !(2..n).any(|d| n % d == 0),&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为Rust做了很多事情，这意味着有很多东西需要学习，特别是在开始的时候。但这没关系：在C++或Java中也有很多东西要学，而且你不会得到Rust的高级特性，比如内存安全。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;批评Rust是一种复杂的语言忽略了一点：它被设计成具有表现力，这意味着有很多功能，而在许多情况下，这正是你想要的编程语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，Rust有一个学习曲线，但一旦你开始使用它，你就会好起来。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;对于那些准备接受更复杂的语法和语义（以及可能更高的可读性成本）以换取最大可能的性能的程序员来说，Rust将与C++和D语言争夺思想份额。 - &lt;span&gt;戴夫-切尼&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然Rust采用了Go的一些特性，而Go也在采用Rust的一些特性（尤其是&lt;span&gt;泛型&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;），但可以说Rust的特性很重，而Go的特性相对较轻。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;并发&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数语言都对并发编程（同时做多件事情）有某种形式的支持，但Go从一开始就是为这项工作而设计的。Go不使用操作系统的线程，而是提供了一个轻量级的替代方案：&lt;strong&gt;goroutine&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个goroutine是一个独立执行的Go函数，Go调度器会将其映射到其控制下的一个操作系统线程中。这意味着调度器可以非常有效地管理大量并发的goroutine，只使用有限的操作系统线程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，你可以在一个程序中运行数百万个并发的goroutine，而不会产生严重的性能问题。这使得Go成为高规模并发应用程序的完美选择，如网络服务器和微服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go还具有快速、安全、高效的功能特性，可以使用channel让goroutines进行通信和共享数据。Go的并发支持感觉设计得很好，使用起来也很愉快。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说，对并发程序进行推断是很难的，而且在任何语言中建立可靠、正确的并发程序都是一个挑战。但由于它从一开始就内置于语言中，而不是事后才想到的，Go中的并发编程是最简单、最完整的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go语言可以很容易地建立一个很好的多因素的应用程序，充分利用并发性，同时作为一组微服务进行部署。Rust也可以做这些事情，但可以说它更难。 在某些方面，Rust对防止与内存有关的安全漏洞的痴迷意味着程序员必须不遗余力地执行那些在其他语言（包括Go）中会更简单的任务。 - &lt;span&gt;Sonya Koptyev&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比之下，Rust中的并发故事是非常新的，而且还在稳定中，但它正处于非常积极的开发中，所以请关注这个领域。例如，Rust的&lt;span&gt;rayon库&lt;/span&gt;&lt;sup&gt;[21]&lt;/sup&gt;提供了一种非常优雅和轻量级的方式来将顺序计算转化为并行计算。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;拥有goroutines和使用channel的轻量级语法真的很好。这真的显示了语法的力量，这些小细节使并发编程比其他语言感觉好得多 - &lt;span&gt;一个Rust程序员对Go的早期印象&lt;/span&gt;&lt;sup&gt;[22]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然在Rust中实现并发程序可能不那么简单，但还是有可能的，而且这些程序可以利用Rust的安全保证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个很好的例子是标准库的Mutex类：在Go中，你可以忘记在访问某些东西之前获得一个Mutex锁，但Rust不会让你这样做。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go专注于将并发性作为一个一等公民的概念。这并不是说你不能在Rust中找到Go的面向actor的并发性，但这是留给程序员的一个练习。 - &lt;span&gt;Dave Cheney&lt;/span&gt;&lt;sup&gt;[23]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;安全&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在前面看到，Go和Rust都以不同的方式来防止一大类与内存管理有关的常见编程错误。但是Rust尤其努力确保你不会做一些你不想做的不安全的事情。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Rust的编译器非常严格和学究派，它检查你使用的每个变量和你引用的每个内存地址。它避免了可能的数据竞争条件，并告知你未定义的行为。并发和内存安全问题在Rust的安全子集中根本不可能发生。 - &lt;span&gt;为什么是Rust？&lt;/span&gt;&lt;sup&gt;[24]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这将使Rust编程成为与几乎所有其他语言不同的体验，而且一开始可能是一种挑战。但对很多人来说，这种辛苦是值得的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;对我来说，Rust的关键优势是一种感觉，即编译器是我的后盾，不会让它可能检测到的任何错误通过（说真的，有时感觉就像魔法一样）。 - Grzegorz Nosek&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;包括Go在内的许多语言都有帮助程序员避免错误的设施，但Rust将这一点提高到了一个新的水平，因此可能不正确的程序甚至不会被编译。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有了Rust，库程序员有很多工具来防止他/她的用户犯错。Rust让我们有能力说，我们拥有一块特定的数据；其他东西不可能声称拥有，所以我们知道没有其他东西能够修改它。我想不出以前有什么时候我被赋予过这么多工具来防止意外的误用。这是一种奇妙的感觉。 - &lt;span&gt;山姆-罗斯&lt;/span&gt;&lt;sup&gt;[25]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“与借用检查器(borrow checker)斗争”是Rust程序员新手的常见综合症，但在大多数情况下，它所发现的问题是你的代码中真正的bug（或至少是潜在的bug）。它可能会迫使你从根本上重构你的程序，以避免遇到这些问题；而当正确性和可靠性是你的首要任务时，这是件好事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个不改变你编程方式的语言有什么意义呢？当你用其他语言工作时，Rust所教授的关于安全的课程也是有用的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果你选择了Rust，通常你需要该语言提供的保证：针对空指针和数据竞争的安全，可预测的运行时行为，以及对硬件的完全控制。如果你不需要这些功能，Rust可能是你下一个项目的糟糕选择。这是因为这些保证是有代价的：入门时间。你需要戒掉坏习惯，学习新概念。有可能的是，当你开始的时候，你会经常和借用检查器斗争。 - &lt;span&gt;Matthias Endler&lt;/span&gt;&lt;sup&gt;[26]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你觉得Rust的编程模型有多大的挑战性，可能取决于你以前有哪些其他语言的经验。Python或Ruby程序员可能会发现它的限制性；其他人会很高兴。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果你是一个花了几周的时间来追寻内存安全漏洞的C/C++程序员，你会非常欣赏Rust。&quot;与借用检查器斗争&quot;变成了&quot;编译器可以检测到这个？酷！&quot; -Grzegorz Nosek&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;规模化&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;今天的服务器程序由数千万行代码组成，由数百甚至数千名程序员进行构建，而且每天都在更新。Go的设计和开发是为了使在这种环境中工作更有成效。Go的设计考虑包括严格的依赖性管理，随着系统的发展，软件架构的适应性，以及组件之间的健壮性。 - &lt;span&gt;Rob Pike&lt;/span&gt;&lt;sup&gt;[27]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你一个人或在小团队中处理问题时，选择简单的语言还是功能丰富的语言是一个偏好的问题。但是当软件越来越大，越来越复杂，团队越来越大时，差异就开始显现出来了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于大型应用程序和分布式系统来说，执行速度不如开发速度重要：像Go这样刻意简化的语言可以减少新开发人员的启动时间，并使他们更容易处理大型代码库的工作。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有了Go，作为初级开发者更容易提高工作效率，而作为中级开发者则更难引入会导致后续问题的脆弱抽象。由于这些原因，Rust在企业软件开发方面不如Go有说服力。 - &lt;span&gt;Loris Cro&lt;/span&gt;&lt;sup&gt;[28]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当涉及到大型的软件开发时，清晰的比聪明的好。Go的局限性实际上使它比Rust等更复杂和强大的语言更适合企业和大机构。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Rust和Go的不同点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然Rust和Go都是流行的、现代的、广泛使用的语言，但它们并不是真正的竞争对手，因为它们故意针对的是完全不同的使用情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Go的整个编程方法&lt;/span&gt;&lt;sup&gt;[29]&lt;/sup&gt;与Rust的完全不同，每一种语言都适合一些人，同时也会刺激另一些人。这完全没问题，如果Rust和Go都能以或多或少相同的方式做同样的事情，我们就不会真的需要两种不同的语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，我们是否可以通过发现Rust和Go所采取的截然不同的方法来了解它们各自的本性呢？让我们拭目以待。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;垃圾回收&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“要不要垃圾回收”是一个没有正确答案的问题。垃圾回收，以及一般的自动内存管理，使得开发可靠、高效的程序变得快速和容易，对于一些人来说，这至关重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但也有人说，垃圾回收及其性能开销和停顿，使程序在运行时表现得不可预测，并引入了不可接受的延迟。争论还在继续。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go是一种与Rust非常不同的语言。虽然两者都可以被模糊地描述为系统语言或C语言的替代品，但它们有不同的目标和应用、语言设计的风格以及优先级。垃圾回收是一个真正巨大的区别。Go中的GC使语言更简单，更小，更容易推理。在Rust中没有GC会让它变得非常快（尤其是当你需要保证延迟，而不仅仅是高吞吐量的时候），并且可以实现Go中不可能实现的功能和编程模式（或者至少是在不牺牲性能的情况下）。 - &lt;span&gt;PingCAP&lt;/span&gt;&lt;sup&gt;[30]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;接近机器&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算机编程的历史是一个越来越复杂的抽象的故事，它让程序员在解决问题时不用太担心底层机器的实际运作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这使得程序更容易编写，也许更容易移植。但是对于许多程序来说，对硬件的访问以及对程序执行方式的精确控制更为重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust的目标是让程序员“更接近机器”，有更多的控制权，但Go抽象了架构细节，让程序员更接近问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;两种语言都有不同的适用范围。Go在编写微服务和典型的&quot;DevOps&quot;任务方面表现出色，但它不是一种系统编程语言。Rust对于那些看重并发性、安全性和性能的任务中更强；但它的学习曲线比Go更陡峭。 - &lt;span&gt;Matthias Endler&lt;/span&gt;&lt;sup&gt;[31]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;必须运行更快&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;许多人同意，对于大多数程序来说，&lt;span&gt;性能不如可读性重要&lt;/span&gt;&lt;sup&gt;[32]&lt;/sup&gt;。但当性能确实重要时，它真的很重要。Rust做了一些设计上的权衡，以达到尽可能好的执行速度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比之下，Go更关注简单性，它愿意为此牺牲一些（运行时）性能。但是Go的构建速度是无可匹敌的，这对于大型代码库来说是非常重要的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Rust比Go快。在基准测试中，Rust更快，在某些情况下，甚至是数量级的快。但在你选择用Rust写所有东西之前，考虑一下Go在许多基准测试中并不落后于它，而且它仍然比Java、C#、JavaScript、Python等快得多。如果你需要的是顶级的性能，那么选择这两种语言中的任何一种，你都会在游戏中领先。如果你正在构建一个处理高负载的网络服务，你希望能够在纵向和横向上进行扩展，那么这两种语言都会非常适合你。- &lt;span&gt;安德鲁-拉德&lt;/span&gt;&lt;sup&gt;[33]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;正确性&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面，如果一个程序不需要正常工作的话，它可以任意地快。大多数代码不是为长期而写的，但有些程序能在生产中运行多长时间往往是令人惊讶的：在某些情况下，可以保持几十年。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这种情况下，值得在开发中多花一点时间，以确保程序的正确性、可靠性，并在未来不需要大量的维护。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go和Rust都旨在帮助你编写正确的程序，但方式不同。例如，Go提供了一个极好的内置测试框架，而Rust则专注于使用其借用检查器消除运行时的错误。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我认为。Go适用于明天必须交付的代码，而Rust适用于必须在未来五年内保持运行不动的代码。 - Grzegorz Nosek&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然Go和Rust对于任何严肃的项目来说都是很好的选择，但是让自己尽可能地了解每种语言及其特点是一个好主意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;归根结底，别人怎么想并不重要：只有你能决定哪种语言适合你和你的团队。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果你想加快开发速度，也许是因为你有许多不同的服务需要编写，或者你有一个庞大的开发团队，那么Go是你的首选语言。Go把并发性作为第一等公民给你，并且不容忍不安全的内存访问（Rust也是如此），但不强迫你管理每一个细节。Go是快速和强大的，但它避免了使开发者陷入困境，而是专注于简单性和统一性。如果在另一方面，拧出每一盎司的性能是必要的，那么Rust应该是你的选择。 - &lt;span&gt;安德鲁-拉德&lt;/span&gt;&lt;sup&gt;[34]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;结论&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我希望这篇文章能让你相信Rust和Go都值得你认真考虑。如果可能的话，你应该争取在这两种语言中至少获得一定程度的经验，因为它们对你的任何技术职业都会有极大的帮助，甚至如果你仅把编程作为一种业余爱好的话。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你只有时间投资学习一门语言，在你将Go和Rust用于各种不同类型的大小程序之前，不要做出最终决定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而编程语言的知识实际上只是成为一名成功的软件工程师的一小部分。到目前为止，你需要的最重要的技能是设计、工程、架构、沟通和协作。如果你在这些方面表现出色，无论你选择哪种语言，你都会成为一名优秀的软件工程师。学习愉快!&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“Gopher部落”知识星球&lt;/span&gt;&lt;sup&gt;[35]&lt;/sup&gt;旨在打造一个精品Go学习和进阶社群！高品质首发Go技术文章，“三天”首发阅读权，每年两期Go语言发展现状分析，每天提前1小时阅读到新鲜的Gopher日报，网课、技术专栏、图书内容前瞻，六小时内必答保证等满足你关于Go语言生态的所有需求！2023年，Gopher部落将进一步聚焦于如何编写雅、地道、可读、可测试的Go代码，关注代码质量并深入理解Go核心技术，并继续加强与星友的互动。欢迎大家加入！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.247167868177137&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cH6WzfQ94mYbN4SR0aJeoKt82pr7ibmCk1icF8xqVslY1JfrDvW4fJKB5RIWtClXGPn5Y0qsJvSibnQd6Bb9EtYWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;971&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6484620213433773&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cH6WzfQ94mYKSeNd014VMtNhYulia0OHrHVoyrVYb2JvBa5ycFaeDfscQdubicnZkxB6je42bo3J4cZcx0FticLmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1593&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48884976525821594&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cH6WzfQ94mb54jsFJZ3Knmz8obUsf3PBShthmdSw5E01TcYmUReGkj0BWpxHak1HlnlzHvLmKax53YSGr7aNlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1704&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4444444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cH6WzfQ94mb54jsFJZ3Knmz8obUsf3PBDKyzaL44T9g1YiaYeujWa3QRrVC21SnO9h9qc2ia6ibyicc6LUdnD0ibymw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Gopher Daily(Gopher每日新闻)归档仓库 - https://github.com/bigwhite/gopherdaily&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的联系方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;微博(暂不可用)：https://weibo.com/bigwhite20xx&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微博2：https://weibo.com/u/6484441286&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;博客：tonybai.com&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;github: https://github.com/bigwhite&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3436123348017621&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cH6WzfQ94maBibN71XTUmP14icYzhnEiaCpte6aEn35YSBjQqI3HVFHuua8guicBd9iaol1AQEHNEU9jEg2LePCmXHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1816&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;商务合作方式：撰稿、出书、培训、在线课程、合伙创业、咨询、广告合作。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;《Rust vs Go in 2023》: &lt;em&gt;https://bitfieldconsulting.com/golang/rust-vs-go&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;Go和Rust的道: &lt;em&gt;https://tonybai.com/2022/09/25/the-tao-of-go&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;Gints Dreimanis: &lt;em&gt;https://serokell.io/blog/rust-guide&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;p&gt;go.dev: &lt;em&gt;https://go.dev&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5] &lt;/span&gt;&lt;p&gt;正确: &lt;em&gt;https://bitfieldconsulting.com/golang/crisp-code&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6] &lt;/span&gt;&lt;p&gt;高性能: &lt;em&gt;https://bitfieldconsulting.com/golang/slower&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7] &lt;/span&gt;&lt;p&gt;Python: &lt;em&gt;https://bitfieldconsulting.com/golang/go-vs-python&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8] &lt;/span&gt;&lt;p&gt;以函数式编程为主的语言: &lt;em&gt;https://bitfieldconsulting.com/golang/functional&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9] &lt;/span&gt;&lt;p&gt;Rob Pike: &lt;em&gt;https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;t=8m43s&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10] &lt;/span&gt;&lt;p&gt;山姆-罗斯: &lt;em&gt;https://samwho.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11] &lt;/span&gt;&lt;p&gt;更倾向于清晰的代码而不是快速的代码: &lt;em&gt;https://bitfieldconsulting.com/golang/slower&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12] &lt;/span&gt;&lt;p&gt;学习Go语言: &lt;em&gt;http://gk.link/a/10AVZ&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13] &lt;/span&gt;&lt;p&gt;一个Rust程序员对Go的早期印象: &lt;em&gt;https://medium.com/better-programming/early-impressions-of-go-from-a-rust-programmer-f4fd1074c410&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14] &lt;/span&gt;&lt;p&gt;代码俱乐部视频系列: &lt;em&gt;https://bitfieldconsulting.com/code-club&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15] &lt;/span&gt;&lt;p&gt;简单、明显、常规、直接的程序: &lt;em&gt;https://bitfieldconsulting.com/golang/commandments&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16] &lt;/span&gt;&lt;p&gt;马蒂亚斯-恩德勒: &lt;em&gt;https://endler.dev/2017/go-vs-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17] &lt;/span&gt;&lt;p&gt;devathon: &lt;em&gt;https://devathon.com/blog/rust-vs-go-which-programming-language-to-choose/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18] &lt;/span&gt;&lt;p&gt;戴夫-切尼: &lt;em&gt;https://dave.cheney.net/2015/07/02/why-go-and-rust-are-not-competitors&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[19] &lt;/span&gt;&lt;p&gt;泛型: &lt;em&gt;https://bitfieldconsulting.com/golang/generics&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[20] &lt;/span&gt;&lt;p&gt;Sonya Koptyev: &lt;em&gt;https://sdtimes.com/softwaredev/the-developers-dilemma-choosing-between-go-and-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[21] &lt;/span&gt;&lt;p&gt;rayon库: &lt;em&gt;https://github.com/rayon-rs/rayon&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[22] &lt;/span&gt;&lt;p&gt;一个Rust程序员对Go的早期印象: &lt;em&gt;https://medium.com/better-programming/early-impressions-of-go-from-a-rust-programmer-f4fd1074c410&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[23] &lt;/span&gt;&lt;p&gt;Dave Cheney: &lt;em&gt;https://dave.cheney.net/2015/07/02/why-go-and-rust-are-not-competitors&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[24] &lt;/span&gt;&lt;p&gt;为什么是Rust？: &lt;em&gt;https://bitbucket.org/blog/why-rust&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[25] &lt;/span&gt;&lt;p&gt;山姆-罗斯: &lt;em&gt;https://samwho.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[26] &lt;/span&gt;&lt;p&gt;Matthias Endler: &lt;em&gt;https://endler.dev/2017/go-vs-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[27] &lt;/span&gt;&lt;p&gt;Rob Pike: &lt;em&gt;https://talks.golang.org/2012/splash.article&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[28] &lt;/span&gt;&lt;p&gt;Loris Cro: &lt;em&gt;https://kristoff.it/blog/why-go-and-not-rust&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[29] &lt;/span&gt;&lt;p&gt;Go的整个编程方法: &lt;em&gt;https://tonybai.com/2022/09/25/the-tao-of-go&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[30] &lt;/span&gt;&lt;p&gt;PingCAP: &lt;em&gt;https://medium.com/better-programming/early-impressions-of-go-from-a-rust-programmer-f4fd1074c410&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[31] &lt;/span&gt;&lt;p&gt;Matthias Endler: &lt;em&gt;https://endler.dev/2017/go-vs-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[32] &lt;/span&gt;&lt;p&gt;性能不如可读性重要: &lt;em&gt;https://bitfieldconsulting.com/golang/slower&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[33] &lt;/span&gt;&lt;p&gt;安德鲁-拉德: &lt;em&gt;https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[34] &lt;/span&gt;&lt;p&gt;安德鲁-拉德: &lt;em&gt;https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[35] &lt;/span&gt;&lt;p&gt;“Gopher部落”知识星球: &lt;em&gt;https://wx.zsxq.com/dweb2/index/group/51284458844544&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>