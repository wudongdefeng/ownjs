<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>16ad21a63b5cafeaef320026172e2de8</guid>
<title>掌握这些 SpringBoot 启动扩展点，已经超过 90% 的人了</title>
<link>https://toutiao.io/k/3m8iq2m</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.背景&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring的核心思想就是容器，当容器refresh的时候，外部看上去风平浪静，其实内部则是一片惊涛骇浪，汪洋一片。Springboot更是封装了Spring，遵循约定大于配置，加上自动装配的机制。很多时候我们只要引用了一个依赖，几乎是零配置就能完成一个功能的装配。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我非常喜欢这种自动装配的机制，所以在自己开发中间件和公共依赖工具的时候也会用到这个特性。让使用者以最小的代价接入。想要把自动装配玩的转，就必须要了解spring对于bean的构造生命周期以及各个扩展接口。当然了解了bean的各个生命周期也能促进我们加深对spring的理解。业务代码也能合理利用这些扩展点写出更加漂亮的代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在网上搜索spring扩展点，发现很少有博文说的很全的，只有一些常用的扩展点的说明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以在这篇文章里，我总结了几乎Spring &amp;amp; Springboot所有的扩展接口，以及各个扩展点的使用场景。并且整理出了一个bean在spring内部从被加载到最后初始化完成所有可扩展点的顺序调用图。从而我们也能窥探到bean是如何一步步加载到spring容器中的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.可扩展的接口启动调用顺序图&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是我整理的spring容器中Bean的生命周期内所有可扩展的点的调用顺序，下面会一个个分析&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0140625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/WwPkUCFX4x6DPjNSYLzenYFJQChicrmUZC0INZm90RVZIiautnVJn29P6xMRVmMP6r9B4maSpVTS85f523vt1Odg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.ApplicationContextInitializer&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.context.ApplicationContextInitializer&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是整个spring容器在刷新之前初始化&lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;的回调接口，简单来说，就是在容器刷新之前调用此类的&lt;code&gt;initialize&lt;/code&gt;方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以想到的场景可能为，在最开始激活一些配置，或者利用这时候class还没被类加载器加载的时机，进行动态字节码注入等操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestApplicationContextInitializer&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationContextInitializer&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;initialize&lt;/span&gt;&lt;span&gt;(ConfigurableApplicationContext applicationContext)&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[ApplicationContextInitializer]&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这时候spring容器还没被初始化，所以想要自己的扩展的生效，有以下三种方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在启动类中用&lt;code&gt;springApplication.addInitializers(new TestApplicationContextInitializer())&lt;/code&gt;语句加入&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;配置文件配置&lt;code&gt;context.initializer.classes=com.example.demo.TestApplicationContextInitializer&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Spring SPI扩展，在spring.factories中加入&lt;code&gt;org.springframework.context.ApplicationContextInitializer=com.example.demo.TestApplicationContextInitializer&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.BeanDefinitionRegistryPostProcessor&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个接口在读取项目中的&lt;code&gt;beanDefinition&lt;/code&gt;之后执行，提供一个补充的扩展点&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景：你可以在这里动态注册自己的&lt;code&gt;beanDefinition&lt;/code&gt;，可以加载classpath之外的bean&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestBeanDefinitionRegistryPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanDefinitionRegistryPostProcessor&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanDefinitionRegistry&lt;/span&gt;&lt;span&gt;(BeanDefinitionRegistry registry)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanDefinitionRegistry&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanFactory&lt;/span&gt;&lt;span&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanFactory&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.BeanFactoryPostProcessor&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.config.BeanFactoryPostProcessor&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个接口是&lt;code&gt;beanFactory&lt;/code&gt;的扩展接口，调用时机在spring在读取&lt;code&gt;beanDefinition&lt;/code&gt;信息之后，实例化bean之前。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的&lt;code&gt;beanDefinition&lt;/code&gt;的元信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestBeanFactoryPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryPostProcessor&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanFactory&lt;/span&gt;&lt;span&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[BeanFactoryPostProcessor]&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.InstantiationAwareBeanPostProcessor&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该接口继承了&lt;code&gt;BeanPostProcess&lt;/code&gt;接口，区别如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;BeanPostProcess&lt;/code&gt;接口只在bean的初始化阶段进行扩展（注入spring上下文前后），而&lt;code&gt;InstantiationAwareBeanPostProcessor&lt;/code&gt;接口在此基础上增加了3个方法，把可扩展的范围增加了实例化阶段和属性注入阶段。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该类主要的扩展点有以下5个方法，主要在bean生命周期的两大阶段：&lt;strong&gt;实例化阶段&lt;/strong&gt;和&lt;strong&gt;初始化阶段&lt;/strong&gt;，下面一起进行说明，按调用顺序为：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;postProcessBeforeInstantiation&lt;/code&gt;：实例化bean之前，相当于new这个bean之前&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;postProcessAfterInstantiation&lt;/code&gt;：实例化bean之后，相当于new这个bean之后&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;postProcessPropertyValues&lt;/code&gt;：bean已经实例化完成，在属性注入时阶段触发，&lt;code&gt;@Autowired&lt;/code&gt;,&lt;code&gt;@Resource&lt;/code&gt;等注解原理基于此方法实现&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;：初始化bean之前，相当于把bean注入spring上下文之前&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;postProcessAfterInitialization&lt;/code&gt;：初始化bean之后，相当于把bean注入spring上下文之后&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景：这个扩展点非常有用 ，无论是写中间件和业务中，都能利用这个特性。比如对实现了某一类接口的bean在各个生命期间进行收集，或者对某个类型的bean进行统一的设值等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestInstantiationAwareBeanPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;InstantiationAwareBeanPostProcessor&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestInstantiationAwareBeanPostProcessor] before initialization &quot;&lt;/span&gt; + beanName);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; bean;    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestInstantiationAwareBeanPostProcessor] after initialization &quot;&lt;/span&gt; + beanName);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; bean;    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;postProcessBeforeInstantiation&lt;/span&gt;&lt;span&gt;(Class&amp;lt;?&amp;gt; beanClass, String beanName)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestInstantiationAwareBeanPostProcessor] before instantiation &quot;&lt;/span&gt; + beanName);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;postProcessAfterInstantiation&lt;/span&gt;&lt;span&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestInstantiationAwareBeanPostProcessor] after instantiation &quot;&lt;/span&gt; + beanName);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; PropertyValues &lt;span&gt;postProcessPropertyValues&lt;/span&gt;&lt;span&gt;(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestInstantiationAwareBeanPostProcessor] postProcessPropertyValues &quot;&lt;/span&gt; + beanName);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; pvs;    &lt;br/&gt;    }    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7.SmartInstantiationAwareBeanPostProcessor&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该扩展接口有3个触发点方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;predictBeanType&lt;/code&gt;：该触发点发生在&lt;code&gt;postProcessBeforeInstantiation&lt;/code&gt;之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测Bean的类型，返回第一个预测成功的Class类型，如果不能预测返回null；当你调用&lt;code&gt;BeanFactory.getType(name)&lt;/code&gt;时当通过bean的名字无法得到bean类型信息时就调用该回调方法来决定类型信息。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;determineCandidateConstructors&lt;/code&gt;：该触发点发生在&lt;code&gt;postProcessBeforeInstantiation&lt;/code&gt;之后，用于确定该bean的构造函数之用，返回的是该bean的所有构造函数列表。用户可以扩展这个点，来自定义选择相应的构造器来实例化这个bean。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;getEarlyBeanReference&lt;/code&gt;：该触发点发生在&lt;code&gt;postProcessAfterInstantiation&lt;/code&gt;之后，当有循环依赖的场景，当bean实例化好之后，为了防止有循环依赖，会提前暴露回调方法，用于bean实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestSmartInstantiationAwareBeanPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;SmartInstantiationAwareBeanPostProcessor&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; predictBeanType(Class&amp;lt;?&amp;gt; beanClass, String beanName) &lt;span&gt;throws&lt;/span&gt; BeansException {    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestSmartInstantiationAwareBeanPostProcessor] predictBeanType &quot;&lt;/span&gt; + beanName);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; beanClass;    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; Constructor&amp;lt;?&amp;gt;[] determineCandidateConstructors(Class&amp;lt;?&amp;gt; beanClass, String beanName) &lt;span&gt;throws&lt;/span&gt; BeansException {    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestSmartInstantiationAwareBeanPostProcessor] determineCandidateConstructors &quot;&lt;/span&gt; + beanName);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;getEarlyBeanReference&lt;/span&gt;&lt;span&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestSmartInstantiationAwareBeanPostProcessor] getEarlyBeanReference &quot;&lt;/span&gt; + beanName);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; bean;    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8.BeanFactoryAware&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.BeanFactoryAware&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个类只有一个触发点，发生在bean的实例化之后，注入属性之前，也就是Setter之前。这个类的扩展点方法为&lt;code&gt;setBeanFactory&lt;/code&gt;，可以拿到&lt;code&gt;BeanFactory&lt;/code&gt;这个属性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景为，你可以在bean实例化之后，但还未初始化之前，拿到 &lt;code&gt;BeanFactory&lt;/code&gt;，在这个时候，可以对每个bean作特殊化的定制。也或者可以把&lt;code&gt;BeanFactory&lt;/code&gt;拿到进行缓存，日后使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestBeanFactoryAware&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryAware&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setBeanFactory&lt;/span&gt;&lt;span&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestBeanFactoryAware] &quot;&lt;/span&gt; + beanFactory.getBean(TestBeanFactoryAware&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;getClass&lt;/span&gt;().&lt;span&gt;getSimpleName&lt;/span&gt;())&lt;/span&gt;;    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9.ApplicationContextAwareProcessor&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.context.support.ApplicationContextAwareProcessor&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该类本身并没有扩展点，但是该类内部却有6个扩展点可供实现 ，这些类触发的时机在bean实例化之后，初始化之前&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/WwPkUCFX4x6DPjNSYLzenYFJQChicrmUZZy3BdOh9wXicZjbk7BZLZkugDyBtswaav2X0JZZ923txcXxwU1Gejtg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，该类用于执行各种驱动接口，在bean实例化之后，属性填充之后，通过执行以上红框标出的扩展接口，来获取对应容器的变量。&lt;strong&gt;所以这里应该来说是有6个扩展点&lt;/strong&gt;，这里就放一起来说了&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;EnvironmentAware&lt;/code&gt;：用于获取&lt;code&gt;EnviromentAware&lt;/code&gt;的一个扩展类，这个变量非常有用， 可以获得系统内的所有参数。当然个人认为这个Aware没必要去扩展，因为spring内部都可以通过注入的方式来直接获得。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;EmbeddedValueResolverAware&lt;/code&gt;：用于获取&lt;code&gt;StringValueResolver&lt;/code&gt;的一个扩展类， &lt;code&gt;StringValueResolver&lt;/code&gt;用于获取基于&lt;code&gt;String&lt;/code&gt;类型的properties的变量，一般我们都用&lt;code&gt;@Value&lt;/code&gt;的方式去获取，如果实现了这个Aware接口，把&lt;code&gt;StringValueResolver&lt;/code&gt;缓存起来，通过这个类去获取&lt;code&gt;String&lt;/code&gt;类型的变量，效果是一样的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;ResourceLoaderAware&lt;/code&gt;：用于获取&lt;code&gt;ResourceLoader&lt;/code&gt;的一个扩展类，&lt;code&gt;ResourceLoader&lt;/code&gt;可以用于获取classpath内所有的资源对象，可以扩展此类来拿到&lt;code&gt;ResourceLoader&lt;/code&gt;对象。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt;：用于获取&lt;code&gt;ApplicationEventPublisher&lt;/code&gt;的一个扩展类，&lt;code&gt;ApplicationEventPublisher&lt;/code&gt;可以用来发布事件，结合&lt;code&gt;ApplicationListener&lt;/code&gt;来共同使用，下文在介绍&lt;code&gt;ApplicationListener&lt;/code&gt;时会详细提到。这个对象也可以通过spring注入的方式来获得。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;MessageSourceAware&lt;/code&gt;：用于获取&lt;code&gt;MessageSource&lt;/code&gt;的一个扩展类，&lt;code&gt;MessageSource&lt;/code&gt;主要用来做国际化。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;ApplicationContextAware&lt;/code&gt;：用来获取&lt;code&gt;ApplicationContext&lt;/code&gt;的一个扩展类，&lt;code&gt;ApplicationContext&lt;/code&gt;应该是很多人非常熟悉的一个类了，就是spring上下文管理器，可以手动的获取任何在spring上下文注册的bean，我们经常扩展这个接口来缓存spring上下文，包装成静态方法。同时&lt;code&gt;ApplicationContext&lt;/code&gt;也实现了&lt;code&gt;BeanFactory&lt;/code&gt;，&lt;code&gt;MessageSource&lt;/code&gt;，&lt;code&gt;ApplicationEventPublisher&lt;/code&gt;等接口，也可以用来做相关接口的事情。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10.BeanNameAware&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.BeanNameAware&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，这个类也是Aware扩展的一种，触发点在bean的初始化之前，也就是&lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;之前，这个类的触发点方法只有一个：&lt;code&gt;setBeanName&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景为：用户可以扩展这个点，在初始化bean之前拿到spring容器中注册的的beanName，来自行修改这个beanName的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;NormalBeanA&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanNameAware&lt;/span&gt;&lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;NormalBeanA&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;NormalBean constructor&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setBeanName&lt;/span&gt;&lt;span&gt;(String name)&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[BeanNameAware] &quot;&lt;/span&gt; + name);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11.@PostConstruct&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;javax.annotation.PostConstruct&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了&lt;code&gt;@PostConstruct&lt;/code&gt;，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在&lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;之后，&lt;code&gt;InitializingBean.afterPropertiesSet&lt;/code&gt;之前。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景：用户可以对某一方法进行标注，来进行初始化某一个属性&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;NormalBeanA&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;NormalBeanA&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;NormalBean constructor&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[PostConstruct] NormalBeanA&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12.InitializingBean&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.InitializingBean&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个类，顾名思义，也是用来初始化bean的。&lt;code&gt;InitializingBean&lt;/code&gt;接口为bean提供了初始化方法的方式，它只包括&lt;code&gt;afterPropertiesSet&lt;/code&gt;方法，凡是继承该接口的类，在初始化bean的时候都会执行该方法。这个扩展点的触发时机在&lt;code&gt;postProcessAfterInitialization&lt;/code&gt;之前。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;NormalBeanA&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;InitializingBean&lt;/span&gt;&lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[InitializingBean] NormalBeanA&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13.FactoryBean&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.FactoryBean&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下，Spring通过反射机制利用bean的class属性指定支线类去实例化bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在bean中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个&lt;code&gt;org.springframework.bean.factory.FactoryBean&lt;/code&gt;的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;FactoryBean&lt;/code&gt;接口对于Spring框架来说占用重要的地位，Spring自身就提供了70多个&lt;code&gt;FactoryBean&lt;/code&gt;的实现。它们隐藏了实例化一些复杂bean的细节，给上层应用带来了便利。从Spring3.0开始，&lt;code&gt;FactoryBean&lt;/code&gt;开始支持泛型，即接口声明改为&lt;code&gt;FactoryBean&amp;lt;T&amp;gt;&lt;/code&gt;的形式&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景：用户可以扩展这个类，来为要实例化的bean作一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿&lt;code&gt;ProxyFactoryBean&lt;/code&gt;的功能。扩展：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&amp;amp;mid=2247488811&amp;amp;idx=2&amp;amp;sn=0d054027651bef114ae6bec5a8f62359&amp;amp;chksm=ebd62a07dca1a3111269692dd9b0a5ab8af7d2038b8ec6600a057573364e76db1332adc5fd46&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;SpringBoot内容聚合&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestFactoryBean&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;FactoryBean&lt;/span&gt;&amp;lt;&lt;span&gt;TestFactoryBean&lt;/span&gt;.&lt;span&gt;TestFactoryInnerBean&lt;/span&gt;&amp;gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; TestFactoryBean.&lt;span&gt;TestFactoryInnerBean &lt;span&gt;getObject&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[FactoryBean] getObject&quot;&lt;/span&gt;);    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; TestFactoryBean.TestFactoryInnerBean();    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; getObjectType() {    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; TestFactoryBean.TestFactoryInnerBean&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;;    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isSingleton&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;    &lt;br/&gt;    }    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestFactoryInnerBean&lt;/span&gt;&lt;/span&gt;{    &lt;br/&gt;    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;14.SmartInitializingSingleton&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.SmartInitializingSingleton&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个接口中只有一个方法&lt;code&gt;afterSingletonsInstantiated&lt;/code&gt;，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。其触发时机为&lt;code&gt;postProcessAfterInitialization&lt;/code&gt;之后。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景：用户可以扩展此接口在对所有单例对象初始化完毕后，做一些后置的业务处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestSmartInitializingSingleton&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;SmartInitializingSingleton&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterSingletonsInstantiated&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestSmartInitializingSingleton]&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;15.CommandLineRunner&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.boot.CommandLineRunner&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个接口也只有一个方法：&lt;code&gt;run(String... args)&lt;/code&gt;，触发时机为整个项目启动完毕后，自动执行。如果有多个&lt;code&gt;CommandLineRunner&lt;/code&gt;，可以利用&lt;code&gt;@Order&lt;/code&gt;来进行排序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestCommandLineRunner&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;CommandLineRunner&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;(String... args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[TestCommandLineRunner]&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;16.DisposableBean&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.beans.factory.DisposableBean&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个扩展点也只有一个方法：&lt;code&gt;destroy()&lt;/code&gt;，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行&lt;code&gt;applicationContext.registerShutdownHook&lt;/code&gt;时，就会触发这个方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩展方式为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;NormalBeanA&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;DisposableBean&lt;/span&gt; &lt;/span&gt;{    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;destroy&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{    &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[DisposableBean] NormalBeanA&quot;&lt;/span&gt;);    &lt;br/&gt;    }    &lt;br/&gt;}    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;17.ApplicationListener&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;org.springframework.context.ApplicationListener&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;准确的说，这个应该不算spring&amp;amp;springboot当中的一个扩展点，&lt;code&gt;ApplicationListener&lt;/code&gt;可以监听某个事件的&lt;code&gt;event&lt;/code&gt;，触发时机可以穿插在业务方法执行过程中，用户可以自定义某个业务事件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是spring内部也有一些内置事件，这种事件，可以穿插在启动调用中。我们也可以利用这个特性，来自己做一些内置事件的监听器来达到和前面一些触发点大致相同的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来罗列下spring主要的内置事件：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;ContextRefreshedEvent&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在&lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;接口中使用 &lt;code&gt;refresh()&lt;/code&gt;方法来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，&lt;code&gt;ApplicationContext&lt;/code&gt;容器已就绪可用。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;ContextStartedEvent&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当使用 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt; （ApplicationContext子接口）接口中的 &lt;code&gt;start()&lt;/code&gt; 方法启动 &lt;code&gt;ApplicationContext&lt;/code&gt;时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;ContextStoppedEvent&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当使用 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;接口中的 &lt;code&gt;stop()&lt;/code&gt;停止&lt;code&gt;ApplicationContext&lt;/code&gt; 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;ContextClosedEvent&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当使用 &lt;code&gt;ConfigurableApplicationContext&lt;/code&gt;接口中的 &lt;code&gt;close()&lt;/code&gt;方法关闭 &lt;code&gt;ApplicationContext&lt;/code&gt; 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;RequestHandledEvent&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;18.最后&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们从这些spring&amp;amp;springboot的扩展点当中，大致可以窥视到整个bean的生命周期。在业务开发或者写中间件业务的时候，可以合理利用spring提供给我们的扩展点，在spring启动的各个阶段内做一些事情。以达到自定义初始化的目的。此篇总结，如果有错误或者疏漏的地方，恳请指正。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>824c56294ff6a2d4d708f6006d744fc9</guid>
<title>也聊一聊服务稳定性建设</title>
<link>https://toutiao.io/k/ccmz6bl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-1t3idc4&quot; options=&quot;[object Object]&quot;&gt;&lt;h2 data-first-child=&quot;&quot; id=&quot;h_552491334_0&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;写在前面&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;weiOoa3N&quot;&gt;俗话说“缺啥补啥”。想起写这么一篇文章，不是因为自己和团队稳定性建设做得有多好，相反，最近经常被吐槽线上不“稳定”.... 回想当年，作者进入某度的第一个项目中，从0到1撸了一个多月的码（检索模块c/c++）。后面QA测试N轮，硬是没能提出几个有效bug，线上似乎也没啥动静。现在却被人指责稳定性做得不好。这事儿看起来不能忍。&lt;/p&gt;&lt;p data-pid=&quot;7aMM8V8n&quot;&gt; “稳定”这个词，从用户到ZF机关，一线研发到老板，大家似乎都会经常提及。不过作者发现，他们所谓的稳定性，也不见得就是一回事。网上搜了搜，没看到有什么公认的定义，系统论述这个话题的文档也不多，讲实战的倒是不少。本文中，作者试图做个相对“系统”的论述，重点讨论“服务稳定性”是什么，应该如何建设。作者之前经历绝大部分时间都在做后端开发，能力和视野所限，难免会偏服务端。&lt;/p&gt;&lt;p data-pid=&quot;YsoDOLfv&quot;&gt;相比于“系统性”，很多优秀的程序员都只喜欢听所谓的“干货”。在“系统性”和“干货”之间不断地纠结中，作者艰难地完成了本文。&lt;/p&gt;&lt;p data-pid=&quot;7kNoKukT&quot;&gt;全文基本没什么新鲜玩意，很多都是老生常谈，也借鉴了非常多的来源。作者只是努力整理并重新组织在了一起。因为来源太庞杂，我就没法一一例举相关出处，如有侵权，请联系作者删除。这里一并谢过执导过我，帮助过我和分享自己的知识到互联网的所有大佬们！&lt;/p&gt;&lt;h2 id=&quot;h_552491334_1&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;我们都在聊什么&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;Y_-9FAw6&quot;&gt;“稳定性”其实还挺难定义的。让我们先看几个英文单词：Availability, Reliability, Stability。&lt;/p&gt;&lt;p data-pid=&quot;r8axWcYo&quot;&gt;&lt;b&gt;Availability：&lt;/b&gt;经常被翻译成可用性。看到这个单词，相信大部分人脑子里应该都会呈现很多个9。看图1，4个9的稳定性意味着一年宕机时间不能超过53min，其实是非常难的。可用性这个概念关注的是系统故障时长。实际上，我们平常会更关注这个宕机时间如何定义的。很多人说自己服务可用性是99.99%，不要轻易相信。你去帮他review下，会惊喜地发现，他可以通过宕机时间本身的定义任意调整这个值。所以如果是上下游关系，还是先把这个指标定义清楚再聊别的会比较好。常见的定义举例：影响核心功能(e.g.下单)成功率20%以上所持续时间等等。这里的X%还挺重要的。后面的讨论中，我们可以依据这个百分比，设计我们的灰度方案等。以免发布个小流量，还搞出P0，不合适。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b6e154c928a759816662c400532f1113_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;947&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-b6e154c928a759816662c400532f1113_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;947&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-b6e154c928a759816662c400532f1113_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-b6e154c928a759816662c400532f1113_b.jpg&quot;/&gt;&lt;figcaption&gt;图1. N个9的稳定性&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;711Sf9st&quot;&gt;&lt;b&gt;Reliability：&lt;/b&gt;经常被翻译成可靠性。相对于可用性，可靠性关注的可能会更泛一些。在服务化的场景下，大家会经常提到SLA。SLA是对一个服务可靠程度的相对量化的约定。其中就可以包括服务可用时长、接口响应时间(如99分位)、错误率、集群吞吐率等等。SLA建议尽量用书面形式提供，并且服务提供方和调用方一同签字画押。一般还有配套的奖惩措施才能工作的更好。签字画押，是为了后面少扯皮。很多时候，处理线上事故总是没有事故定责时候来的令人紧张刺激。&lt;/p&gt;&lt;p data-pid=&quot;ydJj_fYy&quot;&gt;如果下游没有提供明确的SLA，我们就得自己根据历史数据猜测下游各项指标，以便写出还算合理的代码，比如超时时间、重试次数、限流大小等等都跟下游服务能力密切相关。当然下游也是动态的，如果对方都无法提供明确的SLA，那其实大家都挺难的。咱们自己提供的服务，最好都有明确的量化指标，随时提供给上游。如果给不出来，说明我们对自己服务还不够了解，没有足够的掌控能力。&lt;/p&gt;&lt;p data-pid=&quot;WDTY8EYn&quot;&gt;如果是内部系统，老板还会经常关注线上问题数量和等级分布等。处理P0事故紧不紧张？这些都是在努力量化一个系统的可靠程度。&lt;/p&gt;&lt;p data-pid=&quot;JtSF_qCq&quot;&gt;&lt;b&gt;Stability：&lt;/b&gt;一般翻译成稳定性。通常是指一个系统如果输入保持不变，输出也不会随着时间发生变化。但是这个稳定性，大概不是我们经常在讨论的稳定性。你会发现歪果大佬们一般讨论“稳定性”的时候喜欢用Reliability，而国内大佬们却喜欢用“稳定性”。yy一下，这很可能又是个中国特色的表述了。大概来自于前辈们对我dang“维稳工作”的深刻印象。你会发现我们所谓的“稳定性建设”跟传统意义上的“维稳工作”基本思路是惊人一致的。监控，隔离，应急处置，特殊事件保障，演练，宣传培训等等，请各位客官自行发挥想象力...只是互联网环境下，我们不太可能期待“输入不变”。而是，在输入经常不确定，且系统在不停地迭代的情况下，确保新老输入都能&lt;b&gt;在预期的时间内得到令用户满意的结果&lt;/b&gt;。&lt;/p&gt;&lt;p data-pid=&quot;8-h1V8g5&quot;&gt;作者认为，其实概念可能也没那么重要。“稳定性”这个词儿似乎也很贴切，有点中国特色挺好。稳定性建设的关键是，我们得找到一套大家都认可的指标来衡量他。对于相对独立的服务，作者推荐用SLA去约定一个服务的稳定性，并尽最大努力达成这个承诺。对于服务提供方，SLA不仅是一个承诺，更是对自身量化的要求。&lt;b&gt;当我们都不敢做出承诺的时候，又何谈稳定性建设，何谈责任与成长？&lt;/b&gt;至于怎么定义一个“服务”，一是看业务边界，二是看组织架构。很多时候组织架构决定系统架构，而SLA制定过程也跟组织架构密不可分。对于终端团队，我们可以在SLA基础上做一些扩展，比如增加一些体验相关指标。有时候个别后端服务挂了，可以做到对用户无感，反而APP经常crash那可能是个灾难。所以，稳定性也得分层去看。&lt;/p&gt;&lt;p data-pid=&quot;AZMKtP7n&quot;&gt;&lt;b&gt;Dickerson的可靠性层次模型&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;ObuJui3o&quot;&gt;其实作者之前也没听过该大佬。为了准备这边文章无意中搜到的。他据说是前谷哥SRE团队成员。然后后人在谷哥&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//sre.google/books/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;SRE电子书&lt;/a&gt;&lt;/u&gt;中引述了相关模型。大佬也是借鉴了马斯洛需求层次模型。马老师的这个模型中表示，想得到上一层的满足，你得先保证其下一层已经得到了很好的满足，否则容易“出事儿”。比如，当我们都没饭吃了，哪儿还会去关心哪个行业更卷呢？当然当我们很好地实现了某一层，那下一层需求就会是我们最大的动力来源。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6332c9cba9e3d0ab43e30364bdf65476_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1098&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-6332c9cba9e3d0ab43e30364bdf65476_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1098&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-6332c9cba9e3d0ab43e30364bdf65476_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6332c9cba9e3d0ab43e30364bdf65476_b.jpg&quot;/&gt;&lt;figcaption&gt;图2. 马斯洛需求层次&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;2kimWrtA&quot;&gt;参考M老师的模型，D大佬提出了他的稳定性层次模型，以便帮助SRE团队更好的保障系统稳定性。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6357019e3ef3c84214b6086b4b48cbb1_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;831&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-6357019e3ef3c84214b6086b4b48cbb1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;831&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-6357019e3ef3c84214b6086b4b48cbb1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-6357019e3ef3c84214b6086b4b48cbb1_b.jpg&quot;/&gt;&lt;figcaption&gt;图3. Dickerson可靠新层次模型&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;5pI_n2gn&quot;&gt; 在D的模型中，他从SRE的视角出发，将稳定性建设也分了7层。&lt;/p&gt;&lt;p data-pid=&quot;MsEJjlkM&quot;&gt;1. 他认为稳定性建设最基础是监控(Monitoring)。没有监控，一个服务是否稳定无从谈起。我们首先得知道服务运行情况，当系统哪里出了故障，我们需要及时发现(告警)。&lt;/p&gt;&lt;p data-pid=&quot;ZgvvUp9P&quot;&gt;2. 当获知系统出故障后，SRE们需要作出一些应急响应(Incident Response)，包括24小时on-call机制，系统降级预案，协同相关方进行进一步分析，定位最终原因并修复上线。&lt;/p&gt;&lt;p data-pid=&quot;YMpxeAub&quot;&gt;3. 事后，还需要组织进行深度复盘和根因分析(Postmortem/Root Cause Analysis)。我们需要做到从失败中学习，并尽量保证未来不会掉进同样的坑。&lt;/p&gt;&lt;p data-pid=&quot;wUiiQrpG&quot;&gt;4. 前三步都是在做一些防御工事，我们应该尽量在测试阶段就发现问题，并通过科学的发布过程来保证不会轻易引入新的线上问题(Testing+Release procedures)。&lt;/p&gt;&lt;p data-pid=&quot;_nIzaeaN&quot;&gt;5. SRE们还需要关注容量需求的变化情况(Capacity Planning)。系统是动态的，我们需要尽力做到让资源在适当的时机，能够灵活的调配到真正需要他的地方。&lt;/p&gt;&lt;p data-pid=&quot;wW_L98Gt&quot;&gt;6. 以上做好之后，还需要关注一些研发的工作(Development)。这部分包括原先的系统实现是否合理，从问题反推，是否可以有更合理的设计，并推动优化。当然还有一些必要的工具也需要开发。&lt;/p&gt;&lt;p data-pid=&quot;Oxa9UOZg&quot;&gt;7. 稳定性最终极要关注的是产品本身(Product)。从用户角度，稳定性意味着什么？哪些是他们核心关注的？我们应该努力通过产品和流程设计等减少用户对系统故障的感知，甚至做到无感。&lt;/p&gt;&lt;p data-pid=&quot;m39NB78J&quot;&gt;&lt;b&gt;本文讨论框架&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;LtS_Sl_f&quot;&gt;可能大部分国内互联网公司没有真正的SRE团队。即使有这样的团队，据我所知他们可能更关注一些更宏观的稳定性建设。日常的服务级别的线上稳定性保障，一般都是由研发团队主要负责的(一般是事故主要责任方)。因此本文中从一个一线研发团队视角出发，去讨论稳定性建设该如何做。&lt;/p&gt;&lt;p data-pid=&quot;k6xXNZcY&quot;&gt;事实上不管是R&amp;amp;D还是SRE团队，要关注的问题是相同的，只是视角略有不同。既然上面铺垫了这么多，作者也参考D大佬的层次模型，引出下面的稳定性框架图（向大佬们致敬）。当然所谓框架，也没什么新意，更多是方便我后续组织文章。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-efe6fa94108b18be9bd40e3e79964238_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;992&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-efe6fa94108b18be9bd40e3e79964238_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;992&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-efe6fa94108b18be9bd40e3e79964238_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-efe6fa94108b18be9bd40e3e79964238_b.jpg&quot;/&gt;&lt;figcaption&gt;图4. 本文讨论的稳定性建设框架&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;BpqI1B2l&quot;&gt;在上图的框架下，虽然也有分层，但跟D不同，作者认为没有谁比谁重要或者上层强依赖下层关系。只是为了讨论方便可以分层去看。传说中的“既要也要还要”，总是那么的“正确”。我们很难在这些层次上进行取舍，只能说都很重要。作为一个R&amp;amp;D工程师，我们需要时刻关注所有这些方面的问题，最多可以根据自己团队当前状况和急迫程度判断优先级。下面会逐个去讨论。&lt;/p&gt;&lt;h2 id=&quot;h_552491334_2&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;稳定性建设该如何做&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;LyALjqzy&quot;&gt;因为篇幅和视野限制，本文无法求全，也不太可能非常深入。如果能抛砖引玉，作者就很开心了。&lt;/p&gt;&lt;h3 id=&quot;h_552491334_3&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;梳理&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;UYaaDk0Q&quot;&gt;梳理其实可以没有，理想情况是我们对自己的系统一直都非常熟悉，知道他是怎么工作的，目前他还存在什么问题。但现实可能是：1）我们一直在非常“着急地”上着线，周而复始。因为“着急”，我们当时做了很多折中，做了很多临时的事情。说好的后面优化，一直都还在后面。甚至因为人员轮换，可能都已经不记得当时埋了哪些雷；2）可能你刚接手了一个新的系统(和团队)。当然，你也可以理解梳理为一种复盘。只是他可能没办法那么频繁。&lt;/p&gt;&lt;p data-pid=&quot;5JPGnIKo&quot;&gt;那我们需要梳理什么呢？这个其实没有标准答案，得看系统和团队当前情况而定。下图针对一般情况罗列了一些常见的梳理项。可以根据实际情况进行增减。这也适用于我们快速去熟悉一个新接手的系统。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-aa13df99f611b33892572c1c48fa21c2_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;971&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-aa13df99f611b33892572c1c48fa21c2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;971&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-aa13df99f611b33892572c1c48fa21c2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-aa13df99f611b33892572c1c48fa21c2_b.jpg&quot;/&gt;&lt;figcaption&gt;图5. 梳理&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;RuEUzfOH&quot;&gt;梳理的过程很多时候都不是一个人可以完成的。我们需要协调很多人参与进来，并进行集中串讲，共同分析等。不要一梳理就梳理几个月。类似迭代开发，我们也可以逐步去梳理，甚至还需要跌带着去做。当一个团队人员流动比较大时，新人串讲也是挺好的一个时机。&lt;/p&gt;&lt;p data-pid=&quot;JAwoTlLR&quot;&gt;当一个相对理想的梳理工作完成之后，我们大概能知道当前系统现状是什么，有哪些稳定性隐患。很多时候知道隐患在哪里，比排除和优化更重要。剩下的就是按优先级排期逐一解决了。梳理本身也会帮助我们重新审视自己的系统，加深对他的理解。这对于后续迭代开发，线上问题跟进等都有莫大的好处。所以，当觉得自己团队没事儿干的时候(往往都是错觉)，可以让大家多去梳理(串讲)一遍自己的系统。&lt;/p&gt;&lt;p data-pid=&quot;bG30B8jn&quot;&gt;这一步，还有个重要产出是：&lt;b&gt;哪些指标是需要重点关注的，核心接口有哪些&lt;/b&gt;。这部分在下一节中会重点讨论。&lt;/p&gt;&lt;h3 id=&quot;h_552491334_4&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;监控&amp;amp;Trace&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;OZXe15zi&quot;&gt;&lt;b&gt;1. 监控&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;lISP2juu&quot;&gt;监控大家应该都不陌生。在上文中我们也梳理出来了当前服务核心指标和核心接口都有哪些(新项目应该是在设计阶段就应该定义好)。我们需要重点围绕这些指标和接口进行监控建设。监控主要目标是当服务异常时，我们能第一时间感知，以便尽早介入，尽快止损。另外，通过合理的监控设计，我们还可能尽量的缩小问题范围，帮助我们定位问题根因。缺失有效监控，我们就是个瞎子，每天都掉坑也是正常的。&lt;/p&gt;&lt;p data-pid=&quot;KOO-_bLg&quot;&gt;监控大致可以分成三层去看，本文只讨论业务层。&lt;/p&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot; data-row-style=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;层次&lt;/th&gt;&lt;th&gt;主要指标&lt;/th&gt;&lt;th&gt;备注&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;业务层&lt;/td&gt;&lt;td&gt;核心业务指标监控核心接口监控下游依赖监控&lt;/td&gt;&lt;td&gt;业务团队自行建设，需要同时关注下面两层监控。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;中间件层&lt;/td&gt;&lt;td&gt;DB、MQ、Redis...&lt;/td&gt;&lt;td&gt;由DBA团队等统一监控&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;系统层&lt;/td&gt;&lt;td&gt;CPU、内存、TCP连接、VM....&lt;/td&gt;&lt;td&gt;按机器(容器)统一配置，OP提供&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-pid=&quot;w9v_IBFc&quot;&gt;&lt;b&gt;核心业务指标&lt;/b&gt;监控，这个经常不被重视，但他却是最重要的。我们应该首先站在业务视角去看到底应该关注哪些指标，然后再去想办法监控这些指标。既然说是业务指标，肯定就跟业务本身有关了，所以各个系统可能都不一样。举例，对于一个订单系统，那么我们关注的核心指标可能有：下单量、成单量、取消量、超时未支付量等等。然后我们想办法对这些指标进行准实时监控。当这些指标有明显异常，可以即刻发出告警。&lt;/p&gt;&lt;p data-pid=&quot;21ToLnMV&quot;&gt;当业务数据较为稀疏时，秒级监控可能经常会误告警，我们可以适当把时间窗口拉长一点看，比如降级为分钟级监控。甚至我们可以根据业务高峰期等自动调整监控周期。&lt;/p&gt;&lt;p data-pid=&quot;pQ7XIOFl&quot;&gt;这里核心是如何定义好一个指标。当指标定义明确，以咱们的聪明才智相信总能有办法监控他，并且总能找到一些报警策略(不行上AI)，使其足够灵敏，误报警概率也还能接受。常见的监控手段包括基于log和数据库binlog的监控。极端一点的情况，我们可能需要在业务代码里单独为这些指标打log(记文本或写库)。所以说，&lt;b&gt;监控设计也是系统设计的必要组成部分&lt;/b&gt;，最好前期就考虑好。&lt;/p&gt;&lt;p data-pid=&quot;OUpp3HLj&quot;&gt;&lt;b&gt;核心接口监控&lt;/b&gt;，接口监控应该不用我多说。重点就那三个指标，QPS、延迟和错误率。这里错误率的统计，对于错误码规范有要求以外，其他基本都是标配。做细致一点，需要对接口调用方单独做监控。比如接口QPS突然飙升，我们需要尽快知道到底是哪个来源。&lt;/p&gt;&lt;p data-pid=&quot;58kGebgI&quot;&gt;&lt;b&gt;下游依赖监控&lt;/b&gt;，下游可能是服务提供方、也可能是个中间件。中间件一般都有单独团队维护，他们会提供通用的监控大盘等。业务方要做的更多是从自己的视角看这些被依赖方他的实际运行情况如何。因为绝大部分依赖都是通过RPC进行的，所以类似接口监控，我们需要关注下游调用成功率，响应时间等等。当然如果下游都提供了监控大盘，可以考虑把两者合并一下，找起来方便。&lt;/p&gt;&lt;p data-pid=&quot;EDuJdpV4&quot;&gt;&lt;b&gt;监控大盘&lt;/b&gt;，呈现很多时候都挺重要的，就像如果有人PPT写得好，你不能否认他其他方面也大概率比咱更优秀。为了看起来方便，我们需要分层去建设监控大盘。每个大盘也不能太大了。大盘在线上走查，上线回归等场景必不可少。这里没什么新鲜的，把分层设计好就差不多了，不啰嗦了。&lt;/p&gt;&lt;p data-pid=&quot;TQV-F-W_&quot;&gt;&lt;b&gt;2. 告警&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;cBgu2IBI&quot;&gt;告警策略其实可以复杂到很多大佬都在谈AI了。常见的就是同比异常、环比异常、超阈值等。策略核心就是在召回和准确性之间各种折中。作者的观点是宁可误报，不能漏报。误报得多了，我们自然就有动力去优化了。至于告警方式，传统的，电话、短信为主，钉钉、email为辅。报警内容一定要尽量多的带一些具体指标项和数据等(注意信息安全，运营商你们懂得)，以便我们快速判断问题严重性。&lt;/p&gt;&lt;p data-pid=&quot;XIXJHuzO&quot;&gt;很多时候，我们报警策略本身可能也会不稳定，也可能设计得不够灵敏。这时候就要求我们去主动去巡视。比如上完线，都去看看大盘是否有异常，值班同学每天定时扫几眼(尤其高峰时)。当然机器和服务太多了，无法人肉去看大盘时，也可以搞一些自动巡视脚本提效。&lt;/p&gt;&lt;p data-pid=&quot;qJYSb5-k&quot;&gt;&lt;b&gt;3. Trace&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;9NJW9rSh&quot;&gt;他可以有个高大上的名字“根因分析系统”。通过监控，我们知道系统有问题了，这个还不够。当我们及时止损之后，应该抓紧定位根因。trace系统一般依赖系统日志采集，并通过二次索引，提供快速的查询线上问题和统计分析的能力。通过trace，我们除了追踪单个请求链，还可以生成系统整体拓扑，系统热点分析，整个链路性能分析等等。这里log设计和规范是最关键的。如果系统里的logid(traceid)都还没打通，团队都不知道spanid是个啥的话，那工具其实也可能还不重要。当然最好是这些都在框架层面就解决了，没必要让每个程序员都关注他们的存在(除定位问题时候以外)。最终，trace还是需要有个强大的配套工具支持的。这个数据量可能会很大(降级为采样？)，分析效率又很关键，没有好用的工具，全靠写脚本很多时候都不现实。&lt;/p&gt;&lt;h3 id=&quot;h_552491334_5&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;应急处置 &amp;amp; Case Study&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;3sdnkqtC&quot;&gt;&lt;b&gt;1. 应急处置&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;6bCBUrNZ&quot;&gt;说白了就是线上问题处理。因为每个系统设计和现状，甚至每次遇到的问题都不一样，所以很难搞出一套通用的机制或方法论。这里只是简单聊一聊一些思路。&lt;/p&gt;&lt;p data-pid=&quot;UoZMLjbZ&quot;&gt;&lt;b&gt;责任人，&lt;/b&gt;当线上有问题，我们首先得有明确的责任人去跟进。如果是监控告警发现的问题，那么谁收到告警，谁就应该是那个责任人(不怕多，就怕没人跟)。“首问责任制”听过的朋友大概也能知道我在哪儿被蹂躏过了....其他情况，通过值班机制等保证每个关键时间段(比如高峰期)，都有明确的人能及时跟进。每个团队情况不同，可以自行设计。这个值班人可能是研发，可能是SRE，也可能是个技术支持之类的。&lt;/p&gt;&lt;p data-pid=&quot;_s2vS3n1&quot;&gt;&lt;b&gt;判断影响面，&lt;/b&gt;作为责任人，首先要做到遇事不慌，快速判断影响面。看核心业务大盘是否受影响。影响了核心业务，那就立刻需要升级处理。紧急问题应立即通报。如果业务大盘影响不大，那其他报警叫得再欢，咱们其实也不虚(再论监控的重要性)。一般问题，可以考虑进一步确认影响，或者直接跳到“找根因”环节。&lt;/p&gt;&lt;p data-pid=&quot;nAdweYNc&quot;&gt;&lt;b&gt;通报&lt;/b&gt;，需要明确紧急问题通报范围，让更多的人参与进来协助处理紧急状况。其中至少要包含自己leader。&lt;/p&gt;&lt;p data-pid=&quot;Wj1pg_iX&quot;&gt;&lt;b&gt;止损&lt;/b&gt;，通报后，紧急事件应优先考虑止损。1.近期有相关上线，优先考虑回滚&lt;b&gt;(&lt;/b&gt;比如时间点比较接近，或改动跟该功能有关)。2. 如果是流量突增，那应该考虑限流+紧急扩容。3. 如果是下游服务异常，那么应该考虑降级。4. 如果单个集群问题，考虑切集群(机房)。这里，你会发现各种case，其实是无法枚举完的。唯一共同点是，每次事故原因，起初看起来都很迷，最后定位后都很傻X，而且总是惊人的相似。所以&lt;b&gt;应急预案&lt;/b&gt;，需要平时积累，现场去想，大概率就迟了。预案主要是依据历史事故和架构师们的经验，不断积累的过程。每个业务不同的故障预案都不同。上面止损里简单描述了集中常见故障及处理预案。作者想强调的是，&lt;b&gt;预案不应该只是文本，而应该是经过验证的(演练过)极简操作步骤，最好是已经工具化&lt;/b&gt;(e.g. XX脚本)的。&lt;/p&gt;&lt;p data-pid=&quot;BOKPj-tL&quot;&gt;&lt;b&gt;找根因&lt;/b&gt;，当我们有效止损之后，应该把精力放在寻找跟因上。如果发现无法快速止损，也别太执着了，至少可以分一部分人力找根因了。定位问题，有时候看起来是一门玄学，大神一出马，往往很快就能破案。而且你会发现，大神总是那几个人。他们为什么比咱快呢？我想，首先肯定不是因为他代码写得好，也不见得有咱写得多(某些人眼里的“技术牛”)。而是，他对系统更熟悉，他了解系统整体架构，知道哪里是一些脆弱环节，容易出问题，上下游依赖情况怎么样，哪个下游比咱还不靠谱；他经常去听各种复盘，知道类似的问题之前出现过，是什么原因导致的；他对各种工具更熟悉，比如trace，监控系统等，所以效率更高。慢慢的他们就形成了一套自己的方法论，甚至可以从现象猜测出几个最可能的原因，然后去逐一验证。可见，平时积累非常重要，要对自己所用的框架，所负责的模块上下游都要做到尽可能多的了解，甚至去多读一读他们的源码。&lt;/p&gt;&lt;p data-pid=&quot;EgBfJ2KY&quot;&gt;线上如果有稳定复现的环境，可以下线一台服务器专门定位问题。如果线上无法快速定位，可以考虑线下复现。所以&lt;b&gt;线下镜像环境&lt;/b&gt;也是很重要的。一方面，可以用于平时线下测试，当线上有问题时候，也可以用来复现问题。能复现的问题，其实就没什么难度了。最后，大家一定要相信，没有什么问题是无法定位的，事实也是如此。&lt;/p&gt;&lt;p data-pid=&quot;bNrccrJ3&quot;&gt;很多时候无法定位，都是缺少关键日志，所以要养成各种异常分支都需要打个日志的好习惯，我们开始时候不要怕日志多，告警多，等我们无法容忍的时候总会有人去优化他。但是一旦少日志，没告警的时候就欲哭无泪了。&lt;/p&gt;&lt;p data-pid=&quot;gN6YaeqX&quot;&gt;根因找到之后，我们需要上线验证，并统计和修复损失了。&lt;/p&gt;&lt;p data-pid=&quot;xxyFMkK3&quot;&gt;&lt;b&gt;2. Case Study&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;Helbg4q5&quot;&gt;其实是一种特殊的复盘。每次的线上问题，都是我们成本最高的一次学习机会。所以，一定要珍惜，要认真对待。相信大家也经常做，所以具体复盘模板这些就不用我多说了，相信每个公司都有自己的一套。几个tips：1. 不要把Case Study搞成批斗大会。虽然定责很重要，但是不用太纠结这个。我们得有一套相对客观的定责标准，省得有人纠结这个。比如之前我们就约定线上事故由源头负主要责任(很多时候是全部)，什么上游保护下游，上游限流没生效，上游没合理重试这些都是额(che)外(dan)的。还是得想方设法保证自己不挂，挂了就得认。我们更多要去想怎么从失败中学习，不断完善自己的系统。&lt;b&gt;我能想得到唯一需要我们保护的下游可能是MySQL，因为他实在太老，太脆弱了，可得对她温柔一点；&lt;/b&gt;2. 围绕根因要多去想是否还有其他类似隐患，要真正做到举一反三，比如排查其他模块是否有类似问题，比如拉上上下游关联系统一起看怎么全链路优化，比如故障期间产品提示等是否可以更友好一点等等；3. 对于发现的问题要做好保护：1）监控配置和日志打印是否需要优化？以便下次有类似问题不用这么辛苦去定位。2）相关代码是否需要重构？3）测试用例增加了吗？4）线上问题预案是否需要增加相关条目？&lt;/p&gt;&lt;h3 id=&quot;h_552491334_6&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;测试&amp;amp;发布&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;1LZxC17A&quot;&gt;&lt;b&gt;1. 测试&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;gY4zsM5s&quot;&gt;质量跟稳定性很多时候都是划等号的。质量保障是整个软件工程核心活动，是研发人员的职业底线。对于工程团队，如果这个底线没守住，那其他努力都将变得黯淡无光。我们必然要竭尽全力，让问题在上线发布前就发现并解决了。&lt;/p&gt;&lt;p data-pid=&quot;-CNqA_i0&quot;&gt;测试如此重要，以至于国内很多互联网公司都有专职的QA团队。当然，即使有了QA团队，测试工作也并非全部由该团队完全负责。研发人员要对自己编写的代码负全部责任，有没有QA团队都一样。设有QA团队，有提测这些额外的流程，更多是为了再多一层保障。&lt;/p&gt;&lt;p data-pid=&quot;Oym2nf9l&quot;&gt;作者没有实际研究过QA团队自己是如何定位并规划他们团队的工作的，所以以下都是站在研发角度讲的，理解有偏差的请见谅。因为测试相关话题太大了，这里只是简单罗列一些常见的测试类型。至于怎么做，如何算做得好这个估计得再好好学习学习才行。&lt;/p&gt;&lt;p data-pid=&quot;bO5sG9l3&quot;&gt;&lt;b&gt;单元测试&lt;/b&gt;（Unit Testing）：指单个函数、模块或功能级的测试，属于&lt;b&gt;白盒测试&lt;/b&gt;。一般都是由研发人员自己完成。敏捷团队应该都了解测试驱动开发(TDD)。在一些传统软件行业，如通信领域等可靠性要求较高的单位可能工作的会相对好一些。互联网领域，尤其其中做上层业务开发的，真正把TDD用得好的并不多。不过一些思想值得我们时刻参考。要想把单测写好，维护好其实并不那么容易。首先，写出来的代码，得对测试友好。这对于编码能力是有一定要求的。往往抱怨单测很浪费时间的，大概率是代码抽象，尤其接口层面设计，分层这些没有做好的那些人。另外，测试用例需要维护，是有成本的。甚至测试用例的代码量会远远大于业务代码。不过要知道自动化测试用例，不是为了一次功能测试而编写的，&lt;b&gt;他更多是一个文档和一种保护。&lt;/b&gt;保护测试好的代码不会被后人轻易破坏。他可以反复、全自动执行，所以叠加起来的价值可以很大。有了自动化测试用例，我们就可以在每次代码变更时候，都可以自动跑一下这些case。这个属于check in build的一部分。因为case数量会越积累越多，我们为了不影响开发效率，可以把这些case分成快速的和全量的。快的是每次check in都会执行(check in build)，慢的可以是天级执行(daily build)。&lt;/p&gt;&lt;p data-pid=&quot;KLs3jU52&quot;&gt;&lt;b&gt;集成测试&lt;/b&gt;（Integration Testing）:指将已经完成了单元测试的模块等组合起来测试，比如接口测试，某个流程测试等等。他一般针对某个功能点(特性)进行测试，通常属于&lt;b&gt;黑盒测试&lt;/b&gt;。研发内部的联调测试，QA的大部分测试工作，都属于这个范畴。&lt;/p&gt;&lt;p data-pid=&quot;CfZHVtkW&quot;&gt;&lt;b&gt;系统测试&lt;/b&gt;（System Testing）:指从交付角度(用户视角)进行的更宏观的测试。操作系统适配测试，低端机适配测试，弱网测试，安全测试，性能测试，压力测试等等，都可以归为系统测试大类。&lt;/p&gt;&lt;p data-pid=&quot;m6Vm0Wc-&quot;&gt;&lt;b&gt;回归测试&lt;/b&gt;（Regression Testing）：当系统有变更时，我们通过回归测试保证原有功能都没有被破坏。一般分为线上和线下，而且希望这部分自动化程度越高越好。靠人工去做回归测试将必然是个悲惨的故事。&lt;/p&gt;&lt;p data-pid=&quot;_gsz9QF9&quot;&gt;&lt;b&gt;冒烟测试&lt;/b&gt;（Smoke Testing）：据说是最早做板子的前辈们，在设计好一块板子之后先通电看看会不会哪里冒烟。如果冒烟就说明根本没必要进行任何其他测试了，直接回炉重造。在软件行业，一般指的QA团队的准入测试吧。一般要求他能自动运行，且速度要快一些。冒烟没通过，直接打回提测流程。&lt;/p&gt;&lt;p data-pid=&quot;JMPM0dq-&quot;&gt;&lt;b&gt;α测试&lt;/b&gt;（Alpha Testing）：一般是指客户侧在正式交付前的验证测试。不过互联网行业很少提这个了。&lt;/p&gt;&lt;p data-pid=&quot;YQRqEnHD&quot;&gt;&lt;b&gt;β测试&lt;/b&gt;（Beta Testing）：将产品交付给少部分用户，然后进行实际场景应用，并收集反馈。我们一般叫小流量测试或灰度测试了，换了个名字。&lt;/p&gt;&lt;p data-pid=&quot;CBqIWA-P&quot;&gt;&lt;b&gt;压力测试&lt;/b&gt;（Stress Testing）：测试一些临界压力情况下的系统表现。比如系统最大同时在线的用户数，最大支持的输入大小，模拟用户恶意下单等等。一般是针对系统级的全流程测试。当然如果某个接口很重要，有时候也会说做接口压测，实际上就跟下面的性能测试有点混淆了，不过这个不重要。在to C场景，压测是非常重要的，如果有一套成熟的压测体系，那恭喜你，至少心里会踏实很多。当然搞一套有效的压测体系，我们也需要不小的投入。可能会面临的几个挑战：1）压测工具本身并发度是否可以达到我们的要求？2）压测请求如何模拟，线上录制？签名、token这些都很麻烦。3）压测流量如何标记？4）提交接口怎么压？产生的很多“垃圾数据”如何清理，如何跟真实数据隔离会是个大麻烦（影子表？）5）全链路压测，涉及到多个团队，甚至是多个部门协同。如果要做架构升级(比如增加流量标记)，那可能至少都是按月计的。压测期间很可能还会影响线上服务，深夜也有用户咋办？&lt;/p&gt;&lt;p data-pid=&quot;LkEyLmSr&quot;&gt;&lt;b&gt;性能测试&lt;/b&gt;（Performance Testing）：比如某个接口的单机性能，集群性能等。&lt;/p&gt;&lt;p data-pid=&quot;gi7YWipi&quot;&gt;&lt;b&gt;故障演练&lt;/b&gt;（Recovery testing）：模拟各种故障，比如下游宕机，数据库离线等等，然后看系统表现是否跟设计一致。可以认为是系统级的异常测试。Recovery testing还会关注当故障恢复后，系统是否可以自动复原。&lt;/p&gt;&lt;p data-pid=&quot;oqKGxUMR&quot;&gt;还有很多名词，有的作者也没接触过，就不再发散了。&lt;/p&gt;&lt;p data-pid=&quot;xrzxeh6M&quot;&gt;&lt;b&gt;2. 发布&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;I23fUFSM&quot;&gt;据不完全、不可靠统计，70%以上的线上事故是由代码变更(包括配置)引起的。可见把测试好的代码发布上线是一个非常高风险的事情。为了尽量降低这个风险，人们搞出了各种各样的灰度策略和机制。他的本质是：1）开发和测试人员没能测到的问题，就让更多的用户帮我们测试(众测)；2）为了控制影响面，需要逐步放量，争取在最小的影响面下发现问题。下面简单介绍下常见的几种灰度方案。&lt;/p&gt;&lt;p data-pid=&quot;hPFonEMQ&quot;&gt;&lt;b&gt;金丝雀发布&lt;/b&gt;：矿工的故事大家应该都听过了，不再赘述。其实很多时候我们所谓的灰度发布，基本就是等价于金丝雀发布了。通常我们会把集群分成几个集群，典型的预发布、小流量和全量集群(当然可以有更多级)。然后，逐步放量。其中预发布一般不对外，我们把代码上到预发布环境，通过自动化回归脚本+人肉，进行新老功能的回归。如果有内测环节那就更好了，找一些公司内部的用户帮忙验证一下。到小流量环境是要有真实的公网流量的。我们一定要预留足够的时间来收集反馈。当然具体时间是根据版本大小和厂子现状定的。收集反馈最核心就是之前建好的监控大盘了。如果能收集真实的用户反馈那就更好了。VoC自动检测，其实也算监控一种吧。比如直播系统，用户刷屏“卡”“卡死”...&lt;/p&gt;&lt;p data-pid=&quot;jxLclFDV&quot;&gt;金丝雀发布估计是用的最多的一种发布方式。其核心是制定一套分流机制。最简单就是在router层按流量随机分流了。如果你的服务只跟流量本身有关（典型的就是不用登录的场景，如百度搜索），那用服务器灰度就够了。1台，10%，100%...如果想根据用户分流(要求一个用户要不用旧版服务，要不就用新版的)，那么就得需要一些设计，典型的是在HTTP头里增加一些分流标识等。如果再复杂的分流策略，那么就得自己搞个gateway了。有集中存储的时候，比如MySQL，那么存储层面要不要也分开，也是个问题。&lt;/p&gt;&lt;p data-pid=&quot;zPhNocXN&quot;&gt;客户端在各大应用市场的发布策略，一般也都属于这一类。&lt;/p&gt;&lt;p data-pid=&quot;wILce6Lb&quot;&gt;&lt;b&gt;蓝绿发布&lt;/b&gt;：很少用。大致思想是搞两套集群，蓝色是老的，新的是绿的。起初流量指向蓝的，等把代码部署到绿的，验证ok之后把流量指向绿的。下一轮发布，把颜色交换一下。好处是回滚快，成本就是多了100%的冗余。可以做细一点，比如类似&lt;b&gt;滚动发布&lt;/b&gt;，每一轮(比如10%)都走蓝绿，到下一轮时就回收蓝色当绿色。这样就只需要10%的冗余了。&lt;/p&gt;&lt;p data-pid=&quot;7jF71Pbp&quot;&gt;&lt;b&gt;影子发布&lt;/b&gt;：核心是流量复制。老版本依然保持服务，新版本部署到新环境后，把老版本的流量copy到新版本(可以是部分流量)，然后验证新版本的功能。我们做了一轮纯粹的技术重构后，对比新老版本结果是否一致，经常这么玩。如果机器资源不太够，也可以通过&lt;b&gt;代码开关&lt;/b&gt;进行相关验证。&lt;/p&gt;&lt;p data-pid=&quot;3QdRAGJ9&quot;&gt;&lt;b&gt;A/B测试&lt;/b&gt;：很多策略模块喜欢A/B。其部署可能都在一个集群，只是策略插件有多分，我们通过程序开关控制不同的用户走不同策略，然后对比不同策略的效果。A/B可以很复杂，也可以认为是金丝雀的一种吧。不展开了，还有专门做ToB的A/B系统的单位，可见其复杂度和价值。&lt;/p&gt;&lt;p data-pid=&quot;NcfiYQc0&quot;&gt;&lt;b&gt;3. CI/CD&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;1E9Yf584&quot;&gt;聊到DevOps，都会说到这两个概念。这两个单词分别是Continuous Integration和Continuous Delivery的缩写。其核心是通过一对自动化的工具和流程，使得我们迭代开发和发布变得更高效，更有保障。话题有点大，不讨论了，附一张图：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1977b5dc104ece6d09dd35a8a915685e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;355&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-1977b5dc104ece6d09dd35a8a915685e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;355&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-1977b5dc104ece6d09dd35a8a915685e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1977b5dc104ece6d09dd35a8a915685e_b.jpg&quot;/&gt;&lt;figcaption&gt;图6. 典型的CI/CD流程&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id=&quot;h_552491334_7&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;设计开发&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;yLdvQc9N&quot;&gt;软件设计和开发，应该是我们最熟悉的了。不过这次咱们从稳定性视角再去看一看。很多事情在设计开发阶段考虑好，才是ROI最高的。&lt;/p&gt;&lt;p data-pid=&quot;zgRxIa2U&quot;&gt;&lt;b&gt;1. 设计&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;KmUS59LX&quot;&gt;软件设计也是个很大的概念。什么是一个好的设计？估计不会有什么明确的答案。但是一个糟糕的设计，会导致我们迭代成本越来越高，稳定性保障变得异常困难 。前辈大佬们基于自己的实践经验，概括了一些大家耳熟能详的设计原则。我们遵循这些原则，不见得能解决所有问题，但是可以规避很多可能的大坑。&lt;/p&gt;&lt;p data-pid=&quot;ag3EPvET&quot;&gt;&lt;b&gt;KISS(Keep It Simple, Stupid)原则&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;7w1ZEEym&quot;&gt;爱因斯坦讲过：&lt;b&gt;如果你不能简单的解释它，说明你还没有足够的理解它&lt;/b&gt;。某度的“简单可依赖”似乎也是在强调这个事情。只有它足够“简单”，它才更“可依赖”的。简单在软件工程里意味着：1）当有故障时，我们可以快速的定位；2）当重构或接手时，我们可以更容易；3）我们往往都少写了很多行代码，无论是开发效率还是维护成本都会更低；4）能做出简单的设计，意味着我们对这个事情看得更透，实现质量更高。为了简单我们：1）要尽量避免引入一些大家不熟知或未被验证的技术栈；2）不需要一些隐晦的实现，可能他看起来很cool；3）不提倡每个工程师都最大化自己的“个性”，需要遵循一些规范，虽然他看起来很笨重；4）最重要的是我们一定要始终相信总会有更简单直接的实现。&lt;/p&gt;&lt;p data-pid=&quot;B4i5NN5Q&quot;&gt;&lt;b&gt;YAGNI(You Ain’t Gonna Need It)原则&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;qwi8SRCu&quot;&gt;意思是，如果一个事情你不是今天就需要，那大概率就是你不需要的。我们总希望自己能高瞻远瞩，一劳永逸，偶尔还想秀一秀技术。但事实是，我们不管是产品功能，还是代码实现，总是有很多无用或者很少用到的东西(2/8定律)。多余的这部分反而是更容易出错且维护成本更高的（因为团队对这部分更陌生，且升级迭代时经常忽略这部分）。所以我们要尽量杜绝过度设计，包括画蛇添足，过于超前等等。很多时候识别真正现在就需要的东西，还是有点难度的。作者认为，1. 如果无法做到事前判断，那时候一定要做到时候及时评估。该删就得大胆删，因为维护成本往往比开发成本更高。这个评估过程，也会对我们未来的判断带来一些经验和依据；2. 判断一个事情暂时用不上，那么就看我们现在实现和未来实现成本差异有多大。如果差别不大，或现在做成本小那么一丢丢，那么就放到后面再去实现吧。做好扩展能力设计等就ok了。所谓前瞻性设计，更多是在思考和调研阶段要尽量考虑周全，想好各种异常和未来扩展性需求。而真正实现的时候，做取舍才能体现架构师真正的实力。很多时候我们倡导提供简单直接的实现，然后做好兜底。兜底可以很暴力，只要他发生的频率不高，很多时候都是可以接受的。等我们无法容忍的时候，就有动力优化了。敏捷开发中有很多这方面的思考：我们持续交付那些优先级高的最小集合。让系统先跑起来，然后根据用户(可能是甲方)实际使用反馈再决策需要增加哪些特性或哪些体验需要优化。&lt;/p&gt;&lt;p data-pid=&quot;unLfQlQV&quot;&gt;&lt;b&gt;DRY(Don’t Repeat Yourself)原则&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;hpGOW5vk&quot;&gt;顾名思义，要以Ctrl C/Ctrl V为耻。我们应该尽最大努力杜绝重复代码。提高代码复用，对于开发、维护效率至关重要。更重要的是，我们不该把测试等额外的精力浪费在重复测试几乎相同的代码上。为了减少重复，我们自然会对自己的代码做更多的分层、抽象、局部重构等，使得每段代码，每个函数他的职责会越来越明确，单一。&lt;/p&gt;&lt;p data-pid=&quot;_IQd8p0Z&quot;&gt;&lt;b&gt;SOLID原则&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;1PAKhrnc&quot;&gt;大名鼎鼎，大家应该都非常熟悉了。针对面向对象场景，大佬们(一说是Robert J. Martin，即Uncle Bob首次提出的，应该不全是他的)总结出了五条原则，目的是让代码可维护性更高，更好理解，更容易扩展，避免随着代码量的增加代码越来越复杂。从稳定性角度，遵循SOLID原则，也会使得我们的代码变更更加可控，影响面不会被无限放大。这几个原则实在太出名了，请各位客观自行查阅相关资料吧。附图如下：&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3d6971c6882174e022038be6885b56e_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;931&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-b3d6971c6882174e022038be6885b56e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;931&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-b3d6971c6882174e022038be6885b56e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b3d6971c6882174e022038be6885b56e_b.jpg&quot;/&gt;&lt;figcaption&gt;图7. SOLID原则&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;WP2DikNk&quot;&gt;&lt;b&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.infoq.com/articles/microservices-design-ideals/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;IDEALS原则&lt;/a&gt;&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;lCj9clXa&quot;&gt;分布式系统，尤其是微服务盛行的今天，有人觉得也应该有类似SOLID的一些准则，用来指导整体微服务架构设计和实现。2020年时候，InfoQ上有位大佬提出了IDEALS的概念，目前看影响肯定没有SOLID那么大，但可以对我们带来一些启发。遵循这些原则，虽然不能解决所有问题，但是可以让我们的设计和技术选型有据可依，至少不会跑太偏。下面大致解释下概念：&lt;/p&gt;&lt;p data-pid=&quot;JRxAnfgr&quot;&gt;IDEALS是以下几个单词的首字母拼接：Interface segregation, Deployability (is on you), Event-driven, Availability over consistency, Loose coupling, Single responsibility。&lt;/p&gt;&lt;p data-pid=&quot;RE0KgP-x&quot;&gt;&lt;b&gt;接口隔离(Interface segregation): &lt;/b&gt;希望通过面向不同的客户、不同的应用场景提供单独的接口，减少不同客户之间的改动影响到其他客户。这里最典型的一个问题是web和移动APP是否要提供独立的接口？BFF(Backend for Frontends)就是非常典型的一个设计模式，可以自行了解下。&lt;/p&gt;&lt;p data-pid=&quot;1zrN_jxP&quot;&gt;&lt;b&gt;可部署性(Deployability (is on you)): &lt;/b&gt;中文翻译不一定准确，仅供参考。微服务架构使得线上部署单元变多了，所以如何更高效的发布和监控变得更加重要。这里好的工具对效率的提升至关重要。下面几类技术和工具，兴许都能用得上：容器化(Docker+k8s)、Service Mesh(Istio含Envoy)、API Gateway(提供协议转换、接口路由、安全控制、熔断、限流、配额管理、流量监控等等能力，部分能力逐渐在被Service Mesh和开发框架，如Spring Cloud等代替。Kong/tyk)，Serverless(各云厂商提供的云函数FaaS)，监控工具(Prometheus/Grafana，还可以关注laiwei老师的Open Falcon和最新的Nightingale)，日志采集(其实很多监控方案都自带了采集能力，ELK/splunk)，链路追踪(Zipkin/Jaeger)，DevOps(文化+工具+实践)，灰度发布，IaC(Infrastructure as Code)，CI/CD(Jenkins/Argo CD/Flux)。如果你有个非常靠谱的基础架构或运维团队，那么以上其实更多是关注如何使用就好了。如果没有或你就是那个团队成员，恭喜你，在微服务和云原生的冲击下，这块更新换代还是比较快的，要学习掌握的真不少。关键这些都是一些基础设施，对稳定性和易用性要求都极高。&lt;/p&gt;&lt;p data-pid=&quot;gTwCw3xN&quot;&gt;&lt;b&gt;事件驱动(Event-Driven): &lt;/b&gt;虽然他不等价于异步模式，但他们密不可分。微服务架构中，鼓励大家大量使用基于消息的异步通信。这是调用方和服务提供方之间比较彻底的解耦方式。一方面，可以做到消峰，高并发情况下，也不会因为下游服务处理能力导致拒绝服务；另一方面，消费方可以根据消息量灵活扩缩容，而且还给你留了一定的反应时间。目前MQ中间件基本都已经很成熟了，一般场景下甚至丢消息都不用太考虑，只有增加一些兜底措施就好。另外，MQ的可用性一般都远高于业务服务，所以也不用担心引入他带来的稳定性损失。只要对于响应时间没有特别敏感，原则上能异步就异步。挑战可能是对于业务本身的事件驱动的抽象，前端的体验设计和MQ本身的规划和管理上吧。&lt;/p&gt;&lt;p data-pid=&quot;sInjS2CQ&quot;&gt;&lt;b&gt;可用性胜过一致性(&lt;/b&gt;Availability over Consistency): 在大部分互联网场景下，我们更注重可用性，而对于一致性，降级为了追求最终一致性。CAP原理相信大家都非常熟悉了，而且这个话题有点大。这里就当做是一种常识吧。Command Query Responsibility Segregation (CQRS) 可以了解下，附一张原图：&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eb723bf714e2dcf0837857d574fae234_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1099&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-eb723bf714e2dcf0837857d574fae234_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1099&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-eb723bf714e2dcf0837857d574fae234_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-eb723bf714e2dcf0837857d574fae234_b.jpg&quot;/&gt;&lt;figcaption&gt;图8. CQRS&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;BBQVewcV&quot;&gt;&lt;b&gt;松耦合(Loose-Coupling):&lt;/b&gt; 解耦带来的好处应该不用解释了。具体解耦方式也有多种。这里核心不是怎么解，而是怎么发现。比如一个模块本来很简单，后来由两个团队共同维护，那可能这两个团队分工合作就有耦合了，可以考虑拆分。如果一个系统足够简单，数据量也不大，非得搞个CQRS，全异步那也只是在徒增烦恼，不见得能真的体会到“解耦”的好处。&lt;/p&gt;&lt;p data-pid=&quot;Lb8sx4u2&quot;&gt;&lt;b&gt;单一职责(Single Responsibility):&lt;/b&gt; 类似SOLID里的S，他强调的是服务内部要高内聚。很容易理解，但是可能很难把握。服务分的太粗，就逐渐退化成单体应用了。如果拆的特别细碎，部署运维会是个问题，另外还会额外增加一些RPC代价。个人一些简单原则(只要纠结，肯定都能找到一个反例，仅供参考)：1. 一个微服务，尽量对应一个数据库。这里，如果某种场景必须要有事务保证，那相关操作必然得在一个服务。不过建议尽量减少大事务，而是追求最终一致性，上面有讨论；2. 如果业务场景中，绝大部分请求，都会涉及多个同一层“模块”(分层是另一个维度，不算)，那这些“模块”就放到一个服务吧，除非有很强的拆开的理由。这里如果用DDD描述可能更容易理解。不过作者对DDD理解不够深入，不敢提；3. 组织架构决定系统架构，不同团队维护的，就想办法从代码层面拆清楚；4. 如果拆开目前没有引入无法接受的成本，那么就先拆开吧。合并，一般都会比拆分成本更小。5. 拆分过程可能比结果更重要。能把一个看起来凌乱的事情抽象成多个相对独立的事务的组合，必然会降低其复杂度。如果考虑运维成本等，可以先只是逻辑拆分，物理上可以是一个包，一个节点。&lt;/p&gt;&lt;p data-pid=&quot;mGeR18M7&quot;&gt;&lt;b&gt;2. 开发&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;yr-CKpET&quot;&gt;开发过程其实真正写码的时间也很少，这里强调的更多是一些局部设计和编码过程中要避免的一些坑。当然我们编写出来的代码质量才是最终决定系统运行情况的根本保障。各大厂应该都会有一些开发手册等。其中最出名的应该是《阿里巴巴java开发手册》了，作者认为没有之一。手册中自称愿景是“码出高效，码出质量”。很显然通过此类手册，我们希望一方面能规范一些开发过程，另外，也通过一些基础的保障和警示，提高程序员编码质量。其中每一条规约后面，可能都深藏着无数深坑和历史上在此坑掉下去的大侠们。&lt;/p&gt;&lt;p data-pid=&quot;ZAS2-ST7&quot;&gt;我们也可以从稳定性角度制定类似规范。&lt;u&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/147202124&quot; class=&quot;internal&quot;&gt;《滴滴顺风车服务端之稳定性规范》&lt;/a&gt;&lt;/u&gt;我觉得写得就挺好的。我们要做的是不断完善自己的开发规范同时，应该根据团队实际遇到的一些问题，复盘的线上事故等来不断沉淀自己团队的一些相应的规范和禁忌。线上事故是我们缴的最贵的学费，不要轻易浪费他。&lt;/p&gt;&lt;p data-pid=&quot;-5hVNUTb&quot;&gt;有规范是一方面，更重要的是执行。这块可能更多是依赖一线leader的执行力和管理能力了。&lt;/p&gt;&lt;h3 id=&quot;h_552491334_8&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;工具&amp;amp;文化&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;BBi383NO&quot;&gt;这俩放一起，其实没那么生硬。有一种文化叫“工具文化”~&lt;/p&gt;&lt;p data-pid=&quot;HOmb5Atd&quot;&gt; 1. &lt;b&gt;工具&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;lmfMCh0x&quot;&gt;其实前面聊了很多工具相关的事情了。这些工具包括一些开源项目或商业软件，也可能是团队自研小工具等等。我们经常讲&lt;b&gt;能依靠工具就不要依赖流程，能建立流程就不要依赖人的主动性&lt;/b&gt;。合理使用工具，让一切能自动化的自动化，一方面是提高执行效率，另一方面降低人为引入的失误风险。一些常规，繁琐或容易出错的事情，我们就应该考虑建设相对应的工具。比如一些环境搭建，代码检查，自动化测试和CI/CD流程等都可以完全交给工具去完成。除此之外，线上trace，debug，兜底操作等都依赖工具支持。还可以例举很多场景。&lt;/p&gt;&lt;p data-pid=&quot;cyjebX24&quot;&gt;作为一名优秀的工程师，咱们能自己动手提升自身工作效率，降低犯错的概率，为什么不多去努力呢？&lt;/p&gt;&lt;p data-pid=&quot;sjEJyVVj&quot;&gt;相反，如果工具层面欠缺太多，那就该咬咬牙把这块能力先补上吧。比如，日志采集和监控，CI/CD，如果没有很好的工具支撑，那我们就需要(反复地)做很多额外的事情，而且随着系统演进和团队壮大，这部分工作量都是成倍的增长的。我们就该尽早重视这部分建设。一些小团队创业型团队，这部分反而往往被忽略，不被重视。看起来组织永远没人力投入，实际上过段时间去统计，你就会发现总的额外投入往往要比工具本身上的投入要大好多倍。&lt;/p&gt;&lt;p data-pid=&quot;8CfD8031&quot;&gt;稳定性建设是个无底洞，如果没有很好地提效工具，那么ROI就会越来越低。如果你想说服你老板加大在稳定性方面的投入，那不得不去讲ROI。工具虽然不是全部提效手段，但肯定是最重要的一个。&lt;/p&gt;&lt;p data-pid=&quot;19SQS7TR&quot;&gt;&lt;b&gt;2. 文化&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;rSPDA0nW&quot;&gt;我们通篇都在讲稳定性可以怎么怎么保障，看似很系统。实际情况是，很多时候所谓稳定性建设可能都只是有一阵风，吹过之后似乎什么也没留下。系统在不断迭代，人员也会不停流动，如果没有一个好的文化传承，我们其实无法保证这块的持续投入和效果。那怎么建设一个团队的稳定性文化呢？其实这话题可能是我一万个最不擅长的事情之一了。不过既然提出来了，就简单分享下此刻的一些认知吧。参考HR部门关于企业文化建设的思路：&lt;/p&gt;&lt;p data-pid=&quot;D4gPHyq-&quot;&gt;&lt;b&gt;首先，提炼它&lt;/b&gt;。文化一般都希望能提炼成一两句话，让团队朗朗上口。这样才能更好的传播和传承。我自己团队，用一句话强调稳定性的重要性：&lt;b&gt;稳定性是我们的底线&lt;/b&gt;。意思是，如果稳定性没有做好，做再多拔高的事情，其实也都可能会归零。我们不要求一切都以稳定性为前提(很多时候迭代压力会极端的大)，但是要明确意识到，稳定性不管什么时候都是我们的底线，要时刻提醒自己是不是做的足够好了。至少要做到在当时那个环境下充分评估稳定性风险，并保证最大程度的投入。如果因为一些交付时间等原因，做了一些妥协，那一定要在接下来最快的时间内把稳定性欠债还上。&lt;/p&gt;&lt;p data-pid=&quot;Iru-ID1K&quot;&gt;&lt;b&gt;其次，运营它。&lt;/b&gt;文化是需要运营的。作者认为比较实用的一些运营方式有：&lt;/p&gt;&lt;p data-pid=&quot;8Uvz9f_j&quot;&gt;1）建立明确的奖惩措施。比如线上事故得有些具体惩罚措施。可以是物质的，也可能是更柔和的。当然做得好的，要多去鼓励，多去传播。&lt;/p&gt;&lt;p data-pid=&quot;o-BDaIMk&quot;&gt;2）识别关键人员，并加以引导。让更多的人帮助自己推广相关理念和要求。比如每个小组的leader，一些核心开发人员。他们在一线，很多时候他们说的话更有感染力。所以一定要先跟这些人员达成一致，并让他们一方面身体力行；另一方面，作为稳定性文化的坚定传播者，帮助组织共同传承和发扬光大。&lt;/p&gt;&lt;p data-pid=&quot;wr0STgmZ&quot;&gt;3）洗脑式宣贯。我们要不停的讲一些稳定性方面的意识和实操层面要关注的事情(比如监控设计和发布设计都是系统设计阶段要考虑的)。稳定性宣贯有个特别好的时机，那就是线上出故障时，我们一般都会组织复盘或case study。那这时候所有的稳定性主张都可以重新再review下。看我们哪里做得好，哪些点没做到位。只要坚持高质量的复盘和case study，就可以在团队内部不断强化相关意识。而且问题越多，力度越大。问题不多时候有稍微放一放不见得一定是坏事。当然系统不可能没有问题的，这个度就得管理者自己拿捏了。小道cr问题，qa发现的bug等等只要想强调，就可以组织case study。这里复盘再稍微罗嗦下的是：一方面，复盘时不一定都是全员可以参加，所以复盘结论的通晒就很重要了(不要藏着掖着)；另一方面，复盘容易，闭环往往都不是很理想，所以应该更多的去关注闭环效果。其中就可以review下文化，意识层面的改进项。&lt;/p&gt;&lt;p data-pid=&quot;_TnP613-&quot;&gt;&lt;b&gt;再者，把他融入到其他文化建设中，形成更广泛的传播&lt;/b&gt;。稳定性文化单独拿出来，其实有可能只是一个点。但是像工程师文化，新人融(xi)入(nao)，这些都是我们经常会去讲，会去做的。那么作为喜欢追求极致的工程师们，能够容忍自己开发的系统有缺陷吗？至少应该以此为耻吧？新入职培训和熟悉业务阶段，是否可以专门设置相关课程？作为一个新人，至少应该看一看组织历史上都犯过哪些错误吧？不断沉淀一些相关案例，让成员们定期多去关注这些案例。自然就可以从中吸取一些教训，尤其哪些重复犯的错误，都应该被深深地记住。&lt;/p&gt;&lt;h2 id=&quot;h_552491334_9&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;写在后面&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;p499_5NH&quot;&gt;&lt;b&gt;稳定性建设至关重要。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;tVNX6HMi&quot;&gt;当前互联网，服务稳定性对于公司口碑，甚至是对直接的商业利益都有重大影响。历史上血淋淋的宕机事件、安全事故比比皆是。不知这背后又有多少猿类内心和肉体上留下了挥之不去的烙印。&lt;/p&gt;&lt;p data-pid=&quot;SFjWKBK1&quot;&gt;另外，稳定性建设，对于系统设计，团队协同效率，程序员自身修养都提出了更高的要求。所以只要坚持投入，无论是对于系统稳定性提升，还是对于团队成员自身成长都是大有裨益的。&lt;/p&gt;&lt;p data-pid=&quot;L9OhvxlO&quot;&gt;&lt;b&gt; 稳定性建设不好做，需要耐心。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;I9yXVizj&quot;&gt;1. 稳定性建设很多时候都是在做保底线的事情。这就意味着，不出问题甲方(用户、老板、合作伙伴)基本没有人能感受到。他们关注到你的时候，大概率线上已经出了事故。所以，想得到大家的欣赏还是挺难的，如果想长期从事相关工作，得做好吃土的准备。不过一般很少有人专门做稳定性建设，更多是在自己开发交付过程中不断完善系统，使其更让人放心。&lt;/p&gt;&lt;p data-pid=&quot;NhCWNfDO&quot;&gt;2. 稳定性建设投入总是没保障。我们总是(尤其是在业务初期)着急的开发着新的特性，迭代效率基本就是个无法妥协的事情。如果不咬牙坚持，付出额外的努力，根本就没法坚持。&lt;/p&gt;&lt;p data-pid=&quot;hvxcniWk&quot;&gt;3. 稳定性建设涉及软件开发整个生命周期。想每个环节同时都做到理想状态几乎不可能。所以也意味着他是个慢功夫，甚至刚开始时候很容易犯左倾冒进主义错误，后期又无法坚持长期斗争。从上到下得有耐心才可能做得更好。&lt;/p&gt;&lt;p data-pid=&quot;lYrBKD28&quot;&gt;写了这么多，仍然感觉还是有很多事情没说明白。很大程度上是因为能力所限。不过，作者也算是尽力了，断断续续写了挺久了，先收个尾。后续如果有时间，这里面好多个点都可以展开讨论。&lt;/p&gt;&lt;p data-pid=&quot;xJPox3qq&quot;&gt;&lt;b&gt;最后，感谢您读完这么一篇洋洋洒洒且枯燥的文章，您辛苦了！&lt;/b&gt;如果对您有点启发或者给你提供了一些索引，那作者也就满足了。&lt;/p&gt;&lt;p data-pid=&quot;ys1l12Ta&quot;&gt;Itegel 2022年8月 帝都&lt;/p&gt;&lt;p data-pid=&quot;CezwQSan&quot;&gt;P.S. 台湾是中国的~&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>291e59de1f2ee6867c5f28fbe5cb5121</guid>
<title>美团搜索粗排优化的探索与实践</title>
<link>https://toutiao.io/k/6idq555</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;58&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBVHPgeBXgTUj0ib1Kwfosl82xO1Aw7x6gccLuuYs1dbxI7REI7OcjbGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总第528&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2022年 第045篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;103&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBic5ADGrKxgSd0tibyMiasOHXjb46qFBw7PTfuWAxXzWq32lDkL05icwkMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot; data-width=&quot;100%&quot; opacity=&quot;&quot; title=&quot;undefined&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; data-style=&quot;text-align: left; font-size: 14px; color: inherit;&quot;&gt;&lt;section&gt;&lt;span&gt;粗排是工业界搜广推系统的重要模块。美团搜索排序团队在优化粗排效果的探索和实践中，基于业务实际场景，从精排联动和效果性能联合优化两方面优化粗排，提升了粗排的效果。本文介绍了美团搜索粗排的迭代路线、基于知识蒸馏和自动神经网络选择的粗排优化工作，希望为从事相关工作的同学带来一些启发或者帮助。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1. 前言&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2. 粗排演进路线&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3. 粗排优化实践&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4. 总结&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5. 附录&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 前言&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;众所周知，在搜索、推荐、广告等大规模工业界应用领域，为了平衡性能和效果，排序系统普遍采用级联架构[1,2]，如下图 1 所示。以美团搜索排序系统为例，整个排序分为粗排、精排、重排和混排层；粗排位于召回和精排之间，需要从千级别候选 item 集合中筛选出百级别 item 集合送给精排层。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;447&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;388&quot; data-ratio=&quot;0.973753280839895&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsuajhG8rsRu8mNibS3Tx2zSubkWQAicicG6RRtIndIyMzv64xGQv8daQjvwaIPurlibicKkKZtxpzA9A/640?wx_fmt=png&quot; data-w=&quot;1524&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图1 排序漏斗&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从美团搜索排序全链路视角审视粗排模块，目前粗排层优化存在如下几个挑战点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文将围绕上述挑战点来分享美团搜索粗排层优化的相关探索与实践，其中样本选择偏差问题我们放在精排联动问题中一起解决。本文主要分成三个部分：第一部分会简单介绍美团搜索排序粗排层的演进路线；第二部分介绍粗排优化的相关探索与实践，其中第一个工作是采用知识蒸馏和对比学习使精排和粗排联动来优化粗排效果，第二个工作是考虑粗排性能和效果 trade-off 的粗排优化，相关工作均已全量上线，且效果显著；最后是总结与展望部分，希望这些内容对大家有所帮助和启发。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 粗排演进路线&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;美团搜索的粗排技术演进分为以下几个阶段：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2016 年&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于相关性、质量度、转化率等信息进行线性加权，这种方法简单但是特征的表达能力较弱，权重人工确定，排序效果存在很大的提升空间。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2017 年&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：采用基于机器学习的简单 LR 模型进行 Pointwise 预估排序。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2018 年&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：采用基于向量内积的双塔模型，两侧分别输入查询词、用户以及上下文特征和商户特征，经过深度网络计算后，分别产出用户&amp;amp;查询词向量和商户向量，再通过内积计算得到预估分数进行排序。该方法可以提前把商户向量计算保存好，所以在线预测快，但是两侧信息的交叉能力有限。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2019 年&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：为了解决双塔模型无法很好地建模交叉特征的问题，将双塔模型的输出作为特征与其他交叉特征通过 GBDT 树模型进行融合。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2020 年至今&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：由于算力的提升，开始探索 NN 端到端粗排模型并且持续迭代 NN 模型。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;现阶段，工业界粗排模型常用的有双塔模型，比如腾讯[3]和爱奇艺[4]；交互式 NN 模型，比如阿里巴巴[1,2]。下文主要介绍美团搜索在粗排升级为 NN 模型过程中的相关优化工作，主要包括粗排效果优化、效果&amp;amp;性能联合优化两个部分。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 粗排优化实践&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;随着大量的效果优化工作[5,6]在美团搜索精排 NN 模型落地，我们也开始探索粗排 NN 模型的优化。考虑到粗排有严格的性能约束，直接将精排优化的工作复用到粗排是不适用的。下面会介绍关于将精排的排序能力迁移到粗排的精排联动效果优化工作，以及基于神经网络结构自动搜索的效果和性能 trade-off 优化工作。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 精排联动效果优化&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;粗排模型受限于打分性能约束，这会导致模型结构相比精排模型更加简单，特征数量也比精排少很多，因此排序效果要差于精排。为了弥补粗排模型结构简单、特征较少带来的效果损失，我们尝试知识蒸馏方法[7]来联动精排对粗排进行优化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;知识蒸馏是目前业界简化模型结构并最小化效果损失的普遍方法，它采取一种 Teacher-Student 范式：结构复杂、学习能力强的模型作为 Teacher 模型，结构较为简单的模型作为 Student 模型，通过 Teacher 模型来辅助 Student 模型训练，从而将 Teacher 模型的“知识”传递给 Student 模型，实现 Student 模型的效果提升。精排蒸馏粗排的示意图如下图 2 所示，蒸馏方案分为以下三种：精排结果蒸馏、精排预测分数蒸馏、特征表征蒸馏。下面会分别介绍这些蒸馏方案在美团搜索粗排中的实践经验。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;569&quot; data-ratio=&quot;1.0186125211505923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsuajhG8rsRu8mNibS3Tx2zuyt6omaSe9j8WTcYhuDkVSdYnzAZMuQelXHF1LYJ6YMsYDV6vPJqQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2364&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图2 精排蒸馏粗排示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1.1 精排结果列表蒸馏&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;粗排作为精排的前置模块，它的目标是初步筛选出质量比较好的候选集合进入精排，从训练样本选取来看，除了常规的用户发生行为（&lt;/span&gt;&lt;span&gt;点击、下单、支付&lt;/span&gt;&lt;span&gt;）的 item 作为正样本，曝光未发生行为的 item 作为负样本外，还可以引入一些通过精排模型排序结果构造的正负样本，这样既能一定程度缓解粗排模型的样本选择偏置，也能将精排的排序能力迁移到粗排。下面会介绍在美团搜索场景下，使用精排排序结果蒸馏粗排模型的实践经验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;策略1&lt;/strong&gt;：在用户反馈的正负样本基础上，随机选取少量精排排序靠后的未曝光样本作为粗排负样本的补充，如图 3 所示。该项改动离线 Recall@150（&lt;/span&gt;&lt;span&gt;指标解释参看附录&lt;/span&gt;&lt;span&gt;）+5PP，线上 CTR +0.1%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;251&quot; data-ratio=&quot;0.44922547332185886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsuajhG8rsRu8mNibS3Tx2zDcqeuLUykACIv4NVTjcgcW5uSYKEenulia4DR9Tgg1icNuic2ukw3cXgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2324&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图3 补充排序结果靠后负例&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;策略2&lt;/strong&gt;：直接在精排排序后的集合里面进行随机采样得到训练样本，精排排序的位置作为 label 构造 pair 对进行训练，如下图 4 所示。离线效果相比策略1 Recall@150 +2PP，线上 CTR +0.06%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;356&quot; data-ratio=&quot;0.6385542168674698&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsuajhG8rsRu8mNibS3Tx2z9BoOOlxWzzLKkmJDdtRgSyuJRvl4ZNxheM4LuicXJQAkZhoyvic0tiaDg/640?wx_fmt=png&quot; data-w=&quot;2324&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图4 排序靠前靠后构成 pair 对样本&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;策略3&lt;/strong&gt;：基于策略2的样本集选取，采用对精排排序位置进行分档构造 label ，然后根据分档 label 构造 pair 对进行训练。离线效果相比策略2 Recall@150 +3PP，线上 CTR +0.1%。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1.2 精排预测分数蒸馏&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;前面使用排序结果蒸馏是一种比较粗糙使用精排信息的方式，我们在这个基础上进一步添加预测分数蒸馏[8]，希望粗排模型输出的分数与精排模型输出的分数分布尽量对齐，如下图 5 所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;369&quot; data-ratio=&quot;0.6385542168674698&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsuajhG8rsRu8mNibS3Tx2zBDSnj66yt0alnS7CnVT80hY7jDBlu1NUibFwyLWNFnMXichXLEbTKh7A/640?wx_fmt=png&quot; data-w=&quot;2324&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图5 精排预测分数构造辅助损失&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在具体实现上，我们采用两阶段蒸馏范式，基于预先训练好的精排模型来蒸馏粗排模型，蒸馏 Loss 采用的是粗排模型输出和精排模型输出的最小平方误差，并且添加一个参数 Lambda 来控制蒸馏 Loss 对最终 Loss 的影响，如公式（1）所示。使用精排分数蒸馏的方法，离线效果 Recall@150 +5PP，线上效果 CTR +0.05%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\begin{aligned}&amp;#10;    Loss = H\left ( y, f\left ( x \right )  \right )  + \lambda \left \| r(x)-p(x) \right \| ^{2}（1）&amp;#10;\end{aligned}&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VamGZggrLDwMBA08vibXSV2WgRHdRmGpPPf40yDrTckNUbQaxzlEOW5fKLxqkXd4fgyicSMibXibr3DUh/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1.3 特征表征蒸馏&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;业界通过知识蒸馏实现精排指导粗排表征建模已经被验证是一种有效提升模型效果的方式[7]，然而直接用传统的方法蒸馏表征有以下缺陷：第一是无法蒸馏粗排和精排之间的排序关系，而前文已提到，排序结果蒸馏在我们的场景中，线下、线上均有效果提升；第二是传统采用 KL 散度作为表征度量的知识蒸馏方案，把表征的每一维独立对待，无法有效地蒸馏高度相关的、结构化的信息[9]，而在美团搜索场景下，数据是高度结构化的，因此采用传统的知识蒸馏策略来做表征蒸馏可能无法较好地捕获这种结构化的知识。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们将对比学习技术应用到粗排建模中，使得粗排模型在蒸馏精排模型的表征时，也能蒸馏到序的关系。我们用 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 596 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3D5&quot; d=&quot;M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 来表示粗排模型，用 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -888.8 1211.3 1093.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3D5&quot; d=&quot;M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(596, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(54.8, 410.1) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 来表示精排模型。假设 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -442 528 636&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;71&quot; d=&quot;M33 218Q33 308 95 374T236 441H246Q330 441 381 372L387 364Q388 364 404 403L420 442H457V156Q457 -132 458 -134Q462 -142 470 -145Q491 -148 519 -148H535V-194H527L504 -193Q480 -192 453 -192T415 -191Q312 -191 303 -194H295V-148H311Q339 -148 360 -145Q369 -141 371 -135T373 -106V-41V49Q313 -11 236 -11Q154 -11 94 53T33 218ZM376 300Q346 389 278 401Q275 401 269 401T261 402Q211 400 171 350T131 214Q131 137 165 82T253 27Q296 27 328 54T376 118V300Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 是数据集中的一个请求 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 6573.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;7B&quot; d=&quot;M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(500, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(889, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(1417, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(0, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mpadded&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1820.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(2265.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;79&quot; d=&quot;M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(2793.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(0, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mpadded&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3197.1, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3586.1, 0)&quot;&gt;&lt;path data-c=&quot;7C&quot; d=&quot;M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(3864.1, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;79&quot; d=&quot;M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(4392.1, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(0, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mpadded&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(4795.7, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5573.7, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6073.7, 0)&quot;&gt;&lt;path data-c=&quot;7D&quot; d=&quot;M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 是该请求下的一个正样例，而 &lt;span&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VamGZggrLDwMBct9xXoqh1OsJSZM5L7E2zdFCcWQ78yicDlcNQDJfndYic884bz8DqbVo4Curic59fLD/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/span&gt; 是该请求下对应的 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 528 694&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6B&quot; d=&quot;M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 个负样例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们将 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 931.6 848.6&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(528, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(0, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mpadded&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 分别输入到粗排和精排网络中，得到其对应的表征 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 3389.2 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3D5&quot; d=&quot;M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(707, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1096, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;71&quot; d=&quot;M33 218Q33 308 95 374T236 441H246Q330 441 381 372L387 364Q388 364 404 403L420 442H457V156Q457 -132 458 -134Q462 -142 470 -145Q491 -148 519 -148H535V-194H527L504 -193Q480 -192 453 -192T415 -191Q312 -191 303 -194H295V-148H311Q339 -148 360 -145Q369 -141 371 -135T373 -106V-41V49Q313 -11 236 -11Q154 -11 94 53T33 218ZM376 300Q346 389 278 401Q275 401 269 401T261 402Q211 400 171 350T131 214Q131 137 165 82T253 27Q296 27 328 54T376 118V300Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1624, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(2068.7, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(528, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3000.2, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 和 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -888.8 4004.6 1138.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3D5&quot; d=&quot;M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(596, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(54.8, 410.1) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1322.3, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1711.3, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;71&quot; d=&quot;M33 218Q33 308 95 374T236 441H246Q330 441 381 372L387 364Q388 364 404 403L420 442H457V156Q457 -132 458 -134Q462 -142 470 -145Q491 -148 519 -148H535V-194H527L504 -193Q480 -192 453 -192T415 -191Q312 -191 303 -194H295V-148H311Q339 -148 360 -145Q369 -141 371 -135T373 -106V-41V49Q313 -11 236 -11Q154 -11 94 53T33 218ZM376 300Q346 389 278 401Q275 401 269 401T261 402Q211 400 171 350T131 214Q131 137 165 82T253 27Q296 27 328 54T376 118V300Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2239.3, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(2684, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(528, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3615.6, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; ，与此同时，我们将 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 5815.8 877&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(528, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(0, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mpadded&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(931.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1542.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(2070.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(0, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mpadded&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(2474.1, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3085.8, 0)&quot;&gt;&lt;path data-c=&quot;2026&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(4424.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(4869.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(5397.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(0, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mpadded&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6B&quot; d=&quot;M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 输入到粗排网络中，得到粗排模型编码后的表征 &lt;span&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VamGZggrLDwMBLXLWB99OmxicGlg94FncobkyLJfl5dOvv9pl97GE7eeYkNj0iaS8YHLVc3GNkvib9JH/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/span&gt; 。对于对比学习负例对的选取，我们采用策略 3 中的方案，对精排的顺序进行分档，同档内精排、粗排的表征对看成是正例，不同档间粗排、精排的表征对看成是负例，而后用 InfoNCE Loss 来优化这个目标：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\begin{aligned}&amp;#10;    \mathcal{L}_{CKT} = -\sum_{q \in Q} \left[ \log \frac{\exp{\left(\langle \phi(q, x_0),\phi^T(q, x_0)\rangle / \tau^\prime\right)}}{\sum_{j=0}^{K}\exp{\left(\langle \phi(q, x_0),\phi(q, x_j)\rangle / \tau^\prime\right)}} \right]（2）&amp;#10;\end{aligned}&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VamGZggrLDwMBI8NRq2LGND6aq8dydicAYPx2mkQgiccvl5G6LuCYvhicnkDYx3be0gBN2jQc9rl1YH2/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其中 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -540 3779.2 734&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;3C&quot; d=&quot;M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(944.7, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;22C5&quot; d=&quot;M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1389.3, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(2001, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;22C5&quot; d=&quot;M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2723.4, 0)&quot;&gt;&lt;path data-c=&quot;3E&quot; d=&quot;M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 表示两个向量的点积，&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -806 816.3 819&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;3C4&quot; d=&quot;M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(517, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(54.8, 410.1) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt; 是温度系数。通过对 InfoNCE loss 的性质进行分析，不难发现上式本质上等价于最大化粗排表征和精排表征互信息的一个下界。因此，该方法本质上是在互信息层面上最大化精排表征和粗排表征之间的一致性，能够更有效地蒸馏结构化知识。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;333&quot; data-ratio=&quot;0.5765625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsuajhG8rsRu8mNibS3Tx2zV5m7QSnRecJYtzMhkV1XXJdc5XZcbbAfX6Ms49ochFaLSVK15uhy0Q/640?wx_fmt=png&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图6 对比学习精排信息迁移&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在上文公式 (1) 的基础上，补充对比学习表征蒸馏 Loss，离线效果 Recall@150 +14PP，线上 CTR +0.15%。相关工作的详细内容可以参考我们的论文[10]（正在投稿中）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\begin{aligned}&amp;#10;   Loss = H\left ( y, f\left ( x \right )  \right )  + \lambda \left \| r(x)-p(x) \right \| ^{2} + \beta L_{CTK}（3）&amp;#10;\end{aligned} &amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VamGZggrLDwMBzu4SPbbcZZ12jdtNlXsa3vSTiaSpD0Q83Lxkc2z5BPeAdOCmNb8Tm0K0BhDNnw9yf/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 效果性能联合优化&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;前面提到线上预测的粗排候选集较大，考虑到系统全链路性能的约束，粗排需要考虑预测效率。前文提到的工作都是基于简单 DNN + 蒸馏的范式来进行优化，但是存在如下两个问题：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;目前受限于线上性能而只使用了简单特征，未引入更加丰富的交叉特征，导致模型效果还有进一步提升的空间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;固定粗排模型结构的蒸馏会损失蒸馏效果，从而造成次优解[11]。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;根据我们的实践经验，直接在粗排层引入交叉特征是不能满足线上时延要求的。因此为了解决以上问题，我们探索并实践了基于神经网络架构搜索的粗排建模方案，该方案同时优化粗排模型的效果和性能，选择出满足粗排时延要求的最佳特征组合和模型结构，整体架构图如下图7所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;367&quot; data-ratio=&quot;0.65390625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsuajhG8rsRu8mNibS3Tx2zdrAass8dzcX4tRCNasmuldlI5ial4LzVUZB63sjg7hbxKAJTOnQC5ibw/640?wx_fmt=png&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图7 基于 NAS 的特征和模型结构选择&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面我们对其中的神经网络架构搜索（&lt;/span&gt;&lt;span&gt;NAS&lt;/span&gt;&lt;span&gt;）以及引入效率建模这两个关键技术点进行简单介绍：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;神经网络架构搜索：如上图7所示，我们采用基于 ProxylessNAS[12]的建模方式，整个模型训练除了网络参数外增加了特征 Masks 参数和网络架构参数，这些参数是可微分的，随着模型目标一起学习。在特征选择部分，我们给每一个特征引入一个基于伯努利分布的 Mask 参数 &lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 746.6 889&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(500, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(0, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mpadded&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;，参见公式（4），其中伯努利分布的 θ 参数通过反向传播进行更新，最终获得每个特征的重要度。在结构选择部分，采用了 L 层 Mixop 表示，每组 Mixop 包括 N 个可供选择的网络结构单元，在实验中，我们采用了不同隐层神经单元数的多层感知机，其中 N= {1024, 512, 256, 128, 64}，同时我们还增加了隐藏单元数为 0 的结构单元，用于选择具有不同层数的神经网络。&lt;/span&gt;&lt;/section&gt;&lt;span&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\begin{aligned}&amp;#10;  g_i=\begin{cases}&amp;#10;  [1,\cdots, 1], &amp;amp; \text{with probability $\theta_i$}\\&amp;#10;          [0,\cdots, 0], &amp;amp; \text{with probability $1 - \theta_i$}&amp;#10;   \end{cases}（4）&amp;#10;\end{aligned} &amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VamGZggrLDwMBibUBzic2ziaJnwLRdJPsRTTUviaPvn2jibJdoYKU5twH0Lib3lFuPQlRHKo4PqicmPd45E0/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;效率建模：为了在模型目标中建模效率指标，我们需要采用一个可微分的学习目标来表示模型耗时，粗排模型的耗时主要分为特征耗时和模型结构耗时。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;p&gt;&lt;span&gt;通过神经网络架构搜索的建模来联合优化粗排模型的效果和预测性能，离线 Recall@150 +11PP， 最终在线上延时不增加的情况下，线上指标 CTR +0.12%；详细工作可参考[13]，已被 KDD 2022 接收。&lt;/span&gt;&lt;/p&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 总结&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;从 2020 年开始，我们通过大量的工程性能优化使粗排层落地 MLP 模型，在2021 年我们继续在 MLP 模型基础上，持续迭代粗排模型来提升粗排效果。首先，我们借鉴业界常用的蒸馏方案来联动精排优化粗排，从精排结果蒸馏、精排预测分数蒸馏、特征表征蒸馏三个层面分别进行了大量实验，在不增加线上延时的情况下，提升粗排模型效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其次，考虑到传统蒸馏方式无法很好处理排序场景中的特征结构化信息，我们自研了一套基于对比学习的精排信息迁移粗排方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，我们进一步考虑到粗排优化本质上是效果和性能的 trade-off，采用多目标建模的思路同时优化效果和性能，落地神经网络架构自动搜索技术来进行求解，让模型自动选择效率和效果最佳的特征集合和模型结构。后续我们会从以下几个方面继续迭代粗排层技术：&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. 附录&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;传统的排序离线指标多以 NDCG、MAP、AUC 类指标为标准，对于粗排来说，其本质更偏向于以集合选择为目标的召回类任务，因此传统的排序指标不利于衡量粗排模型迭代效果好坏。我们借鉴[6]中 Recall 指标作为粗排离线效果的衡量指标，即以精排排序结果为 ground truth，衡量粗排和精排排序结果 TopK 的对齐程度。Recall 指标具体定义如下：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\begin{aligned}&amp;#10;    Recall@K=\frac{|{topK\,candidates\,  from\,preranking}\;\&amp;amp;\;{topK \,candidates\,from \,ranking}|}{|{topK \,candidates \,from \,ranking}|}&amp;#10;\end{aligned}&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/3a3QxMHZ8YyicHoJgRl1VamGZggrLDwMB0yOhvtvS0g0kncvHtiazwqrMFw5whckE8Tf2m4k2X7WY1mQASQCIA9poOcZHJbIibV/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;该公式的物理含义即为衡量粗排排序前 K 个和精排排序前 K 的重合度，该指标更加符合粗排集合选择的本质。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6. 作者简介&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;晓江、所贵、李想、曹越、培浩、肖垚、达遥、陈胜、云森、利前等，均来自美团平台/搜索推荐算法部。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7. 参考文献&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[1] Wang Z, Zhao L, Jiang B, et al. Cold: Towards the next generation of pre-ranking system[J]. arXiv preprint arXiv:2007.16122, 2020.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2] Ma X, Wang P, Zhao H, et al. Towards a Better Tradeoff between Effectiveness and Efficiency in Pre-Ranking: A Learnable Feature Selection based Approach[C]//Proceedings of the 44th International ACM SIGIR Conference on Research and Development in Information Retrieval. 2021: 2036-2040.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1NTMyOTI4Mw==&amp;amp;mid=2247534298&amp;amp;idx=1&amp;amp;sn=21ad88daaedaf33566862e27efc29f5e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;腾讯音乐：全民K歌推荐系统架构及粗排设计&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1NTMyOTI4Mw==&amp;amp;mid=2247533568&amp;amp;idx=1&amp;amp;sn=2b8c694ff43bb451ff1e70b49a7bd97b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;爱奇艺短视频推荐：粗排篇&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[5] &lt;/span&gt;&lt;a href=&quot;https://tech.meituan.com/2020/04/16/transformer-in-meituan.html&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Transformer 在美团搜索排序中的实践&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[6] &lt;/span&gt;&lt;a href=&quot;https://tech.meituan.com/2021/07/08/multi-business-modeling.html&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;多业务建模在美团搜索排序中的实践&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[7] Tang, Jiaxi, and Ke Wang. &quot;Ranking distillation: Learning compact ranking models with high performance for recommender system.&quot; Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery &amp;amp; Data Mining. 2018.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[8] Hinton, Geoffrey, Oriol Vinyals, and Jeff Dean. &quot;Distilling the knowledge in a neural network.&quot; arXiv preprint arXiv:1503.02531 (2015).&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[9] Chen L, Wang D, Gan Z, et al. Wasserstein contrastive representation distillation[C]//Proceedings of the IEEE/CVF conference on computer vision and pattern recognition. 2021: 16296-16305.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[10] Yue Cao, Xiaojiang Zhou, Peihao Huang, Yao Xiao, Dayao Chen, Sheng Chen: Contrastive Information Transfer for Pre-Ranking Systems. CoRR abs/2207.03073 (2022)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[11] Liu Y, Jia X, Tan M, et al. Search to distill: Pearls are everywhere but not the eyes[C]//Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. 2020: 7539-7548.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[12] Cai H, Zhu L, Han S. Proxylessnas: Direct neural architecture search on target task and hardware[J]. arXiv preprint arXiv:1812.00332, 2018.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[13] Xiang Li, Xiaojiang Zhou, Yao Xiao, Peihao Huang, Dayao Chen, Sheng Chen, Yunsen Xian:AutoFAS: Automatic Feature and Architecture Selection for Pre-Ranking System. CoRR abs/2205.09394 (2022)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;招聘信息&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;搜索推荐算法部/基础算法组是负责美团搜索研发的核心团队，使命是打造世界一流的搜索引擎，依托Deep Learning（&lt;/span&gt;&lt;span&gt;深度学习&lt;/span&gt;&lt;span&gt;）、NLP（&lt;/span&gt;&lt;span&gt;自然语言处理&lt;/span&gt;&lt;span&gt;）、Knowledge Graph（&lt;/span&gt;&lt;span&gt;知识图谱&lt;/span&gt;&lt;span&gt;）等技术，处理美团海量用户、商家、商品数据，不断加深对用户、场景、查询和服务的理解，高效地支撑形态各样的生活服务搜索，解决搜索结果的多业务混排、相关性、个性化等问题，给用户极致的搜索体验。搜索推荐算法部长期招聘搜索推荐算法专家，感兴趣的同学可以将简历发送至：&lt;span&gt;xiaoyao06@meituan.com&lt;/span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;邮件主题：美团平台/搜索推荐算法部&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;美团科研合作&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;美团科研合作致力于搭建美团技术团队与高校、科研机构、智库的合作桥梁和平台，依托美团丰富的业务场景、数据资源和真实的产业问题，开放创新，汇聚向上的力量，围绕机器人、人工智能、大数据、物联网、无人驾驶、运筹优化等领域，共同探索前沿科技和产业焦点宏观问题，促进产学研合作交流和成果转化，推动优秀人才培养。面向未来，我们期待能与更多高校和科研院所的老师和同学们进行合作。欢迎老师和同学们发送邮件至：&lt;/span&gt;&lt;span&gt;meituan.oi@meituan.com&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;也许你还想看&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  | &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769148&amp;amp;idx=2&amp;amp;sn=f046a03fe1a02abf525c065963ae4038&amp;amp;chksm=bd1210718a65996725b53e639b2b6c3b51eb28f9ac53152a1c695746cf1c15d202535ee5f71f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;端智能在大众点评搜索重排序的应用实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769148&amp;amp;idx=2&amp;amp;sn=f046a03fe1a02abf525c065963ae4038&amp;amp;chksm=bd1210718a65996725b53e639b2b6c3b51eb28f9ac53152a1c695746cf1c15d202535ee5f71f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;端智能在大众点评搜索重排序的应用实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;端智能在大众点评搜索重排序的应用实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt;&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651752296&amp;amp;idx=1&amp;amp;sn=6c20fd97bfd9cc7e5557e40e867f123b&amp;amp;chksm=bd125e258a65d7335e7b649796248908d5a19c7d64f6f8935ab162c11539397feac3d830c3aa&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;BERT在美团搜索核心排序的探索和实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;BERT在美团搜索核心排序的探索和实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651763589&amp;amp;idx=1&amp;amp;sn=61af71dfa809ce8a6c816cff410ca9ad&amp;amp;chksm=bd126ac88a65e3ded3e065f7303427d55f1d10d0095d276ca64d2722462158a8b10c36312722&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;多业务建模在美团搜索排序中的实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;多业务建模在美团搜索排序中的实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阅读更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;---&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765958&amp;amp;idx=1&amp;amp;sn=8201546812e5a95a2bee9dffc6d12f00&amp;amp;chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;前端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://t.1yb.co/jo7v&quot; textvalue=&quot; 安全&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765981&amp;amp;idx=1&amp;amp;sn=c2dd86f15dee2cbbc89e27677d985060&amp;amp;chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;算‍法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;算法&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765982&amp;amp;idx=1&amp;amp;sn=231b41f653ac7959f3e3b8213dcec2b0&amp;amp;chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;后端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765964&amp;amp;idx=1&amp;amp;sn=ab6d8db147234fe57f27dd46eec40fef&amp;amp;chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数‍据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;数据&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765965&amp;amp;idx=1&amp;amp;sn=37e0c56c8b080146ce5249243bfd84d8&amp;amp;chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;安‍全&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;安全&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765972&amp;amp;idx=1&amp;amp;sn=afe02ec92762c1ce18740d03324c4ac3&amp;amp;chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;And‍roid&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Android&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765973&amp;amp;idx=1&amp;amp;sn=32a23bf1d278dda0398f993ab60a697e&amp;amp;chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;iO‍S&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;iOS&lt;/span&gt;&lt;/a&gt;&lt;span&gt; &lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765963&amp;amp;idx=1&amp;amp;sn=a3de9ef267d07d94118c1611776a4b28&amp;amp;chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运‍维&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;运维&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765974&amp;amp;idx=1&amp;amp;sn=763c1e37d04acffd0142a2852ecfb000&amp;amp;chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;测‍试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NjQ5MTI5OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVGibnsaEib3aNlqF0tOrA2RGEmNSbia2nnohE4Tpf95UyTiaSjDVbHRfY8WNBeTuLLTaVdSckkNyEx1Q/0?wx_fmt=png&quot; data-nickname=&quot;美团技术团队&quot; data-alias=&quot;meituantech&quot; data-signature=&quot;10000+工程师，如何支撑中国领先的生活服务电子商务平台？数亿消费者、数百万商户、2000多个行业、几千亿交易额背后是哪些技术在支撑？这里是美团、大众点评、美团外卖、美团配送、美团优选等技术团队的对外窗口。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7aae20bce0627798b82ae774697a77e6</guid>
<title>MyBatis多条件查询、动态SQL、多表操作、注解开发详细教程</title>
<link>https://toutiao.io/k/2tr5vt2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyBatis封装了JDBC通过Mapper代理的方式，以前繁琐的操作通过“属性与字段映射”就简单化解，MyBatis的动态SQL完美展现了DBMS的独特魅力&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、多条件查询&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于Mybatis的多条件查询，是在Mapper代理的映射文件中写上原有的SQL，然后接口中写一个带参的方法即可，就像这样：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3538324420677362&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHtnNiaDCGbnb0RdqPHJehpNP5hsnqBoz3q5tDC3cUoBbztrDMwknw7IQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1122&quot;/&gt;相比于原生的JDBC那一套，通过MyBatis确实解决了不少硬编码的问题&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是用户的查询永远是动态的操作，他可能在多个条件中选择其中少量条件进行查询，我们的SQL是死的，而用户需求对应的SQL却是活的，这样就会造成不匹配而形成语法错误&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，根据这张表，若是要根据部分字段查出整体，我们可以写对应需求的SQL，但是我要是查询的条件变少了或者变多了呢？若用户只想通过一个条件来查询，那么在其他占位符的位置不输入于是成了null，过不了语法自然查不了，还得重新写SQL，多麻烦&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16526791478373143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHyn0iaVoAPiagE5DQeia1T6mt1D1deibDnanCs6AqYaPkgtEl2dic6GhxhvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1549&quot;/&gt;这个时候MyBatis的特色就体现出来了——动态SQL&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、动态SQL&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQL语句会随着用户的输入或者外部条件的变化而变化，则称之为动态SQL&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.if-where&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为采用了Mapper代理开发，我们可以通过写xml的形式来编写我们的SQL，动态SQL的特性也就在这一举动中所蕴育，在原有的Mapper文件里我们进行如下改造，让平平无奇的SQL焕然一新：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;selByCondition&quot;&lt;/span&gt; &lt;span&gt;resultMap&lt;/span&gt;=&lt;span&gt;&quot;rm&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    select *&lt;br/&gt;    from mybatis  &lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;where&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;=&lt;span&gt;&quot;status !=null&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;       and STATUS=#{STATUS}&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;=&lt;span&gt;&quot;companyName !=null and companyName !=&#x27;&#x27;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    and company_name like #{companyName}&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;=&lt;span&gt;&quot;bracdName !=null and bracdName !=&#x27;&#x27;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    and bracd_name like #{bracdName}&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;where&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“&lt;code&gt;&amp;lt;where&amp;gt;&lt;/code&gt;标签可以自动帮我们去掉and”，这样，不管查询的条件怎么变，我跟着这个逻辑流程走就不会出现SQL语法毛病而导致查询不出来的毛病啦，因为null的情况已经被if所过滤掉了，真是太哇塞了！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.choose-when-ortherwise&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于从多个条件中选择一个的单条件查询的场景，利用分支嵌套就可以实现动态选择单条件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在MyBatis的Mapper代理中，&lt;code&gt;&amp;lt;choose&amp;gt;&lt;/code&gt;相当于switch，&lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt;相当于case&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;selByCondition2&quot;&lt;/span&gt; &lt;span&gt;resultMap&lt;/span&gt;=&lt;span&gt;&quot;rm&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    select *&lt;br/&gt;    from mybatis where&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;choose&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;when&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;=&lt;span&gt;&quot;status !=null&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            STATUS=#{STATUS}&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;when&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;when&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;=&lt;span&gt;&quot;companyName !=null and companyName !=&#x27;&#x27;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            company_name like #{companyName}&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;when&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;when&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;=&lt;span&gt;&quot;bracdName !=null and bracdName !=&#x27;&#x27;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            bracd_name like #{bracdName}&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;when&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;otherwise&lt;/span&gt;&amp;gt;&lt;/span&gt;1=1&lt;span&gt;&amp;lt;/&lt;span&gt;otherwise&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;choose&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与多条件查询不同的是，SQL语句中只会有一个分支生效&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当用户一个条件都不选时，可以在&lt;code&gt;&amp;lt;otherwise&amp;gt;&lt;/code&gt;中写上&lt;code&gt;1=1&lt;/code&gt;让语法成立，反之，若选择了条件则会返回正常结果&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.foreach&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于批量删除的场景，传统的方法是通过in关键字结合占位符来确定，就像这样&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;where&lt;/span&gt; id &lt;span&gt;in&lt;/span&gt; (?,?,?)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但对于动态的场景，批量的数量永远是不确定的，这就导致还需要去改SQL里的占位符数量啊，又是一件麻烦事&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS:MyBatis会将数组参数封装成一个Map集合，默认情况（K-V）array=数组&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面使用了&lt;code&gt;@Param&lt;/code&gt;注解改变了map集合中默认的key&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4387434554973822&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHn4ib94ficGicETGr7mdUPD3n9VcXOVkeOreUcqEr5TSicB5iamQUGAfAj3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;955&quot;/&gt;于是MyBatis中的&lt;code&gt;&amp;lt;foreach&amp;gt;&lt;/code&gt;解决了这一麻烦：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本质是通过遍历的形式，批量删除的数据是由id数组或者集合来决定，&lt;code&gt;collection&lt;/code&gt;属性决定了要遍历哪个数组/集合，item属性则来存放选出的元素，并把它放在占位符里，&lt;code&gt;separator&lt;/code&gt;属性表示分隔符&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;delete&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;deleteById&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    delete frpm mybatis where id in&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;foreach&lt;/span&gt; &lt;span&gt;collection&lt;/span&gt;=&lt;span&gt;&quot;ids&quot;&lt;/span&gt; &lt;span&gt;item&lt;/span&gt;=&lt;span&gt;&quot;id&quot;&lt;/span&gt; &lt;span&gt;separator&lt;/span&gt;=&lt;span&gt;&quot;,&quot;&lt;/span&gt; &lt;span&gt;open&lt;/span&gt;=&lt;span&gt;&quot;(&quot;&lt;/span&gt; &lt;span&gt;close&lt;/span&gt;=&lt;span&gt;&quot;)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        #{id}&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;foreach&lt;/span&gt;&amp;gt;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;delete&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有人会问为啥这里只有一个&lt;code&gt;#{id}&lt;/code&gt;，我的属性字段不止这一个呀？此id非彼id他是一个数组/集合&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、多表操作&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多表之间的关系有一对一，一对多，多对一，多对多，每一种都有建表的原则,以用户-订单模型为例&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用传统的方法进行多表查询无非是通过id来连接表然后封装返回结果，MyBatis中也是如此，我们在Mapper文件中写好表字段之间的映射关系，定义好类型即可，只不过这一过程有点复杂，但一次配好之后即可极大减少硬编码问题，提高效率&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.一对一&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个用户有一张订单&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2545454545454545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHIY4WBFibF2LHHl8IdB3d8klPURxny0K5w5qsjr3bwUwIibz6VJ5jkYcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;770&quot;/&gt;首先还是那套路，建好实体类，写好接口方法，配置Mapper文件，而多表操作的麻烦点就在于配置文件，这里通过例子细说一下&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.先把表写好&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; orders (&lt;br/&gt;&lt;span&gt;id&lt;/span&gt; &lt;span&gt;INT&lt;/span&gt; PRIMARY &lt;span&gt;KEY&lt;/span&gt; ,&lt;br/&gt;ordertime &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;total &lt;span&gt;DOUBLE&lt;/span&gt;,&lt;br/&gt;uid &lt;span&gt;INT&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; orders &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2020&lt;/span&gt;,&lt;span&gt;2000&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; orders &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2021&lt;/span&gt;,&lt;span&gt;3000&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; orders &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;2022&lt;/span&gt;,&lt;span&gt;4000&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;id&lt;/span&gt; &lt;span&gt;INT&lt;/span&gt; PRIMARY &lt;span&gt;KEY&lt;/span&gt; ,&lt;br/&gt;username &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;passwords &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&#x27;lyy&#x27;&lt;/span&gt;,&lt;span&gt;333&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&#x27;myy&#x27;&lt;/span&gt;,&lt;span&gt;444&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; &lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;&#x27;xyy&#x27;&lt;/span&gt;,&lt;span&gt;555&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.写Mapper配置文件&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在写实体类时，要把一个实体写到另一个实体的属性里面，这样才体现关联性，就比如“订单是所用户拥有的”，正因为这种关系我们才会在订单实体类里面写上&lt;code&gt;private User user;&lt;/code&gt;这一属性，这样根据id连接的两个实体才能完美对接！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就像这样：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2868292682926829&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHe6srSIriahxBMicaEx1xTfOAHibYfqAyRjhIJB6iaNQhfndRTBEssnGZOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1025&quot;/&gt;通过&lt;code&gt;&amp;lt;association&amp;gt;&lt;/code&gt;把两张表对应的实体类连接起来,只不过是主键ID要用单独的标签&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;property&lt;/code&gt;: 当前实体(order)中的属性名称(private User user)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;javaType&lt;/code&gt;: 当前实体(order)中的属性的类型(User)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个user有着本质上的却别，就好像前者是在一个人的名字，后者正是被叫的那个人，MyBatis好像就利用了这一特性，通过标签的形式连接了两个实体&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;findAll&quot;&lt;/span&gt; &lt;span&gt;resultMap&lt;/span&gt;=&lt;span&gt;&quot;orderMap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   SELECT *,o.id oid FROM orders o,USER u WHERE o.uid=u.id&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQL环节和原来没什么区别，同样也是通过&lt;code&gt;resultMap&lt;/code&gt;把字段和属性映射封装&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.一对多&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个用户有多张订单&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2921212121212121&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHVTOqoN95PTjVsKqoR7iatA2CiaPhymhWmjeAYt7xaCIK2qzAXN1Y3SIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;825&quot;/&gt;首先，在原有的User实体中得加上一个表示“用户有哪些订单的属性”&lt;code&gt;private List&amp;lt;Order&amp;gt; orderList;&lt;/code&gt;，目的是为了把订单的信息封装到用户的这个属性里，在Mapper文件中体现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;collection&lt;/span&gt; &lt;span&gt;property&lt;/span&gt;=&lt;span&gt;&quot;orderList&quot;&lt;/span&gt; &lt;span&gt;ofType&lt;/span&gt;=&lt;span&gt;&quot;order&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!--封装order的数据--&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt; &lt;span&gt;column&lt;/span&gt;=&lt;span&gt;&quot;oid&quot;&lt;/span&gt; &lt;span&gt;property&lt;/span&gt;=&lt;span&gt;&quot;id&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;result&lt;/span&gt; &lt;span&gt;column&lt;/span&gt;=&lt;span&gt;&quot;ordertime&quot;&lt;/span&gt; &lt;span&gt;property&lt;/span&gt;=&lt;span&gt;&quot;ordertime&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;result&lt;/span&gt; &lt;span&gt;column&lt;/span&gt;=&lt;span&gt;&quot;total&quot;&lt;/span&gt; &lt;span&gt;property&lt;/span&gt;=&lt;span&gt;&quot;total&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;collection&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;property&lt;/code&gt;:集合名称，User实体中的orderlist属性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ofType&lt;/code&gt;：当前集合中的数据类型，就是order实体&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后就是写一对多的SQL：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;findAll&quot;&lt;/span&gt; &lt;span&gt;resultMap&lt;/span&gt;=&lt;span&gt;&quot;userMap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   SELECT *,o.id oid FROM USER u,orders o WHERE u.id=o.uid&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结来看，一对多相比于一对一就是在那个“一”中增添了封装“多”的属性而已，然后稍微调整一下SQL&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.多对多&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多用户多角色&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15856236786469344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHrASFzFBTwCBHwhopCyDJNSyxWNwt1YjqwD2eTqoMfHianRy7cCAgsWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;946&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多对多的建表原则是引入一张中间表，用于维护外键，就是一张表通过中间表找到另一张表&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和一对多的模型类似，先在User实体类中增添一个“用户具备哪些角色”的属性&lt;code&gt;private List&amp;lt;Role&amp;gt; roleList;&lt;/code&gt;其次配置Mapper文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;collection&lt;/span&gt; &lt;span&gt;property&lt;/span&gt;=&lt;span&gt;&quot;roleList&quot;&lt;/span&gt; &lt;span&gt;ofType&lt;/span&gt;=&lt;span&gt;&quot;role&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt; &lt;span&gt;column&lt;/span&gt;=&lt;span&gt;&quot;roleId&quot;&lt;/span&gt; &lt;span&gt;property&lt;/span&gt;=&lt;span&gt;&quot;id&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;result&lt;/span&gt; &lt;span&gt;column&lt;/span&gt;=&lt;span&gt;&quot;roleName&quot;&lt;/span&gt; &lt;span&gt;property&lt;/span&gt;=&lt;span&gt;&quot;roleName&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;result&lt;/span&gt; &lt;span&gt;column&lt;/span&gt;=&lt;span&gt;&quot;roleDesc&quot;&lt;/span&gt; &lt;span&gt;property&lt;/span&gt;=&lt;span&gt;&quot;roleDesc&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;collection&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多表的连接是靠的中间表，这点在Mapper文件中通过映射实现，具体是把两张外表的id（userId和roleId）在id标签中配置成同一个属性，就像这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;id column=&lt;span&gt;&quot;userId&quot;&lt;/span&gt; property=&lt;span&gt;&quot;id&quot;&lt;/span&gt;&amp;gt;&amp;lt;/id&amp;gt;&lt;br/&gt;&amp;lt;id column=&lt;span&gt;&quot;roleId&quot;&lt;/span&gt; property=&lt;span&gt;&quot;id&quot;&lt;/span&gt;&amp;gt;&amp;lt;/id&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQL环节就得用多对多的套路了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;findUserAndRoleAll&quot;&lt;/span&gt; &lt;span&gt;resultMap&lt;/span&gt;=&lt;span&gt;&quot;userRoleMap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    SELECT * FROM USER u,user-role ur,role r WHERE u.id=ur.userId AND ur.roleId=r.id&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回想进行多表操作时MyBatis为我们带来了什么？他确实减少了很多硬编码，我每一次新的SQL只需要在标签里改几个属性就可以，只要理清字段与属性的映射关系，在MyBatis中进行多表操作就是一个“对号入座”&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、注解开发&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对于简单的CRUD注解开发可以极大地提升效率，顾名思义就是把SQL写在注解里&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询（@Select）：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08230088495575222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHFLlSYmJrEdicK4ILNWibDfMLZUOO0SPqgOrAvic6Rl3Mj9bkeat0Q6Ribw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1130&quot;/&gt;添加（@Insert）：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08319467554076539&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHSvEtbaibaLjIQK4oIDyozW8icJViaUP8Sa6KHKrvaezw67XK6nSx2D5PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;修改（@Update）:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08533747090768037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHPexNI5cvXHCMbsKjKCQQqA6DGVq2paHicvFyJ8kUzpmuqQMsCZkhxog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1289&quot;/&gt;删除（@Delete） ：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11640696608615948&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JfTPiahTHJhrgtUJpib16mLhGSb4jYAmwHicuD8IfDjw9ias0A7tSvLEmEdtI0vhKsCEYB0w1aTMYWsmO0TnmfDBbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1091&quot;/&gt;&lt;em&gt;来源：iyu77.blog.csdn.net/article/details/125761737&lt;/em&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b0fcb882f7e34ed93e241b324469f4e9</guid>
<title>了解 HTTP 看这一篇就够</title>
<link>https://toutiao.io/k/aqx4hy6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：yutingbai，腾讯 PCG 前端开发工程师&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. http的发展史&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在学习网络之前，了解它的历史能够帮助我们明白为何它会发展为如今这个样子，引发探究网络的兴趣。下面的这张图片就展示了“互联网”诞生至今的发展历程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0740740740740742&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtWcPGf2YAPK7bLACVAwGu7Ex3gCLHadGAK8KQfaM8zJPfu8hAwjMbvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. http是什么？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;HyperTextTransferProtocol&lt;/strong&gt; 直译为‘超文本传输协议&#x27;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;超文本：指文字、图片、视频、音频等的混合体，比如最熟悉的html。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;传输：http是一个“双向协议”，传输的是请求方和响应方之间的数据，不限制请求方和响应方之间的角色，传递的过程中可以存在任意“中间人”。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;协议：协是两个或多个参与者之间的交流，议是指对参与者之间的约定和规范。所以，http协议可以理解为作用在计算机之间，使用计算机能够理解的语言确立计算机之间交流通信的规范，以及相关的各种控制和错误处理方式。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以对与以上的问题可以有这样的总结：http是一个在计算机世界里专门在两点之间传递文字、图片、音频、视频等超文本数据的约定和规范。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 与http相关的一些概念&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;浏览器（web Browser）：&lt;/strong&gt; 浏览器的本质是http中的请求方，使用http协议获得网络上的各种资源。在HTTP协议里，浏览器的角色被称为&quot;User Agent&quot;即用户代理，意思是作为访问者的”代理来发起HTTP请求。下图是一些主流浏览器及其内核。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5257633587786259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtdYZNRG6CKEed8fXaicsaibQKNe1aibPBpv2Le195CbCPSHiaLibxDOY0fxg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1048&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务器（web Server)：&lt;/strong&gt; 硬件含义就是物理形式或“云”形式的机器。软件含义的 Web 服务器就是提供 Web 服务的应用程序，通常会运行在硬件含义的服务器上。它利用强大的硬件能力响应海量的客户端 HTTP 请求，返回动态的信息。常见的web服务器有Apache、Nginx。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;CDN（Content Delivery Network）：&lt;/strong&gt; CDN是为了解决长距离网络访问速度慢的问题而诞生的一种网络应用服务，全称为“内容分发网络”。CDN最核心的原则是“就近访问”，使用HTTP协议里的代理和缓存技术，用户在上网的时候不直接访问原网站，而是访问离他最近的一个CDN节点，节省了访问过程中的时间成本。（负载均衡，安全防护，边缘计算）.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;爬虫（Crawler）：&lt;/strong&gt;“机器人”形式的用户代理，是一种可以自动访问Web资源的应用程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;HTML(Hyper Text Markup Language)：&lt;/strong&gt; 超文本标记语言，用于描述超文本页面，用标签定义图片、文字、排版布局，最终由浏览器渲染。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;web Service：&lt;/strong&gt; 由W3C定义的应用服务开发规范，使用client-server主从架构。是一个基于Web（HTTP）的服务架构技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;WAF：&lt;/strong&gt; 网络应用防火墙，位于Web服务器之前，专门检测http流量，是防护web应用安全的技术。可以阻止SQL注入，跨站脚本攻击，可以完全集成进Apache或Nginx。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;TCP/IP：&lt;/strong&gt; 一系列网络通信协议的统称，其中最核心的是TCP和IP协议。其他的还有UDP，ICMP，ARP等，共同构成一个复杂但有层次的协议栈。IP（Internet Protocol）协议主要解决寻址和路由问题，以及如何在两点之间传输数据包。TCP（Transmission Control Protoco）协议位于IP协议之上，意思是“传输控制协议”，基于IP协议提供可靠地、字节流形式的通信，是HTTP协议实现的基础。互联网上的 HTTP 协议运行在 TCP/IP 上，HTTP 也就可以更准确地称为“HTTP over TCP/IP”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;DNS（Domain Name System）：&lt;/strong&gt;  域名系统，用有意义的名字来作为 IP 地址的等价替代。在 DNS 中，“域名”（Domain Name）又称为“主机名”（Host）。域名用“.”分隔成多个单词，级别从左到右逐级升高，最右边的被称为“顶级域名”。但想要使用 TCP/IP 协议来通信仍然要使用 IP 地址，所以需要把域名做一个转换，“映射”到它的真实 IP，这就是所谓的“域名解析”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;URI/URL：&lt;/strong&gt; URI（Uniform Resource Identifier）中文名称是统一资源标识符。DNS 和 IP 地址只是标记了互联网上的主机，URI能够唯一地标记互联网上资源。URI 另一个更常用的表现形式是 URL（Uniform Resource Locator）， 统一资源定位符，也就是我们俗称的“网址”，它实际上是 URI 的一个子集，通常不会做严格的区分。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;URI 主要有三个基本的部分构成：&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;协议名：即访问该资源应当使用的协议&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主机名：即互联网上主机的标记，可以是域名或 IP 地址&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;路径：即资源在主机上的位置，使用“/”分隔多级目录&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;HTTPS：&lt;/strong&gt; 全称是“HTTP over SSL/TLS”，也就是运行在 SSL/TLS 协议上的 HTTP。它是一个负责加密通信的安全协议，建立在 TCP/IP 之上，所以也是个可靠的传输协议，可以被用作 HTTP 的下层，相当于“HTTP+SSL/TLS+TCP/IP”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代理（Proxy）:&lt;/strong&gt; 是 HTTP 协议中请求方和应答方中间的一个环节，作为“中转站”，既可以转发客户端的请求，也可以转发服务器的应答。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;代理有很多的种类，常见的有：&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;匿名代理：完全“隐匿”了被代理的机器，外界看到的只是代理服务器；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;透明代理：顾名思义，它在传输过程中是“透明开放”的，外界既知道代理，也知道客户端；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;正向代理：靠近客户端，代表客户端向服务器发送请求；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;反向代理：靠近服务器端，代表服务器响应客户端的请求；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.网络的分层模型&lt;/span&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.578481945467944&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtE0qSRruxWmx2oWp6bZ4Yib2Gr3BKicSDCrdewA61mzksyWHvw2rO7jfA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1357&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网络分层模型层级是从下往上数的，一般我们比较常接触到的是TCP/IP四层模型，也是比较早出现的分层模型。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一层是链路层(&lt;em&gt;link layer&lt;/em&gt;),负责在底层网络上发送原始数据包，工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC 层。对应的是ISO模型的&quot;数据链路层&quot;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二层叫网络层(&lt;em&gt;internet layer&lt;/em&gt;)，IP协议就处在这一层。因为IP协议定义了&quot;IP 地址&quot;的概念，所以就可以在&quot;链路层&quot;的基础上，用IP地址取代MAC地址，在这个网络里找设备时只要把IP 地址再翻译成MAC地址就可以了。对应的是ISO模型的&quot;网络层&quot;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三层叫&quot;传输层&quot;(&lt;em&gt;transport layer&lt;/em&gt;)，这个层次协议的职责是保证数据在IP地址标记的两点之间可靠地传输，是TCP协议和UDP协议工作的层次。对应的是ISO模型的&quot;传输层&quot;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第四层叫&quot;应用层&quot;(&lt;em&gt;application layer&lt;/em&gt;),由于下面的三层把基础打得非常好，所以在这一层就&quot;百花齐放&quot;了，有各种面向具体应用的协议。例如 Telnet、SSH、FTP、SMTP 等等，当然还有我们的 HTTP。对应的是ISO模型的&quot;会话层&quot;，&quot;表示层&quot;，&quot;应用层&quot;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信（发送端从应用层往下走，接收端从应用层往上走）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.域名&lt;/span&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;域名是一个有层次的结构，是一串用“.”分隔的多个单词，最右边的被称为“顶级域名”，然后是“二级域名”，层级关系向左依次降低。最左边的是主机名，通常用来表明主机的用途，比如“www”表示提供万维网服务、“mail”表示提供邮件服务，不过这也不是绝对的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过下面的例子了解一下协议 主机 域名之间的层次关系。域名就像人的名字一样，名字的关键是要让我们容易记忆。除了标识身份之外，域名还可以代替ip地址。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21168831168831168&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtibicKu2g0IPwiagekYB23cRs0x2IPibGBFicowanv11PWRoarpSYhibJudQQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1540&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6.DNS&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们经常会使用域名访问网站，但其实在网络查找的工程当中是使用ip定位资源的，域名必须解析为ip地址才可以正确的拿到资源。DNS就是用来将域名变为ip的协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;根域名服务器（Root DNS Server）：管理顶级域名服务器，返回&quot;com&quot;,&quot;net&quot;,&quot;cn&quot;等顶级域名服务器的 IP 地址&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;顶级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 cn 顶级域名服务器可以返回 123.cn域名服务器的 IP 地址；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 123.cn 权威域名服务器可以返回 www.123.cn 的 IP 地址。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4409937888198758&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOt0q5PFxFf9dicTVVzib3whdIuSIsCIS63GhyILrJCJlptDVflUaZfgalA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1610&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然DNS的服务，遍布全球，服务能力也很厉害，但是全世界的网民都在使用这个服务，也会对服务器造成很大的压力。在核心 DNS 系统之外，还有两种手段用来减轻域名解析的压力，并且能够更快地获取结果，基本思路就是“缓存”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DNS的解析结果可以保存在大公司自己的DNS服务器里，或者操作系统缓存、hosts 文件当中，很多域名解析的工作就都不用请求根DNS服务器了，直接在本地或本机就能解决，不仅方便了用户，也减轻了各级 DNS 服务器的压力，效率就大大提升了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于域名和DNS服务器，我们可以实现重定向。因为域名代替了ip地址，所以可以对外域名不变，而主机IP可以任意变动。当主机有情况需要下线、迁移时，可以更改 DNS 记录，让域名指向其他的机器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们应该都听说过负载均衡吧，DNS在域名解析阶段就可以进行负载均衡的操作。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一种方式，因为域名解析可以返回多个 IP 地址，所以一个域名可以对应多台主机，客户端收到多个 IP 地址后，就可以自己使用轮询算法依次向服务器发起请求，实现负载均衡。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二种方式，域名解析可以配置内部的策略，返回离客户端最近的主机，或者返回当前服务质量最好的主机，这样在 DNS 端把请求分发到不同的服务器，实现负载均衡。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7.HTTP/1.X&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们说了HTTP就是“超文本传输协议”，是一个在计算机世界里专门在两点之间传递文字、图片、音频、视频等超文本数据的约定和规范。在学习过网络的层次模型之后我们又了解了HTTP是一个应用层的协议。在这个环节我们开始正式深入HTTP的世界（基于http/1.1）。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HTTP报文&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP 协议的请求报文和响应报文的结构基本相同，由三大部分组成：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;起始行（&lt;em&gt;start line&lt;/em&gt;）：描述请求或响应的基本信息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;头部字段集合（&lt;em&gt;header&lt;/em&gt;）：使用 key-value 形式更详细地说明报文；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息正文（&lt;em&gt;entity&lt;/em&gt;）：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;请求行&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求行一般用来描述客户端要怎样操作服务端的资源，一般由三个部分组成。通常使用空格（space）来分隔，最后要用 CRLF 换行表示结束。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28509406657018815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtAvSjE0C9CFIHod9jZCJZiczlp0Z8DibXd8F7IZNAAskqyr4msS0vFmSg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;691&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;状态行&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;状态行一般用来描述服务端对于客户端的请求回复的状态，一般也是由三个部分组成。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2848879248011569&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtTsFmMDUNZoVq5apVgBpFCZZZ83v44VOS7PYlvl0mFUBzez1Ghs0SXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1383&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;头部字段&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求行或状态行再加上头部字段集合就构成了 HTTP 报文里完整的请求头或响应头。除了起始行以外，请求头和响应头的结构基本相同。HTTP 头字段非常灵活，不仅可以使用标准里的 Host、Connection 等已有头，也可以任意添加自定义头。不过使用头字段需要注意下面几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;字段名不区分大小写，例如“Host”也可以写成“host”，但首字母大写的可读性更好；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;字段名里不允许出现空格，可以使用连字符“-”，但不能使用下划线“_”。例如，“test-name”是合法的字段名，而“test name”“test_name”是不正确的字段名；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;字段名后面必须紧接着“:”，不能有空格，而“:”后的字段值前可以有多个空格；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;字段的顺序是没有意义的，可以任意排列不影响语义；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;字段原则上不能重复，除非这个字段本身的语义允许，例如 Set-Cookie。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6502673796791444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtDbk23fCibZdJOvaBJ1lV51Yfdw0wPlwEHic0n5icyRkWIkxwbodnu9ncw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;935&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HTTP请求方法&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前 HTTP/1.1 规定了八种方法，单词都必须是大写的形式，下面就来看看这些方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;GET：获取资源，可以理解为读取或者下载数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HEAD：获取资源的元信息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;POST：向资源提交数据，相当于写入或上传数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PUT：类似 POST；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DELETE：删除资源；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CONNECT：建立特殊的连接隧道；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;OPTIONS：列出可对资源实行的方法；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TRACE：追踪请求 - 响应的传输路径。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这几个是我们比较常用的方法，有必要好好学习一下。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;GET适用于向服务器请求资源，一般将数据携带于url上。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HEAD类似于简化版的GET请求，服务端收到HEAD请求时只返回响应头并且响应头与GET完全一致&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;POST和PUT&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;POST 适用于向服务端发送数据，将数据携带在body当中，通常表示的是“create”的含义&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PUT 类似于POST方法，也可以向服务器提交数据，是“update”的含义。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;GET和POST的区别&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在这里特别容易被问到的问题是GET和POST的区别，我也想在这块详细的写一下。以下是基于我个人的理解&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1. 大小：&lt;/strong&gt; GET通常将数据带在URL当中而POST将数据放在body里(是RFC在语义上的要求，语法上GET也可以使用body传输数据而POST同样可以把参数放在URL里)，因此由于浏览器对于URL长度的限制，GET请求能携带的数据大小一般不超过2KB。值得一提Chrome浏览器对URL的长度限制已经增加到2MB，但是我们考虑到兼容性，URL的长度应该以最大限制的最小标准为主（IE浏览器限制为2KB），除了浏览器的限制，还应该考虑到服务端的限制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2. 安全：&lt;/strong&gt; 安全是指请求的方法是否会对服务器当中的资源造成影响，因为GET方法是只读的，只要服务器没有“曲解”客户端的请求，服务端上的数据就是安全的。而POST会对服务端的数据进行“增删改”的操作，因此是不安全的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3. 幂等：&lt;/strong&gt; 幂等的意思是说多次重复执行操作，产生的效果是否相同。显然因为GET方法只对服务器上的资源做只读操作，因此是幂等的。POST在RFC中的定义是“新增或提交数据”，多次提交数据会创建多个资源，所以不是幂等的（而 PUT 是“替换或更新数据”，多次更新一个资源，所以是幂等的）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4. 缓存：&lt;/strong&gt;  就是说这个方法的可缓存性，绝大多数的浏览器的实现里仅仅支持GET缓存。因为GET因为是读取，就可以对GET请求的数据做缓存。而POST不幂等也就意味着不能随意多次执行。因此也就不能缓存。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;URI是什么&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;URI，也就是统一资源标识符（Uniform Resource Identifier）。因为它经常出现在浏览器的地址栏里，所以俗称为“网络地址”，简称“网址”。URI 不完全等同于网址，它包含有 URL 和 URN 两个部分，在 HTTP 世界里用的网址实际上是 URL——统一资源定位符（Uniform Resource Locator）。但因为 URL 实在是太普及了，所以常常把这两者简单地视为相等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;URI 本质上是一个字符串，这个字符串的作用是唯一地标记资源的位置或者名字。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.13507625272331156&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtd0kDsYgDybT5sTJxvnwsqJPbKSLpPTJAHeia3KzOMZJPmjfbcxwUt6g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1836&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这个图片就是一个完整的URI，下面详细拆解一下它的结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;scheme&lt;/strong&gt; 协议名，表示资源应该使用哪种协议来访问。最常见的当然就是“http”了，表示使用 HTTP 协议。另外还有“https”，表示使用经过加密、安全的 HTTPS 协议。此外还有其他不是很常见的 scheme，例如 ftp、ldap、file、news 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;://&lt;/strong&gt; 分隔符，在 scheme 之后，必须是三个特定的字符“://”，它把 scheme 和后面的部分分离开。没有特定的意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;user:passwd@&lt;/strong&gt; 身份信息，表示登录主机时的用户名和密码，但现在已经不推荐使用这种形式了，因为它把敏感信息以明文形式暴露出来，存在严重的安全隐患。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;host:port&lt;/strong&gt; 主机名，表示资源所在的主机名，通常的形式是“host:port”，即主机名加端口号。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;path&lt;/strong&gt; 路径,表示资源所在位置,采用了类似文件系统“目录”的表示方式，通常以‘/’开始&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;query&lt;/strong&gt; 查询参数，用一个“?”开始，但不包含“?”，表示对资源附加的额外要求。path是多个“key=value”的字符串，这些字符串用字符“&amp;amp;”连接，浏览器和服务器都可以按照这个格式把长串的查询参数解析成可理解的字典或关联数组形式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;#fragment&lt;/strong&gt; 片段标识符，它是 URI 所定位的资源内部的一个“锚点”，浏览器可以在获取资源后直接跳转到它指示的位置。但片段标识符仅能由浏览器这样的客户端使用，服务器是看不到的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在 URI 里只能使用 ASCII 码，对于 ASCII 码以外的字符集和特殊字符做一个特殊的操作，把它们转换成与 URI 语义不冲突的形式。这在 RFC 规范里称为“escape”和“unescape”，俗称“转义”。URI 转义的规则有点“简单粗暴”，直接把非 ASCII 码或特殊字符转换成十六进制字节值，然后前面再加上一个“%”。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;状态码&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在HTTP报文部分我们说了HTTP的&lt;a href=&quot;#heading-9&quot;&gt;状态行&lt;/a&gt;,我们在这个部分就来看看状态行中的状态码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;状态码是一个十进制的数字，RFC 标准把状态码分成了五类，用数字的第一位表示分类，而 0 ～ 99 不用，这样状态码的实际可用范围就变成了 100~599。这五类的具体含义是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;1××：提示信息，表示目前是协议处理的中间状态，还需要后续的操作；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2××：成功，报文已经收到并被正确处理；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3××：重定向，资源位置发生变动，需要客户端重新发送请求；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4××：客户端错误，请求报文有误，服务器无法处理；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;5××：服务器错误，服务器在处理请求时内部发生了错误。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1××&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1×× 类状态码属于提示信息，是协议处理的中间状态，实际能够用到的时候很少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;100 Continue&quot;因该是比较常接触到的,会在POST请求发送大文件给服务器时询问服务器是否能够接受时使用，需要带上请求头&lt;code&gt;Expect: 100-continue&lt;/code&gt;。这个过程也就是我们常说的&lt;code&gt;POST发送两个TCP包给服务器&lt;/code&gt;的说法的来源，不过客户端不需要一直等待服务端的回应，在一定时间内没有收到否定的回答还是会将数据主体发送给服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2××&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2×× 类状态码表示服务器收到并成功处理了客户端的请求，这也是客户端最愿意看到的状态码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“200 OK”是最常见的成功状态码，表示一切正常，服务器如客户端所期望的那样返回了处理结果，如果是非 HEAD 请求，通常在响应头后都会有 body 数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“204 No Content”是另一个很常见的成功状态码，它的含义与“200 OK”基本相同，但响应头后没有 body 数据。所以对于 Web 服务器来说，正确地区分 200 和 204 是很必要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“206 Partial Content”是 HTTP 分块下载或断点续传的基础，在客户端发送“范围请求”、要求获取资源的部分数据时出现，它与 200 一样，也是服务器成功处理了请求，但 body 里的数据不是资源的全部，而是其中的一部分。状态码 206 通常还会伴随着头字段&lt;code&gt;Content-Range&lt;/code&gt;，表示响应报文里 body 数据的具体范围，供客户端确认，例如“Content-Range: bytes 0-99/2000”，意思是此次获取的是总计 2000 个字节的前 100 个字节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3××&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3××类状态码表示客户端请求的资源发生了变动，客户端必须用新的 URI 重新发送请求获取资源，也就是通常所说的“重定向”，包括著名的 301、302 跳转。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“301 Moved Permanently” 俗称“永久重定向”，含义是此次请求的资源已经不存在了，需要改用改用新的 URI 再次访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“302 Found”，曾经的描述短语是“Moved Temporarily”，俗称“临时重定向”，意思是请求的资源还在，但需要暂时用另一个 URI 来访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“304 Not Modified” 是一个比较有意思的状态码，它用于 If-Modified-Since 等条件请求，表示资源未修改，用于缓存控制。它不具有通常的跳转含义，但可以理解成“重定向已到缓存的文件”（即“缓存重定向”）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4××&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4××类状态码表示客户端发送的请求报文有误，服务器无法处理，它就是真正的“错误码”含义了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“400 Bad Request” 是一个通用的错误码，表示请求报文有错误，只是一个笼统的错误，没有明确含义的状态码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“403 Forbidden” 实际上不是客户端的请求出错，而是表示服务器禁止访问资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“404 Not Found” 原意是资源在本服务器上未找到，所以无法提供给客户端。但现在已经被“用滥了”，只要服务器“不高兴”就可以给出个 404，而我们也无从得知后面到底是真的未找到，还是有什么别的原因，某种程度上它比 403 还要令人讨厌。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5××&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5××类状态码表示客户端请求报文正确，但服务器在处理时内部发生了错误，无法返回应有的响应数据，是服务器端的“错误码”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“500 Internal Server Error” 与 400 类似，也是一个通用的错误码，服务器究竟发生了什么错误我们是不知道的。不过对于服务器来说这应该算是好事，通常不应该把服务器内部的详细信息，例如出错的函数调用栈告诉外界。虽然不利于调试，但能够防止黑客的窥探或者分析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“501 Not Implemented” 表示客户端请求的功能还不支持，这个错误码比 500 要“温和”一些，和“即将开业，敬请期待”的意思差不多，不过具体什么时候“开业”就不好说了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“502 Bad Gateway” 通常是服务器作为网关或者代理时返回的错误码，表示服务器自身工作正常，访问后端服务器时发生了错误，但具体的错误原因也是不知道的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“503 Service Unavailable” 表示服务器当前很忙，暂时无法响应服务，我们上网时有时候遇到的“网络服务正忙，请稍后重试”的提示信息就是状态码 503。503 是一个“临时”的状态，很可能过几秒钟后服务器就不那么忙了，可以继续提供服务，所以 503 响应报文里通常还会有一个“Retry-After”字段，指示客户端可以在多久以后再次尝试发送请求。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HTTP的特点&lt;/span&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;灵活可扩展：HTTP在诞生之初只规定了报文的基本格式，比如用空格分隔单词，用换行分隔字段，“header+body”等，报文里的各个组成部分都没有做严格的语法语义限制，可以由开发者任意定制。而那些 RFC 文档，实际上也可以理解为是对已有扩展的“承认和标准化”，实现了“从实践中来，到实践中去”的良性循环。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可靠传输: 因为 HTTP 协议是基于 TCP/IP 的，而 TCP 本身是一个“可靠”的传输协议，所以 HTTP 自然也就继承了这个特性，能够在请求方和应答方之间“可靠”地传输数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;应用层的协议: HTTP 凭借着可携带任意头字段和实体数据的报文结构，以及连接控制、缓存代理等方便易用的特性，只要不太苛求性能，HTTP 几乎可以传递一切东西，满足各种需求，称得上是一个“万能”的协议。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;请求 - 应答:请求 - 应答模式是 HTTP 协议最根本的通信模型，通俗来讲就是“一发一收”。请求 - 应答模式也明确了 HTTP 协议里通信双方的定位，永远是请求方先发起连接和请求，是主动的，而应答方只有在收到请求后才能答复，是被动的，如果没有请求时不会有任何动作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无状态: “状态”其实就是客户端或者服务器里保存的一些数据或者标志，记录了通信过程中的一些变化信息。HTTP在整个协议里没有规定任何的“状态”，但不要忘了 HTTP 是“灵活可扩展”的，虽然标准里没有规定“状态”，但完全能够在协议的框架里给它“打个补丁”，增加这个特性(cookie)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;明文传输: “明文”意思就是协议里的报文（准确地说是 header 部分）不使用二进制数据，而是用简单可阅读的文本形式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不安全: 安全有很多的方面，明文只是“机密”方面的一个缺点，在“身份认证”和“完整性校验”这两方面 HTTP 也是欠缺的。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HTTP的实体数据&lt;/span&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据类型&lt;/span&gt;&lt;/h5&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在TCP/IP协议栈里，数据的传输都是Header+body的形式。在传输层协议中，不需要关心数据是什么，但在应用层必须要告诉上层数据的类型，否则上层就不知该如何处理。最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为HTML文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME(Multipurpose Internet Mail Extensions 多用途互联网邮件扩展类型)指定的数据类型信息来标识数据类型。MINE将数据分为七大类（video、image、application、text、audio、multipart、message），再以type/subtype的格式细分出其下的子类。例如我们常用到的text/html 、text/css 、image/jpeg 、 applaction/json等。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Accept-encoding&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外HTTP协议还制定了数据的压缩格式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;gzip：GNU zip 压缩格式，也是互联网上最流行的压缩格式；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;deflate：zlib（deflate）压缩格式，流行程度仅次于 gzip；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;br：一种专门为 HTTP 优化的新压缩算法（Brotli）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Accept-Language&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;标记了客户端可理解的自然语言，也允许用“,”做分隔符列出多个类型，例如：&lt;code&gt;Accept-Language: zh-CN, zh, en&lt;/code&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据类型在请求头中的表现&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 HTTP 协议里用 Accept、Accept-Encoding、Accept-Language 等请求头字段进行内容协商的时候，还可以用一种特殊的“q”参数表示权重来设定优先级，这里的“q”是“quality factor”的意思。权重的最大值是 1，最小值是 0.01，默认值是 1，如果值是 0 就表示拒绝。具体的形式是在数据类型或语言代码后面加一个“;”，然后是“q=value”。服务器会在响应头里多加一个 Vary 字段，记录服务器在内容协商时参考的请求头字段。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41595441595441596&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtN027SbUDVOtM11WErtBibaDhDrF5VQGCgM55eyoQvhvB2OIrtBYwDPw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1053&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HTTP如何传输大文件&lt;/span&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据压缩&lt;br/&gt;前面提到的&lt;code&gt;accept-encoding&lt;/code&gt;请求头可以算是是一种传输大文件的解决方式，服务器可以选择一种浏览器支持的数据压缩方式放进&lt;code&gt;content-encoding&lt;/code&gt;响应头里，再把原数据压缩后返回给客户端。缺点是这种方式只对文本有较好地压缩率，对于图片音频等本身就已经高度压缩的多媒体数据束手无策。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分块传输&lt;br/&gt;在HTTP头部表示为&lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;,指报文里的body部分不是一次性发过来的，而是分为许多&lt;code&gt;chunked&lt;/code&gt;分块发送。&lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;和&lt;code&gt;Content-Length&lt;/code&gt;这两个字段是互斥的，也就是说响应报文里这两个字段不能同时出现，一个响应报文的传输要么是长度已知，要么是长度未知（chunked），这一点你一定要记住。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;范围请求&lt;br/&gt;如果想获取某个大文件其中的片段，分块传输就没办法满足这样的需求。HTTP协议提出了范围请求这样的概念，允许客户端只获取文件的某一部分。客户端先发个HEAD请求看看服务器是否支持范围请求，服务器必须在&lt;code&gt;Accept-Ranges&lt;/code&gt;响应头中告知客户端是否具有范围请求的能力。请求头&lt;code&gt;Ranges&lt;/code&gt;是HTTP范围请求的专用字段，值的格式是&lt;code&gt;bytes=x-y&lt;/code&gt;表示&lt;code&gt;x ~ y&lt;/code&gt;之间的范围。服务端在收到 &lt;code&gt;Ranges&lt;/code&gt;请求头时，首先验证x-y的范围是否合法（x和y可以省略，省略x则表示从后往前，省略y则表示从前往后），其次计算读取偏移量，返回206状态码和所读取的文件 ，最后在响应头加上&lt;code&gt;Content-Range&lt;/code&gt;表示实际返回的偏移量和总数,格式为&lt;code&gt;bytes x-y/length&lt;/code&gt;。&lt;br/&gt;范围请求还支持在一个头里定义多个&lt;code&gt;x-y&lt;/code&gt;,这种情况需要一种特殊的MIME类型&lt;code&gt;multipart/byteranges&lt;/code&gt;,表示报文是有多段组成。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HTTP连接管理&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;http的通信过程采取请求/应答模式，在http0.9/1.0时期，每次发起请求都需要建立连接-&amp;gt;发送数据-&amp;gt;断开连接，由于整个请求的过程非常短暂，早起的http也称为&lt;code&gt;短链接&lt;/code&gt;无链接的协议。由于TCP简历连接要经过三次握手四次挥手，整个过程需要3个RTT，而HTTP的一次简单请求通常只需要2个RTT，那么被浪费掉的时间有60%。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Connection：keep-alive&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP1.1提出了长连接的概念，也就是&lt;code&gt;Keep-alive&lt;/code&gt;。在长连接上建立一次TCP连接可以发送多个HTTP请求。但因为连接是&lt;code&gt;alive&lt;/code&gt;的，如果一直不关闭，就会占用大量的服务器资源，导致服务无法及时响应真正的请求，所以我们也需要及时关闭连接。可以通过在客户端请求头添加&lt;code&gt;Connection: close&lt;/code&gt;字段主动关闭连接。服务端通常不会主动关闭连接，但我们也可以通过设置时长、请求数等方式约定断开连接的条件。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;队头阻塞&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于&lt;code&gt;请求-应答&lt;/code&gt;模式的http协议，形成了串行的请求队列（&lt;code&gt;http1.1还提出了管道机制，即在同一个TCP连接上不用等待上一个请求的响应即可发出下个请求，不过客户端还是按照正常顺序接受响应，这种做法并没带来任何性能上的改善，所以默认保持关闭&lt;/code&gt;），如果队首的请求处于阻塞状态，那么后面的请求也无法正常响应结果就是更长时间的性能浪费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;并发连接&lt;/code&gt;和&lt;code&gt;域名分片&lt;/code&gt;是对队头阻塞的针对性优化策略，浏览器限制每个客户端可以并发建立6～8个连接，又可以将多个域名指向同一个服务器，这样实际的连接数量就更多了，是一种用数量解决质量的思路。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重定向&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们在浏览器输入一个url再按下回车，页面跳转到我们输入的地址中，这种行为就是主动跳转。浏览器还支持被动跳转，也就是HTTP的重定向。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;状态码&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面了解过HTTP状态码，&lt;code&gt;3XX&lt;/code&gt;即表示为重定向。下面详细介绍下各个状态码的含义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;301&lt;/code&gt;指永久重定向，可能是域名下线，域名迁移等原因，原地址不再维护。此时浏览器在重定向的同时记录重定向后的地址，下次访问该域名就自动访问新的URI了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;302&lt;/code&gt;指临时重定向，可能是服务器维护、临时关闭等原因，临时跳转到新的地址上，此时浏览器不会记录重定向的地址，认为原地址还是有效的，下次访问时还是优先访问原地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;303&lt;/code&gt;类似 302，但要求重定向后的请求改为 GET 方法，访问一个结果页面，避免 POST/PUT 重复操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;307&lt;/code&gt;类似 302，但重定向后请求里的方法和实体不允许变动，含义比 302 更明确。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;308&lt;/code&gt;类似 307，不允许重定向后的请求变动，但它是 301“永久重定向”的含义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以在地址栏输入&lt;code&gt;bing.com&lt;/code&gt;,浏览器控制台中的状态如下图所示：&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端是如何处理重定向的&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在浏览器地址栏输入bing.con我们可以看到，状态码如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1342857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtW0Zv0iaVcISkmduqxbGheGNib5NeFZZ4fOlNhJ2ULNqnwFVd8IJiaboQA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;350&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们浏览器收到响应之后根据响应头中的Location字段判断重定向的地址，然后进行被动跳转。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然重定向的用途很广，但是随之而来的也有跟多问题。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一个问题是“性能损耗”。很明显，重定向的机制决定了一个跳转会有两次&lt;code&gt;请求 - 应答&lt;/code&gt;，比正常的访问多了一次。虽然 301/302 报文很小，但大量的跳转对服务器的影响也是不可忽视的。站内重定向可以长连接复用，站外重定向就要开两个连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二的问题时循环重定向，比如 &lt;code&gt;A-&amp;gt;B-&amp;gt;C-&amp;gt;A&lt;/code&gt;,当我们访问A时就会发生无限跳转。所以HTTP协议特别规定，浏览器必须具有检测“循环跳转”的能力，在发现这种情况时应当停止发送请求并给出错误提示。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;cookie&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP 是“无状态”的，这既是优点也是缺点。优点是服务器没有状态差异，可以很容易地组成集群，而缺点就是无法支持需要记录状态的事务操作。好在 HTTP 协议是可扩展的，后来发明的 Cookie 技术，给 HTTP 增加了“记忆能力”。&lt;br/&gt;cookie同样存在于HTTP头部字段里。服务端可以使用&lt;code&gt;set-cookie&lt;/code&gt;标识客户端身份，客户端则在请求时携带&lt;code&gt;cookie&lt;/code&gt;告诉服务端自己的信息。&lt;code&gt;cookie&lt;/code&gt;字段以&lt;code&gt;key=value&lt;/code&gt;的格式保存，浏览器在一个&lt;code&gt;cookie&lt;/code&gt;字段里可以存放多对数据，用&lt;code&gt;;&lt;/code&gt;分割。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3368146214099217&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtqFxFBK9lrJ5aTqibPO42Q7nJYctibBSHfzE585QicxfCcwE2wRrYCxuZA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;383&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cookie 主要用于以下三个方面：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;个性化设置（如用户自定义设置、主题等）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;浏览器行为跟踪（如跟踪分析用户行为等）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相关属性&lt;/span&gt;&lt;/h5&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;生存周期&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Expires&lt;/code&gt;俗称“过期时间”，用的是绝对时间点，可以理解为“截止日期”（deadline）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Max-Age&lt;/code&gt;用的是相对时间，单位是秒，浏览器用收到报文的时间点再加上 Max-Age，就可以得到失效的绝对时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Expires&lt;/code&gt; 和 &lt;code&gt;Max-Age&lt;/code&gt; 可以同时出现，两者的失效时间不一致时浏览器会优先采用&lt;code&gt;Max-Age&lt;/code&gt;计算失效期。如果服务器不设置Max-Age、Expries或者字段值为0指不能缓存cookie，但在会话期间是可用的，浏览器会话关闭之前可以用cookie记录用户的信息。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作用域&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Domain&lt;/code&gt;和&lt;code&gt;Path&lt;/code&gt;指定了 Cookie 所属的域名和路径，浏览器在发送 Cookie 前会从 URI 中提取出 host 和 path 部分，对比 Cookie 的属性。如果不满足条件，就不会在请求头里发送 Cookie。通常 Path 就用一个“/”或者直接省略，表示域名下的任意路径都允许使用 Cookie。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安全性&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HttpOnly&lt;/code&gt;表示此 Cookie 只能通过浏览器 HTTP 协议传输，禁止其他方式访问。这也是预防“跨站脚本”（XSS）攻击的有效手段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SameSite&lt;/code&gt;可以防范“跨站请求伪造”（XSRF）攻击，&lt;code&gt;SameSite = strict&lt;/code&gt;表示禁止cookie在跳转链接时跨域传输。&lt;code&gt;SameSite = lax&lt;/code&gt;稍微宽松一点，允许在&lt;code&gt;GET&lt;/code&gt;、&lt;code&gt;HEAD&lt;/code&gt;等安全请求方式中跨域携带。默认值为&lt;code&gt;none&lt;/code&gt;,表示不限制cookie的携带和传输。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Secure&lt;/code&gt;表示这个cookie仅能用HTTPS协议加密传输，明文的HTTP协议会禁止发送。但Cookie本身不是加密的，浏览器里还是以明文的形式存在。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HTTP缓存控制&lt;/span&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;服务器的缓存控制&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;浏览器在访问页面资源时首先会查找缓存数据，如果没有再发送请求，向服务器获取资源；服务器响应请求，返回资源，同时标记资源的有效期；浏览器缓存资源，等待下次重用。这就是客户端缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器标记资源有效期使用的头字段是&lt;code&gt;Cache-Control&lt;/code&gt;，里面的值&lt;code&gt;max-age=xxx&lt;/code&gt;就是资源的有效时间（与cookie的max-age不同，这里的max-age时间的计算起点是响应报文的创建时刻）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外在响应报文里还可以用其他的值来更精确地指示浏览器应该如何使用缓存：&lt;br/&gt;&lt;code&gt;no-store&lt;/code&gt;: 不允许缓存，用于某些变化非常频繁的数据，例如秒杀页面；&lt;br/&gt;&lt;code&gt;no-cache&lt;/code&gt;: 可以缓存，但在使用之前必须要去服务器验证是否过期；&lt;br/&gt;&lt;code&gt;must-revalidate&lt;/code&gt;: 如果缓存不过期就可以继续使用，但过期了就必须去服务器验证。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端的缓存控制&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;浏览器也可以发&lt;code&gt;Cache-Control&lt;/code&gt;，也就是说&lt;code&gt;请求 - 应答&lt;/code&gt;的双方都可以用这个字段进行缓存控制，互相协商缓存的使用策略。在浏览器前进、后退、重定向时cache-control就生效了，响应头里有&lt;code&gt;from disk cache&lt;/code&gt;字样，就说明浏览器未发送请求，而是直接使用了本地缓存。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;条件请求&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;浏览器在刷新页面时相当于在请求头中添加了&lt;code&gt;Cache-Control:no-cache&lt;/code&gt;,这样在刷新页面时，还是向服务端发送了请求，并没有很好的利用到缓存。所以HTTP协议又定义了一系列“If”开头的“条件请求”字段，专门用来检查验证资源是否过期。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;条件请求一共有 5 个头字段，我们最常用的是&lt;code&gt;if-Modified-Since&lt;/code&gt;和&lt;code&gt;If-None-Match&lt;/code&gt;这两个。需要第一次的响应报文预先提供&lt;code&gt;Last-modified&lt;/code&gt;（最后修改时间）和&lt;code&gt;ETag&lt;/code&gt;（资源唯一标识），然后第二次请求时就可以带上缓存里的原值，验证资源是否是最新的。如果资源没有变，服务器就回应一个“304 Not Modified”，表示缓存依然有效，浏览器就可以更新一下有效期，然后放心大胆地使用缓存了。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;代理缓存&lt;/span&gt;&lt;/h5&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;代理服务器&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代理服务器就是客户端和服务端之间的中间商，在中间的位置转发上游的请求和下游的响应。代理服务器在计算机领域有非常重要的功能&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;负载均衡：面向客户端时屏蔽原服务器，代理服务器可以通过轮询、哈希等算法将流量分发，提高整体的性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;健康检查：使用‘心跳’等机制监控服务器，保证服务器的可用性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安全防护：保护被代理服务端的IP和流量，防止网络攻击或负载问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加密卸载：对外和对内使用不同的加密策略，节省加密成本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内容缓存：暂存/复位服务器的响应。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存代理&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP的服务端缓存主要由代理服务器来实现，代理服务器收到源服务器的响应之后将报文转发给客户端的同时也存入自己的cache里，下次再有相同的请求就可以直接发送304或者缓存数据，节省源服务器的成本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为代理服务器&lt;code&gt;既是服务端，又是客户端&lt;/code&gt;的特性，有一些特殊的&lt;code&gt;cache-control&lt;/code&gt;属性：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;private&lt;/code&gt;: 表示只能客户端缓存，不允许代理服务器上缓存。&lt;br/&gt;&lt;code&gt;punlic&lt;/code&gt;:表示完全公开，客户端和代理服务器都可以缓存。&lt;br/&gt;&lt;code&gt;proxy-revalidate&lt;/code&gt;:要求代理服务器缓存过期后必须回源验证。&lt;br/&gt;&lt;code&gt;s-maxage&lt;/code&gt;: 代理服务器缓存的有效期&lt;br/&gt;&lt;code&gt;no-transform&lt;/code&gt;: 不允许代理服务器转换数据格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;max-stale&lt;/code&gt;: 如果代理上的缓存过期了也可以接受，但不能过期太多，超过 x 秒也会不要。&lt;br/&gt;&lt;code&gt;min-flash&lt;/code&gt;: 表示缓存少于x有效期就不要了。&lt;br/&gt;&lt;code&gt;only-if-cached&lt;/code&gt;:表示只接受代理缓存的数据，不接受源服务器的响应。如果代理上没有缓存或者缓存过期，就应该给客户端返回一个 504。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.047085201793722&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtDiaMoXAUPicTCzazyZISJCq9Im8rDMuMre8ic3jRwu8OWpvLqrFnICTqg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;892&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;8. HTTPS&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 HTTP 天生“明文”的特点，整个传输过程完全透明，任何人都能够在链路中截获、修改或者伪造请求 / 响应报文，数据不具有可信性。只有具有机密性、完整性、身份认证和不可否认性，我们才认为这个请求是安全的。HTTPS为HTTP增加了以上四个特性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTPS实际上就指的是HTTP over TLS/SSl。是在原本的HTTP协议上加了一层TLS/SSL协议。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6588235294117647&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtYR7EHyjBEODD2Tt7QwPic9oY4090rCc7msf1qlB1apOr7LVIunmjJBQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;595&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SSL/TLS&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SSL 即安全套接层（Secure Sockets Layer），在 OSI 模型中处于第 5 层（会话层），由网景公司于 1994 年发明。SSL 发展到 v3 时已经证明了它自身是一个非常好的安全通信协议，于是在 1999 年它改名为 TLS（传输层安全， Transport Layer Security），目前应用的最广泛的 TLS 是 1.2，而之前的协议（TLS1.1/1.0、SSLv3/v2）都已经被认为是不安全的。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;机密性（基于TLS1.2）&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SSL/TLS通过&lt;code&gt;加密（encrypt）&lt;/code&gt;来传输&lt;code&gt;密文（cipher text）&lt;/code&gt;保证数据传输的安全性，只有拥有&lt;code&gt;密钥(key)&lt;/code&gt;的人才能够通过&lt;code&gt;解密(decrypt)&lt;/code&gt;获得&lt;code&gt;明文（plain text/clear text）&lt;/code&gt;，加密解密的操作过程就是&lt;code&gt;加密算法&lt;/code&gt;。所以“密钥”是一长串的数字，约定俗成的度量单位是“位”（bit）。比如，说密钥长度是 128，就是 16 字节的二进制串，密钥长度 1024，就是 128 字节的二进制串。按照密钥的使用方式，加密可以分为两大类：&lt;code&gt;对称加密&lt;/code&gt;和&lt;code&gt;非对称加密&lt;/code&gt;。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对称加密&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顾名思义，加密解密都使用相同的密钥就叫做对称加密。TLS里目前常用的有 AES 和 ChaCha20。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AES&lt;/code&gt; 的意思是“高级加密标准”（Advanced Encryption Standard），密钥长度可以是 128、192 或 256。它是 DES 算法的替代者，安全强度很高，性能也很好，而且有的硬件还会做特殊优化，所以非常流行，是应用最广泛的对称加密算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ChaCha20&lt;/code&gt; 是 Google 设计的另一种加密算法，密钥长度固定为 256 位，纯软件运行性能要超过 AES，曾经在移动客户端上比较流行，但 ARMv8 之后也加入了 AES 硬件优化，所以现在不再具有明显的优势。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;非对称加密&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对称加密看上去很好的实现了机密性，但是还有一个问题就是如何安全的传输&lt;code&gt;密钥&lt;/code&gt;。因为在&lt;code&gt;加密算法&lt;/code&gt;中,只要拥有密钥就可以解密，如果密钥在传输过程中被窃取，也就无机密性可言。为了解决这个问题，又有了&lt;code&gt;非对称加密&lt;/code&gt;算法。他拥有两个&lt;code&gt;密钥&lt;/code&gt;,分别是&lt;code&gt;公钥（public key）&lt;/code&gt;和&lt;code&gt;私钥（private key）&lt;/code&gt;,&lt;code&gt;公钥&lt;/code&gt;是公开的，而&lt;code&gt;私钥&lt;/code&gt;是严格保密的。&lt;code&gt;公钥&lt;/code&gt;和&lt;code&gt;私钥&lt;/code&gt;有个特别的&lt;code&gt;“单向”性&lt;/code&gt;，虽然都可以用来加密解密，但&lt;code&gt;公钥&lt;/code&gt;加密后只能用&lt;code&gt;私钥&lt;/code&gt;解密，反过来，&lt;code&gt;私钥&lt;/code&gt;加密后也只能用&lt;code&gt;公钥&lt;/code&gt;解密。非对称加密可以解决&lt;code&gt;密钥交换&lt;/code&gt;的问题。网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非对称加密算法的设计要比对称算法难得多，在 TLS 里只有很少的几种，比如 DH、DSA、RSA、ECC 等。&lt;br/&gt;&lt;code&gt;RSA&lt;/code&gt; 可能是其中最著名的一个，几乎可以说是非对称加密的代名词，它的安全性基于“整数分解”的数学难题，使用两个超大素数的乘积作为生成密钥的材料，想要从公钥推算出私钥是非常困难的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ECC&lt;/code&gt;是非对称加密里的“后起之秀”，它基于“椭圆曲线离散对数”的数学难题，使用特定的曲线方程和基点生成公钥和私钥，子算法 ECDHE 用于密钥交换，ECDSA 用于数字签名。相对RSA，ECC在安全和性能上都有更明显的优势，160位的ECC相当于1024位的RSA，260位的ECC相当于2048位的RSA。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;混合加密&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然非对称加密没有&lt;code&gt;密钥交换&lt;/code&gt;的难题，但因为它们都是基于复杂的数学难题，运算速度很慢，即使是 ECC 也要比 AES 差上好几个数量级。所以目前&lt;code&gt;TLS&lt;/code&gt;使用&lt;code&gt;混合加密&lt;/code&gt;，使二者取长补短，既能高效加密解密，又能安全的进行数据传输。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在建立连接之初先使用非对称加密的形式传递密钥，然后用随机数产生对称算法使用的“会话密钥”（session key），再用公钥加密。因为会话密钥很短，通常只有 16 字节或 32 字节，所以慢一点也无所谓。对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;完整性&lt;/span&gt;&lt;/h5&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;摘要算法&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现完整性的手段主要是&lt;code&gt;摘要算法（Digest Algorithm）&lt;/code&gt;，也就是常说的&lt;code&gt;散列函数、哈希函数（Hash Function）&lt;/code&gt;。可以把摘要算法近似地理解成一种特殊的加密算法，它能够把任意长度的数据加密成固定长度、而且独一无二的“摘要”字符串，且不能从压缩后的密文中推导出原文。&lt;code&gt;MD5（Message-Digest 5）、SHA-1（Secure Hash Algorithm 1&lt;/code&gt;就是最常用的两个摘要算法，能够生成 16 字节和 20 字节长度的数字摘要。但这两个算法的安全强度比较低，不够安全，在 TLS 里已经被禁止使用了。目前TLS使用的是&lt;code&gt;SLA-2&lt;/code&gt;。摘要算法保证了“数字摘要”和原文是完全等价的。所以，我们只要在原文后附上它的摘要，就能够保证数据的&lt;code&gt;完整性&lt;/code&gt;。不过摘要算法不具有机密性，所以真正的完整性还是需要建立在机密性之上。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;身份认证&amp;amp;不可否认&lt;/span&gt;&lt;/h5&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数字签名&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数字签名的原理其实很简单，就是把公钥私钥的用法反过来，之前是公钥加密、私钥解密，现在是私钥加密、公钥解密。但又因为非对称加密效率太低，所以私钥只加密原文的摘要，这样运算量就小的多，而且得到的数字签名也很小，方便保管和传输。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数字证书和CA&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为&lt;code&gt;公钥&lt;/code&gt;是任何人都可以发布的，所以我们需要引入第三方来保证&lt;code&gt;公钥&lt;/code&gt;的可信度，这个“第三方”就是我们常说的 CA（Certificate Authority，证书认证机构），CA 对公钥的签名认证也是有格式的，要包含&lt;code&gt;公钥&lt;/code&gt;的序列号、用途、颁发者、有效时间等等，把这些打成一个包再签名，完整地证明公钥关联的各种信息，形成“数字证书”（Certificate）。小一点的 CA 可以让大 CA 签名认证，但链条的最后，也就是 Root CA，就只能自己证明自己了，这个就叫“自签名证书”（Self-Signed Certificate）或者“根证书”（Root Certificate）。你必须相信，否则整个证书信任链就走不下去了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TLS1.2建立连接的过程&lt;/span&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TLS协议的组成&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;记录协议（Record Protocol）:&lt;/code&gt; 规定了 TLS 收发数据的基本单位：记录（record）。所有的其他子协议都需要通过记录协议发出，但多个记录数据可以在一个 TCP 包里一次性发出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;警报协议（Alert Protocol）:&lt;/code&gt; 的职责是向对方发出警报信息，有点像是 HTTP 协议里的状态码。比如，protocol_version 就是不支持旧版本，bad_certificate 就是证书有问题，收到警报后另一方可以选择继续，也可以立即终止连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;握手协议（Handshake Protocol）:&lt;/code&gt; 是 TLS 里最复杂的子协议，要比 TCP 的 SYN/ACK 复杂的多，浏览器和服务器会在握手过程中协商 TLS 版本号、随机数、密码套件等信息，然后交换证书和密钥参数，最终双方协商得到会话密钥，用于后续的混合加密系统。&lt;br/&gt;&lt;code&gt;变更密码规范协议（Change Cipher Spec Protocol）:&lt;/code&gt; 是一个“通知”，告诉对方，后续的数据都将使用加密保护。那么反过来，在它之前，数据都是明文的。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基于&lt;code&gt;ECDHE&lt;/code&gt; 的 &lt;code&gt;TLS1.2&lt;/code&gt; 握手&lt;/span&gt;&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.6045272969374167&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtSIOJT5f6dlCFYe3JGFSswULXvTm6BWVPC7rYGic8icL4GGHyoiajEydAQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;751&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TLS1.3&lt;/span&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.593915343915344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOt7wOMlsgaao2XuZjBJibh89kD8iaKQRRfmGjmUicg7GP39OyW3sibOlT9HA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;756&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;9. HTTP/2&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP1.X引入了Cookie解决了无状态的问题、通过引入TLS/SSL解决了明文传输不安全的问题。那接下来HTTP2的发力点就放在性能层面了。Google首先发明了SPDY协议，随后互联网标准化组织IETF以SPDY 为基础发布了HTTP2。HTTP2对于性能上的优化主要由以下几点出发：1. 包头过大 2. 队头阻塞 。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;性能优化&lt;/span&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;包头过大(头部压缩)&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在HTTP1.x时期，很多请求请求体和响应体的大小远远小于头部字段的大小，比如GET请求，301/302/204响应。而且很多头部字段是重复的，HTTP/1.x浪费了大量的带宽在传输重复的头字段上，所以，HTTP/2 把“头部压缩”作为性能改进的一个重点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HPACK&lt;/code&gt;算法是专门为压缩 HTTP 头部定制的算法，与 gzip、zlib 等压缩算法不同，它是一个“有状态”的算法，需要客户端和服务器各自维护一份“索引表”，压缩和解压缩就是查表和更新表的操作。为了方便管理和压缩，HTTP/2 废除了原有的起始行概念，把起始行里面的请求方法、URI、状态码等统一转换成了头字段的形式, 为了与“真头字段”区分开来，这些“伪头字段”会在名字前加一个“:”，比如“:authority” “:method” “:status”，分别表示的是域名、请求方法和状态码。废除了起始行里的版本号和错误原因短语。用索引号表示重复的字符串，还釆用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面的这个表格列出了“静态表”的一部分，这样只要查表就可以知道字段名和对应的值，比如数字“2”代表“GET”，数字“8”代表状态码 200。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6295971978984238&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtGqQxLDnAVZsVq1ZlNgKkP3hC7Libe7ez0LtXxEAy6ib3Dcd5O4zRWd3g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1142&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新增的头字段或者值保存在&lt;code&gt;动态表（Dynamic Table）&lt;/code&gt;里，它添加在静态表后面，结构相同，但会在编码解码的时候随时更新。比如说，第一次发送请求时的“user-agent”字段长是一百多个字节，用哈夫曼压缩编码发送之后，客户端和服务器都更新自己的动态表，添加一个新的索引号“65”。那么下一次发送的时候就不用再重复发那么多字节了，只要用一个字节发送编号就好。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3126094570928196&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtqjX0ZNCwaZXZ5kZ7tHPniasgUMicibpQGNeM6JLHgEmkucjjlBemnXHKg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1142&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;队头阻塞(二进制分帧、流式传输)&lt;/span&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于&lt;code&gt;请求-应答&lt;/code&gt;模式的http协议存在队头阻塞的问题，前面提到的&lt;code&gt;并发连接&lt;/code&gt;和&lt;code&gt;域名分片&lt;/code&gt;都是牺牲数量解决质量的思路。而HTTP2采用了二进制分帧➕流式传输的方式来解决这个问题。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二进制分帧&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;把原来的&lt;code&gt;Header+Body&lt;/code&gt;的消息“打散”为数个小片的二进制&lt;code&gt;“帧”（Frame）&lt;/code&gt;，用&lt;code&gt;HEADER&lt;/code&gt;帧存放头数据、&lt;code&gt;DATA&lt;/code&gt;帧存放实体数据。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;流式传输&lt;/span&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HTTP/2&lt;/code&gt;还定义了一个&lt;code&gt;“流”（Stream）&lt;/code&gt;的概念，它是二进制帧的双向传输序列，同一个消息往返的帧会分配一个唯一的流 ID。你可以把它想象成是一个虚拟的“数据流”，在里面流动的是一串有先后顺序的数据帧，这些数据帧按照次序组装起来就是&lt;code&gt;HTTP/1&lt;/code&gt;里的请求报文和响应报文。&lt;code&gt;HTTP/2&lt;/code&gt; 可以在一个 TCP 连接上用&lt;code&gt;“流”&lt;/code&gt;同时发送多个&lt;code&gt;“碎片化”&lt;/code&gt;的消息，这就是常说的&lt;code&gt;“多路复用”（ Multiplexing）&lt;/code&gt;,多个往返通信都复用一个连接来处理。在&lt;code&gt;“流”&lt;/code&gt;的层面上看，消息是一些有序的&lt;code&gt;“帧”&lt;/code&gt;序列，而在&lt;code&gt;“连接”&lt;/code&gt;的层面上看，消息却是乱序收发的&lt;code&gt;“帧”&lt;/code&gt;。多个&lt;code&gt;请求 / 响应之&lt;/code&gt;间没有了顺序关系，不需要排队等待，也就不会再出现“队头阻塞”问题，降低了延迟，大幅度提高了连接的利用率。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.548&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtvnISgI9nmcib9kqzvEuDuU6wDxkibUH2HfZjrWtG1bgHSw55zwmaiaVCg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;帧开头是&lt;code&gt;帧长度&lt;/code&gt;(不包含报文头的9个字节)，默认上限是2^14，最大是2^24，也就是说 HTTP/2的帧通常不超过16K，最大是 16M。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面的一个字节是&lt;code&gt;帧类型&lt;/code&gt;，大致可以分成&lt;code&gt;数据帧&lt;/code&gt;和&lt;code&gt;控制帧&lt;/code&gt;两类，&lt;code&gt;HEADERS帧&lt;/code&gt;和&lt;code&gt;DATA帧&lt;/code&gt;属于&lt;code&gt;数据帧&lt;/code&gt;，存放的是 HTTP 报文，而 &lt;code&gt;SETTINGS、PING、PRIORITY &lt;/code&gt;等则是用来管理流的控制帧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第 5 个字节是非常重要的&lt;code&gt;帧标志信息&lt;/code&gt;，可以保存 8 个标志位，携带简单的控制信息。常用的标志位有 END_HEADERS 表示头数据结束，END_STREAM 表示单方向数据发送结束（即 EOS，End of Stream）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;报文头里最后 4 个字节是&lt;code&gt;流标识符&lt;/code&gt;，也就是帧所属的&lt;code&gt;“流”&lt;/code&gt;，接收方使用它就可以从乱序的帧里识别出具有相同流 ID 的帧序列&lt;code&gt;(在 HTTP/2 连接上，虽然帧是乱序收发的，但只要它们都拥有相同的流 ID，就都属于一个流，而且在这个流里帧不是无序的，而是有着严格的先后顺序。)&lt;/code&gt;，按顺序组装起来就实现了虚拟的“流”。流标识符虽然有 4 个字节，但最高位被保留不用，所以只有 31 位可以使用，也就是说，流标识符的上限是 2^31，大约是 21 亿。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;code&gt;流&lt;/code&gt;的特点&lt;/span&gt;&lt;/h6&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;流是可并发的，一个 HTTP/2 连接上可以同时发出多个流传输数据，也就是并发多请求，实现“多路复用”；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端和服务器都可以创建流，双方互不干扰；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流是双向的，一个流里面客户端和服务器都可以发送或接收数据帧，也就是一个“请求 - 应答”来回；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流之间没有固定关系，彼此独立，但流内部的帧是有严格顺序的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流可以设置优先级，让服务器优先处理，比如先传 HTML/CSS，后传图片，优化用户体验；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流 ID 不能重用，只能顺序递增，客户端发起的 ID 是奇数，服务器端发起的 ID 是偶数；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在流上发送“RST_STREAM”帧可以随时终止流，取消接收或发送；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第 0 号流比较特殊，不能关闭，也不能发送数据帧，只能发送控制帧，用于流量控制。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;协议栈&lt;/span&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4479638009049774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtNI4JqKLIAgz6ldpbpNAdM6yXyTxYen5OWR68tticLkribexFlWhgZiazQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;884&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;10.HTTP/3&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 虽然使用&lt;code&gt;“帧”&lt;/code&gt;、&lt;code&gt;“流”&lt;/code&gt;、&lt;code&gt;“多路复用”&lt;/code&gt;，没有了&lt;code&gt;“队头阻塞”&lt;/code&gt;，但这些手段都是在应用层里，而在 TCP 协议里，还是会发生“队头阻塞”。Google 在推 &lt;code&gt;SPDY&lt;/code&gt; 的时候就已经意识到了这个问题，于是就又发明了一个新的&lt;code&gt;QUIC&lt;/code&gt;协议，让 &lt;code&gt;HTTP&lt;/code&gt; 跑在 &lt;code&gt;QUIC&lt;/code&gt; 上而不是 &lt;code&gt;TCP&lt;/code&gt; 上。而这个&lt;code&gt;HTTP over QUIC&lt;/code&gt;就是 &lt;code&gt;HTTP&lt;/code&gt; 协议的下一个大版本，&lt;code&gt;HTTP/3&lt;/code&gt;。它在 HTTP/2 的基础上又实现了质的飞跃，真正完美地解决了队头阻塞问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3316582914572864&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtsEvpcHKiaTo5WaUOIywz52qaBfXeLD1SgDSUwv1sHdghBamsenduHoA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1194&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;QUICK&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;QUIC 基于 UDP，而 UDP 是“无连接”的，不需要“握手”和“挥手”，所以天生就要比 TCP 快。QUIC 全面采用加密通信,它使用自己的帧“接管”了 TLS 里的“记录”，握手消息、警报消息都不使用 TLS 记录，直接封装成 QUIC 的帧发送，省掉了一次开销。QUIC 的基本数据传输单位是包（packet）和帧（frame），一个包由多个帧组成，包面向的是“连接”，帧面向的是“流”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;QUIC 使用不透明的“连接 ID”来标记通信的两个端点，客户端和服务器可以自行选择一组 ID 来标记自己，这样就解除了 TCP 里连接对“IP 地址 + 端口”（即常说的四元组）的强绑定，支持“连接迁移”（Connection Migration）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5780113177041228&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtib3ZFQZdicrl98vibpp8LicHm2EiasQKDTfmVniayn4Ggcc7aHkNuicNeQWHA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1237&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HTTP/3&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 QUIC 本身就已经支持了加密、流和多路复用，所以HTTP/3不需要定义流，而是直接使用 QUIC 的流。由于流管理被“下放”到了 QUIC，所以 HTTP/3 里帧的结构也变简单了。帧头只有两个字段：类型和长度，而且同样都采用变长编码，最小只需要两个字节。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34072900158478603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvatsNeWhfWKRNKrLlZ0ZQeOtXbhrETbWNU7sUicc3VL3diaR4ON0Mr24AcMx2uE9UoMFNbtN1Kn1mfcQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1262&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;点击观看腾讯程序员最新视频&lt;/span&gt;&lt;/figure&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAA7TwNNf6dcQAAAAstQy6ubaLX4KHWvLEZgBPErKM0UGVaBcSCzNPgMIuO-ci3dhOjpw-jw2oXmpOR&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7Ym3K77SEULgkiaZGaXFI82T4e0iayiaZicsV8abtzoWzV3icrT8bZwftm9lVjHsWtwFW23An6xuU8rTZ379ISrmL8SC4qufYPJkqibsqg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SZ&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdWqEJQ41YNNDlQoEcHG0TiaKB4lMFyhnuAZCOFE7Pzc7TJMAFhkFMh0rnf2yskAiacR4&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/I7awtksbibjQe7RZAy84xESOBAfIZ8xQ9ApXt4uTe8po/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;搜狗输入法“声文互转”功能让听障人士“看”见声音。&quot; data-nonceid=&quot;13451393697886330981&quot; data-type=&quot;video&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>