<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bba462c1fa711f3c7fd022ffa93ae4f2</guid>
<title>实战 Go：怎样快速实现一个极简任务调度系统</title>
<link>https://toutiao.io/k/3c56bkv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;引子&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任务调度（Task Scheduling）是很多软件系统中的重要组成部分，字面上的意思是按照一定要求分配运行一些通常时间较长的脚本或程序。在爬虫管理平台 &lt;span&gt;Crawlab&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 中，任务调度是其中的核心模块，相信不少朋友会好奇如何编写一个任务调度系统。本篇文章会教读者用 Go 语言编写一个非常简单的任务调度系统。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们首先理清一下思路，开发最小化任务调度器需要什么。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;交互界面（API）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定时任务（Cron）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;任务执行（Execute Tasks）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个流程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4867886178861789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vh4PtSfBxFP0gsrP7suvhCOg2gCWJE8hSTWwhOB7kAbicLvj2JhEMTtq78cPUBCBlyfwJ6bjoF33wCRDRKYc1QQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1968&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20221003094216157&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通过 API 创建定时任务，执行器根据定时任务标准定期执行脚本。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实战&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;交互界面&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们来搭个架子。在项目目录下创建一个 &lt;code&gt;main.go&lt;/code&gt; 文件，并输入以下内容。其中 &lt;code&gt;gin&lt;/code&gt; 是非常流行的 Go 语言 API 引擎。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// api engine&lt;/span&gt;&lt;br/&gt; app := gin.New()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// api routes&lt;/span&gt;&lt;br/&gt; app.GET(&lt;span&gt;&quot;/jobs&quot;&lt;/span&gt;, GetJobs)&lt;br/&gt; app.POST(&lt;span&gt;&quot;/jobs&quot;&lt;/span&gt;, AddJob)&lt;br/&gt; app.DELETE(&lt;span&gt;&quot;/jobs&quot;&lt;/span&gt;, DeleteJob)&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// run api on port 9092&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err := app.Run(&lt;span&gt;&quot;:9092&quot;&lt;/span&gt;); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  _, err = fmt.Fprintln(os.Stderr, err)&lt;br/&gt;  os.Exit(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后添加 &lt;code&gt;api.go&lt;/code&gt; 文件，输入以下内容，注意，这里没有任何代码实现，只是加入了占位区域。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;GetJobs&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; implementation here&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;AddJob&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; implementation here&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;DeleteJob&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; implementation here&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;定时任务&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是任务调度的核心，定时任务。这里我们使用 &lt;span&gt;robfig/cron&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，Go 语言比较流行的定时任务库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在创建 &lt;code&gt;cron.go&lt;/code&gt; 文件，输入以下内容。其中 &lt;code&gt;Cron&lt;/code&gt; 就是 &lt;code&gt;robfig/cron&lt;/code&gt; 库中的 &lt;code&gt;Cron&lt;/code&gt; 类生成的实例。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;github.com/robfig/cron&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// start to run&lt;/span&gt;&lt;br/&gt; Cron.Run()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Cron create a new cron.Cron instance&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; Cron = cron.New()&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在创建好了主要定时任务实例，就可以将核心逻辑添加在刚才的 API 占位区域了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样是 &lt;code&gt;api.go&lt;/code&gt; ，将核心代码添加进来。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/robfig/cron/v3&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;strconv&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;GetJobs&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// return a list of cron job entries&lt;/span&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; results []&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; _, e := &lt;span&gt;range&lt;/span&gt; Cron.Entries() {&lt;br/&gt;  results = &lt;span&gt;append&lt;/span&gt;(results, &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}{&lt;br/&gt;   &lt;span&gt;&quot;id&quot;&lt;/span&gt;:   e.ID,&lt;br/&gt;   &lt;span&gt;&quot;next&quot;&lt;/span&gt;: e.Next,&lt;br/&gt;  })&lt;br/&gt; }&lt;br/&gt; c.JSON(http.StatusOK, Cron.Entries())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;AddJob&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// post JSON payload&lt;/span&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; payload &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;  Cron &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;cron&quot;`&lt;/span&gt;&lt;br/&gt;  Exec &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;exec&quot;`&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err := c.ShouldBindJSON(&amp;amp;payload); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  c.AbortWithStatus(http.StatusBadRequest)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// add cron job&lt;/span&gt;&lt;br/&gt; eid, err := Cron.AddFunc(payload.Cron, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; implementation here&lt;/span&gt;&lt;br/&gt; })&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  c.AbortWithStatusJSON(http.StatusInternalServerError, &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}{&lt;br/&gt;   &lt;span&gt;&quot;error&quot;&lt;/span&gt;: err.Error(),&lt;br/&gt;  })&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; c.AbortWithStatusJSON(http.StatusOK, &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}{&lt;br/&gt;  &lt;span&gt;&quot;id&quot;&lt;/span&gt;: eid,&lt;br/&gt; })&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;DeleteJob&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// cron job entry id&lt;/span&gt;&lt;br/&gt; id := c.Param(&lt;span&gt;&quot;id&quot;&lt;/span&gt;)&lt;br/&gt; eid, err := strconv.Atoi(id)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  c.AbortWithStatus(http.StatusBadRequest)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// remove cron job&lt;/span&gt;&lt;br/&gt; Cron.Remove(cron.EntryID(eid))&lt;br/&gt;&lt;br/&gt; c.AbortWithStatus(http.StatusOK)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这段代码中，我们实现了大部分逻辑，只在 &lt;code&gt;AddJob&lt;/code&gt; 的 &lt;code&gt;Cron.AddFunc&lt;/code&gt; 中第二个参数里，剩下最后一部分执行任务的代码。下面将来实现一下。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;任务执行&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在需要添加任务执行的代码逻辑，咱们创建 &lt;code&gt;exec.go&lt;/code&gt; 文件，输入以下内容。这里我们用到了 Go 语言内置的 shell 运行管理库 &lt;code&gt;os/exec&lt;/code&gt;，可以执行任何 shell 命令。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;os/exec&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;strings&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ExecuteTask&lt;/span&gt;&lt;span&gt;(execCmd &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// execute command string parts, delimited by space&lt;/span&gt;&lt;br/&gt; execParts := strings.Split(execCmd, &lt;span&gt;&quot; &quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// executable name&lt;/span&gt;&lt;br/&gt; execName := execParts[&lt;span&gt;0&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// execute command parameters&lt;/span&gt;&lt;br/&gt; execParams := strings.Join(execParts[&lt;span&gt;1&lt;/span&gt;:], &lt;span&gt;&quot; &quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// execute command instance&lt;/span&gt;&lt;br/&gt; cmd := exec.Command(execName, execParams)&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// run execute command instance&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err := cmd.Run(); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  _, err = fmt.Fprintln(os.Stderr, err)&lt;br/&gt;  fmt.Println(err.Error())&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，现在我们将这部分执行代码逻辑放到之前的占位区域中。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;...&lt;br/&gt; &lt;span&gt;// add cron job&lt;/span&gt;&lt;br/&gt; eid, _ := Cron.AddFunc(payload.Cron, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  ExecuteTask(payload.Exec)&lt;br/&gt; })&lt;br/&gt;...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;代码效果&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，大功告成！现在我们可以试试运行这个极简的任务调度器了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在命令行中敲入 &lt;code&gt;go run .&lt;/code&gt;，API 引擎就启动起来了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[GIN-debug] [WARNING] Running &lt;span&gt;in&lt;/span&gt; &lt;span&gt;&quot;debug&quot;&lt;/span&gt; mode. Switch to &lt;span&gt;&quot;release&quot;&lt;/span&gt; mode &lt;span&gt;in&lt;/span&gt; production.&lt;br/&gt; - using env:   &lt;span&gt;export&lt;/span&gt; GIN_MODE=release&lt;br/&gt; - using code:  gin.SetMode(gin.ReleaseMode)&lt;br/&gt;&lt;br/&gt;[GIN-debug] GET    /&lt;span&gt;jobs&lt;/span&gt;                     --&amp;gt; main.GetJobs (1 handlers)&lt;br/&gt;[GIN-debug] POST   /&lt;span&gt;jobs&lt;/span&gt;                     --&amp;gt; main.AddJob (1 handlers)&lt;br/&gt;[GIN-debug] DELETE /&lt;span&gt;jobs&lt;/span&gt;/:id                 --&amp;gt; main.DeleteJob (1 handlers)&lt;br/&gt;[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to &lt;span&gt;set&lt;/span&gt; a value.&lt;br/&gt;Please check https://pkg.go.dev/github.com/gin-gonic/gin&lt;span&gt;#readme-don-t-trust-all-proxies for details.&lt;/span&gt;&lt;br/&gt;[GIN-debug] Listening and serving HTTP on :9092&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在打开另一个命令行窗口，输入 &lt;code&gt;curl -X POST -d &#x27;{&quot;cron&quot;:&quot;* * * * *&quot;,&quot;exec&quot;:&quot;touch /tmp/hello.txt&quot;}&#x27; http://localhost:9092/jobs&lt;/code&gt;，会得到如下返回结果。表示已经生成了相应的定时任务，任务 ID 为 1，每分钟跑一次，会更新一次 &lt;code&gt;/tmp/hello.txt&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;span&gt;&quot;id&quot;&lt;/span&gt;:1}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个命令行窗口中输入 &lt;code&gt;curl http://localhost:9092/jobs&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[{&lt;span&gt;&quot;id&quot;&lt;/span&gt;:1,&lt;span&gt;&quot;next&quot;&lt;/span&gt;:&lt;span&gt;&quot;2022-10-03T12:46:00+08:00&quot;&lt;/span&gt;}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这表示下一次执行是 1 分钟之后。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等待一分钟，执行 &lt;code&gt;ls -l /tmp/hello.txt&lt;/code&gt;，得到如下结果。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;-rw-r--r--  1 marvzhang  wheel     0B Oct  3 12:46 /tmp/hello.txt&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，执行成功了，大功告成！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章通过将 Go 语言几个库简单组合，就开发出了一个极简的任务调度系统。所用到的核心库:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;gin&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;robfig/cron&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;os/exec&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个代码示例仓库在 GitHub 上: https://github.com/tikazyq/codao-code/tree/main/2022-10/go-task-scheduler&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;社区&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果您对笔者的文章感兴趣，可以加笔者微信 tikazyq1 并注明 &quot;码之道&quot;，笔者会将你拉入 &quot;码之道&quot; 交流群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章英文版同步发布在 &lt;span&gt;dev.to&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;，技术分享无国界，欢迎大佬们指点。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;Crawlab: &lt;span&gt;https://github.com/crawlab-team/crawlab&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;robfig/cron: &lt;span&gt;https://github.com/robfig/cron&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;gin: &lt;span&gt;https://github.com/gin-gonic/gin&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;p&gt;robfig/cron: &lt;span&gt;https://github.com/robfig/cron&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5] &lt;/span&gt;&lt;p&gt;dev.to: &lt;span&gt;https://dev.to/tikazyq/golang-in-action-how-to-quickly-implement-a-minimal-task-scheduling-system-fel&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>67237a30f36fd71f38d51cec88cb9a4a</guid>
<title>SOC 识别和检测威胁信息</title>
<link>https://toutiao.io/k/rjt9e0j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg5MjgxNTQ1MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/lwEekEbzmGxGBnwuMt8Pl2JEDeIEZAQicLwfAsiak240e0dn14vAtj30QuZNZp0IMULxianDT9Yd40RXSrbdKQfWg/0?wx_fmt=png&quot; data-nickname=&quot;安全架构&quot; data-alias=&quot;&quot; data-signature=&quot;安全技术、架构技术、编码开发等技术的分享&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;       &lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;16985&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;序言&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;
&lt;/section&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;序言&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;安全运营中心的主要功能就是检测安全威胁。安全工具，例如扩展检测和响应以及 SIEM，有助于识别可疑或恶意活动并向SOC分析师提出，然后由他们确定活动的有效性和严重性并定义适当的响应操作。这些任务的有效性决定了一个关键的安全指标：平均检测时间。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;应对威胁是SOC 的次要功能。响应通常通过事件后修复所需的平均时间或MTTR来衡量。MTTD 和 MTTR 之间的联系很明确：越快识别威胁，就能越快对其做出响应。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;威胁检测和响应计划最初应侧重于检测受监控系统和网络中的威胁。对这一步提供了全面的可见性、高级分析和能够扩展大量数据并因此改进 MTTD 指标的分析引擎。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然而，成熟的威胁检测和响应计划不仅仅是简单地识别威胁，而是跟踪特定于威胁背后参与者的指标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面谈谈 SOC 团队在跟踪威胁参与者时应考虑的一些因素。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;16985&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;如何理解威胁&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以下可被视为威胁：&lt;/p&gt;&lt;p&gt;漏洞利用：例如Log4Shell、SQL 注入和 CVE；&lt;/p&gt;&lt;p&gt;战术：例如侦察、横向移动和指挥与控制；&lt;/p&gt;&lt;p&gt;目标：即勒索软件、数据泄露和商业电子邮件泄露。&lt;/p&gt;&lt;p&gt;任何参与者都可以使用威胁，并且多个参与者依赖于相同的威胁。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;SOC团队应触发对上述威胁的检测，因为它们可能会影响组织的运营，并且通常没有合法用途。一旦建立了触发检测，威胁检测程序就可以开始超越威胁，了解使用这些威胁的参与者的周围特征和行为。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8471910112359551&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lwEekEbzmGwmDE4PdIKmDsRh7gZ48nCen86wJsQX7x69EWBJYIxShcB5SJENBdAHe6Pq4yJz3dAOottCLHqP4g/640?wx_fmt=png&amp;amp;random=0.5465905852101993&amp;amp;random=0.6846165265628292&amp;amp;random=0.7814793972979193&amp;amp;random=0.18162165014619625&quot; data-type=&quot;png&quot; data-w=&quot;445&quot;/&gt;&lt;/p&gt;&lt;p&gt;网络安全专业人员使用入侵分析钻石模型来演示攻击者如何利用基础设施中的功能来瞄准受害者。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;16985&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;如何理解威胁参与者&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;
&lt;/section&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;了解威胁参与者很复杂，但可以在威胁检测和响应方面产生巨大的回报。可以使用入侵分析的钻石模型跟踪和理解特定于参与者的指标。&lt;/p&gt;&lt;p&gt;它记录了四个不同的顶点：对手、能力、基础设施和受害者。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;对手&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;对手一词用于描述攻击者的独特特征。示例包括脚本和恶意软件中的加密钱包地址或商标。通过了解这些指标，安全响应者可以更有效地检测和响应威胁。指标需要适当加权，因为大多数是低保真度的调查触发器，不适合自动检测。然而，当智能应用时，它们可以帮助分析。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;能力&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;能力用于描述对手青睐的战术、技术和程序 (TTP)。通过了解受青睐的 TTP，SOC 知道下一步该去哪里进行检测以及攻击者的下一步行动可能是什么，从而使 SOC 能够使用有针对性的缓解或遏制响应行动来破坏攻击。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;能力顶点还着眼于对手的目标。通过了解妥协的预期最终目标，攻击者可以被击败——例如，通过关注勒索软件参与者的横向移动或如果数据泄露是目标，则审查数据库访问。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;全面的响应行动确保妥协得到整体解决，而不仅仅是被视为妥协的症状。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;基础设施&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;基础设施描述了用于传递 TTP 的内容，例如 IP 地址、电子邮件地址或域。通过了解基础设施，SOC 可以监控连接并捕获以前可能未知的零日漏洞或脚本。当执行威胁搜寻的分析师定期手动审查捕获的数据包时，监控基础设施已对零日漏洞和新兴漏洞提供早期预警。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;受害者&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;受害者是指目标对象或对象。通过了解攻击者所针对的组织或系统的类型，SOC 成员可以采取适当的预防措施为他们做好准备。&lt;/p&gt;&lt;p&gt;跟踪威胁背后的参与者是一项艰巨的工作，只能由希望增强其威胁检测和响应能力的成熟 SOC 执行。如果操作正确，SOC 可以显着降低关键的 MTTD 和 MTTR 指标，甚至可以从一开始就防止发生妥协。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;16980&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;结束&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;/section&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f2e707227cab81da272c250a0451c323</guid>
<title>TCP拥塞控制详解 | 3. 设计空间</title>
<link>https://toutiao.io/k/whwhaf8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;网络传输问题本质上是对网络资源的共享和复用问题，因此拥塞控制是网络工程领域的核心问题之一，并且随着互联网和数据中心流量的爆炸式增长，相关算法和机制出现了很多创新，本系列是免费电子书《TCP Congestion Control: A Systems Approach》的中文版，完整介绍了拥塞控制的概念、原理、算法和实现方式。原文: &lt;span&gt;TCP Congestion Control: A Systems Approach&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5908273381294964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRfmceTx4QGZLd80PmkUKuBhA64icOSSLythn1aCY3a83ibvvU0IwRQY1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1112&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;第3章 设计空间&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了TCP/IP的架构基础，就可以准备探索解决拥塞的设计空间了。但要做到这一点，首先需要退一步考虑一些更宏观的问题。互联网是计算、存储和通信资源的复杂组合，数百万用户共享这些资源，主要问题在于如何将这些资源(特别是交换容量、缓冲区空间和链路带宽)分配给端到端数据流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于互联网最初采用了尽力而为服务模式，用户(或者更准确的说，为用户服务的TCP)可以自由向网络发送尽可能多的数据包，因此互联网最终也必然会面临&lt;em&gt;公地悲剧(tragedy of the commons)&lt;/em&gt; 。随着用户开始体验到拥塞崩溃，自然反应是试图加上更多控制。因此，术语&lt;em&gt;拥塞控制(congestion control)&lt;/em&gt; 可以被视为一种分配资源的隐式机制。当控制机制发现资源变得稀缺时，就会做出反应，努力缓解拥堵。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在网络服务模型中，一种明显的替代方案是将资源显式的分配给数据流。例如，应用程序可以在发送流量之前显式请求资源。IP的尽力而为假设意味着，当拥塞成为严重问题时，这种方法并不能够立即奏效。随后的工作是将更明确的资源分配机制用来改造互联网的尽力而为模型，包括提供QoS保证的能力。通过这种角度思考应对互联网拥堵的方式很有好处。本书的第一部分探讨了构成控制机制基础的一系列设计决策，然后我们定义了定量评估和比较不同拥塞控制机制的标准。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 实现选择&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们首先介绍拥塞控制机制面临的四种实现选择，以及TCP/IP决策背后的设计原理。考虑到所处环境，有些决定是&quot;显而易见的&quot;，但因为互联网的持续发展造成的环境变化，我们需要谨慎考虑所有这些决定。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1.1 集中式和分布式&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原则上，第一个设计决策是网络的资源分配是集中式还是分布式的。在实践中，互联网的规模以及所连接的组织的自主权，决定了应该采取分布式方法。事实上正如Dave Clark所阐述的那样，分布式资源管理是互联网设计的明确目标，但承认这一默认决定之所以重要，有两个原因。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;D. Clark, &lt;span&gt;The Design Philosophy of the DARPA Internet Protocols&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;. ACM SIGCOMM, 1988.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，虽然互联网控制拥塞的方法是分布在数百万主机和路由器上的，但可以认为它们将合作尝试实现全局最优解决方案的。从这个角度来看，存在一个共享的目标函数，所有组件都实现某个分布式算法来优化该函数。本书所描述的各种机制只是简单定义了不同的目标函数，其中一个长久的挑战是，当部署了多种机制时，如何协调目标函数之间的竞争。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，虽然集中式方法对整个互联网来说并不实用，但可以适用于有限的领域。例如，逻辑上集中的控制器可以收集有关网络链路和交换机状态信息，计算全局最优资源分配，然后建议(甚至监督)终端主机所提供的可用容量。这种方法当然会受到集中式控制器响应网络变化的时间尺度的限制，但当前已经成功应用于B4和SWAN等流量工程机制做出的粗粒度分配决策。现在还没有办法明确的在粗粒度的流量工程决策和细粒度的拥塞控制决策之间划一条线，但最好对所有可能的选择保持开放的心态。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;S. Jain, et al. &lt;span&gt;B4: Experience with a Globally-Deployed Software Defined WAN&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;. ACM SIGCOMM, August 2013.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集中式控制在数据中心也得到了有效应用，这对于拥塞控制来说是一个有趣的环境。首先，数据中心的RTT非常低(不考虑进出数据中心的流，只考虑数据中心服务器之间的通信)。其次，很多情况下数据中心可以被视为一个新领域，这提高了尝试新方法的可能性，这些新方法不必与现有算法平等共存。由麻省理工学院和Facebook研究人员合作开发的Fastpass就是这种集中式方式的很好的例子。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;J. Perry, et al. &lt;span&gt;Fastpass: A Centralized “Zero-Queue” Datacenter Network&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;. ACM SIGCOMM, August 2014.&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1.2 以路由器为中心还是以主机为中心(Router-Centric versus Host-Centric)&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给定某个分布式资源分配方法，下一个问题是，应该在网络内部(即在路由器或交换机上)实现该机制，还是在网络边缘(即在主机中作为传输协议的一部分)实现该机制。这不是严格意义上的非此即彼的情况，实践中这两个地方都需要涉及，真正的问题是哪个组件需要承担主要责任。路由器总是负责决定哪些包要转发，哪些包要丢弃。但是，在路由器介入终端主机的决策并学习如何做出决定时，其介入的程度有很多不同的选项。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这些选项的一端，路由器允许为主机预留容量，确保每个流的数据包得到相应的传递。路由器可以利用类似公平队列这样的机制实现某个信令协议，仅在有足够容量时接受新的流，并监督主机确保创建的流不超过资源预留范围。这就是基于预留的QoS保证机制，具体细节超出了本书范围。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一端是以主机为中心的方法。路由器对可用容量不做任何保证，也不提供任何明确的反馈(当缓冲区满时，会默默的将包丢弃)，而观察网络状况(例如，有多少包成功通过了网络)并相应调整其行为是主机的责任。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在两个极端的中间，路由器可以采取更主动的行动来协助终端主机完成工作，但不是通过预留缓冲区空间的方式，而是需要路由器在缓冲区满时向终端主机发送反馈。我们将在第6章介绍某些形式的&lt;em&gt;主动队列管理(AQM, Active Queue Management)&lt;/em&gt; ，但在接下来的两章中介绍的以主机为中心的机制假设路由器在缓冲区满时只是静默丢包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过去，在传输层实现了以主机为中心的方法，通常是TCP或其他一些模仿TCP算法的传输协议，比如DCCP(数据报拥塞控制协议, datagram congestion control protocol)或QUIC(一种相对较新的为基于HTTP的应用程序设计的传输协议)。然而，也可以在应用程序本身实现拥塞控制。&lt;em&gt;DASH(基于HTTP的动态自适应流, Dynamic Adaptive Streaming over HTTP)&lt;/em&gt; 就是一个例子，尽管严格来说应该被视为传输层(因为运行在TCP上)和应用层拥塞控制的组合。根据测量到的网络性能，向客户端传输视频的服务器在一系列不同的视频编码之间切换，从而改变向HTTP流发送数据的速率。实际上，TCP试图为流找到一个可持续的带宽，然后应用程序调整其发送速率，以充分利用该带宽，避免发送超过当前网络条件下所能支持的数据。拥塞控制的主要责任落在TCP上，但应用程序的目标是保持流水线满，同时保证良好的用户体验。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1.3 基于窗口 vs 基于速率(Window-Based versus Rate-Based)&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确定了以主机为中心的方法之后，下一个实现选择是基于窗口的机制还是基于速率的机制。TCP使用基于窗口的机制来实现流量控制，因此TCP拥塞控制的设计决策似乎显而易见。事实上，在第四章中介绍的拥塞控制机制是围绕计算&lt;em&gt;拥塞窗口(congestion window)&lt;/em&gt; 的算法展开的，其中发送方被较小的流量控制窗口或计算拥塞控制窗口所限制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但也可以计算出网络能够支持的数据包传输速率，并相应调整传输速度。观察到的速率只是在一段时间内(例如测量的RTT)交付的字节数。我们指出速率和窗口之间的这种二元性，是因为基于速率的方法更适合以某种平均速率生成数据的多媒体应用，而且至少需要某种最小吞吐量才能发挥作用。例如，某个视频编解码器可以生成平均速率为1 Mbps的视频，峰值速率为2 Mbps。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在支持不同QoS级别的基于预留的系统中，基于速率的方法是合理选择，但即使在像互联网这样的尽力而为网络中，也可以实现某种自适应的基于速率的拥塞控制机制，可以在应用程序需要调整传输速率时(例如通过调整其编解码器)通知应用程序。这是TCP友好速率控制(TFRC, TCP-friendly rate control)的核心思想，它将TCP避免拥塞的概念扩展到更自然的以特定速率(例如，视频编解码器在给定质量水平上产生的比特率)发送数据包的应用程序。TFRC通常与RTP一起使用，RTP是一种为实时应用设计的传输协议，我们将在第7章中看到这种机制的例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，TCP拥塞控制的最新进展之一是BBR(瓶颈带宽和RTT, Bottleneck Bandwidth and RTT)，它结合使用了基于窗口和基于速率的控制，从而尽量限制网络队列的堆积。我们将在第5章详细介绍这种方法。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1.4 基于控制 vs 基于回避(Control-based versus Avoidance-based)&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们要注意，最后的实现选择可能有些微妙。终端主机面临的挑战是，根据反馈和观察，计算网络中有多少可用容量，并相应调整其发送速率。有两种实现此目的的通用策略: 一种是积极的方法，故意以某个会产生丢包的速率发包，然后对其进行响应；另一种是保守的方法，尝试检测队列开始出现堆积的时间点，并在溢出之前降低速率。我们将第一种类型的机制称为&lt;em&gt;基于控制(control-based)&lt;/em&gt; 的机制，第二种类型的机制称为&lt;em&gt;基于回避(avoidance-based)&lt;/em&gt; 的机制。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;R. Jain and K. K. Ramakrishnan. &lt;span&gt;Congestion Avoidance in Computer Networks with a Connectionless Network Layer: Concepts, Goals and Methodology&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;. Computer Networking Symposium, April 1988.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Raj Jain和K.K. Ramakrishnan Jain在1988年首次提出了这种区分，但经常被忽略，而人们通常只有&quot;拥塞控制&quot;这个术语来指代这两种方式。但我们认为这两者的区别非常重要，因此在适当的时候我们就会指出这一不同之处。不过，如果两者的区别对讨论不是很重要的话，我们还是只用&quot;拥塞控制&quot;这一个术语。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还需要注意，我们称为&quot;基于控制&quot;和&quot;基于回避&quot;的方法有时分别被称为&lt;em&gt;基于丢包(loss-based)&lt;/em&gt; 和&lt;em&gt;基于延迟(delay-based)&lt;/em&gt; 的方法，这是因为两者对拥塞窗口进行调整的信号不一样，前者在检测到丢包时调整窗口，后者在检测到延迟梯度变化时调整窗口。从这个角度来看，在接下来的四章中介绍的每一种算法都以某种方式有效改进了这些信号的保真度。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 评估标准&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在确定构建拥塞控制机制所需的设计决策集之后，下一个问题是，如何判断给定解决方案是好是坏。回想一下，第一章中我们提出了网络如何&lt;em&gt;有效(effectively)&lt;/em&gt; 、&lt;em&gt;公平(fairly)&lt;/em&gt; 分配其资源的问题，这表明至少有两种广泛的指标可以用来评估资源分配方案，接下来我们依次考虑。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.1 有效性(Effectiveness)&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑吞吐量和延迟这两个网络的主要指标是评估拥塞控制机制有效性的很好的起点。显然，我们想要尽可能高的吞吐量和尽可能低的延迟，但不幸的是，这两个目标可能彼此冲突。增加吞吐量的方法是允许尽可能多的数据包进入网络，从而将所有链路的利用率提高到100%。这样做是为了避免链路空闲从而影响吞吐量。这一策略的问题在于，增加网络中包的数量也会增加每个路由器上队列的长度，从而意味着数据包在网络中的延迟会增加，更糟的是，多余的包有可能会被丢弃。在网络中丢弃数据包不仅会影响延迟，而且会损害吞吐量，因为上游链路带宽被浪费在了一个无法成功发送到目的地的数据包上&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;[1] 我们有时使用术语&lt;em&gt;goodput&lt;/em&gt;而不是吞吐量来强调我们关心的是通过网络成功发送到接收方的数据，而不仅仅是发送方发送的数据。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;吞吐量与延迟的比率是评估资源分配方案有效性的通用指标。这个比率有时被称为系统&lt;em&gt;指数(power)&lt;/em&gt;:&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\mathsf{Power = Throughput / Delay}&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 11757.6 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;50&quot; d=&quot;M88 0V694H230Q347 693 370 692T410 686Q487 667 535 611T583 485Q583 409 527 348T379 276Q369 274 279 274H192V0H88ZM486 485Q486 523 471 551T432 593T391 612T357 621Q350 622 268 623H189V347H268Q350 348 357 349Q370 351 383 354T416 368T450 391T475 429T486 485Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(639, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 222Q28 323 95 391T244 460Q275 460 281 459Q364 445 417 377T471 219Q471 124 408 57T250 -10Q158 -10 93 57T28 222ZM377 230Q377 277 364 310T328 358T287 379T248 385Q233 385 219 382T186 369T155 342T132 297T122 230Q122 146 159 108T250 69H253Q263 69 274 70T305 81T339 106T365 154T377 230Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1139, 0)&quot;&gt;&lt;path data-c=&quot;77&quot; d=&quot;M14 444H105L108 434Q192 160 200 74V65L201 75Q206 144 282 399L296 444H381L399 381Q480 112 480 69L481 70Q481 113 562 386L580 444H668L534 1L483 0H432L429 10Q343 294 338 367L337 377Q336 375 336 370Q336 340 313 250T269 88T245 11L242 0H195L148 1L14 444Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1822, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 226Q28 329 91 395T235 461Q258 461 279 456T325 436T368 397T399 332T415 238V219H113V215Q113 163 151 114T248 65Q273 65 298 70T341 82T373 96T396 108L403 113Q403 106 406 76T409 38Q409 34 408 33T393 24Q325 -10 252 -10Q155 -10 92 59T28 226ZM340 289L338 297Q335 305 333 310T327 326T317 343T304 358T286 372T263 381T233 385Q212 385 193 376T162 353T140 325T127 301T123 289H340Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2266, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M171 389Q237 455 320 455H327V373H317Q262 369 220 336T167 248Q165 239 164 119V0H74V450H159V377L171 389Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2885.8, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 350Q56 363 70 370H707Q722 362 722 350Q722 339 708 331L390 330H72Q56 335 56 350ZM56 150Q56 165 72 170H708Q722 160 722 150Q722 138 707 130H70Q56 137 56 150Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3941.6, 0)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M36 608V688H644V608H518L392 609V0H288V609L162 608H36Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4622.6, 0)&quot;&gt;&lt;path data-c=&quot;68&quot; d=&quot;M163 395Q223 455 307 455Q417 455 438 354Q442 331 443 164V0H350V157Q349 315 348 320Q334 378 259 378H253Q224 378 204 358Q180 334 173 301T165 209Q165 198 165 172T166 129V0H73V694H163V395Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5139.6, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M171 389Q237 455 320 455H327V373H317Q262 369 220 336T167 248Q165 239 164 119V0H74V450H159V377L171 389Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5481.6, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 222Q28 323 95 391T244 460Q275 460 281 459Q364 445 417 377T471 219Q471 124 408 57T250 -10Q158 -10 93 57T28 222ZM377 230Q377 277 364 310T328 358T287 379T248 385Q233 385 219 382T186 369T155 342T132 297T122 230Q122 146 159 108T250 69H253Q263 69 274 70T305 81T339 106T365 154T377 230Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5981.6, 0)&quot;&gt;&lt;path data-c=&quot;75&quot; d=&quot;M353 39Q352 38 344 34T331 27T315 19T295 11T270 3T241 -3T207 -8T168 -10H162Q148 -10 137 -8T111 2T87 30T74 81Q73 89 73 268V444H166V268L167 92Q171 79 174 74T192 64T238 59Q317 59 344 116Q349 128 349 148T350 291V444H443V0H353V39Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6498.6, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M55 286Q55 357 105 406T224 455Q280 455 323 421L322 423L318 427Q318 428 339 434T396 448T465 455H471L478 416L485 377Q484 377 474 379T445 383T401 385Q397 385 391 385T381 384L362 383L357 387Q358 386 364 375T375 354T384 325T389 287Q389 217 340 168T221 119Q178 119 138 142Q133 145 131 143Q125 131 125 117Q125 82 155 72L227 71Q230 71 251 71T280 71T310 69T343 65T373 57T403 46T428 30T449 7Q471 -26 471 -62V-71Q471 -136 384 -178Q326 -206 250 -206Q159 -206 102 -172T30 -92Q28 -84 28 -68T31 -37T40 -12T52 7T64 21T75 31T82 38Q60 68 60 106Q60 145 80 180L86 189L80 199Q55 240 55 286ZM304 233T304 287T279 362T220 383Q189 383 165 361T140 287Q140 243 161 217T220 191Q253 191 278 212ZM250 -134Q298 -134 331 -122T375 -96T387 -69Q387 -21 306 -7Q288 -5 216 -5Q161 -5 153 -7Q146 -9 139 -13T122 -31T113 -66Q113 -75 113 -80T127 -97T166 -121Q203 -134 250 -134Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6998.6, 0)&quot;&gt;&lt;path data-c=&quot;68&quot; d=&quot;M163 395Q223 455 307 455Q417 455 438 354Q442 331 443 164V0H350V157Q349 315 348 320Q334 378 259 378H253Q224 378 204 358Q180 334 173 301T165 209Q165 198 165 172T166 129V0H73V694H163V395Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7515.6, 0)&quot;&gt;&lt;path data-c=&quot;70&quot; d=&quot;M166 404Q194 424 241 439T337 455H341Q410 455 451 370Q483 307 483 222Q483 128 433 59T306 -10Q282 -10 260 -5T222 7T194 21T176 33T168 38V-194H75V444H165V424L166 404ZM390 222Q390 287 354 331T266 376T177 340L168 332V118Q200 66 257 66Q313 66 351 112T390 222Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8032.6, 0)&quot;&gt;&lt;path data-c=&quot;75&quot; d=&quot;M353 39Q352 38 344 34T331 27T315 19T295 11T270 3T241 -3T207 -8T168 -10H162Q148 -10 137 -8T111 2T87 30T74 81Q73 89 73 268V444H166V268L167 92Q171 79 174 74T192 64T238 59Q317 59 344 116Q349 128 349 148T350 291V444H443V0H353V39Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8549.6, 0)&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M333 27Q333 24 314 16T257 -1T184 -10H172Q146 -10 128 14T105 58T99 91Q95 113 95 251V371H18V444H98V571H182V444H316V371H182V253Q183 128 189 104Q199 68 234 68Q277 72 314 98Q315 93 323 61T333 27Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(8910.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2F&quot; d=&quot;M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9410.6, 0)&quot;&gt;&lt;path data-c=&quot;44&quot; d=&quot;M88 0V694H237H258H316Q383 694 425 686T511 648Q578 604 622 525T666 343Q666 190 564 86Q494 18 400 3Q387 1 237 0H88ZM565 341Q565 409 546 463T495 550T429 600T359 621Q348 623 267 623H189V71H267Q272 71 286 71T310 70Q461 70 527 184Q565 251 565 341Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(10132.6, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 226Q28 329 91 395T235 461Q258 461 279 456T325 436T368 397T399 332T415 238V219H113V215Q113 163 151 114T248 65Q273 65 298 70T341 82T373 96T396 108L403 113Q403 106 406 76T409 38Q409 34 408 33T393 24Q325 -10 252 -10Q155 -10 92 59T28 226ZM340 289L338 297Q335 305 333 310T327 326T317 343T304 358T286 372T263 381T233 385Q212 385 193 376T162 353T140 325T127 301T123 289H340Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(10576.6, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M74 0V694H164V0H74Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(10815.6, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M236 387Q209 387 184 382T141 370T111 355T91 342T83 337L82 355Q80 373 79 393T77 417Q77 419 81 421Q86 423 91 426Q155 460 227 460H238Q319 460 368 400Q393 371 400 341T408 252Q408 240 408 207T407 152V0H317V39L306 32Q244 -10 159 -10H152Q109 -10 77 22Q38 61 38 126Q38 142 39 146Q55 199 130 223T295 252H314V277Q314 305 313 310Q308 342 287 364T236 387ZM303 186Q124 180 124 126Q124 105 144 86T208 66Q284 66 309 124Q314 137 314 166V186H303Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(11296.6, 0)&quot;&gt;&lt;path data-c=&quot;79&quot; d=&quot;M113 -204Q83 -204 63 -200L43 -197Q43 -196 40 -157T36 -117L48 -121Q79 -133 114 -133Q124 -133 130 -132T145 -121T163 -94Q169 -82 184 -42T200 1L188 29Q176 57 152 115T107 223T62 330T26 416L14 443Q14 444 61 444H109L122 411Q230 155 236 75L237 65V74Q245 161 348 424L356 444H401Q446 444 446 443L396 313Q345 183 293 49T236 -93Q191 -204 123 -204H113Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的目标是最大化这个比率，这个函数表示我们的系统可以支持多少负载，而负载由资源分配机制设置。图11给出了典型的指数曲线，理想情况下，资源分配机制将在曲线的峰值处运行。峰值左边，机制过于保守，也就是说，不允许发送足够多的数据包来保持链路繁忙。峰值右边，过多的包进入网络，要么(a)由于排队导致延迟增加(分母)，要么(b)由于丢包造成吞吐量(分子)实际上开始下降。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7674418604651163&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRtcXFwFquvDfbmHoVE3qibTtDVwZygn70ro2wHg0H5hzrwhOtz98tmtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;645&quot;/&gt;&lt;figcaption&gt;图11. 作为负载的函数的吞吐量与延迟比。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，我们需要关注的是，即使系统在沉重的负载下运行(图11中曲线的右端)，会发生什么情况。我们希望避免系统吞吐量接近于零的情况，目标是使机制保持&lt;em&gt;稳定&lt;/em&gt;，即使在网络负载过重时，数据包也能继续通过网络。如果某个机制在过载情况下不稳定，网络就会发生&lt;em&gt;拥塞崩溃(congestion collapse)&lt;/em&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，虽然&quot;持久队列&quot;和&quot;拥塞崩溃&quot;都需要避免，但对于网络遭受这两种情况的阈值没有精确的定义。它们都是关于算法行为的主观判断，总之，延迟和吞吐量是两个重要的性能指标。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.2 公平性(Fairness)&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网络资源的有效利用并不是判断资源分配方案的唯一标准，我们还必须考虑公平性问题。然而，当我们试图定义什么是公平的资源分配时，很快就会陷入了混乱。例如，基于预留的资源分配方案提供了一种显式的方法来创建受控的不公平，在这种方案中，我们可以通过预留使视频流通过某些链接接收1 Mbps的数据，而同一链接上的文件传输流只能接收10 Kbps的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面，在没有明确信息的情况下，如果几个流共享某个特定链路，我们希望每个流都能使用相同份额的带宽。这个定义假定公平的带宽份额意味着平等使用带宽。但是，即使没有预留，平等也不一定等于公平。我们是否也应该考虑路径的长度？例如图12所示，当一个四跳流与三个单跳流竞争时，什么才是公平？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23789764868603042&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRVytkd9dxYZE6ia0xds3S3LaXS4kstj6TOFwDd1Rl387LiazDHunL992Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;723&quot;/&gt;&lt;figcaption&gt;图12. 一个四跳流与三个一跳流竞争。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设最公平的情况是所有流都使用相同的带宽，网络研究员Raj Jain提出了一个可以用来量化拥塞控制机制公平性的度量指标。Jain公平指数的定义如下:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给定一组流吞吐量&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;(x_{1}, x_{2}, \ldots , x_{n})&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 6448 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(572, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1364.6, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(1809.2, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(572, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2784.8, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3229.4, 0)&quot;&gt;&lt;path data-c=&quot;2026&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4568.1, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(5012.8, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(572, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6059, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(以bps为单位衡量)，下面的函数为流分配一个公平索引:&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;f(x_{1}, x_{2}, \ldots ,x_{n}) = \frac{( \sum_{i=1}^{n} x_{i}&amp;#10;)^{2}} {n  \sum_{i=1}^{n} x_{i}^{2}}&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/WmwqjsSBsZLayX7sCuRAiaBhHmGtXd6tuGdmKWGSqPscXoZ2yw9TIn6cL9csnphfz7wnZppYwIGAseJMv0puXFickOMjeCM0icS/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公平指数的结果总是在0到1之间，其中1表示最大的公平。下面我们尝试理解一下这个指标背后的含义。考虑所有n个流每秒接收1个数据单位的吞吐量的情况，可以看到，本例中的公平指数为&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\frac{n^2}{n \times n} = 1&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -1509.9 4696 2206.9&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mfrac&quot;&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(929.4, 676)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(600, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(220, -686)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(822.2, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1822.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;rect x=&quot;120&quot; y=&quot;220&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3140.2, 0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(4196, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设一个流接收的吞吐量为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;1 + \Delta&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 2555.4 798&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(722.2, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1722.4, 0)&quot;&gt;&lt;path data-c=&quot;394&quot; d=&quot;M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，现在公平指数为&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\frac{((n - 1) + 1 + \Delta)^2}{n(n - 1 + (1 + \Delta)^2)}&amp;#10;= \frac{n^2 + 2n\Delta + \Delta^2}{n^2 + 2n\Delta + n\Delta^2}&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/WmwqjsSBsZLayX7sCuRAiaBhHmGtXd6tuEYJRpGLf7madqRI2OJYCJYTdIWNdYlMpBiaz6NQFykMxp5ibQDyuukBlQuAdpuKmDf/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，分母比分子大 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;(n-1)\Delta^2&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -833.9 4337 1083.9&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1211.2, 0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2211.4, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2711.4, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(3100.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;394&quot; d=&quot;M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(833, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，因此，无论奇数流的流量比其他所有流的流量多还是少(多或少 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\Delta&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 833 716&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;394&quot; d=&quot;M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 单位)，公平指数现在都降到了1以下。另一种需要考虑的简单情况是，&lt;em&gt;n&lt;/em&gt;个流中只有&lt;em&gt;k&lt;/em&gt;个流量的吞吐量相等，其余&lt;em&gt;n-k&lt;/em&gt;个用户的吞吐量为零，在这种情况下公平指数下降到&lt;em&gt;k/n&lt;/em&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;R. Jain, D. Chiu, and W. Hawe. &lt;span&gt;A Quantitative Measure of Fairness and Discrimination for Resource Allocation in Shared Computer Systems&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;. DEC Research Report TR-301, 1984.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下一节我们将重新讨论适用于新拥塞控制算法的公平概念，正如上面所提到的，它并不像最初看起来那样明确。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP友好速率控制(TFRC)也使用了公平的概念。TFRC使用TCP吞吐量方程(在第1.3节中讨论)来估计由实现TCP拥塞控制方案的流所获得的拥塞链路带宽份额，并将其设置为应用程序发送数据的目标速率。然后应用程序可以做出决定，帮助它达到目标速率。例如，视频流应用程序可能会在一组不同的编码质量级别中进行选择，以尝试在由TFRC确定的&quot;公平&quot;级别上保持平均速率。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3 比较分析&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;评估任何拥塞控制机制的第一步是单独衡量其性能，包括:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;流能够达到平均吞吐量(goodput)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流的平均端到端延迟体验。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;机制应该避免跨一系列运维场景的持久化队列。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;机制应该在一系列运维场景中都是稳定的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流获得公平的可用容量份额的程度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步是比较两种或更多机制。考虑到互联网的分布式特性，没有办法确保统一采用一种机制。比较吞吐量等量化指标很容易，问题是如何评估可能共存的、相互竞争网络资源的多种机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题不在于某个给定机制是否能够公平对待所有流，而在于机制A是否能公平对待机制B管理的流。如果机制A能够提供比B更好的吞吐量，但也许是通过更积极的方式来做到这一点，因此，A会从B窃取带宽，那么A的改进就不是公平的，效果可能会大打折扣。很明显，互联网的高度分散的拥塞控制方法是有效的，大量的流以合作的方式响应拥塞，为更激进的流打开了大门，牺牲了那些实施了不那么激进的算法的流的性能。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;R. Ware, et al. &lt;span&gt;Beyond Jain’s Fairness Index: Setting the Bar for the Deployment of Congestion Control Algorithms&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;. ACM SIGCOMM HotNets. November 2019.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在过去30年里，这样的争论已经发生了很多次，这为部署新算法设置了很高的门槛。即使新算法的全球部署会产生净积极效果，增量部署(这是唯一的实际选择)仍然可能会对使用现有算法的流产生负面影响，导致大家不愿部署新方法。但正如Ranysha Ware及其同事所指出的那样，这种分析存在三个问题:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;理想驱动的目标(Ideal-Driven Goalposting):&lt;/strong&gt; 基于公平的门槛决定了新机制B应该与当前部署的机制A平等共享瓶颈链接。这个目标在实践中太理想化了，特别是当A有时对自己的流也无法完全公平的时候。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;以吞吐量为中心(Throughput-Centricity):&lt;/strong&gt; 基于公平的门槛关注新机制B如何通过关注A已实现的吞吐量来影响使用机制A的竞争流。然而，这忽略了其他重要的性能指标，如延迟、流完成时间或丢包率。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;平衡假设(Assumption of Balance):&lt;/strong&gt; 机制间的相互作用通常具有某些偏见，但公平指标不能告诉我们结果是偏向于现状还是反对现状。就可部署性而言，新机制B比老机制A占用更大的带宽份额还是留给A更大的带宽份额是有区别的: 前者可能会引起老机制A用户的抱怨，而后者却不会。Jain公平指数对两种情况的打分基本一样。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相对于简单计算Jain公平指数，Ware主张使用基于丢包的阈值，以吞吐量的减少或延迟或抖动的增加来衡量。直观的说，如果使用新机制B的流对使用现有机制A的流造成的伤害在一个范围内，这个范围来源于A管理的某个流对其他流造成的伤害，我们可以认为B与A一起部署不会造成更多伤害。Ware继续提出了可接受伤害的具体测量方法，结果证明这比乍看起来要复杂得多。即使使用单一拥塞控制算法，一个流对另一个流造成的伤害也取决于RTT、启动时间和持续时间等因素。因此，对伤害的衡量需要考虑到在现有机制下，不同的流动对彼此的影响，并力求在新算法中没有变得更糟。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4 实验方法&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;评估拥塞控制机制的方法是测量真实系统的性能，正如我们在第一章中指出的，Linux中实现的版本是各个机制的实际规范。我们现在介绍一种执行这些度量的广泛应用的具体方法，该方法使用了&lt;em&gt;Netesto(网络测试工具包, Network Test Toolkit)&lt;/em&gt; ，这是GitHub上的一个软件工具集。此外还有基于模拟的方法，NS-3是最流行的开源工具。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;&lt;span&gt;Netesto&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;br/&gt;&lt;span&gt;NS-3 Network Simulator&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请注意，虽然本节介绍的实验测量了真正的拥塞控制算法(当然，我们还没有详细描述)，目的是概述如何评估算法，而不是得出任何关于具体机制的结论。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4.1 实验设置&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在Linux主机上运行真正的TCP发送者/接收者，并使用&lt;code&gt;netem&lt;/code&gt;和&lt;code&gt;tbf qdisc&lt;/code&gt;等内核包来研究一系列行为，然后使用&lt;code&gt;tcpdump&lt;/code&gt;收集性能数据。连接终端主机的网络是由一组真实的交换机和仿真组件构成的，可以支持如广域延迟和低带宽链路等场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实验沿着两个正交维度进行。一个是网络拓扑结构，包括链路带宽、RTT、缓冲区大小等。另一个维度是我们在网络上运行的流量负载，包括流的数量和持续时间，以及每个流的特征(例如，stream vs RPC)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对网络拓扑结构，我们评估了三种特定配置下的算法:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;具有20μs RTT和10 Gbps链路带宽的局域网。这个场景表示同一数据中心机架中的服务器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;具有10ms RTT和10 Gbps链路带宽的广域网，通过配置一个20000个包的发送队列从而在接收端引入延迟。瓶颈是一个具有浅缓冲区(1-2 MB)的真实交换机。当观察两到三个流时，这是一个很好的可视化算法动态的场景。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;具有40ms RTT和10/100 Mbps瓶颈带宽的广域网，通过引入中间路由器将链路带宽降低到10或100 Mbps。这个场景反映了终端用户在现代网络上可能体验到的连接。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图13展示了前两个场景的拓扑结构，其中发送方和接收方通过单个交换机连接。在第二个场景中，使用接收器中的&lt;code&gt;netem&lt;/code&gt;实现延迟，只影响被发送回的ACK。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.520618556701031&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRVL2ibRYFc1ZSHicibdkFBdB74icm1JkwMKjnrTtjVcmlRZ7PhRuRHXibo9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;figcaption&gt;图13. 10Gbps测试拓扑，引入可选的10ms延迟。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图14显示了第三种场景的拓扑结构，其中路由器由基于服务器的转发器实现，该转发器使用&lt;code&gt;tbf qdisc&lt;/code&gt;限制出口链路带宽。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31073876618431073&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRQKcrHVZzGPoFDgWO4x8qPNlqLzricmKtocInckdCpjdeX6dmibTPMCRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1313&quot;/&gt;&lt;figcaption&gt;图14. 10-100 Mbps测试拓扑，引入可选的10ms或40ms延迟。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于流量负载，我们通过以下测试来评估算法的动态性和公平性:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;2-flow测试: 第一条流持续60秒，第二条流持续20秒并比第一条晚22秒开始。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3-flow测试: 第一条流60秒，第二条流40秒并比第一条流晚12秒开始，第三条流20秒并比第一条流晚26秒开始。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些测试使下列工作成为可能:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;检查现有流对新流的适应速度有多快。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;检查流终止并释放的带宽被新流使用的速度有多快。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;度量使用相同(或不同)拥塞算法的流之间的公平性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;度量拥堵程度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;识别性能发生突然变化的情况，显示可能的不稳定性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他测试包括组合流，外加10 KB和1 MB的RPC。这些测试允许我们查看较小的RPC流是否会受到影响，如果是的话，会受到多少影响。这些测试使下列工作成为可能:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;研究在不断增加的负荷下的行为。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;测量1 MB和10 KB流的性能(吞吐量和延迟)，以及在它们之间分配可用带宽的公平程度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;识别重传或延迟发生突然变化时的情况，这是不稳定的信号。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4.2 结果示例&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面展示了一些示例结果，我们选取这些结果来说明评估过程。从一个简单的2-flow实验开始，其中两个流都由相同的拥塞控制算法管理。图15显示了生成的goodput图。正如人们所希望的那样，一旦第二个流(红色部分)在20秒后开始，两个流的就会收敛到几乎使用相等的可用带宽。这种收敛不会立即发生(两个图在第二个流开始大约10秒后交叉)，其他算法试图纠正这种行为(例如，通过使用来自路由器的显式反馈)。有利的一面是，一旦第二个流结束，第一个流会很快使用释放的带宽。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6197183098591549&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRceUgKWy2at4855bFjCNMz5xiaibBy4icDxKfESbNedzuNfs495GMCicaww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;781&quot;/&gt;&lt;figcaption&gt;图15. 运行在相同拥塞控制算法下的两个流实现的goodput(端到端交付的每秒字节数)。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以更仔细观察这两个流，例如跟踪每个流的拥塞窗口。相应的图表如图16所示。毫不奇怪，随着时间的推移，不同的算法会有不同的&quot;模式&quot;来应对拥塞窗口，我们将在下一章中看到更多细节。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6219879518072289&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsR9AHauDsMeiavXmzp8s7tUjCpqdGVicVxzpPfsXw4eOKG5y8Or2u00tuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;figcaption&gt;图16. 在相同的拥塞控制算法下竞争带宽的两个流的拥塞窗口(以字节度量)。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以改变其中一个流程使用的算法来重复这些实验，从而可视化这两种算法是如何相互作用的。如果两者都是公平算法，我们将期望看到类似于图15的结果。如果没有，可能会看到类似于图17的结果，其中第二个流(算法B)积极的从第一个流(算法A)夺走带宽。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6186868686868687&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRzAdFiaVwzshEnTQdytGoJkV2pFRUB3PWgQicIWUDWWYGywsklrHBKx0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;figcaption&gt;图17. 运行在不同拥塞控制算法下的两个流的goodput(端到端交付的每秒字节数)，其中一个流接收的带宽明显少于另一个。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以在三个并发流中重复实验，但我们接下来要评估各种算法如何处理不同的工作负载。特别的，我们对&lt;em&gt;大小公平(size fairness)&lt;/em&gt; 问题感兴趣，也就是说，当给定算法必须与正在进行的流竞争时，如何处理连续的10 KB或1 MB RPC调用。图18 (1 MB的RPC)和图19 (10 KB的RPC)显示了一些示例结果。图中显示了五种不同算法(用不同颜色表示)的性能，测试了1、2、4、8和16个并发流。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6183333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRwE4ribEKUMAuy3LShSy6DcYptTBVPfibsnHX7eNaQ1BdGPsppgicTUcxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;figcaption&gt;图18. 当与不同数量的TCP流竞争时，通过5种不同算法的1 MB RPC调用的平均goodput(以Gbps为单位)。&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6183333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRYCeicRQ7rkBmjLnBy4eLRlv1gmQeIhnWicFk4J6HZxeZ3kVjic0GWyCAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;figcaption&gt;图19. 当与不同数量的TCP流竞争时，通过5种不同算法的10 KB RPC调用的平均goodput(以Gbps为单位)。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1 MB的结果并不令人惊讶，在五种算法中没有显著的异常值，并且随着rpc与越来越多的流竞争，平均goodput越来越低。虽然图18没有显示，但当所有流都基于stream时，第四个算法(绿色)的性能最好，避免了在RPC调用之间共享可用带宽时会发生的大量重传。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;10 KB的结果有一个显著的异常值，第三个算法(黄色)的性能明显更好，差不多有4倍的优势。如果我们绘制延迟而不是带宽(这是和小消息RPC调用更相关的指标)，则会发现第三种算法实现了最低的延迟，其P99和P999基本相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，可以在包含广域RTT的网络拓扑上重复上述所有实验。当然，流之间的公平性和流大小的公平性仍然值得关注，但排队延迟也可能成为问题。例如，图20显示了当网络拓扑包含10 Mbps瓶颈链路和40ms RTT时，四种不同算法的P99延迟。关于这个结果的重要结论是，当瓶颈路由器上可用的缓冲的带宽时延积小于一个单位时，第二种算法(红色)的性能很差，这引起了对另一个可能影响结果的变量的注意。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6183333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W4qGyQBiat7xZylOnLGFnsRxPteWUn2wOOAHQdjXTUHiaYN9yh3Bg7QCAiatBkcGaJr6hkLVjSPH5pA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;figcaption&gt;图20. 瓶颈路由器上不同数量的缓冲区对40ms WAN上与单个流竞争的10 KB RPC调用的P99延迟影响。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后我们通过一个总结结束对实验方法的讨论。当观察一组算法和一系列拓扑/流量场景时，可以得出结论: &lt;em&gt;没有任何一种算法在所有条件下优于所有其他算法&lt;/em&gt;。这些例子证明了，有很多因素需要考虑。这也解释了为什么拥塞控制一直是网络研究者和实践者都感兴趣的话题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;TCP Congestion Control: A Systems Approach: &lt;em&gt;https://tcpcc.systemsapproach.org/index.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;The Design Philosophy of the DARPA Internet Protocols: &lt;em&gt;https://dl.acm.org/doi/10.1145/52324.52336&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;B4: Experience with a Globally-Deployed Software Defined WAN: &lt;em&gt;https://cseweb.ucsd.edu/~vahdat/papers/b4-sigcomm13.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;Fastpass: A Centralized “Zero-Queue” Datacenter Network: &lt;em&gt;http://fastpass.mit.edu/Fastpass-SIGCOMM14-Perry.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Congestion Avoidance in Computer Networks with a Connectionless Network Layer: Concepts, Goals and Methodology: &lt;em&gt;https://arxiv.org/pdf/cs/9809095.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;A Quantitative Measure of Fairness and Discrimination for Resource Allocation in Shared Computer Systems: &lt;em&gt;https://www.cse.wustl.edu/~jain/papers/ftp/fairness.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;Beyond Jain’s Fairness Index: Setting the Bar for the Deployment of Congestion Control Algorithms: &lt;em&gt;https://www.cs.cmu.edu/~rware/assets/pdf/ware-hotnets19.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Netesto: &lt;em&gt;https://github.com/facebook/fbkutils/tree/master/netesto&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;NS-3 Network Simulator: &lt;em&gt;https://www.nsnam.org&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9c72b52dc805426e720013f37f829fc5</guid>
<title>说说 Java 并发编程（一）</title>
<link>https://toutiao.io/k/qib5wyc</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;
  &lt;noscript&gt;您需要允许该网站执行 JavaScript&lt;/noscript&gt;
  
  
  
  
  
&lt;/body&gt;

&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1e1fb5899442ffbc76164acf2dd9e2d4</guid>
<title>Java 19 中的模式匹配，记录类型的模式与 switch 模式匹配的改进</title>
<link>https://toutiao.io/k/vpl5rl3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;v_desc&quot; class=&quot;video-desc-v1&quot; data-v-220c9cc3=&quot;&quot;&gt;&lt;p class=&quot;desc-info desc-v2&quot;&gt;&lt;span class=&quot;desc-info-text&quot;&gt;介绍 Java 19 与模式匹配相关的变化，包括记录类型的模式与 switch 模式匹配的改进&lt;/span&gt;&lt;/p&gt;&lt;p report-id=&quot;abstract_unspread&quot; class=&quot;toggle-btn&quot;&gt;&lt;span&gt;收起&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>