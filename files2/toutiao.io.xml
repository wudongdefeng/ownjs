<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>d418fe61e16251bad3232ccbc674f9f0</guid>
<title>一文读懂 Go Http Server 原理</title>
<link>https://toutiao.io/k/fyznjk0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hello大家好呀，我是小楼，这是系列文《Go底层原理剖析》的第二篇，依旧是分析 Http 模块，话不多说，开始。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9090909090909091&quot; data-type=&quot;jpeg&quot; data-w=&quot;187&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0QicPichPeoibAEibWwDtkBN3pxDXichfkNmSpXqRdGunpibuf8yejmejb0fD0aFu1AFV0DiaUkH4bncWibAQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;从一个 Demo 入手&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;俗话说万事开头难，但用 Go 实现一个 Http Server 真不难，简单到什么程度？起一个 Server，并且能响应请求，算上包名、导入的依赖，甚至空行，也就只要 15 行代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;io&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; http.HandleFunc(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;, hello)&lt;br/&gt; http.ListenAndServe(&lt;span&gt;&quot;:81&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;hello&lt;/span&gt;&lt;span&gt;(response http.ResponseWriter, request *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; io.WriteString(response, &lt;span&gt;&quot;hello world&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么简单，能与之一战的恐怕只有 Python 了吧，而且 Go 还能编译成可执行的二进制文件，你说牛啤不牛啤？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8075&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0QicPichPeoibAEibWwDtkBN3pxhaBzKLxXo8VkLyBFbDIsESrmC8OFFbpJicCiaHNKRJbU4W31X1BX0kgQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Http Server 如何处理连接？&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们从这一行代码看起&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;http.ListenAndServe(&lt;span&gt;&quot;:81&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从命名来看，这个方法干了两件事，监听并且服务，从方法的单一职责上来说，我觉得不ok，一个方法怎么能干两件事？但这是大佬写的代码，就很合理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0466666666666666&quot; data-type=&quot;jpeg&quot; data-w=&quot;150&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0QicPichPeoibAEibWwDtkBN3pxd4xU8zIJkDaTsbQByjrX411Spicd9KnbpzMod28L4ZdRrlgic0iahua5Q/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个参数&lt;code&gt;Addr&lt;/code&gt;是要监听的地址和端口，第二个参数&lt;code&gt;Handler&lt;/code&gt;一般是&lt;code&gt;nil&lt;/code&gt;，它是真正的逻辑处理，但我们通常用第一行代码那样来注册处理器，这代码一看就感觉是把 path 映射到业务逻辑上，我们先大概了解，待会再来看它&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;http.HandleFunc(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;, hello)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果了解过一点网络编程基础，就会知道操作系统提供了&lt;code&gt;bind&lt;/code&gt;、&lt;code&gt;listen&lt;/code&gt;、&lt;code&gt;accept&lt;/code&gt;这样的系统调用，我们只要按顺序发起调用，就能组合出一个 Server。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 也是利用这些系统调用，把他们都封装在了&lt;code&gt;ListenAndServe&lt;/code&gt;中。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6968449931412894&quot; data-type=&quot;png&quot; data-w=&quot;1458&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0QicPichPeoibAEibWwDtkBN3pxyoc1ljnibWSG5SU38syl7aCwI1bWxNsuo0oG1aUMwE80sH8WyAdqib4g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Listen&lt;/code&gt; 往下追究就是系统调用，所以我们重点看 &lt;code&gt;Serve&lt;/code&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0146627565982405&quot; data-type=&quot;png&quot; data-w=&quot;1364&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0QicPichPeoibAEibWwDtkBN3pxI9ZuCaNMibLibicrt02fRNicssF3jL29kafKLhvT8T5ZCLIPOBrQrpKCTg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把分支代码收起来，只看主干，发现是一个 for 循环里面在不停地 Accept，而这个 Accept 在没有连接时是阻塞的，当有连接时，起一个新的协程来处理。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Http Server 如何处理请求？&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一些前置工作&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;处理请求的一行代码是，可以看出是每个连接单开了一个协程处理：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;go&lt;/span&gt; c.serve(connCtx)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的 connCtx 代入了当前的 Server 对象：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ctx := context.WithValue(baseCtx, ServerContextKey, srv)&lt;br/&gt;...&lt;br/&gt;connCtx := ctx&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且还提供了修改它的 hook 方法 &lt;code&gt;srv.ConnContext&lt;/code&gt;，可以在每次 Accept 时修改原始的 context&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; cc := srv.ConnContext; cc != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt; connCtx = cc(connCtx, rw)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; connCtx == &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(&lt;span&gt;&quot;ConnContext returned nil&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的定义是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// ConnContext optionally specifies a function that modifies&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// the context used for a new connection c. The provided ctx&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// is derived from the base context and has a ServerContextKey&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// value.&lt;/span&gt;&lt;br/&gt;ConnContext &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(ctx context.Context, c net.Conn)&lt;/span&gt; &lt;span&gt;context&lt;/span&gt;.&lt;span&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是如果按照我开头给的代码，你是没法修改 &lt;code&gt;srv.ConnContext&lt;/code&gt; 的，可以改成这样来自定义：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; http.HandleFunc(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;, hello)&lt;br/&gt; server := http.Server{&lt;br/&gt;  Addr: &lt;span&gt;&quot;:81&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;  ConnContext: &lt;span&gt;&lt;span&gt;func(ctx context.Context, c net.Conn)&lt;/span&gt; &lt;span&gt;context&lt;/span&gt;.&lt;span&gt;Context&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; context.WithValue(ctx, &lt;span&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span&gt;&quot;roshi&quot;&lt;/span&gt;)&lt;br/&gt;  },&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; server.ListenAndServe()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的 &lt;code&gt;c.setState&lt;/code&gt; 也提供了 hook，可采取如上的方法设置，在每次连接状态改变时执行 hook 方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;c.setState(c.rwc, StateNew, runHooks) &lt;span&gt;// before Serve can return&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// ConnState specifies an optional callback function that is&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// called when a client connection changes state. See the&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ConnState type and associated constants for details.&lt;/span&gt;&lt;br/&gt;ConnState &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(net.Conn, ConnState)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开始真正干活&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了能看清楚 Accept 后，serve 方法到底干了什么，我们再简化一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *conn)&lt;/span&gt; &lt;span&gt;serve&lt;/span&gt;&lt;span&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; ...&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;  w, err := c.readRequest(ctx)&lt;br/&gt;  ...&lt;br/&gt;  serverHandler{c.server}.ServeHTTP(w, w.req)&lt;br/&gt;  ...&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;serve 也是一个大循环，循环里面主要是读取一个请求，然后将请求交给 Handler 处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么是一个大循环呢？因为每个 serve 处理的是一个连接，一个连接可以有多次请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;读请求就显得比较枯燥乏味，按照Http协议，读出URL，header，body等信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有个细节是在每次读取了一个请求后，还开了一个协程去读下一个请求，也算是做了优化吧。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; {&lt;br/&gt; w, err := c.readRequest(ctx)&lt;br/&gt; ...&lt;br/&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; requestBodyRemains(req.Body) {&lt;br/&gt;  registerOnHitEOF(req.Body, w.conn.r.startBackgroundRead)&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;  w.conn.r.startBackgroundRead()&lt;br/&gt;&lt;/span&gt; }&lt;br/&gt; ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;请求如何路由？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当读取到一个请求后，便进入这一行代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;serverHandler{c.server}.ServeHTTP(w, w.req)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ServeHTTP 找到我们注册的 Handler 去处理，如果请求的URI 是 &lt;code&gt;*&lt;/code&gt;或请求 Method 是 &lt;code&gt;OPTIONS&lt;/code&gt;，则使用globalOptionsHandler，也就是说这类请求不需要我们手动处理，直接就返回了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于我们注册的 Handler 也需要去寻找路由，这个路由的规则还是比较简单，主要由如下三条：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果注册了带 host 的路由，则按 host + path 去寻找，如果没注册带 host 的路由，则按 path 寻找&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;路由规则匹配以完全匹配优先，如果注册的路由规则最后一个字符是&lt;code&gt;/&lt;/code&gt;，则除了完全匹配外，还会以前缀查找&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举几个例子来理解一下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注册路由为&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;http.HandleFunc(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;, hello)&lt;br/&gt;http.HandleFunc(&lt;span&gt;&quot;127.0.0.1/hello&quot;&lt;/span&gt;, hello2)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时如果执行&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;curl &lt;span&gt;&#x27;http://127.0.0.1:81/hello&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;则会匹配到 hello2，但如果执行&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;curl &lt;span&gt;&#x27;http://localhost:81/hello&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就匹配的是 hello&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果注册路由为&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;http.HandleFunc(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;, hello)&lt;br/&gt;http.HandleFunc(&lt;span&gt;&quot;127.0.0.1/hello/&quot;&lt;/span&gt;, hello2)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意第二个最后还有个&lt;code&gt;/&lt;/code&gt;，此时如果执行&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;curl &lt;span&gt;&#x27;http://127.0.0.1:81/hello/roshi&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也能匹配到 hello2，怎么样，是不是理解了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;找到路由之后就直接调用我们开头注册的方法，如果我们往 Response 中写入数据，就能返回给客户端，这样一个请求就处理完成了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后我们回忆下 Go Http Server 的要点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;用 Go 起一个 Http Server 非常简单&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go Http Server 本质是一个大循环，每当有一个新连接时，会起一个新的协程来处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每个连接的处理也是一个大循环，这个循环里做了读取请求、寻找路由、执行逻辑三件大事&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8255613126079447&quot; data-type=&quot;png&quot; data-w=&quot;579&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0QicPichPeoibAEibWwDtkBN3px7YxysicCAjmLyd4ykKwm8ESDJL2qkb5iaHAbJyRuUYg2dkZfoOv4rB7g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;福利时刻&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感谢能抽空看到这里，新的一年准备了3本《Go语言从入门到项目实战》送给大家，参与方式是加我微信&lt;code&gt;MrRoshi&lt;/code&gt;，参加朋友圈点赞送书活动即可。&lt;/p&gt;&lt;p&gt;&lt;mpcps class=&quot;js_editor_new_cps&quot; data-templateid=&quot;list&quot; data-traceid=&quot;3e59a237-9b50-4189-aff2-44f805fb4c42&quot; data-goodssouce=&quot;1&quot; data-pid=&quot;101_13329955&quot; data-appuin=&quot;3296160406&quot; data-buffer=&quot;{&amp;quot;category_id&amp;quot;:10,&amp;quot;pid&amp;quot;:&amp;quot;101_13329955&amp;quot;,&amp;quot;biz_uin&amp;quot;:&amp;quot;3296160406&amp;quot;,&amp;quot;trace_id&amp;quot;:&amp;quot;3e59a237-9b50-4189-aff2-44f805fb4c42&amp;quot;,&amp;quot;sku_id&amp;quot;:&amp;quot;101_13329955&amp;quot;,&amp;quot;source_id&amp;quot;:2,&amp;quot;source_name&amp;quot;:&amp;quot;京东&amp;quot;,&amp;quot;audit_state&amp;quot;:1,&amp;quot;main_img&amp;quot;:&amp;quot;https://pcm-img.zhls.qq.com/productcenter-13651fb5--1018824-7367685220822286616/62026160010122022/38b442ea0c38631a8fc025925ef15cb5.jpg&amp;quot;,&amp;quot;product_name&amp;quot;:&amp;quot;Go语言从入门到项目实战（视频版）&amp;quot;,&amp;quot;current_price&amp;quot;:10800,&amp;quot;first_category_id&amp;quot;:&amp;quot;10&amp;quot;,&amp;quot;product_label_name_list&amp;quot;:[&amp;quot;京东配送&amp;quot;],&amp;quot;select_tag_name_list&amp;quot;:[],&amp;quot;templateId&amp;quot;:&amp;quot;card&amp;quot;,&amp;quot;appuin&amp;quot;:&amp;quot;3296160406&amp;quot;,&amp;quot;isNewCpsKOL&amp;quot;:1}&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你能&lt;code&gt;点赞&lt;/code&gt;、&lt;code&gt;在看&lt;/code&gt;、&lt;code&gt;分享&lt;/code&gt;，我会更加感激不尽~&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;搜索关注微信公众号&quot;捉虫大师&quot;，后端技术分享，架构设计、性能优化、源码阅读、问题排查、踩坑实践&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加我微信&lt;code&gt;MrRoshi&lt;/code&gt;拉你入群，群里各路技术大佬带你飞&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aeef90261a262a25bfca09ec3711731a</guid>
<title>如何用 Go 快速实现规则引擎</title>
<link>https://toutiao.io/k/4eubwce</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;作者：wynnliu， 腾讯IEG增长中台 后台开发工程师&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;出师之名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提到规则引擎，大部分人都会先想到&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DSL(Domain Specific Language)&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，进而联想令人生畏的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;编译原理、递归下降、LL或LR&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。但规则引擎有大有小，它们在不同场景的存在不一样，并不一定都要这么复杂。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如在一个小型支付系统的简单风控场景里，产品同学想设置一些规则，避免用户的银行卡被盗刷或者商户被薅羊毛（仅为示例，并不代表现实中也是应用了同样策略）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了快速实现需求，我们开发一个单独的规则类或者库，类里面有不同规则判断函数。规则不断增加，规则函数就不断扩展，这个膨胀的规则类库就是一个微小的规则引擎。虽然在业务调用的地方会有很多switch或者if...else..，但这个微小的规则引擎并不需要引入DSL，一样能好好工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而在另外一些业务系统，比如贷款系统，同样是风控场景，产品同学也会设置一些规则做不同的金额审批决策（仅为示例，并不代表现实中也是应用了同样策略）：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;征信评分达到650，申请金额2000元以下可以直接审批&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;征信评分达到650，申请金额在5000以下，如果月均消费达到2000块可以直接审批&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;征信评分在550~600之间，申请金额在5000以下的三四线城市用户，如果月均消费达到1000块还需要其他消费评估，如果月收入未达到1万需要工资流水证明&lt;br/&gt;&lt;/span&gt;......&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在这些规则未增多之前，我们发现单单写规则类库，业务方通过调用不同函数判断，就已经痛不欲生。这些风控规则相比上文来说，涉及的用户属性多，判断条件复杂，而且还有不同的优先级。如果没有更好的规则抽象，代码复杂度只会越来越高，这时就需要设计一套DSL来满足更多的规则判断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;所以，在我们真正要实现一个规则引擎之前，下定决心设计DSL与编译原理拉扯之前，我们首先看简单的规则类库是否就已满足需求。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;需求背景&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Gopass是一个API网关，作为一个网关，网关必不可少的能力是路由转发，精细化路由更是高频需求。业务需要根据不同需求场景做不同的路由配置，比如灰度发布、A/B 测试、限流、负载均衡等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Gopass现有的转发规则只能基于请求Method和URL(Host/Path/Query)作简单配置，欠缺根据请求Header、Cookie、CIP(Client IP)/VIP等更多请求属性配置，与及这些属性规则的组合配置，比如业务需要配置API的读写分离，并且灰度测试，就需要配置请求Method和请求Header这样的并集规则。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Json实现&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;我最开始没有往DSL的方向想，写几个像下面的简单的规则函数，用json格式定义规则，再用Go的反射库解析json，三下五除二就完成了规则判断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不同的规则函数&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// IRule&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; IRule &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;Match&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;req &lt;span&gt;*&lt;/span&gt;http&lt;span&gt;.&lt;/span&gt;Request&lt;span&gt;)&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// HeaderMatch 匹配header&lt;/span&gt;&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;HeaderMatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;,&lt;/span&gt; value &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// CookieMatch 匹配Cookie&lt;/span&gt;&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;CookieMatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;,&lt;/span&gt; value &lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;规则定义&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;op&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;AND&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;matcher&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;header&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;cookie&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;header&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;key&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;X-APP-ID&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;value&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;Ves&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;feature&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;value&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;dev/wynnliu/qualify-rule&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;规则解析框架(非反射库版)：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 遍历判断规则&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; matcher &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; matchers &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; m &lt;span&gt;map&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    err &lt;span&gt;:=&lt;/span&gt; json&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unmarshal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;data&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;matcher&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;m&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      log&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;err&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; matcher &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;header&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;...&lt;/span&gt;&lt;br/&gt;       result&lt;span&gt;[&lt;/span&gt;matcher&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;HeaderMatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;rule&lt;span&gt;.&lt;/span&gt;key&lt;span&gt;,&lt;/span&gt; rule&lt;span&gt;.&lt;/span&gt;Vaule&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;coolkie&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;...&lt;/span&gt;&lt;br/&gt;       result&lt;span&gt;[&lt;/span&gt;matcher&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;CookieMatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;rule&lt;span&gt;.&lt;/span&gt;name&lt;span&gt;,&lt;/span&gt; rule&lt;span&gt;.&lt;/span&gt;Vaule&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 综合计算规则结果&lt;/span&gt;&lt;br/&gt;&lt;span&gt;switch&lt;/span&gt; op &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;AND&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;OR&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;上面是一个常见的二元表达式规则，从规则定义到规则解析可以看出，用Json的方式实现非常方便，已经满足简单的规则场景。不好的地方就是解析的代码太灵活，一条龙的switch case，如果加入更多逻辑，复杂度就会上升，维护性也只会越来越差。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如，一开始的规则条件只有等值匹配，接着增加范围匹配，非匹配，正则匹配等，后面再在这些基础上加入规则优先级，就得需要引入更多的json定义，规则解析框架也要相应地覆盖更多的抽象维度。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那有没有抽象度更高、实现也不复杂的解析实现方式呢？就是说，有没有比Json方式更好地表达这些规则的存在？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;答案肯定是有的，不然怎么写下去🐶。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果仔细分析上面的规则，可以发现这些规则经过一波计算后只需得到一个布尔值，与其他算术表达式、关系表达式不同，这些规则都是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;布尔表达式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网上了解到，国内知名Go领域专家曹大(Xargin )在&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;基于 Go 的内置 Parser 打造轻量级规则引擎&lt;/span&gt;&lt;span&gt;一文中提到：&lt;/span&gt;&lt;span&gt;&lt;span&gt;Go的ast语法树可以完美表达布尔表达式，使用 Go 的内置 parser 库可以完成一个基本规则引擎的框架。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，我开始尝试使用Go自带的ast库及parser库完成转发规则的解析。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;AST实现&lt;/strong&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;Go的编译过程&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Go的ast库和parser库都是Go编译过程中的工具库，Go的编译过程跟大部分高级语言的编译过程一样，&lt;/span&gt;&lt;strong&gt;分为6步：词法分析、语法分析、语义分析、中间码生成、代码优化和机器码生成。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;引用《程序员的自我修养》里面的图，就是下面这一串流程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5035971223021583&quot; data-type=&quot;png&quot; data-w=&quot;1112&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G9mz0qib2srCvicwBpmUCrceZOnX2FsgnUg3dNianyD1COHkohSP6bI8LOeQCdscDDSc6pVQyunSYn9XVZgZQpHeg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;每步的输入输出，具体做的事情总体如下表：&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;输入&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;步骤&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;输出&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;源代码&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;词法分析&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;Token&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;go 文件被输入到扫描(Scanner)，它使用一种类似于有限状态机的算法，将源代码的字符系列分割成一系列的记号(Token)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Token序列&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;语法分析&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;AST&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;将 Token 转化为AST(抽象语法树)。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;AST&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;语义分析&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;正确的AST&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;对上一步的AST进行类型检查(名称检查、类型推断等)。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;正确的AST&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;中间码生成&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;SSA 特性的中间码(IR)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;span&gt;中间码的作用之一是适配不同操作系统，兼容不同平台。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;静态单赋值（Static Single Assignment、SSA）是中间代码的特性，如果中间代码具有静态单赋值的特性，那么每个变量就只会被赋值一次。&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;SSA 特性的中间码(IR)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;代码优化&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;优化后的中间码&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;优化后的中间码&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;机器码生成&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;汇编代码（Plan9）&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;对不同系统指令集、CPU架构翻译成不同的机器码。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;我们要拿来做规则引擎的就是前面两步的产物：词法分析得到的Token和语法分析的AST。&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Token(记号)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Token是高级语言中最小的词法单元，Go主要有标识符、关键字、运算符和分隔符等Token，更多的token定义参考&lt;/span&gt;&lt;span&gt;&lt;span&gt;token文件&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如我们扫描`&lt;/span&gt;&lt;span&gt;&lt;code&gt;println(”Hello World”)`&lt;/code&gt;&lt;span&gt;，得到以下token：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扫描代码：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;go/scanner&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;go/token&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; src &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;`println(&quot;Hello World!&quot;)`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; fset &lt;span&gt;=&lt;/span&gt; token&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NewFileSet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; file &lt;span&gt;=&lt;/span&gt; fset&lt;span&gt;.&lt;/span&gt;&lt;span&gt;AddFile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;hello.go&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; fset&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Base&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;src&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; s scanner&lt;span&gt;.&lt;/span&gt;Scanner&lt;br/&gt;  s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Init&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;file&lt;span&gt;,&lt;/span&gt; src&lt;span&gt;,&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; scanner&lt;span&gt;.&lt;/span&gt;ScanComments&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    pos&lt;span&gt;,&lt;/span&gt; tok&lt;span&gt;,&lt;/span&gt; lit &lt;span&gt;:=&lt;/span&gt; s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Scan&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; tok &lt;span&gt;==&lt;/span&gt; token&lt;span&gt;.&lt;/span&gt;EOF &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;break&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    fmt&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Printf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;%s\\t%s\\t%q\\n&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; fset&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Position&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;pos&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; tok&lt;span&gt;,&lt;/span&gt; lit&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;扫描结果：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;hello&lt;span&gt;.&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;  IDENT &lt;span&gt;&quot;println&quot;&lt;/span&gt;&lt;br/&gt;hello&lt;span&gt;.&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;  &lt;span&gt;(&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;hello&lt;span&gt;.&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;  STRING  &lt;span&gt;&quot;\\&quot;&lt;/span&gt;Hello World&lt;span&gt;!&lt;/span&gt;\\&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;hello&lt;span&gt;.&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;)&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;hello&lt;span&gt;.&lt;/span&gt;&lt;span&gt;go&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;;&lt;/span&gt; &lt;span&gt;&quot;\\n&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;其中`&lt;/span&gt;&lt;span&gt;&lt;code&gt;println`&lt;/code&gt;&lt;span&gt;是标识符(IDENT)Token， `&lt;/span&gt;&lt;code&gt;Hello World`&lt;/code&gt;&lt;span&gt;则是字符串Token。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;AST(抽象语法树)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;有了Scanner扫描出来的Token序列，到语法分析这一步，就可以进一步构造AST，但如果看具体的AST，会发现AST中不止有Token，比如同样是这段`&lt;/span&gt;&lt;span&gt;&lt;code&gt;println(”Hello World”)`&lt;/code&gt;&lt;span&gt;，它的AST如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解析代码：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;go/ast&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;go/parser&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;go/token&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  src &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;`&lt;br/&gt;package main&lt;br/&gt;func main() {&lt;br/&gt;  println(&quot;Hello, World!&quot;)&lt;br/&gt;}&lt;br/&gt;`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// Create the AST by parsing src.&lt;/span&gt;&lt;br/&gt;  fset &lt;span&gt;:=&lt;/span&gt; token&lt;span&gt;.&lt;/span&gt;&lt;span&gt;NewFileSet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;// positions are relative to fset&lt;/span&gt;&lt;br/&gt;  f&lt;span&gt;,&lt;/span&gt; err &lt;span&gt;:=&lt;/span&gt; parser&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ParseFile&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fset&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; src&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;panic&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;err&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// Print the AST.&lt;/span&gt;&lt;br/&gt;  ast&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Print&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fset&lt;span&gt;,&lt;/span&gt; f&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;span/&gt;&lt;span&gt;解析结果：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;     &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;File &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Package&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;2&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Ident &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;3&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  NamePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;4&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;main&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;5&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;6&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Decls&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Decl &lt;span&gt;(&lt;/span&gt;&lt;span&gt;len&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;7&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;FuncDecl &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;8&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Ident &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;9&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  NamePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;10&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;main&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;11&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Obj&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Object &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;12&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Kind&lt;span&gt;:&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;13&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;main&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;14&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Decl&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;obj @ &lt;span&gt;7&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;15&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;16&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;17&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Type&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;FuncType &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;18&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Func&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;19&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Params&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;FieldList &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;20&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Opening&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;21&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Closing&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;22&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;23&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;24&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Body&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BlockStmt &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;25&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Lbrace&lt;span&gt;:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;26&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  List&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Stmt &lt;span&gt;(&lt;/span&gt;&lt;span&gt;len&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;27&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;ExprStmt &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;28&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  X&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;CallExpr &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;29&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Fun&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Ident &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;30&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  NamePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;31&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;println&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;32&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;33&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Lparen&lt;span&gt;:&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;34&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Args&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Expr &lt;span&gt;(&lt;/span&gt;&lt;span&gt;len&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;35&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BasicLit &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;36&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  ValuePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;37&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Kind&lt;span&gt;:&lt;/span&gt; STRING&lt;br/&gt;    &lt;span&gt;38&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Value&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;\\&quot;&lt;/span&gt;Hello&lt;span&gt;,&lt;/span&gt; World&lt;span&gt;!&lt;/span&gt;\\&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;39&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;40&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;41&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Ellipsis&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;42&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Rparen&lt;span&gt;:&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;43&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;44&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;45&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;46&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Rbrace&lt;span&gt;:&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;47&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;48&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;49&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;50&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Scope&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Scope &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;51&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Objects&lt;span&gt;:&lt;/span&gt; &lt;span&gt;map&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Object &lt;span&gt;(&lt;/span&gt;&lt;span&gt;len&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;52&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;&quot;main&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;obj @ &lt;span&gt;11&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;53&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;54&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;55&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Unresolved&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Ident &lt;span&gt;(&lt;/span&gt;&lt;span&gt;len&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;56&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;obj @ &lt;span&gt;29&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;57&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;58&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span&gt;整个AST包括Package、Name、Decls、Scope跟Unresolved，其中核心内容在&lt;strong&gt;Decls里边（第6行～49行）&lt;/strong&gt;。&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;Decls是声明declaration的集合，里边有&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;FuncDecl(函数声明)&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，有&lt;/span&gt;&lt;strong&gt;&lt;span&gt;BlockStmt(块语句)&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，还有&lt;/span&gt;&lt;strong&gt;&lt;span&gt;CallExpr(表达式)&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;等。深入&lt;/span&gt;&lt;span&gt;&lt;span&gt;ast库&lt;/span&gt;&lt;span&gt;，可以发现&lt;/span&gt;&lt;strong&gt;&lt;span&gt;这三个正是AST节点的主要类型，它们都实现了Node(节点)接口&lt;/span&gt;&lt;span&gt;，就是说，AST这颗树挂的都是这三个玩意。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// ----------------------------------------------------------------------------&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// Interfaces&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// There are 3 main classes of nodes: Expressions and type nodes,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// statement nodes, and declaration nodes. The node names usually&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// match the corresponding Go spec production names to which they&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// correspond. The node fields correspond to the individual parts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// of the respective productions.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// All nodes contain position information marking the beginning of&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// the corresponding source text segment; it is accessible via the&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// Pos accessor method. Nodes may contain additional position info&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// for language constructs where comments may be found between parts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// of the construct (typically any larger, parenthesized subpart).&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// That position information is needed to properly position comments&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// when printing the construct.&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// All node types implement the Node interface.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Node &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;Pos&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; token&lt;span&gt;.&lt;/span&gt;Pos &lt;span&gt;// position of first character belonging to the node&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;End&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; token&lt;span&gt;.&lt;/span&gt;Pos &lt;span&gt;// position of first character immediately after the node&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// All expression nodes implement the Expr interface.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Expr &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  Node&lt;br/&gt;  &lt;span&gt;exprNode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// All statement nodes implement the Stmt interface.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Stmt &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  Node&lt;br/&gt;  &lt;span&gt;stmtNode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// All declaration nodes implement the Decl interface.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Decl &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  Node&lt;br/&gt;  &lt;span&gt;declNode&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;常见的表达式有：&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;UnaryExpr 一元表达式&lt;br/&gt;BinaryExpr 二元表达式&lt;br/&gt;ParenExpr 括号表达式&lt;span&gt;,&lt;/span&gt;被括号包裹的表达式&lt;br/&gt;&lt;span&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;常见的语句有：&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;AssignStmt 赋值语句&lt;br/&gt;SwitchStmt &lt;span&gt;switch&lt;/span&gt; 语句&lt;br/&gt;DeferStmt 延迟语句&lt;br/&gt;ForStmt &lt;span&gt;for&lt;/span&gt; 语句&lt;br/&gt;&lt;span&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;更多定义在&lt;/span&gt;&lt;span&gt;&lt;span&gt;ast文件&lt;/span&gt;&lt;span&gt;中都可以找到，并不难以理解。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;需求实现&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;认识了Token跟AST后，我们看怎么简单实现我们的规则解析，还是用上文的例子，要判断http请求header的key/value及cookie的name/value是否满足以下规则：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&quot;header&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt; &lt;span&gt;&quot;key&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;X-APP-ID&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;value&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;Ves&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;feature&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;value&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;dev/wynnliu/qualify-rule&quot;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;以header的规则解析AST为例，`&lt;/span&gt;&lt;span&gt;&lt;code&gt;header.key==&quot;X-APP-ID&quot; &amp;amp;&amp;amp; header.value==&quot;Ves&quot;`&lt;/code&gt;&lt;span&gt;，打印的AST如下，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;AST很清晰地表示这条规则是个BinaryExpr，即二元表达式，二元表达式的左边为X，右边是Y，逻辑运算符为Op&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;     0&lt;/span&gt;  &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BinaryExpr &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  X&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BinaryExpr &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;2&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  X&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;SelectorExpr &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;3&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  X&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Ident &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;4&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  NamePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;5&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;header&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;6&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Obj&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Object &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;7&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Kind&lt;span&gt;:&lt;/span&gt; bad&lt;br/&gt;     &lt;span&gt;8&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;9&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;10&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;11&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Sel&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Ident &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;12&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  NamePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;13&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;key&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;14&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;15&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;16&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  OpPos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;17&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Op&lt;span&gt;:&lt;/span&gt; &lt;span&gt;==&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;18&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Y&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BasicLit &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;19&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  ValuePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;20&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Kind&lt;span&gt;:&lt;/span&gt; STRING&lt;br/&gt;    &lt;span&gt;21&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Value&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;\\&quot;&lt;/span&gt;X&lt;span&gt;-&lt;/span&gt;APP&lt;span&gt;-&lt;/span&gt;ID\\&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;22&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;23&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;24&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  OpPos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;25&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Op&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;26&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Y&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BinaryExpr &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;27&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  X&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;SelectorExpr &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;28&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  X&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Ident &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;29&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  NamePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;30&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;header&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;31&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Obj&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;obj @ &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;32&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;33&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Sel&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;Ident &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;34&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  NamePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;35&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Name&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;value&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;36&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;37&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;38&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  OpPos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;39&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Op&lt;span&gt;:&lt;/span&gt; &lt;span&gt;==&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;40&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Y&lt;span&gt;:&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BasicLit &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;41&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  ValuePos&lt;span&gt;:&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;42&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Kind&lt;span&gt;:&lt;/span&gt; STRING&lt;br/&gt;    &lt;span&gt;43&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  Value&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;\\&quot;&lt;/span&gt;Ves\\&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;44&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;45&lt;/span&gt;  &lt;span&gt;.&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;46&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;有了AST结构，我们可以&lt;strong&gt;分别获取左边(X)的key值和右边(Y)的值根据逻辑运算符(Op)完成判断&lt;/strong&gt;，如下是简单的判断实现：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Parse&lt;/span&gt;&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Parse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;expr &lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; header http&lt;span&gt;.&lt;/span&gt;Header&lt;span&gt;)&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  exprAst&lt;span&gt;,&lt;/span&gt; err &lt;span&gt;:=&lt;/span&gt; parser&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ParseExpr&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;expr&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; err&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 打印 ast&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;//fset := token.NewFileSet()&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;//ast.Print(fset, exprAst)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;judge&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;exprAst&lt;span&gt;,&lt;/span&gt; header&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 判断&lt;/span&gt;&lt;br/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;judge&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;bop ast&lt;span&gt;.&lt;/span&gt;Node&lt;span&gt;,&lt;/span&gt; header http&lt;span&gt;.&lt;/span&gt;Header&lt;span&gt;)&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 断言成二元表达式&lt;/span&gt;&lt;br/&gt;  expr &lt;span&gt;:=&lt;/span&gt; bop&lt;span&gt;.&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BinaryExpr&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;  x &lt;span&gt;:=&lt;/span&gt; expr&lt;span&gt;.&lt;/span&gt;X&lt;span&gt;.&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BinaryExpr&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;  key &lt;span&gt;:=&lt;/span&gt; x&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;.&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BasicLit&lt;span&gt;)&lt;/span&gt; &lt;span&gt;// key值&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  y &lt;span&gt;:=&lt;/span&gt; expr&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;.&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BinaryExpr&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;  value &lt;span&gt;:=&lt;/span&gt; y&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;.&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;ast&lt;span&gt;.&lt;/span&gt;BasicLit&lt;span&gt;)&lt;/span&gt; &lt;span&gt;// value值&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 等值匹配&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; header&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;strings&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Trim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;.&lt;/span&gt;Value&lt;span&gt;,&lt;/span&gt; &lt;span&gt;`&quot;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; strings&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Trim&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;value&lt;span&gt;.&lt;/span&gt;Value&lt;span&gt;,&lt;/span&gt; &lt;span&gt;`&quot;`&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;strong&gt;更进一步&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;通过以上的简单例子，我们大概可以利用go的ast库和parser库实现个简单的规则引擎。但这可能还不够，如果要覆盖更复杂的规则，不仅仅是只有布尔表达式，就要设计自己的规则原语，比如将`&lt;/span&gt;&lt;span&gt;&lt;code&gt;header.key==&quot;X-APP-ID&quot; &amp;amp;&amp;amp; header.value==&quot;Ves&quot;`&lt;/code&gt;&lt;span&gt;和`&lt;/span&gt;&lt;code&gt;cookie.name==&quot;feature&quot; &amp;amp;&amp;amp; cookie.value==&quot;dev/wynnliu/qualify-rule&quot;`&lt;/code&gt;&lt;span&gt;设计成&lt;/span&gt;&lt;code&gt;`req_header_pair_is(&quot;X-APP-ID&quot;, &quot;VES&quot;) &amp;amp;&amp;amp; req_cookie_contain(&quot;feature&quot;, &quot;dev/wynnliu/qualify-rule&quot;)`&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时就需要引入&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;GoYACC&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&lt;span&gt;YACC(Yet Another Compiler Compiler)，是一个经典的生成语法分析器的工具，GoYACC是Golang版本的YACC。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;用GoYACC解析自己设计的BNF/EBNF(巴科斯范式／扩展巴科斯范式，定义语法规则)。GoYACC整体使用原理基本还是上文提到的编译过程，但涉及的细节较多，本文不展开，有兴趣的读者朋友可以参考&lt;/span&gt;&lt;span&gt;&lt;span&gt;TiDB SQL Parser&lt;/span&gt;&lt;span&gt;，了解TiDB的sql解析器如何基于GoYACC设计完成sql解析。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>62de38a6bc89790e9d3023d07b829b19</guid>
<title>logback ：自定义日志脱敏组件，一种不错的脱敏方案</title>
<link>https://toutiao.io/k/ol8p74l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;（给&lt;/span&gt;&lt;span&gt;ImportNew&lt;/span&gt;&lt;span&gt;加星标，提高Java技能）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在我们写代码的时候，会书写许多日志代码，但是有些敏感数据是需要进行安全脱敏处理的。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于日志脱敏的方式有很多，常见的有：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;①使用&lt;code&gt;conversionRule&lt;/code&gt;标签，继承&lt;code&gt;MessageConverter&lt;br/&gt;&lt;/code&gt;②书写一个脱敏工具类，在打印日志的时候对特定特字段进行脱敏返回。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两种方式各有优缺点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一种方式需要修改代码，不符合开闭原则。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二种方式，需要在日志方法的参数进行脱敏，对原生日志有入侵行为。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;自定义脱敏组件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;（slf4j+logback）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;一个项目在书写了很多打印日志的代码，但是后面有了脱敏需求，如果我们去手动改动代码，会花费大量时间。如果引入本组件，完成配置即可轻松完成脱敏。（仅需三步可轻松配置）&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;一、自定义脱敏组件 - 脱敏效果演示&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6881578947368421&quot; data-type=&quot;png&quot; data-w=&quot;760&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkHjfnQDR1nTwalzIZVhfiayqicxLm7WmpcskA5Zj92aYlfQSuXDibtlHTgNtHttzqpMLEC5kAgQo8rGw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3142174432497013&quot; data-type=&quot;png&quot; data-w=&quot;837&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkHjfnQDR1nTwalzIZVhfiayqjeKvy3F0v9kSxMU2gXrGeokrFibWT7wffSynQVfNUfofv5U82QibB7Vg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;二、自定义脱敏组件 - 使用方式&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、引入Jar包依赖&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前提是你将Jar包打入本地仓库，Jar包地址见后文。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;pers.liuchengyin&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;logback-desensitization&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、替换日志文件配置类(logback.xml)&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志打印方式都只需要替换成脱敏的类即可，如果你的业务不需要，则无需替换。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;①ConsoleAppender - 控制台脱敏&lt;/span&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 原类&lt;br/&gt;ch.qos.logback.core.ConsoleAppender&lt;br/&gt;// 替换类&lt;br/&gt;pers.liuchengyin.logbackadvice.LcyConsoleAppender&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;②RollingFileAppender - 滚动文件&lt;/span&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 原类&lt;br/&gt;ch.qos.logback.core.rolling.RollingFileAppender&lt;br/&gt;// 替换类&lt;br/&gt;pers.liuchengyin.logbackadvice.LcyRollingFileAppender&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;③FileAppender - 文件&lt;/span&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 原类&lt;br/&gt;ch.qos.logback.core.FileAppender&lt;br/&gt;// 替换类&lt;br/&gt;pers.liuchengyin.logbackadvice.LcyFileAppender&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;替换示例：&lt;/span&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;property name=&lt;span&gt;&quot;CONSOLE_LOG_PATTERN&quot;&lt;/span&gt;&lt;br/&gt;          value=&lt;span&gt;&quot;%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)&quot;&lt;/span&gt;/&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;!-- ConsoleAppender 控制台输出日志 --&amp;gt;&lt;br/&gt;&amp;lt;appender name=&lt;span&gt;&quot;CONSOLE&quot;&lt;/span&gt; class=&lt;span&gt;&quot;pers.liuchengyin.logbackadvice.LcyConsoleAppender&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;encoder&amp;gt;&lt;br/&gt;        &amp;lt;pattern&amp;gt;&lt;br/&gt;            &lt;span&gt;${CONSOLE_LOG_PATTERN}&lt;/span&gt;&lt;br/&gt;        &amp;lt;/pattern&amp;gt;&lt;br/&gt;    &amp;lt;/encoder&amp;gt;&lt;br/&gt;&amp;lt;/appender&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、添加脱敏配置文件(logback-desensitize.yml)&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该配置文件应该放在resources文件下&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5381818181818182&quot; data-type=&quot;png&quot; data-w=&quot;275&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkHjfnQDR1nTwalzIZVhfiayqEjX6nZrcu6icvhLtM2f19vXicrLyWwHsVXLCc9p3xI6gvTiaRFRlo3ibibg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;三、自定义脱敏组件 - 脱敏规范&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、支持数据类型&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;八大基本类型及其包装类型、Map、List、业务里的Pojo对象、List&amp;lt;业务里的Pojo对象&amp;gt;、JSON字符串。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注：在配置文件中配置的时候，只需要配置对象里的属性值就行。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、不支持的数据类型&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;List&amp;lt;八大基本类型及包装类型&amp;gt;，因为不知道脱敏的数据源具体是哪一个。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、匹配规则&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;key + 分割符 + value，目前仅支持冒号(:)和等号(=)，示例如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;log.info(&lt;span&gt;&quot;your email:{}, your phone:{}&quot;&lt;/span&gt;, &lt;span&gt;&quot;123456789@qq.com&quot;&lt;/span&gt;,&lt;span&gt;&quot;15310763497&quot;&lt;/span&gt;);&lt;br/&gt;log.info(&lt;span&gt;&quot;your email={}, your cellphone={}&quot;&lt;/span&gt;, &lt;span&gt;&quot;123456789@qq.com&quot;&lt;/span&gt;,&lt;span&gt;&quot;15310763497&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;key&lt;/code&gt;：定义了对应需要脱敏的关键字，如上诉的email、phone等以及业务对象中的字段、Map中的Key、JSON中的Key&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;value&lt;/code&gt;：需要脱敏的值，如上诉的&lt;code&gt;123456789@qq.com&lt;/code&gt;、&lt;code&gt;15310763497&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、日志规范&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议书写日志的时候尽量规范，对于key为中文的是没有办法脱敏的，规范程度可以见脱敏效果演示里的代码。&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;四、logback-desensitize.yml配置说明&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 日志脱敏&lt;/span&gt;&lt;br/&gt;&lt;span&gt;log&lt;/span&gt;-desensitize:&lt;br/&gt;  &lt;span&gt;# 是否忽略大小写匹配，默认为true&lt;/span&gt;&lt;br/&gt;  ignore: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 是否开启脱敏，默认为false&lt;/span&gt;&lt;br/&gt;  open: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# pattern下的key/value为固定脱敏规则&lt;/span&gt;&lt;br/&gt;  pattern:&lt;br/&gt;    &lt;span&gt;# 邮箱 - @前第4-7位脱敏&lt;/span&gt;&lt;br/&gt;    email: &lt;span&gt;&quot;@&amp;gt;(4,7)&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# qq邮箱 - @后1-3位脱敏&lt;/span&gt;&lt;br/&gt;    qqemail: &lt;span&gt;&quot;@&amp;lt;(1,3)&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 姓名 - 姓脱敏，如*杰伦&lt;/span&gt;&lt;br/&gt;    name: 1,1&lt;br/&gt;    &lt;span&gt;# 密码 - 所有需要完全脱敏的都可以使用内置的password&lt;/span&gt;&lt;br/&gt;    password: password&lt;br/&gt;  patterns:&lt;br/&gt;    &lt;span&gt;# 身份证号，key后面的字段都可以匹配以下规则(用逗号分隔)&lt;/span&gt;&lt;br/&gt;    - key: identity,idcard&lt;br/&gt;      &lt;span&gt;# 定义规则的标识&lt;/span&gt;&lt;br/&gt;      custom:&lt;br/&gt;        &lt;span&gt;# defaultRegex表示使用组件内置的规则：identity表示身份证号 - 内置的18/15位&lt;/span&gt;&lt;br/&gt;        - defaultRegex: identity&lt;br/&gt;          position: 9,13&lt;br/&gt;        &lt;span&gt;# 内置的other表示如果其他规则都无法匹配到，则按该规则处理&lt;/span&gt;&lt;br/&gt;        - defaultRegex: other&lt;br/&gt;          position: 9,10&lt;br/&gt;    &lt;span&gt;# 电话号码，key后面的字段都可以匹配以下规则(用逗号分隔)&lt;/span&gt;&lt;br/&gt;    - key: phone,cellphone,mobile&lt;br/&gt;      custom:&lt;br/&gt;        &lt;span&gt;# 手机号 - 内置的11位手机匹配规则&lt;/span&gt;&lt;br/&gt;        - defaultRegex: phone&lt;br/&gt;          position: 4,7&lt;br/&gt;        &lt;span&gt;# 自定义正则匹配表达式：座机号(带区号，号码七位|八位)&lt;/span&gt;&lt;br/&gt;        - customRegex: &lt;span&gt;&quot;^0[0-9]{2,3}-[0-9]{7,8}&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# -后面的1-4位脱敏&lt;/span&gt;&lt;br/&gt;          position: &lt;span&gt;&quot;-&amp;lt;(1,4)&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 自定义正则匹配表达式：座机号(不带区号)&lt;/span&gt;&lt;br/&gt;        - customRegex: &lt;span&gt;&quot;^[0-9]{7,8}&quot;&lt;/span&gt;&lt;br/&gt;          position: 3,5&lt;br/&gt;        &lt;span&gt;# 内置的other表示如果其他规则都无法匹配到，则按该规则处理&lt;/span&gt;&lt;br/&gt;        - defaultRegex: other&lt;br/&gt;          position: 1,3&lt;br/&gt;    &lt;span&gt;# 这种方式不太推荐 - 一旦匹配不上，就不会脱敏&lt;/span&gt;&lt;br/&gt;    - key: localMobile&lt;br/&gt;      custom:&lt;br/&gt;          customRegex: &lt;span&gt;&quot;^0[0-9]{2,3}-[0-9]{7,8}&quot;&lt;/span&gt;&lt;br/&gt;          position: 1,3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这个配置是相对完整的，一定要严格遵守层级配置格式。&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;自定义脱敏支持的方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、key:value的方式&lt;/span&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;phone：4,7，表示phone属性的4-7位进行脱敏&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;原始数据：&lt;code&gt;13610357861&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;脱敏后：&lt;code&gt;136****7861&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、以符号作为起始、结束节点作为脱敏标志&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;emai:&quot;@&amp;gt;(4,7)&quot;&lt;/code&gt;，&lt;code&gt;@&lt;/code&gt;为脱敏标志，&lt;code&gt;&amp;gt;&lt;/code&gt;表示其为结束节点，&lt;code&gt;&amp;lt;&lt;/code&gt;表示其为开始节点。即&lt;code&gt;@&amp;gt;&lt;/code&gt;表示对&lt;code&gt;@&lt;/code&gt;之前的进行脱敏，&lt;code&gt;@&amp;lt;&lt;/code&gt;表示对&lt;code&gt;@&lt;/code&gt;之后的进行脱敏。这个示例就是&lt;code&gt;@&lt;/code&gt;前的数据的第4-7位进行脱敏。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：这种规则里的双引号、括号不能省略，其次&lt;code&gt;:&lt;/code&gt;和&lt;code&gt;=&lt;/code&gt;不能作为标志符号，因为和匹配规则有冲突&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;原始数据：&lt;code&gt;123456789@qq.com&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&quot;@&amp;gt;(4,7)&quot;&lt;/code&gt;脱敏后：&lt;code&gt;123****89@qq.com&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&quot;@&amp;lt;(1,3)&quot;&lt;/code&gt;脱敏后：&lt;code&gt;123456789@***com&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、自定义正则脱敏&lt;/span&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;patterns:&lt;br/&gt;  &lt;span&gt;# 手机号&lt;/span&gt;&lt;br/&gt;  - key: phone,mobile&lt;br/&gt;    custom:&lt;br/&gt;      &lt;span&gt;# 手机号的正则&lt;/span&gt;&lt;br/&gt;      - customRegex: &lt;span&gt;&quot;^1[0-9]{10}&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 脱敏范围&lt;/span&gt;&lt;br/&gt;        position: 4,7&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;customRegex：正则表达式，如果符合该表达式，则使用其对应的脱敏规则(position)&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、一个字段，根据多种值含义进行自定义脱敏&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说，username字段的值可以是手机号、也可以是邮箱，这个值动态改变的，前面几种方式都没办法解决，可以使用该方式。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;patterns:&lt;br/&gt;  - key: username&lt;br/&gt;    custom:&lt;br/&gt;      &lt;span&gt;# 手机号 - 11位&lt;/span&gt;&lt;br/&gt;      - defaultRegex: phone&lt;br/&gt;        position : 4,7&lt;br/&gt;      &lt;span&gt;# 邮箱 - @&lt;/span&gt;&lt;br/&gt;   - defaultRegex: email&lt;br/&gt;     position : &lt;span&gt;&quot;@&amp;gt;(3,12)&quot;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;# 身份证 - 15/18位&lt;/span&gt;&lt;br/&gt;   - defaultRegex: identity&lt;br/&gt;     position : 1,3&lt;br/&gt;   &lt;span&gt;# 自定义正则&lt;/span&gt;&lt;br/&gt;   - customRegex: &lt;span&gt;&quot;^1[0-9]{10}&quot;&lt;/span&gt;&lt;br/&gt;     position : 1,3&lt;br/&gt;   &lt;span&gt;# 都匹配不到时，按照这种规则来&lt;/span&gt;&lt;br/&gt;   - defaultRegex: other&lt;br/&gt;     position : 1,3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：上面示例中匹配规则里的 双引号和括号 都不能省略&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该组件内置四种匹配规则：手机号、身份证号、邮箱、other(其他匹配不到时用的)，内置一种脱敏方式：password，表示完全脱敏，可用于pattren下的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注：当pattern和patterns下的key有重复的时候，只会使用pattern下指定的方式进行脱敏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Jar包地址和源码地址：&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://github.com/liuchengyin01/LogbackDesensitization/tree/master/repo/pers/liuchengyin/logback-desensitization/1.0.0&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5353805073431241&quot; data-type=&quot;png&quot; data-w=&quot;749&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkHjfnQDR1nTwalzIZVhfiayqxn83EAcelp35z8wUL0AbPdPUe8Fo59iacHB6pvrGAKqEZN4E2kicDhIw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Github地址：&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://github.com/liuchengyin01/LogbackDesensitization&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h5&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Jar包打入Maven本地仓库的方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mvn install:install-file -DgroupId=pers.liuchengyin -DartifactId=logback-desensitization -Dversion=1.0.0 -Dpackaging=jar -Dfile=logback-desensitization-1.0.0.jar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;命令说明：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;-DgroupId&lt;br/&gt; 表示jar对应的groupId  &lt;br/&gt; &amp;lt;groupId&amp;gt;pers.liuchengyin&amp;lt;/groupId&amp;gt;&lt;br/&gt;-DartifactId:&lt;br/&gt; 表示jar对应的artifactId&lt;br/&gt; &amp;lt;artifactId&amp;gt;logback-desensitization&amp;lt;/artifactId&amp;gt;&lt;br/&gt;-Dversion&lt;br/&gt; 表示jar对应的 version&lt;br/&gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;转自：九月清晨柳成荫&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接&lt;span&gt;：blog.csdn.net/qq_40885085/article/details/113385261?spm=1001.2014.3001.5501&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651522226&amp;amp;idx=1&amp;amp;sn=71e856f554e23a13d0e612d62190a6b5&amp;amp;chksm=bd2468cd8a53e1db1b358195f32994e5883e7a2a43d7aabc5c0523158e67c8b84822b663baa1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SpringBoot + MDC 实现全链路调用日志跟踪&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;SpringBoot + MDC 实现全链路调用日志跟踪&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651521004&amp;amp;idx=1&amp;amp;sn=a2fd9a815cd15a73be9ceaa2139cf896&amp;amp;chksm=bd2593938a521a85673d0fbc1b76db729a1a99f1e6e0f56b569646c4aa2b9aef5110c9a6b93c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一行log日志，引发了P1的线上事故&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;一行log日志，引发了P1的线上事故&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>35a5fdaf7d827a97daa5a603118d9a87</guid>
<title>探索 Seata  服务的 AT 模式下的分布式开发实战指南（2）</title>
<link>https://toutiao.io/k/iavck8i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h2&gt;&lt;a id=&quot;_0&quot;/&gt;承接上文&lt;/h2&gt; 
&lt;p&gt;上一篇文章说到了Seata 为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。那么接下来我们将要针对于AT模式下进行分布式事务开发的原理进行介绍以及实战。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;Seata_AT_4&quot;/&gt;Seata AT模式&lt;/h2&gt; 
&lt;p&gt;在AT、TCC、SAGA 和 XA 这四种事务模式中使用最多，最方便的就是 AT 模式。与其他事务模式相比，AT 模式可以应对大多数的业务场景，且基本可以做到无业务入侵，开发人员能够有更多的精力关注于业务逻辑开发。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;AT_8&quot;/&gt;使用AT模式的前提&lt;/h3&gt; 
&lt;p&gt;任何应用想要使用Seata的 AT 模式对分布式事务进行控制，必须满足以下 2 个前提：&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt;必须使用支持本地 ACID 事务特性的关系型数据库，例如 MySQL、Oracle 等；&lt;/li&gt;&lt;li&gt;应用程序必须是使用 JDBC 对数据库进行访问的 JAVA 应用。&lt;/li&gt;&lt;/ol&gt; 
&lt;h2&gt;&lt;a id=&quot;Seata_15&quot;/&gt;Seata安装使用&lt;/h2&gt; 
&lt;h3&gt;&lt;a id=&quot;_17&quot;/&gt;下载地址&lt;/h3&gt; 
&lt;p&gt;Seata服务进行下载的地址：https://seata.io/zh-cn/blog/download.html，访问之后可以看到下面的资源中，可以直接进行下载，如下图所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/ee4fae470c1d43ed5902bad29a583b26.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;但是由于官方维护的稍微缓慢，所以并不是最新的版本，如果你想要下载较新的版本，可以去官方的Git仓库中进行下载对应的版本文件包。地址为：https://github.com/seata/seata/releases，可以看到下面的最新版本已经到了1.6.1了&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/8a661658b6db3c37e0c7be5e4e39fe61.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;我们选择下载对应的可执行包即可。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/1f508662bf5eca4f669318570c42a1a0.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;UNDO_LOG_31&quot;/&gt;创建UNDO_LOG表&lt;/h3&gt; 
&lt;p&gt;SEATA AT模式需要针对业务中涉及的各个数据库表，分别创建一个UNDO_LOG（回滚日志）表。不同数据库在创建 UNDO_LOG 表时会略有不同，以 MySQL 为例，其 UNDO_LOG 表的创表语句如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-sql&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;undo_log&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;branch_id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;xid&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;rollback_info&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;longblob&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;log_status&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;log_created&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;log_modified&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;ext&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;ux_undo_log&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;xid&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token identifier&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;branch_id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;utf8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;_52&quot;/&gt;启动服务&lt;/h3&gt; 
&lt;p&gt;下载服务器软件包后，将其解压缩。主要通过脚本进行启动Seata服务&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e66048427dbc537a6bc049580f02493e.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;Seata_Server__58&quot;/&gt;Seata Server 目录中包含以下子目录：&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt;bin：用于存放Seata Server可执行命令。&lt;/li&gt;&lt;li&gt;conf：用于存放Seata Server的配置文件。&lt;/li&gt;&lt;li&gt;lib：用于存放Seata Server依赖的各种 Jar 包。&lt;/li&gt;&lt;li&gt;logs：用于存放Seata Server的日志。&lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;Seata_Server_65&quot;/&gt;Seata Server的执行脚本&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt;seata-server.sh：主要是为Linux和Mac系统准备的启动脚本。执行&lt;code&gt;sh seata-server.sh&lt;/code&gt;启动服务。&lt;/li&gt;&lt;li&gt;seata-server.bat：主要是为Windows系统准备的启动脚本。执行&lt;code&gt;cmd seata-server.bat&lt;/code&gt;启动服务。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;其中参数的选择范围如下所示&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;--host, -h（简略指令）该地址向注册中心公开，其他服务可以通过该ip访问seata-server，默认: 0.0.0.0
--port, -p（简略指令） 监听的端口，默认值为8091
--storeMode, -m（简略指令）日志存储模式 : file（文件）、db（数据库），默认为：file
--help 帮助指令
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;例如执行shell脚本&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;sh seata-server.sh -p 8091 -h 127.0.0.1 -m file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;AT__85&quot;/&gt;AT 模式的工作机制&lt;/h3&gt; 
&lt;p&gt;Seata的AT模式工作时大致可以分为以两个阶段，下面我们就结合一个实例来对 AT 模式的工作机制进行介绍。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_89&quot;/&gt;整体机制&lt;/h4&gt; 
&lt;p&gt;两阶段提交协议的演变：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;一阶段：&lt;strong&gt;业务数据&lt;/strong&gt;和&lt;strong&gt;回滚日志记录&lt;/strong&gt;在同一个本地事务中提交，释放本地锁和连接资源。&lt;/li&gt;&lt;li&gt;二阶段：&lt;strong&gt;提交异步化&lt;/strong&gt;，非常快速地完成。回滚通过一阶段的回滚日志进行反向补偿。&lt;/li&gt;&lt;/ul&gt; 
&lt;h5&gt;&lt;a id=&quot;AT_96&quot;/&gt;AT模式一阶段&lt;/h5&gt; 
&lt;p&gt;Seata AT模式一阶段的工作流程如下图所示&lt;br/&gt; &lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/ad4eccb6e90fa0ce2ca8d978fd0ea978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;SQL_103&quot;/&gt;第一子阶段-获取SQL的基本信息&lt;/h6&gt; 
&lt;p&gt;Seata拦截并解析业务SQL，得到SQL 的操作类型（INSERT/UPDATE/DELETE）、表名（tableXXX）、判断条件（where condition = value）等相关信息。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;_107&quot;/&gt;第二子阶段-查询并备份【执行之前】的数据快照&lt;/h6&gt; 
&lt;p&gt;根据得到的业务SQL信息，生成“前镜像查询语句”。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; tableXX &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; condition&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;执行“前镜像查询语句”，得到即将执行操作的数据，并将其保存为“前镜像数据（&lt;strong&gt;beforeImage&lt;/strong&gt;）”。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;SQL_117&quot;/&gt;第三子阶段-执行业务操作的SQL语句&lt;/h6&gt; 
&lt;p&gt;执行业务SQL，例如（update tableXX set parameter = ‘value’ where condition = value;），将这条记录的进行修改。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;_121&quot;/&gt;第四子阶段-查询业务操作之后的数据，并且保存下来&lt;/h6&gt; 
&lt;p&gt;查询后镜像：根据“前镜像数据”的主键（id : X），生成“后镜像查询语句”。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; tableXX &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; condition&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;执行“后镜像查询语句”，得到执行业务操作后的数据，并将其保存为“后镜像数据（&lt;strong&gt;afterImage&lt;/strong&gt;）”。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;undo_log_131&quot;/&gt;第五子阶段-插入保存回滚日志记录到undo_log表中&lt;/h6&gt; 
&lt;p&gt;将前后镜像数据和业务SQL的信息组成一条回滚日志记录，插入到 UNDO_LOG 表中，示例回滚日志如下。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;{
&quot;branchId&quot;: 641789253,
&quot;undoItems&quot;: [{
&quot;afterImage&quot;: {
&quot;rows&quot;: [{
&quot;fields&quot;: [{
&quot;name&quot;: &quot;id&quot;,
&quot;type&quot;: 4,
&quot;value&quot;: 1
}, {
&quot;name&quot;: &quot;name&quot;,
&quot;type&quot;: 12,
&quot;value&quot;: &quot;GTS&quot;
}, {
&quot;name&quot;: &quot;since&quot;,
&quot;type&quot;: 12,
&quot;value&quot;: &quot;2014&quot;
}]
}],
&quot;tableName&quot;: &quot;product&quot;
},
&quot;beforeImage&quot;: {
&quot;rows&quot;: [{
&quot;fields&quot;: [{
&quot;name&quot;: &quot;id&quot;,
&quot;type&quot;: 4,
&quot;value&quot;: 1
}, {
&quot;name&quot;: &quot;name&quot;,
&quot;type&quot;: 12,
&quot;value&quot;: &quot;TXC&quot;
}, {
&quot;name&quot;: &quot;since&quot;,
&quot;type&quot;: 12,
&quot;value&quot;: &quot;2014&quot;
}]
}],
&quot;tableName&quot;: &quot;product&quot;
},
&quot;sqlType&quot;: &quot;UPDATE&quot;
}],
&quot;xid&quot;: &quot;xid:xxx&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;a id=&quot;_181&quot;/&gt;提交前需要获取申请本地锁&lt;/h5&gt; 
&lt;ul&gt;&lt;li&gt;提交前，向TC注册分支：申请TableXXX表中，id主键等于N的记录的全局锁 。需要确保先拿到全局锁 。 
  &lt;ul&gt;&lt;li&gt;&lt;strong&gt;拿不到全局锁 ，不能提交本地事务&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;拿到全局锁，会被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h6&gt;&lt;a id=&quot;_187&quot;/&gt;示例说明：&lt;/h6&gt; 
&lt;p&gt;两个全局事务tx1和tx2，分别对a表的m字段进行更新操作，m的初始值1000。&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;tx1先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的全局锁 ，本地提交释放本地锁。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;tx2后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的全局锁 ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2需要重试等待 全局锁 。&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/4a05744de567ae3f6895a32ecf31e487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt; &lt;p&gt;tx1二阶段全局提交，释放全局锁 。tx2 拿到全局锁提交本地事务&lt;br/&gt; &lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/68182b5f4ba532e9f598c1e763b7de11.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;如果tx1的二阶段全局回滚，则tx1需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;此时，如果tx2仍在等待该数据的全局锁，同时持有本地锁，则tx1的分支回滚会失败。分支的回滚会一直重试，直到tx2的全局锁等锁超时，放弃全局锁并回滚本地事务释放本地锁，tx1 的分支回滚最终成功。因为整个过程全局锁在tx1结束前一直是被tx1持有的，所以不会发生脏写的问题。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h6&gt;&lt;a id=&quot;_204&quot;/&gt;数据库隔离级别&lt;/h6&gt; 
&lt;p&gt;在数据库本地事务隔离级别，读已提交（Read Committed）或以上的基础上，Seata（AT 模式）的默认全局隔离级别是读未提交（Read Uncommitted） 。&lt;/p&gt; 
&lt;p&gt;如果应用在特定场景下，必需要求全局的读已提交 ，目前Seata的方式是通过 SELECT FOR UPDATE 语句的代理。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/620f21a42c84d85b31e84fe353b2f36d.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;SELECT FOR UPDATE 语句的执行会申请全局锁 ，如果&lt;strong&gt;全局锁&lt;/strong&gt;被其他事务持有，则释放本地锁（回滚 SELECT FOR UPDATE 语句的本地执行）并重试。这个过程中，查询是被 block 住的，直到全局锁拿到，即读取的相关数据是已提交的，才返回。&lt;/p&gt; 
&lt;p&gt;出于总体性能上的考虑，Seata目前的方案并没有对所有 SELECT 语句都进行代理，仅针对 FOR UPDATE 的 SELECT 语句。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;_216&quot;/&gt;本地事务提交&lt;/h6&gt; 
&lt;p&gt;业务数据的更新和前面步骤中生成的UNDO LOG一并提交，将本地事务提交的结果上报给TC。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;AT_220&quot;/&gt;AT模式二阶段-回滚操作&lt;/h5&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;收到TC的分支回滚请求，开启一个本地事务。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;通过XID和Branch ID查找到相应的UNDO LOG 记录。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;数据校验：拿 UNDO LOG 中的后镜与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改。&lt;strong&gt;这种情况，需要根据配置策略来做处理，详细的说明在另外的文档中介绍&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;根据 UNDO LOG 中的前镜像和业务SQL的相关信息生成并执行回滚的语句：&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;update TableXXX set parameter = &#x27;XXX&#x27; where condition = value;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;提交本地事务，并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。&lt;/li&gt;&lt;/ol&gt; 
&lt;h5&gt;&lt;a id=&quot;AT_237&quot;/&gt;AT模式二阶段-提交操作&lt;/h5&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;收到TC的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录。&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1856818b93a96c0e6715c0c8706d4a4f</guid>
<title>MySQL 主从模式采用 GTID 的实践</title>
<link>https://toutiao.io/k/owbwcqm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好，我是悟空。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文主要内容如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3470319634703196&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ0y0kbmE8yz1AjZ9Z2rFCbibQxxhoQjg1QXxBm0NRoM7Oozxb3NIoHNAbxbHVd401nO6xGhw2Nna9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1752&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、背景&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证高可用，之前在测试环境部署了一套 MySQL 双主模式，当一个主库服务出现异常，可以将流量切到另外一个主库，两个主库之间相互同步数据。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;双主模式&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;双主模式的原理图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ34ZChbvlXiakQocdWlE76ddF3osUryJ4DMh6KfMBrXxoPtxVkTV0BibypzY8P9lZCampKTKzeuSYNg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;896&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是经常出现数据冲突的问题，于是我们又把&lt;code&gt;双主模式&lt;/code&gt;改为了&lt;code&gt;主从读写分离模式&lt;/code&gt;。主库作为读写库，再加上一个从库用来做 &lt;span&gt;I/O 密集型&lt;/span&gt;的任务（如大量的数据统计操作）。如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4051094890510949&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ0tibFY1Ml1mCQQQ5mABVZtGE5bL9H5OvrBjC7OWkVbgvTSXxcJ4lGcKRy1riaMQ4uKMDic4AlDibZyLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1096&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外从库复制的模式采用&lt;code&gt;位点&lt;/code&gt;的方式：指定 binlog 文件和 binlog 位置，这样从库就知道了复制的起始位置。(下文会讲解这种方式）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽然改为了主从模式，但依旧遇到了些问题：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;问题 1&lt;/span&gt;：从库 B 复制数据时，出现了主键冲突问题，导致同步失败，从库停止复制。猜测因主库配置的 binlog 日志的格式为 &lt;code&gt;mixed&lt;/code&gt;，从库同步时出现不一致的情况。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;问题 2&lt;/span&gt;：从库 B 停止复制后，导致很多数据未同步到从库，出现主从大量数据不一致的情况。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;问题 3&lt;/span&gt;：从库 B 想要恢复复制，必须先解决同步失败的问题才能恢复。排查难度较大，耗时。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;问题 4&lt;/span&gt;：从库 B 恢复时，必须知道同步&lt;span&gt;位点&lt;/span&gt;，也就是从哪个 binlog 文件和 binlog 位置断开复制的，且即使找到了位点，也不是精确的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;问题 5&lt;/span&gt;：从库 B 因同步异常导致停止复制到恢复复制这段期间，主库 A 自动清理了几天前的 binlog 日志，而这些日志从库 B 还未来得及同步，进而导致再次同步失败。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;问题 6&lt;/span&gt;：主从存在同步延迟。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇我们来探讨下问题 4 和问题 6。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中&lt;strong&gt;问题 4&lt;/strong&gt; 是一个比较头疼的问题，我们一般是通过查看从库 B 当前的同步状态拿到同步位点，然后设置同步位点后。但是重新启动同步的时候又会出现同步异常，比如从库 B 可能会出现 Duplicate entry ‘id_of_R’ for key ‘PRIMARY’ 错误，提示出现了主键冲突，然后停止同步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了减少位点同步引入的复杂度，我们切换成了 GTID 模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于&lt;strong&gt;问题 6&lt;/strong&gt;，本篇也仅限于探讨如何观察延迟，对于如何减少延迟不在本篇探讨范围之内。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们来展开看下位点同步的痛点。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、位点同步的痛点&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 通过位点同步的原理图&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更清晰地理解主从采用位点同步的原理，这里有一个原理图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0513761467889908&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ0y0kbmE8yz1AjZ9Z2rFCbib8mmtZuLRkFYYKNz1P8IZtvL06ogsl4rxTDicPkfeibS3ZUZqH5AJO6PA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1090&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1、&lt;/strong&gt;主库会生成多个 binlog 日志文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2、&lt;/strong&gt;从库的I/O 线程请求指定文件和指定位置的 binlog 日志文件（位点）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3、&lt;/strong&gt;主库 dump 线程获取指定位点的 binlog 日志。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4、&lt;/strong&gt;主库按照从库发送给来的位点信息读取 binlog，然后推送 binlog 给从库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5、&lt;/strong&gt;从库将得到的 binlog 写到本地的 relay log (中继日志) 文件中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;6、&lt;/strong&gt;从库的 SQL 线程读取和解析 relay log 文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;7、&lt;/strong&gt;从库的 SQL 线程重放 relay log 中的命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们使用位点同步的方式时，两种场景下的操作步骤比较复杂。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 痛点&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;痛点1：首次开启主从复制的步骤复杂&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一次开启主从同步时，要求从库和主库是一致的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;找到主库的 binlog 位点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设置从库的 binlog 位点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开启从库的复制线程。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;痛点2：恢复主从复制的步骤复杂&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;找到从库复制线程停止时的位点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;解决复制异常的事务。无法解决时就需要手动跳过指定类型的错误，比如通过设置slave_skip_errors=1032,1062。当然这个前提条件是跳过这类错误是无损的。（1062 错误是插入数据时唯一键冲突；1032 错误是删除数据时找不到行）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;不论是首次开启同步时需要找位点和设置位点，还是恢复主从复制时，设置位点和忽略错误，&lt;span&gt;这些步骤都显得过于复杂，而且容易出错&lt;/span&gt;。所以 MySQL 5.6 版本引入了 GTID，彻底解决了这个困难。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、GTID 方案&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 GTID 是什么？&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GTID 的全称是 Global Transaction Identifier，全局事务 ID，当一个事务提交时，就会生成一个 GTID，相当于事务的唯一标识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GTID 长这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;c5d74746-d7ec-11ec-bf8f-0242ac110002:1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结构：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;GTID=server_uuid:gno&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;server_uuid 是一个实例第一次启动时自动生成的，是一个全局唯一的值；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gno 是一个整数，初始值是 1，每次提交事务的时候分配给这个事务，并加 1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个 MySQL 实例都维护了一个 GTID 集合，用来对应“这个实例执行过的所有事务”。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 GTID 的优势&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;1、更简单的实现 failover，不用以前那样在需要找位点（log_file 和 log_pos）。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;2、更简单的搭建主从复制。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;3、比传统的复制更加安全。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;4、GTID是连续的没有空洞的，保证数据的一致性，零丢失。&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3 如何启用 GTID&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改主库和从库的配置文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#GTID:&lt;/span&gt;&lt;br/&gt;gtid_mode=on&lt;br/&gt;enforce_gtid_consistency=on&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从库配置同步的参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CHANGE MASTER TO &lt;br/&gt;MASTER_HOST=&lt;span&gt;$host_name&lt;/span&gt; &lt;br/&gt;MASTER_PORT=&lt;span&gt;$port&lt;/span&gt; &lt;br/&gt;MASTER_USER=&lt;span&gt;$user_name&lt;/span&gt; &lt;br/&gt;MASTER_PASSWORD=&lt;span&gt;$password&lt;/span&gt; &lt;br/&gt;master_auto_position=1 &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 master_auto_position 标识主从关系使用的 GTID 协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比之前的配置，&lt;span&gt;MASTER_LOG_FILE 和 MASTER_LOG_POS 参数已经不需要了&lt;/span&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.4 GTID 同步方案&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GTID 同步的原理图。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;GTID 方案&lt;/span&gt;：主库计算主库 GTID 集合和从库 GTID 的集合的差集，主库推送差集 binlog 给从库。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当从库设置完同步参数后，主库 A 的GTID 集合记为集合 x，从库 B 的 GTID 集合记为 y。从库同步的逻辑如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0510046367851622&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ0y0kbmE8yz1AjZ9Z2rFCbibxMMj4P6OqEVX92vsZbLcMf8iacasnU9sZxh5mY8iaWwRGAdZQ4NVrPzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1294&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;从库 B 指定主库 A，基于主备协议简历连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从库 B 把集合 y 发给主库 A。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主库 A 计算出集合 x 和集合 y 的差集，也就是集合 x 中存在，集合 y 中不存在的 GTID 集合。比如集合 x 是 1~100，集合 y 是 1~90，那么这个差集就是 91~100。这里会判断集合 x 是不是包含有集合 y 的所有 GTID，如果不是则说明主库 A 删除了从库 B 需要的 binlog，主库 A 直接返回错误。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主库 A 从自己的 binlog 文件里面，找到第一个不在集合 y 中的事务 GTID，也就是找到了 91。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主库 A 从 GTID = 91 的事务开始，往后读 binlog 文件，按顺序取 binlog，然后发给 B。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从库 B 的 I/O 线程读取 binlog 文件生成 relay log，SQL 线程解析 relay log，然后执行 SQL 语句。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;GTID 同步方案和位点同步的方案区别是：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;位点同步方案是通过人工在从库上指定哪个位点，主库就发哪个位点，不做日志的完整性判断。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;而 GTID 方案是通过主库来自动计算位点的，不需要人工去设置位点，对运维人员友好。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、如何判断主从库是否有延迟&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到的问题 6 是主从读写分离后，从库复制存在延迟，接下来我们来探讨下如何观察主从延迟多少的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方案一：判断从库的同步状态参数 seconds_behind_master 是否为 0。（不准确）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方案二：对比位点确保主备无延迟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方案三：对比 GTID 集合确保主备无延迟。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;方案一：查看 seconds_behind_master&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以在从库上执行 slow slave status 命令来看执行结果里面的 &lt;code&gt;seconds_behind_master&lt;/code&gt; 参数的值，如下图所示，Seconds_Behind_Master 等于 0&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3241252302025783&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ0y0kbmE8yz1AjZ9Z2rFCbib5zORALpPyiaoibx58icFTubicaO0fIWVzUgaFibPIWI8Ig6t7eyB6RssWNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;543&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Seconds_Behind_Master 的单位是秒，所以精度不准确。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以为了保证查询的数据是和主库一致的，就需要先判断 seconds_behind_master 是否已经等于 0，如果不等于 0，就必须等到这个参数变为 0 才能执行查询请求。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;方案二：对比位点&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过查看从库当前的同步位点来确认从库同步是否有延迟。下图是在从库上执行 &lt;code&gt;show slave status \G&lt;/code&gt;命令后的结果：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6237288135593221&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ0y0kbmE8yz1AjZ9Z2rFCbibAGHsZXtrS9Kv8ySjbmeq6abW020dXUpqGwU568RxBgkpUDZ9xkb5TA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1180&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Master_Log_File&lt;/code&gt; 和 &lt;code&gt;Read_Master_Log_Pos&lt;/code&gt; 这两个参数合起来表示的是读到的主库的最新位点，第一参数是代表读取到了哪个文件，第二个是读取到的文件的位置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Relay_Master_Log_File&lt;/code&gt; 和 &lt;code&gt;Exec_Master_Log_Pos&lt;/code&gt;，这两个参数合起来表示的是从库执行的最新位点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果红色框起来的两个参数：&lt;code&gt;Master_Log_File&lt;/code&gt; 和 &lt;code&gt;Relay_Master_Log_File&lt;/code&gt; 相等，则说明从库读到的最新文件和主库上生成的文件相同，这里都是 mysql-bin.000934。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果蓝色框起来的两个参数 &lt;code&gt;Read_Master_Log_Pos&lt;/code&gt; 和 &lt;code&gt;Exec_Master_Log_Pos&lt;/code&gt; 相等，则说明从库读到的日志文件的位置和从库上执行日志文件的位置相同，这里都是 59521082。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当上面两组参数都相等时，则说明没有延迟。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;方案三：对比 GTID 集合&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方案三是对比 GTID 集合。首先我们在从库上执行  &lt;code&gt;show slave status \G&lt;/code&gt;来查看 GTID 集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3654970760233918&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ0y0kbmE8yz1AjZ9Z2rFCbibicePBvx54LqrogZqFZQYzA5UQgibEI00Nic2l2QYXMbn0NiaE4HlhsjdPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1026&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Master_UUID&lt;/code&gt; 表示当前连接的主库的 ID。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Auto_Position&lt;/code&gt;: 1 表示主备使用了 GTID 协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Retrieved_Gtid_Set&lt;/code&gt; 表示从库收到的所有日志的 GTID 集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Executed_Gtid_Set&lt;/code&gt; 表示从库已经执行完成的 GTID 集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 Executed_Gtid_Set 集合是包含 Retrieved_Gtid_Set，则表示从库接收到的日志已经同步完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上图中 &lt;code&gt;Retrieved_Gtid_Set&lt;/code&gt; 值为&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;c5d74746-d7ec-11ec-bf8f-0242ac110002:1-87323&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面一段是主库 id，后面一段 1-87383 是 GTID 范围。而&lt;code&gt;Executed_Gtid_Set&lt;/code&gt; 的值有两个集合&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;7083ae1f-d7ef-11ec-a329-0242ac110002:1-2,&lt;br/&gt;c5d74746-d7ec-11ec-bf8f-0242ac110002:1-87323&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Executed_Gtid_Set&lt;/code&gt; 的第二个集合和第一个集合完全一致，第一个集合 id 和 集合范围是上次同步另外一个主库的记录。这里说明从库已经和当前主库同步完成了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方案二对比位点和方案三的 GTID 比对都要比方案一的&lt;code&gt;seconds_behind_master&lt;/code&gt; 更准确。但是还是没有达到精确的程度，需要配合半同步复制（semi-sync replication）才能达到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小结：本篇通过 GTID 的方式更好地实现了主从节点的同步，以及如何观察主从同步的延迟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考资料：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;www.passjava.cn&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://time.geekbang.org/column/article/77636&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高性能 MySQL 第四版&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;千金良方：MySQL性能优化金字塔法则&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>