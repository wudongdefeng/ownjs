<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3ee296fbf3a66527a87514b972a52dd5</guid>
<title>优质网站同好者周刊（第 106 期）</title>
<link>https://toutiao.io/k/s8q11po</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B9%BF%E5%91%8A&quot;&gt;&lt;code&gt;广告&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%88%9B%E6%84%8F&quot;&gt;&lt;code&gt;创意&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Artificial Intelligence powered ad creative and banner generator for better conversion rates.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.adcreative.ai.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Generate ad creatives that help you sell more. Fast.&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.adcreative.ai/&quot;&gt;adcreative.ai&lt;/a&gt; ，一款人工智能（ &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;AI&lt;/a&gt; ：Artificial Intelligence.）驱动广告和社交创意工具；使用人工智能在几秒钟内生成注重转化的广告创意和社交媒体帖子创意。在节省时间的同时获得更好的结果。它具有如下功能特征：&lt;/p&gt;&lt;h3 id=&quot;为合作而生&quot;&gt;&lt;a href=&quot;#%E4%B8%BA%E5%90%88%E4%BD%9C%E8%80%8C%E7%94%9F&quot; aria-label=&quot;为合作而生 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;为合作而生&lt;/h3&gt;&lt;p&gt;邀请多达 25 个用户到 AdCreative.ai，让他们在一个主要账户下同时产生创意。&lt;/p&gt;&lt;h3 id=&quot;文本生成器&quot;&gt;&lt;a href=&quot;#%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90%E5%99%A8&quot; aria-label=&quot;文本生成器 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;文本生成器&lt;/h3&gt;&lt;p&gt;在 AdCreative.ai 内为您的广告生成结果带来的文本&lt;/p&gt;&lt;h3 id=&quot;查看洞察力&quot;&gt;&lt;a href=&quot;#%E6%9F%A5%E7%9C%8B%E6%B4%9E%E5%AF%9F%E5%8A%9B&quot; aria-label=&quot;查看洞察力 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;查看洞察力&lt;/h3&gt;&lt;p&gt;看看哪些创意在你的广告账户上表现最好。&lt;/p&gt;&lt;h3 id=&quot;白标签准备&quot;&gt;&lt;a href=&quot;#%E7%99%BD%E6%A0%87%E7%AD%BE%E5%87%86%E5%A4%87&quot; aria-label=&quot;白标签准备 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;白标签准备&lt;/h3&gt;&lt;p&gt;改变 AdCreative.ai 的标志和 URL，使其真正属于你。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.adcreative.ai/&quot;&gt;AdCreative.ai&lt;/a&gt; 是一种可以在几秒钟内生成即用型、高转化率广告创意和社交媒体帖子创意的生成式 AI。它还为您提供了您以前从未接触过的创造性见解。通过训练有素的人工智能生成的创意/横幅，为您的企业带来不公平的优势。对于独立创造者或个人创业者，在项目伊始，可能没办法请大量优秀设计师、运营推广工作人员，借助类似 AI 工具，或许可以缩小与巨无霸公司的差距，使得能专注于塑造打磨产品。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63f76626f35fb604d891d851&quot;&gt;倾城之链 - Generate ad creatives that help you sell more. Fast.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/CSS&quot;&gt;&lt;code&gt;CSS&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Emotion is a performant and flexible CSS-in-JS library. Building on many other CSS-in-JS libraries, it allows you to style apps quickly with string or object styles. It has predictable composition to avoid specificity issues with CSS. With source maps and labels, Emotion has a great developer experience and great performance with heavy caching in production.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/emotion.sh.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Emotion – The Next Generation of CSS-in-JS&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://emotion.sh/&quot;&gt;Emotion&lt;/a&gt; 是一个性能优异且灵活的 CSS-in-JS 库。在许多其他 CSS-in-JS 库的基础上，它允许你用&lt;strong&gt;字符串或对象&lt;/strong&gt;样式快速为应用程序设置样式。它具有可预测的组成，以避免 &lt;a href=&quot;https://nicelinks.site/tags/CSS&quot;&gt;CSS&lt;/a&gt; 的特殊性问题。通过源码地图（Source Map）和标签，Emotion有很好的开发者体验，并且在生产中通过大量的缓存有很好的性能。&lt;/p&gt;&lt;p&gt;有两种使用 Emotion 的主要方法。第一个与框架无关，第二个用于 &lt;a href=&quot;https://nicelinks.site/tags/React&quot;&gt;React&lt;/a&gt;，分别是：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# common
npm i @emotion/css

# react
npm i @emotion/react
# or
npm i @emotion/styled @emotion/react
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Emotion 支持所有流行的浏览器和 Internet Explorer 11。Web 开发中，CSS 自诞生之日起，就面临挑战性，各路优秀开发者为 CSS 最佳实践，付出了诸多努力；从早起内联写法、到与 HTML 分离；衍生出各种 CSS 预处理、CSS in JS、原子化 CSS 框架 &lt;a href=&quot;https://nicelinks.site/post/5fd20cb4c06d6302c1907ec7&quot;&gt;TailwindCSS&lt;/a&gt;，目前笔者较为喜欢的是 TailwindCSS 以及 SwiftUI 那种链式调用。在 &lt;a href=&quot;https://nicelinks.site/tags/Github&quot;&gt;Github&lt;/a&gt; 你会发现大量优质的方案，从中选择出一个能够让你和团队受益的方案吧！&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63f75274f35fb604d891d770&quot;&gt;倾城之链 - Emotion – The Next Generation of CSS-in-JS&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&quot;&gt;&lt;code&gt;机器学习&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;OpenCV provides a real-time optimized Computer Vision library, tools, and hardware. It also supports model execution for Machine Learning (ML) and Artificial Intelligence (AI).&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/opencv.org.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Home - OpenCV&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://opencv.org/&quot;&gt;OpenCV&lt;/a&gt; （Open Source Computer Vision Library）是一个开源的计算机视觉和机器学习软件库；提供了一个实时优化的计算机视觉库、工具和硬件；它还支持机器学习（ML）和人工智能（AI）的模型执行。它具有如下特征：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;开源&lt;/strong&gt;：OpenCV 在 &lt;a href=&quot;https://github.com/opencv/opencv&quot;&gt;Github 开源&lt;/a&gt;（66.6K+ Star），并在 Apache 2 许可证下发布。它可免费用于商业用途；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;优化&lt;/strong&gt;：OpenCV 是一个高度优化的库，专注于实时应用程序。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;跨平台&lt;/strong&gt;：C++、Python 和 Java 接口支持 Linux、MacOS、Windows、iOS 和 Android。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;OpenCV 旨在为计算机视觉应用程序提供通用基础设施，并加速机器感知在商业产品中的使用。作为 Apache 2 许可产品，OpenCV 使企业可以轻松使用和修改代码。&lt;/p&gt;&lt;p&gt;该库拥有 2500 多个优化算法，其中包括一整套经典和最先进的计算机视觉和机器学习算法。这些算法可用于检测和识别人脸、识别物体、对视频中的人类动作进行分类、跟踪摄像机运动、跟踪移动物体、提取物体的 3D 模型、从立体摄像机生成 3D 点云、将图像拼接在一起以生成高分辨率整个场景的图像，从图像数据库中找到相似的图像，从使用闪光灯拍摄的图像中去除红眼，跟踪眼球运动，识别风景并建立标记以将其与增强现实叠加等。OpenCV 拥有超过 47,000 名用户社区和估计下载量超过 1800 万；该库被公司、研究小组和政府机构广泛使用。&lt;/p&gt;&lt;p&gt;它有 C++、Python、Java 和 MATLAB 接口，支持 Windows、Linux、 &lt;a href=&quot;https://opencv.org/opencv//android/&quot;&gt;Android&lt;/a&gt; 和Mac OS。OpenCV 主要倾向于实时视觉应用程序，并在可用时利用 MMX 和 SSE 指令。 目前正在积极开发功能齐全的 &lt;a href=&quot;https://opencv.org/opencv//cuda/&quot;&gt;CUDA&lt;/a&gt; 和 &lt;a href=&quot;https://opencv.org/opencv//opencl/&quot;&gt;OpenCL接口。&lt;/a&gt; 有超过 500 种算法和大约 10 倍的函数组成或支持这些算法。OpenCV 是用 C++ 原生编写的，具有可与 STL 容器无缝协作的模板化界面。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63f4b145f35fb604d891c6b0&quot;&gt;倾城之链 - Home - OpenCV&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%B8%B8%E6%88%8F&quot;&gt;&lt;code&gt;游戏&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%95%E6%93%8E&quot;&gt;&lt;code&gt;引擎&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Rust&quot;&gt;&lt;code&gt;Rust&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Official webpage for Fyrox game engine. 3D and 2D game engine written in Rust.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/fyrox.rs.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Fyrox | a modern Rust game engine&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://fyrox.rs/&quot;&gt;Fyrox&lt;/a&gt; ，一个功能丰富的、生产就绪的、通用的 2D /。 &lt;a href=&quot;https://nicelinks.site/tags/3D&quot;&gt;3D&lt;/a&gt; 游戏引擎，用 &lt;a href=&quot;https://nicelinks.site/tags/Rust&quot;&gt;Rust&lt;/a&gt; 编写，带有场景编辑器（以前称为 &lt;code&gt;rg3d&lt;/code&gt;）。它具有如下功能特征：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;一流的 2D 和 3D 支持&lt;/strong&gt;：创建 2D 或 3D 游戏，甚至混合 2D 和 3D。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;高质量的灵活渲染器&lt;/strong&gt;：强大且可扩展的渲染器将满足您的大部分需求。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;高品质双耳音响系统&lt;/strong&gt;：使用强大的音响系统创造丰富的声音环境。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;高级 2D/3D 物理&lt;/strong&gt;：刚体、各种碰撞器、关节、光线投射等。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;高级用户界面&lt;/strong&gt;：使用强大的 UI 系统来创建受您想象力限制的界面。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;强大的动画系统&lt;/strong&gt;：使用内置动画系统创建复杂的动画。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;多平台&lt;/strong&gt;：为 PC（Windows、Linux、macOS）和 Web ( &lt;a href=&quot;https://nicelinks.site/tags/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt; ) 制作游戏；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;插件和脚本&lt;/strong&gt;：完全用 Rust 编写您的游戏，同时能够在编辑器中运行它。使用自定义插件扩展引擎的功能。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;场景图&lt;/strong&gt;：功能齐全，具有各种节点（枢轴、相机、网格、灯光、粒子系统、精灵），包括您自己的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;没有场景编辑器的&lt;strong&gt;游戏引擎&lt;/strong&gt;会是什么呢？ &lt;a href=&quot;https://nicelinks.site/redirect?url=https://fyrox.rs/&quot;&gt;Fyrox&lt;/a&gt; 提供了自己的编辑器 - &lt;code&gt;FyroxEd&lt;/code&gt;。它使您可以立即创建游戏场景，支持大量功能；如果您已准备好在今天创造明天的游戏，运行如下命令即可开始制作：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cargo new my-awesome-game
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fyrox 在 &lt;a href=&quot;https://github.com/FyroxEngine/Fyrox&quot;&gt;Github 开源&lt;/a&gt; ，如果您对于游戏或 fyrox 感兴趣，可移步 &lt;a href=&quot;https://fyrox.rs/features.html&quot;&gt;Fyrox 更多功能介绍&lt;/a&gt; ，从而了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63f35eb23f8ac0238dc7ba85&quot;&gt;倾城之链 - Fyrox | a modern Rust game engine&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E7%A8%8B%E5%BA%8F%E5%BA%93&quot;&gt;&lt;code&gt;程序库&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Internationalization Framework for Global Products. A readable, automated, and optimized (5 kb) internationalization for JavaScript.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/lingui.dev.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Lingui | Internationalization Framework for Global Products&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://lingui.dev/&quot;&gt;Lingui&lt;/a&gt; ，是一个简单而强大的全球项目国际化框架，用于 JavaScript 项目内部化 (i18n) 的 JavaScript 库，包括 &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;React&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot;&gt;Vue&lt;/a&gt; 、Node.js 和 Angular。它具有如下功能特征：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;通用&lt;/strong&gt;：随处使用。&lt;code&gt;@lingui/core&lt;/code&gt; 提供适用于任何 JavaScript 项目的基本国际功能，同时 &lt;code&gt;@lingui/react&lt;/code&gt; 提供组件以利用 React 渲染。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;清洁和可读&lt;/strong&gt;- 保持您的代码清洁和可读，而库在引擎盖下使用久经考验且功能强大的 &lt;strong&gt;ICU MessageFormat&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;强大的工具&lt;/strong&gt;：使用 Lingui CLI 管理整个国际工作流程。它从源代码中提取消息，验证来自翻译器的消息，并检查所有消息在交付生产之前是否已翻译。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;完整的富文本支持&lt;/strong&gt;：在本地化消息中使用 React 组件没有任何限制。编写富文本消息就像编写 JSX 一样简单。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;适用于所有本地化平台&lt;/strong&gt;：将 Lingui 集成到您现有的工作流程中。它支持消息键以及自动生成的消息。翻译存储在 JSON 或标准 PO 文件中，几乎所有翻译工具都支持这种格式。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;不拘一格&lt;/strong&gt;：将 Lingui 集成到您现有的工作流程中。它支持消息键以及自动生成的消息。翻译存储在 JSON 或标准 PO 文件中，几乎所有翻译工具都支持这些文件。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;轻量级和优化&lt;/strong&gt;：核心库只有 1.7 kB gzip 压缩，React 组件是额外的 1.6 kBs gzip 压缩。对于功能齐全的 intl 库，这比 Redux 要少。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;完全成熟&lt;/strong&gt;：Lingui 是一个具有 React 绑定的通用框架。在 Node.js 或 Vanilla JavaScript 的服务器上使用它。 一组可选模块将实现语言包的延迟加载、用户区域设置检测等。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;免费且完全支持&lt;/strong&gt;：通过 Lingui，您可以免费使用强大的 i18n 工具，Lingui 团队随时可以帮助您解决任何问题。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;将 Lingui 集成到您的项目中很容易，具体可以参见如下示例：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { Trans } from &quot;@lingui/macro&quot;

function App() {
  return (
    &amp;lt;Trans id=&quot;msg.docs&quot;&amp;gt;
      Read the &amp;lt;a href=&quot;https://lingui.dev&quot;&amp;gt;documentation&amp;lt;/a&amp;gt;
      for more info.
    &amp;lt;/Trans&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;国际化（Internationalization，简称：&lt;code&gt;18n&lt;/code&gt;）是产品、应用程序或文档内容的设计和开发，可以轻松地为不同文化、地区或语言的目标受众进行本地化。如果您的 Web 应用，有考虑国际化相关诉求，Lingui 非常值得纳入考虑；如果您对其感兴趣，不妨移步 &lt;a href=&quot;https://github.com/lingui/js-lingui&quot;&gt;js-lingui 开源仓库&lt;/a&gt; 从而了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63f359873f8ac0238dc7b9a3&quot;&gt;倾城之链 - Lingui | Internationalization Framework for Global Products&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/WebAssembly&quot;&gt;&lt;code&gt;WebAssembly&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/runtime&quot;&gt;&lt;code&gt;runtime&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0&quot;&gt;&lt;code&gt;跨平台&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Wasmtime is a Bytecode Alliance project that is a standalone wasm-only optimizing runtime for WebAssembly and WASI. It runs WebAssembly code outside of the Web, and can be used both as a command-line utility or as a library embedded in a larger application.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/wasmtime.dev.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Wasmtime | A fast and secure runtime for WebAssembly&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://wasmtime.dev/&quot;&gt;Wasmtime&lt;/a&gt; ：&lt;strong&gt;WebAssembly 的快速安全运行时&lt;/strong&gt;；它是一个 &lt;a href=&quot;https://bytecodealliance.org/&quot;&gt;字节码联盟&lt;/a&gt; 项目，它是一个独立的 wasm-only 优化运行时，用于 &lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt; 和 &lt;a href=&quot;https://wasi.dev/&quot;&gt;WASI&lt;/a&gt; 。 &lt;a href=&quot;https://webassembly.org/docs/non-web/&quot;&gt;它在 Web 之外&lt;/a&gt; 运行 WebAssembly 代码，既可以用作命令行实用程序，也可以用作嵌入到更大应用程序中的库。可以通过以下功能特征更清晰了解 &lt;code&gt;wasmtime&lt;/code&gt;：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;快速&lt;/strong&gt;：它建立在优化的 &lt;a href=&quot;https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/README.md&quot;&gt;Cranelift&lt;/a&gt; 代码生成器之上，可以在运行时或提前快速生成高质量的机器代码。Wasmtime 针对高效实例化、嵌入器和 wasm 之间的低开销调用以及并发实例的可扩展性进行了优化。此外还具有安全、可配置、符合标准等特征。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;安全&lt;/strong&gt;：Wasmtime 的开发非常注重正确性和安全性。在 Rust 的运行时安全保证的基础上，Wasmtime 的每个功能都通过 RFC 程序进行仔细的审查和考虑。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;可配置的&lt;/strong&gt;：Wasmtime 使用合理的默认值，但也可以进行配置，以提供更精细的控制，如 CPU 和内存消耗。无论您是想在一个小环境中运行 Wasmtime，还是在有许多并发实例的大型服务器上运行，我们都能满足您的要求。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;WASI&lt;/strong&gt;：Wasmtime 支持一套丰富的 API，通过 WASI 标准与主机环境进行交互。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;符合标准&lt;/strong&gt;：Wasmtime 通过了官方的 WebAssembly 测试套件，实现了 wasm 的官方 C API，也实现了对 WebAssembly 的未来建议。Wasmtime 的开发者也一直密切参与 WebAssembly 的标准过程。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Wasmtime 致力于成为一个高度可配置和可嵌入的运行时，以在任何规模的应用程序上运行。截止目前（2023 年 02 月 20 日）它已支持 Rust、C、C++、Python、C#、GO、Ruby 等语言，您可以通过嵌入实现来使用各种不同语言的 Wasmtime。随着 WebAssembly 蓬勃发展，除了 Wasmtime、还有 &lt;a href=&quot;https://nicelinks.site/post/63ee15303ca14e0315d819ec&quot;&gt;WasmEdge&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/63789f3c049fa51046c4a8f3&quot;&gt;Wasmer&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/63ee1d1d3ca14e0315d81b2f&quot;&gt;Bun&lt;/a&gt; 等等多达数十款开源产品，如果您对此想了解更多，不妨移步 &lt;a href=&quot;https://github.com/appcypher/awesome-wasm-runtimes&quot;&gt;Awesome WebAssembly Runtimes&lt;/a&gt; 仓库（包含执行 WebAssembly(wasm) 格式和/或将其编译为可执行机器代码的虚拟机和工具列表）。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63f323623f8ac0238dc7b798&quot;&gt;倾城之链 - Wasmtime | A fast and secure runtime for WebAssembly&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;人的外表，其实什么都不是，皮囊而已，在时间里，皮囊终会老去，最后所有的光鲜都会被褶皱吞噬，而灵魂不会，这灵魂里包括你走过的路，经历过的事，还有你一生的思考。──当代著名作家 · 王小波&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>77ec6eae48dd027ab3d584cfb500fcca</guid>
<title>还在苦于提升代码质量？快来试试这个方法</title>
<link>https://toutiao.io/k/bkq7vra</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;👆&lt;/span&gt;&lt;span&gt;点击“&lt;/span&gt;&lt;span&gt;博文视点Broadview&lt;/span&gt;&lt;span&gt;”，获取更多书讯&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05669291338582677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nr1VNxfeqxVOw2nPJHVH4xeZibzPY5F4ibOuOZLMsUMrzIibGB6KMw7EurSKv6DkrtLzuhYdBa30A9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.10027855153203342&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PW0wIHxgg3npgLu0khEqdibc8UNib9mUOF5Oic7ofxC1krfeqOz5wtoEWMiczOpKGic8QcQLLuSPHicTEZhBqib9LGTeA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1077&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;121695&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;作为你一名有追求的程序猿，你是否苦于该如何提升自己的编码质量呢？&lt;img data-src=&quot;https://res.wx.qq.com/t/wx_fed/we-emoji/res/v1.3.10/assets/newemoji/LetMeSee.png&quot; data-ratio=&quot;1&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;博文菌最近听说一种好用的方法，分享给大家&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://res.wx.qq.com/t/wx_fed/we-emoji/res/v1.3.10/assets/Expression/Expression_14@2x.png&quot; data-w=&quot;20&quot;/&gt;~~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那就是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;学习优秀框架的设计思想和设计模式在实际场景中的应用方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;！&lt;img data-src=&quot;https://res.wx.qq.com/t/wx_fed/we-emoji/res/v1.3.10/assets/newemoji/Party.png&quot; data-ratio=&quot;1&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据说，这样可以非常有效地提高架构师和研发人员对业务工程架构的设计能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然如此，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;选择哪个框架进行学习比较好呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实，大家天天接触的神级开源框架——MyBatis，就是绝好的学习素材！&lt;img data-src=&quot;https://res.wx.qq.com/t/wx_fed/we-emoji/res/v1.3.10/assets/Expression/Expression_93@2x.png&quot; data-ratio=&quot;1&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;117920&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;为何选择MyBatis&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MyBatis作为&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一款优秀的ORM框架&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，通过配置XML文件或Java注解的方式，将Java代码中DAO对象类与SQL语句进行映射关联，完成对数据库的增、删、改、查操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于MyBatis具有&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简单、易用和灵活&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;等特性，所以成为众多互联网公司开发Java项目的首选ORM框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在遇到MyBatis的报错提醒，以及需要基于MyBatis开发各类技术插件时，大部分研发人员会尝试阅读MyBatis源码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于MyBatis源码体量庞大、语法复杂，也不像平常的业务流程代码一样具有分层结构，并且使用了大量的设计模式，因此理解难度比较大。研发人员很难厘清其中的各个代码类的调用顺序和各个类之间的关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;架构师和研发人员在熟练使用MyBatis的过程中，重要的一点是掌握其源码设计，这样可以将其精妙的设计模式和设计原则运用到日程编码中。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;117920&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;2&quot;&gt;2&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;怎样学好MyBatis&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;要想学习优秀的开源框架，有一条极佳的学习路线。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那就是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;手写源码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过手写源码，对开源框架功能的细节进行拆解，并按照项目的实现过程分析每个功能逻辑的设计原则、设计方案和落地代码，以渐进式地完成整个框架的开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如此，就像做一个项目一样，完整实现开源框架的功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技&lt;/span&gt;&lt;span&gt;术清流小付哥在手写MyBatis 源码的实践中就受益匪浅！&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://res.wx.qq.com/t/wx_fed/we-emoji/res/v1.3.10/assets/newemoji/Social.png&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他通过对 MyBatis 框架的理解和多年中间件的开发经验，把MyBatis框架拆解，用一种以需求驱动、分支开发、渐进实现的方式形成了自己独有的一套学习方法，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;即使是编程小白，也能沿着这条路走到终点得到收获。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了帮助更多开发者提升代码质量，轻松学习MyBatis源码，写出有价值的设计方案，小付哥总结了手写MyBatis源码过程中的点点滴滴，特编纂成书，以飨读者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2698412698412698&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/moaR7nLaQrFbZ79iaJB6uqGWs9nkpHROPFOf9qAgb3Kzd6FX9gImI80BbAOvAOe70ncD278793picOHiaDQoJibPfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;189&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;94022&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-bgless=&quot;spin&quot; data-bglessp=&quot;280&quot; data-bgopacity=&quot;50%&quot; data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;本书内容&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书共22章。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书通过渐进式的开发方式实现整个 MyBatis 核心源码的开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每章开头先列出难度和重点，再介绍要处理的问题、具体设计和实现代码，最后给出测试验证和总结。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;94022&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-bgless=&quot;spin&quot; data-bglessp=&quot;280&quot; data-bgopacity=&quot;50%&quot; data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;本书特点&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;学习优秀框架源码，不应该脱离其本身来实现一个简单的ORM框架，更不应该只是用一些自己的想法来代替原有的设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果脱离MyBatis源码的核心实现学习MyBatis，就会缺少对解决复杂设计问题的思考，也很难学习到设计模式在框架中的运用方法，更无法了解各个模块的分层逻辑。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，本书内容&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;从使用几个类就能写出简单的ORM框架开始，渐进式地扩展为拆解MyBatis，逐步扩展到使用100多个类完整实现一个核心的MyBatis框架。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8756756756756757&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/moaR7nLaQrFbZ79iaJB6uqGWs9nkpHROPyIhHAxFXNGcqjru2BGHFrXexResaH2klzWTfPG8F5gLf0bCyd09Trg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;555&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;94022&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-bgless=&quot;spin&quot; data-bglessp=&quot;280&quot; data-bgopacity=&quot;50%&quot; data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;业内专家推荐&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;3.982315112540193&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3micpZYH5uA4WXsb955ZVWmOwH82WtXzsGZvoQfyo36lpxnQicYwx3UncH04teHgIPRF4cMiaHklyWFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;622&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;94022&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-bgless=&quot;spin&quot; data-bglessp=&quot;280&quot; data-bgopacity=&quot;50%&quot; data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2314814814814814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/moaR7nLaQrFbZ79iaJB6uqGWs9nkpHROPKrajpfRzh5NBUYxpH3vD6icqcbGDCrCWP2l4O4z3KOJL5fzaV7b8m8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;108&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;付政委（小傅哥）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一名一线互联网Java工程师、架构师，曾开发过交易、营销类项目，运营、活动类项目，设计过中间件，组织过系统重构，编写过技术专利。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他不仅从事业务系统的开发工作，也经常做一些字节码插桩类的设计和实现，对架构的设计和落地具有丰富的经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他既热衷于Java语言，也喜欢研究中继器、I/O板卡、C#和PHP，是一名活跃的技术“折腾者”。常逛GitHub，乐于分享技术文章。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;沉淀、分享、成长，让自己和他人都能有所收获！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;5.00431654676259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3micpZYH5uA4WXsb955ZVWmOMPSjdjwXFE89YmpPJ4iauIt4eAgcMOrxBE0dgEcnOjvIbSrL2bVSvMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;695&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3micpZYH5uA4WXsb955ZVWmOjL6QDuzUcXjLhhXDXlrUEyiat6pelWz29MvN8fw3vl8MoYicGgXsIf7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;263&quot; data-width=&quot;203px&quot; title=&quot;手写mybatis二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;限时五折优惠，快快扫码抢购吧！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;94013&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;1.6167664670658684&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/7QRTvkK2qC6EKB3qBHxT1pNjWWaBmsyddIgGDPoUFAfqOJ01k5aGCNzal5A2caXCzfFbcqXxc3kBc4nhicVjNDw/640?wx_fmt=gif&quot; data-w=&quot;334&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;每日抽奖赠书&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3micpZYH5uA4WXsb955ZVWmOhmaeQShJPFFzibZ2QiasZCjemdYicnsUo4KhvSK82xkVhW4XYzzrkqTow/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;450&quot; data-width=&quot;134px&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;发布：刘恩惠&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;审核：陈歆懿&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt; &lt;section data-role=&quot;splitline&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;16401&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果喜欢本文&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;欢迎&lt;/span&gt; &lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;留言&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;分享至朋友圈&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 三连&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;119077&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;&amp;lt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;  PAST · 往期回顾 &lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt; &amp;gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTk0NjMwOQ==&amp;amp;mid=2651170970&amp;amp;idx=1&amp;amp;sn=cbc1b003e19cd0295c8a5610e73d1c5b&amp;amp;chksm=bd01c2b08a764ba6a3ec3db91e81681ed23f9b914c697b0383a93799c6f0369367f35ee6db66&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;246&quot; data-ratio=&quot;0.4257531324980005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lYuBtn8xp0m5YtHeje4pzXp3zNiaicuTP8TApHwI4gk9fOvO4sQDMrH86ePYS89nic0UhEBPiaSMA7Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3751&quot; data-width=&quot;100%&quot; title=&quot;默认标题__2023-02-10+17_41_32.png&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTk0NjMwOQ==&amp;amp;mid=2651171533&amp;amp;idx=1&amp;amp;sn=49be4b0679c28d3a5146e6441abb2310&amp;amp;chksm=bd01c0e78a7649f1208cc599d05e854d8e098cc467178c099fd4b2739b7aff55e86465c59b01&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;对谈 | AI大咖告诉你，有关ChatGPT的一切（上篇）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;对谈 | AI大咖告诉你，有关ChatGPT的一切（上篇）&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;574&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;244&quot; data-ratio=&quot;0.4777777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3npgLu0khEqdibc8UNib9mUOFWz3Av7aEWkgib7uEOIIVCVonIgnJrUgibElFcvUXFAIMOvoxHX3gqU5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;900-400_画板 1-1.png&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/fgnkxfGnnkTMNtGy7KWfCrdJibAYY6HtIGhhtVOFQXzkE5GcmZIhTLgxggMlCe3oMwqKNesBDoU7kfgzFHuxyeA/640?wx_fmt=gif&quot; data-w=&quot;160&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点击阅读原文，查看本书详情！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e941fe65f80ac50c762c45199a2afded</guid>
<title>string 性能优化之存储：栈或者堆</title>
<link>https://toutiao.io/k/d3rnd0r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             &quot; id=&quot;js_content&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0MzI4OTI1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/p3sYCQXkuHhKgtwWvzaYZodgfpphdA6WWKEMXTn6ImCCCuEzlPKicNBcpzBUyjK1XicWwqIwusqLGpwyyOc87JPQ/0?wx_fmt=png&quot; data-nickname=&quot;高性能架构探索&quot; data-alias=&quot;gxnjgts&quot; data-signature=&quot;专注于分享干货，硬货，欢迎关注😄&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;你好，我是雨乐！&lt;/p&gt;&lt;p&gt;对于C++开发人员来说，string大概是使用最多的标准库数据结构之一，一直以来也就仅限于使用，对于底层实现似懂非懂。所以，最近抽出点时间，大致研究了下string的底层实现。今天，就从内存分配的角度来分析下string的实现机制。&lt;/p&gt;&lt;h2&gt;直接分配&lt;/h2&gt;&lt;p&gt;大概在08年的时候，手动实现过string，没有考虑性能，所以单纯是从功能的角度进行实现，下面摘抄了部分代码，如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    size_ &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;strlen&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    buffer_ &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;size_&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;strcpy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;buffer_&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; str&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    size_ &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; str&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;size_&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; data &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;size_&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;strcpy&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; buffer_&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;strcat&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; str&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;buffer_&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt; buffer_&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    buffer_ &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; data&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码为string的部分成员函数，从上述实现可以看出，无论是构造还是拷贝，都是重新在堆上(使用new关键字)分配一块内存。这样做的优点是实现简单，而缺点呢，因为每次都在堆上进行分配，而堆上内存的分配效率非常差(当然是相对栈来说的)，所以有没有更好的实现方式呢？下面我们看先STL中的基本实现。&lt;/p&gt;&lt;h2&gt;SSO&lt;/h2&gt;&lt;p&gt;记得之前在看Redis源码的时候，对整数集合(intset)有个优化:&lt;strong&gt;根据新元素的类型，扩展整数集合底层数组的空间大小，并未新元素分配空间&lt;/strong&gt;，也就是说，假设在初始的时候，集合中最大的数为3，那么这个时候集合的类型为INT_16，如果此时新增一个元素为65536，那么就将集合的类型更改为INT_32，并重新为集合分配空间，将之前的数据进行类型扩展。&lt;/p&gt;&lt;p&gt;那么string有没有类似Redis整数集合的功能，进行类型升级呢？&lt;/p&gt;&lt;p&gt;带着这个疑问，研究了string源码，发现里面使用了一个名为&lt;strong&gt;SSO&lt;/strong&gt;的优化策略~~~&lt;/p&gt;&lt;p&gt;SSO为&lt;code&gt;Small String Optimization&lt;/code&gt;的简写，中文译为&lt;code&gt;小字符串优化&lt;/code&gt;，基本原理是：&lt;strong&gt;当分配大小小于16个字节时候，从栈上进行分配，而如果大于等于16个字节，则在堆上进行内存分配&lt;/strong&gt;。PS：需要注意的是，此优化自GCC5.1生效，也就是说对于GCC版本小于5的，无论长度为多少，都从堆上进行分配。&lt;/p&gt;&lt;p&gt;为了证实上述结论，测试代码如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;include&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;include&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;include&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;operator&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;&lt;span&gt;size_t&lt;/span&gt;&lt;/span&gt;&lt;span&gt; n&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;cout &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;[Allocating &quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; n &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot; bytes]&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;malloc&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;operator&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; p&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;free&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;size_t&lt;/span&gt;&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;24&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;cout &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;: &quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&#x27;=&#x27;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;endl&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述代码中，我们重载了operator new，以替换string中的new实现，这样做的好处是，可以通过输出来发现是否调用了new进行动态分配。&lt;/p&gt;&lt;p&gt;G++ 4.9.4版本输出如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;27&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;28&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;29&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;====&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=====&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;31&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;======&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=======&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;33&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;35&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;==========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;37&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;============&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;38&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=============&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;39&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;==============&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===============&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;41&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;43&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;==================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;44&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;45&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;====================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;46&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=====================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;47&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;======================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;48&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=======================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GCC5.1 输出如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;====&lt;/span&gt;&lt;br/&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=====&lt;/span&gt;&lt;br/&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;======&lt;/span&gt;&lt;br/&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=======&lt;/span&gt;&lt;br/&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;==========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;============&lt;/span&gt;&lt;br/&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=============&lt;/span&gt;&lt;br/&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;==============&lt;/span&gt;&lt;br/&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;===============&lt;/span&gt;&lt;br/&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]=================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;19&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]==================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;19&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]===================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]====================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]=====================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]======================&lt;/span&gt;&lt;br/&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Allocating&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;24&lt;/span&gt;&lt;span&gt; bytes&lt;/span&gt;&lt;span&gt;]=======================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从GCC5.1的输出内容可以看出，当字符串长度小于16的时候，&lt;strong&gt;没有调用我们的operator new函数&lt;/strong&gt;，这就从侧面证明了前面的结论&lt;code&gt;当分配大小小于16个字节时候，从栈上进行分配，而如果大于等于16个字节，则在堆上进行内存分配&lt;/code&gt;。(PS:GCC4.9.4版本的输出，分配字节数大于实际的字节数，这个是string的又一个优化策略，即&lt;code&gt;预分配&lt;/code&gt;策略，在后面的内容中将会讲到)。&lt;/p&gt;&lt;h3&gt;直奔主题&lt;/h3&gt;&lt;p&gt;不妨闭上眼睛，仔细想下，如果让我们自己来实现该功能，你会怎么做？&lt;/p&gt;&lt;p&gt;可能大部分人的思路是：定义一个固定长度的char数组，在进行构造的时候，判断字符串的长度，如果长度小于某个定值，则使用该数组，否则在堆上进行分配~~~&lt;/p&gt;&lt;p&gt;好了，为了验证上述思路与具体实现是否一致，结合源码一起来分析~~&lt;/p&gt;&lt;p&gt;首先，摘抄了部分string的源码，如下：&lt;span&gt;string源码&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;template&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;basic_string&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;// Use empty-base optimization: http://www.cantrip.org/emptyopt.html&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; allocator_type &lt;/span&gt;&lt;span&gt;&lt;span&gt;// TODO check __is_final&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;pointer __dat&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;allocator_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__a&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; _M_p&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__dat&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    pointer _M_p&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;// The actual data.&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt; _M_dataplus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  size_type     _M_string_length&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;enum&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; _S_local_capacity &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;sizeof&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;union&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;           _M_local_buf&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;_S_local_capacity &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      size_type        _M_allocated_capacity&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面抽出了我们需要关注的部分代码，只需要关注以下几个点：&lt;/p&gt;&lt;p&gt;从上述源码中，我们看到有个变量&lt;code&gt;_M_local_buf&lt;/code&gt;，从字面意思看就是一个本地或者局部buffer，猜测是用来存储大小不足16字节的内容，为了证实我们的猜测，下面结合GDB一起再分析下SSO的实现机制，示例代码如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;include&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;str&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;gdb调试代码如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Single&lt;/span&gt;&lt;span&gt; stepping &lt;/span&gt;&lt;span&gt;until&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; main&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;which has &lt;/span&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt; line number information&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;__cxx11&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;basic_string&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;char_traits&lt;/span&gt;&lt;span&gt;&amp;lt;char&amp;gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;allocator&lt;/span&gt;&lt;span&gt;&amp;lt;char&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;gt;::&lt;/span&gt;&lt;span&gt;basic_string&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt;*,&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;allocator&lt;/span&gt;&lt;span&gt;&amp;lt;char&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt;&amp;amp;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    at &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;gcc&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;5.4&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;x86_64&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;unknown&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;gnu&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;libstdc&lt;/span&gt;&lt;span&gt;++-&lt;/span&gt;&lt;span&gt;v3&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;bits&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;basic_string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;454&lt;/span&gt;&lt;br/&gt;&lt;span&gt;454&lt;/span&gt;&lt;span&gt;       basic_string&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;br/&gt;&lt;span&gt;141&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;pointer_traits&lt;/span&gt;&lt;span&gt;&amp;lt;pointer&amp;gt;&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;pointer_to&lt;/span&gt;&lt;span&gt;(*&lt;/span&gt;&lt;span&gt;_M_local_buf&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; n&lt;/span&gt;&lt;br/&gt;&lt;span&gt;454&lt;/span&gt;&lt;span&gt;       basic_string&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;456&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; _M_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; traits_type&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;length&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;npos&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;141&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;pointer_traits&lt;/span&gt;&lt;span&gt;&amp;lt;pointer&amp;gt;&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;pointer_to&lt;/span&gt;&lt;span&gt;(*&lt;/span&gt;&lt;span&gt;_M_local_buf&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;456&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; _M_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; traits_type&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;length&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;npos&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;267&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __builtin_strlen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;456&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; _M_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; traits_type&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;length&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;npos&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;195&lt;/span&gt;&lt;span&gt;           _M_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__beg&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __end&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Tag&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;gdb&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;456&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; _M_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; traits_type&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;length&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;npos&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;单从上述信息不能很明确的了解整个构造过程，我们留意到构造的过程在&lt;code&gt;basic_string.h:454&lt;/code&gt;，所以就通过源码进行分析，如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;basic_string&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; _M_dataplus&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_M_local_data&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; _M_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; traits_type&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;&lt;span&gt;length&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;npos&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;_M_construct从函数字面看出是用来构造该对象，在后面进行分析，下面先分析下M_dataplus函数实现，&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;      _M_local_data&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; __cplusplus &amp;gt;= 201103L&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;pointer_traits&lt;/span&gt;&lt;span&gt;&amp;lt;const_pointer&amp;gt;&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;&lt;span&gt;pointer_to&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(*&lt;/span&gt;&lt;span&gt;_M_local_buf&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;const_pointer&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_M_local_buf&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在前面内容中，提到过_M_dataplus用来指向实际存储数据的地址，在basic_string()函数的构造中，首先将__M_dataplus指向local_buf，然后调用__M_construct进行实际构造，而M_construct最终会调用如下代码：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;template&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&lt;span&gt;template&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_InIterator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      basic_string&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;::&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      _M_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_InIterator&lt;/span&gt;&lt;span&gt; __beg&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_InIterator&lt;/span&gt;&lt;span&gt; __end&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                   std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;forward_iterator_tag&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// NB: Not required, but considered best practice.&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__gnu_cxx&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;__is_null_pointer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__beg&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; __beg &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; __end&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;__throw_logic_error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__N&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;basic_string::&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                                       &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;_M_construct null not valid&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        size_type __dnew &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;static_cast&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;size_type&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;&lt;span&gt;distance&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__beg&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __end&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__dnew &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;size_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_S_local_capacity&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            _M_data&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_M_create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__dnew&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;size_type&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)));&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            _M_capacity&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__dnew&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;span&gt;// Check for out_of_range and length_error exceptions.&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        __try&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;this&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_S_copy_chars&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_M_data&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; __beg&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __end&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        __catch&lt;/span&gt;&lt;span&gt;(...)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            _M_dispose&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            __throw_exception_again&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;        _M_set_length&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__dnew&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述代码中，&lt;code&gt;首先计算当前字符串的实际长度，如果长度大于_S_local_capacity即15，那么则通过_M_create在堆上创建一块内存，最后通过_S_copy_chars函数进行内容拷贝&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;结语&lt;/h2&gt;&lt;p&gt;本文中的测试环境基于Centos6.8 &amp;amp; GCC5.4，也就是说在本环境中，&lt;code&gt;string中如果实际数据小于16个字节，则在本地局部存储，而大于15字节，则存储在堆上&lt;/code&gt;，这也就是string的一个优化特性SSO(&lt;code&gt;Small String Optimization&lt;/code&gt;)。在查阅了相关资料，发现15字节的限制取决于编译器和操作系统，在fedora和red-hat中，字符串总是存储在堆中（来自于网络，由于手边缺少相关环境，所以未能验证，抱歉）。&lt;/p&gt;&lt;p&gt;好了，今天的文章就到这，我们下期见！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果对本文有疑问可以加笔者&lt;span&gt;&lt;strong&gt;微信&lt;/strong&gt;&lt;/span&gt;直接交流，笔者也建了C/C++相关的技术群，有兴趣的可以联系笔者加群。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p3sYCQXkuHiaA3xxTGkIcH0JjQo83fJ8JZPMOM7IrSb3r6zGUQGsP6fMsBhGXeoMw43aL9OEACnPAHdSKmuDljQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90215&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot; data-width=&quot;100%&quot;&gt;&lt;strong&gt;往期&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;精彩&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;回顾&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-bdless=&quot;spin&quot; data-bdlessp=&quot;280&quot; data-bdopacity=&quot;50%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247489003&amp;amp;idx=1&amp;amp;sn=14d7cdd4bdca41cc260763328649c8b4&amp;amp;chksm=c337732cf440fa3a5ee529957c7ac81680ff5d4d3ecf38865af13dcf3b3e96b68fbd9a6719e4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C语言不支持重载，多种main()如何实现的呢？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;C语言不支持重载，多种main()如何实现的呢？&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488842&amp;amp;idx=1&amp;amp;sn=d39efe4a60dfc2a2146bbdfa37442e71&amp;amp;chksm=c337738df440fa9bd4000d097c76ef530b13f0d4c53ee45a03a0a033ea57b7b0b3f436af1e4a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;惯用法之CRTP&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;惯用法之CRTP&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488826&amp;amp;idx=1&amp;amp;sn=5ec3f6e6959b51de02b850aeee609f34&amp;amp;chksm=c33773fdf440faebd97a0184c3e30ce77b3ce306d7d6dea9967ece6bef41e9f6d9d9030b2a62&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;聊聊内存模型与内存序&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;聊聊内存模型与内存序&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488441&amp;amp;idx=1&amp;amp;sn=f75be00bcd12934c2e7331956707a429&amp;amp;chksm=c337757ef440fc6816fdef3c144361a0e21ebe24da6ea497d8122ca04c81c7dcc40445ae3f1a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;vector初始化与否导致的巨大性能差异&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;vector初始化与否导致的巨大性能差异&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488372&amp;amp;idx=1&amp;amp;sn=f3acc2893cbafc99c21203f4db0e24ee&amp;amp;chksm=c33775b3f440fca5410edde4ce29f1cbeec7c1734357e54c02bbe549ed3f435a4243f7e8d297&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;问题解决了，我却不知道原因&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;问题解决了，我却不知道原因&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488290&amp;amp;idx=1&amp;amp;sn=c4d2416b3ee3968303379a8cef66105d&amp;amp;chksm=c33775e5f440fcf30a3a8bef429eb199577f71a15d688ddf729ed1edbb94d119d58c470195f1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;揭开lambda的神秘面纱&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;揭开lambda的神秘面纱&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488149&amp;amp;idx=1&amp;amp;sn=4b7718a8798245b3a50e1fc9aebf5dee&amp;amp;chksm=c3377452f440fd44d13a4a99d3e16a2d06de0539b9f8365b7346de9c8037ea91b59f46df934f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;多态实现-虚函数、函数指针以及变体&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;多态实现-虚函数、函数指针以及变体&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488000&amp;amp;idx=1&amp;amp;sn=156cad69e290f1e898cded46cd4cedc9&amp;amp;chksm=c33774c7f440fdd1e7db21f175029adcf622fe53f1968bb8acefa027bf95f01d5e2c2bb3d7a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【Modern C++】深入理解移动语义&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;【Modern C++】深入理解移动语义&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247487751&amp;amp;idx=1&amp;amp;sn=3da21227cb1a4c80e36f91dc823529af&amp;amp;chksm=c33777c0f440fed6f9ebaa7f206f1e423f68c09a809a4d30033f34bd123ccf45d9e42655e199&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【Modern C++】深入理解左值、右值&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;【Modern C++】深入理解左值、右值&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247487474&amp;amp;idx=1&amp;amp;sn=e29d0178bfd4139313c44139e1cb3899&amp;amp;chksm=c3376935f440e023b96e9f8feeb34e4e22fbb74f00ca345a2b867edfd4c088bc595821fe878e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;智能指针-使用、避坑和实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;智能指针-使用、避坑和实现&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247487009&amp;amp;idx=1&amp;amp;sn=a812d27b9d65369ce2f38375b4a4ee96&amp;amp;chksm=c33768e6f440e1f015252fecf354f9f3712f59fc04b47b03401486c86fe51875428503ee9819&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;内存泄漏-原因、避免以及定位&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;内存泄漏-原因、避免以及定位&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247486816&amp;amp;idx=1&amp;amp;sn=a6dfc1361ce15ce5ad1c7d7734f9c939&amp;amp;chksm=c3376ba7f440e2b18267c303c35572ab089fb97d3b2fe0adb58009637d6631020bb52bd9a28c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;GDB调试-从入门实践到原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;GDB调试-从入门实践到原理&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247486357&amp;amp;idx=1&amp;amp;sn=3e7b88218f4416980b20add7575baa9a&amp;amp;chksm=c3376d52f440e444d28a01ef930ddfb92b5d30f26e7284012f08624ca1599e7efac1da3fb17c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【线上问题】P1级公司故障，年终奖不保&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;【线上问题】P1级公司故障，年终奖不保&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247486254&amp;amp;idx=1&amp;amp;sn=ebce58aa6b547af2a818faa5a6412e89&amp;amp;chksm=c3376de9f440e4ffea267926b7ce09ac439ab33a1da9dc6b4d631c971053f628cf91202d0f53&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【性能优化】高效内存池的设计与实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;【性能优化】高效内存池的设计与实现&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247485953&amp;amp;idx=1&amp;amp;sn=f8cd484607ab07f15247ecde773d2e1c&amp;amp;chksm=c3376cc6f440e5d047f7e648c951fd583df82ab4e3dab5767baeddef9fe7c1270f05b039d8c4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2万字|30张图带你领略glibc内存管理精髓&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;2万字|30张图带你领略glibc内存管理精髓&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是雨乐，从业十二年有余，历经过传统行业网络研发、互联网推荐引擎研发，目前在广告行业从业8年。目前任职某互联网公司高级技术专家一职，负责广告引擎的架构和研发。&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本公众号专注于架构、技术、线上bug分析等干货，欢迎关注。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0MzI4OTI1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/p3sYCQXkuHhKgtwWvzaYZodgfpphdA6WWKEMXTn6ImCCCuEzlPKicNBcpzBUyjK1XicWwqIwusqLGpwyyOc87JPQ/0?wx_fmt=png&quot; data-nickname=&quot;高性能架构探索&quot; data-alias=&quot;gxnjgts&quot; data-signature=&quot;专注于分享干货，硬货，欢迎关注😄&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bdcedee3f343e7b6a49892f614dbde10</guid>
<title>Signal：更多前端框架的选择</title>
<link>https://toutiao.io/k/bwrx55v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Signal：更多前端框架的选择&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我卡颂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近，&lt;code&gt;Angular&lt;/code&gt;、&lt;code&gt;Qwik&lt;/code&gt;的作者&lt;strong&gt;「MIŠKO HEVERY」&lt;/strong&gt;发文表示&lt;span&gt;Signal是前端框架的未来&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，并考虑在&lt;code&gt;Angular&lt;/code&gt;中实现它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在此之前，&lt;code&gt;Vue&lt;/code&gt;、&lt;code&gt;Solid.js&lt;/code&gt;、&lt;code&gt;Preact&lt;/code&gt;、&lt;code&gt;Svelte&lt;/code&gt;都已实现&lt;code&gt;Signal&lt;/code&gt;。实际上，&lt;code&gt;signal&lt;/code&gt;并不是一个新概念，他还有很多别名，比如：&lt;/p&gt;&lt;p&gt;- 响应式更新&lt;/p&gt;&lt;p&gt;- 细粒度更新&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你了解过&lt;code&gt;Vue&lt;/code&gt;响应式更新的实现原理，对&lt;code&gt;Signal&lt;/code&gt;就不会陌生。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，&lt;code&gt;Signal&lt;/code&gt;的技术在10年前&lt;code&gt;Knockout&lt;/code&gt;框架中就有应用。为什么这项技术正受到越来越多前端框架的青睐？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文，让我们一起探讨下这个话题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;signal的本质&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;signal&lt;/code&gt;的本质，是将&lt;strong&gt;「对状态的引用」&lt;/strong&gt;以及&lt;strong&gt;「对状态值的获取」&lt;/strong&gt;分离开。这么说可能有点抽象，让我们先看一个&lt;code&gt;非signal&lt;/code&gt;的例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是&lt;code&gt;React&lt;/code&gt;中定义状态的方式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; [state, dispatch] = useState(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;=&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    () =&amp;gt;&lt;/span&gt; dispatch(state + 1)&lt;br/&gt;  }&amp;gt;{state}&lt;span&gt;&amp;lt;/&lt;span&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;useState&lt;/code&gt;的返回值包括两部分：&lt;/p&gt;&lt;p&gt;&lt;code&gt;- state&lt;/code&gt;：状态的值&lt;/p&gt;&lt;p&gt;&lt;code&gt;- dispatch&lt;/code&gt;：状态的&lt;code&gt;setter&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以发现，&lt;code&gt;state&lt;/code&gt;耦合了&lt;strong&gt;「对状态的引用」&lt;/strong&gt;以及&lt;strong&gt;「对状态值的获取」&lt;/strong&gt;这两个含义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看一个&lt;code&gt;signal&lt;/code&gt;的例子。以下是同一个例子用&lt;code&gt;Solid.js&lt;/code&gt;书写的样子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; [getState, dispatch] = createSignal(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;=&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    () =&amp;gt;&lt;/span&gt; dispatch(getState() + 1)&lt;br/&gt;  }&amp;gt;{getState()}&lt;span&gt;&amp;lt;/&lt;span&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;createSignal&lt;/code&gt;的返回值包括两部分：&lt;/p&gt;&lt;p&gt;&lt;code&gt;- getState&lt;/code&gt;：对状态的引用&lt;/p&gt;&lt;p&gt;&lt;code&gt;- dispatch&lt;/code&gt;：状态的&lt;code&gt;setter&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区别就体现在&lt;code&gt;getState&lt;/code&gt;上，其中：&lt;/p&gt;&lt;p&gt;&lt;code&gt;- getState&lt;/code&gt;是对状态的引用&lt;/p&gt;&lt;p&gt;&lt;code&gt;- getState()&lt;/code&gt;是对状态值的获取&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，我们可以不必立刻获取状态的值，而是在需要的时候再获取（即在需要时再执行&lt;code&gt;getState()&lt;/code&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么做有什么好处呢？如果我们在需要的时候再获取状态的值，就能感知当前的上下文环境。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个很粗糙的例子，在下面的代码中，组件实例（&lt;code&gt;Component&lt;/code&gt;实例）在&lt;code&gt;render&lt;/code&gt;时会将全局变量&lt;code&gt;cpnContext&lt;/code&gt;指向自己：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; cpnContext = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  render() {&lt;br/&gt;    cpnContext = &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// ...省略逻辑&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么在&lt;code&gt;createSignal&lt;/code&gt;返回的&lt;code&gt;getState&lt;/code&gt;方法内部，可以获取全局变量&lt;code&gt;cpnContext&lt;/code&gt;来感知当前处于哪个组件的渲染流程：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createSignal&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// ...省略逻辑&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getState&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; curContext = cpnContext;&lt;br/&gt;    &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;dispatch&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; [getState, dispatch]&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么做的目的是建立&lt;strong&gt;「状态变化」&lt;/strong&gt;与&lt;strong&gt;「需要更新哪个组件」&lt;/strong&gt;之间的联系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比于&lt;code&gt;React&lt;/code&gt;，基于&lt;code&gt;Signal&lt;/code&gt;实现的框架会有两个优势：&lt;/p&gt;&lt;p&gt;- 更好的细粒度更新性能&lt;/p&gt;&lt;p&gt;- 更好的&lt;code&gt;DX&lt;/code&gt;（开发者体验）&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;更好的细粒度更新性能&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于&lt;code&gt;Signal&lt;/code&gt;建立了状态与组件之间的联系，所以相比于&lt;code&gt;React&lt;/code&gt;更有性能优势。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，在我的电脑上，用&lt;code&gt;Svelte&lt;/code&gt;渲染1w个&lt;code&gt;li&lt;/code&gt;，点击某个&lt;code&gt;li&lt;/code&gt;后改变他的内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  {#each items as item (item.id)}&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;li&lt;/span&gt; &lt;span&gt;on:click&lt;/span&gt;=&lt;span&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; items[item.id].name = &#x27;change!&#x27;}&amp;gt;{item.name}&lt;span&gt;&amp;lt;/&lt;span&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  {/each}&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从点击事件触发，到&lt;code&gt;Svelte&lt;/code&gt;逻辑运行完，再到浏览器重排重绘，总用时18.88ms，其中&lt;code&gt;Svelte&lt;/code&gt;的逻辑执行只花了9.5ms：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3008763388510224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5Q3ZxrD2qNBFwjvDGsRicdUVLBRz6g7Ev3x6lm6rhbsjgWUKY3CLlOOvZIlzW7rUiavPQXCGLvevFekKF7QApv9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2054&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的例子用&lt;code&gt;React&lt;/code&gt;实现，触发点击后总用时98.5ms，其中&lt;code&gt;React&lt;/code&gt;的逻辑执行了89.38ms：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34957369062119364&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5Q3ZxrD2qNBFwjvDGsRicdUVLBRz6g7Evg3kPOB1e9eibJgYFaYuGyuuCRtnicMej9uvJzURYVlbSyicTT2scFdgsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1642&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个例子中，&lt;code&gt;React&lt;/code&gt;性能比&lt;code&gt;Svelte&lt;/code&gt;差了一个数量级。之所以会有这样的差异，很大一部分原因在于&lt;strong&gt;「Svlete在更新前就知道状态变化时需要更新哪个组件」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这一切的源头就在于&lt;code&gt;Signal&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;更好的DX&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更好的开发者体验主要体现在两方面：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Signal&lt;/code&gt;感知上下文环境的能力减少了代码心智负担&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如在&lt;code&gt;React&lt;/code&gt;中，&lt;code&gt;useEffect&lt;/code&gt;在使用时需要指明依赖的状态：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;useEffect(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// ...state1, state2变化后的逻辑&lt;/span&gt;&lt;br/&gt;}, [state1, state2])&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果采用&lt;code&gt;Signal&lt;/code&gt;的实现，状态能感知到自己在&lt;code&gt;useEffect&lt;/code&gt;上下文环境，可以自动建立两者之间的联系，不用再担心少写依赖状态、闭包陷阱等问题，减少心智负担。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如在&lt;code&gt;Vue&lt;/code&gt;中，类似&lt;code&gt;useEffect&lt;/code&gt;(仅仅是功能类似，两者的用途其实是不同的)的&lt;code&gt;watch&lt;/code&gt;，就不需要显式指明依赖：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;script setup&amp;gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { ref, watch } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; name = ref(&lt;span&gt;&#x27;&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;watch(name, (newName, oldName) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;// ...省略逻辑&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&amp;lt;&lt;span&gt;/script&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;减少开发者性能优化的心智负担&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;Signal&lt;/code&gt;的框架通常能获得不错的运行时性能，所以不需要额外的性能优化&lt;code&gt;API&lt;/code&gt;。反观&lt;code&gt;React&lt;/code&gt;，开发者如果遇到性能问题，需要手动调用性能优化&lt;code&gt;API&lt;/code&gt;（比如&lt;code&gt;React.memo&lt;/code&gt;、&lt;code&gt;useMemo&lt;/code&gt;、&lt;code&gt;PureComponent&lt;/code&gt;）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有以上这么多优点，难怪很多框架都使用了&lt;code&gt;Signal&lt;/code&gt;。那么&lt;code&gt;React&lt;/code&gt;对&lt;code&gt;Signal&lt;/code&gt;是什么态度呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;React&lt;/code&gt;团队成员对此的观点是：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;span&gt;有可能引入类似&lt;/span&gt;&lt;code&gt;Signal&lt;/code&gt;&lt;span&gt;的原语&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Signal&lt;/code&gt;&lt;span&gt;性能确实好，但他不太符合&lt;/span&gt;&lt;code&gt;React&lt;/code&gt;&lt;span&gt;的理念&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3441226575809199&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5Q3ZxrD2qNBFwjvDGsRicdUVLBRz6g7EvibrRkHEKJeO4DiapB4ibfxn8qvHZl8of1QD8ic17Jq5gZJYz2icxTxrtAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1174&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;React&lt;/code&gt;的理念可以用一句话概括：&lt;strong&gt;「UI反映状态在某一刻的快照」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然是快照，那就不是局部的，而是个整体概念。在&lt;code&gt;React&lt;/code&gt;中，状态更新会引起整个应用重新&lt;code&gt;render&lt;/code&gt;，就是对&lt;code&gt;React&lt;/code&gt;快照理念的最好诠释。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;React&lt;/code&gt;现阶段的所有实现都是基于快照理念。所以，即使引入类似&lt;code&gt;Signal&lt;/code&gt;的原语，可能也是类似&lt;code&gt;Mobx&lt;/code&gt;这样的上层实现，而不是从底层重构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我个人比较倾向于认为：&lt;code&gt;React&lt;/code&gt;团队承认&lt;code&gt;Signal&lt;/code&gt;的优点，但由于积重难返，而且现代设备的性能通常是过剩的，所以性能问题并不是首要问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这个观点是正确的，那么&lt;code&gt;React&lt;/code&gt;可能会在开发者体验（&lt;code&gt;Signal&lt;/code&gt;的另一个优点）方面努努力。比如去年提出的&lt;span&gt;RFC: useEvent&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;可能就是这方面的一次尝试。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Signal是前端框架的未来: &lt;span&gt;https://www.builder.io/blog/usesignal-is-the-future-of-web-frameworks#code-use-ref-code-does-not-render&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;RFC: useEvent: &lt;span&gt;https://github.com/reactjs/rfcs/pull/220&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d8abcf2000c0b020e657f0a4cfcafee7</guid>
<title>真·生产力「GitHub 热点速览」</title>
<link>https://toutiao.io/k/eo22497</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJRlXo2LPJ1ZPFHBibCib1yYT9sXg54cbVthgse5Piby9Oib6Sbx8ELzc8NQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;6000&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：HelloGitHub-小鱼干&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这些工具真的能极大提高生产力，节约你的时间来自（摸）我（鱼）增（划）值（水）。先别提 style2paints，你给它随意画个草图，就能给你一个能交付给甲方爸爸的成品插画。如果提升 30%-40% 传输速度的 kcp 不够惊艳，还有想象力匮乏程序员的福音——rerun，直接让你带入计算机视角看待那些图片、视频信息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而本周开始，加入了 「HelloGitHub 热评」，会同大家分享本周收到若干好评的开源项目有哪些。因为 HG 开源项目评价系统刚上线不久，希望大家多多照顾：给用过的、想用的项目们一个你的小看法~&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以下内容摘录自微博&lt;/span&gt;&lt;span&gt;@HelloGitHub&lt;/span&gt;&lt;span&gt; 的 GitHub Trending 及 Hacker News 热帖（简称 HN 热帖），选项标准：&lt;/span&gt;&lt;code&gt;&lt;span&gt;新发布&lt;/span&gt;&lt;/code&gt;&lt;span&gt; | &lt;/span&gt;&lt;code&gt;&lt;span&gt;实用&lt;/span&gt;&lt;/code&gt;&lt;span&gt; | &lt;/span&gt;&lt;code&gt;&lt;span&gt;有趣&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，根据项目 release 时间分类，发布时间不超过 14 day 的项目会标注 &lt;/span&gt;&lt;code&gt;&lt;span&gt;New&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，无该标志则说明项目 release 超过半月。由于本文篇幅有限，还有部分项目未能在本文展示，望周知 🌝&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6049382716049383&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJTbH2mMb5FwC0slUibL58jGMWqlyvCgdictVkicP86sh7en2gbnH9Nu7HA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1782&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 本周特推&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.1 线稿上色：style2paints&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主语言：JavaScript、Python&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;style2paints 是一个给草图上色的 AI 工具，你上传一张线稿之后，指定风格和光源，等着收上色成品即可。值得一提的是，你不需要安装任何复杂的东西，比如：Python、CUDA，像使用其他应用程序一样下载，双击使用即可，非常易操作。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/lllyasviel/style2paints&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6597938144329897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJnvecjOibpOq8xuCZvlV2CmaYEWHVVVg3DibrJpofM8xL8E0jNokkWqGg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;582&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1.2 传输协议：kcp&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主语言：C、C++&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;KCP 是一个快速可靠协议，能以比 TCP 浪费 10%-20% 的带宽的代价，换取平均延迟降低 30%-40%，且最大延迟降低三倍的传输效果。纯算法实现，并不负责底层协议（如 UDP）的收发，需要使用者自己定义下层数据包的发送方式，以 callback 的方式提供给 KCP。连时钟都需要外部传递进来，内部不会有任何一次系统调用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在技术特性方面，TCP 是为流量设计的（每秒内可以传输多少 KB 的数据），讲究的是充分利用带宽。而 KCP 是为流速设计的（单个数据包从一端发送到一端需要多少时间），以 10%-20% 带宽浪费的代价换取了比 TCP 快 30%-40% 的传输速度。TCP 信道是一条流速很慢，但每秒流量很大的大运河，而 KCP 是水流湍急的小激流。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/skywind3000/kcp&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJaicW7mDGlWu1PlZvnpr4fRpTCvpZIJ8YQicibb1yZn97FwyHibsiaT5RbOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. GitHub Trending 周榜&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.1 可视化的计算机视觉：rerun&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：1,150+&lt;strong&gt;，&lt;/strong&gt;主语言：Rust&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;New&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 想知道一张图片、一个视频在计算机眼中是怎么样的么？Rerun 是一个 SDK，用于记录计算机视觉和机器人数据，并与一个可视化器配对，用于随着时间的推移探索这些数据。它让你用最少的代码调试和理解系统的内部状态和数据。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/rerun-io/rerun&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7141453831041258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJAKuIhVbNMt5iaSGxI2ZYc04b5I2U6ooThSVNW4A3UicyyhTJdViaYMLtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2036&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.2 Swift 编码规范：SwiftLint&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：150+&lt;strong&gt;，&lt;/strong&gt;主语言：Swift&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基于现有 GitHub 上的 &lt;/span&gt;&lt;span&gt;swift-style-guide&lt;/span&gt;&lt;span&gt; 的 Swift 编码风格指南，它采用了 Swift 社区普遍采纳的样式规范。你可以用它来强制检查 Swift 代码风格和规范。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/realm/SwiftLint&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14939024390243902&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJ0hd2YfoLWWe29yxr5zbBMGKyus1qYcSQBiaOeLibrIbX1RwWygyzggSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1312&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.3 新手友好 Neovim：kickstart.nvim&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：200+&lt;strong&gt;，&lt;/strong&gt;主语言：Lua&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于一个 Neovim 新手而言，Neovim 的起点应该是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而这个 repo 就是帮你快速度过新手阶段，删除你不需要的东西，并加入你 miss 的信息。当然它还有个替代品就是 &lt;/span&gt;&lt;span&gt;LazyVim&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/nvim-lua/kickstart.nvim&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.4 文本生成语音：TTS&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：150+&lt;strong&gt;，&lt;/strong&gt;主语言：Python、Jupyter Notebook&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一个文本生成语音模型，支持 20+ 种语言。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/coqui-ai/TTS&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5710144927536231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJAcLLib9W2B69ueQBSKAan15SQjwbsJejgLjcejq1Ym0muC92PtKWClg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1035&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.5 【书籍】高并发的哲学：PPHC&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本周 star 增长数：750+&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这本书中，将讨论一下高并发问题背后隐藏的一个哲学原理 —— 找出单点，进行拆分。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GitHub 地址→https://github.com/johnlui/PPHC&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJQAhgEU8RRCovzHXc2gNdfMP3pxSo7BhibicUcrLl3SAs0EYlV9nfCVQw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3000&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. HelloGitHub 热评&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这个章节，我们将会分享下本周 &lt;/span&gt;&lt;span&gt;HelloGitHub 社区&lt;/span&gt;&lt;span&gt;上的热评项目，HG 开源项目评价体系刚上线不久，期待你的评价 😋&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.1 极简风在线绘图：tldraw&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主语言：TypeScript&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是一个” 麻雀虽小，五脏俱全 “的绘图工具，支持插入便签、保存进度、生成图片、多人协作等实用的功能。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;HG 评价地址→https://hellogithub.com/repository/22ffc587ef3f4782b173f6183d47411d&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.695&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJK6yW83XaUEartRu4W8XjPsvzQLTCUBtt4OKHOicic4bl6stHA92hN6PA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.2 优雅的 JSON 数据可视化工具：jsoncrack.com&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主语言：TypeScript&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;该项目不是简单的展示 JSON 数据，而是将其转化为类似脑图的形式，支持放大 / 缩小、展开 / 收缩、搜索节点、导出图片等操作，还可以快速部署成服务。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;HG 评价地址→https://hellogithub.com/repository/d914aef84cef4ceda13e2703779b51ba&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.71875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xBgIbW1vdNMBTaJVQicj3NLrackHAQRaJtOSYWTHYEoV2pkCUZ6icPSLdpubPEBshggKapf5hqft6zYdRIWdSTdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2624&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 往期回顾&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;往期回顾：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上为 2023 年第 7 个工作周的 GitHub Trending 🎉如果你 Pick 其他好玩、实用的 GitHub 项目，来 &lt;/span&gt;&lt;span&gt;HelloGitHub&lt;/span&gt;&lt;span&gt; 和大家一起分享下哟 🌝&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;HelloGitHub 交流群现已全面开放，添加微信号：HelloGitHub001 为好友入群，可同前端、Java、Go 等各界大佬谈笑风生、切磋技术~&lt;/p&gt;&lt;/blockquote&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>