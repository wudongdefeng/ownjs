<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1c22add75b0a22ea45854c9ff0193706</guid>
<title>蚂蚁测试用例自动生成工具正式开源，带你一键玩转测试用例自动生成！</title>
<link>https://toutiao.io/k/2fq1e2n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9PlCuiaEuibibE7gfUdu129cIY6lUdcTEzgRvibmkHcgnboUmaqH2SzLRUyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1800&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;测试用例自动生成是近年来质量与效能的研究热点方向，无论是学术界的相关研究还是工业界的探索实践，我们都可以看到大家对于通过用例自动生成来进行研发提效的期许与探索。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;蚂蚁测试用例自动生成&lt;/span&gt;&lt;/strong&gt;（Auto-Unit-Test-Case-Generator）是由蚂蚁集团技术风险部质量技术团队研发的一款单元测试用例自动生成产品。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;基于学术界现有科研成果，针对实际业务中落地所面临的难点与挑战，Auto-Unit-Test-Case-Generator提出了一系列创新性算法，最终实现了&lt;strong&gt;&lt;span&gt;单测覆盖率&amp;gt;60%&lt;/span&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;span&gt;稳定性&amp;gt;99%&lt;/span&gt;&lt;/strong&gt;的高效自动生成能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前&lt;span&gt;Auto-Unit-Test-Case-Generator&lt;/span&gt;&lt;strong&gt;&lt;span&gt;已开源至Github，期待大家的使用和共建！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;（👉复制链接到浏览器访问：&lt;/p&gt;&lt;p&gt;https://github.com/TRaaSStack/auto-unit-test-case-generator）&lt;/p&gt;&lt;p&gt;&lt;span&gt;*点击文末&lt;/span&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;span&gt;即可直接跳转&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1503268&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9PMkeSwSsibibbAeSKraSrUOZUr3osEpwl0UkJLKwBp9Gxuca6dLh7Tapw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;306&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Auto-Unit-Test-Case-Generator 核心能力&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用Auto-Unit-Test-Case-Generator，能够在无人介入的情况下自动生成&lt;span&gt;&lt;strong&gt;高覆盖率、高有效性&lt;/strong&gt;&lt;/span&gt;的单元测试用例集，&lt;span&gt;&lt;strong&gt;智能化提升质量水位、提高研发效能&lt;/strong&gt;&lt;/span&gt;。相较于已有的测试用例生成工具，Auto-Unit-Test-Case-Generator生成的测试用例在覆盖率、有效性、可读性都有提升。 &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Auto-Unit-Test-Case-Generator的核心能力包括：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;1&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;适配Spring框架&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;目前业界大量的JAVA工程使用Spring框架，Auto-Unit-Test-Case-Generator能够&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自动适配Spring工程的结构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，对需要隔离的服务进行提前mock，确保生成的用例可以正常运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;2&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;复杂业务场景生成&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在业界的实际系统中，往往需要自动生成的用例能够覆盖复杂业务场景。Auto-Unit-Test-Case-Generator对用例数据生成的算法进行了优化，使得相较于传统的随机搜索算法(Random Search Algorithm)&lt;span&gt;&lt;strong&gt;能够达到更高的分支命中能力&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;3&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;高可读的用例结构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们推荐将自动生成的单测用例合入工程代码库中进行持续CI，因此要求自动生成的用例具备高可读性。Auto-Unit-Test-Case-Generator在进行用例生成过程中结合了最优调用序列算法，使得自动生成的&lt;span&gt;&lt;strong&gt;用例结构合理、语义可读&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;同时，我们在蚂蚁内部同时也在探索实践&lt;span&gt;&lt;strong&gt;自动生成单测用例的问题发现能力&lt;/strong&gt;&lt;/span&gt;，通过生成异常场景用例发现NPE等严重的代码问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;内部孵化完成后，后续也会及时开源至Github，欢迎大家关注我们的Github项目！🧐&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;蚂蚁内部实践效果&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前，在蚂蚁内部已经有&lt;span&gt;&lt;strong&gt;超过1000个工程&lt;/strong&gt;&lt;/span&gt;在使用Auto-Unit-Test-Case-Generator进行用例生成。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以下通过某个域的14个系统行覆盖率对比情况，来说明Auto-Unit-Test-Case-Generator生成用例的效果。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5054705&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9P0fNA56OpWXmpk6nMOuOxb0ljscCAOb4JNxt250NdUibxBT5RicaicANbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;其中，历史存量手写的覆盖率（橙色）平均覆盖率54%，Auto-Unit-Test-Case-Generator自动生成覆盖率（绿色）平均覆盖率为65%，与历史存量手写用例合并汇总覆盖率（蓝色）达到81%；经过自动生成的单测补充，&lt;strong&gt;&lt;span&gt;覆盖率提升了25%+&lt;/span&gt;&lt;/strong&gt;，提升效果显著。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;带你一键玩转用例自动生成&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;了解测试用例自动生成的效果后，您是不是也想在自己的工程上尝试一把呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里我们提供了IDEA插件的使用方式，&lt;strong&gt;&lt;span&gt;带您在五分钟内完成一次用例生成，体验用例生成带来的效能提升！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;构建Auto-Unit-Test-Case-Generator&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;在进行IDEA插件操作之前，我们首先需要构建出最新版本的Auto-Unit-Test-Case-Generator。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;构建过程如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;构建完成后，在您本地的mvn仓库内即可发现构建好的用例生成jar包，用例生成jar包的默认路径：${user.home}/.m2/repository/org/smartut/smartut-master/1.1.0/smartut-master-1.1.0.jar。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;安装IDEA插件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;构建完成Auto-Unit-Test-Case-Generator后，我们接下来进行IDEA插件的安装。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;安装过程如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;下载IDEA插件安装包，安装包地址：https://github.com/TRaaSStack/auto-unit-test-case-generator/blob/main/tools/smart_ut_intellij_plugin.zip（如下载失败可通过clone代码仓获取）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;本地解压缩smart_ut_intellij_plugin.zip后得到IDEA插件jar包：smart_ut_intellij.jar&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;打开IntelliJ IDEA -&amp;gt; Preferences -&amp;gt; Plugins -&amp;gt; Install Plugin from Disk。在弹出的选择框中，选择smart_ut_intellij.jar。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5537037&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9P6sKJmsxcLn8ZV4Law49T9wa4zwpW20JYuBIoFicCjTclxat4TxqZicIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;重启IDEA插件。重启后打开您希望进行用例生成的Java项目，右键单击任意java文件，即可看到用例生成的入口。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9PdibibAMd4IjYj9fCtTUicuOdjYibw5ib3yicokgv6Hd9vvDiaH7ogNlLqbdug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;一键生成用例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;IDEA插件安装完成后，您就可以在您的本地工程中尽情使用用例生成了。在任意待生成的java文件上右键选择&quot;SmartUT用例生成&quot;，即可看到如下图所示的用例生成页面。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5537037&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9PEPPBJg3LYh6BVKHjMHbtWOPYhTf8aBTJCNWrFNWfLsMK3oy7Fw2uyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;用例生成页面中，只需要填写三项：&lt;span&gt;&lt;strong&gt;用例生成jar包路径、生成结果存放路径、生成时间&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;填写完成后点击开始，即可开始用例生成！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5537037&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9PqYJBfhbx6Urdj2zwSGxMVNK6JHZS8iaiaB4dqXmNiaCVJt2evDB3HiaGxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;用例生成完成后，在对应目录下可以找到生成的测试用例文件。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5537037&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9PkhC23Pk6sSN1hO8derJ7crwg8p9dNSFKIRRKqEeY94TKjlMuaVyUnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;联系我们&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;如果您对测试用例自动生成感兴趣&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;或者在使用插件进行用例自动生成时遇到了任何问题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;都欢迎随时联系我们~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;钉钉群号：44961098&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也可通过扫下方二维码扫码加入&lt;/span&gt;&lt;strong&gt;&lt;span&gt;微信/钉钉群&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;期待您的意见和建议！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;👇👇👇&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.49375&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9PkdE9wWqbcfZYo76LDQQRgYlmRvMNruZGcGjJhyGhNWkO7UibiaoeUDKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;微信群&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2890625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hUw7zHOGfWaTCP1MApOPw9Po7QtP6b42LEIR9Bb1uvC6IGQmayCUds2Nu7ekAvdj35NbXQD7pUBsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;384&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;钉钉群&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzU3NzczMDI4Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hU6P7Y4EMhbdHr7WDSMZt9wjEZfR28HDTcOac5u4A8ibiaIR2Miad2cCILq1FCH6NHZesEoOXLeuBopA/0?wx_fmt=png&quot; data-nickname=&quot;蚂蚁研发效能&quot; data-alias=&quot;AntLinkE&quot; data-signature=&quot;蚂蚁集团研发效能部有业界领先的工程和学术造诣，致力于为蚂蚁和多家金融企业提供核电级的全生命周期研发产品。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>02ef0f16d1276ebcc5d3eded4d3227da</guid>
<title>喜报: 凹语言获InfoQ 2022开发者最喜爱十大开源项目</title>
<link>https://toutiao.io/k/8diunca</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;一、&lt;span&gt;InfoQ 中国技术力量榜单&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.38179519595448796&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/QAncwTWS4Gop94f9xXrzIUgOIp7dx72XFKeicaBu6OkzOBR0RobVIWgPRnNJJ45eHSdkURTvHD9tY5X81eVmmMg/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;791&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651147301&amp;amp;idx=4&amp;amp;sn=04f2380a15be166d873cd275acdba3cf&amp;amp;chksm=bdb8b4768acf3d604ac3f0a7c8d1c438dce8505d81419b4a174543e865c8726dd6db58ab61c4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;InfoQ 2022 中国技术力量榜单&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;em&gt;InfoQ 2022 中国技术力量榜单&lt;/em&gt;&lt;/span&gt;&lt;span&gt;是&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span/&gt;国内InfoQ平台发起的评选活动&lt;span&gt;。在半个月的时间内，开源新锐项目、&lt;/span&gt;高价值技术团队&lt;span&gt;以及云原生创新技术方案三大榜单共征集了 160+项目。其中，开源新锐项目共收到 60+项目方的信息。从12月初开始至 12 月 14 日，开源新锐项目正式进入投票阶段，各位开发者可共同抉择出在研发、治理、生态层面都足以称为标杆的开源项目。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;二、&lt;/span&gt;&lt;span&gt;开源新锐项目&lt;/span&gt;&lt;span&gt;评选规则&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.38882921589688507&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/QAncwTWS4Gop94f9xXrzIUgOIp7dx72Xoj4fTRASnkhibMVHJSARdVhJl9Dpy459Lyxd2KQoQmaFEdKFMlftMEw/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;931&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本次榜单评选过程中，开源新锐项目最终得分由专家团打分（40%），用户投票 （30%）及 InfoQ 主编团（30%）构成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面是专家评审团：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1781701444622792&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/QAncwTWS4Gop94f9xXrzIUgOIp7dx72XuDecDcaRl6lTounNXuzpVcSAdlNbjJ6Rewq4hpZ5rrJjYZmiaoDr4Mw/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;623&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;三、开源新锐项网友投票结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源新锐项目有60+个，截止 12 月 14 日共获得4500+个投票（每个用户最多投5票，网友投票只占最终结果的30%）。前10名的投票结果如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.660427807486631&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/QAncwTWS4Gop94f9xXrzIUgOIp7dx72Xp4ySRgQ2dVgfaGRWmkgDfSDKUV1wSQRoK8icCMP9sks68lHn2NrxwoA/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;374&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户投票结果：&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://www.infoq.cn/talk/xz7094aiX2K8CgARemC8&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Apache Doris 是一个基于 MPP 的现代化、高性能、实时的分析型数据库，以极速易用的特点被人们所熟知，仅需亚秒级响应时间即可返回海量数据下的查询结果，可支持高并发、高吞吐的查询分析场景。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SREWorks 是来自阿里的云原生数智运维平台，助力企业快速实现云原生应用全生命周期管理平台。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;LinkWeChat 是基于企业微信的开源 SCRM 系统，采用主流的 Java 微服务架构，是企业私域流量管理与营销的综合解决方案，助力企业提高客户运营效率，强化营销能力，拓展盈利空间。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;openGemini是来自华为的一款开源的分布式时序数据库，可广泛应用于物联网、车联网、运维监控、工业互联网等业务场景，具备卓越的读写性能和高效的数据分析能力，是国内开源的首款存储-分析一站式时序数据库系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;凹语言是来自草根团队的&lt;span&gt;国产通用编程语言，国内第一个实现纯浏览器环境编译执行全链路的静态类型的通用编译型语言。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;FlyFish 中文名飞鱼，是云智慧公司自主设计、研发的一款低门槛、高拓展性的低代码应用开发平台，为数据可视化开发场景提供了高效的一站式解决方案。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;LowCodeEngine 来自阿里的一款面向扩展设计的企业级低代码技术体系，是钉钉宜搭的底层引擎。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;KubeVela 是来自阿里的一个现代化的软件交付平台，起源于 OAM 应用模型，它可以让你的应用交付在当今流行的混合、多云环境中变得更加简单、高效、可靠。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;MindSpore是华为开源的新一代全场景AI框架，支持端、边、云全场景灵活部署，开创全新的AI编程范式，降低AI开发门槛，旨在实现开发友好、运行高效、部署灵活三大目标，同时着力构筑面向全球的人工智能开源社区，推动人工智能软硬件应用生态繁荣发展。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Apache DevLake (Incubating) 是一款开源的研发效能数据平台。Apache DevLake 提供自动化、一站式的数据归集、分析以及可视化能力，帮助研发团队更好地理解开发过程，挖掘关键瓶颈与提效机会。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;四、十大开源新锐项目结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;开源新锐项目最终得分由专家团打分（40%），用户投票 （30%）及 InfoQ 主编团（30%）构成。&lt;/span&gt;网友投票结束之后，结合专家和InfoQ主编团的投票结果，评出下图&lt;/span&gt;&lt;span&gt;十大开源新锐项目：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5202702702702703&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/QAncwTWS4Gop94f9xXrzIUgOIp7dx72XC9Z1L2X1ibpQe6sgiclFOoxugEYzsVVPG6Z97onuDibOTDhpRAxR0MzXg/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;592&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看出其中MindSpore、Apache Doris、KubeVela等4个项目也是网友投票热爱的项目，可见专家和网友的观点重复度还是比较高的。其中大部分项目都有公司背景、并已经经过多年的发展，有较大的社区影响力。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而网友投票的结果中有一些今年刚刚开源的项目，项目成熟度和社区影响力都还在快速成长过程中，暂时无缘今年的开源新锐项目奖项。希望这些新项目能够继续努力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;完整的结果：&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://www.infoq.cn/zones/chinatechawards2022/&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;五、凹语言荣获开发者喜爱奖项&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为刚刚开源半年的&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0ODQyOTE1NQ==&amp;amp;mid=2247483667&amp;amp;idx=1&amp;amp;sn=5db6b88c0c2f913a18445940a61a03cb&amp;amp;chksm=c366891ff4110009a521653f6a516bba8fa4a1c020fb312b522b193cf98d56f334be2831a60f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;凹语言&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;凹语言&lt;/a&gt;参与了其中开源新锐项目评选。&lt;/span&gt;&lt;span&gt;凹语言是国内 Gopher 发起的纯社区构建的开源国产编程语言项目。&lt;/span&gt;&lt;span&gt;同时凹语言也是国内第一个实现纯浏览器内编译、执行全链路的自研静态类型的编译型通用编程语言。&lt;/span&gt;&lt;span&gt;不仅仅&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0ODQyOTE1NQ==&amp;amp;mid=2247483677&amp;amp;idx=1&amp;amp;sn=bfa813b9ac6693836aa2f201b5e17eff&amp;amp;chksm=c3668911f41100078576a08175a9ec61e8dfa3c806970e5cc0a2731f1d873a8ab52e23a2454c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点亮了Arduino Nano 33开发板&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点亮了Arduino Nano 33开发板&lt;/a&gt;，同时也通过实现了&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0ODQyOTE1NQ==&amp;amp;mid=2247483679&amp;amp;idx=1&amp;amp;sn=f435ea6b5742efb96523844337400510&amp;amp;chksm=c3668913f4110005894835bbbafcc46f92e7b75da7cdaa1358d0c907727fd01e59ea29659bbf&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;BrainFuck虚拟机&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;BrainFuck虚拟机&lt;/a&gt;证明了其图灵完备的能力，最近小伙伴们验证了通过凹语言开发Web版本贪吃蛇的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;感谢InfoQ平台给凹语言颁发了开发者最喜爱的十大开源项目奖项：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.7777777777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/QAncwTWS4Gop94f9xXrzIUgOIp7dx72XjoAZEiaRzoUiaiaEZT2gK7wk8dYaIbvXy5ea5icic3ursEJUQOYS9eWh1ibQ/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;凹语言作为唯一一个参与评选的国产编程语言开源项目，荣获开发者最喜爱十大开源项目称号，是社区小伙伴对这个项目方向的认可和鼓励。感谢大家的支持🙏&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3649122807017544&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/QAncwTWS4GoROF9U9uuibsPByH1AYvk61pjsHNUNXdQdhpUupxiad7y0PXdibspZpCobBCkqtpHAzR4icFhwicWPajg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1710&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7dd289d971985b9530ffc235a0c8c5c5</guid>
<title>网络编程与通信原理</title>
<link>https://toutiao.io/k/2y1a1gm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;blockquote&gt;&lt;p&gt;总感觉这个概念，和研发有点脱节；&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;一、基础概念&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;不同设备之间通过网络进行数据传输，并且基于通用的网络协议作为多种设备的兼容标准，称为网络通信；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.365625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvAoib7m7G4GlDclV9PadtLGYTgklC6mWwbFicwUGiaTfPyx6Riab7HFe3spkwhx5TdvScchD2jicVQyNYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;以C/S架构来看，在一次请求当中，客户端和服务端进行数据传输的交互时，在不同阶段和层次中需要遵守的网络通信协议也不一样；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.29765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvAoib7m7G4GlDclV9PadtLGYGVV0UX36r9hytECm3b2y8TJtMJqszXu1MRpNF4Ysh0eRIiauUJxm5TQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;应用层：HTTP超文本传输协议，基于TCP/IP通信协议来传递数据；&lt;/p&gt;&lt;p&gt;传输层：TCP传输控制协议，采用三次握手的方式建立连接，形成数据传输通道；&lt;/p&gt;&lt;p&gt;网络层：IP协议，作用是把各种传输的数据包发送给请求的接收方；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvAoib7m7G4GlDclV9PadtLGYc92b765SFrTeU4yaAgZpibeRnpBySJlGwfC8f4bzf7v9D0d97cTF0rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;通信双方进行交互时，发送方数据在各层传输时，每通过一层就会添加该层的首部信息；接收方与之相反，每通过一次就会删除该层的首部信息；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、JDK源码&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;java.net&lt;/code&gt;源码包中，提供了与网络编程相关的基础API；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1、InetAddress&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;封装了对IP地址的相关操作，在使用该API之前可以先查看本机的&lt;code&gt;hosts&lt;/code&gt;的映射，Linux系统中在&lt;code&gt;/etc/hosts&lt;/code&gt;路径下；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; java.net.InetAddress;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestInet&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 获取本机 InetAddress 对象&lt;/span&gt;&lt;br/&gt;        InetAddress localHost = InetAddress.getLocalHost();&lt;br/&gt;        printInetAddress(localHost);&lt;br/&gt;        &lt;span&gt;// 获取指定域名 InetAddress 对象&lt;/span&gt;&lt;br/&gt;        InetAddress inetAddress = InetAddress.getByName(&lt;span&gt;&quot;www.baidu.com&quot;&lt;/span&gt;);&lt;br/&gt;        printInetAddress(inetAddress);&lt;br/&gt;        &lt;span&gt;// 获取本机配置 InetAddress 对象&lt;/span&gt;&lt;br/&gt;        InetAddress confAddress = InetAddress.getByName(&lt;span&gt;&quot;nacos-service&quot;&lt;/span&gt;);&lt;br/&gt;        printInetAddress(confAddress);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printInetAddress&lt;/span&gt; &lt;span&gt;(InetAddress inetAddress)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;InetAddress：&quot;&lt;/span&gt;+inetAddress);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;主机名：&quot;&lt;/span&gt;+inetAddress.getHostName());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;IP地址：&quot;&lt;/span&gt;+inetAddress.getHostAddress());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;2、URL&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;统一资源定位符，URL一般包括：协议、主机名、端口、路径、查询参数、锚点等，路径+查询参数，也被称为文件；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvAoib7m7G4GlDclV9PadtLGY2an414JAktNEsKx8QVoCWmvaxMKA1yA0koA1bficAlY39iaaKr79ycKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; java.net.URL;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestURL&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        URL url = &lt;span&gt;new&lt;/span&gt; URL(&lt;span&gt;&quot;https://www.baidu.com:80/s?wd=Java#bd&quot;&lt;/span&gt;) ;&lt;br/&gt;        printURL(url);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printURL&lt;/span&gt; &lt;span&gt;(URL url)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;协议：&quot;&lt;/span&gt; + url.getProtocol());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;域名：&quot;&lt;/span&gt; + url.getHost());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;端口：&quot;&lt;/span&gt; + url.getPort());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;路径：&quot;&lt;/span&gt; + url.getPath());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;参数：&quot;&lt;/span&gt; + url.getQuery());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;文件：&quot;&lt;/span&gt; + url.getFile());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;锚点：&quot;&lt;/span&gt; + url.getRef());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;3、HttpURLConnection&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;作为URLConnection的抽象子类，用来处理针对Http协议的请求，可以设置连接超时、读取超时、以及请求的其他属性，是服务间通信的常用方式；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestHttp&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 访问 网址 内容&lt;/span&gt;&lt;br/&gt;        URL url = &lt;span&gt;new&lt;/span&gt; URL(&lt;span&gt;&quot;https://www.jd.com&quot;&lt;/span&gt;);&lt;br/&gt;        HttpURLConnection httpUrlConnection = (HttpURLConnection) url.openConnection();&lt;br/&gt;        printHttp(httpUrlConnection);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 请求 服务 接口&lt;/span&gt;&lt;br/&gt;        URL api = &lt;span&gt;new&lt;/span&gt; URL(&lt;span&gt;&quot;http://localhost:8082/info/99&quot;&lt;/span&gt;);&lt;br/&gt;        HttpURLConnection apiConnection = (HttpURLConnection) api.openConnection();&lt;br/&gt;        apiConnection.setRequestMethod(&lt;span&gt;&quot;GET&quot;&lt;/span&gt;);&lt;br/&gt;        apiConnection.setConnectTimeout(&lt;span&gt;3000&lt;/span&gt;);&lt;br/&gt;        printHttp(apiConnection);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;printHttp&lt;/span&gt; &lt;span&gt;(HttpURLConnection httpUrlConnection)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; (InputStream inputStream = httpUrlConnection.getInputStream()) {&lt;br/&gt;            BufferedReader bufferedReader = &lt;span&gt;new&lt;/span&gt; BufferedReader(&lt;span&gt;new&lt;/span&gt; InputStreamReader(inputStream, StandardCharsets.UTF_8));&lt;br/&gt;            String line ;&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; ((line = bufferedReader.readLine()) != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                System.out.println(line);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;三、通信编程&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、Socket&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;Socket也被称为套接字，是两台设备之间通信的端点，会把网络连接当成流处理，则数据以IO形式传输，这种方式在当前被普遍采用；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.35703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvAoib7m7G4GlDclV9PadtLGYhBPGmCLA4HRAqqv7UJpFE7a1UAAQUicAybvASN8FqC2DYbaczgSc6xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;从网络编程直接跳到Socket套接字，概念上确实有较大跨度，概念过度抽象时，可以看看源码的核心结构，在理解时会轻松很多，在JDK中重点看SocketImpl抽象类；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SocketImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;SocketOptions&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// Socket对象，客户端和服务端&lt;/span&gt;&lt;br/&gt;    Socket socket = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    ServerSocket serverSocket = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 套接字的文件描述对象&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; FileDescriptor fd;&lt;br/&gt;    &lt;span&gt;// 套接字的路由IP地址&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; InetAddress address;&lt;br/&gt;    &lt;span&gt;// 套接字连接到的远程主机上的端口号&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; port;&lt;br/&gt;    &lt;span&gt;// 套接字连接到的本地端口号&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; localport;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;套接字的抽象实现类，是实现套接字的所有类的公共超类，可以用于创建客户端和服务器套接字；&lt;/p&gt;&lt;p&gt;所以到底如何理解Socket概念？从抽象类中来看，套接字就是指代网络通讯中系统资源的核心标识，比如通讯方IP地址、端口、状态等；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、SocketServer&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;创建Socket服务端，并且在8989端口监听，接收客户端的连接请求和相关信息，并且响应客户端，发送指定的数据；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SocketServer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、创建Socket服务端&lt;/span&gt;&lt;br/&gt;        ServerSocket serverSocket = &lt;span&gt;new&lt;/span&gt; ServerSocket(&lt;span&gt;8989&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;socket-server:8989，waiting connect...&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 2、方法阻塞等待，直到有客户端连接&lt;/span&gt;&lt;br/&gt;        Socket socket = serverSocket.accept();&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;socket-server:8989，get connect:&quot;&lt;/span&gt;+socket.getPort());&lt;br/&gt;        &lt;span&gt;// 3、输入流，输出流&lt;/span&gt;&lt;br/&gt;        InputStream inStream = socket.getInputStream();&lt;br/&gt;        OutputStream outStream = socket.getOutputStream();&lt;br/&gt;        &lt;span&gt;// 4、数据接收和响应&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;byte&lt;/span&gt;[] buf = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; readLen = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; ((readLen=inStream.read(buf)) != -&lt;span&gt;1&lt;/span&gt;){&lt;br/&gt;            &lt;span&gt;// 接收数据&lt;/span&gt;&lt;br/&gt;            String readVar = &lt;span&gt;new&lt;/span&gt; String(buf, &lt;span&gt;0&lt;/span&gt;, readLen) ;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;exit&quot;&lt;/span&gt;.equals(readVar)){&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt; ;&lt;br/&gt;            }&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;recv：&quot;&lt;/span&gt;+readVar+&lt;span&gt;&quot;；time：&quot;&lt;/span&gt;+DateTime.now().toString(DatePattern.NORM_DATETIME_PATTERN));&lt;br/&gt;            &lt;span&gt;// 响应数据&lt;/span&gt;&lt;br/&gt;            outStream.write((&lt;span&gt;&quot;resp-time：&quot;&lt;/span&gt;+DateTime.now().toString(DatePattern.NORM_DATETIME_PATTERN)).getBytes());&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 5、资源关闭&lt;/span&gt;&lt;br/&gt;        outStream.close();&lt;br/&gt;        inStream.close();&lt;br/&gt;        socket.close();&lt;br/&gt;        serverSocket.close();&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;socket-server:8989，exit...&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的是步骤2输出的端口号是随机不确定的，结合&lt;code&gt;jps&lt;/code&gt;和&lt;code&gt;lsof -i tcp:port&lt;/code&gt;命令查看进程和端口号的占用情况；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、SocketClient&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;创建Socket客户端，并且连接到服务端，读取命令行输入的内容并发送到服务端，并且输出服务端的响应数据；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SocketClient&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、创建Socket客户端&lt;/span&gt;&lt;br/&gt;        Socket socket = &lt;span&gt;new&lt;/span&gt; Socket(InetAddress.getLocalHost(), &lt;span&gt;8989&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;server-client，connect to:8989&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 2、输入流，输出流&lt;/span&gt;&lt;br/&gt;        OutputStream outStream = socket.getOutputStream();&lt;br/&gt;        InputStream inStream = socket.getInputStream();&lt;br/&gt;        &lt;span&gt;// 3、数据发送和响应接收&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; readLen = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;byte&lt;/span&gt;[] buf = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;){&lt;br/&gt;            &lt;span&gt;// 读取命令行输入&lt;/span&gt;&lt;br/&gt;            BufferedReader bufReader = &lt;span&gt;new&lt;/span&gt; BufferedReader(&lt;span&gt;new&lt;/span&gt; InputStreamReader(System.in));&lt;br/&gt;            String iptLine = bufReader.readLine();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;exit&quot;&lt;/span&gt;.equals(iptLine)){&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;// 发送数据&lt;/span&gt;&lt;br/&gt;            outStream.write(iptLine.getBytes());&lt;br/&gt;            &lt;span&gt;// 接收数据&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; ((readLen = inStream.read(buf)) != -&lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;                System.out.println(&lt;span&gt;new&lt;/span&gt; String(buf, &lt;span&gt;0&lt;/span&gt;, readLen));&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 4、资源关闭&lt;/span&gt;&lt;br/&gt;        inStream.close();&lt;br/&gt;        outStream.close();&lt;br/&gt;        socket.close();&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;socket-client，get exit command&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试结果：整个流程在没有收到客户端的&lt;code&gt;exit&lt;/code&gt;退出指令前，会保持连接的状态，并且可以基于字节流模式，进行持续的数据传输；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.34765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvAoib7m7G4GlDclV9PadtLGYHumg6u4icE7haqLiauHFenaqHYfbeR4aVXbAxu0BG4oyBroJHxia5ObQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;4、字符流使用&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;基于上述的基础案例，采用字符流的方式进行数据传输，客户端和服务端只进行一次简单的交互；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;-- &lt;span&gt;1&lt;/span&gt;、客户端&lt;br/&gt;BufferedReader bufReader = &lt;span&gt;new&lt;/span&gt; BufferedReader(&lt;span&gt;new&lt;/span&gt; InputStreamReader(inStream));&lt;br/&gt;BufferedWriter bufWriter = &lt;span&gt;new&lt;/span&gt; BufferedWriter(&lt;span&gt;new&lt;/span&gt; OutputStreamWriter(outStream));&lt;br/&gt;&lt;span&gt;// 客户端发送数据&lt;/span&gt;&lt;br/&gt;bufWriter.write(&lt;span&gt;&quot;hello,server&quot;&lt;/span&gt;);&lt;br/&gt;bufWriter.newLine();&lt;br/&gt;bufWriter.flush();&lt;br/&gt;&lt;span&gt;// 客户端接收数据&lt;/span&gt;&lt;br/&gt;System.out.println(&lt;span&gt;&quot;client-read：&quot;&lt;/span&gt;+bufReader.readLine());&lt;br/&gt;&lt;br/&gt;-- &lt;span&gt;2&lt;/span&gt;、服务端&lt;br/&gt;BufferedReader bufReader = &lt;span&gt;new&lt;/span&gt; BufferedReader(&lt;span&gt;new&lt;/span&gt; InputStreamReader(inStream));&lt;br/&gt;BufferedWriter bufWriter = &lt;span&gt;new&lt;/span&gt; BufferedWriter(&lt;span&gt;new&lt;/span&gt; OutputStreamWriter(outStream));&lt;br/&gt;&lt;span&gt;// 服务端接收数据&lt;/span&gt;&lt;br/&gt;System.out.println(&lt;span&gt;&quot;server-read：&quot;&lt;/span&gt;+bufReader.readLine());&lt;br/&gt;&lt;span&gt;// 服务端响应数据&lt;/span&gt;&lt;br/&gt;bufWriter.write(&lt;span&gt;&quot;hello,client&quot;&lt;/span&gt;);&lt;br/&gt;bufWriter.newLine();&lt;br/&gt;bufWriter.flush();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;5、文件传输&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;基于上述的基础案例，客户端向服务端发送图片文件，服务端完成文件的读取和保存，在处理完成后给客户端发送结果描述；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;-- &lt;span&gt;1&lt;/span&gt;、客户端&lt;br/&gt;&lt;span&gt;// 客户端发送图片&lt;/span&gt;&lt;br/&gt;FileInputStream fileStream = &lt;span&gt;new&lt;/span&gt; FileInputStream(&lt;span&gt;&quot;Local_File_Path/jvm.png&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;byte&lt;/span&gt;[] bytes = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; ((i = fileStream.read(bytes)) != -&lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;    outStream.write(bytes);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 写入结束标记，禁用此套接字的输出流，之后再使用输出流会抛异常&lt;/span&gt;&lt;br/&gt;socket.shutdownOutput();&lt;br/&gt;&lt;span&gt;// 接收服务端响应结果&lt;/span&gt;&lt;br/&gt;System.out.println(&lt;span&gt;&quot;server-resp：&quot;&lt;/span&gt;+&lt;span&gt;new&lt;/span&gt; String(bytes,&lt;span&gt;0&lt;/span&gt;,readLen));&lt;br/&gt;&lt;br/&gt;-- &lt;span&gt;2&lt;/span&gt;、服务端&lt;br/&gt;&lt;span&gt;// 接收客户端图片&lt;/span&gt;&lt;br/&gt;FileOutputStream fileOutputStream = &lt;span&gt;new&lt;/span&gt; FileOutputStream(&lt;span&gt;&quot;Local_File_Path/new_jvm.png&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;byte&lt;/span&gt;[] bytes = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; ((i = inStream.read(bytes)) != -&lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;    fileOutputStream.write(bytes, &lt;span&gt;0&lt;/span&gt;, i);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 响应客户端文件处理结果&lt;/span&gt;&lt;br/&gt;outStream.write(&lt;span&gt;&quot;file-save-success&quot;&lt;/span&gt;.getBytes());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;6、TCP协议&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;Socket网络编程是基于TCP协议的，TCP传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，在上述案例中侧重基于流的数据传输，其中关于连接还涉及两个核心概念：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvAoib7m7G4GlDclV9PadtLGYN1bbEmrHvpgKHknVEC9q849ic45NA3uH74MTCVZVObgEYkwAf0Hd2UQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三次握手&lt;/strong&gt;：建立连接的过程，在这个过程中进行了三次网络通信，当连接处于建立的状态，就可以进行正常的通信，即数据传输；&lt;strong&gt;四次挥手&lt;/strong&gt;：关闭连接的过程，调用&lt;code&gt;close&lt;/code&gt;方法，即连接使用结束，在这个过程中进行了四次网络通信；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、Http组件&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;在服务通信时依赖网络，而对于编程来说，更常见的是的Http的组件，在微服务架构中，涉及到Http组件工具有很多，例如Spring框架中的RestTemplate，Feign框架支持ApacheHttp和OkHttp；下面围绕几个常用的组件编写测试案例；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1、基础接口&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BizWeb&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/getApi/{id}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Rep&amp;lt;Integer&amp;gt; &lt;span&gt;getApi&lt;/span&gt;&lt;span&gt;(@PathVariable Integer id)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        log.info(&lt;span&gt;&quot;id={}&quot;&lt;/span&gt;,id);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Rep.ok(id) ;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/getApi_v2/{id}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Rep&amp;lt;Integer&amp;gt; &lt;span&gt;getApiV2&lt;/span&gt;&lt;span&gt;(HttpServletRequest request,&lt;br/&gt;                                 @PathVariable Integer id,&lt;br/&gt;                                 @RequestParam(&lt;span&gt;&quot;name&quot;&lt;/span&gt;)&lt;/span&gt; String name)&lt;/span&gt;{&lt;br/&gt;        String token = request.getHeader(&lt;span&gt;&quot;Token&quot;&lt;/span&gt;);&lt;br/&gt;        log.info(&lt;span&gt;&quot;token={},id={},name={}&quot;&lt;/span&gt;,token,id,name);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Rep.ok(id) ;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@PostMapping&lt;/span&gt;(&lt;span&gt;&quot;/postApi&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Rep&amp;lt;IdKey&amp;gt; &lt;span&gt;postApi&lt;/span&gt;&lt;span&gt;(HttpServletRequest request,@RequestBody IdKey idKey)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        String token = request.getHeader(&lt;span&gt;&quot;Token&quot;&lt;/span&gt;);&lt;br/&gt;        log.info(&lt;span&gt;&quot;token={},idKey={}&quot;&lt;/span&gt;, token,JSONUtil.toJsonStr(idKey));&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Rep.ok(idKey) ;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@PutMapping&lt;/span&gt;(&lt;span&gt;&quot;/putApi&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Rep&amp;lt;IdKey&amp;gt; &lt;span&gt;putApi&lt;/span&gt;&lt;span&gt;(@RequestBody IdKey idKey)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        log.info(&lt;span&gt;&quot;idKey={}&quot;&lt;/span&gt;, JSONUtil.toJsonStr(idKey));&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Rep.ok(idKey) ;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@DeleteMapping&lt;/span&gt;(&lt;span&gt;&quot;/delApi/{id}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Rep&amp;lt;Integer&amp;gt; &lt;span&gt;delApi&lt;/span&gt;&lt;span&gt;(@PathVariable Integer id)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        log.info(&lt;span&gt;&quot;id={}&quot;&lt;/span&gt;,id);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Rep.ok(id) ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;2、ApacheHttp&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestApacheHttp&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String BASE_URL = &lt;span&gt;&quot;http://localhost:8083&quot;&lt;/span&gt; ;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        BasicHeader header = &lt;span&gt;new&lt;/span&gt; BasicHeader(&lt;span&gt;&quot;Token&quot;&lt;/span&gt;,&lt;span&gt;&quot;ApacheSup&quot;&lt;/span&gt;) ;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 1、发送Get请求&lt;/span&gt;&lt;br/&gt;        Map&amp;lt;String,String&amp;gt; param = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;() ;&lt;br/&gt;        param.put(&lt;span&gt;&quot;name&quot;&lt;/span&gt;,&lt;span&gt;&quot;cicada&quot;&lt;/span&gt;) ;&lt;br/&gt;        Rep getRep = doGet(BASE_URL+&lt;span&gt;&quot;/getApi_v2/3&quot;&lt;/span&gt;,header,param, Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;get：&quot;&lt;/span&gt;+getRep);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 2、发送Post请求&lt;/span&gt;&lt;br/&gt;        IdKey postBody = &lt;span&gt;new&lt;/span&gt; IdKey(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;id-key-我&quot;&lt;/span&gt;) ;&lt;br/&gt;        Rep postRep = doPost (BASE_URL+&lt;span&gt;&quot;/postApi&quot;&lt;/span&gt;, header, postBody, Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;post：&quot;&lt;/span&gt;+postRep);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 构建HttpClient对象&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; CloseableHttpClient &lt;span&gt;buildHttpClient&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 请求配置&lt;/span&gt;&lt;br/&gt;        RequestConfig reqConfig = RequestConfig.custom().setConnectTimeout(&lt;span&gt;6000&lt;/span&gt;).build();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; HttpClients.custom()&lt;br/&gt;                .setDefaultRequestConfig(reqConfig).build();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 执行Get请求&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;T &lt;span&gt;doGet&lt;/span&gt; &lt;span&gt;(String url, Header header, Map&amp;lt;String,String&amp;gt; param,&lt;br/&gt;                               Class&amp;lt;T&amp;gt; repClass)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 创建Get请求&lt;/span&gt;&lt;br/&gt;        CloseableHttpClient httpClient = buildHttpClient();&lt;br/&gt;        HttpGet httpGet = &lt;span&gt;new&lt;/span&gt; HttpGet();&lt;br/&gt;        httpGet.addHeader(header);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            URIBuilder builder = &lt;span&gt;new&lt;/span&gt; URIBuilder(url);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (param != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; (String key : param.keySet()) {&lt;br/&gt;                    builder.addParameter(key, param.get(key));&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;            httpGet.setURI(builder.build());&lt;br/&gt;            &lt;span&gt;// 请求执行&lt;/span&gt;&lt;br/&gt;            HttpResponse httpResponse = httpClient.execute(httpGet);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (httpResponse.getStatusLine().getStatusCode() == &lt;span&gt;200&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;// 结果转换&lt;/span&gt;&lt;br/&gt;                String resp = EntityUtils.toString(httpResponse.getEntity());&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; JSONUtil.toBean(resp, repClass);&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            IoUtil.close(httpClient);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 执行Post请求&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;T &lt;span&gt;doPost&lt;/span&gt; &lt;span&gt;(String url, Header header, Object body,Class&amp;lt;T&amp;gt; repClass)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 创建Post请求&lt;/span&gt;&lt;br/&gt;        CloseableHttpClient httpClient = buildHttpClient();&lt;br/&gt;        HttpPost httpPost = &lt;span&gt;new&lt;/span&gt; HttpPost(url);&lt;br/&gt;        httpPost.addHeader(header);&lt;br/&gt;        StringEntity conBody = &lt;span&gt;new&lt;/span&gt; StringEntity(JSONUtil.toJsonStr(body),ContentType.APPLICATION_JSON);&lt;br/&gt;        httpPost.setEntity(conBody);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// 请求执行&lt;/span&gt;&lt;br/&gt;            HttpResponse httpResponse = httpClient.execute(httpPost);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (httpResponse.getStatusLine().getStatusCode() == &lt;span&gt;200&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;// 结果转换&lt;/span&gt;&lt;br/&gt;                String resp = EntityUtils.toString(httpResponse.getEntity());&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; JSONUtil.toBean(resp, repClass);&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            IoUtil.close(httpClient);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;3、OkHttp&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestOkHttp&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String BASE_URL = &lt;span&gt;&quot;http://localhost:8083&quot;&lt;/span&gt; ;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Headers headers = &lt;span&gt;new&lt;/span&gt; Headers.Builder().add(&lt;span&gt;&quot;Token&quot;&lt;/span&gt;,&lt;span&gt;&quot;OkHttpSup&quot;&lt;/span&gt;).build() ;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 1、发送Get请求&lt;/span&gt;&lt;br/&gt;        Rep getRep = execute(BASE_URL+&lt;span&gt;&quot;/getApi/1&quot;&lt;/span&gt;, Method.GET.name(), headers, &lt;span&gt;null&lt;/span&gt;, Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;get：&quot;&lt;/span&gt;+getRep);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 2、发送Post请求&lt;/span&gt;&lt;br/&gt;        IdKey postBody = &lt;span&gt;new&lt;/span&gt; IdKey(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;id-key&quot;&lt;/span&gt;) ;&lt;br/&gt;        Rep postRep = execute(BASE_URL+&lt;span&gt;&quot;/postApi&quot;&lt;/span&gt;, Method.POST.name(), headers, buildBody(postBody), Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;post：&quot;&lt;/span&gt;+postRep);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 3、发送Put请求&lt;/span&gt;&lt;br/&gt;        IdKey putBody = &lt;span&gt;new&lt;/span&gt; IdKey(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;key-id&quot;&lt;/span&gt;) ;&lt;br/&gt;        Rep putRep = execute(BASE_URL+&lt;span&gt;&quot;/putApi&quot;&lt;/span&gt;, Method.PUT.name(), headers, buildBody(putBody), Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;put：&quot;&lt;/span&gt;+putRep);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 4、发送Delete请求&lt;/span&gt;&lt;br/&gt;        Rep delRep = execute(BASE_URL+&lt;span&gt;&quot;/delApi/2&quot;&lt;/span&gt;, Method.DELETE.name(), headers, &lt;span&gt;null&lt;/span&gt;, Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;del：&quot;&lt;/span&gt;+delRep);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 构建JSON请求体&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; RequestBody &lt;span&gt;buildBody&lt;/span&gt; &lt;span&gt;(Object body)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        MediaType mediaType = MediaType.parse(&lt;span&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; RequestBody.create(mediaType, JSONUtil.toJsonStr(body)) ;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 构建OkHttpClient对象&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; OkHttpClient &lt;span&gt;buildOkHttp&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; OkHttpClient.Builder()&lt;br/&gt;                .readTimeout(&lt;span&gt;10&lt;/span&gt;, TimeUnit.SECONDS).connectTimeout(&lt;span&gt;6&lt;/span&gt;, TimeUnit.SECONDS)&lt;br/&gt;                .connectionPool(&lt;span&gt;new&lt;/span&gt; ConnectionPool(&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, TimeUnit.SECONDS))&lt;br/&gt;                .build();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 执行请求&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;T &lt;span&gt;execute&lt;/span&gt; &lt;span&gt;(String url, String method,&lt;br/&gt;                                 Headers headers, RequestBody body,&lt;br/&gt;                                 Class&amp;lt;T&amp;gt; repClass)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 请求创建&lt;/span&gt;&lt;br/&gt;        OkHttpClient httpClient = buildOkHttp() ;&lt;br/&gt;        Request.Builder requestBuild = &lt;span&gt;new&lt;/span&gt; Request.Builder()&lt;br/&gt;                .url(url).method(method, body);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (headers != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            requestBuild.headers(headers);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;  {&lt;br/&gt;            &lt;span&gt;// 请求执行&lt;/span&gt;&lt;br/&gt;            Response response = httpClient.newCall(requestBuild.build()).execute();&lt;br/&gt;            &lt;span&gt;// 结果转换&lt;/span&gt;&lt;br/&gt;            InputStream inStream = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (response.isSuccessful()) {&lt;br/&gt;                ResponseBody responseBody = response.body();&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (responseBody != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                    inStream = responseBody.byteStream();&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (inStream != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;byte&lt;/span&gt;[] respByte = IoUtil.readBytes(inStream);&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; (respByte != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; JSONUtil.toBean(&lt;span&gt;new&lt;/span&gt; String(respByte, Charset.defaultCharset()), repClass);&lt;br/&gt;                    }&lt;br/&gt;                } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;                    e.printStackTrace();&lt;br/&gt;                } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;                    IoUtil.close(inStream);&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;4、RestTemplate&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestRestTemplate&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String BASE_URL = &lt;span&gt;&quot;http://localhost:8083&quot;&lt;/span&gt; ;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        RestTemplate restTemplate = buildRestTemplate() ;&lt;br/&gt;        &lt;span&gt;// 1、发送Get请求&lt;/span&gt;&lt;br/&gt;        Map&amp;lt;String,String&amp;gt; paramMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;() ;&lt;br/&gt;        Rep getRep = restTemplate.getForObject(BASE_URL+&lt;span&gt;&quot;/getApi/1&quot;&lt;/span&gt;,Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;,&lt;span&gt;paramMap&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;get：&quot;&lt;/span&gt;+getRep);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 2、发送Post请求&lt;/span&gt;&lt;br/&gt;        IdKey idKey = &lt;span&gt;new&lt;/span&gt; IdKey(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;id-key&quot;&lt;/span&gt;) ;&lt;br/&gt;        Rep postRep = restTemplate.postForObject(BASE_URL+&lt;span&gt;&quot;/postApi&quot;&lt;/span&gt;,idKey,Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;post：&quot;&lt;/span&gt;+postRep);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 3、发送Put请求&lt;/span&gt;&lt;br/&gt;        IdKey idKey2 = &lt;span&gt;new&lt;/span&gt; IdKey(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;key-id&quot;&lt;/span&gt;) ;&lt;br/&gt;        restTemplate.put(BASE_URL+&lt;span&gt;&quot;/putApi&quot;&lt;/span&gt;,idKey2,paramMap);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 4、发送Delete请求&lt;/span&gt;&lt;br/&gt;        restTemplate.delete(BASE_URL+&lt;span&gt;&quot;/delApi/2&quot;&lt;/span&gt;,paramMap);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 5、自定义Header请求&lt;/span&gt;&lt;br/&gt;        HttpHeaders headers = &lt;span&gt;new&lt;/span&gt; HttpHeaders();&lt;br/&gt;        headers.add(&lt;span&gt;&quot;Token&quot;&lt;/span&gt;,&lt;span&gt;&quot;AdminSup&quot;&lt;/span&gt;);&lt;br/&gt;        HttpEntity&amp;lt;IdKey&amp;gt; requestEntity = &lt;span&gt;new&lt;/span&gt; HttpEntity&amp;lt;&amp;gt;(idKey, headers);&lt;br/&gt;        ResponseEntity&amp;lt;Rep&amp;gt; respEntity = restTemplate.exchange(BASE_URL+&lt;span&gt;&quot;/postApi&quot;&lt;/span&gt;,&lt;br/&gt;                                            HttpMethod.POST, requestEntity, Rep&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;post-header：&quot;&lt;/span&gt;+respEntity.getBody());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; RestTemplate &lt;span&gt;buildRestTemplate&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、参数配置&lt;/span&gt;&lt;br/&gt;        SimpleClientHttpRequestFactory factory = &lt;span&gt;new&lt;/span&gt; SimpleClientHttpRequestFactory();&lt;br/&gt;        factory.setReadTimeout(&lt;span&gt;3000&lt;/span&gt;);&lt;br/&gt;        factory.setConnectTimeout(&lt;span&gt;6000&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 2、创建对象&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RestTemplate(factory) ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;五、参考源码&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;编程文档：&lt;br/&gt;https://gitee.com/cicadasmile/butte-java-note&lt;br/&gt;&lt;br/&gt;应用仓库：&lt;br/&gt;https://gitee.com/cicadasmile/butte-flyer-parent&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzU4Njg0MzYwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBj3abVSgCmvm7FIYw55ficInd2se9ia6KSic0ma25AUvrmUtXUwXibjhHmCc7DUawfXBI30QuHBjDnzw/0?wx_fmt=png&quot; data-nickname=&quot;知了一笑&quot; data-alias=&quot;cicada_smile&quot; data-signature=&quot;积累、总结、用心记录。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3476a108fe3fb6d5aa6ab8e951cd8a6b</guid>
<title>【Maven实战技巧】「插件使用专题」Maven-Assembly插件实现自定义打包_洛神灬殇的博客-CSDN博客</title>
<link>https://toutiao.io/k/qwmecke</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot;&gt;
        
        
                &lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h2&gt;&lt;a id=&quot;_0&quot;/&gt;前提概要&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;最近我们项目越来越多了，然后我就在想如何才能把基础服务的打包方式统一起来，并且可以实现按照我们的要求来生成，通过研究，我们通过使用maven的assembly插件完美的实现了该需求，爽爆了有木有。本文分享该插件的配置以及微服务的统一打包方式。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a id=&quot;mavenassemblyplugin_4&quot;/&gt;maven-assembly-plugin打包插件&lt;/h3&gt; 
&lt;h4&gt;&lt;a id=&quot;_6&quot;/&gt;配置步骤及其他事项&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;首先我们需要在pom.xml中配置maven的assembly插件&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;executions&amp;gt;
&amp;lt;!-- 配置执行器 --&amp;gt;
          &amp;lt;execution&amp;gt;
            &amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt;
&amp;lt;!-- 绑定到package生命周期阶段上 --&amp;gt;
            &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
            &amp;lt;goals&amp;gt;
  &amp;lt;!-- 只运行一次 --&amp;gt;
              &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;!--生成包的末尾添加assembly id，一般关闭 --&amp;gt;
              &amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt;
              &amp;lt;finalName&amp;gt;${project.artifactId}-${project.version}&amp;lt;/finalName&amp;gt;
              &amp;lt;!--加载指定的配置文件--&amp;gt;
              &amp;lt;descriptors&amp;gt;
              &amp;lt;descriptor&amp;gt;src/main/assembly/assembly.xml&amp;lt;/descriptor&amp;gt;
              &amp;lt;/descriptors&amp;gt;
            &amp;lt;/configuration&amp;gt;
          &amp;lt;/execution&amp;gt;
        &amp;lt;/executions&amp;gt;
      &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
 &amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_41&quot;/&gt;配置参数介绍说明&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt;execution：配置执行器 
  &lt;ul&gt;&lt;li&gt;phase：绑定到package生命周期阶段上&lt;/li&gt;&lt;li&gt;goal：{single}：只运行一次&lt;/li&gt;&lt;li&gt;configuration-&amp;gt;appendAssemblyId：生成包的末尾添加assembly id，一般关闭&lt;/li&gt;&lt;li&gt;descriptor：src/main/assembly/assembly.xml：后续会讲解，主要用于描述如何进行打包的规则。&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;assemblyxml_49&quot;/&gt;自定义格式包assembly.xml&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;接着我们在src/main/assembly文件中配置assembly.xml文件&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;  &amp;lt;assembly&amp;gt;
      &amp;lt;id&amp;gt;唯一编号&amp;lt;/id&amp;gt;
      &amp;lt;formats&amp;gt;
      &amp;lt;!--打包的文件格式,也可以有：war zip--&amp;gt;
          &amp;lt;format&amp;gt;tar.gz&amp;lt;/format&amp;gt;
      &amp;lt;/formats&amp;gt;
      &amp;lt;!--tar.gz压缩包下是否生成和项目名相同的根目录--&amp;gt;
      &amp;lt;includeBaseDirectory&amp;gt;true&amp;lt;/includeBaseDirectory&amp;gt;
     &amp;lt;fileSets&amp;gt;
         &amp;lt;fileSet&amp;gt;
             &amp;lt;directory&amp;gt;src/main/bin&amp;lt;/directory&amp;gt;
             &amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt;
 &amp;lt;!-- Linux权限 --&amp;gt;
             &amp;lt;fileMode&amp;gt;0644&amp;lt;/fileMode&amp;gt;
         &amp;lt;/fileSet&amp;gt;
         &amp;lt;fileSet&amp;gt;
&amp;lt;directory&amp;gt;target/classes/META-INF/conf&amp;lt;/directory&amp;gt;
            &amp;lt;outputDirectory&amp;gt;conf/META-INF/conf&amp;lt;/outputDirectory&amp;gt;
&amp;lt;!-- Linux权限 --&amp;gt;
&amp;lt;fileMode&amp;gt;0644&amp;lt;/fileMode&amp;gt;
        &amp;lt;/fileSet&amp;gt;
&amp;lt;fileSet&amp;gt;
&amp;lt;directory&amp;gt;target/classes&amp;lt;/directory&amp;gt;
&amp;lt;outputDirectory&amp;gt;conf&amp;lt;/outputDirectory&amp;gt;
&amp;lt;fileMode&amp;gt;0644&amp;lt;/fileMode&amp;gt;
&amp;lt;includes&amp;gt;&amp;lt;!-- 只负责这些目标文件--&amp;gt;
&amp;lt;include&amp;gt;*.properties&amp;lt;/include&amp;gt;
&amp;lt;include&amp;gt;*.xml&amp;lt;/include&amp;gt;
&amp;lt;/includes&amp;gt;
&amp;lt;/fileSet&amp;gt;
     &amp;lt;/fileSets&amp;gt;
     &amp;lt;!-- 输出到lib路径 --&amp;gt;
     &amp;lt;dependencySets&amp;gt;
          &amp;lt;dependencySet&amp;gt;
             &amp;lt;!--是否在最外层套一个本项目的名称的文件目录--&amp;gt;
             &amp;lt;useProjectArtifact&amp;gt;true&amp;lt;/useProjectArtifact&amp;gt;
             &amp;lt;!-- 输出到这个路径下 --&amp;gt;
             &amp;lt;outputDirectory&amp;gt;lib&amp;lt;/outputDirectory&amp;gt;
             &amp;lt;!--将scope为runtime的依赖包打包--&amp;gt;
             &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
         &amp;lt;/dependencySet&amp;gt;
     &amp;lt;/dependencySets&amp;gt;
 &amp;lt;/assembly&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;p&gt;&lt;a href=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html&quot;&gt;assembly的具体语法，请参见官网：&lt;/a&gt;&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;&amp;lt;assembly
xmlns=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd&quot;&amp;gt;
&amp;lt;id&amp;gt;my-assembly&amp;lt;/id&amp;gt;
&amp;lt;formats&amp;gt;
          &amp;lt;!--打包生成后的格式 --&amp;gt;
&amp;lt;format&amp;gt;zip&amp;lt;/format&amp;gt;
&amp;lt;/formats&amp;gt;
     &amp;lt;!-- --&amp;gt;
&amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt;
&amp;lt;fileSets&amp;gt;
&amp;lt;fileSet&amp;gt;
               &amp;lt;!--脚本所在的文件夹，以及打包后将脚本输出到哪个文件夹中 --&amp;gt;
&amp;lt;directory&amp;gt;src/scripts&amp;lt;/directory&amp;gt;
&amp;lt;outputDirectory&amp;gt;alarm/bin&amp;lt;/outputDirectory&amp;gt;
               &amp;lt;!-- 哪些文件会被提取 --&amp;gt;
&amp;lt;includes&amp;gt;
&amp;lt;include&amp;gt;*.sh&amp;lt;/include&amp;gt;
&amp;lt;/includes&amp;gt;
               &amp;lt;!-- 文件权限及编码 --&amp;gt;
&amp;lt;fileMode&amp;gt;0755&amp;lt;/fileMode&amp;gt;
&amp;lt;lineEnding&amp;gt;unix&amp;lt;/lineEnding&amp;gt;
&amp;lt;/fileSet&amp;gt;
&amp;lt;fileSet&amp;gt;
               &amp;lt;!--同上，这里配置的是配置文件所在的文件夹 --&amp;gt;
&amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;
&amp;lt;outputDirectory&amp;gt;alarm/conf&amp;lt;/outputDirectory&amp;gt;
&amp;lt;includes&amp;gt;
&amp;lt;include&amp;gt;*.yml&amp;lt;/include&amp;gt;
&amp;lt;/includes&amp;gt;
&amp;lt;lineEnding&amp;gt;unix&amp;lt;/lineEnding&amp;gt;
&amp;lt;/fileSet&amp;gt;
&amp;lt;!--artifact --&amp;gt;
&amp;lt;fileSet&amp;gt;
               &amp;lt;!--这里的target是maven-compiler-plugin生成该项目的jar包的位置 --&amp;gt;
&amp;lt;directory&amp;gt;target&amp;lt;/directory&amp;gt;
&amp;lt;outputDirectory&amp;gt;alarm/lib&amp;lt;/outputDirectory&amp;gt;
&amp;lt;includes&amp;gt;
&amp;lt;include&amp;gt;*.jar&amp;lt;/include&amp;gt;
&amp;lt;/includes&amp;gt;
&amp;lt;fileMode&amp;gt;0755&amp;lt;/fileMode&amp;gt;
&amp;lt;/fileSet&amp;gt;
&amp;lt;/fileSets&amp;gt;
&amp;lt;dependencySets&amp;gt;
&amp;lt;dependencySet&amp;gt;
               &amp;lt;!--这里是将该项目依赖的所有jar包存入lib文件夹中 --&amp;gt;
&amp;lt;outputDirectory&amp;gt;alarm/lib&amp;lt;/outputDirectory&amp;gt;
&amp;lt;useProjectArtifact&amp;gt;false&amp;lt;/useProjectArtifact&amp;gt;
&amp;lt;useProjectAttachments&amp;gt;true&amp;lt;/useProjectAttachments&amp;gt;
&amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
&amp;lt;/dependencySet&amp;gt;
&amp;lt;/dependencySets&amp;gt;
&amp;lt;/assembly&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;_166&quot;/&gt;启动脚本&lt;/h3&gt; 
&lt;p&gt;在完成以上配置后，只需在指定的位置建立scripts/start.sh和stop.sh两个脚本即可完成。具体启动脚本如下：&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;startsh_170&quot;/&gt;start.sh启动文件脚本&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;#!/bin/sh
basepath=$(cd `dirname $0`;cd &#x27;../&#x27;; pwd)
echo &quot;path:&quot;$basepath
jarHome=&#x27;/my.jar&#x27;
echo &quot;Starting my service&quot;
ls_date=`date +%Y%m%d`
if [ ! -d &quot;${basepath}/log&quot; ]; then
  mkdir ${basepath}/log
fi
if [ ! -d &quot;$basepath/log/${ls_date}&quot; ]; then
  mkdir $basepath/log/${ls_date}
fi
nohup java -jar $basepath$jarHome --spring.config.location=$basepath/conf/server-attach.yml,$basepath/conf/server-shared.yml&amp;gt; $basepath/log/${ls_date}/${ls_date}.log &amp;amp;
#####
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;主要命令是获取当天日期，然后在log文件夹下建立指定日期的文件夹，并将日志存放进去。其中–spring.config.location用于加载指定的配置文件，多个配置文件用逗号分割。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a id=&quot;stopsh_192&quot;/&gt;stop.sh停止文件脚本&lt;/h4&gt; 
&lt;p&gt;停止脚本通过ps -ef获取进程id然后kill，如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#!/bin/sh
my=`ps -ef |grep my.jar | grep -v grep | awk &#x27;{print $2}&#x27;`
kill -9 $my
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_202&quot;/&gt;结语&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;以上配置完成后使用mvn package命令即可自动打成一个zip压缩包，包内包含bin、conf、lib文件夹，可用启动脚本一键启动。实际上这里能修改的地方还有很多，包括启动脚本也可以用其他方式如java -classpath方式启动等等，具体的可以根据自身需求进行相应修改。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5de22a189d04eba6140abe0076447928</guid>
<title>gobackup数据备份</title>
<link>https://toutiao.io/k/srsaupn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;p align=&quot;center&quot; dir=&quot;auto&quot;&gt;
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https://user-images.githubusercontent.com/5518/205909959-12b92929-4ac5-4bb5-9111-6f9a3ed76cf6.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5518/205909959-12b92929-4ac5-4bb5-9111-6f9a3ed76cf6.png&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;&lt;h1 align=&quot;center&quot; dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-gobackup&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#gobackup&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;GoBackup&lt;/h1&gt;
&lt;p align=&quot;center&quot; dir=&quot;auto&quot;&gt;CLI tool for backup your databases, files to FTP / SCP / S3 / GCS and other cloud storages.&lt;/p&gt;
&lt;p align=&quot;center&quot; dir=&quot;auto&quot;&gt;
   &lt;a href=&quot;https://github.com/gobackup/gobackup/actions?query=workflow%3AGo&quot;&gt;&lt;img src=&quot;https://github.com/gobackup/gobackup/workflows/Go/badge.svg&quot; alt=&quot;Build Status&quot;/&gt;&lt;/a&gt;
   &lt;a href=&quot;https://github.com/gobackup/gobackup/releases&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/0602f8a473912d1542c5d240387dd9a2de692c199227767dccffabc533507cf8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f676f6261636b75702f676f6261636b75703f6c6162656c3d56657273696f6e26636f6c6f723d31&quot; alt=&quot;GitHub release (latest by date)&quot; data-canonical-src=&quot;https://img.shields.io/github/v/release/gobackup/gobackup?label=Version&amp;amp;color=1&quot;/&gt;&lt;/a&gt;
   &lt;a href=&quot;https://hub.docker.com/r/huacnlee/gobackup&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8320392a5273185f3b42e21c8f8ccc8b7d6bf8330b1e0ae7dc682cccbf477eb1/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f762f687561636e6c65652f676f6261636b75703f6c6162656c3d446f636b657226636f6c6f723d626c7565&quot; alt=&quot;Docker Image Version (latest server)&quot; data-canonical-src=&quot;https://img.shields.io/docker/v/huacnlee/gobackup?label=Docker&amp;amp;color=blue&quot;/&gt;&lt;/a&gt;
   &lt;a href=&quot;https://formulae.brew.sh/formula/gobackup&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;homebrew version&quot; src=&quot;https://camo.githubusercontent.com/5b740206b66b98f900f7fdc1e2cf9f15bcba44ed2e75df33a47b83760d3aaa32/68747470733a2f2f696d672e736869656c64732e696f2f686f6d65627265772f762f676f6261636b75703f636f6c6f723d73756363657373266c6162656c3d42726577&quot; data-canonical-src=&quot;https://img.shields.io/homebrew/v/gobackup?color=success&amp;amp;label=Brew&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p dir=&quot;auto&quot;/&gt;
&lt;p dir=&quot;auto&quot;&gt;GoBackup is a fullstack backup tool design for application servers, to backup your databases, files to cloud storages (Local disk, FTP, SCP, S3, GCS, Aliyun OSS ...).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;Inspired by &lt;a href=&quot;https://github.com/backup/backup&quot;&gt;backup/backup&lt;/a&gt; and replace it for without Ruby dependency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;https://asciinema.org/a/543564&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/dd8f07f44fbfeabdc903f44208e0e0f9cf6eb62a26f8cb7554f26734ca9acbe3/68747470733a2f2f61736369696e656d612e6f72672f612f3534333536342e737667&quot; alt=&quot;asciicast&quot; data-canonical-src=&quot;https://asciinema.org/a/543564.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;You can write a config file, run &lt;code&gt;gobackup perform&lt;/code&gt; command by once to dump database as file, archive config files, and then package them into a single file.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;It&#x27;s allow you store the backup file to local, FTP, SCP, S3 or other cloud storages.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;GoBackup 是一个类似 &lt;a href=&quot;https://github.com/backup/backup&quot;&gt;backup/backup&lt;/a&gt; 的一站式备份工具，为中小型服务器／个人服务器而设计，配合内置的计划任务，实现定时备份的目的。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;使用 GoBackup 你可以通过一个简单的配置文件，一次（执行一个命令）将服务器上重要的（数据库、配置文件）东西导出、打包压缩，并备份到指定目的地（如：本地路径、FTP、云存储...）。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;https://gobackup.github.io&quot; rel=&quot;nofollow&quot;&gt;https://gobackup.github.io&lt;/a&gt;&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-features&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#features&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;No dependencies.&lt;/li&gt;
&lt;li&gt;Multiple Databases source support.&lt;/li&gt;
&lt;li&gt;Multiple Storage type support.&lt;/li&gt;
&lt;li&gt;Archive paths or files into a tar.&lt;/li&gt;
&lt;li&gt;Split large backup file into multiple parts.&lt;/li&gt;
&lt;li&gt;Run as daemon to backup in schedully.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-databases&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#databases&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Databases&lt;/h3&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Redis - &lt;code&gt;mode: sync/copy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-storages&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#storages&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Storages&lt;/h3&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-notifier&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#notifier&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Notifier&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;since: 1.5.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;Send notification when backup has success or failed.&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;Mail (SMTP)&lt;/li&gt;
&lt;li&gt;Webhook&lt;/li&gt;
&lt;li&gt;Discord&lt;/li&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;li&gt;Feishu&lt;/li&gt;
&lt;li&gt;DingTalk&lt;/li&gt;
&lt;li&gt;GitHub (Comment on Issue)&lt;/li&gt;
&lt;li&gt;Telegram&lt;/li&gt;
&lt;li&gt;AWS SES&lt;/li&gt;
&lt;li&gt;Postmark&lt;/li&gt;
&lt;li&gt;SendGrid&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-installation&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#installation&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-shell notranslate position-relative overflow-auto&quot; dir=&quot;auto&quot; data-snippet-clipboard-copy-content=&quot;curl -sSL https://gobackup.github.io/install | sh&quot;&gt;&lt;pre&gt;curl -sSL https://gobackup.github.io/install &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; sh&lt;/pre&gt;&lt;/div&gt;
&lt;p dir=&quot;auto&quot;&gt;after that, you will get &lt;code&gt;/usr/local/bin/gobackup&lt;/code&gt; command.&lt;/p&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-install-via-homebrew&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#install-via-homebrew&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Install via Homebrew&lt;/h3&gt;

&lt;div class=&quot;highlight highlight-source-shell notranslate position-relative overflow-auto&quot; dir=&quot;auto&quot; data-snippet-clipboard-copy-content=&quot;$ gobackup -h&amp;#10;NAME:&amp;#10;   gobackup - Backup your databases, files to FTP / SCP / S3 / GCS and other cloud storages.&amp;#10;&amp;#10;USAGE:&amp;#10;   gobackup [global options] command [command options] [arguments...]&amp;#10;&amp;#10;VERSION:&amp;#10;   1.3.0&amp;#10;&amp;#10;COMMANDS:&amp;#10;   perform&amp;#10;   start    Start as daemon&amp;#10;   run      Run GoBackup&amp;#10;   help, h  Shows a list of commands or help for one command&amp;#10;&amp;#10;GLOBAL OPTIONS:&amp;#10;   --help, -h     show help (default: false)&amp;#10;   --version, -v  print the version (default: false)&quot;&gt;&lt;pre&gt;$ gobackup -h
NAME:
   gobackup - Backup your databases, files to FTP / SCP / S3 / GCS and other cloud storages.

USAGE:
   gobackup [global options] &lt;span class=&quot;pl-c1&quot;&gt;command&lt;/span&gt; [command options] [arguments...]

VERSION:
   1.3.0

COMMANDS:
   perform
   start    Start as daemon
   run      Run GoBackup
   help, h  Shows a list of commands or &lt;span class=&quot;pl-c1&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; one &lt;span class=&quot;pl-c1&quot;&gt;command&lt;/span&gt;

GLOBAL OPTIONS:
   --help, -h     show &lt;span class=&quot;pl-c1&quot;&gt;help&lt;/span&gt; (default: false)
   --version, -v  print the version (default: false)&lt;/pre&gt;&lt;/div&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-configuration&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#configuration&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;GoBackup will seek config files in:&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;~/.gobackup/gobackup.yml&lt;/li&gt;
&lt;li&gt;/etc/gobackup/gobackup.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;Example config: &lt;a href=&quot;https://github.com/huacnlee/gobackup/blob/master/gobackup_test.yml&quot;&gt;gobackup_test.yml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-yaml notranslate position-relative overflow-auto&quot; dir=&quot;auto&quot; data-snippet-clipboard-copy-content=&quot;models:&amp;#10;  gitlab:&amp;#10;    compress_with:&amp;#10;      type: tgz&amp;#10;    storages:&amp;#10;      scp1:&amp;#10;        type: scp&amp;#10;        path: ~/backup&amp;#10;        host: your-host.com&amp;#10;        private_key: ~/.ssh/id_rsa&amp;#10;        username: ubuntu&amp;#10;        password: password&amp;#10;        timeout: 300&amp;#10;    databases:&amp;#10;      gitlab:&amp;#10;        type: mysql&amp;#10;        host: localhost&amp;#10;        port: 3306&amp;#10;        database: gitlab_production&amp;#10;        username: root&amp;#10;        password:&amp;#10;        additional_options: --single-transaction --quick&amp;#10;      gitlab_redis:&amp;#10;        type: redis&amp;#10;        mode: sync&amp;#10;        rdb_path: /var/db/redis/dump.rdb&amp;#10;        invoke_save: true&amp;#10;        password:&amp;#10;    archive:&amp;#10;      includes:&amp;#10;        - /home/git/.ssh/&amp;#10;        - /etc/mysql/my.conf&amp;#10;        - /etc/nginx/nginx.conf&amp;#10;        - /etc/nginx/conf.d&amp;#10;        - /etc/redis/redis.conf&amp;#10;        - /etc/logrotate.d/&amp;#10;      excludes:&amp;#10;        - /home/ubuntu/.ssh/known_hosts&amp;#10;        - /etc/logrotate.d/syslog&amp;#10;  gitlab_repos:&amp;#10;    storages:&amp;#10;      local:&amp;#10;        type: local&amp;#10;        path: /data/backups/gitlab-repos/&amp;#10;    archive:&amp;#10;      includes:&amp;#10;        - /home/git/repositories&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-ent&quot;&gt;models&lt;/span&gt;:
  &lt;span class=&quot;pl-ent&quot;&gt;gitlab&lt;/span&gt;:
    &lt;span class=&quot;pl-ent&quot;&gt;compress_with&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;tgz&lt;/span&gt;
    &lt;span class=&quot;pl-ent&quot;&gt;storages&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;scp1&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;scp&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;~/backup&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;host&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;your-host.com&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;private_key&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;~/.ssh/id_rsa&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;ubuntu&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;password&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;pl-ent&quot;&gt;databases&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;gitlab&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;mysql&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;host&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;localhost&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;port&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;3306&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;database&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;gitlab_production&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;password&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;additional_options&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;--single-transaction --quick&lt;/span&gt;
      &lt;span class=&quot;pl-ent&quot;&gt;gitlab_redis&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;redis&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;mode&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;sync&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;rdb_path&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;/var/db/redis/dump.rdb&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;invoke_save&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;password&lt;/span&gt;:
    &lt;span class=&quot;pl-ent&quot;&gt;archive&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;includes&lt;/span&gt;:
        - &lt;span class=&quot;pl-s&quot;&gt;/home/git/.ssh/&lt;/span&gt;
        - &lt;span class=&quot;pl-s&quot;&gt;/etc/mysql/my.conf&lt;/span&gt;
        - &lt;span class=&quot;pl-s&quot;&gt;/etc/nginx/nginx.conf&lt;/span&gt;
        - &lt;span class=&quot;pl-s&quot;&gt;/etc/nginx/conf.d&lt;/span&gt;
        - &lt;span class=&quot;pl-s&quot;&gt;/etc/redis/redis.conf&lt;/span&gt;
        - &lt;span class=&quot;pl-s&quot;&gt;/etc/logrotate.d/&lt;/span&gt;
      &lt;span class=&quot;pl-ent&quot;&gt;excludes&lt;/span&gt;:
        - &lt;span class=&quot;pl-s&quot;&gt;/home/ubuntu/.ssh/known_hosts&lt;/span&gt;
        - &lt;span class=&quot;pl-s&quot;&gt;/etc/logrotate.d/syslog&lt;/span&gt;
  &lt;span class=&quot;pl-ent&quot;&gt;gitlab_repos&lt;/span&gt;:
    &lt;span class=&quot;pl-ent&quot;&gt;storages&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;local&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;/data/backups/gitlab-repos/&lt;/span&gt;
    &lt;span class=&quot;pl-ent&quot;&gt;archive&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;includes&lt;/span&gt;:
        - &lt;span class=&quot;pl-s&quot;&gt;/home/git/repositories&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-usage&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#usage&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-perform-backup&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#perform-backup&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Perform backup&lt;/h3&gt;

&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-backup-schedule&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#backup-schedule&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Backup schedule&lt;/h3&gt;
&lt;p dir=&quot;auto&quot;&gt;GoBackup built in a daemon mode, you can use &lt;code&gt;gobackup start&lt;/code&gt; to start it.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;You can configure the &lt;code&gt;schedule&lt;/code&gt; for each models, it will run backup task at the time you set.&lt;/p&gt;
&lt;h4 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-for-example&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#for-example&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;For example&lt;/h4&gt;
&lt;p dir=&quot;auto&quot;&gt;Configure your schedule in &lt;code&gt;gobackup.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-yaml notranslate position-relative overflow-auto&quot; dir=&quot;auto&quot; data-snippet-clipboard-copy-content=&quot;models:&amp;#10;  my_backup:&amp;#10;    schedule:&amp;#10;      # At 04:05 on Sunday.&amp;#10;      cron: &amp;quot;5 4 * * sun&amp;quot;&amp;#10;    storages:&amp;#10;      local:&amp;#10;        type: local&amp;#10;        path: /path/to/backups&amp;#10;    databases:&amp;#10;      mysql:&amp;#10;        type: mysql&amp;#10;        host: localhost&amp;#10;        port: 3306&amp;#10;        database: my_database&amp;#10;        username: root&amp;#10;        password: password&amp;#10;  other_backup:&amp;#10;    # At 04:05 on every day.&amp;#10;    schedule:&amp;#10;      every: &amp;quot;1day&amp;quot;,&amp;#10;      at: &amp;quot;04:05&amp;quot;&amp;#10;    storages:&amp;#10;      local:&amp;#10;        type: local&amp;#10;        path: /path/to/backups&amp;#10;    databases:&amp;#10;      mysql:&amp;#10;        type: mysql&amp;#10;        host: localhost&amp;#10;        port: 3306&amp;#10;        database: my_database&amp;#10;        username: root&amp;#10;        password: password&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-ent&quot;&gt;models&lt;/span&gt;:
  &lt;span class=&quot;pl-ent&quot;&gt;my_backup&lt;/span&gt;:
    &lt;span class=&quot;pl-ent&quot;&gt;schedule&lt;/span&gt;:
      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; At 04:05 on Sunday.&lt;/span&gt;
      &lt;span class=&quot;pl-ent&quot;&gt;cron&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;5 4 * * sun&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-ent&quot;&gt;storages&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;local&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;/path/to/backups&lt;/span&gt;
    &lt;span class=&quot;pl-ent&quot;&gt;databases&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;mysql&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;mysql&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;host&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;localhost&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;port&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;3306&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;database&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;my_database&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;password&lt;/span&gt;
  &lt;span class=&quot;pl-ent&quot;&gt;other_backup&lt;/span&gt;:
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; At 04:05 on every day.&lt;/span&gt;
    &lt;span class=&quot;pl-ent&quot;&gt;schedule&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;every&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;1day&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;pl-ent&quot;&gt;at&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;04:05&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-ent&quot;&gt;storages&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;local&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;/path/to/backups&lt;/span&gt;
    &lt;span class=&quot;pl-ent&quot;&gt;databases&lt;/span&gt;:
      &lt;span class=&quot;pl-ent&quot;&gt;mysql&lt;/span&gt;:
        &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;mysql&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;host&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;localhost&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;port&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;3306&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;database&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;my_database&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;pl-ent&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;password&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-start-daemon&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#start-daemon&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Start daemon&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p dir=&quot;auto&quot;&gt;NOTE: If you wants start without daemon, use &lt;code&gt;gobackup run&lt;/code&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-signal-handling&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#signal-handling&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Signal handling&lt;/h3&gt;
&lt;p dir=&quot;auto&quot;&gt;GoBackup will handle the following signals:&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;&lt;code&gt;HUP&lt;/code&gt; - Hot reload configuration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QUIT&lt;/code&gt; - Graceful shutdown.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight highlight-source-shell notranslate position-relative overflow-auto&quot; dir=&quot;auto&quot; data-snippet-clipboard-copy-content=&quot;$ ps aux | grep gobackup&amp;#10;jason            20443   0.0  0.1 409232800   8912   ??  Ss    7:47PM   0:00.02 gobackup run&amp;#10;&amp;#10;# Reload configuration&amp;#10;$ kill -HUP 20443&amp;#10;# Exit daemon&amp;#10;$ kill -QUIT 20443&quot;&gt;&lt;pre&gt;$ ps aux &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; grep gobackup
jason            20443   0.0  0.1 409232800   8912   &lt;span class=&quot;pl-k&quot;&gt;??&lt;/span&gt;  Ss    7:47PM   0:00.02 gobackup run

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Reload configuration&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;kill&lt;/span&gt; -HUP 20443
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Exit daemon&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;kill&lt;/span&gt; -QUIT 20443&lt;/pre&gt;&lt;/div&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-license&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#license&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;License&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;MIT&lt;/p&gt;
&lt;/article&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>