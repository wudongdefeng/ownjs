<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>fa78302f321d2e8611a0ab96f708d0af</guid>
<title>软件架构的 23 个基本原则</title>
<link>https://toutiao.io/k/mv00es0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;软件架构师在做出架构设计时需要遵循一些基本规则，本文介绍的23条原则就是其中最基础的规则，是所有软件工程师都需要牢记并实践的原则。原文：23 Basic Principles in Software Architecture&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6662857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0USqAnz00lsvUzFUYiadfOvugfN037YqlQ4STInib9VtCTa9f7beTORooa8Lt304ZiaKybbsBUf7nt2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;figcaption&gt;Cris DiNoto @Unsplash&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件体系架构基于一组适用于各种软件系统的基本原则，有经验的架构师知道这些原则，并且能够在软件产品的正确位置实现特定的原则。下面我们快速浏览一下架构师日常遵循的基本原则:&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. &lt;em&gt;依赖倒置(Dependency Inversion)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原则表明依赖的方向应该是抽象的，而不是具体实现。如果编译时依赖在运行时执行的方向上流动，就形成了直接依赖。通过依赖倒置，可以反转依赖控制的方向。下面的文章更深入的讨论了这一原则: How to apply SOLID Software Design Principles to Spring Boot Application (Part 5)&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. &lt;em&gt;关注点分离(Separation of Concerns)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原则指出，软件系统应该按照所做的工作类型来划分。比方说可以按照业务逻辑、基础设施或用户界面划分为不同的部分。通过将系统划分为基于不同活动区域的不同部分，使得开发/测试/部署更加容易。SoC是软件架构模式(如领域驱动设计、六边形架构、整洁架构)背后的驱动力。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. &lt;em&gt;控制反转(Inversion of Control)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则类似于依赖倒置原则，但适用于更广泛的背景。IoC反转了由不同的第三方框架(如Spring Framework)管理的控制流。与传统Java EE程序(由开发工程师按程序初始化Beans)不同，Spring控制Bean的配置，这意味着控制倒置。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. &lt;em&gt;依赖注入(Dependency Injection)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则意味着依赖应该在运行时通过构造函数注入。在下面的例子中，Action Interface通过HumanAction Implementation注入到Human类中，从而决定在运行时实现哪个特定的动作。这种技术提供了控制依赖的灵活性:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; az.alizeynalli.di;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Action&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HumanAction&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Action&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.print(&lt;span&gt;&quot;run&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Human&lt;/span&gt;  &lt;/span&gt;{&lt;br/&gt;     &lt;br/&gt;    Action action;&lt;br/&gt;     &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Human&lt;/span&gt;&lt;span&gt;(Action action)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.action = action;&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{        &lt;br/&gt;        actoin.&lt;span&gt;do&lt;/span&gt;();        &lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Human human = &lt;span&gt;new&lt;/span&gt; Human(&lt;span&gt;new&lt;/span&gt; HumanAction);&lt;br/&gt;        human.&lt;span&gt;do&lt;/span&gt;();&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. &lt;em&gt;单一职责(Single Responsibility)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则的主要思想是限定软件系统的每个构建块只承担唯一的责任。无论构建块的作用域是什么，是插件、包、类、函数，甚至是变量，应该只有一个职责。这篇文章更深入的讨论了这一原则: How to apply SOLID Software Design Principles to Spring Boot Application (Part 1)&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6. &lt;em&gt;DRY(Don’t Repeat Yourself)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则旨在通过避免重复代码来消除冗余。如果存在针对某些行为的现有功能，则应该重复使用，而不是在多个实例中拷贝相同的代码片段。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;每个知识片段在系统中都必须有单一、明确、权威的表示。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7. &lt;em&gt;开闭原则(Open-Closed)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;软件构件应该对扩展开放，对修改关闭。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原理的简单描述首先是由Bertrand Meyer提出的。每次都需要修改的软件系统只会变得一团糟，并且这种混乱的程序很容易在每次修改时出现错误。每个新功能都应该最大限度的增加新代码，最小限度减少旧代码的更改，理想情况下对旧代码的更改为零。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8. &lt;em&gt;持久化透明(Persistence Ignorance)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;持久化透明的理念是，代码应该不受任何数据库或持久性技术的影响。业务逻辑应该与任何技术无关。如果明天，有更好、更有效、更便宜的持久化技术，应该能够以不影响上层抽象的方式改变系统的这一部分。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;9. &lt;em&gt;YAGNI&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;You ain’t gonna need it. 这一原则试图避免软件系统的过早优化。开发人员通常会在系统中过度设计一些东西，以期在将来的某个时候会有帮助，但这一时刻往往不会到来。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10. &lt;em&gt;童子军规则(Boy Scout Rule)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;在离开的时候要让露营地比来的时候更干净。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的主要思想是，当开发时遇到反模式，要坚持重构代码。随着时间的推移，这会提高代码质量。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;11. &lt;em&gt;里氏替换原则(Liskov-Subsititution)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果对于每个类型为S的对象o1，都有一个类型为T的对象o2，这样对于用T定义的所有程序P，当o1取代o2时，P的行为不变，那么S就是T的子类型。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Barbara Liskov的这个定义可能听起来很混乱，但本质上这个原则简单易懂。如果重述上面的定义，该原则的意思是: 在使用继承时，继承的层次结构应该在功能和业务逻辑方面保持一致。子类应该是可以相互替换的，并且不能改变父类的行为。作为一个简单的例子，可以用“&lt;em&gt;臭名昭著的正方形/矩形&lt;/em&gt;”问题。其中正方形不应该是矩形的子类型，因为这两个几何形状的高度和长度的定义是不同的(正方形的高度和长度是相等的，而矩形的高度和长度是不同的)。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;12. &lt;em&gt;封装(Encapsulation)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件系统的不同构建块应该通过封装来限制外界对其组件的访问，可以通过在类范围内设置组件为私有或在插件范围内设置访问限制来实现(就java而言)，从而隐藏信息。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;13. &lt;em&gt;松耦合(Loose Coupling)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件架构中最重要的原则之一是松耦合，这一原则表明软件系统的依赖关系应该松散，系统的一部分发生变化，对其他部分的影响应该最小。松耦合可以通过依赖倒置、异步消息中间件、事件源等实现。下面的文章深入探讨了软件工程中不同形式的耦合: 9 Forms of Coupling in Software Architecture&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;14. &lt;em&gt;内聚(Cohesion)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;内聚是指模块内的元素依赖的程度。某种意义上说，是对类的方法和数据以及该类所服务的某种统一目的或概念之间关系强度的度量。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构建高内聚的类是一种最佳实践，有利于实现单一责任原则、松耦合等。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;15. &lt;em&gt;接口隔离(Interface Segregation)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;接口隔离原则&lt;/strong&gt;指出，不应强迫客户端依赖不使用的方法。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该明确的是，这个原则主要适用于静态类型的编程语言，如Java、C等。在像Python或Ruby这样的动态类型语言中，这个原则没有太大意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以想象这样一种情况，我们的Income和Expense用例都依赖于支持这两种用例的业务逻辑功能。因此Income用例的很多依赖都和Expense用例相关，而Expense用例的依赖情况也有相同的问题。基于以上讨论，ISP违规情况如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; az.alizeynalli.cashflow.core.service;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ConverterService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;Income &lt;span&gt;convertIncome&lt;/span&gt;&lt;span&gt;(Income income)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;Expense &lt;span&gt;convertExpense&lt;/span&gt;&lt;span&gt;(Expense expense)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ExpenseConverterServiceImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ConverterService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Income &lt;span&gt;convertIncome&lt;/span&gt;&lt;span&gt;(Income income)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Expense &lt;span&gt;convertExpense&lt;/span&gt;&lt;span&gt;(Expense expense)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// convert expense here&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; expense;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IncomeConverterServiceImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ConverterService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Income &lt;span&gt;convertIncome&lt;/span&gt;&lt;span&gt;(Income income)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// convert income here&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; income;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Expense &lt;span&gt;convertExpense&lt;/span&gt;&lt;span&gt;(Expense expense)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;16. &lt;em&gt;限界上下文(Bounded Context)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;限界上下文是领域驱动设计的中心模式。通过将大型应用程序或组织分解为单独的概念模块，提供了一种处理复杂性的方法。每个概念模块代表一个上下文，该上下文与其他上下文分离(因此是有边界的)，并且可以独立发展。理想情况下，每个限界上下文应该可以自由的为其中的概念选择自己的名称，并且应该独占的访问自己的持久化存储。&lt;sup&gt;[5]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;17. &lt;em&gt;依赖稳定原则(Stable Dependencies)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原则指出，软件系统的不同构建块应该只依赖于可靠、稳定的工件。这个原则在docker镜像术语中更有意义，当我们从docker hub导入不同的依赖时，甚至不知道它们是否可靠/稳定。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;18. &lt;em&gt;多态(Polymorphism)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这实际上属于面向对象编程的4大支柱，鼓励使用可以以多种形式提供的接口，多态性意味着具有多种形式的实体。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;19. &lt;em&gt;模块化(Modularization)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块化是将软件系统划分为多个独立模块的过程，每个模块独立工作。这一原则是应用于软件系统静态架构的单一职责分离原则的另一种形式。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;20. &lt;em&gt;抽象(Abstraction)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也属于面向对象编程的四大支柱:&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;在研究物体或系统时去除物理的、空间的或时间的细节或属性以集中注意力于更重要的部分，本质上与泛化过程相似。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;21. &lt;em&gt;KISS(Keep It Simple, Stupid)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照字面意思理解，这一原则激励工程师保持代码简单和愚蠢(容易理解)，避免他人误解。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;22. &lt;em&gt;增量/迭代方法(Incremental/Iterative Approach)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原则是敏捷软件开发宣言的基础，基于软件系统应该以增量和迭代的方式开发的思想，每一次迭代都会增加系统功能并保证其运行。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;23. &lt;em&gt;最少知识原则(Least Knowledge)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者叫信息嫉妒(information envying)，是封装或信息隐藏原则的另一个术语，规定软件系统的不同部分应该只拥有需要的知识。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;相关阅读&lt;span/&gt;&lt;/h5&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Managing Architecture Debt with Dependency Structure Matrix&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Hexagonal Architecture Pattern with Spring Boot example&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;5 Software Design Patterns implemented in Spring&lt;sup&gt;[8]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cloud-Native Architecture Patterns (Part 1)&lt;sup&gt;[9]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cloud-Native Architecture Patterns (Part 2)&lt;sup&gt;[10]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt; &lt;br/&gt;[1] 23 Basic Principles in Software Architecture: https://azeynalli1990.medium.com/23-basic-principles-in-software-architecture-7913f109decc &lt;br/&gt;[2] How to apply SOLID Software Design Principles to Spring Boot Application (Part 5): https://medium.com/p/de6abf20e423 &lt;br/&gt;[3] How to apply SOLID Software Design Principles to Spring Boot Application (Part 1): https://medium.com/p/6b886f6d943e &lt;br/&gt;[4] 9 Forms of Coupling in Software Architecture: https://medium.com/p/4d5cf2b3e99e &lt;br/&gt;[5] Architectural Principles: https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles &lt;br/&gt;[6] Managing Architecture Debt with Dependency Structure Matrix: https://medium.com/p/51f63b6efb4c &lt;br/&gt;[7] Hexagonal Architecture Pattern with Spring Boot example: https://azeynalli1990.medium.com/hexagonal-architecture-pattern-with-spring-boot-example-d6a26b466ecc &lt;br/&gt;[8] 5 Software Design Patterns implemented in Spring: https://azeynalli1990.medium.com/5-software-design-patterns-implemented-in-spring-88356dac738d &lt;br/&gt;[9] Cloud-Native Architecture Patterns (Part 1): https://azeynalli1990.medium.com/cloud-native-architecture-patterns-60a010d90978 &lt;br/&gt;[10] Cloud-Native Architecture Patterns (Part 2): https://azeynalli1990.medium.com/cloud-native-architecture-patterns-part-2-9704f160525f&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d39ade78151db0db04ec668515ced7f2</guid>
<title>31 个！Golang 常用工具来啦</title>
<link>https://toutiao.io/k/865huja</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;导语 | &lt;/span&gt;&lt;span&gt;本文主要分享Golang相关的一些使用工具，简单介绍工具作用和使用场景，不会详细介绍其使用，列举的工具也不是最全的，具体可以参考链接或自行搜索学习。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go官方的工具可以使用go help xxx命令查看帮助文档，比如查看go get的参数标记和使用文档：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go &lt;span class=&quot;code-snippet__keyword&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以参考Golang官方的文档：&lt;/span&gt;&lt;span&gt;https://golang.google.cn/cmd/go/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;一、G0官方工具&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;1&quot; data-type=&quot;p&quot; data-sign=&quot;8c2011fe7977c79c57258f08c7c970ac1&quot;&gt;&lt;/p&gt;&lt;h2 name=&quot;1.1%C2%A0go-get&quot;&gt;&lt;span&gt;（一）go get&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，下载后自动编译，一般引用依赖用go get就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; -u &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/VictoriaMetrics/fastcache&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.cn/cattong/go_command_tutorial/261349&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.2%C2%A0go-build&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.2%C2%A0go-build&quot;&gt;&lt;span&gt;（二）go build&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令用于编译我们指定的源码文件或代码包以及它们的依赖包。命令的常用标记说明如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6343085106382979&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96fsTy9sN5GgRfjUtXDe4pslnCOKZ2K9iczT2R5Nsc86f35FFoqSqvwC8TWVEhLCGj5F5EI2WfAicYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1504&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编译过程输出到文件：go build -x &amp;gt; result 2&amp;gt;&amp;amp;1，因为go build -x 最终是将日志写到标准错误流当中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果只在编译特定包时需要指定参数，可以参考包名=参数列表的格式，比如go build -gcflags=&#x27;log=-N -l&#x27; main.go&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;s://www.kancloud.cn/cattong/go_command_tutorial/261347&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.3%C2%A0go-install&quot;&gt;&lt;span&gt;（三）go install&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令用于编译并安装指定的代码包及它们的依赖包。当指定的代码包的依赖包还没有被编译和安装时，该命令会先去处理依赖包。与go build命令一样，传给go install命令的代码包参数应该以导入路径的形式提供。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并且，go build命令的绝大多数标记也都可以用于go install命令。实际上，go install命令只比go build命令多做了一件事，即：安装编译后的结果文件到指定目录。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.c&lt;/span&gt;&lt;span&gt;n/cattong/go_command_tutorial/261348&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.4-go-fmt%E5%92%8Cgofmt&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.4-go-fmt%E5%92%8Cgofmt&quot;&gt;&lt;span&gt;（四）go fmt和gofmt&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Golang的开发团队制定了统一的官方代码风格，并且推出了gofmt工具（gofmt或go fmt）来帮助开发者格式化他们的代码到统一的风格。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gofmt是一个cli程序，会优先读取标准输入，如果传入了文件路径的话，会格式化这个文件，如果传入一个目录，会格式化目录中所有.go文件，如果不传参数，会格式化当前目录下的所有.go文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gofmt默认不对代码进行简化，使用-s参数可以开启简化代码功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gofmt是一个独立的cli程序，而go中还有一个go fmt命令，go fmt命令是gofmt的简单封装。go fmt在调用gofmt时添加了-l -w参数，相当于执行了gofmt -l -w&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://blog.csdn.net/whatday/article/details/97682094&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.5-go-env&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.5-go-env&quot;&gt;&lt;span&gt;（五）go env&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令用于打印Go语言的环境信息，常见的通用环境信息如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.96953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96fsTy9sN5GgRfjUtXDe4psaSfgrEgT4HTDvkp0RgT8QXHs4LghVZH2SMNUayKyclnHeNYPVCJL4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设置或修改环境变量值：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;go&lt;/span&gt; env -w GOPROXY=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;https://goproxy.com,direct&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;https://www.kancloud.cn/cattong/go_command_tutorial/261359&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.6-go-run&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.6-go-run&quot;&gt;&lt;span&gt;（六）go run &lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以运行命令源码文件，只能接受一个命令源码文件以及若干个库源码文件（必须同属于main包）作为文件参数，且不能接受测试源码文件。它在执行时会检查源码文件的类型。如果参数中有多个或者没有命令源码文件，那么go run命令就只会打印错误提示信息并退出，而不会继续执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在通过参数检查后，go run命令会将编译参数中的命令源码文件，并把编译后的可执行文件存放到临时工作目录中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kan&lt;/span&gt;&lt;span&gt;cloud.cn/cattong/go_command_tutorial/261352&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.7-go-test&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.7-go-test&quot;&gt;&lt;span&gt;（七）go test&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令用于对Go语言编写的程序进行测试，这种测试是以代码包为单位的，命令会自动测试每一个指定的代码包。当然，前提是指定的代码包中存在测试源码文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;https://www.kancloud.cn/cattong/go_command_tutorial/261353&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.8-go-clean&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.8-go-clean&quot;&gt;&lt;span&gt;（八）go clean&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令会删除掉执行其它命令时产生的一些文件和目录。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.cn/cattong/g&lt;/span&gt;&lt;span&gt;o_command_tutorial/261350&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.9-go-list&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.9-go-list&quot;&gt;&lt;span&gt;（九）go list&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令的作用是列出指定的代码包的信息。与其他命令相同，我们需要以代码包导入路径的方式给定代码包。被给定的代码包可以有多个。这些代码包对应的目录中必须直接保存有Go语言源码文件，其子目录中的文件不算在内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;标记-e的作用是以容错模式加载和分析指定的代码包。在这种情况下，命令程序如果在加载或分析的过程中遇到错误只会在内部记录一下，而不会直接把错误信息打印出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了看到错误信息可以使用-json标记。这个标记的作用是把代码包的结构体实例用JSON的样式打印出来。-m标记可以打印出modules而不是package。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Path&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/Project/test&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Main&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Dir&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/data/test&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GoMod&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/data/test/go.mod&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GoVersion&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1.15&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go &lt;span class=&quot;code-snippet__keyword&quot;&gt;list&lt;/span&gt; -m -json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/www.kancloud.cn/cattong/go_command_tutorial/261354&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.10-go-mod-xxx&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.10-go-mod-xxx&quot;&gt;&lt;span&gt;（十）go mod xxx&lt;/span&gt;&lt;/h2&gt;&lt;h3 name=&quot;1.10.1-go-mod-init&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令初始化并写入一个新的go.mod至当前目录中，实际上是创建一个以当前目录为根的新模块。文件go.mod必须不存在。如果可能，init会从import注释（参阅“go help importpath”）或从版本控制配置猜测模块路径。要覆盖此猜测，提供模块路径作为参数 module为当前项目名。比如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;go&lt;/span&gt; mod init demo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.jianshu.com/p/f6d2d6db2bca&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.10.2-go-mod-tidy&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令确保go.mod与模块中的源代码一致。它添加构建当前模块的包和依赖所必须的任何缺少的模块，删除不提供任何有价值的包的未使用的模块。它也会添加任何缺少的条目至go.mod并删除任何不需要的条目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.jianshu.com/p/f6d2d6db2bca&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.10.3-go-mod-vendor&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令重置主模块的vendor目录，使其包含构建和测试所有主模块的包所需要的所有包。不包括vendor中的包的测试代码。即将GOPATH或GOROOT下载的包拷贝到项目下的vendor目录，如果不使用vendor隔离项目的依赖，则不需要使用该命令拷贝依赖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.jianshu.com/p/f6d2d6db2bca&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.10.4-go-mod-download&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令下载指定名字的模块，可为选择主模块依赖的模块匹配模式，或path@version形式的模块查询。如果download不带参数则代表是主模块的所有依赖。download的只会下载依赖，不会编译依赖，和get是有区别的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.jianshu.com/p/f6d2d6db2bca&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令提供一个编辑go.mod的命令行接口，主要提供给工具或脚本使用。它只读取go.mod；不查找涉及模块的信息。默认情况下，edit读写主模块的go.mod文件，但也可以在标志后指定不同的目标文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参&lt;/span&gt;&lt;span&gt;考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.jianshu.com/p/f6d2d6db2bca&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 name=&quot;1.10.6-go-mod-graph&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令以文本形式打印模块间的依赖关系图。输出的每一行行有两个字段（通过空格分割）；模块和其所有依赖中的一个。每个模块都被标记为path@version形式的字符串（除了主模块，因其没有@version后缀）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.jianshu.com/p/f6d2d6db2bca&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令查存储在本地下载源代码缓存中的当前模块的依赖，是否自从下载之后未被修改。如果所有模块都未被修改，打印“all modules verified”。否则，报告哪个模块已经被修改并令“go mod”以非0状态退出。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.jianshu.com/p/f6d2d6db2bca&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令输出每个包或者模块的引用块，每个块以注释行“# package”或“# module”开头，给出目标包或模块。随后的行通过导入图给出路径，一个包一行。每个块之间通过一个空行分割，如果包或模块没有被主模块引用，该小节将显示单独一个带圆括号的提示信息来表明该事实。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.jianshu.com/p/f6d2d6db2bca&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;1.11-go-tool-xxx&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;1.11-go-tool-xxx&quot;&gt;&lt;span&gt;（十一）go tool xxx&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;go tool的可执行文件在GOROOT或GOPATH的pkg/tool目录。go doc cmd可以查看具体cmd的使用说明，比如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;go&lt;/span&gt; doc pprof&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Golang中，可以通过pprof工具对应于程序的运行时进行性能分析，包括CPU、内存、Goroutine等实时信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.cn/cat&lt;/span&gt;&lt;span&gt;tong/go_command_tutorial/261357&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.2-go-tool-trace&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以追踪请求链路，清晰的了解整个程序的调用栈，可以通过追踪器捕获大量信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://zhuanlan.zhihu.com/p/410590497&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以编译Go文件生成汇编代码，-N参数表示禁止编译优化， -l表示禁止内联，-S表示打印汇编，比如&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;# 会生成&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.o&lt;/span&gt;的汇编文件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;tool&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.go&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令是一个用于检查Go语言源码中静态错误的简单工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;go vet命令是go tool vet命令的简单封装。它会首先载入和分析指定的代码包，并把指定代码包中的所有Go语言源码文件和以“.s”结尾的文件的相对路径作为参数传递给go tool vet命令。其中，以“.s”结尾的文件是汇编语言的源码文件。如果go vet命令的参数是Go语言源码文件的路径，则会直接将这些参数传递给go tool vet命令。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.cn/cattong/go_command_tutorial/261356&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.5-go-tool-doc%E5%92%8Cgo-doc&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所谓Go语言的程序实体，是指变量、常量、函数、结构体以及接口。而程序实体的标识符即是代表它们的名称。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.cn/cattong/go_command_tutorial/261351&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.6-go-tool-addr2line&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以调用栈的地址转化为文件和行号。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    go tool addr2line binary&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Addr2line reads hexadecimal addresses, one per line and &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; optional &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;x&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;prefix, &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; standard input. &lt;span class=&quot;code-snippet__keyword&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;input&lt;/span&gt; address, addr2line prints two&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;lines&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;first&lt;/span&gt; the &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; the &lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt; containing the address &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;second&lt;/span&gt; the &lt;span class=&quot;code-snippet__keyword&quot;&gt;file&lt;/span&gt;:line &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; the &lt;span class=&quot;code-snippet__keyword&quot;&gt;source&lt;/span&gt; code &lt;span class=&quot;code-snippet__keyword&quot;&gt;corresponding&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; that address.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;This tool &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; intended &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; pprof; its interface may &lt;span class=&quot;code-snippet__keyword&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; it&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;may be deleted entirely &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; future releases.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以将汇编文件编译成一个.o文件，后续这个.o文件可以用于生成.a归档文件，命令的file参数必须是汇编文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    go tool &lt;span class=&quot;code-snippet__keyword&quot;&gt;asm&lt;/span&gt; [flags] file&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;The specified file must be a Go assembly file. The same assembler is used&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; all target operating systems &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; architectures. The GOOS &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; GOARCH&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;environment variables &lt;span class=&quot;code-snippet__built_in&quot;&gt;set&lt;/span&gt; the desired target.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每一个 Go 二进制文件内&lt;/span&gt;&lt;span&gt;，都有一个独一无二的 Build ID，详情参考 &lt;/span&gt;&lt;span&gt;src/cmd/go/internal/work/buildid.go&lt;/span&gt;&lt;span&gt; 。Go Build ID 可以用以下命令来查看：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;go&lt;/span&gt; tool buildid&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.anquanke.com/post/id/215419&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.9-go-tool-cgo&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以使我们创建能够调用C语言代码的Go语言源码文件。这使得我们可以使用Go语言代码去封装一些C语言的代码库，并提供给Go语言代码或项目使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.cn/cattong/go_command_tutorial/261358&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令对单元测试过程中生成的代码覆盖率统计生成html文件，可以本地打开展示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go test -coverprofile=a.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool cover -html=a.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt; -o coverage.html&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;覆盖度工具不仅可以记录分支是否被执行，还可以记录分支被执行了多少次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;go test -covermode=set|count|atomic:
-covermode：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;set: 默认模式，统计是否执行 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;count: 计数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;atomic: count的并发安全版本，仅当需要精确统计时使用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过go tool cover -func=count.out查看每个函数的覆盖度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://blog.csdn.net/xhdxhdxhd/article/details/120424848&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.11-go-tool-dist&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;dist工具是属于go的一个引导工具，它负责构建C程序（如Go&lt;/span&gt;&lt;span&gt;编译器&lt;/span&gt;&lt;span&gt;）和Go工具的初始引导副本。它也可以作为一个包罗万象用shell脚本替换以前完成的零工。通过“go tool dist”命令可以操作该工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool dist&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;usage: go tool dist [command]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Commands are:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;banner         print installation banner&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;bootstrap      rebuild everything&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;clean          deletes all built files&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;env [-p]       print environment (-p: include $PATH)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;install&lt;/span&gt; [dir]  &lt;span class=&quot;code-snippet__keyword&quot;&gt;install&lt;/span&gt; individual &lt;span class=&quot;code-snippet__keyword&quot;&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;list&lt;/span&gt; [-&lt;span class=&quot;code-snippet__keyword&quot;&gt;json&lt;/span&gt;]   &lt;span class=&quot;code-snippet__keyword&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;all&lt;/span&gt; supported platforms&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;test&lt;/span&gt; [-h]      run &lt;span class=&quot;code-snippet__keyword&quot;&gt;Go&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;test&lt;/span&gt;(s)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;version&lt;/span&gt;        print &lt;span class=&quot;code-snippet__keyword&quot;&gt;Go&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用go tool dist list可以输出当前安装Go版本所支持的操作系统与架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://blog.csdn.net/byxiaoyuonly/article/details/112492264&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.12-go-tool-fix%E5%92%8Cgo-fix&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令会把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码。这里所说的版本即Go语言的版本。代码包的所有Go语言源码文件不包括其子代码包（如果有的话）中的文件。修正操作包括把对旧程序调用的代码更换为对新程序调用的代码、把旧的语法更换为新的语法等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个工具其实非常有用。在编程语言的升级和演进的过程中，难免会对过时的和不够优秀的语法及标准库进行改进。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.cn/cattong/go_command_tutorial/261355&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.13-go-tool-link&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令链接Go的归档文件比如静态库，以及链接其所有依赖，生成一个可执行文件（含main package）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go tool link [flags] main.a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Flags:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -B note&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Add an ELF_NT_GNU_BUILD_ID note when using ELF.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        The value should &lt;span class=&quot;code-snippet__keyword&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;x &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; be an even &lt;span class=&quot;code-snippet__built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;hex&lt;/span&gt; digits.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -D address&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;segment&lt;/span&gt; address.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -E entry&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;Set&lt;/span&gt; entry symbol name.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -H &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;Set&lt;/span&gt; executable &lt;span class=&quot;code-snippet__keyword&quot;&gt;format&lt;/span&gt; type.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        The &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; inferred &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; GOOS &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; GOARCH.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;On&lt;/span&gt; Windows, -H windowsgui writes a &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GUI binary&quot;&lt;/span&gt; instead &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; a &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;console binary.&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -I interpreter&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;Set&lt;/span&gt; the ELF dynamic linker &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; use.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -L dir1 -L dir2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; imported packages &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; dir1, dir2, etc,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;after&lt;/span&gt; consulting $GOROOT/pkg/$GOOS_$GOARCH.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -R quantum&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;Set&lt;/span&gt; address rounding quantum.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -T address&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;segment&lt;/span&gt; address.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -V&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Print linker &lt;span class=&quot;code-snippet__keyword&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; exit.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; tool compile -o calc.o -I pkg/linux_amd64 src/calc/calc.go&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; tool &lt;span class=&quot;code-snippet__keyword&quot;&gt;link&lt;/span&gt; -o &lt;span class=&quot;code-snippet__keyword&quot;&gt;bin&lt;/span&gt;/calc -L pkg/linux_amd64 calc.o&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://cache.baiducontent.com/&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.14-go-tool-nm&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以查看符号表的命令，等同于系统的nm命令，非常有用。在断点的时候，如果你不知道断点的函数符号，那么用这个命令查一下就知道了（命令处理的是二进制程序文件），第一列是地址，第二列是类型，第三列是符号。等同于nm命令。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://studygolang.com/articles/29906&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以反汇编二进制的工具，等同于系统objdump，命令解析的是二进制格式的程序文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; tool objdump example.o&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; tool objdump -s DoFunc example.o  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://studygolang.com/articles/29906&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.16-go-tool-pack&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令把二进制文件打包成静态库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; tool pack op file.a [name...]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;参数op&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    c   &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt; files (from the file system) to a &lt;span class=&quot;code-snippet__built_in&quot;&gt;new&lt;/span&gt; archive&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    p   &lt;span class=&quot;code-snippet__built_in&quot;&gt;print&lt;/span&gt; files from the archive&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    r   &lt;span class=&quot;code-snippet__built_in&quot;&gt;append&lt;/span&gt; files (from the file system) to the archive&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    t   list files from the archive&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x   extract files from the archive&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; tool compile -o simplemath.o src/simplemath/add.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; src/simplemath/sqrt.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; tool pack c pkg/linux_amd64/simplemath.a simplemath.o&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://cache.baiducontent.com/&lt;/span&gt;&lt;/p&gt;&lt;h3 name=&quot;1.11.17-go-tool-test2json&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令用于把测试可执行文件转化可读的json格式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt;  test string_concat_test.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; -o string_concat.test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; tool test2json ./string_concat.test -test.v&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Action&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;output&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Output&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;testing: warning: no tests to run\n&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Action&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;output&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Output&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;PASS\n&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Action&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pass&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://blog.csdn.net/weixin_33772442/article/details/112098085&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该命令可以生成一个Go官方文档的本地http服务，可以在线查看标准库和第三方库文档，以及项目文档，但是需要按照一定的格式去写注释。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; -v  golang.org/x/tools/cmd/godoc&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;godoc -http=:&lt;span class=&quot;code-snippet__number&quot;&gt;6060&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;godoc -http=:&lt;span class=&quot;code-snippet__number&quot;&gt;6060&lt;/span&gt; -play&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Web页面如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.1637931034482758&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe96fsTy9sN5GgRfjUtXDe4psYWfZfga5DVZhkK32IJhntU1XxIuRU0ibSZJ5gUiaJGQiaHEFsMwPxtWNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;928&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://www.fujieace.com/golang/godoc.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;二、第三方工具&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-lines=&quot;4&quot; data-type=&quot;p&quot; data-sign=&quot;14b2b77d9f8f14e8d1bd4f4aeed0ef194&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go工具和组件汇总项目：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/avelino/awesome-go&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.1%C2%A0delve&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 name=&quot;2.1%C2%A0delve&quot;&gt;&lt;span&gt;（一）delve&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本地代码调试工具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/go-delve/delve&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.2-goconvey&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.2-goconvey&quot;&gt;&lt;span&gt;（二）goconvey&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;goconvey是一款针对Golang的测试框架，可以管理和运行测试用例，同时提供了丰富的断言函数，并支持很多Web界面特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/smartystreets/goconvey&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.3-goleak&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.3-goleak&quot;&gt;&lt;span&gt;（三）goleak&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本地排查内存泄露的工具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/uber-go/goleak&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.4-go-wrk&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.4-go-wrk&quot;&gt;&lt;span&gt;（四）go-wrk&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go接口压测工具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/adjust/go-wrk&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.5%C2%A0golint&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.5%C2%A0golint&quot;&gt;&lt;span&gt;（五）golint&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码风格检查&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/golang/lint&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.6-revive&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.6-revive&quot;&gt;&lt;span&gt;（六）revive&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码风格检查，比golint速度更快&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/mgechev/revive&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.7-gocode&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.7-gocode&quot;&gt;&lt;span&gt;（七）gocode&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码自动补全工具，可以在vim中使用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/nsf/gocode&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.8-godoctor&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.8-godoctor&quot;&gt;&lt;span&gt;（八）godoctor&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码重构工具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/godoctor/godoctor&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.9-gops&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.9-gops&quot;&gt;&lt;span&gt;（九）gops&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;查看go进程和相关信息的工具，用于诊断线上服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/google/gops&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.10-goreplay&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.10-goreplay&quot;&gt;&lt;span&gt;（十）goreplay&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GoReplay是一个开源网络监控工具，可以将实时HTTP流量捕获并重放到测试环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/b&lt;/span&gt;&lt;span&gt;uger/goreplay&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://blog.51cto.com/axzxs/5102596&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.11-depth&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.11-depth&quot;&gt;&lt;span&gt;（十一）depth&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个有用的Golang工具，Depth可帮助Web开发人员检索和可视化Go源代码依赖关系树。它可以用作独立的命令行应用程序或作为项目中的特定包。你可以通过在解析之前在Tree上设置相应的标志来添加自定义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/KyleBanks/depth&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.12-go-swagger&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.12-go-swagger&quot;&gt;&lt;span&gt;（十二）go-swagger&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该工具包包括各种功能和功能。Go-Swagger是Swagger 2.0的一个实现，可以序列化和反序列化swagger规范。它是RESTful API简约但强大的代表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过Go-Swagger，你可以swagger规范文档，验证JSON模式以及其他额外的规则。其他功能包括代码生成，基于swagger规范的API生成，基于代码的规范文档生成，扩展了的字符串格式，等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/go-swagger/go-swagger&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.13-gox&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.13-gox&quot;&gt;&lt;span&gt;（十三）gox&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;交叉编译工具，可以并行编译多个平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/mitchellh/gox&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.14-gocyclo&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.14-gocyclo&quot;&gt;&lt;span&gt;（十四）gocyclo&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gocyclo用来检查函数的复杂度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gocyclo -over 20 &lt;span class=&quot;code-snippet__variable&quot;&gt;$(ls -d */ | grep -v vendor)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gocyclo -top 5 &lt;span class=&quot;code-snippet__variable&quot;&gt;$(ls -d */ | grep -v vendor)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/fzipp/gocyclo&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.15-deadcode&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.15-deadcode&quot;&gt;&lt;span&gt;（十五）deadcode&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;deadcode会告诉你哪些代码片段根本没用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;find . -&lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt; d -not -path &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;./vendor/*&quot;&lt;/span&gt; | xargs deadcode&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/tsenart/deadcode&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.16-gotype&quot;&gt;&lt;span&gt;（十六）gotype&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gotype会对go文件和包进行语义(semantic)和句法(syntactic)的分析，这是google提供的一个工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;find . -name &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;*.go&quot;&lt;/span&gt; -&lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; -path &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;./vendor/*&quot;&lt;/span&gt; -&lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; -path &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;.git/*&quot;&lt;/span&gt; -&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt; | xargs gotype -a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://golang.org/x/tools/cmd/gotype&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.17-misspell&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.17-misspell&quot;&gt;&lt;span&gt;（十七）misspell&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;misspell用来拼写检查，对国内英语不太熟练的同学很有帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;find . -&lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt; f -not -path &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;./vendor/*&quot;&lt;/span&gt; -&lt;span class=&quot;code-snippet__built_in&quot;&gt;print&lt;/span&gt; | xargs misspell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/client9/misspell&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.18-staticcheck&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.18-staticcheck&quot;&gt;&lt;span&gt;（十八）staticcheck&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;staticcheck是一个超牛的工具，提供了巨多的静态检查，就像C#生态圈的 ReSharper一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;go&lt;/span&gt; install honnef.co/go/tools/cmd/staticcheck&lt;span class=&quot;code-snippet__variable&quot;&gt;@latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;staticcheck main.go&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://staticcheck.io/docs/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/dominikh/go-tools/tree/master/staticcheck&lt;/span&gt;&lt;/p&gt;&lt;h2 name=&quot;2.19-goconst&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 name=&quot;2.19-goconst&quot;&gt;&lt;span&gt;（十九）goconst&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;goconst会查找重复的字符串，这些字符串可以抽取成常量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;goconst&lt;/span&gt; ./… | grep -v vendor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://github.com/jgautheron/goconst&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.Go命令教程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.kancloud.cn/cattong/go_command_tutorial/261351&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.Golang指南：顶级Golang框架、IDE和工具列表：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://zhuanlan.zhihu.com/p/30432648&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.Go代码检修工具集：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://t.zoukankan.com/binHome-p-14149941.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-mpa-template=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt; 作者简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;105&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;105&quot; data-fileid=&quot;100044396&quot; data-ratio=&quot;1.0203703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe96fsTy9sN5GgRfjUtXDe4ps6aC9U3h59OhcUP0hqBuCZ4PhqIiaDZRicNibEGn4JDTibd2X7BicUlpLQAg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;罗元国&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;腾讯后台开发工程师&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;腾讯后台开发工程师，目前负责腾讯游戏广告推荐后台开发工作，在广告推荐和Golang性能优化方面有着丰富的开发经验。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;&lt;strong&gt;福利&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span/&gt;&lt;span&gt;我为大家整理了一份&lt;/span&gt;&lt;span&gt;从入门到进阶的Go学习资料礼包&lt;/span&gt;&lt;span&gt;，包含学习建议：入门看什么，进阶看什么。&lt;/span&gt;&lt;span&gt;关注公众号 「polarisxu」，回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;ebook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 获取；还可以回复「&lt;strong&gt;进群&lt;/strong&gt;」，和数万 Gopher 交流学习。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UWba2ryLMqm8cgtrMXjG1BLGg46vQNmUompBL02uYYwic9RicPbCnlKdZiacBF5Wv6RLgmGIqnBnwuWyP82ibYusiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>751a348b970c52099f73cc76f344ed1d</guid>
<title>Kubernetes 如何优雅地重启 Pod</title>
<link>https://toutiao.io/k/5ir8wfx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在应用程序的整个生命周期中，正在运行的 pod 会由于多种原因而终止。在某些情况下，Kubernetes 会因用户输入（例如更新或删除 Deployment 时）而终止 pod。在其他情况下，Kubernetes 需要释放给定节点上的资源时会终止 pod。无论哪种情况，Kubernetes 都允许在 pod 中运行的容器在可配置的时间内正常关闭。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;请查看下面的图表，以便更好地了解删除 pod 时发生的情况。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42714285714285716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gIkzzLe4eUVc6y92LMwsFQVbOz7mgjhdBqfMib6iccAicficPKfb0M7UAMqfTWnYl8dEEhueIicOpJZObNMW3aE0Xkw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;以下是 Pod 关闭的 2 个场景。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优雅关机&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这种情况下，pod 中的容器会在宽限期内正常关闭。容器的“正常关闭”状态表示执行可选的 pre-stop hook 和 Pod 响应 SIGTERM 信号。一旦容器成功退出，Kubelet 就会从 API Server 中删除 pod。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;强制关机&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这种情况下，容器无法在宽限期内关闭。关闭失败可能是由于多种原因，包括&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;应用程序忽略 SIGTERM 信号，&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;pre-stop hook 花费的时间超过宽限期，&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;应用程序清理资源花费的时间超过宽限期&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;以上的组合&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当应用程序在宽限期内无法关闭时，Kubelet 会发送一个 SIGKILL 信号来强制关闭 pod 中运行的进程。根据应用程序，这可能会导致数据丢失和面向用户的错误。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在本文中，我们将重点分析优雅关闭部分。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;识别问题&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 Kubernetes 中，每次部署都意味着在删除旧 pod 的同时创建新版本的 pod。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果在此过程中没有正常关闭，可能会出现两个问题：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当前正在处理请求的 pod 被移除，如果请求不是幂等的，则会导致状态不一致。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Kubernetes 将流量路由到已经被删除的 Pod，导致处理请求失败，用户体验差。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;分析问题&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在删除 Kubernetes pod 的过程中，有两条平行的时间线，如下图所示。一是改变网络规则的时间线。另一个是 pod 的删除。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47285714285714286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gIkzzLe4eUVc6y92LMwsFQVbOz7mgjhdM3OuXr6wX6diccumHpiaibibh7TPNKwfAgZQ3MbWzFWV8ib8ic2DEyGh4KUg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当运维人员或部署管道执行&lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl delete pod&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令时，两个过程开始。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;网络规则生效&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;kube-apiserver 接收到 pod 删除请求，将 pod 在 Etcd 中的状态更新为 Terminating；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Endpoint Controller 从 Endpoint 对象中删除 pod 的 IP；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;kuber-proxy 根据 Endpoint 对象的变化更新 iptables 的规则，不再将流量路由到被删除的 Pod。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;删除 pod&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;kube-apiserver 接收到 Pod 删除请求，将 Pod 的再 Etcd 中的状态更新为 Terminating&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kubelet 在节点清理容器相关资源，如存储、网络&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kubelet 向容器发送 SIGTERM；如果容器内的进程没有配置，容器将立即退出。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果容器在默认的 30 秒内没有退出，Kubelet 将发送 SIGKILL 并强制它退出。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过删除 pod 的过程，我们可以看到如果容器内的进程没有配置，容器会立即退出，导致问题 1。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于更新网络规则和删除 Pod 是同时进行的，因此不能保证在删除 Pod 之前更新网络规则。这就是可能导致问题 2 的原因。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以下配置可以解决这些问题：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为容器内的进程设置正常关闭。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;添加 preStopHook。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;修改终止 GracePeriodSeconds。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下图显示了设置后的时间线：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47214285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gIkzzLe4eUVc6y92LMwsFQVbOz7mgjhdiaXXn7URUF1lw5vXIuYlGIG0ic5kiapunNjIypoUeVdaLoOh2lMUMbf3Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;对于问题 1：为容器内的进程设置正常关闭&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以 SpringBoot 为例，启用优雅关闭可以 Spring Boot 配置文件中添加下面设置：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;server:&lt;br/&gt;    shutdown: graceful&lt;br/&gt;&lt;br/&gt;spring:&lt;br/&gt;    lifecycle:&lt;br/&gt;         timeout-per-shutdown-phase: 30s&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过使用上述配置，Spring Boot 保证在收到 SIGTERM 后不再接受新请求，并在超时内完成所有正在进行的请求的处理。即使无法及时完成，也会记录相关信息，然后强制退出。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于 timeout 的值，应参考处理请求的最大允许持续时间。根据我们的经验，除特殊情况外，所有请求通常在 30 秒内完成处理。对于未在定义的超时时间内完成的，我们将在日志监控中捕获超时并发送警报，然后解决超时的根本原因并采取相应的措施。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这就是可以解决问题 1 的方法。其他语言和框架应该有类似的配置。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;对于问题 2：添加 preStopHook&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;要处理问题 2，我们必须在不再将新流量路由到该 pod 后开始删除该 pod。因此，应该将 preStopHook 添加到 Kubernetes yaml 文件中，让 Kubelet 在收到删除 pod 事件时“sleep 一下”，并在开始删除 pod 之前留出足够的时间来更新网络规则。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;lifecycle:&lt;br/&gt;  preStop:&lt;br/&gt;     exec:&lt;br/&gt;        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;sleep 10&quot;]  # set prestop hook&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上述配置将导致 Kubelet 等待设定的时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;修改终止 GracePeriodSeconds&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考之前删除 Pod 的分析，Kubernetes 为容器删除留下了 30 秒的最大时间尺度。如果 Spring 的优雅关闭超时时间和 Kubernetes 的 preStopHooks 之和超过 30 秒，可能会导致 Kubernetes 在 Spring Boot 处理完请求之前强行删除容器。因此，如果过程超过 30 秒，则应将 timerminationGracePeriodSeconds 调整为超出 Spring 加 preStopHook 的优雅关闭超时。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;terminationGracePeriodSeconds: 45&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后，完整的 Kubernetes yaml 文件如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;apps/v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Deployment&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;gracefulshutdown-app&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;replicas:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;selector:&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;matchLabels:&lt;/span&gt;&lt;br/&gt;           &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;gracefulshutdown-app&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;template:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;         &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;gracefulshutdown-app&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;containers:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;graceful-shutdown-test&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;gracefulshutdown-app:latest&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;containerPort:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;lifecycle:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;preStop:&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;exec:&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;command:&lt;/span&gt; &lt;span&gt;[&quot;sh&quot;,&lt;/span&gt; &lt;span&gt;&quot;-c&quot;,&lt;/span&gt; &lt;span&gt;&quot;sleep 10&quot;]&lt;/span&gt;  &lt;span&gt;#set prestop hook&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;terminationGracePeriodSeconds:&lt;/span&gt; &lt;span&gt;45&lt;/span&gt; &lt;span&gt;# terminationGracePeriodSeconds&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在 Spring Boot 中设置正常关闭可确保在容器终止之前完成处理正在进行的请求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设置 preStopHook 确认删除 pod 和更新网络规则之间的顺序关系。3. 最后，为了给进程留出充裕的时间来处理所有请求，设置 terminationGracePeriodSeconds。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过这三个步骤，我们可以充分解决这两个问题。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;概括&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文描述了一种解决方案，用于确保假设服务将正确处理零停机部署所需的所有请求。因此，构建此功能将丰富用户体验并减少将缺陷引入服务的影响。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>482fcd584007bad604b59955121d0ff4</guid>
<title>VSCode 扩展之效率提升篇</title>
<link>https://toutiao.io/k/11wzrw8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期推荐几个效率提升工具，包括编码、多项目管理、debug方向的。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;coding &lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;Tabnine &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;这是个 AI 辅助插件，会根据你的 coding 去提示，根据提示，使用tab键补全，真香。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EHUEibqks59jpuhcJ9nVIsymclsPxACvZf5aqj5X0dhSK8UR11SwiciceZyYSwrf0ZSXwTSzY37O9haGP7g9j6eFw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;change-case &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;命名是个头疼的问题，change-case可以快速切换命名格式，比如驼峰、大小写切换、常量等。 &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EHUEibqks59jpuhcJ9nVIsymclsPxACvZTCRLe7Hj8BX5M55POvHlHibMLvb3icK25hv5hTPNUzcI7DbXaKRLQvVg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;debug &lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;Code Runner &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是小欧近期学习C++时发现的，可运行多种语言的代码片段，如 C, C++, Java, JavaScript, PHP, Python,, Go, Lua, Groovy, PowerShell, BAT/CMD, BASH/SH,, Visual Basic .NET, Clojure, Haxe, Objective-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart……&lt;/p&gt;&lt;p&gt;使用方法非常简单，光标在需要 debug 的文件中，然后 control+option+N，就可以 run code 啦！效果如图：（PS：你也可以自行定义命令。没错， –std=c++11 就是小欧自定义的）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.17585484996510817&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZ7h7q8PHBZMicJ0JWPe8ib8UibHsSDqzscDUmUVFIzQl2dFaApLAialnRrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2866&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;多项目管理 &lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;Project Manager &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不知道大家在实际工作中，是否像小欧一样需要在多个项目间反复横跳。如果是这样，并觉得 VSCode 的下方历史项目操作起来略显繁琐，那么 project manager 绝对值得一试。&lt;/p&gt;&lt;p&gt;安装完成后，左侧会有快捷选项卡，方便！！！可以点击上方修改图标自行配置，比如我的:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;[&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;go-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/go-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;go-example&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/go-example&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;rust-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/rust-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;cpp-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/cpp-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;imgo&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/imgo&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;317&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4760357432981316&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZy8d4v5J3kzSGb76VW0VP4VRTUBW15Z8Hs3uXWeWl7HfyQiczmjxn1uw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2462&quot;/&gt;&lt;/p&gt;&lt;p&gt;不仅如此，你还可以设置tag，项目太多时方便不同标记查看。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42677448337825696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZS1UKlM8Zoia17g85rb5OqBa48YiaWkfTlaAE8icPZTiclGAXGAiaicmlDS3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2226&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Project Dashboard &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=kruemelkatze.vscode-dashboard&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这也是个多项目管理的软件，可以设置不同的group，不同的颜色，还可以拖动项目更换group。操作简单，就不细说，效果如图： &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5476190476190477&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZln9KH0eA21zMFuXNFGPCAlwDiboquOVHzUk1jjjA6IuDIzX03pp62HQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;标记&lt;/span&gt; &lt;/h2&gt;&lt;p&gt;&lt;span&gt;“冰冻三尺，非一日之寒”。&lt;/span&gt;&lt;span&gt;很多时候，coding 是不能一蹴而就的，当你没有完成时，不妨使用下面的扩展来标记，防止遗忘。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;TODO Tree &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;TODO Tree 可以很方便地显示当前项目中所有的TODO所在的文件及位置，注意是大写的TODO哦，效果如图：（左侧也是有个选项卡快捷入口的）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6649048625792812&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59ia9EXl4nzicAIvicxkn8MeibnLOP9tibiclJrcvxIiauicyu5zgu1zGfAWjwiceRXyCO701XEXibun97FGfE8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1892&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Bookmarks&lt;/span&gt; &lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Bookmarks 可以设置给代码行设置标签，后续可以快速定位，适合未完成的、需要review 的 代码。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4355942750466708&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZicuqa0DAcEAFlBmCgYMzuHelicRopwzemMByYQsQCwPHqJYeAiaibqV0ew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1607&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7066508313539193&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59ia9EXl4nzicAIvicxkn8MeibnLAKMLlxFYaYvmhKrwQeKicIx7a0UaH3flJLWJY0ibc1GWYd1ibWnTJZOTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;842&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7f4f3ea75bd89769cc1fce905940ec19</guid>
<title>CSS container queries are finally here</title>
<link>https://toutiao.io/k/7el99bo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-content&quot;&gt;

&lt;p&gt;I canâ€™t &lt;em&gt;contain&lt;/em&gt; my excitement while writing the first few words for this article. Ladies and gentlemen, CSS container queries are finally here! Yes, you read that right. Theyâ€™re currently supported in Google Chrome (105) and soon in Safari 16. This is a huge milestone for web development. For me, I see it just like when we started building responsive websites via media queries, which is a game changer. Container queries are equally important (from my point of view, at least).&lt;/p&gt;

&lt;p&gt;When I wrote the &lt;a href=&quot;https://ishadeed.com/article/say-hello-to-css-container-queries/&quot;&gt;first article&lt;/a&gt; on container queries back in April 2021, the syntax changed several times, and I see this as a chance to write a fresh article and keep the previous one for reference. In this article, I will explain how container queries work, how we can use them, and what the syntax looks like, and share a few real-life examples and use cases.&lt;/p&gt;

&lt;p&gt;Are you ready to see the new game-changer CSS feature? Letâ€™s dive in.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When designing a component, we tend to add different variations and change them either based on a CSS class, or the viewport size. This isnâ€™t ideal in all cases and can force us to write CSS based on a variation class or a viewport size.&lt;/p&gt;

&lt;p&gt;Consider the following example.&lt;/p&gt;

&lt;figure&gt;
    
        &lt;img src=&quot;../../assets/container-queries-chrome/problem-media-query.jpg&quot; alt=&quot;&quot;/&gt;
    
    
        &lt;figcaption/&gt;
    
&lt;/figure&gt;

&lt;p&gt;We have a card component that should switch to a horizontal style when the viewport is large enough. At the first glance, that might sound okay. However, itâ€™s a bit complex when you think about it more deeply.&lt;/p&gt;

&lt;figure&gt;
    
        &lt;img src=&quot;../../assets/container-queries-chrome/problem-media-query-2.jpg&quot; alt=&quot;&quot;/&gt;
    
    
        &lt;figcaption/&gt;
    
&lt;/figure&gt;

&lt;p&gt;If we want to use the same card in different places, like in a sidebar where the space is tight, and in the main section where we have more space, weâ€™ll need to use class variations.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.c-article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Default stacked style */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Horizontal style. */&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.c-article--horizontal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we donâ€™t apply the variation class to the card component, we might end up with something like the following.&lt;/p&gt;

&lt;figure&gt;
    
        &lt;img src=&quot;../../assets/container-queries-chrome/problem-media-query-3.jpg&quot; alt=&quot;&quot;/&gt;
    
    
        &lt;figcaption/&gt;
    
&lt;/figure&gt;

&lt;p&gt;Notice how the card component in its stacked version is too large. For me, this doesnâ€™t look good from a UI perspective.&lt;/p&gt;

&lt;p&gt;With container queries, we can simply write CSS that responds to the parent or container width. Consider the following figure:&lt;/p&gt;

&lt;figure&gt;
    
        &lt;img src=&quot;../../assets/container-queries-chrome/container-queries-vs-media-queries.png&quot; alt=&quot;&quot;/&gt;
    
    
        &lt;figcaption/&gt;
    
&lt;/figure&gt;

&lt;p&gt;Notice how in a media query, we query a component based on the viewport or the screen width. In container queries, the same happens, but on the parent level.&lt;/p&gt;

&lt;h2 id=&quot;what-are-container-queries&quot;&gt;What are container queries?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A way to query a component against the closest parent that has a defined containment via the &lt;code class=&quot;highlighter-rouge&quot;&gt;container-type&lt;/code&gt; property.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thatâ€™s it. Itâ€™s just how we used to write CSS in media queries, but for a component level.&lt;/p&gt;

&lt;h2 id=&quot;container-queries-syntax&quot;&gt;Container queries syntax&lt;/h2&gt;

&lt;p&gt;To query a component based on its parent width, we need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;container-type&lt;/code&gt; property. Consider the following example:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;container-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, we can start to query a component. In the following example, if the container of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.card&lt;/code&gt; element has a width equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;400px&lt;/code&gt; or larger, we need to add a specific style.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.card&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While the above works, it can become a bit overwhelming when having multiple containers. To avoid that, Itâ€™s better to &lt;strong&gt;name a container&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;container-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;container-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we can append the container name next to &lt;code class=&quot;highlighter-rouge&quot;&gt;@container&lt;/code&gt; like the following:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@container&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.card&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Letâ€™s revisit the initial example and see how we can get benefit from container queries to avoid having multiple CSS classes.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;container-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;container-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.c-article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Default stacked style */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@container&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Horizontal style. */&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.c-article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;browser-support&quot;&gt;Browser support&lt;/h2&gt;

&lt;p&gt;Container queries are now supported in Chrome 105, and soon in Safari 16.&lt;/p&gt;

&lt;figure&gt;
    
        &lt;img src=&quot;https://caniuse.bitsofco.de/image/css-container-queries.png&quot; alt=&quot;&quot;/&gt;
    
    
        &lt;figcaption/&gt;
    
&lt;/figure&gt;

&lt;p&gt;The same applies to container query units, too.&lt;/p&gt;

&lt;figure&gt;
    
        &lt;img src=&quot;https://caniuse.bitsofco.de/image/css-container-query-units.png&quot; alt=&quot;&quot;/&gt;
    
    
        &lt;figcaption/&gt;
    
&lt;/figure&gt;

&lt;p&gt;Also, there is a polyfill that you can use today. I havenâ€™t tested it yet, but itâ€™s within the plan.&lt;/p&gt;

&lt;h2 id=&quot;use-cases-for-css-container-queries&quot;&gt;Use cases for CSS container queries&lt;/h2&gt;

&lt;p&gt;With the stable launch of container queries in Google Chrome, Iâ€™m excited to add a new little project which is &lt;a href=&quot;https://lab.ishadeed.com/container-queries&quot;&gt;lab.ishadeed.com&lt;/a&gt;. This is inspired by &lt;a href=&quot;https://labs.jensimmons.com/&quot;&gt;Jen Simmonsâ€™s CSS grid experiments&lt;/a&gt;. It includes fresh demos for container queries that you can play with them your browser.&lt;/p&gt;

&lt;p&gt;The lab has 10 different examples for you to explore how container queries are really helpful. Iâ€™m planning to add more in the future.&lt;/p&gt;

&lt;figure&gt;
    
        &lt;img src=&quot;../../assets/container-queries-chrome/ishadeed-lab.png&quot; alt=&quot;&quot;/&gt;
    
    
        &lt;figcaption/&gt;
    
&lt;/figure&gt;

&lt;p&gt;You can check &lt;a href=&quot;https://lab.ishadeed.com/container-queries&quot;&gt;them from this link&lt;/a&gt;. Happy resizing!&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;This is a big day for CSS, and I canâ€™t wait to see what you will create with CSS container queries.&lt;/p&gt;

&lt;h2 id=&quot;i-wrote-an-ebook&quot;&gt;I wrote an ebook&lt;/h2&gt;

&lt;p&gt;Iâ€™m excited to let you know that I wrote an ebook about Debugging CSS.&lt;/p&gt;

&lt;figure&gt;
    
        &lt;img src=&quot;../../assets/css-mistakes/debugging-css.png&quot; alt=&quot;&quot;/&gt;
    
    
        &lt;figcaption/&gt;
    
&lt;/figure&gt;

&lt;p&gt;If youâ€™re interested, head over to &lt;a href=&quot;https://debuggingcss.com/&quot;&gt;debuggingcss.com&lt;/a&gt; for a free preview.&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>