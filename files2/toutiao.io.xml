<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>fa78302f321d2e8611a0ab96f708d0af</guid>
<title>软件架构的 23 个基本原则</title>
<link>https://toutiao.io/k/mv00es0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;软件架构师在做出架构设计时需要遵循一些基本规则，本文介绍的23条原则就是其中最基础的规则，是所有软件工程师都需要牢记并实践的原则。原文：23 Basic Principles in Software Architecture&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6662857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0USqAnz00lsvUzFUYiadfOvugfN037YqlQ4STInib9VtCTa9f7beTORooa8Lt304ZiaKybbsBUf7nt2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;figcaption&gt;Cris DiNoto @Unsplash&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件体系架构基于一组适用于各种软件系统的基本原则，有经验的架构师知道这些原则，并且能够在软件产品的正确位置实现特定的原则。下面我们快速浏览一下架构师日常遵循的基本原则:&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. &lt;em&gt;依赖倒置(Dependency Inversion)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原则表明依赖的方向应该是抽象的，而不是具体实现。如果编译时依赖在运行时执行的方向上流动，就形成了直接依赖。通过依赖倒置，可以反转依赖控制的方向。下面的文章更深入的讨论了这一原则: How to apply SOLID Software Design Principles to Spring Boot Application (Part 5)&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. &lt;em&gt;关注点分离(Separation of Concerns)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原则指出，软件系统应该按照所做的工作类型来划分。比方说可以按照业务逻辑、基础设施或用户界面划分为不同的部分。通过将系统划分为基于不同活动区域的不同部分，使得开发/测试/部署更加容易。SoC是软件架构模式(如领域驱动设计、六边形架构、整洁架构)背后的驱动力。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. &lt;em&gt;控制反转(Inversion of Control)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则类似于依赖倒置原则，但适用于更广泛的背景。IoC反转了由不同的第三方框架(如Spring Framework)管理的控制流。与传统Java EE程序(由开发工程师按程序初始化Beans)不同，Spring控制Bean的配置，这意味着控制倒置。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. &lt;em&gt;依赖注入(Dependency Injection)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则意味着依赖应该在运行时通过构造函数注入。在下面的例子中，Action Interface通过HumanAction Implementation注入到Human类中，从而决定在运行时实现哪个特定的动作。这种技术提供了控制依赖的灵活性:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; az.alizeynalli.di;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Action&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HumanAction&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Action&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.print(&lt;span&gt;&quot;run&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Human&lt;/span&gt;  &lt;/span&gt;{&lt;br/&gt;     &lt;br/&gt;    Action action;&lt;br/&gt;     &lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Human&lt;/span&gt;&lt;span&gt;(Action action)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.action = action;&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{        &lt;br/&gt;        actoin.&lt;span&gt;do&lt;/span&gt;();        &lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Human human = &lt;span&gt;new&lt;/span&gt; Human(&lt;span&gt;new&lt;/span&gt; HumanAction);&lt;br/&gt;        human.&lt;span&gt;do&lt;/span&gt;();&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. &lt;em&gt;单一职责(Single Responsibility)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则的主要思想是限定软件系统的每个构建块只承担唯一的责任。无论构建块的作用域是什么，是插件、包、类、函数，甚至是变量，应该只有一个职责。这篇文章更深入的讨论了这一原则: How to apply SOLID Software Design Principles to Spring Boot Application (Part 1)&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6. &lt;em&gt;DRY(Don’t Repeat Yourself)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则旨在通过避免重复代码来消除冗余。如果存在针对某些行为的现有功能，则应该重复使用，而不是在多个实例中拷贝相同的代码片段。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;每个知识片段在系统中都必须有单一、明确、权威的表示。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7. &lt;em&gt;开闭原则(Open-Closed)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;软件构件应该对扩展开放，对修改关闭。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原理的简单描述首先是由Bertrand Meyer提出的。每次都需要修改的软件系统只会变得一团糟，并且这种混乱的程序很容易在每次修改时出现错误。每个新功能都应该最大限度的增加新代码，最小限度减少旧代码的更改，理想情况下对旧代码的更改为零。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8. &lt;em&gt;持久化透明(Persistence Ignorance)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;持久化透明的理念是，代码应该不受任何数据库或持久性技术的影响。业务逻辑应该与任何技术无关。如果明天，有更好、更有效、更便宜的持久化技术，应该能够以不影响上层抽象的方式改变系统的这一部分。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;9. &lt;em&gt;YAGNI&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;You ain’t gonna need it. 这一原则试图避免软件系统的过早优化。开发人员通常会在系统中过度设计一些东西，以期在将来的某个时候会有帮助，但这一时刻往往不会到来。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10. &lt;em&gt;童子军规则(Boy Scout Rule)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;在离开的时候要让露营地比来的时候更干净。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的主要思想是，当开发时遇到反模式，要坚持重构代码。随着时间的推移，这会提高代码质量。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;11. &lt;em&gt;里氏替换原则(Liskov-Subsititution)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果对于每个类型为S的对象o1，都有一个类型为T的对象o2，这样对于用T定义的所有程序P，当o1取代o2时，P的行为不变，那么S就是T的子类型。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Barbara Liskov的这个定义可能听起来很混乱，但本质上这个原则简单易懂。如果重述上面的定义，该原则的意思是: 在使用继承时，继承的层次结构应该在功能和业务逻辑方面保持一致。子类应该是可以相互替换的，并且不能改变父类的行为。作为一个简单的例子，可以用“&lt;em&gt;臭名昭著的正方形/矩形&lt;/em&gt;”问题。其中正方形不应该是矩形的子类型，因为这两个几何形状的高度和长度的定义是不同的(正方形的高度和长度是相等的，而矩形的高度和长度是不同的)。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;12. &lt;em&gt;封装(Encapsulation)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件系统的不同构建块应该通过封装来限制外界对其组件的访问，可以通过在类范围内设置组件为私有或在插件范围内设置访问限制来实现(就java而言)，从而隐藏信息。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;13. &lt;em&gt;松耦合(Loose Coupling)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件架构中最重要的原则之一是松耦合，这一原则表明软件系统的依赖关系应该松散，系统的一部分发生变化，对其他部分的影响应该最小。松耦合可以通过依赖倒置、异步消息中间件、事件源等实现。下面的文章深入探讨了软件工程中不同形式的耦合: 9 Forms of Coupling in Software Architecture&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;14. &lt;em&gt;内聚(Cohesion)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;内聚是指模块内的元素依赖的程度。某种意义上说，是对类的方法和数据以及该类所服务的某种统一目的或概念之间关系强度的度量。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构建高内聚的类是一种最佳实践，有利于实现单一责任原则、松耦合等。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;15. &lt;em&gt;接口隔离(Interface Segregation)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;接口隔离原则&lt;/strong&gt;指出，不应强迫客户端依赖不使用的方法。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该明确的是，这个原则主要适用于静态类型的编程语言，如Java、C等。在像Python或Ruby这样的动态类型语言中，这个原则没有太大意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以想象这样一种情况，我们的Income和Expense用例都依赖于支持这两种用例的业务逻辑功能。因此Income用例的很多依赖都和Expense用例相关，而Expense用例的依赖情况也有相同的问题。基于以上讨论，ISP违规情况如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; az.alizeynalli.cashflow.core.service;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ConverterService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;Income &lt;span&gt;convertIncome&lt;/span&gt;&lt;span&gt;(Income income)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;Expense &lt;span&gt;convertExpense&lt;/span&gt;&lt;span&gt;(Expense expense)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ExpenseConverterServiceImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ConverterService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Income &lt;span&gt;convertIncome&lt;/span&gt;&lt;span&gt;(Income income)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Expense &lt;span&gt;convertExpense&lt;/span&gt;&lt;span&gt;(Expense expense)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// convert expense here&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; expense;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IncomeConverterServiceImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ConverterService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Income &lt;span&gt;convertIncome&lt;/span&gt;&lt;span&gt;(Income income)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// convert income here&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; income;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Expense &lt;span&gt;convertExpense&lt;/span&gt;&lt;span&gt;(Expense expense)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;16. &lt;em&gt;限界上下文(Bounded Context)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;限界上下文是领域驱动设计的中心模式。通过将大型应用程序或组织分解为单独的概念模块，提供了一种处理复杂性的方法。每个概念模块代表一个上下文，该上下文与其他上下文分离(因此是有边界的)，并且可以独立发展。理想情况下，每个限界上下文应该可以自由的为其中的概念选择自己的名称，并且应该独占的访问自己的持久化存储。&lt;sup&gt;[5]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;17. &lt;em&gt;依赖稳定原则(Stable Dependencies)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原则指出，软件系统的不同构建块应该只依赖于可靠、稳定的工件。这个原则在docker镜像术语中更有意义，当我们从docker hub导入不同的依赖时，甚至不知道它们是否可靠/稳定。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;18. &lt;em&gt;多态(Polymorphism)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这实际上属于面向对象编程的4大支柱，鼓励使用可以以多种形式提供的接口，多态性意味着具有多种形式的实体。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;19. &lt;em&gt;模块化(Modularization)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块化是将软件系统划分为多个独立模块的过程，每个模块独立工作。这一原则是应用于软件系统静态架构的单一职责分离原则的另一种形式。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;20. &lt;em&gt;抽象(Abstraction)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也属于面向对象编程的四大支柱:&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;在研究物体或系统时去除物理的、空间的或时间的细节或属性以集中注意力于更重要的部分，本质上与泛化过程相似。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;21. &lt;em&gt;KISS(Keep It Simple, Stupid)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照字面意思理解，这一原则激励工程师保持代码简单和愚蠢(容易理解)，避免他人误解。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;22. &lt;em&gt;增量/迭代方法(Incremental/Iterative Approach)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一原则是敏捷软件开发宣言的基础，基于软件系统应该以增量和迭代的方式开发的思想，每一次迭代都会增加系统功能并保证其运行。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;23. &lt;em&gt;最少知识原则(Least Knowledge)&lt;/em&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者叫信息嫉妒(information envying)，是封装或信息隐藏原则的另一个术语，规定软件系统的不同部分应该只拥有需要的知识。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;相关阅读&lt;span/&gt;&lt;/h5&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Managing Architecture Debt with Dependency Structure Matrix&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Hexagonal Architecture Pattern with Spring Boot example&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;5 Software Design Patterns implemented in Spring&lt;sup&gt;[8]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cloud-Native Architecture Patterns (Part 1)&lt;sup&gt;[9]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cloud-Native Architecture Patterns (Part 2)&lt;sup&gt;[10]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt; &lt;br/&gt;[1] 23 Basic Principles in Software Architecture: https://azeynalli1990.medium.com/23-basic-principles-in-software-architecture-7913f109decc &lt;br/&gt;[2] How to apply SOLID Software Design Principles to Spring Boot Application (Part 5): https://medium.com/p/de6abf20e423 &lt;br/&gt;[3] How to apply SOLID Software Design Principles to Spring Boot Application (Part 1): https://medium.com/p/6b886f6d943e &lt;br/&gt;[4] 9 Forms of Coupling in Software Architecture: https://medium.com/p/4d5cf2b3e99e &lt;br/&gt;[5] Architectural Principles: https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles &lt;br/&gt;[6] Managing Architecture Debt with Dependency Structure Matrix: https://medium.com/p/51f63b6efb4c &lt;br/&gt;[7] Hexagonal Architecture Pattern with Spring Boot example: https://azeynalli1990.medium.com/hexagonal-architecture-pattern-with-spring-boot-example-d6a26b466ecc &lt;br/&gt;[8] 5 Software Design Patterns implemented in Spring: https://azeynalli1990.medium.com/5-software-design-patterns-implemented-in-spring-88356dac738d &lt;br/&gt;[9] Cloud-Native Architecture Patterns (Part 1): https://azeynalli1990.medium.com/cloud-native-architecture-patterns-60a010d90978 &lt;br/&gt;[10] Cloud-Native Architecture Patterns (Part 2): https://azeynalli1990.medium.com/cloud-native-architecture-patterns-part-2-9704f160525f&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>59cd52c8f21edb013edc7133157b82e1</guid>
<title>程序员必知的 “大数据” 基础知识</title>
<link>https://toutiao.io/k/qn3o149</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;来源 | yes的练级攻略&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作者 | 是Yes呀&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当今这个时代，我相信大部分人对“大数据”这三个字肯定都不陌生，或多或少都有接触过，例如大数据杀熟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对我们程序员来说，仅仅知道或听过一些名词是不够的，至少需要知晓其中大概的原理，并且对常见的大数据组件有一定的认识，&lt;span&gt;不说拿出去吹牛，至少也要听得懂别人吹牛&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天这篇文章就简单介绍下大数据的用途，大数据的核心处理过程，以及常见组件的用处。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简单了解下大数据能做什么&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大数据能做的东西有很多，涉及的领域也很多：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;汽车领域的自动驾驶等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;医疗领域的病情识别等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;金融领域的风控、量化交易等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;教育领域的 AI 教育，智能识题等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;推荐系统；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;疫情筛查；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;等等……&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以说，数据就是宝藏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前由于软硬件的约束，大量的数据放在那里，没法发光发热。现在随着科技不断地发展，可以看到大数据已经深入到我们生活当中。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大数据计算原理&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实大数据的核心思想其实就是&lt;span&gt;分而治之&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说白了，如果是小数据量的计算，我们直接写个代码在单机上跑跑就搞定了，但是涉及到大量的数据，例如 PB 级别及以上这类，一台机器完全 hold 不过来，第一问题是存储，第二问题是计算时长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而我们所说的大数据，其实就是利用技术&lt;span&gt;组合起很多便宜的服务器来并行处理大量的数据，实现大数据的分析和计算&lt;/span&gt;，这就是大数据计算的核心。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用这种分而治之的思想，提升了计算和存储的能力，再结合深度学习等技术，大数据就迎来了爆发式的增长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般我们谈到大数据，关于技术向的都离不开 Hadoop 体系及其衍生的工具，Hadoop 体系其核心就是 HDFS 和 MapReduce。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;HDFS&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到，计算可能需要涉及大量的数据，可能都是 PB 级别的，普通单机的磁盘无法存储那么多数据，因此就需要分布式文件存储，组合起众多廉价的服务器，让每个服务器存储部分数据，对外展示却看起来是一个文件，这就是分布式文件存储。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对 Hadoop 家族来说，就是 HDFS：Hadoop Distributed File System，这是存储的基石。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;MapReduce&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存储的问题解决了，紧接着就是计算了，这就是大数据计算框架 MapReduce 的工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MapReduce 的原理其实非常简单，它包含两个过程：map 和 reduce。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如现在我要统计关注公众号的每个地域读者人数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么 map 的过程就先根据地域进行计算，根据每个读者的属性得到一个 &amp;lt;key,value&amp;gt;，比如 &amp;lt;杭州&lt;span&gt;,&lt;/span&gt;1&amp;gt;、&amp;lt;上海&lt;span&gt;,&lt;/span&gt;1&amp;gt;、&amp;lt;杭州&lt;span&gt;,&lt;/span&gt;1&amp;gt;、&amp;lt;北京&lt;span&gt;,&lt;/span&gt;1&amp;gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后再把这些 &amp;lt;key,value&amp;gt; 发给 reduce 程序，reduce 的逻辑是根据 key 进行累加统计，得到结果 &amp;lt;杭州，2&amp;gt;、&amp;lt;上海，1&amp;gt;、&amp;lt;北京，1&amp;gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;看到这个可能有人会有疑惑，这跟大数据有什么关系？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，这些计算程序会分发到多台服务器上并行执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说我们只需定义 map 和 reduce 的处理逻辑，然后提交给 hadoop 系统，然后 map 和 reduce 的计算逻辑就会分发到我们部署的各个计算节点（机器）上（机器会下载代码，通过反射执行）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个被分配到的计算节点上就会运行 map 和 reduce 的代码逻辑来处理数据，&lt;span&gt;并且每个机器处理的也只是部分数据&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这个 map 程序分配了 5 台机器，一同要处理 1 亿条数据，很可能机器 A 就处理前 2 千万条数据，机器 B 处理 2 千万到 4 千万的数据，依次类推。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后 reduce 也有 5 台，分别统计不同 map 机器的输入，如下图所示&lt;span&gt;（抽象画了 HDFS，实际可能就在本地机器）&lt;/span&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6827171109200344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nHQCF0sTVBXuR6pdmzsAib71f0n9dy2U0R8eic7M27QF1sQGvRwnO4yCfOaFic4sBMnc7HRAbvv0A5fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1163&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样算力就平摊到多台机器上并行执行，效率就快了，时间就缩短了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果计算的数据量大，也可以通过更多的机器来减少计算时间，这就是&lt;span&gt;分而治之的思想&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这里肯定有同学有点小疑惑，有多台服务在 reduce 那如何保证统计的正确？比如 key 是杭州的数据部分发给了 A，部分发给了 B，难道后面还有个统计阶段吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不是的，其实还有个 shuffle 过程，就是 MapReduce 框架会把相同的 key 发给同一台机器进行 reduce，从而避免上面说的这个情况。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大数据相关组件&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了大体的核心技术后，我们再来看看相关的组件。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Hbase&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个列式存储的 NoSQL 数据库，底层利用 HDFS 存储。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在存储数据量大的情况下也不会影响读取写入的效率，由于列式存储，没有固定的表结构，可以动态增加列，非常灵活。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然还有其他列式存储，这里就不介绍了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Hive&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们提到 MapReduce，要用上这个计算框架是要写代码的，这对于一些运营或产品来说成本就有点高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是就出了个 Hive，支持类 SQL 语句，不需要显示编写 map 和 reduce 的代码，仅仅写个 SQL， Hive 就可以把这个 SQL 转成对应的 MapReduce 代码，然后执行返回结果，降低了使用成本，是个好东西。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spark&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MapReduce 虽然好用，但是因为它使用磁盘作为存储介质保存中间结果，且阶段性的计算每执行一次 Map 和 Reduce 计算都需要重新启动一次作业，在很多需要&lt;span&gt;迭代计算&lt;/span&gt;的作业中，就有点拉胯了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此搞了个叫 Spark 的并行计算框架来替换之，它的目标就是低延迟，它使用内存来保存中间结果。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Flink&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们前面提到的 MapReduce 其实是批处理计算，也就是离线计算，比如统计最近一年的 xxx 数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而当前有很多需求要的是实时计算，比如数据大屏的实时展示等，这就需要大数据的流式计算，在这个领域比较出名的就是 Flink。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Flink 是面向流式计算设计的（也支持批处理），虽说 Spark 也支持流式计算（Spark Streaming），不过它的流其实是把批处理分割得很小来看作流，不是那么“正统”，而 Flink 就是面向流设计的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于离线和实时计算两个显著区别是：离线计算的数据是有界的，而实时&lt;span&gt;计算的数据&lt;/span&gt;是无界的，且离线的数据是静态的，而实时的数据是动态的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于流式计算还有 Storm，这里不多介绍了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Kafka&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大数据的计算和存储我们都提了，那么数据怎么传到大数据计算引擎中来呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 登场了，我们都知道它是消息队列，它主要用于数据的传输，还有削峰填谷，平衡数据的发送和接收速率，在大数据场景下有很多应用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Flume&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一个数据来源就是日志，我们有很多数据都会通过日志保存在服务器的磁盘上，而 Flume 就是一个日志采集工具，负责日志的采集，然后输入到不同的数据源中。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，关于大数据体系的一些基础知识，简单了解到这个地步就差不多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实还有很多组件没提，比如分布式集群资源调度框架 Yarn，主要进行集群资源分配，还有数据库的 ETL 工具 sqoop，分布式协调组件 zookeeper 等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结的图我直接从网上找了个比较全的，大家可以结合上面的介绍理解一下。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4713983050847458&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nHQCF0sTVBXuR6pdmzsAib71jicfJ42Y2nYUNEqZ8FAgEs0cedDibo5yiaIF2UwawicG0Zfc7QNBsUqVNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;944&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（图片来源：网络）&lt;/span&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些东西包括里面的一些细节还是需要大家后面自行去查阅资料了解的，本文仅仅只是科普大数据主要的核心体系，让大家看到 hive 之类的单词，至少明白它是干嘛的，仅此而已。&lt;/p&gt;&lt;section&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>482fcd584007bad604b59955121d0ff4</guid>
<title>VSCode 扩展之效率提升篇</title>
<link>https://toutiao.io/k/11wzrw8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期推荐几个效率提升工具，包括编码、多项目管理、debug方向的。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;coding &lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;Tabnine &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;这是个 AI 辅助插件，会根据你的 coding 去提示，根据提示，使用tab键补全，真香。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EHUEibqks59jpuhcJ9nVIsymclsPxACvZf5aqj5X0dhSK8UR11SwiciceZyYSwrf0ZSXwTSzY37O9haGP7g9j6eFw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;change-case &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;命名是个头疼的问题，change-case可以快速切换命名格式，比如驼峰、大小写切换、常量等。 &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EHUEibqks59jpuhcJ9nVIsymclsPxACvZTCRLe7Hj8BX5M55POvHlHibMLvb3icK25hv5hTPNUzcI7DbXaKRLQvVg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;debug &lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;Code Runner &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这是小欧近期学习C++时发现的，可运行多种语言的代码片段，如 C, C++, Java, JavaScript, PHP, Python,, Go, Lua, Groovy, PowerShell, BAT/CMD, BASH/SH,, Visual Basic .NET, Clojure, Haxe, Objective-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart……&lt;/p&gt;&lt;p&gt;使用方法非常简单，光标在需要 debug 的文件中，然后 control+option+N，就可以 run code 啦！效果如图：（PS：你也可以自行定义命令。没错， –std=c++11 就是小欧自定义的）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.17585484996510817&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZ7h7q8PHBZMicJ0JWPe8ib8UibHsSDqzscDUmUVFIzQl2dFaApLAialnRrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2866&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;多项目管理 &lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;Project Manager &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不知道大家在实际工作中，是否像小欧一样需要在多个项目间反复横跳。如果是这样，并觉得 VSCode 的下方历史项目操作起来略显繁琐，那么 project manager 绝对值得一试。&lt;/p&gt;&lt;p&gt;安装完成后，左侧会有快捷选项卡，方便！！！可以点击上方修改图标自行配置，比如我的:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;[&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;go-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/go-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;go-example&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/go-example&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;rust-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/rust-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;cpp-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/cpp-learning&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;imgo&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;rootPath&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;/Users/sai/Documents/github/imgo&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;paths&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;tags&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;317&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4760357432981316&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZy8d4v5J3kzSGb76VW0VP4VRTUBW15Z8Hs3uXWeWl7HfyQiczmjxn1uw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2462&quot;/&gt;&lt;/p&gt;&lt;p&gt;不仅如此，你还可以设置tag，项目太多时方便不同标记查看。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42677448337825696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZS1UKlM8Zoia17g85rb5OqBa48YiaWkfTlaAE8icPZTiclGAXGAiaicmlDS3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2226&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Project Dashboard &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=kruemelkatze.vscode-dashboard&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这也是个多项目管理的软件，可以设置不同的group，不同的颜色，还可以拖动项目更换group。操作简单，就不细说，效果如图： &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5476190476190477&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZln9KH0eA21zMFuXNFGPCAlwDiboquOVHzUk1jjjA6IuDIzX03pp62HQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;标记&lt;/span&gt; &lt;/h2&gt;&lt;p&gt;&lt;span&gt;“冰冻三尺，非一日之寒”。&lt;/span&gt;&lt;span&gt;很多时候，coding 是不能一蹴而就的，当你没有完成时，不妨使用下面的扩展来标记，防止遗忘。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;TODO Tree &lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;TODO Tree 可以很方便地显示当前项目中所有的TODO所在的文件及位置，注意是大写的TODO哦，效果如图：（左侧也是有个选项卡快捷入口的）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6649048625792812&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59ia9EXl4nzicAIvicxkn8MeibnLOP9tibiclJrcvxIiauicyu5zgu1zGfAWjwiceRXyCO701XEXibun97FGfE8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1892&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Bookmarks&lt;/span&gt; &lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;项目地址: https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Bookmarks 可以设置给代码行设置标签，后续可以快速定位，适合未完成的、需要review 的 代码。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4355942750466708&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59jpuhcJ9nVIsymclsPxACvZicuqa0DAcEAFlBmCgYMzuHelicRopwzemMByYQsQCwPHqJYeAiaibqV0ew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1607&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7066508313539193&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EHUEibqks59ia9EXl4nzicAIvicxkn8MeibnLAKMLlxFYaYvmhKrwQeKicIx7a0UaH3flJLWJY0ibc1GWYd1ibWnTJZOTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;842&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>751a348b970c52099f73cc76f344ed1d</guid>
<title>Kubernetes 如何优雅地重启 Pod</title>
<link>https://toutiao.io/k/5ir8wfx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在应用程序的整个生命周期中，正在运行的 pod 会由于多种原因而终止。在某些情况下，Kubernetes 会因用户输入（例如更新或删除 Deployment 时）而终止 pod。在其他情况下，Kubernetes 需要释放给定节点上的资源时会终止 pod。无论哪种情况，Kubernetes 都允许在 pod 中运行的容器在可配置的时间内正常关闭。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;请查看下面的图表，以便更好地了解删除 pod 时发生的情况。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42714285714285716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gIkzzLe4eUVc6y92LMwsFQVbOz7mgjhdBqfMib6iccAicficPKfb0M7UAMqfTWnYl8dEEhueIicOpJZObNMW3aE0Xkw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;以下是 Pod 关闭的 2 个场景。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优雅关机&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这种情况下，pod 中的容器会在宽限期内正常关闭。容器的“正常关闭”状态表示执行可选的 pre-stop hook 和 Pod 响应 SIGTERM 信号。一旦容器成功退出，Kubelet 就会从 API Server 中删除 pod。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;强制关机&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这种情况下，容器无法在宽限期内关闭。关闭失败可能是由于多种原因，包括&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;应用程序忽略 SIGTERM 信号，&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;pre-stop hook 花费的时间超过宽限期，&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;应用程序清理资源花费的时间超过宽限期&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;以上的组合&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当应用程序在宽限期内无法关闭时，Kubelet 会发送一个 SIGKILL 信号来强制关闭 pod 中运行的进程。根据应用程序，这可能会导致数据丢失和面向用户的错误。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在本文中，我们将重点分析优雅关闭部分。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;识别问题&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 Kubernetes 中，每次部署都意味着在删除旧 pod 的同时创建新版本的 pod。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果在此过程中没有正常关闭，可能会出现两个问题：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当前正在处理请求的 pod 被移除，如果请求不是幂等的，则会导致状态不一致。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Kubernetes 将流量路由到已经被删除的 Pod，导致处理请求失败，用户体验差。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;分析问题&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在删除 Kubernetes pod 的过程中，有两条平行的时间线，如下图所示。一是改变网络规则的时间线。另一个是 pod 的删除。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47285714285714286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gIkzzLe4eUVc6y92LMwsFQVbOz7mgjhdM3OuXr6wX6diccumHpiaibibh7TPNKwfAgZQ3MbWzFWV8ib8ic2DEyGh4KUg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当运维人员或部署管道执行&lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl delete pod&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令时，两个过程开始。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;网络规则生效&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;kube-apiserver 接收到 pod 删除请求，将 pod 在 Etcd 中的状态更新为 Terminating；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Endpoint Controller 从 Endpoint 对象中删除 pod 的 IP；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;kuber-proxy 根据 Endpoint 对象的变化更新 iptables 的规则，不再将流量路由到被删除的 Pod。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;删除 pod&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;kube-apiserver 接收到 Pod 删除请求，将 Pod 的再 Etcd 中的状态更新为 Terminating&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kubelet 在节点清理容器相关资源，如存储、网络&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kubelet 向容器发送 SIGTERM；如果容器内的进程没有配置，容器将立即退出。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果容器在默认的 30 秒内没有退出，Kubelet 将发送 SIGKILL 并强制它退出。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过删除 pod 的过程，我们可以看到如果容器内的进程没有配置，容器会立即退出，导致问题 1。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于更新网络规则和删除 Pod 是同时进行的，因此不能保证在删除 Pod 之前更新网络规则。这就是可能导致问题 2 的原因。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以下配置可以解决这些问题：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为容器内的进程设置正常关闭。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;添加 preStopHook。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;修改终止 GracePeriodSeconds。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下图显示了设置后的时间线：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47214285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gIkzzLe4eUVc6y92LMwsFQVbOz7mgjhdiaXXn7URUF1lw5vXIuYlGIG0ic5kiapunNjIypoUeVdaLoOh2lMUMbf3Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;对于问题 1：为容器内的进程设置正常关闭&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以 SpringBoot 为例，启用优雅关闭可以 Spring Boot 配置文件中添加下面设置：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;server:&lt;br/&gt;    shutdown: graceful&lt;br/&gt;&lt;br/&gt;spring:&lt;br/&gt;    lifecycle:&lt;br/&gt;         timeout-per-shutdown-phase: 30s&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过使用上述配置，Spring Boot 保证在收到 SIGTERM 后不再接受新请求，并在超时内完成所有正在进行的请求的处理。即使无法及时完成，也会记录相关信息，然后强制退出。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于 timeout 的值，应参考处理请求的最大允许持续时间。根据我们的经验，除特殊情况外，所有请求通常在 30 秒内完成处理。对于未在定义的超时时间内完成的，我们将在日志监控中捕获超时并发送警报，然后解决超时的根本原因并采取相应的措施。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这就是可以解决问题 1 的方法。其他语言和框架应该有类似的配置。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;对于问题 2：添加 preStopHook&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;要处理问题 2，我们必须在不再将新流量路由到该 pod 后开始删除该 pod。因此，应该将 preStopHook 添加到 Kubernetes yaml 文件中，让 Kubelet 在收到删除 pod 事件时“sleep 一下”，并在开始删除 pod 之前留出足够的时间来更新网络规则。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;lifecycle:&lt;br/&gt;  preStop:&lt;br/&gt;     exec:&lt;br/&gt;        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;sleep 10&quot;]  # set prestop hook&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上述配置将导致 Kubelet 等待设定的时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;修改终止 GracePeriodSeconds&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考之前删除 Pod 的分析，Kubernetes 为容器删除留下了 30 秒的最大时间尺度。如果 Spring 的优雅关闭超时时间和 Kubernetes 的 preStopHooks 之和超过 30 秒，可能会导致 Kubernetes 在 Spring Boot 处理完请求之前强行删除容器。因此，如果过程超过 30 秒，则应将 timerminationGracePeriodSeconds 调整为超出 Spring 加 preStopHook 的优雅关闭超时。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;terminationGracePeriodSeconds: 45&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后，完整的 Kubernetes yaml 文件如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;apps/v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Deployment&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;gracefulshutdown-app&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;replicas:&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;selector:&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;matchLabels:&lt;/span&gt;&lt;br/&gt;           &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;gracefulshutdown-app&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;template:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;         &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;gracefulshutdown-app&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;containers:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;graceful-shutdown-test&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;gracefulshutdown-app:latest&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;containerPort:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;lifecycle:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;preStop:&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;exec:&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;command:&lt;/span&gt; &lt;span&gt;[&quot;sh&quot;,&lt;/span&gt; &lt;span&gt;&quot;-c&quot;,&lt;/span&gt; &lt;span&gt;&quot;sleep 10&quot;]&lt;/span&gt;  &lt;span&gt;#set prestop hook&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;terminationGracePeriodSeconds:&lt;/span&gt; &lt;span&gt;45&lt;/span&gt; &lt;span&gt;# terminationGracePeriodSeconds&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在 Spring Boot 中设置正常关闭可确保在容器终止之前完成处理正在进行的请求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设置 preStopHook 确认删除 pod 和更新网络规则之间的顺序关系。3. 最后，为了给进程留出充裕的时间来处理所有请求，设置 terminationGracePeriodSeconds。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过这三个步骤，我们可以充分解决这两个问题。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;概括&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文描述了一种解决方案，用于确保假设服务将正确处理零停机部署所需的所有请求。因此，构建此功能将丰富用户体验并减少将缺陷引入服务的影响。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f30f85d91d0a9a8dfd7c4eb739ec7abe</guid>
<title>Java 互联网事实聊天系统（附源码）</title>
<link>https://toutiao.io/k/igkmny4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;span&gt;👆&lt;/span&gt;点击左上角&lt;/span&gt;&lt;span&gt;蓝字&lt;/span&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;关注&lt;/span&gt;&lt;/strong&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;此公众号👆&lt;/span&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;技术干货，及时送达！&lt;/span&gt;&lt;/p&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5005636978579482&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/knmrNHnmCLHWdxDgXS3LDFKrDHkles6GZDVLzb38TgRUddPTGaIas5jxs8Day1677IgZicfXDskMYjHicekcKOcw/640?wx_fmt=png&amp;amp;random=0.12369974193753164&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1774&quot;/&gt;&lt;span&gt;来源：网络&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;前言&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;技术准备&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;整体说明&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;核心编码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;效果及操作演示&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;源码下载&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;0. 前言&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;决定以Netty为核心，以WebSocket为应用层通信协议做一个互联网聊天系统，整体而言就像微信网页版一样，但考虑到这个聊天系统的功能非常多，因此只打算实现核心的聊天功能，包括单发、群发、文件发送，然后把项目与Spring整合做成开源、可拓展的方式，给大家参考、讨论、使用，欢迎大家的指点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;关于Netty&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;Netty 是一个利用 Java 的高级网络的能力，隐藏其背后的复杂性而提供一个易于使用的 API 的客户端/服务器框架。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;关于WebSocket通信协议&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;WebSocket是为了解决HTTP协议中通信只能由客户端发起这个弊端而出现的，WebSocket基于HTTP5协议，借用HTTP进行握手、升级，能够做到轻量的、高效的、双向的在客户端和服务端之间传输文本数据。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;1、技术准备&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;IDE：MyEclipse 2016&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;JDK版本：1.8.0_121&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;浏览器：谷歌浏览器、360浏览器（极速模式）（涉及网页前端设计，后端开发表示很苦闷）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;涉及技术：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Netty 4&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WebSocket + HTTP&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spring MVC + Spring&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JQuery&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Bootstrap 3 + Bootstrap-fileinput&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Maven 3.5&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Tomcat 8.0&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;2. 整体说明&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.1 设计思想&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个通信系统以Tomcat作为核心服务器运行，其下另开一个线程运行Netty WebSocket服务器，Tomcat服务器主要处理客户登录、个人信息管理等的HTTP类型请求（通常的业务类型），端口为8080，Netty WebSockt服务器主要处理用户消息通信的WebSocket类型请求，端口为3333。用户通过浏览器登录后，浏览器会维持一个Session对象（有效时间30分钟）来保持登录状态，Tomcat服务器会返回用户的个人信息，同时记录在线用户，根据用户id建立一条WebSocket连接并保存在后端以便进行实时通信。当一个用户向另一用户发起通信，服务器会根据消息内容中的对话方用户id，找到保存的WebSocket连接，通过该连接发送消息，对方就能够收到即时收到消息。当用户注销或退出时，释放WebSocket连接，清空Session对象中的登录状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上Netty也可以用作一个HTTP服务器，而这里使用Spring MVC处理HTTP请求是出于熟悉的缘故，也比较接近传统开发的方式。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.2 系统结构&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统采用B/S（Browser/Server），即浏览器/服务器的结构，主要事务逻辑在服务器端（Server）实现。借鉴MVC模式的思想，从上至下具体又分为视图层（View）、控制层（Controller）、业务层（Service）、模型层（Model）、数据访问层（Data Access）&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.3 项目结构&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目后端结构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.465201465201465&quot; data-type=&quot;png&quot; data-w=&quot;273&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/knmrNHnmCLHWdxDgXS3LDFKrDHkles6GSK5AGwNtIVqwRgZonzwnibibePDVc6tMev9lHjWenFdRGdXZiaYoDkWLQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目前端结构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9018867924528302&quot; data-type=&quot;png&quot; data-w=&quot;265&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/knmrNHnmCLHWdxDgXS3LDFKrDHkles6GTqvs8Du7wzVnwic8IzYDuicM0QaHyiaHHtYtNPwD2zxTrIibJbqCPCiaZXw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.4 系统功能模块&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统只包括两个模块：登录模块和聊天管理模块。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;登录模块：既然作为一个系统，那么登录的角色认证是必不可少的，这里使用简单、传统的Session方式维持登录状态，当然也有对应的注销功能，但这里的注销除了清空Session对象，还要释放WebSocket连接，否则造成内存泄露。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;聊天管理模块：系统的核心模块，这部分主要使用Netty框架实现，功能包括信息、文件的单条和多条发送，也支持表情发送。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他模块：如好友管理模块、聊天记录管理、注册模块等，我并没有实现，有兴趣的话可以自行实现，与传统的开发方式类似。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于本系统涉及多个用户状态，有必要进行说明，下面给出本系统的用户状态转换图。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0275862068965518&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/knmrNHnmCLHWdxDgXS3LDFKrDHkles6GJHbXDNibrKvuoVaFhib0mRR1hvvCJicJRFlAq6PKL8YgHPx0Wbuowrgcw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;435&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2.5 系统界面&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统聊天界面如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6990077177508269&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/knmrNHnmCLHWdxDgXS3LDFKrDHkles6Gju5Eme2S3pOaiaRxibiaDOiciavLhI0zOJnzG1UK3xKwNYQ1tyOtVHXzBzA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;907&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.745005875440658&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/knmrNHnmCLHWdxDgXS3LDFKrDHkles6GKQB3O59Iia8Fq72LbU3wiaOUAYPMbdnHpBv5UZt5BDhobPgbfxWDL93w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;851&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;3. 核心编码&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里只说明需要注意的地方，详细的请看源码&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3.1 Netty服务器启动与关闭&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当关闭Tomcat服务器时，也要释放Netty相关资源，否则会造成内存泄漏，关闭方法如下面的close()，如果只是使用shutdownGracefully()方法的话，关闭时会报内存泄露Memory Leak异常（但IDE可能来不及输出到控制台）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/**&lt;br/&gt; * 描述: Netty WebSocket服务器&lt;br/&gt; *      使用独立的线程启动&lt;br/&gt; * @author Kanarien&lt;br/&gt; * @version 1.0&lt;br/&gt; * @date 2018年5月18日 上午11:22:51&lt;br/&gt; */&lt;br/&gt;public class WebSocketServer implements Runnable{&lt;br/&gt;&lt;br/&gt;        /**&lt;br/&gt;  * 描述：启动Netty Websocket服务器&lt;br/&gt;  */&lt;br/&gt; public void &lt;span&gt;&lt;span&gt;build&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;     // 略，详细请看源码&lt;br/&gt; }&lt;br/&gt;     &lt;br/&gt;      /**&lt;br/&gt;  * 描述：关闭Netty Websocket服务器，主要是释放连接&lt;br/&gt;  *     连接包括：服务器连接serverChannel，&lt;br/&gt;  *     客户端TCP处理连接bossGroup，&lt;br/&gt;  *     客户端I/O操作连接workerGroup&lt;br/&gt;  *&lt;br/&gt;  *     若只使用&lt;br/&gt;  *         bossGroupFuture = bossGroup.shutdownGracefully();&lt;br/&gt;  *         workerGroupFuture = workerGroup.shutdownGracefully();&lt;br/&gt;  *     会造成内存泄漏。&lt;br/&gt;  */&lt;br/&gt; public void &lt;span&gt;&lt;span&gt;close&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;     serverChannelFuture.channel().close();&lt;br/&gt;  Future&amp;lt;?&amp;gt; bossGroupFuture = bossGroup.shutdownGracefully();&lt;br/&gt;        Future&amp;lt;?&amp;gt; workerGroupFuture = workerGroup.shutdownGracefully();&lt;br/&gt;&lt;br/&gt;        try {&lt;br/&gt;            bossGroupFuture.await();&lt;br/&gt;            workerGroupFuture.await();&lt;br/&gt;        } catch (InterruptedException ignore) {&lt;br/&gt;            ignore.printStackTrace();&lt;br/&gt;        }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;4. 效果及操作演示&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;4.1 登录操作&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;登录入口为：http://localhost:8080/WebSocket/login 或 http://localhost:8080/WebSocket/ 当前系统用户固定为9个，群组1个，包括9人用户。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;用户1 用户名：Member001 密码：001&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户2 用户名：Member002 密码：002&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;······&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户9 用户名：Member009 密码：009&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16944444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/knmrNHnmCLHWdxDgXS3LDFKrDHkles6G83O2012NDzPsJNCx56BjZwYTnERlkkvPIQ16iaaK5TCwcLxQTe4aywQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;4.2 聊天演示&lt;/h3&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;5. 源码下载&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下载链接: 链接: https://pan.baidu.com/s/1Wbmg7Dc2Q8RKwFMbtEFqmA?pwd=43tr &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提取码: 43tr&lt;/p&gt;&lt;/section&gt;&lt;p mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;/p&gt;&lt;blockquote mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;span mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19&quot;&gt;来源：公众号 Java技术迷&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;span&gt;版权声明：此内容来源网络，版权归原作者所有。我们转载的内容，都会注明来源，除非无法确认。若有侵权，烦请告知，我们会立即删除并表示歉意。谢谢！&lt;/span&gt;&lt;/blockquote&gt;&lt;section mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19&quot;&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19&quot;&gt;&lt;span&gt;PS：文章若对您有用，请帮助 &lt;strong&gt;点赞、在看、转发&lt;/strong&gt; 吧！&lt;/span&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19&quot;&gt;&lt;span&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-tools=&quot;公众号：Java精选&quot; data-id=&quot;91842&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;点击卡片关注我们，更多技术干货，及时为您送达！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MzU0ODk2MzE3MA==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib178LnVu9br0VUuI4OKYwvXKpZnaGseFG3vyFJShp2VFcwVodS88CkUsNYcLDrglYLHPFoic6MJD4A/0?wx_fmt=png&quot; data-nickname=&quot;逻魔代码&quot; data-alias=&quot;lomagicode&quot; data-signature=&quot;逻魔代码，分享架构技术干货，打造有价值的经验分享社群，帮助后继者以前人的肩膀为基，建造更精妙的技术殿堂！&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;20&quot;&gt;&lt;p mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;20&quot;&gt;往期推荐&lt;/p&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;br mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247485184&amp;amp;idx=1&amp;amp;sn=3ba295e248bd8e6fae451d241e8f30b1&amp;amp;chksm=fbb6510dccc1d81b32f7e05ba07ae9c010f9a9b9bd1c79b36d3cebbb918e48d2a2ada828d310&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;JWT 实现登录认证 + Token 自动续期方案，正确的使用姿势！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;JWT 实现登录认证 + Token 自动续期方案，正确的使用姿势！&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247485176&amp;amp;idx=1&amp;amp;sn=352a53ba8f71c10c8947c551ab47b6f3&amp;amp;chksm=fbb650f5ccc1d9e34bc0b50ac5eefd286b6cab311c261a481ee4561968362199a32f56845e3d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;卷起来！MySQL内存架构和索引说明！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;卷起来！MySQL内存架构和索引说明！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247485024&amp;amp;idx=1&amp;amp;sn=ff05d8c52ed01f829df6b49be961ffd7&amp;amp;chksm=fbb6506dccc1d97bd4cf2a0b840caa0aa67e54311242be2f492b5bb4347dfe4b2c2d45430224&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SQL优化 20 连击，建议收藏！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;SQL优化 20 连击，建议收藏！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247485069&amp;amp;idx=1&amp;amp;sn=6c3af98f9d8a1bee27b30ab8bf39a1e4&amp;amp;chksm=fbb65080ccc1d99655c7365bc197f1f5eb9c281cd83395c3f8786d1fa8fec48083d2ef99a139&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;[干货]一文详解微服务架构！长文！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;[干货]一文详解微服务架构！长文！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247484542&amp;amp;idx=1&amp;amp;sn=cb34e6b94c24c4b1088ea792c9f68005&amp;amp;chksm=fbb65273ccc1db651e2b61805f6fecf69825fb910861b086e448091912ee2836f88b67ab07e0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【干货】MySQL索引背后的数据结构及算法原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【干货】MySQL索引背后的数据结构及算法原理&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>