<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f90937dcbf6bac39d9f3b344766ac471</guid>
<title>【Java盲点攻克】「数值浮点数精度系列」Double与Float的坑与解决办法以及BigDecimal的取而代之！_洛神灬殇的博客-CSDN博客</title>
<link>https://toutiao.io/k/tcg80lz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h3&gt;&lt;a id=&quot;_0&quot;/&gt;探究背景&lt;/h3&gt; 
&lt;p&gt;涉及诸如float或者double这两种浮点型数据的处理时，偶尔总会有一些怪怪的现象，不知道大家注意过没，举几个常见的栗子：&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_4&quot;/&gt;条件判断超预期&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;System.out.println( 1f == 0.9999999f );   // 打印：false
System.out.println( 1f == 0.99999999f );  // 打印：true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_11&quot;/&gt;数据转换超预期&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;float&lt;/span&gt; f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.1f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_20&quot;/&gt;基本运算超预期&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.7&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_27&quot;/&gt;数据自增超预期&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;float&lt;/span&gt; f1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8455263f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    f1&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;











&lt;span class=&quot;token keyword&quot;&gt;float&lt;/span&gt; f2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;84552631f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    f2&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;










&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;所以说用浮点数（包括double和float）处理问题有非常多隐晦的坑在等着咱们！&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_64&quot;/&gt;分析原因出处&lt;/h4&gt; 
&lt;p&gt;我们就以第一个典型现象为例来分析一下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1f&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.99999999f&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;直接用代码去比较1和0.99999999，居然打印出true！这说明了什么？这说明了计算机压根区分不出来这两个数。这是为什么呢？&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_74&quot;/&gt;深入分析&lt;/h5&gt; 
&lt;p&gt;输入的这两个浮点数只是我们人类肉眼所看到的具体数值，是我们通常所理解的十进制数，但是计算机底层在计算时可不是按照十进制来计算的，学过计算机组成原理的人都知道，计算机底层最终都是基于像010100100100110011011这种0、1二进制来完成的。&lt;/p&gt; 
&lt;p&gt;将这两个十进制浮点数转化到二进制，直接给出结果（把它转换到IEEE 754 Single precision 32-bit，也就float类型对应的精度）&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1.0（十进制）
    ↓
00111111 10000000 00000000 00000000（二进制）
    ↓
0x3F800000（十六进制）
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;0.99999999（十进制）
    ↓
00111111 10000000 00000000 00000000（二进制）
    ↓
0x3F800000（十六进制）
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这两个十进制浮点数的底层二进制表示是一样的，怪不得==的判断结果返回true！&lt;/p&gt; 
&lt;p&gt;但是1f == 0.9999999f返回的结果是符合预期的，打印false，我们也把它们转换到二进制模式下看看情况：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1.0（十进制）
    ↓
00111111 10000000 00000000 00000000（二进制）
    ↓
0x3F800000（十六进制）

0.9999999（十进制）
    ↓
00111111 01111111 11111111 11111110（二进制）
    ↓
0x3F7FFFFE（十六进制）
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;它俩的二进制数字表示确实不一样，这是理所应当的结果。&lt;/p&gt; 
&lt;p&gt;那么为什么0.99999999的底层二进制表示竟然是：00111111 10000000 00000000 00000000呢？&lt;/p&gt; 
&lt;p&gt;这不明明是浮点数1.0的二进制表示吗？主要要分一下浮点数的精度问题了。&lt;/p&gt; 
&lt;p&gt;浮点数的精度问题！&lt;br/&gt; 学过 《计算机组成原理》 这门课的小伙伴应该都知道，浮点数在计算机中的存储方式遵循IEEE 754 浮点数计数标准，可以用科学计数法表示为：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;只要给出：符号（S）、阶码部分（E）、尾数部分（M） 这三个维度的信息，一个浮点数的表示就完全确定下来了，所以float和double这两种浮点数在内存中的存储结构如下所示：&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;&lt;a id=&quot;S_125&quot;/&gt;符号部分（S）&lt;/h5&gt; 
&lt;p&gt;0-正 1-负&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;E_129&quot;/&gt;阶码部分（E）（指数部分）：&lt;/h5&gt; 
&lt;p&gt;对于float型浮点数，指数部分8位，考虑可正可负，因此可以表示的指数范围为-127 ~ 128&lt;br/&gt; 对于double型浮点数，指数部分11位，考虑可正可负，因此可以表示的指数范围为-1023 ~ 1024&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;M_134&quot;/&gt;尾数部分（M）：&lt;/h5&gt; 
&lt;p&gt;浮点数的精度是由尾数的位数来决定的：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;对于float型浮点数，尾数部分23位，换算成十进制就是 2^23=8388608，所以十进制精度只有6 ~ 7位；&lt;/li&gt;&lt;li&gt;对于double型浮点数，尾数部分52位，换算成十进制就是 2^52 = 4503599627370496，所以十进制精度只有15 ~ 16位&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;对于上面的数值0.99999999f，很明显已经超过了float型浮点数据的精度范围，出问题也是在所难免的。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_143&quot;/&gt;精度问题如何解决&lt;/h4&gt; 
&lt;p&gt;涉及商品金额、交易值、货币计算等这种对精度要求很高的场景该怎么办呢？&lt;/p&gt; 
&lt;p&gt;方法一：用字符串或者数组解决多位数问题&lt;/p&gt; 
&lt;p&gt;方法二：Java的大数类是个好东西&lt;/p&gt; 
&lt;p&gt;JDK早已为我们考虑到了浮点数的计算精度问题，因此提供了专用于高精度数值计算的大数类来方便我们使用。Java的大数类位于java.math包下：可以看到，常用的BigInteger 和 BigDecimal就是处理高精度数值计算的利器。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;BigDecimal&lt;/span&gt; num3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.0f&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;BigDecimal&lt;/span&gt; num4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.99999999f&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num3 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; num4 &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;token class-name&quot;&gt;BigDecimal&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;BigDecimal&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.7&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num2 &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subtract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num1 &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num2 &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num1 &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;当然了，像BigInteger 和 BigDecimal这种大数类的运算效率肯定是不如原生类型效率高，代价还是比较昂贵的，是否选用需要根据实际场景来评估。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_171&quot;/&gt;实际案例场景&lt;/h4&gt; 
&lt;h5&gt;&lt;a id=&quot;Double_173&quot;/&gt;使用Double计算问题&lt;/h5&gt; 
&lt;p&gt;如果需要记录一个16位整数且保留两位小数点的金额数值，于是使用Double类型来接收金额，但在最后进行金额总和统计后，得出的金额数值小数点后面多出了小数位，且多出的小数位不为0，简直要疯了，每一笔的金额都是两位小数点，但最后统计的总金额数值却是多位小数点的。&lt;/p&gt; 
&lt;p&gt;double和float类型主要用于科学计算与工程计算而设计的，用于二进制浮点计算，但我们在程序中写的时候往往都是写的10进制，而这个10进制的小数，对于计算机内部而言，是无法用二进制的小数来精确表达出来的，只能表示出一个“不精确性”或者说“近似性”的结果，而用这个近似性的结果进行计算得出的数据，&lt;strong&gt;也往往与我们心中想要的数据不一样，所以如果是想进行金额或其他类似的浮点型数值计算，不要使用double或float，推荐大家使用BigDecimal来进行运算。&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;BigDecimal_179&quot;/&gt;BigDecimal的工具使用&lt;/h4&gt; 
&lt;p&gt;BigDecimal是Java在java.math包中提供的API类，它可以用来对超过16位有效位的数进行精确的运算和处理。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;BigDecimal_183&quot;/&gt;BigDecimal创建对象&lt;/h5&gt; 
&lt;p&gt;BigDecimal提高了四个构造方法来创建对象：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;创建整数类型的对象：new BigDecimal(int);&lt;/li&gt;&lt;li&gt;创建双精度数值类型的对象：new BigDecimal(double);&lt;/li&gt;&lt;li&gt;创建长整数类型的对象：new BigDecimal(long);&lt;/li&gt;&lt;li&gt;创建以字符串表示的数值的字符串类型对象：new BigDecimal(String);&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;四个构造方法就是四种创建对象的方式，但推荐使用第1、3、4种方式，而不推荐使用第2种方式，因为前面说了double无法精确的表示10进制的小数，只能近似性的表示，这就具有一定的不可预知性了，&lt;strong&gt;如需创建浮点类型的BigDecimal对象，可以使用new BigDecimal(String)来创建。&lt;/strong&gt;&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;BigDecimal_194&quot;/&gt;BigDecimal的运算&lt;/h5&gt; 
&lt;p&gt;BigDecimal对于数值的运算，提供了专用的方法：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;BigDecimal.add(BigDecimal)　　BigDecimal对象的相加方法，返回BigDecimal对象&lt;/li&gt;&lt;li&gt;BigDecimal.subtract(BigDecimal)　　BigDecimal对象的相减方法，返回BigDecimal对象&lt;/li&gt;&lt;li&gt;BigDecimal.multiply(BigDecimal)　　BigDecimal对象的相乘方法，返回BigDecimal对象&lt;/li&gt;&lt;li&gt;BigDecimal.divide(BigDecimal)　　BigDecimal对象的相除方法，返回BigDecimal对象&lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;注意：BigDecimal的对象都是不可变的，它的每一次四则运算，都会产生并返回新的对象，所以在做加减乘除运算时要用新的对象来保存操作后的值。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;&lt;a id=&quot;BigDecimal_205&quot;/&gt;BigDecimal比较大小&lt;/h5&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;BigDecimal提供了compareTo(BigDecimal)来进行数值的大小比较，compareTo返回值为int类型：-1，0，1；&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;例如：bigdemical_1.compareTo(bigdemical_2)&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;返回-1：表示bigdemical_1小于bigdemical_2；&lt;/li&gt;&lt;li&gt;返回0，表示bigdemical_1等于bigdemical_2；&lt;/li&gt;&lt;li&gt;返回1，表示bigdemical_1大于bigdemical_2；&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;BigDecimal还有其他一些东西，例如，BigDecimal的格式化、BigDecimal的输出类型转换、BigDecimal的异常情况处理及注意事项等等。&lt;/p&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>28c710b0bc6167b029c5c3426b10ddda</guid>
<title>Gitlab简单使用CI/CD</title>
<link>https://toutiao.io/k/m6juq60</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             defaultNoSetting&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h1&gt;开篇语&lt;/h1&gt;&lt;p&gt;大概是去年就想做这个事情了，奈何当时卡到一个docker命令找不到的问题上，导致文章难产了，墨迹了这么久，终于又有空来捣鼓它了。&lt;/p&gt;&lt;h1&gt;目的&lt;/h1&gt;&lt;p&gt;我们要实现的目的是我本地不断提交代码(CI),然后服务器不断进行部署(CD)的一个简单流程。&lt;/p&gt;&lt;h1&gt;准备&lt;/h1&gt;&lt;p&gt;在进行简单的gtlab的ci/cd之前，我们需要安装gitlab软件，这个可以看之前的文章。&lt;/p&gt;&lt;p&gt;本文环境：&lt;/p&gt;&lt;p&gt;服务器A：使用docker部署了gitlab&lt;/p&gt;&lt;p&gt;服务器B：已经安装了docker、注册了gitlab-runner用来部署服务&lt;/p&gt;&lt;p&gt;在centos一键安装docker以及docker-compose的脚本&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;!/bin/bash&lt;br/&gt;&lt;br/&gt;echo -e &quot;\033[33m install docker sh \033[0m&quot;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;# &lt;/span&gt;设置yum源&lt;br/&gt;echo -e &quot;\033[33m Set the yum source \033[0m&quot;&lt;br/&gt;sudo yum -y install yum-utils&lt;br/&gt;sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;yum包更新到最新&lt;br/&gt;echo -e &quot;\033[33m update version \033[0m&quot;&lt;br/&gt;sudo yum update -y&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;安装Docker最新版&lt;br/&gt;echo -e &quot;\033[33m install docker-ce \033[0m&quot;&lt;br/&gt;sudo yum install docker-ce -y&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;设置Docker自启动&lt;br/&gt;echo -e &quot;\033[33m setting self-turn-on \033[0m&quot;&lt;br/&gt;sudo systemctl enable  docker&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;启动Docker&lt;br/&gt;echo -e &quot;\033[33m start docker \033[0m&quot;&lt;br/&gt;sudo systemctl start docker&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;配置国内镜像 /etc/docker/daemon.json&lt;br/&gt;echo -e &quot;\033[33m Set up aliyuncs mirror \033[0m&quot;&lt;br/&gt;sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&#x27;EOF&#x27;&lt;br/&gt;{&lt;br/&gt;  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]&lt;br/&gt;}&lt;br/&gt;EOF&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;加载配置文件,ReStart&lt;br/&gt;sudo systemctl daemon-reload&lt;br/&gt;sudo systemctl restart docker&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;安装docker-compose,最新版本需要手动查询一下&lt;br/&gt;echo -e &quot;\033[33m install docker-compose \033[0m&quot;&lt;br/&gt;sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose&lt;br/&gt;sudo chmod +x /usr/local/bin/docker-compose&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部署gitlab的yaml脚本&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;3&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;services:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;gitlab:&lt;/span&gt; &lt;span&gt;#gitlab&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;gitlab/gitlab-ce&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;container_name:&lt;/span&gt; &lt;span&gt;&#x27;gitlab&#x27;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;restart:&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;GITLAB_OMNIBUS_CONFIG:&lt;/span&gt; &lt;span&gt;|&lt;br/&gt;        external_url &quot;http://172.18.231.92:9006&quot; # web站点访问地址&lt;br/&gt;        gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 9022 # 设置shell 端口&lt;br/&gt;        gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27; # 设置时区&lt;br/&gt;        # gitlab_rails[&#x27;smtp_enable&#x27;] = true&lt;br/&gt;        # gitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.exmail.qq.com&quot;&lt;br/&gt;        # gitlab_rails[&#x27;smtp_port&#x27;] = 465&lt;br/&gt;        # gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;&amp;lt;your qq email&amp;gt;&quot;&lt;br/&gt;        # gitlab_rails[&#x27;smtp_password&#x27;] = &quot;xCcqh*L4jkqFCS&quot;&lt;br/&gt;        # gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;&lt;br/&gt;        # gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = true&lt;br/&gt;        # gitlab_rails[&#x27;smtp_tls&#x27;] = true&lt;br/&gt;        # gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;&amp;lt;your qq email&amp;gt;&#x27;&lt;br/&gt;        # gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;exmail.qq.com&quot;&lt;br/&gt;&lt;/span&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&#x27;9006:9006&#x27;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&#x27;443:443&#x27;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&#x27;9022:22&#x27;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;volumes:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&#x27;/gitlab/config:/etc/gitlab&#x27;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;安装gitlab-runner&lt;/h2&gt;&lt;p&gt;在要部署服务的服务器上安装docker以及gitlab-runner，本次安装直接安装在服务器中，不使用docker安装gitlab-runner，避免产生Dind(docker in docker)问题。&lt;/p&gt;&lt;p&gt;首先导入repository&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.1064891846921797&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icHIHBsZhRvbhBzfTc7C2UbclGPAbneeia3IIzArHrFRLEDrTVFhUibC8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;安装&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;yum install gitlab-runner -y&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.27835051546391754&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icCMicwwrvPxhpmKdCFE1a6RQuppRicKz2dnOCiaibicXPftwATfLFYjXEwRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;388&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;注册到gitlab&lt;/h2&gt;&lt;h3&gt;注册群组Runner&lt;/h3&gt;&lt;p&gt;首先我们要获取注册时候需要的信息，获取地址在 http://172.18.231.92:9006/admin/runners&lt;/p&gt;&lt;p&gt;输入命令进行注册&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;gitlab-runner register&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.28&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icPalsIzJXjyA1NBzCskUU4nfhSMk8FYqnYxauyTYZibBmYayPXLZxmpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;选择执行者，这里我使用shell&lt;/p&gt;&lt;p&gt;执行者参考：https://docs.gitlab.com/runner/executors/index.html&lt;/p&gt;&lt;p&gt;到这里已经注册成功了，就可以在gitlab中看到注册的runner了&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.2639206712433257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icUWLRsLeDhjbvHp9uNtpdVrKGLk6xOrgIgGjIABia8rbYh8DFzutWaGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1311&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;为仓库设置单独的Runner&lt;/h3&gt;&lt;p&gt;使用该方案应该先看下一步去创建项目&lt;/p&gt;&lt;p&gt;在我们要部署的仓库里面找到Runner配置信息(设置=&amp;gt;CI/CD)&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.9619686800894854&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icVIw2iaAX14NAFEwkkaiaz4O0f1I1yPAEHveyEgY1spm705yyAEgINObA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;447&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;然后重复上面注册的过程，详细步骤如图&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.28867761452031115&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icr65wqLZHGvian3ibBP9ibgG8KcG85MylDpRN0R8T8pOhVdHgkuG62Fnzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1157&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;然后就可以在仓库的配置下可以看到我们注册的东西&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1.330396475770925&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icklGJrxWAggu7wxFNC8rgXP4q7sILXiblaeOXh1FUY4Jib9mVBeTPG1icg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;454&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;配置帐号&lt;/h2&gt;&lt;p&gt;添加gitlab-runner用户&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;sudo adduser gitlab-runner&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将该用户添加到docker组中&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;sudo gpasswd -a gitlab-runner docker&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看docker组是否已经添加用户成功&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;cat /etc/group |grep docker&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证是否可以通过gitlab-runner访问docker&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;sudo -u gitlab-runner -H docker info&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启docker容器服务&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;sudo systemctl restart docker&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给docker.sock设置权限&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;sudo chmod a+rw /var/run/docker.sock&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19740634005763688&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7ic08dDsWp63XtH01GaI6Lnl5M2mZfgO9yCtu71Ue94I5YBib6QfQyYYxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;694&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1&gt;创建项目&lt;/h1&gt;&lt;p&gt;直接开始创建项目&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6606786427145709&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icsBfl7QbA2lnibwbHT9MD4p5Y1rARHjCD1DwVcOZxDnicvDttdh1z0SoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;拉取项目并填充内容&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7627906976744186&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icXqWUbrsKr2GLqWiaXT6TNbibuDPCN7uNAxPCtEwSwiaADRSWWwBFuVE0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;拷贝一个简单项目(https://gitee.com/AZRNG/my-example)提交到gitlab上&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48880233690360275&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icRdjfkDLhWJCtEnQRooox1Eia9eBXufAoKqLBxOGUQ6TZTt0waC8Kyjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1027&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1&gt;配置流水线&lt;/h1&gt;&lt;p&gt;在项目的根目录下创建文件名为.gitlab-ci.yml的文件，用于进行打包部署。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;# .gitlab-ci.yml&lt;br/&gt;&lt;br/&gt;stages:&lt;br/&gt;  - deploy&lt;br/&gt;&lt;br/&gt;deploy:&lt;br/&gt;  stage: deploy&lt;br/&gt;  script:&lt;br/&gt;    - docker -v&lt;br/&gt;    - cd NetByDocker&lt;br/&gt;    - docker build -f Dockerfile -t gitlabnetsample ../ &lt;br/&gt;    - docker rm -f gitlabnetsample &amp;amp;&amp;amp;  docker run --name gitlabnetsample -d -p 8060:80 gitlabnetsample # remove old,create new &lt;br/&gt;    - docker ps -a&lt;br/&gt;  tags: &lt;br/&gt;    - net&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提交推送代码，然后在gitlab的CI/CD=&amp;gt;Pipeliners查看&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19537037037037036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icz1JmXtRHIEicwlQAkLMh1FyOu7EW0TSGqKnM4ribib6K0VibwslIr0sHYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;查看详细信息&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24357838795394154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icmTEqmZUDB74cYFz5V5PDbn4AibfO3TfiaQvWftF6YYjdgeTpMq0icsvdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1129&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;部署成功，进入该服务器查看容器信息&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05464926590538336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJtGSSuXc4BfrYbuhFOcW7icPzAiaGPm1VFdsouNozwrsRCf4Cno7s7sqKKxQGCQB3rlLFtPcLlpQDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1226&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;通过外部访问服务：http://172.18.229.206:8060/swagger/index.html 成功显示swagger界面，部署成功。&lt;/p&gt;&lt;h1&gt;参考文档&lt;/h1&gt;&lt;p&gt;&lt;span&gt;https://blog.csdn.net/qq_42799562/article/details/118179856&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MzIyNDA0MQ==&amp;amp;mid=2247506884&amp;amp;idx=1&amp;amp;sn=a8dbcd29236089012a1101d5451cce0a&amp;amp;chksm=fdaec442cad94d5473e7707b2b80b6eb7f8ab6e3d38300c0d7aaba0c4eee8f30eab0fc36aed0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;使用.NET7和C#11打造最快的序列化程序-以MemoryPack为例&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;使用.NET7和C#11打造最快的序列化程序-以MemoryPack为例&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MzIyNDA0MQ==&amp;amp;mid=2247506863&amp;amp;idx=2&amp;amp;sn=9ebfbc86aeb437a7b9931c723d3e7f8e&amp;amp;chksm=fdaec429cad94d3f6e957bdbe366c93fc9dd12155889e6037d01935fbd2f09e7088909342e27&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C# 简单制作一个看门狗程序&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;C# 简单制作一个看门狗程序&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MzIyNDA0MQ==&amp;amp;mid=2247506812&amp;amp;idx=1&amp;amp;sn=f50f5ee2e3324e27a98787069870a08d&amp;amp;chksm=fdaec4facad94dec9afe04f6bba3ee5cfa4703e23d8db49149025d707159875ed5ccd9a063b8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;NetCore多租户开源项目，快速后台开发企业框架，赚钱就靠她了&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;NetCore多租户开源项目，快速后台开发企业框架，赚钱就靠她了&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MzIyNDA0MQ==&amp;amp;mid=2247506794&amp;amp;idx=1&amp;amp;sn=1c49886fb9752d5bce030302de283a05&amp;amp;chksm=fdaec4eccad94dfad21c1bacbd8408ce427b94cb366e9c2ac17d2734853c30f0024a8e31b97a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;.NET MAUI 安卓应用开发初体验&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;.NET MAUI 安卓应用开发初体验&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MzIyNDA0MQ==&amp;amp;mid=2247506759&amp;amp;idx=1&amp;amp;sn=1c59b4f1b85c1b1819ee179d33a50fb9&amp;amp;chksm=fdaec4c1cad94dd792b6f1c6755cbe9db9dca5189f5709f4ae924e581f5b50263ee72d09445f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;ROS2 机器人操作系统入门和安装以及如何使用 .NET 进行开发&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;ROS2 机器人操作系统入门和安装以及如何使用 .NET 进行开发&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MzIyNDA0MQ==&amp;amp;mid=2247506740&amp;amp;idx=1&amp;amp;sn=9f54ab094dbe1cc72cea6cad9aefc8a7&amp;amp;chksm=fdaec4b2cad94da42da231bc9692b25ec214e1b0ddf81476c851b3cc77730426f6eab8f28085&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;什么是微服务架构？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;什么是微服务架构？&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点击下方卡片关注DotNet NB&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一起交流学习&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;64&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b96CibCt70iaajvl7fD4ZCicMcjhXMp1v6UibM134tIsO1j5yqHyNhh9arj090oAL7zGhRJRq6cFqFOlDZMleLl4pw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4MzIyNDA0MQ==&quot; data-alias=&quot;DotNetNB&quot; data-from=&quot;2&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VBtnGywBg67IuHc34mZ8IPicoV17oeicMGfHSYAdObEW4ib8A2VibibYQibj0fialr65HhEycPLaRMuibMPOliaC73DojJg/0?wx_fmt=png&quot; data-nickname=&quot;DotNet NB&quot; data-signature=&quot;.NET Core 技术学习分享，社区热点分享，专注为 .NET 社区做贡献，愿我们互相交流学习，共同推动社区发展&quot; has-insert-preloading=&quot;1&quot; data-index=&quot;0&quot; data-origin_num=&quot;200&quot; data-is_biz_ban=&quot;0&quot; data-isban=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▲ &lt;/span&gt;点击上方卡片关注DotNet NB，一起交流学习&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;请在公众号后台&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;回复&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;【路线图】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;获取.NET 2021开发者路线图&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;回复&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;【原创内容】&lt;/span&gt;&lt;/strong&gt;获取公众号原创内容&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;回复&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;【峰会视频】&lt;/span&gt;&lt;/strong&gt;获取.NET Conf开发者大会视频&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;回复&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;【个人简介】&lt;/span&gt;&lt;/strong&gt;获取作者个人简介&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;回复&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;【年终总结】&lt;/span&gt;&lt;/strong&gt;获取作者年终总结&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;回复 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;【&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;加群&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;加入DotNet NB 交流学习群&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;长按识别下方二维码，或点击阅读原文。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;和我一起，交流学习，分享心得。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-ratio=&quot;0.45454545454545453&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Eia1pKbzLGbRzqWf7t8HniaZJ6noibE2143vvalG1EkoguT5X9vLpf9FGd2rVXYPefG8ArA5dc1C5VbNs3zI4MNfA/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0013192612137203&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VBtnGywBg65QMvUYSERVUaCTiaLarOibGM4nYu4oYchica6qibmJdn58alsaUB6saxsmcia8GdUu9c0zNib4WzFDKWDw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;758&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;10000&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>792462b527408cf0ffec63d3675be79f</guid>
<title>本周推荐 | mysql中业务系统可借鉴的设计</title>
<link>https://toutiao.io/k/7fpbfp8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;96&quot; data-ratio=&quot;0.16666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnju9cLcib00YV66gYq2V6Fhm7YTHlzZdFwfnCtxyBCvgiaicG65n8du0mUYunHZIaBKohjsBxA4sgrPSjQ/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-type=&quot;gif&quot; data-w=&quot;636&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-mpa-template-id=&quot;502&quot; data-mpa-category=&quot;模板&quot;&gt;&lt;section data-mpa-category=&quot;模板&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;推荐语：&lt;/span&gt;&lt;span&gt;学习优秀的开源系统来优化我们业务的架构设计，这是我们作为业务开发的必修课，这篇文章从经典的mysql系统原理引申到业务系统设计思考，让人耳目一新，值得我们学习。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;——大淘宝技术工程师 &lt;/span&gt;&lt;span&gt;默达&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果一个系统能存活5年，看到里面的代码我可能觉得要重构了，看到一个系统存活了10年，那么我就万万不敢动了。mysql能够从1979的一个报表工具，2000年开源，到现在支持高并发，高可用，成为互联网的活化石“世一库”，靠的是无数开源人对技术的热爱，创始人Monty Widenius的人格魅力，以及不断进化的能力……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8379629629629629&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuib4ueH5H1apgayGwAResdib391TRCD2bRVcHhjegCI5VVD2MticfqOWicicWSonX9wTpoicPGenIt31dLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3161764705882353&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;408&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8X1wEorjS3bDLnHiar4vtV5RkRoYd65guD5FtbNgFoz71Fzyp1yc7WklYCvES93U4NELnJf4lFzgw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前在处理一些慢sql和索引失效问题的时候复习了一波mysql，加上给团队分享设计模式的时候，乱翻了好多源码和课程，越发觉得mysql写的很不错。mysql不仅仅是一个数据库，更是一个优秀的系统……我们不仅可以使用它，我们也可以借鉴它沉淀了数年的设计，技术升级我们的业务系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为很多mysql的知识点大家都清楚，所以着重讨论，略过一些基础。时间匆忙，错误望指正，补充的请留言。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3056872037914692&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8X1wEorjS3bDLnHiar4vtV5s4iaFibfqswhDiaUmcuk0ibG6v33ybaPY8N6ZVvedwxAbibQ1ib6BIlnJtRw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;WAL和二阶段提交&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;日志&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开头肯定是绕不开mysql中经常提到的WAL技术，为了避免发生数据丢失的问题，当前事务数据库系统普遍都采用了 WAL（Write Ahead Log）策略：即当事务提交时，先写redo log，再修改页（先修改缓冲池，再刷新到磁盘）；当由于发生宕机而导致数据丢失时，通过 redo log来完成数据的恢复。关键点是日志先行，再写磁盘。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么记录什么样的日志呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;引擎层会记录redolog，服务层会记录binlog。redo log是物理日志，记录的是“在XXX数据页上做了XXX修改”；binlog是逻辑日志，记录的是原始逻辑，其记录是对应的SQL语句；binlog 是追加写入的，就是说 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志；而 redo log 是循环写入的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户如果对数据库中的数据进行了修改，必须保证日志先于数据落盘。当日志落盘后，就可以给用户返回操作成功，并不需要保证当时对数据的修改也落盘。如果数据库在日志落盘前crash，那么相应的数据修改会回滚。在日志落盘后crash，会保证相应的修改不丢失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在日志先行技术之前，数据库只需要把修改的数据刷回磁盘即可，用了这项技术，除了修改的数据，还需要多写一份日志，也就是磁盘写入量反而增大，但是由于日志是顺序的且往往先存在内存里然后批量往磁盘刷新，相比数据的离散写入，日志的写入开销比较小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;186&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.32148900169204736&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuib4ueH5H1apgayGwAResdib3UI06KtgUODrSUakDMNDx0ictMxfpfAeRviaDpIchLOFWO7urKplQsRCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1182&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么mysql是如何去做日志刷新和数据刷新的呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当用户线程产生日志的时候，首先缓存在一个线程私有的变量(mtr)里面，只有完成某些原子操作的时候，才把日志提交到全局的日志缓存区中。当线程的事务执行完后，把日志从缓冲区刷到磁盘。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当把日志成功拷贝到全局日志缓冲区后，会继续把当前已经被修改过的脏页加入到一个全局的脏页链表中。这个链表是order by modified time asc的且用一个字段来记录。这种机制保证从老到新刷入磁盘。这里最重要的是，脏页链表的有序性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个 InnoDB 存储引擎至少有 1 个redo log文件组，多个redo log文件。为了得到更高的可靠性，用户可以设置多个镜像日志组（mirrored log groups），将不同的文件组放在不同的磁盘上，以此提高 redo log 的高可用性。在日志组中每个 redo log file 的大小一致，并以循环写入的方式运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;write pos 和 CheckPoint 之间的就是 redo log file 上还空着的部分，可以用来记录新的操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果 write pos 追上 CheckPoint，就表示 redo log file 满了，这时候不能再执行新的更新，得停下来先覆盖一些 redo log，把CheckPoint 推进一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8238841978287093&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuib4ueH5H1apgayGwAResdib3QeMDIIFHTibPZPlUBMJSSoLQOPajtCVaTu8Z2xXUoh4MRr1RBDlwibuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1658&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;h3 data-cangjie-key=&quot;94&quot; data-cangjie-leaf-block=&quot;true&quot; data-type=&quot;heading-3&quot;&gt;&lt;span&gt;业务可以借鉴-类WAL机制实现合并处理，异步处理，异常恢复回滚等&lt;/span&gt;&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实这一块mysql有很多贴近数据层面的设计，但是把数据想象为业务，数据的记录和回滚---&amp;gt;业务操作的记录和回滚，数据的原子性---&amp;gt;业务操作的原子性，那么会有一些灵感。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实现在很多关注数据强一致性的系统，都会记录操作（记录入数据库）来达到异常恢复和回滚的效果。比如结算账单的发起收佣和分账，商品的发品上下架，交易订单的打标去标，等等，都会将业务操作记录下来，作为落库保障稳定性，同时支持错误情况下的回滚凭证。不仅如此，也可以实现异步和外部系统交互的操作。达到重试和异步的机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面是mysql更新数据操作和结算系统分账操作的对比图。mysql的“用户调用-日志记录-磁盘”就类比于系统的“操作发起者-持久化操作-下游”。都是运用了WAL机制，首先从用户调用（业务层）查询或初始化等操作，然后在内存（or业务领域层）记录即将执行的原子性的操作，之后采用不同机制（mysql使用内存刷取机制or结算&lt;span&gt;系统运用异步调用及其他机制）来执行最终操作（mysql磁盘or业务系统底层服务）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;315&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuib4ueH5H1apgayGwAResdib3m8VNlyYiaZP3jUuFsWGYur5K0TVLpC8l41ibXX89UDhcLy6HDTC8a2VA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这里第二张图把回滚机制和多次重试的机制统一放到处理机制里面，并且和各内存中操作用双箭&lt;span&gt;头表示调用和恢复回滚。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;313&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.54140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuib4ueH5H1apgayGwAResdib3gLFD3yNvJmvbeia8pcZQnibq956qhZeD5cDEQ0XebghhiclWSJJASR0Qg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;持久化的方式：最常见的，就用各种数据库把操作记录或者账单或者领域事件的状态记录下来，单条多次更新；或者比较少见使用日志文件记录下来每一次变更，就如同mysql写log一样；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;处理机制中正向处理一般是单次的同步即时调用，也可以考虑的是：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;合并处理减少调用量，在并发量较高的情况下，合并请求，或者也可以将一些更新操作合并到内存中进行调用；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;定时捞取请求异步处理削峰，这种是比较常见的不关注实时性的请求处理，在系统水位不紧张的情况下，内存中定时异步捞取持久化的请求去调用。或者是使用消息机制比如metaq，去慢慢消费处理调用；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;异常恢复：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;服务调用的原子操作包括：a，b，c。当其中c服务调用超时或者失败，那么就会依次执行回滚操作c’，b’，a’。使用wal机制将服务执行的commit和rollback之前保留重要执行信息。举个简单例子，卖场佣金代扣到旗舰店--&amp;gt;调用平台收佣--&amp;gt;销账，当销账失败无数次由于比如风控原因不能重试成功的时候，需要采用异常回滚。那么将依次采取三个服务的回归方法，进行事务回滚。将钱最终返回原来卖场，否则钱岂不就是卡在旗舰店。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;232&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.40078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuib4ueH5H1apgayGwAResdib36TTdmMZ0sae3fqWFxKlN3OmDw8Z0aJXRFqGnEJLXssTHhWQjSsGBKg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;springboot提供的拦截完全可以达到事务识别，同时各服务添加服务id，类似mysql的xid。这里可以参考一些github上的事务回滚框架。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举例，只有一个初级想法，可以讨论一下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;* 回滚的具体方法&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public @interface Transactionable {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String rollbackMethod();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;* 事务的状态&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public enum TransactionState {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    INIT(1),                                                                 &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    COMMIT(2),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ROLLBACK(3);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;* 各个服务的commit 和 rollback调用实体&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public interface Invocation {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Class&amp;lt;?&amp;gt; getTargetClassType();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    String    getMethodName();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Object[] getArgumentValues();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Class&amp;lt;?&amp;gt;[] getArgumentTypes();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Map&amp;lt;String,Object&amp;gt; getExtraAttachMap();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Object getExtraAttachInfoByKey(String key,Object defaultValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    void putExtraAttachItem(String key,Object value);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;* 分布式事务的服务的核心结构&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class aService implements Serializable{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private static final long serialVersionUID = -4512371127490746819L;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private  String xid;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private  String serviceName;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private String methodName;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;* transaction核心载体&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Transaction implements Serializable {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private static final long serialVersionUID = 6648691752838557325L;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private final TransactionGlobalId transactionGlobalId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private TransactionState transactionState;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .....&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;二阶段提交&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;redolog原是innodb引擎的东西，binlog是mysql server的东西，逻辑是独立的，可以理解为事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假如我们不使用二阶段提交。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先写 redo log 后写 binlog。假设在 redo log 写完，binlog 还没有写完的时候，MySQL 进程异常重启。redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来。但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行值与原库的值不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;先写 binlog 后写 redo log。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行无更新。但是 binlog 里面已经记录了这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 与原库的值不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.3954802259887007&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuib4ueH5H1apgayGwAResdib3QuLPfYfJ5ibcb0icibxtj5tSTPV7eKibQCOjGJl5kdmWz4KwYSs0925TBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;177&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时log会有完整格式及xid来确认完整性和关联。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实这个已经有很多分布式事务的理论都写了，通过多段式来保证数据一致性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里写一下自己业务的应用，两个例子。比如在配置结算规则，业务方会设置一个规则，并进行自己的校验，平台方也会保存规则，进行校验和打款；再比如预约单核销创建尾款单的场景，需要保障电子凭证状态和订单状态的数据一致性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中有一些是需要强一致性，有些是需要弱一致性但是需要最终一致性的。可以参考base version的上图，进行一些定制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结算规则设置就选择强一致性的二阶段请求，如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  /**&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     * 单协议插入：二阶段强一致-先落库初始化，再调用服务H，成功后再次落库生效&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     */&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private void addAgreement(SettleAgreement settleAgreement, SettleAgreementSaveReqDTO settleAgreementSaveReqDTO){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        settleAgreement.setEffectStatus(0);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        int num = agreementWriteRespository.insertAgreement(settleAgreement);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if(num != 1){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            throw new SettleBizException(CommonErrorDef.DB_HANDLE_FAIL);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        // 实际生效规则需要同步H系统&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if(settleAgreementSaveReqDTO.getStatus() == 1){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            settleAgreement = agreementReadRespository.getAgreementsByOutId(SettleAgreementReq.of(settleAgreementSaveReqDTO.getRuleRelatedId(),settleAgreementSaveReqDTO.getBizCode(), null));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            if(settleAgreement.needCallOut()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                // 同步H系统&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                syncRule(settleAgreement);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            settleAgreement.setEffectStatus(1);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            // 调用成功后生效本地规则&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            num = agreementWriteRespository.updateAgreement(settleAgreement);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            if(num != 1){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                throw new SettleBizException(CommonErrorDef.DB_HANDLE_FAIL);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实也是init本地-prepare-提交另一侧数据-commit。如果那一方的系统异常（类比于mysql的宕机）则失败，且回滚。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而选择弱一致性（最终一致）的二阶段请求则需要设计回补方案。比如预约单核销创建尾款单的场景。尾款单的订单状态需要和电子凭证的状态保持一致（电子凭证未冻结-现订单可创建，电子凭证已冻结-已有尾款单创建，电子凭证已核销-已有尾款单支付成功）。但是创单是p0场景，不能完全依赖电子凭证服务，电子凭证服务不可用或者延迟，不能影响创单，那么我们可以使用下面的方式，弱依赖+异步回补机制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;576&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.996875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuib4ueH5H1apgayGwAResdib3ZCicEbz3wksutoXhyHXkXRDUpOqpicicibPmWpdwbjhjhqIAlbgRmtvskA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3056872037914692&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8X1wEorjS3bDLnHiar4vtV5Mcf2mWYYibJt6RwM7zgbBS247KgYR9yVeZewdqR7qYwa7Rp0eCKm7JA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一些结构&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;引擎&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Mysql的引擎不是固定的，比较常用的是innodb和myisam，很多模块都是通过插件的形式的方式加载到Mysql主程序上的，这其中不仅有一些日志，状态等插件，还有数据引擎等核心的插件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Mysql中访问接口的方式主要有两类，一类是通过注册使用观察者模式来调用；另外一类就是数据库引擎通过handlerton的方式来实现。在数据存储引擎中，对表及事务的相关操作都是通过这种方式来访问相关的引擎插件的。handlerton的源码太长，复制过来很丑就略了。基本分成两大块，是一系列的相关的变量定义，比如state、type、slot等等；另外是一系列的函数指针，诸如binlog_func等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Mysql中是通过全局变量来管理这个插件的，它其实是一个插件相关的哈希数组，它可以通过plugin_find_internal来发现插件。像innobase_hton，myisam_hton之类的。像实现的时候，引擎去初始化其实就是调用相关的函数plugin_initialize来实现，调用的话就是从plugin_foreach开始的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种可拔插的，使用观察者和handlerton的形式来支持扩展的设计模式，其实中台大部分代码都是这样，就不多做引申了。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;内存的运用和一些算法&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;内存管理结构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;mysql划分架构Server 层与引擎层（innodb），使用不同的方式进行管理。其中Server 层是由 mem_root 来进行内存管理，包括Sharing与Thead memory；而引擎层则主要由 Free List，LRU List，FLU List 等多个链表来统一管理 Innodb_buffer_pool。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一张网图，侵删。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;308&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuib4ueH5H1apgayGwAResdib3LXOrfkRgVfYNqBcUU4E7onJwhWhEqZvlUXn5PGLLba0f6CstOLmwxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1350&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;业务开发的话关于mem_root了解一下即可，其实就是一个函数初始化一块较大的内存空间，向内存分配器申请内存空间，然后另一个函数在这块内存空间中分配出内存进行使用，其目的就是将多次零散的操作合并请求，以提升性能。并且不同的线程会产生不同的mem_root来管理各自的内存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在innodb内存管理中，有一些分配方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;内存分配方式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于 CPU速度与磁盘速度之间的不匹配，通常会使用缓冲池技术来提高数据库的整体性能。通过内存的速度来弥补磁盘速度较慢对数据库性能的影响。前文聊到了查询和更新页操作，就是依赖这个buffer pool：从磁盘读到的页存放在缓冲池中，下一次再读相同的页时，首先判断该页是否在缓冲池中。若在缓冲池中，称该页在缓冲池中被命中，直接读取该页。否则，读取磁盘上的页。修改操作的具体步骤就是这样的：修改在缓冲池中的页；然后再以一定的频率刷新到磁盘上。控制poos和包含配置的主结构是buf_pool_t，控制数据页的是buf_page_t。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个地方用了一个内存分配算法，在释放一个内存块的时候没有直接放回，而是先查看其伙伴是否也空闲，如果是则进行合并，再尝试对合并后的内存块进行合并。如果其伙伴是在使用的状态，这里做了一次重新分配操作，将其内容拷贝到其它空闲的内存块上，再进行对它合并。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外一个比较好聊的是LRU list的算法，即最少使用的老数据先从buffer pool驱逐，新的页数据加入到list的中间位置，这就是所谓的中点插入策略。一般情况下list 头部存放的是热数据，就是所谓的young page，list尾部存放的就是old page。这个算法就保证了最近经常使用的page信息会被保存在最近访问的sublist，相反的不被经常访问的就会保存在old sublist。一般比例是对半分或young page少点。这样既能支持热点数据的读取写入，又防止了大量数据对全表数据的影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于内存的思路没什么太多可以借鉴。主要是一些缓存的想法，包括热点商品的插入可以使用lru算法，在一些占用性能较大的服务上使用伙伴算法，等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8X1wEorjS3bDLnHiar4vtV5ud5n7myibIvZHIq1ia9W8uwXJ6Z8LkILkKw5wgGVF0sfhcMcrnZhzkaw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;动态地看待锁&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;mysql大量使用锁包括全局锁，表锁，行锁，mdl锁，间隙锁等等，来处理并发问题。作为共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在mysql锁的设计中，在不同场景下使用不同粒度的锁，且锁也是放在最合适的地方，来提升并发度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如全库逻辑备份的时候，使用全局锁；当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加 MDL 写锁；对于行的更新操作，最小粒度加行锁。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;事务顺序&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而如果事务中需要锁多个行，也会把最可能造成锁冲突，最可能影响并发度的锁尽量往后放。举个简单例子，交易发货。那么需要做：1. 更新消费者订单状态；2. 该货品量扣减；3. 插一条发货记录。为了保证交易的原子性，我们要把这三个操作放在一个事务中，很显然如果随意加锁的话，会产生大量锁冲突。比如两笔订单发货的是同一个货品，那这个货品这一行数据就会冲突。所以，如果把语句 2 安排在最后，比如按照 3-1-2 这样的顺序，那么该货品这一行的锁时间就最少，大量减少事务之间的锁等待，提升了并发度。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;锁的退化&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然集团貌似为了避免死锁用的是Read Committed，而mysql默认的是Repeatable Reads。但是Repeatable Reads下的next key lock我觉得还是需要了解一下的也挺有意思。查找过程中访问到的对象会加next key lock；索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁；索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。这种资源的降级退化思路是可以借鉴的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8X1wEorjS3bDLnHiar4vtV5eCtYVkmJr6K9ZSYaRZ6ebU19xwib5ZYLtDk1AFAsPNRAkK6J4TJjLaw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;状态机的使用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;状态流转&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;mysql中有很多的状态，包括Checking table，Closing tables，Killed，Locked，Sending data，Sleeping，Waiting for tables……等等状态，状态之间会互相流转。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如checking table状态在查询之后会进入locked，以及更新状态会进入locked，查到锁冲突时会进入waiting等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4321266968325792&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuib4ueH5H1apgayGwAResdib3YxpcM9vyiac3DoiawWXVlTtn73NwMqePY7ftzyTRp4CH51LzbFHMlJXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;884&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;能够在如此复杂的状态中进行精准流转，且代码并不臃肿。在mysql其中一个版本的分支代码中，尝试使用二维的形式来流转状态，是可以借鉴的。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般业务系统中，状态机的使用是流程调用中set不同的状态，并允许在特定状态下进行特定操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最简单的做法是分支逻辑，即if-else，将每一个状态转移，原模原样地直译成代码。这种会使得极易漏写或者错写某个状态转移，可读性和可维护性都很差。具体请参考各种老系统的状态流转。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平时常见的做法是充血模式状态机，所有的状态转移和动作执行的代码逻辑，都集中在业务的实体类中，代码分散开来，同时存在一个状态机类作为流转。其实这种方案是比较好的，但是当状态很多的时候，会引入更多状态类和操作，代码会越来越臃肿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际上，除了用状态转移图来表示之外，状态机还可以用二维映射来表示，也叫做查表法，比如说，一维表示状态，另一维表示事件，值表示当前状态经过事件之后，转移到的新状态及其执行的动作。实现更加清晰，可读性和可维护性更好。当修改状态机时，我们只需要修改二维映射即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如交易订单是有很多状态的。这里写的不一定对，举个例子而已。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;状态\操作&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;关闭订单&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;付款&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;发货&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;确认收获&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;退款&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;。。。&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;交易关闭&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;待付款&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;交易关闭&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;待发货&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;待发货&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;交易关闭&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;待确认收货&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;/&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;交易关闭&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;待确认收货&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;交易关闭&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;待确认收货&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;交易成功&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;交易关闭&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;交易成功&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;。。。&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;。。。&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public enum Event {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  closeOrder(0),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  pay(1),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  sendGoods(2),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  receiveGoods(3),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  refund(4);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  private int value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  private Event(int value) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.value = value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  public int getValue() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    return this.value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class OrderStateMachine {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  private State currentState;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  private static final State[][] transitionTable = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          {trade_close, trade_close, trade_close, trade_close, trade_close},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          {trade_close, wait_sendgoods, wait_pay, wait_pay, wait_pay},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          {trade_close, wait_sendgoods, wait_receivegoods, wait_sendgoods, trade_close},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          {trade_close, wait_receivegoods, wait_receivegoods, trade_success, trade_close},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          {trade_success, trade_success, trade_success, trade_success, trade_success}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  public OrderStateMachine() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.currentState = State.trade_init;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  public void closeOrder() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    executeEvent(Event.closeOrder);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  public void pay() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    executeEvent(Event.pay);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  public void sendGoods() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    executeEvent(Event.sendGoods);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  public void receiveGoods() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    executeEvent(Event.receiveGoods);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  public void refund() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    executeEvent(Event.refund);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  private void executeEvent(Event event) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    int stateValue = currentState.getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    int eventValue = event.getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.currentState = transitionTable[stateValue][eventValue];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  public State getCurrentState() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    return this.currentState;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这个只是简化一下。复杂做法，可以具体excute方法可以在各模块或产品包，映射模型也可以统一维护在配置文件中。只是为了将状态流转放到一处去维护。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时除了订单状态，有些操作会引发物流单，支付单等状态，可以将二维升级为三维等等。而不是把各种状态的流转放到event代码中，会很难维护。针对不同的业务身份，不同业务类型，也可以设置不同的状态流转配置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然这种方式适合event比较简单，但是状态较多的场景，比如mysql中，其实很多事件只是加个锁，发个数据，等等。像交易如果越做越重的话，还是使用状态充血模式，需要依业务来选型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8X1wEorjS3bDLnHiar4vtV5CzczGLPQOcdou3FWaqibqVYrYC7MMVyloDaAnM7sQXicrTKANsWYXwog/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如何“删库跑路”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;首先，大家应该是没有单独数据权限的，且有审批，所以删库跑路还是不要多想了！从恢复难易程度来看几个删除数据的方法。&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用 rm 命令删除整个 MySQL 实例：登上机器，查看mysql安装路径然后查找是否存在服务，之后直接kill并rm带mysql的东西即可。这种方式的恢复方法，就是即使删除一个节点的实例，集群也会推举出新的主库，然后根据集群其他节点数据恢复这个节点的数据即可。对于高可用+跨机房的集群来说，除非批量全下掉实例，不然应该是最好恢复的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;删库/删表：使用drop database直接删除数据库，drop table 或者 truncate table来删除表。此时恢复需要全量备份，并且新的操作会有实时增量binlog，使用这些binlog恢复一个临时库，然后设置主备关系即可。如果binlog也删除了直接从binlog备份系统中找到需要的 binlog，再放回备库中，这样恢复事件一般很长。dba应该有些其他科技来加速。比如使用一些并行的方式。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用delete语句删除一些数据行：除了简单delete外，搞复杂点比如delete完再insert一条不想干的，然后再update一下。其实对恢复来说复杂度差不多，使用binlog解析工具把语句反译一下，反过来执行一下放回备库重放，但是需要确保binlog_format=row 和 binlog_row_image=FULL，这个应该是默认的所以不用担心。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8X1wEorjS3bDLnHiar4vtV5ibBdQV0nVXicyxBznmwreAKcTzDlbYsiaB2vC1ygO11TMiaYgGbicqjOUDg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本短文大致介绍了一下mysql的wal机制，一些内部结构和算法，锁和状态机的视角，以及程序员经常碰到的“删除”。mysql发展这么多年了，涌现了很多专业分析和经典课程，本文主要是另辟蹊径从业务借鉴的角度来看看它的设计，给大伙儿提供一个引子，希望后续继续和评论区讨论。&lt;br/&gt;&lt;br/&gt;其实在当前技术同学视角下，最常见的两方面，一是完成一个业务研发活动，比如商品的3d详情，交易的改价分摊，双十一的秒杀；二是实现技术上的突破，比如缓存tair支持sql，mq消息队列的升级，部署安全等等。因为这些都是容易让人获得成就感的，是容易量化的。然而还有一些比如合理设计系统架构，构建开放开源文化，不同技术互相融合，是容易让人忽略的，却也是非常重要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8X1wEorjS3bDLnHiar4vtV5Pyric8r6KkETewnhiaKGFw4fw2B1GgNiaSd7W99P1Qozs8GEe3jLibxKpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;团队介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们是大淘宝技术创新业务团队，支撑淘宝，天猫核心电商以及家装新零售，优品，汽车等创新业务，服务n亿用户，赋能各行业数千万商家，并作为核心技术团队，保障双十一购物狂欢节的成功。家装新零售业务围绕卖场线和品牌线，以门店数字化交易为基础，通过营销工具，私域导购，客户留资等手段构建线上线下相结合的家装新零售解决方案，为家装新零售商家持续带来增量价值。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;¤&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 拓展阅读 &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;¤&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxNDEwNjk5OQ==&amp;amp;action=getalbum&amp;amp;album_id=2565944923443904512#wechat_redirect&quot; textvalue=&quot;3DXR技术&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;3DXR技术&lt;/a&gt; | &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxNDEwNjk5OQ==&amp;amp;action=getalbum&amp;amp;album_id=1533906991218294785#wechat_redirect&quot; textvalue=&quot;终端技术&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;终端技术&lt;/a&gt; | &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxNDEwNjk5OQ==&amp;amp;action=getalbum&amp;amp;album_id=1592015847500414978#wechat_redirect&quot; textvalue=&quot;音视频技术&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;音视频技术&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxNDEwNjk5OQ==&amp;amp;action=getalbum&amp;amp;album_id=1539610690070642689#wechat_redirect&quot; textvalue=&quot;服务端技术&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;服务端技术&lt;/a&gt;&lt;span&gt; | &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxNDEwNjk5OQ==&amp;amp;action=getalbum&amp;amp;album_id=2565883875634397185#wechat_redirect&quot; textvalue=&quot;技术质量&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;技术质量&lt;/a&gt; | &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxNDEwNjk5OQ==&amp;amp;action=getalbum&amp;amp;album_id=1522425612282494977#wechat_redirect&quot; textvalue=&quot;数据算法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数据算法&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAxNDEwNjk5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8t5nZGhAatCrc4e2iaDfAaoInribRKxc7MOqdTGygfcLqSDxhj0trCHVEh94Sjl7zuWYzwouYtJ0VQ/0?wx_fmt=png&quot; data-nickname=&quot;大淘宝技术&quot; data-alias=&quot;AlibabaMTT&quot; data-signature=&quot;大淘宝技术官方账号&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; has-insert-preloading=&quot;1&quot; data-index=&quot;0&quot; data-origin_num=&quot;570&quot; data-isban=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>42ac1318ba0bbfbfa3ebb685aab5b814</guid>
<title>这样封装列表 hooks,一天可以开发 20 个页面</title>
<link>https://toutiao.io/k/cfk4u0u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h1&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;在做移动端的需求时，我们经常会开发一些列表页，这些列表页大多数有着相似的功能：分页获取列表、上拉加载、下拉刷新···&lt;/p&gt;&lt;p&gt;今天，就由 &lt;code&gt;八宝粥&lt;/code&gt;来手把手教你复用！&lt;/p&gt;&lt;p&gt;在 &lt;code&gt;Vue&lt;/code&gt; 出来 &lt;code&gt;compositionAPI&lt;/code&gt;之前，我们想要复用这样的逻辑还是比较麻烦的，好在现在 &lt;code&gt;Vue2.7+&lt;/code&gt;都支持 &lt;code&gt;compositionAPI&lt;/code&gt;语法了，这篇文章我将 &lt;code&gt;手把手&lt;/code&gt;带你用 &lt;code&gt;compositionAPI&lt;/code&gt;封装一个名为 &lt;code&gt;useList&lt;/code&gt;的 &lt;code&gt;hooks&lt;/code&gt;来实现列表页的逻辑复用。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;基础版&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;需求分析&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;一个列表，最基本的需求应该包括: 发起请求，获取到列表的数组，然后将该数组渲染成相应的 &lt;code&gt;DOM&lt;/code&gt; 节点。要实现这个功能，我们需要以下变量：&lt;/p&gt;&lt;h3&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;有了上面的分析，我们可以很轻松地在 &lt;code&gt;setup&lt;/code&gt;中写出如下代码:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { ref } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; axios &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;axios&#x27;&lt;/span&gt; &lt;span&gt;// 简单示例，就不给出封装axios的代码了&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; list = ref([])&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; listReq = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  axios.get(&lt;span&gt;&#x27;/url/to/getList&#x27;&lt;/span&gt;).then(&lt;span&gt;(&lt;span&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    list.value = res.list&lt;br/&gt;  })&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;listReq()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，我们就完成了一个基本的列表需求的逻辑部分。大部分的列表需求都是类似的逻辑，既然如此，&lt;code&gt;Don&#x27;t Repeat Yourself!&lt;/code&gt;（不要重复写你的代码！），我们来把它封装成通用的方法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// useList.js 中&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; useList = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// 待补充的函数体&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; useList&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// useList.js 中&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { ref } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; useList = &lt;span&gt;(&lt;span&gt;listReq&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!listReq) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;请传入接口调用方法!&#x27;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; list = ref([])&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; getList = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    listReq().then(&lt;span&gt;(&lt;span&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (list.value = res.list))&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;    list,&lt;br/&gt;    getList,&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; useList&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，我们就完成了一个简单的列表&lt;code&gt;hooks&lt;/code&gt;，使用的时候直接：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// setup中&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; useList &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/utils&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; { list, getList } = useList(axios.get(&lt;span&gt;&#x27;url/to/get/list&#x27;&lt;/span&gt;))&lt;br/&gt;getList()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;等等！列表好像不涉及到 &lt;code&gt;DOM&lt;/code&gt;操作，那咱们再偷点懒，直接在 &lt;code&gt;useList&lt;/code&gt;内部就调用了吧！&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// useList.js中&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { ref } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; useList = &lt;span&gt;(&lt;span&gt;listReq&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!listReq) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;请传入接口调用方法!&#x27;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; list = ref([])&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; getList = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    listReq().then(&lt;span&gt;(&lt;span&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (list.value = res.list))&lt;br/&gt;  }&lt;br/&gt;  getList() &lt;span&gt;// 直接初始化，省去在外面初始化的步骤&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;    list,&lt;br/&gt;    getList,&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; useList&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时有老哥要说了，那我要是一个页面有多个列表怎么办？嘿嘿，别忘了，解构的时候是可以重命名的&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// setup中&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; { &lt;span&gt;list&lt;/span&gt;: goodsList, &lt;span&gt;getList&lt;/span&gt;: getGoodsList } = useList(&lt;br/&gt;  axios.get(&lt;span&gt;&#x27;/url/get/goods&#x27;&lt;/span&gt;)&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; { &lt;span&gt;list&lt;/span&gt;: recommendList, &lt;span&gt;getList&lt;/span&gt;: getRecommendList } = useList(&lt;br/&gt;  axios.get(&lt;span&gt;&#x27;/url/get/goods&#x27;&lt;/span&gt;)&lt;br/&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，我们就同时在一个页面里面，获取到了商品列表以及推荐列表所需要的变量与方法啦&lt;/p&gt;&lt;h2&gt;&lt;span&gt;带分页版&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;如果数据量比较大的话，所有的数据全部拿出来渲染显然不合理，所以我们一般要进行分页处理，我们来分析一下这个需求：&lt;/p&gt;&lt;h3&gt;&lt;span&gt;需求分析&lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;要分页，那咱们肯定要告诉后端当前请求的是第几页、每页多少条，可能有些地方还需要展示总共有多少条，为了方便管理，咱们把这些分页数据统一放到 &lt;code&gt;pageInfo对象中&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分页了，那咱们肯定还有加载下一页的需求，需要一个 &lt;code&gt;loadmore&lt;/code&gt;函数&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分页了，那咱们肯定还会有刷新的需求，需要一个 &lt;code&gt;initList&lt;/code&gt;函数&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;需求分析好了，代码实现起来就简单了，废话少说，上代码！&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// useList.js中&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { ref } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; useList = &lt;span&gt;(&lt;span&gt;listReq&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!listReq) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;请传入接口调用方法!&#x27;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; list = ref([])&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 新增pageInfo对象保存分页数据&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; pageInfo = ref({&lt;br/&gt;    &lt;span&gt;pageNum&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;pageSize&lt;/span&gt;: &lt;span&gt;10&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;total&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;  })&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; getList = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// 分页数据作为参数传递给接口调用函数即可&lt;/span&gt;&lt;br/&gt;    listReq(pageInfo.value).then(&lt;span&gt;(&lt;span&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      list.value = res.list&lt;br/&gt;      &lt;span&gt;// 更新总数量&lt;/span&gt;&lt;br/&gt;      pageInfo.value.total = res.total&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 新增加载下一页的函数&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; loadmore = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// 下一页，那咱们把当前页自增一下就行了&lt;/span&gt;&lt;br/&gt;    pageInfo.value.pageNum += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    getList()&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 新增初始化&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; initList = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// 初始化一般是要把所有的查询条件都初始化，这里只有分页，咱就回到第一页就行&lt;/span&gt;&lt;br/&gt;    pageInfo.value.pageNum += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    getList()&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  getList()&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;    list,&lt;br/&gt;    getList,&lt;br/&gt;    loadmore,&lt;br/&gt;    initList,&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; useList&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完工！跑起来试试，Perfec……等等，好像不太对…&lt;/p&gt;&lt;p&gt;加载更多，应该是把两次请求的数据合并到一起渲染出来才对，这怎么直接替换掉了？&lt;/p&gt;&lt;p&gt;回头看看代码，原来是咱们漏了拼接的逻辑，补上，补上&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// useList.js中&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...省略其余代码&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; getList = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// 分页数据作为参数传递给接口调用函数即可&lt;/span&gt;&lt;br/&gt;  listReq(pageInfo.value).then(&lt;span&gt;(&lt;span&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// 当前页不为1则是加载更多，需要拼接数据&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (pageInfo.value.pageNum === &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;      list.value = res.list&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      list.value = [...list.value, ...res.list]&lt;br/&gt;    }&lt;br/&gt;    pageInfo.value.total = res.total&lt;br/&gt;  })&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// ...省略其余代码&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;带 hooks 版&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;上面的分页版，我们给出了 &lt;code&gt;加载更多&lt;/code&gt;和 &lt;code&gt;初始化列表&lt;/code&gt;功能，但是还是要手动调用。仔细想想，咱们刷新列表，一般都是在页面顶部下拉的时候刷新的；而加载更多，一般都是在滚动到底部的时候加载的。既然都是一样的触发时机，那咱们继续封装吧！&lt;/p&gt;&lt;h3&gt;&lt;span&gt;需求分析&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;钩子函数(hooks)接受一个回调函数作为参数，咱们直接把上面的函数传入即可&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// useList中&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { onPullDownRefresh, onReachBottom } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@dcloudio/uni-app&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...省略其余代码&lt;/span&gt;&lt;br/&gt;onPullDownRefresh(initList)&lt;br/&gt;onReachBottom(loadmore)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...省略其余代码&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;带参数版&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;其实在实际开发中，我们在发起请求时可能还需要其他的参数，上面我们都是固定的只有分页的参数，可以稍加改造&lt;/p&gt;&lt;h3&gt;&lt;span&gt;需求分析&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;可能大家第一反应是多一个参数，或者用 展开运算符 (…)再定义一个形参就行了。这么做肯定是没问题的，不过在这里的话不够优雅~&lt;/p&gt;&lt;p&gt;我们这里是要增加一个传给后端的参数，一般都是一起以 JSON 对象的形式传过去，既然如此，那咱们把所有的参数都用一个对象接受，发起请求的时候和分页参数对象合并为一个对象，代码的可读性会更高，使用者在使用时也可以自由地定义 &lt;code&gt;key-value&lt;/code&gt; 键值对&lt;/p&gt;&lt;h3&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// useList中&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; useList = &lt;span&gt;(&lt;span&gt;listReq, data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// ...省略其余代码&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 判断第二个参数是否是对象，以免后面使用展开运算符时报错&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (data &amp;amp;&amp;amp; &lt;span&gt;Object&lt;/span&gt;.prototype.toString.call(data) !== &lt;span&gt;&#x27;[object Object]&#x27;&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&#x27;额外参数请使用对象传入&#x27;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; getList = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; params = {&lt;br/&gt;      ...pageInfo.value,&lt;br/&gt;      ...data,&lt;br/&gt;    }&lt;br/&gt;    listReq(params).then(&lt;span&gt;(&lt;span&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;// ...省略其余代码&lt;/span&gt;&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;// ...省略其余代码&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ...省略其余代码&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样一来,咱们就实现了一个满足大部分移动端列表页的逻辑复用 hooks&lt;/p&gt;&lt;p&gt;web 端的几乎只有加载更多(翻页)的时候逻辑不太一样,不需要拼接数据，在封装的时候可以把分页器的处理逻辑一起封装进来&lt;/p&gt;&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在这篇文章中，咱们从需求分析开始，到代码关键逻辑分析，再到实现后的 bug 修复，再到功能扩展，基本完整地复现了编码的思考过程，希望能给大家带来一些收获~&lt;/p&gt;&lt;p&gt;同时，欢迎大家在评论区和谐讨论~&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4311386558e9a69746c5cc4682c5d90f</guid>
<title>哈工大博士的PyTorch笔记火了！</title>
<link>https://toutiao.io/k/qfcak9l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Pytorch是目前常用的深度学习框架之一&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，它凭借着对初学者的友好性、灵活性，发展迅猛，&lt;/span&gt;&lt;span&gt;它深受学生党的喜爱，我本人也是使用的Pytorch框架。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比起 TF 的框架环境配置不兼容，和 Keras 由于高度封装造成的不灵活，PyTorch 无论是在学术圈还是工业界，都相当占优势。&lt;/span&gt;&lt;span&gt;不夸张地说，&lt;/span&gt;&lt;strong&gt;掌握了 PyTorch ，就相当于走上了深度学习、机器学习的快车道&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一名&lt;/span&gt;&lt;span&gt;AI博主&lt;/span&gt;&lt;span&gt;，收到小伙伴们最多的的问题之一就是&lt;/span&gt;&lt;strong&gt;「有没有关于Pytorch函数使用的学习资料？」&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;所以，我们小白学视觉团队花费了几个月，整理了这一份目前最全的Pytorch常用函数手册，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;内含超200个常用&lt;/span&gt;&lt;span&gt;函数，是居家旅行、深度学&lt;/span&gt;&lt;span&gt;习、发表论文必备工具。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/4AqSEnNUer9gGpq3VYnj2hxgklQVnoM1oeialXVwVn5dFM6pGvq4H3tR5e6LN1z9bLJDSAjS7nnQlWwNmXuUicfg/640?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1080&quot; data-cropy1=&quot;213.76936316695353&quot; data-cropy2=&quot;1526.1273666092943&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jupejmznDCibWP2gWdUovwibfrYviaKiaRcYyZ9pCImNAJEvHgjQTOz3bh9OdZFl2OibMLKPDZX80kOibh79knvu5Jibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本手册中分为14章，从最基础的创建张量开始，逐步加深，&lt;/span&gt;&lt;strong&gt;涵盖小伙伴们将会所有常用的函数。&lt;/strong&gt;&lt;span&gt;为了方便小伙伴们的查阅，我们特意推出了带有书签版的PDF供大家下载。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;如何获取&lt;/strong&gt;&lt;strong&gt;？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关注下方公众号&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzU1OTYzNjg5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/6X3LyGPcFXEiagMkpfSPm3VqWZQf1Mlr8QnIjCVpHEl5vahbTrhENLmE5Ooy4QrSa9HqbWuTM2vhHI2WF2n1C2w/0?wx_fmt=png&quot; data-nickname=&quot;深度学习爱好者&quot; data-alias=&quot;&quot; data-signature=&quot;分享机器学习、深度学习和Python等知识与原理，每天分享深度学习与计算机视觉领域的经典和最新的论文总结，带读者一起跟踪前言科技！&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后台回复“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;pytorch函数手册&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;“，即可获取pdf电子版资源。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;主要内容&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2866666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDCibWP2gWdUovwibfrYviaKiaRcYibkVq6ibWXCJKf5nJOHXowzXJsiazNrFVm6O1njnupr1QOUqN2qAkHg7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;手册中部分内容展示：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2531645569620253&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDCibWP2gWdUovwibfrYviaKiaRcY55b6rJpqc5SXQEfPAJ3BOngP4mWDy5HxYicsOTPGibM4V9CL2pc6sGIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;869&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDCibWP2gWdUovwibfrYviaKiaRcYORzYCIGmwxaW4ZyRfgsjolPXYVmibiaK3RLvOb0oWHkFAL7plGTIYicoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9810344827586207&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jupejmznDCibWP2gWdUovwibfrYviaKiaRcYKCEgclTvcic8iaianfKXhSeAgWLDlzrWRNHuJf1L4OlFpVfXZU7lkHdLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1160&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;PDF中含有更多精彩内容……&lt;/span&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关注下方公众号&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzU1OTYzNjg5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/6X3LyGPcFXEiagMkpfSPm3VqWZQf1Mlr8QnIjCVpHEl5vahbTrhENLmE5Ooy4QrSa9HqbWuTM2vhHI2WF2n1C2w/0?wx_fmt=png&quot; data-nickname=&quot;深度学习爱好者&quot; data-alias=&quot;&quot; data-signature=&quot;分享机器学习、深度学习和Python等知识与原理，每天分享深度学习与计算机视觉领域的经典和最新的论文总结，带读者一起跟踪前言科技！&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后台回复“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;pytorch函数手册&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;“，即可获取pdf电子版资源。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>