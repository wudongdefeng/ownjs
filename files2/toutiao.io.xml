<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>871e78e0fa32ed98a5f8896d2beb8d85</guid>
<title>性能优化必备——火焰图</title>
<link>https://toutiao.io/k/azf7ub6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;h2&gt;引言&lt;/h2&gt;&lt;p&gt;本文主要介绍火焰图及使用技巧，学习如何使用火焰图快速定位软件的性能卡点。 结合最佳实践实战案例，帮助读者加深刻的理解火焰图构造及原理，理解 CPU 耗时，定位性能瓶颈。&lt;/p&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;h3&gt;当前现状&lt;/h3&gt;&lt;p&gt;假设没有火焰图，你是怎么调优程序代码的呢？让我们来捋一下。&lt;/p&gt;&lt;h4&gt;1. 功能开关法&lt;/h4&gt;&lt;p&gt;想当年我刚工作，还是一个技术小白时，排查问题只能靠玄学，大致能猜出问题可能是由某个功能代码导致的，此时的排查手段就是删除多余的功能代码，然后再运行查看 CPU 消耗，确定问题。（至今我工作时还会发现一些老人使用如此方法调试性能。）&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; demo&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(关闭&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// 功能1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        handle1&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(关闭&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// 功能2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        handle2&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(打开&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// 功能3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        handle3&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// 功能4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    handle4&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此法全靠“经验”和“运气”，而且改动了代码结构，假设这是一个已经通过测试的集成区代码，此时需要修改代码功能来调试程序是非常危险的一件事，当然有 Git 仓库可以“一键还原”，但是，是人操作，总归会有失手的时候，且定位效率太低&lt;/p&gt;&lt;h4&gt;2. StopWatch 埋点法&lt;/h4&gt;&lt;p&gt;当程序出现性能问题时，且不确定是哪一段代码导致耗时，可以借助方法耗时来判断，此时我们只要在调用方法前后追加执行所需耗时日志，即可判定到底是哪个方法最耗时。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; demo&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Stopwatch&lt;/span&gt;&lt;span&gt; stopwatch &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Stopwatch&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createStarted&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    handle1&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;method handle1 cost: {} ms&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;             stopwatch&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;elapsed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;TimeUnit&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MILLISECONDS&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    handle2&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;method handle2 cost: {} ms&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;             stopwatch&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;elapsed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;TimeUnit&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MILLISECONDS&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    handle3&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;method handle3 cost: {} ms&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;             stopwatch&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;elapsed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;TimeUnit&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MILLISECONDS&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    handle4&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;method handle4 cost: {} ms&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;             stopwatch&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stop&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;elapsed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;TimeUnit&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MILLISECONDS&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此法较上一个方法的优势是，不改变代码的逻辑情况下，只是增强了一些观测点位，由方法的耗时来定位性能瓶颈。但是，假设方法的处理调用栈很深，就不得不在子方法中再次埋点，此时判定流程即为：埋点 -&amp;gt; 发版 -&amp;gt; 定位 -&amp;gt; 埋点 -&amp;gt; 发版 -&amp;gt; 定位 -&amp;gt; .......且本质上也是改了代码，就有出错的可能。 心累，不高效！&lt;/p&gt;&lt;h4&gt;3. TOP 命令定位热线程&lt;/h4&gt;&lt;p&gt;一般企业的软件服务都是部署在 Linux 操作系统上，有经验的老手排查性能最方便的办法就是 top 定位。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;top &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;p pid &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.422&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ykZeZJ0Inn7klfgjUg23LVANial2W7ETibSUtibqLp9BLGcdqkPgE01qDDibYXSjAD4B8d2H5ooAQ4LVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;明显看到，pid 103 消耗了 40%的 CPU, 找到对应的 stack 线程信息如下（忽略查找办法，我假设你已经会了：））：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.498&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ykZeZJ0Inn7klfgjUg23LVAd0Clno1A5pXIzic1jfvLAdb3J7W2XAU8GZbO9f2IAnwL7x9HibibCRdjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;此时可以得出结论，当前最耗 CPU 的线程是写入磁盘文件，追查代码最终会定位到是因为在高并发场景下打了大量的 INFO 日志，导致磁盘写入成为瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结：TOP 命令对于找 CPU 性能瓶颈时很有效的，但是存在如下几个问题：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;排名最前的一定是当时最消耗 CPU 的，但不一定是程序性能的诱因。例如因某个 BUG 导致打印了大量 ERROR 日志，最终 LOG 到磁盘是最消耗 CPU 的，但罪魁祸首不是它。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;TOP 注定使你只会关注最高的，等你修复最耗 CPU 的问题后，往往还会遇到别的程序问题导致 CPU 偏高，即一次只能看到一个问题，看不到全貌。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;文本的表现力非常有限：首先你得对 Linux 及 JVM 命令非常熟悉，其次文本对两个及以上值做关联性分析时，就捉襟见肘了，此时就迫切的需要另一种分析工具——图。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;什么是火焰图&lt;/h2&gt;&lt;p&gt;火焰图（&lt;span&gt;Flame Graphs&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;），因其形似火焰而得名。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.711864406779661&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ykZeZJ0Inn7klfgjUg23LVAeEfSugA1qjt9fIdBOa0zuDM9FHIqWO1gfSVMkPnHxdlhBtPpA9yv1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1180&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如上就是一个典型的火焰图，它由各种大小/颜色的方块组成，每个方块内部还标识了文字，整个图片顶部凹凸不平，形似一簇簇“火苗”，因此得名火焰图。 火焰图是 SVG 生成，因此可以与用户互动，鼠标悬浮在某个方块时，会详细展示内部文字。点击后，即会以当前被点击方块为底向上展开。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;特征&lt;/strong&gt; 使用火焰图分析之前，我们得首先了解火焰图的基本构造&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;每一列代表一个调用栈，每一格代表一个被调用函数&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;方块上的字符标识调用方法，数字表示当前采样出现次数&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Y 轴表示调用栈深度，X 轴将多个调用栈归并，并首字母排序展示&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;X 轴宽度表示采样数据中出现频次，即宽度越大，导致性能瓶颈的原因可能就越大（&lt;strong&gt;注意：是可能，不是确定&lt;/strong&gt;）&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;颜色没什么意义，随机分配（可能创始人想让你看起来更像一个火焰。。）&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;火焰图可以做什么&lt;/h2&gt;&lt;p&gt;那此时你已经知道了火焰图，如何定位软件问题呢？我们需要一套寻找性能瓶颈的方法论。 可以明确的是 CPU 消耗高的口径&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;CPU &lt;/span&gt;&lt;span&gt;消耗高的口径&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;调用栈出现频率最高的一定是吃&lt;/span&gt;&lt;span&gt; CPU &lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;如上我们已经知道了火焰图的构造，及“物料”含义，此时我们的关注点应该在方形的宽度上，方形的宽度大小代表了该调用栈在整个抽样历史中出现的次数。次数意味着频率，即出现次数越多的即可能最消耗 CPU。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3050847457627119&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ykZeZJ0Inn7klfgjUg23LVA2MqZSgCYTZWib0VPrSkQv7UMktKA1F0YNfiaDLpXKn2yDDwD132X9y0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1180&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;但只关注最长的是没用的，如底部的 root 和中部的方块都很宽，只能说明这些方法是“入口方法”，即每次发起调用都会经过的方法。 我们更应该关注火焰山顶部的&quot;&lt;/span&gt;&lt;strong&gt;平顶山&lt;/strong&gt;&lt;span&gt;&quot;（plateaus）&lt;/span&gt;&lt;strong&gt;出现的次数多，即没有子调用&lt;/strong&gt;&lt;span&gt;，抽样出现的频率高，说明执行方法的时间较长，或者执行频率太高（如长轮询），即 CPU 大部分执行都分配给了“平顶山”，它才是性能瓶颈的根因。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;总结方法论：火焰图看“平顶山”，山顶的函数可能存在性能问题！&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;最佳实践&lt;/h2&gt;&lt;p&gt;实践是检验真理的唯一标准！下面我将以一个小的 Demo 来展示如何定位程序性能问题，加深对火焰图使用的理解。&lt;/p&gt;&lt;p&gt;Demo 程序如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Demo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt; args&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;InterruptedException&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;ExecutorService&lt;/span&gt;&lt;span&gt; executorService &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;newFixedThreadPool&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            executorService&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Demo&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;handle1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            executorService&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Demo&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;handle2&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            executorService&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Demo&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;handle3&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            executorService&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Demo&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;handle4&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; handle4&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; handle2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; handle3&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; handle1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;代码很简单，当然现实中也不会这么写，主要是配合演出。。 主要是开了一个线程池，且分别执行四个 task，不同的 task 耗时不一致，此时我们的性能瓶颈在 handle4 这个任务上，在知道结论的前提下，我们比较看火焰图得出答案的是否符合预期！&lt;/p&gt;&lt;h3&gt;1. JVM 堆栈信息拉取&lt;/h3&gt;&lt;p&gt;当前我是在自己的 Mac 上运行的程序，idea 执行这一段程序非常便捷，那如何获取当前运行 main 函数的 PID？ 此时需要用到 TOP 命令，上面是个 while 死循环，很明显吃 CPU 最厉害，只要找到归属 Java 线程的最高一个 PID 即为所求。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28183118741058655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ykZeZJ0Inn7klfgjUg23LVAS8ticZUPQzKHn7Ss0PXjy5Xo9SJdebkQpKgaDZ66yDLnkvrbTqntcMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2796&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;很明显得到 COMMAND = java 最高的 PID = 20552 此时执行如下命令获取堆栈信息，并写入 tmp.txt 文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;jstack &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;l &lt;/span&gt;&lt;span&gt;20552&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; tmp&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;txt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;2. 生成火焰图&lt;/h3&gt;&lt;p&gt;生成火焰图的工具有很多，我一般会借助 &lt;span&gt;FastThread&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;，在线分析堆栈，非常方便，同时支持生成火焰图，方便我们定位问题&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5191104933981932&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ykZeZJ0Inn7klfgjUg23LVAus22bt8YfJiaaLNA4tnoSN9SkXGfiaY400eYFmQ5dfgkCWz1shKHib01g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2878&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;打开官网首页，选择刚刚 dump 的堆栈文件，点击 Analyze，此时只需要等待网站分析好后（正常 3~5 s），即可查看火焰图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;fastThread 网站分析报告非常丰富，一般的问题我们直接通过它给出的结论基本能定位到问题了，本文暂且无需关注，感兴趣的话，后续我会分享，直接拉到 Flame Graph 子标题处&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3858603066439523&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ykZeZJ0Inn7klfgjUg23LVAPEdNrRibV8ZKic45HEG8SyMfAygfKaicdmHrOewmFLxrG134v4JHfu2AA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2348&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;此时明显能看出 4 个“平顶山”，且 com.Demo.handle4 宽度最大，com.Demo.handle3 次之，符合预期！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;原理剖析&lt;/h2&gt;&lt;p&gt;基于上述小 Demo ，我们深入理解下火焰图的生成原理。&lt;/p&gt;&lt;p&gt;举个例子，便于你理解，假设我们要观测一个人在忙些什么，哪些事最占用他的时间，会怎么做？ 从时间维度的话，且不考虑成本的话，我肯定安排一个监控摄像头，全天候 24h，360 度监控他，然后再安排人员，逐帧排查，并汇总他所做的事，得出：睡觉 8h，工作 8h，玩手机 4h，吃饭 2h，其它 2h。从而得出结论：睡觉占用他时间最多。&lt;/p&gt;&lt;p&gt;由上可以总结一套分析流程：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;记录（监控）-&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;分析&amp;amp;归并（逐帧排查）&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Top&lt;/span&gt;&lt;span&gt; N &lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;得出结论&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;带着流程去看我们应该如何排查 CPU 在执行中，哪些事（进程/线程）最占用它的时间呢？ 简单粗暴的方法是每时每刻都记录执行的方法堆栈，再汇总归并，得出最耗时的方法栈在哪。此法的问题在于&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;数据量大&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;时间长&lt;/span&gt;&lt;/p&gt;&lt;p&gt;其实只要采样去观测 CPU 在干什么就好了，这是一个概率学问题，如果 CPU 因为执行某个方法耗时，大概率采样下来，得到的归并结果也是最多的，虽然有误差，但是多次统计下，差不了多少的。 同理，dump 下的堆栈，查看大多数线程在干什么，依据堆栈内每个方法出现的频率聚合，出现的频次最多的就是当前 CPU 分配执行最多的方法。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&quot;pool-1-thread-18&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;#28 prio=5 os_prio=31 tid=0x00007f9a8d4c0000 nid=0x8d03 sleeping[0x000000030be59000]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; TIMED_WAITING &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;sleeping&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Native&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Method&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    at com&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Demo&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;handle2&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Demo&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    at com&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Demo$$Lambda$2&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;1277181601.run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Unknown&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Source&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;util&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;concurrent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Executors$RunnableAdapter&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;call&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;511&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;util&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;concurrent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;FutureTask&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FutureTask&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;util&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;concurrent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;runWorker&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1149&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;util&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;concurrent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ThreadPoolExecutor$Worker&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;624&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;748&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Locked&lt;/span&gt;&lt;span&gt; ownable synchronizers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;0x00000006c6921ac0&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;util&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;concurrent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ThreadPoolExecutor$Worker&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;至于我们的 jstack 信息如何被处理成火焰图的格式，社区已经为常见的 dump 格式都提供了工具，&lt;span&gt;stackcollapse-jstack.pl&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt; 处理 jstack 输出。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Example&lt;/span&gt;&lt;span&gt; input&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&quot;MyProg&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;#273 daemon prio=9 os_prio=0 tid=0x00007f273c038800 nid=0xe3c runnable [0x00007f28a30f2000]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;State&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; RUNNABLE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SocketInputStream&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;socketRead0&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Native&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Method&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SocketInputStream&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;SocketInputStream&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        at java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;744&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;Example&lt;/span&gt;&lt;span&gt; output&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;MyProg&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SocketInputStream&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;net&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SocketInputStream&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;socketRead0 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;总结&amp;amp;展望&lt;/h2&gt;&lt;p&gt;火焰图的介绍到此结束，相信你又多了一种排查问题的手段！ 存在即合理，工具之开发重要性而言不必多说，我始终持包容态度面对新事物，它确确实实解决了某些痛点而脱颖而出的。 后续我会介绍更多排查问题的手段，如果你喜欢本文风格，请关注或留言，欢迎讨论！&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; Flame Graphs: &lt;em&gt;https://www.brendangregg.com/flamegraphs.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; FastThread: &lt;em&gt;https://www.fastthread.io/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; stackcollapse-jstack.pl: &lt;em&gt;https://github.com/brendangregg/FlameGraph/blob/master/stackcollapse-jstack.pl&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a19136e12605c8a1a32668fbdc3cbe78</guid>
<title>行业方案｜“医疗”行业智能运维解决方案介绍</title>
<link>https://toutiao.io/k/3ogc4zn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h1&gt;行业背景&lt;/h1&gt;

&lt;h2&gt;发展要求&lt;/h2&gt;

&lt;p&gt;近年来，在若干政策指引下，医院信息化管理系统、电子病历系统、区域医疗信息互联互通等重点工作逐步得到完善。国家卫健委开始着手细化医院的评审和评级种类，明确了验收细则和时间点，考核日趋严格。例如，卫健委要求到2022年，全国二级和三级公立医院电子病历应用水平平均级别分别达到3级和4级，智慧服务力争达到2级和3级，智慧管理争达到1级和2级，能够支撑线上线下一体化的医疗服务新模式。实现“以评带建，以评促改”。&lt;/p&gt;

&lt;p&gt;由于，“互联互通+智慧医院+精细化管理=医院各类系统的融合度、复杂度将持续加大”，评审的趋严直接给信息中心的IT运维带来巨大压力及困难。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d1fe09f7646435eb22dac17f1fa4c37%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;安全要求&lt;/h2&gt;

&lt;p&gt;2019年12月1日起，网络安全等级保护2.0相关标准正式实施，实现对新技术、新应用安全保护对象和安全保护领域的全覆盖，因为目前医院纷纷上云，虚拟化的安全防护尤为重要，因此等保2.0尤其强调网络安全防护，强化“一个中心，三重防护”的安全保护体系。&lt;/p&gt;

&lt;p&gt;等保要求的提升，给医院信息系统的安全工作迎来新挑战。因为随着信息技术的不断发展，特别是云计算、物联网等新技术的不断涌现和应用，在带给医疗行业快速、便捷的同时，也让边界防护变得模糊，黑客攻击、勒索软件、蠕虫病毒以及系统漏洞导致的数据丢失与业务停顿已成为各级医院亟待解决的难题。如何实现全方位主动防御、动态防御、整体防控和精准防护是医院的挑战，“十四五”期间，5G 等新型网络基础设施也面临着更高安全要求。&lt;/p&gt;

&lt;p&gt;因此，医院信息中心，不但要承接越来越多的系统运维压力，还要按照等保要求，提升安全防护能力，已然分身乏术。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/484a809b5d254698ba72a2c5a09481ab%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;运维现状&lt;/h2&gt;

&lt;p&gt;目前，为响应国家政策，简化看病就医流程，打通医疗大数据，加强业务应用与医院管理，医院一整套业务流程囊括了预约挂号系统、电子病历系统、检验化验系统、影像平台系统、财务信息系统等一系列相关系统，实现医院主要患诊数据的互联互通。但由于各类系统需要同时对接患者、医生、医院各科室等多个端口，作为医院运行的神经中枢。对各系统的稳定性要求极高，一旦某套系统出现故障，会整体业务流程造成影响。&lt;/p&gt;

&lt;p&gt;因此，就目前医院系统覆盖的业务量，互通紧密度，都导致信息中心有大量且琐碎的运维工作，而信息化最好的三甲医院最多也就10人左右的运维团队，80%的三甲医院只有3-5人的运维人员，二级医院只有2-3人，剩下的就更少。面对如此庞杂的系统运维工作，疲于奔命，效果还不好。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72c034b1ab8743debb7303938805fd41%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;需求描述&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;三级医院&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;集中管理需求&lt;/strong&gt;：智慧医院建设推进，大部分三甲医院已经完成HIS、LIS、PACS、EMR、体检系统、统一支付等核心业务系统的建设，且已配套一定规模的网络、服务器、动环等系统。各厂商独立监控、数据割裂，缺乏统一监管工具。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题发现需求&lt;/strong&gt;：新业务系统上线检测、现有系统问题排查都是信息中心事后发现问题，且仰赖人工摸排、摸排时间长、问题处理效率低下，运维管理工作成效不显著。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;根因定位需求&lt;/strong&gt;：少部分三甲医院已经不满足于只是发现问题，他们需要排查到问题的根源，提高问题处置的精准度，因此对异常检测、日志审计能力要求较高。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;二级医院&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;医院运维安全&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目前，由于等保2.0的要求提升，依据《全国医院信息化建设标准与规范（试行）》、《卫生行业信息安全等级保护工作的指导意见》等规定，需要医院完成网络安全体系中堡垒机和日志审计、网络管理控制系统的建设，大多数医院医疗网络目前无网络安全体系中堡垒机和日志审计、网络管理控制系统安全设备。&lt;/p&gt;

&lt;h1&gt;关键目标&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;运维安全管理&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  能够提供集账号管理、身份认证、单点登录、资源授权、访问控制和操作审计为一体的运维安全审计服务；&lt;/li&gt;
&lt;li&gt;  能够对服务器、网络设备、安全设备、数据库等资产的运维操作过程进行有效的运维操作审计，使运维审计由事件审计提升为操作内容审；&lt;/li&gt;
&lt;li&gt;  通过内控管理平台的事前预防、事中控制和事后审计来全面解决运维安全问题。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;日志审计&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  能够实时不间断地采集汇聚医院网络中不同厂商不同种类的安全设备、网络设备、主机、操作系统、生产业务系统的日志信息，协助技术人员进行安全分析及合规审计，及时、有效地发现异常安全事件及审计违规；&lt;/li&gt;
&lt;li&gt;  能够提供众多基于日志分析的强大功能，如安全日志的集中采集、分析挖掘、合规审计、实时监控及安全告警等，为安全事件的分析、溯源提供有力支撑；&lt;/li&gt;
&lt;li&gt;  能够同时满足医院实际运维分析需求及审计合规需求，是医院日常信息安全工作的重要支撑平台。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;网络管理控制&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  能够面向医院园区网络的新一代网络管理控制系统，是集管理、控制和分析功能于一体的网络自动化与智能化平台；&lt;/li&gt;
&lt;li&gt;  能够提供园区网络的全生命周期自动化、基于大数据和 AI 的故障智能闭环能力，帮助医院降低运维成本，加速医院数字化转型，让医院网络管理更自动、网络运维更智能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;痛点分析&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;定位问题难：&lt;/strong&gt; 部分医院带有华为网络监控系统（监控医院网络、交换机情况），但对物理服务器的硬件信息、操作系统、服务中间件、移动端应用和数据库等缺乏有效统一管理手段，难以主动发现问题与故障。无法满足现有IT设备的运维监控要求。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问题发现滞后：&lt;/strong&gt; 门诊楼、住院楼等用户通过专网访问各类业务系统，之间的网络链路情况、系统访问可用性、响应时间等缺乏有效手段进行实时感知，往往接收到投诉后才进行排查，耗时耗力，还效果不被认可。需要借助工具提升异常检测的准确率。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;运维负荷高：&lt;/strong&gt; 只有3-5人配置，日常运维通过人工方式进行机房巡检，通过观察设备指示灯判断故障，对服务器、网络等基础设施层以及应用业务层无巡检。疲于奔命，无法满足现有IT设备的运维监控要求&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;新系统上线：&lt;/strong&gt; 医院处于上新系统时期，可能出现比较多不确定因素。需要利用apm通过抓取服务端的数据，将异常数据作为医院验证新系统性能的指标评判，希望业务问题能够直接定位，辅助新系统调优，需要直接部署在生产环境中。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;资源管理难：&lt;/strong&gt; 医院数据中心对服务器CPU、内存等计算资源，磁盘空间、磁盘I/O等存储资源大多没有有效方法实现科学管理及规划，对系统应用节点和数据的各项性能参数配置等数据把控不足。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;告警风暴：&lt;/strong&gt; 部分医院带有动环、基础设施监控，但由于医院业务系统复杂，会产生过多告警信息，使运维人员淹没在告警风暴中无从判断原因。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;厂商监控独立：&lt;/strong&gt; 虽然有部分厂商可以提供监控工具，但各工具之间相对独立，仅能提供自有产品的状态监测。缺少对核心业务系统（如：HIS、PACS等）全链路进行监控，当业务系统发生异常时仅能从设备层和系统层分析问题，很难定位到业务或应用的问题根因。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安全评审要求不达标：&lt;/strong&gt; 由于等保2.0提高了医院的信息化安全要求标准，部分医院需要根据相应安全评审要求，利用运维监控平台进行支撑。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;网络性能不稳定：&lt;/strong&gt; 由于目前各大医院都仰赖网络，尤其上云的医院，一旦出现网络性能问题，就必然导致大面积的业务瘫痪，所以网络性能的监控及安全风险评估，都是重中之重。但由于医院运维项目普遍预算有限，NPM价格相对较高，比较难cover住成本，所以卖的不多。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a801946e30c4985a70b9d54a8c4527e%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;产品列表&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DOIM&lt;/strong&gt; &lt;strong&gt;：&lt;/strong&gt; 私有化部署，主要围绕客户HIS、LIS、PACS系统涉及到的设备层，包括数据库、操作系统、服务器硬件、存储磁盘阵列、数据库和虚拟化平台等进行统一监控。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;APM&lt;/strong&gt; &lt;strong&gt;：&lt;/strong&gt; 私有化部署，主要围绕HIS\EMR\LIS\PACS\体检系统\统一支付系统等核心后端应用进行监控检测。在测试场景中、生产环境中均有部署。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DOLA&lt;/strong&gt; &lt;strong&gt;：&lt;/strong&gt; 主要依托云智慧在智能算法、日志分析方面的能力，帮助医院在业务系统运维监控方面做好事前预防工作，减少问题发现和故障排除的时长，提升异常检测的准确率。 日志分散在各类服务器主机、容器、网络设备中，需通过CDC进行日志的采集，采集对象是IAAS层所有设备。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DOEM&lt;/strong&gt; &lt;strong&gt;：&lt;/strong&gt; 通过邮件、第三方Push等方式进行告警通知。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;整体方案&lt;/h1&gt;

&lt;p&gt;云智慧提供面向“智慧医疗”领域的一体化智慧运维实践。应用场景包含主动监控、快速排障、集中告警、价值呈现、集中管理、日志分析、主动巡检、服务管理。此外，云智慧一体化智能运维监控方案拥有全栈监控、自主可控、成熟方案、大量实践、以客户为中心、全国服务网络、算法能力领先、ITIL v4官方认证等核心优势。&lt;/p&gt;

&lt;h2&gt;整体架构设计&lt;/h2&gt;

&lt;p&gt;下图为云智慧一体化智能运维解决方案整体架构设计。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4df9a02736204effbd1bda99c57b456e%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;主要应用场景&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;全栈监控&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过 Agent、SNMP(V1、V2、V3)、WMI、SSH、Telnet、IPMI、ILO、北向接口、 串口、ODBC/JDBC、自定义 SQL、URL、WMI、Java 连接等方式对上百家厂商的服务器、 网络设备、操作系统、存储、虚拟化、中间件、数据库、Web 服务等资源的配置数据和指标数据进行统一采集。最终实现资源管理与拓扑管理。&lt;/p&gt;



&lt;p&gt;此外，全栈监控还包含实现以下监控目标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一体化监控：内置120+种开箱即用资源模型、10000+监控指标，能全面快速地对接上百家厂商的老旧设备、IT资源、动环设施、IOT设备，以此进行集中式采集监控和告警管理，同时支持对接其他系统数据。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异构云环境管理：采用云模式架构设计，利用云节点的采集处理器和代理方式，实现在多种云异构模式下，跨平台/网络/安全策略/域对主流云厂商的 IT 资源进行统一监控和集中管理，监控范围可扩展。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;国产化适配：支持主流国产化设备、操作系统、数据库、中间件的建模和指标采集监控，不限于达梦、金碟、保兰德、人大金仓、达梦、东方通、神通、麒麟、飞腾等，自研数据库不受国际环境影响。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开箱即用：拥有数百种开箱即用指标采集和CI数据采集模型，采集Sever端的搭建最快可在几分钟内完成，使用简单方便。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/979ac3bbb1a844babedaa4f28d9d3192%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;全年365天7*24小时实时展示各项资源和应用系统的整体运行情况，通过智能化运维使原来错综复杂的运维管理工作变的简单和轻松，真正实现职责分明、安全高效、稳定可靠、智能管控的目标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5eb2f3d717e542d1ba702a92f28c2274%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;集中管理&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a57dab2431804d7c93e0b3de01c8e33f%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;快速排障&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;应用拓扑自动发现：全自动发现应用所有技术栈及其关联关系，帮助用户从宏观把握一个应用及其关联应用的整体状态以及请求数、响应时间、错误等的变化趋势，快速定位各层级问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dde131b6085d4ca08ab4b19e2cbed3be%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;针对单次请求，通过基本信息和业务拓扑发现潜在问题，追踪慢元素和堆栈详情，分析错误和异常信息及堆栈，分析SQL语句、API调用与请求参数等的执行情况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe0b65153bf047c885c8f8c3fade07d0%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;日志分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;日志审计主要依托云智慧在智能算法、日志分析方面的能力，帮助医院采集、整合、分析分散在各类服务器主机、容器、网络设备中的日志，在业务系统运维监控方面做好事前预防工作，减少问题发现和故障排除的时长，提升异常检测的准确率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cf8a21ea9f34aa593c6555747dccde1%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;集中告警&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;告警管理能根据告警相关的基本规则，通告自动学习的算法能力，如：集群合并、IP合并等把同一时间与该告警相关的告警进行了聚合。此外，通过对告警的智能分析，用户可以避免无效告警、告警风暴的发生，快速对故障的排查和定位，全面提升告警管理能力。&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58f36624b13a4396b19c12143215b64e%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下图为一站式智能告警故障排查和定位的场景，通告示例图可看到是Oracle数据发生了故。云智慧根据海量的告警进行收敛识别，发现了关于Oracle表空间、进程、实例、死锁的5条告警。与此同时，根据告警相关的基本规则，通告自动学习的算法能力，如：集群合并、IP合并等把同一时间与该告警相关的告警进行了聚合。最后通过告警与指标关联，查看当前该告警的指标趋势发现可能是死锁引起的问题。&lt;/p&gt;

&lt;p&gt;通过对告警的智能分析，用户可以避免无效告警、告警风暴的发生，快速对故障的排查和定位，全面提升告警管理能力。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9dbd62d54df415d822083b1f288a2ef%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主动巡检&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为预防事故的发生，运维人员需要每天对大量设备逐一巡检。在传统运维模式下，运维人员必须依次登录设备完成巡检，不仅耗费大量的时间，而且手工操作的方式容易出错。自动巡检可以通过快速聚焦问题以此提升效率。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;医院可根据实际需要在自动化作业场景中添加相应的场景，并将操作和编排任务与运维场景关联。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内置多种常见的操作系统、数据库、中间件等巡检模版，能够满足日常巡检需求。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持灵活配置巡检指标以及阈值，高亮展示异常指标，异常情况一目了然。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持定时执行策略、巡检通知、自定义邮件模版以及邮件附件类型，保证巡检任务有计划地执行。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d971f8b8bad0426b8a6d0562a808eb0a%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;价值呈现&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基础资源监控：通过大屏展示各监测点访问医院各应用时应用端口的可用情况及端口健康情况。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络质量监控：对网络时延、丢包率等关键性能指标进行监控及大屏展示。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用性能监控：通过大屏展示各监测点访问医院各应用时应用端口的可用情况及端口健康情况。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库健康度监控：对数据库可用情况、数据容量、数据库关键性能指标进行监控及大屏展示。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/059f4c76c6744becae8fa834404bb5db%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;服务管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;云智慧是通过AXELOS（ITIL版权所有方）认证的中国首家官方授权的IT服务管理咨询合作伙伴 (ACP)。这意味着在行业内，云智慧将能为有意愿引入ITIL的企业提供更加权威的IT服务管理咨询与服务，并进一步加强该理论的本地化实践。因此，云智慧的现有产品框架也是遵循新一代ITIL理念打造的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0eb67517d914101b6977ec67ee66d73%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;智能客服：利用自然语言识别技术，帮助用户解决常见问题，快速响应用户的同时极大减少运维工程师工作量；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;坐席监控：可实时查看坐席的接待数、对话数、平均响应时间、平均对话时长、消息总数等信息和某个坐席的详情数据；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移动提单：灵活地对接企业微信、钉钉等企业 IM 以及客户自有 APP，支持用户通过移动端访问智能客服和在线服务台，支持用户自助提交工单、查询工单处理进度；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务目录：提供服务目录的统一定义和管理功能，为企业的服务提供统一的、一致准确的信息源，为其他服务管理活动提供支撑；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流程表单：提供可视化工单流程定义面板、丰富的可视化控件和功能强大的表单设计器，能够满足各种场景下的工单定制要求；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;知识库链接：平台内置大量知识条目，集中管理历史沉淀经验及常用场景知识，便于知识应用即查即用，提升问题解决效率，减少对专业人才的依赖；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工单看板：对IT服务管理中涉及到的各类工单数据进行直观监测，实时展示服务风险点、服务质量、服务效率以及服务水平，帮助管理层从全局视角对IT服务的质量进行感知与管控。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b053fde072c4b8f99671d6e1bc1cff6%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;案例分享&lt;/h1&gt;

&lt;h2&gt;某医院一体化监控项目&lt;/h2&gt;

&lt;h3&gt;项目背景&lt;/h3&gt;

&lt;p&gt;某医院在使用自动化监控系统之前，主要靠人工巡检，通常是在业务发生问题影响使用时，IT 部门才能得到通知，派相关人员解决问题。由于业务不能中断，运维人员经常夜间需要去机房解决设备问题，而其中很多问题都是重复性出现。&lt;/p&gt;

&lt;h3&gt;服务内容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;动环监控：机房烟感、温感、漏水、UPS、空调等状况；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基础监控：各系统的服务器、操作系统、网络设备、数据库、中间件等IT软硬件设备；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动处置：自动化巡检代替人工巡检，监管控一体化使运维更轻松，紧急告警自动触发预设置的程序和脚本，实现自动处理；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实时查看：APP端支持安卓和IOS系统，在手机端查看管理的业务和设备状况。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8902a79e33904e1faf8fc80f3da21a35%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;某医院智慧运维项目&lt;/h2&gt;

&lt;h3&gt;项目背景&lt;/h3&gt;

&lt;p&gt;某医院信息中心机房是SAN网络架构，以此确保医院各项业务不间断提供。但为满足海量影像数据的持续增长，保证各系统稳定有序的运行，院领导决定建立一套智慧运维体系，实现对所有院区的IT设施进行实时监控、集中管理。以此提升故障处置效率，减少宕机、系统中断发生。&lt;/p&gt;

&lt;h3&gt;服务内容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一体化监控：对该医院现有PC服务器、UNIX服务器、交换机、路由器、存储、oracle数据库、SQL SERVER数据库、中间件等所有设备和应用进行实时监控。独特的MegaSpeed海量秒级监测，将故障响应级别提升到秒级。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实时告警：对IT设备和应用进行24*7的实时监控，一旦出现运行故障或性能指标达到告警阀值，告警信息便会通过短信、邮件、声音和颜色等方式自动推送。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全景大屏：满足医院数据中心各种业务系统、网络设备等丰富监控状态可视化需求，实现全息全维态势动态呈现。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b77881b3186a484d8ce57d173b4b1262%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;FlyFish开源福利&lt;/h1&gt;

&lt;p&gt;云智慧已开源数据可视化编排平台 FlyFish 。通过配置数据模型为用户提供上百种可视化图形组件，零编码即可实现符合自己业务需求的炫酷可视化大屏。 同时，飞鱼也提供了灵活的拓展能力，支持组件开发、自定义函数与全局事件等配置， 面向复杂需求场景能够保证高效开发与交付。&lt;/p&gt;

&lt;p&gt;如果喜欢我们的项目，请不要忘记点击下方代码仓库地址，在 &lt;strong&gt;&lt;a href=&quot;https://github.com/CloudWise-OpenSource/FlyFish&quot;&gt;GitHub&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://gitee.com/CloudWise/fly-fish&quot;&gt;Gitee&lt;/a&gt;&lt;/strong&gt; 仓库上点个 Star，我们需要您的鼓励与支持。此外，即刻参与 FlyFish 项目贡献成为 FlyFish Contributor 的同时更有万元现金等你来拿。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub 地址：&lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://github.com/CloudWise-OpenSource/FlyFish&quot;&gt;https://github.com/CloudWise-OpenSource/FlyFish&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gitee 地址：&lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://gitee.com/CloudWise/fly-fish&quot;&gt;https://gitee.com/CloudWise/fly-fish&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;微信扫描识别下方二维码，备注【飞鱼】加入AIOps社区飞鱼开发者交流群，与 FlyFish 项目 PMC 面对面交流～&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57c9bb7d14444c8984b2f2cb0c8c1fbb%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3b2e5a2afaa27c62c8e7db35373a2658</guid>
<title>阿里开源，超强大的 Kubernetes 本地调试工具 Kt-Connect 使用指南</title>
<link>https://toutiao.io/k/7x0lmf5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注：背景有点啰嗦，讲讲一路走来研发本地调试的变化，嫌烦的可以直接跳过，不影响阅读。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2019年&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在的公司当时是个什么情况，只有两个Java应用，还都跑在一个Tomcat Servlet容器。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3594864479315264&quot; data-type=&quot;png&quot; data-w=&quot;701&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatoCu9yARQnqoo8VIDBIQvt412mT66e05qfK6Sth9l4aT7bTcevrxZibQX2x8pOwJD1Eum0yydOUnlQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时是如何本地调试？都是研发自己电脑装个 Mysql，装个 Tomcat，自己电脑运行调试，好处嘛就是后端研发互不干扰，想怎么改就怎么改，APP端研发就直连后端的笔记本调试。上线部署嘛就是一个研发手动编译个 Jar 包丢到云服务器上面，大体就是个草台班子，能干活，但是也就那样。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI3MTI2NzkxMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatrP1H2ykr2xId1T1xNrZaVFuqGgQ3ycnJylh6A6h0vp2yqynejepUBcBufs3NWFKxl1QPsRxJ61YQ/0?wx_fmt=png&quot; data-nickname=&quot;奇妙的Linux世界&quot; data-alias=&quot;Hi-Linux&quot; data-signature=&quot;Linux 爱好者的聚集地，各种硬核干货文章和新奇内容推荐，定期发放福利红包。快加入我们，一起愉快玩耍吧！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2020年&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到了 2020 年，公司买了一台服务器，Centos 的系统，给装上了 Mysql、Tomcat，用上了 Redis 缓存，RabbitMQ 消息队列，有了独立的测试环境，用上了 Jenkins 自动打包并部署应用，也算鸟枪换炮，起码不用自己打包了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2231638418079096&quot; data-type=&quot;png&quot; data-w=&quot;1062&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatoCu9yARQnqoo8VIDBIQvt4CuMqCAMHZW2hvu1mcibCYhN7ZJTicPXuX4eFwlkF1eGYyClibQQdqK3QA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候是如何本地调试呢？起码不用自己电脑装 Mysql 了，后面框架由 SpringMVC 和 Struts2 都改成 Spring Boot，外置的 Tomcat 也可以去掉了。后端研发本地运行 Spring Boot 时直连服务器的 Mysql 进行调试，APP 端再也不用连后端研发的笔记本了，有了相对稳定的调试环境。代价就是各个后端的数据库更新结构要保持兼容性，避免影响他人。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2021年&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着业务增长，后端框架由 Spring Boot 进化为 Spring Cloud 全家桶，应用运行环境由 Linux 直接运行改为了 Docker 镜像部署，各类中间件同样也使用了 Docker 镜像。产品线增加，单一的开发分支已经不能满足需求，为此又开辟了另外一条后端代码分支，同样的开发测试环境也多了一份。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2595952547103978&quot; data-type=&quot;png&quot; data-w=&quot;1433&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatoCu9yARQnqoo8VIDBIQvt45juOBGjm1xlowiaCLUVmtpuaFviarCVDvibiaAbXF2glhUXvVAywFkWMnA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候的本地调试，对于 APP 端来说变化不大，区别连接后端不同环境使用不同域名而已。对于后端的研发同学就不一样了，每次本地调试自己电脑要常驻一个 Eureka 和一个 Config Server，如果本地调试的微服务依赖比较多，没个大内存真是顶不住。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2022年&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务量继续增加，产品同事数量增加了，那个需求量真是堆积如山，两个分支已经不能满足要求了，又开了第三个分支，还是不够。每次增加新的分支运行环境，后端研发同学也很痛苦，一堆环境和第三方平台回调需要配置。为了能动态扩容缩容，Spring Cloud 全家桶继续演进，抛弃了 Zuul 网关和 Eureka，改为使用 Spring Cloud Kubernetes，运行环境全面向 K8S 靠拢。在此期间公司又采购了一台服务器用于开发测试，内存 CPU 磁盘满上!&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43587786259541983&quot; data-type=&quot;png&quot; data-w=&quot;1310&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatoCu9yARQnqoo8VIDBIQvt4h3kPx2LeYnU6kEOEAu2TrY8MONyDzOdpgTPu9Ny18QpOfR9rtLdT3g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入 K8S 时代，后端研发本地的电脑没办法随意连接 Linux 服务器上面的各种中间件，每个新分支环境里面的每个 POD 都是一个新的 IP，也不可能像之前那样开放指定几个中间件的端口给后端连接，那么多环境每个都做设置的话，运维同学整天不用干别的事了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也由此引出了今天要说的 kt-connect 工具，通过这个工具，后端研发本地的电脑可以代理访问到各个分支环境，也就是 K8S 里面的命名空间的所有服务，并且只需要启动需要调试的服务，大大节省了电脑 CPU 内存占用。&lt;br/&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; data-category_id_list=&quot;1|16|17|2|21|24|28|29|31|35|36|37|39|41|42|43|46|47|48|5|50|51|55|56|57|58|59|6|60|61|62|63|64|65|66|7|8&quot; data-id=&quot;1663556883679&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1663556883679&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;选型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在选择代理访问 K8S 环境以便于本地调试的工具中，网上有几种。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 端口转发&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Ingress、NodePort、LoadBalancer 之类的将流量转发到指定端口，如上文所说，会让运维同学工作量比较大，也不便于分支环境的自动创建和回收，只适合需要暴露端口数量不多的场景。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. VPN&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过在 K8S 每个命名空间里面设置一个运行有 VPN 服务的 POD，后端研发笔记本通过 VPN 客户端连接代理进入到指定命名空间，可以正常访问和解析集群内各类服务，基本能满足日常的要求，缺点是每个命名空间都常驻了一个 VPN 服务的运行资源。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. Telepresence&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在搜索的过程中发现了这个代理工具，几乎可以说 9 成的中英文技术文章都推荐使用这个工具，功能非常强大，不但提供了 VPN 所具有的代理功能，可以访问到命名空间内所有服务，还能指定各种规则拦截指定服务的流量到本地机器，相当于本地机器也能作为一个普通的 POD 提供对外服务。大体设计原理如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40821566110397944&quot; data-type=&quot;png&quot; data-w=&quot;779&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatoCu9yARQnqoo8VIDBIQvt4Rh7c4RJqA0ictxIfjcwv4ib38vicHksAEsJiaSI4eDgS2sQZXpKeKnQWqw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在研发本地电脑执行如下命令&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;telepresence helm install --kubeconfig .\kubeconfig
telepresence connect ---kubeconfig .\kubeconfig&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就会自动在 K8S 集群创建一个命名空间 ambassador，并且部署一个 traffic-manager 的 Pod，用于流量管理，而在研发笔记本本地则会启动 2 个 Daemon 服务，其中一个叫 Root Daemon，用于建立一条双向代理通道，并管理本地电脑与 K8S 集群之间的流量，另外一个 User Daemon 则是负责与 Traffic Manager 通信，设置拦截规则，如果登录后还负责与 Ambassador Cloud 进行通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过配置拦截规则，拦截的 Pod 里面会安装一个 traffic-agent，官方文档说明是类似 K8S 集群的 sidecar 模式，对注入 POD 进行流量劫持，所有流量出入通过 traffic-manager 进行重新路由。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;The Traffic Agent is a sidecar container that facilitates intercepts. When an intercept is first started, the Traffic Agent container is injected into the workload&#x27;s pod(s).&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然他的功能很强大，但是在目前 2.5 版本的使用过程中，为了使用他的拦截和 Preview Url 功能必须在他家的商业云平台 Ambassador Cloud 进行注册登陆(注：不知道为什么网上技术文章都没提到这点，测试的时候非得要登录他家云平台)，并且拦截规则的配置是通过云平台的网页进行操作的，联网的要求，包括可能存在的安全，泄露之类的隐患，我觉得是不可接受，也因此不得不放弃使用这个工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一个不得不说的缺点就是，老版本使用后可以清理掉自动创建的命名空间（namespace）和 Pod、拦截 Agent 的功能（telepresence uninstall）也没了，在 2.5 版本的命令参数里面完全消失了，这就导致每次使用后，如果想保持环境干净，还得麻烦运维同学去清理掉，非常麻烦，简直逼死洁癖患者。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. kt-connect&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所幸开源社区又找到了另外一款类似 Telepresence 的工具，名为kt-connect，使用版本为 v0.3.6（顺便说下我们使用的 K8S 版本是 1.24），并且它无需联网登陆什么账号，结束命令执行默认还会自动清理。阿里出品，不确定是不是又一个 KPI 开源项目，但是至少这一刻我对这个工具是非常满意的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;原理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同 Telepresence 类似，但不同的是，kt-connect 只会在指定连接的命名空间（namespace）里面新建一个自用的 Pod，然后部署一个 kt-connect-shadow 的镜像。相比 Telepresence，它在模式进行了细分扩展，分为四大模式：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. Connect模式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ktctl.exe connect --kubeconfig .\kubeconfig --namespace feature-N --debug&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个模式下，kt-connect 起到的是一个类似于VPN的作用，研发本地电脑可以访问到连接的命名空间(namespace)内的所有服务，但是并没有加到集群里面其他服务里面，其他服务的流量并不会转发到本地电脑。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注1：与 telepresence 类似，kt-connect 所有命令都要带上 &lt;code&gt;--kubeconfig&lt;/code&gt; ，确保有足够权限和能正确连接 K8S 集群的 API Server，很多文章都很少提到这点，假如K8S集群限制权限，或者与研发不在同一个网络，必须确保使用运维同学提供的有足够权限的授权文件 kubeconfig 来进行连接。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注2：&lt;/p&gt;&lt;p&gt;Failed to setup port forward local:28344 -&amp;gt; pod kt-connect-shadow-gseak:53 error=&quot;error upgrading connection: error sending request: Post &quot;https://10.0.8.101:8443/api/v1/namespaces/feature-N/pods/kt-connect-shadow-gseak/portforward&quot;: dial tcp 10.0.8.101:8443: connectex: A socket operation was attempted to an unreachable host.&quot;，&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; data-category_id_list=&quot;1|16|17|2|21|24|28|29|31|35|36|37|39|41|42|43|46|47|48|5|50|51|55|56|57|58|59|6|60|61|62|63|64|65|66|7|8&quot; data-id=&quot;1663556905330&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1663556905330&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果出现以上报错的话，有可能是 kt-connect 路由 BUG，可能本地电脑的路由与新加的通往 API Server 的路由有冲突，增加参数 &lt;code&gt;--excludeIps 10.0.8.101/32&lt;/code&gt; 即可，如果网段冲突比较多，可以扩大网段范围，例如&lt;code&gt;--excludeIps 10.0.8.0/24&lt;/code&gt; 参考 issue-302。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ktctl.exe connect --kubeconfig .\kubeconfig --namespace feature-N --excludeIps 10.0.8.101/32 --debug&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. Exchange模式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ktctl.exe exchange serviceA --kubeconfig .\kubeconfig --namespace feature-N --expose 12001 --debug&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个模式类似于 Telepresence 拦截模式，将指定服务的所有流量拦截下来转发到研发本地电脑的端口，使用这个模式能对环境里的访问请求直接进行调试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体原理就是将 service 里面的 Pod 替换成一个 &lt;code&gt;serviceA-kt-exchange&lt;/code&gt; 的 Pod。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注1：Exchange 模式的流量方向是单向的，并不会将本地电脑主动发起的请求代理过去，如果K8S集群跟研发本地电脑不在一个网段内，需要另外开一个命令行运行 Connect 模式，确保本地服务可以正常连接 K8S 集群的其他服务，参考issue-216。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注2：Exchange 模式是通过拦截 service 进行流量转发，假如集群的请求没有经过 service，例如直接解析到 Pod 类，可能就会出现拦截失败的情况（同理 Mesh 模式也是如此），所以出现问题记得跟运维同学确认K8S集群内的路由情况。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. Mesh模式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;kctl.exe mesh serviceA --kubeconfig .\kubeconfig --namespace feature-N --expose 12001 --debug&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行命令后可以看到输出日志里面包含类似文字：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;2:30PM INF Now you can access your service by header &lt;span&gt;&#x27;VERSION: xxxxx&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个模式本地电脑的服务和 K8S 集群里面相同的服务同时对外响应请求，但是只有通过指定的 http 请求头 VERSION: xxxx 的请求才会转发到本地电脑，相比 Exchange 模式，保证了其他人服务正常使用，同时研发又能进行本地调试。每次生成的请求头 VERSION 的值都是动态生成的，如果要固定这个值，可以通过参数 &lt;code&gt;--versionMark&lt;/code&gt; 写死，例如固定值为 test-version，命令如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;kctl.exe mesh serviceA --kubeconfig .\kubeconfig --namespace feature-N --expose 12001 --debug --versionMark &lt;span&gt;test&lt;/span&gt;-version&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体原理就是将 serviceA 里面的 Pod 替换成一个 serviceA-kt-router 的路由镜像，负责根据请求头进行流量代理转发，另外生成一个 serviceA-kt-stuntman 服务，这个就是线上正常运行的 serviceA，还有一个serviceA-kt-mesh-xxxxx 服务，这个就负责将代理流量到本地电脑。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. Preview模式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;kctl.exe preview serviceB --kubeconfig .\kubeconfig --namespace feature-N --expose 12001&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同于 Exchange 和 Mesh 模式要求 K8S 集群有一个在运行的服务，Preview 模式可以将本地电脑运行的程序部署到 K8S 集群中作为一个全新的 Service 对外提供服务，非常便于新建服务的开发调试、预览等作用。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文转载自：「 博客园 」，原文：https://url.hi-linux.com/9JmW5，版权归原作者所有。欢迎投稿，投稿邮箱: editor@hi-linux.com。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>48ebc88acb336eb21db8fcc1c456784f</guid>
<title>爬虫与反爬虫技术简介</title>
<link>https://toutiao.io/k/3nzj08n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vivo 互联网安全团队- Xie Peng&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;互联网的大数据时代的来临，网络爬虫也成了互联网中一个重要行业，它是一种自动获取网页数据信息的爬虫程序，是网站搜索引擎的重要组成部分。通过爬虫，可以获取自己想要的相关数据信息，让爬虫协助自己的工作，进而降低成本，提高业务成功率和提高业务效率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文一方面从爬虫与反反爬的角度来说明如何高效的对网络上的公开数据进行爬取，另一方面也会介绍反爬虫的技术手段，为防止外部爬虫大批量的采集数据的过程对服务器造成超负载方面提供些许建议。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;爬虫指的是按照一定规则自动抓取万维网信息的程序，本次主要会从爬虫的技术原理与实现，反爬虫与反反爬虫两个方面进行简单的介绍，介绍的案例均只是用于安全研究和学习，并不会进行大量爬虫或者应用于商业。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、爬虫的技术原理与实现&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.1 爬虫的定义&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;爬虫分为通用爬虫和聚焦爬虫两大类，前者的目标是在保持一定内容质量的情况下爬取尽可能多的站点，比如百度这样的搜索引擎就是这种类型的爬虫，如图1是通用搜索引擎的基础架构：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;首先在互联网中选出一部分网页，以这些网页的链接地址作为种子URL；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将这些种子URL放入待抓取的URL队列中，爬虫从待抓取的URL队列依次读取；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将URL通过DNS解析，把链接地址转换为网站服务器对应的IP地址；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;网页下载器通过网站服务器对网页进行下载，下载的网页为网页文档形式；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对网页文档中的URL进行抽取，并过滤掉已经抓取的URL；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对未进行抓取的URL继续循环抓取，直至待抓取URL队列为空。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7494356659142212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPJXTqoRSsWhjVC4CaXzm7dibCAGnnUBRO3FsW9GqOVlzicf00sibyTeW3Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;886&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1.通用搜索引擎的基础架构&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;爬虫通常从一个或多个 URL 开始，在爬取的过程中不断将新的并且符合要求的 URL 放入待爬队列，直到满足程序的停止条件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而我们日常见到的爬虫基本为后者，目标是在爬取少量站点的情况下尽可能保持精准的内容质量。典型的比如图2抢票软件所示，就是利用爬虫来登录售票网络并爬取信息，从而辅助商业。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7542372881355932&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPYwx9EfTxhbFSH4za0ficMsh41XPZxqnf6sgO4QBSuTzvOX7Aic2w1pkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;354&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图2.抢票软件&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;了解了爬虫的定义后，那么应该如何编写爬虫程序来爬取我们想要的数据呢。我们可以先了解下目前常用的爬虫框架，因为它可以将一些常见爬虫功能的实现代码写好，然后留下一些接口，在做不同的爬虫项目时，我们只需要根据实际情况，手写少量需要变动的代码部分，并按照需要调用这些接口，即可以实现一个爬虫项目。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.2 爬虫框架介绍&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;常用的搜索引擎爬虫框架如图3所示，首先Nutch是专门为搜索引擎设计的爬虫，不适合用于精确爬虫。Pyspider和Scrapy都是python语言编写的爬虫框架，都支持分布式爬虫。另外Pyspider由于其可视化的操作界面，相比Scrapy全命令行的操作对用户更加友好，但是功能不如Scrapy强大。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.42324755989352264&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPia0RApGqu6IOA3qjVD9vlR2Xfu1MIoUZW9gGycAc4bqqPs8cZMVNiceQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1127&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图3.爬虫框架对比&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.3 爬虫的简单示例&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt; 除了使用爬虫框架来进行爬虫，也可以从头开始来编写爬虫程序，步骤如图4所示：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.39564867042707497&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZP2eC412Dyne3LicqVudMQCxbmbEicd8icxpiatU1RemAEkvsdYUaW2R8jcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1241&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图4.爬虫的基本原理&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;接下来通过一个简单的例子来实际演示上述的步骤，我们要爬取的是某应用市场的榜单，以这个作为例子，是因为这个网站没有任何的反爬虫手段，我们通过上面的步骤可以轻松爬取到内容。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4639455782312925&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPQNqQum1WMyW8u7UFZK5MSU5iblfnibuFnJqzadzyKKbS5DLWbUW2hCjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;735&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6897058823529412&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPrzfVrlLZBABGLnShXj1fvgzVAPSrjzBMNAcxwibUQctSY353q25mkmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;680&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图5.网页与其对应的源代码&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;网页与其对应的源代码如图5所示，对于网页上的数据，假定我们想要爬取排行榜上每个app的名称以及其分类。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们首先分析网页源代码，发现可以直接在网页源代码中搜索到“抖音”等app的名称，接着看到app名称、app类别等都是在一个&amp;lt;li&amp;gt;标签里，所以我们只需要请求网页地址，拿到返回的网页源代码，然后对网页源代码进行正则匹配，提取出想要的数据，保存下来即可，如图6所示。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;get_one_page&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(url)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        response = requests.get(url)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; response.status_code == &lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; response.text&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt; RequestException:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;parse_one_page&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(html)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pattern = re.compile(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&amp;lt;li&amp;gt;.*?data-src=&quot;(.*?)&quot;.*?&amp;lt;h5&amp;gt;.*?det.*?&amp;gt;(.*?)&amp;lt;/a&amp;gt;.*?p.*?&amp;lt;a.*?&amp;gt;(.*?)&amp;lt;/a&amp;gt;.*?&amp;lt;/li&amp;gt;&#x27;&lt;/span&gt;,re.S)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    items = re.findall(pattern, html)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    j = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; items[:&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;yield&lt;/span&gt; {&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;index&#x27;&lt;/span&gt;: str(j),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;name&#x27;&lt;/span&gt;: item[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;class&#x27;&lt;/span&gt;:item[&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        j = j+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;write_to_file&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(content)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;code-snippet__string&quot;&gt;r&#x27;test.txt&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;a&#x27;&lt;/span&gt;, encoding=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;utf-8&#x27;&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f.write(json.dumps(content, ensure_ascii=&lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;)+&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\n&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2779552715654952&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPhicjRupDKBC2Gq2nyRqGMhUOpBlsHqL7CXEBiaxw9ibvSonu0yyJfDaSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;626&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图6.爬虫的代码以及结果&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、反爬虫相关技术&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在了解具体的反爬虫措施之前，我们先介绍下反爬虫的定义和意义，限制爬虫程序访问服务器资源和获取数据的行为称为反爬虫。爬虫程序的访问速率和目的与正常用户的访问速率和目的是不同的，大部分爬虫会无节制地对目标应用进行爬取，这给目标应用的服务器带来巨大的压力。爬虫程序发出的网络请求被运营者称为“垃圾流量”。开发者为了保证服务器的正常运转或降低服务器的压力与运营成本，不得不使出各种各样的技术手段来限制爬虫对服务器资源的访问。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以为什么要做反爬虫，答案是显然的，爬虫流量会提升服务器的负载，过大的爬虫流量会影响到服务的正常运转，从而造成收入损失，另一方面，一些核心数据的外泄，会使数据拥有者失去竞争力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;常见的反爬虫手段，如图7所示。主要包含文本混淆、页面动态渲染、验证码校验、请求签名校验、大数据风控、js混淆和蜜罐等，其中文本混淆包含css偏移、图片伪装文本、自定义字体等，而风控策略的制定则往往是从参数校验、行为频率和模式异常等方面出发的。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3900709219858156&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPiciagxjfRhj4QAFykB3d3QJLdNacUstGme5tBVE0jQGo5f3H3SfSBLkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;987&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图7.常见的反爬虫手段&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.1 CSS偏移反爬虫&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在搭建网页的时候，需要用CSS来控制各类字符的位置，也正是如此，可以利用CSS来将浏览器中显示的文字，在HTML中以乱序的方式存储，从而来限制爬虫。CSS偏移反爬虫，就是一种利用CSS样式将乱序的文字排版成人类正常阅读顺序的反爬虫手段。这个概念不是很好理解，我们可以通过对比两段文字来加深对这个概念的理解：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上两段文字中浏览器显示的应该是正确的信息，如果我们按之前提到的爬虫步骤，分析网页后正则提取信息，会发现学号是错的。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;接着看图8所示的例子，如果我们想爬取该网页上的机票信息，首先需要分析网页。红框所示的价格467对应的是中国民航的从石家庄到上海的机票，但是分析网页源代码发现代码中有 3 对 b 标签，第 1 对 b 标签中包含 3 对 i 标签，i 标签中的数字都是 7，也就是说第 1 对 b 标签的显示结果应该是 777。而第 2 对 b 标签中的数字是 6，第 3 对 b 标签中的数字是 4，这样的话我们会无法直接通过正则匹配得到正确的机票价格。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZP6Cz2fib8IusmjefnRFC7enSSLYqPiaIiaedSbdB6tB56qQOib8z1bsCC6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图8.CSS 偏移反爬虫例子&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.2 图片伪装反爬虫&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;图片伪装反爬虫，它的本质就是用图片替换了原来的内容，从而让爬虫程序无法正常获取，如图9所示。这种反爬虫的原理十分简单，就是将本应是普通文本内容的部分在前端页面中用图片来进行替换，遇到这种案例可以直接用ocr识别图片中的文字就可以绕过。而且因为是用图片替换文本显示，所以图片本身会相对比较清晰，没有很多噪声干扰，ocr识别的结果会很准确。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZP2jVA89vEr7ODXH01qiaeegfJhcdsIDmtGysiaLF18lIiaotmet8v01ddw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图9. 图片伪装反爬虫例子&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.3 自定义字体反爬虫&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在 CSS3 时代，开发者可以使用@font-face为网页指定字体。开发者可将心仪的字体文件放在 Web 服务器上，并在 CSS 样式中使用它。用户使用浏览器访问 Web 应用时，对应的字体会被浏览器下载到用户的计算机上，但是我们在使用爬虫程序时，由于没有相应的字体映射关系，直接爬取就会无法得到有效数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如图10所示，该网页中每个店铺的评价数、人均、口味、环境等信息均是乱码字符，爬虫无法直接读取到内容。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.20703125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPMVKJPOibF7sZHrRaJRyhrATuNoW0mYwrPMBXKHn97gGbGHO5CianAAvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图10. 自定义字体反爬虫例子&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.4 页面动态渲染反爬虫&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;网页按渲染方式的不同，大体可以分为客户端和服务端渲染。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;客户端渲染和服务器端渲染的最重要的区别就是究竟是谁来完成html文件的完整拼接，如果是在服务器端完成的，然后返回给客户端，就是服务器端渲染，而如果是前端做了更多的工作完成了html的拼接，则就是客户端渲染。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5433476394849786&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPLmjtKMdt5zpcdS7N3Eic0fs5tmQQeCJ2m7tsOblk7ddaFDiac3Om5UHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1165&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6232876712328768&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPk0MgYFfenp4eADhqicpibyIbNNW3sNECVAtWMAm6FOOqVy34pTnicicxnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1168&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图11.客户端渲染例子&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.5 验证码反爬虫&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;几乎所有的应用程序在涉及到用户信息安全的操作时，都会弹出验证码让用户进行识别，以确保该操作为人类行为，而不是大规模运行的机器。那为什么会出现验证码呢？在大多数情形下是因为网站的访问频率过高或者行为异常，或者是为了直接限制某些自动化行为。归类如下：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;很多情况下，比如登录和注册，这些验证码几乎是必现的，它的目的就是为了限制恶意注册、恶意爆破等行为，这也算反爬的一种手段。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一些网站遇到访问频率过高的行为的时候，可能会直接弹出一个登录窗口，要求我们登录才能继续访问，此时的验证码就直接和登录表单绑定在一起了，这就算检测到异常之后利用强制登录的方式进行反爬。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一些较为常规的网站如果遇到访问频率稍高的情形的时候，会主动弹出一个验证码让用户识别并提交，验证当前访问网站的是不是真实的人，用来限制一些机器的行为，实现反爬虫。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;常见的验证码形式包括图形验证码、行为验证码、短信、扫码验证码等，如图12所示。对于能否成功通过验证码，除了能够准确的根据验证码的要求完成相应的点击、选择、输入等，通过验证码风控也至关重要；比如对于滑块验证码，验证码风控可能会针对滑动轨迹进行检测，如果检测出轨迹非人为，就会判定为高风险，导致无法成功通过。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6248275862068966&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZP8MR7KwkhLpKHEsqSbA9ianA7ZK5SRUT7oRqlsjIiaoEsuGoSPZn0dkJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;725&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图12.验证码反爬虫手段&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.6 请求签名校验反爬虫&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;签名验证是防止服务器被恶意链接和篡改数据的有效方式之一，也是目前后端API最常用的防护方式之一。签名是一个根据数据源进行计算或者加密的过程，用户经过签名后会一个具有一致性和唯一性的字符串，它就是你访问服务器的身份象征。由它的一致性和唯一性这两种特性，从而可以有效的避免服务器端，将伪造的数据或被篡改的数据当初正常数据处理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;前面在2.4节提到的网站是通过客户端渲染网页，数据则是通过ajax请求拿到的，这种在一定程度上提升了爬虫的难度。接下来分析ajax请求，如图13所示，会发现其ajax请求是带有请求签名的，analysis就是加密后的参数，而如果想要破解请求接口，就需要破解该参数的加密方法，这无疑进一步提升了难度。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.19773095623987033&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPzZFs5hCrKK0tzibgXfEqOFscWONlicWHgarClaKEibqsWLalwYJbRDJNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2691823899371069&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPCCWiaEpWaq6FKKmeKU6LQBfgTSGeicgbOsQm8AsuibO5h7Cnc76PmNnibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;795&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图13. 请求榜单数据的ajax请求&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.7 蜜罐反爬虫&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;蜜罐反爬虫，是一种在网页中隐藏用于检测爬虫程序的链接的手段，被隐藏的链接不会显示在页面中，正常用户无法访问，但爬虫程序有可能将该链接放入待爬队列，并向该链接发起请求，开发者可以利用这个特点区分正常用户和爬虫程序。如图14所示，查看网页源码，页面只有6个商品，col-md-3的 &amp;lt;div&amp;gt;标签却有 8 对。该 CSS 样式的作用是隐藏标签，所以我们在页面只看到 6 件商品，爬虫程序会提取到 8 件商品的 URL。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4356984478935698&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPIibTlvb2VTKibwnlB2icS8o38a3fe06wQQ9q5rDVaajY9jpqEBicU44v6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;902&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3954802259887006&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPN0dUystW1VBoqNoUAh56ktwTyAOsiafLAePibd7NyA4Qyib7xzibtYmsKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;885&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图14.蜜罐反爬虫例子&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、反反爬相关技术&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;针对上一节提到的反爬虫相关技术，有以下几类反反爬技术手段：css偏移反反爬、自定义字体反反爬、页面动态渲染反反爬、验证码破解等，下面对这几类方法进行详细的介绍。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.1 CSS偏移反反爬&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.1 CSS偏移逻辑介绍&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;那么对于以上2.1css偏移反爬虫的例子，怎么才能得到正确的机票价格呢。仔细观察css样式，可以发现每个带有数字的标签都设定了样式，第 1 对 b 标签内的i 标签对的样式是相同的，都是width: 16px；另外，还注意到最外层的 span 标签对的样式为width:48px。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果按照 css样式这条线索来分析的话，第 1 对 b 标签中的 3 对 i 标签刚好占满 span 标签对的位置，其位置如图15所示。此时网页中显示的价格应该是 777，但是由于第 2 和第 3 对 b 标签中有值，所以我们还需要计算它们的位置。由于第 2 对 b 标签的位置样式是 left:-32px，所以第 2 对 b 标签中的值 6 就会覆盖原来第 1 对 b 标签中的中的第 2 个数字 7，此时页面应该显示的数字是 767。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;按此规律推算，第 3 对 b 标签的位置样式是 left:-48px，这个标签的值会覆盖第 1 对 b 标签中的第 1 个数字 7，最后显示的票价就是 467。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.22635658914728682&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPFmgaLl2fFfx4oianxanFvia8LDSJfXkI1e0u08antTl9icbRY5QqeO6eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;645&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图15.偏移逻辑&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.2 CSS偏移反反爬代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;因此接下来我们按以上css样式的规律来编写代码对该网页爬取获取正确的机票价格，代码和结果如图16所示。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;__main__&#x27;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    url = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;http://www.porters.vip/confusion/flight.html&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    resp = requests.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(url)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sel = Selector(resp.text)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    em = sel.css(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;em.rel&#x27;&lt;/span&gt;).extract()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        element&lt;/span&gt; = Selector(em[element])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        element_b = element.css(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;b&#x27;&lt;/span&gt;).extract()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        b1 = Selector(element_b.pop(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        base_price = b1.css(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;i::text&#x27;&lt;/span&gt;).extract()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;css偏移前的价格：&#x27;&lt;/span&gt;,base_price)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        alternate_price = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; eb &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; element_b:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            eb = Selector(eb)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            style = eb.css(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;b::attr(&quot;style&quot;)&#x27;&lt;/span&gt;).&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            position = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt;(re.findall(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;left:(.*)px&#x27;&lt;/span&gt;, style))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; = eb.css(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;b::text&#x27;&lt;/span&gt;).&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            alternate_price.append({&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;position&#x27;&lt;/span&gt;: position, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;value&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;css偏移值：&#x27;&lt;/span&gt;,alternate_price)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; al &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; alternate_price:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            position = &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;(al.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;position&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; = al.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;value&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            plus = True &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; position &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            index = &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;(position / &lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            base_price[index] = &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__title&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;css偏移后的价格：&#x27;&lt;/span&gt;,base_price&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.16759776536312848&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPna7ickhFeeRiaFJTicBtIHtiamg7QjcgvyRklZf9T2Z0rOuuYxkDgCqoIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;716&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图16. CSS 偏移反反爬代码与结果&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.2 自定义字体反反爬&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;针对于以上2.3自定义字体反爬虫的情况，解决思路就是提取出网页中自定义字体文件（一般为WOFF文件），并将映射关系包含到爬虫代码中，就可以获取到有效数据。解决的步骤如下：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;发现问题：查看网页源代码，发现关键字符被编码替代，如&amp;amp;#xefbe&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.08975834292289989&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPhymw163UUFBESWYNPfx0gy2FjH1dX1yCMTP98cUaxb1d58mVcqAiaWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;869&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;分析：检查网页，发现应用了css自定义字符集隐藏&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4059633027522936&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPniaicA0ic01k0T2BqRvw7oBzyTH6RkDPjJf5byK12tEvfyKaZcFnOoR7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;436&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5116279069767442&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPeuSqb6uqHvPswUzwicrLxILOv0x9XQ7EOmmcFa126cEicK0MrGbTDAOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;301&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;查找：查找css文件url，获取字符集对应的url，如PingFangSC-Regular-num&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;查找：查找和下载字符集url&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4138728323699422&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPQCqvgb4SoWNlRiaic9zBuZumfGIsEogxScv1xX11KgOT0VdibJNlAm2Ng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;865&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;比对：比对字符集中的字符与网页源代码中的编码，发现编码的后四位与字符对应，也即网页源代码对应的口味是8.9分&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6520376175548589&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZP9YHic8wqzCianpzRqlgxcDUNXvP3YQdvL9iaicfYibn3jL2dyhqaw2GnVicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;319&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.3 页面动态渲染反反爬&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;客户端渲染的反爬虫，页面代码在浏览器源代码中看不到，需要执行渲染并进一步获取渲染后结果。针对这种反爬虫，有以下几种方式破解：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;在浏览器中，通过开发者工具直接查看ajax具体的请求方式、参数等内容；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过selenium模拟真人操作浏览器，获取渲染后的结果，之后的操作步骤和服务端渲染的流程一样；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果渲染的数据隐藏在html结果的JS变量中，可以直接正则提取；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果有通过JS生成的加密参数，可以找出加密部分的代码，然后使用pyexecJS来模拟执行JS，返回执行结果。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;3.4 验证码破解&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;下面举例一个识别滑块验证码的例子，如图17所示，是使用目标检测模型来识别某滑块验证码缺口位置的结果示例，这种破解滑块验证码的方式对应的是模拟真人的方式。不采用接口破解的原因一方面是破解加密算法有难度，另一方面也是加密算法可能每天都会变，这样破解的时间成本也比较大。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5241116751269036&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPmKCyFTGJ6YlSLhic7BeXjqzeDQ1NFVVKWTiaVpGI2QLatVAaBcTzicrrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;788&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图17. 通过目标检测模型识别滑块验证码的缺口&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.4.1 爬取滑块验证码图片&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;因为使用的目标检测模型yolov5是有监督学习，所以需要爬取滑块验证码的图片并进行打标，进而输入到模型中训练。通过模拟真人的方式在某场景爬取部分验证码。&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5423728813559322&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPAhBC8rczS6KLOBAmsDrPPia4JfCdOibJfRggoiblmXjFSIibXQ7RaVlIjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;944&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图18. 爬取的滑块验证码图片&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.4.2 人工打标&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;本次使用的是labelImg来对图片人工打标签的，人工打标耗时较长，100张图片一般耗时40分钟左右。自动打标代码写起来比较复杂，主要是需要分别提取出验证码的所有背景图片和缺口图片，然后随机生成缺口位置，作为标签，同时将缺口放到对应的缺口位置，生成图片，作为输入。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6320293398533008&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZP37o9qBIyldibPiaIN0ibVSkkC7RBLso5iaqB86t3uNKjXIz6U1iabiaAFsdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;818&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图19. 对验证码图片打标签以及打标签后生成的xml文件&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.4.3 目标检测模型yolov5&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;直接从github下clone yolov5的官方代码，它是基于pytorch实现。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;接下来的使用步骤如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据格式转换&lt;/strong&gt;：将人工标注的图片和标签文件转换为yolov5接收的数据格式，得到1100张图片和1100个yolov5格式的标签文件；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;新建数据集&lt;/strong&gt;：新建custom.yaml文件来创建自己的数据集，包括训练集和验证集的目录、类别数目、类别名；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;训练调优&lt;/strong&gt;：修改模型配置文件和训练文件后，进行训练，并根据训练结果调优超参数。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;转换xml文件为yolov5格式的部分脚本：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; member &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; root.findall(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;object&#x27;&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           class_id = class_text.index(member[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].text)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           xmin = &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;(member[&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].text)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ymin = &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;(member[&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;].text)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           xmax = &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;(member[&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;].text)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ymax = &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;(member[&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;].text)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__meta&quot;&gt;# round(x, 6) 这里我设置了6位有效数字，可根据实际情况更改&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           center_x = round(((xmin + xmax) / &lt;span class=&quot;code-snippet__number&quot;&gt;2.0&lt;/span&gt;) * scale / &lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;(image.shape[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]), &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           center_y = round(((ymin + ymax) / &lt;span class=&quot;code-snippet__number&quot;&gt;2.0&lt;/span&gt;) * scale / &lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;(image.shape[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           box_w = round(&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;(xmax - xmin) * scale / &lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;(image.shape[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]), &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           box_h = round(&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;(ymax - ymin) * scale / &lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt;(image.shape[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(str(class_id))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27; &#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(str(center_x))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27; &#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(str(center_y))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27; &#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(str(box_w))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27; &#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(str(box_h))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           file_txt.write(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\n&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       file_txt.close()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;训练参数设置：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser = argparse.ArgumentParser()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--weights&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=str, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;yolov5s.pt&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;initial weights path&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--cfg&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=str, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;./models/yolov5s.yaml&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;model.yaml path&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--data&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=str, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;data/custom.yaml&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;data.yaml path&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--hyp&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=str, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;data/hyp.scratch.yaml&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;hyperparameters path&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--epochs&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=int, default=50)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--batch-size&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=int, default=8, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;total batch size for all GPUs&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--img-size&#x27;&lt;/span&gt;, nargs=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;+&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=int, default=[640, 640], &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;[train, test] image sizes&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--rect&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;rectangular training&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--resume&#x27;&lt;/span&gt;, nargs=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;?&#x27;&lt;/span&gt;, const=True, default=False, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;resume most recent training&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--nosave&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;only save final checkpoint&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--notest&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;only test final epoch&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--noautoanchor&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;disable autoanchor check&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--evolve&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;evolve hyperparameters&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--bucket&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=str, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;gsutil bucket&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--cache-images&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;cache images for faster training&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--image-weights&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;use weighted image selection for training&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--device&#x27;&lt;/span&gt;, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;cpu&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--multi-scale&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;vary img-size +/- 50%%&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--single-cls&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;train multi-class data as single-class&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--adam&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;use torch.optim.Adam() optimizer&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--sync-bn&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;use SyncBatchNorm, only available in DDP mode&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--local_rank&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=int, default=-1, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;DDP parameter, do not modify&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--workers&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=int, default=8, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;maximum number of dataloader workers&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--project&#x27;&lt;/span&gt;, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;runs/train&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;save to project/name&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--entity&#x27;&lt;/span&gt;, default=None, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;W&amp;amp;B entity&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--name&#x27;&lt;/span&gt;, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;save to project/name&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--exist-ok&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;existing project/name ok, do not increment&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--quad&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;quad dataloader&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--linear-lr&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;linear LR&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--label-smoothing&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;code-snippet__built_in&quot;&gt;float&lt;/span&gt;, default=0.0, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Label smoothing epsilon&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--upload_dataset&#x27;&lt;/span&gt;, action=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;store_true&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Upload dataset as W&amp;amp;B artifact table&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--bbox_interval&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=int, default=-1, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Set bounding-box image logging interval for W&amp;amp;B&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--save_period&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=int, default=-1, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Log model after every &quot;save_period&quot; epoch&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;parser.add_argument(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;--artifact_alias&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;type&lt;/span&gt;=str, default=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;latest&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;help&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;version of dataset artifact to be used&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;opt = parser.parse_args()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.4.4 目标检测模型的训练结果&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;模型基本在50次迭代的时候在precision和recall以及mAP上已经达到了瓶颈。预测结果也有如下问题：大部分能够是能够准确框出缺口，但也出现少量框错、框出两个缺口、框不出缺口的情况。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5004897159647405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZP5nHlPAzhrrWkcBXOm4r235vz0PuvqKYmzQQSPLrUYJMCicv5aaBmabQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1021&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5243055555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPmhaVry1nXGETtKoqOsLXW5rsrL3Wr484T9iaBzw2nowZibu3YiaYsKUvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图20. 上：模型的训练结果走势图；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下：模型对部分验证集的预测结果&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本次简单对爬虫以及反爬虫的技术手段进行了介绍，介绍的技术和案例均只是用于安全研究和学习，并不会进行大量爬虫或者应用于商业。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于爬虫，本着爬取网络上公开数据用于数据分析等的目的，我们应该遵守网站robots协议，本着不影响网站正常运行以及遵守法律的情况下进行数据爬取；对于反爬虫，因为只要人类能够正常访问的网页，爬虫在具备同等资源的情况下就一定可以抓取到。所以反爬虫的目的还是在于能够防止爬虫在大批量的采集网站信息的过程对服务器造成超负载，从而杜绝爬虫行为妨碍到用户的体验，来提高用户使用网站服务的满意度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;section data-recommend-type=&quot;list-normal&quot; data-recommend-tid=&quot;2&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501257_1&quot; data-recommend-article-time=&quot;1636251616&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/0?wx_fmt=jpeg&amp;amp;amp;random=0.27521905775014543&quot; data-recommend-article-title=&quot;强势开源一款小程序！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强势开源一款小程序！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-11-07&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501242_1&quot; data-recommend-article-time=&quot;1634952613&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;强力推荐一个完善的物流（WMS）管理项目（附代码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强力推荐一个完善的物流（WMS）管理项目（附代码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-23&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501238_1&quot; data-recommend-article-time=&quot;1634606700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-19&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501208_1&quot; data-recommend-article-time=&quot;1632101100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;分享一套家庭理财系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;分享一套家庭理财系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-20&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42407407407407405&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501192_1&quot; data-recommend-article-time=&quot;1630718700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个互联网企业级别的开源支付系统&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个互联网企业级别的开源支付系统&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-04&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501176_1&quot; data-recommend-article-time=&quot;1629509100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一套开源通用后台管理系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一套开源通用后台管理系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-21&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501153_1&quot; data-recommend-article-time=&quot;1627704022&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;一款神仙接私活儿软件，吊到不行！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;一款神仙接私活儿软件，吊到不行！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-31&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501139_1&quot; data-recommend-article-time=&quot;1626571500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;基于 SpringBoot 的仿豆瓣平台【源码分享】&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;基于 SpringBoot 的仿豆瓣平台【源码分享】&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42427884615384615&quot; data-type=&quot;jpeg&quot; data-w=&quot;832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501105_1&quot; data-recommend-article-time=&quot;1623979500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;干掉 Wordpress！这个开源建站神器有点吊！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;干掉 Wordpress！这个开源建站神器有点吊！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-06-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42578125&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501098_2&quot; data-recommend-article-time=&quot;1623461160&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;从朋友那里搞了 20 个实战项目，速领！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4#rd&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;从朋友那里搞了 20 个实战项目，速领！&lt;/a&gt;&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;2021-06-12&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;200&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4703703703703704&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Baq5lYpIw7X6YPYGQITyP8Zdk96ab7CX0Ind5E05VokoepTP9Adic0xRwiaQrAvfTeC7iafngRibhBShpVqibqNcCCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如有收获，点个在看，诚挚感谢&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100018364&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;19&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk54JM0xl7WLNGnqqwbcXQBWIOCMuOgPHRoOjMamXzrCqMS2xgOo5ibic9icPk7u3zsVgic3s1ZUYJ4xHXg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>03a6cb85f34b07e1510e344a677d1090</guid>
<title>重磅 | 死磕 Elasticsearch 8.X 方法论认知清单（2022年国庆更新版）</title>
<link>https://toutiao.io/k/esdjnzc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;铭毅天下Elasticsearch&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;elastic999&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;Elasticsearch技术基础、进阶、实战第一公众号！ 和你一起，死磕ELK Stack（Elasticsearch/Logstash/Kibana/Beats）!&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>