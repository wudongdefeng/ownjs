<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bbacf0d4ec4a74d4a43c8c5239ffa9f1</guid>
<title>如何有效的解决代码的圈复杂度</title>
<link>https://toutiao.io/k/oiqvubq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：京东零售 杨学刚&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;背景介绍&lt;/h2&gt;

&lt;p&gt;不管小型公司还是大型互联网公司，很多项目债台高筑，新功能开发困难。其中一个很大的原因就是代码复杂，可读性差。Sonar开发团队曾上纲上线的戏称开发人员的7宗罪，其中很关键的一条就是“复杂度”。那复杂度有没有一个明确的衡量标准，我们又如何去解决代码的圈复杂度呢？今天我在这里和大家聊一下。&lt;/p&gt;

&lt;h2&gt;圈复杂度的计算方法&lt;/h2&gt;

&lt;p&gt;我们先来看一下圈复杂度与代码质量以及测试和维护成本之间的一个关系。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e9de90e2ba8421abccae011e42ff6f6%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到当圈复杂度，在1-10之间的时候，代码是清晰，结构化的。可测试性比较高，维护成本也比较低。随着圈复杂度的升高，代码的状况开始恶化，当大于30的时候，代码已经逐步变为不可读，维护成本非常高。&lt;/p&gt;

&lt;h3&gt;点边计算法&lt;/h3&gt;

&lt;p&gt;那圈复杂度是如何计算的呢，常用的第一种方法叫做点边计算法，它圈复杂度的计算方式 V(G) = E − N + 2，我们用下边图来解释一下这个公式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bef2b0334e564ce79ba2175aaae30978%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;其中公式之中的E指的是控制流图中边的数量，N指的是控制流图中的节点数量。这两个图形指的就是控制流图。那我们可以计算一下，第一个控制流图的圈复杂度是：4-4+2=2.&lt;/p&gt;

&lt;h3&gt;节点判定法&lt;/h3&gt;

&lt;p&gt;除此之外圈复杂度还有一种更为直观的计算方法，因为圈复杂度实际上体现了“判定条件”的数量，所以圈复杂度实际上就是等于判定节点的数量再加上1。它的计算公式为：V (G) = P + 1 其中判定节点(P)指的是我们常用的分支语句。例如if语句、while语句、case语句等。&lt;/p&gt;

&lt;p&gt;那如何来降低圈复杂度呢？&lt;/p&gt;

&lt;h2&gt;圈复杂度的常用解决方法&lt;/h2&gt;

&lt;h3&gt;提炼函数&lt;/h3&gt;

&lt;p&gt;接下来我们重点介绍一些降低圈复杂的方法，我通过工作中常见的代码，来表述一下，如何去降低复杂度，如果你有更好的方法，也欢迎留言跟我交流。在我们的工作中，做业务系统的时候，通过异步消息进行数据传递，是比较常用的一种方式，在我们监听到对端系统的消息的时候，一般会做这几件事情。判断消息是否为空--&amp;gt;转换消息为数据传输对象DTO--&amp;gt;进一步的判断对象的数据是否合法--&amp;gt;进行业务逻辑的处理。这几个典型的步骤，很多童鞋可能用左边图的方式进行处理。这个时候，如果每一个步骤的方法比较复杂的时候，这个总的方法会非常复杂，这个时候，我们可以通过提炼方法的方式，对高内聚的操作，提炼到一个独立的方法中，来分治复杂性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba74dc91ccbe426f8b656fd92ce17720%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;使用卫语句&lt;/h3&gt;

&lt;p&gt;我们知道圈复杂度的一个因素就是分支语句多，我们在写业务代码的时候，常见到这样的一种代码，if-then-else的层层嵌套。卫语句的原则是，如果某个条件极其罕见，就应该单独检查该条件，并在该条件为真时，立刻返回。下面是一个生产中的场景，如果记账请求落库成功后就进行余额的操作，如果不成功就返回失败结果。因为落库失败是不常见的，所以我们采用卫语句的方式，来减少分支语句。让代码更清晰。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3f5f735a7d24d45b3d51e6e7d047905%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;合并条件&lt;/h3&gt;

&lt;p&gt;经常遇到一种情况，我们对错误的处理，需要返回给调用方，内部的错误码，为了方便快读的定位错误会非常详细，但是对外可能会泛化这种错误码，这个时候我们可以通过合并条件的方式，简化条件分支，来降低圈复杂度。下面是一个生产中的场景，如果记账失败，则对错误结果进行包装处理，并返回给调用方。这个时候我们可以将错误码合并，这里它是合并到map中，然后针对这组错误码统一进行了处理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef681e5665f346d89594e0802ea57469%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;通过多态方式替代条件式&lt;/h3&gt;

&lt;p&gt;在我们开发中，如果是一个平台化的系统，很多时候，有这样的需求。例如：不同的租户、不同的业务甚至不同的订单类型都会有不同的处理流程。 这个时候最简单的方式，就是通过条件分支来进行不同的处理。但是当业务繁多的时候，处理分支会显得混乱，从而导致圈复杂度的升高，这个时候我们通过利用多态的方式，可以有效的降低复杂度。我们看一下下边这段代码，不同的订单类型，使用不同的处理流程，这里他使用了在枚举中实现多态的方式。我们发现，其实他是实现了工厂模式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/def840e08bf64652a8f569d9ecdd933f%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;替换算法&lt;/h3&gt;

&lt;p&gt;复杂算法会导致bug可能性的增加及可理解性/可维护性的降低，如果函数对性能要求不高，提倡使用简单明了的算法。这里我引用了重构中的一个例子，我们可以一起看一下。这里传入一个人名的数组，如果数组中包含指定的名称，就立即返回名称。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bf861cf5f424b08b7fbb47619d0e75f%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;分解条件式&lt;/h3&gt;

&lt;p&gt;在面对大块头的代码时，你可以通过提炼方法的方式，将它分解为多个方法。根据每个小块代码的用途，命名新的方法名。对于条件逻辑，将每个分支条件分解成新方法可以突出条件逻辑，并更清楚的表达每个分支的作用。比如下面的例子中，夏季的时候商品的折扣和非夏天的商品折扣，是不同的计算方法。 这个时候，我们可以把两种算法，提炼到两个不同的方法中.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f0f94763b444dbf8accbdc2d6f96b64%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;移除控制标记&lt;/h3&gt;

&lt;p&gt;有时候我们会通过控制标记来对循环进行处理，我们看一下这样的一段经常使用的代码，同一个数组列表中查找罪恶的人，匹配到任意一个罪恶的人后返回。这里found是控制标记，我们可通过下边的方式去掉控制标记，来减少一层循环，达到削减复杂度的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ab85809f51044909b9754c52c21e257%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;圈复杂度的思辨&lt;/h2&gt;

&lt;p&gt;那是不是当我们检测到圈复杂度高的时候他就一定复杂呢，下面的代码是一个生产上的例子，他通过传入的MQ的名字，对MQ进行手动的暂停。这个地方实际上是可以通过mq的名称，从spring的容器中，获取bean的。这里的例子主要是让大家看到，虽然，这个分支比较多，但是这种扁平化的结构可读性还是可以的。不过如果它做的不仅仅是一个暂停的操作，而是一个很复杂的操作，这个时候，可能就需要通过提炼方法的方式进行重构。如果提炼方法重构后，这个类还是过长，那就需要我们通过使用多态的特性，利用工厂模式等方式进行进一步的重构。如果一开始我们就通过应用一些复杂的设计模式进行重构，就会存在过度设计的弊端，使代码更不易于理解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87febcc4e61d40c3833a6227269e6c1a%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;首先介绍了什么是圈复杂度，然后介绍了解决圈复杂度的几种方法。&lt;/p&gt;

&lt;p&gt;通过圈复杂度计算的两种方式我们可以看到，圈复杂度的核心是分支语句。那解决问题的核心就集中在如何去减少分支语句。&lt;/p&gt;

&lt;p&gt;不过最后我们也看到了，实际上，只是刻板的使用圈复杂度的算法，去度量一个段代码的清晰度，有时候也是不可取的，所以我们在重构系统的时候，可以通过圈复杂度的工具，进行复杂度的统计，然后对复杂度高的代码，具体场景，具体分析。而不能一味的教条。&lt;/p&gt;

&lt;p&gt;最后我们通过思维导图来梳理一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d88ecd5cd0df4a97b1ecd261ada7e26f%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>22f98b13a72023d14a777aa76d81d514</guid>
<title>HTTPS 终于搞懂了</title>
<link>https://toutiao.io/k/wyraf2l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;blockquote cid=&quot;n3&quot; mdtype=&quot;blockquote&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p cid=&quot;n4&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;本文详细介绍了 HTTPS 相较于 HTTP 更安全的原因，包括对称加密、非对称加密、完整性摘要、数字证书以及 SSL/TLS 握手等内容，图文并茂、理论与实战结合、建议收藏！&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;1. 不安全的 HTTP&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p cid=&quot;n6&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;近些年来，越来越多的网站使用 HTTPS 协议进行数据传输，原因在于 HTTPS 相较于 HTTP 能够提供更加安全的服务。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n7&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;很多浏览器对于使用 HTTP 协议的网站会加上『警告』的标志表示数据传输不安全，而对于使用 HTTPS 协议的网站会加上一把『锁』标志表示数据传输安全。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;230&quot; data-backw=&quot;487&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4722792607802875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADz25KBSmAchTqG6EvvKSNCwE9lwHIzQsAdzZyBI9u4rCWwbeibhqGzMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;487&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n9&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为什么 HTTP 协议不安全呢？&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;主要表现在以下三个方面：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n10&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n12&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;容易被窃听&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;：HTTP 传输的数据是&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;明文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。黑客很容易通过嗅探技术截获报文，由于数据没有加密，内容可以被黑客所理解。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n13&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;举个例子：如果用户输入密码取款，那么黑客窃听了此密码后，就可以为所欲为了！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n15&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;容易被篡改&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;：黑客可以在截获 HTTP 报文后，对报文进行修改，然后再发送到目的地。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n16&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;举个例子：如果用户想要转账给家人，而黑客将收款人修改成了自己，将会造成用户出现损失！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n18&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;容易被伪造身份&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;：黑客可以伪造 HTTP 报文，假装自己是用户真正想要访问的网站，然后与用户进行通信。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n19&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;举个例子：如果用户想要访问淘宝网站进行购物，而黑客冒充自己是淘宝网站，用户就可能在此假淘宝网站上买东西，造成损失！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n20&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;HTTPS 是如何解决以上安全性问题的呢？&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;主要方法如下所示：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n21&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n23&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;数据加密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;：HTTPS 传输的不再是&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;明文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，而是采用&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密算法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;传输&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;密文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，黑客即使截获了报文，也无法理解内容！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n25&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;完整性摘要&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;：HTTPS 通过&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;摘要算法&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;得到报文的一个摘要，如果黑客篡改了报文内容，那么重新生成的摘要将发生变化，接收方校验后就知道数据不再完整，被篡改了！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n27&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;数字证书&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;：HTTPS 通过&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;数字证书&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;来验证通信实体的身份，而黑客因为没有相应的证书，一旦冒充其他网站将会被识破！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;2. 加密算法&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;blockquote cid=&quot;n29&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n30&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密算法用于解决 HTTP 传输数据容易被窃听的问题。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n31&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;为了防止传输数据被黑客所窃听，客户端与服务器之间需要对数据进行&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;加解密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;处理。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n32&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;发送方使用&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密算法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;将&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;明文&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密为&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;密文&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，而接收方使用相应的&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;解密算法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;将&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;密文&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;解密为&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;明文&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。黑客只能看到&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;密文&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，因而并不能获取到任何有用信息。如下图所示：&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4203703703703704&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADBmhCyGeuWcNPgicIMqRGk1QicqmFJC8La0Dbyc8ZUiafYVBBBGJNyKAZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n34&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;一般来说，加密算法分为两大类，&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;对称加密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;非对称加密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n40&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;（1）对称加密&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n41&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;对称加密算法中加密和解密的钥匙是同一把，称之为&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;密钥&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n42&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;凯撒密码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;是一种较为简单的对称加密算法，可用于对英语文本进行加解密。其主要思想是：&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;将明文中的每个字母按照字母表所在位置右移 K 位，得到密文（允许回绕）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n43&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;举个例子，设 K = 2，那么明文中的字母 &quot;a&quot; 用字母 &quot;c&quot; 代替，字母 &quot;z&quot; 用 字母 &quot;b&quot; 代替。此时 K = 2 就是对称加密算法中的密钥。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4880503144654088&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADEzRtYxZC6UGTkiaVI7kGty74cQic2miaibMfn2ibzO0Xwugxsvsx3YhDzAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;795&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n45&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这种方式的缺点在于：每个字母经过加密后只有唯一的密文表示，如果黑客收集了很多数据后进行统计分析，很可能就破解了加密手段。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n46&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;更好的方式是&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;采用多个凯撒密码 K 轮询进行加密&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，比如位置为奇数的字母采用密钥 K = 2 加密，位置为偶数的字母采用密钥 K = 3 加密。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5145180023228804&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADc51JiahosjQ0LEklmXDhbsWvjpeQrnia3kmXzJgONJXeiaXNpbJd5HFxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n48&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;然而凯撒密码只能加密英文文本，若想要加密所有字符，可以采用&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;分组加密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;的方式。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n49&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们知道任何数据在计算机中实际存储的是 0/1 比特的组合。&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;分组加密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;的主要思想是：&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;将要加密的报文处理为 K 比特的分组，每个分组通过一对一的映射表进行加密。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n50&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;举个例子，设 K = 3，映射表如下图，那么报文 &lt;/span&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;010&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;110&lt;/span&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;001&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;111 将会被加密为 &lt;/span&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;101&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;000&lt;/span&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;111&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;001。此时 K=3 以及映射表就是对称加密算法中的密钥。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4542743538767396&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADM6icz7ia5C9hkS8RXGMrsl2bh4pyoia8JVNbzDrMuCuGANh4bTTNYVRibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1006&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n52&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;与前面采用多个凯撒密码 K 作为密钥的方式一样，为了增加破解的难度，一种更好的方式是采用多个映射表，轮询对数据进行加密。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n53&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;计算机网络中常用的对称加密算法有：&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;DES、3DES、AES&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 等，都属于分组加密算法。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n54&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;（2）非对称加密&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n55&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;非对称加密算法中加密和解密的钥匙不同，分别称为&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;公钥&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;私钥&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。其特点在于：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n56&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n58&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果用公钥加密，则只能用私钥解密，此时公钥是不能解密的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n60&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果用私钥加密，则只能用公钥解密，此时私钥是不能解密的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n62&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;公钥是对外公开的，任何人都能够得到；私钥只有自己知道，不能泄露。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n63&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为什么有了对称加密后还会出现非对称加密呢？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n64&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;原因在于对称加密的前提是&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;通信双方需要商量出一个密钥&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，而商量密钥的时候传输的是明文，如果此密钥被黑客所截获，即使后面的报文进行了加密，黑客也可以通过此密钥进行解密！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6187739463601533&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7AD85Fe0ic6Bp5cZAr8UBqlCp7eDeWLmuFSAxSA0NhdPibtTxN2PRwLRKcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1044&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n66&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;非对称加密的一个特点是：&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;公钥加密，只有私钥可以解密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。那么就无需像对称加密那样提前协商好密钥。通信双方可以直接将自己的公钥发送给另一方，这个公钥即使黑客知道也无所谓，&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;当一方用此公钥加密后，即使黑客截获了报文，也无法用公钥解密，只有拥有私钥的另一方才能解密成功&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;！&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5947712418300654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADVXAia4wmtibAB5EMeUib3fk9ptjic3licOqrLnNbboMZKZrbXuibnWwqDlsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1071&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n68&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;计算机网络中常用的非对称加密算法有：&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;RSA、 ECDHE&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 等。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n69&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;相较于对称加密，非对称加密算法更加复杂难懂，数学推理较多，如果对具体算法感兴趣的，可以看一下阮一峰的两篇文章：&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;RSA 算法原理（一）&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和 &lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;RSA 算法原理（二）&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n69&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;&lt;span&gt;https://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n69&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;&lt;span&gt;&lt;span&gt;http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n70&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;（3）混合加密&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n71&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;前面提到，对称加密算法需要提前协商出密钥，而&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;协商的过程用的是明文&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;（因为还没有密钥），如果黑客截获了明文密钥，那么之后即使加密了，黑客也可以用密钥进行解密，此时就无安全性可言了！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n72&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;非对称加密算法解决了此问题，但是其存在大量的指数运算，&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密速度非常慢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;！而对称加密算法的加密速度非常快，一般是非对称加密算法的 100-10000 倍！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n73&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;那能不能将二者综合起来，使得数据传输不仅安全且高效呢？答案是肯定的！&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;HTTPS 采用混合加密方式，既采用对称加密，也采用非对称加密。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n74&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;对称加密算法的弱点在于协商密钥的过程采用明文不安全，存在密钥泄漏的可能，那么我们是不是可以不采用明文，而是采用非对称加密算法来协商此密钥，之后传输数据时再采用对称加密算法进行加密。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n75&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;也就是说，&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;用非对称加密算法传输密钥，用对称加密算法传输实际数据。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;此密钥一般称为&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;『会话密钥』&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n80&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6620370370370371&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7AD9rGLG1w8CAcNK2M8BfyL14Vn37lUO2nbIHSyibMgo0iagUdJ9SiclQIGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;3. 摘要算法&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;blockquote cid=&quot;n83&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n84&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;摘要算法用于解决 HTTP 传输数据容易被篡改的问题。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n85&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;摘要算法也称为哈希算法，其&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;输入为任意数据，输出为固定长度的字符串（称为摘要）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。主要特点如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n86&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n88&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;不可逆，即无法通过输出反推输入。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n90&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;相同的输入&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;必会&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;产生相同的输出。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n92&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;不同的输入&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;大概率&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;会产生不同的输出。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n94&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;无论输入的数据有多长，输出摘要的长度固定不变。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n95&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;举个例子：如果将数据的比特流每 8 个比特进行分组（不足的补零），然后将所有分组进行按位&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;异或运算&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，那么生成的结果就可以称为摘要，此算法就是一种简单的摘要算法。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.540495867768595&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADsPJr6dJC8lOswY9NoGDu9wZafZN2WE7PWH3cUiaaEBBtao3yrf2TJEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;605&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n97&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果两个输入数据经过摘要算法得到的输出摘要一致，则称为出现了&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;哈希碰撞&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。一个好的摘要算法出现哈希碰撞的概率非常低，而且非常难以通过输出猜测输入的内容！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n98&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;计算机网络中常用的摘要算法有：&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;MD5、SHA-1、SHA-256&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 等。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4527777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADkaZXz4qv9ScRXY6a0WbZT7qy95KdzbVRsI3ic9wS9W2BKdRiaBdVKwpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n100&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;为了防止传输数据被黑客所篡改，发送方除了发送实际数据外，还利用摘要算法得到数据的一个&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;摘要&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，并将此摘要一并发送。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n101&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;接收方收到数据后，利用同样的摘要算法再次得到数据的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;摘要&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，并将其与发送方发送的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;摘要&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;进行比对校验，如果二者不一致，则说明数据被篡改了，反之则没有。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43440233236151604&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADHwbH0JhNOypWu7AOv2xbZs0xhdZtfEQCu9cv2Bg6wdSlelia7mYULBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n103&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;小伙伴们很容易看出来上述方式存在明显缺陷，如果黑客不仅篡改了数据，而且同时篡改了摘要，接收方不就无法判断数据是否被篡改了吗？&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4351851851851852&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADqeZfWK1F8lcDgsPWfZF9yicmu3bP6odVFkJVKr7dWfsqNTDxE9sL83Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n105&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;为了防止这种情况的发生，发送方与接收方必须有一个只有二者知道的，而黑客不能知道的东西，比如对称加密的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。不过为了提升安全性，此时一般不使用会话密钥，而是使用一个新的密钥，称之为&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，这个密钥的获取同会话密钥。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n106&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;有了&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;后，&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;摘要算法的输入就不仅仅是传输数据了，而是传输数据和鉴别密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;！黑客由于不知道鉴别密钥，就无法再伪造输入&lt;span&gt;，篡改的摘要也就不正确了，&lt;/span&gt;从而保证了安全性！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n106&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42254663422546634&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADPGr1rYd6God1hAMo6B38DZcFeMVOzYMLGibQqaIh2IHz3baYS7iaicb8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1233&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n108&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;数据和鉴别密钥级联后经过摘要算法所生成的摘要有个专用名字，称为&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;报文鉴别码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，简称 &lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;MAC&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n109&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;为了进一步提升安全性，实际上客户端和服务器将使用不同的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，也就是一共需要四个密钥：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; cid=&quot;n110&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n112&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;用于从客户端发送到服务器的数据的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n114&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;用于从服务器发送到客户端的数据的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n116&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;用于从客户端发送到服务器的数据的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n118&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;用于从服务器发送到客户端的数据的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;4. 数字证书&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;blockquote cid=&quot;n120&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n121&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;数字证书用于解决 HTTP 协议中身份容易被伪造的问题。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n122&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;前面提到 HTTPS 采用非对称加密算法传输&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。一般是服务器将公钥对外公布，客户端利用此公钥加密&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，然后服务器通过私钥解密得到&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，此时双方即协商好了用于对称加密传输数据的密钥。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n123&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;但是万一服务器的公钥是被黑客伪造的呢？比如经典的『中间人攻击』问题：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; cid=&quot;n124&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n126&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端发送的请求被中间人（黑客）劫持（如使用 DNS 劫持），所有请求均发送至中间人。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n128&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;中间人&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;假装自己是正规网站（服务器）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，向客户端返回自己的公钥 2 ，并索要正规网站的公钥 1。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n130&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端使用中间人的公钥 2 加密&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥1&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，并发送至中间人。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n132&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;中间人使用自己的私钥 2 解密得到&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥1&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，同时&lt;/span&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;假装自己是客户端&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，使用正规网站的公钥 1 加密&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥2&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;（可以与会话密钥 1 相同）并发送至正规网站。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n134&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端使用&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥1&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;对数据进行加密，并发送至中间人。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n136&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;中间人使用&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥1&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;对数据进行解密，得到明文数据！（实现了窃听）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n138&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;中间人使用&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥2&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;对数据（可能是篡改的）进行加密，并发送至正规网站。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p cid=&quot;n139&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;此时，客户端与服务器的通信再无安全性可言！中间人不仅能够窃听到消息内容，还能够进行篡改！&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9105858170606372&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADN1iaB7okc1icwgg2yxvfElniat35u1HgGo7IBzgr8dEnfelXAr6BCHBDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;973&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n141&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端如何知道自己所拥有的公钥是来自于正规网站而不是中间人呢？这时候就需要&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;数字证书&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;了！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n142&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;数字证书的概念就像是我们的身份证一样，专门用于验证通信实体的身份。咱们的身份证是去派出所申请的，而数字证书则需要向&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;认证中心&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;（Certification Authority，CA）申请，而且是需要收费的！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n143&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;通过数字证书解决中间人攻击的具体过程为：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n144&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n146&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;服务器（正规网站）首先生成一对公钥和私钥，然后将域名、申请者、公钥（注意不是私钥，私钥是无论如何也不能泄露的）等信息整合在一起，生成 .csr 文件，并将此文件发给认证中心 CA。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n148&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;CA 收到申请后，会通过各种手段验证申请者的信息，如无异常，则&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;使用摘要算法得到 .csr 中明文信息的一个摘要，再用 CA 自己的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;私钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;对这个摘要进行加密，生成一串密文，密文也称为数字签名。数字证书即包含此数字签名和 .csr 中明文信息。CA 把这个证书返回给申请人。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n150&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;为了防止中间人攻击，客户端要求服务器发送其证书，并进行验证。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n152&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端在验证证书时，把证书里的签名与及明文信息分别取出来，然后会&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;用自身携带的 CA 机构的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;公钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;去解密签名，得到摘要 1，再利用摘要算法得到明文信息的摘要 2，对比摘要 1 和摘要 2，如果一样，说明证书是合法的，也就是证书里的公钥是正确的，否则说明证书不合法。    &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n152&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49703557312252966&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADLTTsMiaqIWJ8eLyfyialuILOy9gcb9raTb40hbq4m1ZAePHFVV2H4JQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1012&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n154&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;浏览器如何得到认证中心的公钥呢？万一此公钥是被伪造的呢？为了防止套娃，实际电脑&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;操作系统中会内置这些认证中心的公钥&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;！因而无需担心认证中心公钥被伪造的问题。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n155&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Chrome 浏览器一旦发现一个网站数字证书无效，就会生成如下界面进行提示，如果用户强制访问，则存在一定的风险。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5830618892508144&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADLyle0Wke0pmPq3qyXUoQZfDicgXganqLqJuicibMyAzBh6hQJLsgXs29g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;921&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;5. SSL/TLS 握手&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;根据前面所述，进行一下小结：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n159&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n161&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;HTTPS 通过混合加密算法解决 HTTP 传输数据容易被窃听的问题，此过程需要协商&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n163&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;HTTPS 通过摘要算法解决 HTTP 传输数据容易被篡改的问题，此过程需要协商&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n165&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;HTTPS 通过数字证书解决 HTTP 协议中身份容易被伪造的问题，此过程需要客户端验证服务器的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;证书&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n166&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;那么 HTTPS 具体是怎么做的呢？通信双方在什么时候协商&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;、什么时候验证&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;证书&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;合法性的呢？答案是 SSL/TLS 协议握手的时候。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n167&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;HTTPS 比 HTTP 多的那个『S』就是指 SSL/TLS 协议。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0050167224080269&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7AD2Vu8yaWePFA34iaLicpfGN829GR9YmWD6ORibPnKbOPic1oLRzEI9a53QA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;598&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n169&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在 HTTPS 协议中，当客户端与服务器通过三次握手建立 TCP 连接之后，并不会直接传输数据，而是先会经过一个 SSL/TLS 握手的过程，用于协商&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;、&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;以及验证证书等，之后就可以安全传输数据了！&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.45454545454545453&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADDzBvaicUgkjYj6oFdDucoND0tyHic2w9mmA5U2xlaaTBK6H2RCSPDBjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1078&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n171&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;下面通过 Wireshark 抓包，具体讲一下 SSL/TLS 1.2 四次握手的过程。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.31376518218623484&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADgGSoMBZNOROKkPhrib4PHQmWywAd9OhPqSFkkxBEO4WwXcPFDhBeXIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;988&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n173&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;第一次握手&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n174&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端向服务器发起加密通信请求 ，内容主要包括：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; cid=&quot;n175&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n177&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端支持的 SSL/TLS 协议版本，如 TLS 1.2 版本。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n179&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端生产的随机数 1，用于后续生成&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n181&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端支持的密码套件列表，每个密码套件包含：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot; cid=&quot;n182&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n184&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;用于传输会话密钥的非对称加密算法&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，如 ECDHE、RSA；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n186&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;用于验证数字证书的非对称加密算法&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，如 ECDHE、RSA；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n188&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;用于传输数据的对称加密算法&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，如 AES_128_GCM、AES_128_CBC；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n190&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;用于验证报文完整性的摘要算法&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，如 SHA256、SHA384；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n192&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;格式为：&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;TLS_非对称加密算法&lt;/span&gt;&lt;span md-inline=&quot;escape&quot;&gt;_&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;非对称加密算法&lt;/span&gt;&lt;span md-inline=&quot;escape&quot;&gt;_&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;对称加密算法&lt;/span&gt;&lt;span md-inline=&quot;escape&quot;&gt;_&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;摘要算法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，如果两个非对称加密算法一致，可省略不写。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p cid=&quot;n193&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42144373673036095&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADUl5ia46mZibWZvA0dicQk1rTF1OuOhyXu4nPn5xohsduMbhF0oWmdrmrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;942&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n194&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;第二次握手&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n195&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;服务器收到客户端加密通信请求后，向客户端发出响应，内容主要包括：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; cid=&quot;n196&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n198&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;确认的 SSL/ TLS 协议版本，如果双方支持的版本不同，则关闭加密通信。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n200&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;服务器生产的随机数 2，用于后续生成&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n202&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;确认的密码套件，如 TLS_RSA_WITH_AES128_CBC_SHA。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n204&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;服务器的数字证书。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p cid=&quot;n205&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.64&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADKJmicRBiafFu18X62aib9XW5CBlM7HeRaURqtO9NThsrgWQcmTCvqqSgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;975&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n206&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;第三次握手&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n207&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端收到服务器的回应之后，会验证其数字证书是否合法（验证方法在数字证书小节中有说明），如果证书合法，则进行第三次握手，内容主要包括：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; cid=&quot;n208&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n210&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端生产的另一个随机数 3（称为前主密钥，Pre-Master Secret，简写为 PMS），此随机数会被服务器&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;公钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n211&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端根据随机数 1、随机数 2 以及前主密钥计算出主密钥（Master Secret，MS），接着将主密钥切片得到两个&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和两个&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n213&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密通信算法改变通知，表示之后数据都将用&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;进行加密。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n215&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;客户端握手结束通知，表示客户端的握手阶段已经结束。客户端会生成所有握手报文数据的摘要，并用&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密后发送给服务器，用来供服务端校验。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p cid=&quot;n216&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.41759259259259257&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADGXzDPj97NvQa12zp9flKpuvsG6KbV1wNuCbZpicBUn4YLORuE9qoKvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n217&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;html_inline&quot; spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;第四次握手&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n218&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;服务器收到客户端的消息后，利用自己的&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;私钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;解密出前主密钥，并根据随机数 1、随机数 2 以及前主密钥计算出主密钥，接着将主密钥切片得到两个&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;和两个&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;鉴别密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n219&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;之后进行第四次握手，内容主要包括：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; cid=&quot;n220&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n222&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密通信算法改变通知，表示之后数据都将用&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;进行加密。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n224&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;服务器握手结束通知，表示服务器的握手阶段已经结束。服务器会生成所有握手报文数据的摘要，并用&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;会话密钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密后发送给客户端，用来供客户端校验。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p cid=&quot;n225&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2740286298568507&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADN2EPNmMZbCuiaNY1icDyd6gM3JEDqiaQz2icyRXUuJPAgZy7FT8unqEWrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;978&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n226&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;至此，整个 SSL/TLS 的握手阶段全部结束！&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n227&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;为什么第三、第四次握手要发送所有握手报文的摘要呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n228&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;主要原因是&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;防止握手信息被篡改&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。比如客户端支持的密码套件列表中，有些加密算法较弱，有些加密算法较强，而此密码套件是明文传输的，万一黑客将此密码套件列表进行了修改，只留下一些安全性较低的加密算法，那么服务器就只能从这些安全性较低的加密算法中选择，安全性大大降低。因此需要通过发送摘要的形式防止握手信息被篡改。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n229&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;underline&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;为什么不直接发送一个主密钥，而是用两个随机数加一个前主密钥重新生成一个主密钥呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n230&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;主要原因是&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;防止连接重放&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。如果没有前面两个随机数，仅仅由客户端生成一个主密钥，并通过服务器&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;公钥&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;加密发送给服务器。那么黑客在嗅探了服务器与客户端之间的所有报文后，可以再次冒充客户端向服务器发送相同的报文（虽然黑客不知道内容是什么），因为报文信息都是之前客户端和服务器验证过的，因此服务器会认为是客户端与其通信，导致又一次连接。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n231&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;假如服务器是一个购物网站，那么此连接重放会导致客户端再一次下单，造成损失。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n231&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;而如果有了前两个随机数，即使黑客冒充客户端想要连接重放，然而&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;由于随机数不同，生成的密钥则不同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，黑客重新发送的内容将失效（服务器不能理解、完整性摘要也不对）。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n232&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;最后，用一张图总结 TLS 四次握手的过程。&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8472222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yQvLaIGmABaXUjFng94PXqCuOF5tB7ADezibMGMgp4k03CXgrX2zuXLjp06c4ial3xGtsN5vyaicWWOzcKaK0QgOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg3NTY2NDMwMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/iaPU220ia3N7QfHsbKk3mGa1lsrNh9kID5jJsopIGBnric9v4xKcFOv50y6N3A3CVRteuJ9tQI0IAIh37R3dpvGog/0?wx_fmt=png&quot; data-nickname=&quot;程序员田螺&quot; data-alias=&quot;&quot; data-signature=&quot;专注分享后端面试题，包括计算机网络、MySql数据库、Redis缓存、操作系统、Java后端、大厂面试真题等领域。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>24b9b34d2da4a95bf85a8c2350e8e383</guid>
<title>深入理解 RBAC</title>
<link>https://toutiao.io/k/s2cagoe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;RBAC是一种基于角色实现访问控制的权限管理机制，通过定义角色和权限、用户和角色、角色和角色之间的关系，实现多层次、细粒度、可复用的权限管理系统。原文: &lt;span&gt;Role-based Access Control (RBAC) Model&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VTsGXh4ZY0aUNUASgn4FXSgK0QQ22eicibKTH7GsHGc1qOf42GfwLBCeskLnmVbtFib98ib6eCADL0jQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;figcaption&gt;Bernard Hermant@Unsplash&lt;/figcaption&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Avery Pennarun写的&quot;&lt;span&gt;RBAC like it was meant to be&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;非常值得一读。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在web或移动应用中，访问权限控制机制是保证&lt;span&gt;系统安全&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;的重要手段，其中最常见的就是基于角色的访问控制(RBAC, Role-based Access Control)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于角色的访问控制是传统访问控制(&lt;span&gt;自主访问&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;、&lt;span&gt;强制访问&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;)的一种有前途的替代方案。在RBAC模式下，权限与角色相关联，从而大大简化了对权限的管理。组织为了完成各种任务，从而创建了角色，用户根据职责和技能被分配到相应的角色，也可以从一个角色分配到另一个角色。新角色可以根据新需求和系统集成赋予新的权限，也可以从角色中撤回权限。可以建立角色-角色关系来包含更广泛的客观情况。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5229468599033816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VTsGXh4ZY0aUNUASgn4FXS7omSticpMBcw8vNydu0gQafbrC5YXdIibP5IbPblyITrZpoqojzRy8Qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;figcaption&gt;图片来源: https://www.dnsstuff.com/rbac-vs-abac-access-control&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;访问控制模型&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;访问控制列表(ACL, Access Control List)&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自主访问控制(DAC, Discretionary Access Control)&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;强制访问控制(MAC, Mandatory Access Control)&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于角色的访问控制(RBAC, Role-Based Access Control)&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于属性的访问控制(ABAC, Attribute-based Access Control)&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于历史的访问控制(HBAC, History-based Access Control)&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于身份的访问控制(IBAC, Identity-based Access Control)&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于组织的访问控制(OrBAC, Organization-based Access Control)&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于网格的访问控制(LBAC, Lattice-based access control)&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于上下文的访问控制(CBAC, Context-based Access Control)&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于实体关系的访问控制(ReBAC, Entity-Relationship-based Access Control)&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;扩展基于角色的访问控制(Extended Role-Based Access Control)&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;语义访问控制(SAC, Semantic Access Control)&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;什么是RBAC?&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4746376811594203&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VTsGXh4ZY0aUNUASgn4FXSpB0OMaO9ZSPiaKyMUREC1pfOeHbblib4n8VG3AabFovdAg6NqCTRGFsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;figcaption&gt;图片来源: https://www.quora.com/What-does-the-role-based-access-control-model-mean-in-workforce-management&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过分配一组与角色关联的权限来提供高级访问&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持公认的安全原则: 最小特权原则、责任分离原则和数据抽象原则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;最小权限原则(The principle of least privilege)&lt;/strong&gt; — 限制与角色关联的权限的数量和大小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;职责分离原则(The principle of separation of responsibilities)&lt;/strong&gt; — 在完成重要任务的过程中，分配一个以上相互约束的角色&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据抽象原则(The principle of data abstraction)&lt;/strong&gt; — 对不同用户的操作提供不同权限的清晰分离&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不同类型用户可以根据其工作职能和职责获得不同类型的访问权限来履行其职责&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;低级操作人员(例如运维人员)只能查看本部门记录，高级操作人员(例如经理)可以查看和编辑本部门记录&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概念&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;角色(Roles)&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;由许多标准定义，包括权限、职责、成本中心以及业务操作流程。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无法通过身份确定角色，权限与角色绑定。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;角色是围绕访问管理组织的，无论是什么样的活动、身份、职能等，角色可能都不变。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;权限(Permissions)&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;权限是一组资源的集合，用户需要批准权限才能使用一组资源对受保护对象执行操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;操作功能模块(添加、删除、更新、编辑、查看、上传)，进入菜单，一键进入页面&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在某些系统设计中，功能操作可以被视为文件、类别、菜单、页面元素、模块、数据、字段等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;User -&amp;gt; Role -&amp;gt; Permissions -&amp;gt; resources&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RBAC模型&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NIST RBAC96模型是由&lt;span&gt;美国国家标准与技术研究院&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;开发的标准化RBAC定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4个基本概念模型:&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9732142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VTsGXh4ZY0aUNUASgn4FXSibsP2R4TDIbvibKWMbwCjBMsicaqLZLoO0vMGl72EZOocNVYU3W0ZezicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;448&quot;/&gt;&lt;figcaption&gt;图片来源: https://transang.me/pattern-oriented-software-architecture-access-control-pattern&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;RBACO&lt;/strong&gt; — 核心RBAC&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;RBAC1&lt;/strong&gt; — 层次RBAC (RBAC0 + 角色层次结构)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;RBAC2&lt;/strong&gt; — 约束RBAC (RBAC0 + 约束)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;RBAC3&lt;/strong&gt; — 组合RBAC (RBAC1 + RBAC2)&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RBAC授权的过程可以抽象为:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;谁(Who)&lt;/strong&gt; — 权限的用户或角色&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;什么(What)&lt;/strong&gt; — 资源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;如何(How)&lt;/strong&gt; — 具体的权限&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RBAC0&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;3个元素: 用户、角色和权限&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计基于&quot;[多对多(many-to-many)](https://en.wikipedia.org/wiki/Many-to-many_(data_model &quot;多对多(many-to-many &quot;多对多(many-to-many)&quot;)&quot;))&quot;关系，即多个用户可以拥有相同的角色，一个用户可以拥有多个角色。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6629570747217806&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VTsGXh4ZY0aUNUASgn4FXS9UWmaSsuNp5yXVoQJtvAfmKxx5dliaE21FUHaJje1qDrAhAg3BSrpYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;629&quot;/&gt;&lt;figcaption&gt;图片来源: https://www.bettercloud.com/monitor/the-fundamentals-of-role-based-access-control&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RBAC1&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;4个元素: 用户、角色、权限、层次结构/继承&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定义了不同角色之间的从属关系&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高级别角色可以自动从低级别角色获取权限&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;角色之间的继承关系可以分为一般继承关系和有限继承关系&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一般继承关系只要求角色继承关系是绝对的偏序关系(&lt;strong&gt;角色之间的多重继承&lt;/strong&gt;)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有限继承关系要求角色继承关系是树状结构(&lt;strong&gt;角色之间的单一继承&lt;/strong&gt;)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;StackOverflow的Q/A帖子&quot;&lt;span&gt;如何设计基于角色的分层访问控制系统&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt;&quot;是一个很好的例子，值得一读。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;树(Tree)&lt;/strong&gt; — (自底向上的层次结构) — 树底部的元素被授予更大的权限。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;倒立树(Inverted Tree)&lt;/strong&gt; — (自顶向下的层次结构) — 高级角色将其部分权限继承给低级角色，同一级别的节点不共享权限。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4116666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VTsGXh4ZY0aUNUASgn4FXSiaKic7xbicdwuMTkPwDTZQdlNpVic7ulYj0XqH9jofln9u7Rrqpr4BibqVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;figcaption&gt;图片来源: https://techdifferences.com/difference-between-top-down-and-bottom-up-approach.html&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;网格(Grid)&lt;/strong&gt; — (自底向上和自顶向下的组合) — 每个角色都可以从它下面和上面的节点继承权限，因此相对灵活，可以共享权限。顶级节点被授予更大的权限。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9230769230769231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VTsGXh4ZY0aUNUASgn4FXSgZ6qqrv5dh9vZkIBPWlfIGM3SpSLFVVgGadNJUfhdicYhQ4ndh5iaaZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;234&quot;/&gt;&lt;figcaption&gt;图片来源: http://grid-layout.com/grid-lines.html&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RBAC2&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;4个元素: 用户、角色、权限和约束&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;由于存在利益冲突策略，角色之间的关系存在约束&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VTsGXh4ZY0aUNUASgn4FXS8a3B8ibFib8yiawKePyUmTgXGnwp74ba2FW0LldFt93ENuicwS310JXMRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;figcaption&gt;图片来源: https://slideplayer.com/user/10879796&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RBAC3&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;将RBAC1和RBAC2的所有特征(角色继承和约束关系)集成到模型中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以根据不同的上下文限制或激活可用的用户权限，当用户在会话期间执行的任务可能需要不同级别的访问时，可以在会话期间激活更高级别的权限。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;类图&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;User表(用户ID、用户名和其他属性)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Role表(角色ID，角色名，角色类型)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;User_Role表(用户角色关联表)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Product表(产品ID，产品类型，渠道，费用，地区)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Region表(地区代码、渠道)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Permission表(权限ID、权限类型、权限名称和其他属性)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Role_permission表(角色权限关联表)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Menu表(菜单ID，菜单名称，菜单路径URL，父菜单ID，资源和其他属性)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Page_element表(资源、页面元素ID、页面元素代码和其他属性)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;File表(文件ID，文件名，文件路径)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Permission_Menu表(权限ID，菜单ID)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Permission_Element表(权限ID，页面元素ID)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Permission_File表(权限ID，文件ID)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Operation表(动作ID、动作名称、动作代码等属性)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Permission_Operation表(权限ID，操作ID)&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RBAC模型的优点&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;降低授权管理的复杂性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;降低管理成本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建系统级的、可复用的权限分配&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;减少分配用户权限时出错的可能性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持企业安全策略&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RBAC模型的缺点&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;不提供操作顺序控制机制&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参考文献&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;History-based access control&lt;/span&gt;&lt;sup&gt;[21]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pattern-Oriented Software Architecture - Access control pattern&lt;/span&gt;&lt;sup&gt;[22]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Role-Based Access Control | CSRC&lt;/span&gt;&lt;sup&gt;[23]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Role-Based Access Control - Wikipedia&lt;/span&gt;&lt;sup&gt;[24]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;What is Role-Based Access Control (RBAC)? Example, Benefits, and More&lt;/span&gt;&lt;sup&gt;[25]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;What is Role-Based Access Control | RBAC vs ACL vs ABAC | Imperva&lt;/span&gt;&lt;sup&gt;[26]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Using RBAC Authorization&lt;/span&gt;&lt;sup&gt;[27]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;What is Azure role-based access control (Azure RBAC)?&lt;/span&gt;&lt;sup&gt;[28]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Role-Based Access Control&lt;/span&gt;&lt;sup&gt;[29]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;RBAC vs ABAC: Make the Right Call | OneLogin&lt;/span&gt;&lt;sup&gt;[30]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Understanding Role-Based Access Control (RBAC) | StrongDM&lt;/span&gt;&lt;sup&gt;[31]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;What is Role-Based Access Control (RBAC)?&lt;/span&gt;&lt;sup&gt;[32]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;What is Role-Based Access Control (RBAC)?&lt;/span&gt;&lt;sup&gt;[33]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Role-Based Access Control (RBAC) User Guide | Chronicle Security | Google Cloud&lt;/span&gt;&lt;sup&gt;[34]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;What is Role-Based Access Control (RBAC)? A Complete Guide | Frontegg&lt;/span&gt;&lt;sup&gt;[35]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Role-Based Access Control (RBAC): What is it and why use it? | Harness&lt;/span&gt;&lt;sup&gt;[36]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;What is Role-Based Access Control (RBAC)? | Tools4ever&lt;/span&gt;&lt;sup&gt;[37]&lt;/sup&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/em&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Role-based Access Control (RBAC) Model: &lt;em&gt;https://medium.com/geekculture/role-based-access-control-rbac-model-7d8e7b7350d2&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;RBAC like it was meant to be: &lt;em&gt;https://tailscale.com/blog/rbac-like-it-was-meant-to-be&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;系统安全: &lt;em&gt;https://twitter.com/jinlow_blogger/status/1580022558396936192&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;自主访问: &lt;em&gt;https://en.wikipedia.org/wiki/Discretionary_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;强制访问: &lt;em&gt;https://en.wikipedia.org/wiki/Mandatory_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;Access Control List: &lt;em&gt;https://en.wikipedia.org/wiki/Access-control_list&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;Discretionary Access Control: &lt;em&gt;https://en.wikipedia.org/wiki/Discretionary_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Mandatory Access Control: &lt;em&gt;https://en.wikipedia.org/wiki/Mandatory_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Role-Based Access Control: &lt;em&gt;https://en.wikipedia.org/wiki/Role-based_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;Attribute-based Access Control: &lt;em&gt;https://en.wikipedia.org/wiki/Attribute-based_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;History-based Access Control: &lt;em&gt;https://en.everybodywiki.com/History-based_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;Identity-based Access Control: &lt;em&gt;https://en.wikipedia.org/wiki/Identity-based_security&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;Organization-based Access Control: &lt;em&gt;https://en.wikipedia.org/wiki/Organisation-based_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14]&lt;/span&gt;&lt;p&gt;Lattice-based access control: &lt;em&gt;https://www.ibm.com/docs/en/db2/11.5?topic=security-label-based-access-control-lbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15]&lt;/span&gt;&lt;p&gt;Context-based Access Control: &lt;em&gt;https://en.wikipedia.org/wiki/Context-based_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16]&lt;/span&gt;&lt;p&gt;Entity-Relationship-based Access Control: &lt;em&gt;https://www.scaledaccess.com/whitepapers/the-developers-guide-to-relationship-based-access-control/#:~:text=Relationship%2Dbased%20access%20control%20is,specific%20relationships%20the%20subject%20has.&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17]&lt;/span&gt;&lt;p&gt;Extended Role-Based Access Control: &lt;em&gt;https://ucm.riskmanager.modulo.com/manual/en/default.htm#!Documents/extendedrolebasedaccesscontrolmodel.htm&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18]&lt;/span&gt;&lt;p&gt;Semantic Access Control: &lt;em&gt;https://en.wikipedia.org/wiki/Semantic_security&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[19]&lt;/span&gt;&lt;p&gt;美国国家标准与技术研究院: &lt;em&gt;https://www.nist.gov&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[20]&lt;/span&gt;&lt;p&gt;如何设计基于角色的分层访问控制系统: &lt;em&gt;https://stackoverflow.com/questions/16139712/how-to-design-a-hierarchical-role-based-access-control-system&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[21]&lt;/span&gt;&lt;p&gt;History-based access control: &lt;em&gt;https://en.everybodywiki.com/History-based_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[22]&lt;/span&gt;&lt;p&gt;Pattern-Oriented Software Architecture - Access control pattern: &lt;em&gt;https://transang.me/pattern-oriented-software-architecture-access-control-pattern/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[23]&lt;/span&gt;&lt;p&gt;Role-Based Access Control | CSRC: &lt;em&gt;https://csrc.nist.gov/projects/role-based-access-control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[24]&lt;/span&gt;&lt;p&gt;Role-Based Access Control - Wikipedia: &lt;em&gt;https://en.wikipedia.org/wiki/Role-based_access_control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[25]&lt;/span&gt;&lt;p&gt;What is Role-Based Access Control (RBAC)? Example, Benefits, and More: &lt;em&gt;https://digitalguardian.com/blog/what-role-based-access-control-rbac-examples-benefits-and-more&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[26]&lt;/span&gt;&lt;p&gt;What is Role-Based Access Control | RBAC vs ACL vs ABAC | Imperva: &lt;em&gt;https://www.imperva.com/learn/data-security/role-based-access-control-rbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[27]&lt;/span&gt;&lt;p&gt;Using RBAC Authorization: &lt;em&gt;https://kubernetes.io/docs/reference/access-authn-authz/rbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[28]&lt;/span&gt;&lt;p&gt;What is Azure role-based access control (Azure RBAC)?: &lt;em&gt;https://learn.microsoft.com/en-us/azure/role-based-access-control/overview&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[29]&lt;/span&gt;&lt;p&gt;Role-Based Access Control: &lt;em&gt;https://auth0.com/docs/manage-users/access-control/rbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[30]&lt;/span&gt;&lt;p&gt;RBAC vs ABAC: Make the Right Call | OneLogin: &lt;em&gt;https://www.onelogin.com/learn/rbac-vs-abac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[31]&lt;/span&gt;&lt;p&gt;Understanding Role-Based Access Control (RBAC) | StrongDM: &lt;em&gt;https://www.strongdm.com/rbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[32]&lt;/span&gt;&lt;p&gt;What is Role-Based Access Control (RBAC)?: &lt;em&gt;https://www.varonis.com/blog/role-based-access-control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[33]&lt;/span&gt;&lt;p&gt;What is Role-Based Access Control (RBAC)?: &lt;em&gt;https://www.okta.com/identity-101/what-is-role-based-access-control-rbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[34]&lt;/span&gt;&lt;p&gt;Role-Based Access Control (RBAC) User Guide | Chronicle Security | Google Cloud: &lt;em&gt;https://cloud.google.com/chronicle/docs/administration/rbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[35]&lt;/span&gt;&lt;p&gt;What is Role-Based Access Control (RBAC)? A Complete Guide | Frontegg: &lt;em&gt;https://frontegg.com/guides/rbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[36]&lt;/span&gt;&lt;p&gt;Role-Based Access Control (RBAC): What is it and why use it? | Harness: &lt;em&gt;https://harness.io/blog/rbac&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[37]&lt;/span&gt;&lt;p&gt;What is Role-Based Access Control (RBAC)? | Tools4ever: &lt;em&gt;https://www.tools4ever.com/glossary/what-is-role-based-access-control&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7eb775bf806f57e3b32b75efeaaea5d5</guid>
<title>建议收藏，轻松搞懂区块链</title>
<link>https://toutiao.io/k/miw9o2j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;span/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;未来已来，只是不均衡地分布在当下&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是菜农，欢迎来到我的频道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;本文共 5844字，预计阅读 30 分钟&lt;/em&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;区块链是近些年来最热门的前沿技术，被认为是未来十几年对金融、物联网、医疗等诸多领域产生最大影响的&quot;黑科技&quot;之一。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本篇中我们将掌握区块链的&lt;strong&gt;基本概念&lt;/strong&gt;、&lt;strong&gt;技术构成&lt;/strong&gt; 与 &lt;strong&gt;逻辑结构&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、基本概念&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;“区块链”&lt;/strong&gt; 这个概念是由一个网名为中本聪的人在2008年发表的《比特币：一种点对点的电子现金系统》中提出的。随后他实现了一个比特币系统，并发布了加密数字货币—比特币。接下来出现了以太坊和超级账本这样的大型区块链项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么在你的认知中，区块链是什么样的？下面整理了几种选项，看下是否有符合你认知的选项。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;区块链是比特币，比特币就是区块链&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;区块链很值钱&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;区块链可以运用在任何领域&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;区块链是免费的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;区块链是非常安全的&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常来说，选项1是大多倾向的结果。但比特币和区块链两者不能等同，实际上，&lt;strong&gt;区块链是比特币的底层技术&lt;/strong&gt;，如果要举例比喻的话，就好比用面粉可以做包子，但不能说面粉等于包子，包子等于面粉。而这里的面粉就相当于是包子。当然了作为底层技术的存在，不仅仅应用于比特币的实现中，还有很多其他基于区块链技术的应用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么区块链究竟是什么？从比较专业的维度上看，可以从以下三点来解释&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;区块链是底层技术&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个底层技术，它是包含了 &lt;strong&gt;P2P动态组网&lt;/strong&gt;、&lt;strong&gt;基于密码学的共享账本&lt;/strong&gt;、&lt;strong&gt;共识机制&lt;/strong&gt;、&lt;strong&gt;智能合约&lt;/strong&gt; 等关键技术&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;区块链是一个数字货币和账本系统&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从货币学的角度看，区块链是数字货币系统的分布式共享账本系统，这是一个去中心化的、网内用户共同维护的账本系统。&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;区块链是互联网的基础设施&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它提供了分布式去中心化的价值互联网，为更多大规模的共享、协作应用创造可能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为解释依据，这里提取了来自中本聪在2008年发表的《比特币：一种点对点的电子现金系统》中的一段描述：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;时间戳服务器对以区块（Block）形式存在的一组数据是实施随机散列并加上时间戳，然后将该随机散列进行广播，就像在新闻后世界性新闻组网络（Usenet）的发帖一样。显然，该时间戳能够证实特定数据于某特定时间是的确存在的，因为只有在该时刻存在了才能获取相应的随机散列值。每个时间戳应当将前一个时间戳纳入其随机散列值中，每一个随后的时间戳都对之前的一个时间戳进行增强（Reinforcing），这样就形成了一个（Chain），即区块链，如下图所示：&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33478893740902477&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwJUoux51ic2E51NtR3IAQAiaV8q7yCbDSZkZ1KTNoHeGjuwYkwXUJibfLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1374&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文字较为苍白，我们看图可以很清晰的看出 &lt;strong&gt;区块链就是由 &lt;em&gt;区块&lt;/em&gt; 和 &lt;em&gt;链&lt;/em&gt; 构成的&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1）区块&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;区块是区块链的组成单元，就像金字塔是由一块块石头组成的一样，区块链就是一个个区块组成的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区块是由一系列特征值和一段时间内的交易记录组成的一个数据结构。区块的数据结构是由 &lt;strong&gt;区块头&lt;/strong&gt; 和 &lt;strong&gt;区块体&lt;/strong&gt; 组成。其中区块头包含了当前区块的特征值，区块体中包含的是实际的交易记录数据。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、数据结构&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1️⃣ 区块头&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区块头是由 80 个字节组成，主要由版本号、前一个区块的哈希值、Merkle根、时间戳、bits、Nonce 这几项区块的特征值组成。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15879828326180256&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwgwBfvaWEInFSS3YBY7kbSPUY7vxH5MDEcAz8bF2cIUiawrZ1zbTrKnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1398&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;ver：&lt;/strong&gt; 版本号，表示本区块遵守的验证规则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;prev_block：&lt;/strong&gt; 父区块哈希值，指的是这个区块连接的上一个区块的哈希值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;mrkl_root：&lt;/strong&gt; mrkl_root 根，是该区块链交易的 Merkle 树根的哈希值（Merkle 是一种哈希树的数据结构）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;time：&lt;/strong&gt; 时间戳，区块生成的时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;bits：&lt;/strong&gt; 区块的难度值，该区块工作量证明算法的难度目标，使用特定的算法编码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Nonce：&lt;/strong&gt; 是一个随机数，为了找到满足难度目标所设定的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2️⃣ 区块体&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区块体主要包括了 &lt;strong&gt;交易数量（n_tx）、区块大小（size）和长度不定的交易记录（tx 字段包含的交易列表）&lt;/strong&gt; 等信息。但这只是比特币中的区块体结构，实际上区块体重可以包括任何内容，比如以太坊的区块体中除了交易数据还包含智能合约。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5313390313390314&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfw9zRaibjicR27XGQX4CzVPuCfMN6gk1MRBDsHuYjibL3w4oEyjsq4yIFUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1404&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2）区块特点&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区块是由计算机通过加密算法生成的。如果成功地生成一个有效的区块，该计算机（节点）就能获得一定的奖励，这个奖励就是加密数字货币，也就是所谓的 &lt;strong&gt;挖矿&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加密算法并不是容易生成结果的，而是该区块的哈希值必须满足一定的条件。这个条件就是能够使得区块头中特征值相加生成的哈希值需要符合一定格式，比如难度值为 000，由于哈希值随着输入的不同而不同，因此计算机要不断尝试改变区块头的 Nonce 值直至最终生成的哈希值满足条件才算生成了一个有效的区块。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以借助 Blockchain Demo 工具来尝试生成一个区块。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.35545023696682465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwichs7D8poibsfGV8u5GicLUlAAAFTtREcLiaa5rHw4BLq3eYMtViaIiasCFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1266&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从图中可以看出在 &lt;strong&gt;HASH&lt;/strong&gt; 一栏中的数据是红色的，说明该哈希值是无效的。因为未满足 000 开头的数据。那么我们需要再次计算后查看结果&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3317384370015949&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwAmpuibtjRlJibo18vBxe7AycBGtBicRfWOuwnIshEg6cVJ6aeZiaLvyfqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1254&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出这次的结果为绿色，是有效的，因为该数据满足 000 开头。我们将上面的区块结果进行解读，可以分为以下几部分：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3474676089517079&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwLqnhxzibLv8lP6Sqf0Z3WrFialuZBhPwA8DwflNcznV5ibgJ0K3GyetBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1698&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;索引：&lt;/strong&gt; 表示区块在区块链中的位置，其中第一个区块为 &lt;em&gt;创世区块（索引为 0）&lt;/em&gt; ，第二个区块的索引为1，第三个区块的索引为2，以此类推。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;时间戳：&lt;/strong&gt; 表示该区块的生成时间，根据时间戳可以判断区块链中各个区块生成的先后顺序。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;哈希值：&lt;/strong&gt; 表示每个区块的唯一标识，也可称为区块的 &lt;em&gt;&lt;strong&gt;数字指纹&lt;/strong&gt;&lt;/em&gt;。哈希值的长度是固定的，而且和区块的内容紧密关联，一旦区块内容发生改变，该区块的哈希值也会发生改变。而且，区块中的哈希值还有 &lt;em&gt;有效&lt;/em&gt; 和 &lt;em&gt;无效&lt;/em&gt; 之分，满足特定条件的哈希值是有效的，否则就是无效的。这个特定条件一般称称为 &lt;em&gt;&lt;strong&gt;困难度（Difficulty）&lt;/strong&gt;&lt;/em&gt;。父区块哈希值就是区块中特定区块前一个区块的哈希值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据：&lt;/strong&gt;区块中的数据可以是任何内容，比特币区块链的区块中的数据为一串串交易记录。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Nonce：&lt;/strong&gt; 是一个随机数，用来生成一个有效的哈希值。Nonce 会根据区块数据的不同而不同，每个区块都需要经过大量计算才能找到对应的 Nonce 值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;创世区块：&lt;/strong&gt; 区块链中的第一个区块，它没有父区块，故创世区块的父区块哈希值为空或者为 0。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2）运行原理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上所述，区块链就是一个链表，而这个链表就是由一个个区块组成的，这些区块依次连接，形成一个不可篡改的链条，那么其中的运行过程我们也可以由此推出：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先构成区块链的去中心化网络中的第一个节点，生成一个 &lt;strong&gt;创世区块&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后通过 &lt;em&gt;挖矿&lt;/em&gt; 生成新的区块添加到区块链中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;新的节点加入到去中心化网络中会先生成一个最新的区块链数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;随后每个节点生成的区块都会向网络中的其他节点进行广播&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他节点收到广播后会判断自己是否已经收到该区块，是的话就忽略，否的话会先校验该区块是否有效，如果是有效的区块则会添加到自己的区块链中&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3）小结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;区块链中的节点始终都讲最长的链条作为正确的链，并持续延长和维护这条链。当节点发现有更长的链条并且本身的链条不是最新时，就会使用最长的链条提花你当前节点的链条。若一个节点判断出本身的区块链是最新的，再收到新的区块信息时，节点就会把新的区块添加到自身链条的最后。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当一个区块链的节点掌握了整个区块链中 51% 以上的计算能力时，它就可以重写整个区块链。基于这个原因，区块链中的计算能力过度集中会很危险。只有一个庞大且均匀分布的区块链才比较安全。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、技术构成&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区块链主要由三个核心技术构成，分别是 &lt;strong&gt;共识机制、智能合约、去中心化网络&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1）共识机制&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;共识机制是区块链中的重要机制，不同的区块链项目可能使用不同的共识机制。网络中的各个节点根据共识机制达成共识，共同维护整个区块链网络。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46325167037861914&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwBoibibFkTzWSY5rsygUOHtIAXHTsicFbjB9uUeFzpOSrJbIZBUZAnepzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、PoW 机制&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工作量证明机制（Proof of Work，PoW），工作量证明就是一份证明，它用来确定完成了一定量的工作并可以因此获得一定的奖励。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工作量证明是一种对应服务与资源滥用，或是阻断服务供给的对策。一般要求发起者进行一些耗时的复杂运算，并且结果能被快速验算。在计算过程中耗用的时间和资源作为成本，据此来确定建立或惩罚，以此来维护系统的一致性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;工作量证明机制最常用的技术原理是哈希函数&lt;/strong&gt;，工作量证明机制如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;取得一些公开的数据，并加上一个随机数（Nonce）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以数据和随机数作为输入值计算哈希值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;检查生成的哈希值是否符合一定的条件。若符合就几下这个随机数的值并退出。若不符合则改变随机数的值再重新计算。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0391061452513966&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwGqDAtCSG6xEk9JbzkFNRjicrzU2PyPd4AAVuriaBkiaKsFzzr7GkCtvvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;716&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于工作量证明机制需要消耗巨大的算力，如果有人尝试恶意破坏，需要付出巨大的经济成本，这就防止了恶意的数据修改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 只有第一个获取有效哈希值的节点能得到奖励，其他节点的计算会被浪费掉。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、PoS机制&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;权益证明机制（Proof of Stake，PoS）试图解决在 PoW 机制中大量资源被浪费的问题。不同于 PoW 机制要求进行一定量的计算，PoS 机制要求提供的是保证金，或者说是一定数量数字货币的拥有权。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;PoS 机制的工作原理是通过保证金来确认一个合法的块成为新的区块，收益为保证金的利息和交易服务费。提供证明的保证金越多，则获得记账权的概率越大。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如系统中有A、B、C、D4个人，A有40个币，B有30个币，C有20个币，D有10个币，那么A获得记账权的概率就是D的4倍&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5768261964735516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwCY2Eia4YzFLWlIAlzydWk97iaGbgqflXRibrDiacPicuHjCwoBOdqEzh6Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PoS 机制的好处是在一定程度上缩短了共识达成的时间，不再需要大量消耗能源挖矿，其与 PoW 机制的区别如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5468354430379747&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwO0fd0ovmYzDliaZmCT2ibYuEkFHuS0uBIWUxgo9cCB0pfZMzmobkibSBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;790&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、DPoS 机制&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;股份授权证明机制（Delegated Proof of Stake，DPoS），与 PoS 机制基本原理相同，只是选举了若干代理人，由代理人执行验证和记账功能，工作原理如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7603806228373703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwQ3tDn5pOZWmpKamJrpofsUKXVCA3IBDWTNKoESEzqzCJXIANK7AIRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1156&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 DPoS 机制下，每个节点按其持币比例拥有影响力，51%节点投票的结果将是不可逆切有约束力的。其过程为：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;每个节点可以将其投票权授予一名代表，获票数最多的前 100 位代表按既定时间表轮流产生区块。每名代表分配到一个时间段来生产区块。所有的代表将收到等同于一个平均水平的区块所含交易费的 10% 作为报酬。如果一个平均水平的区块含有 100 股作为交易费，每个节点将获得 1 股作为报酬&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;DPoS 的好处是大幅缩小了参与验证和记账节点的数量，可以达到秒级的共识验证&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、DAG 机制&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有向无环图（Direct Acyclic Graph，DAG），DAG 是一个没有有向循环的、有限的有向图。它由有限个顶点和有向边组成，每条有向边都从一个顶点指向另一个顶点；从任意一个顶点出发都不能通过这些有向边回到原来的顶点&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49206349206349204&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfw8XtWuGuwxNyy1JrMlPWQx91NkGJOf1gGxHDBgQ9I4b2dYQCCwlaArg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;882&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传统的区块链只有一条单链，而在一条单链上无法并发打包区块。而DAG 是一种拓扑结构，在区块打包时间不变的情况下，可以并行打包N个区块，那么区块链的交易容纳能力就可以变成原来单链情况下的N倍。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2）智能合约&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;智能合约不是区块链的必要组成，它是区块链 2.0 之后出现的技术。如果把区块链比作一个公司，智能合约相当于公司中的规章制度，员工工作的时候会依据规章制度形式，而在有智能合约的区块链中，链上的节点会依据智能合约进行工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;智能合约不只是一个可以自动执行的计算机程度，它还是一个基于区块链的参与者。它对接收到的信息进行回应，它可以接收和存储价值，也可以向外发送信息和价值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;智能合约具体是指运行在可复制、共享的账本上的计算机程序，可以处理信息，接收、存储和发送价值的脚本&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.45100105374077976&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfw42Haz0ictwsSu8q3deVSa0lupgyQS13bZ2uYd4CylnxKmMpIxhJOicAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;949&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3）去中心化网络&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;去中心化网络不同于中心化网络。在中心化网络中，需要中心服务器，是一种星型的辐射结构。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9424460431654677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwPn3xLKrbl8NAjFHxUP0mqCo4JnkgnmabwejL9GhJZaaaz4B9Qo8yBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;556&quot;/&gt;&lt;figcaption&gt;中心化网络&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9424460431654677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwJIdPHp3daEsJGYzR2YRqK3pqoDQCn1cmLAsR0zKric8DLEPvcXefJzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;556&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们演化成区块链的形式：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6518375241779497&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwk0Ij2gDN71O4NFzib4DKz6DiaFia8A9ibJPib0SHjJMjcdicyla3uwlJEYMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1034&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、逻辑结构&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从架构上来说，区块链大致可以分为4层，从下到上依次为 &lt;strong&gt;数据层&lt;/strong&gt;、&lt;strong&gt;网络层&lt;/strong&gt;、&lt;strong&gt;合约层&lt;/strong&gt; 和 &lt;strong&gt;应用层&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.6066225165562913&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfw4icC6YIOS1v9PibnGErmgU5fdaARWc6bO5PDZ9usia8PPEZgEjSwsE7fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;755&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1）数据层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据层是区块链的逻辑架构中最基础的一层，功能主要包括区块数据的存储、哈希值和 Merkle 树的计算以及链式结构的生成，其中进行数据的存储时需要重点考虑数据存储的性能和稳定性。在比特币和以太坊中的存储功能选择的是 LevelDB数据库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据层的功能是把交易数据存储到区块中并将区块加入到区块链中。当节点之间发生交易后会将交易数据广播到区块链的去中心化网络上，网络中其他节点负责校验这些交易。交易被确认有效后会存储到区块中，并加入到区块链。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2）网络层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网络层主要包括 &lt;strong&gt;P2P 网络&lt;/strong&gt; 和 &lt;strong&gt;共识算法&lt;/strong&gt; 两个组成部分。P2P （Peer to Peer）网络也称为&lt;strong&gt;点对点网络&lt;/strong&gt;或&lt;strong&gt;对等网络&lt;/strong&gt;，根据去中心化程度的不同可以将其分为以下三种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;纯P2P网络&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;节点同时作为客户端和服务器&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;没有中心服务器&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;没有中心路由器&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;杂P2P网络&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;有一个中心服务器保存节点的信息并对请求这些信息的客户端作出响应&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;节点负责发布信息（因为中心服务器并不保存文件），让中心服务器知道哪些文件被共享，让需要的节点下载其可下载其可使用的资源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;路由重点使用地址，通过被一组索引引用来获取绝对地址&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;混合P2P网络&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时含有纯P2P网络和杂P2P网络的特点&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在 P2P 网络中，各个节点需要对区块链中的各个区块达成共识才能共同维护同一分布式账本。这个共识的机制就是共识算法，比较最为常用的共识算法有&lt;strong&gt;工作量证明机制（Proof of Work，PoW）、权益证明机制（Proof of Stake，PoS）、股份授权证明机制（Delegated Proof of Stake，DPoS）&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3）合约层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;合约层的功能使得区块链中的区块具有可编程的特性，并且赋予了区块链智能的特性，在区块链中智能合约的作用如同一个智能助理，对区块链中的数据和事件按照预先设定的逻辑进行处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6165605095541401&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwzdBPDWqjpzFcMgzK6gTaibspWOqBias3OdgLajrTmNaKnibbvvhGoACrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;785&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4）应用层&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用层泛指基于区块链技术并结合具体业务场景开发的应用，包括加密数字货币钱包、交易所、去中心化应用等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、分类&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;随着区块链的快速发展、区块链的应用范围越来越广，不同的区块链应用之间也有了比较大的差异&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1）公有链&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公有链是对外公开、任何人都可以参与的区块链。公有链是真正意义上的完全无中心化的区块链。它通过加密技术保证交易不可篡改，在不可信的网络环境中建立共识，从而形成去中心化的信用机制。公有链使用于数字货币、电子商务、互联网金融、知识产权等应用场景。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8806941431670282&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwDdAUmcx4MZLJQDsAZskIZ44piaibF97hG6UfTJ2S7cPgblUn1xC3y8Zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2）联盟链&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;联盟链仅限于联盟成员使用，因其只针对成员开放全部或部分功能，所以联盟链上的读写权限、以及记账规则都按联盟链规则来控制。联盟链适用于机构间的交易、结算、清算等B2B场景。超级账本项目即属于联盟链。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6538461538461539&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwkH5Poda3CscVcpGMBFEn12LVlcdNaksXCkdsr2ayfxibtjBCqeSDJiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3）私有链&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;私有链对单独的个人或实体开放，仅供在私有组织，比如公司内部使用，私有链上的读写权限，参与记账的权限都由私有组织来决定。私有链适用于企业、组织内部。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8806941431670282&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwaHvdt4BALibeaiccc5fsdeHMlDicz3UK4310sAASwB4DpCCKh0dLbQeTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4）特点比较&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6739130434782609&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/P7WuIzkp9iaUmhY0fxGXLQpjHoichqyNfwYre8p4p3EktvQIETrmOmSNKSdj7MSuVgCo4BzK6loIYddbZQaSkccw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1380&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5）侧链&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;侧链的概念最早产生于比特币的应用过程中，侧链实质上是指遵守侧链协议的所有区块链。侧链协议是一种可以让比特币安全地从比特币主链转移到其他区块链，又可以从其他区块链安全地比特币主链的协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;侧链本质上是一种跨区块链解决方案&lt;/strong&gt;。通过这种解决方案，可以实现数字资产从第一个区块链到第二个区块链的转移，又可以在稍后的时间点从第二个区块链安全返回到第一个区块链。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6）闪电网络&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在比特币交易网络中，最为人诟病的问题便是交易性能：全网约每秒7笔左右的交易速度远低于传统金融交易系统。同时，等待6个区块的可信确认将导致约1个小时的最终确认时间。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了提升性能，比特币社区提出了闪电网络等创新的设计。闪电网络的主要思路十分简单—将大量交易放到比特币区块链之外进行，只把关键环节放到链上进行确认。&lt;strong&gt;闪电网络的工作原理是用比特币拥有权的承诺来替代拥有权&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五、总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;区块链的主要特点包括去中心化、去信任、集体维护、匿名性、可靠的数据库。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;去中心化：&lt;/strong&gt; 区块链技术基于P2P去中心化网络，区块链网络上的节点都是平等的，没有中心服务器，故区块链是去中心化的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;去信任：&lt;/strong&gt; 区块链中的数据都是公开透明的，交易数据通过加密技术进行验证和记录，无须第三方信任机构的参与，故有去信任的特点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;集体维护：&lt;/strong&gt; 区块链由全网节点共同参与维护，某一节点上数据的更新需要其他节点进行计算和验证，不会受少数节点控制。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;可靠的数据库：&lt;/strong&gt; 区块链中的每一个节点上的数据都是全网数据，单个节点的退出或瘫痪不会影响整个系统。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，以上便是本篇的所有内容，如果觉得对你有帮助的小伙伴不妨点个关注做个伴，便是对小菜最大的支持。不要空谈，不要贪懒，和小菜一起做个&lt;code&gt;吹着牛X做架构&lt;/code&gt;的程序猿吧~ 咱们下文再见！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;今天的你多努力一点，明天的你就能少说一句求人的话！&lt;/p&gt;&lt;p&gt;&lt;em&gt;我是小菜，一个和你一起变强的男人。&lt;/em&gt; &lt;code&gt;💋&lt;/code&gt;&lt;/p&gt;&lt;p&gt;微信公众号已开启，&lt;strong&gt;菜农曰&lt;/strong&gt;，没关注的同学们记得关注哦！&lt;/p&gt;&lt;/blockquote&gt;&lt;span/&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b7feff0bd18ecd0f111e393c3cbb16c5</guid>
<title>Linux 内核内存性能调优的一些笔记</title>
<link>https://toutiao.io/k/ixqxvbi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;在工作生活中，我们时常会遇到一些性能问题：比如手机用久了，在滑动窗口或点击 APP 时会出现页面反应慢、卡顿等情况；比如运行在某台服务器上进程的某些性能指标（影响用户体验的 PCT99 指标等）不达预期，产生告警等；造成性能问题的原因多种多样，可能是网络延迟高、磁盘 IO 慢、调度延迟高、内存回收等，这些最终都可能影响到用户态进程，进而被用户感知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在 Linux 服务器场景中，内存是影响性能的主要因素之一，本文从内存管理的角度，总结归纳了一些常见的影响因素（比如内存回收、Page Fault 增多、跨 NUMA 内存访问等），并介绍其对应的调优方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;内存回收&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;操作系统总是会尽可能利用速度更快的存储介质来缓存速度更慢的存储介质中的内容，这样就可以显著的提高用户访问速度。比如，我们的文件一般都存储在磁盘上，磁盘对于程序运行的内存来说速度很慢，因此操作系统在读写文件时，都会将磁盘中的文件内容缓存到内存上（也叫做 page cache），这样下次再读取到相同内容时就可以直接从内存中读取，不需要再去访问速度更慢的磁盘，从而大大提高文件的读写效率。上述情况需要在内存资源充足的前提条件下，然而在内存资源紧缺时，操作系统自身难保，会选择尽可能回收这些缓存的内存，将其用到更重要的任务中去。这时候，如果用户再去访问这些文件，就需要访问磁盘，如果此时磁盘也很繁忙，那么用户就会感受到明显的卡顿，也就是性能变差了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在 Linux 系统中，内存回收分为两个层面：整机和 memory cgroup。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/hqDXUD6csU8f9Z5wkbLZ7JvYWxATqtc8S9U7eXlrwav8BQNmcgNGlSXbAdibNcXWtJGOhXC59aQkRl1mXcB852e3ESWGCibibl2/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;170&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;在整机层面&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;设置了三条水线：min、low、high；当系统 free 内存降到 low 水线以下时，系统会唤醒kswapd 线程进行异步内存回收，一直回收到 high 水线为止，这种情况不会阻塞正在进行内存分配的进程；但如果 free 内存降到了 min 水线以下，就需要阻塞内存分配进程进行回收，不然就有 OOM（out of memory）的风险，这种情况下被阻塞进程的内存分配延迟就会提高，从而感受到卡顿。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7464789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z4txjviceemOMpCuu3xrfR9WtKQzbnmrBJnfPOjNWfsOMMPCjRvyrzibyQLCNbgcnk510iaqIyMfq7RSX0oY7pukw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;710&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图 1. per-zone watermark&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这些水线可以通过内核提供的 /proc/sys/vm/watermark_scale_factor 接口来进行调整，&lt;span&gt;&lt;strong&gt;该接口合法取值的范围为 [0, 1000]，默认为 10，当该值设置为 1000 时，意味着 low 与 min 水线，以及 high 与 low 水线间的差值都为总内存的 10% (1000/10000)&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对 page cache 型的业务场景，我们可以通过该接口抬高 low 水线，从而更早的唤醒 kswapd 来进行异步的内存回收，减少 free 内存降到 min 水线以下的概率，从而避免阻塞到业务进程，以保证影响业务的性能指标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/hqDXUD6csU8f9Z5wkbLZ7JvYWxATqtc8S9U7eXlrwav8BQNmcgNGlSXbAdibNcXWtJGOhXC59aQkRl1mXcB852e3ESWGCibibl2/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;170&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;在 memory cgroup 层面&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;目前内核没有设置水线的概念，当内存使用达到 memory cgroup 的内存限制后，会阻塞当前进程进行内存回收。不过内核在 v5.19内核 中为 memory cgroup提供了 memory.reclaim 接口，用户可以向该接口写入想要回收的内存大小，来提早触发 memory cgroup 进行内存回收，以避免阻塞 memory cgroup 中的进程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;Huge Page&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;内存作为宝贵的系统资源，一般都采用延迟分配的方式，应用程序第一次向分配的内存写入数据的时候会触发 Page Fault，此时才会真正的分配物理页，并将物理页帧填入页表，从而与虚拟地址建立映射。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4594595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z4txjviceemOMpCuu3xrfR9WtKQzbnmrBh8WYZReC8ia3TIEhelBW4icLicpAj4JIqfmyXUAbr43aVaPamiaWh8e9zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;851&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图 2. Page Table&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此后，每次 CPU 访问内存，都需要通过 MMU 遍历页表将虚拟地址转换成物理地址。为了加速这一过程，一般都会使用 TLB（Translation-Lookaside Buffer）来缓存虚拟地址到物理地址的映射关系，只有 TLB cache miss 的时候，才会遍历页表进行查找。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;页的默认大小一般为 4K，随着应用程序越来越庞大，使用的内存越来越多，内存的分配与地址翻译对性能的影响越加明显。试想，每次访问新的 4K 页面都会触发 Page Fault，2M 的页面就需要触发 512 次才能完成分配。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另外 TLB cache 的大小有限，过多的映射关系势必会产生 cacheline 的冲刷，被冲刷的虚拟地址下次访问时又会产生 TLB miss，又需要遍历页表才能获取物理地址。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对此，&lt;span&gt;&lt;strong&gt;Linux 内核提供了大页机制&lt;/strong&gt;&lt;/span&gt;。上图的 4 级页表中，每个 PTE entry 映射的物理页就是 4K，如果采用 PMD entry 直接映射物理页，则一次 Page Fault 可以直接分配并映射 2M 的大页，并且只需要一个 TLB entry 即可存储这 2M 内存的映射关系，&lt;strong&gt;&lt;span&gt;这样可以大幅提升内存分配与地址翻译的速度&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，&lt;strong&gt;&lt;span&gt;一般推荐占用大内存应用程序使用大页机制分配内存&lt;/span&gt;&lt;/strong&gt;。当然大页也会有弊端：比如初始化耗时高，进程内存占用可能变高等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以使用 perf 工具对比进程使用大页前后的 PageFault 次数的变化：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;perf &lt;span class=&quot;code-snippet__keyword&quot;&gt;stat&lt;/span&gt; -e page-faults -p-- &lt;span class=&quot;code-snippet__keyword&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;目前内核提供了两种大页机制，一种是需要提前预留的静态大页形式，另一种是透明大页(THP, Transparent Huge Page) 形式。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/hqDXUD6csU8f9Z5wkbLZ7JvYWxATqtc8S9U7eXlrwav8BQNmcgNGlSXbAdibNcXWtJGOhXC59aQkRl1mXcB852e3ESWGCibibl2/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;170&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1. 静态大页&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;首先来看静态大页，也叫做 HugeTLB。静态大页可以设置 cmdline 参数在系统启动阶段预留，比如指定大页 size 为 2M，一共预留 512 个这样的大页：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;hugepagesz&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;M hugepages=&lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;还可以在系统运行时动态预留，但该方式可能因为系统中没有足够的连续内存而预留失败。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt; &amp;gt; &lt;span class=&quot;code-snippet__regexp&quot;&gt;/proc/sys&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/vm/nr&lt;/span&gt;_hugepages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; &amp;gt; &lt;span class=&quot;code-snippet__regexp&quot;&gt;/sys/kernel&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/mm/hugepages&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/hugepages-*/nr&lt;/span&gt;_hugepages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; &amp;gt; &lt;span class=&quot;code-snippet__regexp&quot;&gt;/sys/devices&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/system/node&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/node*/hugepages&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/hugepages-*/nr&lt;/span&gt;_hugepages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;当预留的大页个数小于已存在的个数，则会释放多余大页（前提是未被使用）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;编程中可以使用 mmap(MAP_HUGETLB) 申请内存。&lt;span&gt;详细使用可以参考内核文档 ：&lt;/span&gt;https://www.kernel.org/doc/Documentation/admin-guide/mm/hugetlbpage.rst&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;这种大页的优点是一旦预留成功，就可以满足进程的分配请求，还避免该部分内存被回收；缺点是：&lt;/section&gt;&lt;section&gt;(1) 需要用户显式地指定预留的大小和数量。&lt;/section&gt;&lt;section&gt;(2) 需要应用程序适配，比如：&lt;/section&gt;&lt;section&gt;    - mmap、shmget 时指定 MAP_HUGETLB；&lt;/section&gt;&lt;section&gt;    - 挂载 hugetlbfs，然后 open 并 mmap&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;36&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;当然也可以使用开源 libhugetlbfs.so，这样无需修改应用程序&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;预留太多大页内存后，free 内存大幅减少，容易触发系统内存回收甚至 OOM&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;80&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;紧急情况下可以手动减少 nr_hugepages，将未使用的大页释放回系统；也可以使用 v5.7 引入的HugeTLB + CMA 方式，细节读者可以自行查阅。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/hqDXUD6csU8f9Z5wkbLZ7JvYWxATqtc8S9U7eXlrwav8BQNmcgNGlSXbAdibNcXWtJGOhXC59aQkRl1mXcB852e3ESWGCibibl2/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;170&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2. 透明大页&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;再来看透明大页，在 THP always 模式下，会在 Page Fault 过程中，为符合要求的 vma 尽量分配大页进行映射；如果此时分配大页失败，比如整机物理内存碎片化严重，无法分配出连续的大页内存，那么就会 fallback 到普通的 4K 进行映射，但会记录下该进程的地址空间 mm_struct；然后 THP 会在后台启动khugepaged 线程，定期扫描这些记录的 mm_struct，并进行合页操作。因为此时可能已经能分配出大页内存了，那么就可以将此前 fallback 的 4K 小页映射转换为大页映射，以提高程序性能。整个过程完全不需要用户进程参与，对用户进程是透明的，因此称为透明大页。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;虽然透明大页使用起来非常方便、智能，但也有一定的代价：&lt;/section&gt;&lt;section&gt;（1）进程内存占用可能远大所需：因为每次Page Fault 都尽量分配大页，即使此时应用程序只读写几KB&lt;/section&gt;&lt;section&gt;（2）可能造成性能抖动：&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在第 1 种进程内存占用可能远大所需的情况下，可能造成系统 free 内存更少，更容易触发内存回收；系统内存也更容易碎片化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;khugepaged 线程合页时，容易触发页面规整甚至内存回收，该过程费时费力，容易造成 sys cpu 上升。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;mmap lock 本身是目前内核的一个性能瓶颈，应当尽量避免 write lock 的持有，但 THP 合页等操作都会持有写锁，且耗时较长（数据拷贝等），容易激化 mmap lock 锁竞争，影响性能。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此 THP 还支持 madvise 模式，该模式需要应用程序指定使用大页的地址范围，内核只对指定的地址范围做 THP 相关的操作。这样可以更加针对性、更加细致地优化特定应用程序的性能，又不至于造成反向的负面影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以通过 cmdline 参数和 sysfs 接口设置 THP 的模式：&lt;/p&gt;&lt;p&gt;cmdline 参数：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;transparent_hugepage&lt;/span&gt;=madvise&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;sysfs 接口：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo madvise &amp;gt; &lt;span class=&quot;code-snippet__regexp&quot;&gt;/sys/kernel&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/mm/transparent&lt;/span&gt;_hugepage/enabled&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;详细使用可以参考内核文档 ：&lt;br/&gt;https://www.kernel.org/doc/Documentation/admin-guide/mm/transhuge.rst&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;mmap_lock 锁&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;上一小节有提到 mmap_lock 锁，该锁是内存管理中的一把知名的大锁，保护了诸如mm_struct 结构体成员、 vm_area_struct 结构体成员、页表释放等很多变量与操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;mmap_lock 的实现是读写信号量&lt;/span&gt;&lt;/strong&gt;，当写锁被持有时，所有的其他读锁与写锁路径都会被阻塞。Linux  内核已经尽可能减少了写锁的持有场景以及时间，但不少场景还是不可避免的需要持有写锁，比如 mmap 以及 munmap 路径、mremap 路径和 THP 转换大页映射路径等场景。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;应用程序应该避免频繁的调用会持有 mmap_lock 写锁的系统调用 (syscall)&lt;/span&gt;&lt;/strong&gt;，比如有时可以使用 madvise（MADV_DONTNEED）释放物理内存，该参数下，madvise 相比 munmap 只持有 mmap_lock 的读锁，并且只释放物理内存，不会释放 VMA 区域，因此可以再次访问对应的虚拟地址范围，而不需要重新调用 mmap 函数。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;另外对于 MADV_DONTNEED，再次访问还是会触发 Page Fault 分配物理内存并填充页表，该操作也有一定的性能损耗&lt;/strong&gt;&lt;/span&gt;。如果想进一步减少这部分损耗，可以改为 MADV_FREE 参数，该参数也只会持有 mmap_lock 的读锁，区别在于不会立刻释放物理内存，会等到内存紧张时才进行释放，如果在释放之前再次被访问则无需再次分配内存，进而提高内存访问速度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一般 mmap_lock 锁竞争激烈会导致很多 D 状态进程（TASK_UNINTERRUPTIBLE），这些 D 进程都是进程组的其他线程在等待写锁释放。因此可以打印出所有 D 进程的调用栈，看是否有大量 mmap_lock 的等待。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; `ps -aux | grep &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; D&quot;&lt;/span&gt; | awk &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;{ print $2}&#x27;&lt;/span&gt;`; &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;code-snippet__variable&quot;&gt;$i&lt;/span&gt;; cat /proc/&lt;span class=&quot;code-snippet__variable&quot;&gt;$i&lt;/span&gt;/stack; &lt;span class=&quot;code-snippet__keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;内核社区专门封装了 mmap_lock 相关函数，并在其中增加了 tracepoint，这样可以使用 bpftrace 等工具统计持有写锁的进程、调用栈等，方便排查问题，确定优化方向。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;bpftrace&lt;/span&gt; -e &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;tracepoint:mmap_lock:mmap_lock_start_locking /args-&amp;gt;write == true/{ @[comm, kstack] = count();}&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;跨 numa 内存访问&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;在 NUMA 架构下，CPU 访问本地 node 内存的速度要大于远端 node，因此应用程序应尽可能访问本地 node 上的内存。可以通过 numastat 工具查看 node 间的内存分配情况：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;观察整机是否有很多 other_node 指标（远端内存访问）上涨：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;watch&lt;/span&gt; -n &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; numastat -s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;numastat&lt;/span&gt; -p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/hqDXUD6csU8f9Z5wkbLZ7JvYWxATqtc8S9U7eXlrwav8BQNmcgNGlSXbAdibNcXWtJGOhXC59aQkRl1mXcB852e3ESWGCibibl2/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;170&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1. 绑 node&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;可以通过 numactl 等工具把进程绑定在某个 node 以及对应的 CPU 上，这样该进程只会从该本地 node 上分配内存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;但这样做也有相应的弊端，比如：该 node 剩余内存不够时，进程也无法从其他 node 上分配内存，只能期待内存回收后释放足够的内存，而如果进入直接内存回收会阻塞内存分配，就会有一定的性能损耗。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此外，进程组的线程数较多时，如果都绑定在一个 node 的 CPU 上，可能会造成 CPU 瓶颈，该损耗可能比远端 node 内存访问还大，比如 ngnix 进程与网卡就推荐绑定在不同的 node 上，这样虽然网卡收包时分配的内存在远端 node 上，但减少了本地 node 的 CPU 上的网卡中断，反而可以获得更好的性能提升。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/hqDXUD6csU8f9Z5wkbLZ7JvYWxATqtc8S9U7eXlrwav8BQNmcgNGlSXbAdibNcXWtJGOhXC59aQkRl1mXcB852e3ESWGCibibl2/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;170&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2. numa balancing&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;内核还提供了 numa balancing 机制，可以通过 /proc/sys/kernel/numa_balancing 文件或者 cmdline 参数 numa_balancing=进行开启。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;该机制可以动态的将进程访问的 page 从远端 node 迁移到本地 node 上，从而使进程可以尽可能的访问本地内存。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但该机制实现也有相应的代价，在 page 的迁移是通过 Page Fault 机制实现的，会有相应的性能损耗；另外如果迁移时找不到合适的目标 node，可能还会把进程迁移到正在访问的 page 的 node 的 CPU 上，这可能还会导致 cpu cache miss，从而对性能造成更大的影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;因此需要根据业务进程的具体行为，来决定是否开启 numa balancing 功能&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;性能优化一直是大家关注的话题，其优化方向涉及到 CPU 调度、内存、IO等，本文重点针对内存优化提出了几点思路。但是鱼与熊掌不可兼得，文章提到的调优操作都有各自的优点和缺点，不存在一个适用于所有情况的优化方法。&lt;span&gt;&lt;strong&gt;针对于不同的 workload，需要分析出具体的性能瓶颈，从而采取对应的调优方法，不能一刀切的进行设置&lt;/strong&gt;&lt;/span&gt;。在没有发现明显性能抖动的情况下，往往可以继续保持当前配置。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>