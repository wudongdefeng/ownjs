<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e3f9152d94963169872d509e91fd57ee</guid>
<title>分布式系统下的认证与授权</title>
<link>https://toutiao.io/k/gq6zhrc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot; itemprop=&quot;articleBody&quot;&gt;&amp;#13;
&lt;p&gt;在软件系统设计中，如何让应用能够在各种环境中安全高效的访问是个复杂的问题，这个问题的背后是一系列软件设计时需要考虑的架构安全问题：&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/&quot;&gt;架构安全性 | 凤凰架构&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认证：系统如何识别合法用户，也就是解决 &lt;strong&gt;你是谁&lt;/strong&gt; 的问题；&lt;/li&gt;
&lt;li&gt;授权：系统在识别合法用户后，还需要解决 &lt;strong&gt;你能做什么&lt;/strong&gt; 的问题；&lt;/li&gt;
&lt;li&gt;凭证：系统如何保证它与用户之间的承诺是双方真实意图的体现，是准确、完整且不可抵赖的；&lt;/li&gt;
&lt;li&gt;保密：如何安全的持久化用户的账户信息，确保不会被任何人窃取与滥用；&lt;/li&gt;
&lt;li&gt;传输：在复杂的用户环境中，如何安全的传递用户信息，保证不被第三方窃听、篡改和冒充。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在漫长的架构演进历史中，业界对这些问题已经有很成熟的解决方案。在架构安全这块，最好的是遵循技术标准与最佳实践，尽可能&lt;strong&gt;不重复造轮子或“创新”&lt;/strong&gt;。下面这个思维导图就是针对这些问题的常见的技术标准及方案：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-1-1024x808.png&quot; alt=&quot;架构安全思维导图&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在研究分布式系统的认证和授权问题前，让我们回到单体架构的时代，看看在单体架构上这些问题是如何被解决的。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;单体系统&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-2.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-2-1024x408.png&quot; alt=&quot;单体系统&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;认证&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;认证主要解决 &lt;strong&gt;你是谁&lt;/strong&gt; 的问题，从方式上来看有以下三种：&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/authentication.html&quot;&gt;认证 | 凤凰架构&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于通信信道：建立通信信道之前需要证明 &lt;strong&gt;你是谁&lt;/strong&gt;。在网络传输（Network）场景中的典型是基于 SSL/TLS 传输安全层的认证。&lt;/li&gt;
&lt;li&gt;基于通信协议：在获取资源之前需要证明 &lt;strong&gt;你是谁&lt;/strong&gt;。在互联网（Internet）场景中的典型是基于 HTTP 协议的认证。&lt;/li&gt;
&lt;li&gt;基于通信内容：在提供服务之前需要证明 &lt;strong&gt;你是谁&lt;/strong&gt;。在万维网（World Wide Web）场景中的典型是基于 Web 内容的认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在单体系统时代，认证方式一般是在通信信道上开启 HTTPS，在通信协议上利用 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7235#section-4.2&quot;&gt;HTTP Basic&lt;/a&gt;/&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7616&quot;&gt;Digest&lt;/a&gt;/&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6750&quot;&gt;Bearer&lt;/a&gt;/&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7486&quot;&gt;HOBA&lt;/a&gt;/&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6287&quot;&gt;OCRA&lt;/a&gt; 等方式并在通信内容上结合表单或 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6238&quot;&gt;TOTP&lt;/a&gt; 等的认证组合方式。这样可以从通信的不同阶段获得相应的安全保证。&lt;/p&gt;
&lt;p&gt;如果想对基于 HTTP 协议的认证方式做进一步的了解，可以参考这两篇文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/authentication.html&quot;&gt;认证 | 凤凰架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/api-2/&quot;&gt;细说API - 认证、授权和凭证 - Thoughtworks洞见&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;认证的一个常见应用场景是单点登录。单点登录主要解决了一个一次登录访问多个独立应用的问题。在单点登录方案出现之前，每个应用都需要独立登录维持各自的会话。相关的技术方案已经很成熟，主要有以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4120&quot;&gt;Kerberos-based&lt;/a&gt;：MIT 设计的 SSO 协议，基于对称密码学，并需要一个值得信赖的第三方。其广泛用于操作系统认证，如被 Windows 2000 和后续的操作系统作为默认的认证方法。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apereo.org/projects/cas&quot;&gt;CAS&lt;/a&gt;：Yale 设计的 SSO 协议，基于浏览器的 SSO 方案，部署简单，适用于简单的应用场景。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&quot;&gt;SAML&lt;/a&gt;：基于 XML 标记语言的认证断言方案，适用的场景众多，但技术较复杂。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openid.net/connect/&quot;&gt;OIDC&lt;/a&gt;：在 OAuth2 的基础上额外加一个 JWT 来传递用户信息。功能全面强大，是目前很流行的 SSO 方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;授权&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;授权主要解决 &lt;strong&gt;你能做什么&lt;/strong&gt; 的问题，从方案上来说有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Access-control_list&quot;&gt;ACL&lt;/a&gt;：访问控制列表（Access-control list）广泛用于操作系统内部的文件系统、网络及进程权限控制方面。如在 Linux 中，可通过 &lt;code&gt;getfacl&lt;/code&gt; 获取目录的默认 ACL 设置。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Role-based_access_control&quot;&gt;RBAC&lt;/a&gt;：RBAC 通过将权限属性从 ACL 方案中的单个用户抽取成更为抽象的角色（Role），通过给角色一组权限属性，再将多个角色赋予某个用户，实现了比 ACL 更为灵活强大的权限控制方案。实际上大部分系统的授权方案采用 RBAC 就足够了。但 RBAC 在面临复杂的权限控制需求时可能面临角色爆炸的问题，这时可以考虑采用更细粒度的 ABAC 方案。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Attribute-based_access_control&quot;&gt;ABAC&lt;/a&gt;：ABAC 是比 RBAC 更细粒度的权限控制方案。通过引入一组称为“属性”的特征，包括用户属性、环境属性和资源属性。例如，ABAC 可以对用户的访问做进一步的控制，如只允许在特定的时间或与相关员工相关的某些分支机构进行访问员工信息的操作，而不是让某部门的人员总是能够访问员工信息。但 ABAC 的问题在于初始设置需要定义大量的属性，工作量比 RBAC 要大。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749&quot;&gt;OAuth2&lt;/a&gt;：OAuth2 是为了解决应用系统给第三方系统授权的问题而设计的授权框架。传统的客户端服务器交互模式中，客户端持有资源访问凭证（如用户名密码），服务端验证成功后放行。而在给第三方系统提供资源时，如果给第三方系统资源凭证，可能会带来未知的安全问题，比如凭证泄漏，凭证回收等问题。当应用系统面向第三方系统提供服务时，需要使用此方案。同时因为 OAuth2 做授权的时候一般需要用户登录，也能实现单点登录的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想对授权做进一步的了解，可以参考这篇文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/authorization.html&quot;&gt;授权 | 凤凰架构&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;凭证&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;凭证是为了解决在认证授权后如何承载认证授权信息的问题。在单体应用时代，主流的解决方案是基于 HTTP 协议的 Cookie-Session 机制为代表的服务端状态存储技术。&lt;/p&gt;
&lt;p&gt;由于 HTTP 协议本身是无状态的，要维持一个会话（Session），而不是每次访问都重新认证授权，需要客户端也就是浏览器通过 Cookie 来存储服务器端返回的一个凭证信息，这个凭证信息一般是一串随机的字符串，用来代表用户此次的会话标识。每次请求浏览器都会在 HTTP Header 中携带这个 Cookie 信息，应用拿到这个会话标识后从内存或缓存（Cache）中查询出用户的信息，这样就定位到了具体的用户，实现了会话的维持。&lt;/p&gt;
&lt;p&gt;这套古老的方案存在以下先天优势：&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/credentials.html&quot;&gt;凭证 | 凤凰架构&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态信息都存储于服务器，只要依靠客户端的 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&quot;&gt;同源策略&lt;/a&gt; 和 HTTPS 的传输层安全，保证 Cookie 中的键值不被窃取而出现被冒认身份的情况，就能完全规避掉上下文信息在传输过程中被泄漏和篡改的风险（但 Cookie 方案容易受到 &lt;a href=&quot;https://owasp.org/www-community/attacks/csrf&quot;&gt;CSRF&lt;/a&gt; 攻击，这种可通过 &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation&quot;&gt;CSRF Token&lt;/a&gt; 技术防御）；&lt;/li&gt;
&lt;li&gt;另一大优点是服务端有主动的状态管理能力，可根据自己的意愿随时修改、清除任意上下文信息，譬如很轻易就能实现强制某用户下线的这样功能；&lt;/li&gt;
&lt;li&gt;服务端也很容易实现如统计用户在线这类功能；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一切都很美好，直到我们来到了分布式系统时代。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;分布式系统&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;分布式系统与单体系统的一大区别就是状态管理。分布式系统通过把单体系统中有状态的部分转移到中间件中去管理，从而很容易做到水平扩容，提高系统峰值处理能力。在架构认证和授权部分，分布式和单体并没有什么不同，唯独有变化的在持有状态的凭证部分。&lt;/p&gt;
&lt;p&gt;我们知道单体应用在服务端管理用户会话信息，客户端只持有会话标识。如果服务端要将此用户会话状态转移出去有两种处理思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将用户会话信息继续托管至服务端。此时有几种服务端方案可以选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中心化存储：转移到中间件如 Redis 中去。利用 Redis &lt;a href=&quot;https://redis.io/topics/benchmarks&quot;&gt;极高的并发处理能力&lt;/a&gt;，也可以做到弹性横行扩容。不过可能会带来中间件高可用性维护难的问题，通过租赁云服务商的托管中间件是降低中间件 &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_point_of_failure&quot;&gt;单点故障（SPOF）&lt;/a&gt; 的一种方式；&lt;/li&gt;
&lt;li&gt;会话复制（Session replication）：让各个节点之间采用复制式的 Session，每一个节点中的 Session 变动都会发送到组播地址的其他服务器上，这样某个节点崩溃了，不会中断该节点用户的服务。但 Session 之间组播复制的同步代价高昂，节点越多时，同步成本越高。&lt;/li&gt;
&lt;li&gt;会话粘滞（Sticky session）：通过负载均衡算法如 Nginx 的 &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/&quot;&gt;IP Hash&lt;/a&gt; 算法将来自同一 IP 的请求转发至同一服务。每个服务节点都不重复地保存着一部分用户的状态，如果这个服务崩溃了，里面的用户状态便完全丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么在分布式系统中共享状态就这么困难？这是因为分布式系统中有一个不可能三角的理论：&lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP&lt;/a&gt;。这个理论简单地理解就是因为在分布式系统中，因为网络无法做到绝对的可靠（分区容错性：&lt;strong&gt;P&lt;/strong&gt;artition Tolerance），只能在一致性（&lt;strong&gt;C&lt;/strong&gt;onsistency）和可用性（&lt;strong&gt;A&lt;/strong&gt;vailability）间选择一个。 比如上述的三种服务端方案其实都是牺牲了 CAP 的某个方面。比如第一种中心化存储方案我们放弃了中心化存储的分区容错性，一旦其网络分区，整个集群都会不可用。第二种会话复制方案我们牺牲了可用性，当节点在同步会话数据时，整个服务会短暂的不可用。第三种会话粘滞方案我们牺牲了一致性，一旦某个节点宕机，整个集群的数据会因该节点的数据丢失而达到不一致的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将状态从服务端转移到客户端。Cookie-Session 是一种引用令牌（Reference tokens），也就是客户端持有的是服务端存储的会话引用标识。还有一种自包含令牌（Self-contained tokens），如 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7519.html&quot;&gt;JWT&lt;/a&gt; 就是这种客户端保存会话信息的技术，服务端只是去校验会话信息是否合法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;JWT&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;如果你对 JWT 不了解，可以先看这两篇：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/credentials.html#jwt&quot;&gt;JWT | 凤凰架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pingidentity.com/en/company/blog/posts/2019/jwt-security-nobody-talks-about.html&quot;&gt;The Hard Parts of JWT Security Nobody Talks About&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于 JWT 的 Payload 并未做过多限制，所以很容易产生滥用的问题，并且带来很多误解。比如下面的一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;误把 JWT 当作 Cookie-Session 使用（把 JWT 当作引用令牌使用），会带来未知的隐患。遵循不重复造轮子和“创新”的指导原则，尽可能不要这么做；&lt;/li&gt;
&lt;li&gt;认为 JWT 更安全。虽然 JWT 采用了一定的加密算法签名，使其具备了抗篡改的能力。但其 Payload 大部分都只是采用 &lt;code&gt;base64UrlEncode&lt;/code&gt; 编码，数据并不是加密的。攻击者可以通过 &lt;a href=&quot;https://owasp.org/www-community/attacks/Session_hijacking_attack&quot;&gt;会话劫持（Session hijacking）&lt;/a&gt; 技术拿到 JWT 会话信息，之后通过 &lt;a href=&quot;https://campus.barracuda.com/product/webapplicationfirewall/doc/49058327/session-replay-attack/&quot;&gt;会话重放攻击（Session Replay Attack）&lt;/a&gt; 获取用户资源，所以最佳实践是通过启用 TLS/SSL 来加密通信信道。&lt;/li&gt;
&lt;li&gt;把 JWT 存储到浏览器的 Local Storage 中。此方式很容易受到 &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;XSS&lt;/a&gt; 攻击导致 JWT 泄漏。可通过服务端启用 &lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot;&gt;内容安全策略（CSP）&lt;/a&gt; 来防御这种攻击。&lt;/li&gt;
&lt;li&gt;采用对称加密方式签名（Signature）。对称加密密钥一旦泄漏，会让整个服务的基础设施遭受安全威胁。JWT 支持非对称加密算法，只有签名的服务需要私钥，其他验证 JWT 信息的服务只需要使用公钥即可。&lt;/li&gt;
&lt;li&gt;不校验 JWT 的签名算法。这篇 &lt;a href=&quot;https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/&quot;&gt;Critical vulnerabilities in JSON Web Token libraries&lt;/a&gt; 文章提到 JWT 的一种漏洞，通过 &lt;code&gt;none&lt;/code&gt; 算法规避令牌验证。所以最好每次都验证 JWT header 中的签名算法是否是期望的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相信看了上述的一些问题，你对 JWT 的“简单、安全”有了新的理解。这还没完，JWT 还有以下一些 Cookie-Session 没有的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令牌难以主动失效：JWT 中虽然有 &lt;code&gt;exp&lt;/code&gt;、&lt;code&gt;nbf&lt;/code&gt; 与 &lt;code&gt;iat&lt;/code&gt; 这些和时间相关的属性，但很难在令牌到期之前让令牌失效，比如很难在用户退出登录时立刻让签发的令牌全部失效。虽然可能通过一些“黑名单”的技术解决这个问题，不过相比 Cookie-Session 来说，引入了一定的复杂性；&lt;/li&gt;
&lt;li&gt;令牌数据老旧：很难把签发的令牌全部更新成最新的数据。比如把用户的权限信息（Role）放在 JWT Payload 中，当用户的角色发生变化时，很难把之前签发的令牌信息更新成最新的数据；&lt;/li&gt;
&lt;li&gt;令牌存储：存储在客户端意味着有多种选择：Cookie？Local Storage？如果放在 Cookie 中，为了安全，一般会给 Cookie 设置 &lt;code&gt;http-only&lt;/code&gt; 和 &lt;code&gt;secure&lt;/code&gt; 的属性。但这也会带来一定的不便性，比如客户端要读取 JWT Payload 的内容只能借助服务端 API 接口。如果将 JWT 存储至浏览器 Local Storage，虽然方便了客户端读取，但可能会带来 XSS 攻击的威胁，又需要去设置 CSP 来防御这种威胁；&lt;/li&gt;
&lt;li&gt;令牌大小：JWT 相比 Cookie-Session 还是大不少，尤其是要在 Payload 中存储一些额外的权限信息。一般服务端都有对 HTTP Header 的大小限制；&lt;/li&gt;
&lt;li&gt;网络开销：更大的文本意味着更高的网络开销，进一步会需要更复杂的基础设施，也会产生复杂的运维问题等；&lt;/li&gt;
&lt;li&gt;难以统计：服务端无状态意味着很难做诸如统计用户在线数量的功能；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JWT 解决了 Cookie-Session 方案在分布式系统中因 CAP 的限制而带来的问题，但同时也带来了一些新的问题。所以并不能说 JWT 就是 Cookie-Session 在分布式系统中的完美替代。&lt;/p&gt;
&lt;p&gt;那么 JWT 的最佳使用场景到底是什么？这篇 &lt;a href=&quot;http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/&quot;&gt;Stop using JWT for sessions&lt;/a&gt; 给出了以下的结论：&lt;strong&gt;JWT 更适合作分布式系统中的一次性令牌使用&lt;/strong&gt;。分布式系统继续使用 Cookie-Session 做会话管理，但可以在认证鉴权后生成 JWT 做分布式系统内部服务调用间的一次性令牌。&lt;/p&gt;
&lt;p&gt;让我们通过一个例子来理解下在分布式系统下的认证授权场景。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;一个例子&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-3.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-3-1024x713.png&quot; alt=&quot;分布式系统下的认证授权场景&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;此处Auth服务承担的是授权（Authorization）的职责，而不是认证（Authentication）的职责；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OAuth2在协议中是做授权框架的，但是其一般需要登录授权，也能实现SSO的功能。&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;用户通过 HTTPS 访问我们的应用。当请求发送至微服务网关层（Gateway），网关检测 HTTP Header 中的 Cookie 发现没有 &lt;code&gt;SESSIONID&lt;/code&gt; 这个键值对，重定向至 SSO 登录页面。&lt;/li&gt;
&lt;li&gt;用户通过 SSO 登录我们的应用。&lt;/li&gt;
&lt;li&gt;用户信息存放至 AD/LDAP 等系统中。管理员提前给用户配置好角色权限。&lt;/li&gt;
&lt;li&gt;SSO 集成方案我们选择 OIDC。OIDC 集成了 AD/LDAP，当用户提供正确的用户名和密码后，SSO 重定向至网关。&lt;/li&gt;
&lt;li&gt;网关生成了 &lt;code&gt;SESSIONID&lt;/code&gt; 键值对并通过 HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; 响应给用户浏览器设置了此 Cookie。&lt;/li&gt;
&lt;li&gt;浏览器重新发起带 &lt;code&gt;SESSIONID&lt;/code&gt; Cookie 的请求。网关经过查询其缓存或中间件（如将会话信息存放至 Redis）中的 Session 信息确认了用户的身份信息。之后网关请求 Auth 服务利用其私钥签名生成 JWT 凭证，JWT Payload 中可以存放一部分用户信息和角色信息，这些信息可以从中间件中或 AD/LDAP 中查询出。&lt;/li&gt;
&lt;li&gt;网关之后将此 JWT 凭证通过反向代理转发至内部的 BFF 服务，之后请求到达内部的领域微服务。&lt;/li&gt;
&lt;li&gt;各领域微服务接受到请求后，先从 HTTP Header 中拿出 JWT 凭证。&lt;/li&gt;
&lt;li&gt;在执行真正的业务逻辑前，先利用之前定时从 Auth 服务中同步获取的公钥。
&lt;ol&gt;
&lt;li&gt;Auth 服务通过一个类似 &lt;code&gt;https://&amp;lt;your_domain&amp;gt;/.well-known/jwks.json&lt;/code&gt; 的 API 提供 JWT 公钥的分发。关于 &lt;code&gt;.well-known&lt;/code&gt; 前缀，可阅读 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5785&quot;&gt;RFC 5785&lt;/a&gt; 做进一步了解。在 &lt;code&gt;jwks.json&lt;/code&gt; 文件中，我们可以找到 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7517&quot;&gt;JWK&lt;/a&gt; 或 JSON Web Key，这是我们用来验证签名的公钥。&lt;/li&gt;
&lt;li&gt;校验 JWT 这块逻辑属于微服务共有的部分，一般可以开发一个 SDK 包来做这个通用的工作。为了提高性能，可使用缓存技术，定时从 Auth 中同步公钥。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;获取到公钥后验证成功后拿出 JWT Payload 即可获取到用户信息和角色权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全部流程就是这样，我们得到了以下的一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个流程里我们并没有将 JWT 返回给用户，只是在认证授权过后生成一个一次性的 JWT 令牌凭证用于微服务内部服务间的调用。因为用户的权限信息存放至 JWT Payload 中，内部的服务并不需要从 AD/LDAP 中获取用户权限信息。可能有人觉得内部服务直接从中间件中获取用户会话信息也可以，但这又让我们的应用进一步耦合了中间件，同时也让一个请求链路中产生更多的子请求，不如直接在请求头中存放用户信息的方式高效。&lt;/li&gt;
&lt;li&gt;在微服务内部间传递的是经过非对称加密算法签名的 JWT 凭证，并不是一个 JWT Payload 信息。就算我们的微服务内部被入侵，攻击者也并不能通过篡改凭证中用户的权限信息来搞破坏。这也满足了分布式系统中 &lt;a href=&quot;https://icyfenix.cn/distribution/secure/zero-trust.html&quot;&gt;零信任网络（Zero Trust）&lt;/a&gt; 的部分要求。&lt;/li&gt;
&lt;li&gt;与外部第三方应用的通讯（M2M），可以采用 OAuth2 的方式或 Personal Access Token 这种方式来集成。&lt;/li&gt;
&lt;li&gt;通过引入 SDK 与定时同步公钥的机制，我们引入了一定的复杂度。比如 SDK 在异构编程语言的项目中开发复杂的问题。不过这个问题在云原生系统时代有了不同的解法，让我们之后讨论这个问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;架构总是在演进，也许分布式系统中很多问题我们还没完全解决，就来到了云原生时代。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;云原生系统&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;如果你对云原生应用开发还不了解的话，可以先看看我这篇 &lt;a href=&quot;https://www.bmpi.dev/dev/guide-to-k8s-cloud-native/&quot;&gt;K8S 云原生应用开发小记&lt;/a&gt;。云原生系统其实并不是什么后分布式系统时代。它们两者都是为了解决不同场景的问题而出现的解决方案。&lt;/p&gt;
&lt;p&gt;在认证授权这块，云原生系统的优势在于可以通过 &lt;a href=&quot;https://icyfenix.cn/immutable-infrastructure/mesh/&quot;&gt;服务网格(Service Mesh)&lt;/a&gt; 做一些业务系统中通用的切面工作，比如我们在分布式系统中遇到的校验 JWT 的 SDK 其实就可以放入服务网格中的边车（&lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/sidecars-for-endpoint-security&quot;&gt;Sidecar&lt;/a&gt;）去实现，让业务应用更专注特定领域的业务。&lt;/p&gt;
&lt;p&gt;由于这篇文章并不主要讨论云原生，对这部分感兴趣的可以参考以下两篇文章做进一步了解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/service-mesh-authentication-authorization/&quot;&gt;Service Mesh架构下的认证与授权&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/microservices-authentication-token-management/&quot;&gt;微服务下的身份认证和令牌管理&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;由于篇幅及能力限制，这篇文章我只能从高层次梳理在不同架构演进中认证、授权及凭证这些和架构安全相关的技术的发展过程。由于这些技术涉及了大量的技术标准及实践，很难在一篇文章中对这些技术做详尽的分享，更无法去分享如何实现。但有了这些理论支持和最佳实践，希望能让你在实现的过程中多了一个指引。如果你想进一步了解，可参考文章中的参考文章链接。&lt;/p&gt;
&lt;p&gt;最后，技术总是在不断的发展，但并不是新技术总比老技术“先进”。正如文章中对 Cookie-Session 与 JWT 的分析对比，技术方案总是充满了各种 &lt;code&gt;Trade-off&lt;/code&gt;。而作为一个工程师，我们能做的就是认清这些技术的历史背景及局限性，选择最适合项目需求的技术方案。&lt;/p&gt;
&amp;#13;
&lt;/div&gt;&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a5873e443eaff923a7909d4d7bc9855c</guid>
<title>万字长文带你彻底搞懂什么是 DevOps</title>
<link>https://toutiao.io/k/v4z4vo2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;您好，我是路人，更多优质文章见个人博客：http://itsoku.com&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 日渐成为研发人员耳熟能详的一个组合词，但什么是 DevOps，为什么 DevOps 对于互联网企业如此重要，真正将其思考透彻的人却不多，带着这些困惑，本文将带你一探 DevOps 的起源、原则和实践，让你搞清楚到底何为 DevOps。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 的起源可以追溯到 2008 年，在一次敏捷大会的敏捷基础设施话题组被提及，从起源我们可以了解到 DevOps 的发展跟敏捷软件开发是密不可分的。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 定义&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-type=&quot;png&quot; data-ratio=&quot;0.053125&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 经过这些年的发展，其定义也在不断变化，先来看三段 DevOps 的 wiki 定义。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;1、DevOps 2017 - 2020 年英文 wiki 定义（直译）&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps是一种软件工程文化和实践（Practices），旨在整合软件开发和软件运维。DevOps运动的主要特点是强烈倡导对构建软件的所有环节（从集成、测试、发布到部署和基础架构管理）进行全面的自动化和监控 DevOps 的目标是缩短开发周期，提高部署频率和更可靠地发布，与业务目标保持一致。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;2、DevOps 2021 年英文 wiki 定义（直译）&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 是一系列整合软件开发和软件运维活动的实践（Practices）。目标是缩短软件开发生命周期并使用持续交付提供高质量的软件。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;另：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 与敏捷软件开发是互补关系，DevOps 的许多方面来自于敏捷方法论。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;3、DevOps 中文 wiki 定义&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;提取这三段的共同点，可以看到不论定义如何变化，DevOps 所要实现的目标都是一致的——缩短软件开发生命周期并使用 持续交付 提供高质量的软件。由于持续交付活动中包含了构建、测试和发布等活动，我更倾向于用这个定义，可以更好地缩减定义长度。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;另外可以看到英文直接翻译过来的定义中都包含「实践」 一词，而中文 wiki 经过一定的翻译或本地化后变成了「文化、运动或惯例」，其还更强调开发运维之间沟通合作这一点，因此将最新的英文 wiki 定义与中文 wiki 定义相结合，可以帮助我们更好地理解 DevOps，那么它的最终定义是什么就交由读者朋友自己去领会吧。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 发展背景&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-type=&quot;png&quot; data-ratio=&quot;0.053125&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;为什么 DevOps 会如此热门，时常被人所提及，这与其发展背景是分不开的，主要原因可以概括为以下几点：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;以上主要从企业的角度说明了 DevOps 的发展，这是较为深层次的原因，表层的推动因素包括：容器化技术的发展、微服务架构的发展等等，这些技术上的创新为 DevOps 提供了良好的发展条件，以解决企业面临的这些问题。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 原则与实践&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.053125&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;了解了什么是 DevOps 及其发展原因后，又该如何具体的进行 DevOps 实践，我们采用黄金圈法则来思考这一问题。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5465465465465466&quot; data-type=&quot;jpeg&quot; data-w=&quot;666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/A1HKVXsfHNk5f8BYzosFZZRrXgicicYBzcjbW5zcYia81m3gJvsibLiaZuQSm9R2e1SD8ebhxhmJWl3dicQhTNiaibMQCw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 原则是总体指导思想，实践是具体的执行方法，DevOps 是一个动态的过程，在进行相关实践的时候可以看看其应用了哪些原则，当违背原则的时候需要思考实践的合理性。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 原则&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-type=&quot;png&quot; data-ratio=&quot;0.053125&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 包含以下三大原则：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;流动原则&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;坚持少做&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;产品开始开发时采用 MVP 原则。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;产品迭代时要适时做减法。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;控制任务数量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;减少前置时间，降低测试人员的等待时间。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;任务越多，预估越不准确。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;反馈原则&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;在复杂系统中安全地工作&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;管理复杂的工作，识别出设计和操作的问题；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;群策群力解决问题，从而快速构建新知识；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;在整个组织中，将区域性的知识应用到全局范围；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;领导者要持续培养有以上才能的人。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;持续学习与实验原则&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;建立学习型组织和安全文化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;将日常工作的改进制度化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;把局部发现转化为全局优化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;在日常工作中注入弹性模式&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 实践&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-type=&quot;png&quot; data-ratio=&quot;0.053125&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;基于 DevOps 的相关原则，有与其对应的实践，包括：流动的技术实践、反馈的技术实践和持续学习与实验的技术实践。在应用这些实践之前还需认真设计组织结构，使其有利于实践的开展。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;设计组织结构&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;松耦合架构，提高生产力和安全性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;保持小规模（“两个披萨原则”）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;要使职能导向有效，需要由传统的集中式运维向提供运维服务的方向转变。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5385375494071146&quot; data-type=&quot;png&quot; data-w=&quot;1012&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNk5f8BYzosFZZRrXgicicYBzcc9h5Dvd7r3RyicaMNnVO7K8X7IQTTLC9gZVicD8RdIBqh4icibvwXofqNA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;运维融入项目开发工作&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;流动的技术实践&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;该部分包含以下内容：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;运行部署流水线的基础&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;所有内容做版本控制。&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;自动化和手动测试的脚本；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;支持代码打包、部署、数据库迁移、应用配置的脚本；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;项目相关文件（需求文档、部署过程、发布说明等）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;防火墙配置、服务器配置等脚本。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;应用程序代码版本控制；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;数据库代码版本控制；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;运维配置代码版本控制；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;实现快速可靠的自动化测试&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;持续构建、测试和集成。&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;代码分支持续集成到主干中，并确保通过单元测试、集成测试和验收测试。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;常用工具：Jenkins、TFS、TeamCity、GitLab CI。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;对持续集成的配合：自动化测试工具；一旦失败必须立即解决的文化；代码持续合入到主干，而不是持续在特性分支上工作。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;代码持续集成&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;自动化和低风险发布&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;自动化部署步骤：构建、测试、部署；相关流程包括：&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;代码打包、构建；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;上传 Docker 镜像；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;创建预配置的 Kubernetes 服务；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;自动化单元测试、冒烟测试；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;数据库迁移自动化；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;配置自动化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;将部署和发布解耦&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;部署指在特定环境中安装制定版本的软件。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;发布指将产品特性提供给所有客户或部分客户使用。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;降低发布风险的架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;反馈的技术实践&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;这部分包含以下内容：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;建立遥测系统&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;将建立生产遥测融入日常开发工作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;使用遥测指导问题的解决。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;建立自助访问的可视化遥测信息系统（信息辐射器）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;发现和填补遥测的盲区（建立充分而完整的遥测）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;业务级别：订单量、用户数、流失率、广告展示和点击等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;应用程序级别：事务处理事件、应用程序故障等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;基础架构级别：服务器吞吐量、CPU负载、磁盘使用率等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;客户端软件级别：应用出错和崩溃、客户端的事务处理事件等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;部署流水线级别：流水线状态、部署频率等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;智能告警&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;应用反馈实现安全部署&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;让开发团队自行管理生产服务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;首先由开发团队管理，然后才交由集中的运维团队管理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;运维工程师由生产支持转变为顾问或加入团队，帮助做好部署准备，建立服务发布指南（包括：支持有效的监控、部署可靠、架构能支持快速频繁的部署等）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;为团队分配SRE人员。SRE定位：SRE就是软件开发工程师负责了运维工作，SRE非常稀少，只能分配给最重要的团队。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;应用A/B测试&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;&lt;span&gt;建立评审和协作流程&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;持续学习与实验的技术实践&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;这部分包含以下内容：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;将学习融入日常工作&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;公正文化和学习文化&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;人为错误往往不是问题的根本原因，可能是复杂系统中存在不可避免的设计问题而导致。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;不应该对造成故障的人进行「点名、责备和羞辱」，我们的目标是最大限度地抓住组织学习的机会。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;从学习的角度看待错误、报错、失误、过失等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;相关实践1：在事后分析中，不指责，公正地进行评判，使工程师自己愿意对事情负责，并且热情地帮助其他人避免同样的错误发生；广泛地公开事后分析会议结果。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;相关实践2：在生产环境中引入受控的人为故障（捣乱猴），针对不可避免的问题进行演练。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;创建故障演练日&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;帮助团队模拟和演练事故，使其具备实战能力。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;暴露系统的潜在缺陷。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;将局部经验转化为全局改进&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;运用自动化测试记录和传播知识&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;自动化界面测试，令使用者知道系统如何使用；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;单元测试，令调用者知道方法API如何使用。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;预留组织学习和改进的时间&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;让所有人教学相长&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;所有的工程师都越来越需要某些技能，而不只是开发人员如此。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;越来越多的技术价值流采用了DevOps的原则和模式。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;[每周学习文化] 每周一次的学习时间，每个同伴既要自己学习，又要教别人。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;实践重点&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.053125&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 的实践包含许多内容，提炼了以下重点方便查阅：&lt;span/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;流动原则的实践&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;部署流水线的基础（所有内容做版本控制、在类生产环境按预期工作才算完成）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;实现快速可靠的自动化测试（自动化运行、始终保持流水线处于绿色状态）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;代码持续集成（小批量开发）&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;自动化和低风险发布（自助式部署、部署和发布解耦、采用持续交付）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;降低发布风险的架构（云原生架构）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;反馈原则的实践&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;建立遥测系统（Tracing、Metrics、Logging）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;智能告警（使用统计分析方法和预防故障的告警）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;应用反馈实现安全部署（部署后立即发现问题、共同承担责任）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;应用A/B测试（功能规划中集成A/B测试、使用特性开关）&lt;/span&gt;&lt;span&gt;建立评审和协作流程（同行评审、减少审批流程、结对编程）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;持续学习与实验原则的实践&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;将学习融入日常工作（从学习的角度看待事故、寻找更弱的故障信号）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;将局部经验转化为全局改进（ChatOps、让规范便于执行、非功能性的运维需求）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;预留组织学习和改进的时间（定时偿还技术债务、教学相长、内部教练）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;结语&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.053125&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 的发展与技术的发展相辅相成，也为技术人员提供了更多的学习道路和发展方向，借用一句 DevOps 领袖的话来作为本文的结束语。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;本文整理自笔者分享的 PPT，原文及 PPT 地址：https://github.com/lcomplete/TechShare&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2204545454545455&quot; data-w=&quot;440&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RkqIyCg0bs5eA3lABIgSNCAiaiaXF3XfK77DciajeWbGUJ91ribtXtpsDEzlYeAB4icdIhcSrlEeJM4Kf0FiaS68icE8w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;↓&lt;strong&gt;↓&lt;strong&gt;↓ &lt;/strong&gt;&lt;/strong&gt;点击阅读原文，直达个人博客&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/xe4FY1hGDmq17JSGmvlibgJjT73DIFV5hNpPbbL7bDtKBKyOka9bl1LLiam25MusZplIsuk5l0zQW2Pg1WhvCRJw/?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;193&quot; data-cropy1=&quot;63&quot; data-cropy2=&quot;246&quot; data-fileid=&quot;100014145&quot; data-ratio=&quot;0.9583333333333334&quot; data-type=&quot;jpeg&quot; data-w=&quot;192&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/x0kXIOa6owVWZPKyaM6oCE4YHtIwIicLjFIDeHX6FKElExLvJakC6vZk9b33M8ghbhyg0t8Bts4sh9ia98kC11eA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;你在看吗&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c6d2d89ed83d6ab3d41609d39a616d11</guid>
<title>全面梳理和分析一下相关的 Web 核心配置</title>
<link>https://toutiao.io/k/fp83nnp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h3&gt;&lt;a id=&quot;Spring_Boot__0&quot;/&gt;Spring Boot 提供的自动配置&lt;/h3&gt; 
&lt;p&gt;分析WebMvcAutoConfiguration 及WebMvcProperties 的源码，发现Spring Boot为我们提供了如下自动配置功能。&lt;br/&gt; 自动配置ViewResolver。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;（1）ContentNegotiatingViewResolver：这是一个特殊的ViewResolver, ContentNegotiatingViewResolver 不自己处理View ，而是代理给不同的ViewResolver 来处理，它有最高的优先级。&lt;/li&gt;&lt;li&gt;（2）BeanNameViewResolver：根据Bean的名称来解析视图，如控制器（ @Controller ）中的一个方法的返回值的字符串（视图名）为X，BeanNameView Resolver 去查找名为X的View 来渲染视图。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;定义BeanNameView Resolver 的Bean:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3cb636dfef9337f23e09b5da179bf376.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;定义一个View 的Bean ，名称为jsonView&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/a87cd5a6b54d199fc356c57bbcc1c1e7.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;在控制器中，返回值为字符串jsonView ，它会找Bean 的名称为jsonView 的视图来渲染：&lt;br/&gt; &lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3c353f2bb8e38bfefc12ee365a060d34.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/150ccd3ca8100ef535dc6626606411e8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;（3） IntemalResource View Resolver:&lt;br/&gt; 这个是一个极为常用的ViewResolver，主要通过设置前缀、后缀，以及控制器中方法来返回视图名的字符串，以得到实际页面， Spring Boot 的源码如下：&lt;/li&gt;&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@ConditionalOnMissingBean&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InternalResourceViewResolver&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;defaultViewResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token class-name&quot;&gt;InternalResourceViewResolver&lt;/span&gt; resolver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InternalResourceViewResolver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   resolver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setPrefix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mvcProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrefix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   resolver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setSuffix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mvcProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSuffix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; resolver&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;_34&quot;/&gt;自动配置的静态资源&lt;/h3&gt; 
&lt;p&gt;在自动自己置类的addResourceHandlers 方法中定义了以下静态资源的自动配置。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;(1) 类路径文件：把类路径下的/static 、/public 、/resources 和/META-INF/resources 文件夹下的静态文件直接映射为/**，可以通过http://localhost:8080/**来访问。&lt;/li&gt;&lt;li&gt;(2) webjar：webjar 就是将我们常用的脚本框架封装在jar 包中的jar 包，把webjar 的/META-INF/resources/webjars/下的静态文件映射为/webjar/**，可以通过http://localhost: 8080/webjar/**来访问。&lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;FormatterConverter_41&quot;/&gt;自动配置Formatter和Converter&lt;/h3&gt; 
&lt;p&gt;从WebMvcAutoConfiguration代码中可以看到，只要我们定义了Converter 、GenericConverter 和Formatter 接口的实现类的Bean, 这些 Bean 就会自动注册到Spring 容器中。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addFormatters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FormatterRegistry&lt;/span&gt; registry&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; converter &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getBeansOfType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      registry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addConverter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;converter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;GenericConverter&lt;/span&gt; converter &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getBeansOfType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;GenericConverter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      registry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addConverter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;converter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; formatter &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getBeansOfType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      registry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFormatter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;formatter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;HttpMessageConverters_60&quot;/&gt;HttpMessageConverters&lt;/h3&gt; 
&lt;p&gt;在WebMvcAutoConfiguration 中，注册了messageConverters&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EnableWebMvcConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebMvcProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResourceProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebMvcAutoConfigurationAdapter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpMessageConverters&lt;/span&gt; messageConverters&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;configureMessageConverters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpMessageConverter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; converters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      converters&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;messageConverters&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getConverters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这里直接注入了HttpMessageConverters 的Bean ，这个Bean 是在HttpMessageConvertersAutoConfiguration 类中定义的，我们自动注册的HttpMessageConverter除了Spring MVC 默认的ByteArrayHttpMessageConverter 、StringHttpMessageConverter 、ResourceHttpMessageConverter、SourceHttpMessageConverter、AllEncompassingFormHttpMessageConverter外，在HttpMessageConverters AutoConfiguration 的自动配置文件里还引入了JacksonHttpMessageConverters Configuration 和GsonHttpMessage ConverterConfiguration 。&lt;br/&gt; （1） 若jackson 的jar 包在类路径上，则Spring Boot 通过JacksonHttpMessageConvertersConfiguration 增加MappingJackson2HttpMessage Converter 和Mapping Jackson2XmlHttpMessageConverter;&lt;br/&gt; （2） 若gson 的jar 包在类路径上，则Spring Boot 通过GsonHttpMessageConverterConfiguration 增加GsonHttpMessageConvertera&lt;br/&gt; 在Spring Boot 中，如果要新增自定义的HttpMessageConverter，则只需定义一个你自己的HttpMessageConverters的Bean ，然后在此Bean 中注册自定义HttpMessageConverterBean。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/91c33cc2cff272cec15feb254d2bf90e.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_84&quot;/&gt;静态首页的支持&lt;/h4&gt; 
&lt;p&gt;把静态index.html 文件放在如下目录。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;classpath:/META-INF /resources/index.html&lt;/li&gt;&lt;li&gt;classpath:/resources/index.html&lt;/li&gt;&lt;li&gt;classpath:/static/index.html&lt;/li&gt;&lt;li&gt;classpath:/public/index.html&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;当我们访问应用根目录http://localhost: 8080/时，会直接映射。接管Spring Boot 的Web 配置&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;如果Spring Boot 提供的Spring MVC 不符合要求，则可以通过一个配置类（注解有@Configuration 的类）加上@EnableWebMvc 注解来实现完全自己控制的MVC 配置。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;如果既需要保留Spring Boot 提供的便利，又需要增加自己的额外的配置的时候，可以定义一个配置类并继承WebMvcConfigurer Adapter，无须使用＠EnableWebMvc 注解。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/d4c35a889a4ae516df6d532bb0ce0a36.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/4ff84d005e2f17c4be4b18d516ac09a7.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;在这的addViewControllers 方法，并不会覆盖Web MvcAutoConfiguration 中的addViewControllers，也就是我们自己的配置和Spring Boot 的自动配置同时有效，这是推荐的MVC 配置的方式。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;ServletFilterListener_104&quot;/&gt;注册Servlet、Filter、Listener&lt;/h4&gt; 
&lt;p&gt;可以通过将Servlet 、Filter 和Listener声明为Spring Bean 而达到注册的效果；或者注册ServletRegistrationBean、FilterRegistrationBean 和ServletListenerRegistrationBean 的Bean。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;1___Bean__108&quot;/&gt;（1） 直接注册Bean 示例&lt;/h5&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/bf877448116ee58b273cdd71ac6ef988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;2___RegistrationBean__112&quot;/&gt;（2） 通过RegistrationBean 示例&lt;/h5&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e56d5077b46716685421413e9ca915c3.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/086c33a68d8fb3959a85db1da9f328cb.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;Favicon_117&quot;/&gt;Favicon配置&lt;/h3&gt; 
&lt;p&gt;Spring Boot 提供了一个默认的Favicon ，每次访问应用的时候都能看到。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/96c3e66dca4ec2feda86a641e1858226.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;我们可以在application.properties 中设置关闭Favicon，spring.mvc.favicon.enabled=false ，默认为开启。若需要设置自己的Favicon ，则只需将自己的favicon.ico （文件名不能变动）文件放置在类路径根目录、类路径META-INF/resources/下、类路径resources/下、类路径static/下或类路径public/下。&lt;/p&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e84d945000cdc9ec42b97ef1d06e74e6</guid>
<title>海量请求下的接口并发解决方案</title>
<link>https://toutiao.io/k/vjyeghm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思考并整理分布式业务的解决方案，有问题请帮忙指出，谢谢！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;设定一个场景，假如一个商品接口在某段时间突然上升，会怎么办？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生活中的例子来说，假设冰墩墩在当天晚上上热搜之后，迅速有十几万人去淘宝下单购买，此时并没有做好对该商品的缓存预热以及准备，如何操作？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于这个问题，在电商高并发系统中，对接口的保护一般采用：&lt;span&gt;缓存、限流、降级 来操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设该接口已经接受过风控的处理，过滤掉一半的机器人脚本请求，剩下都是人为的下单请求。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;服务限流&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限流 主要的目的是通过对并发访问/请求进行限速，或者对一个时间窗口内的请求进行限速，一旦达到限制速率则可以拒绝服务、排队或等待、降级等处理。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;限流算法&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;漏斗算法 漏桶算法&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;是当请求到达时直接放入漏桶，如果当前容量已达到上限（限流值），则进行丢弃或其他策略（触发限流策略）。漏桶以固定的速率（根据服务吞吐量）进行释放访问请求（即请求通过），直到漏桶为空。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;漏斗算法的思想就是，不管你来多少请求，我的接口消费速度一定是小于等于流出速率的阈值的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8289124668435013&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXiaukvjR0RDAdzFJk6cpqJGuE7kbRkHwnA9OsWnd6ZHPQ12fWq3ekJJib7FD3L0GUcDsakkElKDR8ZQc655Lzag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;754&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以基于消息队列来实现&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;令牌桶算法 令牌桶算法&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;是程序以v（v = 时间周期 / 限流值）的速度向令牌桶中增加令牌，直到令牌桶满，请求到达时向令牌桶请求令牌，如果获取成功则通过请求，如果获取失败触发限流策略。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;令牌桶算法和漏斗算法的思想差别在于，前者可以允许突发请求的发生。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7530120481927711&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXiaukvjR0RDAdzFJk6cpqJGuE7kbRkHwMhvJoYWNRT0XjFT6Q2rHrbwey9SttHNT6kSDWm3TK7uKibdZeKwa4Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;滑窗算法 滑窗算法&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;是将一个时间周期分为N个小周期，分别记录每个小周期内访问次数，并且根据时间滑动删除过期的小周期。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示，假设时间周期为1分钟，将1分钟再分为2个小周期，统计每个小周期的访问数量，则可以看到，第一个时间周期内，访问数量为75，第二个时间周期内，访问数量为100，如果一个时间周期内所有的小周期总和超过100的话，则会触发限流策略。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28912213740458015&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXiaukvjR0RDAdzFJk6cpqJGuE7kbRkHwJUBF2ic5vGZx5RiabXZJZE7WUgxWQibtG5mk6nFY4pNT8C8iawRxjXYxlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1048&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;span/&gt;Sentinel的实现 和 TCP滑窗。&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接入层限流&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Nginx限流&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Nginx 限流采用的是漏桶算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它可以根据客户端特征，限制其访问频率，客户端特征主要指 IP、UserAgent等。使用 IP 比 UserAgent 更可靠，因为 IP 无法造假，UserAgent 可随意伪造。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;limit_req模块基于IP：Module ngx_http_limit_req_module (nginx.org)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;tgngine：ngx_http_limit_req_module - The Tengine Web Server (taobao.org)&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本地接口限流&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Semaphore&lt;/strong&gt;Java 并发库 的 Semaphore 可以很轻松完成信号量控制，Semaphore 可以控制某个资源可被同时访问的个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们对外提供一个服务接口，允许最大并发数为40，我们可以这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Semaphore permit = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Semaphore(&lt;span class=&quot;code-snippet__number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    permit.acquire();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    permit.release();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;blockquote class=&quot;&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;21&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的 Semaphore 实现参考源码。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分布式接口限流&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;使用消息队列&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不管是用MQ中间件，或是Redis的List实现的消息队列，都可以作为一个 缓冲队列 来使用。思想就是基于漏斗算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当对于一个接口请求达到一定阈值时，就可以启用消息队列来进行接口数据的缓冲，并根据服务的吞吐量来消费数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4116222760290557&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXiaukvjR0RDAdzFJk6cpqJGuE7kbRkHwnfuUeeZwFMAweSc5W1WHgVOqicsvTcW8jxKkoABKqNnvUM4ibqj7XWHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;826&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;服务降级&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在接口做好风控的前提下，发现了接口请求的并发量迅速上升，我们可以启用兜底方案，进行服务降级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一般服务降级应该用来对一些 不重要 或 不紧急 的服务或任务进行服务的&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;延迟使用&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;或&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;暂停使用&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;降级方案&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;停止边缘业务&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如淘宝双11前，就不可以查询三个月前的订单，对边缘业务进行降级，保证核心业务的高可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;拒绝请求&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在接口请求并发量大于阈值，或是接口出现大量失败请求等等突发情况，可以拒绝一些访问请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;拒绝策略&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随机拒绝：随机拒绝超过阈值的请求 。拒绝旧请求：按照请求的时间，优先拒绝更早收到的请求。拒绝非核心请求：根据系统业务设置核心请求清单，将非核心清单内的请求拒绝掉。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;恢复方案&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实现服务降级之后，对于突增流量我们可以继续注册多个消费者服务来应对并发量，之后我们再对一些服务器进行慢加载。&lt;/p&gt;&lt;blockquote class=&quot;&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;13&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;降级具体实现参考其他文章。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据缓存&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在接口做好风控的前提下，发现了接口请求的并发量迅速上升，我们可以分以下几个操作执行：&lt;span/&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;对访问请求使用分布式锁进行阻塞。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在这个短时间中，我们可以将对应操作行的热点数据，缓存在缓存中间件中。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;放行请求后，让所有请求优先操作缓存数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;再将操作的结果通过消息队列发送给消费接口慢慢消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9607577807848444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXiaukvjR0RDAdzFJk6cpqJGuE7kbRkHwUjjJU17pVBEwxehBv7w7PpoCSiclclDibpd2CbroW3jvOORoHA3yvPrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;739&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;缓存问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设我们操作的是一个库存接口，此时数据库中只有100个库存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那假如此时我们将一条数据放入缓存中，如果所有的请求都来访问这个缓存，那它还是被打挂，我们该怎么操作？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;读写分离&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一种想法，读写分离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用Redis的哨兵集群模式来进行主从复制的读写分离操作。读的操作肯定大于写操作，等库存被消费到0时，读操作直接快速失败。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7843822843822844&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXiaukvjR0RDAdzFJk6cpqJGuE7kbRkHwJVWhgNAs9s9NjxuV9iavichW7r1H4DXZdlJXjKUQiacz26ebrX5jpuJQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;858&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二种想法，负载均衡。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在缓存数据后，如果所有请求都来缓存中操作这个库存，不管是加悲观锁还是乐观锁，并发率都很低，此时我们可以对这个库存进行拆分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以参照 ConcurrentHashMap 中的 counterCells 变量的设计思想，将100个库存拆分到10个缓存服务中，每个缓存服务有10个缓存，然后我们再对请求进行负载均衡到各个缓存服务上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是这种方式会有问题，如果大部分用户被hash到同一个缓存上，导致其他缓存没有被消费，却返回没有库存，这是不合理的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8071593533487298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXiaukvjR0RDAdzFJk6cpqJGuE7kbRkHwZOnojHTiczcOvpiaAmpibmcY6Yrt82x7rOkllxKYKm6RFse2fu8wrG4ibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;page cache&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三种想法，page cache。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大部分软件架构其实都用到了这种方法，比如linux内核的硬盘写入、mysql的刷盘等等，即将短时间内的写操作聚合结果写入，所有的写操作在缓存内完成。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>071eb3e6c014e8c3f76f442e2fcb6c90</guid>
<title>编个程序来计算怎么还房贷最合适</title>
<link>https://toutiao.io/k/2e9wmt4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;👆&lt;/span&gt;&lt;span&gt;点击“&lt;/span&gt;&lt;span&gt;博文视点Broadview&lt;/span&gt;&lt;span&gt;”，获取更多书讯&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05669291338582677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nr1VNxfeqxVOw2nPJHVH4xeZibzPY5F4ibOuOZLMsUMrzIibGB6KMw7EurSKv6DkrtLzuhYdBa30A9Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在购房过程中，关于&lt;/span&gt;&lt;span&gt;房贷&lt;/span&gt;&lt;span&gt;的决策肯定&lt;/span&gt;&lt;span&gt;困扰着很多&lt;/span&gt;&lt;span&gt;想买房的读者，比如下面这些非常细节的问题。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;首付多点好，还是少点好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;贷款30年好，还是15年好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;是提前还款合适，还是按计划还完合适？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;确实，一套商品房的贷款动不动就一两百万，如果处理不好，会直接影响我们未来的现金流和生活质量。但你可别忘了，我们理工男在财富管理上有三大优势。本节，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;我就利用我们独有的“工具优势”，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;编程验证各种房贷方案的优缺点，彻底解决你对还房贷方式的疑问。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;影响房贷的因素有哪些？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一&lt;/span&gt;&lt;span&gt;名&lt;/span&gt;&lt;span&gt;“理工男”&lt;/span&gt;&lt;span&gt;，当我们着手解决问题时，要做的第一件事情是什么&lt;/span&gt;&lt;span&gt;？&lt;/span&gt;&lt;strong&gt;&lt;span&gt;就是清晰地定义问题。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“怎么还房贷比较好”，这个问题的表述显然是非常模糊的。那我就来帮你“翻译翻译”，看看怎么更清晰地定义它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个问题其实应该是：&lt;strong&gt;如何确定房贷的首付金额和还款年限，让我们的家庭财富在一个目标期限上最大化？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，我们其实是在解决一个最优化问题。要确定的变量很简单，只有两个，即&lt;strong&gt;首付金额&lt;/strong&gt;和&lt;strong&gt;还款年限&lt;/strong&gt;；优化的目标也很简单，就是指定一个目标期限，比如30年，让我们的家庭财富在这个期限内积累得最多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说实话，这个问题要是放到工程师的算法面试中，都显得太简单了。但就是这样，仍然有大量的读者想不清楚这个问题，还需要求助别人。可见，学习知识固然重要，知道怎么运用知识更重要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;言归正传，定义清楚了问题，我们还得弄明白影响家庭财富的主要变量有哪些，这样才能用编程的方式去优化它。从我的经验出发，我认为&lt;/span&gt;&lt;strong&gt;&lt;span&gt;影响家庭财富的主要变量有下面六项。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房产总价&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房产升值速度&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房贷利率&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;工资收入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;理财收入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;家庭生活支出&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;这六个变量，再加上问题中的两个关键变量——首付金额和还款年限，共同组成了影响家庭财富的所有要素。那剩下的事情就简单了，我们就通过编程来确定，到底如何贷款才能让我们积累的家庭总财富达到最多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;2&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;首付&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;到底是付得多好，还是付得少好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来解决第一个最关键的，也是读者最关心的问题：买房时，我应该多交一点首付，还是应该以最低的首付比例贷款，把余钱留起来呢？我们举例来说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设小Y是一名在北京工作了5年的程序员，他看上了一套位于郊区的小两居，价值350万元。小Y工作这5年，攒了100万元，父母可以支援他100万元，也就是说，他有200万元可以用的购房款。这时问题就来了：他是把200万元全部用作首付，还是只交35%的首付款（122.5万元）？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们已经知道了房产总价这个关键变量，假设还款年限为30年，为了解决首付金额的问题，我们还要考虑上面列出的五个其他要素。这里，我们根据（2021年8月的）客观情况，给出这些变量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房产的升值速度：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;假设每年3%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房贷利率：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;目前是4.65%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;工资收入：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;小Y的工资税后收入是每月3万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;理财收入：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们按永久组合的收益率来算，是6.8%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;家庭生活支出：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;每月5000元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;明确了这些要素，我们就来算一算，在这两种首付方案的前提下，30年后小Y家庭的财富总额分别是多少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过程序进行模拟后，我把得到的结果展示在了图1中。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4691607684529828&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mQf0icvvIdyHiaaWDPvpias3HdrwbX2icazXfjueRssTTYUibNwCNVjJSYHfJR7SgnSpLxU1W4ic4Ckwvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;989&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.21510957324106114&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mQf0icvvIdyHiaaWDPvpias3HM0tLVUnicYTJxNjkkOXp8HBg5nIIgMJKYQBOFNa1XJvEbCOic3gPLrQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1734&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1  不同贷款计划下的30年财富积累对比&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从图1中可以看出，同&lt;/span&gt;&lt;span&gt;样是贷款30年，如果小Y只交122.5万元的首付，留下剩余的77.5万元作为理财款，那么在还完贷款的30年后，他的财富总额会是2998.5万元；&lt;/span&gt;&lt;span&gt;而如果把200万元全部作为首付，他的财富总额是2874.1万元。&lt;/span&gt;&lt;span&gt;低首付方案在30年后的财富总额多出了100多万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过对比，我们似乎可以得出结论，应该是首付交得越少越好。至少在小Y这个案例的场景下，这个结论肯定是正确的。那么是不是说，在所有场景下，都是首付交得越少越好呢？你可以先思考一下，本文还会详细讲这个问题。接下来，我们看第二个关键问题，贷款期限。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;3&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;到底是贷款30年好，还是贷款15年好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了首付的金额，你可能还纠结贷款期限的问题：&lt;/span&gt;&lt;span&gt;到底是贷款30年好，还是贷款15年好呢？&lt;/span&gt;&lt;span&gt;除此之外，对于那些已经有了房贷的读者，在有余钱的情况下，要不要提前还贷呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要回答这两个问题，我们还是要用程序“说话”。我们继续用小Y的例子：在首付款固定为122.5万元的情况下，我们把贷款期限分别调成30年和15年，看看30年后，两种情况下的最终结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再回到图1，观察第二个柱状图和第三个柱状图后会发现：采用这两种贷款方案，最后得到的结果差异很大，贷款15年的财富总额足足少了140多万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个结论确实有点反直觉，按理说，贷款15年，我们还的房贷利息应该比贷款30年低很多，为什么反而少积累了这么多财富呢？原因先不展开说，后面一起详细分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可能还有读者会说：我已经贷款七八年了，也攒了一些闲钱，我在纠结是否应该早点还房贷。那我们就再验证一下“贷款30年，在第15年时一次性还清剩余贷款”这个方案怎么样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从图1中我们看到，这个方案的财富总额是2943.23万元，比最优方案少了55.27万元。所以和按时还款比起来，提前还款的方案其实没什么优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过这几次验证，似乎说明首付越低，还款时间越长，越有利于我们财富的积累和增长。事实到底是不是这样呢？在这个结论的背后，还隐藏着什么别的关键因素吗？下面，我们就来讨论一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;4&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;影响房贷的终极要素是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不知道你有没有注意到，我们在做上面的计算时，默认了小Y的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;理财能力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是比较强的：&lt;/span&gt;&lt;span&gt;能够坚持用永久组合配置自己的所有理财资金，能够产生稳定的6.8%的年化收益。&lt;/span&gt;&lt;span&gt;其实，这个要求对普通人来说是非常高的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果我们假设小Y是一个极端保守的人，只存货币基金或银行定期，他的理财收益率只有3%，那么结论会不同吗？沿用上面的几个贷款方案，只把理财收益率从6.8%修改为3%，看看结果如何。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图2所示，可以惊奇地发现我们的结论逆转了，首付高、还款时间短成了更合适的选项。其实，如果理财收益率降低到3%，上面关于贷款期限和是否提前还贷的结果也会逆转。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有心的读者可能会问：那其他变量呢？比如个人收入、生活支出的改变，会导致结论反转吗？这里就直接说结论了：不会。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;只有理财收益率和房贷利率的关系，是影响房贷方式的终极要素。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用一句话总结就是，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;如果你的稳定理财利率高于房贷贷款利率，那么首付少付、还款年限长合适；反之，如果你的稳定理财利率低于房贷贷款利率，那么首付多付、还款年限短合适。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46130653266331656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mQf0icvvIdyHiaaWDPvpias3HsLPRlwYXZpuNr4yUy87zAgNiciaXdtpL4Q3bstoPt7L3FzJ6VsCkiaWlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;995&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2603076923076923&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mQf0icvvIdyHiaaWDPvpias3H3eicMTtNCicCRsn4pQ4Y21MMqDq6uJkoxFu8s4DkibbFp3vvfaUV22kDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1625&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;图&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt; &lt;span&gt;理财能力较差情况下的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;年&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;财富积累结果&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;对比&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么会这样呢？&lt;/span&gt;&lt;span&gt;除了程序演算的结果告诉了我们这个事实，从逻辑上其实也不难理解。&lt;/span&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;span&gt;如果你少交了50万元首付款，把这些钱拿去理财，是否能够赚到钱？&lt;/span&gt;&lt;span&gt;赚到的钱能否抵消那多出的50万元贷款产生的房贷利息？&lt;/span&gt;&lt;span&gt;如果能抵消，甚至超出，那你还能获得多余的理财收益；&lt;/span&gt;&lt;span&gt;如果不能，那不如趁早还贷，因为你的理财能力不够强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;5&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;结合实际情况选择合适的贷款方案&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，首付付得少还有一些其他的好处。&lt;/span&gt;&lt;span&gt;例如，流动性资金会多一些，能够抓住未来更多的投资机会，能够有现金应对更多不可知的应急事件，等等。&lt;/span&gt;&lt;span&gt;但是，我们并不能简单地说是首付多更好还是少更好，关键是要根据实际情况制定最适合自己的方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拿我的例子来说，我在做买房决策时会做以下两件事。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一件，根据自己的资金情况，严格地控制购房预算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设我现在有200万元购房款，我要把房价和购房款的比例控制在2倍以内，那我的购房预算就是400万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二件，是尽量少付首付，留一些流动资金。例如，我在真正贷款时，即使可以付50%的首付，也会按照35%的比例付首付。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一方面，我对自己的理财能力有足够的信心，相信自己有能力实现超过4.65%的理财收益；另一方面，我目前在美国工作，这里的房贷利率比国内低得多，只有2.65%（截至2022年1月）。在这种利率情况下，如果理财能力强的话，就应该寻求高贷款加理财的组合方案。反之，如果美国房贷利率不断升高（现在已有升高趋势），当利率高过理财收益率时，这里的结论就要反转。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里再强调一下，要结合自己的实际情况选择合适的贷款方案。如果房贷利率进一步上涨，或者当前其他投资标的的收益都不稳定，再或者你对自己的理财能力没有信心，那么多付首付、还款年限短、提前还贷当然是更划算的选择。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;本节介绍的内容，充分发挥了我们理工男的优势，解决了还房贷这个过程中的很多细节问题。最后，再重复一遍我们的结论：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如果你的稳定理财利率高于房贷贷款利率，那么首付少、还款年限长合适；如果你的稳定理财利率低于房贷贷款利率，那么首付多、还款年限短合适。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;思考题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我知道很多人面临着这样的问题：手头的钱只够付最低的首付，还款压力还特别大，每个月还了贷款，就没有多余的钱理财了。结合本文内容，你觉得有没有什么好的方法，能改变这样的处境？例如，通过改变房贷计划来解决或有什么其他的解决方法？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;7&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p data-autoskip=&quot;1&quot;&gt;本文节选自《理工男谈理财：构建受益一生的财富体系》一书，欢迎阅读本书了解更多相关内容！&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mpcps class=&quot;js_editor_new_cps&quot; data-templateid=&quot;list&quot; data-traceid=&quot;e4b27ef1-e0d5-4c32-90d6-93a4a343e158&quot; data-goodssouce=&quot;1&quot; data-pid=&quot;101_13539555&quot; data-appuin=&quot;2395946309&quot; data-buffer=&quot;{&amp;quot;category_id&amp;quot;:10,&amp;quot;pid&amp;quot;:&amp;quot;101_13539555&amp;quot;,&amp;quot;biz_uin&amp;quot;:&amp;quot;2395946309&amp;quot;,&amp;quot;trace_id&amp;quot;:&amp;quot;e4b27ef1-e0d5-4c32-90d6-93a4a343e158&amp;quot;,&amp;quot;sku_id&amp;quot;:&amp;quot;101_13539555&amp;quot;,&amp;quot;source_id&amp;quot;:2,&amp;quot;source_name&amp;quot;:&amp;quot;京东&amp;quot;,&amp;quot;audit_state&amp;quot;:1,&amp;quot;main_img&amp;quot;:&amp;quot;https://pcm-img.zhls.qq.com/productcenter-cf4fa192--1018824-6988664030369236265/16810561102122022/6647c2681357bbd99beca7467676ee87.jpg&amp;quot;,&amp;quot;product_name&amp;quot;:&amp;quot;理工男谈理财：构建受益一生的财富体系&amp;quot;,&amp;quot;current_price&amp;quot;:10990,&amp;quot;first_category_id&amp;quot;:&amp;quot;10&amp;quot;,&amp;quot;product_label_name_list&amp;quot;:[&amp;quot;京东配送&amp;quot;],&amp;quot;select_tag_name_list&amp;quot;:[],&amp;quot;templateId&amp;quot;:&amp;quot;list&amp;quot;,&amp;quot;appuin&amp;quot;:&amp;quot;2395946309&amp;quot;,&amp;quot;isNewCpsKOL&amp;quot;:1}&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;6.621897810218978&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lvtTPFnuXVWCLJkfzsPTXbiaiaPkG27ACVe6XTGsPxElHSZj2ZQ9wyo6EcTF6DzqMPct5aHmHBiaia7Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;5.883280757097792&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lvtTPFnuXVWCLJkfzsPTXbneCJ2XSibyEHeTicOp3dPwAcDzVvQH3lgd2FmXAMgQ0kxanmul4QxwtQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;131&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;131&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nibLUfTfYZX5HTrpdIheibr0fSjl2zRSlPChntQibntly3KmguL1DYqVTiaexXE8ibLLs2jOCMtuwVGwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-width=&quot;131px&quot; title=&quot;理工男二维码.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;限时下单立减50，快快扫码抢购吧！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p draggable=&quot;true&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;发布：刘恩惠&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;审核：陈歆懿&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3ntPMYAJur3UuYzhSDgO7Puv74VHDtgNjyJbpQvt1gicgSpjrlpDy6BheYoAmtjiaF7cdIuPkuUlFkw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1920&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;29.8961937716263&quot; data-ratio=&quot;0.01574074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3ntPMYAJur3UuYzhSDgO7Pu8DQL5f0FQIuDZC87yrAuNLy4frEdlMeWkthrlzczb0RbMOBQCAwDrA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;如果喜欢本文&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;欢迎&lt;/span&gt; &lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;留言&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;分享至朋友圈&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 三连&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;92644&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt; &lt;strong&gt;热文推荐 &lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;574&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;244&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3m3jibtjia3lCrCvUY6N19QMZ3FjCcpuHouXkdLicQVUiaLicgR8cgSbk7RA8G427GKowhbEvVefuJp53g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;▼点击阅读原文，了解本书详情~&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>