<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>82c8fbbef35399cd2d250fe3411f5045</guid>
<title>#Go 代码风格规范</title>
<link>https://toutiao.io/k/lsltqcp</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot; class=&quot;zh_CN wx_wap_page &amp;#10;&amp;#10;    discuss_tab  appmsg_skin_default appmsg_style_default&quot;&gt;
        

        
        









        



        
        


        





        


        





&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_colon&quot;&gt;: &lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_comma&quot;&gt;，&lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_period&quot;&gt;.&lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_space&quot;&gt; &lt;/span&gt;


&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_type_video&quot;&gt;Video&lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_type_weapp&quot;&gt;Mini Program&lt;/span&gt;


&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_zan_btn_txt&quot;&gt;Like&lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_zan_btn_tips&quot;&gt;，轻点两下取消赞&lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_like_btn_txt&quot;&gt;Wow&lt;/span&gt;
&lt;span aria-hidden=&quot;true&quot; class=&quot;weui-a11y_ref&quot; id=&quot;js_a11y_like_btn_tips&quot;&gt;，轻点两下取消在看&lt;/span&gt;

    &lt;/body&gt;

    
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b542060634ace19651c671bb8b16d93e</guid>
<title>独立开发变现周刊（第83期）：建在Stripe上的应用，年收入70万美元</title>
<link>https://toutiao.io/k/jgeuvrv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;分享独立开发、产品变现相关内容，每周五发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;(合集：https://ezindie.com/weekly )&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;1、novu: 开源消息通知开发框架&lt;/h2&gt;&lt;p&gt;适合产品的开源消息通知基础设施。构建通知系统非常复杂。起初，这似乎只是发送一封电子邮件，但实际上，这只是一个开始。今天的用户希望通过电子邮件、短信、推送、聊天和其他渠道获得多渠道的交流体验。一个不断增长的列表每天都会弹出，并且通知散布在代码中。Novu的目标是简化通知，并为开发人员提供工具，以便在产品中快速集成。今年已经获得了6百万美元的种子轮投资。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40858505564387915&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0xsJsmvT8Xrv4teqj37jS3sicSNrplFiaDS4KxjR7pGHeZbpzXQNGaExA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2516&quot;/&gt;&lt;/p&gt;&lt;p&gt;novu开源代码地址&lt;/p&gt;&lt;h2&gt;2、simplyinsurance: 在线保险比价网站&lt;/h2&gt;&lt;p&gt;Sa经营着一家名为Simply Insurance的网站，帮助人们比较保险报价并购买保险。&lt;/p&gt;&lt;p&gt;如果该网站的访问者点击保险公司网站的会员链接，并从他们那里购买保险，Sa就会获得佣金。&lt;/p&gt;&lt;p&gt;Sa在一次播客采访中透露，他的网站已经成立两年了，每月的访问量只有6000人，每月的收入为1.3万至1.5万美元。&lt;/p&gt;&lt;p&gt;在2020年9月的一次采访中，Sa在另一次采访中透露，他的收入高达每月5万美元。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38680781758957655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0uSBwvUk3Bdwtr7dywwR64pyNtJvT7HjPEt1Ll6AhF1rhNvuMOUJaqA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2456&quot;/&gt;&lt;/p&gt;&lt;p&gt;简而言之:&lt;/p&gt;&lt;p&gt;simplyinsurance官网&lt;/p&gt;&lt;h2&gt;3、一些值得参考的Text-to AI项目&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0QqO9qbqDsA92oxibffW6WF8hXWlQG8vVp5KUUwaaJBdjepBUY3TlTKQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3072&quot;/&gt;&lt;/p&gt;&lt;h2&gt;4、Ainter: 一周内从想法到第一个付费用户&lt;/h2&gt;&lt;p&gt;在Fiverr以200美元买了一个糟糕的logo后，我们决定创造一个AI logo图标生成器。两天内我们创造了一个简单的测试版本，并在Reddit社区中发布了下，在Twitter上投放广告(备注:费用仅为20美元)。接下来的5天也是一样:从早上到晚上，我们收到反馈，以最快的速度改进我们的产品。最后，赚到了第一笔钱💰。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44122257053291536&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0XSNWF1Jicf5UPKms3Y5ALFHHKbULN4Pnkhq7gaBcE6HPYLKOFU4MVrg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2552&quot;/&gt;&lt;/p&gt;&lt;p&gt;以下是我们学到的主要经验: 1、根据用户反馈不断改进着陆页面。每天我们都会根据收到的评论和问题改进。在这段时间里，我们的转化率增加了几倍。&lt;/p&gt;&lt;p&gt;Before:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8303464755077659&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0kicuS40kASicU6TicgCQAsXcAZricdJzFuxrmicw0jPo2J0cibHzCm0KEVGg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1674&quot;/&gt;&lt;/p&gt;&lt;p&gt;After:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7244995233555768&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA05ge6TsiaraXfzgmWkqicicWMKbW5G5jWASxHz7R97UqJq2YAIZ2V12wZg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2098&quot;/&gt;&lt;/p&gt;&lt;p&gt;2、大多数人不会只为了5张图片而花钱。他们想要试用产品。是的，我们在发布时没有项目的演示版本。在发布演示版本后，我们看到了大量的用户粘性。3、在现有的基础上开发，会写一些蹩脚的代码。这也是我们能短期内实现验证的原因。4、到处宣传你的产品。尽管事实证明reddit和indie hackers是相对较小的渠道。我们在那里收到了最有价值的反馈。&lt;/p&gt;&lt;p&gt;Ainter.me官网&lt;/p&gt;&lt;h2&gt;5、通过Stripe支付，开发一个年收入70万美元的APP&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9489795918367347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0XNh0a4tyuib9eMhDdEjLXflCPViakhIwsodz1czReUVXsJjOHOwBjLKg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;p&gt;我是Ryan Scherf， payment.co 的创始人，这是一个建立在Stripe支付网关之上的应用程序，用于银行卡的支付。支持iOS和Android，创建了网上商店的客户可以实现收款服务。&lt;/p&gt;&lt;p&gt;这款应用于2015年1月推出，自那以后，它的年交易额已超过7000万美元。对每一次消费收取1%的服务费。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5198237885462555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0lL5v4oPv9p5Xr5ib8kfjh0gcnwRHt4z8LrN5xlYO3cMt413mXOoamdA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2270&quot;/&gt;&lt;/p&gt;&lt;h3&gt;你是怎么想到这个想法的?&lt;/h3&gt;&lt;p&gt;我上的是计算机科学专业。当时我最讨厌开发环境(Java是当时最流行的)，因此我转行做了设计。工作后，我很快意识到，为人们工作并不是我愿意从事的长期职业道路。&lt;/p&gt;&lt;p&gt;2013年，一个曾与我一起开发发票应用的人找到了我，他有一个想法，想在一家初创公司Stripe的基础上开发一款分析应用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5517241379310345&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0AlabfbibMVCBydDILycvop1s0kyvqS6Q4xmQ0s3FF86zPu9aWLa215w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2088&quot;/&gt;&lt;/p&gt;&lt;p&gt;当时，我对Stripe和支付网关一无所知。我有两个4岁和2岁的儿子，刚刚在郊区盖了一栋新房子。&lt;/p&gt;&lt;p&gt;我们的第一款应用Paid于2013年底发布，是Stripe唯一的收益分析应用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33294117647058824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0lh0lLY8jawQeqDdawVVZGVVACnrbTSciaqWhd5azE9KOibe5AY8wtIyQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们看到了巨大的吸引力，但我们却无法想出一种有效的盈利方式。作为设计师和iOS开发者的组合，我们开发应用的一个要求是，我们不想管理后端服务器。特别是计算资源密集型分析数据。&lt;/p&gt;&lt;p&gt;因此，我们决定推出Payment,一款用于收集卡付款的应用程序。这是Stripe提供的一个巨大的机会。Stripe提供了通过他们的API直接收费的功能，但没有开发一个应用程序。由于他们的API的简单性，这一功能将非常容易包含在他们的Dashboard应用程序中，而很容易忽略了这个需求。&lt;/p&gt;&lt;h3&gt;介绍下第一个产品的设计、原型和制造过程&lt;/h3&gt;&lt;p&gt;我和我的搭档之前合作过。我专注于产品设计，他专注于开发。&lt;/p&gt;&lt;p&gt;Payment的第一个版本的设计、构建和测试耗时超过2个月。开发工作于2014年11月开始，并于2015年1月发布。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5410414827890556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0nZX0lKUfv9LaDh6vp5WaK83udhz6fwqpdBfcnxuzJN6MVLdBajJxtg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2266&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们需要MVP做的唯一一件事就是允许一些人创造收款，而我们能够收取费用。这个简单的功能在当时是不可能通过应用程序(建立在Stripe上)实现的。没有读卡器，没有花哨的东西。只是处理一个手动输入的信用卡号码，类似于你在电子购物中所做的。&lt;/p&gt;&lt;h3&gt;描述下启动业务的过程&lt;/h3&gt;&lt;p&gt;我们在发布时没有任何特殊的方法。没有任何宣传，也没有人看到我们的到来。我们选择了“build it and they will come” 的路线。我们一开始只关注iOS，在搜索“Stripe”时，能够找到我们，我们做到了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28823529411764703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0VrKNW83allD2C8MbVcmo34r7bpUL9YuSgy23vSBFungopJVYOH6ZOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;在我们之前的应用(付费应用)中，我们拥有一个包含数千个帐户邮件的用户列表，这些邮件可能对通过应用收费感兴趣，所以我们向他们发送了活动。&lt;/p&gt;&lt;p&gt;在产品发行后的15天里，我们从费用中赚取了184美元。我还记得这是多么令人兴奋，以及这个应用程序的想法是如何突然被验证的。我们需要做的就是让更多人使用。&lt;/p&gt;&lt;p&gt;因为我们都是自己动手，业余时间来做，所以我们没有成本，只有时间。我们都有家庭，有稳定的经济状况。2015年自然增长，那一年我们赚了3.8万美元，我们两个人平分了这些钱。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2917647058823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0L4uXg322CzheQx83Zy78H7lEc8fYlfbE2jfEI1zkP2Sm6vE3qlN7iaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;h3&gt;自推出以来，是什么有效地吸引和留住了客户?&lt;/h3&gt;&lt;p&gt;我发现留住客户的最好方法就是创造他们想要的东西。这听起来很老套，但我一直非常勤奋地想要搞清楚到底要建造什么。我没有一个产品路线图，也没有一个我想要达到的理想产品。我的客户都是真正做生意的人。他们经营多种业务:从私人飞机到出售冲浪板，再到教堂募捐。没有一种产品是万能的。唯一的例外是，他们希望能够以各种方式，非常快地接受信用卡。通过专注于用户体验，我们能够保持应用程序的小而灵活，并且非常容易上手。&lt;/p&gt;&lt;p&gt;你可能想知道这是怎么可能的?我负责所有的客户支持工作。我没有支持团队，也没有回答请求的自动化设备。我为这个应用程序添加了一些非常常见的问题，但除此之外，我会亲自回应每一个客服请求。这让我能够随时了解什么是有效的，什么是无效的，并提前了解经常被要求的功能。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24823529411764705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0pmRibMAzCzXYHZQYKgiaNXkhiaGmOwsIiaiaePthZoRdInLe20ct4o3sjibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;就增长而言，我们主要专注于应用商店(苹果和谷歌Play)，来分发和优化应用。&lt;/p&gt;&lt;p&gt;事实上，我们与Stripe团队的合作已经足够深入，以至于他们的客户经理和支持团队会推荐他们的用户使用我们的应用程序来收款。由于我们是第一个进入市场的，我们看到竞争对手大多是一字不差地照搬我们的描述。目前我们能够进行排名的最重要的术语是“Stripe”，所以我们尝试着尽可能多地包装这个术语(尽管有些竞争对手做得更多)。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3552941176470588&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0nyr3sYeZnfhoNZicrYgLjPucnTXe3nVp0ntjOl4tRHe4nSiayUBIMOnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;由于我们的应用程序严重依赖Stripe账户，我们基本上在所有相关商店购买了关键词“Stripe”的付费广告。有趣的是，我们的关键词“payment”也自然而然地排在了第1位，排在了Venmo、谷歌Pay、PayPal、Zelle等非常受欢迎的服务之前。虽然这给了我们一些下载，但大多数人放弃了，因为他们不知道Stripe账户是什么，也不知道他们为什么需要它。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.164705882352941&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0xNPyMSiaJWrZd67XoF1hmWvJnd6zbo32EKeHfG3gsSibhaa6EQR1RgWw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;h3&gt;你未来的计划是什么样的?&lt;/h3&gt;&lt;p&gt;2018年，我和合作伙伴分开，因为他想专注于其他事情，而我想全身心投入支付业务。这款应用从第一天起就开始盈利，所以从来没有出现过真正的现金流问题。在撰写本文时，这款应用每月的营业额为600万美元，相当于每月6万美元的收益。其中约80%是扣除广告、托管、读卡器库存和其他杂项费用后的利润。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0DBNEqvy5ZLL8F3ZrZJHDZvPFQgFDicZ96OXVJD4unHy8qalMAF20dLw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1184&quot;/&gt;&lt;/p&gt;&lt;p&gt;我仍然是唯一真正的员工，尽管我有几个外包，以不同的能力协助，每周约一天。我仍然在做设计，大部分较小的开发、营销和业务开发。&lt;/p&gt;&lt;p&gt;我设定了一个目标，每月处理1000万美元的Stripe，这是一个相当大的目标，所以专注于增长似乎是正确的下一步。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6552941176470588&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0fp45bh91eZYoibZibKlghA0jTcgVnCcaX5asJTr316YibpL5ADFvhOGVw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;h3&gt;通过创业，你学到了什么特别有用或有益的东西吗?&lt;/h3&gt;&lt;p&gt;我最大的遗憾之一就是没有早点专注于我的事业。我们在赚钱，但我一直把它当作一种业余爱好。我的搭档也这么做了。如果我们花6个月的时间，只专注于建设它，我们可能会大大加快我们现在的进度。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5517241379310345&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0AlabfbibMVCBydDILycvop1s0kyvqS6Q4xmQ0s3FF86zPu9aWLa215w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2088&quot;/&gt;&lt;/p&gt;&lt;p&gt;正如前面所提到的，Stripe当时还处于起步阶段，我们抓住机遇，在这一浪潮中度过了5年多的时间。&lt;/p&gt;&lt;h3&gt;对其他想要起步或刚刚起步的企业家有什么建议?&lt;/h3&gt;&lt;p&gt;我认为任何人能做的最好的事情就是学会如何自己建造它。有了大量的框架，就比以往任何时候都更容易启动和运行一些杂乱无章的东西。不要等到攒了1万美元才去雇佣工程师。如果你不能自己做一些事情，你的钱永远都不够。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4861407249466951&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqnX3rjBia95dbjHImuNrlA0HIX2ojcrkSxZx09VrBh4v4I2RYyxpP8H0lbWv6bcYK2S9phP3Tu8ng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1876&quot;/&gt;&lt;/p&gt;&lt;p&gt;此外，没有完美的时机。你不需要等着辞职，因为其他事情自然会出现。投入工作并发布一些东西是让你从为别人工作的限制中解放自己的唯一方法。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;46&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;pre&gt;&quot;我最大的遗憾之一就是没有早点专注于我的事业。&lt;/pre&gt;&lt;pre&gt;我们在赚钱，但我一直把它当作一种业余爱好。&quot;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649284798&amp;amp;idx=1&amp;amp;sn=6ab28bb4b1ea9f334f8b4af319b3a5c3&amp;amp;chksm=bf2021bf8857a8a96d8715ebe90ad5d4668d09d81e26243417b203fdc6efb5f48af8c08e43f7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;独立开发变现周刊（第82期）：开发一个在线PDF编辑器，年收入50万美元&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;（第82期）：开发一个在线PDF编辑器，年收入50万美元&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649284798&amp;amp;idx=2&amp;amp;sn=24f8fb533dbddf0ee5d2906b144c60f6&amp;amp;chksm=bf2021bf8857a8a93dbc46ad481bf2aea51841c5f670faa45758fb0dcfb3a3a5eb9e7eb9962d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;浏览器扩展课程Manifest V3升级版&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;浏览器扩展课程Manifest V3升级版&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4010582010582011&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqxplJYrINXumqtVdQcxYLtztgN2kZoYgTAbQCTEAkKmiaHicw4eTppCJfz4CibHYl3DTPlE2GmSXpxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加入知识星球，和我一起做自己产品的独立变现，内有独家资料&lt;/span&gt;&lt;br/&gt;&lt;span&gt;星球内分享最新个人实战和经验、成员专属福利&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8481f767357a75b56414d23749290931</guid>
<title>Go1.20 将禁止匿名接口循环导入！这是打破 Go1 兼容性承诺的真实案例。。。</title>
<link>https://toutiao.io/k/1u32tmk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近因为临近新版本发布节点，我在看 Go1.20 的新特性《&lt;span&gt;spec: disallow anonymous interface cycles&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;》，发现了一个比较骚的操作...以前我都没想到可以这么用，还有点意思，分享给大家。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Go 规范中是允许将接口类型（interface{}）内嵌到其他声明的接口当中的，也就是著名的套娃神器：组合。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;套娃接口类型&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 标准库中比较经典的例子如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; ReadCloser &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; Reader&lt;br/&gt; Closer&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Reader &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; Read(p []&lt;span&gt;byte&lt;/span&gt;) (n &lt;span&gt;int&lt;/span&gt;, err error)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Closer &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; Close() error&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上展开是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; ReadCloser &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;     Read(p []&lt;span&gt;byte&lt;/span&gt;) (n &lt;span&gt;int&lt;/span&gt;, err error)&lt;br/&gt;  }&lt;br/&gt; &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;     Close() error&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一切都看起来如此美好，似乎很好的体现了 Go 的优秀之处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计划是赶不上变化的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;匿名接口循环导入&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在现实代码中，这种支持就存在着循环引用的用法。如下简单例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; I &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; m()&lt;br/&gt; &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;     I&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码，声明了接口类型 I，然后又包含了 m()，又包含接口 I。这会是一个 “永动机”，永远都不会停止。在开源的 GitHub 中，也真实存在着。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如项目 &lt;span&gt;gozelus/zelus_rest&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; MySQLDb &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; execSQL&lt;br/&gt; Table(ctx context.Context, name &lt;span&gt;string&lt;/span&gt;) &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;  whereSQL&lt;br/&gt;  insertSQL&lt;br/&gt;  selectSQL&lt;br/&gt;  findSQL&lt;br/&gt;  orderSQL&lt;br/&gt;  clausesSQL&lt;br/&gt; }&lt;br/&gt; Begin() &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;  MySQLDb&lt;br/&gt;  Rollback()&lt;br/&gt;  Commit()&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如项目 &lt;span&gt;vetcher/go-astra&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; ComplexInterface &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; A(a &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;  B()&lt;br/&gt;  ComplexInterface&lt;br/&gt; }) &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;  C()&lt;br/&gt;  D()&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类写法其实非常迷惑人，这意味可以无限嵌套接口，并使用内在的方法。但作者在写这个代码时，可能目的并不是如此，导致被使用者错用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;这有没有问题&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对外宣传简洁好用瀑布式编程的 Go，如此对匿名接口循环导入的支持，是否合规呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实并不然。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;早在 2016 年的 &lt;span&gt;Proposal: Type Aliases&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 中的 Type cycles 部分就对此有所定义：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4iaicia0gzpG4y5DXhu36JUa98gEpLaicEY4RShaialZGDILAkibVMj9O2vrdiaJziazSWXCkkfBbFsTBdDicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在类型别名的提案中明确指出：别名必须能够 &quot;向外展开&quot;，没有办法展开出像 &lt;code&gt;T = *T&lt;/code&gt; 这样的类型别名。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;套用到现在的问题来，如果上面的 T 就是 I（接口类型），那么同理可得 &lt;code&gt;I = *I&lt;/code&gt;，这个过程是永远无法终止的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;社区讨论&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一番激烈讨论后，基于以下几点，决定接纳该提案，也就是在新版本中禁用 Go 匿名接口的循环导入，将其改为有限地扩展所有的嵌入式接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在禁用后，以下三种类似写法都会被拒绝。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一种：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; B &lt;span&gt;interface&lt;/span&gt; { I }&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; I &lt;span&gt;interface&lt;/span&gt; { m() &lt;span&gt;interface&lt;/span&gt; { B } }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二种：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; B = &lt;span&gt;interface&lt;/span&gt;{ I }&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; I &lt;span&gt;interface&lt;/span&gt;{ m() &lt;span&gt;interface&lt;/span&gt;{ B } }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三种：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; B = &lt;span&gt;interface&lt;/span&gt;{ I }&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; I &lt;span&gt;interface&lt;/span&gt;{ m() B }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go1 兼容性承诺&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最核心的是 Go1 兼容性承诺。从任何角度上来讲，&lt;strong&gt;禁用这个特性是破坏性变更（无法向后兼容），绝对是违反兼容性承诺的&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家认为在公共项目库中，基本没有人使用这种匿名接口循环导入的方式，用途很少（几乎为 0）除了上面提到的 gozelus/zelus_rest 项目，并且该模块似乎没什么人引用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;rsc 在综合了利弊后，认为把这个特性干掉，能更好的提高代码简洁性，确立了该特性的禁用，会和以往一样的推进节奏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Go1.20：Go 编译器默认会拒绝这些接口循环，但可以使用 &lt;code&gt;go build -gcflags=all=-d=interfacecycles&lt;/code&gt; 来进行构建，以确保旧代码的正常编译。如果在候选发布期间有人向 Go 团队报告大量损坏，将会取消此更改。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go1.22：等到 1.22 版本后 &lt;code&gt;-d=interfacecycles&lt;/code&gt; 标志将被删除，旧代码将不再构建该特性。如果有人报告问题，将可以讨论或是推迟删除，给予更多的改造时间。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;链式调用模式&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一种经典的设计模式叫：链式调用，也有叫方法链的。例如在 etcd sdk 中，常常会在 Watch、Next 这类相关接口中见到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Go 中可以这么写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Nexter &lt;span&gt;interface&lt;/span&gt; { &lt;br/&gt;    Next(Input) (&lt;span&gt;interface&lt;/span&gt; { Nexter }, error)&lt;br/&gt;    Done() Output&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一旦禁用后，就不能如此匿名嵌套了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会强烈推荐使用如下方式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Nexter &lt;span&gt;interface&lt;/span&gt; { &lt;br/&gt;    Next(Input) (Nexter, error)&lt;br/&gt;    Done() Output&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;包括在 Node 这类节点声明时，也推荐如此：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Node &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; Parent() Node&lt;br/&gt; FirstChild() Node&lt;br/&gt; Children() []Node&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;套娃也得套上名字，不能成为 “无名” 者。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原先支持匿名接口的循环导入，本质上&lt;strong&gt;违背了 Go 一贯的简洁明了的设计理念&lt;/strong&gt;。如果在 Go 工程中用的多，不注意就会产生次生影响，禁了也有好处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前该特性变更的代码已经提交。如果按照 rsc 的计划我们会在 Go1.20 或 Go1.21 看到这个新特性，Go1.22 或 Go1.24 将会正式移除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;值得关注的一点，Go团队为此&lt;strong&gt;打破了对 Go1 兼容性的承诺&lt;/strong&gt;，做出了破坏性变更，在推进方式上采取的是渐进式的模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这仍然值得我们关注，毕竟...破窗效应？&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;推荐阅读&lt;span/&gt;&lt;/h4&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;spec: disallow anonymous interface cycles: &lt;em&gt;https://github.com/golang/go/issues/56103&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;gozelus/zelus_rest: &lt;em&gt;https://github.com/gozelus/zelus_rest/blob/master/core/db/db.go#L20&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;vetcher/go-astra: &lt;em&gt;https://github.com/vetcher/go-astra/blob/master/test/assets/interfaces/source.go#L52&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;Proposal: Type Aliases: &lt;em&gt;https://go.googlesource.com/proposal/+/master/design/18130-type-alias.md#type-cycles&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>56ed2c1a6feb6b7a7d37eb6235f8cd8d</guid>
<title>优质网站同好者周刊（第 095 期） | 倾城博客</title>
<link>https://toutiao.io/k/hjh8on2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&quot;&gt;&lt;code&gt;机器学习&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0&quot;&gt;&lt;code&gt;强化学习&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;OpenAI is an AI research and deployment company. Our mission is to ensure that artificial general intelligence benefits all of humanity.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/openai.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - OpenAI ｜ AI research and deployment company&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://openai.com/&quot;&gt;OpenAI&lt;/a&gt; 是一个人工智慧（AI）研究实验室，由营利组织 OpenAI LP 与母公司非营利组织 OpenAI Inc 所组成，目的是&lt;strong&gt;促进和发展友好的人工智慧，使人类整体受益&lt;/strong&gt;。OpenAI 成立于 2015 年底，总部位于旧金山，组织目标是通过与其他机构和研究者的「自由合作」，向公众开放专利和研究成果。创始人&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BC%8A%E9%9A%86%C2%B7%E9%A9%AC%E6%96%AF%E5%85%8B&quot; title=&quot;伊隆·马斯克&quot;&gt;伊隆·马斯克&lt;/a&gt;以及&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B1%B1%E5%A7%86%C2%B7%E6%9F%AF%E6%9B%BC&quot; title=&quot;山姆·柯曼&quot;&gt;山姆·柯曼&lt;/a&gt;的动机是出于对强人工智慧潜在风险的担忧。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://openai.com/blog/chatgpt/&quot;&gt;ChatGPT&lt;/a&gt; 是由 OpenAI 开发的一个&lt;strong&gt;人工智能聊天机器人程序&lt;/strong&gt;，于 2022 年 11 月推出（异常火爆）。该程序使用基于 GPT-3.5 架构的大型语言模型，并通过人类反馈的 &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0&quot;&gt;强化学习&lt;/a&gt; 进行训练。这种通过人类参与干预以增强 &lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&quot;&gt;机器学习&lt;/a&gt; 的效果，从而获得更为逼真的结果。在训练过程中，人类训练师扮演着用户与人工智能助手的角色。模型在 Microsoft Azure 的超级计算机上训练，并通过近端策略优化算法（proximal policy optimization）进行微调。这种策略优化算法比信任域策略优化（trust region policy optimization）算法更为高效。&lt;/p&gt;&lt;p&gt;与其他多数聊天机器人不同的是， &lt;a href=&quot;https://chat.openai.com/&quot;&gt;ChatGPT&lt;/a&gt; 能够记住与用户之前的对话内容和给它的提示。此外，为了防止 ChatGPT 接受或生成冒犯性言论，输入内容会由审核 API 进行过滤，以减少潜在的种族主义或性别歧视等内容。ChatGPT 也存在一些局限。其奖励模型围绕人类监督而设计，可能导致过度优化，从而影响性能。&lt;/p&gt;&lt;p&gt;在研究预览期间，ChatGPT 的使用是免费的；因此，有让身在海外的朋友帮着注册了账号，并实际体验（很好支持中文，回复内容偏长会骤然截断）；尽管它可能存在些谬误，但与之相聊甚欢；其回复让我感到满意；同时，由于对普通人类的未来思考尚不深彻，也免令人心怀忧虑（有陆续记载于 &lt;a href=&quot;https://memo.lovejade.cn/?shortcutId=2&quot;&gt;半缘修道观&lt;/a&gt; ）。目前感悟：无论是作为开发人员或普通工作者，在努力提升自己同时，类似新的技术，有必要进行了解和思考，并提前“布局”，以便未来&lt;code&gt;崭新时代&lt;/code&gt;到来之际，你我皆可从容应对。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6391e22878b7a1291995ff86&quot;&gt;倾城之链 - OpenAI ｜ AI research and deployment company&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E7%A8%8B%E5%BA%8F%E5%BA%93&quot;&gt;&lt;code&gt;程序库&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Faster subsequent page-loads by prefetching in-viewport links during idle time.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/getquick.link.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Quicklink ｜ ⚡️Faster subsequent page-loads&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://getquick.link/&quot;&gt;Quicklink&lt;/a&gt; ，Chrome 浏览器团队推出的一个开源 JS 库，可以加快打开链接的速度。⚡️ 它通过在空闲时间预取（Prefetching）或预渲染（prerendering）视口内链接来加快后续页面加载；该项目旨在成为站点的&lt;strong&gt;嵌入式解决方案&lt;/strong&gt;，以根据用户视口中的内容预取链接。它所占用体积很好（压缩并开启 &lt;code&gt;gzip&lt;/code&gt; 后，小于 1KB）。&lt;code&gt;quicklink&lt;/code&gt; 的使用非常简单，只需将如下代码片段，您的 Head 或您的 body 标签之前：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/quicklink/2.3.0/quicklink.umd.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
window.addEventListener(&#x27;load&#x27;, () =&amp;gt; {
quicklink.listen()
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，完全可以通过 npm（pnpm、yarn ）安装依赖方式使用；而且，可以跟其他主流框架诸如 React、Vue、搭配使用。&lt;/p&gt;&lt;h3 id=&quot;如何运作&quot;&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C&quot; aria-label=&quot;如何运作 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;如何运作&lt;/h3&gt;&lt;p&gt;Quicklink 尝试使到后续页面的导航加载速度更快。它：&lt;/p&gt;&lt;h3 id=&quot;扩展程序&quot;&gt;&lt;a href=&quot;#%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F&quot; aria-label=&quot;扩展程序 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;扩展程序&lt;/h3&gt;&lt;p&gt;Google 浏览器团队开发了一个 &lt;a href=&quot;https://chrome.google.com/webstore/detail/quicklink-chrome-extensio/epmplkdcjhgigmnjmjibilpmekhgkbeg&quot;&gt;Chrome 扩展程序&lt;/a&gt; ，可以在您访问的每个站点中注入和初始化&lt;code&gt;Quicklink&lt;/code&gt;。该扩展可用于以下目的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;更快地浏览网络。&lt;/li&gt;&lt;li&gt;在实施之前估计对 &lt;code&gt;Quicklink&lt;/code&gt; 站点的潜在影响（请参阅 &lt;a href=&quot;https://getquick.link/measure&quot;&gt;影响测量指南&lt;/a&gt; ）。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;该扩展带有一组要忽略的默认 URL 模式（例如登录、注销等）。您可以通过单击扩展图标并从下拉菜单中选择“选项”来添加更多模式。&lt;/p&gt;&lt;p&gt;您可能想到的顾虑，Google 团队已为您事先考虑；比如，您或可能担心过度预取，&lt;code&gt;quicklink&lt;/code&gt; 提供了多种不同的方式，来限制预取链接的数量，从而为您的应用提供保障。再比如，您可能担心预取广告链接，导致无意中计算针对这些广告展示位置的点击次数，对于 quicklink 也做了考虑（如果是同源广告，即不再 &lt;strong&gt;iframe&lt;/strong&gt; 内部，开发人员需要明确告诉 Quicklink 避免预取这些链接）。更多说明及参数设定，可以参见 &lt;a href=&quot;https://github.com/GoogleChromeLabs/quicklink&quot;&gt;Github quicklink README&lt;/a&gt; 。假如可以判定网页内，用户大概率会点击某些外部网站，基于 &lt;code&gt;Quicklink&lt;/code&gt; 预取或预渲染机制，可以起到很不错的优化效果。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/638f3a4978b7a1291995e8cf&quot;&gt;倾城之链 - Quicklink ｜ ⚡️Faster subsequent page-loads&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E8%BF%90%E7%BB%B4&quot;&gt;&lt;code&gt;运维&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%87%AA%E6%89%98%E7%AE%A1&quot;&gt;&lt;code&gt;自托管&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dash. is a modern and responsive dashboard for your server&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/getdashdot.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Dash | a modern server dashboard&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://getdashdot.com/&quot;&gt;Dash&lt;/a&gt; （或 &lt;strong&gt;dashdot&lt;/strong&gt;）是一个现代服务器仪表板，运行在最新的技术上，设计时考虑到了毛玻璃形态（查看 &lt;a href=&quot;https://dash.mauz.io/&quot;&gt;演示效果&lt;/a&gt; ）。它旨在用于较小的 VPS 和私人服务器。它具有丰富的功能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;支持暗/亮模式；&lt;/li&gt;&lt;li&gt;可定制的小部件；&lt;/li&gt;&lt;li&gt;美丽的动画和风格；&lt;/li&gt;&lt;li&gt;支持多种架构；&lt;/li&gt;&lt;li&gt;很多个性化选项；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Dash：代服务器仪表板；即支持通过浏览器查看服务器信息，包括服务器操作系统、运行时长、处理器、存储、内存、网络等信息；对于个人服务器维护颇有价值。该项目在 &lt;a href=&quot;https://github.com/MauriceNino/dashdot&quot;&gt;Github 开源&lt;/a&gt;，支持自托管，可基于 Docker、Docker Compose、源代码（Node.js、Yarn）快速部署；感兴趣的朋友，可移步至官网以了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/638de4912b7d801bbed26e24&quot;&gt;倾城之链 - Dash | a modern server dashboard&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/WebAssembly&quot;&gt;&lt;code&gt;WebAssembly&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%8F%92%E4%BB%B6&quot;&gt;&lt;code&gt;插件&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%BD%AF%E4%BB%B6&quot;&gt;&lt;code&gt;软件&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Extism is the open source, universal plug-in system. Extend all the software everywhere! Powered by WebAssembly.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/extism.org.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Extism - make all software programmable. Extend from within.&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://extism.org/&quot;&gt;Extism&lt;/a&gt; ，基于 &lt;a href=&quot;https://nicelinks.site/tags/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt; 开源的、通用的插件系统，支持在任何地方扩展所有的软件。支持 JavaScript、C、C++、Python、PHP、Node.js、Ruby、Rust 等编程语言。它具有以下功能特性：&lt;/p&gt;&lt;h3 id=&quot;便于使用&quot;&gt;&lt;a href=&quot;#%E4%BE%BF%E4%BA%8E%E4%BD%BF%E7%94%A8&quot; aria-label=&quot;便于使用 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;便于使用&lt;/h3&gt;&lt;p&gt;利用 WebAssembly 的强大功能和可移植性，Extism 是一个现成的插件系统，只需导入一个库即可。在几天内发货，而不是几周或几个月。&lt;/p&gt;&lt;h3 id=&quot;默认安全&quot;&gt;&lt;a href=&quot;#%E9%BB%98%E8%AE%A4%E5%AE%89%E5%85%A8&quot; aria-label=&quot;默认安全 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;默认安全&lt;/h3&gt;&lt;p&gt;不要担心某些插件代码可能会对您的程序造成什么影响。Extism 以安全为核心原则构建，并完全沙箱化所有插件代码的执行。&lt;/p&gt;&lt;h3 id=&quot;随处可用&quot;&gt;&lt;a href=&quot;#%E9%9A%8F%E5%A4%84%E5%8F%AF%E7%94%A8&quot; aria-label=&quot;随处可用 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;随处可用&lt;/h3&gt;&lt;p&gt;我们灵活的架构独特地允许 Extism 几乎可以在任何地方运行，具有适用于 Python、Node、Ruby、Rust、Go、PHP、C/C++、OCaml 等的惯用主机 SDK。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;Extism 支持为您的项目添加一个灵活、安全的插件系统。服务器、桌面、移动、网络、数据库——应有尽有。&lt;strong&gt;使用户能够通过 3 个简单&lt;/strong&gt;的步骤，即可为您的软件编写和执行安全扩展：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;导入&lt;/strong&gt;：将 Extism Host SDK 作为库依赖项导入到您的代码中。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;整合&lt;/strong&gt;：确定代码中应该运行某些任意逻辑（插件！）的位置，并向您的代码返回一些结果。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;执行&lt;/strong&gt;：在应用程序生命周期中的任何时间加载 WebAssembly 模块，Extism 将在安全沙箱中执行它们，与程序内存完全隔离。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;需要注意 ⚠️ 的是，该项目仍在积极开发中，但它是可用的。该项目在 &lt;a href=&quot;https://github.com/extism/extism&quot;&gt;Github 开源&lt;/a&gt;；如果您想利于 WebAssembly 几何其他编程语言，以优化应用性能，&lt;code&gt;extism&lt;/code&gt; 或可参考。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/638ddc102b7d801bbed26d79&quot;&gt;倾城之链 - Extism - make all software programmable. Extend from within.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;道虽迩，不行不至；事虽小，不为不成&lt;/strong&gt;。其为人也多暇日者，其出入不远矣。── 战国末期 · 荀子（名况，字卿）《荀子·修身》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a0877f94b4574dc1bf6371e5705240ae</guid>
<title>从 Alder Lake 架构峰值测试看 CPU 并行编程新挑战</title>
<link>https://toutiao.io/k/lgu48g2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-pid=&quot;smL6VZxw&quot;&gt;&lt;span&gt;Alder Lake 架构虽然屏蔽掉了 AVX512 系列指令集，但是仍然保留了 AVX VNNI 指令集，可以把它看成是 AVX512 VNNI 指令集的 256 和 128 位子集。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;smL6VZxw&quot;&gt;&lt;span/&gt;&lt;span&gt;但是，它是一个全新的指令集，在编码上与AVX512并不相同，指令需要加上{vex}前缀，否则生成的机器码是AVX512 VNNI的，在不支持AVX512 VNNI的CPU上会报illegal instruction，{vex}前缀表示编译成AVX版本的指令。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;smL6VZxw&quot;&gt;&lt;span/&gt;&lt;span&gt;下面一段代码是测试 AVX VNNI 的 int8 峰值的代码：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cpufp_kernel_x86_avx_vnni_int8:&lt;br/&gt;    vpxor %ymm0, %ymm0, %ymm0&lt;br/&gt;    vpxor %ymm1, %ymm1, %ymm1&lt;br/&gt;    vpxor %ymm2, %ymm2, %ymm2&lt;br/&gt;    vpxor %ymm3, %ymm3, %ymm3&lt;br/&gt;    vpxor %ymm4, %ymm4, %ymm4&lt;br/&gt;    vpxor %ymm5, %ymm5, %ymm5&lt;br/&gt;    vpxor %ymm6, %ymm6, %ymm6&lt;br/&gt;    vpxor %ymm7, %ymm7, %ymm7&lt;br/&gt;    vpxor %ymm8, %ymm8, %ymm8&lt;br/&gt;    vpxor %ymm9, %ymm9, %ymm9&lt;br/&gt;.cpufp.x86.avx.vnni.int8.L1:&lt;br/&gt;    {vex} vpdpbusd %ymm0, %ymm0, %ymm0&lt;br/&gt;    {vex} vpdpbusd %ymm1, %ymm1, %ymm1&lt;br/&gt;    {vex} vpdpbusd %ymm2, %ymm2, %ymm2&lt;br/&gt;    {vex} vpdpbusd %ymm3, %ymm3, %ymm3&lt;br/&gt;    {vex} vpdpbusd %ymm4, %ymm4, %ymm4&lt;br/&gt;    {vex} vpdpbusd %ymm5, %ymm5, %ymm5&lt;br/&gt;    {vex} vpdpbusd %ymm6, %ymm6, %ymm6&lt;br/&gt;    {vex} vpdpbusd %ymm7, %ymm7, %ymm7&lt;br/&gt;    {vex} vpdpbusd %ymm8, %ymm8, %ymm8&lt;br/&gt;    {vex} vpdpbusd %ymm9, %ymm9, %ymm9&lt;br/&gt;    sub &lt;span&gt;$0x1&lt;/span&gt;, %rdi&lt;br/&gt;    jne .cpufp.x86.avx.vnni.int8.L1&lt;br/&gt;    ret&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-pid=&quot;smL6VZxw&quot;&gt;&lt;span&gt;VNNI指令集支持int8和int16两种精度，现在都已加入cpufp的benchmark里。&lt;/span&gt;&lt;span&gt;同时新版本的cpufp可以在编译期（执行build.sh时）识别本机支持的指令集，直接生成支持指令集的benchmark测试，避免了旧版系统编译不了新指令集的问题。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-pid=&quot;smL6VZxw&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;Alder Lake 峰值测试结果与分析&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.02666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJtKEey0hPY533fpibxanI0U85VuicLBnicd9oVaZKApEJqUs2UFnKCgRiaNnvOKeq9HkibP18sxDSwNj7f7ffichBMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;修改后的 cpufp 代码在我的 i7-1280P 上测试结果如下：&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ ./cpufp --thread_pool=[0]&lt;br/&gt;Number Threads: 1&lt;br/&gt;Thread Pool Binding: 0&lt;br/&gt;--------------------------------------------------&lt;br/&gt;| Instruction Set | Data Type | Peak Performance |&lt;br/&gt;| AVX_VNNI        | INT8      | 590.31 GOPS      |&lt;br/&gt;| AVX_VNNI        | INT16     | 295.06 GOPS      |&lt;br/&gt;| FMA             | FP32      | 149.87 GFLOPS    |&lt;br/&gt;| FMA             | FP64      | 74.931 GFLOPS    |&lt;br/&gt;| AVX             | FP32      | 112.39 GFLOPS    |&lt;br/&gt;| AVX             | FP64      | 56.203 GFLOPS    |&lt;br/&gt;| SSE             | FP32      | 56.054 GFLOPS    |&lt;br/&gt;| SSE             | FP64      | 28.001 GFLOPS    |&lt;br/&gt;--------------------------------------------------&lt;br/&gt;$ ./cpufp --thread_pool=[0,2,4,6,8,10]&lt;br/&gt;Number Threads: 6&lt;br/&gt;Thread Pool Binding: 0 2 4 6 8 10&lt;br/&gt;--------------------------------------------------&lt;br/&gt;| Instruction Set | Data Type | Peak Performance |&lt;br/&gt;| AVX_VNNI        | INT8      | 2636.8 GOPS      |&lt;br/&gt;| AVX_VNNI        | INT16     | 1319.1 GOPS      |&lt;br/&gt;| FMA             | FP32      | 670.05 GFLOPS    |&lt;br/&gt;| FMA             | FP64      | 335 GFLOPS       |&lt;br/&gt;| AVX             | FP32      | 502.4 GFLOPS     |&lt;br/&gt;| AVX             | FP64      | 251.2 GFLOPS     |&lt;br/&gt;| SSE             | FP32      | 250.42 GFLOPS    |&lt;br/&gt;| SSE             | FP64      | 125.16 GFLOPS    |&lt;br/&gt;--------------------------------------------------&lt;br/&gt;$ ./cpufp --thread_pool=[12]&lt;br/&gt;Number Threads: 1&lt;br/&gt;Thread Pool Binding: 12&lt;br/&gt;--------------------------------------------------&lt;br/&gt;| Instruction Set | Data Type | Peak Performance |&lt;br/&gt;| AVX_VNNI        | INT8      | 114.89 GOPS      |&lt;br/&gt;| AVX_VNNI        | INT16     | 57.445 GOPS      |&lt;br/&gt;| FMA             | FP32      | 57.444 GFLOPS    |&lt;br/&gt;| FMA             | FP64      | 28.723 GFLOPS    |&lt;br/&gt;| AVX             | FP32      | 28.723 GFLOPS    |&lt;br/&gt;| AVX             | FP64      | 14.362 GFLOPS    |&lt;br/&gt;| SSE             | FP32      | 28.312 GFLOPS    |&lt;br/&gt;| SSE             | FP64      | 14.361 GFLOPS    |&lt;br/&gt;--------------------------------------------------&lt;br/&gt;$ ./cpufp --thread_pool=[12-19]&lt;br/&gt;Number Threads: 8&lt;br/&gt;Thread Pool Binding: 12 13 14 15 16 17 18 19&lt;br/&gt;--------------------------------------------------&lt;br/&gt;| Instruction Set | Data Type | Peak Performance |&lt;br/&gt;| AVX_VNNI        | INT8      | 867.99 GOPS      |&lt;br/&gt;| AVX_VNNI        | INT16     | 434 GOPS         |&lt;br/&gt;| FMA             | FP32      | 434 GFLOPS       |&lt;br/&gt;| FMA             | FP64      | 217 GFLOPS       |&lt;br/&gt;| AVX             | FP32      | 217.01 GFLOPS    |&lt;br/&gt;| AVX             | FP64      | 108.5 GFLOPS     |&lt;br/&gt;| SSE             | FP32      | 216.39 GFLOPS    |&lt;br/&gt;| SSE             | FP64      | 108.5 GFLOPS     |&lt;br/&gt;--------------------------------------------------&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p data-pid=&quot;Gv7aey9j&quot;&gt;&lt;span&gt;第一个表格是单个大核的执行结果，可以看到如下特性：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p data-pid=&quot;Gv7aey9j&quot;&gt;&lt;span&gt;AVX VNNI 指令集的 int8 吞吐，是 FMA 指令集（CPU 最大浮点吞吐指令）中fp32 的 4 倍；&lt;/span&gt;&lt;span&gt;int16 则是 fp32 的 2 倍，与其他支持 dp4a 类指令架构非常一致。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-pid=&quot;Gv7aey9j&quot;&gt;&lt;span&gt;SSE指令是AVX指令对应精度类型的正好1/2吞吐，这个与以往在intel先前架构也吻合。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-pid=&quot;Gv7aey9j&quot;&gt;&lt;span&gt;AVX 指令和 FMA 指令对比，对应精度类型的吞吐大约是 3/4 (&lt;/span&gt;&lt;mn&gt;&lt;span&gt;112.39&lt;/span&gt;&lt;/mn&gt;&lt;mo&gt;&lt;span&gt;÷&lt;/span&gt;&lt;/mo&gt;&lt;mn&gt;&lt;span&gt;149.87&lt;/span&gt;&lt;/mn&gt;&lt;mo&gt;&lt;span&gt;≈&lt;/span&gt;&lt;/mo&gt;&lt;mn&gt;&lt;span&gt;74.99&lt;/span&gt;&lt;/mn&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;&lt;span&gt;%)&lt;/span&gt;&lt;/mi&gt;&lt;span&gt;。这就与 Intel 前面几代架构有了较大的差别。我在另外一台 10 代 Comet Lake 架构 CPU（桌面 Skylake 架构的某改 ya 良 gao 版）上测试的结果如下：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ ./cpufp --thread_pool=[0]&lt;br/&gt;Number Threads: 1&lt;br/&gt;Thread Pool Binding: 0&lt;br/&gt;--------------------------------------------------&lt;br/&gt;| Instruction Set | Data Type | Peak Performance |&lt;br/&gt;| FMA             | FP32      | 125.93 GFLOPS    |&lt;br/&gt;| FMA             | FP64      | 62.898 GFLOPS    |&lt;br/&gt;| AVX             | FP32      | 62.948 GFLOPS    |&lt;br/&gt;| AVX             | FP64      | 31.491 GFLOPS    |&lt;br/&gt;| SSE             | FP32      | 31.28 GFLOPS     |&lt;br/&gt;| SSE             | FP64      | 15.686 GFLOPS    |&lt;br/&gt;--------------------------------------------------&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-pid=&quot;0JSIBRyi&quot;&gt;&lt;span&gt;可以看出该架构中AVX指令对应浮点类型的吞吐是FMA指令的一半。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;0JSIBRyi&quot;&gt;&lt;span&gt;这是由于，Alder Lake之前的架构，浮点向量乘加类指令集中在port0和port1这两个发射端口（port5作为AVX512唯一完整的发射端口，经常在桌面架构或者低端服务器产品屏蔽掉浮点乘加），这两个端口一般各有一条256位的FMA单元。同时，这两个端口也支持256位的MUL和ADD指令，或者，其中一个端口支持MUL，另一个端口支持ADD。这样我们在测试AVX指令时用到MUL和ADD，分别只有FMA指令一半的吞吐（乘和加各算一次计算，所以乘加相比乘或者加单独的指令就是两倍的浮点吞吐）。然后我们再看一下Alder Lake大核Golden Cove的架构：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7597840755735492&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xNm29D5VjSjFdc1AicYBg2U8XCocSA2tMHOYwE3RBcibadHRlibF3wCrIm8eVicNiar6cegej3gcvCNibhd2UicmT06wA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;741&quot;/&gt;&lt;span&gt;△ Intel 12 代处理器大核 Golden Cove 架构图&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;L6WHLi79&quot;&gt;&lt;span&gt;我们发现 Port5 也多了一条 FastADD 单元（Fast 指的是延迟周期更短）。这样，Golden Cove 在 Port0 和 Port1 各有一条 256 位的 FMA；在 Port0 和 Port1 各有一条 MUL（与 FMA 单元共享）；同时，Port1 和 Port5 各有一条 FastADD。因此 Port1 既可以发射 MUL，也可以发射 FastADD。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;L6WHLi79&quot;&gt;&lt;span&gt;我们的 AVX 指令测试程序是下面这样乘加交换排指令流水的：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;.cpufp.x86.avx.fp32.L1:&lt;br/&gt;    vmulps %ymm12, %ymm12, %ymm0&lt;br/&gt;    vaddps %ymm12, %ymm12, %ymm1&lt;br/&gt;    vmulps %ymm12, %ymm12, %ymm2&lt;br/&gt;    vaddps %ymm12, %ymm12, %ymm3&lt;br/&gt;    vmulps %ymm12, %ymm12, %ymm4&lt;br/&gt;    vaddps %ymm12, %ymm12, %ymm5&lt;br/&gt;    vmulps %ymm12, %ymm12, %ymm6&lt;br/&gt;    vaddps %ymm12, %ymm12, %ymm7&lt;br/&gt;    vmulps %ymm12, %ymm12, %ymm8&lt;br/&gt;    vaddps %ymm12, %ymm12, %ymm9&lt;br/&gt;    vmulps %ymm12, %ymm12, %ymm10&lt;br/&gt;    vaddps %ymm12, %ymm12, %ymm11&lt;br/&gt;    sub &lt;span&gt;$0x1&lt;/span&gt;, %rdi&lt;br/&gt;    jne .cpufp.x86.avx.fp32.L1&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-pid=&quot;MEjSEqot&quot;&gt;&lt;span&gt;执行的时候，第一个周期发射乘加乘，第二个周期发射加乘加，第三个周期又是发射乘加乘... 以此类推。三个端口支持乘和加1:2和2:1两种比例，都可以填满流水线。这样浮点吞吐量正好是两条FMA流水线的3/4，算是近几代 Intel 架构里一个不小的改进，为AVX和SSE（SSE就是简单地复用AVX的一半计算单元）优化的重型浮点程序，可以在Golden Cove上获得相当的性能提升（IPC提升）。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;EPDAAK74&quot;&gt;&lt;span&gt;第二个表格，是6个大核的测试，由于低功耗版处理器的限制，多核频率达不到单核的6倍，所以整体计算吞吐没有达到6倍，表现算是正常。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;6Jicj4n0&quot;&gt;&lt;span&gt;第三个表格是小核心单核，可以看出如下几个特性：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p data-pid=&quot;6Jicj4n0&quot;&gt;&lt;span&gt;AVX VNNI的int8吞吐只有FMA的fp32吞吐的2倍，int16与FP32的吞吐持平，小核的AI能力缩水不少。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-pid=&quot;6Jicj4n0&quot;&gt;&lt;span&gt;小核心的浮点吞吐只有大核心的1/3多一点，一方面因为小核心只有一条FMA流水线，另一方面是频率也有差距。&lt;/span&gt;&lt;span&gt;即便使小核心对比10代Comet Lake处理器，也只有不到1/2的吞吐（频率差距小一些）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-pid=&quot;6Jicj4n0&quot;&gt;&lt;span&gt;小核的AVX指令吞吐只有FMA的一半，与之前的架构一致，比起大核的差距拉的更大了（接近 1/4）。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;blJxW6kb&quot;&gt;&lt;span&gt;再加上 Cache 容量和架构上的精简，小核实现同样计算的效率肯定是不如大核的。所谓小核接近 skylake 的说法，至少在浮点或向量密集型生产力应用上，小核就是鸡肋，帮不上什么忙。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;iuwSE4qu&quot;&gt;&lt;span&gt;第四个表格小核多核吞吐与大核类似，同样也达不到 8 倍。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;D3T7HsWu&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;CPU 并行编程新挑战&lt;/strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.02666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJtKEey0hPY533fpibxanI0U85VuicLBnicd9oVaZKApEJqUs2UFnKCgRiaNnvOKeq9HkibP18sxDSwNj7f7ffichBMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实这个挑战从移动端 arm 架构引入 bigLittle 就开始了，但终究与桌面和服务器端有所不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;移动端SoC发展到今天，高通已经搞出单个SoC里，实现1+2+2+3四种异构核心。一个大核的能力非常强，中间两种中核比较接近，比大核慢1/3到一半左右，小核性能极差，基本只是为了跑一些常规应用时降低功耗。这样的系统环境，再加上由于电池环境导致的小核优先调度策略，使并行编程难如登天。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们为手机和APP业务开发计算密集型应用，在使用多核编程时候问题非常多，要么降频，要么优先调度小核，且没法控制，甚至很多时候大小核需要不同的代码来达到最优性能，根本无法兼顾，所以很多时候只是用单个大核在跑应用，减少复杂性和混沌。还好随着GPU OpenCL/Vulkan环境，以及SoC里面的DSP和AI加速器日趋成熟，我们很多移动端的项目已经大量迁移到这些更高效能的处理器中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是桌面和云端环境，我们终究是希望利用多个CPU核心以提升总的效率。尤其是云端还面临核数众多，NUMA非对称内存访问等问题。&lt;/span&gt;&lt;/section&gt;&lt;p data-pid=&quot;1f4EwSFb&quot;&gt;&lt;span&gt;并行计算在划分任务的时候，通常分为静态划分和动态划分，目标都是为了给不同计算核心分配均匀的负载，以追求线性加速。静态，是按照可并行的线程单元数量，平均划分任务，且在运行时不能改变任务划分方式。动态则是在运行时，根据各个线程的状态，动态分配任务，使多个线程动态调整自己的负载，大致达到均衡状态。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;1f4EwSFb&quot;&gt;&lt;span&gt;前者的好处是方便开发，单个线程执行效率最高，对大多数并行度很好的程序有非常好的并行效果。后者的好处是可以根据运行时的各种突发问题做出调整，防止因条件变化导致任务负载不均。下面这个图展示了这两种调度方式在同构核心和异构大小核环境下的执行模式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.54140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xNm29D5VjSjFdc1AicYBg2U8XCocSA2tM1Aypt1xicM7PGzwOfZ5fsbJRweZuV2GlRWegUXaaSXhTncuqcZXiaxpg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;span&gt;△ 两种调度方式在同构多核和大小核异构情况下的调度结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;aY2RM4-v&quot;&gt;&lt;span&gt;左边展示了同构大核使用静态调度的方式，一般可以取得不错的负载均衡。中间这个图换成2大2小的核心，对于小核心，同样的任务执行时间变长，导致静态调度后，负载不均衡。大小核对于不同任务的执行速度比例也可能不一样（比如大小核分别计算FFT，是2:1的吞吐；计算矩阵乘法可能就变成4:1。甚至同一种计算使用不同参数，这个比例也会改变），很难根据不同架构来分配不同大小的静态任务。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;aY2RM4-v&quot;&gt;&lt;span&gt;唯一的办法，就如最后一张图所示，缩小单个任务的规模，增加任务数量，并进行动态调度，这样不同的处理器核可以根据自己的“胃口”，吃进适合自己的任务量，基本达到平衡。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;UXBtPvIi&quot;&gt;&lt;span&gt;过去的CPU都是同构核心，对于已有的，可以并行的软件和代码，为了开发简便，相当一部分并行的工作都是静态任务划分，比如简单调用 OpenMP 的循环并行。这样很容易造成大小核同时加速这个程序的时候，并行效果并不好。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;-hFXrHTk&quot;&gt;&lt;strong&gt;&lt;span&gt;同时，这种大量小任务动态调度的方式，还有一些问题：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-pid=&quot;nr865zK2&quot;&gt;&lt;span&gt;对于这种调度方式，任务体量越小，数量越多，越容易达到负载均衡，均衡误差也越小。但是很多并行任务的并行度是有限的，可以拆成更细粒度的小任务是有上限的，天然限制了这个方案；同时每个任务有相对固定的拆分成本和调度成本，任务越多，拆分和调度的开销占比就越大。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;gTtKSUHn&quot;&gt;&lt;span&gt;另外，对于优化好流水线的单个计算任务来讲，如果拆成更小的任务，那么就会多出很多进出流水线的开销，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2735069885641677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xNm29D5VjSjFdc1AicYBg2U8XCocSA2tMacV5S8XXL7ic7s2XlOLcu0gSwB3XSVXxcmTXquNzn3HeXGxXjBzpG2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3148&quot;/&gt;&lt;span&gt;△大任务拆成小任务时，总体执行的延迟增加&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;1CVQsYTx&quot;&gt;&lt;span&gt;所以总的来说，静态任务改成大量小任务动态划分和调度的方式，效果有其极限，随着任务拆分越多，延迟变化呈U字形变化，先降低后升高。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.02666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJtKEey0hPY533fpibxanI0U85VuicLBnicd9oVaZKApEJqUs2UFnKCgRiaNnvOKeq9HkibP18sxDSwNj7f7ffichBMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;今后的 CPU 并行编程，我们要面对的困难更多了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了要考虑核心越来越多，NUMA非对称这些问题，还要关注Intel 和 ARM 这些 CPU 大小核的异构任务调度问题。&lt;/span&gt;&lt;span&gt;操作系统对这些问题的解&lt;/span&gt;&lt;span&gt;决能力十分有限，寄希望于新内核对调度系统的改进，其实是缘木求鱼，只要不添乱就好了。&lt;/span&gt;&lt;span&gt;任何严肃的大规模系统软件和生产力系统，都必须自己解决资源的调度和优化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;Intel 最开始引入大小核的目的，其实是想在单核和多核两种场景都可以取得跑分的突破。&lt;/span&gt;&lt;span&gt;但是忽略了对于现有大量遗留软件的适配难度问题，以及开发新软件带来的成本和难度的挑战。&lt;/span&gt;&lt;span&gt;硬件性能的提升，还是尽量不要给软件带来太多负担为好。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>