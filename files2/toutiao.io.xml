<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9d7c940a993023c73b27d03e0eb74eab</guid>
<title>美团面试：这个 SQL 语句加了哪些锁？</title>
<link>https://toutiao.io/k/x1qmbmk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;美团问数据库应该是非常多的，尤其喜欢考手写 SQL 然后问你这个 SQL 语句上面加了哪些锁，你会发现其他厂面试基本很少会这样考，所以很多小伙伴遇到这种问题的时候都是一脸懵逼，这篇文章就来详细总结下 InnoDB 存储引擎中的行锁的加锁规则，并辅以实例解释。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先众所周知，InnoDB 三种行锁：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Record Lock（记录锁）&lt;/strong&gt; ：锁住某一行记录&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Gap Lock（间隙锁）&lt;/strong&gt; ：锁住一段左开右开的区间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Next-key Lock（临键锁）&lt;/strong&gt; ：锁住一段左开右闭的区间&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;哪些语句上面会加行锁？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）对于常见的 DML 语句（如 &lt;code&gt;UPDATE&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt; 和 &lt;code&gt;INSERT&lt;/code&gt; ），InnoDB 会自动给相应的记录行加写锁&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）默认情况下对于普通 &lt;code&gt;SELECT&lt;/code&gt; 语句，InnoDB 不会加任何锁，但是在 Serializable 隔离级别下会加行级读锁&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面两种是隐式锁定，InnoDB 也支持通过特定的语句进行显式锁定：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）&lt;code&gt;SELECT * FROM table_name WHERE ... FOR UPDATE&lt;/code&gt;，加行级写锁&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4）&lt;code&gt;SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE&lt;/code&gt;，加行级读锁&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前置知识就不过多介绍了，在学习具体行锁加锁规则之前，小伙伴们需要记住加锁规则的两条核心：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）查找过程中访问到的对象才会加锁&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这句话该怎么理解？比如有主键 id 为 &lt;code&gt;1 2 3 4 5 ... 10&lt;/code&gt; 的 10 条记录，我们要找到 &lt;code&gt;id = 7&lt;/code&gt; 的记录。注意，查找并不是从第一行开始一行一行地进行遍历，而是根据 B+ 树的特性进行二分查找，所以一般存储引擎只会访问到要找的记录行（&lt;code&gt;id = 7&lt;/code&gt;）的相邻区间&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）加锁的基本单位是 Next-key Lock&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面结合实例帮助大伙分析一条 SQL 语句上面究竟被 InnoDB 自动加上了多少个锁&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设有这么一张 &lt;code&gt;user&lt;/code&gt; 表，&lt;code&gt;id&lt;/code&gt; 为主键（唯一索引），&lt;code&gt;a&lt;/code&gt; 是普通索引（非唯一索引），&lt;code&gt;b&lt;/code&gt;都是普通的列，其上没有任何索引：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id (唯一索引)&lt;/th&gt;&lt;th&gt;a (非唯一索引)&lt;/th&gt;&lt;th&gt;b&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Alice&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Bob&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;Cilly&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;Druid&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;Erik&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例 1：唯一索引等值查询&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们用唯一索引进行等值查询的时候，根据查询的记录是否存在，加锁的规则会有所不同：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当查询的记录是存在的，Next-key Lock 会退化成记录锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当查询的记录是不存在的，Next-key Lock 会退化成间隙锁&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;查询的记录存在&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看个查询的记录存在的案例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;br/&gt;&lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; = &lt;span&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合加锁的两条核心：查找过程中访问到的对象才会加锁 + 加锁的基本单位是 Next-key Lock（左开右闭），我们可以分析出，这条语句的加锁范围是 &lt;code&gt;(20, 25]&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，由于这个唯一索引等值查询的记录 &lt;code&gt;id = 25&lt;/code&gt; 是存在的，因此，Next-key Lock 会退化成记录锁，因此最终的加锁范围是 &lt;code&gt;id = 25&lt;/code&gt; 这一行&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;查询的记录不存在&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看查询的记录不存在的案例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;br/&gt;&lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; = &lt;span&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合加锁的两条核心：查找过程中访问到的对象才会加锁 + 加锁的基本单位是 Next-key Lock（左开右闭），我们可以分析出，这条语句的加锁范围是 &lt;code&gt;(20, 25]&lt;/code&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这里为什么是 &lt;code&gt;(20，25]&lt;/code&gt; 而不是 &lt;code&gt;(20, 22]&lt;/code&gt;，因为 id = 22 的记录不存在呀，InnoDB 先找到 id = 20 的记录，发现不匹配，于是继续往下找，发现 id = 25，因此，id = 25 的这一行被扫描到了，所以整体的加锁范围是 &lt;code&gt;(20, 25]&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于这个唯一索引等值查询的记录 &lt;code&gt;id = 22&lt;/code&gt; 是不存在的，因此，Next-key Lock 会退化成间隙锁，因此最终在主键 id 上的加锁范围是 Gap Lock &lt;code&gt;(20, 25)&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例 2：唯一索引范围查询&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;唯一索引范围查询的规则和等值查询的规则一样，只有一个区别，就是唯一索引的范围查询需要一直向右遍历到第一个不满足条件的记录，下面结合案例来分析：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;br/&gt;&lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &amp;gt;= &lt;span&gt;20&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &amp;lt; &lt;span&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看语句查询条件的前半部分 &lt;code&gt;id &amp;gt;= 20&lt;/code&gt;，因此，这条语句最开始要找的第一行是 &lt;code&gt;id = 20&lt;/code&gt;，结合加锁的两个核心，需要加上 Next-key Lock &lt;code&gt;(15,20]&lt;/code&gt;。又由于 id 是唯一索引，且 id = 20 的这行记录是存在的，因此会退化成记录锁，也就是只会对 &lt;code&gt;id = 20&lt;/code&gt; 这一行加锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看语句查询条件的后半部分 &lt;code&gt;id &amp;lt; 22&lt;/code&gt;，由于是范围查找，就会继续往后找第一个不满足条件的记录，也就是会找到 &lt;code&gt;id = 25&lt;/code&gt; 这一行停下来，然后加 Next-key Lock &lt;code&gt;(20, 25]&lt;/code&gt;，重点来了，但由于 &lt;code&gt;id = 25&lt;/code&gt; 不满足 &lt;code&gt;id &amp;lt; 22&lt;/code&gt;，因此会退化成间隙锁，加锁范围变为 &lt;code&gt;(20, 25)&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，上述语句在主键 id 上的最终的加锁范围是 Record Lock &lt;code&gt;id = 20&lt;/code&gt; 以及 Gap Lock &lt;code&gt;(20, 25)&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例 3：非唯一索引等值查询&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们用非唯一索引进行等值查询的时候，根据查询的记录是否存在，加锁的规则会有所不同：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、当查询的记录是存在的，除了会加 Next-key Lock 外，还会额外加间隙锁（规则是向下遍历到第一个不符合条件的值才能停止），也就是会加两把锁&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;很好记忆，就是要查找记录的左区间加 Next-key Lock，右区间加 Gap lock&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、当查询的记录是不存在的，Next-key Lock 会退化成间隙锁（这个规则和唯一索引的等值查询是一样的）&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;查询的记录存在&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看个查询的记录存在的案例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;br/&gt;&lt;span&gt;where&lt;/span&gt; a = &lt;span&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合加锁的两条核心，这条语句首先会对普通索引 a 加上 Next-key Lock，范围是 &lt;code&gt;(8,16]&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;又因为是非唯一索引等值查询，且查询的记录 &lt;code&gt;a= 16&lt;/code&gt; 是存在的，所以还会加上间隙锁，规则是向下遍历到第一个不符合条件的值才能停止，因此间隙锁的范围是 &lt;code&gt;(16,32)&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，上述语句在普通索引 a 上的最终加锁范围是 Next-key Lock &lt;code&gt;(8,16]&lt;/code&gt; 以及 Gap Lock &lt;code&gt;(16,32)&lt;/code&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;查询的记录不存在&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看查询的记录不存在的案例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;br/&gt;&lt;span&gt;where&lt;/span&gt; a = &lt;span&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合加锁的两条核心，这条语句首先会对普通索引 a 加上 Next-key Lock，范围是 &lt;code&gt;(16,32]&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是由于查询的记录 &lt;code&gt;a = 18&lt;/code&gt; 是不存在的，因此 Next-key Lock 会退化为间隙锁，即最终在普通索引 a 上的加锁范围是 &lt;code&gt;(16,32)&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;案例 4：非唯一索引范围查询&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;范围查询和等值查询的区别在上面唯一索引章节已经介绍过了，就是范围查询需要一直向右遍历到第一个不满足条件的记录，和唯一索引范围查询不同的是，非唯一索引的范围查询并不会退化成 Record Lock 或者 Gap Lock。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;br/&gt;&lt;span&gt;where&lt;/span&gt; a &amp;gt;= &lt;span&gt;16&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; a &amp;lt; &lt;span&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;update&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看语句查询条件的前半部分 &lt;code&gt;a &amp;gt;= 16&lt;/code&gt;，因此，这条语句最开始要找的第一行是 a = 16，结合加锁的两个核心，需要加上 Next-key Lock &lt;code&gt;(8,16]&lt;/code&gt;。虽然非唯一索引 &lt;code&gt;a = 16&lt;/code&gt;的这行记录是存在的，但此时并不会像唯一索引那样退化成记录锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看语句查询条件的后半部分 &lt;code&gt;a &amp;lt; 18&lt;/code&gt;，由于是范围查找，就会继续往后找第一个不满足条件的记录，也就是会找到 &lt;code&gt;id = 32&lt;/code&gt; 这一行停下来，然后加 Next-key Lock &lt;code&gt;(16, 32]&lt;/code&gt;。虽然 &lt;code&gt;id = 32&lt;/code&gt; 不满足 &lt;code&gt;id &amp;lt; 18&lt;/code&gt;，但此时并不会向唯一索引那样退化成间隙锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，上述语句在普通索引 a 上的最终的加锁范围是 Next-key Lock &lt;code&gt;(8, 16]&lt;/code&gt; 和 &lt;code&gt;(16, 32]&lt;/code&gt;，也就是 &lt;code&gt;(8, 32]&lt;/code&gt;。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e8e9da19704288c8cc399354966b5c94</guid>
<title>一文讲尽 Thread 类的源码精髓</title>
<link>https://toutiao.io/k/r3cnj45</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;最近和一个工作了7年的朋友聊天，他跟我说起了他去XXX公司面试的情况，面试官的一个问题把他打懵了！竟然问他：你经常使用Thread类创建线程，那你看过Thread类的源码吗？Thread类创建线程的流程是什么？如何中断一个正在执行的线程？我这个朋友平时觉得Thread类非常简单，自然是没看过Thread类的源码，然后，就没有然后了！！！&lt;/p&gt;&lt;p&gt;所以，我们学习技术不仅需要知其然，更需要知其所以然，今天，我们就一起来简单看看Thread类的源码。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：本文是基于JDK 1.8来进行分析的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Thread类的继承关系&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们可以使用下图来表示Thread类的继承关系。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-ratio=&quot;0.5116772823779193&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/9pYbGqawogNPfDMCvRcaypm7W9jDcu4dyfhZXIsVrw0Fh3SFW7IlTQ306DvvoHlfg0hVSyMmpWDaFKqmLlx2WQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;471&quot;/&gt;&lt;/p&gt;&lt;p&gt;由上图我们可以看出，Thread类实现了Runnable接口，而Runnable在JDK 1.8中被@FunctionalInterface注解标记为函数式接口，Runnable接口在JDK 1.8中的源代码如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@FunctionalInterface&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Runnable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Runnable接口的源码比较简单，只是提供了一个run()方法，这里就不再赘述了。&lt;/p&gt;&lt;p&gt;接下来，我们再来看看@FunctionalInterface注解的源码，如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Documented&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;br/&gt;&lt;span&gt;@Target&lt;/span&gt;(ElementType.TYPE)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;@interface&lt;/span&gt; FunctionalInterface {}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，@FunctionalInterface注解声明标记在Java类上，并在程序运行时生效。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Thread类的源码剖析&lt;/span&gt;&lt;/h2&gt;&lt;h4&gt;&lt;span&gt;Thread类定义&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;Thread在java.lang包下，Thread类的定义如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Runnable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;加载本地资源&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;打开Thread类后，首先，我们会看到在Thread类的最开始部分，定义了一个静态本地方法registerNatives()，这个方法主要用来注册一些本地系统的资源。并在静态代码块中调用这个本地方法，如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;//定义registerNatives()本地方法注册系统资源&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;registerNatives&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;static&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;//在静态代码块中调用注册本地系统资源的方法&lt;/span&gt;&lt;br/&gt;    registerNatives();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;Thread中的成员变量&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;Thread类中的成员变量如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;//当前线程的名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; String name;&lt;br/&gt;&lt;span&gt;//线程的优先级&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;            priority;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Thread         threadQ;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;           eetop;&lt;br/&gt;&lt;span&gt;//当前线程是否是单步线程&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;     single_step;&lt;br/&gt;&lt;span&gt;//当前线程是否在后台运行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;     daemon = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//Java虚拟机的状态&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;     stillborn = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//真正在线程中执行的任务&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Runnable target;&lt;br/&gt;&lt;span&gt;//当前线程所在的线程组&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; ThreadGroup group;&lt;br/&gt;&lt;span&gt;//当前线程的类加载器&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; ClassLoader contextClassLoader;&lt;br/&gt;&lt;span&gt;//访问控制上下文&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; AccessControlContext inheritedAccessControlContext;&lt;br/&gt;&lt;span&gt;//为匿名线程生成名称的编号&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; threadInitNumber;&lt;br/&gt;&lt;span&gt;//与此线程相关的ThreadLocal,这个Map维护的是ThreadLocal类&lt;/span&gt;&lt;br/&gt;ThreadLocal.ThreadLocalMap threadLocals = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//与此线程相关的ThreadLocal&lt;/span&gt;&lt;br/&gt;ThreadLocal.ThreadLocalMap inheritableThreadLocals = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//当前线程请求的堆栈大小，如果未指定堆栈大小，则会交给JVM来处理&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; stackSize;&lt;br/&gt;&lt;span&gt;//线程终止后存在的JVM私有状态&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; nativeParkEventPointer;&lt;br/&gt;&lt;span&gt;//线程的id&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; tid;&lt;br/&gt;&lt;span&gt;//用于生成线程id&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; threadSeqNumber;&lt;br/&gt;&lt;span&gt;//当前线程的状态，初始化为0，代表当前线程还未启动&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; threadStatus = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//由（私有）java.util.concurrent.locks.LockSupport.setBlocker设置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//使用java.util.concurrent.locks.LockSupport.getBlocker访问&lt;/span&gt;&lt;br/&gt;&lt;span&gt;volatile&lt;/span&gt; Object parkBlocker;&lt;br/&gt;&lt;span&gt;//Interruptible接口中定义了interrupt方法，用来中断指定的线程&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; Interruptible blocker;&lt;br/&gt;&lt;span&gt;//当前线程的内部锁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object blockerLock = &lt;span&gt;new&lt;/span&gt; Object();&lt;br/&gt;&lt;span&gt;//线程拥有的最小优先级&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MIN_PRIORITY = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//线程拥有的默认优先级&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; NORM_PRIORITY = &lt;span&gt;5&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;//线程拥有的最大优先级&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAX_PRIORITY = &lt;span&gt;10&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从Thread类的成员变量，我们可以看出，Thread类本质上不是一个任务，它是一个实实在在的线程对象，在Thread类中拥有一个Runnable类型的成员变量target，而这个target成员变量就是需要在Thread线程对象中执行的任务。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;线程的状态定义&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;在Thread类的内部，定义了一个枚举State，如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; State {&lt;br/&gt;   &lt;span&gt;//初始化状态&lt;/span&gt;&lt;br/&gt;    NEW,&lt;br/&gt;   &lt;span&gt;//可运行状态，此时的可运行包括运行中的状态和就绪状态&lt;/span&gt;&lt;br/&gt;    RUNNABLE,&lt;br/&gt;   &lt;span&gt;//线程阻塞状态&lt;/span&gt;&lt;br/&gt;    BLOCKED,&lt;br/&gt;   &lt;span&gt;//等待状态&lt;/span&gt;&lt;br/&gt;    WAITING,&lt;br/&gt;    &lt;span&gt;//超时等待状态&lt;/span&gt;&lt;br/&gt;    TIMED_WAITING,&lt;br/&gt;    &lt;span&gt;//线程终止状态&lt;/span&gt;&lt;br/&gt;    TERMINATED;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个枚举类中的状态就代表了线程生命周期的各状态。我们可以使用下图来表示线程各个状态之间的转化关系。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-ratio=&quot;0.6110671936758894&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9pYbGqawogNPfDMCvRcaypm7W9jDcu4dJzbKQtD3O9HYqk1oSHlCbeK73e7WPV9XqYiaicB3mDb2b3V52QFDL7jQ/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;1265&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;NEW：初始状态，线程被构建，但是还没有调用start()方法。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;RUNNABLE：可运行状态，可运行状态可以包括：运行中状态和就绪状态。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BLOCKED：阻塞状态，处于这个状态的线程需要等待其他线程释放锁或者等待进入synchronized。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;WAITING：表示等待状态，处于该状态的线程需要等待其他线程对其进行通知或中断等操作，进而进入下一个状态。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TIME_WAITING：超时等待状态。可以在一定的时间自行返回。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TERMINATED：终止状态，当前线程执行完毕。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;Thread类的构造方法&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;Thread类中的所有构造方法如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;&quot;Thread-&quot;&lt;/span&gt; + nextThreadNum(), &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(Runnable target)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, target, &lt;span&gt;&quot;Thread-&quot;&lt;/span&gt; + nextThreadNum(), &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;Thread(Runnable target, AccessControlContext acc) {&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, target, &lt;span&gt;&quot;Thread-&quot;&lt;/span&gt; + nextThreadNum(), &lt;span&gt;0&lt;/span&gt;, acc, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(ThreadGroup group, Runnable target)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(group, target, &lt;span&gt;&quot;Thread-&quot;&lt;/span&gt; + nextThreadNum(), &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, name, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(ThreadGroup group, String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(group, &lt;span&gt;null&lt;/span&gt;, name, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(Runnable target, String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, target, name, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(ThreadGroup group, Runnable target, String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(group, target, name, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(ThreadGroup group, Runnable target, String name,&lt;br/&gt;              &lt;span&gt;long&lt;/span&gt; stackSize)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(group, target, name, stackSize);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，我们最经常使用的就是如下几个构造方法了。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;&quot;Thread-&quot;&lt;/span&gt; + nextThreadNum(), &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(Runnable target)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, target, &lt;span&gt;&quot;Thread-&quot;&lt;/span&gt; + nextThreadNum(), &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, name, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(ThreadGroup group, String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(group, &lt;span&gt;null&lt;/span&gt;, name, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(Runnable target, String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(&lt;span&gt;null&lt;/span&gt;, target, name, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt;&lt;span&gt;(ThreadGroup group, Runnable target, String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(group, target, name, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过Thread类的源码，我们可以看出，Thread类在进行初始化的时候，都是调用的init()方法，接下来，我们看看init()方法是个啥。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;init()方法&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(ThreadGroup g, Runnable target, String name, &lt;span&gt;long&lt;/span&gt; stackSize)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    init(g, target, name, stackSize, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(ThreadGroup g, Runnable target, String name,&lt;br/&gt;                  &lt;span&gt;long&lt;/span&gt; stackSize, AccessControlContext acc,&lt;br/&gt;                  &lt;span&gt;boolean&lt;/span&gt; inheritThreadLocals)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//线程的名称为空，抛出空指针异常&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (name == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NullPointerException(&lt;span&gt;&quot;name cannot be null&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br/&gt;    Thread parent = currentThread();&lt;br/&gt;    &lt;span&gt;//获取系统安全管理器&lt;/span&gt;&lt;br/&gt;    SecurityManager security = System.getSecurityManager();&lt;br/&gt;    &lt;span&gt;//线程组为空&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (g == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;//获取的系统安全管理器不为空&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (security != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;//从系统安全管理器中获取一个线程分组&lt;/span&gt;&lt;br/&gt;            g = security.getThreadGroup();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;//线程分组为空，则从父线程获取&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (g == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            g = parent.getThreadGroup();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//检查线程组的访问权限&lt;/span&gt;&lt;br/&gt;    g.checkAccess();&lt;br/&gt;    &lt;span&gt;//检查权限&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (security != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (isCCLOverridden(getClass())) {&lt;br/&gt;            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    g.addUnstarted();&lt;br/&gt;    &lt;span&gt;//当前线程继承父线程的相关属性&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.group = g;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.daemon = parent.isDaemon();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.priority = parent.getPriority();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (security == &lt;span&gt;null&lt;/span&gt; || isCCLOverridden(parent.getClass()))&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.contextClassLoader = parent.getContextClassLoader();&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.contextClassLoader = parent.contextClassLoader;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.inheritedAccessControlContext =&lt;br/&gt;        acc != &lt;span&gt;null&lt;/span&gt; ? acc : AccessController.getContext();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.target = target;&lt;br/&gt;    setPriority(priority);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (inheritThreadLocals &amp;amp;&amp;amp; parent.inheritableThreadLocals != &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.inheritableThreadLocals =&lt;br/&gt;        ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);&lt;br/&gt;    &lt;span&gt;/* Stash the specified stack size in case the VM cares */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.stackSize = stackSize;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//设置线程id&lt;/span&gt;&lt;br/&gt;    tid = nextThreadID();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thread类中的构造方法是被创建Thread线程的线程调用的，此时，调用Thread的构造方法创建线程的线程就是父线程，在init()方法中，新创建的Thread线程会继承父线程的部分属性。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;run()方法&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;既然Thread类实现了Runnable接口，则Thread类就需要实现Runnable接口的run()方法，如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (target != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        target.run();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，Thread类中的run()方法实现非常简单，只是调用了Runnable对象的run()方法。所以，真正的任务是运行在run()方法中的。另外，&lt;span&gt;&lt;strong&gt;需要注意的是：直接调用Runnable接口的run()方法不会创建新线程来执行任务，如果需要创建新线程执行任务，则需要调用Thread类的start()方法。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;start()方法&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;//线程不是初始化状态，则直接抛出异常&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (threadStatus != &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalThreadStateException();&lt;br/&gt;    &lt;span&gt;//添加当前启动的线程到线程组&lt;/span&gt;&lt;br/&gt;    group.add(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;//标记线程是否已经启动&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;boolean&lt;/span&gt; started = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;//调用本地方法启动线程&lt;/span&gt;&lt;br/&gt;        start0();&lt;br/&gt;        &lt;span&gt;//将线程是否启动标记为true&lt;/span&gt;&lt;br/&gt;        started = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;//线程未启动成功&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!started) {&lt;br/&gt;                &lt;span&gt;//将线程在线程组里标记为启动失败&lt;/span&gt;&lt;br/&gt;                group.threadStartFailed(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Throwable ignore) {&lt;br/&gt;            &lt;span&gt;/* do nothing. If start0 threw a Throwable then&lt;br/&gt;                  it will be passed up the call stack */&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;start0&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从start()方法的源代码，我们可以看出：&lt;span&gt;&lt;strong&gt;start()方法使用synchronized关键字修饰，说明start()方法是同步的，它会在启动线程前检查线程的状态，如果不是初始化状态，则直接抛出异常。所以，一个线程只能启动一次，多次启动是会抛出异常的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这里，&lt;span&gt;&lt;strong&gt;也是面试的一个坑：面试官：【问题一】能不能多次调用Thread类的start()方法来启动线程吗？【问题二】多次调用Thread线程的start()方法会发生什么？【问题三】为什么会抛出异常？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;调用start()方法后，新创建的线程就会处于就绪状态（如果没有分配到CPU执行），当有空闲的CPU时，这个线程就会被分配CPU来执行，此时线程的状态为运行状态，JVM会调用线程的run()方法执行任务。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;sleep()方法&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;sleep()方法可以使当前线程休眠，其代码如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;//本地方法，真正让线程休眠的方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; millis)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; millis, &lt;span&gt;int&lt;/span&gt; nanos)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (millis &amp;lt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;timeout value is negative&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (nanos &amp;lt; &lt;span&gt;0&lt;/span&gt; || nanos &amp;gt; &lt;span&gt;999999&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;br/&gt;            &lt;span&gt;&quot;nanosecond timeout value out of range&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (nanos &amp;gt;= &lt;span&gt;500000&lt;/span&gt; || (nanos != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; millis == &lt;span&gt;0&lt;/span&gt;)) {&lt;br/&gt;        millis++;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//调用本地方法&lt;/span&gt;&lt;br/&gt;    sleep(millis);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sleep()方法会让当前线程休眠一定的时间，这个时间通常是毫秒值，这里需要注意的是：&lt;span&gt;&lt;strong&gt;调用sleep()方法使线程休眠后，线程不会释放相应的锁。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;join()方法&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;join()方法会一直等待线程超时或者终止，代码如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;join&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; millis)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;long&lt;/span&gt; base = System.currentTimeMillis();&lt;br/&gt;    &lt;span&gt;long&lt;/span&gt; now = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (millis &amp;lt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;timeout value is negative&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (millis == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (isAlive()) {&lt;br/&gt;            wait(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (isAlive()) {&lt;br/&gt;            &lt;span&gt;long&lt;/span&gt; delay = millis - now;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (delay &amp;lt;= &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            wait(delay);&lt;br/&gt;            now = System.currentTimeMillis() - base;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;join&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; millis, &lt;span&gt;int&lt;/span&gt; nanos)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (millis &amp;lt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;timeout value is negative&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (nanos &amp;lt; &lt;span&gt;0&lt;/span&gt; || nanos &amp;gt; &lt;span&gt;999999&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;br/&gt;            &lt;span&gt;&quot;nanosecond timeout value out of range&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (nanos &amp;gt;= &lt;span&gt;500000&lt;/span&gt; || (nanos != &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; millis == &lt;span&gt;0&lt;/span&gt;)) {&lt;br/&gt;        millis++;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    join(millis);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;join&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;    join(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;join()方法的使用场景往往是启动线程执行任务的线程，调用执行线程的join()方法，等待执行线程执行任务，直到超时或者执行线程终止。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;interrupt()方法&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;interrupt()方法是中断当前线程的方法，它通过设置线程的中断标志位来中断当前线程。此时，如果为线程设置了中断标志位，可能会抛出InteruptedExeption异常，同时，会清除当前线程的中断状态。这种方式中断线程比较安全，它能使正在执行的任务执行能够继续执行完毕，而不像stop()方法那样强制线程关闭。代码如下所示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;interrupt&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; != Thread.currentThread())&lt;br/&gt;        checkAccess();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;synchronized&lt;/span&gt; (blockerLock) {&lt;br/&gt;        Interruptible b = blocker;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (b != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            interrupt0();           &lt;span&gt;// Just to set the interrupt flag&lt;/span&gt;&lt;br/&gt;            b.interrupt(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//调用本地方法中断线程&lt;/span&gt;&lt;br/&gt;    interrupt0();&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;interrupt0&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;作为技术人员，要知其然，更要知其所以然，我那个朋友技术本身不错，各种框架拿来就用，基本没看过常用的框架源码和JDK中常用的API，属于那种CRUD型程序员，这次面试就栽在了一个简单的Thread类上，所以，大家在学会使用的时候，一定要了解下底层的实现才好啊！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>43b1db969bd0e38748cfc99b4eeb1240</guid>
<title>腾讯内部数据治理实践</title>
<link>https://toutiao.io/k/me59jt8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-id=&quot;21706&quot; data-tools=&quot;小蚂蚁编辑器&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;fb7d2&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;fb7d2&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzA5Njk3Njc5Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zKQJJopg9UNNc0BBpMTTMakQVZHWAndEgicgysue8cQdH1Fv6acUo1BIaEbdXC9PNjgAmZVH2CoRW3AnOiaWoyJg/0?wx_fmt=png&quot; data-nickname=&quot;HelloTech&quot; data-alias=&quot;HelloTech&quot; data-signature=&quot;专注于大数据和微服务架构实践，分享来自技术人的一手干货文章，从入门到深入，通过夯实的技术积累和丰富的一线实战经验，充分利用碎片化时间，为你带来最有料的技术分享~&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;本文主要介绍目前腾讯数据治理的所在阶段和实践经验，以及基于目前的经验所沉淀的数据治理平台：&lt;/span&gt;&lt;span&gt;WeData。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;今天的介绍会围绕下面三方面展开：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据治理挑战&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;腾讯内部数据治理实践&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;WeData 数据治理平台能力&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;分享嘉宾｜王浩仙 腾讯云 技术产品&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编辑整理｜聚变 腾讯&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;出品社区｜&lt;/span&gt;DataFun&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据治理挑战&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;首先和大家分享腾讯在数据治理上所面临的挑战。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 数据治理的挑战&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPks1uLxKQmHPQ2QhPWdUr71lUZn69vsq2XmibYzEFAUqF7TKSRArIEqVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在数据治理的过程中会遇到很多问题，我们简单分成三类：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;管理类挑战：数据信息分散在不同的业务部门的业务库中，数据上报也分散在不同的位置，难以对这些分散的数据进行统一的管理。随着数据量的不断增大，如何投入更少的人力去进行数据信息的维护也是一大难题。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术类挑战：我们的数据工程师在收集到数据后，数据的质量该怎么保证？如果数据本身质量不过关，可能带来负面的业务效果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务类挑战：在所有的数据上报之后，底层的业务元信息缺失，无法进行统一的审计或者度量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2. 数据治理“马斯洛的需求层次理论”&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkj6QWUUibFaMMFP005DfFvEQxNtHs8ShEIE5LswxwTKpRicowj1BDCFqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据治理对于不同企业，或者是一个企业在不同的发展阶段，所面临的问题是不一样的，这里进行了一个简单分类：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;时效性：数据采集上来后，我们会关注数据产出的及时性，因为如果数据发生的时效性没有达标的话，对当前的业务判断来讲价值就会降低。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;质量性：在数据已经有了一些闭环应用的基础上，还需要有准确性，完整性，有效性，如此才能保证在数据应用上能达成期望的效果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可用性：如果数据是不可用的，则数据对我们的价值就降低。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;安全性：在数据量很大之后，我们会更多地去关注数据共享或者数据应用，在这个过程中，我们的数据安全如何保障。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;成本：解决问题过程中可能耗费大量人力、物力以及计算资源，我们是否能在解决问题的同时降低成本。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;腾讯内部数据治理实践 &lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1. 腾讯内部业务现状&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkyKlJw5am2M7f0Ddg4p3nu3KP7IJpiagiaZ0RQtNhPFFAkJhCFHDlooxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来介绍腾讯内部的业务现状，腾讯分很多的 BG，包括企业、娱乐、云方向、内容方向。这些涉及数万业务线，数百个产品线，达到 EB 级的数据存储量，拥有数千的数据分析师。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2. 腾讯数据治理三阶段 &lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkO5WcRbP0uepOkcqwYoUUhG0RLyLk9pDLQAjktnOxP0WoBJ2GpknLwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每条业务线虽然不同，但也会有一些共性的地方。从大的方向上我们会分为三个阶段：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第一阶段：数据资产化&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，把数据这个物料变成一个有价值的资产，这才是我们所有的人做数据的一个最核心的目标。把这个目标达成了之后，才能把数据真正利用起来。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第二阶段：降本增效&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，如何把之前我们在做数据资产化过程中消耗的一些资源降下来，把整个投入降低，但是还能保持或者提高数据资产化的效果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第三阶段&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：在前两个阶段都完成之后，会发现可以抽象出来一些通用的东西，把我们内部的经验理念孵化出来，去解决更多的问题，这是&lt;/span&gt;&lt;strong&gt;&lt;span&gt;数据治理平台化产品化的阶段&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3. 腾讯内部实践：腾讯新闻数据资产化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPko83BMEf7t3L41iaASKyiaBhbfjSHLsexetfwjydFTFEP1CtMtmibed61w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据资产化阶段的实践，以腾讯新闻为例，在做数据治理这件事情的时候，最开始我们面临着两大问题：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缺少统一数据规范：各业务数据埋点规范、上报规范、数仓规范、指标规范各异。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据质量难以保障：业务数据仓库庞大，缺乏数据分层及数据模型，数据复用度仅 15%， 存在大量年久失修的数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;针对这两大问题，我们进行了统一的数据资产化，包括统一埋点模型，升级数仓模型，构建指标模型。完成数据生产链路的规范化建设，从埋点到数仓到指标等，梳理完成了适合新闻的管理流程，并在大改版过程中快速应用。完成了 250 个模型设计或重构，52 个维表的设计以及 270 个应用表的开发。在数据资产完整性和分层规范达到 95%、复用度达到 73% 以上，跨层引用占比小于 5%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4. 腾讯内部实践：PCG（平台与内容事业群）数据成本治理&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkc5hnrPkTzw2t5onKsHC0FhqYt2stwic4rQRkDHAXt19icqiajiaK3f50Nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据成本的治理，我们以腾讯内部 PCG（平台与内容事业群）业务线为例。在做成本治理的时候，我们要去定义成本的范围，包括：数据采集平台，数据生成平台，数据分析平台，数据应用平台。我们通过两个方面进行了优化，一方面从资源用量上降低业务不合理使用，另一方面从资源单价上提升数据平台的效能。截止到今年，在月成本同比增加 30%+ 的情况下，业务单位用户/内容消费的大数据成本下降，业务大数据成本绝对值下降至少 10%。强化了大数据成本治理理论，沉淀了方法论、流程和平台能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;5. 腾讯内部实践：治理平台化推动业务治理落地&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkYWmCS5rTEoYjU05X7uLtYYcoOCdvjIWP3HcT5hiaNOyyMwibF10QNUFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;海量数据给业务带来了巨大价值，同时也带来巨大的成本及负担。业务团队大数据成本盘点困难、治理执行门槛成本双高、治理效果不能有效量化，都是业务在推进资产治理的痛点。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;我们把推动治理平台化分为了 4 个阶段：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;现状概览：洞察全域数仓及大数据成本，呈现最真实的业务资产情况。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;资产明细：全方位治理项洞察，基于资产分规范，对当前业务的待治理项进行明细展示。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;治理方案：平台内置治理方案结合业务定制化治理方案。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;治理执行：一站式治理执行，针对洞察出的治理项进行治理动作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;构建了一套属于我们自己的资产价值评分体系，包括：规范性、安全性、数据质量、数据成本、数据应用情况&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。将评分给到数据治理的实施人，帮助制定治理方案和复盘治理效果。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;WeData 数据治理平台能力 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1. 腾讯内部大数据能力的对外商业化输出——WeData&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkpKY7FaUMh3VmBHmTV7g8PEvuPb1fjteuaJ6GPzgXyU5KwmUczffn2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是 WeData 数据开发治理平台的架构图，要形成一个闭环，与数据的生产生联动，因为数据治理不仅要处理存量数据，还要处理未来增量的数据。平台主要分成两大部分，左边是敏捷数据生产，包括：数据建模、数据集成、数据开发、数据服务。右边是高效数据治理，包括：资产治理，数据质量，数据安全，元数据资产。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2. WeData 数据治理服务&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;324&quot; data-backw=&quot;576&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPk0gTr7wCHBQ8eOltiaQsrD7G36XULupiauhaWBlEbWDUo235bN1TR6mqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先我们看图的中心部分，分为上下两层，上面是数据流通与存储的过程，下面是加工生产的过程，包括数据汇聚，数据开发与运维（基础管理，库表构建，脚本开发，脚本编排）和数据服务（在数据上生成 API）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;从图的左边看，首先要做的是数据建模&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，涉及到治理部分的能力，就包括最开始的数仓的规划，数仓定义和规范标准，模型定义和指标定义。前期定义之后，在接下来的数据生产的过程中，才能验证数据是否符合这个标准，如果前期没有定义，也可以在后期其他模块逐步地去发现完善它。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;图的下方，主要是数据质量和数据安全部分&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。数据质量包括：事前的质量监控；事中的质量监测（如果不达标，我们会阻断流程，避免污染下游的数据）；事后的质量分析报告。数据安全也是包含三个部分，事前访问控制、事中脱敏加密，事后访问审计。数据的质量与安全的治理，贯穿数据的全生命周期。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;图的右边是元数据资产，可以分成三个部分，首先发现元数据，采集元数据&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。接着，元数据采集上来之后，我作为数据的生产方，要具备管理好数据的能力，包括两层，第一层就是基本的技术元数据：库表，字段等。此外，还要从业务的角度去理解，所以需要大量的业务元数据的信息，与技术元信息进行关联。形成关联关系之后，数据使用者才能真正理解数据的业务含义。第三部分就是数据目录，通过数据目录 让所有使用数据的人能快速的定位到目标数据。通过血缘关系，帮助排查数据的来源和去向。数据变更记录了数据源的每次变化以及对下游的影响。数据温度则体现了数据使用的具体情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3. WeData数据治理——规范工具&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkpBBXjnL1jLnJyAP6v9qiba23qOn53UdCbnRAhzfuo8BAkQ4VicvsVhmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;规范化工具可以分成三个部分，第一个部分就是数据管理，包括指标的管理，维度管理和元数据管理。第二部分是数仓规划，包括数仓定义，数据分层，业务分类，定义主题域业务过程。这一套规范定义完成了之后，还需要进行物化。物化指的是我们在生产数据的时候，将逻辑模型和真实的物理关联起来。此外，因为对接了很多不同行业的客户，我们也形成了不同行业的行业模板，可以在行业模板的基础上，完成企业体系标准的构建。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4. WeData数据治理——质量工具&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPk7cRtkfMsrw4CHJibTQV2mnVBPValBZY29o1Ha5hdxXUNOiaJJPsIYrvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;质量工具要完成的过程分成 4 步：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第一步，定义规&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;则&lt;/span&gt;&lt;span&gt;，确定数据质量衡量的标准是什么，形成质量规则库&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。规则又分成两部分，首先会有一些基础的规则，包括基础的空表的检测，数据行数检测，准确性或者唯一性的检测，在常规模板里面包括了均值的比较，波动率等指标；同时还可以通过自定义 SQL 的方式来完成具有业务特性的规则校验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第二步，规则确定好后，需要把这个规则和我们的数据本身进行关联，去达到一个质量监控的效果&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。一般来说有两种形态，第一种形态就是事中在 ETL 的流程中进行监控，挂载到开发任务上去。当数据生产之后，去检查这个数据是否符合我们的质量规则，如果不符合可以进行阻断式的操作。第二种形态是离线周期性的检测，例如检测各分区的数据质量情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第三步，当发现数据问题之后，会进行一次数据问题的运维。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;一般情况下，数据都是会上下波动的，但如果波动超过了一定范围，则会发出报警。例如，一张表每天都应该有 1000 行，但是今天只有 500 行，可能这个数据的产出就有问题了，或者是其他一个业务导致的，这个时候会产生数据质量的告警，通知到相关的责任人，告警也不是处理的终点，我们会有质量报警的工单体系，当告警通知到责任人后，如果他觉得这个问题需要别人来参与的话，可以进行转单，直到这个的数据流程单被处理结束，最终形成一个问题记录进行归档，如果被认为是典型问题的话，还可以进行记录，在后面有其他人遇到类似问题的时候，可以借鉴处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第四步，有定期的质量报告的分析，针对哪些表经常会被阻塞，哪些任务经常会发生告警，把这种经常性出现问题的表找出来。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;5. WeData 数据治理——安全工具&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkj2HdVPficOMof4icJIhBhCRQHRQufHicM0n8XCaANs4ayq0oogUD6wDicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据安全工具从三个方面进行治理：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从安全的角度进行数据的分类分级，确定数据是内部数据，还是敏感数据，还是机密性数据，这时就需要分级及分类的定义。此外需要提供规则识别的能力，通过这样的规则确定什么样的数据才是机密的数据 or 敏感的数据。比如在当前疫情反复的情况下，很可能会采集到很多姓名、性别、身份证这样的机密信息。我们可以做一个任务去管理数据扫描，扫描完之后把数据的分类进行打标，因为数据安全的分类、分级本质上也是定义在元数据上面的一种信息，扫描识别之后会存在底层元数据信息里面，让数据使用者知道谨慎地使用这些数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;包括两种形式：第一种是常规的静态脱敏，可以把数据进行一个脱敏任务，到目标端形成一个脱敏后的数据。例如对身份证号码手机号登录，会进行打码处理，然后才能对外的输出。第二种是动态脱敏，跟平台工具紧密相关，比如数据集成的过程中，可以进行数据的加密，在数据查询时能够检索到。之后在数据分享时，就产生水印，水印支持溯源，进行一系列的隐私保护。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据已经发出去之后，是我们的安全审计，哪些人访问、导出、下载过，尤其针对敏感数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;6. WeData 数据治理——元数据资产管理工具&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkcnchr0Uwowuic4aYrt2VOvnV8gDNs8eU3FTGiaCfRZoDq3Juoic05icKeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据可用性治理包含三个步骤：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第一步，提高数据搜索能力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。如何能快速的去定位到想要的数据，包括全域内大搜的能力，因为作为一个业务方要去使用某个数据时，要知道企业内部是否有这个数据，如果没有那么谁可以去生产这部分的数据，如果有的话该找谁去申请以及如何去用这个数据，所以要在企业的范围内有一个全局的快捷的数据定位能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第二步，提高数据理解能力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。找到数据后，业务方不是特别清楚数据的具体情况，但是我可以根据其他用户的使用情况（比方这份数据的热度和打份情况），把数据作为一个商品，快速的给到想要使用这些数据的人。将技术元信息和业务元信息全部呈现给用户，让他知道这个数据的全貌。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第三步，提高数据应用能力&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;，查到数据后如何去应用&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。从数据使用者的角度，需要以何种形态去呈现，让数据使用者能够更好地使用数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;7. WeData 数据治理——治理实践落地&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625137332454405&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPk0iauCJN8TduL9sT2bPV8KFBbQWPj9S8v7xDTdJXgJCGRK9w1icBAFn9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4551&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在前面这几部分，包括规范、质量、安全以及可用性的基础上，我们对数据进行了深度的治理。治理达成的效果就是降本增效，降低不需要的那些数据的成本，提高数据的使用率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在资产治理模块对资产进行打分，形成企业级的评级体系。让组织治理者根据质量分进行治理的落地，去掉那些不常用的、冷的数据、数据孤岛的数据、重复的数据，再把有效的数据更好地利用起来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问答环节&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q1：元数据打了安全标签之后，怎么向下游的模型或者任务进行传递？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;A1：Wedata 在做元数据安全打标的时候都是相互独立的，不会根据血缘关系进行传递，因为上下游可能是不同的业务线，对敏感性的定义不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q2：请问业务元数据该如何采集梳理，业务的元数据具体包括哪些内容？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;A2：按照我们资产资产治理的理论，业务元数据分为 5 类，第一类是规范性元数据，属于哪个分层哪个主题域业务域；第二类是质量元数据；第三类是安全元数据；第四类是成本元数据；第五类是应用元数据，包括使用上的温度。一般从这个 5 个维度去了解业务元信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q3：请问 tbds 和 wedata 的关系是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;A3：tbds 指的是我们底层的数据处理引擎，腾讯大数据产品主要分为两部分，共有云部分是 emr 和 cdw 数据仓库等产品，私有云上底层引擎体系管叫 tbds。其中，wedata 是指的数据治理工具。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;今天的分享就到这里，谢谢大家。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;｜分享嘉宾｜&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47148148148148145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjJicWhCeFxDmVPNqRXFjDPkzmURYCCz79J6It8WV810AW9JUYbmzp1a6uKv3iaIQS5AyXpeGEJiblsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;王浩仙&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;腾讯云大数据平台产品中心 技术产品&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从事大数据产品领域7年，曾就职于金山、阿里，目前作为腾讯云大数据平台产品中心数据治理产品负责人。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;｜往期文章精选｜&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5Njk3Njc5Mw==&amp;amp;mid=2247490919&amp;amp;idx=1&amp;amp;sn=e6a53991be9a4e60096aafe614f62d88&amp;amp;chksm=90a6b791a7d13e8772d52ba3ce20d1e75ac6a69965e8cd0b80786aaf52bb36293c81c2fd20fd&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;1. 中通快递‍数据治理实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;1. 中通快递数据治理实践&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5Njk3Njc5Mw==&amp;amp;mid=2247491253&amp;amp;idx=1&amp;amp;sn=4505f1c927c9bbe9d1238b3d814fe69c&amp;amp;chksm=90a6b443a7d13d55268e0ed8289513663f625b42829959ae1d81f4a76ff1bec020c5fef39d63&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2. ‍金融数据治理实践与思考‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;2. 金融数据治理实践与思考&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;关注公众号，阅读更多技术干货&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzA5Njk3Njc5Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zKQJJopg9UNNc0BBpMTTMakQVZHWAndEgicgysue8cQdH1Fv6acUo1BIaEbdXC9PNjgAmZVH2CoRW3AnOiaWoyJg/0?wx_fmt=png&quot; data-nickname=&quot;HelloTech&quot; data-alias=&quot;HelloTech&quot; data-signature=&quot;专注于大数据和微服务架构实践，分享来自技术人的一手干货文章，从入门到深入，通过夯实的技术积累和丰富的一线实战经验，充分利用碎片化时间，为你带来最有料的技术分享~&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;🧐 点击「&lt;strong&gt;在看&lt;/strong&gt;」&lt;/span&gt;&lt;span&gt;&lt;span&gt;，给小编加个鸡腿吧&lt;/span&gt;&lt;strong&gt;👇&lt;/strong&gt;&lt;/span&gt;&lt;strong/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3596494d9d0d2a9be14f75a6dd2570bc</guid>
<title>找到了一篇介绍 ChatGPT 核心技术的论文</title>
<link>https://toutiao.io/k/gzzbbye</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;下面步入正题，开始介绍这篇论文，会涉及一些技术细节及公式，可能还需要仔细看一下，相信一旦看进去，你会对AI的理解加深很多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;总体把握&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这篇论文的结构非常精炼，提出问题，分析问题，解决问题，给出测试数据。顶刊文章讲究言简意赅，有描述，有代码，有结果；其中最核心的是以下这张图，作者团队提出Transformer的核心算法结构：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclUbOvTicpGAvAAM3lYEYT8mKLtPibxggQRSD2kdbo8AdVGpV7bynhBhOw/640?wx_fmt=jpeg&quot; data-w=&quot;390&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;整篇文章就是围绕这张图来进行解释的，由于篇幅所限，我们聚焦在一条主线上：1、文章想解决主要问题是什么；2、如何解决的；3、从文章提出的解决方案作为一个案例来引发整体思考，因此我们将内容简化，主要关注核心部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8955223880597015&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclziaA3PS2SEzv1CNNb1JSOEru6D5E0ENyk86f5wkcxhPoCShva3QcfjQ/640?wx_fmt=jpeg&quot; data-w=&quot;402&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这张图表达的内容如果理解了，那基本上你掌握了这篇论文85%的内容，也是最关键的部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;《Attention is all your need》在编写时主要是为了考虑NLP任务，是由几个Google的科研人员一起完成的，其中一个背景是Google也在推广自己的并行计算芯片以及AI TensorFlow开发平台。&lt;/span&gt;&lt;span&gt;平台主要功能特点是并行计算，这篇文章的算法也是在最大限度的实现并行计算。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;我们就以一个简单的例子来把这个算法串一遍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;核心内容&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;需求是我们需要训练一个模型，进行中文到英文翻译。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;背景知识：这个需求要把“翻译：我爱你 to I love you”转置成一个y=f(x)问题，x代表中文，y是英文，我们要通过训练得到f()，一旦训练成功f()，就可以实现翻译。大家拼的就是谁的训练方法更准确，更高效，谁的f()更好用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前自然语言处理主要的算法叫RNN（循环神经网络），它主要的实现逻辑是每个“字”计算之后将结果继承给第二个字。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;算法的弊病是需要大量的串行计算，效率低。而且当遇到比较长的句子时，前面信息很有可能会被稀释掉，造成模型不准确，也就是对于长句子效果会衰减。这是这篇文章致力于要解决的问题，也就是说这篇文章有训练处更好的&lt;span&gt;f()&lt;/span&gt;的方法。联想一下ChatGPT可以做论文，感受一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Transformer里，作者提出了将每个字与句子中所有单词进行计算，算出这个词与每个单词的相关度，从而确定这个词在这个句子里的更准确意义。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;（这句话要是理解了，后面其实可以不看了。&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;在此处，要开始进入一些技术细节，在开始之前，我们有必要再熟悉一下机器学习领域最核心的一个概念——“向量”。在数字化时代，数学运算最小单位往往是自然数字。&lt;/span&gt;&lt;span&gt;但在AI时代，这个最小单元变成了向量。这是数字化时代计算和智能化时代最重要的差别之一。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;    &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;举个例子，比如，在银行，判断一个人的信用额度，我们用一个向量来表示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07692307692307693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclMrH4gFMicGpQlDNaWzKTAXf8OiaicBsu2snCgoxzpSLpS0ZVg3I1ET73Q/640?wx_fmt=jpeg&quot; data-w=&quot;962&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;向量是一组数据的集合，也可以想象成在一个超高维度空间里的一个点。一个具体的信用额度向量，就是在8个特征组成的高维空间的一个点。&lt;/span&gt;&lt;span&gt;数据在高维空间将展现更多的数学性质比如线性可分，容易让我们抓住更多隐藏的规律。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;向量的加减乘除是计算机在进行样本训练是最主要的计算逻辑。第四范式一直强调的高维，实时，自学习，其中高维就是把企业信息拉升到一个非常高维的空间，变成向量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Transformer模型的主要意义就是找到了一个算法，分成三步把一个词逐步定位到了一个高维空间，在这个过程中赋予这个单词比其它算法更优的信息。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;很多情况下这个高维空间有着不同的意义，一旦这个向量赋予的信息更准确更接近真实情况，后面的机器学习工作就很容易展开。还拿刚才信用额度向量举例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07692307692307693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclSicYibLVnHS6pbJEQBIRZ1XJAOJibckj9RcIjbAxjibpbibhav0ibc6eo8RA/640?wx_fmt=jpeg&quot; data-w=&quot;962&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07484407484407485&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclicDFdica4lp5xiaorTXBnSeLRiaGmzJTLoRHzwyhr5VW2eECO4K0CqUD5w/640?wx_fmt=jpeg&quot; data-w=&quot;962&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这两个向量存在于两个不同的向量空间，主要的区别就是前者多了一个向量特征：“年薪”。可以思考一下如果判断一个人的信用额度，“年薪”是不是一个很重要的影响因子？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;以上例子还是很简单的，只是增加了一个特征值，在Transformer里就复杂很多，它是要把多个向量信息通过矩阵加减乘除综合计算，从而赋予一个向量新的含义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好，理解了向量的重要性，我们看回Transformer的三步走，这三步走分别是：1、编码（Embedding）；2、定位（Positional encoding）；3、自注意力机制（Self-Attention），这个真的大名鼎鼎。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;举个例子，比如，翻译句子Smart John is singing到中文。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;首先，要对句子每个词进行向量化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;我们先看“John”这个词，需要先把“John”这个字母排列的表达转换成一个512维度的向量John，这样计算机可以开始认识它。说明John是在这个512维空间的一个点；这是第一步：编码（Embedding）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;再次，第二步，定位（Positional encoding）。利用以下公式（这是这篇文章的创新）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21022727272727273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJcl2csPZwQ5hM0rGia0KfNwKEriaAs89EAd2eIBicicaDgS9N0L2US3IRnFdA/640?wx_fmt=jpeg&quot; data-w=&quot;352&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;微调一个新的高维空间，生成一个新的向量：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24545454545454545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclKXvlchq9QHwf910RbNNFkgbOC5ZxnKsv3dGTHJb71QicBEdbCT7sWpA/640?wx_fmt=jpeg&quot; data-w=&quot;220&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;我们不用太担心这个公式，它核心意义是：在这个新的向量里面每一位由原来的0和1表示，分别取代成由sin和cos表示，这个目的是可以通过sin和cos的定律，让这个新向量不仅表示John这个单词的意义，还可以表示John在Smart John is singing这个句子的位置信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;如果不理解，可以直接忽略，只要记住第二步是用来在“表达John这个词的向量”中，加入了John在句子中的位置信息。John已经不是一个孤立的词，而是一个具体句子中的一个词，虽然还不知道句子中其他词是什么含义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;如果第一步计算机理解了什么是John，第二步计算机理解了“* John**”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;最后，第三步，自注意力机制（Self-Attention），通过一个Attention（Q，K，V）算法，再次把John放到一个新的空间信息里，我们设为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24311926605504589&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclppy4LyntMoUmFLFNqqIebSQgiaUlszRNGhFdJpXOk25BnJIxNzRF9WA/640?wx_fmt=jpeg&quot; data-w=&quot;218&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;在这个新向量里，不仅包含了John的含义，John在句子中位置信息，更包含了John和句子中每个单子含义之间的关系和价值信息。我们可以理解，John作为一个词是一个泛指，但Smart John就具体了很多，singing的Smart John就又近了一步。而且Attention （Q，K，V）算法，不是对一个单词周围做计算，是让这个单词跟句子里所有单词做计算。通过计算调整这个单词在空间里的位置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这种方法，可以在一个超长句子中发挥优势，而且最关键的是一举突破了时序序列的屏障，以前对于图像和NLP算法的划分，很大程度上是由于NLP有很明显的时序特征，即每个单词和下一个以及在下一个有比较明显的时序关系。&lt;/span&gt;&lt;span&gt;但Transformer这种算法打破了这种束缚，它更在意一个单词跟句子中每个单词的价值权重。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这是Transformer可以用到everywhere的主要原因。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.7857142857142858&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclXuNxLfngdOX2VZsKEdze1T2iamENVu7NTzH0YVy8r5WUwgnjIxJgQiaw/640?wx_fmt=png&quot; data-w=&quot;294&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;计算过程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果不感兴趣，可以跳过这一部分介绍，直接进入启发收获部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;具体的计算过程，用翻译句子“我爱你”到“I love you”举例（这句更简单一些）。首先进行向量化并吸收句子位置信息，得到一个句子的初始向量组。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5303030303030303&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclwdPBBXG4mibwU2gWtJzxjmic2fNHBOp0ICFkqgx2IdYVQkWySvJFOH2A/640?wx_fmt=jpeg&quot; data-w=&quot;396&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于样本每个句子长短不同，所以每个句子都会是一个512*512的矩阵，如果长度不够就用0来代替。这样在训练时，无论多长的句子，都可以用一个同样规模的矩阵来表示。当然512是超参，可以在训练前调整大小。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;接着，用每个字的初始向量分别乘以三个随机初始的矩阵W&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，Wk，Wv 分别得到三个量Q&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，K&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，V&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;。下图以“我”举例。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5387596899224806&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJcl222v1bKnwxH30K7SeicuQq69pab9puOm7GJY0JPtkCf2gbiaib40EcNXA/640?wx_fmt=jpeg&quot; data-w=&quot;516&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;然后，计算每个单词的attention数值，比如“我”字的attention值就是用“我”字的Q我分别乘以句子中其他单词的K值，两个矩阵相乘的数学含义就是衡量两个矩阵的相似度。然后通过一个SoftMax转换（大家不用担心如何计算），计算出它跟每个单词的权重，这个权重比例所有加在一起要等于1。再用每个权重乘以相对应的V值。所有乘积相加得到这个Attention值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5405405405405406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJcl219y68jGcqP8OmsC2zYnSLdEvroGEQiap5g0xibRl5fE6466rp4zbpjQ/640?wx_fmt=jpeg&quot; data-w=&quot;592&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这个attention数值就是除了“我”字自有信息和位置信息以外，成功的得到了这个句子中每个单词的相关度信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;大家可以发现，在所有注意力系数的计算逻辑中其实只有每个字的初始矩阵W&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，W&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，W&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;是未知数（这三个矩阵是所有文字共享的）。那么我们可以把这个Transformer简化成一个关于输入，输出和这个W矩阵的方程：其中X是输入文字信息，Y是翻译信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46368715083798884&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJclhBicV2gsTWgTHvBjwdvGmTV3GImmuibUQnLJG0bnorVxS1zxQ0tyMjqg/640?wx_fmt=jpeg&quot; data-w=&quot;358&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里有必要再介绍一下机器学习的基础知识：Transformer算法本质上是一个前馈神经网络模型，它的计算基础逻辑，不去管复杂的隐藏层，就是假设Y=f(x)=wx，（目标还是要算出一个f()）然后随机设置一个w0，开始计算这个y=w0x的成本函数，然后再把w0变成w1，计算y=w1x的成本函数，以此类推计算出无数w（不是无数哈，也会收敛的），然后比较哪个w的成本函数最小，就是我们训练出来的f()。那么在Transformer里，这三个初始矩阵就是那个w0。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;再回到Transformer，在计算Attention之后，每个单词根据语义关系被打入了新的高维空间这就是Self-attention（自注意力机制）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;但在Transformer里，并不是代入了一个空间，而是代入了多个高维空间，叫做多头注意力机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3481848184818481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzCHu1muhF0Klu6lLHaSmJcl3wcozXUT7HyywSyzug86xp9W6IdBCzzhCyO1dg1BtIjeIFXCM9tHtw/640?wx_fmt=jpeg&quot; data-w=&quot;606&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;文章中没有给出更清晰的理论支持，为什么是多头。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要原因是在训练时效果很好。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这也是AI科研论文的一个特点，常常凭借非常高的科研素养和敏感性，发现一些方向，并且通过测试确实有效，但不一定可以给出很完美的理论支撑。这往往也给后续研究者一些可以进一步完善的空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事实证明，如何提升Attention（Q，K，V）效率是Transformer领域迭代最快的部分。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;之后的Bert算法提出预训练机制成为了主流，后面会做进一步介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;当然，事后我们可以理解是把这个句子中的逻辑关系放到不同的高维空间去训练，目的就是希望抓取更多的信息，这一部分可以更加深刻理解科研人员对空间的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;除了以上内容，还有一些技术点比如Mask机制、layer norm、神经网络激函数饱和区控制等，由于篇幅关系以及属于技术细节就不一一介绍了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果大家理解了多头自注意力机制，基本已经85%掌握了这篇论文的重要内容，也对还在快速扩展影响力的Transformer模型有了一个比较直观的认识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>81f278254361ec221022d69f3fc81b1e</guid>
<title>.NET MAUI 开发电子木鱼（上）</title>
<link>https://toutiao.io/k/pccwepj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本文介绍如何使用 .NET MAUI 开发一个电子木鱼应用。以实际的小应用开发为例，通过这个开发过程，介绍了其涉及的 .NET MAUI、Blazor、前端等相关知识点。文章涉及的应用已开源在 Github，大家可前往下载体验： https://github.com/sangyuxiaowu/MuYu&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;1. 背景&lt;/h1&gt;&lt;p&gt;电子木鱼不知道从什么时候火了起来，成了年轻人的新时尚。年轻人没有选择经常去寺庙像和尚那样念经，而是下载了电子木鱼软件，进行线上敲木鱼。虽然搞不懂这种“敲电子木鱼，见机甲佛祖，积赛博功德，修图灵真经”的赛博玄学，但是这个软件它做起来容易，需求还简单。在这么焦虑的假期生活中，还是假期的最后一天，最适合玩一玩 .NET MAUI 了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8625592417061612&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AwCe2LLP1HASzBHYkVTHRN6DhvHKXXQC28ib8hpc3picL1z8rK6icT88kbznic4BOWvd0Utp4mcKvzUmS8gz9thweg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;211&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;烦恼-1&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;2. 相关知识点&lt;/h1&gt;&lt;p&gt;这个项目及文章使用并介绍了一下相关知识点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;Blazor 播放音频，主要为 JS 调用&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;Blazor 调用 .NET MAUI 各平台原生对话框&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;.NET MAUI 的 Preferences 数据存储&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;Blazor 循环渲染中的一个常见 BUG&lt;/span&gt;&lt;/p&gt;&lt;p&gt;界面 UI 方面因为使用还是 Web 的技术，所以更多的是前端的知识，可自行探索。&lt;/p&gt;&lt;h1&gt;3. 开发过程&lt;/h1&gt;&lt;h2&gt;3.1 需求分析&lt;/h2&gt;&lt;p&gt;这个电子木鱼整体功能非常简单，主要就是点击一下屏幕播放一下木鱼敲击的音频，这个是核心功能。&lt;/p&gt;&lt;p&gt;再往下设计，就是一些动效的优化，比如：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;木鱼敲击的动效，放大&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;木鱼敲击的震动反馈，当然这一条可能没必要&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;木鱼敲击后的文字浮动，一敲“+999功德”这种的&lt;/span&gt;&lt;/p&gt;&lt;p&gt;更进一层的设计：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;这里需要引入设置功能了，加入设置菜单&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;文字浮动内容的自定义&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;自动敲击积累功德&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;自定义的敲击音和木鱼样式，这里就要开始费美工了&lt;/span&gt;&lt;/p&gt;&lt;p&gt;再接下来迭代，当然也是有很多参考的相关案例，比如：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;排行榜功能，区域排行，日，周，月各种排行榜单&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;分享功能，满足人们的分享欲&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;添加诵经背景音，使氛围更融洽&lt;/span&gt;&lt;/p&gt;&lt;p&gt;当然，以上只是瞎扯，作为一个清心寡欲的木鱼，做好自己定位是第一步。“天之道，不争而善胜”，作为佛系木鱼，当然只是纯粹的敲击，满足最基本的需求就可以了。&lt;/p&gt;&lt;h2&gt;3.2 开发第一步&lt;/h2&gt;&lt;p&gt;这个开发第一步，沿用我之前讲的那个&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NjMwOTIwMA==&amp;amp;mid=2247484152&amp;amp;idx=1&amp;amp;sn=5db6d565fffca86676be5f16cda8c6be&amp;amp;scene=21#wechat_redirect&quot; title=&quot;《MAUI 安卓 UI 资源设置》&quot; data-linktype=&quot;2&quot;&gt;《MAUI 安卓 UI 资源设置》&lt;/a&gt;文章的内容，先把 UI 资源处理一下。这次被老婆拒绝了，我亲自拿钢笔工具把这个木鱼 Logo 给绘制出来了，作为一个合格的全栈，美工也是需要会的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7617647058823529&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AwCe2LLP1HASzBHYkVTHRN6DhvHKXXQCtoGDXMd0Kov3WkBLwcBV2bqSLic91b7JtLNzMe6nnPhKSuibYXdNYQQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;340&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;logo&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个 Logo 画完，内部应用的主体界面木鱼自然也就设计好了。&lt;/p&gt;&lt;h2&gt;3.3 核心功能&lt;/h2&gt;&lt;p&gt;电子木鱼的核心功能，当然是点击屏幕播放一下敲击音效了。因为我们使用的是 .NET MAUI Blazor ，为了后续界面动效的设计，我们通过前端的方式来播放音乐。&lt;/p&gt;&lt;p&gt;为了图方便，直接在 &lt;code&gt;wwwroot/index.html&lt;/code&gt; HTML 入口文件中添加如下 &lt;code&gt;audio&lt;/code&gt; 标签和 JS 方法：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;html&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;audio&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;player&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;source&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;other/muyu.wav&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;window&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;PlayAudioFile&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;tips&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; audio &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;player&#x27;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    audio&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;play&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;在应用的首页添加图片点击的事件，来调用 JS，并预留了文字浮动内容的传递：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;html&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;img&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;img&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;/images/muyu.svg&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;%;&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; @&lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClickHandler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;async &lt;/span&gt;&lt;span&gt;Task&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ClickHandler&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    await JS&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;InvokeAsync&lt;/span&gt;&lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;PlayAudioFile&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; tipsInfo&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;本小节相关知识点：&lt;span&gt;《JavaScript 互操作》&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;3.4 动效设计&lt;/h2&gt;&lt;p&gt;动效设计这里我们主要实现木鱼敲击放大动效和敲击后的文字浮动。这里主要是前端的技术，我们使用 CSS3 的 @keyframes 创建两个动画规则：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;@keyframes&lt;/span&gt;&lt;span&gt; showbig &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; scale&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; scale&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1.05&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;@keyframes&lt;/span&gt;&lt;span&gt; showtips &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;75&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY&lt;/span&gt;&lt;span&gt;(-&lt;/span&gt;&lt;span&gt;1.5em&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        opacity&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        transform&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; translateY&lt;/span&gt;&lt;span&gt;(-&lt;/span&gt;&lt;span&gt;2em&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;这里两个动效都是默认是只循环一遍，时长 0.3s :&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;showbig &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    animation&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;timing&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; ease&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    animation&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;duration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;3s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    animation&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; showbig&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;通过 JS 方式控制 DOM 的 Class 添加删除来实现动画的播放：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ShowBig&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; img &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;img&#x27;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    img&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;classList&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;showbig&#x27;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    setTimeout&lt;/span&gt;&lt;span&gt;(()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        img&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;classList&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;remove&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;showbig&#x27;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;对于浮动的文字来说，快速敲击时，为了可以显示多条，这边的浮动文字是动态创建的 P 标签。还记得前面预留的 &lt;code&gt;tipsInfo&lt;/code&gt; 吧，是在这里使用的。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ShowTips&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;createElement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;p&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    p&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;classList&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;tips&#x27;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    p&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; tips &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#x27;tips&#x27;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    tips&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;appendChild&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    setTimeout&lt;/span&gt;&lt;span&gt;(()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        tips&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;removeChild&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;3.5 菜单设计&lt;/h2&gt;&lt;p&gt;有了设置当然就可以搞个菜单出来了，菜单这里的设计也非常简单，我们可以直接新建一个 Blazor 组件 &lt;code&gt;Shared/SettingMenu.razor&lt;/code&gt;，来实现传递菜单项来生成菜单组件，并在点击选项后返回点击的菜单序号。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;html&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;mask&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;:@(&lt;/span&gt;&lt;span&gt;Show&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flex&lt;/span&gt;&lt;span&gt;&quot;:&quot;&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;setting_menu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;@MenuTitle&lt;/span&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;ul&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;@for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;NavData&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Count&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;++)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;&amp;lt;li&lt;/span&gt;&lt;span&gt; @&lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;e=&amp;gt;&lt;/span&gt;&lt;span&gt;MenuClick(i)&quot;&amp;gt;@NavData[i]&lt;/span&gt;&lt;span&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// 点击回调&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Parameter&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;EventCallback&lt;/span&gt;&lt;span&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;OnMenuClick&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// 菜单标题&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Parameter&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;MenuTitle&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;设置&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// 显示隐藏&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Parameter&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Show&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// 菜单信息&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Parameter&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NavData&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// 通知点击事件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;param name=&quot;inx&quot;&amp;gt;点击的index&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;async &lt;/span&gt;&lt;span&gt;Task&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;MenuClick&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; inx&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    await &lt;/span&gt;&lt;span&gt;OnMenuClick&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;InvokeAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;inx&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;那，跑一下看看，似乎，大概，也许是非常完美：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0432432432432432&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AwCe2LLP1HASzBHYkVTHRN6DhvHKXXQC4MOWs9ic1e3eu2oslpScOulSuiaFH8Wfrz9BYw73SWUYliazUrX2IAutQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;555&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;菜单&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;3.6 对话框&lt;/h2&gt;&lt;p&gt;在我们的悬浮文字设置选项中，需要提供输入功能。当然，直接前端的方案，设计一个模态对话框似乎是一个非常好的方案，也符合 UI 的一致性。但是考虑到能省则省，这边没有使用前端的框架，所以再手写一个会稍微费点事的。如果说省事，当然是直接前端 JS 的 &lt;code&gt;prompt&lt;/code&gt; ，但是这样又显得格格不入：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4438095238095238&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AwCe2LLP1HASzBHYkVTHRN6DhvHKXXQCia9zNoC4ly11vjYSJje9XrRaicW4NuCZf5raHPgXR1xibX1JuSMLOLvmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;525&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;prompt&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;.NET MAUI Blazor 这种混合开发的模式大多都一样，对话框也是一个小问题。不过这里可以非常方便的使用本机对话框，只要拿到 &lt;code&gt;Page&lt;/code&gt; 即可，在 &lt;code&gt;razor&lt;/code&gt; 文件的 code 代码块中，我们可以这样用：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; result &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; await &lt;/span&gt;&lt;span&gt;Application&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MainPage&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;DisplayPromptAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;悬浮文字设置&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;请设置敲击后的自定义悬浮文字&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;确定&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;取消&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;请输入悬浮文字&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; tipsInfo&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;本小节相关知识点：&lt;span&gt;《显示弹出窗口》&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;3.7 数据存储&lt;/h2&gt;&lt;p&gt;搞定了设置文字的交互，接下来就是存储了，总体来说我们需要存储的木鱼的总敲击次数，今日敲击次数和刚刚的自定义悬浮文字。毕竟不是复杂的应用，就没必要上数据库了，对于这种简单的键值数据存储我们可以直接选用 &lt;code&gt;Preferences&lt;/code&gt;。&lt;code&gt;Preferences&lt;/code&gt; 通过调用 &lt;code&gt;Preferences.Set&lt;/code&gt; 方法来设置，提供键和值，以下就是完整的设置悬浮文字和存储的方法：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// 获取初始的悬浮文字&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; tipsInfo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Preferences&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tips&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;功德+1&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;async &lt;/span&gt;&lt;span&gt;Task&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;SetTips&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; result &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; await &lt;/span&gt;&lt;span&gt;Application&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Current&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;MainPage&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;DisplayPromptAsync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;悬浮文字设置&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;请设置敲击后的自定义悬浮文字&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;确定&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;取消&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;请输入悬浮文字&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; tipsInfo&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Preferences&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Set&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tips&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; result&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    tipsInfo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; result&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;本小节相关知识点：&lt;span&gt;《Preferences》&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;3.8 Blazor 循环小 BUG&lt;/h2&gt;&lt;p&gt;做的差不多了，菜单也有了，可以简单跑一下看看了，但是似乎菜单出了些问题，设置菜单的按钮并不好用，每一个回调都是 4：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.39920948616600793&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AwCe2LLP1HASzBHYkVTHRN6DhvHKXXQCoTLlU3libloppMxYw1K7A1vZLibML3qbX7SrhkIXoAMn5x0a5MgCf8jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;506&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;BUG&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;啊对，前面的完美，我是说界面。BUG 总会有的，还总是发生在不经意之间。&lt;/p&gt;&lt;p&gt;元芳你怎么看？&lt;/p&gt;&lt;p&gt;元芳：问一问 ChatGPT 吧，他说他懂这个的。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;-5 -5 46 46&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; stroke-width=&quot;1.5&quot;&gt;&lt;path d=&quot;M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z&quot; fill=&quot;#fff&quot;/&gt;&lt;/svg&gt;&lt;/section&gt; &lt;svg viewbox=&quot;0 0 19.01 17&quot; fill=&quot;#202123&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;m.01,2.5c.21-.33,2.43,1.12,6,1.5,3.6.38,6.72-.53,9-1.5,1.33-.83,2.67-1.67,4-2.5v17C3.3,6.02-.26,2.93.01,2.5Z&quot;/&gt;&lt;/svg&gt;&lt;section&gt;&lt;p&gt;是的，我了解Blazor。Blazor是一种用于开发Web应用程序的框架，允许使用C#代码和.NET运行时在浏览器中运行Web应用程序。它提供了一种方便的方法来使用.NET技术来构建客户端Web应用程序，而无需学习JavaScript。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;仔细检查我们会发现，在前面的 &lt;code&gt;SettingMenu.razor&lt;/code&gt; 菜单组件中，我们有一个循环，通过枚举&lt;code&gt;NavData&lt;/code&gt;数组中的每一项并创建一个包含该项的列表项。因为需要序号，所以这里用的 for 循环，问题在于，在回调函数 &lt;code&gt;MenuClick(i)&lt;/code&gt; 中，变量&lt;code&gt;i&lt;/code&gt;是局部的，在循环结束后其值就改变了。&lt;/p&gt;&lt;p&gt;为了解决这个问题，可以将当前项的索引存储在闭包中：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;html&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;ul&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NavData&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Count&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;++)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; index &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&amp;lt;li&lt;/span&gt;&lt;span&gt; @&lt;/span&gt;&lt;span&gt;onclick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;e =&amp;gt;&lt;/span&gt;&lt;span&gt; MenuClick(index)&quot;&amp;gt;@NavData[i]&lt;/span&gt;&lt;span&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;修改完代码，再次运行：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0185185185185186&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AwCe2LLP1HASzBHYkVTHRN6DhvHKXXQCedcHNBScRYiblHvOlebe4YotWJZ8S3y3P56J1ics6xYOCaMoapHYerNg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;378&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;修复后&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;4. 最后&lt;/h1&gt;&lt;p&gt;至此，这个简单的电子木鱼的基础功能已实现，应用已经完成了大半。对于未尽的事宜，比如敲击计数和其他设置的功能我下次再说，容我先去敲一会木鱼，静个心。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8318965517241379&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AwCe2LLP1HASzBHYkVTHRN6DhvHKXXQCktUZK61LB4jgRYxwibBjJ4PicPlgVSaLLnyT62ViasSzMcPWnUzAe0cbw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;232&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;静心&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 《JavaScript 互操作》: &lt;em&gt;https://learn.microsoft.com/zh-cn/aspnet/core/blazor/javascript-interoperability/?view=aspnetcore-7.0&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 《显示弹出窗口》: &lt;em&gt;https://learn.microsoft.com/zh-cn/dotnet/maui/user-interface/pop-ups?view=net-maui-7.0&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; 《Preferences》: &lt;em&gt;https://learn.microsoft.com/zh-cn/dotnet/maui/platform-integration/storage/preferences?view=net-maui-7.0&amp;amp;tabs=android&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>