<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>974b8178df7d3e4e2bd45bd2e61a4d13</guid>
<title>从 0 到 1 搭建自己的脚手架（java 后端） | 京东云技术团队</title>
<link>https://toutiao.io/k/9tmvlk6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h2&gt;一、脚手架是什么&lt;/h2&gt;

&lt;p&gt;脚手架是一种基础设施工具，用于快速生成项目的框架代码和文件结构。它是一种标准化的开发工具，使开发人员能够在项目的早期阶段快速搭建出一个具备基本功能和结构的系统。&lt;/p&gt;

&lt;h2&gt;二、脚手架的意义&lt;/h2&gt;

&lt;p&gt;主流的微服务架构体系下很多公司会将原有的单体架构或者繁重的微服务进行拆分。这个时候按照模块(商品、订单、用户、库存、优惠、搜索、管理后台..)、按照领域驱动设计(投保、理赔、支付、保单管理)等进行拆分就需要很多的微服务项目，如果一个一个的去创建微服务其实是在做重复的工作容易出错而且没有意义，浪费人力物力。这个时候基础性的持久层、日志、异常处理、权限控制等在项目创建时一起生成不仅减少了重新创建或部分复制带来的风险而且高效。&lt;/p&gt;

&lt;h2&gt;三、脚手架的创建&lt;/h2&gt;

&lt;h3&gt;3.1 编写项目模版&lt;/h3&gt;

&lt;p&gt;首先我们要有一个基础项目的模板，这个模板中集成了开发时所需要的常用配置，你可以自己搭建，或者找一个基础项目如：SpringBoot 项目中已经引入了 MyBatis-Plus, Redis, Logback, Hutool, Swagger-UI 等。或者将公司的架构沉淀出一个基础项目的模板。&lt;/p&gt;

&lt;p&gt;springboot模版项目：  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e88646d90b274e1c9675b6561814f5a0%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3.2 生成脚手架&lt;/h3&gt;

&lt;h4&gt;3.2.1 使用 idea 打开项目模板&lt;/h4&gt;

&lt;p&gt;使用 IDEA 打开基础项目，查看一下 maven 的配置路径，搭建过程中要保证 maven 路径始终一致，我的 maven 路径如下。  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2594d8d40ae7417180b1df2ea9269466%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D:/Program Files/apache-maven-3.2.5
D:\Program Files\apache-maven-3.2.5\conf\settings.xml
D:\Program Files\apache-maven-3.2.5\repository
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后运行一下项目，要确保基础项目是正常的。&lt;/p&gt;

&lt;h4&gt;3.2.2 注意版本号&lt;/h4&gt;

&lt;p&gt;然后留意一下 pom.xml 文件中的项目 gvn，这是项目的版本号，也与下文生成模板的版本号有关。  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff123d311f094258856ff2840d81303a%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.springframework.boot.demo
spring‐boot‐stage‐demo
0.0.1‐SNAPSHOT
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3.2.3 构建脚手架&lt;/h4&gt;

&lt;p&gt;方式一：打开命令行窗口 Terminal ，正常情况指向的是本项目的目录，如果不是则 cd 到本项目，然后输入：  &lt;/p&gt;

&lt;p&gt;mvn archetype:create-from-project #从已有的项目中生成archetype.  &lt;/p&gt;

&lt;p&gt;方式二：当前项目所在文件夹下执行  &lt;/p&gt;

&lt;p&gt;eg: 项目的跟路径为 D:\spring-staggingcmd下执行&lt;br/&gt;
d:&lt;br/&gt;
cd D:\spring-stagging&lt;br/&gt;
mvn archetype:create-from-project  &lt;/p&gt;

&lt;p&gt;执行完成后脚手架项目也就创建完成,生成如下所示的结构  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2394792e70de4192ad494d5d96253a23%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;
&lt;strong&gt;注：这里如果生成的是如下所示的结构&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;解决办法1.调整如图所示的artifactId与module前缀一致  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17d06d6d3cd24dd8bd3ca194521445a5%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;

&lt;p&gt;将产生的target目录移动到新的目录，打开gitbash进行如下操作  &lt;/p&gt;

&lt;p&gt;删除idea的相关文件&lt;br/&gt;
rm -rf .idea&lt;br/&gt;
find . -name &quot; &lt;em&gt;.iml&quot; -type f -print -exec rm -rf {} ;&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;删除不需要的实例代码find . -name &quot;xxxMain&lt;/em&gt;&quot; -type f -print -exec rm -rf {} ;&lt;br/&gt;
eg:将脚手架放到D:\spring-stagging-archetype 目录下,目录下主要存放src和pom文件即可&lt;/p&gt;

&lt;h4&gt;3.2.4发布脚手架&lt;/h4&gt;

&lt;p&gt;用idea打开后配置maven &lt;/p&gt;

&lt;p&gt;在创建项目的时候也要保证maven的一致否则不能找到对应的脚手架pom&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/876d97f256c24f99b2d8084f9e95c1b9%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;

&lt;p&gt;配置distributionManagement后deploy到artifactId仓库&lt;br/&gt;
否则创建的时候：Could not find artifact org.springframework.boot.demo:spring-boot-stage-demo-archetype:pom:0.0.1-SNAPSHOT&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

          xxx-central
          libs-releases-local
          http://artifactory.66.com/libs-releases-local


          xxx-snapshots
          libs-snapshot-local
          http://artifactory.66.com/libs-snapshots-local


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pom里的 gav就是以后创建项目时用到的脚手架的gav&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.springframework.boot.demo
  spring-boot-stage-demo-archetype
  0.0.1-SNAPSHOT
  maven-archetype
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/965ac20601da4bba890280dee39a59cc%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;

&lt;p&gt;上传脚手架项目到git代码仓库保存便于以后更新和沉淀。&lt;/p&gt;

&lt;h2&gt;四、使用脚手架创建新的项目&lt;/h2&gt;

&lt;h3&gt;4.1配置脚手架的gav&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9c4bcfa2ef9468ea88761a4671d0926%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;h3&gt;4.2填写要创建的目标项目的gav&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/635238ea42974dfb8e18dfb6647cdf0a%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;h3&gt;4.3配置maven&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f95a104170e4947a75b1bab57d8c73f%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;

&lt;h3&gt;4.4根据新的artifactId生成新的工程&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ace9f0083634aadb43fc2dd3ce7c1a4%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;五、参考文档&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://maven.apache.org/archetype/maven-archetype-plugin/&quot;&gt;https://maven.apache.org/archetype/maven-archetype-plugin/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;作者：京东健康 马仁喜&lt;/p&gt;

&lt;p&gt;来源：京东云开发者社区&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4533e17e178f39382cf2a5d9e9b8d55e</guid>
<title>到底什么样的网络，才能带得动AIGC？</title>
<link>https://toutiao.io/k/ritp1wb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aafbd027484284a214d079613a7198ff</guid>
<title>项目汇报的正确打开方式</title>
<link>https://toutiao.io/k/zm36njy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;老张的求知思考世界&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;For-Think&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;专注互联网领域相关技术实践和思考，也分享职场成长、读书杂谈等内容。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9402a26852ac2c588296d60f9aa07c86</guid>
<title>WebXR Guide 分享</title>
<link>https://toutiao.io/k/t9p83fw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section class=&quot;post-content&quot;&gt;
            &lt;p&gt;终于找到机会分享了自己最近几年一直想分享的话题，这次分享也是非常浅显，重点在于科普这个东西；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇文章感谢 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/622957093&quot;&gt;《WebXR 入门必读》&lt;/a&gt; 提供的一些资料，也感谢 MDN 非常棒的文档，自己结合了去年开发 Oculus PWA 的一些探索；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在分享前，我觉得我需要回顾下计算机的发展历史；&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.002.jpeg&quot;/&gt;
&lt;p&gt;从20世纪40年代，世界诞生了第一台计算机，那个时候计算机还是一个大个子选手，界面和按键都非常粗糙；而我们只能通过各种信号灯的组合来传达具体的信息；随着技术的发展，美国各大公司进入个人计算机市场，我们熟悉的计算机模样，诞生了；我们认识到了鼠标，键盘；随着时间的推移，人们开始追求越来越轻量化，我们拥有了笔记本，用书包就能够随时随地的带着它到处办公；来了新世纪，我们拥有了触摸屏的 iPad，这是人类历史上非常伟大的发明之一；冯诺依曼模型，输入与输出完美了结合在一张显示屏上；带给了我们非常多的创新交互；&lt;/p&gt;
&lt;p&gt;而最近十年，人类还在寻找下一代计算机通用设备；比如 Apple Meta 都花了非常多资源在 VR 设备上，所以我们也可以期待它是否可以承担起这样的角色。因为 VR 头显设备本身，具备最先进显示技术，结合它超自由度的空间交互，会给人类进行创作，娱乐，工作等带来完全新的体验；所以我也觉得 VR 依旧是值得这些大厂区不断探索的；&lt;/p&gt;
&lt;h3 id=&quot;xr&quot;&gt;什么是 XR&lt;/h3&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.003.jpeg&quot;/&gt;
&lt;p&gt;从网上的资料来看，有人愿意用 X 表示多种内容，供大家区想象；从我们当前接触的场景来看，主要是 VR, AR 以及 XR (一种结合虚拟现实与增强现实的)方向；&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.004.jpeg&quot;/&gt;
&lt;p&gt;XR 给我们最大的不一样便是沉浸式体验(Immersive Experience)；自己把它解释成两个方向；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身临其境；通过视觉和听觉的刺激，设备给我们营造一种接近真实的体验；&lt;/li&gt;
&lt;li&gt;动静结合; 我们的交互不是单纯的按键，而是会动态的结合我们所在物理空间的位置和设备的位置，所以当会根据我们的行动做出反应；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;webxr&quot;&gt;WebXR&lt;/h3&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.005.jpeg&quot;/&gt;
&lt;p&gt;简单而言, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API&quot;&gt;WebXR&lt;/a&gt; 就是需要我们在 XR OS 的浏览器开发 Web 应用；&lt;/p&gt;
&lt;h4 id=&quot;webxrapi&quot;&gt;WebXR  API 介绍&lt;/h4&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.006.jpeg&quot;/&gt;
&lt;p&gt;对于任何新的 API 我们的第一件事情都是去判断它的兼容性；我们可以通过&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (&quot;xr&quot; in window.navigator) {
  /* WebXR can be used! */
} else {
  /* WebXR isn&#x27;t available */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;判断完之后，我们就是要做启动的事情了；其中 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XRSession&quot;&gt;XRSession&lt;/a&gt; 是 里面非常重要的一个概念；我们可以 &lt;code&gt;requestSession&lt;/code&gt; 来进入我们的 VR 模式；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;navigator.xr.requestSession(&#x27;immersive-vr&#x27;).then(onSessionStarted)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.007.jpeg&quot;/&gt;
&lt;p&gt;XRSession 里面会有两种模式；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inline 可以为普通模式，也就是会按照浏览器的执行方式去展示我们的页面，比如我们正常浏览的微博，知乎都可以正常展示&lt;/li&gt;
&lt;li&gt;immersive-vr 也就是我们预期的 VR 模式，我们会进入一个立体的场景，这取决于我们怎么实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.008.jpeg&quot;/&gt;
&lt;p&gt;在 XRSession 里面，我们可以实现对 WebXR API 的一些操作，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画面合成模式（environmentBlendMode）&lt;/li&gt;
&lt;li&gt;渲染状态（renderState）&lt;/li&gt;
&lt;li&gt;输入源列表（inputSources）&lt;/li&gt;
&lt;li&gt;渲染画面（requestAnimationFrame()）&lt;/li&gt;
&lt;li&gt;更新渲染状态（updateRenderState()）&lt;/li&gt;
&lt;li&gt;监听交互输入事件（比如 selectend）&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.009.jpeg&quot;/&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState&quot;&gt;XRRenderState&lt;/a&gt; 可以进行影响画面渲染的一些配置；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XRRenderState.baseLayer` 浏览器的合成系统 XRWebGLLayer 从中获取 XR 会话的图像。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XRRenderState.depthFar &lt;/code&gt; 远裁剪平面与观察者的距离 。远裁剪平面是平行于显示器的平面，超出该平面不再进行场景渲染。这实质上指定了用户可以看到的最大距离。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XRRenderState.depthNear&lt;/code&gt; 近裁剪平面与观察者的距离。近裁剪平面是平行于显示器的平面，场景渲染从该平面开始。比这更靠近观察者，并且不会绘制场景的任何部分。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XRRenderState.inlineVerticalFieldOfView&lt;/code&gt; 默认垂直视野，以弧度定义，在会话处于inline模式时使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XRRenderState.layers XRLayer&lt;/code&gt;c包含XR 合成器显示的对象的有序数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.011.jpeg&quot;/&gt;
&lt;p&gt;接下来也是我们需要去重点关注的； WebXR API 本身并不包含 3D 图形 API，要跟 WebGL API（或更现代的 WebGPU API）结合使用；因此如果我们要深入应用开发， WebGL 的学习肯定避免不了；&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.012.jpeg&quot;/&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XRSpace&quot;&gt;XRSpace&lt;/a&gt; 在 WebXR 中，一个“空间（XRSpace）”代表了虚拟空间中的一套 3D 坐标系，其原点对应了一个物理现实世界中的位置，因此“空间”可以起到把数字虚拟空间和物理现实空间关联到一起的作用; 借助它，我们可以更好处理我们交互；无论是来自手柄的以及头显本身；&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.013.jpeg&quot;/&gt;
&lt;p&gt;这里可以出一个问题？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们实现网页国际象棋，可以根据鼠标 click, mouseover 等事件来进行棋子的控制；如果我们想要实现立体的棋盘，摆在我们前方，我们要实现走棋，交互信息应该是怎样的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.014.jpeg&quot;/&gt;
&lt;p&gt;接下来也很重要；我们如何处理交互；VR 同样拥有众多的交互来源，比如我们常见两个手柄；初次之前，头显也是我们需要跟踪的交互设备之一；如果未来手势跟踪(Hand Tracking)技术越来越精确，我们的手也会变成我们交互处理的对象；&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.016.jpeg&quot;/&gt;
&lt;p&gt;通过上图，我们可以简单对比下我们是如何实现事件的绑定；&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.017.jpeg&quot;/&gt;
&lt;p&gt;除了上述介绍的 API 外，下面这些大家有兴趣也可以了解下&lt;/p&gt;

&lt;h3 id=&quot;&quot;&gt;如何开发&lt;/h3&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.018.jpeg&quot;/&gt;
&lt;p&gt;前面介绍了基本的 API 我们怎么开发呢；自己有一些小 tips 可以分享&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 Web 项目初始化(PWA 更好);因为是个 Web 项目，所以我们可以用我们喜欢的技术脚手架或者工程，什么 Webpack/TS/Eslnt 等可以自由搭配；如果你希望把应用发布到 Quest 商店，最好使用 PWA 的一些辅助工具；我之前写过一篇关于 Oculus 和 PWA 的文章，大家可以去瞅瞅；&lt;/li&gt;
&lt;li&gt;2 WebGL 是核心，所以我们最好选择合适的 WebGL 框架(Three.js,Babylon.js,claygl …)，写原生的代码真的非常繁琐；&lt;/li&gt;
&lt;li&gt;3 初始化 WebXR 并处理好 XRFrame (也可以选择 WebXR 的框架)；这个是我们都需要做的，借助文档，参考 WebXR Sample 可以帮助你理解他们；&lt;/li&gt;
&lt;li&gt;4 测试与真机调试；无论如何，一定要在真机上测试；&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.020.jpeg&quot;/&gt;
&lt;p&gt;我们平时开发，可以借助 &lt;a href=&quot;https://chrome.google.com/webstore/detail/webxr-api-emulator/mjddjgeghkdijejnciaefnkjmkafnnje&quot;&gt;webxr-api-emulator&lt;/a&gt; 来进行一些交互的处理；如果我们在真机调试的话，&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.021.jpeg&quot;/&gt;
&lt;p&gt;我们可以借助 &lt;code&gt;adb reverse&lt;/code&gt; 命令来进行 localhost 代理；当然别的代理网络工具都可以；因为 WebXR 的 API 也是只能在 HTTPS 或者 &lt;code&gt;localhost&lt;/code&gt; 下工作；&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.022.jpeg&quot;/&gt;
&lt;p&gt;开发完成之后，你当然可以发布自己的应用，别忘了打包 PWA 以及 APK 包；&lt;/p&gt;
&lt;p&gt;一些有用的工具：&lt;/p&gt;

&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.023.jpeg&quot;/&gt;
&lt;p&gt;这里我也简单对比了下传统 Web 和 WebXR 开发的异同；主要是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebXR 更偏图形化相关开发&lt;/li&gt;
&lt;li&gt;我们使用很多模型文件 （bx,gLTE,obj)&lt;/li&gt;
&lt;li&gt;我们处理交互会更加复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.024.jpeg&quot;/&gt;
&lt;p&gt;尽管 WebXR 开发非常难，但是由于 Web 天生的跨平台兼容性，以及无需安装，即开即用的特点，相信未来一定有自己的一片天地；&lt;/p&gt;
&lt;img src=&quot;https://img-1252472236.cos.ap-beijing.myqcloud.com/webxr%2FWebXR%20Guide.025.jpeg&quot;/&gt;
&lt;p&gt;最后安利：&lt;/p&gt;
&lt;p&gt;北京时间6月6日凌晨1点，WWDC23特别活动准时直播；&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/wwdc23/&quot;&gt;https://developer.apple.com/wwdc23/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小道消息： 不出意外的话，苹果将在WWDC 2023 开发者大会上推出新款 Mac Studio、 13 英寸 MacBook Pro 和 15 英寸 MacBook Air 机型，可能还有 24 英寸 iMac 和新款 Mac Pro，还将展示旗下首款 AR / VR 头显&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们期待 Apple 开始步入 XR 市场吧。&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;扩展阅读&lt;/h3&gt;


        &lt;/section&gt;
        
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>373084c4f2d3bab982dfaf15da3adf86</guid>
<title>一步到位 - 使用 KCL OCI Registry 管理 Kubernetes 配置</title>
<link>https://toutiao.io/k/2cgk1f8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-1g0fqss&quot; options=&quot;[object Object]&quot;&gt;&lt;p data-first-child=&quot;&quot; data-pid=&quot;_8bwgmI5&quot;&gt;&lt;i&gt;使用 KCL 和 KPM 简化 Kubernetes 配置管理的使用指南。&lt;/i&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-dba4dd69e9bb89890a19debbf71bfc34_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1900&quot; data-rawheight=&quot;470&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-dba4dd69e9bb89890a19debbf71bfc34_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1900&quot; data-rawheight=&quot;470&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-dba4dd69e9bb89890a19debbf71bfc34_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-dba4dd69e9bb89890a19debbf71bfc34_b.jpg&quot; data-original-token=&quot;v2-9cc465f684ab038f6b3ac23acdae1a63&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;什么是 KCL&lt;/h2&gt;&lt;p data-pid=&quot;UgOJ72GW&quot;&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.oschina.net/action/GoToLink%3Furl%3Dhttps%253A%252F%252Fgithub.com%252FKusionStack%252Fkcl&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KCL&lt;/a&gt; 是一个开源的基于约束的记录及函数语言。KCL 通过成熟的编程语言技术和实践来改进对大量繁杂配置比如云原生 Kubernetes 配置场景的编写，致力于构建围绕配置的更好的模块化、扩展性和稳定性，更简单的逻辑编写，以及更简单的自动化和生态工具集成。&lt;/p&gt;&lt;p data-pid=&quot;7xpCkqHp&quot;&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.oschina.net/action/GoToLink%3Furl%3Dhttps%253A%252F%252Fgithub.com%252FKusionStack%252Fkpm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KPM&lt;/a&gt; 是 KCL 包管理器。KPM 下载您的 KCL 包的依赖项、编译您的 KCL 包、制作包并将它们上传到 kcl 包注册表。&lt;/p&gt;&lt;h2&gt;为什么使用 KCL?&lt;/h2&gt;&lt;p data-pid=&quot;eOLhn3t6&quot;&gt;KCL 期望通过更现代化的声明式配置语言在 Kubernetes 资源管理解决如下问题：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;Se4_D3Ts&quot;&gt;通过&lt;b&gt;代码抽象&lt;/b&gt;等手段屏蔽基础设施和平台的细节，降低研发者负担&lt;/li&gt;&lt;li data-pid=&quot;-fJYfcig&quot;&gt;&lt;b&gt;编辑&lt;/b&gt;和&lt;b&gt;校验&lt;/b&gt;已有的存量配置或模版&lt;/li&gt;&lt;li data-pid=&quot;8h-ucaDd&quot;&gt;通过配置语言无副作用地管理跨团队的大规模配置数据，提升团队协作效率&lt;/li&gt;&lt;ul&gt;&lt;li data-pid=&quot;B5PKJaxe&quot;&gt;用&lt;b&gt;生产级高性能编程语言&lt;/b&gt;以&lt;b&gt;编写代码&lt;/b&gt;的方式提升配置的灵活度，比如条件语句、循环、函数、包管理等特性提升配置重用的能力&lt;/li&gt;&lt;li data-pid=&quot;ZZzKNPzZ&quot;&gt;在代码层面提升&lt;b&gt;配置语义验证&lt;/b&gt;的能力，比如字段可选 / 必选、类型、范围等配置检查能力&lt;/li&gt;&lt;li data-pid=&quot;idyI1x3A&quot;&gt;提供&lt;b&gt;配置分块编写、组合和抽象的能力&lt;/b&gt;，比如结构定义、结构继承、约束定义等能力&lt;/li&gt;&lt;li data-pid=&quot;TU_tZLcZ&quot;&gt;通过&lt;b&gt;多语言 SDK&lt;/b&gt;，&lt;b&gt;KCL 语言插件&lt;/b&gt;等手段提升其&lt;b&gt;自动化&lt;/b&gt;集成能力&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2&gt;如何使用 KPM 管理 Kubernetes 资源&lt;/h2&gt;&lt;h2&gt;1. 初始化一个空的 KCL 包&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.oschina.net/action/GoToLink%3Furl%3Dhttps%253A%252F%252Fkcl-lang.io%252Fzh-CN%252Fdocs%252Fuser_docs%252Fguides%252Fpackage-management%252Fquick-start%252F%25231-%2525E5%252588%25259D%2525E5%2525A7%25258B%2525E5%25258C%252596%2525E4%2525B8%252580%2525E4%2525B8%2525AA%2525E7%2525A9%2525BA%2525E7%25259A%252584-kcl-%2525E5%25258C%252585&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;​&lt;/a&gt;&lt;/h2&gt;&lt;p data-pid=&quot;8EddBbDQ&quot;&gt;使用 &lt;code&gt;kpm init&lt;/code&gt; 命令创建一个名为 &lt;code&gt;my_package&lt;/code&gt; 的 kcl 程序包，并且在我们创建完成一个名为 &lt;code&gt;my_package&lt;/code&gt; 的包后，我们需要通过命令 &lt;code&gt;cd my_package&lt;/code&gt; 进入这个包来进行后续的操作。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b78fe147d2d693c1ba1f60dc5080433a_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1400&quot; data-rawheight=&quot;600&quot; data-thumbnail=&quot;https://pic3.zhimg.com/v2-b78fe147d2d693c1ba1f60dc5080433a_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-b78fe147d2d693c1ba1f60dc5080433a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1400&quot; data-rawheight=&quot;600&quot; data-thumbnail=&quot;https://pic3.zhimg.com/v2-b78fe147d2d693c1ba1f60dc5080433a_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-b78fe147d2d693c1ba1f60dc5080433a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b78fe147d2d693c1ba1f60dc5080433a_b.gif&quot; data-original-token=&quot;v2-b78fe147d2d693c1ba1f60dc5080433a&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;kaSO0c_F&quot;&gt;&lt;code&gt;kpm&lt;/code&gt; 将会在执行 &lt;code&gt;kpm init my_package&lt;/code&gt; 命令的目录下创建两个默认的配置文件 &lt;code&gt;kcl.mod&lt;/code&gt; 和 &lt;code&gt;kcl.mod.lock&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;- my_package
        |- kcl.mod
        |- kcl.mod.lock
        |- # 你可以直接在这个目录下写你的kcl程序。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;x51Cvsqe&quot;&gt;&lt;code&gt;kcl.mod.lock&lt;/code&gt; 是 &lt;code&gt;kpm&lt;/code&gt; 用来固定依赖版本的文件，是自动生成的，请不要人工修改这个文件。&lt;/p&gt;&lt;p data-pid=&quot;YaQLYAdr&quot;&gt;&lt;code&gt;kpm&lt;/code&gt; 将会为这个新包创建一个默认的 &lt;code&gt;kcl.mod&lt;/code&gt;。如下所示:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[package]
name = &quot;my_package&quot;
edition = &quot;0.0.1&quot;
version = &quot;0.0.1&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;2. 为 KCL 包添加依赖&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.oschina.net/action/GoToLink%3Furl%3Dhttps%253A%252F%252Fkcl-lang.io%252Fzh-CN%252Fdocs%252Fuser_docs%252Fguides%252Fpackage-management%252Fquick-start%252F%25232-%2525E4%2525B8%2525BA-kcl-%2525E5%25258C%252585%2525E6%2525B7%2525BB%2525E5%25258A%2525A0%2525E4%2525BE%25259D%2525E8%2525B5%252596&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;​&lt;/a&gt;&lt;/h2&gt;&lt;p data-pid=&quot;SZAm6q6C&quot;&gt;然后，您可以通过 &lt;code&gt;kpm add&lt;/code&gt; 命令来为您当前的库添加一个外部依赖。&lt;/p&gt;&lt;p data-pid=&quot;lxMxW4lJ&quot;&gt;如下面的命令所示，为当前包添加一个版本号为 &lt;code&gt;1.27.2&lt;/code&gt; 并且名为 &lt;code&gt;k8s&lt;/code&gt; 的依赖包。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3942192967d53ef4ef49c9bd6425d2bb_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;300&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-3942192967d53ef4ef49c9bd6425d2bb_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-3942192967d53ef4ef49c9bd6425d2bb_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;300&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-3942192967d53ef4ef49c9bd6425d2bb_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-3942192967d53ef4ef49c9bd6425d2bb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-3942192967d53ef4ef49c9bd6425d2bb_b.gif&quot; data-original-token=&quot;v2-3942192967d53ef4ef49c9bd6425d2bb&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;NTkkDABd&quot;&gt;&lt;code&gt;kpm&lt;/code&gt; 会为您将依赖添加到 kcl.mod 文件中.&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[package]
name = &quot;my_package&quot;
edition = &quot;0.0.1&quot;
version = &quot;0.0.1&quot;

[dependencies]
k8s = &quot;1.27.2&quot; # The dependency &#x27;k8s&#x27; with version &#x27;1.27.2&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;编写一个程序使用包 &lt;code&gt;konfig&lt;/code&gt; 中的内容&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.oschina.net/action/GoToLink%3Furl%3Dhttps%253A%252F%252Fkcl-lang.io%252Fzh-CN%252Fdocs%252Fuser_docs%252Fguides%252Fpackage-management%252Fquick-start%252F%2523%2525E7%2525BC%252596%2525E5%252586%252599%2525E4%2525B8%252580%2525E4%2525B8%2525AA%2525E7%2525A8%25258B%2525E5%2525BA%25258F%2525E4%2525BD%2525BF%2525E7%252594%2525A8%2525E5%25258C%252585-konfig-%2525E4%2525B8%2525AD%2525E7%25259A%252584%2525E5%252586%252585%2525E5%2525AE%2525B9&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;​&lt;/a&gt;&lt;/h2&gt;&lt;p data-pid=&quot;OLtQe5Si&quot;&gt;在当前包中创建 &lt;code&gt;main.k&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;- my_package
        |- kcl.mod
        |- kcl.mod.lock
        |- main.k # Your KCL program.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;wTt8c3Dl&quot;&gt;并且将下面的内容写入 &lt;code&gt;main.k&lt;/code&gt; 文件中。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# 导入并使用外部依赖 `k8s` 包中的内容。
import k8s.api.core.v1 as k8core

k8core.Pod {
    metadata.name = &quot;web-app&quot;
    spec.containers = [{
        name = &quot;main-container&quot;
        image = &quot;nginx&quot;
        ports = [{containerPort = 80}]
    }]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;3. 运行 KCL 代码&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.oschina.net/action/GoToLink%3Furl%3Dhttps%253A%252F%252Fkcl-lang.io%252Fzh-CN%252Fdocs%252Fuser_docs%252Fguides%252Fpackage-management%252Fquick-start%252F%25233-%2525E8%2525BF%252590%2525E8%2525A1%25258C-kcl-%2525E4%2525BB%2525A3%2525E7%2525A0%252581&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;​&lt;/a&gt;&lt;/h2&gt;&lt;p data-pid=&quot;m9Hl98PB&quot;&gt;你可以使用 kpm 编译刚才编写的 &lt;code&gt;main.k&lt;/code&gt; 文件，得到编译后的结果。&lt;/p&gt;&lt;p data-pid=&quot;i1g6bXmo&quot;&gt;输出为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;apiVersion: v1
kind: Pod
metadata:
  name: web-app
spec:
  containers:
    - image: nginx
      name: main-container
      ports:
        - containerPort: 80&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-aa608852bf60663c664bf61e28e227d0_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;700&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-aa608852bf60663c664bf61e28e227d0_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-aa608852bf60663c664bf61e28e227d0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;700&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-aa608852bf60663c664bf61e28e227d0_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-aa608852bf60663c664bf61e28e227d0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-aa608852bf60663c664bf61e28e227d0_b.gif&quot; data-original-token=&quot;v2-aa608852bf60663c664bf61e28e227d0&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;想要了解更多？&lt;/h2&gt;&lt;p data-pid=&quot;-i4oaBGs&quot;&gt;有关详细信息，请参阅 KCL 网站和 KCL Github Repo。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>