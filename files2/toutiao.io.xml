<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a63ca72b60cd435db190975ae8ca76c0</guid>
<title>Flink 剖析 | Flink 侧流输出源码解析</title>
<link>https://toutiao.io/k/4wx8mlk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1388888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/gonuSfOlZqZDIAHnYQgicEIzfz5uwq63j3OtNVhOfjdtib6LQdn4YshhSBa66ReqwV2X0dX9uVdtLmYTOmBfpibkg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Flink 的 side output 为我们提供了侧流（分流）输出的功能，根据条件可以把一条流分为多个不同的流，之后做不同的处理逻辑，下面就来看下侧流输出相关的源码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看下面的一个 Demo，一个流被分成了 3 个流，一个主流，两个侧流输出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SingleOutputStreamOperator&amp;lt;JasonLeePOJO&amp;gt; process =&lt;br/&gt;        kafka_source1.process(&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; ProcessFunction&amp;lt;JasonLeePOJO, JasonLeePOJO&amp;gt;() {&lt;br/&gt;                    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;processElement&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;                            JasonLeePOJO value,&lt;br/&gt;                            ProcessFunction&amp;lt;JasonLeePOJO, JasonLeePOJO&amp;gt;.Context ctx,&lt;br/&gt;                            Collector&amp;lt;JasonLeePOJO&amp;gt; out)&lt;/span&gt;&lt;br/&gt;                            &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;                       &lt;span&gt;// 这个是主流输出&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;if&lt;/span&gt; (value.getName().equals(&lt;span&gt;&quot;flink&quot;&lt;/span&gt;)) {&lt;br/&gt;                            out.collect(value);&lt;br/&gt;                        &lt;span&gt;// 下面两个是测流输出&lt;/span&gt;&lt;br/&gt;                        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value.getName().equals(&lt;span&gt;&quot;spark&quot;&lt;/span&gt;)) {&lt;br/&gt;                            ctx.output(test, value);&lt;br/&gt;                        &lt;span&gt;// 测流&lt;/span&gt;&lt;br/&gt;                        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value.getName().equals(&lt;span&gt;&quot;hadoop&quot;&lt;/span&gt;)) {&lt;br/&gt;                            ctx.output(test1, value);&lt;br/&gt;                        }&lt;br/&gt;                    }&lt;br/&gt;                });&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更加清楚的查看每一个算子，我禁用了 operator chain，任务的 DAG 图如下所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5605170387779084&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gonuSfOlZqaVhQiaKB2sCibVa38F0jIWIicgw2WFaMoua7OibJLbcfpvO22H44f6R64mBmFqj8Sict0zwFicBu3IyhUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1702&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image-20220912183133701&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就比较清晰了，很明显从 process 算子开始，1 个数据流分为了 3 个数据流，当然，在默认情况下没有禁止&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;operator chain 所有的算子都是 chain 在一起的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;源码解析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来看第一个主流输出也就是 out.collect(value) 的源码，这里的 out 实际上是 TimestampedCollector 对象。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;TimestampedCollector#collect&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;collect&lt;/span&gt;&lt;span&gt;(T record)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    output.collect(reuse.replace(record));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 collect 方法中持有一个 output 对象，用来输出数据，在这里实际上是一个 CountingOutput 它是一个包装了 Output 的对象，主要用于更新发送数据的 metric，并输出数据。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;CountingOutput#collect&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;collect&lt;/span&gt;&lt;span&gt;(StreamRecord&amp;lt;OUT&amp;gt; record)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    numRecordsOut.inc();&lt;br/&gt;    output.collect(record);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 CountingOutput 中也持有一个 output 对象，但是这里的 output 是 BroadcastingOutputCollector 对象，从名字就可以看出它是往下游广播数据的，这里就有一个疑问？把数据广播到下游，那岂不是下游的每个数据流都有这条数据吗？这样的话是怎么实现分流的呢？带着这个疑问，我们来看 BroadcastingOutputCollector 的 collect 方法是怎么实现的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;BroadcastingOutputCollector#collect&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;collect&lt;/span&gt;&lt;span&gt;(StreamRecord&amp;lt;T&amp;gt; record)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 这里的 outputs 数组有三个 output 分别对应上面的三个输出流&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (Output&amp;lt;StreamRecord&amp;lt;T&amp;gt;&amp;gt; output : outputs) {&lt;br/&gt;        output.collect(record);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 BroadcastingOutputCollector 对象里也持有一个 output 对象，其实他们都实现了 Output 接口，用来往下游发送数据，这里的 outputs 是一个 Output 数组，代表了下游的所有 Output，因为上面有三个输出流，所以数组里面就包含了 3 个 Output 对象。循环的调用 output 的 collect 方法往下游发送数据，因为我打断了 operator chain，所以 process 算子和下游的 Print 算子不在同一个 operatorChain 内，那么上下游算子之间数据传输用的就是 RecordWriterOutput，否则用的是 CopyingChainingOutput 或者 ChainingOutput，具体使用的是哪个 Output 这里就不多介绍了，后面有时间的话会单独介绍。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;RecordWriterOutput#collect&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;collect&lt;/span&gt;&lt;span&gt;(StreamRecord&amp;lt;OUT&amp;gt; record)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 主流是没有 outputTag 的，只有测流有 outputTag&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.outputTag != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;// we are not responsible for emitting to the main output.&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    pushToRecordWriter(record);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着来看 RecordWriterOutput 的 collect 方法，在 collect 方法里面会先判断 outputTag 是否为空，如果不为空不做任何处理，直接返回，否则就把数据推送到下游算子，只有侧流输出才需要定义 outputTag，主流（正常流）是没有 outputTag 的，所以这里会走 pushToRecordWriter 方法把数据写入到下游，也就是说虽然会以广播的形式把数据广播到所有下游，但其实另外两个侧流是直接返回的，只有主流才会把数据推送到下游，这也就解释了上面的疑问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后再来看第二个侧流输出 ctx.output(test, value) 的源码，这里的 ctx 实际上是 ProcessOperator#ContextImpl 对象。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;ProcessOperator#ContextImpl#output&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;X&amp;gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;output&lt;/span&gt;&lt;span&gt;(OutputTag&amp;lt;X&amp;gt; outputTag, X value)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (outputTag == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;OutputTag must not be null.&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    output.collect(outputTag, &lt;span&gt;new&lt;/span&gt; StreamRecord&amp;lt;&amp;gt;(value, element.getTimestamp()));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 outputTag 是空，直接抛出异常，因为这个是侧流，所以必须要定义 OutputTag。这里的 output 实际上是父类 AbstractStreamOperator 所持有的变量，如果 outputTag 不为空，就调用 output 的 collect 方法把数据发送到下游，这里的 output 和上面的一样是 CountingOutput 但是 collect 方法是另外一个重载的方法。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;CountingOutput#collect&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;X&amp;gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;collect&lt;/span&gt;&lt;span&gt;(OutputTag&amp;lt;X&amp;gt; outputTag, StreamRecord&amp;lt;X&amp;gt; record)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    numRecordsOut.inc();&lt;br/&gt;    output.collect(outputTag, record);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以发现，这个 collect 方法比上面那个多了一个 OutputTag 参数，也就是使用侧流输出的时候定义的 OutputTag 对象，然后调用 output 的 collect 方法发送数据，这个也和上面的一样，同样是 BroadcastingOutputCollector 对象的另外一个重载方法，多了一个 OutputTag 参数。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;BroadcastingOutputCollector#collect&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;X&amp;gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;collect&lt;/span&gt;&lt;span&gt;(OutputTag&amp;lt;X&amp;gt; outputTag, StreamRecord&amp;lt;X&amp;gt; record)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (Output&amp;lt;StreamRecord&amp;lt;T&amp;gt;&amp;gt; output : outputs) {&lt;br/&gt;        output.collect(outputTag, record);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的逻辑和上面是一样的，同样的循环调用 collect 方法发送数据。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;RecordWriterOutput#collect&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;X&amp;gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;collect&lt;/span&gt;&lt;span&gt;(OutputTag&amp;lt;X&amp;gt; outputTag, StreamRecord&amp;lt;X&amp;gt; record)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 先要判断两个 OutputTag 是否一样&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (OutputTag.isResponsibleFor(&lt;span&gt;this&lt;/span&gt;.outputTag, outputTag)) {&lt;br/&gt;        pushToRecordWriter(record);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个 collect 方法中会先判断传入的 OutputTag 对象和成员变量 this.outputTag 是不是相等，如果是的话，就发送数据，否则不做任何处理，所以这里每次只会选择一个下游侧流输出数据，这样就实现了所谓的分流。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;OutputTag#isResponsibleFor&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isResponsibleFor&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;        @Nullable OutputTag&amp;lt;?&amp;gt; owner, @Nonnull OutputTag&amp;lt;?&amp;gt; other)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; other.equals(owner);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到在 isResponsibleFor 方法内是直接调用 OutputTag 的 equals 方法判断两个对象是否相等的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三个侧流 test1 ctx.output(test1, value) 和第二个侧流 test 是完全一样的情况，这里就不在看代码了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面是完成了分流操作，那怎么获取到分流后结果呢（数据流）？我们可以通过 getSideOutput 方法获取。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;DataStream&amp;lt;JasonLeePOJO&amp;gt; sideOutput = process.getSideOutput(test);&lt;br/&gt;DataStream&amp;lt;JasonLeePOJO&amp;gt; sideOutput1 = process.getSideOutput(test1);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;getSideOutput 源码&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;X&amp;gt; &lt;span&gt;DataStream&amp;lt;X&amp;gt; &lt;span&gt;getSideOutput&lt;/span&gt;&lt;span&gt;(OutputTag&amp;lt;X&amp;gt; sideOutputTag)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    sideOutputTag = clean(requireNonNull(sideOutputTag));&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// make a defensive copy&lt;/span&gt;&lt;br/&gt;    sideOutputTag = &lt;span&gt;new&lt;/span&gt; OutputTag&amp;lt;X&amp;gt;(sideOutputTag.getId(), sideOutputTag.getTypeInfo());&lt;br/&gt;&lt;br/&gt;    TypeInformation&amp;lt;?&amp;gt; type = requestedSideOutputs.get(sideOutputTag);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (type != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !type.equals(sideOutputTag.getTypeInfo())) {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnsupportedOperationException(&lt;br/&gt;                &lt;span&gt;&quot;A side output with a matching id was &quot;&lt;/span&gt;&lt;br/&gt;                        + &lt;span&gt;&quot;already requested with a different type. This is not allowed, side output &quot;&lt;/span&gt;&lt;br/&gt;                        + &lt;span&gt;&quot;ids need to be unique.&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    requestedSideOutputs.put(sideOutputTag, sideOutputTag.getTypeInfo());&lt;br/&gt;&lt;br/&gt;    SideOutputTransformation&amp;lt;X&amp;gt; sideOutputTransformation =&lt;br/&gt;            &lt;span&gt;new&lt;/span&gt; SideOutputTransformation&amp;lt;&amp;gt;(&lt;span&gt;this&lt;/span&gt;.getTransformation(), sideOutputTag);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DataStream&amp;lt;&amp;gt;(&lt;span&gt;this&lt;/span&gt;.getExecutionEnvironment(), sideOutputTransformation);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;getSideOutput 方法里先是构建了一个 SideOutputTransformation 对象，然后又构建了 DataStream 对象，这样我们就可以基于分流后的 DataStream 做不同的处理逻辑了，从而实现了把一个 DataStream 分流成多个 DataStream 功能。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过对侧流输出的源码进行解析，在分流的时候，数据是通过广播的方式发送到下游算子的，对于主流的数据来说，只有 OutputTag 为空的才会处理，侧流因为 OutputTag 不为空，所以直接返回，不做任何处理，那对于侧流的数据来说，是通过判断两个 OutputTag 是否相等，所以每次只会把数据发送到下游对应的那一个侧流上去，这样即可实现分流逻辑。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16203761187245=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; outline: 0px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; background-color: rgb(255, 255, 255); color: black; font-family: PingFangSC-Light; font-size: 16px; letter-spacing: 0px; text-align: left; white-space: normal; line-height: 1.6; word-break: break-word;&quot; class=&quot;js_darkmode__42&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgb(0,0,0)&quot; data-darkmode-color-16340352712012=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgb(0,0,0)&quot; data-darkmode-color-16527826730046=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgb(0,0,0)&quot;&gt;&lt;h3 data-darkmode-color-16203761187245=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-color-16340352712012=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-color-16527826730046=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgb(0,0,0)|rgb(14, 136, 235)&quot;&gt;&lt;span data-darkmode-color-16203761187245=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-color-16340352712012=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-color-16527826730046=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgb(0,0,0)|rgb(14, 136, 235)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(14, 136, 235)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgb(0,0,0)|rgb(14, 136, 235)&quot;&gt;推荐阅读&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;blockquote data-type=&quot;1&quot; data-url=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3MDE0MjUzMA==&amp;amp;mid=2247483927&amp;amp;idx=1&amp;amp;sn=1a0e206bdd5c15d5920be3ec8b4e0ecd&amp;amp;chksm=ce93053af9e48c2cde67173bcd9e5d82f0a8a44c76e6923d213ec32f6048397085480ef02b21&amp;amp;token=1966356601&amp;amp;lang=zh_CN#rd&quot; data-author-name=&quot;JasonLee&quot; data-content-utf8-length=&quot;25&quot; data-source-title=&quot;Flink SQL 解析嵌套的 JSON 数据&quot; data-darkmode-color-16203761187245=&quot;rgba(163, 163, 163, 0.5)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 0px; outline: 0px; border-color: rgb(64, 64, 64); color: rgba(0, 0, 0, 0.5); max-width: 100%; background-color: rgb(255, 255, 255); font-family: PingFangSC-Light; text-align: left; white-space: normal; letter-spacing: 0.476px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__43&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgba(163, 163, 163, 0.5)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgba(0, 0, 0, 0.5)&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.5)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.5)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.5)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.5)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)&quot;&gt;&lt;section class=&quot;blockquote_info js_darkmode__44&quot; data-json=&quot;%7B%22type%22%3A%22inner%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3EFlink%26nbsp%3BSQL%26nbsp%3B%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%26nbsp%3BJSON%26nbsp%3B%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%3C%2Fp%3E%22%2C%22digestLen%22%3A25%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%22title%22%3A%22Flink%20SQL%20%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%20JSON%20%E6%95%B0%E6%8D%AE%22%2C%22url%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3MDE0MjUzMA%3D%3D%26mid%3D2247483927%26idx%3D1%26sn%3D1a0e206bdd5c15d5920be3ec8b4e0ecd%26chksm%3Dce93053af9e48c2cde67173bcd9e5d82f0a8a44c76e6923d213ec32f6048397085480ef02b21%26token%3D1966356601%26lang%3Dzh_CN%23rd%22%2C%22nickname%22%3A%22JasonLee%E7%9A%84%E5%8D%9A%E5%AE%A2%22%2C%22authorName%22%3A%22JasonLee%22%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%5D%7D&quot; data-darkmode-color-16203761187245=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 1.17647em; outline: 0px; max-width: 100%; overflow-wrap: break-word; color: rgba(0, 0, 0, 0.3); hyphens: auto; box-sizing: border-box !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;&gt;&lt;span data-darkmode-color-16340352712012=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(0,0,0)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; color: black; letter-spacing: 0.2em; word-spacing: 0.1em; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__45&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(0,0,0)&quot; data-darkmode-color-16527826730046=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(0,0,0)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(0,0,0)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3MDE0MjUzMA==&amp;amp;mid=2247484144&amp;amp;idx=1&amp;amp;sn=12462bf23cbb4e318857dd53375666b5&amp;amp;chksm=ce9305ddf9e48ccb64e5712ee399b2a10fe1b1fcb7081211109af90da961d6c8a59135860bc0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-color-16340352712012=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(0,0,0)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(0,0,0)|rgb(125, 144, 169)&quot; data-darkmode-color-16527826730046=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(0,0,0)|rgb(125, 144, 169)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(0,0,0)|rgb(125, 144, 169)&quot;&gt;Flink 任务实时监控最佳实践&lt;/a&gt;&lt;/span&gt;&lt;br data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;/&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_darkmode__46&quot; data-json=&quot;%7B%22type%22%3A%22inner%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3EFlink%26nbsp%3BSQL%26nbsp%3B%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%26nbsp%3BJSON%26nbsp%3B%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%3C%2Fp%3E%22%2C%22digestLen%22%3A25%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%22title%22%3A%22Flink%20SQL%20%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%20JSON%20%E6%95%B0%E6%8D%AE%22%2C%22url%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3MDE0MjUzMA%3D%3D%26mid%3D2247483927%26idx%3D1%26sn%3D1a0e206bdd5c15d5920be3ec8b4e0ecd%26chksm%3Dce93053af9e48c2cde67173bcd9e5d82f0a8a44c76e6923d213ec32f6048397085480ef02b21%26token%3D1966356601%26lang%3Dzh_CN%23rd%22%2C%22nickname%22%3A%22JasonLee%E7%9A%84%E5%8D%9A%E5%AE%A2%22%2C%22authorName%22%3A%22JasonLee%22%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%5D%7D&quot; data-darkmode-color-16203761187245=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 1.17647em; outline: 0px; max-width: 100%; overflow-wrap: break-word; color: rgba(0, 0, 0, 0.3); hyphens: auto; box-sizing: border-box !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3MDE0MjUzMA==&amp;amp;mid=2247484163&amp;amp;idx=1&amp;amp;sn=2c004869a7480a903bb1f7e12d7f4dd4&amp;amp;chksm=ce93042ef9e48d38663424019f7d977ce86a50e32a1854ad7bfdaeba288ee83ebe3d7838edc0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(125, 144, 169)&quot; data-darkmode-color-16527826730046=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(125, 144, 169)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(125, 144, 169)&quot;&gt;Flink on yarn 实时日志收集最佳实践&lt;/a&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_darkmode__47&quot; data-json=&quot;%7B%22type%22%3A%22inner%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3EFlink%26nbsp%3BSQL%26nbsp%3B%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%26nbsp%3BJSON%26nbsp%3B%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%3C%2Fp%3E%22%2C%22digestLen%22%3A25%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%22title%22%3A%22Flink%20SQL%20%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%20JSON%20%E6%95%B0%E6%8D%AE%22%2C%22url%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3MDE0MjUzMA%3D%3D%26mid%3D2247483927%26idx%3D1%26sn%3D1a0e206bdd5c15d5920be3ec8b4e0ecd%26chksm%3Dce93053af9e48c2cde67173bcd9e5d82f0a8a44c76e6923d213ec32f6048397085480ef02b21%26token%3D1966356601%26lang%3Dzh_CN%23rd%22%2C%22nickname%22%3A%22JasonLee%E7%9A%84%E5%8D%9A%E5%AE%A2%22%2C%22authorName%22%3A%22JasonLee%22%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%5D%7D&quot; data-darkmode-color-16203761187245=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 1.17647em; outline: 0px; max-width: 100%; overflow-wrap: break-word; color: rgba(0, 0, 0, 0.3); hyphens: auto; box-sizing: border-box !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3MDE0MjUzMA==&amp;amp;mid=2247484296&amp;amp;idx=1&amp;amp;sn=4b0343e69da1e2994fadd0ee923ec4ec&amp;amp;chksm=ce9304a5f9e48db3d689b2aad035bd88289efd2201c4c6b2f33bd4b74eaf3e204ce0b447c631&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; data-darkmode-color-16527826730046=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(125, 144, 169)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(125, 144, 169)&quot;&gt;Flink 1.14.0 全新的 Kafka Connector&lt;/a&gt;&lt;br data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;/&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_darkmode__48&quot; data-json=&quot;%7B%22type%22%3A%22inner%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3EFlink%26nbsp%3BSQL%26nbsp%3B%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%26nbsp%3BJSON%26nbsp%3B%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%3C%2Fp%3E%22%2C%22digestLen%22%3A25%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%22title%22%3A%22Flink%20SQL%20%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%20JSON%20%E6%95%B0%E6%8D%AE%22%2C%22url%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3MDE0MjUzMA%3D%3D%26mid%3D2247483927%26idx%3D1%26sn%3D1a0e206bdd5c15d5920be3ec8b4e0ecd%26chksm%3Dce93053af9e48c2cde67173bcd9e5d82f0a8a44c76e6923d213ec32f6048397085480ef02b21%26token%3D1966356601%26lang%3Dzh_CN%23rd%22%2C%22nickname%22%3A%22JasonLee%E7%9A%84%E5%8D%9A%E5%AE%A2%22%2C%22authorName%22%3A%22JasonLee%22%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%5D%7D&quot; data-darkmode-color-16203761187245=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 1.17647em; outline: 0px; max-width: 100%; overflow-wrap: break-word; color: rgba(0, 0, 0, 0.3); hyphens: auto; box-sizing: border-box !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3MDE0MjUzMA==&amp;amp;mid=2247484343&amp;amp;idx=1&amp;amp;sn=79cde5a725e05ace0bc5bae9443cb874&amp;amp;chksm=ce93049af9e48d8c46cd7d099f50bb35e3eb1c811887052862f35c05303ba0325f466ef8ed8f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; data-darkmode-color-16527826730046=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(125, 144, 169)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(125, 144, 169)&quot;&gt;Flink 1.14.0 消费 kafka 数据自定义反序列化类&lt;/a&gt;&lt;br data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;/&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_darkmode__49&quot; data-json=&quot;%7B%22type%22%3A%22inner%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3EFlink%26nbsp%3BSQL%26nbsp%3B%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%26nbsp%3BJSON%26nbsp%3B%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%3C%2Fp%3E%22%2C%22digestLen%22%3A25%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%22title%22%3A%22Flink%20SQL%20%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%20JSON%20%E6%95%B0%E6%8D%AE%22%2C%22url%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3MDE0MjUzMA%3D%3D%26mid%3D2247483927%26idx%3D1%26sn%3D1a0e206bdd5c15d5920be3ec8b4e0ecd%26chksm%3Dce93053af9e48c2cde67173bcd9e5d82f0a8a44c76e6923d213ec32f6048397085480ef02b21%26token%3D1966356601%26lang%3Dzh_CN%23rd%22%2C%22nickname%22%3A%22JasonLee%E7%9A%84%E5%8D%9A%E5%AE%A2%22%2C%22authorName%22%3A%22JasonLee%22%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%5D%7D&quot; data-darkmode-color-16203761187245=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 1.17647em; outline: 0px; max-width: 100%; overflow-wrap: break-word; color: rgba(0, 0, 0, 0.3); hyphens: auto; box-sizing: border-box !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3MDE0MjUzMA==&amp;amp;mid=2247484429&amp;amp;idx=1&amp;amp;sn=691b98f0fee4e58d3e5078a3e1a82c7f&amp;amp;chksm=ce930320f9e48a36da255b1711958d3d985e72ca98ded18af04524b7652f28637528a7652f50&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Flink SQL JSON Format 源码解析&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(125, 144, 169)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)|rgb(125, 144, 169)&quot;&gt;Flink SQL JSON Format 源码解析&lt;/a&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_darkmode__50&quot; data-json=&quot;%7B%22type%22%3A%22inner%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3EFlink%26nbsp%3BSQL%26nbsp%3B%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%26nbsp%3BJSON%26nbsp%3B%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%3C%2Fp%3E%22%2C%22digestLen%22%3A25%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%22title%22%3A%22Flink%20SQL%20%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%20JSON%20%E6%95%B0%E6%8D%AE%22%2C%22url%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3MDE0MjUzMA%3D%3D%26mid%3D2247483927%26idx%3D1%26sn%3D1a0e206bdd5c15d5920be3ec8b4e0ecd%26chksm%3Dce93053af9e48c2cde67173bcd9e5d82f0a8a44c76e6923d213ec32f6048397085480ef02b21%26token%3D1966356601%26lang%3Dzh_CN%23rd%22%2C%22nickname%22%3A%22JasonLee%E7%9A%84%E5%8D%9A%E5%AE%A2%22%2C%22authorName%22%3A%22JasonLee%22%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%5D%7D&quot; data-darkmode-color-16203761187245=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 1.17647em; outline: 0px; max-width: 100%; overflow-wrap: break-word; color: rgba(0, 0, 0, 0.3); hyphens: auto; box-sizing: border-box !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3MDE0MjUzMA==&amp;amp;mid=2247484481&amp;amp;idx=1&amp;amp;sn=f79bacbc1241008130ed515dbf5cf859&amp;amp;chksm=ce93036cf9e48a7ac2d449c94cb5eda37cae92761649a24548fd6bb78007903e59cc568008a0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Flink on yarn 远程调试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; hasload=&quot;1&quot;&gt;Flink on yarn 远程调试&lt;/a&gt;&lt;br data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;/&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_darkmode__51&quot; data-json=&quot;%7B%22type%22%3A%22inner%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3EFlink%26nbsp%3BSQL%26nbsp%3B%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%26nbsp%3BJSON%26nbsp%3B%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%3C%2Fp%3E%22%2C%22digestLen%22%3A25%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%22title%22%3A%22Flink%20SQL%20%E8%A7%A3%E6%9E%90%E5%B5%8C%E5%A5%97%E7%9A%84%20JSON%20%E6%95%B0%E6%8D%AE%22%2C%22url%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3MDE0MjUzMA%3D%3D%26mid%3D2247483927%26idx%3D1%26sn%3D1a0e206bdd5c15d5920be3ec8b4e0ecd%26chksm%3Dce93053af9e48c2cde67173bcd9e5d82f0a8a44c76e6923d213ec32f6048397085480ef02b21%26token%3D1966356601%26lang%3Dzh_CN%23rd%22%2C%22nickname%22%3A%22JasonLee%E7%9A%84%E5%8D%9A%E5%AE%A2%22%2C%22authorName%22%3A%22JasonLee%22%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%5D%7D&quot; data-darkmode-color-16203761187245=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 1.17647em; outline: 0px; max-width: 100%; overflow-wrap: break-word; color: rgba(0, 0, 0, 0.3); hyphens: auto; box-sizing: border-box !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16340352712012=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-color-16527826730046=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3MDE0MjUzMA==&amp;amp;mid=2247484509&amp;amp;idx=1&amp;amp;sn=3fa6a3f223b6f007ee54682a5e4e4853&amp;amp;chksm=ce930370f9e48a663a2891cd2036b1337e42e34b6a15511cbdb2071ee6f3c4d3b9a9e973be83&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Flink 通过 State Processor API 实现状态的读取和写入&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot; hasload=&quot;1&quot;&gt;Flink 通过 State Processor API 实现状态的读取和写入&lt;/a&gt;&lt;br data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgba(163, 163, 163, 0.3)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)|rgba(0, 0, 0, 0.5)|rgba(0, 0, 0, 0.3)&quot;/&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-bgcolor-16630772063213=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16630772063213=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)&quot;&gt;&lt;br data-darkmode-bgcolor-16630772063213=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16630772063213=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(43, 43, 43)&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3MDE0MjUzMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/gonuSfOlZqbKokGZugP0U3ibRtXVaxGJfMPs7TKZiaU29or4CMffxM35wkO6bc4CsDhYibBuibFicVS4M9vH3RF1dqg/0?wx_fmt=png&quot; data-nickname=&quot;JasonLee实时计算&quot; data-alias=&quot;&quot; data-signature=&quot;主要专注于实时计算领域 会不定时更新 Flink Spark 系列原理以及源码分析的文章&quot; data-from=&quot;1&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span data-darkmode-color-16203761187245=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); font-family: PingFangSC-Light; text-align: left; font-size: 15px; letter-spacing: 3px; word-spacing: 1.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16340352712012=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(43, 43, 43)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(0, 0, 0)&quot; class=&quot;js_darkmode__52&quot; data-darkmode-color-16527826730046=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(0, 0, 0)&quot;&gt;如果你觉得文章对你有帮助,麻烦点一下&lt;/span&gt;&lt;code data-darkmode-color-16203761187245=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgb(30, 107, 184)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-style=&quot;margin-right: 2px; margin-left: 2px; padding: 2px 4px; outline: 0px; max-width: 100%; overflow-wrap: break-word; background-color: rgba(27, 31, 35, 0.05); text-align: left; white-space: normal; font-size: 14px; font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace; letter-spacing: 3px; word-spacing: 1.5px; border-radius: 4px; color: rgb(30, 107, 184); word-break: break-all; box-sizing: border-box !important;&quot; class=&quot;js_darkmode__53&quot; data-darkmode-bgcolor-16210645585874=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-darkmode-color-16210645585874=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgb(30, 107, 184)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgba(27, 31, 35, 0.05)&quot; data-darkmode-color-16340352712012=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(43, 43, 43)|rgb(0, 0, 0)|rgb(30, 107, 184)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-darkmode-color-16392804123523=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(30, 107, 184)&quot; data-darkmode-color-16527826730046=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgb(30, 107, 184)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-darkmode-color-16630772063213=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(30, 107, 184)&quot;&gt;赞&lt;/code&gt;&lt;span data-darkmode-color-16203761187245=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); font-family: PingFangSC-Light; text-align: left; font-size: 15px; letter-spacing: 3px; word-spacing: 1.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16340352712012=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(43, 43, 43)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(0, 0, 0)&quot; class=&quot;js_darkmode__54&quot; data-darkmode-color-16527826730046=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(0, 0, 0)&quot;&gt;和&lt;/span&gt;&lt;code data-darkmode-color-16203761187245=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgb(30, 107, 184)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-style=&quot;margin-right: 2px; margin-left: 2px; padding: 2px 4px; outline: 0px; max-width: 100%; overflow-wrap: break-word; background-color: rgba(27, 31, 35, 0.05); text-align: left; white-space: normal; font-size: 14px; font-family: &amp;quot;Operator Mono&amp;quot;, Consolas, Monaco, Menlo, monospace; letter-spacing: 3px; word-spacing: 1.5px; border-radius: 4px; color: rgb(30, 107, 184); word-break: break-all; box-sizing: border-box !important;&quot; class=&quot;js_darkmode__55&quot; data-darkmode-bgcolor-16210645585874=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-darkmode-color-16210645585874=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgb(30, 107, 184)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)|rgba(27, 31, 35, 0.05)&quot; data-darkmode-color-16340352712012=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(43, 43, 43)|rgb(0, 0, 0)|rgb(30, 107, 184)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-darkmode-color-16392804123523=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(30, 107, 184)&quot; data-darkmode-color-16527826730046=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgb(30, 107, 184)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgba(49, 56, 63, 0.05)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgba(27, 31, 35, 0.05)&quot; data-darkmode-color-16630772063213=&quot;rgb(30, 107, 184)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(30, 107, 184)&quot;&gt;在看&lt;/code&gt;&lt;span data-darkmode-color-16203761187245=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16203761187245=&quot;#fff|rgb(0,0,0)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16203761187245=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16203761187245=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;outline: 0px; max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); font-family: PingFangSC-Light; text-align: left; font-size: 15px; letter-spacing: 3px; word-spacing: 1.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-16210645585874=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16210645585874=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16210645585874=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16210645585874=&quot;#fff|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16340352712012=&quot;rgba(112, 0, 0, 0.039999999999999994)&quot; data-darkmode-original-bgcolor-16340352712012=&quot;#fff|rgba(50, 0, 0, 0.039999999999999994)&quot; data-darkmode-color-16340352712012=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16340352712012=&quot;#fff|rgb(43, 43, 43)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16392804123523=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16392804123523=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16392804123523=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16392804123523=&quot;#fff|rgb(0, 0, 0)&quot; class=&quot;js_darkmode__56&quot; data-darkmode-color-16527826730046=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16527826730046=&quot;#fff|rgb(0,0,0)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16527826730046=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16527826730046=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-bgcolor-16630772063213=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16630772063213=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16630772063213=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16630772063213=&quot;#fff|rgb(0, 0, 0)&quot;&gt;吧,你的支持是我创作的最大动力.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 13&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;js_album_directory__size&quot;&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ece1030eab44b24de3f598679684cc7c</guid>
<title>快 50 岁了，怎么还在写代码？</title>
<link>https://toutiao.io/k/258iqho</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今年夏天这个暑假，姐姐家的小朋友由于暑期实习，借住在我家。小朋友是一位零零后，今年大三升大四，马上就面临着考公、考研、找工作等等人生重要的节点。实习工作不算太忙，晚上吃完饭后还能坐下来聊聊天。因此我得以能和年轻的一代进行深入的交流，探讨学习、职业、未来、人生等话题，借此我也得以了解到年轻人的一些想法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友的专业学的是计算机，既憧憬着未来，又对未来感到焦虑。本次的话题围绕着圈子中广泛流传的 35 岁危机（中年危机）展开。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：舅，您现在还在写代码吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：还在写代码啊，而且主要工作就是编程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：您差不多有 50 岁了吧，怎么还在写代码？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：我还没那么老，离 50 还差好几岁呢。你这话是不是包含两层意思？一层意思是都这么老了，还写代码，太丢人了。第二层意思是，年龄这么大，怎么还能写代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：我倒没想那么多，只是网络传闻程序员 35 岁就会下岗。对了，我正好问一问，如果您的领导比您还年轻，会不会觉得尴尬？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：这么说吧，编程就是一份工作，在谁的手下干活不都是干活。再说，中国人受“官本位”思想影响很深，觉得一个人没做管理就很失败。只要想到这个世界大部分的人都不是管理者，就可以很坦然的面对。再说，你做再大的官，仍然要受人管。即使你是公司的老板，一样还是需要满足用户需求，迎合用户。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：如果领导比我资历老，我心服口服，但如果领导比我年轻，我觉得有点难以接受。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：在你的同龄人中，或者比你年少的人当中，是不是有非常杰出的才俊？比如前段时间上热搜的华为天才少年，要是和他们比，那你确实会比较郁闷。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：这不能相提并论吧。首先他们只是特例，其次，他们离我比较远，感觉不明显。就像比尔.盖茨，年纪轻轻成为世界首富，但世上的人不会和自己过意不去，去和他比。但直属领导就不一样，每天都要面对。而且成为我的领导，应该不需要什么天赋吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：那你是认为应该拼资历啰。如果 IT 行业是一个拼资历的行业，就不会有那么多年轻人涌入。这个行业高速发展，不能用传统行业的思维来考虑问题。退一步说，如果职位都被资历深的人占据，年轻人得不到上升的机会，那年轻人也会抱怨吧。人不能这样，年轻时希望打破世界秩序，到年老时又拼命维护旧秩序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：也是，我之前看过一篇文章，讲到踏板效应：当拥挤的公交车在站台边停下时，车下的人会拼命的往车上挤，一边挤一边央求车上的人往里挪挪；而一旦挤上之后，就会试图阻止车下还在往上挤的人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：其实认识到这一点很重要，我当初选择 IT 行业，就是觉得它充满活力，充满无限可能，而这种可能也包含成为炮灰。虽然我最后也没能做出很好的成绩，但也能坦然接受这个结果。机遇、胆识、才能、毅力等等众多因素决定着一个人最终的成就，只要曾经努力过就行。再说，我也是凭借一技之长挣工资，不丢人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：我还是希望以后能成为管理者，面子上好看一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：哈哈，你这是没有受到社会的毒打，过十年再看吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：那网络上传说的 35 岁危机又是怎么回事？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：先问你一个问题，编写代码是不是脑力劳动？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：嗯，虽然程序员喜欢自黑码农或者搬砖的，但编写代码的确主要费脑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：你看电影中，是不是有很多白发苍苍的科学家、研究员和教授，他们都属于脑力劳动者，年龄大了，照样可以做科研。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：舅，您这是在偷换概念。那些科学家都是顶尖人才，属于金字塔的顶端，当然不愁饭碗。像我这样资质平平，以后可能就是一个普普通通的工程师。这个道理我懂，不管在哪个领域，能做到顶尖当然出路都很宽广，但我更关心的是普通人面临的困境。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：那些研究员也不是个个都是科学家啊！也有一些研究员只是一辈子做实验，并没有研究出什么成果。这样说吧，前段时间报道过一位日本老奶奶，58岁接触电脑，81岁自学编程，收到过苹果CEO蒂姆·库克的邀请参加WWDC大会。这虽然只是个案，但也说明，只要脑袋还在运转，写代码并非不可能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：感觉这个例子还是不太恰当，我现在的困惑就是，新技术层出不穷，就拿 python 来说吧，每年都会冒出新框架，现在都感觉学不过来，等到年龄大了，不是更跟不上了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：你为什么会认为学习能力和年龄有关呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：年龄大了，记忆力会退化，反应也会变慢，这可是有科学根据的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：这个我承认。但学习不仅仅靠记忆，反应慢可以多投入时间。如果你读过有关学习的研究，应该知道，学习过程中最重要将自己所学的知识串联起来运用到实际中，将自己所学的碎片知识系统的连接到一起，形成系统化的体系。这样所学的知识不会遗忘。随着年龄增长，掌握的知识越来越多，在学习新知识时就越容易和以往的知识发生联结。比如说，你开始学习 C 语言，是不是觉得很难。再学习 python 语言时，是不是觉得编程语言无非就是变量、条件判断、循环、函数等等。如果在学习 python 的时候，回忆起 C 语言是如何做的，是不是同时也巩固了 C 语言。这时你再转过头去复习一下 C 语言，会不会理解更深。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：有点道理，但计算机行业确实发展很快。您看，这里有个数据：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在18世纪时，知识更新周期为80～90年。19世纪到20世纪初，缩短为30年。上个世纪60～70年代，一般学科的知识更新周期为5～10年。而到了上个世纪80～90年代，许多学科的知识更新周期缩短为5年。而进入新世纪时，许多学科的知识更新周期已缩短至2～3年。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：不要听网上瞎掰活。我就问你，现实生活中，应用得最多的是不是经典物理，牛顿的三大运动定律在十七世纪就提出，距今已经有三四百年的历史。即使是像相对论、量子力学等大多数人都不懂的理论，也提出了一百多年了。我再问你，冯.诺依曼体系结构提出后，现在有变化吗？C 语言是哪一年发明的？C 语言仍然是使用最广泛的编程语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：但是，手机每年都会升级，操作系统每年也在更新，像 IOS 系统，都已经升级到 16 版本了。这说明，技术仍然迭代很快。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：确实，手机更新速度很快。但是，更新的只是工艺更精良、速度更快，操作系统也是越来越炫酷，但并没有什么革命性的进展，我们也不需要时刻掌握革命性的新知识。如果你做 app 开发，也是不断打磨产品，增加新的 feature，留给你去开创性地开发一款新软件的机会并不多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：话是这么说，要是被裁员了，怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：这个话题比较大，等下次再聊吧。我想说的是，只要摆正心态，程序员这种职业，和以往的职业并没有什么两样，大胆做就是了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：嗯，先做做看吧。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f6fadc2e3ec670dd5d800cee2dc810e9</guid>
<title>移动应用中使用OpenGL生成转场特效</title>
<link>https://toutiao.io/k/habxxat</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;一、前言&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;随着移动端短视频的火热，音视频编辑工具在做内容类APP上的地位举足轻重。丰富的转场方式可以给短视频带来更多炫酷的效果，从而更好地赢得用户青睐。本议题主要包含了对OpenGL的简单介绍及相关API使用，GLSL着色器语言的基本使用，以及如何通过编写自定义的着色器程序来实现图片的转场效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、为什么使用OpenGL以及使用的难点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.1 为什么使用OpenGL&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;视频的转场效果离不开图形的处理，移动设备在处理3D图形相关的计算时一般都会选择使用GPU。相较于CPU，GPU在图像动画处理时具有更高效的性能。移动设备以android为例，GPU处理提供了两套不同的API，分别是&lt;/span&gt;&lt;code&gt;&lt;span&gt;Vulkan&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL ES&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。其中&lt;/span&gt;&lt;code&gt;&lt;span&gt;VulKan&lt;/span&gt;&lt;/code&gt;&lt;span&gt;只支持 Android 7.0 以上的设备，&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL ES&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 则支持所有的 Android 版本，而iOS并没有对vulkan的官方支持。同时 &lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL ES&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 作为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的子集，针对手机、PDA 和游戏主机等嵌入式设备去除了 glBegin/glEnd，四边形、多边形等复杂图元等许多非绝对必要的特性，消除它的冗余功能，从而提供了更容易学习和易于在移动图形硬件中实现的库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，在短视频图像处理中， &lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL ES&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 凭借良好的系统支持性和功能的高度精简性，成为了最广泛的 GPU 处理 API 之一。为了方便，本文中提到的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 即表示 &lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL ES&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.2 使用OpenGL处理视频转场的难点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;处理视频转场的难点是如何编写转场效果的着色器，关于这一点，我们可以参考开源的&lt;span&gt;GLTransitions&lt;/span&gt;网站。该网站有很多开源的转场效果，我们可以借鉴并学习，下文会有较为详细的介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、OpenGL的基本介绍和转场应用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.1 OpenGL的基本介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;OpenGL 是一种开放式的图形库，用于渲染2D、3D矢量图形的跨语言，跨平台的应用程序编程接口。OpenGL 可以⽤来做什么?&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;视频，图形，图⽚处理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2D/3D 游戏引擎开发&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;科学可视化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;医学软件开发&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CAD（计算机辅助技术）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;虚拟实境（AR，VR）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;AI ⼈⼯智能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;我们使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;来处理视频转场，就是上面提到的用&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;来对视频、图形、图片进行处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.1.1 OpenGL渲染流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在使用OpenGL进行绘制时，我们主要关注的是&lt;/span&gt;&lt;code&gt;&lt;span&gt;顶点着色器&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;片元着色器&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;顶点着色器&lt;/span&gt;&lt;/code&gt;&lt;span&gt;用来确定绘制图形的顶点位置，&lt;/span&gt;&lt;code&gt;&lt;span&gt;片元着色器&lt;/span&gt;&lt;/code&gt;&lt;span&gt;负责给图形添加颜色。主要绘制流程如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5929339477726574&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1cic4tib7Zw5rJQDfhWxpkzNicmxhEyyzmK1GdvQK9heeG2EaWxNy3lAJTicv17q80MI0AJbQoickWqRHg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;651&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;渲染的流程有以下几步：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）顶点数据的输入：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顶点数据用来为后面的顶点着色器等阶段提供处理的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）顶点着色器：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顶点着色器主要功能是进行坐标变换。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）几何着色器：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与顶点着色器不同，几何着色器的输入是完整的图元(比如，点)，输出可以是一个或多个其他的图元(比如，三角面)，或者不输出任何的图元，几何着色器是可选的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）图元组装、光栅化：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图元组装将输入的顶点组装成指定的图元，经过图元组装以及屏幕映射阶段后，我们将物体坐标变换到了窗口坐标，光栅化是个离散化的过程，将3D连续的物体转化为离散屏幕像素点的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5）片元着色器（片段着色器）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;片元着色器用来决定屏幕上像素的最终颜色。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6）混合测试：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;渲染的最后一个阶段是测试混合阶段。测试包括裁切测试、Alpha测试、模板测试和深度测试。没有经过测试的片段会被丢弃，不需要进行混合阶段，经过测试的片段会进入混合阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过以上几个步骤，&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;就能将最终的图形显示到屏幕上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;绘制流程中，我们能够编码的就是&lt;/span&gt;&lt;code&gt;&lt;span&gt;Vertex Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;(顶点着色器) 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Fragment Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;(片元着色器)。这也是渲染过程中必备的2个着色器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;Vertex Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;处理从客户端输入的数据、应用变换、进行其他的类型的数学运算来计算光照效果、位移、颜色值等。比如为了渲染共有3个顶点的三角形，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Vertex Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;将执行3次，也就是为了每个顶点执行一次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图中的3个顶点已经组合在一起，而三角形也已经逐个片段的进行了光栅化。每个片段通过执行&lt;/span&gt;&lt;code&gt;&lt;span&gt;Fragment Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;进行填充。&lt;/span&gt;&lt;code&gt;&lt;span&gt;Fragment Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;会输出我们屏幕上看到的最终颜色值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在绘制图形的时候，我们会使用到&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的多种状态变量，例如当前的颜色，控制当前视图和投影变换、直线和多边形点画模式、多边形绘图模式、像素包装约定、光照的位置和特征以及被绘制物体的材料属性等。可以设置它的各种状态（或模式），然后让这些状态一直生效，直到再次修改它们。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以把当前颜色设置为白色、红色或其他任何颜色，在此之后绘制的所有物体都将使用这种颜色，直到再次把当前颜色设置为其他颜色。许多表示模式的状态变量可以用&lt;/span&gt;&lt;code&gt;&lt;span&gt;glEnable()&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;glDisable()&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。所以我们说&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是一个状态机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;在渲染处理过程中会顺序执行一系列操作，就如流水线作业一样，所以我们将&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;绘制的流程称为渲染管线，包括固定管线和可编程管线。我们使用的是可编程管线，在可编程管线里，顶点的位置、颜色、贴图座标、贴图传进来之后，如何对数据进行改动，产生的片元如何生成结果，可以很自由地控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面就简单介绍一下管线和在可变编程管线中必不可少的GLSL（着色器语言）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.1.2 管线&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;管线：渲染管线可以理解为渲染流水线。指的是输入需要渲染的3D物体的相关描述信息数据（例：顶点坐标、顶点颜色、顶点纹理等），经过渲染管线一系列的变化和渲染过程，输出一帧最终的图像。简单理解就是一堆原始图形数据经过一个输送管道，期间经过各种变化处理最终出现展示到屏幕的过程。管线又分为固定管线和可编程管线两种。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;固定管线：在渲染图像的过程，我们只能通过调用GLShaderManager类的固定管线效果实现一系列的着色器处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可编程管线：在渲染图像的过程，我们能够使用自定义顶点着色器和片元着色器的去处理数据的过程。由于OpenGL的使用场景非常丰富，固定管线或者存储着色器无法完成的任务，这时我们可以使用可编程管线去处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.1.3 GLSL（OpenGL Shading Language）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;OpenGL着色语言（OpenGL Shading Language）是用来在OpenGL中着色编码的语言，也即开发人员写的短小的自定义程序，他们是在GPU（Graphic Processor Unit图形处理单元）上执行的，代替了固定的渲染管线的一部分，使渲染管线中不同层次具有可编程性。它可以得到当前OpenGL 中的状态，GLSL内置变量进行传递。GLSL其使用C语言作为基础高阶着色语言，避免了使用汇编语言或硬件规格语言的复杂性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GLSL的着色器代码分成2个部分：VertexShader（顶点着色器） 和 Fragment Shader（片元着色器）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;着色器Shader&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;着色器（Shader）是用来实现图像渲染的，用来替代固定渲染管线的可编辑程序。其中Vertex Shader（顶点着色器）主要负责顶点的几何关系等的运算，Pixel Shader（像素着色器）主要负责片源颜色等的计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顶点着色器VertexShader&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顶点着色器是一个可编程的处理单元，一般用来处理图形每个顶点变换（旋转/平移/投影等）、光照、材质的应用与计算等顶点的相关操作。顶点着色器是逐顶点运算的程序，每个顶点数据都会执行一次。替代了原有固定管线的顶点变换、光照计算，采用GLSL进行开发 。我们可以根据自己的需求采用着色语言自行开发顶点变换、光照等功能，大大增加了程序的灵活性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顶点着色器工作过程为将原始的顶点几何信息（顶点坐标、颜色、纹理）及其他属性传送到顶点着色器中，经过自定义的顶点着色程序处理产生变化后的顶点位置信息，将变化后的顶点位置信息传递给后续图元装配阶段，对应的顶点纹理、颜色等信息则经光栅化后传递到片元着色器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顶点着色器的输入主要为待处理顶点相应的&lt;/span&gt;&lt;code&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;uniform&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;采样器以及临时变量&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，输出主要为经过顶点着色器后生成的&lt;/span&gt;&lt;code&gt;&lt;span&gt;varying&lt;/span&gt;&lt;/code&gt;&lt;span&gt;及一些&lt;/span&gt;&lt;code&gt;&lt;span&gt;内建输出变量&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顶点着色器示例代码：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;//顶点位置&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;vec4 Position;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;//纹理坐标&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;vec2 TextureCoord;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;//纹理坐标&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;用于接收和传递给片元着色器的纹理坐标&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;varying&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;vec2 varyTextureCoord;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;main() {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;gl_Position&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;Position;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;varyTextureCoord&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;TextureCoord;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;片&lt;/span&gt;&lt;span&gt;元着色器FragmentShader&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;片元着色器是一个可编程的处理单元，一般用来处理图形中每个像素点颜色计算和填充、纹理的采样等操作。片元着色器是逐像素运算的程序，也就说每个像素都会执行一次片元着色器。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;片元着色器是替换了OpenGL固定渲染管线阶段中纹理颜色求和、雾以及Alpha测试等阶段，采用GLSL进行开发 ，我们可以根据自己的需求采用着色语言自行开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;片元着色器示例代码：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;//高精度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;precision&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;highp float;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;//用于接收顶点着色器的纹理坐标&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;varying&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;vec2 varyTextureCoord;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;//图片纹理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;sampler2D Texture;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;//图片纹理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;sampler2D Texture2;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;vec2 direction = vec2(0.0, 1.0);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;main(){&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;p = varyTextureCoord.xy/vec2(1.0).xy;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;color = mix(texture2D(Texture, varyTextureCoord), texture2D(Texture2, varyTextureCoord), step(1.0-p.y,progress));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;gl_FragColor&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;vec4(color);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;code/&gt;&lt;/pre&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.1.4 三种向OpenGL着⾊器传递数据的⽅法&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;上面的顶点着色器和片元着色器里出现了attribute,varying,uniform等类型定义，下面就简单介绍一下这三种类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;attribute&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;attribute&lt;/strong&gt;&lt;span&gt;：attribute变量是只能在顶点着色器中使用的变量，一般用attribute变量来表示一些顶点的数据，如：顶点坐标，法线，纹理坐标，顶点颜色等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;uniform&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;uniform&lt;/strong&gt;&lt;span&gt;：uniform变量是外部application程序传递给着色器的变量，uniform变量就像是C语言里面的常量，也就是说着色器只能用而不能修改uniform变量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;varying&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;varying&lt;/strong&gt;&lt;span&gt;：从顶点着色器传递到片元着色器的量，如用于传递到片元着色器中的顶点颜色，可以使用varying（易变变量）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意点：&lt;/strong&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;Attributes&lt;/span&gt;&lt;/code&gt;&lt;span&gt;不能够直接传递给&lt;/span&gt;&lt;code&gt;&lt;span&gt;Fragment Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，如果需要传递给&lt;/span&gt;&lt;code&gt;&lt;span&gt;Fragment Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，则需要通过&lt;/span&gt;&lt;code&gt;&lt;span&gt;Vertex Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;间接的传递过去。而 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Unifrom&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;Texture Data&lt;/span&gt;&lt;/code&gt;&lt;span&gt;可以直接传递给&lt;/span&gt;&lt;code&gt;&lt;span&gt;Vertex Shader&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;Fragment Shader，&lt;/span&gt;&lt;/code&gt;&lt;span&gt;具体怎么传递，依需求而定。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.1.5 如何使用OpenGL来绘制一张图片&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;上面介绍了顶点着色器和片元着色器，以及如何向&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;程序传递数据的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在我们就利用刚刚介绍的一些知识点，通过OpenGL程序将图片绘制到屏幕上，这也是制作图片轮播转场特效的前提。图片的绘制对于&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;来说就是纹理的绘制，这里只为了展示效果，不使用变换矩阵来处理图片的宽高比例，直接铺满整个窗口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先定义一个顶点着色器：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;attribute vec4 a_position;//传入的顶点坐标&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;attribute vec2 a_texCoord;//传入的纹理坐标&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;varying vec2 v_texCoord;//传递给片元着色器的纹理坐标&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;void main()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    gl_Position = a_position;//将顶点坐标赋值给OpenGL的内置变量&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    v_texCoord = a_texCoord;//将传入的纹理坐标传递给片元着色器&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span&gt;再定义一个片元着色器：&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;precision mediump float;//定义float精度,纹理坐标使用的是一个float类型的二维向量vec2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;uniform sampler2D u_texture;//纹理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;varying vec2 v_texCoord;//纹理坐标&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;void main(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    gl_FragColor = texture2D(u_texture, v_texCoord);//2D纹理采样,将颜色赋值给OpenGL的内置变量gl_FragColor&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;再给出Android端使用这两个着色器绘制一个图片纹理的代码：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;class SimpleImageRender(private val context: Context) : GLSurfaceView.Renderer {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //顶点坐标&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val vCoordinates = floatArrayOf(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -1.0f, -1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        1.0f, -1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -1.0f, 1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        1.0f, 1.0f&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //纹理坐标&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val textureCoordinates = floatArrayOf(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        0.0f, 1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        1.0f, 1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        0.0f, 0.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        1.0f, 0.0f&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //OpenGL程序id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    var programId = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //顶点坐标句柄&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    var vCoordinateHandle = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //纹理坐标句柄&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    var textureCoordinateHandle = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //纹理id&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    var textureId = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val vertexBuffer =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ByteBuffer.allocateDirect(vCoordinates.size * 4).order(ByteOrder.nativeOrder())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .asFloatBuffer()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .put(vCoordinates)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val textureBuffer =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ByteBuffer.allocateDirect(textureCoordinates.size * 4).order(ByteOrder.nativeOrder())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .asFloatBuffer()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .put(textureCoordinates)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    override fun onSurfaceCreated(gl: GL10?, config: EGLConfig?) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        vertexBuffer.position(0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        textureBuffer.position(0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //根据顶点着色器和片元着色器编辑链接OpenGL程序&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        programId =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            loadShaderWithResource(context, R.raw.simple_image_vs, R.raw.simple_image_fs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //获取顶点坐标的句柄&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        vCoordinateHandle = GLES20.glGetAttribLocation(programId, &quot;a_position&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //获取纹理坐标的句柄&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        textureCoordinateHandle = GLES20.glGetAttribLocation(programId, &quot;a_texCoord&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //生成纹理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val textureIds = IntArray(1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glGenTextures(1, textureIds, 0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if (textureIds[0] == 0) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        textureId = textureIds[0]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //绑定纹理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //环绕方式&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_REPEAT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_REPEAT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //过滤方式&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val bitmap = BitmapFactory.decodeResource(context.resources, R.drawable.scene1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        bitmap.recycle()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    override fun onSurfaceChanged(gl: GL10?, width: Int, height: Int) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glViewport(0, 0, width, height)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    override fun onDrawFrame(gl: GL10?) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //清屏，清理掉颜色的缓冲区&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //设置清屏的颜色，这里是float颜色的取值范围的[0,1]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //使用program&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUseProgram(programId)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //设置为可用的状态&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glEnableVertexAttribArray(vCoordinateHandle)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //size 指定每个顶点属性的组件数量。必须为1、2、3或者4。初始值为4。（如position是由3个（x,y,z）组成，而颜色是4个（r,g,b,a））&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //stride 指定连续顶点属性之间的偏移量。如果为0，那么顶点属性会被理解为：它们是紧密排列在一起的。初始值为0。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //size 2 代表(x,y)，stride 8 代表跨度 （2个点为一组，2个float有8个字节）&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glVertexAttribPointer(vCoordinateHandle, 2, GLES20.GL_FLOAT, false, 8, vertexBuffer)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glEnableVertexAttribArray(textureCoordinateHandle)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glVertexAttribPointer(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            textureCoordinateHandle,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            2,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.GL_FLOAT,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            false,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            8,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            textureBuffer&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;这样就完成了一个图片的绘制：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;2.1666666666666665&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1cic4tib7Zw5rJQDfhWxpkzNicBu1P3u3VpzLHeCrmUsZkG5ibIj0syIvbqn3IOhiaR1nRXVOCSkv8ez6g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;span&gt;3.2 OpenGL的转场特效应用&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;3.2.1 移植开源的转场效果&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;什么是转场效果？一般来说，就是两个视频画面之间的过渡衔接效果。在opengl中，图片的转场，其实就是两个纹理的过渡切换。在这里推荐一个开源项目，该项目主要用来收集各种GL转场特效及其 GLSL 实现代码，开发者可以很方便地移植到自己的项目中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GLTransitions 项目网站地址&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GLTransitions 项目有接近大概70种转场特效，能够非常方便的使用在图片或者视频的转场中，很多转场特效包含了混合、边缘检测、腐蚀膨胀等常见的图像处理方法，由易到难。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于想学习 GLSL 的同学，既能快速上手，又能学习到一些高阶图像处理方法 GLSL 实现，强烈推荐。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于glsl代码在各个平台都是通用的，所以将GLTransitions的效果移植到移动端也是比较简单的。现在我们以该网站的第一个转场效果为例，介绍一下移植的大致流程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先我们来看一下转场所需的片元着色器的代码，这是实现转场的关键。其中sign函数,mix函数,fract函数,step函数是glsl的内置函数。这里只为了展示效果，不使用变换矩阵来处理图片的宽高比例，直接铺满整个窗口。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;uniform vec2 direction; // = vec2(0.0, 1.0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vec4 transition (vec2 uv) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  vec2 p = uv + progress * sign(direction);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  vec2 f = fract(p);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  return mix(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    getToColor(f),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    getFromColor(f),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    step(0.0, p.y) * step(p.y, 1.0) * step(0.0, p.x) * step(p.x, 1.0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;我们可以看到，从GLTransitions的片元着色器代码已经提供了转场效果，但是还需要使用者进行一些修改。以上面的代码为例，需要我们自己定义一个转场进度的变量progress（取值为0到1的浮点数）。还有转场最基本的两个要素，即图片纹理，一个转场需要两个图片纹理，从纹理1过渡到纹理2，getToColor和getFromColor就是对纹理1和纹理2取色的函数。当然还有必不可少的main函数，将我们程序计算的颜色赋值给gl_FragColor，所以我们要将上面的片元着色器代码修改一下。如下:&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;precision&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;mediump float;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;vec2 direction;// = vec2(0.0, 1.0)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;float progress;//转场的进度&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;sampler2D u_texture0;//纹理1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;sampler2D u_texture1;//纹理2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;varying&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;vec2 v_texCoord;//纹理坐标&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;transition (vec2 uv) {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;p = uv + progress * sign(direction);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;f = fract(p);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;mix(&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;texture2D(u_texture1,&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;f),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;texture2D(u_texture0,&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;f),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;step(0.0,&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;p.y) * step(p.y, 1.0) * step(0.0, p.x) * step(p.x, 1.0)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;main(){&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;gl_FragColor&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;transition(v_texCoord);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;这里也顺便给出顶点着色器的代码，主要就是设置顶点坐标和纹理坐标，关于这两个坐标上文已经介绍过了，这里就不赘述了。代码如下:&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;attribute&lt;/span&gt; vec4 a_position;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;attribute&lt;/span&gt; vec2 a_texCoord;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;varying&lt;/span&gt; vec2 v_texCoord;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;void&lt;/span&gt; main()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attribute&quot;&gt;gl_Position&lt;/span&gt; = a_position;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attribute&quot;&gt;v_texCoord&lt;/span&gt; = a_texCoord;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;现在顶点着色器和片元着色器这两个关键的着色器程序都有了,一个基本的转场就实现了。只要在我们的程序中使用这两个着色器，在绘制的时候根据当前的帧数不停地更新两个纹理和转场的进度就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面给出绘制时的代码逻辑，以安卓为例：&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;frameIndex++ &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUseProgram(programId)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glEnableVertexAttribArray(vCoordinateHandle)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glVertexAttribPointer(vCoordinateHandle, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, GLES20.GL_FLOAT, &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;, vertexBuffer)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glEnableVertexAttribArray(textureCoordinateHandle)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glVertexAttribPointer(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            textureCoordinateHandle,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.GL_FLOAT,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            textureBuffer&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; uTexture0Handle = GLES20.glGetUniformLocation(programId, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;u_texture0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glActiveTexture(GLES20.GL_TEXTURE0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glBindTexture(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.GL_TEXTURE_2D,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            imageTextureIds[(frameIndex / transitionFrameCount) % imageNum]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUniform1i(uTexture0Handle, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; uTexture1Handle = GLES20.glGetUniformLocation(programId, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;u_texture1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glActiveTexture(GLES20.GL_TEXTURE1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glBindTexture(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.GL_TEXTURE_2D,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            imageTextureIds[(frameIndex / transitionFrameCount + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) % imageNum]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUniform1i(uTexture1Handle, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; directionHandle = GLES20.glGetUniformLocation(programId, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;direction&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUniform2f(directionHandle, &lt;span class=&quot;code-snippet__number&quot;&gt;0f&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1f&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; uOffsetHandle = GLES20.glGetUniformLocation(programId, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;u_offset&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; offset = (frameIndex % transitionFrameCount) * &lt;span class=&quot;code-snippet__number&quot;&gt;1f&lt;/span&gt; / transitionFrameCount&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUniform1f(uOffsetHandle, offset)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;以上就是将一个GLTransitions网站中的转场特效移植到Android端的基本流程。iOS的也是类似的，非常方便。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;2.1581632653061225&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/kEeDgfCVf1cic4tib7Zw5rJQDfhWxpkzNicTEaTt79FooW2ubqiaiccKiaAXDZ9ibANfvvicW5A7Qmz3j4mGLoz9q5kFqQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;196&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;3.2.2 实现复杂转场效果&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;通过上面的介绍，我们已经对如何使用opengl来处理图片转场有了一个简单的了解。但是刚刚的操作只能让多张图片都使用同一种转场，这样比较单调乏味。&lt;/span&gt;&lt;span&gt;下面介绍一个思路，&lt;/span&gt;&lt;span&gt;在用多张图片合成转场效果时，&lt;/span&gt;&lt;span&gt;将不同的转场效果组合起来使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回想一下，刚刚做转场移植的时候，只是使用了一个opengl程序。现在咱们来加载多个opengl程序，然后在不同的时间段使用对应的opengl程序，这样就能比较方便地实现多个转场效果的组合使用了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先定义一个IDrawer接口，表示一个使用opengl程序的对象：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;interface IDrawer {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //准备阶段,准备程序,资源&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fun onPrepare()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //绘制&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fun onDraw(frameIndex:Int){}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fun onSurfaceChanged(p0: GL10?, width: Int, height: Int){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;然后定义一个render，来控制如何使用这些IDrawer：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;class ComposeRender : GLSurfaceView.Renderer {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private var frameIndex = 0//当前绘制了多少帧&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private var drawersFrames = 0 //所有的drawer绘制一遍需要的帧数,目前每一个drawer占用200帧&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val framesPerDrawer = 200//每一个IDrawer绘制所需要的帧数,这里暂时固定为200&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //使用的IDrawer集合&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val drawers = mutableListOf(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        HelloWorldTransitionDrawer(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleTransitionDrawer(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        PerlinTransitionDrawer(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    init {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        drawersFrames = drawers.size.times(framesPerDrawer)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    override fun onSurfaceCreated(p0: GL10?, p1: EGLConfig?) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //设置清屏的颜色，这里是float颜色的取值范围的[0,1]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //清屏，清理掉颜色的缓冲区&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        drawers.forEach {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            it.onPrepare()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    override fun onSurfaceChanged(p0: GL10?, p1: Int, p2: Int) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glViewport(0, 0, p1, p2)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        drawers.forEach {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            it.onSurfaceChanged(p0, p1, p2)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    override fun onDrawFrame(p0: GL10?) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        frameIndex++&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //清屏，清理掉颜色的缓冲区&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val offset = frameIndex % drawersFrames&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val logicFrame = if (offset == 0) 1 else offset&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //计算当前的帧数轮到哪个IDrawer的绘制,让对应的IDrawer进行绘制&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        drawers.forEachIndexed { index, iDrawer -&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            if (logicFrame &amp;lt;= (index + 1).times(framesPerDrawer) &amp;amp;&amp;amp; logicFrame &amp;gt;= index.times(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    framesPerDrawer&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                iDrawer.onDraw(logicFrame - index.times(framesPerDrawer))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;这里为了方便展示流程，先将纹理和每个转场的耗时（即使用的帧数）的使用固定值写在代码里。比如现在有四张图片编号为1,2,3,4，我们就定义三个IDrawer A,B,C。A使用图片1和图片2，B使用图片2和图片3，C使用图片3和图片4，然后每个转场都耗时200帧，这样就能实现三个opengl程序的组合转场了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面给出其中一个IDrawer的实现类：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;class HelloWorldTransitionDrawer() : IDrawer {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val imageNum = 2//需要使用两个图片纹理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    //转场需要耗费的帧数,这里固定写200帧&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val transitionFrameCount = 200&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val vCoordinates = floatArrayOf(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -1.0f, -1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        1.0f, -1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -1.0f, 1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        1.0f, 1.0f&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val textureCoordinates = floatArrayOf(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        0.0f, 1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        1.0f, 1.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        0.0f, 0.0f,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        1.0f, 0.0f&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    var programId = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    var vCoordinateHandle = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    var textureCoordinateHandle = 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    var imageTextureIds = IntArray(imageNum)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val vertexBuffer =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ByteBuffer.allocateDirect(vCoordinates.size * 4).order(ByteOrder.nativeOrder())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .asFloatBuffer()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .put(vCoordinates).position(0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private val textureBuffer =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ByteBuffer.allocateDirect(textureCoordinates.size * 4).order(ByteOrder.nativeOrder())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .asFloatBuffer()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .put(textureCoordinates).position(0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    override fun onPrepare() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        programId =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            loadShaderWithResource(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                MyApplication.getApp(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                R.raw.helloworld_transition_vs,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                R.raw.helloworld_transition_fs&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        vCoordinateHandle = GLES20.glGetAttribLocation(programId, &quot;a_position&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        textureCoordinateHandle = GLES20.glGetAttribLocation(programId, &quot;a_texCoord&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //生成纹理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val textureIds = IntArray(1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glGenTextures(1, textureIds, 0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if (textureIds[0] == 0) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        loadTextures(intArrayOf(R.drawable.scene1, R.drawable.scene2))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    override fun onDraw(frameIndex:Int) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //使用program&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUseProgram(programId)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //设置为可用的状态&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glEnableVertexAttribArray(vCoordinateHandle)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //size 指定每个顶点属性的组件数量。必须为1、2、3或者4。初始值为4。（如position是由3个（x,y,z）组成，而颜色是4个（r,g,b,a））&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //stride 指定连续顶点属性之间的偏移量。如果为0，那么顶点属性会被理解为：它们是紧密排列在一起的。初始值为0。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //size 2 代表(x,y)，stride 8 代表跨度 （2个点为一组，2个float有8个字节）&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glVertexAttribPointer(vCoordinateHandle, 2, GLES20.GL_FLOAT, false, 8, vertexBuffer)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glEnableVertexAttribArray(textureCoordinateHandle)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glVertexAttribPointer(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            textureCoordinateHandle,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            2,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.GL_FLOAT,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            false,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            8,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            textureBuffer&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val uTexture0Handle = GLES20.glGetUniformLocation(programId, &quot;u_texture0&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glActiveTexture(GLES20.GL_TEXTURE0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glBindTexture(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.GL_TEXTURE_2D,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            imageTextureIds[0]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUniform1i(uTexture0Handle, 0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val uTexture1Handle = GLES20.glGetUniformLocation(programId, &quot;u_texture1&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glActiveTexture(GLES20.GL_TEXTURE1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glBindTexture(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.GL_TEXTURE_2D,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            imageTextureIds[1]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUniform1i(uTexture1Handle, 1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val directionHandle = GLES20.glGetUniformLocation(programId, &quot;direction&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUniform2f(directionHandle, 0f, 1f)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val uOffsetHandle = GLES20.glGetUniformLocation(programId, &quot;u_offset&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        val offset = (frameIndex % transitionFrameCount) * 1f / transitionFrameCount&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glUniform1f(uOffsetHandle, offset)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private fun loadTextures(resIds: IntArray) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        if (resIds.isEmpty()) return&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        //直接生成两个纹理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GLES20.glGenTextures(2, imageTextureIds, 0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        resIds.forEachIndexed { index, resId -&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            if (imageTextureIds.indexOfFirst {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    it == 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } == 0) return&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.glActiveTexture(GLES20.GL_TEXTURE0 + index)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            //绑定纹理&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, imageTextureIds[index])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            //环绕方式&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_REPEAT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_REPEAT)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            //过滤方式&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.glTexParameteri(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                GLES20.GL_TEXTURE_2D,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                GLES20.GL_TEXTURE_MIN_FILTER,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                GLES20.GL_LINEAR&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLES20.glTexParameteri(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                GLES20.GL_TEXTURE_2D,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                GLES20.GL_TEXTURE_MAG_FILTER,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                GLES20.GL_LINEAR&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            val bitmap = BitmapFactory.decodeResource(MyApplication.getApp().resources, resId)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            bitmap.recycle()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;这样就可以达到将多个转场组合使用的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;2.1581632653061225&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/kEeDgfCVf1cic4tib7Zw5rJQDfhWxpkzNicHG6wvicgvLWibMBKDNM7Ycl4l3UiaaTSAIGXOL1iaOwFxOSrMV75mgjXIQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;196&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2/&gt;&lt;h2/&gt;&lt;h2&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在移动端进行图形处理时，&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;凭借其效率高，兼容性好的优势，得到了大家的青睐。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文对&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的基本概念和绘制流程进行了简单介绍，让大家对&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的绘制流程有了一个初步的认识。在绘制流程中，对我们开发者比较重要的是使用GLSL来编写顶点着色器和片元着色器。在使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;处理图片轮播转场时，关键点是编写转场所需的着色器，我们可以参考GLTransitions网站的开源转场效果。该网站提供丰富的转场效果和着色器代码，可以很方便的移植到客户端中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于实现复杂转场，即将多个转场效果组合使用，本文也提供了一个思路，就是组合使用多个&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;程序，在对应的时间点加载并使用对应的&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;程序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;鉴于篇幅原因，本文分享了部分我们基于&lt;/span&gt;&lt;code&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;开发视频转场特效的思考与实践，希望对大家有所帮助，欢迎更多关于音视频编辑的实践和交流。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;【推荐阅读】&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDI3MjA5MQ==&amp;amp;mid=2697273004&amp;amp;idx=1&amp;amp;sn=984d7a1d9149ac7877423ee1890b4659&amp;amp;chksm=8376e198b401688e6a026a95ce762fe975c6d4001439ade111e94e13a9d8557f442f01107901&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;携程基于 GraphQL 的前端 BFF 服务开发实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1cic4tib7Zw5rJQDfhWxpkzNicTsnwG1ePbUN8DEJCOonuBnV5y0Plmic0UlKX05Id3f60O8rd6vJibZMg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; “携程技术”公众号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  分享，交流，成长&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>92f76dd0b2746548a01f5dac30f3a6d4</guid>
<title>项目上线一年，整理了一份SpringBoot性能优化方案！</title>
<link>https://toutiao.io/k/3ueuxa0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAApdEM5bfTMAAAAAstQy6ubaLX4KHWvLEZgBPE0qIES2F_UJz8zNPgMIvCZzBfvwmirOxm86HbPIbi&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=S7s6ianIic0ia4PicKJSfB8EjyjpQibPUAXolZPq5RXJLH39tyRBBBRuowz6k3DezOekt63TibgUSU5BCQUR9uc8b69GRXCbbiadicj6XYaPxz17icLicllWWDWvboYg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibC1DZqxOiabHIVdh4Z8FFc1wplL6cxa2eibTvl1xIOytt6icSUHvxROTLZwQzTSAkGQrQ&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM5nv7YHhmhvPsGGX04JCIgibK2x2Ru0TOY9HeZTGSIL1KQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08a1fc3d5c807ec30b07756771265bc6b6234fb9e05062ae69ab4@finder&quot; data-nickname=&quot;儒猿IT&quot; data-desc=&quot;出去面试被问到Seata，竟然一脸蒙圈？Seata是一个分布式事务框架，专门帮助我们解决分布式事务问题的。#Seata #分布式事务 #Java面试 @微信时刻 &quot; data-nonceid=&quot;10571939633984640713&quot; data-type=&quot;video&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h1 data-id=&quot;heading-0&quot;&gt;&lt;span&gt;文章来源：https://juejin.cn/post/7062548565800779789&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/3GHDOauYyUGbiaHXGx1ib5UxkKzSNtpMzY5tbbGdibG7icBSxlH783x1YTF0icAv8MWrmanB4u5qjyKfmYo1dDf7YbA/640?wx_fmt=gif&quot; data-w=&quot;100&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;前言&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.95&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/6guf7yARbV9VsEfFCU6bvzyN1lMw2XN1qNsNibhEoq5UbksibDoW6ccRGKDOWh4rGZr04bpQphQIlTPFkq52HK3Q/640?wx_fmt=gif&quot; data-w=&quot;60&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;SpringBoot已经成为Java届的No.1框架，每天都在蹂躏着数百万的程序员们。当服务的压力上升，对SpringBoot服务的优化就会被提上议程。&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;本文将详细讲解SpringBoot服务优化的一般思路，并附上若干篇辅助文章作为开胃菜。&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.95&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/621tyk2VKQTy2UmgOchQfN4JYde9MjAJJWsSBWrdWUe7ajC3AdLZK2LYVTicMW887Nk7iaoSq1tE4HqTKrwuTAKw/640?wx_fmt=gif&quot; data-w=&quot;60&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1.有监控才有方向&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在开始对SpringBoot服务进行性能优化之前，我们需要做一些准备，把SpringBoot服务的一些数据暴露出来。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，你的服务用到了缓存，就需要把缓存命中率这些数据进行收集；用到了数据库连接池，就需要把连接池的参数给暴露出来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们这里采用的监控工具是Prometheus，它是一个是时序数据库，能够存储我们的指标。SpringBoot可以非常方便的接入到Prometheus中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;创建一个SpringBoot项目后，首先，加入maven依赖。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.micrometer&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;micrometer-registry-prometheus&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.micrometer&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;micrometer-core&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;然后，我们需要在&lt;/span&gt;&lt;code&gt;&lt;span&gt;application.properties &lt;/span&gt;&lt;/code&gt;&lt;span&gt;配置文件中，开放相关的监控接口。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;management.endpoint.metrics.enabled=&lt;span&gt;true&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;management.endpoints.web.exposure.&lt;span&gt;include&lt;/span&gt;=*&lt;br mpa-from-tpl=&quot;t&quot;/&gt;management.endpoint.prometheus.enabled=&lt;span&gt;true&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;management.metrics.export.prometheus.enabled=&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;启动之后，我们就可以通过访问 &lt;/span&gt;&lt;code&gt;&lt;span&gt;http://localhost:8080/actuator/prometheus&lt;/span&gt;&lt;/code&gt;&lt;span&gt;来获取监控数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44061757719714967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbx7I0Qa9G88oMgUDYQAiaxoGM4FklA8FdgxJbdDW0RobP6Xgm68hMcFibw/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;842&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;想要监控业务数据也是比较简单的。你只需要注入一个MeterRegistry实例即可。下面是一段示例代码：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;MeterRegistry registry;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/test&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@ResponseBody&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; test() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    registry.counter(&lt;span&gt;&quot;test&quot;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&quot;from&quot;&lt;/span&gt;, &lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&quot;method&quot;&lt;/span&gt;, &lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    ).increment();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;ok&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;从监控连接中，我们可以找到刚刚添加的监控信息。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;test_total{&lt;span&gt;from&lt;/span&gt;=&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,method=&lt;span&gt;&quot;test&quot;&lt;/span&gt;,} &lt;span&gt;5.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;这里简单介绍一下流行的Prometheus监控体系，Prometheus使用拉的方式获取监控数据，这个暴露数据的过程可以交给功能更加齐全的telegraf组件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47177848775292863&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxBW5lEMwE5aS6ryfCsk6hdqG4Mic55icIeyZxbTmYW4dZibSdHIZI9QyOQ/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;939&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如图，我们通常使用Grafana进行监控数据的展示，使用AlertManager组件进行提前预警。这一部分的搭建工作不是我们的重点，感兴趣的同学可自行研究。下图便是一张典型的监控图，可以看到Redis的缓存命中率等情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxs39pep67A530IPeZib2Y6tZ7Eib2ib4MIg2QqoxaqasquKJY5KTRDr4ow/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-1&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2.Java生成火焰图&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;火焰图是用来分析程序运行瓶颈的工具。在纵向，表示的是调用栈的深度；横向表明的是消耗的时间。所以格子的宽度越大，越说明它可能是一个瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;火焰图也可以用来分析Java应用。可以从github上下载 async-profiler 的压缩包 进行相关操作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，我们把它解压到/root/目录。然后以javaagent的方式来启动Java应用。命令行如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;java -agentpath:/root/build/libasyncProfiler.&lt;span&gt;so&lt;/span&gt;=start,svg,&lt;span&gt;file&lt;/span&gt;=&lt;span&gt;profile&lt;/span&gt;.svg -jar spring-petclinic-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;.BUILD-SNAPSHOT.jar&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;运行一段时间后，停止进程，可以看到在当前目录下，生成了&lt;/span&gt;&lt;code&gt;&lt;span&gt;profile.svg&lt;/span&gt;&lt;/code&gt;&lt;span&gt;文件，这个文件是可以用浏览器打开的，一层层向下浏览，即可找到需要优化的目标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3.Skywalking&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于一个web服务来说，最缓慢的地方就在于数据库操作。所以，使用本地缓存和分布式缓存优化，能够获得最大的性能提升。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于如何定位到复杂分布式环境中的问题，我这里想要分享另外一个工具：Skywalking。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Skywalking是使用探针技术（JavaAgent）来实现的。通过在Java的启动参数中，加入javaagent的Jar包，即可将性能数据和调用链数据封装、发送到Skywalking的服务器。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下载相应的安装包（如果使用ES存储，需要下载专用的安装包），配置好存储之后，即可一键启动。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;将agent的压缩包，解压到相应的目录。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;tar xvf skywalking-agent.tar.gz  -C /&lt;span&gt;opt&lt;/span&gt;/&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在业务启动参数中加入agent的包。比如，原来的启动命令是：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;java  -jar /opt/test-service/spring-boot-demo.jar  &lt;span&gt;--spring.profiles.active=dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;改造后的启动命令是：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;java -javaagen&lt;span&gt;t:&lt;/span&gt;/&lt;span&gt;opt&lt;/span&gt;/skywalking-agent/skywalking-agent.jar -Dskywalking.agent.service_name=the-demo-name  -jar /&lt;span&gt;opt&lt;/span&gt;/test-service/spring-boot-demo.ja  --spring.profiles.active=dev&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;访问一些服务的链接，打开Skywalking的UI，即可看到下图的界面。我们可以从图中找到响应比较慢QPS又比较高的的接口，进行专项优化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44907407407407407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbx0JOtGu8Ump2SrpTthLEeLCUenIamc4DIJszNwPq56KgH3KVSsKKy0Q/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-2&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4.优化思路&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对一个普通的Web服务来说，我们来看一下，要访问到具体的数据，都要经历哪些主要的环节。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如下图，在浏览器中输入相应的域名，需要通过DNS解析到具体的IP地址上。为了保证高可用，我们的服务一般都会部署多份，然后使用Nginx做反向代理和负载均衡。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Nginx根据资源的特性，会承担一部分动静分离的功能。其中，动态功能部分，会进入我们的SpringBoot服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.565947242206235&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxt90XGden7TIItoCvFPVP3vsMWXoEHakePibPABcND5VgbIJxdjaDQ6w/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;834&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SpringBoot默认使用内嵌的tomcat作为Web容器，使用典型的MVC模式，最终访问到我们的数据。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-3&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5.HTTP优化&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面我们举例来看一下，哪些动作能够加快网页的获取。为了描述方便，我们仅讨论HTTP1.1协议的。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.使用CDN加速文件获取&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比较大的文件，尽量使用CDN（Content Delivery Network）分发。甚至是一些常用的前端脚本、样式、图片等，都可以放到CDN上。CDN通常能够加快这些文件的获取，网页加载也更加迅速。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.合理设置Cache-Control值&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;浏览器会判断HTTP头Cache-Control的内容，用来决定是否使用浏览器缓存，这在管理一些静态文件的时候，非常有用。相同作用的头信息还有Expires。Cache-Control表示多久之后过期，Expires则表示什么时候过期。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个参数可以在Nginx的配置文件中进行设置。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;location&lt;/span&gt; &lt;span&gt;~* ^.+\.(ico|gif|jpg|jpeg|png)$&lt;/span&gt; { &lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;# 缓存1年&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;add_header&lt;/span&gt; Cache-Control: &lt;span&gt;no&lt;/span&gt;-cache, max-age=&lt;span&gt;31536000&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.减少单页面请求域名的数量&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;减少每个页面请求的域名数量，尽量保证在4个之内。这是因为，浏览器每次访问后端的资源，都需要先查询一次DNS，然后找到DNS对应的IP地址，再进行真正的调用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;DNS有多层缓存，比如浏览器会缓存一份、本地主机会缓存、ISP服务商缓存等。从DNS到IP地址的转变，通常会花费&lt;/span&gt;&lt;code&gt;&lt;span&gt;20-120ms&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的时间。减少域名的数量，可加快资源的获取。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.开启gzip&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;开启gzip，可以先把内容压缩后，浏览器再进行解压。由于减少了传输的大小，会减少带宽的使用，提高传输效率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在nginx中可以很容易的开启。配置如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;gzip&lt;/span&gt; &lt;span&gt;on&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_min_length&lt;/span&gt; &lt;span&gt;1k&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_buffers&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;16k&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_comp_level&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_http_version&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_types&lt;/span&gt; text/plain application/javascript text/css;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;5.对资源进行压缩&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对JavaScript和CSS，甚至是HTML进行压缩。道理类似，现在流行的前后端分离模式，一般都是对这些资源进行压缩的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;6.使用keepalive&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于连接的创建和关闭，都需要耗费资源。用户访问我们的服务后，后续也会有更多的互动，所以保持长连接可以显著减少网络交互，提高性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;nginx默认开启了对客户端的keep avlide支持。你可以通过下面两个参数来调整它的行为。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;http&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;keepalive_timeout&lt;/span&gt;  &lt;span&gt;120s&lt;/span&gt; &lt;span&gt;120s&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;keepalive_requests&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;nginx与后端upstream的长连接，需要手工开启，参考配置如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;location&lt;/span&gt; &lt;span&gt;~ /&lt;/span&gt;{ &lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;proxy_pass&lt;/span&gt; http://backend;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;proxy_http_version&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;proxy_set_header&lt;/span&gt; Connection &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-4&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6.Tomcat优化&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Tomcat本身的优化，也是非常重要的一环。可以直接参考下面的文章。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650523823&amp;amp;idx=1&amp;amp;sn=aa5f41974950e759d373505e9b7c32f6&amp;amp;chksm=8780cf6bb0f7467d0e1b4d2d957e3633726c11f30e185d9ed354f2f6ad2ff607357f555097ef&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;搞定tomcat重要参数调优！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;搞定tomcat重要参数调优！&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-5&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7.自定义Web容器&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你的项目并发量比较高，想要修改最大线程数、最大连接数等配置信息，可以通过自定义Web容器的方式，代码如下所示。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;(proxyBeanMethods = &lt;span&gt;false&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;WebServerFactoryCustomizer&lt;/span&gt;&amp;lt;&lt;span&gt;ConfigurableServletWebServerFactory&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  SpringApplication.run(PetClinicApplication.class, args);&lt;br mpa-from-tpl=&quot;t&quot;/&gt; }&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;customize&lt;/span&gt;&lt;span&gt;(ConfigurableServletWebServerFactory factory)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  TomcatServletWebServerFactory f = (TomcatServletWebServerFactory) factory;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        f.setProtocol(&lt;span&gt;&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  f.addConnectorCustomizers(c -&amp;gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   Http11NioProtocol protocol = (Http11NioProtocol) c.getProtocolHandler();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setMaxConnections(&lt;span&gt;200&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setMaxThreads(&lt;span&gt;200&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setSelectorTimeout(&lt;span&gt;3000&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setSessionTimeout(&lt;span&gt;3000&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setConnectionTimeout(&lt;span&gt;3000&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  });&lt;br mpa-from-tpl=&quot;t&quot;/&gt; }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;注意上面的代码，我们设置了它的协议为&lt;/span&gt;&lt;span&gt;org.apache.coyote.http11.Http11Nio2Protocol&lt;/span&gt;&lt;span&gt;，意思就是开启了Nio2。这个参数在Tomcat8.0之后才有，开启之后会增加一部分性能。对比如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;默认。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;[root@localhost wrk2-master]# ./wrk -t2 -c100 -d30s -R2000 http://&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.57&lt;/span&gt;:&lt;span&gt;8080&lt;/span&gt;/owners?lastName=&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Running &lt;span&gt;30&lt;/span&gt;s test @ http://&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.57&lt;/span&gt;:&lt;span&gt;8080&lt;/span&gt;/owners?lastName=&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;2&lt;/span&gt; threads &lt;span&gt;and&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; connections&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread calibration: mean &lt;span&gt;lat&lt;/span&gt;.: &lt;span&gt;4588.131&lt;/span&gt;ms, rate sampling interva&lt;span&gt;l:&lt;/span&gt; &lt;span&gt;16277&lt;/span&gt;ms&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread calibration: mean &lt;span&gt;lat&lt;/span&gt;.: &lt;span&gt;4647.927&lt;/span&gt;ms, rate sampling interva&lt;span&gt;l:&lt;/span&gt; &lt;span&gt;16285&lt;/span&gt;ms&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread Stats   Avg      Stdev     Max   +/- Stdev&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Latency    &lt;span&gt;16.49&lt;/span&gt;s     &lt;span&gt;4.98&lt;/span&gt;s   &lt;span&gt;27.34&lt;/span&gt;s    &lt;span&gt;63.90&lt;/span&gt;%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Req/Sec   &lt;span&gt;106.50&lt;/span&gt;      &lt;span&gt;1.50&lt;/span&gt;   &lt;span&gt;108.00&lt;/span&gt;    &lt;span&gt;100.00&lt;/span&gt;%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;6471&lt;/span&gt; requests in &lt;span&gt;30.03&lt;/span&gt;s, &lt;span&gt;39.31&lt;/span&gt;MB &lt;span&gt;read&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Socket error&lt;span&gt;s:&lt;/span&gt; connect &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;read&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;write&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;, timeout &lt;span&gt;60&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Requests/sec:    &lt;span&gt;215.51&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Transfer/sec:      &lt;span&gt;1.31&lt;/span&gt;MB&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Nio2。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;[root@localhost wrk2-master]# ./wrk -t2 -c100 -d30s -R2000 http://&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.57&lt;/span&gt;:&lt;span&gt;8080&lt;/span&gt;/owners?lastName=&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Running &lt;span&gt;30&lt;/span&gt;s test @ http://&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.57&lt;/span&gt;:&lt;span&gt;8080&lt;/span&gt;/owners?lastName=&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;2&lt;/span&gt; threads &lt;span&gt;and&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; connections&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread calibration: mean &lt;span&gt;lat&lt;/span&gt;.: &lt;span&gt;4358.805&lt;/span&gt;ms, rate sampling interva&lt;span&gt;l:&lt;/span&gt; &lt;span&gt;15835&lt;/span&gt;ms&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread calibration: mean &lt;span&gt;lat&lt;/span&gt;.: &lt;span&gt;4622.087&lt;/span&gt;ms, rate sampling interva&lt;span&gt;l:&lt;/span&gt; &lt;span&gt;16293&lt;/span&gt;ms&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread Stats   Avg      Stdev     Max   +/- Stdev&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Latency    &lt;span&gt;17.47&lt;/span&gt;s     &lt;span&gt;4.98&lt;/span&gt;s   &lt;span&gt;26.90&lt;/span&gt;s    &lt;span&gt;57.69&lt;/span&gt;%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Req/Sec   &lt;span&gt;125.50&lt;/span&gt;      &lt;span&gt;2.50&lt;/span&gt;   &lt;span&gt;128.00&lt;/span&gt;    &lt;span&gt;100.00&lt;/span&gt;%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;7469&lt;/span&gt; requests in &lt;span&gt;30.04&lt;/span&gt;s, &lt;span&gt;45.38&lt;/span&gt;MB &lt;span&gt;read&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Socket error&lt;span&gt;s:&lt;/span&gt; connect &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;read&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;write&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;, timeout &lt;span&gt;4&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Requests/sec:    &lt;span&gt;248.64&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Transfer/sec:      &lt;span&gt;1.51&lt;/span&gt;MB&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;你甚至可以将tomcat替换成undertow。undertow也是一个Web容器，更加轻量级一些，占用的内容更少，启动的守护进程也更少，更改方式如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;exclusions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;exclusion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;exclusion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;/&lt;span&gt;exclusions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-undertow&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-6&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;8.各个层次的优化方向&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Controller层&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;controller层用于接收前端的查询参数，然后构造查询结果。现在很多项目都采用前后端分离的架构，所以controller层的方法，一般会使用@ResponseBody注解，把查询的结果，解析成JSON数据返回（兼顾效率和可读性）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于controller只是充当了一个类似功能组合和路由的角色，所以这部分对性能的影响就主要体现在数据集的大小上。如果结果集合非常大，JSON解析组件就要花费较多的时间进行解析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大结果集不仅会影响解析时间，还会造成内存浪费。假如结果集在解析成JSON之前，占用的内存是10MB，那么在解析过程中，有可能会使用20M或者更多的内存去做这个工作。我见过很多案例，由于返回对象的嵌套层次太深、引用了不该引用的对象（比如非常大的byte[]对象），造成了内存使用的飙升。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，对于一般的服务，保持结果集的精简，是非常有必要的，这也是DTO(data transfer object)存在的必要。如果你的项目，返回的结果结构比较复杂，对结果集进行一次转换是非常有必要的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，可以使用异步Servlet对Controller层进行优化。它的原理如下：Servlet 接收到请求之后，将请求转交给一个异步线程来执行业务处理，线程本身返回至容器，异步线程处理完业务以后，可以直接生成响应数据，或者将请求继续转发给其它 Servlet。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Service层&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;service层用于处理具体的业务，大部分功能需求都是在这里完成的。service层一般是使用单例模式（prototype），很少会保存状态，而&lt;/span&gt;&lt;span&gt;且可以被controller&lt;/span&gt;&lt;span&gt;复用。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;service层的代码组织，对代码的可读性、性能影响都比较大。我们常说的设计模式，大多数都是针对于service层来说的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里要着重提到的一点，就是分布式事务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3979848866498741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxMI77Pr0fsmaPibnX8c2JuzYYvRU5yrOJNRYjicRGu2K6EIvKhIUlzLXg/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;794&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上图，四个操作分散在三个不同的资源中。要想达到一致性，需要三个不同的资源进行统一协调。它们底层的协议，以及实现方式，都是不一样的。那就无法通过Spring&lt;/span&gt;&lt;span&gt;提供的Transaction注解&lt;/span&gt;&lt;span&gt;来解决，需要借助外部的组件来完成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多人都体验过，加入了一些保证一致性的代码，一压测，性能掉的惊掉下巴。分布式事务是性能杀手，因为它要使用额外的步骤去保证一致性，常用的方法有：两阶段提交方案、TCC、本地消息表、MQ事务消息、分布式事务中间件等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4764309764309764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxFtibciaiccaibOPJ3x6HTwvCSVWuROY3o7EUxCscGowyGtfk2ibsJ79Y9lA/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;594&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上图，分布式事务要在改造成本、性能、实效等方面进行综合考虑。有一个介于分布式事务和非事务之间的名词，叫&lt;/span&gt;&lt;span&gt;做&lt;strong&gt;柔性事务&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;柔性事务的理念是将业务逻辑和互斥操作，从资源层上移至业务层面。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于传统事务和柔性事务，我们来简单比较一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;ACID&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关系数据库, 最大的特点就是事务处理, 即满足ACID。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;原子性（Atomicity）：事务中的操作要么都做，要么都不做。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一致性（Consistency）：系统必须始终处在强一致状态下。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;隔离性（Isolation）：一个事务的执行不能被其他事务所干扰。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;持续性（Durability）：一个已提交的事务对数据库中数据的改变是永久性的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;BASE&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;BASE方法通过牺牲一致性和孤立性来提高可用性和系统性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;BASE为Basically &lt;/span&gt;&lt;span&gt;Available, Soft-state, Eventually consistent三者的缩写，其中BASE分别代表：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;互联网业务，推荐使用补偿事务，完成最终一致性。比如，通过一系列的定时任务，完成对数据的修复。具体可以参照下面的文章。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650525007&amp;amp;idx=1&amp;amp;sn=1dccfcb84f21fd9fe335a756a9c78c0f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;常用的 分布式事务 都有哪些？我该用哪个？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;常用的 分布式事务 都有哪些？我该用哪个？&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Dao层&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;经过合理的数据缓存，我们都会尽量避免请求穿透到Dao层。除非你对ORM本身提供的缓存特性特别的熟悉，否则，都推荐你使用更加通用的方式去缓存数据。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Dao层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，主要在于对ORM框架的使用上。比如，在JPA中，如果加了一对多或者多对多的映射关系，而又没有开启懒加载，级联查询的时候就容易造成深层次的检索，造成了内存开销大、执行缓慢的后果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在一些数据量比较大的业务中，多采用分库分表的方式。在这些分库分表组件中，很多简单的查询语句，都会被重新解析后分散到各个节点进行运算，最后进行结果合并。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举个例子，&lt;/span&gt;&lt;span&gt;select count(*) from a&lt;/span&gt;&lt;span&gt;这句简单的count语句，就可能将请求路由到十几张表中去运算，最后在协调节点进行统计，执行效率是可想而知的。目前，分库分表中间件，比较有代表性的是驱动层的ShardingJdbc和代理层的MyCat，它们都有这样的问题。这些组件提供给使用者的视图是一致的，但我们在编码的时候，一定要注意这些区别。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-10&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;End&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面我们来总结一下。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们简单看了一下SpringBoot常见的优化思路。我们介绍了三个新的性能分析工具。一个是监控系统Prometheus，可以看到一些具体的指标大小；一个是火焰图，可以看到具体的代码热点；一个是Skywalking，可以分析分布式环境中的调用链。在对性能有疑惑的时候，我们都会采用类&lt;/span&gt;&lt;span&gt;似于&lt;strong&gt;神农氏尝百草&lt;/strong&gt;的&lt;/span&gt;&lt;span&gt;方式，综合各种测评工具的结果进行分析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SpringBoot自身的Web容器是Tomcat，那我们就可以通过对Tomcat的调优来获取性能提升。当然，对于服务上层的负载均衡Nginx，我们也提供了一系列的优化思路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，我们看了在经典的MVC架构下，Controller、Service、Dao的一些优化方向，并着重看了Service层的分布式事务问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里有一个具体的优化示例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650524679&amp;amp;idx=1&amp;amp;sn=8881766b35e1d65a65e520f3514f0ec9&amp;amp;chksm=8780cbc3b0f742d5721f10ec8eea9823ed8a7dbec4364846706e34df44b9e4518fed11b02906&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;5秒到1秒，记一次效果“非常”显著的性能优化&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;5秒到1秒，记一次效果“非常”显著的性能优化&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SpringBoot作为一个广泛应用的服务框架，在性能优化方面已经做了很多工作，选用了很多高速组件。比如，数据库连接池默认使用hikaricp，Redis缓存框架默认使用lettuce，本地缓存提供caffeine等。对于一个普通的于数据库交&lt;/span&gt;&lt;span&gt;互的Web服务来说，缓存是最主要的优化手。但细节决定成败，你要是想对系统做极致的优化，还需要参考下面的这篇文章。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650522440&amp;amp;idx=1&amp;amp;sn=e06d3848bf84ec0da769a41b2ec59482&amp;amp;chksm=8780c48cb0f74d9a9cfcc6b69f36d1f197f1d3942e9864225ed4212d2130b6f7862c427eba26&amp;amp;token=1153507763&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;卓越性能 の 军火库（非广告）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;卓越性能 の 军火库（非广告）&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAApdEM5bfTMAAAAAstQy6ubaLX4KHWvLEZgBPE0qIES2F_UJz8zNPgMIvCZzBfvwmirOxm86HbPIbi&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=S7s6ianIic0ia4PicKJSfB8EjyjpQibPUAXolZPq5RXJLH39tyRBBBRuowz6k3DezOekt63TibgUSU5BCQUR9uc8b69GRXCbbiadicj6XYaPxz17icLicllWWDWvboYg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdVyO4mosLP70mcb1rSicud0YMJGqf9JgbF47ZVXZh4mm05IJxGRib12QUPgQ4os0iaDmM&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM5nv7YHhmhvPsGGX04JCIgibK2x2Ru0TOY9HeZTGSIL1KQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08a1fc3d5c807ec30b07756771265bc6b6234fb9e05062ae69ab4@finder&quot; data-nickname=&quot;儒猿IT&quot; data-desc=&quot;出去面试被问到Seata，竟然一脸蒙圈？Seata是一个分布式事务框架，专门帮助我们解决分布式事务问题的。#Seata #分布式事务 #Java面试 @微信时刻 &quot; data-nonceid=&quot;10571939633984640713&quot; data-type=&quot;video&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21428571428571427&quot; data-w=&quot;336&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/84QSpkgaj14GBzMnf1ibXkydLwCmhrWBooDwrdnlqYlsyB5PetG1T1oXxJ63G8TK58dqkDo7uzR7bKic50DxbTQQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6538461538461539&quot; data-w=&quot;52&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BXOuoE8lPAIR47zmQ1XOqSQszO2PjLgkgakpDZQSsUkLLnGszEu0eyGjvHNRqu6picb2kicC4lo95WZGiaxqibqW4A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;欢迎扫码加入儒猿技术交流群，每天晚上20:00都有Java面试、Redis、MySQL、RocketMQ、SpringCloudAlibaba、Java架构等技术答疑分享，更能跟小伙伴们一起交流技术&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;267&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;267&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLbPrUTW4zORxkXJU3pH9mPiawH9oZtZGKTkHyVL2wemkqNmPoJKDZlAt5ibgr2CibGkffw2ozqicds4gw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;396&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;41056&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;41056&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94152&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-autoskip=&quot;1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;另外推荐儒猿课堂的1元系列课程给您，欢迎加入一起学习~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;互联网Java工程师面试突击课&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295hjkFx86RFTZFibdBopicpMl5Scptaibp0pQAe5jUBMtXym9w4CncFBHsQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;SpringCloudAlibaba零基础入门到项目实战&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295NSLHaU5cHQTtyG2K5uK4iaA70v1g50BoQIRUVz4FBN1iahXdqc1M99Ww/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;亿级流量下的电商详情页系统实战项目&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Kafka消息中间件内核源码精讲&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;12个实战案例带你玩转Java并发编程&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295WWU9o0Pj51xAIa2qCs9xD2rdDIRLriaibePNSrWJVCknYn6b5lrF3CQQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Elasticsearch零基础入门到精通&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295QdxHC6HadPfaakPOo7DxxQpLH19lMZH0yAwRI3iajVXblNnwfMxBk9A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于Java手写分布式中间件系统实战&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295r0mR5hhVpAlXTAZzlVvSg1dxegAaZrIZ9ftePV5QQQg2ibIZbiaA6CCg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于ShardingSphere的分库分表实战课&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295hicEliaIKPfLpHqQAo4CdAorqyxd9HvqD8sADicO7wFHGJxNtRus6LlBA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0e251ae9d1d279569547a70afdeb9520</guid>
<title>Rustacean 原则 与 Rust 之魂</title>
<link>https://toutiao.io/k/t0xm58c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;也许这篇文章可以消除你对 Rust 的诸多误解。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rustacean 是对&lt;span&gt;Rust 编程语言&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;的用户的称呼。所以，「Rustacean 原则」可以看作是 Rust 官方团队站在 Rust 语言用户角度上创造 Rust 语言时所参考的原则。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;Rustacean 是 Rust +‎ crustacean 的混合词。crustacean 是指甲壳纲动物，所以 Rust 社区将螃蟹作为 Rust 语言的吉祥物，称之为 Ferris，中文叫摩天蟹。值得明确的是，该吉祥物并非 Rust 官方指定的，最初由 Karen 在 &lt;span&gt;rustacean.net&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 网站公布了 Ferris 的概念艺术图。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rustacean 原则是由 Rust 语言团队 Leader &lt;span&gt;Niko 在 2021 年所发起的项目&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;，这个项目试图列举支配 Rust 设计和社区运作方式的原则。Niko 说，这些原则并非代表 Rust 官方而发布，只是他自己的观点。建立原则的重点在于尝试更好地发展原则并且在团队中使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然这些是实验性原则，但该原则在 Rust 官方内部经过一致性的讨论和认可。从 Niko 今天发布的最新博客&lt;span&gt;Rust 异步trait Part8&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 和 &lt;span&gt;谈 “Rust 之魂”&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 中也看得出来，该原则应该已经在使用了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;去年的时候，因为 Niko 这篇 Rust 原则的文章还引发了社区的一些争议。（前）Rust 核心团队成员 Steve Klabnik 认为 Niko 这篇原则是以亚马逊原则为蓝本的，所以暗示亚马逊在某种程度上对Rust的开发负责。亚马逊雇佣了多名Rust维护者和贡献者，但它只是众多有员工参与的公司之一。Rust库团队负责人Mara Bos的观点却与之相反，她认为Steve的观点“简直是胡说八道”。事情经过一年回头再看原则的这些内容，其实也没有 Steve Klabnik 说的那么离谱，Rust 原则的内容确实对 Rust Project 开发和贡献有指导作用，让大家知道力往哪里使。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天打算写这篇文章，和读者朋友们一起学习一下 Rust 语言创造过程背后所遵循的原则，进一步理解 Rust 的设计哲学。值得说明的是，Rustacean 原则的大部分详细内容 Niko 并没有写完，所以这里有很多细节内容是由我来补充的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rustacean 原则概要&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rustacean 原则主要分为两部分内容：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Rust 语言如何为用户赋能，代表 Rust 和 用户的契约&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Rust 社区如何治理才能更贴近 Rustacean ，代表Rust 团队成员和贡献者之间的一种“契约”。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这份原则总的来说，是为 Rust 的总体目标服务的。Rust 的总体目标是：成为一门赋予每个人构建可靠且高效软件能力的语言。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rust 如何为用户赋能&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分原则内容包括：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;可靠性（⚙️ Reliable）。如果它编译，它就可以工作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高性能（🐎 Performant）。既高效执行又使用最少内存。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持性（🥰 Supportive）。语言、工具和社区随时为用户提供帮助。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产力（🧩 Productive）。让工作事半功倍。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;透明性（🔧 Transparent）。让用户可以预测和控制底层细节。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多样性（🤸 Versatile）。你可以用 Rust 做任何事。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Niko 所说的 “Rust 之魂”正是指 Rust 团队在这几个关键原则之间的斗争——尤其是生产力、多样性与透明性之间的权衡。&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;可靠性&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体而言，可靠性意味着要保证安全的 Rust 代码可以避免未定义行为。类型安全是可靠性的关键要素。类型安全不是一种口头建议，而是靠编译器来管理。但是类型安全会增加语言的复杂性，让 Rust 的学习变得更加困难。为此，Rust 团队在错误信息和文档上非常努力，以便减轻这种复杂性带来的学习成本。正是因为这些成本，Rust 团队才对Rust的类型系统试图实现的东西施加了一些限制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，对某些类型的错误条件采用了运行时检查。并不试图证明索引在范围内，而是检查像&lt;code&gt;vec[i]&lt;/code&gt;这样的表达式，以确保&lt;code&gt;i &amp;lt; vec.len()&lt;/code&gt;。在编译时证明 &lt;code&gt;i&amp;lt; vec.len()&lt;/code&gt; 会增加类型系统的复杂性，所以团队选择不这么做，尽管这样会损失一些可靠性，但是增加了生产力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如，允许用户使用 Unsafe 代码逃离类型系统的复杂性。比如，Safe Rust 不能表达双向链表，但可以用 Unsafe Rust 来实现。然而，也希望用户能够封装（安全抽象）他们的 Unsafe 代码，向整个世界展示一个安全的界面。这与 Unsafe 代码作者的生产力感觉相悖（考虑如何封装东西更复杂），但对世界其他地方的可靠性却有很大好处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面，Rust不隐藏错误条件，并鼓励明确列出所有的可能性（或承认某些东西被忽略）。比如，Rust 要求用户提供详尽的 match 匹配分支，逼迫用户去考虑所有情况。这样做有助于提升 Rust 代码的可靠性，但这是以降低用户的生产力为代价的。所以，这是一个权衡。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;错误处理就是一个很好的权衡案例。编程语言历史长久以来，错误处理一般是使用异常。异常处理对用户而言，提升了生产力。但是异常隐藏了控制流，用户很难进行推理，在实践中充满了问题，对可靠性极大的不利。而Rust采用了函数式语言中首创的返回枚举的方法，让用户强制考虑错误处理的方式，这有助于可靠性。其后又引入了&lt;code&gt;?&lt;/code&gt;操作符，让用户更方便地传播错误，是生产力的提升，同时确保错误路径对用户来说仍然是可见的，不会被完全忽略。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;高性能&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 借鉴了 C++ 社区的零成本抽象概念。Cpp 之父 Bjarne 将零成本抽象定义为：“What you don&#x27;t use, you don&#x27;t pay for. And further: What you do use, you couldn&#x27;t hand code any better”。零成本抽象意味着，用户可以使用语言提供的高级抽象能力编写代码，而编译器则会通过优化为开发者生成高性能的代码，进一步来说，就是将多余无用的代码优化掉，将有用的代码优化得更加高效。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.53125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hicrFibaKFMd3JSG4tfFSYlHVmSTyBnSaYqhFQaxbXEMlGvntw9VLj3E8sK6yjBgnPRZdgkSpMgAcF1hkEzn3B9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2112&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;span&gt;（图片来自于 2021 年Rust D&lt;/span&gt;&lt;span&gt;ublin的轻talk：&lt;/span&gt;&lt;span&gt; Zero Cost Abstractions&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;span&gt;）&lt;/span&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这份性能测试并非要踩 C#/Java 语言，只是为了突出 Rust 的零成本抽象能力的性能。你可以看到，Rust 提供了非常优雅且和Java/C# 等同的高级迭代器抽象，而不会影响代码的性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也是被很多人误会的一点，他们认为 Rust 宣传的零成本抽象是百分之百的。但实际上想要保证百分之百零成本抽象是非常困难的，Rust 在这一方面也充满了权衡。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 的开发者认为，零成本抽象，不仅仅是追求零成本和最佳性能，还更应该着重改善用户体验，因为这就是抽象的意义所在。Rust 语言中的达到这个标准的零成本抽象特性只有少数的几个，这些由 &lt;span&gt;withoutboats 在他的博客中&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;列了出来：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Rust 所有权和借用机制。在没有垃圾收集器的情况下保证内存和线程安全是 Rust 最初的巨大成功故事。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;迭代器和闭包 API。这是另一个经典特性。就像上图中所示的迭代器代码一样，你可以优雅地使用各种过滤器、map和for循环，优化出来的代码和手写的高效 C 代码等价。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Async/Await 和 Future。Futures API 是一个重要的例子。早期的 Futures （指 0.3 版本之前）很好地达到了“零成本”的标准，但是没有提供足够好的用户体验。后来通过添加 &lt;code&gt;Pin&lt;/code&gt; 来支持跨 &lt;code&gt;await&lt;/code&gt; 的引用等，才达到一个用户体验良好的零成本抽象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Unsafe Rust 和 模块边界（可见性）。这是 Rust 其他零成本抽象之母，因为这是 Safe Rust 的基础。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外的其他特性则没有取得太大的成功，这有些例子：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;trait 动态分发，目前没有找到成功的解决方案。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;泛型的trait限定，对优化有一定阻碍，所以才引入了 特化（Specialization）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;NewType 模式，在某些情况下优化并不理想（详细可参考延伸阅读reddit相关内容）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么百分百的零成本抽象这么难？因为 Rust 要考虑的因素太多。除了要为用户提供体验良好的抽象之外，还要对透明性和多样性做权衡，这些都是对编译器优化干扰的因素。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人对 Rust 的另一个误解就是，用 Rust 实现的代码性能一定很好。但是实践结果很有可能打破他们这层认知。开发者在使用 Rust 代码的时候需要注意考虑以下几个问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;你的抽象有多少成本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你的代码热点路径在哪（调用频繁的代码），该如何优化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;利用好性能基准测试&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 Rust 零成本抽象并不保证用户写的 Rust 代码性能最佳。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;支持性&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 工具致力于为开发人员提供优美、流畅的体验。一个例子是编译器如何提供高质量的错误消息，这些消息不仅试图指示错误，而且还教用户 Rust 语言是如何工作的，并就如何修复他们的代码提供有用的建议。最近 Rust 官方还启动了诊断信息多语言翻译计划，欢迎大家去贡献。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于像 cargo 这样的工具，这体现在精心的 CLI 设计中，使“简单的事情变得简单”。基于 Cargo 的有用的第三方插件变得越来越丰富。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;生产力&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生产力可能会与可靠性、高性能有冲突，所以这里也存在权衡。可以参考上面列举出来的 Rust 零成本抽象成功的几个特性，比如所有权机制。很多人认为所有权机制影响生产力，是因为这种安全内存管理方式比较新颖，接受起来没有那么快。但是换成 GC 语言，开发者就没有这个心智负担，生产力自然提升。但熟练使用 Rust 的开发者则不会受这个影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让 Rust 变得极具生产力的方法是什么？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Rust 致力于跨版本的稳定性。这是因为稳定性是生产力的关键推动因素：如果没有跨版本的稳定性，用户将被迫花时间解决构建失败，而不是构建用户想要构建的功能。但是这种稳定性也会阻碍 Rust 语言开发者们对语言特性设计的自由度，所以引入了 Edition 系统让设计自由度和语言版本稳定性达到平衡。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可移植性。默认情况下，Rust 代码旨在跨所有主流架构移植。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;打造繁荣的生态系统。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;透明性&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 官方团队非常重视透明性。透明性是 Rust 提供给用户的底层掌控力，但需要注意并不意味着它能帮用户自动提升性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但透明性暴露的底层控制细节，让多样性和生产力大打折扣。比如 &lt;code&gt;repr&lt;/code&gt;属性，再比如异步函数中随处可见的 &lt;code&gt;Box&amp;lt;dyn Future&amp;lt;Output = Xxx&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;。因为它会迫使用户过度关注对当前要解决问题实际并不重要的底层细节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;透明性与多样性、生产力有所冲突，在设计语言特性时需要仔细权衡。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;多样性&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 同样重视多样性，多样性意味着通用性，意味着 Rust 可以做上层的应用，也可以做底层的系统开发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方的目标是以某种方式向 Rust 程序公开所有核心系统功能，即使访问或正确使用它们可能很困难。而不希望 Rust 用户觉得他们必须选择 C 或其他语言，他们应该能够使用 Unsafe Rust 来完成他们的工作。像“内联汇编”这样的功能也遵循这种思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我能想到一个比较典型的例子是，Rust 将 Error trait 移动到了 core 中，这样就可以统一 &lt;code&gt;std&lt;/code&gt; 和 &lt;code&gt;no_std&lt;/code&gt; 的错误处理了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rust 社区如何治理才能更贴近 Rustacean&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该部分内容提供了以下一些原则，用于帮助 Rust 核心团队和社区贡献者良好合作：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;善良体贴。相互尊重彼此才是构建 Rust 未来的基础。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;给用户带来快乐。首要目标是让 Rust 用户更有效率和能力。希望人们喜欢使用 Rust，如果他们愿意，也喜欢参与它的社区。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;畅所欲言地表达自己。带上你的专业知识，并愿意为你认为正确的事情进行辩论。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;认可别人的知识。没有人能垄断好的创意。Rust 团队需要汲取优秀的建议来改进设计。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从小处开始。寻找完美的设计需要迭代。大处着眼，小处着手；当你了解更多时，不要害怕改变。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;跟进。说你会做的，做你说的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;把爱传出去。Rust项目成员需要识别有潜力的贡献者，有义务去发展新的成员，并且当好教练的角色。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;信任和委托。赋予他人权力意味着愿意让他们以他们认为最好的方式做出决定。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;P.S 金发姑娘原则&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Niko 的博客中还提到一个金发姑娘原则（Goldilocks），比较有趣。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该原则出自一个英国的童话故事《金发姑娘和三只熊》。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲的是一位金发姑娘偷偷跑进熊的家里，她发现了三碗粥、三把椅子和三张床，粥有冷的、有热的；椅子有硬的、有软的；床有大的、有小的。她都尝了、都试了以后，选择了不冷不热的那碗粥，不硬不软的那把椅子，不大不小的那张床，因为 &lt;strong&gt;那碗粥、那把椅子、那张床最适合她&lt;/strong&gt;，对她来说都是“刚刚好”，这种选择的原则就叫做“金发姑娘原则”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“金发姑娘原则”被应用在各个领域，比如发展心理学、经济学、通讯科学、医学和天体生物学、沟通等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果把该原则用在如何看待（新）事物方面，那么它会成为一个非常好的思维工具。通过该原则，可以让你避免用非黑即白的思维看待这个世界存在的事物，比如 Rust 语言，比如某个人。这个世界并不是好与坏、黑与白这两个极端，它还存在中间状态。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文可能还缺少很多细节，但总体上我认为应该把 Rustacean 原则和 Niko 所说的 Rust 之魂讲清楚了。Rust 语言并不完美，但它在这些原则之间不断权衡而发展。我们可以不完美，也不可能完美，但不能不追求完美。感谢阅读。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;延伸阅读&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://rustacean-principles.netlify.app/what_is_rust.html&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://smallcultfollowing.com/babysteps/blog/2022/09/19/what-i-meant-by-the-soul-of-rust/&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://smallcultfollowing.com/babysteps/blog/2022/09/18/dyn-async-traits-part-8-the-soul-of-rust/&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;https://www.reddit.com/r/rust/comments/p0ul6b/comment/h8b7b2w/&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Rust 编程语言: &lt;em&gt;https://rust-lang.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;rustacean.net: &lt;em&gt;http://www.rustacean.net&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Niko 在 2021 年所发起的项目: &lt;em&gt;https://github.com/nikomatsakis/rustacean-principles&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;Rust 异步trait Part8: &lt;em&gt;https://smallcultfollowing.com/babysteps/blog/2022/09/18/dyn-async-traits-part-8-the-soul-of-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;谈 “Rust 之魂”: &lt;em&gt;https://smallcultfollowing.com/babysteps/blog/2022/09/19/what-i-meant-by-the-soul-of-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;Zero Cost Abstractions: &lt;em&gt;https://github.com/mike-barber/rust-zero-cost-abstractions&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;withoutboats 在他的博客中: &lt;em&gt;https://boats.gitlab.io/blog/post/zero-cost-abstractions/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;https://rustacean-principles.netlify.app/what_is_rust.html: &lt;em&gt;https://rustacean-principles.netlify.app/what_is_rust.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;https://smallcultfollowing.com/babysteps/blog/2022/09/19/what-i-meant-by-the-soul-of-rust/: &lt;em&gt;https://smallcultfollowing.com/babysteps/blog/2022/09/19/what-i-meant-by-the-soul-of-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;https://smallcultfollowing.com/babysteps/blog/2022/09/18/dyn-async-traits-part-8-the-soul-of-rust/: &lt;em&gt;https://smallcultfollowing.com/babysteps/blog/2022/09/18/dyn-async-traits-part-8-the-soul-of-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>