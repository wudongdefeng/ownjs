<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e40ca83125db2aec90c3a6bd730f3d8e</guid>
<title>优质网站同好者周刊（第 090 期）</title>
<link>https://toutiao.io/k/urt4c2i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/3D&quot;&gt;&lt;code&gt;3D&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%95%E6%93%8E&quot;&gt;&lt;code&gt;引擎&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/XR&quot;&gt;&lt;code&gt;XR&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Babylon.js is one of the world&#x27;s leading WebGL-based graphics engines. From a new visual scene inspector, best-in-class physically-based rendering, countless performance optimizations, and much more, Babylon.js brings powerful, beautiful, simple, and open 3D to everyone on the web.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.babylonjs.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Babylon.js: Powerful, Beautiful, Simple, Open - Web-Based 3D At Its Best &quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.babylonjs.com/&quot;&gt;Babylon.js&lt;/a&gt; 是一个强大、美观、简单、开放的游戏和渲染引擎，封装在一个友好的 JavaScript 框架中。它是世界领先的基于 WebGL 的图形引擎之一。从一个新的可视化场景检查器，一流的基于物理的渲染，无数的性能优化，以及更多，Babylon.js 给网络上的每个人带来了强大、美丽、简单和开放的 3D。它具有以下功能特色：&lt;/p&gt;&lt;h3 id=&quot;网络-gpu&quot;&gt;&lt;a href=&quot;#%E7%BD%91%E7%BB%9C-gpu&quot; aria-label=&quot;网络 gpu permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;网络 GPU&lt;/h3&gt;&lt;p&gt;WebGPU 代表了浏览器到 GPU 通信的下一次演进。W3C 的 Web 社区组 GPU 从头开始构建它时考虑到了性能。WebGPU 让 Web 开发人员能够访问一些最先进的现代图形功能，例如计算着色器和闪电般快速的纹理加载。我们从一开始就积极参与 WebGPU 工作组，并自豪地宣布 Babylon.js 5.0 提供对 WebGPU 的全面支持。&lt;/p&gt;&lt;h3 id=&quot;跨平台原生开发&quot;&gt;&lt;a href=&quot;#%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%94%9F%E5%BC%80%E5%8F%91&quot; aria-label=&quot;跨平台原生开发 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;跨平台原生开发&lt;/h3&gt;&lt;p&gt;我们知道开发人员希望以尽可能少的努力接触尽可能多的人。我们很自豪地宣布，Babylon.js 5.0 解锁了使用 Babylon.js API 开发 Web 和本机应用程序的能力。无论您的目标是 Web、Windows、Mac、iPhone 还是 Android 手机，Babylon.js 5.0 都允许您编写一次渲染代码并将其部署到您选择的平台上，使用浏览器或作为本机应用程序！&lt;/p&gt;&lt;h3 id=&quot;动画曲线编辑器&quot;&gt;&lt;a href=&quot;#%E5%8A%A8%E7%94%BB%E6%9B%B2%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8&quot; aria-label=&quot;动画曲线编辑器 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;动画曲线编辑器&lt;/h3&gt;&lt;p&gt;到目前为止，在渲染引擎中创建和修改动画数据可能是复杂而冗长的。不再！Babylon.js 5.0 添加了一个内置的动画曲线编辑器 (ACE)，使得直接在巴比伦场景中创建和修改动画数据变得异常容易。此外，与所有 Babylon.js 平台工具一样，您可以将动画数据保存到 Babylon.js Snippet Server 并使用一行代码将其加载回您的 Babylon.js 场景！&lt;/p&gt;&lt;h3 id=&quot;性能分析器&quot;&gt;&lt;a href=&quot;#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8&quot; aria-label=&quot;性能分析器 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;性能分析器&lt;/h3&gt;&lt;p&gt;在您创建高级交互式 3D 体验时，性能是最重要的事情之一。Babylon.js 5.0 通过引入新的 Performance Profiler 使性能调试和管理变得轻而易举。这个方便的工具可让您查看场景关键性能指标的实时图表，所有这些都是实时连接的！做出改变，看看对性能的影响。真的就是这么简单！&lt;/p&gt;&lt;h3 id=&quot;无限变形目标&quot;&gt;&lt;a href=&quot;#%E6%97%A0%E9%99%90%E5%8F%98%E5%BD%A2%E7%9B%AE%E6%A0%87&quot; aria-label=&quot;无限变形目标 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;无限变形目标&lt;/h3&gt;&lt;p&gt;无论您如何称呼它们，Blend Shapes、Shape Keys 或 Morph Targets，Babylon.js 5.0 都为您使用受影响的顶点位置的能力增添了火箭燃料。这个新功能现在为您提供了无限数量的变形目标。想要拥有具有数千个变形目标的复杂动画面部以获得完美的表情吗？现在您可以在网络上，全部免费！&lt;/p&gt;&lt;h3 id=&quot;webxr-进展情况&quot;&gt;&lt;a href=&quot;#webxr-%E8%BF%9B%E5%B1%95%E6%83%85%E5%86%B5&quot; aria-label=&quot;webxr 进展情况 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;WebXR 进展情况&lt;/h3&gt;&lt;p&gt;&lt;code&gt;WebXR&lt;/code&gt; 是一个令人难以置信的 Web 标准，允许 Web 开发人员创建惊人的跨浏览器 XR 体验或将移动 AR 组件添加到您的网站。虽然在 Babylon.js 中呈现世界锁定 3D 对象的技术已经存在了一段时间，但 Babylon.js 5.0 通过引入光估计来提升美感。这个强大且易于使用的新功能让您可以估计您真实世界位置的光线，并自动匹配您的虚拟世界锁定对象的光照和阴影。Babylon.js 5.0 还增加了对 WebXR 图像跟踪和 WebXR 图层的支持！&lt;/p&gt;&lt;h3 id=&quot;babylonjs-的混合现实工具包&quot;&gt;&lt;a href=&quot;#babylonjs-%E7%9A%84%E6%B7%B7%E5%90%88%E7%8E%B0%E5%AE%9E%E5%B7%A5%E5%85%B7%E5%8C%85&quot; aria-label=&quot;babylonjs 的混合现实工具包 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;BABYLON.JS 的混合现实工具包&lt;/h3&gt;&lt;p&gt;Babylon.js 5.0 还添加了对世界上最先进的 3D 界面组件库 Mixed Reality Toolkit 的更新支持。这个高级库可以非常轻松地将高级 XR UX 元素添加到您的 Babylon.js 场景中，例如：全息石板、3D 滑块、触摸全息按钮、触摸网格按钮等等！&lt;/p&gt;&lt;p&gt;以上提及的特性，用其官方团队的表述，只是&lt;strong&gt;冰山一角&lt;/strong&gt;；如果您对 Babylon 或者 WebGL、WebXR、MR、3D 感兴趣，可以前往 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.babylonjs.com/specifications/&quot;&gt;Babylon 完整的功能列表&lt;/a&gt; 以了解更多；此外，Babylon 在 &lt;a href=&quot;https://github.com/BabylonJS/Babylon.js&quot;&gt;Github 开源&lt;/a&gt;，您可以通过 npm 或 CDN 直接使用。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6363c2ac913d6a05d4056be7&quot;&gt;倾城之链 - Babylon.js: Powerful, Beautiful, Simple, Open - Web-Based 3D At Its Best&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%8F%91%E7%8E%B0&quot;&gt;&lt;code&gt;发现&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%90%9C%E7%B4%A2&quot;&gt;&lt;code&gt;搜索&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%A1%A8%E6%83%85&quot;&gt;&lt;code&gt;表情&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：表情包, 表情包搜索, 聊天表情, 微信表情包, QQ 表情包, 颜文字, 表情包大全, 表情包下载&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;逗比联萌是一个表情包搜索网站，这里有成千上万的表情，帮助你聊天的时候所向披靡，无表情不聊天，这里有海量的聊天表情，微信表情包，QQ 表情包，颜文字等。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.doubilm.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 逗比联萌 - 表情包大全 - 微信表情包 - QQ表情包 - 颜文字吐个槽&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.doubilm.com/&quot;&gt;逗比联萌&lt;/a&gt;，一个表情包搜索网站（基于 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot;&gt;Vue&lt;/a&gt;、Nuxt.js 框架所搭建）；该网站有海量的聊天表情，微信表情包，QQ 表情包，颜文字等，而且内置「搜索」🔍 功能，支持检索想要的表情（多以搞笑为主）；此外，它还提供「图片做旧」等功能。在聊天中喜欢夹在表情的朋友，可以考虑关注下；值得说明的是，&lt;code&gt;逗比联萌&lt;/code&gt;也有提供&lt;code&gt;小程序&lt;/code&gt;版本。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/636271a7913d6a05d40561e8&quot;&gt;倾城之链 - 逗比联萌 - 表情包大全 - 微信表情包 - QQ 表情包 - 颜文字吐个槽&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E9%85%8D%E8%89%B2&quot;&gt;&lt;code&gt;配色&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%A8%8B%E5%BA%8F%E5%91%98&quot;&gt;&lt;code&gt;程序员&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BA%94%E7%94%A8&quot;&gt;&lt;code&gt;应用&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Dracula is a color scheme for code editors and terminal emulators such as Vim, Notepad++, iTerm, VSCode, Terminal.app, ZSH, and much more.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/draculatheme.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Dracula — Dark theme for 280+ apps&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://draculatheme.com/&quot;&gt;Dracula&lt;/a&gt; ，是一种用于代码编辑器和终端模拟器（Terminal emulators）的颜色方案，如 Vim、Notepad++、iTerm、VSCode、Terminal.app、ZSH 等等。Dracula 是适用于多大 280 余个应用的&lt;strong&gt;深色主题&lt;/strong&gt;，其中 220+ 适配 Mac &amp;amp; Linux 平台、有 210 款适配于 Windows。除了常见的编辑器、终端模拟器之外，还作用于很多应用程序或平台，如：Telegram、Wallpaper、Slack、Chrome、Firefox、BetterDiscord、Steam、Github Pages、Wox、DuckDuckGo、Gitk、&lt;a href=&quot;https://nicelinks.site/redirect?url=https://draculatheme.com/obsidian&quot;&gt;Obsidian&lt;/a&gt;、Figma、Typora、Vimium、XChat、Github、WordPress、Plank...... 您可以在该平台检索您想作用的应用。&lt;/p&gt;&lt;p&gt;关于 Dracula（德古拉）起源故事，背后是一段作者在 2013 年波折经历，感兴趣的朋友可以浏览下：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://draculatheme.com/about&quot;&gt;Dracula 项目的起源故事&lt;/a&gt;。“福兮祸之所倚，祸兮福之所伏”，很多时候一段糟糕的经历，可以成为灵感创作的源泉。作为程序员，有在 &lt;a href=&quot;https://nicelinks.site/post/5af55777979f626ea3d37917&quot;&gt;VsCode&lt;/a&gt; 、Chrome 以及 &lt;a href=&quot;https://nicelinks.site/post/6266999577f8270876fcb3d6&quot;&gt;Obsidian&lt;/a&gt; 等应用中使用了 dracula 主题，感觉非常好，相信您很可能也会喜欢。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/636108c262decd06091f4ab9&quot;&gt;倾城之链 - Dracula — Dark theme for 280+ apps&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%88%86%E6%9E%90&quot;&gt;&lt;code&gt;分析&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B9%B3%E5%8F%B0&quot;&gt;&lt;code&gt;平台&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Data.ai（前身为 App Annie）为应用程序分析数据提供易用的平台和工具。与我们一起更高效地运行您应用业务的每个阶段。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.data.ai.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - App Analytics | Mobile Data Analytics Tools | data.ai&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;： &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.data.ai/&quot;&gt;Data.ai&lt;/a&gt; （其前身是 &lt;code&gt;App Annie&lt;/code&gt; ），首家聚合数据 AI 公司，将消费者和市场数据与人工智能的力量相结合，以提高洞察力。该公司使命是提供制定基于优质洞察、规范化以及可执行性的策略，帮助品牌、发行商以及投资者在移动和数字生态系统中脱颖而出。该平台汇聚了蛮多产品，诸如：&lt;/p&gt;&lt;h3 id=&quot;dataai-intelligence&quot;&gt;&lt;a href=&quot;#dataai-intelligence&quot; aria-label=&quot;dataai intelligence permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;data.ai Intelligence&lt;/h3&gt;&lt;p&gt;利用超过 800 万 App 和数千个网站的数据，您可全面了解移动市场信息，获取并留住用户，制定路线图，开拓新市场，优化投资回报。&lt;/p&gt;&lt;h3 id=&quot;dataai-ascend&quot;&gt;&lt;a href=&quot;#dataai-ascend&quot; aria-label=&quot;dataai ascend permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;data.ai Ascend&lt;/h3&gt;&lt;p&gt;通过细致分析广告变现数据，管理、增加和发现潜在的业务机会。直观的控制面板、高级规范化工具， 400 多个第三方平台对接数据，尽在同一平台。&lt;/p&gt;&lt;h3 id=&quot;dataai-connectplus&quot;&gt;&lt;a href=&quot;#dataai-connectplus&quot; aria-label=&quot;dataai connectplus permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;data.ai ConnectPlus&lt;/h3&gt;&lt;p&gt;在一个界面上追踪自己 App 的下载量、收入、使用行为和广告等所有重要数据。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;为什么选择 data.ai&lt;/strong&gt;？官方给出的答案是：超过 100 万用户依赖 data.ai 获得业内最值得信赖、最全面的移动和数字市场数据；并且列举以下优势：&lt;/p&gt;&lt;h3 id=&quot;数据科学存在于我们的-dna-内&quot;&gt;&lt;a href=&quot;#%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AD%98%E5%9C%A8%E4%BA%8E%E6%88%91%E4%BB%AC%E7%9A%84-dna-%E5%86%85&quot; aria-label=&quot;数据科学存在于我们的 dna 内 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;数据科学存在于我们的 DNA 内&lt;/h3&gt;&lt;p&gt;作为第一家统一数据 AI 公司，Data.ai 正在引领下一代 AI 游戏统一消费者+市场数据。&lt;/p&gt;&lt;h3 id=&quot;100-万款-app-接入&quot;&gt;&lt;a href=&quot;#100-%E4%B8%87%E6%AC%BE-app-%E6%8E%A5%E5%85%A5&quot; aria-label=&quot;100 万款 app 接入 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;100 万款 APP 接入&lt;/h3&gt;&lt;p&gt;Data.ai 的数据源包括：来自逾 100 万 App、庞大消费者调查样本、顶级广告网络平台等的匿名数据与聚合数据。&lt;/p&gt;&lt;h3 id=&quot;1000-连接&quot;&gt;&lt;a href=&quot;#1000-%E8%BF%9E%E6%8E%A5&quot; aria-label=&quot;1000 连接 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;1000+ 连接&lt;/h3&gt;&lt;p&gt;Data.ai 是第一个同时提供市场数据和发行商自有数据分析，以最大化投资回报率的公司。&lt;/p&gt;&lt;h3 id=&quot;200-多位研发人员&quot;&gt;&lt;a href=&quot;#200-%E5%A4%9A%E4%BD%8D%E7%A0%94%E5%8F%91%E4%BA%BA%E5%91%98&quot; aria-label=&quot;200 多位研发人员 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;200 多位研发人员&lt;/h3&gt;&lt;p&gt;Data.ai 不断加大产品投资，力求时刻站在 App 数据和技术创新的最前沿。&lt;/p&gt;&lt;h3 id=&quot;行业标准&quot;&gt;&lt;a href=&quot;#%E8%A1%8C%E4%B8%9A%E6%A0%87%E5%87%86&quot; aria-label=&quot;行业标准 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;行业标准&lt;/h3&gt;&lt;p&gt;Data.ai 的品牌声誉源自客户对我们的信赖。Apple、EA、Softbank、腾讯及其他行业领导者经常在招股书、财务和收益报告中援引 App Annie 的分析数据。&lt;/p&gt;&lt;h3 id=&quot;全球支持&quot;&gt;&lt;a href=&quot;#%E5%85%A8%E7%90%83%E6%94%AF%E6%8C%81&quot; aria-label=&quot;全球支持 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;全球支持&lt;/h3&gt;&lt;p&gt;Data.ai 的产品支持 7 种语言，我们的员工分布在 15 个国家和地区。无论您的业务在何处运营，data.ai 都能提供本地专业知识。&lt;/p&gt;&lt;p&gt;它统一数据 AI 将消费者数据和市场数据估算结合在一个 AI 驱动的平台上，以便获得洞察，制定策略和开展行动。如果您想在移动应用领域大展拳脚，可以考虑借助 data.ai 来了解、对标和优化移动与数字性能，从而辅助做关键决策。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/635fbc02a04a541a8bbb0230&quot;&gt;倾城之链 - App Analytics | Mobile Data Analytics Tools | data.ai&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;勤学如春起之苗，不见其增，日有所长&lt;/strong&gt;；&lt;br/&gt;&lt;strong&gt;辍学如磨刀之石，不见其损，日有所亏&lt;/strong&gt;。&lt;br/&gt;── 南北朝诗人、辞赋家、散文家 · 陶渊明（潜）&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ef79ab9252115515e7a15448e600fb56</guid>
<title>一个没有 KPI 的国产编程语言，开源 3 个月有了哪些新进展？</title>
<link>https://toutiao.io/k/7hq9nc5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages __bg_gif wxw-img&quot; data-ratio=&quot;0.125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAuiaPn8q2TmsZwA4RUjpMdPTZ3RKT9f7INA6jnnN4rn5QLB05fLOgYqaqjpmeBZo2FsxahGl5yiaP2ZA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-mpa-category=&quot;正文&quot; data-mpa-template-id=&quot;1440&quot;&gt;&lt;section label=&quot;powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;【CSDN 编者按】放眼各大编程语言排行榜，几乎很难看到国产编程语言身影，伴随着我国基础软硬件的发力与追赶，尤其是在操作系统、数据库等技术领域的累积，我们也渐渐看到一些国产编程语言的诞生，例如由一群 Go 语言爱好者发起的凹语言，2018 年筹备再到今年 7 月正式开源，其背后有着怎样的故事，开源 3 个月后，其又进行了哪些改进与提升呢？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;责编 | 梦依丹&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;出品 | 凹语言技术团队官方投稿&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;凹语言正式开源不知不觉已经过去一个季度，这是凹语言开源的第一个季度的非正式总结，也是对未来的计划和展望。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.35514018691588783&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qkyxEibG4Uy3ibtP06LgbDfGUObnDFMEz9icU556dwCZyNgtwXH29EwH6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;107&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;什么是凹语言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;凹语言（凹读音“wā”）是 国内 Gopher 针对 WASM 平台设计的通用编程语言。凹语言作为WASM原生 的编程语言，天然对浏览器环境亲和，同时支持 Linux、macOS 和 Windows 等主流操作系统，此外通过 LLVM 后端对本地应用和单片机等环境提供支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面是凹语言的Logo：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1075697211155378&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODCpkhWEeyczdySNP9JWyWvzTSsOIAHEZmQ4jZAiaZDnmb1XydfUiaEuuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;251&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从形状上看，“凹”字形似 WASM 图标（方块上部缺个口）；从读音上看，“凹”正好是 WASM 的前半部；从结构上看，实心的“凹”字约等于字母“C”逆时针旋转 90 度——C 可以理解为 C 语言，也可以理解为 Coder，那么“凹”也可以暗示躺平的的 C/躺平的 Coder……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3577981651376147&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qOfecjttGpW3J3tvO19FFTIAqx9ibBwTIZv6fzIvOlLJUicfaicjQJpZ1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;109&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;发起人&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该项目的发起人柴树杉、丁尔男、史斌均是国内资深 Gopher。其中柴树杉是《Go 语言高级编程》等多本 Go 畅销书作者，目前在蚂蚁从事 KusionStack 和 KCL 语言的设计和开发工作。丁尔男是《WebAssembly 标准入门》等多本 WASM 专著作者，长年从事 3D 开发热衷于性能优化，目前在航天远景科技股份有限公司分管 3D 相关产品开发工作。史斌是编译器领域专家，曾为 Go 编译器提交过 127 个优化补丁，在 Go 全球贡献者排名中长期处于前 50 名，同时拥有 Go 与 LLVM 官方 Git 仓库的提交权限，同时也是《Go 语言定制指南》&lt;span&gt;图书&lt;/span&gt;的作者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在开发实践中，因为不同的原因，先后萌生了发展一门新语言的想法，Go 语言克制的风格是我们对于编程语言审美的最大公约数，因此选择它作为初始的蓝本。不必讳言：本项目启动时大量借鉴了 Go 的设计思想和具体实现——这是在有限投入下不得不作出的折衷，我们希望随着项目的发展，积累更多原创的设计，为自主创新的大潮贡献一点力量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3669724770642202&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qgxOukGzL6akS7ibtpEgg5xkibkgpJxVwylfcDicBABiaXlgBLsd1Afds1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;109&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;凹语言的设计哲学和开发计划&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;凹语言的整体设计，是围绕着“对开发人员友好”来进行的。字符串/切片作为基本类型、无需（也不能）手动管理内存、视觉上更显著的变量类型定义等均是这一核心思想的具体体现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2022 年 7 月，凹语言正式开源，并公布了半年度的线路图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2572509457755359&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODYnBw80B1RJwHLOG9LH8GKrL0cnCQaNxniclfxsHTpxkFYEEaaJicIKkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;793&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着项目的公开，有了更多的同学加入了凹语言开发组，讨论组社区也逐渐形成并保持活跃。感谢开发组的同学协同努力，第一季度的目标全部达成！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.34234234234234234&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qA3wIF4M1rgJPLkc2t7tiatN4Txs9MPGEdYzyfH069BSHiatSpOjibBKlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;111&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;取得了哪些进展&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，经过多次讨论，开发组慎重决定凹语言采用 AGPLv3 开源协议，并制定了对应的了凹语言贡献协议。目前已经有外部同学通过新的流程贡献了代码。此外还取得了以下重大进展：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发布第三版网站&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从 2018 年起，网站经过 3 次较大更新。最开始第一版的网站只有一个静态页面（2018），第二版是刚开源时基于 MDBoo k构建（2022年7月），最新版本于 2022 年 9 月开发到 10 月底正式上线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODpKlksibbcPQIHtianLb3NE54eKgub3TMD757QKRnicGy9ZAZDhAXjxtHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该版本网站由子项目负责人扈梦明开发，他还是凹语言 VSCode 插件和 Playground 的负责人。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;发布纯浏览器环境的的 Playground&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Playground 是一套在线编译凹源代码并执行的环境。该环境的编译、执行没有调用后端服务，完全在页面中运行；是一个非常便捷的体验、测试凹语言的入口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.57265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODTvpibowqsDMibibPtOdqWF0h12jTlzuy0u3naeV8L0omqOG4so0c9DXGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Playground 地址：&lt;/span&gt;&lt;span&gt;https://wa-lang.org/playground/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;创建 VSCode/Fleet/Vim 等高亮插件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;VSCode 插件提供了语法高亮、代码片段补全、补全建议等功能，支持纯 Web 环境安装：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.88046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuOD9P0rYAa1haOUFClds6MY1hRMghAptg6dur4xKqrFicxqEibGmTfdmqhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;9 月 JetBrains Fleet 发布了预览版本，凹语言第一时间开发了高亮插件：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7512562814070352&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODrsOicvwGf0FTpKTZeG1rcibP2K3db0wMYupxRkcaSA53cwhtpaOuwwZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;796&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，传统的 Vim 插件也不能少：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7521902377972466&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuOD5Zib1ozZicmB6g7Q7ia7Vmh23NCrVynAu7toicySKviaib49YibkUvLcE3blA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;799&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更多和插件和功能完善希望社区同学参与共建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;WASM 后端原型如期发布&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;WASM 后端原型如期发布，已支持数值/字符串基本类型、结构体、方法、数组、切片等常用特性，项目组开始着手以此为基础开发贪吃蛇等带有交互功能的网页小游戏。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以通过以下方式测试：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; `go &lt;span class=&quot;code-snippet__keyword&quot;&gt;install&lt;/span&gt; github.com/wa-lang/wa@latest&lt;span class=&quot;code-snippet__string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; `&lt;/span&gt;wa init -&lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;=_examples/hi&lt;span class=&quot;code-snippet__string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; `&lt;/span&gt;wa run _examples/hi&lt;span class=&quot;code-snippet__string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;或者创建以 `hello.wa` 文件，包含下代码&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fn main {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;你好，凹语言！&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  println(&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;fn &lt;span class=&quot;code-snippet__title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;a: i32, b: i32&lt;/span&gt;)&lt;/span&gt; =&amp;gt; i32 {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; a+b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运行并输出结果:&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ &lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; run main.&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; hello.wa &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;你好，凹语言！&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;程序默认会基于WAT后端编译并执行，看到以上输出表示一切正常！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作为嵌入 Go 程序脚本&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;凹语言也可以作为 Go 语言包被导入，然后以脚本方式执行：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/wa-lang/wa/api&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  output, err := api.RunCode(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello.wa&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fn main() { println(40+2) }&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Print(&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;(output), err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;LLVM 后端提前启动&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原定于 2023 年春节后启动的 LLVM 后端，提前启动。LLVM 后端的主战场在本地和嵌入式环境，下面是凹程序翻译到 LLVM-IR 的效果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODpTZljF6N0kVfibOSXOvStSYibGpa43voPhJrHcbntrLSJrg7aQJwyhcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前已经支持素数例子的执行：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8596491228070176&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODg2ia6aBg2tkHo002ibVObJy709Wj3dLjN327pArlibcBNhu5DiaX4hy2KA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;570&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;更新路线图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2572509457755359&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODNKfTuibq7rR5iahVblHeDRz2IxwUzTWEibZRrpGgEibq1zPXYsr8KZSLRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;793&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3577981651376147&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qZDicaoukpArCbp8E1Z8kCR4PoiazstRK6YZq6iaon8P2yaG3tqgjBNt9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;109&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;展望&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，凹语言是一个爱好者共建的业余项目，没有设置 KPI。一门新语言真正达到实用化，所需的工作量极其巨大，我们热切的期望更多有兴趣的同学能参与共建，尤其是承担子项目负责人的职责。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与普通贡献者相比，子项目负责人可以直接参与决策，在项目发展中获得上不封顶的话语权。由于尚处于起步阶段，可以单独成为子项目的模块遍地都是：一组堆管理函数、一个wat转二进制wasm的包、一种与其他语言交互的接口……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;出名要趁早，参与开源同样需要趁早，欢迎参与共建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;— 推荐阅读 —&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre data-darkmode-bgcolor-15882384789136=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882384789136=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-size: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 25.6px; widows: 1; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; data-darkmode-bgcolor-15882396318564=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15882396318564=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15882396318564=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15910964149051=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15910964149051=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-original-color-15910964149051=&quot;rgba(230, 230, 230, 0.9)&quot; data-darkmode-bgcolor-15924629205581=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15924629205581=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15924629205581=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-15924629205581=&quot;rgba(230, 230, 230, 0.9)&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;amp;mid=2650942438&amp;amp;idx=1&amp;amp;sn=00f982c706b823e1700a0a9fb943230c&amp;amp;chksm=bd5a5a358a2dd323adf3e873732b337654dba8b3ff2582be231d4daca0ee6633e2687279eaf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;☞中国联通与腾讯共同设立新公司；苹果被曝已冻结招聘，直至2023年9月；Apache Flink 1.16发布|极客头条&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;☞&lt;/span&gt;&lt;span&gt;中国联通与腾讯共同设立新公司；苹果被曝已冻结招聘，直至2023年9月；Apache Flink 1.16发布|极客头条&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;amp;mid=2650938140&amp;amp;idx=2&amp;amp;sn=f87cf46b41dd1d4e0507e3893fdcb8b9&amp;amp;chksm=bd5a6acf8a2de3d90ca0dc5fcc3a3f8b7439004c3f3226027eac0bf1846a338eb89d12c302a7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;☞&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;amp;mid=2650942404&amp;amp;idx=2&amp;amp;sn=d67f0a6842d725a999ba3383875d31cc&amp;amp;chksm=bd5a5a178a2dd301febe1cfd12858ba6db0ff4888a29cd3a23dc14f7d5eebb079e4665c81c66&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;元宇宙与AI热度不减，Gartner 2023 年十大战略技术趋势完整解析&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;元宇宙与AI热度不减，Gartner 2023 年十大战略技术趋势完整解析&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;amp;mid=2650941899&amp;amp;idx=2&amp;amp;sn=f122fd5d7ecec63186b35dfdf6ac29cf&amp;amp;chksm=bd5a58188a2dd10e0003e744641a0894e94bd8b5ad41e76c8c659e95598e748389f634dba24f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍☞&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;☞&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;amp;mid=2650942336&amp;amp;idx=1&amp;amp;sn=60f1f43302a4abb8c9038607ee7c3596&amp;amp;chksm=bd5a5a538a2dd3453f64b2c80e161e6776d10a2c85c8e1b6e353fe9cf2099498eca8db5c643d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;吴峰光杀进 Linux 内核&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;吴峰光杀进 Linux 内核&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;355&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAugusNHOBCjiajFTic9AfZAuODnFCibdjHz3eeE4cCPpFQm21GibMcLT167X3gJEuKGc2eR8KntWkr3Y7w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c05beaba53c43275371b5ab3ecb88d0b</guid>
<title>如何搭建一个极简的广告系统？</title>
<link>https://toutiao.io/k/jfesywi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;a class=&quot;weui-flex original_primary_card appmsg_card_context wx_tap_card js_wx_tap_highlight&quot; href=&quot;#&quot; id=&quot;copyright_info&quot;&gt;
                  
                  &lt;div class=&quot;weui-flex__item&quot; role=&quot;option&quot;&gt;
                    &lt;strong class=&quot;original_primary_nickname&quot;&gt;军哥解码商业化&lt;/strong&gt;
                                          &lt;span class=&quot;weui-hidden_abs&quot;&gt;.&lt;/span&gt;
                      &lt;p class=&quot;original_primary_desc&quot;&gt;军哥解码商业化，帮助每个互联网企业解决在用户新增、留存、商业化变现……全生命周期中遇到的各种问题，从互联网的前世今生演变，到商业化的未来趋势，大家关心的内容，都有可能成为谈论的话题，欢迎讨论。言论仅代表自己，不代表任何机构。&lt;/p&gt;
                                      &lt;/div&gt;
                  &lt;p class=&quot;weui-flex__ft&quot;/&gt;
                &lt;/a&gt;
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>80c0f3bd29e2b7e995c814372f5624e1</guid>
<title>Tauri：下一代桌面应用开发框架？</title>
<link>https://toutiao.io/k/8voo4kt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;0&quot; data-index=&quot;0&quot;&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;0&quot; data-index=&quot;0&quot;&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;0&quot; data-index=&quot;0&quot;&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index-1642080622978=&quot;0&quot; data-index-1642080622978=&quot;0&quot;&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index-1646223552202=&quot;0&quot; data-index-1646223552202=&quot;0&quot;&gt;大&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index=&quot;0&quot; data-index=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index=&quot;1&quot; data-index=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index=&quot;1&quot; data-index=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index-1642080622978=&quot;1&quot; data-index-1642080622978=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index-1646223552202=&quot;1&quot; data-index-1646223552202=&quot;1&quot;&gt;厂&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index=&quot;0&quot; data-index=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index=&quot;2&quot; data-index=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index=&quot;2&quot; data-index=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index-1642080622978=&quot;2&quot; data-index-1642080622978=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index-1646223552202=&quot;2&quot; data-index-1646223552202=&quot;2&quot;&gt;技&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index=&quot;0&quot; data-index=&quot;3&quot;&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index=&quot;3&quot; data-index=&quot;3&quot;&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index=&quot;3&quot; data-index=&quot;3&quot;&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index-1642080622978=&quot;3&quot; data-index-1642080622978=&quot;3&quot;&gt;&lt;span data-raw-text=&quot;术&quot; data-textnode-index-1646223552202=&quot;3&quot; data-index-1646223552202=&quot;3&quot;&gt;术&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;1&quot; data-index=&quot;4&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;4&quot; data-index=&quot;4&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;4&quot; data-index=&quot;4&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1642080622978=&quot;4&quot; data-index-1642080622978=&quot;4&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1646223552202=&quot;4&quot; data-index-1646223552202=&quot;4&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;1&quot; data-index=&quot;5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;5&quot; data-index=&quot;5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;5&quot; data-index=&quot;5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1642080622978=&quot;5&quot; data-index-1642080622978=&quot;5&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1646223552202=&quot;5&quot; data-index-1646223552202=&quot;5&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index=&quot;2&quot; data-index=&quot;6&quot;&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index=&quot;6&quot; data-index=&quot;6&quot;&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index=&quot;6&quot; data-index=&quot;6&quot;&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index-1642080622978=&quot;6&quot; data-index-1642080622978=&quot;6&quot;&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index-1646223552202=&quot;6&quot; data-index-1646223552202=&quot;6&quot;&gt;坚&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index=&quot;2&quot; data-index=&quot;7&quot;&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index=&quot;7&quot; data-index=&quot;7&quot;&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index=&quot;7&quot; data-index=&quot;7&quot;&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index-1642080622978=&quot;7&quot; data-index-1642080622978=&quot;7&quot;&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index-1646223552202=&quot;7&quot; data-index-1646223552202=&quot;7&quot;&gt;持&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;周&quot; data-textnode-index=&quot;2&quot; data-index=&quot;8&quot;&gt;&lt;span data-raw-text=&quot;周&quot; data-textnode-index=&quot;8&quot; data-index=&quot;8&quot;&gt;&lt;span data-raw-text=&quot;周&quot; data-textnode-index=&quot;8&quot; data-index=&quot;8&quot;&gt;&lt;span data-raw-text=&quot;周&quot; data-textnode-index-1642080622978=&quot;8&quot; data-index-1642080622978=&quot;8&quot;&gt;&lt;span data-raw-text=&quot;周&quot; data-textnode-index-1646223552202=&quot;8&quot; data-index-1646223552202=&quot;8&quot;&gt;周&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;2&quot; data-index=&quot;9&quot;&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;9&quot; data-index=&quot;9&quot;&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;9&quot; data-index=&quot;9&quot;&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index-1642080622978=&quot;9&quot; data-index-1642080622978=&quot;9&quot;&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index-1646223552202=&quot;9&quot; data-index-1646223552202=&quot;9&quot;&gt;更&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;3&quot; data-index=&quot;10&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;10&quot; data-index=&quot;10&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;10&quot; data-index=&quot;10&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1642080622978=&quot;10&quot; data-index-1642080622978=&quot;10&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1646223552202=&quot;10&quot; data-index-1646223552202=&quot;10&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;3&quot; data-index=&quot;11&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;11&quot; data-index=&quot;11&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;11&quot; data-index=&quot;11&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1642080622978=&quot;11&quot; data-index-1642080622978=&quot;11&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1646223552202=&quot;11&quot; data-index-1646223552202=&quot;11&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;4&quot; data-index=&quot;12&quot;&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;12&quot; data-index=&quot;12&quot;&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;12&quot; data-index=&quot;12&quot;&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index-1642080622978=&quot;12&quot; data-index-1642080622978=&quot;12&quot;&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index-1646223552202=&quot;12&quot; data-index-1646223552202=&quot;12&quot;&gt;精&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index=&quot;4&quot; data-index=&quot;13&quot;&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index=&quot;13&quot; data-index=&quot;13&quot;&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index=&quot;13&quot; data-index=&quot;13&quot;&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index-1642080622978=&quot;13&quot; data-index-1642080622978=&quot;13&quot;&gt;&lt;span data-raw-text=&quot;选&quot; data-textnode-index-1646223552202=&quot;13&quot; data-index-1646223552202=&quot;13&quot;&gt;选&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;好&quot; data-textnode-index=&quot;4&quot; data-index=&quot;14&quot;&gt;&lt;span data-raw-text=&quot;好&quot; data-textnode-index=&quot;14&quot; data-index=&quot;14&quot;&gt;&lt;span data-raw-text=&quot;好&quot; data-textnode-index=&quot;14&quot; data-index=&quot;14&quot;&gt;&lt;span data-raw-text=&quot;好&quot; data-textnode-index-1642080622978=&quot;14&quot; data-index-1642080622978=&quot;14&quot;&gt;&lt;span data-raw-text=&quot;好&quot; data-textnode-index-1646223552202=&quot;14&quot; data-index-1646223552202=&quot;14&quot;&gt;好&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;4&quot; data-index=&quot;15&quot;&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;15&quot; data-index=&quot;15&quot;&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;15&quot; data-index=&quot;15&quot;&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1642080622978=&quot;15&quot; data-index-1642080622978=&quot;15&quot;&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1646223552202=&quot;15&quot; data-index-1646223552202=&quot;15&quot;&gt;文&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文为来自 &lt;strong&gt;教育-智能学习-前端团队&lt;/strong&gt; 成员的文章，已授权 ELab 发布。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;智能学习前端团队&lt;/strong&gt; 自创立以来，团队专注于打破大众对教育的刻板印象，突破固有的教学思维，攻破各类教学屏障。旨在为每一位学生制定最合适的学习方案，予以因材施教，使优质教育随 &quot;&lt;strong&gt;触&lt;/strong&gt;&quot; 可达。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;桌面应用开发&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在处于移动互联网的当下，虽然桌面应用的重要性已经不能同往日而语，但在我们平常的日常工作和生活中，还是扮演着非常重要的角色和地位。在我们的日常工作中，离不开Lark、VSCode等桌面应用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比较于移动端而言，桌面端应用的生态多种多样，因此也诞生了各种各样的桌面应用开发技术栈。本次分享将会对相关常用的一些桌面应用开发框架进行介绍和分析，同时对当下比较流行（GitHub 50k star）的跨平台桌面应用开发框架Tauri进行介绍。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;原生技术栈&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原生技术栈是指通过操作系统相关API或者操作系统厂家（如Apple/Microsoft）提供的SDK/工具来开发桌面应用的方式。使用原生技术开发的应用，通常能够在性能、体积以及系统的交互等方面做到非常不错的效果。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;构建产物体积小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;性能好&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统API调用方便&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;兼容性好&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;和系统应用的交互融合度高，如要实现如下的一些系统原生UI组件非常方便&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6107921928817451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9Pzyrj1bEQGBL5LUFhMvRX4kpQ7lB7sKo1iamR4OjO7yJPghibHckBYibBImtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;871&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8114035087719298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrHiaRdAKHYAicicesuG2epskqtsa2R8jkq54p1goZmGX2I8kWmpbpbYFtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1824&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;无法做到跨平台，所开发的应用只能在对应的平台上运行，如果需要跨平台运行，则需要在不同的操作系统上分别开发，开发成本高&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于使用的技术栈有限制（Windows使用C#，macOS使用ObjC/Swift）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Windows平台&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为目前使用率最高的操作系统，Windows平台的GUI程序开发经历了漫长的迭代和演化的过程：Win32 API作为Windows GUI开发的鼻祖，通过C语言调用Windows底层的绘图函数来进行开发；在Win32 API之后出现了MFC（Microsoft Fundation Class），MFC通过C++语法将原有的Win32 API封装成了控件类（对话框控件、按钮控件等）；在MFC之后，微软推出了Windows Form（2002年），Windows Form依赖于.NET的运行时，提供了组件化的开发能力；在此之后，微软推出了WPF（Windows Presentation Fundation，2006年），WPF提供了基于XML的语言XAML来描述UI；在Windows8的时代，微软又推出了UWP（Universal Windows Platform，2015年），UWP支持在各种平台上运行（PC/Windows Phone/Xbox），API也支持多种语言（C++/VB/C#/JS）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从Windows平台应用的开发技术迭代来看，也可以大致看出GUI程序的技术发展史：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Win32API时代：函数调用，指令式，Windows系统处理&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;MFC时代：面向对象，把一些指令式调用封装成类，由来自UI的消息驱动程序处理数据&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Windows Form时代：组件化，在类的基础上封装成组件，消息被封装成事件，事件驱动&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;WPF时代：使用类XML语言来描述UI，引入数据驱动UI的理念&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;5&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;UWP时代：跨平台、多语言&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;macOS平台&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现有的macOS原生应用主要基于Cocoa框架开发，Cocoa是从1980年代由NeXT（macOS的前身）开发的编程环境NeXTSTEP和OPENSTEP演变而来，是面向对象的API。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在2020年的WWDC上，苹果推出了新一代的UI框架SwiftUI，和Flutter/React等现代GUI框架类似，支持声明式的方式使用Swift语言作为DSL来编写UI，同时也支持跨平台的特性，可以在macOS/iOS/tvOS等多平台运行。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36581632653061225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrIzFr7lUiaeAREd5wjLhoWRWjcBica1IQyLG7yUvQygP8XoRJ7KLnxQyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1960&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Linux平台&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux其源码只包含了操作系统内核的部分，桌面并不属于Linux源码的一部分，因此严格意义上来说，从「使用系统API和操作系统厂商提供的SDK开发的应用为原生应用」的定义上来说，并无所谓「原生技术栈」的概念。我们日常使用的发行版提供了桌面环境如KDE、Gnome等，Linux发行版的这些桌面环境也提供了相关的一些库或者API来帮助绘制GUI程序，如gtk+等，可以认为是「原生技术栈」。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;跨平台技术栈&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Web技术栈&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Atwood&#x27;s Law: Any application that can be written in JavaScript, will eventually be written in JavaScript.&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;一个你或许不知道的冷知识，macOS的系统设置页面是Webview+React写的[1]&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0341726618705036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9Pzyr325Ag7ze58eu0FzVcxCB4iboiavwISnbVMJyqDkm7WJWjVlhUmjooFcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2224&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提到跨平台，就不得不提Web生态了，Web相关的技术在跨平台中永远是最受青睐的选择，无论是开发的便捷程度，还是庞大的JS开发者生态等等因素，都使得Web技术无论是在移动端还是桌面端的跨平台应用开发上都稳坐使用率最高的技术栈。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;开发成本比原生低，可以方便做到一套代码在不同操作系统上运行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现复杂的UI和动效方便，可以更快地实现一些比较炫酷的UI界面&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;调用系统原生API不方便通常需要使用打包其他的运行时环境或JSBridge的方式来进行调用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Electron&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Electron（原名为Atom Shell）是GitHub开发的一个开源框架，最初用来开发Atom编辑器。它通过使用Node.js（作为后端）和Chromium的渲染引擎（作为前端）完成跨平台的桌面GUI应用程序的开发。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;代表应用：VSCode（303M）、Figma（213M）、Bilibili（397M）、Discord（367M）、QQ Beta（747M）、1Password8（343M）、MS Teams（264M，根据参考文献[2]，微软正在替换Electron的实现，但目前看我电脑中下载的版本解包中，依然还有Electron.framework的文件）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;开发方便，技术栈适合前端同学（UI使用Web技术，系统API交互部分使用NodeJS）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;打包体积大，需要打包Chromium和NodeJS的运行时环境&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内存消耗大：Chromium本身比较吃内存，同时NodeJS是JIT运行的，相比较C++等AOT的语言来说内存消耗也更大。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.375968992248062&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrgJOia5aPpAjiaoVhyd6BHIZk3cnKcn5w4IyGw3LL8DaQ5PKCWZoWa4EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1032&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.71875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrL90HYffe1f8bQEPmzbbZJNgpqkTsXEW0fCqGLzR7etdG9AKOtJ963g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，并不代表Electron技术开发的应用性能就一定不如其他技术栈，总的来说，具体的性能表现还是取决于开发者的投入，例如微软在VSCode的博客中给到了一个例子，能够将VSCode在渲染括号颜色匹配的速度提高10000倍[3]。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;CEF（Chromium Embedded Framework）&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于需要将Chromium和NodeJS的运行时打包进去，所以Electron构建应用的体积都会非常大，但是CEF的存在解决了Electron的这个问题（实际上，CEF出现的时间比Electron早多了）。由于Chromium里面有许多第三方组件（如ffmpeg等），在开发应用的过程中，我们通常不会使用到Chromium的全部能力，因此CEF提供了一个轻量级的嵌入式Chromium，同时还可以根据自己的需求进行裁剪。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CEF提供了将Chromium嵌入到应用中，展示Webview的能力，同时也提供了C++的一些API，在需要做一些浏览器无法实现的原生API依赖的功能时（如系统文件读写等），则需要使用C++（或其他语言，但是CEF的原生接口是C++的）来编写相关的能力，并提供JSBridge给前端代码进行调用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;自渲染技术栈&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要实现跨平台的GUI应用，比较流行的的方式是实现自渲染的管线。上层通过提供类Canvas的绘制、渲染和排版能力，下层使用OpenGL/Vulkan/Metal等图形API进行绘制。在Web的跨平台桌面应用开发技术栈发展之前，许多应用开发框架都采用了类似的思路去实现跨平台的应用开发，如QT（C++语言）、Flutter（Dart语言，基于Skia渲染）和Swing（Java语言）等。相比于Electron和CEF的方案，由于不需要打包运行时环境（Swing除外，需要打包JRE）和减少了Bridge转换，所以体积和运行效率通常会优于Web技术栈。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;自绘性能通常会优于Web跨平台技术（具体还是取决于框架实现）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;开发成本略高于Web技术栈&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现复杂效果的能力不如原生和Web技术栈，通常情况下需要写更多复杂的代码（取决于具体框架的设计，这一点Flutter做得比较好）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Qt（C++）&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Qt（/ˈkjuːt/）是一个跨平台的C++应用程序开发框架，广泛用于开发GUI程序，在工业、嵌入式等领域的桌面程序中有着非常深入的使用。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;代表应用：WPS Office、剪映桌面版、AutoDesk&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;性能好，与Native开发的应用性能相差无几&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持的操作系统丰富，跨平台性能好&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;C++开发成本高&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GPL协议，商业版本需要给钱，不符合咱们去肥增瘦的理念&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Flutter（Dart）&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Flutter是一个由Google开发的跨平台应用开发框架，最初只用于移动端为Android、iOS开发应用。2015年4月，Flutter正式发布，其目标是希望可以在跨平台的特性上，实现120FPS的渲染性能。2018年，Flutter 1.0发布，是该框架的第一个稳定版本。2022年5月，Google 在 Google I/O 2022 发布了 Flutter 3.0版本，宣布对 Windows、macOS、Linux 桌面操作系统提供支持。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8202614379084967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrkyZs9erUkFMYE7CXNlwtDrfV9Hqxt1sxQ6iaMwDsTLAmZFXpmg57JjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1836&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;代表应用：？（Flutter在2022年5月份发布3.0版本，此时桌面应用才进入正式版支持，目前还并不成熟，所以在线上使用的较少，暂时没听过有啥桌面应用是用Flutter写的）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;性能好（相比较Web技术栈）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Dart语言容易学习和上手、开发成本低&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;桌面端才刚刚发布稳定版支持，生态和稳定性都有待考量&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Swing（Java）&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Swing是一个用于开发Java GUI应用的框架。它采用纯 Java 实现，不再依赖于本地平台的图形界面，所以可以在所有平台上保持相同的运行效果，对跨平台支持比较出色。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;代表应用：Jetbrains IDE&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;优点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;跨平台性能好：write once run anywhere &lt;span&gt;（write once debug everywhere)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的来说，虽然不同大类技术栈的应用具体实现原理有所不同，但是相关开发的技术栈的大致特点可以归纳如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;系统API调用和交互：原生应用 &amp;gt; 自渲染应用 &amp;gt; Web应用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开发便捷程度：Web应用 &amp;gt;&amp;gt; 自渲染应用 &amp;gt; 原生应用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;打包体积：Web应用 &amp;gt; 自渲染应用 &amp;gt; 原生应用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;性能：原生应用 &amp;gt; 自渲染应用 &amp;gt; Web应用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Tauri介绍&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的介绍可以看出，不同的技术栈的实现原理和特点各有区别，但是很难做到开发便捷程度、UI复杂效果、打包体积和性能等多个方面的兼顾，只能是根据应用的类型和具体的业务场景去决定到底使用哪种框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以有没有一种开发方式，可以在性能、体积、开发等多个角度上，取得一个比较好的平衡呢？这就来到了我们今天需要介绍的桌面应用开发框架Tauri。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;Build an optimized, secure, and frontend-independent application for multi-platform deployment.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面Tauri官网的宣传语可以看出Tauri主打的几个卖点[4]：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;optimized：性能高、体积小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;secure：安全性强&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;frontend-independent：前端独立&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;multiplatform：跨平台&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么Tauri是如何通过在框架层面的设计来保证这样的一些特性的呢？我们一起接着往下看⬇️&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;Rust&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Tauri框架是由Rust语言实现的，同时Tauri应用的后端也是由Rust来编写的。Rust是由Mozilla主导开发的通用、编译型的系统编程语言。设计准则为“安全、并发、实用”，支持函数式、并发式、过程式以及面向对象的编程风格。[5]相比较其他语言，Rust有如下的一些特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;性能高（optimized）：Rust的性能和C/C++的性能不相上下，由于Rust的「所有权」机制，Rust不需要GC，同时也能避免如C/C++之类需要手动管理内存的语言忘记释放内存导致的内存泄露的问题；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安全性强（secure）：Rust设计了一个所有权系统，其中所有值都有一个唯一的所有者，并且值的作用域与所有者的作用域相同。值可以通过不可变引用（&amp;amp;T）、可变引用（&amp;amp;mut T）或者通过值本身（T）传递。任何时候，一个变量都可以有多个不可变引用或一个可变引用，这实际上是一个显式的读写锁。Rust编译器在编译时强制执行这些规则，并检查所有引用是否有效。能够有效避免C/C++等语言中的悬垂指针等问题；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;FFI编译友好（multiplatform）：FFI是可以用一种编程语言写的程序能调用另一种编程语言写的代码的机制，使用Rust可以方便地提供接口给其他语言调用；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;&lt;span&gt;WRY&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;：Webview Render Library&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于Web技术的表现力强、开发成本低的特点，与Electron、CEF等框架类似，Tauri应用的前端实现也是使用Web技术栈编写的。那么Tauri是如何解决Electron/CEF等框架遇到的Chromium内核体积过大的问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家可能会想，如果每一个应用都需要把浏览器内核打包进去才能实现Web页面的渲染，要是所有的应用都共享同一个内核就好了，这样我们在分发应用的时候，不需要打包浏览器内核，只需要打包Web页面的资源不就好了吗？所以Tauri就采用了这样的一个方案，WRY是Tauri封装的Webview框架，它在不同操作系统的平台上，封装了系统Webview的实现：在macOS上使用&lt;span&gt;WebKit.WKWebview&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，在Windows上使用&lt;span&gt;Webview2&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;，在Linux上使用&lt;span&gt;WebKitGTK&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;。这样在运行Tauri应用时，会直接使用系统Webview来渲染应用前端的展示。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;API接口&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于不会使用Rust的同学来说，学习Rust还是存在着不少的学习成本，但是别担心，在需求简单的情况下，你完全可以不写Rust代码。Tauri框架提供了如下的一些API，可以方便地在JS中对原生能力进行调用：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;cli：解析应用启动时的命令行参数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;clipboard：对系统剪贴板的读写&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;dialog：展示系统文件选择、文件保存弹窗&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;event：给后端发出一些事件，后端监听并处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;fs：文件系统的操作，提供文件读写等能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;globalShortcut：注册全局快捷键&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;http：使用Rust的Http客户端进行网络请求&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;notification：系统通知&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;os：获取操作系统的一些信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;path：文件和文件夹路径处理的一些工具&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;process：对当前的进程进行一些操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;shell：对系统shell的一些操作&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;需要注意的是，上述的一些API，为了保证安全性，对于权限都有着严格的限制，都是默认关闭的状态，需要修改配置以手动启用相关的功能。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;进程模型&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和Electron类似，Tauri也采用的是多进程的架构（Electron中有主进程和渲染进程），多进程的好处是能够更好更有效地利用现代多核CPU的能力，同时一个组件的崩溃也不会影响到其他组件的运行，因为组件被隔离在了不同的进程中。如果应用中的某个进程崩溃了，我们只要重启该进程即可。还可以通过只给每个进程分配足够完成工作的最低限度的权限，来限制潜在漏洞的破坏范围。这种模式被称为最小权限原则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Tauri中，进程分为两类：主进程和Webview进程。每个 Tauri 应用程序都有一个主进程，它作为应用程序的入口点，是唯一可以完整访问操作系统的组件。主进程的主要职责是使用访问权限来创建和管理应用程序窗口、系统托盘菜单或通知。Tauri 实现了必要的跨平台抽象来简化该操作。它还通过核心进程路由所有的IPC，通过类似于事件总线的机制，可以方便地拦截、过滤和操作 IPC 消息。主进程还应该负责管理全局状态，例如数据库连接。这使你能够轻松地在窗口间同步状态，并保护你的业务敏感数据。主进程自身并不渲染实际的用户界面，它会直接利用操作系统提供的 WebView 库来实现页面渲染，不同的窗口之间会拥有不同的WebView进程，WebView进程用来负责渲染对应的UI。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9Pzyr60dgcReJBQnxTto6De4t6VRrPibo5sRX6Ze5kmoN4JD0wBrmqgCZPPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;IPC模式&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Brownfield 模式（默认）&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Brownfield 软件开发是指在现有或遗留软件系统存在的情况下开发和部署新的软件系统。[6]&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Tauri 的最简单和直接的模式，因为 Brownfield 模式会尽最大可能尝试与现有的前端项目兼容。在这种模式下，无需现有的浏览器前端项目进行任何操作即可迁移。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;隔离模式&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;隔离模式是一种在到达 Tauri 主进程前，拦截并修改由Webview进程发送的 Tauri API 信息的IPC模式，其完全使用 JS 编写。由隔离模式保障的JS代码即称为隔离应用。隔离模式的目的是为开发者提供一种保护机制，防止其应用程序被预料之外或恶意的Webview进程调用 Tauri 主进程。隔离模式的需求来自于前端中不可信任的内容所带来的威胁，常见于需要许多依赖的应用。隔离模式在设计之初时设想的最大威胁为开发威胁，因为前端构建工具不仅仅由许许多多嵌套很深的依赖组成，而且还有很多嵌套很深的依赖被打包到最终的网页构建产物中。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;原理：隔离模式就是在Webview进程和 Tauri 主进程之间注入一个安全的应用程序，用以拦截和修改传入的 IPC 信息。它使用 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 的沙盒特性，与Webview进程一起安全地执行 JS 代码。Tauri 在加载页面时会强制执行隔离模式，使所有对 Tauri 主进程的 IPC 调用必须先通过沙盒隔离应用程序。当消息准备被传递给 Tauri 主进程时，其就会被使用浏览器的 &lt;span&gt;SubtleCrypto API&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 实现加密，并传递回主前端程序，之后，它将会被直接传递给 Tauri 主进程来解密和读取数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;步骤：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33695652173913043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrVyb4jQps0q66nRKicSkWdIRG2sXGOOZiapuAl2BHiaRibrqe2LcBkKh95g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1472&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;由于信息经过加密，所以隔离模式相比 Brownfield 模式而言存在额外开销。除去性能敏感的应用 (使用很少依赖来提升性能的应用) 之外，使用 AES-GCM 算法来加解密 IPC 信息会对大部分应用造成相对较小的性能影响。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Windows平台上，Webview限制了因为沙盒环境下加载 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 标签内的外部文件，Tauri在构建时实现一些步骤将脚本注入，但是ES Modules可能无法正常加载。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;安全性&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;动态AOT：Tauri 应用启动时将多次进行编译。通过使用Tauri提供的动态预编译器，可以生成每个会话都不同的代码引用，但技术上一致的代码单元；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;函数 ASLR：函数地址空间布局随机化 (Address Space Layout Randomization) 将在运行时随机调整函数名称，且可以实现 OTP 哈希功能，这样将永远不会出现相同的会话。在Tauri应用启动时，或可选在每次执行后，随机生成函数名称。每个函数指针均使用 UID 以防止静态攻击；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自杀式函数注入：一种高级的ASLR技术，Rust在运行时载入进入Webview的闭包Promise和随机的句柄，API接口在Promise处理中就被锁定，在执行完毕后被立即设置成null；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;可以有效防止恶意页面被加载&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;使用Event Bridge：Tauri内部的信息通信使用Event Bridge，Event Bridge用来保证只能传递信息和指令给一个指定的中间代理，而不是直接传递不安全的函数调用；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;API Allow List：Tuari提供的API都是关闭状态，若没有启用相关API，应用构建时不会包括相关功能函数的代码。这可以减少二进制文件大小及攻击面。同时API还有严格的权限选项，如文件读写相关API可以设置只读/只写/指定目录或文件等功能；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CSP：Tauri会对本地的HTML页面强制使用内容安全策略，本地脚本经过哈希处理，同时样式、外部脚本经由加密随机字符串引用，防止禁止内容被加载；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;反编译难：Tauri在构建时，会将相关前端代码直接构建在二进制可执行文件中，这意味着和Electron的ASAR文件不同，具体的代码无法被轻松地反编译；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一次性Token和哈希：使用OTP加盐哈希处理重要的信息，可以在前端和Rust后端之间加密信息；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;&lt;span&gt;Tauri-egui&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为Tauri应用的前端是用了Web相关的技术栈，因此在运行时总有办法来使用开发者模式/调试工具等来进行检查元素等。在某些情况下，如密码输入等场景，我们希望能够保证前端的UI展示是无法被修改的，这时可以使用Tauri-egui这个库，这个库对egui进行了封装，可以使用Rust来编写前端的UI。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8796296296296297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrnV6DlVC5JW4kU44jt8IiclP60Eyg05bZfibTgoFTRIicdricnYS9s23l9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;优点&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6487202118270079&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrPe3YlZ4BQrxWkWJNicaVC2t0pibNxLedia6SIe4l69KGicjmMQq7jou8Sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2266&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;Benchmark&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3445878848063555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrGtRztLvcPibEhIgAYPicKOoBssIQtS4GQVsumQv2SVDo8bpyy5D5KicdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2014&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3685800604229607&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIp4w8TSMEyK6J2UFXF9PzyrJfpkz0TBcU6iaAAFuibos3fJe6e3b2IzOwl9uFEAqOT5zs5VQqUV1ANg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1986&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;兼容性：由于Tauri使用的是系统Webview，因此在构建时前端的代码需要做polyfill；且Windows平台上，由于Webview2只在Windows10/11上有默认推送安装，要想在Windows7/8等较低版本的平台上运行的话，还需要另外安装Webview2的运行时。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参考资料&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[1] 在macOS中打开系统Webview的检查元素开关, https://blog.jim-nielsen.com/2022/inspecting-web-views-in-macos/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[2] 微软开始在Teams应用中放弃Electron, https://blog.devgenius.io/microsoft-is-finally-ditching-electron-9e081757f9db&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[3] VSCode优化括号颜色匹配, https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[4] Tauri官网, https://tauri.app&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[5] Rust Wikipedia, https://zh.wikipedia.org/zh-cn/Rust&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[6] Brownfield, https://en.wikipedia.org/wiki/Brownfield_(software_development)&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;❤️ 谢谢支持&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上便是本次分享的全部内容，希望对你有所帮助^_^&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;喜欢的话别忘了 分享、点赞、收藏 三连哦~。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎关注公众号 &lt;strong&gt;ELab团队&lt;/strong&gt; 收货大厂一手好文章~&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;智能学习前端团队&lt;/strong&gt; 自创立以来，团队专注于打破大众对教育的刻板印象，突破固有的教学思维，攻破各类教学屏障。旨在为每一位学生制定最合适的学习方案，予以因材施教，使优质教育随 &quot;&lt;strong&gt;触&lt;/strong&gt;&quot; 可达。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;字节跳动校/社招内推码: DYJ95U9&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;投递链接: https://job.toutiao.com/s/YK7wdrk&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可凭内推码投递 &lt;strong&gt;智能学习前端团队&lt;/strong&gt; 相关岗位哦~&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;WRY: &lt;em&gt;https://github.com/tauri-apps/wry&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;WebKit.WKWebview: &lt;em&gt;https://developer.apple.com/documentation/webkit&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Webview2: &lt;em&gt;https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;WebKitGTK: &lt;em&gt;https://webkitgtk.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;SubtleCrypto API: &lt;em&gt;https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;Tauri-egui: &lt;em&gt;https://github.com/tauri-apps/tauri-egui&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>adbf6df42b0855f683497d1852ddf7de</guid>
<title>我好不容易混进了 BAT，发现大公司居然是这样设计他们的缓存架构的</title>
<link>https://toutiao.io/k/d1rw03b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section class=&quot;channels_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAvXYje1cboAAAAAstQy6ubaLX4KHWvLEZgBPE3KJQWgAKefWDzNPgMIsJOoRAG9kfq1Uqq2ivwlyq&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqzZft8ttZTY9ibOqwJxYFnVUarS4ZO7pz9Ct1VqKOaVsT9chPXodhAbU5g0ZibH6RQafkt7I7w9wdZicKXUhfoDlNNQ&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdWBd1dfzAEMpQOwuqibdXe2Zh8iaCjJLLicSdoMQhvuBDuiaKibCRa6NoGPzaROxO223Agk&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM5nv7YHhmhvPsGGX04JCIgibK2x2Ru0TOY9HeZTGSIL1KQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08a1fc3d5c807ec30b07756771265bc6b6234fb9e05062ae69ab4@finder&quot; data-nickname=&quot;儒猿IT&quot; data-desc=&quot;假设你的公司要搞大促，你怎么通过全链路压测去评估核心系统链路能抗多大流量？#全链路压测 #QPS #TPS #高并发 @微信时刻 &quot; data-nonceid=&quot;11084049817690915669&quot; data-type=&quot;video&quot; data-authiconurl=&quot;&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;文章来源：【公众号：架构悟道】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/3GHDOauYyUGbiaHXGx1ib5UxkKzSNtpMzY5tbbGdibG7icBSxlH783x1YTF0icAv8MWrmanB4u5qjyKfmYo1dDf7YbA/640?wx_fmt=gif&quot; data-w=&quot;100&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;前言&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在分布式系统盛行的今天，尤其是在一些用户体量比较大的互联网业务系统里面，&lt;strong&gt;缓存充当着扛压屏障的作用&lt;/strong&gt;。当前各互联网系统可以&lt;/span&gt;扛&lt;span&gt;住动辄数万甚至数十万的并发请求量，缓存机制功不可没。而一旦缓存出现问题，对系统的影响往往也是致命的。所以在缓存的使用时必须要考虑完备的&lt;/span&gt;&lt;strong&gt;兜底与灾难应对&lt;/strong&gt;&lt;span&gt;策略。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;热点数据与淘汰策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;大部分服务端使用的抗压型缓存，为了保证缓存执行速度，普遍都是将数据存储在&lt;strong&gt;内存&lt;/strong&gt;中。而受限于硬件与成本约束，内存的容量不太可能像磁盘一样近乎无限的去随意扩容使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于实际数据量&lt;/span&gt;&lt;span&gt;极其&lt;/span&gt;&lt;span&gt;庞大且无法将其全部存储于缓存中的时候，我们需要保证存储在缓存中的有限部分数据要尽可能的命中更多的请求，即要求缓存中存&lt;/span&gt;&lt;span&gt;&lt;span&gt;储的都是&lt;/span&gt;&lt;strong&gt;热点数据&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;说到这里，就会存在一个不得不面对的问题：当数据量超级大而缓存的内存容量有限的情况下，&lt;strong&gt;如果容量满了该怎么办&lt;/strong&gt;？&lt;/p&gt;&lt;p&gt;断舍离！&lt;/p&gt;&lt;p&gt;缓存实现的时候，必须要有一种机制，能够保证内存中的数据不会无限制增加 —— 也即&lt;code&gt;数据淘汰机制&lt;/code&gt;。&lt;strong&gt;数据淘汰机制，是一个成熟的缓存体系所必备的基础能力&lt;/strong&gt;。这里有个概念需要厘清，即&lt;code&gt;数据淘汰&lt;/code&gt;策略与&lt;code&gt;数据过期&lt;/code&gt;是两个不同的概念。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们把缓存当做一个容器，试想一下，一个容器已满的情况下，继续往里面放东西，可以有什么应对之法？无外乎两种：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24341279799247176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5amC6gTibbeM6ZhTtj1ib4sOqYj6wYoxfWnd9ViamzpRI3RRFu6qhJEz9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;进一步地，当决定采用先从容器中扔掉一些已有内容的时候，又会面临一个新的抉择，应该扔掉哪些内容？实践中常用的也有几种方案：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;一切随缘，随机决定&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;从容器中现有的内容中随机扔掉剔除一些。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;按需排序，保留常用。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;即基于&lt;/span&gt;LRU&lt;span&gt;策略，将最久没有被使用过的数据给剔除掉。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;提前过期，淘汰出局。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;对于一些设置了过期时间的记录，将其按照过期时间点进行排序，将最近即将过期的数据剔除（类似让其提前过期）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;其它策略。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;自行实现缓存时，除了上述集中常见策略，也可以根据业务的场景构建业务自定义的淘汰策略。比如根据创建日期、根据最后修改日期、根据优先级、根据访问次数等等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;一些主流的缓存中间件的淘汰机制大都也是遵循上述的方案来实现的。比如&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;提供了高达&lt;/span&gt;&lt;code&gt;&lt;span&gt;6种&lt;/span&gt;&lt;/code&gt;&lt;span&gt;不同的数据淘汰机制，供使用方按需选择，将有限的空间仅用来存储热点数据，实现缓存的价值最大化。如下：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5327754532775453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5M5pZYbGIe0sVuwjZYPvNCaYqgmhVDquR8Dr6lS1iagqomWHhCtXlWoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1434&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从上图可以看出，&lt;code&gt;Redis&lt;/code&gt;对随机淘汰和LRU策略进行的更精细化的实现，支持将淘汰目标范围细分为全部数据和设有过期时间的数据，这种策略相对更为合理一些。&lt;/p&gt;&lt;p&gt;因为一般设置了过期时间的数据，本身就具备可删除性，将其直接淘汰对业务不会有逻辑上的影响；而没有设置过期时间的数据，通常是要求常驻内存的，往往是一些配置数据或者是一些需要当做白名单含义使用的数据（比如用户信息，如果用户信息不在缓存里，则说明用户不存在），这种如果强行将其删除，可能会造成业务层面的一些逻辑异常。&lt;/p&gt;&lt;h2&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;缓存雪崩：避免缓存的集中失效&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;为了限制缓存的数量，很多的缓存记录都会设置一定的有效期，到期后自动失效。这种在一些批量缓存构建或者全量缓存重建时，因为设置了相同的失效时间，会导致大量甚至全部的缓存数据在短时间内&lt;/span&gt;&lt;strong&gt;集体失效&lt;/strong&gt;&lt;span&gt;，这样会导致大量的请求无法命中缓存而直接流转到了下游模块，导致系统瘫痪，也即&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;缓存雪崩&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4010928961748634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5iaLgXIzFe11IaibHDWJYgVG17KTSoYdo2GgHnr5FjYskM2pubJhpPu2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;915&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;其实解决的思路也很简单，&lt;strong&gt;避免出现集中失效&lt;/strong&gt;就好咯。如何避免呢？&lt;/p&gt;&lt;p&gt;一种简单的策略，就是批量加载的场景，将过期时间在一个固定时间段内以毫秒级别进行&lt;strong&gt;随机打散&lt;/strong&gt;，比如本来要设置每条记录过期时间为5分钟，则批量加载的时候可以设置过期时间为5~10分钟之间的任意一个毫秒数。这样就可以有效的避免数据集中失效，避免出现缓存雪崩而影响业务稳定。&lt;/p&gt;&lt;p&gt;此外，在一些大型系统里面，尤其是一些分布式微服务化的系统中，很多情况下都会有多个独立的缓存服务，而最终持久化数据则集中存储。&lt;/p&gt;&lt;p&gt;如果某个独立缓存真的出现了缓存雪崩，业务层面应该如何将受损范围控制在仅自身模块、避免殃及数据库以及下游公共服务模块，进而避免业务出现系统性瘫痪呢？这个就需要结合服务治理中的一些手段来综合防范了，比如&lt;code&gt;服务降级&lt;/code&gt;、&lt;code&gt;服务熔断&lt;/code&gt;、以及&lt;code&gt;接口限流&lt;/code&gt;等策略。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5174632352941176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD59YobR8fZ5GnxopTGbNtKibYDSuqFNC8SDwiaMfNmVHyx8iam3mIgibXIew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1088&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;缓存击穿：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;有效的冷数据预热加载机制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;正如前面所提到的，基于内存的缓存，受内存容量限制，往往都会加载一些&lt;/span&gt;&lt;strong&gt;热点数据&lt;/strong&gt;&lt;span&gt;。而这些热点缓存数据，可以命中大部分的业务请求。少部分没有命中缓存的数据，则直接转由业务模块进行处理（比如从&lt;/span&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;MySQL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;里面进行查询）。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来看一个例子：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;互动论坛系统，使用Redis作为缓存，缓存最近1年的帖子信息。如果用户查看的帖子是最近1年的，则直接从Redis中查询并返回，如果用户查看的帖子是1年前的，则从MySQL中进行捞取并返回。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;因为论坛系统中，大部分人会阅读或者查看的都是最近新发的帖子，只有极少数的人可能会偶尔“挖坟”查看一年前的历史帖子。&lt;/p&gt;&lt;p&gt;系统上线前会根据冷热请求的比例与总量情况，评估需要部署的硬件规模，以确保可以支撑住线上正常的访问请求。但为了避免缓存数据被无限撑满，一般业务缓存数据都会设置一个过期时间，来保证缓存数据的定期清理与更新。&lt;/p&gt;&lt;p&gt;近段时间，娱乐圈的雷声不断，各种新鲜的大瓜也让吃瓜群众撑到打嗝。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;有一天，娱乐圈当红流量明星李某某突然被爆料与某网红存在某些不正当的关系，甚至被爆有多次PC被捕的惊天大瓜，引起粉丝和路人的强烈关注。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;吃瓜群众们群情高涨、热搜一波盖过一波、帖子的浏览量光速攀升，论坛系统在缓存模块的加持下，虽然整体CPU和内存占用都飙升上去了，倒也相安无事。&lt;/p&gt;&lt;p&gt;但天有不测风云，恰好这个时候，&lt;strong&gt;这条帖子的记录在缓存中过期被删除了&lt;/strong&gt;。然后狂涛巨浪般的请求涌向了后端的数据库，让数据库原地瘫痪，进而陆陆续续殃及了整个论坛系统。这就是典型的一个&lt;code&gt;缓存击穿&lt;/code&gt;的问题。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4010928961748634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5ia3qUyU31OxRPQMEiaiayiceFmu6PqfpA1gduFSBqMo8wwjgmdmHGM5Sqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;915&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;缓存击穿&lt;/code&gt;和前面提到的&lt;code&gt;缓存雪崩&lt;/code&gt;产生的原因其实很相似。&lt;strong&gt;区别点&lt;/strong&gt;在于：&lt;/p&gt;&lt;p&gt;针对这种情况，我们可以为热点数据设置一个过期时间&lt;strong&gt;续期&lt;/strong&gt;的操作，比如每次请求的时候自动将过期时间续期一下。&lt;/p&gt;&lt;p&gt;此外，也可以在数据库记录访问的时候借助&lt;strong&gt;分布式锁&lt;/strong&gt;来防止缓存击穿问题的出现。当缓存不可用时，仅&lt;code&gt;持锁的线程&lt;/code&gt;负责从数据库中查询数据并写入缓存中，其余请求重试时先尝试从缓存中获取数据，避免所有的并发请求全部同时打到数据库上。如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5886402753872634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5bv6j6wmbqNw58YzDJ1Gt50ZWTGw12QHF2yolJrewICqmjAnYN6Yvwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;581&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;对上面的处理过程描述说明如下：&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;没有命中缓存的时候，先请求获取分布式锁，获取到分布式锁的线程，执行&lt;/span&gt;&lt;code&gt;&lt;span&gt;DB查询&lt;/span&gt;&lt;/code&gt;&lt;span&gt;操作，然后将查询结果写入到缓存中；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;没有抢到分布式锁的请求，原地&lt;/span&gt;&lt;code&gt;&lt;span&gt;自旋等待&lt;/span&gt;&lt;/code&gt;&lt;span&gt;一定时间后进行再次重试；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;未抢到锁的线程，再次重试的时候，先尝试去缓存中获取下是否能获取到数据，如果可以获取到数据，则&lt;/span&gt;&lt;code&gt;&lt;span&gt;直接取缓存&lt;/span&gt;&lt;/code&gt;&lt;span&gt;已有的数据并返回；否则重复上述&lt;/span&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;2&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;3&lt;/span&gt;&lt;/code&gt;&lt;span&gt;步骤。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;按照上面的策略，经过一番通宵紧急上线操作后，系统终于恢复了正常。正当开发人员长舒了口气准备下班回家睡觉的时候，系统警报再次&lt;/span&gt;响&lt;span&gt;起，系统再次宕机了。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;有人扒出了一个2年前的帖子，这个帖子在2年前就已经爆料李某某由于PC被警方拘捕，当时大家都不信。于是这个2年前的帖子得到了众人狂热的转发与阅读查看。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;其实宕机的原因很明显，因为系统只规划缓存了最近1年的所有帖子信息，而对超过1年的帖子的操作，都会直接请求到数据库上。这个2年前的帖子突然爆火导致大量的用户来请求直接打到了下游，再次将数据库压垮 —— 也就是说又一次出现了&lt;code&gt;缓存击穿&lt;/code&gt;，在同一块石头上摔倒了两次！&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4010928961748634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5VWgwU4e5XPo7ZtttYABfaw6ica9UYqdmDDaQRRbNT7I9KZWjnsu6Nyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;915&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对于业务中最常使用的&lt;code&gt;旁路型缓存&lt;/code&gt;而言，通常会先读取缓存，如果不存在则去数据库查询，并将查询到的数据添加到缓存中，这样就可以使得后面的请求继续命中缓存。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.624813153961136&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5ibDicTiaa0ngBZzCfJiaeuT0zGibkI7qE0e4LXlSQqwoVzfiaDfaEbPjJgBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;669&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;但是这种常规操作存在个“漏洞”，因为大部分缓存容量有限制，且很多场景会基于&lt;code&gt;LRU策略&lt;/code&gt;进行内存中热点数据的淘汰，假如有个恶意程序(比如爬虫)一直在刷历史数据，容易将内存中的热点数据变为历史数据，导致真正的用户请求被打到数据库层。&lt;/p&gt;&lt;p&gt;因而又出现了一些业务场景，会使用类似上面所举的例子的策略，缓存指定时间段内的数据（比如最近1年），且&lt;strong&gt;数据不存在时从DB获取内容之后也不会回写到缓存&lt;/strong&gt;中。&lt;/p&gt;&lt;p&gt;针对这种场景，在缓存的设计时，需要考虑到对这种&lt;strong&gt;冷数据的加热机制&lt;/strong&gt;进行一些额外处理，如设定一个门槛，如果指定时间段内对一个冷数据的访问次数达到阈值，则将冷数据加热，添加到热点数据缓存中，并设定一个独立的过期时间，来解决此类问题。&lt;/p&gt;&lt;p&gt;比如上面的例子中，我们可以约定同一秒内对某条冷数据的请求超过&lt;code&gt;10次&lt;/code&gt;，则将此条冷数据加热作为&lt;strong&gt;临时热点&lt;/strong&gt;数据存入缓存，设定缓存过期时间为30天（一般一个陈年八卦一个月足够消停下去了）。&lt;/p&gt;&lt;p&gt;通过这样的机制，来解决冷数据的突然窜热对系统带来的不稳定影响。如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6502242152466368&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD51EtGqXTRs5W8YJhR8ERUHheTtrrUTKPhhewuYevt5hLicHUBzHOpicyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;669&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;又是一番紧急上线，终于，系统又恢复正常了。&lt;/p&gt;&lt;figure/&gt;&lt;h2&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;缓存穿透：合理的防身自保手段&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们的系统对外开放并运行的时候，面对的环境&lt;/span&gt;&lt;strong&gt;险象环生&lt;/strong&gt;&lt;span&gt;。你不知道请求是来自一个正常用户还是某些别有用心的盗窃者、亦或是个纯粹的破坏者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;还是上面的论坛的例子：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;用户在互动论坛上点击帖子并查看内容的时候，界面调用查询帖子详情接口时会传入帖子ID，然后后端基于帖子ID先去缓存中查询，如果缓存中存在则直接返回数据，否则会尝试从MySQL中查询数据并返回。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有些人盯上了论坛的内容，便搞了个爬虫程序，模拟帖子ID的生成规则，调用查询详情接口并传入自己生成的ID去遍历挖取系统内的帖子数据，这样导致很多传入的ID是无效的、系统内并不存在对应ID的帖子数据。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3552758954501452&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5vw1sCFrh01QB3sr8WDsAmqY4BDr4JhfNdRdXFXYO26LzsOcGUlPF7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1033&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;所以，上面大量无效的ID请求到系统内，因为&lt;strong&gt;无法命中缓存&lt;/strong&gt;而被转到MySQL中查询，而MySQL中其实也无法查询到对应的数据（因为这些ID是恶意生成的、压根不存在）。&lt;/p&gt;&lt;p&gt;大量此类请求频繁的传入，就会导致请求&lt;strong&gt;一直依赖MySQL进行处理&lt;/strong&gt;，极易冲垮下游模块。这个便是经典的&lt;code&gt;缓存穿透&lt;/code&gt;问题（&lt;em&gt;缓存穿透&lt;/em&gt;与&lt;em&gt;缓存击穿&lt;/em&gt;非常相似，区别点在于&lt;strong&gt;缓存穿透&lt;/strong&gt;的实际请求数据在数据库中也没有，而&lt;strong&gt;缓存击穿&lt;/strong&gt;是仅仅在缓存中没命中，但是在数据库中其实是存在对应数据的）。&lt;/p&gt;&lt;p&gt;&lt;code&gt;缓存穿透&lt;/code&gt;的情况往往出现在一些外部干扰或者攻击情景中，比如&lt;strong&gt;外部爬虫&lt;/strong&gt;、比如&lt;strong&gt;黑客攻击&lt;/strong&gt;等等。为了解决缓存穿透的问题，可以考虑基于一些类似&lt;strong&gt;白名单&lt;/strong&gt;的机制（比如基于&lt;code&gt;布隆过滤器&lt;/code&gt;的策略，后面系列文章中会详细探讨），当然，有条件的情况下，也可以构建一些反爬策略，比如添加请求签名校验机制、比如添加IP访问限制策略等等。&lt;/p&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;缓存的数据一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;缓存作为持久化存储（如数据库）的辅助存在，毕竟属于两套系统。理想情况下是缓存数据与数据库中数据完全一致，但是业务最常使用的旁路缓存架构下，在一些分布式或者高并发&lt;/span&gt;&lt;span&gt;&lt;span&gt;的场景中，可能会出现&lt;/span&gt;&lt;strong&gt;缓存不一致&lt;/strong&gt;&lt;span&gt;的情况。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;数据库更新+缓存更新&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在数据有变更的时候，需要同时更新缓存和数据库两个地方的数据。因为涉及到两个模块的数据更新，所以会有2种组合情况：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;先更新缓存，再更新数据库&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;先更新数据库，&lt;/span&gt; &lt;span&gt;再更新缓存&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24552683896620278&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD55LTbG8b59cRcoicQ3dfvLKF7hdtHEEnGvBrOC2h6iahDibeoy5zpJuia4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1006&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在&lt;code&gt;单线程&lt;/code&gt;场景下，如果更新缓存和更新数据库操作都是成功的，则可以保证数据库与缓存数据是一致的。但是在多线程场景下，由于由于更新缓存和更新数据库是两个操作，不具备&lt;code&gt;原子性&lt;/code&gt;，就有可能出现多个并发请求交叉的情况，进而导致缓存和数据库中的记录不一致的情况。比如下面这个场景：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6686303387334315&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD566k4pMiayEpJaWntGzuVbnp7l8ibsSKeennHrMVyoBxyYGQYFIN0Wrrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;679&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这种情况下，有很多的人会选择结合数据库的事务来一起控制。因为数据库有事务控制，而Redis等缓存没有事务性，所以会在一个&lt;code&gt;DB事务&lt;/code&gt;中封装多个操作，比如&lt;strong&gt;先执行数据库操作，执行成功之后再进行缓存更新&lt;/strong&gt;操作。这样如果缓存更新失败，则直接将当前数据库的事务回滚，企图用这种方式来保证缓存数据与DB数据的一致。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6802610114192496&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5n7Td3nuWtnnoDPSRLxNqoLx81iagY4XcXrjwLs1KuCLvyXkXDkR5tSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;613&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;乍看似乎没毛病，但是细想一下，其实是&lt;strong&gt;有前提条件&lt;/strong&gt;的。我们知道数据库事务的&lt;code&gt;隔离级别&lt;/code&gt;有几种不同的类型，需要保证使用的事务隔离级别为&lt;code&gt;Serializable&lt;/code&gt;或者&lt;code&gt;Repeatable Read&lt;/code&gt;级别，以此来保证并发更新的场景下不会出现数据不一致问题，但这也降低了&lt;em&gt;并发效率&lt;/em&gt;，提高数据库的&lt;em&gt;CPU负载&lt;/em&gt;（隔离级别与并发性能存在一定的关联关系，见下图所示）。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3742603550295858&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5cmJaiba0d7BoD5czSLnaNlrRiaISnOcQ3caS8DZ5viaSuMGA1zEPXicZwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;676&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;所以对于一些&lt;code&gt;读多写少&lt;/code&gt;、写操作并发竞争不是特别激烈且对一致性要求&lt;em&gt;不是特别高&lt;/em&gt;的情况下，可以采用&lt;strong&gt;事务（高隔离级别） + 先更新数据库再更新缓存&lt;/strong&gt;的方式来达到数据一致的诉求。&lt;/p&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;数据库更新+缓存删除&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在旁路型缓存的读操作分支中，从缓存中没有读取到数据而改为从DB中获取到数据之后&lt;/span&gt;&lt;span&gt;&lt;span&gt;，通常都会选择将记录写入到缓存中。所以我们也可以在写操作的时候选择&lt;/span&gt;&lt;strong&gt;将缓存直接删除&lt;/strong&gt;&lt;span&gt;，等待后续&lt;/span&gt;&lt;/span&gt;&lt;span&gt;读取的时候重新加载到缓存中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这样也会有两种组合情况：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28094302554027506&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5PrQum6BuBSAPYUN9XRT6ia6SPkQdzpibMWtmcBAj1fyWsTv97B5q7vpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1018&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这种也会出现前面说的先操作成功，后操作失败的问题。&lt;/p&gt;&lt;p&gt;我们先看下先删除缓存再更新数据库的操作策略。如果先删除缓存成功，然后更新数据库失败，这种情况下，再次读取的时候，会从DB里面将旧数据重新加载回缓存中，数据是可以保持一致的。&lt;/p&gt;&lt;p&gt;虽然更新数据库失败这种场景下不会出现问题，但是在数据库更新成功这种正常情况下，却可能会在并发场景中出现问题。因为常见的缓存（如Redis）是没有事务的，所以可能会因为并发处理顺序的问题导致最终数据不一致。如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6686303387334315&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD51gEEVSwxB9s1GujFppCXTmlc5ZotSWF4QKtCgVOdkS78F109o2YnFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;679&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图中，因为&lt;code&gt;删除缓存&lt;/code&gt;和&lt;code&gt;更新DB&lt;/code&gt;是&lt;strong&gt;非原子&lt;/strong&gt;操作，所以在并发场景下可能的情况：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;A请求执行更新数据操作，先删除了缓存中的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;A这个时候还没来及往DB中更新数据的时候，B查询请求恰好进入；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B先查询缓存发现缓存中没有数据，又从数据库中查询记录并将记录写入缓存中（相当于A刚删了缓存，B又将原样数据写回缓存了）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A执行完成更新逻辑，将变更后的数据写入到DB中。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一番操作完成后，实际上缓存中存储的是A修改前的内容，而DB中存储的是A修改后的数据，两者因此出现了不一致的问题。这样导致后面的查询请求依旧是从缓存中获取到旧数据，而更新后的新数据无法生效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;那么，如果采用&lt;strong&gt;先更新数据库，再删除缓存&lt;/strong&gt;的策略，又会有何种表现呢？假设数据库更新成功，但是缓存删除失败，我们也可以通过数据库事务回滚的方式将数据库更新操作回滚掉，这样在非并发状态下，可以确保数据库与缓存中数据是一致的。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6802610114192496&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD5fRPBiaicsD2Bg9B2zFNOia1iblAdrPh0ACTrZI8AuibgJ0mh7IbHezMmKkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;613&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;当然，因为基于数据库事务机制来控制，需要注意下事务的&lt;strong&gt;粒度不能过大&lt;/strong&gt;，避免事务成为阻塞系统性能的瓶颈。在对并发性能要求极高的情况下，可以考虑非事物类的其余方式来实现，如&lt;code&gt;重试机制&lt;/code&gt;、或&lt;code&gt;异步补偿机制&lt;/code&gt;、或多者结合方式等。&lt;/p&gt;&lt;p&gt;比如下图所示的这种策略：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45588235294117646&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TJEvPia5V9n2wHwCibIALEtOwJOKEGPrD50gl4ibTUjaFicVKgCLSAc3LNq5jIaUqX3TsT1ft8r6SPVaORJdn3Lapg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;680&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图的数据更新处理策略，可以有效的保证数据的最终一致性，降低极端情况可能出现数据不一致的概率，并兜底增加了数据不一致时的自恢复能力。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;具体处理逻辑说明如下：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;先执行数据库的数据更新操作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;更新成功，再去执行缓存记录删除操作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;缓存如果删除失败，则按照预定的重试策略（比如对于指定错误码进行重试，最多重试&lt;/span&gt;3&lt;span&gt;次，每次重试间隔&lt;/span&gt;&lt;span&gt;100ms&lt;/span&gt;&lt;span&gt;等）进行重试。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;如果缓存删除失败，且重试依旧失败，则将此删除事件放入到&lt;/span&gt;MQ&lt;span&gt;中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;独立的补偿逻辑，会去消费&lt;/span&gt;MQ&lt;span&gt;中的消息事件请求，然后按照补偿策略继续尝试删除。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;每个缓存记录设定过期事件，极端情况下，重试删除、补偿删除等策略全部失败时，等到数据记录过期自动从缓存中淘汰，作为兜底策略。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这种处理方式，虽然依旧无法百分百保证数据一致，但是整体出现数据不一致情况的概率与可能性非常的小。&lt;/p&gt;&lt;p&gt;实际使用场景中，对于一致性要求不是特别高、且并发量不是特别大的场景，可以选择基于数据库事务保证的先更新数据库再更新/删除缓存。&lt;/p&gt;&lt;p&gt;而对于并发要求较高、且数据一致性要求较好的时候，推荐选择&lt;strong&gt;先更新数据库，再删除缓存，并结合删除重试 + 补偿逻辑 + 缓存过期TTL等综合手段&lt;/strong&gt;。&lt;/p&gt;&lt;h2&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;小结回顾&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;本篇内容中，我们主要探讨了下缓存的使用过程中的一些典型异常的&lt;/span&gt;&lt;strong&gt;触发场景&lt;/strong&gt;&lt;span&gt;与&lt;/span&gt;&lt;strong&gt;防护策略&lt;/strong&gt;&lt;span&gt;，并一起聊了下保持缓存与数据库&lt;/span&gt;&lt;strong&gt;数据一致性&lt;/strong&gt;&lt;span&gt;的一些保障手段。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;关于这些内容，我们本篇就聊到这里。&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAvXYje1cboAAAAAstQy6ubaLX4KHWvLEZgBPE3KJQWgAKefWDzNPgMIsJOoRAG9kfq1Uqq2ivwlyq&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqzZft8ttZTY9ibOqwJxYFnVUarS4ZO7pz9Ct1VqKOaVsT9chPXodhAbU5g0ZibH6RQafkt7I7w9wdZicKXUhfoDlNNQ&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibAYpt8GuHMXqGq8ReaQP62maNFJwwj4U8SoeucMfCkhtNzlRsyLtKibE92mxCxgn9tM&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM5nv7YHhmhvPsGGX04JCIgibK2x2Ru0TOY9HeZTGSIL1KQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08a1fc3d5c807ec30b07756771265bc6b6234fb9e05062ae69ab4@finder&quot; data-nickname=&quot;儒猿IT&quot; data-desc=&quot;假设你的公司要搞大促，你怎么通过全链路压测去评估核心系统链路能抗多大流量？#全链路压测 #QPS #TPS #高并发 @微信时刻 &quot; data-nonceid=&quot;11084049817690915669&quot; data-type=&quot;video&quot; data-authiconurl=&quot;&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21428571428571427&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/84QSpkgaj14GBzMnf1ibXkydLwCmhrWBooDwrdnlqYlsyB5PetG1T1oXxJ63G8TK58dqkDo7uzR7bKic50DxbTQQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;336&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6538461538461539&quot; data-w=&quot;52&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BXOuoE8lPAIR47zmQ1XOqSQszO2PjLgkgakpDZQSsUkLLnGszEu0eyGjvHNRqu6picb2kicC4lo95WZGiaxqibqW4A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;欢迎扫码加入儒猿技术交流群，每天晚上20:00都有Java面试、Redis、MySQL、RocketMQ、SpringCloudAlibaba、Java架构等技术答疑分享，更能跟小伙伴们一起交流技术&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;267&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;267&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLbPrUTW4zORxkXJU3pH9mPiawH9oZtZGKTkHyVL2wemkqNmPoJKDZlAt5ibgr2CibGkffw2ozqicds4gw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;396&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;41056&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;41056&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94152&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-autoskip=&quot;1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;另外推荐儒猿课堂的1元系列课程给您，欢迎加入一起学习~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;互联网Java工程师面试突击课&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295hjkFx86RFTZFibdBopicpMl5Scptaibp0pQAe5jUBMtXym9w4CncFBHsQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;160&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;SpringCloudAlibaba零基础入门到项目实战&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295NSLHaU5cHQTtyG2K5uK4iaA70v1g50BoQIRUVz4FBN1iahXdqc1M99Ww/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;160&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;亿级流量下的电商详情页系统实战项目&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295I9n8XXUWoEeuogklrbj2QN4JZ6cdgYeRys5CCsml2tkFfibLXdeqoFA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;160&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Kafka消息中间件内核源码精讲&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295yiaEcp1k5HBVycE8BGD0lGz5NZmKWmKXUtSBS7Jnm4FkTY8R5XFZkPw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;160&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;12个实战案例带你玩转Java并发编程&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295WWU9o0Pj51xAIa2qCs9xD2rdDIRLriaibePNSrWJVCknYn6b5lrF3CQQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;160&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Elasticsearch零基础入门到精通&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295QdxHC6HadPfaakPOo7DxxQpLH19lMZH0yAwRI3iajVXblNnwfMxBk9A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于Java手写分布式中间件系统实战&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295r0mR5hhVpAlXTAZzlVvSg1dxegAaZrIZ9ftePV5QQQg2ibIZbiaA6CCg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于ShardingSphere的分库分表实战课&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295hicEliaIKPfLpHqQAo4CdAorqyxd9HvqD8sADicO7wFHGJxNtRus6LlBA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>