<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>7d1ba59e41230c9029a0b938b16015e7</guid>
<title>JuiceFS 在 Elasticsearch/ClickHouse 温冷数据存储中的实践</title>
<link>https://toutiao.io/k/54f7165</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry&quot;&gt;
                    
                        
                            &lt;p data-block-key=&quot;8gzbd&quot;&gt;企业数据越存越多，存储容量与查询性能、以及存储成本之间的矛盾对于技术团队来说是个普遍难题。这个难题在 Elasticsearch 与 ClickHouse 这两个场景中尤为突出，为了应对不同热度数据对查询性能的要求，这两个组件在架构设计上就有一些将数据进行分层的策略。&lt;/p&gt;&lt;p data-block-key=&quot;q13n&quot;&gt;同时，在存储介质方面，随着云计算的发展，对象存储以低廉的价格和弹性伸缩的空间获得了企业的青睐。越来越多的企业将温、冷数据迁移至对象存储。&lt;b&gt;但如果将索引、分析组件直接对接至对象存储时会发生查询性能、兼容性等问题&lt;/b&gt;。&lt;/p&gt;&lt;p data-block-key=&quot;fs2oa&quot;&gt;这篇文章将为大家介绍这两个场景中冷热数据分层的基本原理，以及如何通过使用 JuiceFS 来应对在对象存储上存在的问题。&lt;/p&gt;&lt;h2 data-block-key=&quot;f61bg&quot;&gt;&lt;b&gt;01- Elasticsearch 数据分层结构详解&lt;/b&gt;&lt;/h2&gt;&lt;p data-block-key=&quot;apjcl&quot;&gt;在介绍 ES 如何实现冷热数据分层策略之前先来了解三个相关的概念：Data Stream，Index Lifecycle Management 和 Node Role。&lt;/p&gt;&lt;h3 data-block-key=&quot;9p5k4&quot;&gt;&lt;b&gt;Data Stream&lt;/b&gt;&lt;/h3&gt;&lt;p data-block-key=&quot;bled3&quot;&gt;Data Stream（数据流）是 ES 中一个重要概念，它有如下特征：&lt;/p&gt;&lt;ul&gt;&lt;li data-block-key=&quot;58mlq&quot;&gt;• 流式写入：它是一个流式写入的数据集，而不是一个固定大小的集合；&lt;/li&gt;&lt;li data-block-key=&quot;blpho&quot;&gt;• 仅追加写：它是用追加写的方式将数据更新进去，且不需要修改历史数据；&lt;/li&gt;&lt;li data-block-key=&quot;4ei35&quot;&gt;• 时间戳：每一条新增的数据都会有一个时间戳记录是什么时候产生的；&lt;/li&gt;&lt;li data-block-key=&quot;bm9l6&quot;&gt;• 多个索引：在 ES 里有一个索引的概念，每一条数据最终会落到它对应的一个索引中，但是数据流是一个更上层、更大的概念，一个数据流背后可能会有很多索引，这些索引是根据不同的规则来生成的。一个数据流虽然由很多的索引来构成，但是只有最新的索引才是可写的，历史索引是只读的，一旦固化好之后就不能再修改。&lt;/li&gt;&lt;/ul&gt;&lt;p data-block-key=&quot;7a6ad&quot;&gt;日志数据就是符合数据流特征的一类数据，它是只追加写，同时也得有时间戳，用户会根据不同的维度，比如按天或者按其他的维度来生成新的索引。&lt;/p&gt;&lt;p data-block-key=&quot;4pa1n&quot;&gt;下图是一个数据流建立索引的简单示例，在用数据流的过程中，ES 会直接写到最新的索引，而不是历史索引，历史索引不会被修改。随着后续更多新的数据生成，这个索引也会沉淀成为一个老的索引。&lt;/p&gt;&lt;p data-block-key=&quot;k6as&quot;/&gt;&lt;p data-block-key=&quot;drvc&quot;/&gt;&lt;img alt=&quot;1&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/1_Wc2RLXf.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;37aue&quot;/&gt;&lt;p data-block-key=&quot;2kfji&quot;&gt;下图，当用户往 ES 里面去写数据时，大致分为两个阶段：&lt;/p&gt;&lt;ul&gt;&lt;li data-block-key=&quot;8c8cb&quot;&gt;阶段 1：数据会先写到内存的 In-memory buffer 缓冲区；&lt;/li&gt;&lt;li data-block-key=&quot;36rfm&quot;&gt;阶段 2：缓冲区根据一定的规则和时间，再落到本地磁盘上，就是下图绿色的持久化的数据，在 ES 中叫做 Segment。&lt;/li&gt;&lt;/ul&gt;&lt;p data-block-key=&quot;39oth&quot;&gt;这个过程中可能会有一些时间差，在持久化的过程中，如果去触发查询， 新创建的Segment 不能被搜索到。一旦这个 Segment 持久化完成之后，就可以立即被上层的查询引擎搜索。&lt;/p&gt;&lt;p data-block-key=&quot;bd3hf&quot;/&gt;&lt;img alt=&quot;2&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/2_VsX4ywp.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;ec0as&quot;/&gt;&lt;p data-block-key=&quot;9s068&quot;/&gt;&lt;h3 data-block-key=&quot;7ui7d&quot;&gt;&lt;b&gt;Index Lifecycle Management&lt;/b&gt;&lt;/h3&gt;&lt;p data-block-key=&quot;cn176&quot;&gt;Index Lifecycle Management，简称 ILM，就是索引的生命周期管理。ILM 将索引的生命周期定义为 5 个阶段：&lt;/p&gt;&lt;ul&gt;&lt;li data-block-key=&quot;9qe8d&quot;&gt;• 热数据（Hot）：需要频繁更新或者查询的数据；&lt;/li&gt;&lt;li data-block-key=&quot;50mng&quot;&gt;• 温数据（Warm）：不再更新，但仍会被频繁查询的数据；&lt;/li&gt;&lt;li data-block-key=&quot;1aj1n&quot;&gt;• 冷数据（Cold）：不再更新，且查询频率较低的数据；&lt;/li&gt;&lt;li data-block-key=&quot;fuvhj&quot;&gt;• 极冷数据（Frozen）：不再更新，且几乎不会被查询的数据。可以比较放心地把这类数据放在一个相对最低速最便宜的存储介质中；&lt;/li&gt;&lt;li data-block-key=&quot;7999l&quot;&gt;• 删除数据（Delete) : 不再需要用到，可以放心删除的数据。&lt;/li&gt;&lt;/ul&gt;&lt;p data-block-key=&quot;6clup&quot;&gt;一个索引里的数据，不管是 index 还是 segment，都会经历这些阶段，这个分类的规则很好地帮助用户去管理 ES 里的数据，用户可以自己定义不同阶段的规则。&lt;/p&gt;&lt;p data-block-key=&quot;chbn1&quot;/&gt;&lt;h3 data-block-key=&quot;2l3f5&quot;&gt;&lt;b&gt;Node Role&lt;/b&gt;&lt;/h3&gt;&lt;p data-block-key=&quot;6tdup&quot;&gt;在 ES 中，每一个部署节点都会有一个 Node Role，也就是节点角色。每一个 ES 节点会分配不同的角色，比如 master、data、ingest 等。用户可以结合节点角色，以及上文提到的不同生命周期的阶段来组合进行数据管理。&lt;/p&gt;&lt;p data-block-key=&quot;cdeuq&quot;&gt;数据节点会有不同的阶段，可能是一个存储热数据的节点，也可能是一个存储温数据、冷数据，甚至极冷数据的节点。需要根据节点的功能去给他分配不同的角色，同时会给不同的角色的节点配置不同的硬件。&lt;/p&gt;&lt;p data-block-key=&quot;387ir&quot;&gt;比如，对于热数据节点需要配置高性能的 CPU 或者磁盘，对于温冷数据的节点，基本上认为这些数据被查询的频率较低，这个时候其实对于某些计算资源的硬件要求就没有那么高了。&lt;/p&gt;&lt;p data-block-key=&quot;4g8pr&quot;&gt;节点角色是根据生命周期的不同阶段来定义的，需要注意的一点是，每一个 ES 节点，可以有多种角色，这些角色并不是一一对应的关系。下面有个示例，在 ES 的 YAML 文件里面配置的时候，node.roles 就是节点角色的配置，可以针对这个节点应该有的角色给它配置多种角色。&lt;/p&gt;&lt;p data-block-key=&quot;2vadp&quot;/&gt;
                        
                    
                        
                        &lt;pre class=&quot;line-numbers rounded-md&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node.roles: [&quot;data_hot&quot;, &quot;data_content&quot;]&lt;/code&gt;&lt;/pre&gt;
                        
                    
                        
                            &lt;h3 data-block-key=&quot;8gzbd&quot;&gt;&lt;b&gt;生命周期策略&lt;/b&gt;&lt;/h3&gt;&lt;p data-block-key=&quot;2mgpt&quot;&gt;在了解完 Data Stream 、Index Lifecycle Management、Node Role 这些概念以后，就可以为数据创建一些不同的生命周期策略（Lifecycle Policy）。&lt;/p&gt;&lt;p data-block-key=&quot;5jbp2&quot;&gt;根据生命周期策略中定义的不同维度的索引特征，如索引的大小、索引里的文档的数量、索引创建的时间，ES 可以自动地帮用户把某个生命周期阶段的数据滚动到另一个阶段，在 ES 中的术语是 rollover。&lt;/p&gt;&lt;p data-block-key=&quot;dhmd9&quot;&gt;比如，用户可以制定基于索引大小维度的特征，把热数据滚动到温数据，或者根据一些其它规则，再把温数据滚动到冷数据。这样，索引在不同生命周期的阶段之间去滚动的时候，相应的它索引的数据也会去做迁移和滚动。ES 可以自动完成这些工作，但是生命周期策略则需要用户自己来定义。&lt;/p&gt;&lt;p data-block-key=&quot;cc5fg&quot;&gt;下面的截图，是 Kibana 的管理界面，用户可以通过图形化的方式去配置生命周期策略。可以看到有三个阶段，从上到下分别是热数据、温数据以及冷数据。&lt;/p&gt;&lt;p data-block-key=&quot;b2vdu&quot;/&gt;&lt;p data-block-key=&quot;8fjvv&quot;/&gt;&lt;img alt=&quot;3&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/3_rUDpwSS.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;t8l8&quot;/&gt;&lt;p data-block-key=&quot;ileu&quot;&gt;展开其中热数据阶段的高级设置，可以看到更详细，上文提到的基于不同维度特征的策略配置，如在下图右边看到的这三个选项。&lt;/p&gt;&lt;p data-block-key=&quot;d6f03&quot;/&gt;&lt;p data-block-key=&quot;4e3jb&quot;/&gt;&lt;img alt=&quot;4&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/4_eOg3Nk6.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;dcab7&quot;/&gt;&lt;ol&gt;&lt;li data-block-key=&quot;7mpur&quot;&gt;索引的大小，示意图上的例子是 50GB，当索引的大小超过 50GB 的时候，就会把它从热数据阶段滚动到温数据阶段。&lt;/li&gt;&lt;li data-block-key=&quot;di07a&quot;&gt;最大的文档数，ES 里索引的单元是文档，用户数据是以文档的形式写入 ES 中的，所以文档数也是一个可以衡量的指标。&lt;/li&gt;&lt;li data-block-key=&quot;4u8ps&quot;&gt;最大索引创建时间，这里的示例是 30 天，假设某个索引已经创建了 30 天了，这个时候就会触发刚刚提到的从热数据阶段到温数据的滚动。&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-block-key=&quot;3p5jb&quot;&gt;&lt;b&gt;02- ClickHouse 数据分层架构详解&lt;/b&gt;&lt;/h2&gt;&lt;p data-block-key=&quot;bvb4&quot;/&gt;&lt;p data-block-key=&quot;4irk0&quot;&gt;下图是一组从大到小的俄罗斯套娃，它非常形象地展现了 ClickHouse 的数据管理模式， MergeTree 引擎。&lt;/p&gt;&lt;ul&gt;&lt;li data-block-key=&quot;flqh1&quot;&gt;Table: 在图片的最右边是一个最大的概念，用户最开始要创建或者能够直接接触到的就是 Table；&lt;/li&gt;&lt;li data-block-key=&quot;8lbp9&quot;&gt;Partition：是一个更小的维度或者更小的粒度。在 ClickHouse 里，数据分成 Partition 来存储，每个 Partition 会有一个标识；&lt;/li&gt;&lt;li data-block-key=&quot;gvq2&quot;&gt;Part：在每个 Partition 中，又会再进一步地细分为多个 Part。如果查看 ClickHouse 磁盘上存储的数据格式，可以认为每一个子目录就是一个 Part；&lt;/li&gt;&lt;li data-block-key=&quot;7cs8l&quot;&gt;Column：在 Part 里会看到一些更小粒度的数据，即 Column。ClickHouse 的引擎使用的是列式存储，所有的数据都是按照列存的方式来组织。在 Part 目录里会看到很多列，比如 Table 可能有100 列，就会有 100 个 Column 文件；&lt;/li&gt;&lt;li data-block-key=&quot;a4na7&quot;&gt;Block：每个 Column 文件里是按照 Block 的粒度来组织。&lt;/li&gt;&lt;/ul&gt;&lt;p data-block-key=&quot;15u6r&quot;/&gt;&lt;img alt=&quot;5&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/5_TlEZ55w.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;2m7vf&quot;/&gt;&lt;p data-block-key=&quot;7umib&quot;/&gt;&lt;p data-block-key=&quot;2upbk&quot;&gt;下面这个示例中，在 table 目录下可以看到有 4 个子目录，每个子目录就是上文提到的 Part。&lt;/p&gt;&lt;p data-block-key=&quot;9bf38&quot;/&gt;&lt;p data-block-key=&quot;amvlu&quot;/&gt;
                        
                    
                        
                        &lt;pre class=&quot;line-numbers rounded-md&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls -l /var/lib/clickhouse/data/&amp;lt;database&amp;gt;/&amp;lt;table&amp;gt;&amp;#13;
drwxr-xr-x  2 test  test 64B Aug  8 13:46 202208_1_3_0&amp;#13;
drwxr-xr-x  2 test  test 64B Aug  8 13:46 202208_4_6_1&amp;#13;
drwxr-xr-x  2 test  test 64B Sep  8 13:46 202209_1_1_0&amp;#13;
drwxr-xr-x  2 test  test 64B Sep  8 13:46 202209_4_4_&lt;/code&gt;&lt;/pre&gt;
                        
                    
                        
                            &lt;p data-block-key=&quot;8gzbd&quot;&gt;图示的最右边这一列，每个子目录的名字前面可能是一个时间，比如 202208 类似这样的前缀，202208 其实就是 Partition 名。Partition 名字是用户自己来定义的，但是按照约定俗成或者一些实践习惯，通常会使用时间来命名。&lt;/p&gt;&lt;p data-block-key=&quot;5b7pe&quot;&gt;比如， 202208 这个 Partition，它会有两个子目录，子目录就是 Part，一个 Partition 通常会由多个 Part 来构成。用户在往 ClickHoue 写入数据时，会先写到内存里，再根据内存里的数据结构，持久化到磁盘上。同一个Partition 里面的数据如果比较大的话，在磁盘上就会变成很多 part。ClickHouse 官方建议不要在一个 Table 下创建太多 Part，它会定期或者不定期地对 Part 进行合并，减少总的 Part 数量。Merge 的概念就是合并 Part，这也是 MergeTree 这个引擎的名字来源之一。&lt;/p&gt;&lt;p data-block-key=&quot;f0arn&quot;&gt;再通过一个例子来了解 Part。Part 里会有很多小文件，有一些是元信息，比如索引信息，帮助用户快速查找数据。&lt;/p&gt;
                        
                    
                        
                        &lt;pre class=&quot;line-numbers rounded-md&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls -l /var/lib/clickhouse/data/&amp;lt;database&amp;gt;/&amp;lt;table&amp;gt;/202208_1_3_0&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 ColumnA.bin&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 ColumnA.mrk&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 ColumnB.bin&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 ColumnB.mrk&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 checksums.txt&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 columns.txt&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 count.txt&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 minmax_ColumnC.idx&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 partition.dat&amp;#13;
-rw-r--r--  1 test  test  ?? Aug  8 14:06 primary.id&lt;/code&gt;&lt;/pre&gt;
                        
                    
                        
                            &lt;p data-block-key=&quot;8gzbd&quot;&gt;在示例的右侧，以 Column 作为前缀的这些文件是实际的数据文件，相比元信息通常会比较大。这个示例中只有 A、B 两列，实际的表里可能有很多列。所有这些文件，包括元信息、索引信息，都会共同帮助用户快速地在不同文件之间去做跳转或者查找。&lt;/p&gt;&lt;h3 data-block-key=&quot;21eu&quot;&gt;&lt;b&gt;ClickHouse 存储策略&lt;/b&gt;&lt;/h3&gt;&lt;p data-block-key=&quot;afar1&quot;&gt;如果要在 ClickHouse 里做冷热数据分层，会用到类似于 ES 中提到的生命周期策略，在 ClickHouse 里称为存储策略（Storage Policy）。&lt;/p&gt;&lt;p data-block-key=&quot;24l7d&quot;&gt;&lt;b&gt;与 ES 稍有不同，ClickHouse 官方并没有将数据划分不同的阶段，比如热数据、温数据、冷数据这些不同的阶段，ClickHouse 提供了一些规则和配置方法，需要用户自己来制定分层策略&lt;/b&gt;。&lt;/p&gt;&lt;p data-block-key=&quot;2li55&quot;&gt;每个 ClickHouse 节点支持同时配置多块磁盘，存储介质可以是多种多样的。比如，一般用户为了性能会给 ClickHouse 节点配置 SSD 盘；对于一些温冷数据，用户可以把数据存储在成本更低的介质，如机械盘。ClickHouse 的用户对底层存储介质是无感知的。&lt;/p&gt;&lt;p data-block-key=&quot;erf7h&quot;&gt;与 ES 相似，ClickHouse 用户需要根据数据不同的维度特征去制定存储策略，比如每个 part 子目录的大小、整个磁盘的剩余空间比例等，当满足某个维度特征设定的条件时就会触发存储策略的执行。这个策略会将某一个 part 从一块盘迁移到另外一块盘。在 ClickHouse 中，一个节点配置的多块盘是有优先级的，默认情况下数据会优先落在最高优先级的盘上。这样实现了 Part 从一个存储介质转移到另外一个存储介质上。&lt;/p&gt;&lt;p data-block-key=&quot;231nh&quot;&gt;通过 ClickHouse 的一些 SQL 命令，如 MOVE PARTITION/PART 命令可以手动触发数据迁移，用户也可以通过这些命令做一些功能性的验证。其次有某些情况下，可能也希望能够通过手动的方式，而不是自动转移的方式来显式把 part 从当前的存储介质上转移到另外一个存储介质上。&lt;/p&gt;&lt;p data-block-key=&quot;3ham8&quot;&gt;ClickHouse 还支持基于时间的迁移策略，这是一个独立于存储策略的概念。数据写入后，ClickHouse 会按照每个表的 TTL 属性设置的时间来触发磁盘上数据的迁移。比如设置 TTL 为 7 天，ClickHouse 就会把表中超过 7 天的数据从当前的磁盘（如默认的 SSD）再写到另外一个更低优先级的磁盘上（如 JuiceFS）。&lt;/p&gt;&lt;p data-block-key=&quot;dkri5&quot;/&gt;&lt;h2 data-block-key=&quot;57ep&quot;&gt;&lt;b&gt;03- 温冷数据存储：为什么使用对象存储+ JuiceFS ？&lt;/b&gt;&lt;/h2&gt;&lt;p data-block-key=&quot;8j8um&quot;&gt;企业把温、冷数据存放到云上后，存储成本相较于传统的 SSD 架构大为下降。&lt;b&gt;企业还享受到了云上的弹性伸缩空间；不用为数据存储去做任何运维操作，比如扩缩容，或者一些数据清理类的工作&lt;/b&gt;。温冷数据所需的存储容量比热数据大很多，尤其是随着时间推移，会产生大量需要长期保存的数据，如果这些数据都存储在本地，相应的运维工作将不堪重负。&lt;/p&gt;&lt;p data-block-key=&quot;2rgr&quot;&gt;&lt;b&gt;但如果在对象存储上使用 Elasticsearch、ClickHouse 这类数据应用组件，会存在写入性能差、兼容性等问题。希望兼顾查询性能的企业，开始在云上寻找解决方案。在这样的背景之下，JuiceFS 被越来越多地应用于数据分层的架构之中。&lt;/b&gt;&lt;/p&gt;&lt;p data-block-key=&quot;b3tr2&quot;&gt;通过下面 ClickHouse 写入性能测试可以直观了解到写入SSD、JuiceFS 以及对象存储的性能差异。&lt;/p&gt;&lt;p data-block-key=&quot;1fgvf&quot;/&gt;&lt;p data-block-key=&quot;e7dae&quot;/&gt;&lt;img alt=&quot;6&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/6_uXxs2Yg.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;76pn8&quot;/&gt;&lt;p data-block-key=&quot;5p14t&quot;&gt;&lt;b&gt;JuiceFS 的写入吞吐量远大于直接对接对象存储，接近 SSD&lt;/b&gt;。当用户把热数据转移到温暖数据这一层时，对于写入性能也有一定要求。在迁移的过程中，如果底层存储介质的写入性能差，整个迁移的流程也会拖得很长，对于整个 pipeline 或数据管理也会带来一些挑战。&lt;/p&gt;&lt;p data-block-key=&quot;96b7e&quot;&gt;下图的 ClickHouse 查询性能测试使用真实业务中的数据，并选取几个典型的查询场景进行测试。其中 q1-q4 是扫描全表的查询，q5-q7 是命中主键索引的查询。测试结果如下图：&lt;/p&gt;&lt;p data-block-key=&quot;2b3jf&quot;/&gt;&lt;img alt=&quot;7&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/7_Nj9jX0u.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;be9e1&quot;/&gt;&lt;p data-block-key=&quot;61v1&quot;/&gt;&lt;img alt=&quot;8&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/8_b2AbKg1.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;13um5&quot;/&gt;&lt;p data-block-key=&quot;7fvrk&quot;&gt;&lt;b&gt;JuiceFS 与 SSD 盘的查询性能基本相当，平均差异在 6% 左右，但是对象存储相比 SSD 盘有 1.4 至 30 倍的性能下降&lt;/b&gt;。得益于 JuiceFS 高性能的元数据操作以及本地缓存特性，可以自动将查询请求需要的热数据缓存在 ClickHouse 节点本地，大幅提升了 ClickHouse 的查询性能。需要注意的是以上测试中对象存储是通过 ClickHouse 的 S3 磁盘类型进行访问，这种方式只有数据是存储在对象存储上，元数据还是在本地磁盘。如果通过类似 S3FS 的方式把对象存储挂载到本地，性能会有进一步的下降。&lt;/p&gt;&lt;p data-block-key=&quot;6rsbu&quot;&gt;另外值得一提的是 JuiceFS 是一个完全兼容 POSIX 的文件系统，它能够与上层应用（如 Elasticsearch、ClickHouse）有很好的兼容。用户对底层存储是分布式文件系统或者是本地磁盘是没有感知的。如果直接使用对象存储，不能很好地实现与上层应用的兼容。&lt;/p&gt;&lt;p data-block-key=&quot;5dnh1&quot;/&gt;&lt;h2 data-block-key=&quot;2md2q&quot;&gt;&lt;b&gt;04- 实操：ES + JuiceFS&lt;/b&gt;&lt;/h2&gt;&lt;p data-block-key=&quot;c5aoq&quot;&gt;&lt;b&gt;Step 1：准备多种类型节点，分配不同角色。&lt;/b&gt;每一个 ES 节点可以分配不同的角色，比如存热数据、温数据、冷数据等，用户需要准备不同机型的节点来匹配不同角色的需求。&lt;/p&gt;&lt;p data-block-key=&quot;7ctrj&quot;&gt;&lt;b&gt;Step 2：挂载 JuiceFS 文件系统。&lt;/b&gt;一般用户将 JuiceFS 用于温、冷数据的存储，用户需要在 ES 温数据节点或冷数据的节点上把 JuiceFS 文件系统挂载到本地。用户可以通过符号链接或其它方式把挂载点配置到 ES 中去，让 ES 认为它的数据存储在本地目录里，但这个目录背后其实是一个 JuiceFS 文件系统。&lt;/p&gt;&lt;p data-block-key=&quot;a0b5m&quot;&gt;&lt;b&gt;Step 3：创建生命周期策略。&lt;/b&gt;这个需要每个用户自己去定制，用户既可以通过 ES API 去创建，也可以通过 Kibana 去创建，Kibana 提供了一些相对便捷的方式去创建和管理生命周期策略。&lt;/p&gt;&lt;p data-block-key=&quot;f5idi&quot;&gt;&lt;b&gt;Step 4：为索引设置生命周期策略。&lt;/b&gt;创建完生命周期策略之后，用户需要把这个策略应用到索引上，也就是要为索引去设置刚刚创建好的策略。用户可以通过索引模板的方式，可以在 Kibana 里创建索引模板，也可以通过 index.lifycycle.name，显式通过 API 配置。&lt;/p&gt;&lt;p data-block-key=&quot;cim69&quot;&gt;这里有几个小提示：&lt;/p&gt;&lt;p data-block-key=&quot;3n6b6&quot;&gt;&lt;b&gt;Tip 1：Warm 或 Cold 节点的副本数（replica）可以设置为 1。&lt;/b&gt;所有数据本质上都是放在 JuiceFS 上，它的底层是对象存储，因而数据的可靠性已经足够高了，所以在 ES 这边可以适当降低副本数，节省存储空间。&lt;/p&gt;&lt;p data-block-key=&quot;dof28&quot;/&gt;&lt;img alt=&quot;9&quot; class=&quot;richtext-image full-width&quot; src=&quot;https://juicedata-cms.oss-cn-hongkong.aliyuncs.com/images/9_nNAHlRQ.width-800.png&quot;/&gt;&lt;p data-block-key=&quot;fet9m&quot;/&gt;&lt;p data-block-key=&quot;fe6j4&quot;&gt;&lt;b&gt;Tip 2：开启 Force merge 可能会导致节点 CPU 持续占用，酌情关闭&lt;/b&gt;。从热数据转移到温数据这个阶段时，ES 会将所有热数据索引对应的底层 segment 做合并。如果开启 Force merge 这个功能，ES 会先合并完这些 segment 以后，再把它存储到温数据的底层系统。然而合并 segment 是一个非常消耗 CPU 的过程，如果温数据的数据节点同时也需要承载一些查询请求，可以酌情关闭这个功能能，也就是原封不动地把数据保留下来，直接写到底层存储中。&lt;/p&gt;&lt;p data-block-key=&quot;cqi80&quot;&gt;&lt;b&gt;Tip 3：Warm 或 Cold 阶段的索引可以设置为只读&lt;/b&gt;。在给温数据和冷数据阶段建立索引时，我们基本上可以认为这些数据是只读的，这些阶段的索引不会被修改。设置为只读可以适当降低温冷数据节点上的资源，比如内存可以释放一些，从而节省一些在温节点或者冷节点上的硬件资源。&lt;/p&gt;&lt;h2 data-block-key=&quot;7a9al&quot;&gt;&lt;b&gt;05- 实操：ClickHouse + JuiceFS&lt;/b&gt;&lt;/h2&gt;&lt;p data-block-key=&quot;43c4v&quot;&gt;&lt;b&gt;Step 1：在所有 ClickHouse 节点上挂载 JuiceFS 文件系统。&lt;/b&gt;这个路径可以是任意路径，因为 ClickHouse 会有一个配置文件去指向挂载点。&lt;/p&gt;&lt;p data-block-key=&quot;b69vv&quot;&gt;&lt;b&gt;Step 2：修改 ClickHouse 配置，新增 JuiceFS 盘。&lt;/b&gt;在 ClickHouse 中把刚刚挂载好的 JuiceFS 文件系统挂载点添加进来，让 ClickHouse 可以识别这个新磁盘。&lt;/p&gt;&lt;p data-block-key=&quot;3l53p&quot;&gt;&lt;b&gt;Step 3：新增存储策略，设定下沉数据规则。&lt;/b&gt;这个存储策略会根据用户的规则去不定期的、自动地将数据从默认磁盘上下沉到指定的，比如 JuiceFS 中。&lt;/p&gt;&lt;p data-block-key=&quot;3h7q7&quot;&gt;&lt;b&gt;Step 4：为特定表设置存储策略及 TTL。&lt;/b&gt;存储策略制定好之后，需要把这个策略应用到某一个表上。前期测试阶段和验证阶段，可以把用相对大一点的表去做测试和验证，如果用户希望基于时间维度来实现数据下沉，就同时也需要在表上设置 TTL。整个下沉过程是一个自动的机制，可以通过 ClickHouse 的 system 表查看当前正在进行数据迁移的 part 以及迁移进度。&lt;/p&gt;&lt;p data-block-key=&quot;c8faq&quot;&gt;&lt;b&gt;Step 5：手动移动 part 进行验证。&lt;/b&gt;可以通过手动执行 &lt;code&gt;MOVE PARTITION&lt;/code&gt; 命令的方式去验证当前的配置或存储策略是否生效。&lt;/p&gt;&lt;p data-block-key=&quot;4j3qf&quot;&gt;下图是一个具体示例，在 ClickHouse 中有一个叫做 &lt;code&gt;storage_configuration&lt;/code&gt; 的配置项，其中包含 disks 配置，这里会把 JuiceFS 作为一个盘加进来，我们将它命名为“jfs”，但其实可以用任意名字，挂载点是 &lt;code&gt;/jfs&lt;/code&gt;目录。&lt;/p&gt;
                        
                    
                        
                        &lt;pre class=&quot;line-numbers rounded-md&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;storage_configuration&amp;gt;&amp;#13;
 &amp;lt;disks&amp;gt;&amp;#13;
     &amp;lt;jfs&amp;gt;&amp;#13;
         &amp;lt;path&amp;gt;/jfs&amp;lt;/path&amp;gt;&amp;#13;
     &amp;lt;/jfs&amp;gt;&amp;#13;
 &amp;lt;/disks&amp;gt;&amp;#13;
 &amp;lt;policies&amp;gt;&amp;#13;
     &amp;lt;hot_and_cold&amp;gt;&amp;#13;
         &amp;lt;volumes&amp;gt;&amp;#13;
             &amp;lt;hot&amp;gt;&amp;#13;
                 &amp;lt;disk&amp;gt;default&amp;lt;/disk&amp;gt;&amp;#13;
                 &amp;lt;max_data_part_size_bytes&amp;gt;1073741824&amp;lt;/max_data_part_size_bytes&amp;gt;&amp;#13;
             &amp;lt;/hot&amp;gt;&amp;#13;
             &amp;lt;cold&amp;gt;&amp;#13;
                 &amp;lt;disk&amp;gt;jfs&amp;lt;/disk&amp;gt;&amp;#13;
             &amp;lt;/cold&amp;gt;&amp;#13;
         &amp;lt;/volumes&amp;gt;&amp;#13;
         &amp;lt;move_factor&amp;gt;0.1&amp;lt;/move_factor&amp;gt;&amp;#13;
     &amp;lt;/hot_and_cold&amp;gt;&amp;#13;
 &amp;lt;/policies&amp;gt;&amp;#13;
&amp;lt;/storage_configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;
                        
                    
                        
                            &lt;p data-block-key=&quot;8gzbd&quot;&gt;再往下是 policies 配置项，这里定义了一个叫做 hot_and_cold 的存储策略，用户需要定义一些具体的规则，如 volumes 中按照先热后冷的优先级排列，数据首先会落到 volumes 里的第一个 hot 盘上，及默认的 ClickHouse 磁盘，一般是本地的 SSD。&lt;/p&gt;&lt;p data-block-key=&quot;5fesl&quot;&gt;volumes 中的 max_data_part_size_bytes 配置表示当某一个 part 的大小超过设定的大小之后，就会触发存储策略的执行，对应的 part 会下沉到下一个 volume，也就是 cold volume。在上面的示例中，cold volume 就是 JuiceFS。&lt;/p&gt;&lt;p data-block-key=&quot;eckpo&quot;&gt;最下面的 move_factor  配置代表 ClickHouse 会根据当前磁盘的剩余空间比例来触发存储策略的执行。&lt;/p&gt;
                        
                    
                        
                        &lt;pre class=&quot;line-numbers rounded-md&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;CREATE TABLE test (&amp;#13;
  d DateTime,&amp;#13;
  ...&amp;#13;
) ENGINE = MergeTree&amp;#13;
...&amp;#13;
TTL d + INTERVAL 1 DAY TO DISK &#x27;jfs&#x27;&amp;#13;
SETTINGS storage_policy = &#x27;hot_and_cold&#x27;；&lt;/code&gt;&lt;/pre&gt;
                        
                    
                        
                            &lt;p data-block-key=&quot;8gzbd&quot;&gt;如上面的代码所示，有了存储策略之后，在创建表或者修改这个表的 schema 时，可以在 SETTINGS 中设置 storage_policy  为前面定义的 hot_and_cold 存储策略。上述代码中倒数第二行的 TTL 即为上文提过的基于时间的分层规则。在这个示例中，我们指定的表中某一个叫做 d 的列，它的类型是 DateTime，结合 INTERVAL 1 DAY 就表示当新的数据写进来超过一天之后，这些数据就会转移到 JuiceFS 上。&lt;/p&gt;&lt;h2 data-block-key=&quot;crg5f&quot;&gt;&lt;b&gt;06- 展望&lt;/b&gt;&lt;/h2&gt;&lt;p data-block-key=&quot;dsdha&quot;&gt;&lt;b&gt;第一，副本共享。&lt;/b&gt;无论是 ES 还是 ClickHouse，他们都是由多副本来保证数据的可用性和可靠性。JuiceFS 本质上是一个共享文件系统，任何一份数据写入到 JuiceFS 之后，不再需要维护多个副本。比如，用户有两个 ClickHouse 节点，都有某一个表的或者某一个 part 的副本，这两个节点都下沉到了 JuiceFS，它可能会写两次一样的数据。&lt;b&gt;未来，我们是否可以做到让上层引擎能够感知到下层使用的是一个共享存储，当数据下沉的时候去降低副本数，这样在不同节点之间是可以做副本共享的。&lt;/b&gt;从应用层来说，用户查看这个表， part 数还是多副本，但实际在底层的存储上只保了一个副本，因为本质上数据是可以共享的。&lt;/p&gt;&lt;p data-block-key=&quot;fr8a1&quot;&gt;&lt;b&gt;第二点，故障恢复。&lt;/b&gt;当数据已经下沉到一个远端的共享存储之后，如果 ES 或 ClickHousle 节点宕机故障之后，怎么快速地做故障恢复？除了热数据以外的大部分数据其实都已经转移到了一个远端的共享存储上，这个时候如果要去恢复或创建一个新的节点时，成本会比传统的基于本地盘的故障恢复方式轻量很多，这在 ES 或者 ClickHouse 场景上是值得探索的。&lt;/p&gt;&lt;p data-block-key=&quot;9fud1&quot;&gt;&lt;b&gt;第三点，存算分离。&lt;/b&gt;不管 ES 也好，还是 ClickHouse，整个社区也都在尝试或者探索在云原生的大环境下，怎么去让传统的这些基于本地盘的存储系统变成一个真正的存算分离系统。但存算分离不是仅仅简单地把数据和计算分离就好了，同时要满足上层各种复杂的需求，比如对于查询性能的需求、对于写入性能的需求、对各种维度调优的需求，在存量分离整个大的方向上还是有许多值得探索的技术难点。&lt;/p&gt;&lt;p data-block-key=&quot;6ouoo&quot;&gt;&lt;b&gt;第四点，其他上层应用组件数据分层探索。&lt;/b&gt;除了ES 和 ClickHouse 这两个场景，我们最近也有在做一些尝试，把 Apache Pulsar 中的温冷数据下沉到 JuiceFS 中，用到的一些策略和方案与本文中提到的是类似的，只不过在 Apache Pulsar 中，它需要下沉的数据类型或者数据格式不太一样。有了进一步成功实践后，会分享出来。&lt;/p&gt;
                        
                    
                    &lt;/div&gt;
                    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>db6c2867014e9fa2df15dacf1cdefb3f</guid>
<title>TCP 拥塞控制详解 | 7. 超越 TCP</title>
<link>https://toutiao.io/k/385cm7h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;网络传输问题本质上是对网络资源的共享和复用问题，因此拥塞控制是网络工程领域的核心问题之一，并且随着互联网和数据中心流量的爆炸式增长，相关算法和机制出现了很多创新，本系列是免费电子书《TCP Congestion Control: A Systems Approach》的中文版，完整介绍了拥塞控制的概念、原理、算法和实现方式。原文: &lt;span&gt;TCP Congestion Control: A Systems Approach&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5908273381294964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VIsicUOtq1kBDevhlHRYgibd7zo1noH4XrLEhLUlFvxmgVzh1hnBqN0cteibJBian7lYf0s4OAaQwbBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1112&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;TCP拥塞控制详解:&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTgxODgwNA==&amp;amp;mid=2247485888&amp;amp;idx=1&amp;amp;sn=4819dcc1373f0e8ffa679847f7ab26e9&amp;amp;chksm=fc73b41bcb043d0dd0e5f2b6ea351b1183fd956ad21a259af84b30f7687d2e838a4122aaa5af&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;1. 概述&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;1. 概述&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTgxODgwNA==&amp;amp;mid=2247485889&amp;amp;idx=1&amp;amp;sn=8b1f3c0d0d6e75a4e5b9dfc3eee8649c&amp;amp;chksm=fc73b41acb043d0c43e88b49b65d7f735c20af8eef23a7671d2da3d22af1db5ee0350aaff04e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2. 背景&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;2. 背景&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTgxODgwNA==&amp;amp;mid=2247485941&amp;amp;idx=1&amp;amp;sn=7740dc9e8b3a11d0f549c77b1139391b&amp;amp;chksm=fc73b42ecb043d38d8654fa457cde541a2053492022abb64c7bf2a88420add4214fa573fe94e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;3. 设计空间&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;3. 设计空间&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTgxODgwNA==&amp;amp;mid=2247485942&amp;amp;idx=1&amp;amp;sn=7fc91be8593085d4222c2af7b77cf3c7&amp;amp;chksm=fc73b42dcb043d3b1eb103830533c6cea1a561c5f25eabd3e1669caaa163feaf35e573a3c7ee&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;4. 控制算法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;4. 控制算法&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTgxODgwNA==&amp;amp;mid=2247485947&amp;amp;idx=1&amp;amp;sn=f8fbf5ee0aaca7129c0a3a732968934a&amp;amp;chksm=fc73b420cb043d36bc098a08979d117c79b7330810ce7ab81b83b7ebc9b9673be0b8ecba6dff&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;5. 回避算法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;5. 回避算法&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTgxODgwNA==&amp;amp;mid=2247485957&amp;amp;idx=1&amp;amp;sn=ab8fec470c30d41f66dcb6d54c77060b&amp;amp;chksm=fc73b7decb043ec859ab33c90e2f6c23faabac3d0177e913982f67c65f3ad26862368ce35ca8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;6. 主动队列管理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;6. 主动队列管理&lt;/a&gt;&lt;/p&gt;&lt;p&gt;7. 超越TCP&lt;span&gt;（本&lt;/span&gt;&lt;span&gt;文）&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;第7章 超越TCP&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着对拥塞控制的探索不断深入，出现了许多新的算法和协议，与我们前几章中所介绍方法的主要不同之处在于，它们大多数都针对特定用例优化，而不是TCP所支持的任意复杂度的异构网络环境。QUIC可能是个例外，其最初目标是提升HTTP的性能，但现在已经发展成为一种通用的TCP替代方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本章将介绍其中某些具体用例，但并没有详尽包含所有可能选项。这些用例包括数据中心TCP性能调优；在较长时间段内仅用剩余容量传输背景流量；非TCP兼容的基于HTTP的web流量优化；以TCP友好的方式支持实时流；支持多路径传输协议；以及具有独特无线电诱导行为的移动蜂窝网络。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.1 数据中心(DCTCP, On-Ramp)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一些针对云数据中心的TCP优化工作，其中之一是&lt;em&gt;数据中心TCP(Data Center TCP)&lt;/em&gt; ，数据中心环境的几个特点使我们可以采用不同于传统TCP的方法，这些特点包括:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据中心内流量的往返时间较小；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据中心交换机中的缓冲区通常也很小；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;所有的交换机都在统一的管理控制之下，因此可以要求满足一定的标准；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大量流量具有较低的时延要求；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这些流量与高带宽流竞争；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该注意的是，DCTCP不仅仅是TCP的一个版本，而是一种改变交换机行为和终端主机对从交换机接收到的拥塞信息的响应的系统设计。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DCTCP的核心观点是，在数据中心环境中使用丢包作为拥塞的主要信号是不够的。当队列已经积累到足以溢出时，低延迟流量已经无法满足其最低需求，因此会对性能产生负面影响。DCTCP使用ECN的一个版本来提供拥塞的早期信号。但是，ECN的原始设计将ECN标记处理得很像一个丢包，并将拥塞窗口缩短一半，而DCTCP采用了一种更精细的方法。DCTCP试图估算遇到拥塞的字节比例，而不是简单判断拥塞是否发生。然后，根据这个估算缩放拥塞窗口。同时标准TCP算法仍然在数据包实际丢失的情况下发挥作用。该方法的设计目的是通过提前对拥塞做出反应来保持队列较短，同时不对空队列做出过度反应，避免牺牲吞吐量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方法的关键挑战是估算遇到拥塞的字节比例。对于每个交换机来说计算都很简单，如果一个包到达，并且交换机看到队列长度(K)超过某个阈值，例如,&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\mathsf{K} &amp;gt;\mathsf{(RTT} \times \mathsf{C)\ /\ 7}&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 8175 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4B&quot; d=&quot;M88 0V694H188V519L189 343L525 694H638L375 419L651 0H541L309 351L188 225V0H88Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(971.8, 0)&quot;&gt;&lt;path data-c=&quot;3E&quot; d=&quot;M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(2027.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M74 250Q74 564 240 733L257 750H333L323 739Q167 573 167 250T323 -239L333 -250H257L240 -233Q74 -63 74 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389, 0)&quot;&gt;&lt;path data-c=&quot;52&quot; d=&quot;M88 0V694H227H259H302Q365 694 399 689T474 663Q528 637 558 595T589 504Q589 482 584 462T569 426T547 396T522 372T495 353T470 338T449 328T434 322L429 320L440 300Q452 280 477 238T523 160L617 1L565 0Q513 0 512 1Q512 2 424 156L337 309H189V0H88ZM492 504Q492 600 367 620Q354 622 271 623H189V385H271Q363 386 388 392Q432 402 462 430T492 504Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1035, 0)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M36 608V688H644V608H518L392 609V0H288V609L162 608H36Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1716, 0)&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M36 608V688H644V608H518L392 609V0H288V609L162 608H36Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4646.8, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(5647, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;43&quot; d=&quot;M59 347Q59 440 100 521T218 654T392 705Q473 705 550 680Q577 670 577 667Q576 666 572 642T564 595T559 571Q515 601 479 613T392 626Q300 626 232 549T164 347Q164 231 229 150T397 68Q453 68 489 80T568 120L581 129L582 110Q584 91 585 71T587 46Q580 40 566 31T502 5T396 -11Q296 -11 218 41T99 174T59 347Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(639, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M221 -73T221 250T65 739L55 750H131L148 733Q314 567 314 250T148 -233L131 -250H55L65 -239Q221 -73 221 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1278, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2F&quot; d=&quot;M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2028, 0)&quot;&gt;&lt;path data-c=&quot;37&quot; d=&quot;M42 570V656H457V577L447 564Q345 439 295 289T244 0V-11H145V12Q160 330 356 550Q360 556 365 561T374 571L208 570H42Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中C是每秒数据包的链路速率，然后交换机设置IP报头中的CE位。该算法避免了RED的复杂性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，接收器为每个流维护一个布尔变量，我们将其表示为&lt;code&gt;DCTCP.CE&lt;/code&gt;，并将其初始值设置为false。当发送ACK报文时，如果&lt;code&gt;DCTCP.CE&lt;/code&gt;为true，接收端会在TCP报头中设置ECE (Echo Congestion Experienced)标志，并且实现了以下状态机来响应每一个收到的数据包:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果设置了CE位，并且&lt;code&gt;DCTCP.CE=False&lt;/code&gt;, 设置&lt;code&gt;DCTCP.CE&lt;/code&gt;为True，并立即发送ACK。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果没有设置CE位，并且&lt;code&gt;DCTCP.CE=True&lt;/code&gt;, 设置&lt;code&gt;DCTCP.CE&lt;/code&gt;为False，并立即发送ACK。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他清空清空忽略CE位。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;其他&quot;情况的非明显后果是，只要收到CE值固定的数据包流，接收端就会每&lt;em&gt;n&lt;/em&gt;个数据包发送一次延迟ACK，延迟ACK已被证明对保持高性能非常重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在每个观察窗口(通常选择近似于RTT的周期)结束时，发送端计算在该窗口期间遇到拥塞的字节的比例，即标记为CE的字节与总传输字节的比率。DCTCP以与标准算法完全相同的方式增加拥塞窗口，但减小窗口的方式与上次观察窗口期间遇到拥塞的字节数成正比。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体来说，引入一个名为&lt;code&gt;DCTCP.Alpha&lt;/code&gt;的新变量并初始化为1，在观察窗口的最后更新如下:&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\mathsf{DCTCP.Alpha} = \mathsf{DCTCP.Alpha} \times&amp;#10;\mathsf{(1 - g) + g} \times \mathsf{M}&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/WmwqjsSBsZLayX7sCuRAiaLPH5PiceZiaqmNAI0PdlC5FXx7Mib1ecUzZQdw4uZhyicoBQoBr90A6nXiasNrwN4ibqKibOA51miauMTAia/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;M&lt;/code&gt;是标记的字节组，&lt;code&gt;g&lt;/code&gt;是估算增益，为常数(由实现设置)，决定了&lt;code&gt;DCTCP.Alpha&lt;/code&gt;随数据包的标记而变化的速度。当出现持续拥塞时，&lt;code&gt;DCTCP.Alpha&lt;/code&gt;接近1，如果持续通畅(没有阻塞)，&lt;code&gt;DCTCP.Alpha&lt;/code&gt;衰减到0。这样对新拥堵反应较小，对持续拥堵反应较大，拥堵窗口的计算如下:&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\mathsf{CongestionWindow} = \mathsf{CongestionWindow} \times \mathsf{(1 - DCTCP.Alpha\ /\ 2)}&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/WmwqjsSBsZLayX7sCuRAiaLPH5PiceZiaqmwztHygAelgcVzBmicr55MFAicsqcbEy6SDPODxy6wcwOicnBe0X1TnoAZEEO1pPfMtf/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上所述，CE标记表明早期且频繁发生的拥塞，但对这种标记的反应比标准TCP更慎重，以避免过度反应导致队列空。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阐述了DCTCP的论文，包括推动其设计的数据中心流量特性的研究，获得了SIGCOMM的&quot;test of time&quot;奖。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;M. Alizadeh, et al. &lt;span&gt;Data Center TCP (DCTCP)&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;. ACM SIGCOMM, August 2010.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自DCTCP以来，已经有相当多关于数据中心TCP优化的研究，一般方法是从网络中引入更复杂的信号，发送方可以使用这些信号来管理拥塞。我们通过详细介绍最近的一项成果On-Ramp来结束对这一用例的讨论，它侧重于所有拥塞控制算法面临的根本问题: 平衡长期流量与瞬态突发流量。On-Ramp采用模块化设计，直接解决了这一冲突，而且不需要依赖来自网络的额外反馈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其主要的观点是，当处于平衡状态的拥塞控制算法遇到严重拥塞并大幅减少窗口(或速率)时，必须决定是否记住之前的均衡状态。这是一个困难的选择，因为这取决于拥堵的持续时间，而拥堵的持续时间很难预测。如果拥塞是暂时的，算法应该记住之前的状态，这样一旦突发流量结束，就可以迅速恢复到原来的均衡状态，避免浪费网络资源。如果由于一个或多个新流的到来造成了持续的拥塞，算法应该忽略之前的状态，以便迅速找到新的均衡。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8615384615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VIsicUOtq1kBDevhlHRYgibdWJO3mvh4qqZODK1273dYfEK6z6fmHBFzrFLr16IZWDAE0oGyaQIu7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;520&quot;/&gt;&lt;figcaption&gt;图41. On-Ramp对数据包传输进行配速，以避免由于突发流量导致的网络排队，补充了传统拥塞控制算法保持长期稳定性和公平性的努力。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其思想是将拥塞控制机制分成两部分，每一部分只关注长期/瞬时流量平衡的一个方面。具体来说，On-Ramp被实现为位于传统TCP拥塞控制算法之下的&quot;垫片(shim)&quot;，如图41所示。On-Ramp处理突发流量(临时填充网络队列)，当测量到&lt;em&gt;单向延迟(OWD, One-Way Delay)&lt;/em&gt; 增长过大(在OWD大于某个阈值)时在发送端临时缓存数据包(而不是占用网络内缓冲区)来试图快速减少排队时延。然后On-Ramp与现有拥塞控制算法合作，努力达成长期流量的平衡。On-Ramp已经被证明可以与包括DCTCP在内的几种拥塞控制算法一起工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;On-Ramp的关键设计是使两个控制决策在各自的时间尺度上独立运行。但为了正常工作，On-Ramp需要精确测量OWD，而OWD又依赖发送方和接收方之间的同步时钟。由于数据中心延迟可以小于几十微秒，发送方和接收方的时钟必须同步到几微秒内。这种高精度的时钟同步传统上需要硬件密集型协议，但On-Ramp利用了一种新的方法，利用协作节点网格中的网络效应来实现纳秒级的时钟同步，而不需要特殊硬件，这使得On-Ramp很容易部署。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;S. Liu, et al. &lt;span&gt;Breaking the Transience-Equilibrium Nexus: A New Approach to Datacenter Packet Transport&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;. Usenix NSDI ‘21. April 2021.&lt;br/&gt;Y. Geng, et al. &lt;span&gt;Exploiting a Natural Network Effect for Scalable, Fine-grained Clock Synchronization&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;. Usenix NSDI ‘18, April 2018.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.2 背景传输(LEDBAT)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与低延迟数据中心环境形成鲜明对比的是，许多应用程序需要在很长一段时间内传输大量数据，BitTorrent和软件更新等文件共享协议就是类似例子。LEDBAT(Low Extra Delay Background Transport)就是为了解决这一用例的问题的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;改进TCP拥塞控制算法的各种努力的共同主题之一是与标准TCP共存。众所周知，算法可以通过更积极的响应拥塞而&quot;超越&quot;TCP。因此，隐含的假设是新的拥塞控制算法应该与标准TCP一起评估，以确保不只是从不那么激进的TCP实现中窃取带宽。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LEDBAT采用了相反的思路，它创建了一个故意不像TCP那么咄咄逼人的拥塞控制协议。其思想是利用链路不拥塞时可用的带宽，但在其他标准流到达时，迅速收回流量并将带宽留给其他流。此外，顾名思义，与TCP填充瓶颈链路时的典型行为不同，LEDBAT尽量不触发明显的排队延迟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与TCP Vegas一样，LEDBAT的目标是在拥塞严重到足以造成丢包之前检测到它的发生。然而，LEDBAT采用了一种不同的方法来进行，即通过单向延迟测量作为主要输入参数。这是一个相对新颖的方法，在一个具有合理精度但不完全同步的时钟被认为是常态的时代是有意义的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了计算单向延迟，发送方在每个传输包中放入时间戳，接收方将其与本地系统时间进行比较，以测量包所经历的延迟，然后将这个计算值发送回发送方。即使时钟不是精确同步的，这种延迟的变化也可以用来推断队列的堆积。假设时钟没有较大的相对&quot;偏差&quot;，即它们的相对偏移量不会变化太快，这在实践中是一个合理的假设。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送端监测测量到的延迟，并估算固定组件(可能是由于光速和其他固定延迟)是在某一(可配置的)时间间隔内看到的最低值。排除时间最久的估算，从而允许改变路由路径并改变固定延迟。任何超过这个最小值的延迟都被认为是由于排队引起的延迟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建立&quot;基础&quot;延迟后，发送方从测量延迟中减去该延迟以获得排队延迟，并可以选择性的使用滤波算法来减少估算中的短期噪声。然后将这个估计的排队延迟与目标延迟进行比较，当延迟低于目标时，允许增大拥塞窗口，当延迟高于目标时，减小拥塞窗口，其增大和减小的速度与距离目标的距离成正比，增大速度被限制为不超过标准TCP窗口在增长阶段的增长速度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LEDBAT在收到ACK时设置&lt;code&gt;CongestionWindow&lt;/code&gt;的算法总结如下:&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\mathsf{CongestionWindow}\  = \mathsf{CongestionWindow + (GAIN \times off\_target \times bytes\_newly\_acked \times MSS / CongestionWindow)}&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/WmwqjsSBsZLayX7sCuRAiaLPH5PiceZiaqmxSdYjicbrojBMVmuq93DudHDAJwkf1W1dXichcNjCpXzvB1XuDkkCxgplRxCEbVKLq/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，&lt;code&gt;GAIN&lt;/code&gt;取值为0到1的配置参数，&lt;code&gt;off_target&lt;/code&gt;是测量的排队延迟和目标之间的差距，表示为目标的一个分数，&lt;code&gt;bytes_newly_acked&lt;/code&gt;是当前ACK中确认的数据包字节数。因此，测量延迟相对目标越低，拥塞窗口增长越快，但绝不会超过每个RTT一个&lt;code&gt;MSS&lt;/code&gt;。减小速度与队列长度超过目标的距离成正比。&lt;code&gt;CongestionWindow&lt;/code&gt;在响应丢包、超时和长空闲期时也会有所减少，这与TCP非常相似。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，LEDBAT可以很好的利用空闲的可用带宽，同时避免创建长队列，其目标是将时延保持在目标附近(这是一个可配置的数字，建议在100毫秒量级)。如果其他流量开始与LEDBAT流竞争，LEDBAT将会后退，从而防止队列变长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;LEDBAT被IETF定义为实验协议，允许相当大程度的实现灵活性，例如根据延迟估算和一系列配置参数，可以在RFC中找到更多细节。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;S. Shalunov, et al. &lt;span&gt;Low Extra Delay Background Transport (LEDBAT)&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;. RFC 6817, December 2012.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.3 HTTP性能(QUIC)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP自20世纪90年代万维网发明以来就一直存在，一开始就运行在TCP上。最初版本HTTP/1.0由于使用TCP的方式存在大量性能问题，例如，每个对象的请求都需要建立新的TCP连接，然后在返回应答后关闭。早期提出的HTTP/1.1的目的是更好的利用TCP。TCP继续被HTTP使用了20多年。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上，TCP作为一种支持Web的协议仍然存在问题，特别是因为可靠、有序的字节流并不完全是Web流量的正确模型。特别是，由于大多数网页包含许多对象，因此能够并行请求许多对象是有意义的，但TCP只提供单一字节流。如果一个包丢失，TCP会等待重传这个数据包，然后再继续，然而HTTP可以很高兴的接收其他不受单个丢包影响的对象。多TCP连接似乎是一个解决方案，但也有其自身缺陷，包括缺乏连接之间拥塞的共享信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高延迟无线网络的兴起等其他因素使得单一设备有可能使用多个网络(例如，Wi-Fi和蜂窝网络)。同时，加密、身份验证等越来越多被使用，也促使人们认识到HTTP的传输层将从新方法中受益。为满足这一需求而出现的协议是QUIC。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;QUIC由谷歌在2012年提出，随后被提议为IETF标准。它已经得到了大量的部署，出现在大多数Web浏览器和流行网站中，甚至开始用于非HTTP应用程序。可部署性是协议设计者考虑的关键因素。在QUIC中有很多可选部分，其规范跨越了三个RFC，长达几百页，但在这里主要关注其拥塞控制方法，其中包含了我们在本书中看到的许多观点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和TCP一样，QUIC在传输中建立拥塞控制，但它认识到没有完美的拥塞控制算法。相反，它假设不同的发送者可能使用不同的算法。QUIC规范中的基准算法类似于TCP NewReno，但发送方可以单方面选择不同的算法，如CUBIC。QUIC提供了所有的机制来检测丢包，以支持各种拥塞控制算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与TCP相比，QUIC的许多设计特性使丢包和拥塞检测更加健壮。例如，无论是第一次发送还是重传，TCP对一个数据包使用相同的序列号，而QUIC序列号(称为包号)是严格递增的。序列号越大表示报文发送的时间越晚，越低表示报文发送的时间越早，这意味着始终有可能区分第一次传输的数据包和由于丢包或超时重传的数据包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还要注意，TCP序列号指的是传输字节流中的字节，而QUIC序列号指的是整个包。由于QUIC序列号空间足够大(高达2^62 - 1)，可以避免循环问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;QUIC协议支持选择性确认，在TCP SACK选项中可以支持确认三个以上数据包范围，从而提高了高丢包环境性能，只要成功接收了部分包，就可以向前推进。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与TCP快速恢复所依赖的重复ACK相比，QUIC采用了一种更可靠的方法来判断丢包。该方法是独立于QUIC开发的，名为RACK-TLP: 最近确认和尾丢包探针(Recent Acknowledgments and Tail Loss Probes)。其关键观点为，当发送方在丢包之后没有发送足够的数据来触发重复ACK时，或者当重传的数据包本身丢失时，重复ACK无法触发丢包恢复。相反，如果实际上没有丢包，包的重排序也可能触发快速恢复。QUIC采用了RACK-TLP的思想，通过两个机制来解决这个问题:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;收到包的时候，如果一个序列号更高的包已经被确认，并且这个包在&quot;过去足够长的时间&quot;被发送，或者在确认包之前有K个包(K是一个参数)，那么这个包被认为是丢失的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在等待ACK到达的&quot;探测超时时间间隔&quot;之后发送探测包，以触发ACK，从而提供关于丢失包的信息。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个机制是确保少量包被重新排序不会被解释为丢包事件。K建议初始设置为3，但如果有更严重的无序情况，可以更新K。&quot;过去足够长的时间&quot;的定义比测量的RTT稍微长一点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个机制是确保即使数据包没有生成重复ACK，也会发送探测数据包来引出进一步的ACK，从而暴露接收到的数据包流中的缺口。通过使用估算RTT及其方差，将&quot;探测超时间隔&quot;计算为足以解释ACK可能遇到的所有延迟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;QUIC是传输协议领域最有趣的发展。TCP的许多限制几十年来一直为人所知，但QUIC代表了迄今为止最成功的努力之一，它在设计空间中指明了一个不同的点，基于几十年来的宝贵经验，将TCP拥塞控制提炼为基准规范。因为QUIC的灵感来自于HTTP和Web的经验(在TCP出现很久之后才出现)，提供了关于分层设计和互联网演变中不可预见后果的有趣案例研究。还有更多内容可以介绍，关于QUIC的权威参考是RFC 9000，但是拥塞控制在单独的RFC 9002中涉及。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;J. Iyengar and I. Swett, Eds. &lt;span&gt;QUIC Loss Detection and Congestion Control&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;. RFC 9002, May 2021.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.4 TCP友好协议(TCP-Friendly Protocols, TFRC)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正如本书提到的，因为TCP在检测到拥塞时以各种形式退出，因此很容易构建出性能优于TCP的传输协议。任何不通过降低发送速率来响应拥塞的协议，最终都会比它竞争的任何TCP或TCP类流量获得更大的瓶颈链路份额。在有限资源下，这可能会导致拥塞崩溃，而在TCP拥塞控制刚被开发出来时，拥塞崩溃开始变得很普遍。因此，业界有强烈的兴趣确保互联网上的绝大多数流量在某种意义上是&quot;TCP友好的&quot;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们使用&quot;TCP友好&quot;这个术语时，是在说我们期望得到与TCP类似的拥塞响应。LEDBAT可以被认为&quot;比TCP友好&quot;，因为在第一个延迟提示时就减少窗口大小，它比TCP更积极的在拥塞时退后。但是有一类应用对于TCP友好需要更多的思考，因为它们不使用基于窗口的拥塞方案，这就是包括流媒体在内的典型&quot;实时&quot;应用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如视频流和电话等多媒体应用可以通过改变编码参数来调整发送速率，在带宽和质量之间进行权衡。但是，不可能突然大幅降低发送速率而不影响质量，而且它们通常需要在有限的质量级别中进行选择。如3.1节所讨论的，这些考虑导致其采用基于速率的方法，而不是基于窗口的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于这些应用来说，TCP友好的方法是尝试选择一个与TCP在类似条件下实现的发送速率相似的发送速率，但要以一种防止速率波动太大的方式进行。支持这一想法的是多年来对TCP吞吐量建模的研究。在定义TFRC标准的RFC 5348中给出了TCP吞吐量方程的简化版本，其中一些变量设置为推荐值，目标传输速率X(比特/秒)的方程为:&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\mathsf{X} = \frac{s}{R\times\sqrt{2p/3} + 12\sqrt{3p/8}\times p&amp;#10;\times (1 + 32 p^2)}&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/WmwqjsSBsZLayX7sCuRAiaLPH5PiceZiaqm74RD7YdEsqV9CRc1PrMib0lqCOkSGA7wdyvlCSpRjYgspNRFZrNkuW8NHiaI45zVv5/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;em&gt;s&lt;/em&gt;是分片大小(不包括IP和传输层头域)；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;em&gt;R&lt;/em&gt;为RTT，单位为秒；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;em&gt;P&lt;/em&gt;是&quot;丢包事件&quot;的数量，体现为占传输数据包的比例。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然这个公式的推导本身就很有趣(参见下面的第二个参考)，但这里的关键思想是，如果我们知道RTT和路径的丢包率，就能很好的知道TCP连接能够提供多少带宽。因此，TFRC试图引导无法实现基于窗口的拥塞控制算法的应用程序在相同的条件下达到与TCP相同的吞吐量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;唯一需要解决的问题是&lt;em&gt;p&lt;/em&gt;和&lt;em&gt;R&lt;/em&gt;的度量，然后决定应用程序应该如何响应X的变化。与其他协议一样，TFRC使用时间戳来比TCP最初更准确的度量RTT。包序列号用于确定接收端丢包，连续丢包被分组为单个丢包事件。从这些信息中可以计算出损包事件概率&lt;em&gt;p&lt;/em&gt;，然后由接收端反馈给发送端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对速率变化的确切响应方式当然取决于应用程序本身，其基本思想是，应用程序可以在一组编码速率中选择能够适应TFRC规定的速率的最高质量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然TFRC的概念可靠，但由于若干原因，其部署很有限。一个原因是以&lt;em&gt;DASH(Dynamic Adaptive Streaming over HTTP)&lt;/em&gt; 出现了针对某些类型的流通信的更简单的解决方案。DASH只适用于非实时媒体(例如看电影)，但事实证明，这在整个互联网上的媒体流量中占很大比例，事实上在所有互联网流量中占比也很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DASH让TCP(或者QUIC)负责拥塞控制，应用程序测量TCP正在交付的吞吐量，然后相应调整视频流的质量，以避免接收端饥饿。这种方法已经被证明适合于视频娱乐，但是由于依赖于接收端有适度的大量缓冲来平滑TCP吞吐量的波动，并不真正适合于交互式音视频领域。DASH的关键实现之一是可以对不同带宽要求的视频进行多质量级编码，并提前存储在流媒体服务器上。然后，一旦观察到的网络吞吐量下降，服务器就会下降到较低质量的流，然后在条件允许的情况下再上升到较高质量的流。客户端可以向服务器发送信息，比如它还有多少缓冲视频等待播放，以帮助服务器选择合适的质量和带宽流。这种方法的成本是服务器上额外的媒体存储，但在现代流媒体视频时代，这种成本已经变得相当廉价。请注意，这里的&quot;服务器&quot;可能是CDN(内容分发网络)中的一个节点。因此，视频流可以利用客户端和服务它的CDN节点之间可用带宽的任何改进，从而传输更高质量级别的媒体。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TFRC的另一个限制是，它使用丢包作为主要拥塞信号，但不响应丢包之前的延迟。虽然在TFRC的研究中这是最先进的技术，但TCP拥塞控制领域现在已经把延迟考虑在内了，比如TCP Vegas和BBR(参见第5章)。当我们考虑到真正需要一些别的支持(不是DASH)的多媒体应用程序正是那些对延迟敏感的应用程序时，这就特别有问题了。由于这个原因，在撰写本文时，仍在继续为实时流量定义TCP友好的拥塞控制标准。IETF RMCAT (RTP Media Congestion Avoidance Techniques)工作组是这项工作的中心。因此，下面的TFRC规范并不是最后的工作，但为如何实现TCP友好协议提供了有用的参考。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;S. Floyd, M. Handley, J. Padhye, and J. Widmer. &lt;span&gt;TCP Friendly Rate Control (TFRC): Protocol Specification&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;. RFC 5348, September 2008.&lt;br/&gt;J. Padhye, V. Firoiu, D. Towsley, and J. Kurose. &lt;span&gt;Modeling TCP Throughput: A Simple Model and its Empirical Validation&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;. ACM SIGCOMM, September 1998&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.5 多路径传输&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然连接到互联网的早期主机只有一个网络接口，但现在在一个设备上有至少两个不同网络的接口很常见，最常见的例子是具有蜂窝和WiFi接口的移动电话。另一个例子是数据中心，服务器经常会分配多个网络接口，以提高容错能力。许多应用程序一次只使用一个可用的网络，但同时使用多个接口可以提高性能。这种多路径通信的思想已经存在了几十年，并导致了IETF对TCP扩展的标准化，以支持利用成对主机之间的多路径的端到端连接，这被称为&lt;em&gt;MPTCP(Multipath TCP)&lt;/em&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一对主机同时通过两条或多条路径发送流量对拥塞控制来说有重要意义。例如，如果两条路径共享一个瓶颈链接，那么每个路径一个TCP连接的简单实现将获得两倍于标准TCP连接的瓶颈带宽份额，MPTCP的设计者在保持多路径好处的同时正着手解决这种潜在的不公平。MPTCP提出的拥塞控制方法同样适用于其他传输协议，如QUIC。多路径传输拥塞控制的高级目标是:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在最佳可用路径上执行效果至少与单一路径流一样好。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不要从任何路径中获取比单一路径流更多的资源。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从最拥堵的路径上移除更多流量，与前两个目标一致。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;值得注意的是，对其他TCP流公平的想法有一些微妙之处，我们在第3.2节中讨论过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然多路径算法的细节涉及到复杂的计算，但所采取的总体方法比较简单。拥塞控制算法在每个子流的基础上大致模拟TCP，同时试图确保上述三个目标都得到满足。该算法的核心是使用以下公式在子流上接收到ACK时增加每个子流的拥塞窗口大小。&lt;/p&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;\mathsf{MIN} (\frac{\alpha \times \mathsf{BytesAcked} \times \mathsf{MSS_{i}}}{\mathsf{CongestionWindowTotal}}, \frac{\mathsf{BytesAcked} \times \mathsf{MSS_{i}}}{\mathsf{CongestionWindow_{i}}} )&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/WmwqjsSBsZLayX7sCuRAiaLPH5PiceZiaqmAkCtfshAdCHK0qcAy93J8TGVzARwuP6d3gu325hYQrnmicvfzibcPlAXAstpxryPpu/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;CongestionWindowTotal&lt;/strong&gt;是所有子流拥塞窗口的总和，&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;\mathsf{CongestionWindow_{i}}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -705 8219 911&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;43&quot; d=&quot;M59 347Q59 440 100 521T218 654T392 705Q473 705 550 680Q577 670 577 667Q576 666 572 642T564 595T559 571Q515 601 479 613T392 626Q300 626 232 549T164 347Q164 231 229 150T397 68Q453 68 489 80T568 120L581 129L582 110Q584 91 585 71T587 46Q580 40 566 31T502 5T396 -11Q296 -11 218 41T99 174T59 347Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(639, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 222Q28 323 95 391T244 460Q275 460 281 459Q364 445 417 377T471 219Q471 124 408 57T250 -10Q158 -10 93 57T28 222ZM377 230Q377 277 364 310T328 358T287 379T248 385Q233 385 219 382T186 369T155 342T132 297T122 230Q122 146 159 108T250 69H253Q263 69 274 70T305 81T339 106T365 154T377 230Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1139, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M160 392Q214 446 283 454Q285 454 292 454T303 455H306Q417 455 438 354Q442 331 443 164V0H350V157Q349 315 348 320Q334 378 259 378H253Q224 378 204 358Q180 334 173 301T165 209Q165 198 165 172T166 129V0H73V450H160V392Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1656, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M55 286Q55 357 105 406T224 455Q280 455 323 421L322 423L318 427Q318 428 339 434T396 448T465 455H471L478 416L485 377Q484 377 474 379T445 383T401 385Q397 385 391 385T381 384L362 383L357 387Q358 386 364 375T375 354T384 325T389 287Q389 217 340 168T221 119Q178 119 138 142Q133 145 131 143Q125 131 125 117Q125 82 155 72L227 71Q230 71 251 71T280 71T310 69T343 65T373 57T403 46T428 30T449 7Q471 -26 471 -62V-71Q471 -136 384 -178Q326 -206 250 -206Q159 -206 102 -172T30 -92Q28 -84 28 -68T31 -37T40 -12T52 7T64 21T75 31T82 38Q60 68 60 106Q60 145 80 180L86 189L80 199Q55 240 55 286ZM304 233T304 287T279 362T220 383Q189 383 165 361T140 287Q140 243 161 217T220 191Q253 191 278 212ZM250 -134Q298 -134 331 -122T375 -96T387 -69Q387 -21 306 -7Q288 -5 216 -5Q161 -5 153 -7Q146 -9 139 -13T122 -31T113 -66Q113 -75 113 -80T127 -97T166 -121Q203 -134 250 -134Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2156, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M28 226Q28 329 91 395T235 461Q258 461 279 456T325 436T368 397T399 332T415 238V219H113V215Q113 163 151 114T248 65Q273 65 298 70T341 82T373 96T396 108L403 113Q403 106 406 76T409 38Q409 34 408 33T393 24Q325 -10 252 -10Q155 -10 92 59T28 226ZM340 289L338 297Q335 305 333 310T327 326T317 343T304 358T286 372T263 381T233 385Q212 385 193 376T162 353T140 325T127 301T123 289H340Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2600, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M33 326Q33 376 60 408T117 450T175 460H190Q245 460 272 454T345 429Q345 428 338 388L331 349Q278 386 188 386H183Q119 386 119 336Q119 307 142 295T210 276T278 256Q360 213 360 130Q360 108 354 88T332 43T281 5T195 -10Q152 -10 111 1T49 22T28 35Q29 36 32 56T39 95T43 115T51 110T72 99T102 85T143 73T193 68Q274 68 274 123Q274 152 248 167Q234 178 187 186T115 207Q66 229 46 273Q33 298 33 326Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2983, 0)&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M333 27Q333 24 314 16T257 -1T184 -10H172Q146 -10 128 14T105 58T99 91Q95 113 95 251V371H18V444H98V571H182V444H316V371H182V253Q183 128 189 104Q199 68 234 68Q277 72 314 98Q315 93 323 61T333 27Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3344, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M67 576V680H171V576H67ZM74 0V444H164V0H74Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3583, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 222Q28 323 95 391T244 460Q275 460 281 459Q364 445 417 377T471 219Q471 124 408 57T250 -10Q158 -10 93 57T28 222ZM377 230Q377 277 364 310T328 358T287 379T248 385Q233 385 219 382T186 369T155 342T132 297T122 230Q122 146 159 108T250 69H253Q263 69 274 70T305 81T339 106T365 154T377 230Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4083, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M160 392Q214 446 283 454Q285 454 292 454T303 455H306Q417 455 438 354Q442 331 443 164V0H350V157Q349 315 348 320Q334 378 259 378H253Q224 378 204 358Q180 334 173 301T165 209Q165 198 165 172T166 129V0H73V450H160V392Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4600, 0)&quot;&gt;&lt;path data-c=&quot;57&quot; d=&quot;M115 694Q115 693 156 550T233 266T270 90L271 85Q272 86 272 92Q272 153 405 616L427 694H524L553 590Q672 174 681 95L682 84L684 95Q689 138 728 287T803 563T841 692Q841 694 885 694T929 693Q929 691 829 346L730 0H679L628 1L606 75Q478 524 470 600L469 611L467 600Q458 518 338 101L310 0H213L114 346Q14 691 14 693Q14 694 64 694H115Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5544, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M67 576V680H171V576H67ZM74 0V444H164V0H74Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5783, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M160 392Q214 446 283 454Q285 454 292 454T303 455H306Q417 455 438 354Q442 331 443 164V0H350V157Q349 315 348 320Q334 378 259 378H253Q224 378 204 358Q180 334 173 301T165 209Q165 198 165 172T166 129V0H73V450H160V392Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6300, 0)&quot;&gt;&lt;path data-c=&quot;64&quot; d=&quot;M33 224Q33 321 81 388T197 455Q277 455 342 414L351 408V694H441V0H348V44L338 37Q278 -10 198 -10Q177 -10 168 -8Q99 11 62 90Q33 148 33 224ZM348 337Q307 378 263 378Q260 378 256 378T251 379Q239 379 223 374T182 355T142 305T126 220Q126 90 225 67Q231 66 250 66H255Q306 66 342 115L348 124V337Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6817, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M28 222Q28 323 95 391T244 460Q275 460 281 459Q364 445 417 377T471 219Q471 124 408 57T250 -10Q158 -10 93 57T28 222ZM377 230Q377 277 364 310T328 358T287 379T248 385Q233 385 219 382T186 369T155 342T132 297T122 230Q122 146 159 108T250 69H253Q263 69 274 70T305 81T339 106T365 154T377 230Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(7317, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;77&quot; d=&quot;M14 444H105L108 434Q192 160 200 74V65L201 75Q206 144 282 399L296 444H381L399 381Q480 112 480 69L481 70Q481 113 562 386L580 444H668L534 1L483 0H432L429 10Q343 294 338 367L337 377Q336 375 336 370Q336 340 313 250T269 88T245 11L242 0H195L148 1L14 444Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(683, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M67 576V680H171V576H67ZM74 0V444H164V0H74Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 是子流&lt;em&gt;i&lt;/em&gt;的拥塞窗口。MIN的第二个参数模拟了标准TCP将获得的增量，从而确保子流不会比TCP更激进(目标2)。第一个参数使用变量α来确保总体上多路径流获得与使用其最佳可用路径(目标1)相同的吞吐量。RFC 6356介绍了计算α的细节。需要注意的是，因为没有丢包，因此非拥塞路径能够比拥塞路径增加更多的拥塞窗口，随着时间的推移，更多流量会移动到非拥塞路径上(目标3)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然回头看这很简单，但正如Wischik和他的同事在NSDI的一篇论文中介绍的那样，正是基于许多有趣的分析才帮助他们找到了正确的方法。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;D. Wischik, C. Raiciu, A. Greenhalgh and M. Handley. &lt;span&gt;Design, Implementation and Evaluation of Congestion Control for Multipath TCP&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;. NSDI, April 2011.&lt;br/&gt;C. Raiciu, M. Handley and D. Wischik. &lt;span&gt;Coupled Congestion Control for Multipath Transport Protocols&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;. RFC 6356, October 2011.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.6 移动蜂窝网络&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们以一个一直受到研究团体关注的用例作为总结: 拥塞控制和移动蜂窝网络之间的相互作用。从历史上看，TCP/IP互联网和移动蜂窝网络是独立发展的，自3G宽带服务引入以来，后者充当了端到端TCP连接的&quot;最后一英里&quot;。随着5G的推出，我们可以预期移动网络将在提供互联网连接方面发挥越来越重要的作用，其如何影响拥塞控制将会受到越来越多的关注。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然移动无线连接可以被视为与通过互联网的端到端路径上的任何其他跳没有什么不同，但由于历史原因，它被视为一种特殊情况，端到端路径在逻辑上被划分为图42所示的两个段: 通过互联网的有线段和通过无线接入网(RAN)的无线最后一跳。这种&quot;特殊情况&quot;的观点是有理由的，因为(1)由于无线电频谱的稀缺，无线链路通常是瓶颈；(2)由于设备移动性和无线电干扰的综合效果，RAN中可用带宽可能是高度可变的；并且(3)当设备从一个蜂窝移动到另一个蜂窝时，由给定基站提供服务的设备数量会波动。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.27155963302752295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VIsicUOtq1kBDevhlHRYgibddQTHdicJiau5htQ5cBWuhtA48icicI5QpxZ7G3vVkHjaCTzEvZ1gwveD0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1090&quot;/&gt;&lt;figcaption&gt;图42. 包括最后一跳无线链路的端到端路径，其中基站缓冲数据包等待通过无线接入网(RAN)传输。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然RAN内部很大程度上是封闭和专有的，但研究人员通过实验观察到，在边缘有明显的缓冲，这可能是为了吸收预期的无线电链路争用，同时在容量打开时保持足够的工作负载。正如Haiqing Jiang和他的同事在2012年CellNet研讨会论文中指出的那样，这种大缓冲区对于TCP拥塞控制是有问题的，会导致发送端超出无线电链路上的实际可用带宽，并且在这个过程中，会引入显著的延迟和抖动。这是第6.3节中确定的缓冲膨胀问题的另一个示例。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;H. Jiang, Z. Liu, Y. Wang, K. Lee and I. Rhee. &lt;span&gt;Understanding Bufferbloat in Cellular Networks&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt; ACM SIGCOMM Workshop on Cellular Networks, August 2012.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Jiang的论文提出了可能的解决方案，并普遍观察到，像Vegas这样基于延迟的方法比Reno或CUBIC这样基于丢包的方法表现更好，但近十年来，这个问题在很大程度上一直没有得到解决。随着基于开源软件的RAN实现的承诺正在逐步兴起，可能很快就可以采取跨层方法，由RAN提供接口，使基站内部发生的事情对更高层次的协议栈(例如，在第6章中描述的AQM机制)可见。Xie Yi和Jamieson最近的研究表明，这种方法可能是有效的，尽管他们的实现使用终端设备反馈，而不是让RAN直接参与。无论如何实现，其想法是让接收方明确告诉发送方在最后一跳上有多少带宽可用，然后发送方必须判断实际瓶颈是在最后一跳还是互联网路径上的其他点上。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;Y. Xie, F. Yi, and K. Jamieson. &lt;span&gt;PBE-CC: Congestion Control via Endpoint-Centric, Physical-Layer Bandwidth Measurements&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;. SIGCOMM 2020.&lt;br/&gt;L. Peterson and O. Sunay. &lt;span&gt;5G Mobile Networks: A Systems Approach&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;. January 2020.&lt;br/&gt;L. Peterson, C. Cascone, B. O’Connor, T. Vachuska, and B. Davie. &lt;span&gt;Software-Defined Networks: A Systems Approach&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;. November 2021.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;蜂窝网络成为TCP拥塞控制新挑战的另一个方面是，链路带宽不是恒定的，而是随每个接收端所经历的信噪比的函数而变化。正如BBR作者所指出的，这个无线链路的调度器(目前是不透明的)可以使用给定客户端的队列数据包数量作为其调度算法的输入，因此构建队列的&quot;好处&quot;可以增加调度器提供的带宽。BBR试图在其设计中解决这一问题，确保具有足够的侵略性，至少在无线链路缓冲区中缓存一些包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;撇开过去的研究不谈，一个很有趣的问题是，无线连接未来是否仍将保持其独特性。如果从移动网络运营商的角度看，那么目标始终是在大范围变化的条件下最大限度利用稀缺的无线电频谱，使用深度队列将工作负载保持在尽可能高的水平是一种经过验证的方法。当宽带连接是新的服务，语音和文本是主要用例时，这当然是有意义的，但今天的5G需要提供良好的TCP性能，重点应该放在端到端goodput和最大化吞吐量/延迟比(即在第3.2节讨论的功率曲线)。但是有改进的机会吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们相信这个问题的答案是肯定的。除了提供对前面提到的RAN调度器和队列的更多可见性之外，还有三个其他因素可能会改变这个领域。首先，5G部署可能会支持网络切片，这是一种隔离不同类别流量的机制，意味着每个切片都有自己的队列，可以按照特定于流量的方式进行调整和调度。其次，小型基站的普及可能会减少在给定基站上争夺带宽的流量数量，这将如何影响调度器最大化频谱利用率还有待观察。第三，通过附近的边缘云而不是互联网为5G连接设备提供服务将变得越来越普遍，这意味着端到端TCP连接将有更短的往返时间，将使拥塞控制算法对RAN中可用容量的变化更敏感。当然，没人能保证未来如何发展，但所有这些因素都应该为未来调整拥塞控制算法提供充足的机会。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;附录&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于拥塞控制的研究论文非常广泛，本书只引用了一小部分。这里收集了更全面的参考书目，(目前)根据书中涉及的主要主题组织。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们邀请社区帮助保持书目的完整和更新。如果提供额外的引用或修复错误，请提交&lt;span&gt;Pull Request到GitHub&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;。如果对如何改进书目的组织方式提出建议，&lt;span&gt;请向GitHub发布Issue&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;基础&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;队列分析&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;L. Kleinrock. &lt;span&gt;Queueing Systems, Volume 2&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt;. Wiley &amp;amp; Sons, May 1976.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;V. Paxson and S. Floyd. &lt;span&gt;Wide-Area Traffic: The Failure of Poisson Modeling&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;. IEEE/ACM Transactions on Networking, June 1995.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;W. Leland et al, &lt;span&gt;On the self-similar nature of Ethernet traffic&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;. ACM SIGCOMM ‘93 Symposium, August 1993.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;J. Gettys. &lt;span&gt;Bufferbloat: Dark Buffers in the Internet&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt;. IEEE Internet Computing, April 2011.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;理论基础&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;M. Mathis, J. Semke, J. Mahdavi, and T. Ott. &lt;span&gt;The Macroscopic Behavior of the TCP Congestion Avoidance Algorithm&lt;/span&gt;&lt;sup&gt;[21]&lt;/sup&gt;. SIGCOMM CCR, 27(3), July 1997.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;F. Kelly. &lt;span&gt;Charging and Rate Control for Elastic Traffic&lt;/span&gt;&lt;sup&gt;[22]&lt;/sup&gt;. European Transactions on Telecommunications, 8:33–37, 1997.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;S. Athuraliya and S. Low. &lt;span&gt;An Empirical Validation of a Duality Model of TCP and Active Queue Management Algorithms&lt;/span&gt;&lt;sup&gt;[23]&lt;/sup&gt;. Proceedings of the Winter Simulation Conference, 2001.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;R. Jain and K. K. Ramakrishnan. &lt;span&gt;Congestion Avoidance in Computer Networks with a Connectionless Network Layer: Concepts, Goals and Methodology&lt;/span&gt;&lt;sup&gt;[24]&lt;/sup&gt;. Computer Networking Symposium, April 1988.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;评估标准&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;R. Jain, D. Chiu, and W. Hawe. &lt;span&gt;A Quantitative Measure of Fairness and Discrimination for Resource Allocation in Shared Computer Systems&lt;/span&gt;&lt;sup&gt;[25]&lt;/sup&gt;. DEC Research Report TR-301, 1984.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Bob Briscoe. &lt;span&gt;Flow Rate Fairness: Dismantling a Religion&lt;/span&gt;&lt;sup&gt;[26]&lt;/sup&gt;. ACM SIGCOMM CCR, April 2007.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;R. Ware, et al. &lt;span&gt;Beyond Jain’s Fairness Index: Setting the Bar for the Deployment of Congestion Control Algorithms&lt;/span&gt;&lt;sup&gt;[27]&lt;/sup&gt;. ACM SIGCOMM HotNets. November 2019.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;架构&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;J. Saltzer, D. Reed, and D. Clark. &lt;span&gt;End-to-End Arguments in System Design&lt;/span&gt;&lt;sup&gt;[28]&lt;/sup&gt;. ACM Transactions on Computer Systems, Nov. 1984.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;D. Clark, &lt;span&gt;The Design Philosophy of the DARPA Internet Protocols&lt;/span&gt;&lt;sup&gt;[29]&lt;/sup&gt;. ACM SIGCOMM, 1988.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;S. Jain, et al. &lt;span&gt;B4: Experience with a Globally-Deployed Software Defined WAN&lt;/span&gt;&lt;sup&gt;[30]&lt;/sup&gt;. ACM SIGCOMM, August 2013.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;J. Perry, et al. &lt;span&gt;Fastpass: A Centralized “Zero-Queue” Datacenter Network&lt;/span&gt;&lt;sup&gt;[31]&lt;/sup&gt;. ACM SIGCOMM, August 2014.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通用算法&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;V. Jacobson. &lt;span&gt;Congestion Avoidance and Control&lt;/span&gt;&lt;sup&gt;[32]&lt;/sup&gt;. ACM SIGCOMM ‘88 Symposium, August 1988.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;J. Hoe. &lt;span&gt;Improving the start-up behavior of a congestion control scheme for TCP&lt;/span&gt;&lt;sup&gt;[33]&lt;/sup&gt;. ACM SIGCOMM ‘96 Symposium. August 1996.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;L. Brakmo, S. O’Malley, and L. Peterson &lt;span&gt;TCP Vegas: New Technique for Congestion Detection and Avoidance&lt;/span&gt;&lt;sup&gt;[34]&lt;/sup&gt;. ACM SIGCOMM ‘94 Symposium. August 1994. (Reprinted in IEEE/ACM Transactions on Networking, October 1995).&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;S. Low, L. Peterson, and L. Wang. &lt;span&gt;Understanding TCP Vegas: A Duality Model&lt;/span&gt;&lt;sup&gt;[35]&lt;/sup&gt;. Journal of the ACM, Volume 49, Issue 2, March 2002.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;S. Ha, I. Rhee, and L. Xu. &lt;span&gt;CUBIC: a new TCP-friendly high-speed TCP variant&lt;/span&gt;&lt;sup&gt;[36]&lt;/sup&gt;. ACM SIGOPS Operating Systems Review, Volume 42, Issue 5, July 2008.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;N. Cardwell, Y. Cheng, C. S. Gunn, S. Yeganeh, V. Jacobson. &lt;span&gt;BBR: Congestion-based Congestion Control&lt;/span&gt;&lt;sup&gt;[37]&lt;/sup&gt;. Communications of the ACM, Volume 60, Issue 2, February 2017.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B. Briscoe, et al. &lt;span&gt;Implementing the “Prague Requirements” for Low Latency Low Loss Scalable Throughput (L4S)&lt;/span&gt;&lt;sup&gt;[38]&lt;/sup&gt;. Linux NetDev 0x13 Conference, March 2019.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;主动队列管理&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;K.K. Ramakrishnan and R. Jain. &lt;span&gt;A Binary Feedback Scheme for Congestion Avoidance in Computer Networks with a Connectionless Network Layer&lt;/span&gt;&lt;sup&gt;[39]&lt;/sup&gt;. ACM SIGCOMM, August 1988.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;S. Floyd and V. Jacobson &lt;span&gt;Random Early Detection (RED) Gateways for Congestion Avoidance&lt;/span&gt;&lt;sup&gt;[40]&lt;/sup&gt;. IEEE/ACM Transactions on Networking. August 1993.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;R. Braden, et al. &lt;span&gt;Recommendations on Queue Management and Congestion Avoidance in the Internet&lt;/span&gt;&lt;sup&gt;[41]&lt;/sup&gt;. RFC 2309, April 1998.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;K. Ramakrishnan, S. Floyd, and D. Black. &lt;span&gt;The Addition of Explicit Congestion Notification (ECN) to IP&lt;/span&gt;&lt;sup&gt;[42]&lt;/sup&gt;. RFC 3168, September 2001.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;K. Nichols and V. Jacobson. &lt;span&gt;Controlling Queue Delay&lt;/span&gt;&lt;sup&gt;[43]&lt;/sup&gt;. ACM Queue, 10(5), May 2012.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特定领域算法&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据中心&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;M. Alizadeh, et al. &lt;span&gt;Data Center TCP (DCTCP)&lt;/span&gt;&lt;sup&gt;[44]&lt;/sup&gt;. ACM SIGCOMM, August 2010.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;R. Mittal, et al. &lt;span&gt;TIMELY: RTT-based Congestion Control for the Datacenter&lt;/span&gt;&lt;sup&gt;[45]&lt;/sup&gt;. ACM SIGCOMM 2015.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;S. Liu, et al. &lt;span&gt;Breaking the Transience-Equilibrium Nexus: A New Approach to Datacenter Packet Transport&lt;/span&gt;&lt;sup&gt;[46]&lt;/sup&gt;. Usenix NSDI ‘21. April 2021.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背景传输&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;S. Shalunov, et al. &lt;span&gt;Low Extra Delay Background Transport (LEDBAT)&lt;/span&gt;&lt;sup&gt;[47]&lt;/sup&gt;. RFC 6817, December 2012.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;HTTP&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;J. Iyengar and I. Swett, Eds. &lt;span&gt;QUIC Loss Detection and Congestion Control&lt;/span&gt;&lt;sup&gt;[48]&lt;/sup&gt;. RFC 9002, May 2021.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;无线&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;H. Jiang, Z. Liu, Y. Wang, K. Lee and I. Rhee. &lt;span&gt;Understanding Bufferbloat in Cellular Networks&lt;/span&gt;&lt;sup&gt;[49]&lt;/sup&gt;. ACM SIGCOMM Workshop on Cellular Networks, August 2012.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;K. Liu and J. Y. B. Lee, &lt;span&gt;On Improving TCP Performance over Mobile Data Networks&lt;/span&gt;&lt;sup&gt;[50]&lt;/sup&gt;. IEEE Transactions on Mobile Computing, 2016.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Y. Xie, F. Yi, and K. Jamieson. &lt;span&gt;PBE-CC: Congestion Control via Endpoint-Centric, Physical-Layer Bandwidth Measurements&lt;/span&gt;&lt;sup&gt;[51]&lt;/sup&gt;. SIGCOMM 2020.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Y. Gao, et al. &lt;span&gt;Understanding On-device Bufferbloat For Cellular Upload&lt;/span&gt;&lt;sup&gt;[52]&lt;/sup&gt;. ACM Internet Measurement Conference (IMC), November 2016.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实时&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;S. Floyd, M. Handley, J. Padhye, and J. Widmer. &lt;span&gt;TCP Friendly Rate Control (TFRC): Protocol Specification&lt;/span&gt;&lt;sup&gt;[53]&lt;/sup&gt;. RFC 5348, September 2008.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;J. Padhye, V. Firoiu, D. Towsley, and J. Kurose. &lt;span&gt;Modeling TCP Throughput: A Simple Model and its Empirical Validation&lt;/span&gt;&lt;sup&gt;[54]&lt;/sup&gt;. ACM SIGCOMM, September 1998.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;多路径&lt;span/&gt;&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;D. Wischik, C. Raiciu, A. Greenhalgh and M. Handley. &lt;span&gt;Design, Implementation and Evaluation of Congestion Control for Multipath TCP&lt;/span&gt;&lt;sup&gt;[55]&lt;/sup&gt;. NSDI, April 2011.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;C. Raiciu, M. Handley, and D. Wischik. &lt;span&gt;Coupled Congestion Control for Multipath Transport Protocols&lt;/span&gt;&lt;sup&gt;[56]&lt;/sup&gt;. RFC 6356, October 2011.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实现与工具&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;S.J. Leffler, M.K. McKusick, M.J. Karels, and J.S Quarterman. &lt;span&gt;The Design and Implementation of the 4.3 BSD Unix Operating System&lt;/span&gt;&lt;sup&gt;[57]&lt;/sup&gt;. Addison-Wesley. January 1989.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Netesto&lt;/span&gt;&lt;sup&gt;[58]&lt;/sup&gt;.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;NS-3 Network Simulator&lt;/span&gt;&lt;sup&gt;[59]&lt;/sup&gt;.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RFC 6298: Computing TCP’s Retransmission Timer&lt;/span&gt;&lt;sup&gt;[60]&lt;/sup&gt;. June 2011.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The Linux Kernel. &lt;span&gt;BPF Documentation&lt;/span&gt;&lt;sup&gt;[61]&lt;/sup&gt;.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;关于本书&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;TCP Congestion Control: A Systems Approach&lt;/em&gt;在GitHub上根据&lt;span&gt;创作共用协议(CC BY-NC-ND 4.0)&lt;/span&gt;&lt;sup&gt;[62]&lt;/sup&gt;许可条款提供。邀请社区在相同的条件下提供更正、改进、更新和新材料。虽然本授权并不自动授予制作衍生作品的权利，但我们非常希望与感兴趣的各方讨论衍生作品(如翻译)。请联系discuss@systemsapproach.org。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用该作品，其包括以下版权信息:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;Title: TCP Congestion Control: A Systems Approach&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Authors: Larry Peterson, Lawrence Brakmo, and Bruce Davie&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Source: https://github.com/SystemsApproach/tcpcc&lt;/em&gt;&lt;br/&gt;&lt;em&gt;License: CC BY-NC-ND 4.0&lt;/em&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;阅读本书&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本书是&lt;span&gt;系统方法系列&lt;/span&gt;&lt;sup&gt;[63]&lt;/sup&gt;的一部分，其在线版本发布在https://tcpcc.systemsapproach.org。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要跟踪进度并接收新版本通知，可以在&lt;span&gt;Facebook&lt;/span&gt;&lt;sup&gt;[64]&lt;/sup&gt;和&lt;span&gt;Twitter&lt;/span&gt;&lt;sup&gt;[65]&lt;/sup&gt;上关注本项目。要阅读关于互联网发展的实时评论，请订阅&lt;span&gt;Systems Approach Newsletter&lt;/span&gt;&lt;sup&gt;[66]&lt;/sup&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;编译本书&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要建立可供网页浏览的版本，首先需要下载源码:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; mkdir ~/systemsapproach&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; ~/systemsapproach&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; git &lt;span&gt;clone&lt;/span&gt; https://github.com/SystemsApproach/tcpcc.git&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; tcpcc&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构建过程实现在Makefile中，并且需要安装Python。Makefile将创建一个虚拟环境(&lt;code&gt;venv-docs&lt;/code&gt;)，用于安装文档生成工具集，可能还需要使用系统的包管理器安装&lt;code&gt;enchant&lt;/code&gt; C库，以便拼写检查器正常工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请运行&lt;code&gt;make html&lt;/code&gt;，在&lt;code&gt;_build/html&lt;/code&gt;中生成HTML。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请运行&lt;code&gt;make lint&lt;/code&gt;检查格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行&lt;code&gt;make spelling&lt;/code&gt;检查拼写。如果有拼写正确但字典中没有的单词、名称或首字母缩写词，请添加到&lt;code&gt;dict.txt&lt;/code&gt;文件中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请运行&lt;code&gt;make&lt;/code&gt;查看其他可用的输出格式。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;向本书投稿&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你使用这些材料，希望也愿意给出回馈。如果你是开放源码的新手，可以查看&lt;span&gt;How to Contribute to Open Source&lt;/span&gt;&lt;sup&gt;[67]&lt;/sup&gt;指南，你将学到如何发布Issue，如何发出Pull Request合并改进，以及其他一些主题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想投稿，并且正在寻找一些需要关注的内容，请查看&lt;span&gt;wiki&lt;/span&gt;&lt;sup&gt;[68]&lt;/sup&gt;上的当前待办事项列表。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;关于作者&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Larry Peterson&lt;/strong&gt;是普林斯顿大学计算机科学系Robert E. Kahn名誉教授，并从2003年到2009年担任主席。Peterson教授的研究主要集中在互联网大规模分布式系统的设计、实现和操作，包括广泛使用的PlanetLab和MeasurementLab平台。他目前正在为开放网络基金会(ONF)的Aether接入边缘云项目做出贡献，并担任首席科学家。Peterson是美国国家工程院院士，ACM和IEEE院士，2010年IEEE Kobayashi计算机与通信奖得主，2013年ACM SIGCOMM奖得主。Peterson拥有普渡大学博士学位。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Lawrence Brakmo&lt;/strong&gt;目前在Facebook的Kernel小组工作。在加入Facebook之前，他是谷歌主机网络组的成员，在此之前，是DoCoMo美国实验室操作系统组的研究员和项目经理。Brakmo致力于TCP增强以提高网络性能，包括TCP Vegas和TCP-NV拥塞控制算法的设计。他还开发了操作系统技术，以提高系统的可靠性、性能和能耗。Brakmo在亚利桑那大学获得计算机科学博士学位。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Bruce Davie&lt;/strong&gt;是计算机科学家，因其在网络领域的贡献而闻名。他是VMware亚太区的前副总裁兼首席技术官，在VMware收购SDN初创公司Nicira期间加入VMware。在此之前，他是Cisco Systems研究员，领导一个架构师团队，负责多协议标签交换(MPLS)。Davie拥有超过30年的网络行业经验，并合著了17个RFC。他于2009年成为ACM研究员，并于2009年至2013年担任ACM SIGCOMM主席。他还在麻省理工学院做了五年的访问讲师。Davie是多本书的作者，拥有40多项美国专利。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;TCP Congestion Control: A Systems Approach: &lt;em&gt;https://tcpcc.systemsapproach.org/index.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Data Center TCP (DCTCP): &lt;em&gt;http://dl.acm.org/citation.cfm?doid=1851182.1851192&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Breaking the Transience-Equilibrium Nexus: A New Approach to Datacenter Packet Transport: &lt;em&gt;https://www.usenix.org/system/files/nsdi21-liu.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;Exploiting a Natural Network Effect for Scalable, Fine-grained Clock Synchronization: &lt;em&gt;https://www.usenix.org/system/files/nsdi21-liu.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Low Extra Delay Background Transport (LEDBAT): &lt;em&gt;https://www.rfc-editor.org/info/rfc6817&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;QUIC Loss Detection and Congestion Control: &lt;em&gt;https://www.rfc-editor.org/info/rfc9002&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;TCP Friendly Rate Control (TFRC): Protocol Specification: &lt;em&gt;https://www.rfc-editor.org/info/rfc5348&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Modeling TCP Throughput: A Simple Model and its Empirical Validation: &lt;em&gt;https://conferences.sigcomm.org/sigcomm/1998/tp/paper25.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Design, Implementation and Evaluation of Congestion Control for Multipath TCP: &lt;em&gt;https://www.usenix.org/conference/nsdi11/design-implementation-and-evaluation-congestion-control-multipath-tcp&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;Coupled Congestion Control for Multipath Transport Protocols: &lt;em&gt;https://datatracker.ietf.org/doc/html/rfc6356&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;Understanding Bufferbloat in Cellular Networks: &lt;em&gt;https://conferences.sigcomm.org/sigcomm/2012/paper/cellnet/p1.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;PBE-CC: Congestion Control via Endpoint-Centric, Physical-Layer Bandwidth Measurements: &lt;em&gt;https://arxiv.org/abs/2002.03475&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;5G Mobile Networks: A Systems Approach: &lt;em&gt;https://5g.systemsapproach.org&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14]&lt;/span&gt;&lt;p&gt;Software-Defined Networks: A Systems Approach: &lt;em&gt;https://sdn.systemsapproach.org&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15]&lt;/span&gt;&lt;p&gt;TCP Congestion Control Github: &lt;em&gt;https://github.com/SystemsApproach/tcpcc&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16]&lt;/span&gt;&lt;p&gt;TCP Congestion Control Github Issues: &lt;em&gt;https://github.com/SystemsApproach/tcpcc/issues&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17]&lt;/span&gt;&lt;p&gt;Queueing Systems, Volume 2: &lt;em&gt;https://archive.org/details/queueingsystems02klei&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18]&lt;/span&gt;&lt;p&gt;Wide-Area Traffic: The Failure of Poisson Modeling: &lt;em&gt;https://www.icir.org/vern/papers/poisson.TON.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[19]&lt;/span&gt;&lt;p&gt;On the self-similar nature of Ethernet traffic: &lt;em&gt;https://doi.org/10.1145/167954.166255&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[20]&lt;/span&gt;&lt;p&gt;Bufferbloat: Dark Buffers in the Internet: &lt;em&gt;https://ieeexplore.ieee.org/document/5755608&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[21]&lt;/span&gt;&lt;p&gt;The Macroscopic Behavior of the TCP Congestion Avoidance Algorithm: &lt;em&gt;https://dl.acm.org/doi/abs/10.1145/263932.264023&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[22]&lt;/span&gt;&lt;p&gt;Charging and Rate Control for Elastic Traffic: &lt;em&gt;http://www.statslab.cam.ac.uk/~frank/elastic.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[23]&lt;/span&gt;&lt;p&gt;An Empirical Validation of a Duality Model of TCP and Active Queue Management Algorithms: &lt;em&gt;https://ieeexplore.ieee.org/document/977445&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[24]&lt;/span&gt;&lt;p&gt;Congestion Avoidance in Computer Networks with a Connectionless Network Layer: Concepts, Goals and Methodology: &lt;em&gt;https://arxiv.org/pdf/cs/9809095.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[25]&lt;/span&gt;&lt;p&gt;A Quantitative Measure of Fairness and Discrimination for Resource Allocation in Shared Computer Systems: &lt;em&gt;https://www.cse.wustl.edu/~jain/papers/ftp/fairness.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[26]&lt;/span&gt;&lt;p&gt;Flow Rate Fairness: Dismantling a Religion: &lt;em&gt;https://web.stanford.edu/class/cs244/papers/fair-ccr2007.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[27]&lt;/span&gt;&lt;p&gt;Beyond Jain’s Fairness Index: Setting the Bar for the Deployment of Congestion Control Algorithms: &lt;em&gt;https://www.cs.cmu.edu/~rware/assets/pdf/ware-hotnets19.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[28]&lt;/span&gt;&lt;p&gt;End-to-End Arguments in System Design: &lt;em&gt;https://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[29]&lt;/span&gt;&lt;p&gt;The Design Philosophy of the DARPA Internet Protocols: &lt;em&gt;https://dl.acm.org/doi/10.1145/52324.52336&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[30]&lt;/span&gt;&lt;p&gt;B4: Experience with a Globally-Deployed Software Defined WAN: &lt;em&gt;https://cseweb.ucsd.edu/~vahdat/papers/b4-sigcomm13.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[31]&lt;/span&gt;&lt;p&gt;Fastpass: A Centralized “Zero-Queue” Datacenter Network: &lt;em&gt;http://fastpass.mit.edu/Fastpass-SIGCOMM14-Perry.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[32]&lt;/span&gt;&lt;p&gt;Congestion Avoidance and Control: &lt;em&gt;https://dl.acm.org/doi/10.1145/52324.52356&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[33]&lt;/span&gt;&lt;p&gt;Improving the start-up behavior of a congestion control scheme for TCP: &lt;em&gt;https://dl.acm.org/doi/10.1145/248156.248180&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[34]&lt;/span&gt;&lt;p&gt;TCP Vegas: New Technique for Congestion Detection and Avoidance: &lt;em&gt;https://sites.cs.ucsb.edu/~almeroth/classes/F05.276/papers/vegas.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[35]&lt;/span&gt;&lt;p&gt;Understanding TCP Vegas: A Duality Model: &lt;em&gt;https://dl.acm.org/doi/10.1145/506147.506152&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[36]&lt;/span&gt;&lt;p&gt;CUBIC: a new TCP-friendly high-speed TCP variant: &lt;em&gt;https://www.cs.princeton.edu/courses/archive/fall16/cos561/papers/Cubic08.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[37]&lt;/span&gt;&lt;p&gt;BBR: Congestion-based Congestion Control: &lt;em&gt;https://cacm.acm.org/magazines/2017/2/212428-bbr-congestion-based-congestion-control/fulltext&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[38]&lt;/span&gt;&lt;p&gt;Implementing the “Prague Requirements” for Low Latency Low Loss Scalable Throughput (L4S): &lt;em&gt;https://www.bobbriscoe.net/projects/latency/tcp-prague-netdev0x13.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[39]&lt;/span&gt;&lt;p&gt;A Binary Feedback Scheme for Congestion Avoidance in Computer Networks with a Connectionless Network Layer: &lt;em&gt;https://dl.acm.org/doi/pdf/10.1145/52324.52355&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[40]&lt;/span&gt;&lt;p&gt;Random Early Detection (RED) Gateways for Congestion Avoidance: &lt;em&gt;http://www.icir.org/floyd/papers/early.twocolumn.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[41]&lt;/span&gt;&lt;p&gt;Recommendations on Queue Management and Congestion Avoidance in the Internet: &lt;em&gt;https://tools.ietf.org/html/rfc2309&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[42]&lt;/span&gt;&lt;p&gt;The Addition of Explicit Congestion Notification (ECN) to IP: &lt;em&gt;https://datatracker.ietf.org/doc/html/rfc3168&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[43]&lt;/span&gt;&lt;p&gt;Controlling Queue Delay: &lt;em&gt;https://queue.acm.org/detail.cfm?id=2209336&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[44]&lt;/span&gt;&lt;p&gt;Data Center TCP (DCTCP): &lt;em&gt;http://dl.acm.org/citation.cfm?doid=1851182.1851192&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[45]&lt;/span&gt;&lt;p&gt;TIMELY: RTT-based Congestion Control for the Datacenter: &lt;em&gt;https://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p537.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[46]&lt;/span&gt;&lt;p&gt;Breaking the Transience-Equilibrium Nexus: A New Approach to Datacenter Packet Transport: &lt;em&gt;https://www.usenix.org/system/files/nsdi21-liu.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[47]&lt;/span&gt;&lt;p&gt;Low Extra Delay Background Transport (LEDBAT): &lt;em&gt;https://www.rfc-editor.org/info/rfc6817&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[48]&lt;/span&gt;&lt;p&gt;QUIC Loss Detection and Congestion Control: &lt;em&gt;https://www.rfc-editor.org/info/rfc9002&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[49]&lt;/span&gt;&lt;p&gt;Understanding Bufferbloat in Cellular Networks: &lt;em&gt;https://conferences.sigcomm.org/sigcomm/2012/paper/cellnet/p1.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[50]&lt;/span&gt;&lt;p&gt;On Improving TCP Performance over Mobile Data Networks: &lt;em&gt;http://www.mclab.info/TMC2016.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[51]&lt;/span&gt;&lt;p&gt;PBE-CC: Congestion Control via Endpoint-Centric, Physical-Layer Bandwidth Measurements: &lt;em&gt;https://arxiv.org/abs/2002.03475&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[52]&lt;/span&gt;&lt;p&gt;Understanding On-device Bufferbloat For Cellular Upload: &lt;em&gt;https://www-users.cse.umn.edu/~fengqian/paper/bufferbloat_imc16.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[53]&lt;/span&gt;&lt;p&gt;TCP Friendly Rate Control (TFRC): Protocol Specification: &lt;em&gt;https://www.rfc-editor.org/info/rfc5348&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[54]&lt;/span&gt;&lt;p&gt;Modeling TCP Throughput: A Simple Model and its Empirical Validation: &lt;em&gt;https://conferences.sigcomm.org/sigcomm/1998/tp/paper25.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[55]&lt;/span&gt;&lt;p&gt;Design, Implementation and Evaluation of Congestion Control for Multipath TCP: &lt;em&gt;https://www.usenix.org/conference/nsdi11/design-implementation-and-evaluation-congestion-control-multipath-tcp&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[56]&lt;/span&gt;&lt;p&gt;Coupled Congestion Control for Multipath Transport Protocols: &lt;em&gt;https://www.rfc-editor.org/info/rfc6356&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[57]&lt;/span&gt;&lt;p&gt;The Design and Implementation of the 4.3 BSD Unix Operating System: &lt;em&gt;https://www.goodreads.com/en/book/show/5770.The_Design_and_Implementation_of_the_4_3BSD_UNIX_Operating_System&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[58]&lt;/span&gt;&lt;p&gt;Netesto: &lt;em&gt;https://github.com/facebook/fbkutils/tree/master/netesto&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[59]&lt;/span&gt;&lt;p&gt;NS-3 Network Simulator: &lt;em&gt;https://www.nsnam.org&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[60]&lt;/span&gt;&lt;p&gt;RFC 6298: Computing TCP’s Retransmission Timer: &lt;em&gt;https://www.nsnam.org&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[61]&lt;/span&gt;&lt;p&gt;BPF Documentation: &lt;em&gt;https://www.kernel.org/doc/html/latest/bpf/index.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[62]&lt;/span&gt;&lt;p&gt;创作共用协议(CC BY-NC-ND 4.0): &lt;em&gt;https://creativecommons.org/licenses/by-nc-nd/4.0&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[63]&lt;/span&gt;&lt;p&gt;系统方法系列: &lt;em&gt;https://www.systemsapproach.org/books&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[64]&lt;/span&gt;&lt;p&gt;Systems Approach Facebook: &lt;em&gt;https://www.facebook.com/Computer-Networks-A-Systems-Approach-110933578952503&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[65]&lt;/span&gt;&lt;p&gt;Systems Approach Twitter: &lt;em&gt;https://twitter.com/SystemsAppr&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[66]&lt;/span&gt;&lt;p&gt;Systems Approach Newsletter: &lt;em&gt;https://systemsapproach.substack.com&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[67]&lt;/span&gt;&lt;p&gt;How to Contribute to Open Source: &lt;em&gt;https://opensource.guide/how-to-contribute&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[68]&lt;/span&gt;&lt;p&gt;Systems Approach Wiki: &lt;em&gt;https://github.com/SystemsApproach/tcpcc/wiki&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>60830dba1e57a019b459040049f02ba5</guid>
<title>深入理解 ForkJoinPool：入门、使用、原理</title>
<link>https://toutiao.io/k/zu4hyfd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;本文将从一个简单的例子出发，与大家解释为啥要有 ForkJoinPool 的存在。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接着向大家介绍 ForkJoinPool 的基本信息及使用，最后讲解 ForkJoinPool 的基本原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;诞生原因&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于线程池来说，我们经常使用的是 ThreadPoolExecutor，可以用来提升任务处理效率。一般情况下，我们使用 ThreadPoolExecutor 的时候，各个任务之间都是没有联系的。但在某些特殊情况下，我们处理的任务之间是有联系的，例如经典的 Fibonacci 算法就是其中一种情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于 Fibonacci 数列来说，我们知道 F (N) = F (N-1) + F (N-2)。当前数值的结果，都依赖后面几个数值的结果。这时候如果用 ThreadPoolExecutor 貌似就无法解决问题了。虽然我们可以单线程的递归算法，则其计算速度较慢，并且无法进行并行计算，无法发挥 CPU 多核的优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ForkJoinPool 就是设计用来解决父子任务有依赖的并行计算问题的。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 类似于快速排序、二分查找、集合运算等有父子依赖的并行计算问题，都可以用 ForkJoinPool 来解决。对于 Fibonacci 数列问题，如果用 ForkJoinPool 来实现，其实现代码为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Slf&lt;/span&gt;4j&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ForkJoinDemo&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            worker.setName(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;my-thread&quot;&lt;/span&gt; + worker.getPoolIndex());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; worker;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ForkJoinPool forkJoinPool = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ForkJoinPool(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;, factory, &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Fibonacci fibonacci = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Fibonacci(n);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Integer result = forkJoinPool.invoke(fibonacci);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Fibonacci {} 的结果是 {}&quot;&lt;/span&gt;, n, result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Slf&lt;/span&gt;4j&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RecursiveTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Integer&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Fibonacci(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; n) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.n = n;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Fibonacci f1 = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Fibonacci(n - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f1.fork();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Fibonacci f2 = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Fibonacci(n - &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; f2.compute() + f1.join();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; data-category_id_list=&quot;36|41|5&quot; data-id=&quot;1664289410915&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1664289410915&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上面代码所示，我们定义了一个 Fibonacci 类，继承了 RecursiveTask 抽象类。&lt;/span&gt;&lt;span&gt;在 Fibonacci 类中，我们定义了拆分逻辑，并调用了 join () 等待子线程执行结果。&lt;/span&gt;&lt;span&gt;运行程序，我们会得到如下的结果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;p&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;17&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:29&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:10.336&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-attr&quot;&gt;[main]&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;INFO&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;tech&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.shuyi&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.javacodechip&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.forkjoinpool&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.ForkJoinDemo&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Fibonacci&lt;/span&gt; 20 的结果是 6765&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面代码中提到的 fork () 和 join () 是 ForkJoinPool 提供的 API 接口，主要用于执行任务以及等待子线程结果。关于其详细用法，我们稍后会讲到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;除了用于处理父子任务有依赖的情形，其实 ForkJoinPool 也可以用于处理需要获取子任务执行结果的场景。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;例如：我们要计算 1 到 1 亿的和，为了加快计算的速度，我们自然想到算法中的分治原理，将 1 亿个数字分成 1 万个任务，每个任务计算 1 万个数值的综合，利用 CPU 的并发计算性能缩短计算时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为 ThreadPoolExecutor 也可以通过 Future 获取执行结果，因此 ThreadPoolExecutor 也是可行的。这时候我们有两种实现方式，一种是用 ThreadPoolExecutor 实现，一种是用 ForkJoinPool 实现。下面我们将这两种方式都实现一下，看看这两种实现方式有什么不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;无论哪种实现方式，其大致思路都是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;按照线程池里线程个数 N，将 1 亿个数划分成 N 等份，随后丢入线程池进行计算。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个计算任务使用 Future 接口获取计算结果，最后积加即可。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们先使用 ThreadPoolExecutor 实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，定义一个 Calculator 接口，表示计算数字总和这个动作，如下所示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Calculator&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt; 总和&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;sumUp&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接着，我们定义一个使用 ThreadPoolExecutor 线程池实现的类，如下所示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; tech.shuyi.javacodechip.forkjoinpool;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Callable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.ExecutorService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Executors;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Future;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ExecutorServiceCalculator&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Calculator&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; parallism;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ExecutorService pool;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ExecutorServiceCalculator&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// CPU的核心数 默认就用cpu核心数了&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        parallism = Runtime.getRuntime().availableProcessors(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pool = Executors.newFixedThreadPool(parallism);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 1. 处理计算任务的线程&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SumTask&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Callable&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Long&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; from;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; to;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SumTask&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; from, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; to)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.numbers = numbers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.from = from;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.to = to;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Long &lt;span class=&quot;code-snippet__title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; total = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = from; i &amp;lt;= to; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                total += numbers[i];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; total;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 2. 核心业务逻辑实现&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;sumUp&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        List&amp;lt;Future&amp;lt;Long&amp;gt;&amp;gt; results = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 2.1 数字拆分&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 把任务分解为 n 份，交给 n 个线程处理   4核心 就等分成4份呗&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 然后把每一份都扔个一个SumTask线程 进行处理&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; part = numbers.length / parallism;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; parallism; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; from = i * part; &lt;span class=&quot;code-snippet__comment&quot;&gt;//开始位置&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; to = (i == parallism - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) ? numbers.length - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; : (i + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) * part - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;code-snippet__comment&quot;&gt;//结束位置&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;//扔给线程池计算&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            results.add(pool.submit(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SumTask(numbers, from, to)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 2.2 阻塞等待结果&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 把每个线程的结果相加，得到最终结果 get()方法 是阻塞的&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 优化方案：可以采用CompletableFuture来优化  JDK1.8的新特性&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; total = &lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Future&amp;lt;Long&amp;gt; f : results) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                total += f.get();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception ignore) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; total;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上面代码所示，我们实现了一个计算单个任务的类 SumTask，在该类中对数值进行累加。其次，我们在 sumUp () 方法中，对 1 亿的数字进行拆分，接着扔给线程池计算，最后阻塞等待计算结果，最终累加起来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们运行上面的代码，可以得到顺利得到最终结果，如下所示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;耗时：10ms&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;结果为：50000005000000&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接着我们使用 ForkJoinPool 来实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们首先实现 SumTask 继承 RecursiveTask 抽象类，并在 compute () 方法中定义拆分逻辑及计算。最后在爱 sumUp () 方法中调用 pool 方法进行计算，代码如下所示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ForkJoinCalculator&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Calculator&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ForkJoinPool pool;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 1. 定义计算逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SumTask&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RecursiveTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Long&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; from;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; to;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SumTask&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; from, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; to)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.numbers = numbers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.from = from;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.to = to;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;//此方法为ForkJoin的核心方法：对任务进行拆分  拆分的好坏决定了效率的高低&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; Long &lt;span class=&quot;code-snippet__title&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 当需要计算的数字个数小于6时，直接采用for loop方式计算结果&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (to - from &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; total = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = from; i &amp;lt;= to; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    total += numbers[i];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; total;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 否则，把任务一分为二，递归拆分(注意此处有递归)到底拆分成多少分 需要根据具体情况而定&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; middle = (from + to) / &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                SumTask taskLeft = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SumTask(numbers, from, middle);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                SumTask taskRight = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SumTask(numbers, middle + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, to);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                taskLeft.fork();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                taskRight.fork();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; taskLeft.join() + taskRight.join();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ForkJoinCalculator&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 也可以使用公用的线程池 ForkJoinPool.commonPool()：&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// pool = ForkJoinPool.commonPool()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pool = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ForkJoinPool();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;sumUp&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Long result = pool.invoke(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SumTask(numbers, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, numbers.length - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pool.shutdown();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运行上面的代码，结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;耗时：860ms&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;结果为：50000005000000&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对比 ThreadPoolExecutor 和 ForkJoinPool 这两者的实现，可以发现它们都有任务拆分的逻辑，以及最终合并数值的逻辑。但 ForkJoinPool 相比 ThreadPoolExecutor 来说，做了一些实现上的封装，例如：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不用手动去获取子任务的结果，而是使用 join () 方法直接获取结果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将任务拆分的逻辑，封装到 RecursiveTask 实现类中，而不是裸露在外。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此对于没有父子任务依赖，但是希望获取到子任务执行结果的并行计算任务，也可以使用 ForkJoinPool 来实现。在这种情况下，使用 ForkJoinPool 实现更多是代码实现方便，封装做得更加好。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;使用指南&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用 ForkJoinPool 来进行并行计算，主要分为两步：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;定义 RecursiveTask 或 RecursiveAction 的任务子类。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;初始化线程池及计算任务，丢入线程池处理，取得处理结果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;首先，我们需要定义一个 RecursiveTask 或 RecursiveAction 的子类，然后再该类的 compute () 方法中定义拆分逻辑和计算逻辑。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这两个抽象类的区别在于：前者有返回值，后者没有返回值。例如前面讲到的 1 到 1 亿的叠加问题，其定义的 RecursiveTask 实现类 SumTask 的代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SumTask&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RecursiveTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Long&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; from;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; to;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SumTask&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; from, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; to)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.numbers = numbers;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.from = from;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.to = to;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; Long &lt;span class=&quot;code-snippet__title&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 1. 定义拆分退出逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (to - from &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; total = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = from; i &amp;lt;= to; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                total += numbers[i];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; total;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 2. 定义计算逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; middle = (from + to) / &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SumTask taskLeft = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SumTask(numbers, from, middle);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SumTask taskRight = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SumTask(numbers, middle + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, to);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            taskLeft.fork();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            taskRight.fork();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; taskLeft.join() + taskRight.join();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于 compute () 方法的实现，核心是想清楚：怎么拆分成子任务？什么时候结束拆分？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;接着，初始化 ForkJoinPool 线程池，初始化计算任务，最后将任务丢入线程池中。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 初始化线程池&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ForkJoinCalculator&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pool = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ForkJoinPool();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 初始化计算任务，将任务丢入线程池&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;sumUp&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;[] numbers&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Long result = pool.invoke(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SumTask(numbers, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, numbers.length - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pool.shutdown();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过上面两步操作，我们就完成了一个 ForkJoinPool 任务代码的编写。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;原理解析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ForkJoinPool 的设计思想是分治算法，即将任务不断拆分（fork）成更小的任务，最终再合并（join）各个任务的计算结果。通过这种方式，可以充分利用 CPU 资源，再结合工作窃取算法（worksteal）整体提高执行效率。其简单的流程如下图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7666666666666667&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/utD23ZXCiaX0MMpKGULS1ytpwc6iaOqUd9vrx6th7MWWpk9F5ujFfkDePVhSrgZSoDJxsia3vdqia5cdGVTUqpCT2g/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图片来源于思否用户「日拱一兵」&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从图中可以看出 ForkJoinPool 要先执行完子任务才能执行上一层任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;因此 ForkJoinPool 最适合有父子任务依赖的场景，其次就是需要获取子任务执行结果的场景。比如：Fibonacci 数列、快速排序、二分查找等。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;源码实现&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ForkJoinPool 的主要实现类为：ForkJoinPool 和 ForkJoinTask 抽象类。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ForkJoinTask 实现了 Future 接口，可以用于获取处理结果。ForkJoinTask 有两个抽象子类：RecursiveAction 和 RecursiveTask 抽象类，其区别在于前者没有返回值，后者有返回值，其类图如下所示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5655737704918032&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;732&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/utD23ZXCiaX0MMpKGULS1ytpwc6iaOqUd9ia4nibg6dOnEX5RibGibb3n4WaHaLgsicHefl5KT0yT2Hj0FU35HQF89K1A/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图片来源于思否用户「日拱一兵」&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ForkJoinPool 则是具体的逻辑实现，由于暂时没有应用场景，就不了解这么深了，这里就不深入解析了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;感兴趣的朋友可以参考这篇文章：ForkJoinPool 大型图文现场（一阅到底 vs 直接收藏） - SegmentFault 思否。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;窃取算法&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们知道 ForkJoinPool 的父子任务之间是有依赖关系的，那么 ForkJoinPool 是如何实现的呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;答案是：利用不同任务队列执行。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在 ForkJoinPool 中有一个数组形式的成员变量 workQueue[]，其对应一个队列数组，每个队列对应一个消费线程。丢入线程池的任务，根据特定规则进行转发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6352459016393442&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;732&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/utD23ZXCiaX0MMpKGULS1ytpwc6iaOqUd9RNdq9Zcxgo8NliamAXrLV43rgvxp98DFJz995h9VbfZ0nmKwf0ibT3Fw/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图片来源于思否用户「日拱一兵」&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这样就有一个问题：有些队列可能任务比较多，有些队列任务比较少，这样就会导致不同线程负载不一样，整体不够高效，怎么办呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;答案是：利用窃取算法，空闲的线程从尾部去消费其他队列的任务。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一般情况下，线程获取自己队列中的任务是 LIFO（Last Input First Output 后进先出）的方式，即类似于栈的操作方式。如下图所示，首先放入队列的时候先将任务 Push 进队列的头部（top），之后消费的时候在 pop 出队列头部（top）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5573770491803278&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;732&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/utD23ZXCiaX0MMpKGULS1ytpwc6iaOqUd9Aib3UPGY5IfwN61uYCdn0iatDSzWtR80ojvbIYhFZAV68rR4j2tk9ovA/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图片来源于思否用户「日拱一兵」&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而当某个线程对应的队列空闲时，该线程则去队列的底部（base）窃取（poll）任务到自己的队列，然后进行消费。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;那问题来了：为什么不从头部（top）获取任务，而要从底部（base）获取任务呢？ &lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;那是为了避免冲突！如果两个线程同时从顶部获取任务，那就会有多线程的冲突问题，就需要加锁操作，从而降低了执行效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎加入程序员交流群&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;鬼哥我创建了几个技术交流群，大家在群里都是九分聊技术、一分聊风雪～&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;如果你没有加群，不妨&lt;/span&gt;&lt;span data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;扫描下方二维码、&lt;/span&gt;&lt;span data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(53, 179, 120)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(53, 179, 120)&quot;&gt;添加我的微信&lt;/span&gt;&lt;span data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;。我拉大家进群，&lt;/span&gt;&lt;span data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(53, 179, 120)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(53, 179, 120)&quot;&gt;记得备注：工作城市+昵称+技术方向！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Ps：&lt;/span&gt;&lt;span&gt;如果朋友圈对我设置权限的话，那就不用加我好友了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;178&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;178&quot; data-fileid=&quot;100022888&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/utD23ZXCiaX3Pibgm5ickjTngCgOfx5BCbrDs9lZicW1WS8HVSoVkuJUP9eY4pNZibxKVARSvLAxibr2IumWXJbybXGA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;section&gt;&lt;section data-recommend-type=&quot;list-title&quot; data-recommend-tid=&quot;6&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;&lt;section data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot; data-style=&quot;padding: 14px; width: 578px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-radius: 3px; border-width: 1px; border-style: solid; border-color: rgb(232, 232, 235);&quot;&gt;&lt;section data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;&lt;section data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(19, 52, 86)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(19, 52, 86)&quot; data-darkmode-bgimage-16266178294118=&quot;1&quot; data-style=&quot;margin-bottom: -14px; padding: 4px 22px; height: 28px; font-size: 14px; color: rgb(19, 52, 86); line-height: 20px; background-image: url(&amp;quot;https://mmbiz.qpic.cn/mmbiz_png/sUbvrqLicbpzB81mjeBxPuxnYdalGxNnJo30L2Hq3WwGficcq8w5YJkLeXnsNHocN53k55TfN5mBpCdicGRyfDg1g/640?wx_fmt=png&amp;quot;); background-repeat: no-repeat; background-size: 100% 100%; z-index: 10;&quot;&gt;&lt;p data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(19, 52, 86)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(19, 52, 86)&quot; data-darkmode-bgimage-16266178294118=&quot;1&quot;&gt;&lt;span data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(19, 52, 86)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(19, 52, 86)&quot; data-darkmode-bgimage-16266178294118=&quot;1&quot;&gt;往期推荐&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot; data-style=&quot;padding: 17px 16px 9px; width: 548px; border-width: 1px; border-style: solid; border-color: rgb(198, 226, 255);&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247529772_1&quot; data-recommend-article-time=&quot;1618024200&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/R3InYSAIZkHoHVO9kE5zegDRJfX7sS0cumfic5gwBD9WgCm4iaiaq6An451wMSlamBG255PgluNxCo8BRZXbPcK7w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;阿里巴巴垄断案结果来了，罚182.28亿！阿里回应：诚恳接受，坚决服从！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;amp;mid=2247529772&amp;amp;idx=1&amp;amp;sn=462822b8a422d7f862c2ee6476e7b5a5&amp;amp;chksm=9bd3d8b4aca451a22600827eb019f34a49152d94dea10978ee86083e63d535c63b5cd0097a79#rd&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot; data-style=&quot;padding: 6px; width: 514px; display: flex; justify-content: center; align-items: center; flex-wrap: nowrap; border-bottom: 1px dashed rgb(198, 226, 255); font-size: 13px; color: rgb(44, 95, 149); line-height: 18px;&quot;&gt;&lt;p data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NjIxNDYxMQ==&amp;amp;mid=2247516633&amp;amp;idx=1&amp;amp;sn=0b30bffc87e2b172637180389bf19ba5&amp;amp;chksm=c30b4265f47ccb73c9373e43923240729ad122461689f338fca3c7d2cc6ce4690d40d7abbb58&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;有哪些值得计算机专业加入的国企？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;有哪些值得计算机专业加入的国企？&lt;/a&gt;&lt;br data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247530377_1&quot; data-recommend-article-time=&quot;1618360260&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/R3InYSAIZkH036GO1mVYMYP25nDN0QyqhkGbk2S2zBpb14xKc4O2GSvd67EfOp8ZvHQ9I5lsPTe4FibfQYRkL2Q/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;继Elastic怒喷云服务商白嫖之后，AWS 终于退出ES的开源分支：OpenSearch！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;amp;mid=2247530377&amp;amp;idx=1&amp;amp;sn=e1060b81b9534e49c4961858d7ae82fa&amp;amp;chksm=9bd3da11aca453070745a60582479a1440a8e2551f3be3c04b20d2e310e5d6b6443c4eb939fd#rd&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot; data-style=&quot;padding: 6px; width: 514px; display: flex; justify-content: center; align-items: center; flex-wrap: nowrap; border-bottom: 1px dashed rgb(198, 226, 255); font-size: 13px; color: rgb(44, 95, 149); line-height: 18px;&quot;&gt;&lt;p data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NjIxNDYxMQ==&amp;amp;mid=2247516582&amp;amp;idx=1&amp;amp;sn=23337b6420263a73e7a023d205834d12&amp;amp;chksm=c30b421af47ccb0cf671b0b466923039c22329c69c5b2aff5ca91af1859bb3fb8b0074550dd0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员有一个产品经理女朋友是什么体验？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;程序员有一个产品经理女朋友是什么体验？&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247530159_2&quot; data-recommend-article-time=&quot;1618187460&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/R3InYSAIZkGeIAbmibW5uSiaPkwfbzQAT87rFqibCQ9icNWOJ3CGL6Ym7icVxsU5NuovUgXFkFVLficDjfpbQhwdVa2A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;开源一个SpringBoot + Mybatis + Vue的代码生成器&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;amp;mid=2247530159&amp;amp;idx=2&amp;amp;sn=06aaba47596c2b8e7e08c9e3c79ddea8&amp;amp;chksm=9bd3db37aca4522144f0ac41183d912ce40462f969d310a639db546976fa0062f5d8e12770c9#rd&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot; data-style=&quot;padding: 6px; width: 514px; display: flex; justify-content: center; align-items: center; flex-wrap: nowrap; border-bottom: 1px dashed rgb(198, 226, 255); font-size: 13px; color: rgb(44, 95, 149); line-height: 18px;&quot;&gt;&lt;p data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NjIxNDYxMQ==&amp;amp;mid=2247516422&amp;amp;idx=1&amp;amp;sn=2644179594efd9cb19f730410dc06251&amp;amp;chksm=c30b42baf47ccbacf6843b275ef04ce9d1dc501ebb03f2eb4b5c39838d7499462565836b4558&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;用去年的简历投了一遍所有拿到offer的公司，结果百感交集。。。&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;用去年的简历投了一遍所有拿到offer的公司，结果百感交集。。。&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247530285_1&quot; data-recommend-article-time=&quot;1618273920&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/R3InYSAIZkE52tUyg9wzRiaAcHDQGWH9gXNjibrGndqsxkTxRTthrJEc3e0uq2dyeWHk50bHgU0o0TYB0j96g4Rw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;用低代码平台开发比用IDEA还牛逼吗？&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;amp;mid=2247530285&amp;amp;idx=1&amp;amp;sn=e0c8a61f61e7e54fb8bae3f93f1d2d73&amp;amp;chksm=9bd3dab5aca453a34146274ddc814494b2f11db97a35047bcc8941bc53bf1c12f5bd85f5955b#rd&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot; data-style=&quot;padding: 6px; width: 514px; display: flex; justify-content: center; align-items: center; flex-wrap: nowrap; border-bottom: 1px dashed rgb(198, 226, 255); font-size: 13px; color: rgb(44, 95, 149); line-height: 18px;&quot;&gt;&lt;p data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NjIxNDYxMQ==&amp;amp;mid=2247516496&amp;amp;idx=1&amp;amp;sn=b8fe825c0bebcc706839a271e80afdfc&amp;amp;chksm=c30b42ecf47ccbfad36855f98ce6840589de8fd471a661628733acd635502fead03706db77e1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;新来个技术总监，把 RabbitMQ 讲的那叫一个透彻，佩服！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;新来个技术总监，把 RabbitMQ 讲的那叫一个透彻，佩服！&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247530075_1&quot; data-recommend-article-time=&quot;1618117500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/R3InYSAIZkHoHVO9kE5zegDRJfX7sS0ctiblRFyNW9vvXvvIMU5cuQfud81icALEia4DXuHEiaxPoHFib9KVhWAKPbw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;IntelliJ IDEA 2021.1正式发布！快来看看又有哪些神仙功能加入！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;amp;mid=2247530075&amp;amp;idx=1&amp;amp;sn=b063956e39aea6356d6fe4f93a1486a4&amp;amp;chksm=9bd3dbc3aca452d5c9aea6f51eff45ae4aef59454ca08d683fc14fadf4e3a474dff6c3374f71#rd&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot; data-style=&quot;padding: 6px; width: 514px; display: flex; justify-content: center; align-items: center; flex-wrap: nowrap; font-size: 13px; color: rgb(44, 95, 149); line-height: 18px; border-bottom: none !important;&quot;&gt;&lt;p data-mid=&quot;&quot; data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NjIxNDYxMQ==&amp;amp;mid=2247516615&amp;amp;idx=1&amp;amp;sn=8beb4571db8c4722fd6e2b0c68ed221e&amp;amp;chksm=c30b427bf47ccb6d125b8d6ecec3c910a166f4ded0ea9af03c3ab55e064c28d1f30ff1aa7488&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小团队也能做DDD-中篇&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;小团队也能做DDD-中篇&lt;/a&gt;&lt;br data-darkmode-bgcolor-16266178294118=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16266178294118=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16266178294118=&quot;rgb(67, 131, 199)&quot; data-darkmode-original-color-16266178294118=&quot;#fff|rgb(62, 62, 62)|rgb(44, 95, 149)&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NjIxNDYxMQ==&amp;amp;mid=2247514868&amp;amp;idx=1&amp;amp;sn=945c8ddee8e2d8ba286e4e8d709a25cd&amp;amp;chksm=c30b7948f47cf05e7a4313bff5e96760d415d132cf5e0c263d441487f37ea5eddefb2d18432f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《最全Java面试题库》总共651页Java面试题！！！包含Java 集合、JVM、多线程、并发编程、设计模式、Spring全家桶、Java、MyBatis、ZooKeeper、Dubbo、Elasticsearch、Memcached、MongoDB、Redis、MySQL、RabbitMQ、Linux等面试题！👇👇点击阅读原文领取！！！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;《最全Java面试题库》&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;总共651页&lt;/strong&gt;&lt;strong&gt;Java面试题！！！&lt;/strong&gt;&lt;/span&gt;&lt;strong/&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NjIxNDYxMQ==&amp;amp;mid=2247514868&amp;amp;idx=1&amp;amp;sn=945c8ddee8e2d8ba286e4e8d709a25cd&amp;amp;chksm=c30b7948f47cf05e7a4313bff5e96760d415d132cf5e0c263d441487f37ea5eddefb2d18432f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《最全Java面试题库》总共651页Java面试题！！！包含Java 集合、JVM、多线程、并发编程、设计模式、Spring全家桶、Java、MyBatis、ZooKeeper、Dubbo、Elasticsearch、Memcached、MongoDB、Redis、MySQL、RabbitMQ、Linux等面试题！👇👇点击阅读原文领取！！！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;包含&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Java 集合、JVM、多线程、并发编程、设计模式、Spring全家桶、Java、MyBatis、ZooKeeper、Dubbo、Elasticsearch、Memcached、MongoDB、Redis、MySQL、RabbitMQ、Linux等面试题！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0NjIxNDYxMQ==&amp;amp;mid=2247514868&amp;amp;idx=1&amp;amp;sn=945c8ddee8e2d8ba286e4e8d709a25cd&amp;amp;chksm=c30b7948f47cf05e7a4313bff5e96760d415d132cf5e0c263d441487f37ea5eddefb2d18432f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《最全Java面试题库》总共651页Java面试题！！！包含Java 集合、JVM、多线程、并发编程、设计模式、Spring全家桶、Java、MyBatis、ZooKeeper、Dubbo、Elasticsearch、Memcached、MongoDB、Redis、MySQL、RabbitMQ、Linux等面试题！👇👇点击阅读原文领取！！！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;👇&lt;strong&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/strong&gt;点击阅读原文领取！！！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>88039c6d0657c40e5ca5fb0bc49f00e1</guid>
<title>高性能 Java 计算服务的性能调优实战</title>
<link>https://toutiao.io/k/bgbsmkh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;作者：vivo 互联网服务器团队- Chen Dongxing、Li Haoxuan、Chen Jinxia&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;随着业务的日渐复杂，性能优化俨然成为了每一位技术人的必修课。性能优化从何着手？如何从问题表象定位到性能瓶颈？如何验证优化措施是否有效？本文将介绍分享 vivo push 推荐项目中的性能调优实践，希望给大家提供一些借鉴和参考。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、背景介绍&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在 Push 推荐中，线上服务从 Kafka 接收需要触达用户的事件，之后为这些目标用户选出最合适的文章进行推送。服务由 Java 开发，CPU 密集计算型。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;随着业务的不断发展，请求并发及模型计算量越来越大，导致工程上遇到了性能瓶颈，Kafka 消费出现严重的积压现象，无法及时完成目标用户的分发，业务增长诉求得不到满足，故亟需进行性能专项优化。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.704331450094162&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZP0v7t46aWfHG6UjgB7cFzIIug0VqricsS5ZLjiaDotgY9sfU9kajjYMIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;531&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、优化衡量指标和思路&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;我们的性能衡量指标是吞吐量 TPS ，由经典公式 &lt;em&gt;&lt;strong&gt;TPS = 并发数 / 平均响应时间RT&lt;/strong&gt;&lt;/em&gt;  可以知道，若需提高 TPS，可以有 2 种方式：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;实际情况中，我们的机器 CPU 利用率已经很高，达到 80% 以上，提升单机并发数的预期收益有限，故把主要精力投入到降低 RT 上。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面将从 &lt;strong&gt;热点代码&lt;/strong&gt; 和 &lt;strong&gt;JVM GC&lt;/strong&gt; 两个方面进行详解，我们如何分析定位到性能瓶颈点，并使用 3 招将吞吐量提升 100% 。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、热点代码优化篇&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;如何快速找到应用中最耗时的热点代码呢？借助阿里巴巴开源的 arthas 工具，我们获取到线上服务的 CPU 火焰图。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7748240813135262&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPZBK3wsUcWQp7nUibMD7PolJCG1QxLIb0ypX9dqXTPVS9jhIqhyS2qbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1279&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;火焰图说明：火焰图是基于 perf 结果产生的 SVG 图片，用来展示 CPU 的调用栈。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;火焰图就是看顶层的哪个函数占据的宽度最大。只要有“平顶”（plateaus），就表示该函数可能存在性能问题。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;颜色没有特殊含义，因为火焰图表示的是 CPU 的繁忙程度，所以一般选择暖色调。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.1 优化1：尽量避免原生 String.split 方法&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.1 &lt;/strong&gt;&lt;strong&gt;性能瓶颈分析&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;从火焰图中，我们首先发现了有 13% 的 CPU 时间花在了 java.lang.String.split 方法上。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;熟悉性能优化的同学会知道，原生 split 方法是性能杀手，效率比较低，频繁调用时会耗费大量资源。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不过业务上特征处理时确实需要频繁地 split，如何优化呢？&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;通过分析 split 源码，以及项目的使用场景，我们发现了 3 个优化点：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;（1）业务中未使用正则表达式，而原生 split 在处理分隔符为 2 个及以上字符时，默认按正则表达式方式处理；众所周知，&lt;strong&gt;正则表达式的效率&lt;/strong&gt;&lt;strong&gt;是低下&lt;/strong&gt;的。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8313641245972073&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPkXHEicgUd0cpswmuW34TE6ic15DFvOjyBxeYh5Ibic2fzTB76miccVlibgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;931&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;（2）当分隔符为单个字符（且不为正则表达式字符）时，原生 String.split 进行了性能优化处理，但中间有些内部转换处理，在我们的实际业务场景中反而是多余的、消耗性能的。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;其&lt;strong&gt;具体实现&lt;/strong&gt;是：通过 String.indexOf 及 String.substring 方法来实现分割处理，将分割结果存入 ArrayList 中，最后将 ArrayList 转换为 string[] 输出。而我们业务中，其实很多时候需要 list 型结果，多了 2 次 list 和 string[] 的互转。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.069408740359897&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPGfib9qYQYPdk1rOROWicXVPbP53bnNYrp71HWyk6JibrpoFlhONWYQibWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;778&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;（3）业务中调用 split 最频繁的地方，其实只需要 split 后的第 1 个结果；原生 split 方法或其它工具类有重载优化方法，可以指定 limit 参数，满足 limit 数量后可以提前返回；但业务代码中，使用 str.split(delim)[0] 方式，非性能最佳。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.2 优化方案&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;针对业务场景，我们自定义实现了性能优化版的 split 实现。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.lang3.StringUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SplitUtils&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; delim 分隔符&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt; 分割后的第一个字符串&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;code-snippet__title&quot;&gt;splitFirst&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String str, &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String delim)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; == str || StringUtils.isEmpty(delim)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; index = str.indexOf(delim);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (index == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 一开始就是分隔符，返回空串&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; str.substring(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, index);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 自定义分割函数，返回全部&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; str   待分割的字符串&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; delim 分隔符&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt; 分割后的返回结果&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String str, &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String delim)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; == str) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isEmpty(delim)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            List&amp;lt;String&amp;gt; result = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            result.add(str);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;String&amp;gt; stringList = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; index = str.indexOf(delim);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                stringList.add(str);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            stringList.add(str.substring(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, index));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            str = str.substring(index + delim.length());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; stringList;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;相比原生 String.split ，主要有几方面的改动：&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt; 放弃正则表达式的支持，仅支持按分隔符进行 split；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;出参直接返回 list。分割处理实现，与原生实现中针对单字符的处理类似，使用 string.indexOf 及 string.substring 方法，分割结果放入 list 中，出参直接返回 list，减少数据转换处理；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供 splitFirst 方法，业务场景只需要分隔符前第一段字符串时，进一步提升性能。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.3 微基准测试&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;如何验证我们的优化效果呢？首先选用 jmh 作为&lt;strong&gt;微基准测试工具&lt;/strong&gt;，对照选用 原生 String.split 以及 apache 的 StringUtils.split方法，测试结果如下：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;选用单字符作为分隔符&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6053962900505903&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPfLVYsuxiaqEZdTXRS4ia8d97NdEttI2fhOWIjA549N0PdcJxfMpawJKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;593&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;可以看出，原生实现与apache的工具类性能差不多，而自定义实现性能提升了约 &lt;strong&gt;50%&lt;/strong&gt;。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;选用多字符作为分隔符&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPWGsOfqDk711tMyMYQsqoYH9gibQ4icJnuiayEjUZHT2pXVficzXyFicCDUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;595&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;当分隔符使用 2 个长度的字符时，原始实现的性能大幅降低，只有单 char 时的 1/3 ；而apache的实现也降低至原来的 2/3 ，而自定义实现与原来基本保持一致。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;选用单字符作为分隔符，只需返回第 1 个分割结果&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6097972972972973&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPbsrj2ytHbU6CNYn8lUW31v3iaA46BAuRl8MU5xNqFGhJ1NYnSdORrAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;592&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;选用单字符作为分隔符，并只需第 1 个分割结果时，自定义实现的性能是原生实现的 2 倍，并是取原生实现完整结果的 5 倍。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.4 端到端优化效果&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;经微基准测试验证收益后，我们将优化部署到在线服务中，验证端到端整体的性能收益；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;重新使用arthas采集火焰图，split 方法耗时降低至&lt;strong&gt; 2%&lt;/strong&gt; 左右；端到端整体耗时&lt;strong&gt;下降了 31.77%&lt;/strong&gt; ，吞吐量&lt;strong&gt;上涨了 45.24% &lt;/strong&gt;，性能收益特别明显。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.2 优化2：加快 map 的查表效率&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.2.1 &lt;/strong&gt;&lt;strong&gt;性能瓶颈分析&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;从火焰图中，我们发现 HashMap.getOrDefault 方法耗时占比也特别多，达到了 20%，主要在查询权重 map 上，这是因为：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;业务中确实需高频调用，特征交叉处理后数量膨胀，单机的调用并发达到了约 1000w ops/s。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;权重 map 本身也很大，存储了 1000 万多的 entry，占用了很大一块内存；同时 hash 碰撞的概率也增大，碰撞时的查询效率由 O(1) 降低成了 O(n) （链表） 或 O(logn) （红黑树）。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Hashmap 本身是非常高效的 map 实现，起初我们尝试了调整加载因子 loadFactor 或 换用其它 map 实现，均未取得明显收益。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如何才能提升 get 方法的性能呢？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.2.2 优化方案&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;分析过程中我们发现查询 map 的 key（交叉处理后的特征 key ）是字符串型，且平均长度在 20 以上；我们知道 string 的 equals 方法其实是遍历比对 char[] 中的字符，key 越长则比对效率越低。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; boolean &lt;span class=&quot;code-snippet__title&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Object anObject&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt; == anObject) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (anObject instanceof String) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           String anotherString = (String)anObject;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;.length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (n == anotherString.&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;.length) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; v1[] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; v2[] = anotherString.&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (n-- != &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (v1[i] != v2[i])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   i++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;是否可以将 key 的长度缩短，或者甚至换成数值型？通过简单的微基准测试，我们发现思路应该是可行的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;于是与算法同学沟通，巧的是算法同学正好也有相同诉求，他们在切换新训练框架过程中发现 string 的效率特别低，需要把特征换成数值型。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;一拍即合，方案很快确定：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;算法同学将特征 key 映射成 long 型数值，映射方法为自定义的 hash 实现，尽量减少 hash 碰撞概率；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;算法同学训练输出新模型的权重 map ，可以保留更多 entry ，以打平基线模型的效果指标；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;打平基线模型的效果指标后，在线服务端灰度新模型，&lt;strong&gt;权重 map 的 key 改用 long 型&lt;/strong&gt;，验证性能指标。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.2.3 优化效果&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在增加了 30% 的特征 entry 数下（模型效果超过基线），工程上的性能也达到了明显收益；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;端到端整体耗时&lt;strong&gt;下降了 20.67%&lt;/strong&gt;，吞吐量&lt;strong&gt;上涨了 26.09%&lt;/strong&gt;；此外内存使用上也取得了良好收益，权重map的内存大小&lt;strong&gt;下降了30%&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6003372681281619&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPdMmWrBiblkwkZMqG3kvo0eGgzic3ZFanxFkDgIRlXSrayFUl5lQs67icg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;593&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、JVM GC优化篇&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Java 设计垃圾自动回收的目的是将应用程序开发人员从手动动态内存管理中解放出来。开发人员无需关心内存的分配与回收，也不用关注分配的动态内存的生存期。这完全消除了一些与内存管理相关的错误，代价是增加了一些运行时开销。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在小型系统上开发时，GC 的性能开销可以忽略，但扩展到大型系统（尤其是那些具有大量数据、许多线程和高事务率的应用程序）时，GC 的开销不可忽视，甚至可能成为重要的性能瓶颈。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6418439716312057&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPVAF227VlH4vK6vTN5myl6wKOicWwLssMCRhS2yDQrpRIHoex7qe8KFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;564&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;上图 模拟了一个理想的系统，除了垃圾收集之外，它是完全可伸缩的。红线表示在单处理器系统上只花费 1% 时间进行垃圾收集的应用程序。这意味着在拥有 32 个处理器的系统上，吞吐量损失超过 20% 。洋红色线显示，对于垃圾收集时间为 10% 的应用程序(在单处理器应用程序中，垃圾收集时间不算太长)，当扩展到 32 个处理器时，会损失 75% 以上的吞吐量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;故 &lt;strong&gt;JVM GC 也是很重要的性能优化措施。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们的推荐服务使用高配计算资源（64核256G），GC的影响因素挺可观；通过采集监控在线服务 GC 数据，发现我们的服务 GC 情况挺糟糕的，每分钟YGC累计耗时约 10s。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;GC 开销为何这么大，如何降低 GC 的耗时呢？&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.1 优化3：使用堆外缓存代替堆内缓存&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.1.1 &lt;/strong&gt;&lt;strong&gt;性能瓶颈分析&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6993810786914235&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPDtria0kdeoZAIEMHbFRKXQSiaQJjgTPExgwhW2CjSbGXJSUnP2n2VJwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1131&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;我们 dump 了服务的存活堆对象，使用 mat 工具进行内存分析，发现有 2 个对象特别巨大，占了总存活堆内存的 76.8%。其中：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;第 1 大对象是本地缓存，存储了细粒度级别的常用数据，每台机器千万级别数据量；使用 caffine 缓存组件，缓存自动刷新周期设定 1 小时；目的是尽量减少 IO 查询次数；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt; 第 2 大对象是模型权重 map 本身，常驻内存中，不会 update，等新模型载入后被作为旧模型进行卸载。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.1.2 优化方案&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如何能尽量缓存较多的数据，同时避免过大的 GC 压力呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们想到了把缓存对象移到堆外，这样可以不受堆内内存大小的限制；并且堆外内存，并不受 JVM GC 的管控，避免了缓存过大对 GC 的影响。经过调研，我们决定采用成熟的开源堆外缓存组件 OHC 。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;（1）OHC 介绍&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;简介&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;OHC 全称为 off-heap-cache，即堆外缓存，是 2015 年针对 Apache Cassandra 开发的缓存框架，后来从 Cassandra 项目中独立出来，成为单独的类库，其项目地址为&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;https://github.com/snazy/ohc 。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;特性&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section/&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;（2）OHC 用法&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;快速开始：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;OHCache&lt;/span&gt; ohCache = OHCacheBuilder.newBuilder().&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        keySerializer(yourKeySerializer)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .valueSerializer(yourValueSerializer)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .build();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;可选配置项：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8176470588235294&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPhrt2YvLKyzAISvyUGpcV6qL6qa74vYaOpbj2iaJSzqohUwENjkibhl9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;680&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在我们的服务中，设置 capacity 容量 12G，segmentCount 分段数 1024，序列化协议使用 kryo。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.1.3 优化效果&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;切换到堆外缓存后，服务 YGC 降低到了 800ms / 每分钟，端到端的整体吞吐量&lt;strong&gt;上涨了约 20%&lt;/strong&gt;。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.2 思考题&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在Java GC优化中，我们把本地缓存对象从Java堆内移到了堆外，取得了不错的性能收益。 还记得上文提到的另一个巨型对象， 模型权重 map 吗 ？模型权重 map 能否也从 Java 堆内移除？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;答案是可以的。我们使用C++改写了模型推理计算部分，包括权重map的存储与检索、排序得分计算等逻辑；然后将C++代码输出为 so 库文件，Java程序通过 &lt;strong&gt;native&lt;/strong&gt; 方式调用，实现将权重map从 Jvm 堆内移出，获得了很好的性能收益。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.30879345603271985&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt4VyhV4jdthFPMM8koVVxZPJXNKGtZGEoUPhJuicT9f2Xzjn5eG872ymhpke5OKFSCDqnZmiaw7vHOQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;489&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、结束语&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过上文介绍的 3 个措施，我们从 热点代码优化 与 Jvm GC两方面改善了服务负载与性能，整体吞吐量翻了 1 倍，达到了阶段性的预期目标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不过性能调优是永无止境的，而且每个业务场景、每个系统的实际情况也都是千差万别，很难用1篇文章去涵盖介绍所有的优化场景。希望本文介绍的一些调优实战经验，比如如何确定优化方向、如何着手分析以及如何验证收益，能给大家一些借鉴和参考。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-recommend-type=&quot;list-normal&quot; data-recommend-tid=&quot;2&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501257_1&quot; data-recommend-article-time=&quot;1636251616&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/0?wx_fmt=jpeg&amp;amp;amp;random=0.27521905775014543&quot; data-recommend-article-title=&quot;强势开源一款小程序！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强势开源一款小程序！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-11-07&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501242_1&quot; data-recommend-article-time=&quot;1634952613&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;强力推荐一个完善的物流（WMS）管理项目（附代码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强力推荐一个完善的物流（WMS）管理项目（附代码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-23&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501238_1&quot; data-recommend-article-time=&quot;1634606700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-19&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501208_1&quot; data-recommend-article-time=&quot;1632101100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;分享一套家庭理财系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;分享一套家庭理财系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-20&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42407407407407405&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501192_1&quot; data-recommend-article-time=&quot;1630718700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个互联网企业级别的开源支付系统&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个互联网企业级别的开源支付系统&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-04&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501176_1&quot; data-recommend-article-time=&quot;1629509100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一套开源通用后台管理系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一套开源通用后台管理系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-21&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501153_1&quot; data-recommend-article-time=&quot;1627704022&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;一款神仙接私活儿软件，吊到不行！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;一款神仙接私活儿软件，吊到不行！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-31&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501139_1&quot; data-recommend-article-time=&quot;1626571500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;基于 SpringBoot 的仿豆瓣平台【源码分享】&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;基于 SpringBoot 的仿豆瓣平台【源码分享】&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42427884615384615&quot; data-type=&quot;jpeg&quot; data-w=&quot;832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501105_1&quot; data-recommend-article-time=&quot;1623979500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;干掉 Wordpress！这个开源建站神器有点吊！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;干掉 Wordpress！这个开源建站神器有点吊！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-06-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42578125&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501098_2&quot; data-recommend-article-time=&quot;1623461160&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;从朋友那里搞了 20 个实战项目，速领！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4#rd&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;从朋友那里搞了 20 个实战项目，速领！&lt;/a&gt;&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;2021-06-12&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;200&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4703703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Baq5lYpIw7X6YPYGQITyP8Zdk96ab7CX0Ind5E05VokoepTP9Adic0xRwiaQrAvfTeC7iafngRibhBShpVqibqNcCCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如有收获，点个在看，诚挚感谢&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100018364&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;19&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk54JM0xl7WLNGnqqwbcXQBWIOCMuOgPHRoOjMamXzrCqMS2xgOo5ibic9icPk7u3zsVgic3s1ZUYJ4xHXg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e9ecba9489f85cd4d07c375437998759</guid>
<title>Jakarta EE 10 发布，开启云原生 Java 时代</title>
<link>https://toutiao.io/k/lrp0ulc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Jakarta Contexts and Dependency Injection (CDI) 4.0，包括支持构建时间扩展的 CDI-Lite &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Jakarta RESTful Web Services 3.1 标准化了 Java SE Bootstrap API ，并支持多部分 / 表单数据 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Jakarta Security 3.0 支持 OpenID Connect 和 Jakarta Persistence 查询中的新功能，并使用纯 Java 创建 Jakarta Faces 视图 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Jakarta EE 10 版本使用 Jakarta EE Core Profile 10 定义了一个新的配置文件规范，该规范定义了一个用于现代化和轻量级 Java 应用程序和微服务的多供应商平台。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新的核心配置文件提供了 Jakarta EE 规范的子集，这些规范针对适合具有轻量级运行时的微服务开发的较小运行时，包括用于构建轻量级 Jakarta EE 应用程序的新 CDI-Lite 规范。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Jakarta Servlet 6.0 用于简化编程并提高安全性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;带有使用 CDI 的现代化 API 的 Jakarta Faces (JSF) 4.0&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Jakarta JSON Binding (JSON-B) 3.0 新增对多态类型的支持&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Jakarta Persistence 将 UUID 标准化为基本类型并扩展查询语言和查询 API&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Jakarta Concurrency 3.0 移至 Web Profile ，增强了应用程序可用的并行和反应式编程模型&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>