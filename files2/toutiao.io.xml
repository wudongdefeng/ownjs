<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c9abe7f9aa74a1ce47d20b1a2285e80a</guid>
<title>创意！原来阮大佬博客的阅读进度功能这么简单</title>
<link>https://toutiao.io/k/e9q9qy6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;🎄 前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小包在学习阮一峰大佬的《ES6入门教程》时，对文章顶部的&lt;strong&gt;阅读进度&lt;/strong&gt;功能产生了浓厚的兴趣。小包当时猜想应该是使用 &lt;code&gt;JavaScript&lt;/code&gt; 实现的，但最近爱上了浩如烟海的 &lt;code&gt;CSS&lt;/code&gt; ，于是小包有个大胆的想法，单纯的 &lt;code&gt;CSS&lt;/code&gt; 能实现阅读进度功能吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;能，不止能，还非常巧妙！&lt;code&gt;CSS⭐CSS⭐CSS&lt;/code&gt; 真的太强了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然通过 &lt;code&gt;CSS&lt;/code&gt; 可以实现阅读进度问题，但 &lt;code&gt;JavaScript&lt;/code&gt; 作为老本行，一样得精通。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此学习本文，你可以学会:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;使用 &lt;code&gt;JavaScript&lt;/code&gt; 实现阅读进度功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用 &lt;code&gt;CSS&lt;/code&gt; 实现阅读进度功能&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;🔥 利用JavaScript实现阅读进度&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;📃 HTML与CSS&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;html css&lt;/code&gt; 部分非常简单，通过嵌套的两个 &lt;code&gt;div&lt;/code&gt; 实现，外部的 &lt;code&gt;div&lt;/code&gt; 提供底色背景，内部 &lt;code&gt;div&lt;/code&gt; 显示阅读进度&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;read_pro&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;read_pro_inner&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;.read_pro&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;position&lt;/span&gt;: fixed;&lt;br/&gt;    &lt;span&gt;top&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;left&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;3px&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;background-color&lt;/span&gt;: &lt;span&gt;#DDD&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;.read_pro_inner&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;content&lt;/span&gt;: &lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;position&lt;/span&gt;: absolute;&lt;br/&gt;    &lt;span&gt;left&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;background-color&lt;/span&gt;: &lt;span&gt;#0089f2&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们设置 &lt;code&gt;.read_pro_inner&lt;/code&gt; 的宽度为 &lt;code&gt;20%&lt;/code&gt; 时，得到的效果图如下:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.06694560669456066&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHrrOcWZv0kibCibqOT4dpARh4LuvqhGp3jM0hbuwFNtfeErDpNPIzbJJWxwopMSBj7urib7uQfOrX2LA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;478&quot;/&gt;&lt;figcaption&gt;read_pro_js.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;只截取部分图，并放大了浏览器，要不灰色部分会非常长&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;台子搭好了，下面就是通过 &lt;code&gt;js&lt;/code&gt; 来动态计算 &lt;code&gt;read_pro_inner&lt;/code&gt; 的 &lt;code&gt;width&lt;/code&gt; 即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;🎬 JS实现&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们利用 &lt;code&gt;JavaScript&lt;/code&gt; 来实现阅读进度，我们要获取到文档的总高度、文档滚动距离、浏览器窗口的可视高度。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;文档总高度: &lt;code&gt;document.documentElement.scrollHeight&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;窗口可视高度: &lt;code&gt;document.documentElment.cliengHeight&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;滚动距离: &lt;code&gt;document.documentElement.scrollTop || document.body.scrollTop&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;光看上面三个属性的名字有几分难以理解，来看一张示意图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8082191780821918&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHrrOcWZv0kibCibqOT4dpARh4g0U5z5iapz3Pf52WricThImagJR62W2yRz8PeU50ULUsTSB8hVM8Iicbg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;511&quot;/&gt;&lt;figcaption&gt;scroll.jpg&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上图可以看到 &lt;code&gt;scrollTop&lt;/code&gt; 就是已经读过被卷起来的文档部分，&lt;code&gt;scrollHeight&lt;/code&gt; 是文档的总长度，&lt;code&gt;clientHeight&lt;/code&gt; 是浏览器显示区域的高度&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;图源: &lt;span&gt;慕课手记&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取上面几个属性值后，阅读进度就可以通过下面的公式计算出来&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;readProInner.style.width = +(scrollTop / (scrollHeight- clientHeight)).toFixed(&lt;span&gt;2&lt;/span&gt;)*&lt;span&gt;100&lt;/span&gt; + &lt;span&gt;&#x27;%&#x27;&lt;/span&gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;大家可能会有疑惑，为什么分母是 &lt;code&gt;scrollHeight- clientHeight&lt;/code&gt; 而不是 &lt;code&gt;scrollHeight&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当滚动条滚动到底部时，浏览器此时仍显示一屏内容，此时滚动条无法再滚动，&lt;code&gt;scrollTop&lt;/code&gt; 无法再增加，因此 &lt;code&gt;scrollTop&lt;/code&gt; 的最大值是 &lt;code&gt;scrollHeight- clientHeight&lt;/code&gt; ，如果使用 &lt;code&gt;scrollHeight&lt;/code&gt; 做分母，阅读进度最终无法达到 &lt;code&gt;100%&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;document&lt;/span&gt;.addEventListener(&lt;span&gt;&#x27;scroll&#x27;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; scrollTop = &lt;span&gt;document&lt;/span&gt;.documentElement.scrollTop || &lt;span&gt;document&lt;/span&gt;.body.scrollTop;&lt;br/&gt;    readProInner.style.width = +(scrollTop/(scrollHeight-clientHeight)).toFixed(&lt;span&gt;2&lt;/span&gt;)*&lt;span&gt;100&lt;/span&gt; + &lt;span&gt;&#x27;%&#x27;&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;js&lt;/code&gt; 实现需要监听 &lt;code&gt;scroll&lt;/code&gt; 事件，而且滚动时有可能是频繁的 &lt;code&gt;scroll&lt;/code&gt; 事件触发，有可能会造成一定的性能浪费，所以我们来一起学习 &lt;code&gt;css&lt;/code&gt; 实现方案&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;🌟 使用CSS实现阅读进度&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;CSS&lt;/code&gt; 实现阅读进度的方法很有意思，而且非常巧妙，不多说了，一起来看看。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;📕预备知识&lt;/span&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;linear-gradient&lt;/code&gt;: 线性渐变，第一个参数为渐变方向，后面是颜色比例变化。&lt;/p&gt;&lt;p&gt;比如设置 &lt;code&gt;linear-gradient(to right top, #0089f2 50%, #DDD 50%)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;就可以实现下面效果，一个蓝色的三角形:&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5714285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHrrOcWZv0kibCibqOT4dpARh4p6PehicqcE6EjM4T5gic9bhVraGxHnXkYpuPZgIlOkTJqM9VtG7WrEhQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;980&quot;/&gt;&lt;figcaption&gt;body-linear.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;看到这种蓝色的三角形，你有没有感觉离阅读进度已经很近了？&lt;/p&gt;&lt;p&gt;如果我们用一块白块遮住蓝块，只留一条缝在顶部，那当前显示出来蓝色块的底边不就是阅读进度吗？&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6889168765743073&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHrrOcWZv0kibCibqOT4dpARh4fStelicuKnugfkKeaQ2iaC22UKKXxYVIubCLicgOJ4wWzh5CibkWhE9OTA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;794&quot;/&gt;&lt;figcaption&gt;scrollPro.gif&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;最后处理最后一屏的问题，保证滚动条滚动至底部时，阅读进度到达 &lt;code&gt;100%&lt;/code&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7034739454094293&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/H8M5QJDxMHrrOcWZv0kibCibqOT4dpARh4bKCZyD7UkoEpZWgh25XmhvcnTz1sZrEenotIvticDRgumlGEAiaMcrjw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;806&quot;/&gt;&lt;figcaption&gt;scrollBottom.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;这里如果没能理解原理，不用急，后面我会更详细的演示&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似于 &lt;code&gt;js&lt;/code&gt; 的功能检查，可以检查 &lt;code&gt;CSS&lt;/code&gt; 中某一属性或功能当前浏览器是否支持。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;💡 实现原理&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面讲解 &lt;code&gt;linear-height&lt;/code&gt; 时，我们提出了一种实现方案: 使用一块白块遮住蓝块，只留一条缝在顶部，显示的蓝条长度就是阅读进度&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;光说不难假把式，为了方便大家理解原理，我们使用一个案例来模拟一下，蓝块仍保持原来大小，使用一块 &lt;code&gt;0.8&lt;/code&gt; 透明度的黑块盖在上面，黑块给蓝块在顶部空出 &lt;code&gt;10px&lt;/code&gt; 空间。具体看下面演示&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7424441524310118&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/udZl15qqib0NGIZrkCnFNDMWZ0gChVrhia0fA8oWC26SlTZD7zsksiaicXDTvJictyWnYTeFNm93PtjvYMxLRlCdy0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;761&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;scrollShow.gif&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在是不是感觉瞬间茅塞顿开&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;💻 CSS实现&lt;/span&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;首先使用 `linear-gradient` 实现蓝色背景块，并且要空出最后一屏&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;body&lt;/span&gt;{ &lt;br/&gt;    &lt;span&gt;background&lt;/span&gt;: &lt;span&gt;linear-gradient&lt;/span&gt;(to right top, #&lt;span&gt;0089&lt;/span&gt;f2 &lt;span&gt;50%&lt;/span&gt;, #DDD &lt;span&gt;50%&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;/* 通过 calc 函数配合 100vh 就可以从总长中删除一屏的高度 */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;/* 100vh 浏览器视口的高度 */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;background-size&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt; &lt;span&gt;calc&lt;/span&gt;(&lt;span&gt;100%&lt;/span&gt; - &lt;span&gt;100vh&lt;/span&gt; + &lt;span&gt;4px&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;background-repeat&lt;/span&gt;: no-repeat;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;设置盖住蓝块的白块&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阅读进度条的高度为 &lt;code&gt;3px&lt;/code&gt; ，因此设置白块的高度为 &lt;code&gt;100% \- 3px&lt;/code&gt;，可以另外加一个 &lt;code&gt;div&lt;/code&gt; 元素来设置白块，但小包推荐使用为元素 &lt;code&gt;:before/:after&lt;/code&gt; ，伪元素不在文档流之中，方便渲染和控制&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;:before&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;content&lt;/span&gt;:&lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;/* fixed定位 */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;position&lt;/span&gt;: fixed;&lt;br/&gt;    &lt;span&gt;/* 同时设置 top 和 bottom 可以拉伸 height */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;/* 设置高度为 100% - 3px */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;top&lt;/span&gt;: &lt;span&gt;3px&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;bottom&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;/* 降低层级，白块显示在文字之下 */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;z-index&lt;/span&gt;: -&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;background&lt;/span&gt;: white;&lt;br/&gt;}&lt;br/&gt;复制代码&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面简单的代码，就可以实现封面阅读进度效果了，撒花~~~~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;🛕 源码仓库&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传送门: &lt;span&gt;阅读进度功能&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果感觉有帮助的话，别忘了给小包点个 ⭐ 。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a054a99a29b668e9d38dc187ab08d4d6</guid>
<title>基于 Doris 的知乎 DMP 系统架构与实践</title>
<link>https://toutiao.io/k/902qs8s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;DataFunTalk&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;datafuntalk&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;专注于大数据、人工智能技术应用的分享与交流。致力于成就百万数据科学家。定期组织技术分享直播，并整理大数据、推荐/搜索算法、广告算法、NLP 自然语言处理算法、智能风控、自动驾驶、机器学习/深度学习等技术应用文章。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>69c9d98928b722d928436a014bbbc6fd</guid>
<title>Dubbo 泛化调用引发的“血案”</title>
<link>https://toutiao.io/k/goxfkdv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上个月公司 ZooKeeper 集群发生了一次故障，要求所有项目组自检有无使用 Dubbo 编程式或者泛化调用，强制使用 @Reference 生成 Consumer。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;平台部给出的故障原因：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;泛化调用时候，provider 没启动，导致每次请求都在 ZooKeeper 创建消费节点，导致在短时间大量访问 &lt;span&gt;ZooKeeper &lt;/span&gt;并创建了240万+ 的节点，导致 ZooKeeper 所有节点陆续崩溃导致，多个应用因无法连接到 ZooKeeper 报错。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;原因是听说泛化调用时候，provider 没启动，导致每次请求都在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;创建消费节点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于并不是自己负责的项目，为了弄清楚背后的原因，通过进行实验来探究该故障的深层次原因。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2、求证&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2.1 泛化不使用缓存&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;测试代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public Result&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Map&lt;/span&gt;&amp;gt; getProductGenericCache(ProductDTO dto) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ReferenceConfig&amp;lt;GenericService&amp;gt; reference = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ReferenceConfig&amp;lt;GenericService&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ApplicationConfig application = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ApplicationConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    application.setName(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dubbo-demo-client-consumer-generic&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    RegistryConfig registry = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RegistryConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    registry.setAddress(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;zookeeper://127.0.0.1:2181&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ConsumerConfig consumer = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ConsumerConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    consumer.setTimeout(&lt;span class=&quot;code-snippet__number&quot;&gt;5000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    consumer.setRetries(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setApplication(application);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setRegistry(registry);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setConsumer(consumer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setInterface(com.demo.dubbo.api.ProductService.class); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setGeneric(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    GenericService svc = reference.get();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; target = svc.$invoke(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;findProduct&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[]{ProductDTO.class.getName()}, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;[]{dto});&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.success((&lt;span class=&quot;code-snippet__built_in&quot;&gt;Map&lt;/span&gt;)target);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于没有缓存 reference，因此每次请求这个方法，就会在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;创建个消费节点（无论 provider 是否启动）。请求量大的时候，就会导致 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;所有节点陆续崩溃。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果泛化不使用缓存，请求量大时会创建大量 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;节点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2.2 泛化使用缓存&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;测试代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public Result&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Map&lt;/span&gt;&amp;gt; getProductGenericCache(ProductDTO dto) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ReferenceConfigCache referenceCache = ReferenceConfigCache.getCache();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ReferenceConfig&amp;lt;GenericService&amp;gt; reference = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ReferenceConfig&amp;lt;GenericService&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ApplicationConfig application = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ApplicationConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    application.setName(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pangu-client-consumer-generic&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    RegistryConfig registry = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RegistryConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    registry.setAddress(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;zookeeper://127.0.0.1:2181&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ConsumerConfig consumer = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ConsumerConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    consumer.setTimeout(&lt;span class=&quot;code-snippet__number&quot;&gt;5000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    consumer.setRetries(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setApplication(application);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setRegistry(registry);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setConsumer(consumer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setInterface(com.demo.dubbo.api.ProductService.class); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setGeneric(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    GenericService svc = referenceCache.get(reference);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; target = svc.$invoke(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;findProduct&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[]{ProductDTO.class.getName()}, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;[]{dto});&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.success((&lt;span class=&quot;code-snippet__built_in&quot;&gt;Map&lt;/span&gt;)target);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经过测试，如果使用缓存，无论 provider 端无论是否启动，都只会在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;创建一个消费节点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2.3 设置服务检查为 true&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;设置 check=true，测试代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public Result&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;Map&lt;/span&gt;&amp;gt; getProductGenericCache(ProductDTO dto) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ReferenceConfigCache referenceCache = ReferenceConfigCache.getCache();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ReferenceConfig&amp;lt;GenericService&amp;gt; reference = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ReferenceConfig&amp;lt;GenericService&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ApplicationConfig application = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ApplicationConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    application.setName(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pangu-client-consumer-generic&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    RegistryConfig registry = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RegistryConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    registry.setAddress(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;zookeeper://127.0.0.1:2181&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ConsumerConfig consumer = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ConsumerConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    consumer.setTimeout(&lt;span class=&quot;code-snippet__number&quot;&gt;5000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    consumer.setRetries(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setApplication(application);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setRegistry(registry);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setConsumer(consumer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setCheck(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setInterface(org.pangu.api.ProductService.class); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    reference.setGeneric(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    GenericService svc = referenceCache.get(reference);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; target = svc.$invoke(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;findProduct&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[]{ProductDTO.class.getName()}, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;[]{dto});&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Result.success((&lt;span class=&quot;code-snippet__built_in&quot;&gt;Map&lt;/span&gt;)target);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;情况一&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;启动 provider 服务，然后启动消费端泛化，请求此泛化方法时，在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;只注册了一个 consumer 节点；停止 provider，再请求此泛化方法，发现 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;上此节点数量不变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是为什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;provider 停止后，请求不再创建 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;节点的原因是 RegistryConfig 的 ref 已经在启动时候生成了代理（由于启动时候 provider 服务存在，check=true 校验过通过），因此不再创建。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;情况二&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不启动 provider 服务，直接启动消费端泛化，请求此泛化方法，发现每请求一次，在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;就会创建一个消费节点。至此验证到故障。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFvNYc4kKDXSEfLWHjuib7JWzT1StY5ia2ajba4v9Xh7me7icvpIibyMh705877DwTSIpwwLVvDYicVrSUQ/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;614.076124567474&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;381.5726643598616&quot; data-ratio=&quot;0.6205211726384365&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eZzl4LXykQxOnt2dib2u2fr0r3ccEicVQYkY8lLmRymCJ1484e5XhdtXLhKebECUbkjbDYzdiaUGQqNE68s8v8gHw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;614&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么这种情况，为什么会每次请求都在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;创建消费节点呢？根本原因是什么？&lt;/span&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; T &lt;span class=&quot;code-snippet__title&quot;&gt;createProxy&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Map&amp;lt;String, String&amp;gt; map&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isJvmRefer) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (url != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; url.length() &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            List&amp;lt;URL&amp;gt; us = loadRegistries(&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (us != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !us.isEmpty()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (URL u : us) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    URL monitorUrl = loadMonitor(u);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (monitorUrl != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        map.put(Constants.MONITOR_KEY, URL.encode(monitorUrl.toFullString()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    urls.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(u.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (urls.isEmpty()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;No such any registry to reference &quot;&lt;/span&gt; + interfaceName + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; on the consumer &quot;&lt;/span&gt; + NetUtils.getLocalHost() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; use dubbo version &quot;&lt;/span&gt; + Version.getVersion() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;, please config &amp;lt;dubbo:registry address=\&quot;...\&quot; /&amp;gt; to your spring config.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (urls.size() == &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            invoker = refprotocol.refer(interfaceClass, urls.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            List&amp;lt;Invoker&amp;lt;?&amp;gt;&amp;gt; invokers = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Invoker&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            URL registryURL = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (URL url : urls) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                invokers.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(refprotocol.refer(interfaceClass, url));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (Constants.REGISTRY_PROTOCOL.&lt;span class=&quot;code-snippet__keyword&quot;&gt;equals&lt;/span&gt;(url.getProtocol())) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    registryURL = url; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (registryURL != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                URL u = registryURL.addParameterIfAbsent(Constants.CLUSTER_KEY, AvailableCluster.NAME);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                invoker = cluster.&lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; StaticDirectory(u, invokers));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                invoker = cluster.&lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; StaticDirectory(invokers));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Boolean c = check;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; consumer != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        c = consumer.isCheck();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        c = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (c &amp;amp;&amp;amp; !invoker.isAvailable()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        initialized = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Failed to check the status of the service &quot;&lt;/span&gt; + interfaceName + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;. No provider available for the service &quot;&lt;/span&gt; + (&lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt; == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt; : &lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt; + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/&quot;&lt;/span&gt;) + interfaceName + (version == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt; : &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;:&quot;&lt;/span&gt; + version) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; from the url &quot;&lt;/span&gt; + invoker.getUrl() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; to the consumer &quot;&lt;/span&gt; + NetUtils.getLocalHost() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; use dubbo version &quot;&lt;/span&gt; + Version.getVersion());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (logger.isInfoEnabled()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        logger.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Refer dubbo service &quot;&lt;/span&gt; + interfaceClass.getName() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; from url &quot;&lt;/span&gt; + invoker.getUrl());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (T) proxyFactory.getProxy(invoker);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首次请求泛化方法，由于 ReferenceConfig 的 ref 为 null，因此执行 createProxy，执行代码 @1、@2、@3，在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;创建消费节点，但是由于 check=true，因此抛出 IllegalStateException 异常，最终 ReferenceConfig 的 ref 依然为 null。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二次请求泛化方法，由于 ReferenceConfig 已经被缓存，这次的 ReferenceConfig 对象就是首次的 ReferenceConfig 对象，获取 ReferenceConfig 的代理对象 ref，由于 ReferenceConfig 的 ref 为 null，因此执行 createProxy，执行代码 @1、@2、@4，在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;创建消费节点，但是由于 check=true，因此抛出 IllegalStateException 异常，最终 ReferenceConfig 的 ref 依然为 null。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第三次以及后续的请求，都和第二次请求是一样效果。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么每次在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;都创建消费节点，只能说明订阅 URL 不同导致的。如果 &lt;span&gt;UR&lt;/span&gt;&lt;span&gt;L &lt;/span&gt;相同，在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;是不会创建的。那么订阅 &lt;span&gt;UR&lt;/span&gt;&lt;span&gt;L &lt;/span&gt;的组成对一个服务来说有哪些不同呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;查看 ReferenceConfig.init()，发现订阅 &lt;span&gt;UR&lt;/span&gt;&lt;span&gt;L &lt;/span&gt;上有 timestamp，是当前时间戳，这也说明了为什么每次都去注册，因为订阅 &lt;span&gt;UR&lt;/span&gt;&lt;span&gt;L &lt;/span&gt;不同，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46882217090069284&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFvNYc4kKDXSEfLWHjuib7JWzicYCCBBf3iahqpxJNsNmBFRLIqeqCoqdFNoGbxHnB2t369kLu9IGNVLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;433&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47344110854503463&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFvNYc4kKDXSEfLWHjuib7JWzfG1DF7REiaFjT2pwCvLSM43Nyk5VThMtGzkib3zXibf8zRiakQf0zzs9HQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;433&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;订阅 &lt;span&gt;UR&lt;/span&gt;&lt;span&gt;L &lt;/span&gt;上加上这个 timestamp 是否有些不合理呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;查看官方文档，在 2.7.5 版本中已经将订阅的 URL 中的 timestamp 去掉了，只会对一个 URL 订阅一次。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于使用了泛化调用，但启动者没有启动，而且使用了 check 等于 true，每次调用都会尝试去注册。但在 Dubbo 2.7.5 之前，注册的 URL 带了时间戳，导致每请求一次就在 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;上创建一个节点，导致产生大量节点，最终导致 &lt;span&gt;ZooKeeper&lt;/span&gt;&lt;span&gt; &lt;/span&gt;崩掉。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>66e2fa40c0c63e00ef9aac1a216eddac</guid>
<title>云原生大数据平台未来的发展趋势是什么？ - 知乎</title>
<link>https://toutiao.io/k/ask4hy4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;span class=&quot;RichText ztext CopyrightRichText-richText css-yvdm7v&quot; options=&quot;[object Object]&quot; itemprop=&quot;text&quot;&gt;&lt;p data-first-child=&quot;&quot; data-pid=&quot;MMJixSE8&quot;&gt;今天我们谈企业的数字化转型、精细化运营，我们实际上谈的核心是：&lt;b&gt;数据。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;GeFtbAsP&quot;&gt;「大数据」是近几年一个较为火热的技术词汇，国际数据公司 (IDC) 认为大数据有四个特征：海量 (Volume)、高速 (Velocity)、异构 (Variety) 和价值密度低 (Value)&lt;sup data-text=&quot;2019 年中国大数据行业研究报告&quot; data-url=&quot;https://pdf.dfcfw.com/pdf/H3_AP201911251371103072_1.pdf&quot; data-numero=&quot;1&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;2019 年中国大数据行业研究报告 https://pdf.dfcfw.com/pdf/H3_AP201911251371103072_1.pdf&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_1_0&quot; href=&quot;#ref_1&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。这也就意味着：&lt;b&gt;面对这种复杂度高的数据，企业难以用常规的手段进行处理，让数据得以发挥价值。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;YGtFcxIF&quot;&gt;大数据已经有了十余年的发展，从 2009 年流行的离线计算、2012 年的实时计算，再到 2015 年火热的机器学习，以及目前的主流方式：隐私计算、云原生。一个新的技术思想渐渐荷尖探头：数智融合。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://picx.zhimg.com/50/v2-4e5dc136a93cf0b2fc0d20e1867c2399_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1918&quot; data-rawheight=&quot;939&quot; data-default-watermark-src=&quot;https://pic4.zhimg.com/50/v2-5af035c4b092f54813b7298a83bdd547_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-4e5dc136a93cf0b2fc0d20e1867c2399_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1918&quot; data-rawheight=&quot;939&quot; data-default-watermark-src=&quot;https://pic4.zhimg.com/50/v2-5af035c4b092f54813b7298a83bdd547_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-4e5dc136a93cf0b2fc0d20e1867c2399_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://picx.zhimg.com/50/v2-4e5dc136a93cf0b2fc0d20e1867c2399_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;△ 大数据技术发展的历程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;aOzR88mR&quot;&gt;&lt;b&gt;那么，在数智化时代，云原生到底意味着什么呢？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;ABi77yjn&quot;&gt;云原生首先是由 Matt Stine 提出并延用至今，基于 DCMC 技术体系（D: DevOps, C: Container, M: Microservices, C: CI/CD）去发挥云计算基础设施的优势&lt;sup data-text=&quot;Cloud Native Architectures - a Conversation with Matt Stine&quot; data-url=&quot;https://www.infoq.com/articles/cloud-native-architectures-matt-stine/&quot; data-numero=&quot;2&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;Cloud Native Architectures - a Conversation with Matt Stine https://www.infoq.com/articles/cloud-native-architectures-matt-stine/&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_2_0&quot; href=&quot;#ref_2&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;&lt;p data-pid=&quot;JGSTE4eY&quot;&gt;云原生灵活的资源供给特性，给数据处理的架构带来了新鲜血液。大数据并不一定需要在云原生的环境下才能发展，但是云原生能让大数据释放出更大的能量。&lt;/p&gt;&lt;p data-pid=&quot;9y3r9wxI&quot;&gt;在这个背景下，&lt;b&gt;「云原生大数据平台」顺势诞生：它可以充分利用云基础设施来解决超大规模数据的获取、管理、存储和分析，并在整个数据治理的过程中降本增效，实现数据驱动商业。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;▎&lt;b&gt;如何实现大数据云原生&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;924-Qwx2&quot;&gt;对企业而言，数据是最重要的资产，而云原生大数据平台的价值就在于：如何让平台更易用，让企业能更聚焦数据之间的关系，进而更好地利用数据。&lt;/p&gt;&lt;p data-pid=&quot;ipCAkIhk&quot;&gt;当然，处理数据的系统或技术只是手段。我们在解决数据治理的问题时，关键点在于：&lt;b&gt;面向数据。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;aUnKyHgz&quot;&gt;基于这个原则，我们再结合市面上落地的技术，来分析数据价值化的最佳实践。&lt;/p&gt;&lt;p data-pid=&quot;kGyCIAUj&quot;&gt;一般而言，一个完善的大数据产品矩阵，至少应该包含以下三个层级：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;z0ohyyC6&quot;&gt;&lt;b&gt;数据基础设施：&lt;/b&gt;典型产品如数据湖计算 DLC、云数据仓库 CDW&lt;/li&gt;&lt;li data-pid=&quot;bUJbu286&quot;&gt;&lt;b&gt;数据中台服务：&lt;/b&gt;例如数据开发治理平台 WeData&lt;/li&gt;&lt;li data-pid=&quot;_tdSpRiC&quot;&gt;&lt;b&gt;数据应用服务：&lt;/b&gt;企业画像、可视交互系统等&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;ZZJq06_d&quot;&gt;首届腾讯云大数据峰会 ，腾讯云大数据发布了从基础引擎、数据治理到应用分析的完整产品矩阵，各位想详细了解的话也可以看一下。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pica.zhimg.com/50/v2-72043fb106592d2ee7407aa8f1c6cb3f_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-8c9a9bb50f5e3b24816196aa5c381b5d_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-72043fb106592d2ee7407aa8f1c6cb3f_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-8c9a9bb50f5e3b24816196aa5c381b5d_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-72043fb106592d2ee7407aa8f1c6cb3f_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pica.zhimg.com/50/v2-72043fb106592d2ee7407aa8f1c6cb3f_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;2sSOaH76&quot;&gt;&lt;b&gt;其中，底层的大数据基础设施为挖掘数据价值夯实基础，帮助构建数据资产一体化：&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;iM4jkEuR&quot;&gt;云数据仓库 CDW 是腾讯云实时云数仓品牌，旗下涵盖 CDW ClickHouse、CDWPostgreSQL、CDW Doris 等多款实时数仓引擎，覆盖 MySQL、PostgreSQL 生态，可以对海量数据进行即时的多维分析透视和业务探索，帮助客户快速构建企业云上数据仓库。&lt;/p&gt;&lt;p data-pid=&quot;M-UffZWv&quot;&gt;数据湖计算 DLC 提供了敏捷高效的数据湖分析服务。基于存算分离的产品架构体系实现数据资产统一建设，用户可以敏捷、低成本地管理和分析海量数据，打通数据孤岛，最大化释放数据价值。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pica.zhimg.com/50/v2-c02470bbdd390291224621b3e2c2cf36_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://picx.zhimg.com/50/v2-278ecf4734fd4efe9baffb598ee5f958_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pica.zhimg.com/v2-c02470bbdd390291224621b3e2c2cf36_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://picx.zhimg.com/50/v2-278ecf4734fd4efe9baffb598ee5f958_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pica.zhimg.com/v2-c02470bbdd390291224621b3e2c2cf36_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pica.zhimg.com/50/v2-c02470bbdd390291224621b3e2c2cf36_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;△ 腾讯云大数据基础产品&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;RW5H5Q9p&quot;&gt;&lt;b&gt;在提升数据价值密度的中间阶段，依靠的是大数据平台工具：如数据开发治理平台 WeData 等。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;chqGtryp&quot;&gt;WeData 是位于云端的一站式数据开发治理平台，融合了包含数据集成、数据开发、任务运维的全链路 DataOps 数据开发能力，以及数据地图、数据质量、数据安全等一系列数据治理和运营能力。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pica.zhimg.com/50/v2-9bfea9f24c4e11c4dea1b25382a45aac_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://pica.zhimg.com/50/v2-42641df44abf320d5b9ab5b71a1cb566_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pica.zhimg.com/v2-9bfea9f24c4e11c4dea1b25382a45aac_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://pica.zhimg.com/50/v2-42641df44abf320d5b9ab5b71a1cb566_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pica.zhimg.com/v2-9bfea9f24c4e11c4dea1b25382a45aac_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pica.zhimg.com/50/v2-9bfea9f24c4e11c4dea1b25382a45aac_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;△ WeData 数据开发治理平台&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;UgtUcVlA&quot;&gt;&lt;b&gt;通过底层基础设施和中台服务的构建，才形成了上层如企业画像、智能数据分析、大数据可视交互系统等大家能轻松上手的数据应用工具。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;_zVAzWq9&quot;&gt;三层由底到高，层层递进。&lt;/p&gt;&lt;h2&gt;▎&lt;b&gt;数据治理方法论&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;rO7PgdG3&quot;&gt;企业在进行「大数据」技术选型的时候，&lt;b&gt;除了要关注数据的「大」，更要关心数据的「治」，也就是「数据治理」。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;u_4-Zwox&quot;&gt;说起来看似轻巧，实际情况有「亿点点」复杂。&lt;/p&gt;&lt;p data-pid=&quot;VMndEgjh&quot;&gt;技术落地，需求先行。在数字化不同阶段，数据治理需要关注的核心需求是不一样的。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pica.zhimg.com/50/v2-7929e92ff6f14071c5dc89b81b72dc7d_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1349&quot; data-rawheight=&quot;561&quot; data-default-watermark-src=&quot;https://pica.zhimg.com/50/v2-842b363b9a780928189c4afd6d99ef13_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-7929e92ff6f14071c5dc89b81b72dc7d_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1349&quot; data-rawheight=&quot;561&quot; data-default-watermark-src=&quot;https://pica.zhimg.com/50/v2-842b363b9a780928189c4afd6d99ef13_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-7929e92ff6f14071c5dc89b81b72dc7d_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pica.zhimg.com/50/v2-7929e92ff6f14071c5dc89b81b72dc7d_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;△ 数据治理之「马斯洛需求层次」&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;gNe86hov&quot;&gt;在腾讯内部，数据治理不仅有来自管理的挑战，还有来自技术和业务的挑战。&lt;/p&gt;&lt;p data-pid=&quot;RD_joMC0&quot;&gt;在数百条产品线、数万业务场景、总存储达到 EB 级的情况下，首要的一点是&lt;b&gt;「组织支撑」：即基于 Oteam 协同构建全集团大数据统一体系。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;lx8juyrz&quot;&gt;在腾讯统一的数据平台体系中，数据资产化成为了可能，并在其上进一步赋予业务属性，建立数据服务生态。最后加持以新的技术能力，如机器学习、数智融合等，来挖掘数据价值，真正地通过数据驱动新的业务模式孵化和创新。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/50/v2-8a4a0e74fd4b3f9149c8f529258ad288_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://picx.zhimg.com/50/v2-a5690ea26feb8f28d7f2c6d7364a28e0_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pica.zhimg.com/v2-8a4a0e74fd4b3f9149c8f529258ad288_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://picx.zhimg.com/50/v2-a5690ea26feb8f28d7f2c6d7364a28e0_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pica.zhimg.com/v2-8a4a0e74fd4b3f9149c8f529258ad288_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic1.zhimg.com/50/v2-8a4a0e74fd4b3f9149c8f529258ad288_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;△ 腾讯内部实践方法论&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;QU0x3H9c&quot;&gt;以 QQ 音乐为例，QQ 音乐每天承载着万亿级新增数据，PB 级的数据分析服务，大数据在其发展中占据了重要作用。尤其在包括业务数据分析、推荐系统、经营分析等重点项目上，起到关键的数据支撑。&lt;/p&gt;&lt;p data-pid=&quot;fkNxURAj&quot;&gt;在面对业务快速迭代的挑战下，QQ 音乐通过基于 CDW ClickHouse 实现了 OLAP 平台架构演进优化，实时数据日接入能力达到数百万亿以上，实时链路平均延时缩短在秒级以内，大幅提升了数据分析的时效性。&lt;/p&gt;&lt;p data-pid=&quot;OWJPN_A4&quot;&gt;下图是 QQ 音乐敏捷数据平台架构：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/50/v2-e2915faa1145e78836aece4c2de0e05d_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://pic3.zhimg.com/50/v2-d72e2ef27f1c6c5a59e362c24492611c_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pica.zhimg.com/v2-e2915faa1145e78836aece4c2de0e05d_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://pic3.zhimg.com/50/v2-d72e2ef27f1c6c5a59e362c24492611c_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pica.zhimg.com/v2-e2915faa1145e78836aece4c2de0e05d_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic1.zhimg.com/50/v2-e2915faa1145e78836aece4c2de0e05d_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;△ TME - 敏捷数据平台架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;b4VMpABR&quot;&gt;数据中心主要承担了数据生命周期链路过程中平台化的建设，提升从数据采集 - 数据加工 - 数据存储 - 计算 - 应用管理各环节的数据使用效率，协同互补业务数据团队，为效果分析、个性化推荐、增长决策、内容评估等场景下提供数据服务平台。&lt;/p&gt;&lt;h2&gt;▎&lt;b&gt;数据未来，路在何方？&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;81si7RF9&quot;&gt;从技术到产业的深刻变革，业界逐渐形成一个共识：&lt;b&gt;算力是硬武器，数据治理是软实力。&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;X1vNfH9s&quot;&gt;数十年间，大数据产品的发展经历了从商业化软件购买、开源技术组件构建，到现在的开箱即用云原生大数据产品。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://picx.zhimg.com/50/v2-a15b4b55360f418eb5cf17aef2efa5d2_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://pica.zhimg.com/50/v2-34dd0cae5093b7a71f95f692d0e15ca3_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://picx.zhimg.com/v2-a15b4b55360f418eb5cf17aef2efa5d2_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; data-default-watermark-src=&quot;https://pica.zhimg.com/50/v2-34dd0cae5093b7a71f95f692d0e15ca3_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://picx.zhimg.com/v2-a15b4b55360f418eb5cf17aef2efa5d2_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://picx.zhimg.com/50/v2-a15b4b55360f418eb5cf17aef2efa5d2_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;△ 大数据技术的演进趋势&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;xrWoUbs2&quot;&gt;尽管云原生大数据有着巨大的价值收益，但二者技术的结合依然充满挑战。很高兴能看到腾讯云、NVIDIA、Alluxio、SelectDB 等多家大数据企业和开源社区，共同成立了云原生大数据技术生态联盟。&lt;/p&gt;&lt;p data-pid=&quot;MM5G6o4V&quot;&gt;从用户和客户的角度而言，数字化浪潮是不可避免的趋势。对数据上云非常看重的一点还有「安全可信」。因此，隐私计算、多方加密是非常重要的能力。这也是数据未来的一个重中之重。&lt;/p&gt;&lt;p data-pid=&quot;xMn0Lrmy&quot;&gt;而在包括我在内的技术工作者看来，从开源到开放，做好服务和生态则是当下的重要任务。&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://xg.zhihu.com/plugin/00f78d8154c5b3bbd15e4f6c4c700c9f?BIZ=ECOMMERCE&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-is-ecommerce=&quot;1&quot; class=&quot;LinkCard internal old&quot;&gt;&lt;span class=&quot;LinkCard-content LinkCard-ecommerceLoadingCard&quot;&gt;&lt;p class=&quot;LinkCard-ecommerceLoadingCardLoadingbar&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/a&gt;&lt;p/&gt;&lt;h2&gt;参考&lt;/h2&gt;&lt;ol class=&quot;ReferenceList&quot;&gt;&lt;li id=&quot;ref_1&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_1_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;span&gt;2019 年中国大数据行业研究报告&lt;/span&gt; &lt;a href=&quot;https://pdf.dfcfw.com/pdf/H3_AP201911251371103072_1.pdf&quot; class=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://pdf.dfcfw.com/pdf/H3_AP201911251371103072_1.pdf&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;ref_2&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_2_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;span&gt;Cloud Native Architectures - a Conversation with Matt Stine&lt;/span&gt; &lt;a href=&quot;https://www.infoq.com/articles/cloud-native-architectures-matt-stine/&quot; class=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://www.infoq.com/articles/cloud-native-architectures-matt-stine/&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7686f1f54605b63fcebcea419b11fc00</guid>
<title>关于云音乐数据治理的实践与思考</title>
<link>https://toutiao.io/k/8zqkqed</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;hr/&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文结合过去一段时间云音乐数据开发团队在数仓建设、数据治理方面的具体实践，分享我们在数据治理方面的一些思路。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如今的云音乐已经成为一款大众产品，用户每天来云音乐听歌、看评论、逛社区，这个过程中沉淀下来了海量用户数据。平台现在每天收集处理的用户日志已经达到千亿级别，整个集群处理加工使用的数据总量达到了200PB。解决这么大规模下数据存储、处理、使用中的技术问题，作为一名数据开发首先是感到兴奋，但另一方面更多的数据意味着花费更大硬件支出去做计算、存储。如何发挥数据的价值，证明这笔钱花得值，同时降本增效最大化数据使用的ROI，是我们一直以来思考并且努力去解决的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从我们调研大量类似发展阶段公司的经验来看，在这个时期推动数据治理，是一条被证明可行并能带来巨大价值的道路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么什么是数据治理？实际上数据治理的范畴相当广泛，按照Google对于数据治理的定义，它包含了数据生命周期（从获取、使用到处置）内对其进行管理的所有原则性方法。涵盖确保数据安全、私有、准确、可用和易用所执行的所有操作，包括必须采取的行动、必须遵循的流程以及在整个数据生命周期中为其提供支持的技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这么一看好像我们做的很多事情都可以往这个框子里装。但同时数据治理有那么多的方向可以做，又可以从什么点入手？下面的篇幅中，我分享一些云音乐数据团队过去在数据建设中做的工作，以及近期在做数据治理方面的思路和进展，最后会整理总结下在现阶段我们眼中的数据治理体系是什么样的？&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;前期一些工作&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在前面几年的工作中云音乐数据团队在数仓建设方面主要经历了几个阶段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1 完善公共层建模及建立相应的设计、研发规范。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过“任督计划”，团队重点完成了几件事情：编写整理了《云音乐数据仓库建模规范》，并在该规范基础上与杭研共建了“easyDesign”数仓模型设计系统。同时也对云音乐的数据主题域、主题域之间关系进行了系统性的梳理输出，完善了覆盖全业务的总线矩阵。以上工作的开展让云音乐的数据资产沉淀开始变得有方向，在后面的大半年内，完成了关于人、物、场景等实体的大量数据公共层建设。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2 数据链路治理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在完善自身的开发设计规范之外，我们总结用户使用中反馈的问题，也把一部分精力投入到上下游数据链路的治理中。其中碰到比较突出的问题是埋点质量，我们在20年初开始做了第一个埋点治理的项目，主要的目标是希望通过标准的流程和对应的平台工具把埋点的设计、开发、测试这个过程规范起来，做好事前、事中、事后的管理。音乐相关团队和杭研经过碰撞共建，讨论制定埋点流程、规范并完成系统化，埋点管理平台“EasyTracker”面世。在此基础上，数仓的小伙伴又花了大约半年的时间，把原有几千个埋点做了迁移，基本实现了埋点格式的标准化以及埋点流程的规范和可管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.3 推动自助取数，发挥数据生产力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;杭州研究院汪院之前提出要做到人人用数据，天天看数据。我们重点去思考了怎么解决数据最后一公里问题。在工具层面，有数很快给出了EasyFetch（自助取数）的原型，后面的一段时间两边同学基本上是背靠背在解决各个问题，优化体验。经过几轮迭代下来，EasyFetch在功能性和易用性方面均能满足业务的诉求。而我们重点思考的是怎么样把工具的价值发挥到最大，这中间的核心还是数据，要有好用的适合自助取数分析的数据模型。通过大量的贴近业务线的应用层关键数据模型建设，以及开展的以下几件事情：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基本上做到自助取数的业务全覆盖，整个2020年通过EasyFetch完成的自助取数超过15万次，内部用户400多人，最大日活超过100人。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;数据治理三件事&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;前期几方面的工作下来可以说解决了阶段性的问题，进入21年云音乐启动了IPO，整个21年分析师团队和数据开发花了大量时间产出各类投资人关注的数据、指标、报告。同时业务方在更大的业务目标牵引下，有了更多、更精细化的运营动作，随之而来的又是大量的分析、取数需求，更多的数据模型建设需求，还有更快速的响应时效要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2021年12月云音乐顺利上市，团队很好的完成了IPO数据项目。下个阶段，如何做得更好？数据建设、数据治理最终是要服务于业务发展目标。下个阶段团队核心的目标是要能支持业务挖掘增量、运营存量，实现更精细化的运营。所以在数据的生产端，我们提出了要建立数据的精益生产体系，为业务提供统一、易用、准确、稳定的数据仓库的目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49539170506912444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXkicnMhaY3aDo28sOsiaB5re9x1JVtIvyqeg3l6WkwIzTic8jIOFZNJPS8Rkn6b0U9yIia5sVcqll8Jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;868&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在已有数据建设的基础上要实现这个目标，有赖于开展更有效、体系化的数据治理，其中我们把质量治理、资产化、降本增效作为22年工作的重点目标。通过吸收已有的数据治理方法论（如DAMA）和业内公司的一些好的实践经验，展开了大量工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.1 质量治理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多人会问，你们做了这么久的数仓为什么还在抓质量问题？数据建模的设计、开发标准化是不是已经解决了这个问题？我的回答是：魔鬼在细节。就像每个汽车生产企业，对于车辆的生产过程，基本上也是标准化的，但丰田的质量就要比发明标准化流水线的福特更好。核心还在于对生产过程更细致的拆解和更有效的管理。所以质量管理是一个永无止境的问题，针对现阶段的目标，我们重点从制定质量标准、强化规范执行、优化平台工具几方面去开展工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5275689223057645&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXkicnMhaY3aDo28sOsiaB5re1AXqAhDm7PmFpBF5cvLsbOscrwIsOynMmkxz2icoDuVD7icm2uQLdxXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;798&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图是我们针对质量稳定性拆解需要做的事情，而每一个工作又可以细化出一个专项甚至几个。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以元数据中心为例：作为定义数据的数据，元数据帮助我们更好的理解和刻画数据本身以及反应数据与数据的准确关系，是数据治理的基础。另一方面，元数据本身也是一种数据，也存在缺失、不准确等等问题，也需要治理。在云音乐的数据治理工作中，我们把元数据梳理及可获取列为优先的工作开展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.28515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXkicnMhaY3aDo28sOsiaB5reNHRu5z2zAm4MST2BQG1XfYQ4wgK4rpGsicPzoQWUKhVfRvSIeEcp34A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的表格列了具体的分类细项和我们推动解决的一些问题，中间和有数一起花了一个季度的时间，通过双周迭代的方式最终做到元数据可获取，完整性准确性达到了我们治理的要求，也为我们后续的数据治理打下了一个坚实的基础。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再以执行侧的任务运维为例，生产环境的稳定性和安全对每个数据团队来说都是头等大事。曾经有一份统计，工业化生产过程中大部分安全问题来自于人，具体到杜邦的数据是96%。作为技术人员我们总是期望开发更好的工具去规避风险，而往往忽视了人的能动性。这并不是说把质量、安全这件事情简单转化为对人的考核。当一个人不知道应该做什么事情去达成目标时，他也没法为这件事情负责。团队前期花了非常多的时间去整理值班运维手册，把信息同步、问题告警、原因分析、问题升级、记录&amp;amp;复盘等等环节做成了SOP，同时制定了最重要的两条军规，（1）生产无小事”——再小的生产问题都要重视。（2）“哪里来的问题回到哪里去”——有始有终，最终处理结论一定要同步到问题开始的地方。一段时间下来执行效果显著，今年上半年，整体任务破线率下降了60%，另一个重要的指标，线上修复时长降低了80%，这代表数据问题得到了更快速的处置。其他每个细项的工作，限于篇幅不再一一展开介绍，有机会单独整理分享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.2 资产化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据资产化的前提是数据成为生产要素，核心是要在生产中被使用且带来价值，对于数仓建设来说就要解决可用、易用问题，同时要解决数据与业务价值关联性的问题。而这些问题是否解决了，解决的程度如何需要有明确的标准来衡量。虽然我们每天在与各种指标打交道，但对于自身数据建设，我们在量化评估指标体系这件事情上思考是不足的。如何准确快速地回答“你们的数仓建得怎么样？”这类问题经常困扰我们，如果把它当做一道证明题去回答，可能需要从几个方面阐述：首先介绍下我们数仓整体的设计规范是什么样的，从业务过程梳理到标准业务总线矩阵输出，再到具体模型的设计遵循哪些原则和范式。然后可能会贴一张大图，阐述下基本的分层，业务线的划分等等。或者再补充下我们已经建了多少个表，事实表有多少，维表有多少等等。或者再从价值层面做补充，通过一些show case去证明数据的magic power。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际情况是提问的人可能并没有那么耐心花一个小时去听，然后还需要自己去判断得出结论。对于最终用户来说什么样的设计规范和生产流程真的是他们最关心的吗？显然不是。所以最近的一段时间我们反思了过去的一些不成功经验，也吸收了很多业内好的实践，提出了新的用户视角的标准来衡量数据仓库建设的现状。即“三度模型”，从建设进度、资产健康度、业务价值度这几方面制定了量化的目标来定义建设水平，并且从这些目标出发制定了数据资产化的整体规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.15542168674698795&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXkicnMhaY3aDo28sOsiaB5reaQkRiaVzYtbrcS3U1r9mibwkAgeMV0kjgFBn4ic2DgfckIRvBRBu9fLKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;&lt;span&gt;上述目标的过程中，团队也逐步摸索总结出一套工作的方法论（如上图），从制定相应的标准，到通过流程和工具完善治理能力，再到与相关方建立渠道持续运营，三板斧下来，拿到结果变得可以预期。&lt;/span&gt;&lt;span&gt;经过一段时间持续的沟通（安利）和讨论，各业务团队的用户逐渐对这套标准建立了共识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;少了长篇大论做证明题，而是定期把各项达成共识的指标透明化出来，结合结果做分析输出，沟通成本变低了！对用户来说，交付结果更可追踪可预期，对数据团队来说工作的努力、拿到的结果也更容易从数据层面来体现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就以资产复用率为例，经过大半年的模型重构，以及对老模型的逐步下线（累计下线2.4万张表），我们的数据资产复用率从30%，直接提升到55%，这表示我们的数据使用效率上得到了接近一倍的提升，同时这个数据与业内工作进行比较也看到目前云音乐数据资产整体的复用率在一个比较健康的水平，未来半年内我们也有信心可以提升到比较先进的水平。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.3 降本增效&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近期大环境的影响让很多公司感受到“寒气”，在业务面临多重压力，“降本增效”显得尤为重要：通过降本增效提升企业生存耐力，为未来更快增长积蓄潜力，成为一种战略手段。云音乐数据团队的降本增效工作大致是从三个方面展开：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）成本&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先要算清大帐，关于这一点要感谢有数的同学，虽然每个月的账单都让人看得心惊肉跳，但是整体的收费情况，每个服务类目的支出以及对应的变更日志都列的非常清楚。使得我们可以把精力花在盘点各个服务水位上。有了总的和分类目的支出，以及各服务的水位整体情况，基本上可以对大帐有个清晰的概念，如下表（音乐离线集群部分盘点）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4863636363636364&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXkicnMhaY3aDo28sOsiaB5renQgPkAvUYibMicAWZvAdKoNrk9SpsCn6JaUT4vJ0kegkzKrp9UIiaTlow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;660&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有了成本大图，需要进一步把成本下钻拆解到业务线、团队以及个人，拆解的过程中也碰到一些诸如任务归属责任人不清楚，血缘数据缺失等等问题，更进一步证明了元数据在数据治理中的重要性，好在我们和有数的同学花了一个季度的时间终于把元数据的问题搞定，做到了可用并且可视化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）计划&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里简单列一下我们整体的计划大纲，确定了几个重点：1.前面介绍到的先搞定元数据，让治理结果有数可依，治理过程精准把控。2.优先解决占成本大头的存储和计算的优化问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5518341307814992&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXkicnMhaY3aDo28sOsiaB5redROQgp08Vewicz0NgI5pRUsbSdbZDCczc4XZXVSLyTqBymseiahGeErg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;627&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了大纲确定具体方向和专项目标以外，具体到推进过程中我们从正反两个思路去解决一个一个问题：&lt;/span&gt;&lt;span&gt;正推，阵地战，对于那些可以通过元数据的扫描梳理出治理目标，推进相对容易，可以按照迭代推进，逐步拿到结果。&lt;/span&gt;&lt;span&gt;反推，攻坚战，很多资源消耗产出链路是正常的，对应着正常的下游报表和功能。&lt;/span&gt;&lt;span&gt;但经过多年的迭代，很多数据和功能已经不看了或者有更好的替代，需要去从最终的使用情况盘点和推进解决，这个过程中需要依赖数据，也要有重点地搞。&lt;/span&gt;&lt;span&gt;甚至，在沟通中还需要那么一点战斗精神...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（3）优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为码农团队，降本增效只靠运动式大扫除短期内能拿到确定性结果，长期做肯定不行，技术优化还是第一生产力。举个例子，音乐业务优化结果比较显著的一块是通过和有数合作的Spark3+Z-order+Zstd改造优化拿到的。Spark3发布以来团队一直在关注AQE等重要特性，希望通过优化大量的SQL执行计划，提高整体集群Spark作业的性能和稳定性。而杭研的同学在Spark方面有大量深入的研究，经过调研除了AQE，也推荐我们通过引入Z-order提升文件压缩率，从而提升整体的存储资源效率。上半年经过多轮迭代、测试以及任务改造，我们完成了：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;hive任务升级spark3.1，升级任务266个,升级任务消耗资源占比95%，优化之后的执行耗时降低60%以上，优化之后计算资源费用减少60%；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;spark2升级spark3,完成631个spark2任务的升级，升级任务消耗资源占比90%，优化之后资源节省28.71%，性能提升52.07%；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;spark3.1+zorder+gzip专项治理：升级优化170个，节省存储占比68%，节省日均存储55T，折合存储成本798.3W/Y。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;计算资源方面，经过一系列的升级动作，集群的稳定性在较长的一段时间内保持稳定，给后续的基线530项目（核心产出提前到每天5:30）提供了较好的保障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;存储方面，日增趋势放缓，由原来的日增170T，下降到日增50T(有一部分来自生命周期管理效果)。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-original-title=&quot;&quot; title=&quot;&quot;&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p hm_fix=&quot;360:461&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;一些体系化思考&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;近期一段时间的数据治理工作坐下来，简单总结下我们所做的事情，大概可以以一张图来简单概括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6590361445783133&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOXkicnMhaY3aDo28sOsiaB5res93TxeZib2KzEDXcXaKmnT6ia7uiaKFZGhFw3b4VYW4vH8pIkKuNv4SNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）方法论：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;没有理论指导的实践是盲目的，数仓建模、数据治理，都已经沉淀了较为成熟的理论体系，无论是熟知的DAMA数据管理知识体系，还是业内各团队的专家对于数据治理的总结思考都为我们提供了非常好的理论和方法指引。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一方面这些方法本质上是工具箱，不同团队的发展阶段、业务诉求不同，对应的数据治理方向和目标也就不同，必然对应着使用不同的工具去解决问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）标准：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们现阶段在云音乐做的数据全生命周期治理，相应的标准化是贯穿在事前、事中、事后全过程的。事前建立共识、明确的可量化的目标，最好签字画押。比如我们的质量稳定性SLA标准、数据资产三度评估标准、资源水位量化评估标准等，事中要细化每一个执行环节制定标准动作，包括流程的建立，以及在每个节点上的SOP（比如我们的运维军规、研发红线），做到执行者有章可循。事后也要结合事前的目标，用评估标准来衡量完成的质量和进度，开始下一个循环。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（3）组织：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;数据治理一定是服务于业务的愿景和战略，并不是一个脱离具体环境的万金油任务，数据治理解决什么问题需要被明确定义。在云音乐，业务发展进入成熟期，精细化运营对取数看数质量、易用性等诉求以及整体降本增效的大背景促使我们提出了质量、资产化、降本增效三方面的目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于执行以及角色分工，我们认为数据治理应该是一个融入生产过程，全员参与的事情。不建议通过增加新的独立岗位，或者设立委员会的方式去推动数据治理的落地，而是通过明确职责分工，落实主体责任来进行。另外，为了防止数据团队既当裁判员又当运动员，整个体系增加对抗性来保持稳定运行，我们在很多治理过程是通过与兄弟团队合作来完成。比如在质量稳定性目标中，虽然sla标准整体由数据团队来牵头，但过程的考核监督、报告、复盘是由QA团队来完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（4）技术：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;对于平台化工具，我们坚持的观点是先有具体问题，再有对应流程规范、最后才是工具。我们虽然有平台开发小组，整体工作并没有追求大而全，更多还是以实用为主，无用的轮子也少很多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上可以认为是数据治理中我们可以拿到的α收益，但有时新技术的创新、演进可能超出我们的想象，所以拿到新技术发展的β收益，要求我们必须保持对新技术的跟踪同时经常与杭研公技团队做技术交流。这是一件必须要坚持做的事情，过去的工作中带给我们非常大的收益，这里也感谢有数团队对我们的支持。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101582&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;作者简介&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p hm_fix=&quot;322:369&quot;&gt;&lt;span&gt;朱一飞，网易云音乐数据开发负责人。主要负责数据相关的资产建设、平台工具体系搭建及产品化等相关工作。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNTUxNTI1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/sYBGQlzfEOV4Bfic2e5zqTMCl0XxmMuVq1XpDOBrbXicVB4KmrEXglsWcnMREoQXfX24sscdvQIR74ic3SiciaLoMFA/0?wx_fmt=png&quot; data-nickname=&quot;网易有数&quot; data-alias=&quot;Youdata_Netease&quot; data-signature=&quot;网易有数是网易数帆旗下大数据技术与服务品牌，以“数据价值”为导向，聚焦于企业 “看数”、“管数”、“用数”等业务场景，提供全链路大数据技术及产品服务，致力于盘活企业数据生产力，加速实现数字化转型。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>