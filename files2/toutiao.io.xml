<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4b547f60ae6119ec23bb22066050bdf7</guid>
<title>优质网站同好者周刊（第 074 期） | 倾城博客</title>
<link>https://toutiao.io/k/wjiq1dv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%8F%91%E7%8E%B0&quot;&gt;&lt;code&gt;发现&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%88%9B%E4%B8%9A%E8%80%85&quot;&gt;&lt;code&gt;创业者&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%A4%BE%E5%8C%BA&quot;&gt;&lt;code&gt;社区&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;BetaList provides an overview of upcoming internet startups. Discover and get early access to the future.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/betalist.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Discover and get early access to tomorrow&#x27;s startups | BetaList&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://betalist.com/&quot;&gt;BetaList&lt;/a&gt; ，是一个在线平台 ， 使用户能够发现、并尽早接触最新的互联网创业公司的社区。它由制造商和早期采用者（adopters）组成，是早期采用者发现即将推出，以及最近推出的互联网初创公司的地方，也是初创公司创始人与世界分享他们的初创公司，并获得早期用户反馈的地方。如果您拥有初创公司，您可以提交您的网站至 &lt;code&gt;betaList&lt;/code&gt;，当然您也可以在 BetaList 做广告，以便得到更多的曝光。&lt;/p&gt;&lt;p&gt;对于更多普通用户，您可以在 BetaList 了解当年一些创业的想法和实现，从而汲取灵感，相信无论对于您创业，或者高效工作、快乐生活，都有一定参考价值。如果您想了解更多关于 BetaList，可以参见 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://betalist.com/faq&quot;&gt;BetaList FAQ&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62d01a5f65fb1506218fa5da&quot;&gt;倾城之链 - Discover and get early access to tomorrow&#x27;s startups | BetaList&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%89%E8%B6%A3&quot;&gt;&lt;code&gt;有趣&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85&quot;&gt;&lt;code&gt;独立开发者&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E4%BA%A7%E5%93%81&quot;&gt;&lt;code&gt;产品&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：habits, habits tracker, build habits, habit tracker, consistency, be consistent, create habit, good habit, atomic habits, garden, habits garden, procrastination&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Build habits to grow a garden. Turn your daily tasks into a game with friends. Achieving your goals has never been so easy, fast, and fun!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/habitsgarden.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Beat procrastination with a gamified habit tracker - Habits Garden&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://habitsgarden.com/&quot;&gt;Habits Garden&lt;/a&gt; ，习惯花园，一款在线产品应用，旨在用游戏的形式，来让你养成一个习惯，从而战胜拖延症，比如读书，戒烟，学英语等等。其内在逻辑是，它利用游戏的令人上瘾的力量，来帮助您养成与朋友一起玩乐的好习惯。具体是：通过挑战任务，来完成目标，获得奖励，然后重复，从而帮助养成习惯。每天打卡获得钻石，钻石可以用来种树，进而种植一个美妙的花园。您也可以邀请好友一起来，查看他们的习惯，互相激励，争夺每周排行榜！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://habitsgarden.com/&quot;&gt;Habits Garden&lt;/a&gt; 界面设计非常简洁好看，还有音效和动画；作者不打算提供 IOS 或 Android 应用，您可以将 Habits Garden &lt;strong&gt;添加到您的主屏幕&lt;/strong&gt;（通过&lt;code&gt;浏览器&lt;/code&gt;），它的行为就像一个原生应用程序。您可以在智能手机、平板电脑和笔记本电脑上，使用习惯追踪器。habits garden 免费可用，当免费试用期（7 天）结束后，游戏功能被锁定（花园、任务、奖励等），您的帐户被切换到 Free-Forever Habit Tracker Plan。您可以免费使用最令人满意的习惯跟踪器，继续完成您的日常习惯！值得一提的是：该产品是作者（ @marc_louvion ）独立完成，目前在巴厘岛，天天冲浪，这个产品。每月给他带来数百美元的收入。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62d00b7765fb1506218fa5d8&quot;&gt;倾城之链 - Beat procrastination with a gamified habit tracker - Habits Garden&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85&quot;&gt;&lt;code&gt;独立开发者&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%88%86%E4%BA%AB&quot;&gt;&lt;code&gt;分享&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%8F%91%E7%8E%B0&quot;&gt;&lt;code&gt;发现&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：独立开发者, 全栈开发, UI设计, DecoHack&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;为独立创造者提供独立见解，发现新产品，内容包含不限于新闻洞察、行业分析、产品推荐、推特精选、产品运营、产品设计、UI 设计、技术开发、生活方式等。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.decohack.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Decohack-独立开发者灵感周刊&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.decohack.com/&quot;&gt;Decohack&lt;/a&gt; ，独立开发者在线灵感周刊，旨在为独立创造者提供独立见解，发现新产品，内容包含不限于新闻洞察、行业分析、产品推荐、推特精选、产品运营、产品设计、UI 设计、技术开发、生活方式等。&lt;/p&gt;&lt;h3 id=&quot;作者为什么要做-decohack&quot;&gt;&lt;a href=&quot;#%E4%BD%9C%E8%80%85%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A-decohack&quot; aria-label=&quot;作者为什么要做 decohack permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;作者为什么要做 DecoHack？&lt;/h3&gt;&lt;p&gt;DecoHack 的定位是：帮助独立开发者发现新产品方向（国内国外），帮助有想法的人，设计制作和运营自己的互联网产品，打造持续被动收入，体现个人价值。&lt;/p&gt;&lt;p&gt;希望国内的独立互联网创造者拓展自己的能力范围：需求洞察能力，行业分析能力，产品思维，产品设计方法流程，产品运营能力，产品上架公司注册等问题。&lt;/p&gt;&lt;h3 id=&quot;decohack-会有什么内容&quot;&gt;&lt;a href=&quot;#decohack-%E4%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E5%86%85%E5%AE%B9&quot; aria-label=&quot;decohack 会有什么内容 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;DecoHack 会有什么内容？&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;新闻洞察：收集每周相关的新闻资讯；&lt;/li&gt;&lt;li&gt;灵感推荐：每周推荐 N 款独立开发者项目，分析其功能及市场情况；&lt;/li&gt;&lt;li&gt;资源推荐：每周好资源；&lt;/li&gt;&lt;li&gt;产品分析：每周分析一款产品（APP 或者网站），包含产品日活，新增下载使用，收入，产品公司团队调研，产品开发成；本，技术难度等；&lt;/li&gt;&lt;li&gt;好文推荐：推荐独立开发者相关好文章；&lt;/li&gt;&lt;li&gt;下饭视频：如题，不限制，下饭；&lt;/li&gt;&lt;li&gt;推特精选：Twitter 上很优秀的内容；&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;关于作者&quot;&gt;&lt;a href=&quot;#%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85&quot; aria-label=&quot;关于作者 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;关于作者&lt;/h3&gt;&lt;p&gt;作者本职工作是一个互联网产品设计师，之前学的是软件开发专业，所以除了工作之外，一直都在做一些产品设计和开发相关的事情，再之前有创业做过很多产品，也做过产品运营和广告投放的工作。目前全职搬砖，这个订阅是其闲暇时间的产出。&lt;/p&gt;&lt;p&gt;DecoHack，会在每周一早上 9 点，通过微信及邮件推送，也会在「竹白」上发布。熟悉 RSS 订阅的朋友，也可以在 RSS 来订阅。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62cedc0b65fb1506218fa5d3&quot;&gt;倾城之链 - Decohack-独立开发者灵感周刊&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%8D%E5%8A%A1&quot;&gt;&lt;code&gt;服务&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Flutter&quot;&gt;&lt;code&gt;Flutter&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Appwrite provides web and mobile developers with a set of easy-to-use and integrate REST APIs to manage their core backend needs.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/appwrite.io.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Appwrite - Open-Source End-to-End Backend Server&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://appwrite.io/&quot;&gt;Appwrite&lt;/a&gt; 为 Web、移动和 Flutter 开发人员，提供安全的开源后端服务器，🚀又名 100% 开源 Firebase 替代品。它被打包成一组 Docker 微服务。Appwrite 抽象了从头开始构建现代后端 API 所需的复杂性和重复性，使你能够更快地构建安全的应用程序。&lt;/p&gt;&lt;p&gt;使用 appwrite，你可以轻松地将你的应用程序，与用户认证和多种登录方式、用于存储和查询用户和团队数据的数据库、存储和文件管理、图像处理、云功能以及更多服务整合在一起。它具备以下功能特征：&lt;/p&gt;&lt;h3 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#%E6%95%B0%E6%8D%AE%E5%BA%93&quot; aria-label=&quot;数据库 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;数据库&lt;/h3&gt;&lt;p&gt;存储、查询和管理对应用文档的访问控制；&lt;/p&gt;&lt;h3 id=&quot;身份验证和用户&quot;&gt;&lt;a href=&quot;#%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E5%92%8C%E7%94%A8%E6%88%B7&quot; aria-label=&quot;身份验证和用户 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;身份验证和用户&lt;/h3&gt;&lt;p&gt;使用多种登录方法对用户进行身份验证、确认和管理；&lt;/p&gt;&lt;h3 id=&quot;贮存&quot;&gt;&lt;a href=&quot;#%E8%B4%AE%E5%AD%98&quot; aria-label=&quot;贮存 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;贮存&lt;/h3&gt;&lt;p&gt;上传、下载和预览您的应用和用户文件；&lt;/p&gt;&lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#%E5%8A%9F%E8%83%BD&quot; aria-label=&quot;功能 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;在安全和隔离的环境中运行您的后端代码以自定义您的应用程序；&lt;/p&gt;&lt;h3 id=&quot;地理与本地化&quot;&gt;&lt;a href=&quot;#%E5%9C%B0%E7%90%86%E4%B8%8E%E6%9C%AC%E5%9C%B0%E5%8C%96&quot; aria-label=&quot;地理与本地化 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;地理与本地化&lt;/h3&gt;&lt;p&gt;检测您的用户位置、区域设置并获取与 GEO 相关的数据；&lt;/p&gt;&lt;h3 id=&quot;隐私&quot;&gt;&lt;a href=&quot;#%E9%9A%90%E7%A7%81&quot; aria-label=&quot;隐私 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;隐私&lt;/h3&gt;&lt;p&gt;拥有您的数据。在您的基础架构上轻松设置 Appwrite 自托管解决方案；&lt;/p&gt;&lt;h3 id=&quot;安全&quot;&gt;&lt;a href=&quot;#%E5%AE%89%E5%85%A8&quot; aria-label=&quot;安全 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;安全&lt;/h3&gt;&lt;p&gt;为传输中和静止的后端 API 提供端到端的安全性；&lt;/p&gt;&lt;p&gt;Appwrite，功能强大，且具备安全性和灵活性；您可以利用 Appwrite 服务加速您在任何平台上的开发。值得一提的是，Appwrite 后端服务器设计为在容器环境中运行。运行服务器就像从终端运行一个命令一样简单。您可以使用 docker-compose 在本地主机上运行 Appwrite，也可以在任何其他容器编排工具（如 &lt;a href=&quot;https://nicelinks.site/post/5b2cad0a34c03342fda0f37e&quot;&gt;Kubernetes&lt;/a&gt;、&lt;a href=&quot;https://nicelinks.site/post/5b7036890f8719053c094d68&quot;&gt;Docker&lt;/a&gt; Swarm 或 Rancher）上运行 Appwrite。此外，Appwrite 设计合理，使用简单，可快速上手，没有额外依赖，文档详细，跨平台一致性良好。如果您有兴趣了解更多，可参见：&lt;a href=&quot;https://github.com/appwrite/appwrite&quot;&gt;Appwrite Github&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62cd24bbac177b7aff5e1a70&quot;&gt;倾城之链 - Appwrite - Open-Source End-to-End Backend Server&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Deno&quot;&gt;&lt;code&gt;Deno&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2&quot;&gt;&lt;code&gt;个人博客&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Ryan&#x27;s Blog, built and deployed on Deno.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/tinyclouds.org.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Ryan Dahl&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://tinyclouds.org/&quot;&gt;Ryan&#x27;s Blog&lt;/a&gt; ，基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 构建和部署， &lt;a href=&quot;https://github.com/ry/tinyclouds&quot;&gt;在 Github 开源&lt;/a&gt; ，可在不到 10 秒的时间内完成部署。Ryan Dahl，出生于 1981 年，美国的软件工程师，是 “&lt;a href=&quot;https://nicelinks.site/post/5f376ebe1751843ef894c899&quot;&gt;Node.js&lt;/a&gt;”、“&lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt;” 的开发者，使得编程语言 JavaScript 可运行在非浏览器环境，为 Web 前端发展做出了巨大贡献。在 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://tinyclouds.org/&quot;&gt;Ryan&#x27;s Blog&lt;/a&gt; ，您可以读到 Ryan Dahl 关于 Deno、技术、思想等内容。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62cc2079ac177b7aff5e1a6e&quot;&gt;倾城之链 - Ryan Dahl&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Electron&quot;&gt;&lt;code&gt;Electron&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0&quot;&gt;&lt;code&gt;跨平台&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Tauri is a framework for building tiny, blazing fast binaries for all major desktop platforms. Developers can integrate any front-end framework that compiles to HTML, JS and CSS for building their user interface.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/tauri.app.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Build smaller, faster, and more secure desktop applications with a web frontend | Tauri Apps&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://tauri.app/&quot;&gt;Tauri&lt;/a&gt; 是一个框架，用于为所有主要的桌面平台构建微小、快速的二进制文件，旨在为多平台部署构建优化、安全且独立于前端的应用程序。开发人员可以整合任何可以编译成 HTML、JS 和 CSS 的前端框架，以构建他们的用户界面。应用程序的后端是一个来自 rust 的二进制文件，带有一个前端可以与之交互的 API。&lt;/p&gt;&lt;h3 id=&quot;如何开始使用&quot;&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8&quot; aria-label=&quot;如何开始使用 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;如何开始使用&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# npm
npm create tauri-app

# yarn
yarn create tauri-app

# pnpm
pnpm create tauri-app
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://tauri.app/&quot;&gt;Tauri&lt;/a&gt; 具备如下功能特性：&lt;/p&gt;&lt;h3 id=&quot;兼容性良好&quot;&gt;&lt;a href=&quot;#%E5%85%BC%E5%AE%B9%E6%80%A7%E8%89%AF%E5%A5%BD&quot; aria-label=&quot;兼容性良好 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;兼容性良好&lt;/h3&gt;&lt;p&gt;与任何前端框架的兼容性意味着您不必更改堆栈。&lt;/p&gt;&lt;h3 id=&quot;安全-1&quot;&gt;&lt;a href=&quot;#%E5%AE%89%E5%85%A8-1&quot; aria-label=&quot;安全 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;安全&lt;/h3&gt;&lt;p&gt;Tauri 团队的首要任务是推动我们的最高优先事项和最大的创新。&lt;/p&gt;&lt;h3 id=&quot;开源&quot;&gt;&lt;a href=&quot;#%E5%BC%80%E6%BA%90&quot; aria-label=&quot;开源 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;开源&lt;/h3&gt;&lt;p&gt;由于 MIT 或 MIT/Apache 2.0 许可（如果适用），重新许可和重新分发是可能的。&lt;/p&gt;&lt;h3 id=&quot;体积小&quot;&gt;&lt;a href=&quot;#%E4%BD%93%E7%A7%AF%E5%B0%8F&quot; aria-label=&quot;体积小 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;体积小&lt;/h3&gt;&lt;p&gt;通过使用操作系统的原生网络渲染器，Tauri 应用的大小可以小于 600KB。&lt;/p&gt;&lt;h3 id=&quot;跨平台&quot;&gt;&lt;a href=&quot;#%E8%B7%A8%E5%B9%B3%E5%8F%B0&quot; aria-label=&quot;跨平台 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;跨平台&lt;/h3&gt;&lt;p&gt;捆绑所有主要桌面平台的二进制文件（移动和 WASM 即将推出）。&lt;/p&gt;&lt;h3 id=&quot;建立在-rust-之上&quot;&gt;&lt;a href=&quot;#%E5%BB%BA%E7%AB%8B%E5%9C%A8-rust-%E4%B9%8B%E4%B8%8A&quot; aria-label=&quot;建立在 rust 之上 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;建立在 Rust 之上&lt;/h3&gt;&lt;p&gt;以性能和安全为中心，Rust 是下一代应用程序的语言。&lt;/p&gt;&lt;p&gt;除此之外，&lt;code&gt;tauri&lt;/code&gt; 还具备自动更新、原生通知、数据存储、核心插件系统等。Tauri 是一个工具包，可帮助开发人员为主要桌面平台制作应用程序；几乎使用现有的任何前端框架。核心是用 Rust 构建的，CLI 利用 Node.js 使 Tauri 成为一种真正的多语言方法来创建和维护出色的应用程序。&lt;/p&gt;&lt;p&gt;在基于前端技术，而构建桌面应用工具中，&lt;a href=&quot;https://nicelinks.site/post/5b17d4a597006c5273505e1b&quot;&gt;Electron&lt;/a&gt; 无疑是其中的佼佼者；&lt;code&gt;tauri&lt;/code&gt; 则有意成为 Electron 替代品，主张使用 Web 前端构建更小、更快、更安全的桌面应用程序。对 Tauri 和 Electron 区别感兴趣的朋友，可参见 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://github.com/tauri-apps/tauri#comparison-between-tauri-and-electron&quot;&gt;Tauri 和 Electron 的比较&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62cc1748ac177b7aff5e1a6c&quot;&gt;倾城之链 - Build smaller, faster, and more secure desktop applications with a web frontend | Tauri Apps&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;林断山明竹隐墙，乱蝉衰草小池塘。&lt;br/&gt;翻空白鸟时时见，照水红蕖细细香。&lt;br/&gt;村舍外，古城旁，杖藜徐步转斜阳。&lt;br/&gt;&lt;strong&gt;殷勤昨夜三更雨，又得浮生一日凉&lt;/strong&gt;。&lt;br/&gt;──宋 · 苏轼《鹧鸪天》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h3 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8ac2e94c684c54a33796f06a496ba3cb</guid>
<title>基于 CRON 库扩展的分布式 Crontab 的实现</title>
<link>https://toutiao.io/k/kx9h6j4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作者：熊喵君，原文链接：&lt;/span&gt;&lt;span&gt;https://pandaychen.github.io/2022/01/16/A-GOLANG-CRONTAB-V3-ANALYSIS/&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;0x00 前言&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;cron&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 是一个用于管理定时任务的库（单机），基于 Golang 实现 Linux 中 crontab 的功能&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;0x01 使用&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Linux 的 crontab&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;crontab 基本格式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 文件格式說明&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# ┌──分钟（0 - 59）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ ┌──小时（0 - 23）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ ┌──日（1 - 31）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ │ ┌─月（1 - 12）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ │ │ ┌─星期（0 - 6，表示从周日到周六）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ │ │ │&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# * * * * * 被执行的命令&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;基础例子&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用法极丰富，V3 版本也支持标准的 &lt;code&gt;crontab&lt;/code&gt; 格式，具体用法细节可以参考 &lt;span&gt;此文&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    job := cron.New(&lt;br/&gt;        cron.WithSeconds(), // 添加秒级别支持，默认支持最小粒度为分钟（如需秒级精度则必须设置）&lt;br/&gt;    )&lt;br/&gt;    // 每秒钟执行一次&lt;br/&gt;    job.AddFunc(&lt;span&gt;&quot;* * * * * *&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        fmt.Printf(&lt;span&gt;&quot;task run: %v\n&quot;&lt;/span&gt;, time.Now())&lt;br/&gt;    })&lt;br/&gt;    job.Run()   // 启动&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他典型的用法还有如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; cronJobDemo int&lt;br/&gt;&lt;br/&gt;func (c cronJobDemo) &lt;span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        fmt.Println(&lt;span&gt;&quot;5s func trigger&quot;&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    c := cron.New(&lt;br/&gt;            cron.WithSeconds(),&lt;br/&gt;    )&lt;br/&gt;    c.AddFunc(&lt;span&gt;&quot;0 * * * *&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() { fmt.Println(&lt;span&gt;&quot;Every hour on the half hour&quot;&lt;/span&gt;) })&lt;br/&gt;    c.AddFunc(&lt;span&gt;&quot;30 3-6,20-23 * * *&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() { fmt.Println(&lt;span&gt;&quot;.. in the range 3-6am, 8-11pm&quot;&lt;/span&gt;) })&lt;br/&gt;    c.AddFunc(&lt;span&gt;&quot;CRON_TZ=Asia/Tokyo 30 04 * * *&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() { fmt.Println(&lt;span&gt;&quot;Runs at 04:30 Tokyo time every day&quot;&lt;/span&gt;) })&lt;br/&gt;    c.AddFunc(&lt;span&gt;&quot;@every 5m&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() { fmt.Println(&lt;span&gt;&quot;every 5m, start 5m fron now&quot;&lt;/span&gt;) }) // 容易理解的格式&lt;br/&gt;    // 通过 AddJob 注册&lt;br/&gt;    var cJob cronJobDemo&lt;br/&gt;    c.AddJob(&lt;span&gt;&quot;@every 5s&quot;&lt;/span&gt;, cJob)&lt;br/&gt;    c.Start()&lt;br/&gt;    // c.Stop()&lt;br/&gt;&lt;br/&gt;    select {}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;0x02 代码分析&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;核心数据结构&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 cron 库的整体逻辑，最关键的两个数据结构就是 &lt;code&gt;Entry&lt;/code&gt; 和 &lt;code&gt;Cron&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、&lt;code&gt;Job&lt;/code&gt;：抽象一个定时任务，cron 调度一个 &lt;code&gt;Job&lt;/code&gt;，就去执行 &lt;code&gt;Job&lt;/code&gt; 的 &lt;code&gt;Run()&lt;/code&gt; 方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Job interface {&lt;br/&gt;    Run()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;FuncJob&lt;/code&gt;：&lt;code&gt;FuncJob&lt;/code&gt; 实际就是一个 &lt;code&gt;func()&lt;/code&gt; 类型，实现了 &lt;code&gt;Run()&lt;/code&gt; 方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; FuncJob func()&lt;br/&gt;func (f FuncJob) &lt;span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;/span&gt;() { &lt;br/&gt;    f() &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际应用中，我们需要对 &lt;code&gt;Job&lt;/code&gt; 结构做一些扩展，于是就有了 &lt;code&gt;JobWrapper&lt;/code&gt;，使用修饰器机制加工 Job（传入一个 &lt;code&gt;Job&lt;/code&gt;，返回一个 &lt;code&gt;Job&lt;/code&gt;），有点像 gin 中间件，&lt;strong&gt;包装器可以在执行实际的 Job 前后添加一些逻辑&lt;/strong&gt;，然后使用一个 &lt;code&gt;Chain&lt;/code&gt; 将这些 &lt;code&gt;JobWrapper&lt;/code&gt; 组合到一起。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如给 &lt;code&gt;Job&lt;/code&gt; 添加这样一些属性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在 &lt;code&gt;Job&lt;/code&gt; 回调方法中捕获 &lt;code&gt;panic&lt;/code&gt; 异常&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 &lt;code&gt;Job&lt;/code&gt; 上次运行还未结束，推迟本次执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 &lt;code&gt;Job&lt;/code&gt; 上次运行还未结束，跳过本次执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;记录每个 &lt;code&gt;Job&lt;/code&gt; 的执行情况&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; JobWrapper func(Job) Job&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Chain struct {&lt;br/&gt;  wrappers []JobWrapper&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func NewChain(c ...JobWrapper) Chain {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; Chain{c}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、&lt;code&gt;Chain&lt;/code&gt; 结构&lt;code&gt;Chain&lt;/code&gt; 是 &lt;code&gt;JobWrapper&lt;/code&gt; 的数组，调用 &lt;code&gt;Chain&lt;/code&gt; 对象的 &lt;code&gt;Then(j Job)&lt;/code&gt; 方法应用这些 &lt;code&gt;JobWrapper&lt;/code&gt;，返回最终的 &lt;code&gt;Job&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Chain struct {&lt;br/&gt;  wrappers []JobWrapper&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func NewChain(c ...JobWrapper) Chain {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; Chain{c}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func (c Chain) Then(j Job) Job {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; i := range c.wrappers {&lt;br/&gt;      // 注意：应用 JobWrapper 的顺序&lt;br/&gt;    j = c.wrappers[len(c.wrappers)-i-1](j &lt;span&gt;&quot;len(c.wrappers &quot;&lt;/span&gt;len(c.wrappers)-i-1&lt;span&gt;&quot;)-i-1&quot;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; j&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、&lt;code&gt;Schedule&lt;/code&gt;：描述一个 job 如何循环执行的抽象，需要实现&lt;code&gt;Next&lt;/code&gt;方法，此方法返回任务下次被调度的时间&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// Schedule describes a job&lt;span&gt;&#x27;s duty cycle.&lt;br/&gt;type Schedule interface {&lt;br/&gt; // Next returns the next activation time, later than the given time.&lt;br/&gt; // Next is invoked initially, and then each time the job is run.&lt;br/&gt; Next(time.Time) time.Time&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Scheduler&lt;/code&gt; 的实例化结构有：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ConstantDelaySchedule&lt;/code&gt;：&lt;span&gt;实现&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SpecSchedule&lt;/code&gt;：&lt;span&gt;实现&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;，默认选择，提供了对 Cron 表达式的解析能力&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、&lt;code&gt;Entry&lt;/code&gt; 结构：抽象了一个 job
每当使用 &lt;code&gt;AddJob&lt;/code&gt; 注册一个定时调用策略，就会为该策略生成唯一的 &lt;code&gt;Entry&lt;/code&gt;，&lt;code&gt;Entry&lt;/code&gt; 里会存储被执行的时间、需要被调度执行的实体 &lt;code&gt;Job&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Entry struct {&lt;br/&gt;    ID EntryID          // job id，可以通过该 id 来删除 job&lt;br/&gt;    Schedule Schedule   // 用于计算 job 下次的执行时间&lt;br/&gt;    Next time.Time      // job 下次执行时间&lt;br/&gt;    Prev time.Time      // job 上次执行时间，没执行过为 0&lt;br/&gt;    WrappedJob Job      // 修饰器加工过的 job&lt;br/&gt;    Job Job             // 未经修饰的 job，可以理解为 AddFunc 的第二个参数&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、&lt;code&gt;Cron&lt;/code&gt;&lt;span&gt;结构&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;：关于 &lt;code&gt;Cron&lt;/code&gt; 结构，有一些细节，&lt;code&gt;entries&lt;/code&gt; 为何设计为一个指针 &lt;code&gt;slice&lt;/code&gt;？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// Cron keeps track of any number of entries, invoking the associated func as&lt;br/&gt;// specified by the schedule. It may be started, stopped, and the entries may&lt;br/&gt;// be inspected &lt;span&gt;while&lt;/span&gt; running.&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Cron struct {&lt;br/&gt;    entries   []*Entry          // 所有 Job 集合&lt;br/&gt;    chain     Chain             // 装饰器链&lt;br/&gt;    stop      chan struct{}     // 停止信号&lt;br/&gt;    add       chan *Entry       // 用于异步增加 Entry&lt;br/&gt;    remove    chan EntryID      // 用于异步删除 Entry&lt;br/&gt;    snapshot  chan chan []Entry&lt;br/&gt;    running   bool              // 是否正在运行&lt;br/&gt;    logger    Logger&lt;br/&gt;    runningMu sync.Mutex        // 运行时锁&lt;br/&gt;    location  *time.Location    // 时区相关&lt;br/&gt;    parser    Parser            // Cron 解析器&lt;br/&gt;    nextID    EntryID&lt;br/&gt;    jobWaiter sync.WaitGroup    // 并发控制，正在运行的 Job&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;entries 成员&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚才说到 &lt;code&gt;entries&lt;/code&gt; 为何设计为指针 &lt;code&gt;slice&lt;/code&gt;，原因在于 cron 核心逻辑中，每次循环开始时都会对 &lt;code&gt;Cron.entries&lt;/code&gt; 进行排序，排序字段依赖于每个 &lt;code&gt;Entry&lt;/code&gt; 结构的 &lt;code&gt;Next&lt;/code&gt; 成员，排序依赖于下面的原则：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;按照触发时间正向排序，越先触发的越靠前&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;IsZero&lt;/code&gt; 的任务向后面排&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;由于可能存在相同周期的任务 Job，所以排序是不稳定的&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// byTime is a wrapper &lt;span&gt;for&lt;/span&gt; sorting the entry array by time&lt;br/&gt;// (with zero time at the end).&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; byTime []*Entry&lt;br/&gt;&lt;br/&gt;func (s byTime) Len() int      { &lt;span&gt;return&lt;/span&gt; len(s) }&lt;br/&gt;func (s byTime) Swap(i, j int) { s[i], s[j] = s[j], s[i] }&lt;br/&gt;func (s byTime) Less(i, j int) bool {&lt;br/&gt; // Two zero &lt;span&gt;times&lt;/span&gt; should &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;.&lt;br/&gt; // Otherwise, zero is &lt;span&gt;&quot;greater&quot;&lt;/span&gt; than any other time.&lt;br/&gt; // (To sort it at the end of the list.)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; s[i].Next.&lt;span&gt;&lt;span&gt;IsZero&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; s[j].Next.&lt;span&gt;&lt;span&gt;IsZero&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;    // 排序的原则，s[i] 比 s[j] 先触发&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; s[i].Next.Before(s[j].Next)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;0x03 内置 JobWrapper 介绍&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Recover：捕捉 panic，避免进程异常退出&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此 wrapper 比较好理解，在执行内层的 Job 逻辑前，添加 recover() 调用。如果 Job.Run() 执行过程中有 panic。这里的 recover() 会捕获到，输出调用堆栈&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// cron.go&lt;br/&gt;func Recover(logger Logger) JobWrapper {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; func(j Job) Job {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; FuncJob(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;      defer &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; r := recover(); r != nil {&lt;br/&gt;          const size = 64 &amp;lt;&amp;lt; 10&lt;br/&gt;          buf := make([]byte, size)&lt;br/&gt;          buf = buf[:runtime.Stack(buf, &lt;span&gt;false&lt;/span&gt;)]&lt;br/&gt;          err, ok := r.(error)&lt;br/&gt;          &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;            err = fmt.Errorf(&lt;span&gt;&quot;%v&quot;&lt;/span&gt;, r)&lt;br/&gt;          }&lt;br/&gt;          logger.Error(err, &lt;span&gt;&quot;panic&quot;&lt;/span&gt;, &lt;span&gt;&quot;stack&quot;&lt;/span&gt;, &lt;span&gt;&quot;...\n&quot;&lt;/span&gt;+string(buf))&lt;br/&gt;        }&lt;br/&gt;      }()&lt;br/&gt;      j.Run()&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DelayIfStillRunning&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现了已有任务运行推迟的逻辑。核心是通过一个（任务共用的）互斥锁 &lt;code&gt;sync.Mutex&lt;/code&gt;，每次执行任务前获取锁，执行结束之后释放锁。所以在上一个任务结束前，下一个任务获取锁会阻塞，从而保证的任务的串行执行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// chain.go&lt;br/&gt;func DelayIfStillRunning(logger Logger) JobWrapper {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; func(j Job) Job {&lt;br/&gt;    var mu sync.Mutex&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; FuncJob(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;      start := time.Now()&lt;br/&gt;      // 下一个任务阻塞等待获取锁&lt;br/&gt;      mu.Lock()&lt;br/&gt;      defer mu.Unlock()&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; dur := time.Since(start); dur &amp;gt; time.Minute {&lt;br/&gt;        logger.Info(&lt;span&gt;&quot;delay&quot;&lt;/span&gt;, &lt;span&gt;&quot;duration&quot;&lt;/span&gt;, dur)&lt;br/&gt;      }&lt;br/&gt;      j.Run()&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SkipIfStillRunning&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和 &lt;code&gt;DelayIfStillRunning&lt;/code&gt; 机制不一样，该方法是跳过执行，通过无缓冲 channel 机制实现。执行任务时，从通道中取值，如果成功，执行，否则跳过。执行完成之后再向通道中发送一个值，确保下一个任务能执行。初始发送一个值到通道中，保证第一个任务的执行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func SkipIfStillRunning(logger Logger) JobWrapper {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; func(j Job) Job {&lt;br/&gt;    // 定义一个无缓冲 channel&lt;br/&gt;    var ch = make(chan struct{}, 1)&lt;br/&gt;    ch &amp;lt;- struct{}{}&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; FuncJob(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;      select {&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; v := &amp;lt;-ch:&lt;br/&gt;        j.Run()&lt;br/&gt;        ch &amp;lt;- v&lt;br/&gt;      default:&lt;br/&gt;        logger.Info(&lt;span&gt;&quot;skip&quot;&lt;/span&gt;)&lt;br/&gt;      }&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;0x04 核心方法分析&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;AddJob 方法&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AddJob&lt;/code&gt; 方法通过两种方法将任务节点 entry 添加到 &lt;code&gt;Cron.entries&lt;/code&gt; 中：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;初始化时，直接 &lt;code&gt;append&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;运行状态下，通过 channel 方式异步添加，避免加锁&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// AddJob adds a Job to the Cron to be run on the given schedule.&lt;br/&gt;// The spec is parsed using the time zone of this Cron instance as the default.&lt;br/&gt;// An opaque ID is returned that can be used to later remove it.&lt;br/&gt;func (c *Cron) AddJob(spec string, cmd Job) (EntryID, error) {&lt;br/&gt; schedule, err := c.parser.Parse(spec)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; 0, err&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; c.Schedule(schedule, cmd), nil&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// Schedule adds a Job to the Cron to be run on the given schedule.&lt;br/&gt;// The job is wrapped with the configured Chain.&lt;br/&gt;func (c *Cron) Schedule(schedule Schedule, cmd Job) EntryID {&lt;br/&gt; c.runningMu.Lock()&lt;br/&gt; defer c.runningMu.Unlock()&lt;br/&gt; c.nextID++&lt;br/&gt; entry := &amp;amp;Entry{&lt;br/&gt;  ID:         c.nextID,&lt;br/&gt;  Schedule:   schedule,&lt;br/&gt;  WrappedJob: c.chain.Then(cmd),&lt;br/&gt;  Job:        cmd,&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; !c.running {&lt;br/&gt;        // 直接加&lt;br/&gt;  c.entries = append(c.entries, entry)&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        // 异步&lt;br/&gt;  c.add &amp;lt;- entry&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; entry.ID&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;run 方法&lt;span/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;run 方法&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;cron 的核心 &lt;code&gt;run()&lt;/code&gt; 方法的实现如下，这个是很经典的 &lt;code&gt;for-select&lt;/code&gt; 异步处理模型，避免的对 &lt;code&gt;entries&lt;/code&gt; 加锁，非常值得借鉴。其核心有如下几点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;一个定时任务（集）的实现，内部采用排序数组，取数组首位元素的时间作为&lt;code&gt;timer&lt;/code&gt;触发时间（感觉可以优化为最小堆？）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每个 &lt;code&gt;entry&lt;/code&gt; 都包含了该 &lt;code&gt;entry&lt;/code&gt; 下一次执行的绝对时间，本轮执行完成后立即计算下一轮时间，等待下次循环时排序更新&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每次循环开始对 &lt;code&gt;cron.entries&lt;/code&gt; 按下次执行时间升序排序，只需要对第一个 &lt;code&gt;entry&lt;/code&gt; 启动定时器即可&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定时器事件触发时，轮询 &lt;code&gt;cron.entries&lt;/code&gt; 里需要执行的 &lt;code&gt;entries&lt;/code&gt; 直到第一个不满足条件的，由于数组是升序，后面无需再遍历&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同时，第一个定时器处理结束开启下次定时器时，也只需要更新执行过的 &lt;code&gt;cron.entries&lt;/code&gt; 的 &lt;code&gt;Next&lt;/code&gt;（下次执行时间），不需要更新所有的 &lt;code&gt;cron.entries&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Cron&lt;/code&gt;内部数据结构的维护，采用&lt;code&gt;channel&lt;/code&gt;实现无锁机制，缺点是可能会有误差（ms级），不过在此项目是能够容忍的，以 &lt;code&gt;Job&lt;/code&gt;&lt;/p&gt;&lt;p&gt;异步添加为例（运行中添加&lt;code&gt;entry&lt;/code&gt;，走异步方式，有&lt;code&gt;duration&lt;/code&gt;的延迟）：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;某个 &lt;code&gt;Job&lt;/code&gt; 之间的 &lt;code&gt;delta&lt;/code&gt; 差，可能多出了 &lt;code&gt;duration&lt;/code&gt; 的延迟，可以容忍&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定时器实现里，会扫描所有当前时间之前的 &lt;code&gt;cron.entries&lt;/code&gt; 来执行，增加了容错&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func (c *Cron) &lt;span&gt;&lt;span&gt;run&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    c.logger.Info(&lt;span&gt;&quot;start&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;    // 初始化，计算每个 Job 下次的执行时间&lt;br/&gt;    now := c.now()&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, entry := range c.entries {&lt;br/&gt;        entry.Next = entry.Schedule.Next(now)&lt;br/&gt;        c.logger.Info(&lt;span&gt;&quot;schedule&quot;&lt;/span&gt;, &lt;span&gt;&quot;now&quot;&lt;/span&gt;, now, &lt;span&gt;&quot;entry&quot;&lt;/span&gt;, entry.ID, &lt;span&gt;&quot;next&quot;&lt;/span&gt;, entry.Next)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // 在 dead loop，进行任务调度&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;        // 根据下一次的执行时间，对所有 Job 排序&lt;br/&gt;        sort.Sort(byTime(c.entries))&lt;br/&gt;&lt;br/&gt;        // 计时器，用于没有任务可调度时的阻塞操作&lt;br/&gt;        var timer *time.Timer&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; len(c.entries) == 0 || c.entries[0].Next.&lt;span&gt;&lt;span&gt;IsZero&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;            // 无任务可调度，设置计时器到一个很大的值，把下面的 &lt;span&gt;for&lt;/span&gt; 阻塞住&lt;br/&gt;            timer = time.NewTimer(100000 * time.Hour)&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            // 有任务可调度了，计时器根据第一个可调度任务的下次执行时间设置&lt;br/&gt;            // 排过序，所以第一个肯定是最先被执行的&lt;br/&gt;            timer = time.NewTimer(c.entries[0].Next.Sub(now))&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;            select {&lt;br/&gt;            // 有 Job 到了执行时间&lt;br/&gt;            &lt;span&gt;case&lt;/span&gt; now = &amp;lt;-timer.C:&lt;br/&gt;                now = now.In(c.location)&lt;br/&gt;                c.logger.Info(&lt;span&gt;&quot;wake&quot;&lt;/span&gt;, &lt;span&gt;&quot;now&quot;&lt;/span&gt;, now)&lt;br/&gt;                // 检查所有 Job，执行到时的任务&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; _, e := range c.entries {&lt;br/&gt;                    // 可能存在相同时间出发的任务&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; e.Next.After(now) || e.Next.&lt;span&gt;&lt;span&gt;IsZero&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;                        // 后面都不需要遍历了！&lt;br/&gt;                        &lt;span&gt;break&lt;/span&gt;&lt;br/&gt;                    }&lt;br/&gt;                    // 执行 Job 的 func()&lt;br/&gt;                    c.startJob(e.WrappedJob)&lt;br/&gt;&lt;br/&gt;                    // 保存上次执行时间&lt;br/&gt;                    e.Prev = e.Next&lt;br/&gt;                    // 设置 Job 下次的执行时间&lt;br/&gt;                    e.Next = e.Schedule.Next(now)&lt;br/&gt;                    c.logger.Info(&lt;span&gt;&quot;run&quot;&lt;/span&gt;, &lt;span&gt;&quot;now&quot;&lt;/span&gt;, now, &lt;span&gt;&quot;entry&quot;&lt;/span&gt;, e.ID, &lt;span&gt;&quot;next&quot;&lt;/span&gt;, e.Next)&lt;br/&gt;                }&lt;br/&gt;&lt;br/&gt;            // 添加新 Job&lt;br/&gt;            &lt;span&gt;case&lt;/span&gt; newEntry := &amp;lt;-c.add:&lt;br/&gt;                timer.Stop()        // 必须注意，这里停止定时器，避免内存泄漏！&lt;br/&gt;                now = c.now()&lt;br/&gt;                newEntry.Next = newEntry.Schedule.Next(now)&lt;br/&gt;                c.entries = append(c.entries, newEntry)&lt;br/&gt;                c.logger.Info(&lt;span&gt;&quot;added&quot;&lt;/span&gt;, &lt;span&gt;&quot;now&quot;&lt;/span&gt;, now, &lt;span&gt;&quot;entry&quot;&lt;/span&gt;, newEntry.ID, &lt;span&gt;&quot;next&quot;&lt;/span&gt;, newEntry.Next)&lt;br/&gt;&lt;br/&gt;            // 获取所有 Job 的快照&lt;br/&gt;            &lt;span&gt;case&lt;/span&gt; replyChan := &amp;lt;-c.snapshot:&lt;br/&gt;                replyChan &amp;lt;- c.entrySnapshot()&lt;br/&gt;                &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;            // 停止调度&lt;br/&gt;            &lt;span&gt;case&lt;/span&gt; &amp;lt;-c.stop:&lt;br/&gt;                timer.Stop()&lt;br/&gt;                c.logger.Info(&lt;span&gt;&quot;stop&quot;&lt;/span&gt;)&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;            // 根据 entryId 删除一个 Job&lt;br/&gt;            &lt;span&gt;case&lt;/span&gt; id := &amp;lt;-c.remove:&lt;br/&gt;                timer.Stop()&lt;br/&gt;                now = c.now()&lt;br/&gt;                c.removeEntry(id)&lt;br/&gt;                c.logger.Info(&lt;span&gt;&quot;removed&quot;&lt;/span&gt;, &lt;span&gt;&quot;entry&quot;&lt;/span&gt;, id)&lt;br/&gt;            }&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述的代码的核心流程如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3622262773722629&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/otNtibX96l98og8X4NoK6iaMFFpttiaib0bIl4VPFCOd9QhGibllGDaYVIibBBYibsnqjZiauIH0PTZTxfRSfdibKBas7aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1096&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;image&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;0x05 小结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文分析了基于 Golang 实现的单机定时任务库。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;0x06 参考&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;golang cron v3 定时任务&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;v3-repo&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Go 每日一库之 cron&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;GO 编程模式：修饰器&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;cron: &lt;em&gt;https://github.com/robfig/cron/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;此文: &lt;em&gt;https://segmentfault.com/a/1190000023029219&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;实现: &lt;em&gt;https://github.com/robfig/cron/blob/v3/constantdelay.go&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;实现: &lt;em&gt;https://pandaychen.github.io/2021/10/05/A-GOLANG-CRONTAB-V3-BASIC-INTRO/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;结构: &lt;em&gt;https://github.com/robfig/cron/blob/v3/cron.go#L13&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;golang cron v3 定时任务: &lt;em&gt;https://blog.cugxuan.cn/2020/06/04/Go/golang-cron-v3/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;v3-repo: &lt;em&gt;https://github.com/robfig/cron/tree/v3&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Go 每日一库之 cron: &lt;em&gt;https://segmentfault.com/a/1190000023029219&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;GO 编程模式：修饰器: &lt;em&gt;https://coolshell.cn/articles/17929.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3e3ead946dc715cf029477c08c4c8c96</guid>
<title>字节遭遇离职潮</title>
<link>https://toutiao.io/k/84iz6z1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-style-type=&quot;5&quot; data-tools=&quot;新媒体排版&quot; data-id=&quot;965972&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;因公众号更改推送规则，请点“在看”并加“星标”&lt;span&gt;第一时间获取精彩技术分享&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击关注#互联网架构师公众号，领取&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;架构师全套资料&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;架构师全套资料&lt;/span&gt;&lt;/a&gt;&lt;span&gt; 都在这里&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100029587&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b96CibCt70iaajvl7fD4ZCicMcjhXMp1v6UibM134tIsO1j5yqHyNhh9arj090oAL7zGhRJRq6cFqFOlDZMleLl4pw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;64&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21&amp;amp;token=171858062&amp;amp;lang=zh_CN#wechat_redirect&quot; textvalue=&quot;0、2T架构师学习资料干货分享&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;0、&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;2T架构师学习资料干货分&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上一篇：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247527649&amp;amp;idx=1&amp;amp;sn=94a186f5825f71f2536454f2da1d1263&amp;amp;chksm=ea5fa187dd282891fa5020425d44c1fe70c7876f85a4f2ea5e03282ea6278fbd11e23ebf849e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;上千万行，十几G源码，浏览器为什么这么“变态”？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;上千万行，十几G源码，浏览器为什么这么“变态”？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;作者 ：Georgia Wells /Yoree Koh /Salvador Rodriguez&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;来源 ：WSJ&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;504025864&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.859375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M0x913PTXTI76NibXEI1C7UyFWkdCxawRLMzPdmQFicdsG5yPgZW4d4dP3RDDicmE2wu4WbUkS8ynQBM4CeyYWvWg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;64&quot;/&gt;&lt;span&gt; 和国内字节跳动的欣欣向荣对比，国外的TikTok正在面临离职潮，原因是不适应字节的“996”...&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大家好，我是互联网架构师！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok上似乎有无穷无尽的消遣打趣、尽情舞动以及善意的恶作剧，它也因此自称是互联网上最快乐的地方。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但据TikTok美国办公室的员工说，推动TikTok成功的，是严苛的管理风格和高要求的内部文化，完全背离平台愉悦鼓舞的公众形象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些员工中有许多都曾供职于其他大型科技公司，他们说，TikTok一味强调效率和保密，其程度之甚，在业内并不多见。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着TikTok继续保持高增长，上述情况日益助推着TikTok美国办公室的紧张气氛。TikTok是总部位于北京的字节跳动科技有限公司(ByteDance Ltd.)的子公司。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;据市场研究公司Sensor Tower，截至2022年第一季度，六年前创立的TikTok已在所有类型应用程序中创下了下载量最高的纪录。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;截至2020年年中，TikTok美国业务部约有1500名员工，该公司去年表示，希望将这一数字增加至10,000人。他们的工作内容主要围绕将在中国开发的产品转化为面向美国受众的产品，同时开拓商机可观的美国广告市场。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;504025741&quot; data-ratio=&quot;0.1648148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/M0x913PTXTI76NibXEI1C7UyFWkdCxawRN2UkxJLialTlYNff7pdOVGI1Pse0IpGZMHCn80eZ0TOHRKicBEllMzPQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从工作文化融合的角度来看，TikTok正在进行最大胆的尝试，它需要连接全球两大科技强国。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok美国业务的总部设在洛杉矶，这里的一些员工抱怨称，他们常常睡眠不足，而且周末频繁加班，必须与地球另一端的同事开会，就导致这种情况更加严重了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有几个该公司的美国前员工说，他们在TikTok工作期间，平均每周要开85个小时的会，而且还要挤出额外的时间来完成自己的工作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一人说，他在提供了医学实验室检查结果、证明自己的身体状况危及生命后，才说服老板不再让他连续熬夜工作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一些前员工提到，他们经历了严重的体重波动、压力或是情绪低谷，以至于到了得寻求治疗的地步。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一名前员工说，巨大的压力让她不敢缺席TikTok一场紧接着一场的会议，她甚至不敢中途走开去换卫生棉条，以至于血浸湿了裤子。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok的一些做法是借鉴于亚马逊(Amazon.com Inc.)，后者同样因高要求的工作文化著称。TikTok的高管时常告诉员工要“永远创业”，这来自亚马逊创始人贝佐斯(Jeff Bezos)鼓励创新、避免自满的名言“每天都是第一天”(Always Day 1)。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除此之外，TikTok办公室的墙上还醒目地贴着其他标语，例如“坦诚清晰”，而员工对这些理念的执行情况如何，会成为公司对他们的评判标准之一。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok表示，公司致力于“建立并培养一个强大的团队，使其能够支持公司不断成长的全球社群”，为实现这一目标，它已对自身做法及工作文化进行了一些调整。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok在一份书面声明中补充说，“我们鼓励透明和反馈的文化，并致力于打造一个公平的平台和企业，让我们的社群和员工都能茁壮成长。”&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;figure itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/LEAEPVW8WQkibAVhIicsichNGNZf9Btc3aW7UfEbZbJzGP1PKTprGWtxZ0YJbyu59sMX6xygUZ6QLXWzRmtDHUicmg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;TikTok的美国办公室主要位于洛杉矶。&lt;/span&gt;&lt;br/&gt;&lt;/h4&gt;&lt;/figure&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对TikTok这样快速发展的科技企业来说，长时间的工作和紧迫的截止日期不算什么新鲜事，而外企员工睡眠周期被打乱的情况也并不少见。但一些在TikTok和其他科技企业都干过的人说，TikTok美国员工体现出的压力之大到了罕见的程度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一些前员工曾在YouTube、Medium等社交媒体网站上讲述他们在TikTok美国办公室的经历。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有些人说，身处紧张氛围会让他们感到兴奋。其他许多人则提到了种种挑战，包括理解内部文件的意思，那些文件以中文撰写再用软件翻译成英文，其中的细微含义难以在译文中呈现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“我已经数不清TikTok的工作经历让我在多少方面得到了锻炼，无论是产品策略、执行还是不同文化间的细微差别，我从TikTok学到的东西之多，超过了我最初的想象。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok前高级产品经理Melody Chu在Medium的一篇贴文里说，其工作职责是帮助创作者将内容变现。尽管如此，自称曾在Facebook、Roblox和Nextdoor都工作过的Chu还是在去年11月离开了TikTok。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;她说，很多次晚饭时间她得跟中国同事通电话，没法陪丈夫，这种情况之频繁，以致于夫妻俩去找过婚姻咨询师。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;她写道，她的体重急剧下降，睡眠也出现了问题。所有她想做的事，包括陪伴父母以及关注自身心理健康，统统让位给了TikTok。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;她写道，“早知去TikTok会让我失去这么多，（2020年6月时）我肯定不会接受这份工作。”但她也说，现在回想起来，她也不后悔去TikTok，因为通过这段经历，她向自己证明了她已具备成功所需的品质。Chu没有回复记者的采访请求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前TikTok员工帕贝尔·马丁内斯说，他被告知不要将某些数据同较低级别的员工分享。“我得到的信号是：‘我们不信任你们。’”他说。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;504025745&quot; data-ratio=&quot;0.1648148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/M0x913PTXTI76NibXEI1C7UyFWkdCxawROBbl1ibKdY2ibEia2pYjfDrHpr3NCcPyMGVpcrtVQX1ceDaFW2dn4dayA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;许多TikTok员工之所以能忍受长时间的工作以及工作和生活间缺乏界限的情况，是因为如果其母公司上市，他们有可能拿到一笔数量可观的钱。“你想登上那艘火箭船。”今年2月之前担任TikTok广告销售全球客户总监的帕贝尔·马丁内斯(Pabel Martinez)说。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;马丁内斯说，尽管自己的项目按进度推进，他仍被要求整个周末加班，他拒绝这样，对此，一名主管回应说：“我们这里不是这样做事的。”他随后离开了TikTok。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大约一年前，由于中国监管机构敦促字节跳动关注数据安全问题，该公司暂时搁置了上市计划。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;据一位熟悉TikTok经营情况的人士说，该公司2021年的收入约为40亿美元，今年的营收有望达到120亿美元。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;相比之下，现更名为Meta Platforms Inc.的Facebook在成立十年后，营收才达到120亿美元。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;据前员工说，TikTok常常会安排多个团队完成同一个项目，让它们相互竞争，看谁最先完成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这一策略本意是为了推动员工尽快完成工作，但一些前员工指出，这让人们唯恐落后于其他同事，而当有的团队始终无法看到曙光时，员工心里容易产生挫败感。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;去年，常驻新加坡的周受资接替临时首席执行官瓦妮莎·帕帕斯(Vanessa Pappas)，出任TikTok首席执行官，后者目前担任TikTok首席运营官，工作地点位于洛杉矶。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;美国员工说，这一举动进一步巩固了TikTok在东方的权力基础。美国人凯文·梅耶尔(Kevin Mayer)曾于2020年初担任TikTok首席执行官，但大约三个月后离职，当时特朗普政府正试图迫使将TikTok出售给一家美国公司。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok既没有向员工提供组织结构图，也不允许员工自己制作和分享组织结构图。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于那些想阻止竞争对手挖人的中国企业来说，这是他们的常见做法。一些前员工说，他们曾被告知组织结构图没有必要，因为在TikTok的扁平式架构中，任何人之间都可以相互联系。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如此一来，员工可能感到困惑，他们不知道该联系其他团队中的哪些人，或者给他们发信息的又是哪些人。据一些前员工说，纽约办公室人力资源和财务团队的成员几个月来一直不知道在加州，还有另一群人也从事同样的职能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok新加坡前员工Jamie Lim Yin Yin说，当她收到同事的电子邮件时，她只有去领英(LinkedIn)上查找一番，才知道他们属于哪个团队。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“这样说好了，在我的浏览器上，领英的标签页总是开着的。”她在一段YouTube视频中说，视频讲述了她为何会在去年12月、入职仅四个月后就离开了TikTok。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一位TikTok发言人说，员工有途径查看彼此的档案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;曾任TikTok广告销售客户总监的马丁内斯说，TikTok的展示文件里时常会出现数字被模糊处理或是被略掉的情况，他的主管曾指示他不要将某些数据同较低级别的员工分享。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“我得到的信号是：‘我们不信任你们。’”他说，TikTok的保密程度与他供职过的其他科技公司有着很大不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;TikTok前员工Chloe Shih在一段视频中说，“当我该去睡觉的时候却发现公司大部分人都没睡，这让我晚上十分焦虑。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;504025744&quot; data-ratio=&quot;0.1648148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/M0x913PTXTI76NibXEI1C7UyFWkdCxawRIEcpXUMFwtjibfy27sZu5HRRyjEic0NGNGGMn1XIVabWS2WA0Nickl0kg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;figure itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;section&gt;&lt;span&gt;尽管TikTok吸引了大批一心想来此工作的求职者，但与此同时，它也在努力解决离职率较高的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;曾在加州山景城(Mountain View)工作的TikTok前工程团队主管Lucas Ou-Yang在一系列Twitter主题贴中写道，由于要跟上中国同事的节奏，还要根据他们的日程表来安排工作，在这种压力下，曾与他共事的所有10位产品经理全都在入职大约一年后辞职了。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;去年11月，工程部的一个部门主办了一场全体会议来讨论美国员工的离职潮问题，此后，公司高管批准了一项新政策：如果不是所有与会者都说中文，可以尝试用英语开会。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;尽管TikTok提供有翻译选项，但一些前员工说，当会议语言不是他们所能理解的语言时，他们觉得错过了许多细节。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;去年，中国政府告诉各用人单位，一些中国科技公司实行的“996”工作安排（即早9点到晚9点上班，一周工作六天）是不合法的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;字节跳动表示，它会采取“1075”模式：即早10点到晚7点上班，一周工作五天。但许多员工表示，他们预计长时间工作的情况仍会持续。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一些TikTok美国前员工谈到，为了参加与北京主管举行的网络会议，他们常常从周日下午就要开始上班，因为那时在中国已是周一上午。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“我真的觉得，晚上工作到那么晚让我出现了睡眠紊乱。”曾在加州工作的前员工Chloe Shih在一段YouTube视频里说，“当我该去睡觉的时候却发现公司的大部分人都没睡，这让我晚上十分焦虑。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一些前员工说，有关工作和生活平衡的问题在几乎每一次全体会议上都会被提及。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;figure itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/LEAEPVW8WQkibAVhIicsichNGNZf9Btc3aWsmiasH0SsicOQpbvQgsk6ARYyRatS5GKXlHJnXDNqL4OocBFR37o6eOw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;TikTok位于洛杉矶的办公室。&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;2021年年中，一些美国主管开始鼓励员工下班后将内部通讯工具上的通知设置为静音模式，以此减少他们不得不在深夜处理的请求数量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有人还建议员工在日程表上为自己留出休息时间。但一些前员工说，公司高层不会在意日程表上的计划，他们还是会在那些时间安排会议。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“尽管会议时常会跨越不同时区，这一点在跨国公司很常见，但我们会继续着眼于通过不同方式为员工提供支持和灵活性。”上述TikTok发言人说。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;她还说，TikTok鼓励员工安排个人休假时间、留出不开会的时段，并且不鼓励在休息时间发送工作信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;风投公司Basis Set Ventures创始人兼管理合伙人兰雪棹说，中国科技行业竞争的激烈程度比美国更极端。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“显然没有人想干到凌晨2点，”但如果员工不干这么久，他们就没法生存，她说，“这是人们试图了解中国的文化时会遗漏的一个背景。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以往，TikTok会经常将许多新招的美国员工派往北京待一周，让他们近距离感受中国的工作文化，学习字节跳动的工作方式。后来新冠疫情爆发，这些差旅也随之暂停。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除TikTok外，字节跳动旗下还有许多应用程序及服务，包括相当于中国版TikTok的抖音。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;504025742&quot; data-ratio=&quot;0.1648148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/M0x913PTXTI76NibXEI1C7UyFWkdCxawRicXQWBux3qribh0tyLYYvmia10ZPBzcW4np9Zw8GKgSgxW4IVfB8u7aPw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;许多科技初创公司会向新员工发放限制性股票单位(RSU)，以此吸引他们接受较低的薪酬，因为公司今后一旦上市，他们就有机会获得一笔不菲的收入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直到2020年夏天，TikTok才开始向大部分美国员工发放RSU，这也是员工薪酬及奖金方案的内容之一。然而当它这样做时，却没有将奖励计划覆盖至大部分美国在职员工，因此造成了一些人所说的困惑与失望。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;TikTok开始允许一些员工将奖金转化为RSU，并且RSU可即刻授予。但一些前员工说，只有在连续两次绩效评估中拿到高分的员工，才能享受这一福利。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他们说，这些评估的考核标准之一是看员工是否遵循了办公室墙上的标语，也就是“字节范”(Byte Styles)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但许多员工感觉，诸如“追求极致”、“务实敢为”这类说法太过模糊，主管们完全有可能仅凭个人喜好来奖励员工。其他人则说，由于担心违背“开放谦逊”这条“字节范”，员工们不敢畅所欲言。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据前员工说，开会时，TikTok美国主管会略过员工提出的有关RSU的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据知情人士说，在2021年4月的一场员工大会上，已在TikTok品牌对外合作部工作两年多的迪伦·荣克(Dylan Juhnke)询问美国人力资源负责人，公司高层为何连续50周都在回避有关薪酬的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他说，如果TikTok不打算回应此类问题，它应该直接说出来，而不是采取回避态度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一份电子邮件副本显示，不久后，公司高层通过邮件斥责了荣克那天在员工大会上的行为。据一位知情人士说，人力资源部还启动了一项调查，并就TikTok是否能解雇荣克一事进行过讨论。几个月后，荣克辞职了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;TikTok没有就有关员工具体经历的说法发表评论，包括荣克这件事。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;TikTok自称是“快乐、有趣、多元化及惊喜体验”的大本营。在荣克离职时发布的一份内部备忘录中，他说，“TikTok对待员工的方式与TikTok平台代表的东西截然相反。”&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;相关阅读：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;1、&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247523205&amp;amp;idx=1&amp;amp;sn=89b261f829ce6c3487ce8b2ccf3ed06b&amp;amp;chksm=ea5f56e3dd28dff5238989d3e07d775d34c04a4e80a166059e92e84379274819203d72d1dc1d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Alibaba开源内网高并发编程手册.pdf&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Alibaba开源内网高并发编程手册.pdf&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2T架构师学习资料干货分享&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;2T架构师学习资料干货分享&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247523100&amp;amp;idx=1&amp;amp;sn=82a70350577bde0bca6dd2dde811ca17&amp;amp;chksm=ea5f567add28df6cb6a780ff744c3ffdc79e498d2c2536ffb1853d8082ebfa986e1e5c43d532&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;10000+TB 资源，阿里云盘，牛逼！！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;10000+TB 资源，阿里云盘，牛逼！！&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;p&gt;4、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247523863&amp;amp;idx=1&amp;amp;sn=4d2a2b5da60f14f3e8947e174d485c03&amp;amp;chksm=ea5f5371dd28da6791af6cb3a164c8052f1e77d7392cbbc87c5a73ccc6916b76eab29dbc9991&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;基本涵盖了Spring所有核心知识点总结&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;基本涵盖了Spring所有核心知识点总结&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;  · END ·&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;最后，关注公众号互联网架构师，在后台回复：2T，可以获取我整理的 Java 系列面试题和答案，非常齐全&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRL358RWHQSLbUws79uyGm5RJ6WZibYJMAKUQibz8aYNA5LPSmbo1boibnD3IhggQ2F7kS37xgk3WXQ8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这篇文章对您有所帮助，或者有所启发的话，帮忙扫描下发二维码关注一下，您的支持是我坚持写作最大的动力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;求一键三连：点赞、转发、在看。&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7d3c7388da5235e38ce8425e937f7e87</guid>
<title>前端趋势 2022</title>
<link>https://toutiao.io/k/6kgja66</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🙋🏻‍♀️ 编者按：本文作者是蚂蚁集团前端工程师云谦，对过去半年前端的发展进行了快速回顾，同时提出了对于未来趋势的基本判断，欢迎查阅～&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4180569185475957&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/M7OtEw9eDKEkdianmrLfGdpg7p83Pw08YZuyJEqZgU8wDtYVMONcoJrNicUHVIvZBV2Ez27sX0icZ1fZlGwfFxwFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1019&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、&lt;strong&gt;原生语言已成为 JS 工具链重要组成部分。&lt;/strong&gt; 犹记得好久以前有人发过一个投票，你会选 JavaScript Tool 还是 Native Code Tool？这其实是在速度和上手门槛之间做选择。这么久过去，开发者已经用脚投票。现在社区有大量基于 Native Code 实现的 JavaScript 工具和框架，比如 Deno（Rust）、Bun（Zig）、Rome Formatter（Rust）、esbuild（go）、swc（Rust）、Parcel CSS（Rust），比如 kdy 之前画的 tsc 的大饼（go），以及像 Next、Vite、Nuxt、Umi 等上层框架和工具也都有大量原生语言工具的应用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、&lt;strong&gt;Tauri[&#x27;tɔ:rai] 尝试代替 Electron。&lt;/strong&gt; 「Electron is easy, but slow and bloated.」Electron 虽然易上手，但问题是大和慢，去年 1Password 8 就因为切换到 Electron 被骂地不行。Tauri 可以解这个问题，满足大家「既要用 JavaScript 开发，又要产品性能」的需求，基于 Rust，近期有发布 1.0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、&lt;strong&gt;Islands 架构发展迅猛。&lt;/strong&gt; Islands 架构最早由 preact 作者于 2020.8.11 提出，解页面性能问题，包括 SSR 全栈框架下「重复数据、JS 尺寸大、注水消耗大」的问题。其特点是「More HTML，Less JavaScript」，默认全部 HTML，然后在轮播、搜索补全、购买按钮等需要交互的地方加上少量 JavaScript。低碳、节电，哈哈。社区已有很多实践，前有 astro、qwik、基于 svelte 的 elderjs 等，后有基于 deno 的 Fresh，都是对于 Islands 架构的实践。看到 Fresh 之后，个人感觉方案已逐渐成熟，可尝试用于生产。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、&lt;strong&gt;数据流从纯客户端发展到全栈。&lt;/strong&gt; 纯客户端数据流包括 Redux、MobX、Dva、Jotai、Recoil、Valtio、Zustand 等，基本都是「View &amp;gt; Action &amp;gt; State」单向数据流，跑在客户端。而很多应用实际上还有持久化数据和同步数据的需求，所以在这个单向数据流之外，还会有个和服务端交互的数据流。Remix 把这个数据流扩展到了全栈，通过获取数据的 loader 和修改数据的 action，形成「Loader &amp;gt; Component &amp;gt; Action」的全栈数据流。同时 React Query、SWR、RTK Query 和 useRequest 也可以理解为广义上的全栈数据流，处理服务端和客户端之间的数据同步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、&lt;strong&gt;Storybook 竞品来势汹汹。&lt;/strong&gt; 包括支持 React 的 Ladle 和支持 Vue 的 Histoire，他们的特点都是快。同时，Storybook 虽然一直在尝试提升编译速度，包括支持 vite、支持 webpack 的 lazy compilation 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、&lt;strong&gt;CSS 动作频频。&lt;/strong&gt; 比如 CSS Toggle 让 Toggle 场景不再需要 JavaScript，比如 :has 选择器让 CSS 终于有了向上选择的父选择器，比如 CSS Variable 2 提案最近也已在进行中，再比如 Defensive CSS 可以让你的应用更加健壮。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7、&lt;strong&gt;Headless 组件风头正盛。&lt;/strong&gt; 很多人会无脑选择 UI 框架，但如果业务复杂或者有自己的设计需求时，可能会针对框架做很多 hack；又或者 80% 的场景下很节省时间，遇到 20% 的需求不符的场景时，反而会花更多的时间去解。所以，最近 Headless 组件逐渐被大家接受，他们包含完整功能，但把设计部分留给开发者处理。比如 Reach UI、Headless UI、Radix UI、Downshift、React ARIA、Reakit、Ariakit、React Table 等都是，以及有基础样式的 Chakra UI 也算。结合 Tailwind CSS 快速打造符合自己设计系统的 UI 库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;8、&lt;strong&gt;React 一如既往的稳。&lt;/strong&gt; React 18 终于正式发布；同时 React 官方正尝试通过 useEvent 来修复 hooks 带来的一些问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9、&lt;strong&gt;文档工具有新秀。&lt;/strong&gt; 比如 Prisma 作者出的 Contentlayer，通用方案，可以和任意框架对接；还有 Stripe 团队出的 Markdoc 也令人眼前一亮，其引入一种新的 markdown 编写方式，可以和任意语言结合使用。此外值得一提的是，MDX 也有发布他的 2.0 版本。&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2OTYyODU0NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKG4jX2R3CQUS31Q65Rc9LVibaxJrgqkMmBSU7jUmYjNT4q0Q3gUVqpQf8Zepp6Ilo6X6qrffiawJoeQ/0?wx_fmt=png&quot; data-nickname=&quot;支付宝体验科技&quot; data-alias=&quot;antf2e&quot; data-signature=&quot;探索极致用户体验和最佳工程实践。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有点意思，那就点个关注呗 💁🏼‍♀️&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;👇🏾&lt;/span&gt;&lt;span&gt;点击「阅读原文」，在评论区与我们互动噢&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cfac55eafc5d4ffd31e7689901088921</guid>
<title>开源数据质量解决方案——Apache Griffin入门宝典</title>
<link>https://toutiao.io/k/pqkj5w9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;pre data-highlight-status=&quot;highlighted&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;code&gt;提到格里芬—Griffin，大家想到更多的是篮球明星或者战队名，但在大数据领域Apache Griffin（以下简称Griffin）可是数据质量领域响当当的一哥。先说一句：Griffin是大数据质量监控领域唯一的Apache项目，懂了吧。&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;在不重视数据质量的大数据发展时期，Griffin并不能引起重视，但是随着数据治理在很多企业的全面开展与落地，数据质量的问题开始引起重视。&lt;/section&gt;&lt;section&gt;还是那句话，商用版的解决方案暂时不在本文的讨论范围内，目前大数据流动公众号对于数据治理工具的研究还是在开源方向，希望通过开源+二次开发结合的方式找到适合自己公司的数据治理工具箱。在未来有靠谱的商用方案，我们也会保持关注~&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正文共：&lt;/span&gt; &lt;span&gt;12094&lt;/span&gt;字 &lt;/p&gt;&lt;p&gt;&lt;span&gt;预计阅读时间：&lt;/span&gt; &lt;span&gt;31&lt;/span&gt;分钟&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;js_asyningdom rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEX5dyxQjztMzkGNsVRFhlC9fFPfa537ic6GicI5k9KQBIlicsiaE7DmsY8PA/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;本文将从数据质量，Griffin简介，Griffin架构，Griffin快速入门，Griffin批数据实战，Griffin流数据实战整合六个部分进行介绍，目的是带大家快速的入门数据质量管理工具的使用。&lt;/section&gt;&lt;section&gt;本文档版权属于公众号：大数据流动 所有。未经授权，请勿转载与商用！&lt;/section&gt;&lt;section&gt;考虑到抄袭问题，Griffin后续的高阶技术文章可能会付费，也希望大家能尽早加入数据治理、Griffin等相关技术群，我会将最新的文章与资料实时同步。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;js_asyningdom rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXd92Cc7LDZibP8z3Oc7QaFJedHxoNso5aJOicbY5m1iaU1Zf6kfC4aykbA/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;一、数据质量&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据质量管理（Data Quality Management），是指对数据从计划、获取、存储、共享、维护、应用、消亡生命周期的每个阶段里可能引发的各类数据质量问题，进行识别、度量、监控、预警等一系列管理活动，并通过改善和提高组织的管理水平使得数据质量获得进一步提高。&lt;/p&gt;&lt;p&gt;数据质量管理不是一时的数据治理手段，而是循环的管理过程。其终极目标是通过可靠的数据，提升数据在使用中的价值，并最终为企业赢得经济效益。&lt;/p&gt;&lt;p&gt;为什么会有数据质量管理呢？&lt;/p&gt;&lt;p&gt;大数据时代数据的核心不是“大”，而在于“有价值”，而有价值的关键在于“质量”。但现实是，数据往往存在很多问题：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;数据无法匹配&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据不可识别&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;时效性不强&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据不一致&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;。。。。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么，解决数据质量要达到什么目标呢？&lt;/p&gt;&lt;p&gt;总结来说就是&lt;strong&gt;可信和可用&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;可信就是让数据具有实用性，准确性，及时性，完整性，有效性。&lt;/p&gt;&lt;p&gt;可用就是规范性和可读性。&lt;/p&gt;&lt;p&gt;数据质量可能不是数据治理的最核心部分，但可能会成为数据治理落地的做大障碍。&lt;/p&gt;&lt;p&gt;提高数据质量有多种方式，比如建立统一的数据标准、提高人员的意识与能力等等。&lt;/p&gt;&lt;p&gt;而一个提高数据质量的高生产力方式就是使用&lt;strong&gt;数据质量管理工具&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;数据质量管理工具成熟的并不多，所以本文就不做无用的对比了，我们直接进入正题：Apache Griffin。&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;二、Griffin简介&lt;/h2&gt;&lt;p&gt;Griffin是一个开源的大数据数据质量解决方案，由eBay开源，它支持批处理和流模式两种数据质量检测方式，是一个基于Hadoop和Spark建立的数据质量服务平台 (DQSP)。它提供了一个全面的框架来处理不同的任务，例如定义数据质量模型、执行数据质量测量、自动化数据分析和验证，以及跨多个数据系统的统一数据质量可视化。&lt;/p&gt;&lt;p&gt;Griffin于2016年12月进入Apache孵化器，Apache软件基金会2018年12月12日正式宣布Apache Griffin毕业成为Apache顶级项目。&lt;/p&gt;&lt;p&gt;Griffin官网地址：https://griffin.apache.org/&lt;/p&gt;&lt;p&gt;Github地址：https://github.com/apache/griffin&lt;/p&gt;&lt;p&gt;在eBay的数据质量管理实践中，需要花费很长时间去修复数据质量的问题，不管是批处理还是流处理，解决数据质量问题的时间都是巨大的，由此一个统一的数据质量系统就应运而生了。&lt;/p&gt;&lt;p&gt;在官网的定义中，Apache Griffin也早就更新为了批和流（Batch and Streaming）数据质量解决方案。Apache Griffin已经在朝着数据质量的统一管理平台而努力了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5846394984326019&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXT8A7wLdWCQ7ajxEibpicGbicRMicX58zROZf2QqSrLjRVODCmjQ2pjAptQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1276&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Griffin主要有如下的功能特点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;度量：精确度、完整性、及时性、唯一性、有效性、一致性。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;异常监测：利用预先设定的规则，检测出不符合预期的数据，提供不符合规则数据的下载。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;异常告警：通过邮件或门户报告数据质量问题。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可视化监测：利用控制面板来展现数据质量的状态。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;实时性：可以实时进行数据质量检测，能够及时发现问题。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可扩展性：可用于多个数据系统仓库的数据校验。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可伸缩性：工作在大数据量的环境中，目前运行的数据量约1.2PB(eBay环境)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;自助服务：Griffin提供了一个简洁易用的用户界面，可以管理数据资产和数据质量规则；同时用户可以通过控制面板查看数据质量结果和自定义显示内容。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Apache Giffin目前的数据源包括HIVE, CUSTOM, AVRO, KAFKA。Mysql和其他关系型数据库的扩展根据需要进行扩展。&lt;/p&gt;&lt;p&gt;当然Giffin也不是万能的，目前Griffin还是有很多的问题的，选择也要慎重：&lt;/p&gt;&lt;p&gt;Griffin的社区并不太活跃，可以共同讨论的人不多。&lt;/p&gt;&lt;p&gt;目前最新版本还是0.6，可能会有一些问题。&lt;/p&gt;&lt;p&gt;网上技术文档很少，当然这方面大数据流动也会不断的输出新的技术文档帮助大家。&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;三、Griffin架构&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据质量模块是大数据平台中必不可少的一个功能组件，以下Griffin作为一个开源的大数据数据质量解决方案，它支持批处理和流模式两种数据质量检测方式，可以从不同维度（比如离线任务执行完毕后检查源端和目标端的数据数量是否一致、源表的数据空值数量等）度量数据资产，从而提升数据的准确度、可信度。&lt;/p&gt;&lt;p&gt;在Griffin的架构中，主要分为Define、Measure和Analyze三个部分，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.58578856152513&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEX4E3QQH1cy6AQYp5dZPXOf3E7PyzemJ4zMtkg1XtQ0yib54Uy0ic1k6DQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;p&gt;各部分的职责如下：&lt;/p&gt;&lt;p&gt;听起来有些晦涩，我们来看一下一个完整的Griffin任务的执行流程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;js_asyningdom rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXWD56Y6AB2jNibUCxbnc7LUj80pPC8BMCiaz45Nwj8GBpJSOlhL0GpOMw/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;p&gt;Griffin 系统主要分为：数据收集处理层（Data Collection&amp;amp;Processing Layer）、后端服务层（Backend Service Layer）和用户界面（User Interface）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.300420168067227&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXv8K6zFlAibuAyib8Kqib5yVCZpnpqCF4hcd3Df548UOauonsQxIA5of2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;&lt;/p&gt;&lt;p&gt;数据处理和存储层：&lt;/p&gt;&lt;p&gt;对于批量分析，数据质量模型将根据 hadoop 中的数据源计算 Spark 集群中的数据质量指标。&lt;/p&gt;&lt;p&gt;对于近实时分析，使用来自消息传递系统的数据，然后数据质量模型将基于 Spark 集群计算实时数据质量指标。对于数据存储，可以在后端使用Elasticsearch来满足前端请求。&lt;/p&gt;&lt;p&gt;Apache Griffin 服务：&lt;/p&gt;&lt;p&gt;项目有提供Restful 服务来完成 Apache Griffin 的所有功能，例如探索数据集、创建数据质量度量、发布指标、检索指标、添加订阅等。因此，开发人员可以基于这些 Web 开发自己的用户界面服务。&lt;/p&gt;&lt;p&gt;这种灵活性也让Griffin 得到了越来越多的应用。&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;四、Griffin快速入门&lt;/h2&gt;&lt;p&gt;Griffin的最新版本为0.6.0，本文的安装部署也基于这个版本进行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6145092460881935&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXNqRfxlBoQVC8TYgcdzas1WWeXGjPOuXibmzIduTEicKctoJib5yIhuxsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;703&quot;/&gt;&lt;/p&gt;&lt;h4&gt;依赖准备&lt;/h4&gt;&lt;p&gt;JDK (1.8 or later versions)&lt;br/&gt;MySQL(version 5.6及以上)&lt;br/&gt;Hadoop (2.6.0 or later)&lt;br/&gt;Hive (version 2.x)&lt;br/&gt;Spark (version 2.2.1)&lt;br/&gt;Livy（livy-0.5.0-incubating）&lt;br/&gt;ElasticSearch (5.0 or later versions)&lt;/p&gt;&lt;p&gt;大部分CDH已经自带，这里特别说一下Livy和ElasticSearch如何部署。&lt;/p&gt;&lt;p&gt;Livy是一个Spark的Rest服务器。&lt;/p&gt;&lt;p&gt;https://livy.apache.org/&lt;/p&gt;&lt;p&gt;准备livy安装包。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;将livy安装包解压到/opt/目录下&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;创建livy用户、log目录并将livy的home目录属主修改为livy:hadoop&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;useradd livy -g hadoop&lt;span&gt;mkdir&lt;/span&gt; /var/log/livy&lt;span&gt;mkdir&lt;/span&gt; /var/run/livy&lt;span&gt;chown&lt;/span&gt; livy:hadoop /var/log/livy&lt;span&gt;chown&lt;/span&gt; livy:hadoop /var/run/livy&lt;span&gt;chown&lt;/span&gt; -R livy:hadoop /opt/cloudera/apache-livy-0.6.0-incubating-bin/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.进入livy home目录，在conf目录下创建livy.conf、livy-env.sh、spark-blacklist.conf配置文件&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;livy.conf、livy-env.&lt;span&gt;sh、spark-blacklist.conf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.修改配置文件livy.conf，添加如下内容&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;livy.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;master&lt;/span&gt; = yarn&lt;br/&gt;livy.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;deployMode&lt;/span&gt; = cluster&lt;br/&gt;livy.&lt;span&gt;environment&lt;/span&gt; = production&lt;br/&gt;livy.&lt;span&gt;impersonation&lt;/span&gt;.&lt;span&gt;enabled&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;livy.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;csrf_protection&lt;/span&gt;.&lt;span&gt;enabled&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;livy.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;port&lt;/span&gt; = &lt;span&gt;8998&lt;/span&gt;livy.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;session&lt;/span&gt;.&lt;span&gt;timeout&lt;/span&gt; = &lt;span&gt;3600000&lt;/span&gt;livy.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;recovery&lt;/span&gt;.&lt;span&gt;mode&lt;/span&gt; = recovery&lt;br/&gt;livy.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;recovery&lt;/span&gt;.&lt;span&gt;state&lt;/span&gt;-store=filesystem&lt;br/&gt;livy.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;recovery&lt;/span&gt;.&lt;span&gt;state&lt;/span&gt;-store.&lt;span&gt;url&lt;/span&gt;=&lt;span&gt;/tmp/&lt;/span&gt;livy&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.修改配置文件livy-env.sh，增加hadoop和Spark的配置信息，如下&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;JAVA_HOME&lt;/span&gt;=&lt;span&gt;/usr/&lt;/span&gt;java/jdk1&lt;span&gt;.8&lt;/span&gt;&lt;span&gt;.0_181&lt;/span&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;HADOOP_HOME&lt;/span&gt;=&lt;span&gt;/opt/&lt;/span&gt;cloudera/parcels/&lt;span&gt;CDH&lt;/span&gt;/lib/hadoop&lt;span&gt;export&lt;/span&gt; &lt;span&gt;SPARK_CONF_DIR&lt;/span&gt;=&lt;span&gt;/etc/&lt;/span&gt;spark2/conf&lt;span&gt;export&lt;/span&gt; &lt;span&gt;SPARK_HOME&lt;/span&gt;=&lt;span&gt;/opt/&lt;/span&gt;cloudera/parcels/&lt;span&gt;SPARK2&lt;/span&gt;-&lt;span&gt;2.3&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;.&lt;span&gt;cloudera2&lt;/span&gt;-&lt;span&gt;1.&lt;/span&gt;cdh6&lt;span&gt;.3&lt;/span&gt;&lt;span&gt;.2&lt;/span&gt;.&lt;span&gt;p0&lt;/span&gt;&lt;span&gt;.1041012&lt;/span&gt;/lib/spark2&lt;span&gt;export&lt;/span&gt; &lt;span&gt;HADOOP_CONF_DIR&lt;/span&gt;=&lt;span&gt;/etc/&lt;/span&gt;hadoop/conf&lt;span&gt;export&lt;/span&gt; &lt;span&gt;LIVY_LOG_DIR&lt;/span&gt;=&lt;span&gt;/var/&lt;/span&gt;log/livy&lt;span&gt;export&lt;/span&gt; &lt;span&gt;LIVY_PID_DIR&lt;/span&gt;=&lt;span&gt;/var/&lt;/span&gt;run/livy&lt;span&gt;export&lt;/span&gt; &lt;span&gt;LIVY_SERVER_JAVA_OPTS&lt;/span&gt;=&lt;span&gt;&quot;-Xmx2g&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.修改配置文件spark-blacklist.conf&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;# Configuration override / blacklist. Defines a list of properties that users are not allowed&lt;/span&gt;&lt;span&gt;# to override when starting Spark sessions.&lt;/span&gt;#&lt;span&gt;# This file takes a list of property names (one per line). Empty lines and lines starting with &quot;#&quot;&lt;/span&gt;&lt;span&gt;# are ignored.&lt;/span&gt;#&lt;span&gt;# Disallow overriding the master and the deploy mode.&lt;/span&gt;spark.master&lt;br/&gt;spark.&lt;span&gt;submit.deployMode&lt;/span&gt;&lt;span&gt;# Disallow overriding the location of Spark cached jars.&lt;/span&gt;spark.yarn.&lt;span&gt;jar&lt;/span&gt;spark.yarn.&lt;span&gt;jars&lt;/span&gt;spark.yarn.archive&lt;span&gt;# Don&#x27;t allow users to override the RSC timeout.&lt;/span&gt;livy.rsc.server.idle-timeout&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;7&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;core-site.xml 的群集范围高级配置代码段（安全阀）”配置项增加如下内容&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hadoop.proxyuser.livy.groups&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;*&lt;span&gt;&amp;lt;/&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hadoop.proxyuser.livy.hosts&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;*&lt;span&gt;&amp;lt;/&lt;span&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8.在HDFS上创建livy的home目录&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;sudo -u hdfs hadoop fs -&lt;span&gt;mkdir&lt;/span&gt; /user/livy&lt;br/&gt;sudo -u hdfs hadoop fs -&lt;span&gt;chown&lt;/span&gt; livy:supergroup /user/livy&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;9、启动livy服务&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;livy&lt;span&gt;-&lt;/span&gt;server &lt;span&gt;start&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;elasticsearch5安装，安装包也已下载在资料包中。&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt; wget &lt;span&gt;https:&lt;/span&gt;/&lt;span&gt;/artifacts.elastic.co/downloads&lt;/span&gt;&lt;span&gt;/elasticsearch/elasticsearch&lt;/span&gt;-&lt;span&gt;5.6&lt;/span&gt;.&lt;span&gt;15&lt;/span&gt;.tar.gz&lt;span&gt;# tar -zxvf elasticsearch-5.6.15&lt;/span&gt;&lt;span&gt;# cd elasticsearch-5.6.15&lt;/span&gt;&lt;span&gt;# sh ./bin/elasticsearch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;配置准备&lt;/h4&gt;&lt;p&gt;1、首先在mysql中初始化quartz数据库，这里需要用到脚本Init_quartz_mysql_innodb.sql。&lt;/p&gt;&lt;p&gt;脚本可以加griffin群，领取资料包下载。&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;mysql -u &lt;span&gt;&amp;lt;&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt; -p &lt;span&gt;&amp;lt;&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt; &amp;lt; Init_quartz_mysql_innodb.sql&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、Hadoop和Hive：&lt;/p&gt;&lt;p&gt;从Hadoop服务器拷贝配置文件到Livy服务器上，这里假设将配置文件放在/usr/data/conf目录下。&lt;/p&gt;&lt;p&gt;在Hadoop服务器上创建/home/spark_conf目录，并将Hive的配置文件hive-site.xml上传到该目录下：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;#创建/home/spark_conf目录&lt;/span&gt;hadoop fs -&lt;span&gt;mkdir&lt;/span&gt; -p /home/spark_conf&lt;span&gt;#上传hive-site.xml&lt;/span&gt;hadoop fs -put hive-site.xml /home/spark_conf/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、设置环境变量：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;span&gt;export&lt;/span&gt; JAVA_HOME=/data/jdk1.8.0_192&lt;span&gt;#spark目录&lt;/span&gt;&lt;span&gt;export&lt;/span&gt; SPARK_HOME=/usr/data/spark-2.1.1-bin-2.6.3&lt;span&gt;#livy命令目录&lt;/span&gt;&lt;span&gt;export&lt;/span&gt; LIVY_HOME=/usr/data/livy/bin&lt;span&gt;#hadoop配置文件目录&lt;/span&gt;&lt;span&gt;export&lt;/span&gt; HADOOP_CONF_DIR=/usr/data/conf&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、配置启动Livy&lt;/p&gt;&lt;p&gt;更新livy/conf下的livy.conf配置文件：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;livy.server.host&lt;/span&gt; = &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;livy.spark.master&lt;/span&gt; = yarn&lt;span&gt;livy.spark.deployMode&lt;/span&gt; = cluster&lt;span&gt;livy.repl.enable-hive-context&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动livy：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;livy&lt;span&gt;-&lt;/span&gt;server &lt;span&gt;start&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、Elasticsearch配置：&lt;/p&gt;&lt;p&gt;在ES里创建griffin索引：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;curl -XPUT http:&lt;span&gt;//es:9200/griffin -d &#x27;&lt;/span&gt;{    &lt;span&gt;&quot;aliases&quot;&lt;/span&gt;: {},    &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {        &lt;span&gt;&quot;accuracy&quot;&lt;/span&gt;: {            &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {                &lt;span&gt;&quot;name&quot;&lt;/span&gt;: {                    &lt;span&gt;&quot;fields&quot;&lt;/span&gt;: {                        &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;: {                            &lt;span&gt;&quot;ignore_above&quot;&lt;/span&gt;: &lt;span&gt;256&lt;/span&gt;,                            &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;                        }&lt;br/&gt;                    },                    &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;&lt;br/&gt;                },                &lt;span&gt;&quot;tmst&quot;&lt;/span&gt;: {                    &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;date&quot;&lt;/span&gt;&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    },    &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {        &lt;span&gt;&quot;index&quot;&lt;/span&gt;: {            &lt;span&gt;&quot;number_of_replicas&quot;&lt;/span&gt;: &lt;span&gt;&quot;2&quot;&lt;/span&gt;,            &lt;span&gt;&quot;number_of_shards&quot;&lt;/span&gt;: &lt;span&gt;&quot;5&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来进行源码编译打包。&lt;/p&gt;&lt;p&gt;Griffin的源码结构很清晰，主要包括griffin-doc、measure、service和ui四个模块，其中griffin-doc负责存放Griffin的文档，measure负责与spark交互，执行统计任务，service使用spring boot作为服务实现，负责给ui模块提供交互所需的restful api，保存统计任务，展示统计结果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7692307692307693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXKY0Pl53zgJC5ib1StBFticoc6yfxLk3POXcsRsZvmBghfPYy1qvVUDiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;468&quot;/&gt;&lt;/p&gt;&lt;p&gt;源码导入构建完毕后，需要修改配置文件，具体修改的配置文件如下：&lt;/p&gt;&lt;p&gt;application.properties：mysql，hive，es配置&lt;/p&gt;&lt;p&gt;quartz.properties&lt;/p&gt;&lt;p&gt;sparkProperties.json&lt;/p&gt;&lt;p&gt;配置文件修改好后，在idea里的terminal里执行如下maven命令进行编译打包：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;mvn -Dmaven.&lt;span&gt;test&lt;/span&gt;.skip=&lt;span&gt;true&lt;/span&gt; clean &lt;span&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;命令执行完成后，会在service和measure模块的target目录下分别看到service-0.6.0.jar和measure-0.6.0.jar两个jar，将这两个jar分别拷贝到服务器目录下。&lt;/p&gt;&lt;p&gt;1、使用如下命令将measure-0.4.0.jar这个jar上传到HDFS的/griffin文件目录里：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;#改变jar名称&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; &lt;span&gt;measure-0&lt;/span&gt;.&lt;span&gt;6.0&lt;/span&gt;.jar griffin&lt;span&gt;-measure&lt;/span&gt;.jar&lt;span&gt;#上传griffin-measure.jar到HDFS文件目录里&lt;/span&gt;hadoop fs &lt;span&gt;-put&lt;/span&gt; &lt;span&gt;measure-0&lt;/span&gt;.&lt;span&gt;6.0&lt;/span&gt;.jar /griffin/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、运行service-0.6.0.jar，启动Griffin管理后台：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;nohup &lt;span&gt;java &lt;/span&gt;-&lt;span&gt;jar &lt;/span&gt;service&lt;span&gt;-0&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.&lt;span&gt;jar&amp;gt;service.out &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;1&lt;/span&gt; &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;几秒钟后，我们可以访问Apache Griffin的默认UI(默认情况下，spring boot的端口是8080)。&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;http:&lt;span&gt;//IP:8080&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部分结果展示界面如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6675824175824175&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXpaQMUIiayheiaXmPW7HyXsKh7v35hrKFQNWSzK79KGGxwcKicSiaxVePMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2184&quot;/&gt;&lt;/p&gt;&lt;h2&gt;五、Griffin批数据实战&lt;/h2&gt;&lt;p&gt;官网给出了批处理数据的例子。&lt;/p&gt;&lt;p&gt;1、在hive里创建表demo_src和demo_tgt：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;--create hive tables here. hql script&lt;/span&gt;&lt;span&gt;--&lt;span&gt;Note:&lt;/span&gt; replace hdfs location with your own path&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;EXTERNAL&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; `demo_src`(&lt;br/&gt;  `id` &lt;span&gt;bigint&lt;/span&gt;,&lt;br/&gt;  `age` &lt;span&gt;int&lt;/span&gt;,&lt;br/&gt;  `&lt;span&gt;desc&lt;/span&gt;` string) &lt;br/&gt;PARTITIONED &lt;span&gt;BY&lt;/span&gt; (&lt;br/&gt;  `dt` string,&lt;br/&gt;  `&lt;span&gt;hour&lt;/span&gt;` string)&lt;span&gt;ROW&lt;/span&gt; FORMAT DELIMITED&lt;br/&gt;  FIELDS TERMINATED &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;&#x27;|&#x27;&lt;/span&gt;LOCATION  &lt;span&gt;&#x27;hdfs:///griffin/data/batch/demo_src&#x27;&lt;/span&gt;;&lt;span&gt;--&lt;span&gt;Note:&lt;/span&gt; replace hdfs location with your own path&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;EXTERNAL&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; `demo_tgt`(&lt;br/&gt;  `id` &lt;span&gt;bigint&lt;/span&gt;,&lt;br/&gt;  `age` &lt;span&gt;int&lt;/span&gt;,&lt;br/&gt;  `&lt;span&gt;desc&lt;/span&gt;` string) &lt;br/&gt;PARTITIONED &lt;span&gt;BY&lt;/span&gt; (&lt;br/&gt;  `dt` string,&lt;br/&gt;  `&lt;span&gt;hour&lt;/span&gt;` string)&lt;span&gt;ROW&lt;/span&gt; FORMAT DELIMITED&lt;br/&gt;  FIELDS TERMINATED &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;&#x27;|&#x27;&lt;/span&gt;LOCATION  &lt;span&gt;&#x27;hdfs:///griffin/data/batch/demo_tgt&#x27;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、生成测试数据：&lt;/p&gt;&lt;p&gt;从http://griffin.apache.org/data/batch/地址下载所有文件到Hadoop服务器上，然后使用如下命令执行gen-hive-data.sh脚本：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;nohup&lt;/span&gt; ./gen-hive-data.sh&amp;gt;gen.out 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意观察gen.out日志文件，如果有错误，视情况进行调整。这里我的测试环境Hadoop和Hive安装在同一台服务器上，因此直接运行脚本。&lt;/p&gt;&lt;p&gt;3、通过UI界面创建统计任务&lt;/p&gt;&lt;p&gt;选择DataAssets&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7009345794392523&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXPl9ZjUHGKysHGQyrYeNpXKjuibuoZdgpWMCL1eiczT8blFeALqIWBHUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;214&quot;/&gt;&lt;/p&gt;&lt;p&gt;在该页面可以看到数据资产展示&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14932562620423892&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXoWibBP5D7NOGERFB5M0FyyreldqWcos8uDYOFdMZWopQ7YECgIFF2Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1038&quot;/&gt;&lt;/p&gt;&lt;p&gt;点击Measures，创建度量页面&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17349857006673022&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXObVD5lLoSmOubO3AWG2heKOQJibMJYWooVS9FiacgrKmvvKhnKECB8oA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1049&quot;/&gt;&lt;/p&gt;&lt;p&gt;通过下面的步骤来一步步创建&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2739420935412027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXWUsZgWsULI1n8n3L7Av74nkh6MMmkRxs7cE6ubaZjSp2qicnU3zfnzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;449&quot;/&gt;&lt;/p&gt;&lt;p&gt;选择数据源&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.559610705596107&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXjXp1paxBD6bfRgrNlKbqpZ1c65Q3nLtVkV1PvsjibjE9dPzbAMicHQnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;822&quot;/&gt;&lt;/p&gt;&lt;p&gt;选择目标&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5567765567765568&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXhVqicswVK3sk7JSxw4Uu54nwOeJKN7OkmwATib96f1icTK7HLPceYNrKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;819&quot;/&gt;&lt;/p&gt;&lt;p&gt;将两者关联&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5726817042606517&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXBWCEQoOWeKCHNoeA68hUiaHBehGhlDMJoAJbk1juatS8KnWHv6h5ArA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;798&quot;/&gt;&lt;/p&gt;&lt;p&gt;设置一些参数&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5698529411764706&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXpcicZkgf4D5abD2KDHwFymibOejuFhcdSna5ylTCOWXnBkSS5GPn08HQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;816&quot;/&gt;&lt;/p&gt;&lt;p&gt;配置好提交&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5687732342007435&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXrLa2kNjOzEnGvgz1GQMKQhZJZOpDxMXFdzsppoic07qcqTdviaibrJuyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;807&quot;/&gt;&lt;/p&gt;&lt;p&gt;新增定时任务&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18877551020408162&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXIZZlRk9oyjbriaLicloomDrhNDN22FEVZnN7heibqlO81s7mDYGJiaTEMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;784&quot;/&gt;&lt;/p&gt;&lt;p&gt;用cron表达式建立任务&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6745932415519399&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXv1FTicbcc9TLYia4NlkcBf6dWtouRNnlTk5coNpdSKSia9Zs83s2xakbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;799&quot;/&gt;&lt;/p&gt;&lt;p&gt;点击DQ Metrics，看到效果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9774696707105719&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXL9NTg6IuNatrYD5ukbTjrT7vTIgRSJo93EiartGysXxIgtyXLx9piclw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;六、Griffin流数据实战&lt;/h2&gt;&lt;p&gt;还会参考官网的例子。&lt;/p&gt;&lt;p&gt;示例流数据如下：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;{&lt;span&gt;&quot;id&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span&gt;&quot;color&quot;&lt;/span&gt;: &lt;span&gt;&quot;red&quot;&lt;/span&gt;, &lt;span&gt;&quot;time&quot;&lt;/span&gt;: &lt;span&gt;&quot;2018-09-12_06:00:00&quot;&lt;/span&gt;}&lt;br/&gt;{&lt;span&gt;&quot;id&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;Banana&quot;&lt;/span&gt;, &lt;span&gt;&quot;color&quot;&lt;/span&gt;: &lt;span&gt;&quot;yellow&quot;&lt;/span&gt;, &lt;span&gt;&quot;time&quot;&lt;/span&gt;: &lt;span&gt;&quot;2018-09-12_06:01:00&quot;&lt;/span&gt;}&lt;br/&gt;...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;官方也提供了测试数据的脚本https://griffin.apache.org/data/streaming/（已存资料包）&lt;/p&gt;&lt;p&gt;通过脚本可以源源不断将数据写入Kafka&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;#!/bin/bash&lt;/span&gt;&lt;span&gt;#create topics&lt;/span&gt;kafka-topics.sh --create --zookeeper hadoop101:2181 --replication-factor 1 --partitions 1 --topic &lt;span&gt;source&lt;/span&gt;kafka-topics.sh --create --zookeeper hadoop101:2181 --replication-factor 1 --partitions 1 --topic target&lt;span&gt;#every minute&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; +e&lt;span&gt;while&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;br/&gt;  /opt/module/data/gen-data.sh  &lt;span&gt;sleep&lt;/span&gt; 90&lt;span&gt;done&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; -e&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Flink部分就是简单接收Kafka数据，然后再发向下游，部分代码片段如下：&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();&lt;br/&gt;FlinkKafkaConsumer010&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt; kafkaconsumer =                &lt;span&gt;new&lt;/span&gt; FlinkKafkaConsumer010&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt;(inputTopic, &lt;span&gt;new&lt;/span&gt; SimpleStringSchema(), properties);&lt;br/&gt;        DataStream&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt; dataStream = env.addSource(kafkaconsumer);&lt;br/&gt;&lt;br/&gt;DataStream&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt; target = dataStream.add...&lt;span&gt;//具体处理逻辑&lt;/span&gt;target..addSink(&lt;span&gt;new&lt;/span&gt; FlinkKafkaProducer010&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt;(                &lt;span&gt;&quot;hadoop101:9092&quot;&lt;/span&gt;,                &lt;span&gt;&quot;target&quot;&lt;/span&gt;,                &lt;span&gt;new&lt;/span&gt; SimpleStringSchema()&lt;br/&gt;        ));&lt;br/&gt;        outMap.&lt;span&gt;print&lt;/span&gt;();&lt;br/&gt;        env.execute();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配合env.json&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;spark&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;log.level&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;WARN&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;checkpoint.dir&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;hdfs:///griffin/checkpoint&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;batch.interval&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;20s&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;process.interval&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;1m&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;init.clear&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;config&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.default.parallelism&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.task.maxFailures&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.streaming.kafkaMaxRatePerPartition&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.streaming.concurrentJobs&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.yarn.maxAppAttempts&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.yarn.am.attemptFailuresValidityInterval&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;1h&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.yarn.max.executor.failures&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;120&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.yarn.executor.failuresValidityInterval&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;1h&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;spark.hadoop.fs.hdfs.impl.disable.cache&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;sinks&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;console&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;hdfs&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;config&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;path&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;hdfs:///griffin/persist&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;elasticsearch&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;config&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;method&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;post&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;api&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;http://es:9200/griffin/accuracy&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;griffin.checkpoint&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;zk&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;config&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;zk:2181&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;namespace&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;griffin/infocache&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;lock.path&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;lock&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;mode&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;persist&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;init.clear&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;close.clear&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dq.json&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;streaming_accu&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;process.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;streaming&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;data.sources&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;src&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;baseline&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;connectors&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;kafka&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;version&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;0.8&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;config&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;kafka.config&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;kafka:9092&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;group.id&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;griffin&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;auto.offset.reset&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;largest&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;auto.commit.enable&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;false&quot;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;topics&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;source&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;key.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;value.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;java.lang.String&quot;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;pre.proc&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;dsl.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;df-opr&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;rule&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;from_json&quot;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;checkpoint&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;json&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;file.path&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;hdfs:///griffin/streaming/dump/source&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;info.path&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;source&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;ready.time.interval&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;10s&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;ready.time.delay&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;0&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;time.range&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;-5m&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;0&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;updatable&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;tgt&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;connectors&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;kafka&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;version&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;0.8&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;config&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;kafka.config&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;kafka:9092&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;group.id&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;griffin&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;auto.offset.reset&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;largest&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;auto.commit.enable&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;false&quot;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;topics&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;target&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;key.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;value.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;java.lang.String&quot;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;pre.proc&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;dsl.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;df-opr&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;              &lt;span&gt;&quot;rule&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;from_json&quot;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&quot;checkpoint&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;json&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;file.path&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;hdfs:///griffin/streaming/dump/target&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;info.path&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;target&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;ready.time.interval&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;10s&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;ready.time.delay&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;0&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;time.range&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;-1m&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;0&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;]&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;evaluate.rule&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;rules&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;dsl.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;griffin-dsl&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;dq.type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;accuracy&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;out.dataframe.name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;accu&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;rule&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;src.id = tgt.id AND src.name = tgt.name AND src.color = tgt.color AND src.time = tgt.time&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;details&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;source&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;src&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;target&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;tgt&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;miss&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;miss_count&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;total&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;total_count&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&quot;matched&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;matched_count&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&quot;out&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;metric&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;accu&quot;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;type&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;record&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&quot;name&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;missRecords&quot;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;sinks&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;CONSOLE&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&quot;HDFS&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提交任务&lt;/p&gt;&lt;pre data-highlight-status=&quot;highlighted&quot;&gt;&lt;code&gt;spark-submit &lt;span&gt;--class&lt;/span&gt; org&lt;span&gt;.apache&lt;/span&gt;&lt;span&gt;.griffin&lt;/span&gt;&lt;span&gt;.measure&lt;/span&gt;&lt;span&gt;.Application&lt;/span&gt; &lt;span&gt;--master&lt;/span&gt; yarn &lt;span&gt;--deploy-mode&lt;/span&gt; client &lt;span&gt;--queue&lt;/span&gt; default \&lt;span&gt;--driver-memory&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;g &lt;span&gt;--executor-memory&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;g &lt;span&gt;--num-executors&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; \&lt;br/&gt;&amp;lt;path&amp;gt;/griffin-measure&lt;span&gt;.jar&lt;/span&gt; \&lt;br/&gt;&amp;lt;path&amp;gt;/env&lt;span&gt;.json&lt;/span&gt; &amp;lt;path&amp;gt;/dq&lt;span&gt;.json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;七、总结&lt;/h2&gt;&lt;p&gt;数据管理工具目前来说还是非常匮乏的，Griffin提供的不仅仅是实现，还有数据质量管理的思路，这对于我们自研数据质量管理系统也是非常的宝贵的。&lt;/p&gt;&lt;p&gt;数据治理道路任重道远，欢迎加入相关交流群，我们共同学习进步~&lt;/p&gt;&lt;p&gt;进入学习交流群领取学习资料包：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3138586956521739&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEX0ibop0xFDmHqYlXD4QBKIrNmoqdq5mINibGompSqccrdey0jSViarLSPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;736&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了更专注效率才能更高，目前数据治理相关学习交流群按不同方向做了区分，欢迎扫码加入：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5587266739846323&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEXuzWp6D1eIp3R7CwppujNz52NExCWibFZ9tFZCrJ4YP2ANpGV6oiaSv5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;911&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另外 &lt;strong&gt;数据治理工具箱&lt;/strong&gt; 知识星球也已成立，这是一个数据治理落地实践方向的知识星球。大数据流动发布的数据治理相关文章与资料（包括付费内容）都将在知识星球进行&lt;strong&gt;长期同步&lt;/strong&gt;。星球的目标是收集数据治理实践工具的相关资料，并定期组织实战学习小组，让数据治理的相关资料可以长久的保存，同时也解决文章被频繁抄袭的问题，欢迎大家加入。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.531523642732049&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqibsuEhdUyK6vzupmxrtM2QXTouwZicEX3QiamLzicT3I0YXYkcY1lWn1NJaEevibf9n3u71Q8VAVMLdjY0JJRRE3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1142&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后提醒，文档版权为公众号 &lt;strong&gt;大数据流动&lt;/strong&gt; 所有，请勿商用。相关技术问题以及安装包可以联系笔者&lt;strong&gt;独孤风&lt;/strong&gt;加入相关技术交流群讨论获取。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>