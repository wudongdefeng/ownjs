<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9b2da51d8a91a407a62371634c334af5</guid>
<title>优质网站同好者周刊（第 084 期） | 倾城博客</title>
<link>https://toutiao.io/k/txq8olj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/theme/product&quot;&gt;产品&lt;/a&gt;  · &lt;a href=&quot;https://nicelinks.site/tags/%E8%BD%AF%E4%BB%B6&quot;&gt;软件&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E4%BA%A7%E5%93%81&quot;&gt;产品&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%81%A5%E5%BA%B7&quot;&gt;健康&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Software to warm up your computer display at night, to match your indoor lighting.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/justgetflux.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;f.lux: software to make your life better 倾城之链&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语：&lt;/strong&gt; &lt;a href=&quot;https://nicelinks.site/redirect?url=https://justgetflux.com/&quot;&gt;f.lux&lt;/a&gt; ，是一个免费电脑软件，它根据用户定义的&lt;code&gt;经纬度&lt;/code&gt;、邮编或&lt;strong&gt;城市名称所在的位置&lt;/strong&gt;，以及一天当中的&lt;strong&gt;时间&lt;/strong&gt;，来调整电脑显示器的&lt;strong&gt;色温&lt;/strong&gt;。软件被设计用来减少夜晚由使用电脑所产生的睡眠紊乱和失眠现象，并在白天使人保持兴奋的状态。该兼容绝大多数主流操作系统（如：Windows、Mac OS X、Linux 以及 iOS 版本（需越狱）），作者是 Michael 和 Lorna Herf。&lt;/p&gt;&lt;p&gt;f.lux 能够全天候使电脑屏幕与所在环境的光线协调一致。当太阳落山，它会使屏幕看起来就像室内光线一样柔和。而在白天，它又能使屏幕看起来和日光一样明亮。它的工作方式是：调节电脑显示器的颜色，使之适应使用者一天内的生物钟规律，夜晚使用&lt;strong&gt;祥和的暖色调&lt;/strong&gt;，白天则是像日光一样爽快的白色。&lt;/p&gt;&lt;p&gt;f.lux 只调节色温而对屏幕的亮度、饱和度、对比度等对视力损伤较大的硬件指标没有影响。因此它在保护视力方面效果并不突出，其主要的作用是：&lt;strong&gt;通过颜色来影响人的情绪，进而调节人的内分泌，稳定生物节律，改善睡眠质量，提高工作活力&lt;/strong&gt;。虽然说 f.lux 传递的这种理念，有待科学作证；但多年编程工作以来，有 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://justgetflux.com/&quot;&gt;f.lux&lt;/a&gt; 陪伴左右，感觉良好。如果您也需要长时间使用电脑、手机屏幕，强烈推荐尝试。 ── 出自&lt;a href=&quot;https://nicelinks.site/post/6321b95b6d57c401f21d6723&quot;&gt;倾城之链 | f.lux: software to make your life better&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/theme/tools&quot;&gt;利器&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Windows&quot;&gt;Windows&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF&quot;&gt;剪贴板&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E9%AB%98%E6%95%88&quot;&gt;高效&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：Ditto, clipboard, manager&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Ditto is an extension to the standard windows clipboard. It saves each item placed on the clipboard allowing you access to any of those items at a later time. Ditto allows you to save any type of information that can be put on the clipboard, text, images, html, custom formats, .....&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/ditto-cp.sourceforge.io.png?x-oss-process=style/png2jpg&quot; alt=&quot;Ditto clipboard manager 倾城之链&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语：&lt;/strong&gt; &lt;a href=&quot;https://nicelinks.site/redirect?url=https://ditto-cp.sourceforge.io/&quot;&gt;Ditto&lt;/a&gt; 是标准 Windows 系统&lt;strong&gt;剪贴板&lt;/strong&gt;的扩展。它保存放置在剪贴板上的每个项目，以便您以后访问这些项目中的任何一个。Ditto 允许您保存可以放在剪贴板上的任何类型的信息、文本、富文本、图像、html、自定义格式；它具有以下功能特征：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;易于使用的界面；&lt;/li&gt;&lt;li&gt;搜索并粘贴以前的副本条目；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;保持多台计算机的剪贴板同步&lt;/strong&gt;；&lt;/li&gt;&lt;li&gt;数据在通过网络发送时被加密；&lt;/li&gt;&lt;li&gt;从托盘图标或全局热键访问；&lt;/li&gt;&lt;li&gt;通过双击、回车键或拖放选择条目；&lt;/li&gt;&lt;li&gt;粘贴到除标准复制/粘贴条目之外的任何窗口；&lt;/li&gt;&lt;li&gt;在列表中显示复制图像的缩略图；&lt;/li&gt;&lt;li&gt;完整的 Unicode 支持（显示外来字符）；&lt;/li&gt;&lt;li&gt;对语言文件的 UTF-8 支持（创建任何语言的语言文件）；&lt;/li&gt;&lt;li&gt;使用 sqlite 数据库；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;尽管 Windows 不断在升级，系统自带的&lt;strong&gt;剪贴板&lt;/strong&gt;功能却仍然是不尽如人意，它只能保留一条记录，没有剪贴板历史，需要重复粘贴内容时效率非常低。&lt;code&gt;ditto&lt;/code&gt; 是 Windows 一款免费开源的剪贴板增强软件，支持主流系统，支持中文，并且提供免安装绿色版。你只需像往常一些复制东西，然后按下 &lt;code&gt;Ctrl + ``&lt;/code&gt;  (数字 1 前面那个按键)，就能唤出它的界面，里面记录了所有历史复制内容，你可以选择性进行粘贴，非常搞笑，而且能避免丢失数据。除此之外，它还提供了「&lt;strong&gt;剪贴板搜索&lt;/strong&gt;」功能，从而避免了保存内容过多，难以选择的痛点。如果，您使用 Windows 系统，&lt;code&gt;ditto&lt;/code&gt; 可以算是一款工作必备软件。── 出自&lt;a href=&quot;https://nicelinks.site/post/6321b8746d57c401f21d6721&quot;&gt;倾城之链 | Ditto clipboard manager&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/theme/tools&quot;&gt;利器&lt;/a&gt;  · &lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%8D%E5%8A%A1&quot;&gt;服务&lt;/a&gt;&lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;AI&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot;&gt;工具&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：WantWords, 反向, 词典, 语言, 写作, 助手, 查询, 清华大学, 自然语言, 实验室, 双语, 汉语, 英语, English, Chinese, word, corpus, reverse, dictionary, look up, search, find&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;WantWords（原：万词王）是唯一支持中文及中英跨语言查询的反向词典系统，可以通过描述意思来查找词语。WantWords 基于最先进的人工智能和自然语言处理算法实现，由清华大学自然语言处理实验室出品。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/wantwords.net.png?x-oss-process=style/png2jpg&quot; alt=&quot;WantWords 反向词典 倾城之链&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://wantwords.net/&quot;&gt;WantWords 反向词典&lt;/a&gt; ，是一款支持中文及中英跨语言查询的&lt;strong&gt;反向词典系统&lt;/strong&gt;，即可以通过&lt;strong&gt;描述意思&lt;/strong&gt;来查找词语（一般是通过&lt;code&gt;词语&lt;/code&gt;来查询意思）。WantWords 由清华大学自然语言处理实验室出品，基于先进的人工智能（AI）和自然语言处理算法实现。&lt;/p&gt;&lt;p&gt;具体来说，输入“感觉身体被掏空”这句，就可以得出 100 个相关词语，比如：空虚、枵、索索、空空洞洞、阒、洫、悬、空怀、虚、空心、干、豁、失落感等等（从给出的答案来看，似乎并不能及时跟上其时代性语意）。再比如输入“早上睡不醒”，可得到：睡懒觉、打瞌睡、瞌睡、发困、失眠、夜不成寐、熬夜、犯困、困觉、小睡等词语。&lt;/p&gt;&lt;p&gt;WantWords，对于给出的结果，支持以词性（名词、动词、形容词、副词、成语）、字数、韵脚、词行来作筛选，以最大限制支持用户快速找到相匹配的词。于学者或文字工作者而言，如果拿不准合适的措辞，倒是可以基于 WantWords 尝试下。值得一提的是，他们不仅提供网站，而且有小程序版本。── 出自&lt;a href=&quot;https://nicelinks.site/post/6321a1386d57c401f21d6719&quot;&gt;倾城之链 | WantWords 反向词典&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;前端开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Solid is a purely reactive library. It was designed from the ground up with a reactive core. It&#x27;s influenced by reactive principles developed by previous libraries.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.solidjs.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - SolidJS | Simple and performant reactivity for building user interfaces&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.solidjs.com/&quot;&gt;SolidJS&lt;/a&gt; 是用于构建用户界面的&lt;strong&gt;声明式&lt;/strong&gt;、高效且灵活的 JavaScript 库。它没有使用&lt;code&gt;虚拟 DOM&lt;/code&gt;（Virtual dom），而是将其模板编译为真实的 DOM 节点，并使用细粒度的反应更新它们。声明你的状态，并在整个应用程序中使用它，当一个状态发生变化时，只有依赖它的代码会重新运行。它具有以下功能特征：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对真实 DOM 的细粒度更新；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;声明性数据&lt;/strong&gt;：将您的状态建模为具有反应原语的系统；&lt;/li&gt;&lt;li&gt;自动依赖跟踪：访问你的反应状态订阅它；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;小而快&lt;/strong&gt;：缩小 + Gzipped，仅有 7kb ；&lt;/li&gt;&lt;li&gt;简单：学习一些可以重用、组合和构建的强大概念；&lt;/li&gt;&lt;li&gt;提供现代框架功能，如 JSX、流式 SSR、渐进式水合、错误边界和并发渲染；&lt;/li&gt;&lt;li&gt;自然可调试：&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 是一个真正的 div，因此您可以使用浏览器的 devtools 来检查渲染；&lt;/li&gt;&lt;li&gt;Web 组件友好并且可以编写自定义元素；&lt;/li&gt;&lt;li&gt;同构：在客户端和服务器上渲染你的组件；&lt;/li&gt;&lt;li&gt;通用：编写自定义渲染器以在任何地方使用 Solid；&lt;/li&gt;&lt;li&gt;一个不断发展的社区和生态系统，拥有积极的核心团队支持；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 Web 开发领域，已经有了 &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;React&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot;&gt;Vue&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/62a9c2ad90509e23cea772c0&quot;&gt;Svelte&lt;/a&gt; 等流行框架；为何要选择 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.solidjs.com/&quot;&gt;SolidJS&lt;/a&gt; ？官方给出了以下答案：&lt;/p&gt;&lt;h3 id=&quot;高性能&quot;&gt;&lt;a href=&quot;#%E9%AB%98%E6%80%A7%E8%83%BD&quot; aria-label=&quot;高性能 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;高性能&lt;/h3&gt;&lt;p&gt;为提高性能而精心设计，经过 5 年的研究，&lt;code&gt;Solid&lt;/code&gt; 的性能与优化的原生 JavaScript 几乎没有区别。Solid 体积小，完全可摇树（ree-shakable），在服务器上渲染时也很快。无论您是在编写完全客户端呈现（client-rendered）的 SPA， 还是服务器呈现的应用程序，您的用户都能比以往更快地看到它。&lt;/p&gt;&lt;h3 id=&quot;强大的&quot;&gt;&lt;a href=&quot;#%E5%BC%BA%E5%A4%A7%E7%9A%84&quot; aria-label=&quot;强大的 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;强大的&lt;/h3&gt;&lt;p&gt;Solid 功能齐全，具备现代框架所能提供的一切功能。上下文和存储内置了高性能状态管理：您不必使用第三方库来管理全局状态（如果您不想这样做）。借助 Resources，您可以像使用任何其他状态一样，使用从服务器加载的数据，并通过 Suspense 和并发渲染为其构建响应式 UI。当您准备好迁移到服务器时，Solid 拥有完整的 SSR 和无服务器支持，以及流式传输和渐进式水合作用，可以尽快实现交互。&lt;/p&gt;&lt;h3 id=&quot;务实&quot;&gt;&lt;a href=&quot;#%E5%8A%A1%E5%AE%9E&quot; aria-label=&quot;务实 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;务实&lt;/h3&gt;&lt;p&gt;事半功倍：使用简单、可组合的原语，没有隐藏的规则和陷阱。在 Solid 中，组件只是函数——渲染完全取决于你的状态是如何使用的——所以你可以随意组织你的代码，而不必学习新的渲染系统。Solid 鼓励诸如&lt;strong&gt;声明式代码&lt;/strong&gt;和读写隔离之类的模式，这些模式有助于保持您的项目可维护性，但还不够固执地妨碍您。&lt;/p&gt;&lt;h3 id=&quot;富有成效的&quot;&gt;&lt;a href=&quot;#%E5%AF%8C%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84&quot; aria-label=&quot;富有成效的 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;富有成效的&lt;/h3&gt;&lt;p&gt;Solid 建立在 JSX 和 TypeScript 等成熟工具之上，并与 &lt;a href=&quot;https://nicelinks.site/post/6010e1b10c71de1fb957b64e&quot;&gt;Vite&lt;/a&gt; 生态系统集成。Solid 的裸机、最小抽象让您可以直接访问 DOM，从而轻松使用您喜欢的原生 JavaScript 库，如 D3。Solid 生态系统正在快速发展，具有自定义原语、组件库和构建时实用程序，可让您以新的方式编写 Solid 代码。&lt;/p&gt;&lt;p&gt;Solid 站在巨人的肩膀上，尤其是 &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;React&lt;/a&gt; 和 Knockout。如果您之前使用过 React Hooks 进行开发，Solid 应该看起来很自然。事实上，Solid 的模型更自然，没有 Hook 规则，更简单。每个组件都会执行一次，而 Hooks 和绑定会随着它们的依赖关系更新而执行多次。Solid 遵循与 React 相同的理念，具有单向数据流、读/写隔离和不可变接口。然而，它有一个完全不同的实现，它放弃了使用虚拟 DOM。如果您对 Solid 感兴趣，可以前往 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.solidjs.com/guides/getting-started&quot;&gt;Solid 入门指南&lt;/a&gt; ，以了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6329ab4f36feb75b35987e2a&quot;&gt;倾城之链 - SolidJS | Simple and performant reactivity for building user interfaces&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;前端开发&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%A8%8B%E5%BA%8F%E5%BA%93&quot;&gt;&lt;code&gt;程序库&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;2kB JavaScript date utility library&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/day.js.org.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Day.js · 2kB JavaScript date utility library&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://day.js.org/&quot;&gt;Day.js&lt;/a&gt; ，Day.js 是一个极简的 JavaScript 库，它解析、验证、操作和显示现代浏览器的日期和时间；具有很大程度上与 Moment.js 兼容的 API，是 Moment.js 的替代品。如果您使用 Moment.js，那么您已经知道如何使用 Day.js。&lt;strong&gt;为什么推荐使用 Day.js&lt;/strong&gt;？因为它具有以下优点：&lt;/p&gt;&lt;h3 id=&quot;体积小仅-2kb&quot;&gt;&lt;a href=&quot;#%E4%BD%93%E7%A7%AF%E5%B0%8F%E4%BB%85-2kb&quot; aria-label=&quot;体积小仅 2kb permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;体积小，仅 2kB&lt;/h3&gt;&lt;p&gt;下载、解析和执行的 JavaScript 更少，为您的代码留出更多时间。&lt;/p&gt;&lt;h3 id=&quot;非常简单&quot;&gt;&lt;a href=&quot;#%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95&quot; aria-label=&quot;非常简单 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;非常简单&lt;/h3&gt;&lt;p&gt;Day.js 是一个极简的 JavaScript 库，它解析、验证、操作和显示现代浏览器的日期和时间，具有很大程度上与 Moment.js 兼容的 API。&lt;/p&gt;&lt;h3 id=&quot;不可变&quot;&gt;&lt;a href=&quot;#%E4%B8%8D%E5%8F%AF%E5%8F%98&quot; aria-label=&quot;不可变 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;不可变&lt;/h3&gt;&lt;p&gt;所有更改 Day.js 对象的 API 操作都将返回一个新实例。这有助于防止错误并避免长时间的调试会话。&lt;/p&gt;&lt;h3 id=&quot;支持多语言i18n&quot;&gt;&lt;a href=&quot;#%E6%94%AF%E6%8C%81%E5%A4%9A%E8%AF%AD%E8%A8%80i18n&quot; aria-label=&quot;支持多语言i18n permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;支持多语言：I18n&lt;/h3&gt;&lt;p&gt;Day.js 对国际化有很大的支持。但是除非您使用它们，否则它们都不会包含在您的构建中。&lt;/p&gt;&lt;p&gt;Moment.js 是知名 JavaScript 日期处理类库，但它那巨大包体积，令负责任的前端开发者望而却步；相比之下，强烈推荐的 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://day.js.org/&quot;&gt;Day.js&lt;/a&gt; ——不仅具有以上优点，而且👫支持所有浏览器，即便是在&lt;code&gt;小程序&lt;/code&gt;、&lt;a href=&quot;https://nicelinks.site/post/5b5fb5bc615bf842b609105f&quot;&gt;快应用&lt;/a&gt;开发中，同样适用。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/632857507d17c63098aa7082&quot;&gt;倾城之链 - Day.js · 2kB JavaScript date utility library&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;情之同处即为性，舍情则性不可见，欲之公处即为理，舍欲则理不可明。故君子不能灭情，惟事平情而已；不能绝欲，惟期寡欲而已。──明 · 洪应明《菜根谭》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e47fe62d223cbbc75533af3019c56bb0</guid>
<title>全面认识数据指标体系</title>
<link>https://toutiao.io/k/sffmao8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创不易，求分享、求一键三连&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hi，各位亲爱的小伙伴，小钗公号遵循日复盘-&amp;gt;周复盘-&amp;gt;月复盘-&amp;gt;季度复盘-&amp;gt;年总结策略，所以某类型文章到后期才会成体系。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4537037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCaUEXk56vicqGZ4fIn16gPtkLI40CGpv0nbgplYsKoMKU1XcybiafYUoPdVwBJicXBotG4uLMyreLFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天这篇文章属于&lt;strong&gt;月复盘&lt;/strong&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是数据指标体系？&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看了下百度百科，竟然没有&lt;strong&gt;数据指标&lt;/strong&gt;这个词条，看来这个词大家平时还用的不多啊。那只有间接偷懒一下，分别查下&lt;strong&gt;指标&lt;/strong&gt;和&lt;strong&gt;数据&lt;/strong&gt;这两个词条的含义，在组合起来看看。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;数据：数据是指对客观事件进行记录并可以鉴别的符号，是对客观事物的性质、状态以及相互关系等进行记载的物理符号或这些物理符号的组合。它是可识别的、抽象的符号。&lt;/p&gt;&lt;p&gt;指标：衡量目标的参数，预期中打算达到的指数、规格、标准，一般用数据表示。&lt;/p&gt;&lt;p&gt;——来源《百度百科》&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数据&lt;/strong&gt;是对事物结果的归纳，&lt;strong&gt;指标&lt;/strong&gt;是衡量目标的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;组合一下，&lt;strong&gt;数据指标&lt;/strong&gt;就是可以对结果进行归纳的一种目标衡量方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说人话就是可以将某个事物结果量化，形成数值化的度量方式，用来衡量目标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标就是一种定量思维方式的体现，他至少有两个作用：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1 想不出来数据指标，说明是对这块事（团队要做的事）没有一个清晰的认知&lt;/p&gt;&lt;p&gt;2 想得清楚数据指标，却做不出来，说明对整个团队缺少掌控，不能推动落地&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不能建立数据指标，根本没法做&lt;strong&gt;数据驱动&lt;/strong&gt;，所以数据指标其实是想真实反应我们的团队是什么状态，我们做的事是什么状态的一个&lt;strong&gt;指向标&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;究其原因，组织执行力、产品健康度需要某种程度的量化，数据指标的作用从更宏观的角度看是这样的：&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5230414746543779&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCaUEXk56vicqGZ4fIn16gPtZ34iblldicmSvEMIBA62L7zCXN1OBS02wibZk9dB7tNGdY4P0xI1XtXgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;868&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中牵引指标就对应我们的业务数据指标，牵引指标不健康的时候可以预警是不是团队方向跟目标走偏了，leader要考虑调整目标还是修正团队方向。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合数据分析来说，数据指标就是将复杂、抽象的业务拆分组合，并找到可以直观明确的衡量这些组合的度量方式，并可用数字来量化。同时他们是相互独立的，可以穷尽的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但要完整的衡量一个事务或者业务，一个数据指标往往是不够的。如同描述一个人，仅仅描述身高，体重等等单一维度不能反应一个人的全貌一样，单一的某个数据指标是不能反应整体情况的，这时候需要建立指标体系——一系列有逻辑关系的数据指标，通过多维度的数据指标来评估业务状况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一般互联网行业或者产品来说，数据指标体系是用来系统的揭示业务水平状况和用户行为的主要方式。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为什么要建立指标体系？&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标本质是用数据说话，对业务进行精准的号脉。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 统一衡量业务好坏的标准&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传统企业或者小企业可能不会有数据指标体系的概念，也不会下大工夫来建设数据指标体系，但却并不能完全脱离，或多或少都会涉及数据指标，只是不够全面、不能统一、不成体系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般衡量业务好坏主要看财务指标，例如收入、毛利率、净利率等。对于一些创新类、探索类的业务可能会关注用户量、GMV、转化率等。不管业务处在什么阶段，我们都需要一些数据指标能够对其进行衡量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有指标对业务进行系统衡量，我们就无法把控业务发展，无法对业务质量进行衡量，无法看清楚业务发展是否到达阶段性目标。而且某些复杂的业务，单一数据指标衡量很可能片面化，需要搭建系统的指标体系，才能全面衡量业务发展情况，促进业务有序增长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当组织有全面、统一数据指标体系时，可以统一度量衡，减少转化、翻译（口径解释）等工作，降低组织内的沟通成本。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 指导产品的研发和运营工作&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;产品的研发和运营其实很依赖数据支持，数据指标不仅仅能帮助大家看到业务发展的结果，还能帮助大家看清产品研发和运营的过程，能够及时调整策略，更万无一失的达到目标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于互联网公司，产品的研发和运营等部门是促进公司发展的核心组织，通过完善的数据指标体系和数据分析，来有效聚焦工作目标、指导成员工作。同时对指标体系内的各层级指标间建立起清晰的关系，还能从指标体系出发，明确工作重点。最终做到以数据驱动，找到不足，提升业绩。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 帮助建设数据分析体系&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标体系是数据分析体系的第一步，数据分析本质就是根据数据指标的变化寻找业务问题、预测业务结果，数据分析工作在数据指标体系的指引下才有意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完善的数据指标体系业务可以让数据的采集更有目的性，避免分析时的指标数据遗漏或缺失。虽然有些数据分析软件可以对数据缺失值进行处理，但如果连指标都没有，这种缺失肯定是软件无法处理的。尤其是关键指标的缺失，将会造成分析结果的可信度下降。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据分析体系的最终目的是帮助组织在内部建设一套可运行的信息反馈机制，能够持续的发现问题、预警风险，帮助决策者能够做到“谋定而后动，知止而有得。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，我们衡量一个公众号前期的运营情况，可以用一个核心指标——昨日新增用户数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果昨天新增用户数是1000，这个猛然一看感觉这个公众号运营的还不错。但是再加个前日新增用户数这个指标呢，如果前日新增用数是2000呢，那么新增用户数直接是下降了50%了。我们加了一个比较的指标，让我们对这个业务的发展认识就完全不一样了。如果我们加入更多的指标，比如阅读量、打开率等等，还会有更多的认识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面我们不断增加指标的过程，也就是在梳理业务指标体系的过程，一个数据指标是没有办法衡量业务的发展，但是一个指标体系就能把问题说的清晰明白。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;一个好的指标体系&lt;/strong&gt;对于组织而言，可以是一把统一沟通语言的&lt;strong&gt;尺子&lt;/strong&gt;，可以是一台统一方向的&lt;strong&gt;司南&lt;/strong&gt;，可以是一个持续发现问题、预警风险的&lt;strong&gt;智库&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么阶段建设？&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标体系的建设是和业务的发展相辅相成的，当数据指标体系比较完善时，我们的业务应该也是比较成熟了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果业务才刚刚开始，我们就要建成完善的数据指标体系是很难的，而且是不切实际的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就算勉强有，这样的数据指标体系也是无根止水，因为业务是不断变化的，运营方式也会不断调整，大部分的数据指标都需要从业务结果和业务运营过程中去提炼总结。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有当业务比较成熟时，运营方式比较稳定时，我们的数据指标体系才能初见成效，才能有效的运转起来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但并不是我们在业务不成熟时，就不应该投入，除了一些可能贯穿这个业务阶段的数据指标外，我们在业务的各个不同阶段应该去发掘提炼每个阶段应该关注的数据指标，不断的迭代，随着业务变化而变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如收入、利润率等财务类的指标应该是业务整个发展阶段都应该关注的，除此之外，在业务发展前期我们可能更会关注新增用户量、转化率、拉新成本等指标，而在业务发展后期，我们可能更加关注活跃率、留存率、运营效率等指标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标体系不是&lt;strong&gt;一日建成的罗马&lt;/strong&gt;，需要持续不断的投入，在业务发展的不同阶段有不同的小目标，当业务稳定时，这些小目标就汇聚成了最终的大目标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们应该在业务一开始的阶段就要投入，不仅是为业务阶段性的目标提供帮助，也是为最终的数据指标体系添砖加瓦。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;资源需求&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标体系看似是个很专业的事情，需要很专业的人来干，其实不完全对。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标体系的建设确实需要一些专业的数据人员，需要依赖一些工具，但这并不是最重要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就像上面说的，数据指标的目的是为了衡量业务好坏、帮助业务发展，因此数据指标建设最重要的是要对业务足够熟悉，能够深入业务，对业务的认识和了解甚至要超过业务负责人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样看来似乎是&lt;strong&gt;老板或者业务负责人&lt;/strong&gt;应该是数据指标建设的第一负责人，确实如此...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际的操作中，数据指标体系一般也都是在老板和业务负责人的要求下去建设的，也只有拿到老板或者业务负责人的授权才好推动下去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为数据指标体系的建设涉及产品研发、运营、销售，甚至财务、人力等方方面面，需要很强的协调能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此数据指标体系建设的负责人最好是资深的数据分析人员、产品经理或者运营人员，最好是一直跟随业务发展的同学，这样能极大的减少熟悉业务的成本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外最好与老板或者业务负责人有比较好的关系，有稳定的沟通汇报渠道，因为他们才是数据指标体系的最大受益人。这样既能随时沟通，保证信息和认知一致，同时也能给自己提升影响力，更方便的协调各方资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他人力投入还需要一些数据产品经理（也可以是数据分析师）和数据开发同学，他们主要负责执行工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据产品经理或者数据分析师需要定义数据指标的概念、口径等，并整理成册，方便各方查阅，统一认知，在后期还要进行数据指标可视化呈现和分析。数据开发同学需要根据数据指标口径清洗数据，建立好数据模型，方便数据分析同学取用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然数据的清洗可能还需要研发、IT、运营、销售、财务、人力的各方配合，因为指标需要的数据不仅来源于业务系统，还可能来源于销售系统、财务系统和人力系统等各个地方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了人力投入以外，可能还需要一些数据开发工具和数据分析工具。这些工具可以自建也可以采购，自建的话投入更多的人力即可，但一般中小企业或团队采购的方式可能更划算。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的说来，要建设一个完善的可投入实际运用的数据指标体系，&lt;strong&gt;投入应该是很大的&lt;/strong&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;组织架构适配&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上所说，数据指标体系只是整个数据分析体系建设的第一步，数据指标体系之后还有很多数据分析的工作，这才是利用数据指标体系产生更有价值的阶段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们的组织架构并不仅仅只为数据指标体系的建设去设立，可能需要为整个公司或团队对数据的收集、运用去设立。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据之前数据中台的建设经验，这个团队需要具有跨业务部门共享公共数据的能力，能够承担数据中台建设职责，这里面就包含了建设数据指标体系的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了能够公正公平衡量各个业务好坏，它必须是一个且独立于业务团队的部门，这个团队的负责人应该直接向老板或相关高管汇报。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了避免与业务脱节，对这个团队的组织定位是懂业务，能够深入业务，扎根业务。在个团队内部，可以由三个小团队构成：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据分析团队，这是数据指标建设的核心团队，负责数据指标体系的规划，指标口径的定义和维护，分析报告产出等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据平台团队，负责构建支撑数据指标体系的平台，包括指标系统、元数据中心、数据地图等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据开发团队，负责清洗数据和数据建模，维护公共数据层，呈现各个数据指标结果，以及满足各个数据指标定制需求。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;适合的团队构成和组织定位是建设数据指标体系的必备工作，最好是独立的部门，同时要避免与业务脱节，能够深入业务，要与业务目标绑定。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;路径是什么？&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标体系建设的第一个难题就是指标管理的混乱，例如下面这些：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;相同指标名称，口径不一；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;相同口径，指标名称不一样；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;指标口径描述不清晰；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;指标命名难于理解；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;指标定义和计算逻辑不清晰；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这些问题在没有专门的团队来负责数据指标体系这事之前也许可以原谅，但有了专门团队之后，就不应该出现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以数据指标体系建设的第一步就是建立好指标管理规范，根据业务需要迭代和更新指标内容，最好是建立一个指标管理系统，能够更加方便的更新和维护我们的指标内容。指标管理也有些技巧可循，例如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可面向主题域管理，拆分原子指标和派生指标，制定指标命名规范，将指标进行分级管理等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于指标分级管理，我们一般将指标分为四级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一级是北极星指标，他是公司最重要且唯一的指标，当其他指标与它冲突时，以它为准；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二级是公司级指标，是公司关注的重要指标，可以有多个；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三级是部门或者产品线指标，一般是部门或者产品线关注的指标；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第四级一般是业务过程指标，反应的是业务运营过程需要关注的指标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓数据指标体系，肯定是能够用数据衡量的指标才有意义，所以建设数据指标体系的第二步就是需要为给每个数据指标建立数据模型，提供数据支撑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建立数据模型的关键是数据的收集和清洗，这十分依赖每个公司的信息化建设完善度，对于一般的运营数据还好，数仓团队就可以处理好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果涉及销售系统、财务系统、人力系统的数据就会比较麻烦，特别是采购的各个不同的厂商的系统，需要大量的成本来打通各个系统，否则需要大人力来提取和拆分各项数据，这个工作量就极大，而且容易出错、效率低下，最头痛的还是相关的人力协调。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不考虑数据的收集和清洗的话，数据模型建设其实是考验的我们数仓设计能力和模型开发能力，当然现在市面也有一些现成的工具和平台，不需要很强的技术能力就可以搞定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是也有一些点需要我们注意，例如尽量避免分散、烟囱式的数仓模型，最好建在一个可复用、可共享的平台上，还可以用完善度、复用度和规范度来评估模型设计的好坏，这些都能够提升我们开发的效率和质量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后一步就是指标数据的呈现和数据分析，只有将有数据指标的数据反馈出来，数据指标才有意义。我们一般会为数据指标体系建立一套看板系统或报表系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在更高级的使用阶段，可以实现自助取数的功能，让业务人员能够自主获取自己需要的指标相关的数据，打破报表或者看板这种固化的分析思路，不用事事依赖分析师同学。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了能够进行更加全面的进行数据分析，还需要实现数据的全维度钻取，因为分析师同学一般也只能依靠经验去判断一个指标有哪些可分析维度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们的指标系统能够提供一个指标的所有的可分析维度，并且能够根据需要呈现指标在各个维度下的取值，甚至能够不同维度组合进行层层下钻，这样就更容易找出指标波动的原因，这就是全维度钻取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就能够实现数据驱动下的精益运营，能够实现从目标量化、持续跟踪、异常诊断到决策反馈的数据驱动业务闭环。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据指标体系来源于&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;要解决业务问题，得先搞清楚业务存在哪些问题&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以数据指标体系到底能解决什么业务问题才是最重要的，要能够基于数据指标变化的表象，找到影响业务的原因，并帮助解决这个问题，那老板或业务方才会认可数据指标体系的价值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，数据指标体系的价值最终也是要回到业务价值上来，数据指标体系并不能直接产生业务价值，需要深入业务当中，提炼出有价值的指标，建立数据评价体系，来反馈业务。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;但一般来说数分对业务理解不会比业务负责人更多，容易沦为出报表的团队，如何深入业务，如何1+1&amp;gt;2需要更多的思考，至少我现在没有答案...&lt;/p&gt;&lt;p&gt;否则一旦发生裁员，这种说不清楚自己价值的团队会很危险&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的分享就到这，喜欢的同学可以四连支持：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCaUEXk56vicqGZ4fIn16gPtIMSp7U9yylDNczGiaOHz3st13FtsmMA2DwCAQMlyib1wHYeg4pTZunSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要更多交流可以加微信群：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5549076773566569&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCaUEXk56vicqGZ4fIn16gPte70NmHCiaRdDjVmkKiaz73vFvic7ept6Fkk5I3noAOrJBicbpOEbjia5iazA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3c922d4b9ff77754f0f2536a1bbbac69</guid>
<title>何时用go context</title>
<link>https://toutiao.io/k/14caikl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;it iu iv iw ix&quot;&gt;&lt;p class=&quot;&quot;&gt;&lt;h1 id=&quot;fe18&quot; class=&quot;pw-post-title iy iz ja bm jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw fu&quot;&gt;How and When To Use Context in Go&lt;/h1&gt;&lt;/p&gt;&lt;p class=&quot;&quot;&gt;&lt;h2 id=&quot;d3bf&quot; class=&quot;pw-subtitle-paragraph jx iz ja bm b jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko cn&quot;&gt;With a focus on concurrency&lt;/h2&gt;&lt;/p&gt;&lt;figure class=&quot;kq kr ks kt gr ku gf gg paragraph-image&quot;&gt;&lt;figcaption class=&quot;lb bl gh gf gg lc ld bm b bn bo cn&quot;&gt;image by author&lt;/figcaption&gt;&lt;/figure&gt;&lt;p id=&quot;2225&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;When developing code for a concurrent or client/server environment, we can often benefit from having context — information about the system that isn’t necessarily required to perform business logic. Go’s standard library provides an excellent &lt;a class=&quot;au ma&quot; href=&quot;https://pkg.go.dev/context&quot; rel=&quot;noopener ugc nofollow&quot; target=&quot;_blank&quot;&gt;context package&lt;/a&gt; that includes a number of utilities that can pass this information to functions receiving them. These include the ability to:&lt;/p&gt;&lt;ul class=&quot;&quot;&gt;&lt;li id=&quot;b648&quot; class=&quot;mb mc ja lg b lh li lk ll ln md lr me lv mf lz mg mh mi mj fu&quot;&gt;know that the operation has been cancelled&lt;/li&gt;&lt;li id=&quot;f0b0&quot; class=&quot;mb mc ja lg b lh mk lk ml ln mm lr mn lv mo lz mg mh mi mj fu&quot;&gt;cancel if an operation isn’t completed by a certain time&lt;/li&gt;&lt;li id=&quot;a3cf&quot; class=&quot;mb mc ja lg b lh mk lk ml ln mm lr mn lv mo lz mg mh mi mj fu&quot;&gt;timeout if the operation runs too long&lt;/li&gt;&lt;li id=&quot;b330&quot; class=&quot;mb mc ja lg b lh mk lk ml ln mm lr mn lv mo lz mg mh mi mj fu&quot;&gt;pass generic data in the form of key/value storage&lt;/li&gt;&lt;/ul&gt;&lt;p id=&quot;d3f5&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;We’ll dig into each one and their common use cases below.&lt;/p&gt;&lt;h1 id=&quot;bc2d&quot; class=&quot;mp mq ja bm mr ms mt mu mv mw mx my mz kg na kh nb kj nc kk nd km ne kn nf ng fu&quot;&gt;Empty Context&lt;/h1&gt;&lt;p id=&quot;a17f&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;Contexts allow applications to gather additional information about their environments, which they can pass to functions they call. Sometimes a context needs to be created from scratch, or the application developer knows it will be needed but does not yet know where that context will come from or how to generate it.&lt;/p&gt;&lt;h2 id=&quot;5048&quot; class=&quot;nm mq ja bm mr nn no np mv nq nr ns mz ln nt nu nb lr nv nw nd lv nx ny nf nz fu&quot;&gt;Background context&lt;/h2&gt;&lt;p id=&quot;6d0d&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;In the first of these cases, an empty context can be created with:&lt;/p&gt;&lt;p id=&quot;bf0c&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;code class=&quot;fj oa ob oc od b&quot;&gt;ctx := context.Background()&lt;/code&gt;&lt;/p&gt;&lt;p id=&quot;d540&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;This will generate an empty context that can be passed around and extended with cancel functions, timeouts/deadlines, or values (see the next sections). This context is never cancelled and has no deadline or associated values. Typically this is used for the top-level context or tests.&lt;/p&gt;&lt;h2 id=&quot;cf52&quot; class=&quot;nm mq ja bm mr nn no np mv nq nr ns mz ln nt nu nb lr nv nw nd lv nx ny nf nz fu&quot;&gt;TODO Context&lt;/h2&gt;&lt;p id=&quot;3fdf&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;Similarly, we can derive a TODO context with the following:&lt;/p&gt;&lt;p id=&quot;1cee&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;code class=&quot;fj oa ob oc od b&quot;&gt;ctx := context.TODO()&lt;/code&gt;&lt;/p&gt;&lt;p id=&quot;063e&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;This returns an empty context that is never cancelled and has no deadline or associated values. This context is used when it’s unclear which context to use, or the function expects a context to be passed in that is not yet available. It is essentially providing a means to compile and pass information around but marking that context as incomplete (similar to a &lt;code class=&quot;fj oa ob oc od b&quot;&gt;// TODO&lt;/code&gt; comment).&lt;/p&gt;&lt;p id=&quot;da66&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;You can see how both can be generated and used in a (somewhat useless) example below:&lt;/p&gt;&lt;figure class=&quot;kq kr ks kt gr ku&quot;/&gt;&lt;h1 id=&quot;5bff&quot; class=&quot;mp mq ja bm mr ms mt mu mv mw mx my mz kg na kh nb kj nc kk nd km ne kn nf ng fu&quot;&gt;Cancelable Context&lt;/h1&gt;&lt;p id=&quot;0256&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;Cancelation is the most straightforward way of ending a computation path that relies on a context — it allows the calling code to signal to anything downstream that the computation is no longer needed. It is time to clean up resources and exit. This can be useful when processing long-running requests (e.g., stop processing if a client disconnects from a server), and it is a common way of cleanly shutting down an application — when the app receives a stop signal (such as a &lt;code class=&quot;fj oa ob oc od b&quot;&gt;SIGTERM&lt;/code&gt;) it can cancel the top-level context, and anything derived from that context will know to clean up and cease activities.&lt;/p&gt;&lt;p id=&quot;35b8&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;We generate contexts with cancel as follows:&lt;/p&gt;&lt;p id=&quot;3c15&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;code class=&quot;fj oa ob oc od b&quot;&gt;ctx, cancelFunc := WithCancel(parent Context)&lt;/code&gt;&lt;/p&gt;&lt;p id=&quot;d108&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;This returns a copy of &lt;code class=&quot;fj oa ob oc od b&quot;&gt;parent&lt;/code&gt; with a new &lt;code class=&quot;fj oa ob oc od b&quot;&gt;Done&lt;/code&gt; channel, along with a cancellation function. When &lt;code class=&quot;fj oa ob oc od b&quot;&gt;cancelFunc&lt;/code&gt; is called, the &lt;code class=&quot;fj oa ob oc od b&quot;&gt;Done&lt;/code&gt; channel on &lt;code class=&quot;fj oa ob oc od b&quot;&gt;ctx&lt;/code&gt; is closed, signaling anything downstream to clean up and cease all activities. &lt;code class=&quot;fj oa ob oc od b&quot;&gt;Done&lt;/code&gt; is also closed if &lt;code class=&quot;fj oa ob oc od b&quot;&gt;parent&lt;/code&gt; is cancellable and has been cancelled.&lt;/p&gt;&lt;p id=&quot;8f25&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;In the following example, we generate a cancellable context and check if it’s been cancelled by checking the done channel via &lt;code class=&quot;fj oa ob oc od b&quot;&gt;Done()&lt;/code&gt;:&lt;/p&gt;&lt;figure class=&quot;kq kr ks kt gr ku&quot;/&gt;&lt;p id=&quot;bb87&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;When we run the above code, we can see the output as:&lt;/p&gt;&lt;pre class=&quot;kq kr ks kt gr og bs oh&quot;&gt;&lt;span id=&quot;a748&quot; class=&quot;fu nm mq ja od b dm oi oj l ok&quot;&gt;background long running task launched&lt;br/&gt;background long running task still going&lt;br/&gt;going to cancel background task&lt;br/&gt;long running task bailed because context cancelled&lt;br/&gt;some time has elapsed after cancelling&lt;/span&gt;&lt;span id=&quot;7d4b&quot; class=&quot;fu nm mq ja od b dm ol om on oo op oj l ok&quot;&gt;Program exited.&lt;/span&gt;&lt;/pre&gt;&lt;p id=&quot;54a1&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;If you’d like to experiment with it yourself, you can copy/paste this example (or anything that follows it) into &lt;a class=&quot;au ma&quot; href=&quot;https://go.dev/play/&quot; rel=&quot;noopener ugc nofollow&quot; target=&quot;_blank&quot;&gt;Go playground&lt;/a&gt;.&lt;/p&gt;&lt;h1 id=&quot;bd01&quot; class=&quot;mp mq ja bm mr ms mt mu mv mw mx my mz kg na kh nb kj nc kk nd km ne kn nf ng fu&quot;&gt;Context With Deadline&lt;/h1&gt;&lt;p id=&quot;32b2&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;Contexts with deadlines are often used when making requests to an external resource that the caller may not know or control the state of, such as a database or API. They say, “I want something to happen at or by a certain time, or else bail.” The Context’s &lt;code class=&quot;fj oa ob oc od b&quot;&gt;Done&lt;/code&gt; channel will close when the deadline expires, signifying to any downstream code that they should stop doing what they are doing.&lt;/p&gt;&lt;p id=&quot;e2b6&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;These take the form of&lt;/p&gt;&lt;p id=&quot;c5d4&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;code class=&quot;fj oa ob oc od b&quot;&gt;ctx, cancelFunc := WithDeadline(parent Context, deadline time.Time)&lt;/code&gt;&lt;/p&gt;&lt;p id=&quot;32d3&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;where &lt;code class=&quot;fj oa ob oc od b&quot;&gt;parent&lt;/code&gt; is the context this is based on, and &lt;code class=&quot;fj oa ob oc od b&quot;&gt;deadline&lt;/code&gt; is the time you want the thing to happen. Note that if &lt;code class=&quot;fj oa ob oc od b&quot;&gt;parent&lt;/code&gt; has a deadline that is earlier than &lt;code class=&quot;fj oa ob oc od b&quot;&gt;deadline&lt;/code&gt;. This context will have the same deadline as &lt;code class=&quot;fj oa ob oc od b&quot;&gt;parent&lt;/code&gt;.&lt;/p&gt;&lt;p id=&quot;5e21&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;The following example shows how it might be used to end a long-running task:&lt;/p&gt;&lt;figure class=&quot;kq kr ks kt gr ku&quot;/&gt;&lt;p id=&quot;06f0&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;Here, we wrote a function that takes a context and a value for how long to wait. It will return in either case, but print whether it exited due to the context deadline passing or the wait time elapsed. We can see that we will return because the context expired in the first case, and in the second case, we will return well before the context expires. We get the following output:&lt;/p&gt;&lt;pre class=&quot;kq kr ks kt gr og bs oh&quot;&gt;&lt;span id=&quot;1145&quot; class=&quot;fu nm mq ja od b dm oi oj l ok&quot;&gt;bailed because context deadline passed&lt;br/&gt;completed before context deadline passed&lt;/span&gt;&lt;span id=&quot;a4d4&quot; class=&quot;fu nm mq ja od b dm ol om on oo op oj l ok&quot;&gt;Program exited.&lt;/span&gt;&lt;/pre&gt;&lt;p id=&quot;88d0&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;code class=&quot;fj oa ob oc od b&quot;&gt;longRunningTask()&lt;/code&gt; also demonstrates a simple case of how code that accepts a context can handle a cancelled context using a &lt;code class=&quot;fj oa ob oc od b&quot;&gt;select&lt;/code&gt; on various channels.&lt;/p&gt;&lt;h1 id=&quot;647c&quot; class=&quot;mp mq ja bm mr ms mt mu mv mw mx my mz kg na kh nb kj nc kk nd km ne kn nf ng fu&quot;&gt;Context With Timeout&lt;/h1&gt;&lt;p id=&quot;521a&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;Contexts with timeouts are a convenient feature similar to contexts with deadlines. They are called like this:&lt;/p&gt;&lt;p id=&quot;ce85&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;code class=&quot;fj oa ob oc od b&quot;&gt;ctx, cancelFunc := WithTimeout(parent Context, dur time.Duration)&lt;/code&gt;&lt;/p&gt;&lt;p id=&quot;0027&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;Under the hood, they are calling:&lt;/p&gt;&lt;p id=&quot;adff&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;code class=&quot;fj oa ob oc od b&quot;&gt;WithDeadline(parent, time.Now().Add(timeout))&lt;/code&gt;&lt;/p&gt;&lt;p id=&quot;97de&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;But hey, we’ll take any simplification we can get!&lt;/p&gt;&lt;p id=&quot;8624&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;Essentially, when we pass a context with a timeout, we say we are willing to wait until the &lt;code class=&quot;fj oa ob oc od b&quot;&gt;timeout&lt;/code&gt; amount of time has passed, and if the call is not complete, it should wrap up and bail out. This reduces the chance that our code might get infinitely (for some value of “infinite”) hung up waiting for some call to complete rather than error out and keep doing its job.&lt;/p&gt;&lt;p id=&quot;051b&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;The following example shows how this might be used to end a long-running task:&lt;/p&gt;&lt;figure class=&quot;kq kr ks kt gr ku&quot;/&gt;&lt;p id=&quot;e988&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;We get the following output:&lt;/p&gt;&lt;pre class=&quot;kq kr ks kt gr og bs oh&quot;&gt;&lt;span id=&quot;c26a&quot; class=&quot;fu nm mq ja od b dm oi oj l ok&quot;&gt;bailed because context timed out&lt;br/&gt;completed before context timed out&lt;/span&gt;&lt;span id=&quot;6c80&quot; class=&quot;fu nm mq ja od b dm ol om on oo op oj l ok&quot;&gt;Program exited.&lt;/span&gt;&lt;/pre&gt;&lt;p id=&quot;d5ca&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;We can see how similar this is to the above deadline example. When picking between a &lt;code class=&quot;fj oa ob oc od b&quot;&gt;WithDeadline&lt;/code&gt; and a &lt;code class=&quot;fj oa ob oc od b&quot;&gt;WithTimeout&lt;/code&gt;, simply choose the one that fits whatever the calling code has better. If you want it to happen by a certain time, choose deadline! If you want it to happen within a certain duration, choose timeout!&lt;/p&gt;&lt;h1 id=&quot;f845&quot; class=&quot;mp mq ja bm mr ms mt mu mv mw mx my mz kg na kh nb kj nc kk nd km ne kn nf ng fu&quot;&gt;Context With Value(s)&lt;/h1&gt;&lt;p id=&quot;f7bc&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;Contexts also enable request-scoped values to be passed around. To attach a key/value pair to a context, call:&lt;/p&gt;&lt;p id=&quot;d76c&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;code class=&quot;fj oa ob oc od b&quot;&gt;ctx := WithValue(parent Context, key, val any)&lt;/code&gt;&lt;/p&gt;&lt;p id=&quot;adbf&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;This returns a copy of &lt;code class=&quot;fj oa ob oc od b&quot;&gt;parent&lt;/code&gt; where the value associated with &lt;code class=&quot;fj oa ob oc od b&quot;&gt;key&lt;/code&gt; is &lt;code class=&quot;fj oa ob oc od b&quot;&gt;val&lt;/code&gt;.&lt;/p&gt;&lt;p id=&quot;e11d&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;The provided &lt;code class=&quot;fj oa ob oc od b&quot;&gt;key&lt;/code&gt; must be comparable and should not be a built-in type (such as a string or int) to avoid collisions between different packages using the context. If multiple packages use the same &lt;code class=&quot;fj oa ob oc od b&quot;&gt;key&lt;/code&gt; type with the same value, they can collide when trying to set/get &lt;code class=&quot;fj oa ob oc od b&quot;&gt;val&lt;/code&gt;. Instead, &lt;code class=&quot;fj oa ob oc od b&quot;&gt;key&lt;/code&gt; should be defined as its own properly-scoped type for setting and getting &lt;code class=&quot;fj oa ob oc od b&quot;&gt;val&lt;/code&gt;. That way, even if multiple scopes define a key with the same underlying value, they will not collide within the context. The following example illustrates this:&lt;/p&gt;&lt;figure class=&quot;kq kr ks kt gr ku&quot;/&gt;&lt;p id=&quot;7f97&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;Here we define a key type (&lt;code class=&quot;fj oa ob oc od b&quot;&gt;keyType1&lt;/code&gt;) that is scoped to &lt;code class=&quot;fj oa ob oc od b&quot;&gt;main()&lt;/code&gt;. It is constructed with the value &lt;code class=&quot;fj oa ob oc od b&quot;&gt;&quot;foo&quot;&lt;/code&gt;. We now assign the key/value pair &lt;code class=&quot;fj oa ob oc od b&quot;&gt;&quot;foo&quot;=&quot;bar&quot;&lt;/code&gt; within a context. If we try to retrieve a key of type &lt;code class=&quot;fj oa ob oc od b&quot;&gt;keyType1&lt;/code&gt; (with value &lt;code class=&quot;fj oa ob oc od b&quot;&gt;&quot;foo&quot;&lt;/code&gt;) we get back &lt;code class=&quot;fj oa ob oc od b&quot;&gt;&quot;bar&quot;&lt;/code&gt;, as expected.&lt;/p&gt;&lt;p id=&quot;520b&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;Now, we can define a new function with its own key type. If we assign the same key value to that new key type (&lt;code class=&quot;fj oa ob oc od b&quot;&gt;&quot;foo&quot;&lt;/code&gt;), we can try to get the value from the context:&lt;/p&gt;&lt;pre class=&quot;kq kr ks kt gr og bs oh&quot;&gt;&lt;span id=&quot;c43f&quot; class=&quot;fu nm mq ja od b dm oi oj l ok&quot;&gt;found a value for key type 1: bar&lt;br/&gt;no value for key type 2&lt;/span&gt;&lt;span id=&quot;ebc5&quot; class=&quot;fu nm mq ja od b dm ol om on oo op oj l ok&quot;&gt;Program exited.&lt;/span&gt;&lt;/pre&gt;&lt;p id=&quot;79f5&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;As we can see, since we don’t have access to the proper key &lt;em class=&quot;oq&quot;&gt;type&lt;/em&gt;, we cannot access the value, even if the underlying value for the key is the same. Note that we could have also assigned a new value within &lt;code class=&quot;fj oa ob oc od b&quot;&gt;tryAnotherKeyType()&lt;/code&gt; , and it would not be accessible in &lt;code class=&quot;fj oa ob oc od b&quot;&gt;main() &lt;/code&gt;due to the same key type mismatch we’ve discussed thus far. This is how we avoid key/value collisions between packages (or any unit of scope).&lt;/p&gt;&lt;p id=&quot;a093&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;This tool should be used for passing request-scoped data between processes and APIs, not merely for optional function parameters, as this can obfuscate the code. Also, note that the values in the context must be threadsafe — that is, they might be used concurrently by multiple goroutines.&lt;/p&gt;&lt;h1 id=&quot;1f7d&quot; class=&quot;mp mq ja bm mr ms mt mu mv mw mx my mz kg na kh nb kj nc kk nd km ne kn nf ng fu&quot;&gt;Derived Contexts&lt;/h1&gt;&lt;p id=&quot;6aff&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;We’ve alluded to it previously in this article, but derived contexts can be very useful. The summary is that child contexts are governed by their parents — they cannot have a longer timeout/deadline than their parents, and they cannot cancel their parents. They also inherit any values stored in their parents. Parents, however, can cancel their children.&lt;/p&gt;&lt;p id=&quot;417e&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;We often use derived contexts as code splits into branches with different lifetimes and functions. For example, we might have one main context that governs the lifetime of our overall application, but a derived context to govern an API request, and perhaps yet another context derived from that to govern a storage call required to handle the request.&lt;/p&gt;&lt;p id=&quot;64b1&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;This way, we can choose to end the entire application (by cancelling the main context), the request processing (by cancelling the first derived context), or the storage call (by cancelling the second derived context).&lt;/p&gt;&lt;h1 id=&quot;9637&quot; class=&quot;mp mq ja bm mr ms mt mu mv mw mx my mz kg na kh nb kj nc kk nd km ne kn nf ng fu&quot;&gt;Wrapping Up&lt;/h1&gt;&lt;p id=&quot;e5f7&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh nh kb lj lk ni ke lm ln nj lp lq lr nk lt lu lv nl lx ly lz it fu&quot;&gt;Note that with all of the above, it is best practice to call a context’s &lt;code class=&quot;fj oa ob oc od b&quot;&gt;CancelFunc&lt;/code&gt; when it is no longer needed to free up resources (if it’s a context that includes a cancel function). In the examples above, I generally disregarded the cancel function for simplicity, but it’s important to be efficient with resources for long-running applications. Contexts are generally passed as the first function parameter, so keep that in mind when developing your own context-consuming code!&lt;/p&gt;&lt;p id=&quot;b512&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;Hopefully, this has served as a springboard to learning more about contexts in Go and improving your application development skills. It should start to make more sense now when you see functions that accept contexts (such as calling into a database or API), and you can start to get a sense of how you, as a client, can use contexts to make your own code more predictable and performant.&lt;/p&gt;&lt;p id=&quot;9d59&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;We’ve covered the main mechanics of the various context utilities in Go and discussed when and how they might be used. You can leverage this tool in many ways, so treat this as more of a starting bell than a finish line.&lt;/p&gt;&lt;p id=&quot;42b2&quot; class=&quot;pw-post-body-paragraph le lf ja lg b lh li kb lj lk ll ke lm ln lo lp lq lr ls lt lu lv lw lx ly lz it fu&quot;&gt;&lt;em class=&quot;oq&quot;&gt;Thanks for reading! Stay tuned for more.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f862cd68852f6618c5d6ea7446e0ed51</guid>
<title>我是怎么读代码的</title>
<link>https://toutiao.io/k/mk22535</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;&lt;h4&gt;必要时借助 debug&lt;/h4&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;有一些代码为了正确性、性能等考虑，其表述可能会让人百思不得其解。人类的思维方式是偏向顺序的，用软件开发做类比就是，我们更容易理解 Happy Path，而忽视分支细节。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;当横竖想不通某段代码为什么要这么写的时候，实际运行一遍，加断点 Debug 一下可能就会发现真实的原因了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;一个有趣的例子是：在环形队列中，判断队列是否为空需要看头指针和尾指针是不是已经重合，下图的代码来自一个无锁环形队列的判空实现。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMJdXu15EicjiaiaCcHPAr0Yxk1BtjPcxPqUduV6SibTG2TDYviauyq6SpO1FQrlicTo0ib29ib2vGsQvRRa8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;道理上讲，环形队列入队 tail++，出队 head++，先有入队，才会有出队，所以 tail 一定比 head 大。那为什么上面代码里，除了判断 tail - head == 0 以外，还一定要加上当 tail &amp;lt; head 时也认为空呢，这根本不可能发生啊？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;实际的原因是，由于该环形队列是无锁的， tail 和 head 之间不保证任何同步，那么就可能由于调度因素，导致不同线程读到不同时刻的值，结果 tail &amp;lt; head 就真的产生了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;想要搞清楚这种场景，最好的办法就是真正执行几百万次测试，通过条件断点让代码在发生 tail &amp;lt; head 时停住，再观察内存中的值来解释。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;4. 写篇文章讲讲整个设计&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;63&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;代码看个七七八八，差不多就对设计和实现都有一定的认识了。这时候心里多少会有点冲动想要把获得的知识讲出来。那么最好就是写篇文章，写文章可以对知识进行梳理，在写的过程中也会不断加深印象。随着文章的撰写，作者的设计意图亦会越来越清晰，对软件的理解也会越来越深刻。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;h4&gt;想一想，为什么要这么设计，好处在哪里？&lt;/h4&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;当我们能用图表和文字来表达出软件的完整设计后，我们对代码的理解已经比较透彻，甚至，让我们自己来照着写一个新的也不是不可能了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;这个时候，就应该进一步的思考，如果是我自己来解决问题，我会怎么做？我能比原作者做得更好吗（通常不能）？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;在思考为什么这么设计的时候，如果相关领域知识不充足，就会驱使我们去查找很多参考资料，了解和借鉴别人看问题的角度。找资料的过程总有惊喜，如果能读到一些非常深入浅出的文章，而后就会怀着敬佩之情，收藏、关注作者的博客，想想如果不是因为读了某段代码，还真无缘遇到这些精彩的文章和优秀的作者。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;我在读 Go 语言内存管理代码的时候，一开始搞懂了 tcmalloc 的原理和实现，但对其所谓线程缓存、无锁分配等等卖点理解不深刻。直到回过头去读了 CSAPP 动态内存分配的章节，又结合 ptmalloc、jemalloc 的设计，相互对比理解，这才更清晰的认识了 tcmalloc 的设计决策。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;经过这一阶段的思考并结合其他人的理解之后，我们就能清楚地意识到，软件所面临问题的限制条件是什么，作者这样设计的好处有哪些。把这部分写完，添加到文章的最开始，就比较完美了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一节讲了一点关于写文章的内容，对于技术写作，推荐 Thoughtworks 洞见团队出品的 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjY3OTgwMA==&amp;amp;mid=2652480526&amp;amp;idx=1&amp;amp;sn=e4f4c3f477465334c140f2252396d6fa&amp;amp;chksm=bd4f96198a381f0f2b944addd3d7d1a7640065fb07a782a06cf0971ad81d7a95e245499bae59&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《技术写作‍手册》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《技术写作手册》&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;5. 讲个 Session，收获 Extra Bonus&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;81&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;如果还有精力和兴致，那不如把文章的内容提取出来做个 Session 讲给大家，额外的付出能收获额外的奖赏。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;有过做讲师经历的同学肯定会知道，给别人讲东西，收获最大的不是听众，而是讲师本人。想要输出一小时的 Session，所花费的准备时间可能要十个小时。我们需要花费数倍于讲解的时间来完善素材，理清思路，准备问题，甚至还包括思考可能会涉及到的拓展内容。做这些工作在提升我们 session 质量的同时，无形中也不断地强化了我们对相关知识的认知。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7389792f09f4c71e4169e41ed0696ff6</guid>
<title>Apache Druid 在 Shopee 的云原生架构演进</title>
<link>https://toutiao.io/k/79sg1gw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkzMDE5MDgwMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06QOehJ8N23MsruOT4cvjbrbNia2W0CKMSSszTMW4Jtj03ia2gBMGb2W6kUOeNuhS8acRaU3Z3BNPbQ/0?wx_fmt=png&quot; data-nickname=&quot;Shopee技术团队&quot; data-alias=&quot;ShopeeTech&quot; data-signature=&quot;如何在海外多元、复杂场景下实践创新探索，解决技术难题？Shopee技术团队将与你一起探讨前沿技术思考与应用。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;点击关注公众号👆，探索更多Shopee技术实践&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;目录&lt;br/&gt;&lt;br/&gt;1. 背景&lt;br/&gt;   1.1 Druid 介绍&lt;br/&gt;   1.2 基于物理机架构&lt;br/&gt;   1.3 基于云原生架构&lt;br/&gt;2. 架构设计&lt;br/&gt;   2.1 架构总图&lt;br/&gt;   2.2 组件内部交互图&lt;br/&gt;3. 落地实践&lt;br/&gt;4. 总结和展望&lt;br/&gt;附 基本概念&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Shopee Druid 为什么要演进到云原生架构？如果要实现云原生化，需要做哪些事情？在这个过程中，可能还会踩到哪些坑？&lt;/p&gt;&lt;p&gt;本次分享将围绕以上三点展开，从 Shopee Druid 物理机架构遇到的问题入手，探索云原生架构的优势，并重点介绍云原生架构设计的技术细节，以及一些落地的最佳实践。&lt;/p&gt;&lt;p&gt;在 ApacheCon Asia 2022 中，来自 Shopee Data Infra 团队的 Jiayi 分享了 Apache Druid 在 Shopee 的云原生架构演进。本文根据演讲内容整理而成。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 背景&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1 Druid 介绍&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Druid 是一款高性能的、实时的、分析型数据库。它的高性能主要体现在这几方面：列式存储、Bitmap 倒排索引、数据压缩、SIMD 矢量化加速、缓存系统等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 Druid 的 Lambda 架构，也使得其能够支持实时数据的写入和查询。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时，Druid 作为一个 OLAP 引擎，内置了丰富的查询算子，以满足各式各样的分析需求。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;258&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4471046770601336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8moEBV0lROUBZQJYJ7obUq1QvpRIicHKd9T69f5Y90q4zzPBLGdAtrzjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1796&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这副 Venn 图可以看到，Druid 兼备了时序数据库、数据仓库和全文检索引擎的部分特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果你对 TSDB 比较了解，那么可以将 Druid 近似理解为 InfluxDB；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你对数仓更加专业，那么也可以简单类比为 Hive；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;而如果你对全文检索更为熟悉，则可以想象成 ElasticSearch。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，实际的内在设计细节，是有诸多不同的，这里就不展开讲了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2 基于物理机架构&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对 Druid 有了初步的认识之后，先来看一下，之前 Shopee 基于物理机架构构建的服务，遇到了哪些问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;283&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.48905972797161446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mGAVBVVY8DqxZLLpic40ddcRciaicrW7mSVOcRfWF26grxWkX9FLmIdDEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1691&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要包括以下几方面：稳定性问题、效率问题、成本问题和安全问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.1 稳定性问题&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;241&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4171997157071784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8m86VHicmxGEaqC7Jh7MfSricLxsn68WvZSbe3jhLdbY1A31NZvZ56BAbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1407&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是稳定性问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一幅 Druid 查询 QPS 的监控图。可以看到，在临近中午 12 点的时候，突然出现一个查询流量的尖峰，远远超过了预先设定的告警阈值。之后我们定位的结论是，业务脚本程序的 Bug 导致发送了很多无意义的请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信大家也或多或少地遇到过类似的情况。比如临近饭点了，甚至还在就餐中，突然就接到一波告警电话，也只能废寝忘食地解决线上问题；而如果故障的时间很不巧是在半夜，那么告警电话就会变成“夺命连环 call”。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;344&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5949878738884398&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mafKqkiaiazlmWmBudUDib1ICz2wErotXwwpCcfupgvgic68wpXwicpBXp3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1237&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来看另外一个例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这幅截图是我们 Druid 慢查询脚本的某一次告警信息。其中大部分内容都进行了脱敏，我们只需要关注高亮的部分。从中可以看出，这是一条尝试分析过去一整年数据的重查询，其消耗了大量的服务器资源，导致其他业务的正常查询请求都受到了影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尤其是当我们将 SQL 客户端开放给终端用户之后，甚至还会遇到那么一两个不带任何限制条件的 &lt;code&gt;select *&lt;/code&gt; 查询。这无异于发起了一波猛烈的 DDoS 攻击。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;283&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4891368173810922&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mzr4FBE67UMrtcMT1DMGlic2Ieqhiag0oHcNSajPNNibicfIib0YFxBicaEFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1703&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似的稳定性案例还有很多，主要可以分为三类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一类是查询相关的，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一个查询中嵌套了太多层的子查询；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一次性查询了过去好几年的冷数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对两个或者更多的事实表进行 Join 查询；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;亦或是由于程序故障，在瞬间发起了大量的查询请求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二类是写入相关的，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;写入任务中配置的分区数过多；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写入的 TPS 速率过快；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写入任务的数据体量过大。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三类是集群自身的，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们通过 Crontab 定时检测服务状态，并自动重启进行故障恢复，但是周期往往是分钟级的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可见，稳定性问题的诱因是非常多的，实在是防不胜防。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.2 效率问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析完了稳定性问题，我们再来看下效率问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;320&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.553779963122311&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mIkMslbEMoKl548T7OewE7Trl1FZ1EoNgcrg6ORmec7LNSKIkYfrKkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1627&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当因为资源不足而导致性能瓶颈时，我们需要和业务的对应负责人临时沟通，交流的时间成本是比较高的，因此效率也是比较低的。即便我们完成了信息同步和沟通，扩缩容的操作需要人为介入，也很难在短时间内完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而所有业务同在一个大集群中，导致很难给业务进行优先级排序。因为对于每一个业务而言，自身肯定是最重要的。从而，我们也就很难实现自动的流量降级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而效率问题，最终会使得业务的发展受到严重制约。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.3 成本问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来是企业需要纳入考量的成本问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;206&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3560895685417804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mIsLvL0EKaoPQW8pFIHWk0RlJePVGibvlquc7JtVoRJ56qCJRAoRsQUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1831&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;首先来看机器资源的成本&lt;/strong&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们往往会因为端口冲突、资源偏好相同等原因，使得在同一台物理机上的多实例部署，变得异常困难；而简单的混合部署，仍然会存在着资源浪费的情况；另外，也无法根据业务规模和写入速率，定制化分配资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从而，一旦资源没有及时给到位，业务的性能需求将无法满足；而如果资源给多了，又很难做到高资源利用率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;其次再看看人力成本的投入&lt;/strong&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;物理机集群的构建复杂度较高，很容易出现不一致的情况。例如，同一个业务在旧的物理机集群上，运行是没问题的，但是迁移到了新物理机集群，就莫名出问题了；并且每一个独享集群的构建，都需要消耗无数的人/天；而当我们辛辛苦苦地将独享的物理机集群构建出来之后，会发现后续的维护成本还将随着集群数量直线上升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要知道，即便是支持了自动识别新节点，自动负载均衡的 Druid，也还是会让运维同学感到压力山大。而如果是其他不支持这类功能的引擎，则更是雪上加霜。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终，成本问题便会拉低我们服务的竞争力。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.4 安全问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我们来看一下安全问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;273&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.47245091830272323&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8m5xFPfcvfXHNwpoibkXibaZvpanmXEjicZOMz5XCPpzyr0iccqicicpLFnP4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1579&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们的低版本集群中，是没有开启鉴权的，这会导致某一个业务的误操作，可能会影响其他的业务，造成难以预料的后果。而即便是开启了鉴权，也会因为没有物理隔离，仍然无法达到 100% 的安全可靠。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且，低版本中存在着诸多已知安全漏洞，甚至是类似于 Log4j 这种 0Day 的重大安全漏洞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;共享大集群的业务数量太多，集群规模过大，导致升级的阻力和风险极大。这也使得升级的事情一拖再拖，与最新版本相差越来越大，进而还会出现兼容性阻碍。也就是说，我们必须要先升级到某一个特定版本，才能升级到最新版本，这会使得升级的复杂度倍增，随之而来的也是愈发难以评估的操作风险。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，也无法享受到新版本的红利。例如前面提到的重查询问题，新版本 Druid 中支持了快慢查询队列，可以避免个别不合理的重查询，影响到其他正常的查询。这也可以一定程度上缓和部分痛点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上便是大部分物理机架构下的问题了。接着我们来分析一下，云原生架构是如何解决这些问题的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3 基于云原生架构&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在正式进行云原生化进程之前，也在内核层面做了大量的工作，但是奈何都难以达到一种“药到病除”的效果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，我们也充分进行了调研和测试，对很多技术细节进行权衡和取舍，以找到最适合的方案。并同各个利益方进行了意见的收集，总体而言各方反响强烈，支持我们的架构升级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;俗话说，混乱是阶梯。也正是因为共享物理机大集群的无序和动荡，才给了业务方足够的动力，来和我们一起完成新架构的落地。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;209&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.36172566371681414&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mUlep0hJx3h8J7aGt4X5z9hSAtmWfU5iaNia4T4c6ozZhPnjWhZekbZKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1808&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图展示了几个主要的利益相关方，以及其各自的诉求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本着客户至上的精神，我们先来了解一下&lt;strong&gt;业务方的需求&lt;/strong&gt;。放在第一位的还是要保障稳定性，并且要能够具备大促流量峰值的抗压能力，支持秒级的自动扩容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随后是&lt;strong&gt;运维方的需求&lt;/strong&gt;。他们希望能够保证可观测性，方便实时、清晰地观察到各个组件的健康状态和性能指标；并且，要确保集群的资源利用率足够高；还要能够支持灵活多变的告警策略，做到动态阀值和分级告警等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后是&lt;strong&gt;内核方的需求&lt;/strong&gt;。我们期望能够只专注于内核，完全托管除了 Druid 内核研发以外所有的事宜；要能够支持 CI/CD 持续集成；以及采用 Docker 镜像，代替之前纯代码的交付模式，提高整体的迭代效率。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;283&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.48939929328621906&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8m4EVldBn2XGOSPfTewia2VIyqxyTdkia3okMSe8VaPZnOhtRCNpIPy2qA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1698&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而云原生架构包含了高稳定性、高效、低成本和安全稳固等方面的优势，下文将详细介绍它是如何满足各方需求的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.1 高稳定性&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;323&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5594221930400525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mRaWQwtwxMMPVLU477iaibHft8wlpac462RHT8YwDibfoJz2nWs4f9VLZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1523&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是高稳定性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们给各个核心业务都建立了独立的 Druid on K8S 集群。并且，各个独享集群的资源是隔离的，所以从根本上解决了资源抢占的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而针对每一个业务的特征，我们也进行了极致的定制优化。同时，服务出现故障时，可以做到秒级自动恢复，且用户无感知。更进一步，我们还在不同的机房构建了 HA 集群，实现 IDC 级别的高可用，以满足个别核心业务更为严苛的稳定性需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了一般意义上，针对集群参数配置的定制级优化，我们可能还会遇到类似于需要协调压缩算法版本的场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设 Druid 上游的业务用了版本 A 的 ZSTD 压缩算法，而 Druid 中默认的是版本 B 的，则需要调整并和业务版本保持一致，否则数据无法正常被反序列化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是之前的共享集群模式，另外新来了一个业务，用的又是版本 C 的，此时就无法协调了。那么，就需要推动业务，去改造所有的上下游组件，成本将会非常高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关键，还不仅是成本的问题，如果恰巧全链路中有一个组件也是共享集群模式，无法进行调整，那么整个链路都将无法正常打通。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，实际会遇到的案例还有很多，这里暂不一一列举。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.2 高效&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mIiaB72r7BQ32ic3ficOCQa2Cjq1dOTSWgNateOxu3D8uh86az31nupvLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1485&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;云原生架构的另一个优势是高效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于我们确保了同一个独享集群中，所有项目都是相同的部门或者项目组，使得项目之间的优先级更容易被评估和排序，从而更容易实现自动流量降级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且，因为支持了根据负载情况的自动扩缩容功能，我们不再需要提前和业务沟通，来收集大促流量的增幅，也就不再担心预估不准确的问题了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.3 低成本&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1）机器资源利用率&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着 Druid on K8s 集群规模不断壮大，在某一个时间点，我们进行了一次横向对比。结果发现，云原生架构的集群机器数量少于旧的物理机集群，但是承载的业务写入量却更多。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;357&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6174121405750799&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mJSWcWsdGNVIxseKf5kiaUNOUud2GCCSRPnEdoRWaoeb50bE9vApX7jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1252&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面这幅柱状图中，左边是物理机架构集群，右边是云原生架构集群。橘黄色表示数据写入峰值，紫色表示数据写入总量。可以看出，无论是峰值还是总量，云原生架构都是比物理机架构更高的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，可以从这一个侧面反映出 Druid 云原生架构的机器资源利用率更高。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2）人力成本&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们再看看人力成本方面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为物理机架构集群搭建的复杂度比较高，从开始构建，到完全可以作为线上正式环境交付，前后大概需要一个月的时间。即便是后续操作更加熟练，脚本化程度更高，仍然需要数天的时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而云原生架构的集群搭建，可以通过 CI/CD 的方式，进行一键部署，做到分钟级交付。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;375&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6487179487179487&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mQn2xRqiaI6Alj2ichLP5tH5TcQ5ZCrgrJ6kPk9sltogtQbMxp99bwY1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图 x 轴表示集群的数量，y 轴表示对应消耗的人/天。黄色的线表示物理机架构，绿色的表示云原生架构。通过这幅图可以更加直观地感受到二者之间的区别。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.4 安全&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;260&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.45065996228786925&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mNic3AiarZRVuBuwxtLbf06XYFd9BdksOhbHmKfWga8umlM2UYgWhP4xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1591&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后是安全方面的优点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们默认会开启鉴权，保障业务的数据安全。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，因为云原生独享集群更加轻量，使得我们更容易跟进最新的 Druid 内核版本。高版本中修复了已知的安全漏洞，会更加安全可靠。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，容器化运行的模式，可以实现物理隔离，避免了资源抢占，很好地控制了故障域。再也不用担心某一个业务的误操作波及到其他业务，线上的风险也进一步降低了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，新架构的优势远不止这些。并且，优势叠加之后的放大效应，将我们的服务质量提升到了一个完全不同的高度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们总结一下，在云原生化的过程中又遇到了哪些机遇和挑战。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.4 挑战与机遇&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，关于挑战部分：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要引入云原生的概念，满足所有利益方的需求，设计出一套全新的云原生架构；还需要攻克众多技术难点，从 0 到 1 构建出 K8s 底座；并利用 Docker 镜像替代之前纯代码的迭代方式，以及使用 Helm Chart 完成 Druid 集群的容器编排和管理；最后，我们需要充分验证和测试大部分业务场景，并建立标杆用户。然后，再大面积推广业务的迁移，并持续进行定制级优化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;252&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.43629550321199145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mvw4Vdvq0NwvlCfeS2fowhEicxNSjTPU34yGIDUiaPThTIMD5QsPIlicwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1868&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其二，关于机遇部分：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为需要构建一整套复杂的云原生架构，也有机会进一步锻炼和提高我们架构的能力；而在实践和落地 K8s 云原生的过程，通过解决具体的技术难题，也增强了相关的技术水平；同时，借助前卫的容器化运行模式，也引领了 Druid 开源社区的云原生化进程；另外，在逐一完成业务的迁移过程中，也有机会和业务深入了解真实的使用场景和痛点，深化了对业务的理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信到这里，大家已经知道了，我们为什么要演进到云原生架构，以及云原生架构落地过程中遇到的机遇和挑战。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 架构设计&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，就让我们进入架构层面，了解一下 Shopee Druid 总体的云原生架构设计，以及各个组件之间的交互。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 架构总图&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;500&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.8651484135107472&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8micP7icMsZzFZUXicdcNycca6BVI8yRUOofwoxiafKdRndKFQLGMoN0XWPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3908&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是我们的架构总图，主要划分为了六个层次，分别是业务层、平台层、可视化层、引擎层、GitOps 层 和 K8s 层。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最上层的是业务层，主要包含了用户行为分析、商品推荐、销售数据分析、品牌分析、网络性能分析、核心指标分析、广告收益分析、应用轨迹分析、跨境电商分析、内容推荐等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出，Druid 在 Shopee 内部的应用场景是非常多样的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;85&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.14729089952656496&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mQkBN1KZgQOb7MSIibZPCIJLwVCYF6XTApmL4j4STibQviayJPYn4DpCyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1901&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二层是平台层，包含了 DataStudio 数据分析、TrinoDB 联邦查询引擎、DataHub 数据集成、DataMap 和 Metamart 元数据管理等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;60&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.10330361824855794&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mQY3ianx9xhr7bkrGpoRrCpOIiaZfKvTSFv4KrthEIicId0rh561GumAvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1907&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可视化层包含了 Druid 自带的 Web UI、K8s Dashboard、Apache Superset、Grafana，以及业务实现的前端页面等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;188&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3245798319327731&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mSldXnfR0UEob0TfUfdGHy2WFKyxeJgjuJcgNod8r3f8XMGSm4srEhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1904&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来是引擎层面。Druid 下方是 PostgreSQL 作为 Druid 元数据存储；HDFS 作为底层存储，记录全量的业务数据；ZooKeeper 则作为配置中心。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Druid 右边是 Kafka 实时数据的写入和 HDFS 离线数据的导入；同时，也支持 Spark 数据分析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，右下角是 ElasticSearch 负责日志的存储；Druid 通过 Metric System 进行自监控；Grafana 再负责告警。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;126&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.21821036106750394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mAqc7Hr52PY3x5ia8uPVTE9309ysen8Q3H4ibUTo7SSIGoaMubAPyHNxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1911&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看一下 GitOps 层。我们将整个发版流程划分为四个部分：开发、测试、预发和生产。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与传统发版不同的是，我们交付的是 Docker 镜像，并使用 Harbor 作为镜像仓库存储。同时，使用云原生架构的集群，通过容器化运行，保障了测试和线上运行环境的一致。再也不用担心通过了测试环节，结果在线上跑不通的尴尬情形了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;160&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.27763226820324777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mAEIAdgEOEEbpM1UNiap4DkJXFb1zNCrzo2qicePIatnUibdicddZacc5kg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1909&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最底层是 kubernetes 集群。我们在不同的 IDC 机房各自搭建了一套对等的 K8s 集群，并在 K8s 集群之上，为各个核心业务构建了独享的 Druid 集群。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;239&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.41373801916932906&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8m55TJ4HAnqBqFjsS3rGu1icH5QiauEKqdPfzdOP0x6Pg3qxibIxVhicTH9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1878&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的拆分逻辑是按照部门进行划分。某一个部门中可能还会有多个项目，而一个项目下，再对应多个 DataSource 表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举例来讲，假设项目 2 和 3 都是同一个部门下的，如果项目 2 是 metric 监控，项目 3 是计算实际业务数据的，我们就能很容易地进行优先级排序，在整体资源出现瓶颈的时候，便可以自动地降级项目 2 ，以保障最核心的项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构分层图剖析完毕。那么，内部的组件之间又是如何交互与配合的呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 组件内部交互图&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;400&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6922286888052037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mdLcORB79JQlXCPIvQxFaSSmovOxn5dBgSpwqibTGlicJFWPYXhaE9rgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2921&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先从流量入口看起。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常，读写请求通过可视化页面或者后台程序发起，转而被 Druid 接收到。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;269&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.46517671517671516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8msxwJojhUibzhsgjiadX2VwLwavicDcnPA5xqC3RAiaicVMphtLdYFz2Eglg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1924&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，Druid 内部的各个组件都是多副本的，架构设计上没有任何的单点问题。这也是为什么相比于其他很多数据库，Druid 更容易实现云原生化。因为 Druid 组件的职责划分更为到位，很容易对应到 Pod 进行生命周期管理。而每个组件内部的功能又十分内聚，新节点还可以自动识别，并增添到分布式集群中，使得 HPA 或者 VPA 扩缩容策略的应用，也更加手到擒来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是 ZooKeeper 作为一个配置中心，也负责了 Overlord 和 Coordinator 节点的选主、任务分发的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PostgreSQL 是元数据存储引擎，包括 DataSource、Segment 和 Task 的元数据信息等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HDFS 则提供了底层存储，所有的业务数据都将全量的存储在 HDFS 集群中，并根据 Retention Rule 加载到 Historical 数据节点，以加速查询。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;303&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5243687610099824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8m0X0BlaW4tJbX35TqicvdxVb5kP6fsOUcs7QzbkpJExbdxgLfzrp7PfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1703&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来是系统监控部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前有三个层面的指标监控，分别是物理机层面、Service 层面和 Druid Metric 层面：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先，Prometheus 从物理机的角度进行指标监控，我们就可以知道某一台机器的负载情况；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其次，MetricBeat 从 Service 服务层面进行指标监控，还可以知道 Druid 中某一个服务的资源使用情况，作为扩缩容的依据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再者，Druid 自身也有 Metric System 指标监控，还能洞察写入查询的负载和性能表现，等更多细节信息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当然，还有 Jaeger 可以从另一个视角进行全链路分析，以便快速定位到某一个环节的瓶颈，可以进一步提高解决问题的效率。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常，我们会发现，各个监控组合起来，往往会达到 1+1&amp;gt;2 的效果。但是，我们也需要根据实际情况进行取舍。建议大家逐步地迭代，引入新的监控组件，以得到全新的分析视角，而不能一味地进行堆砌。因为，只有控制好架构的复杂度，才能更有效地降低系统的风险。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;281&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.485592820028342&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mNKBRJOp1sVgiamB9Ke1XNb4dn1TEHmWXqVNWER0wuNIwNlPKBmRX1xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2117&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后是 K8s 部分。Ingress 作为流量入口，对 Service 进行了更高维度的抽象，而 Service 会将流量负载均衡之后，重定向到 kube proxy。随后，再代理转发到最小调度单元——Pod 上面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 Pod 也分为无状态和有状态两种，前者包含了 Router、Broker、Coordinator 和 Overlord 等，后者包括 MiddleManager、Historical、ZooKeeper、PostgreSQL 等。并且，这些有状态的 Pod 还需要申明 PV 持久卷，方便数据的保存。而为了避免跨 K8s node 访问，通常我们会增加节点亲和性，提高数据的本地性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还可以看到，有状态 Pod 组成了 Stateful Set 集合，而无状态 Pod 组成了 Replica Set 集合。为了便于版本控制和生命周期管理，Replica Set 基础之上，还抽象出来了 Deployment 的概念。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有的这些集群状态，都被保存在 K8s master 节点的 Etcd 中。此外，Controller Manager 则会维护集群的状态，Scheduler 进行调度，并通过 api server 提供统一入口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信到这里，Druid 云原生化架构对你而言，已经不再是一个“黑盒”了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上便是架构设计的全部内容。接下来的一个小节，将简单介绍 Shopee 是如何封装服务，并形成一套完整的解决方案，以应对多样化场景的业务需求。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 落地实践&lt;/h1&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;226&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3912568306010929&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mxEYcOzrbsVNKUyEF4wspegUNmbWmiaLKEyicxo0FgoaCBvFHVNWW3ObQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1830&quot;/&gt;&lt;figcaption&gt;&lt;a href=&quot;https://github.com/apache/druid/issues/8369#web-datasources&quot; data-linktype=&quot;2&quot;&gt;图片源自 Druid&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们会给各个核心业务提供 Druid on K8s 独享集群，以保障稳定、安全、高效和低成本。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;265&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4577828834003446&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mWGSibjX4OibwrOGicCyd7swj3ZqvfL0l7kfMjsiagCCQibZ3lpwLjmnCHUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1741&quot;/&gt;&lt;figcaption&gt;&lt;a href=&quot;https://grafana.com/&quot; data-linktype=&quot;2&quot;&gt;图片源自 Grafana&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，我们还会构建配套的 Grafana on K8S 独享集群，并内置一些基础的监控面板，例如 TPS 写入、QPS 查询等等。并给到业务 Admin 管理员权限，方便业务方根据自己的业务场景需求，定制化设计相应的监控面板。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，部分业务还可能会有二次开发 Grafana 插件的需求。而我们在独享模式下，则更容易进行升级和迭代。即便是新插件出现 Bug，导致 Grafana 故障，也不会影响到其他业务了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，为了支持多样化的业务场景，我们除了 Grafana，还提供了丰富的可视化方案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Turnilo 可以通过“托拉拽”的方式，快速地构建出想要的监控面板；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;K8s Dashboard 可以实现运维和监控的一体化；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Superset 支持海量的图表类型和细粒度的权限管控；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kibana 则可以对日志进行可视化呈现和告警配置。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总有一款能够很好地契合我们的业务需求。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. 总结和展望&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过演进到云原生架构，我们保障了高稳定性、高性能，实现了高效和低成本，极大地提高了服务质量，促进了业务的发展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们从架构的维度，解决了内核层面无法处理的，或者是解决起来成本过高的问题。而平时如果你也遇到了类似的困境，不妨跳脱出来，换一个角度来思考，可能也会收获意想不到的结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了继续推动架构的升级和内核的完善，我们还会在集成与被集成、开源社区合作，和打造团队影响等方面，持续发力。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;附：基本概念&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为方便读者更好地理解架构设计，这里将简单介绍文中涉及到的基本概念，包括专业术语、Kubernetes 核心组件和常用的插件。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;专业术语&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;321&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5546482412060302&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mkhhqeicibQIXHicylias1icqJEe3zLO02PG9icFPtXtba9icwpmQnsL9RJzNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1592&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是 Druid 的相关专业术语：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Router 提供一个统一的 API 网管和可视化的 Web UI 页面&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Broker 就是通常我们熟知的查询节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MiddleManager 会管理 Overlord 分配过来的 task 任务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Historical 根据 Coordinator 的指令存储历史数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次是云原生相关的专业术语：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Docker 是一款流行的容器化引擎&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Helm 是 K8s 的包管理工具，可以简单理解为 Maven 和 Java 的关系&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Operator 是一款支持自定义的 K8s 控制器，我们可以通过 K8s Client 编写非常复杂的容器编排逻辑&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Harbor 是存放镜像的仓库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后是 CI/CD，持续集成，持续部署&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kubernetes 核心组件&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;224&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.38736102984201287&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mZc4N5M62Cicy0lRSYIWIt8tsib6vaqUA9emDTEye67L9T4BCDY8ibiayJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1709&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来过一遍 K8s 的核心组件。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;apiserver 提供了资源操作的唯一入口，并支持了鉴权、访问控制、集群状态变更、API 注册和发现等功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;controller manage 负责维护集群的状态，比如故障检测、滚动更新等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;scheduler 负责资源的调度，按照预定的调度策略将 Pod 调度到合适的机器上&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;kubelet 则负责维护容器的生命周期&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Container Runtime 负责容器的运行时，实际上它也是一个接口规范，可以方便我们使用 containerd 这类更加轻量的解决方案&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Etcd 组件类似于 ZooKeeper，用来保存整个集群的状态&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kubernetes 常用插件&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;207&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3576487252124646&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mYlR0a6ZBLEFZkJX03obyzyZknh1O7kpbMdMOiaEG1HqUribM4ls8cibpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1412&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看一下 K8s 的常用插件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个插件大部分场景下，都是属于必须安装的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;kube-dns 顾名思义，负责提供 DNS 服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Ingress Controller 则为服务提供外网的入口&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果安装这两个插件，会显著提高我们的效率，所以是强烈推荐安装的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Dashboard 提供 UI 可视化页面&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;FileBeat 可以帮助实现容器日志的持久化&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后是可选的 Federation，方便我们实现跨可用区的集群联邦。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;本文作者&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Jiayi，大数据技术专家，来自 Shopee Data Infrastructure 团队。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;加入我们&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Shopee Data Infrastructure 团队专注于为公司构建稳定、高效、安全、易用的大数据基础设施和平台。&lt;/p&gt;&lt;p&gt;我们的业务包括：实时数据链路支持，Kafka、Flink 的相关开发；HDFS、Spark 等 Hadoop 生态组件的开发和维护；Linux 操作系统的运维和大数据组件的运维；OLAP 组件、Presto、Druid、Trino、Elasticsearch、ClickHouse 的开发和业务支持；大数据平台系统、资源管理、任务调度等平台的开发。欢迎在 Shopee 招聘官网搜索更多 &lt;a href=&quot;https://careers.shopee.sg/jobs?name=data%20infra&amp;amp;limit=20&amp;amp;offset=0&quot; data-linktype=&quot;2&quot;&gt;Data Infra 相关岗位详情&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;27&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.04722222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mOyiczbf5v12pk2X5dc2kA6Cl4HvATTvGzNhjoukcxK56YWvnCFEsHlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkzMDE5MDgwMQ==&amp;amp;mid=2247489061&amp;amp;idx=1&amp;amp;sn=4c812f534529bf83925753f7ddfa595c&amp;amp;chksm=c27f529bf508db8da59811fe59575190dd557a20c4d48124ddf71c5e9133f5f4a7acc2cc47ad&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;110&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.19&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mHyekjChZkakFYTfml9K8IbFASgMUnAKPFnwBxLsK119xJ7xMzjRwNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkzMDE5MDgwMQ==&amp;amp;mid=2247488707&amp;amp;idx=1&amp;amp;sn=ff14cf5fd541d33a012bbd9ef1a4ff54&amp;amp;chksm=c27f507df508d96b381bbec6314378e2f67d6d184f8cd0d748f9ae92a3a30b1a323a578aaee2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;110&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.19&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8muuCX9FFxhuY4xAPic7r1MqJjVKYGWI3MXVDY2BG7gkREicRffj80fLow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkzMDE5MDgwMQ==&amp;amp;mid=2247486288&amp;amp;idx=1&amp;amp;sn=1c54f1b60bdc4baec53428af7abfde8f&amp;amp;chksm=c27f4feef508c6f882a32fb6dbff0f2561b93403cfa4edec42093dbfe9d3cae9cc00210b2ba6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;110&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.19&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06miaxeqU3KLY7yPUa0xJE8mXQLU5WMe5rKhKGAQ2O9Dib6ZdSPQW8F3w194DGOqBAOMvVtvaHibA72A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkzMDE5MDgwMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn06QOehJ8N23MsruOT4cvjbrbNia2W0CKMSSszTMW4Jtj03ia2gBMGb2W6kUOeNuhS8acRaU3Z3BNPbQ/0?wx_fmt=png&quot; data-nickname=&quot;Shopee技术团队&quot; data-alias=&quot;ShopeeTech&quot; data-signature=&quot;如何在海外多元、复杂场景下实践创新探索，解决技术难题？Shopee技术团队将与你一起探讨前沿技术思考与应用。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;143&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2477777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/euN1ic17Jn05cBbVXRiaO0axfUN7IciaOKTlm5y03a0cicRGhzjyE8x8S0zhx5Es83nyyuMmqFwnfOLYsTW23NBPMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;👇点击“阅读原文”，加入Shopee&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>