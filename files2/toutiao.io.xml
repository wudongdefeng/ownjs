<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9846a65159a7c7a178a3f47e98ac8d7c</guid>
<title>7天DAU超亿级，《羊了个羊》技术架构升级实战</title>
<link>https://toutiao.io/k/526ntt6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10084033613445378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/VY8SELNGe95czZhnamWia6rvd1aenicicPiasMmUOHHu1wyeNicNJsWGa4syzF2PoOAePZEYtZX8jicbEDRPW3KsUlOw/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-w=&quot;1071&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;导语 | &lt;span&gt;在短短的7天内，羊了个羊小游戏的DAU突破了1亿。然而，其最初&lt;span&gt;技术架构仅支撑5000QPS并发，无论技术、人力、资源以及服务都难以应对。用户涌入、数据飙升，给原有的技术架构、运维体系、以及安全防范等技术体系都带来了巨大的挑战。&lt;span&gt;如何通过架构优化，让一款小程序游戏可以在短时间内实现对上亿DAU的支持？本文将从技术角度解读这背后的技术实践历程，希望为正在从事小游戏开发的技术同行带来一些参考。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.3636363636363635&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/wprMnqDUJH6cGyaKFfNz8LBPUNI4OiaTm1xFeAQicqx4HvD995taYCVicLg8FibpERuzj3wz9MD4wcwMoks6RibdXKm1ibH4MT3Sn9/640?wx_fmt=svg&quot; data-w=&quot;11&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;1 背&lt;/span&gt;&lt;span&gt;景&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;2 架构全面升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3 插件集成&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;187f729f1aabcd483fd11b8e9e1d3409&quot;&gt;&lt;span&gt;    3.1 一崩再崩，自动扩容为何不灵？&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;    3.2 运维能力不足，如何快速补齐？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;    3.3 BOT刷排行，如何保持游戏公平？&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;4 &lt;/span&gt;&lt;span&gt;小游戏设计的“三高”原则&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.3636363636363635&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/UOlZKghBxaaFDCr9CbkR03IAZNGptnic2SGuu0JicCvYuVswicMoNLqwKSicE8zkJiaIOK8ianbJKHTAMYvxK9pcHPNKmOc2LpbneC/640?wx_fmt=svg&quot; data-w=&quot;11&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9FiaZYIGick0nWJJXC1lSLI8zy2asbcicfNgvgJXexvB9rOnicPxbKFdEibPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;谁也没有想到，去年9月，一款卡通背景消除闯关游戏《羊了个羊》全网迅速刷屏。&lt;/span&gt;&lt;span&gt;但凡一个拿着手机目不转睛的人，九成概率都在忙着通关，还有大批的人，因为不能通关而通宵达旦，夜不能寐。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后台数据显示，在短短的7天内，这款小游戏的DAU就突破了1亿。要知道，除了王者荣耀、原神等屈指可数的现象级手游之外，1亿DAU是这个行业的喜马拉雅山，可是，它却被一个看上去设计粗糙的小程序游戏轻松实现了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户涌入、数据飙升，实际上给原有的技术架构、运维体系、以及安全防范等技术体系都带来了巨大的挑战，这个创业团队一共只有几个人，最初的技术架构仅支撑5000QPS并发，因此，无论技术、人力、资源以及服务都越来越难以应对。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;如何通过架构优化，让一款小程序游戏可以在短时间内实现对上亿DAU的支持？&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;本文将从技术角度解读这背后的技术实践历程，希望为正在从事小游戏开发的技术同行一些参考。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9F812pnpTVKsrLmlcKHlIuuBvuwqeIqmOLOsD9nTpkow7FlAh45LKRLA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;架构全面升级&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;一款小游戏能不能成功，不仅和本身的通关设计有着巨大的关系，而且还和上量之后，系统能否持续稳定也密切相关。&lt;/span&gt;&lt;span&gt;《羊了个羊》这款小游戏在爆火之后的前几天，曾经在技术架构面临严峻考验，这对一款正在用户量快速爬坡的小游戏来说，可以说是致命的挑战，如果不能快速解决，将会大幅降低玩家的游戏体验，从而快速被用户抛弃。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《羊了个羊》在最开始也遇到了这样的问题，就是一瞬间，涌入海量用户，速度之快，人数之多，超过了所有人的预期。就像一条双向两车道，车流量不大的情况下，还能正常行驶，可一旦来了成千上万辆车，交通的效率肯定大打折扣，甚至堵死。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在回过头看，最开始的技术架构因为技术以及时间等因素，在设计上有些简单，如下图1所示，玩家流量通过一个LB进入，传输给几个POD进行游戏逻辑处理， 再将数据进行存储，其中，热数据存储在Redis中, 持久化数据存在MongoDB。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;由于设计时，对如此大流量缺乏充分考虑，实际上也没有料想到会有这么大的流量，而且&lt;/span&gt;&lt;span&gt;&lt;strong&gt;单点服务的性能瓶颈，再加上代码未进行充分优化，造成当时的系统最高只能承受5000的QPS&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，但实际流量增长很快， 并且持续升高并到达性能瓶颈，游戏服务开始瘫痪，全部玩家无法再进行游戏。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_img_placeholder&quot; data-ratio=&quot;1.602661596958175&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9SmqmVtF4jdN5mtEHv9XRkCnBrOmXcp0KmrY7drg3FMEKqBlWfF3W7Mr9RVx2gSNh22CO19XoCViaoibVh6ZOnqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;526&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《羊了个羊》最开始技术架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面对服务中断， 《羊了个羊》和腾讯云服务团队在详细分析原来架构的不足之后，决定从三个方面，针对原有架构做重点优化：在计算扩容层，依靠腾讯云云原生产品为原有技术架构升级，实现服务高可用；为快速补齐运维能力，通过业务日志诊断程序性能，配合业务调优以减少服务器压力；最后在安全防范领域，通过安全方案抵抗异常流量攻击。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_img_placeholder&quot; data-ratio=&quot;0.8524426719840479&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9SmqmVtF4jdN5mtEHv9XRkCnBrOmXcp0xN2I5lDwb75X5Yibf8KTpESztbbBXI67Wp3PAPpvJt0g6qvBntHN3OA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1003&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《羊了个羊》最新技术架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体措施上，首先通过引入腾讯云TKE Serverless 的弹性机制， 实现游戏服自动纵向和横向扩展，实现服务解藕，增加容错和熔断机制；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，通过腾讯云开箱即用的日志服务 CLS，对游戏接口稳定性/异常调用趋势进行监控，帮助用户快速观测产品质量 ，并第一时间获取到异常panic统计分析和告警 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，还要针对许多恶意BOT流量大量涌入到游戏中，导致游戏服务器 QPS、带宽快速升高，影响服务可用性等情况，引入WAF+高防包， 抵御外部异常流量攻击。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在此之外，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;双方产研团队还通过启用CDN做游戏动静态资源分离，让玩家使用的游戏资源实现就近下载，减轻网络端压力&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;；设计多LB入口实现入口高可用和限流，避免系统被超额流量过载；把MongoDB转换为读写分离模式，配合代码逻辑优化实现性能提升，引入分库实现业务分层与隔离，Redis缓存热数据，分担数据库查询压力等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过上述一系列技术升级， 新架构经受住了一波又一波的流量峰值考验，甚至在高峰期DAU过亿后，游戏技术系统依旧表现稳定，这对于一个发布才几个月的小游戏来说，在国内也很难再找到这样的例子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9Fl62j5eylelCcZwNOEv5HRg9xicSj2KIwvdQMPbwiau3eqyIUpKbjQ6nA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术实战：扩容、运维、安全&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;187f729f1aabcd483fd11b8e9e1d3409&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;下面我们将从&lt;/span&gt;&lt;span&gt;&lt;strong&gt;扩容、运维、以及安全三大核心环节&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;入手，详细介绍在具体实操过程中，双方是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;如何应对流量的爆发挑战&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;187f729f1aabcd483fd11b8e9e1d3409&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.1 &lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;一崩再崩，自动扩容为何不灵？&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在展开之前，先说下这次起到至关重要的一款产品----TKE Serverless ，它是基于腾讯云 TKE 容器服务孵化出来的一种全新的无需管理服务器形态的 Kubernetes 容器服务平台，最核心的利器是拥有一个全新的集群节点管理模式，称之为超级节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上云的开发者都知道虚拟机，超级节点就类似于一台超大规格的 CVM 虚拟机，它是基于 Serverless 容器技术，模拟 Serverful 有节点管理体验的新形态容器集群节点。如果用户需要进行固定资源的扩缩容，仅需要对这台“超大规格的 CVM”进行升降配，简单点击几个鼠标，就可以配置完成，资源管理变得极为简单。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际上，《羊了个羊》在6月上线初期就采用了 TKE Serverless 的云原生方式部署游戏系统，希望借助产品的免运维及快速扩缩容能力，支撑未来玩家的规模增长，但在9月上旬，《羊了个羊》突然一夜爆火，玩家规模急剧上升，游戏系统开始出现不稳定的情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过梳理发现，因为初始配置的容器规格比较低，副本数也相对较少，当初始玩家规模不断上涨时，《羊了个羊》团队根据 TKE 控制台的监控/告警能力，发现容器的 CPU/内存等各项指标都达到了最大值，运维同学当时随即做出调整，游戏服务的各项指标稳定了下来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但随着玩家规模继续上涨达到千万级别时，游戏又开始出现了偶发的不稳定问题，表现为内存指标快速增加直到打满整个容器，且流量还在不断增长中。腾讯云团队紧急联合《羊了个羊》产研团队分析应用的瓶颈，快速解决了如服务内存泄露、服务分级缓存策略、云产品配额限制等多个问题，这才让游戏服务逐渐稳定了下来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;由于《羊了个羊》技术团队配置了基于 CPU 指标的容器 HPA 动态扩缩容策略，在游戏日活持续陡增的情况下，系统能够在秒级自动扩容了近万核容器资源。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;在此期间，也无需投入人力运维 Kubernetes 集群以及担心资源不足等问题，从而可以把精力都投入到游戏玩法优化上来。在随后的两周时间，尽管玩家规模增长到几百倍以上，最终达到了上亿的日活，这套服务依旧保持稳定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.2 运维能力不足，如何快速补齐？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过技术架构的迭代以及不断激增的用户，《羊了个羊》技术团队也认识到，因为爆火太快，更需要快速补齐运维能力，才能更好的持续调整和提升游戏体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为此，《羊了个羊》选择了开箱即用的日志服务 CLS，CLS 对游戏接口稳定性、异常调用趋势的监控可帮助他们快速观测产品质量 ，并第一时间获取到异常panic统计分析和告警 ；在游戏运营方面，玩家登录链路耗时/对局时间等数据亦可通过 CLS 分析、校验及处理，进而调整和提升游戏体验；同时还能满足游戏用户行为及审计对账等需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;TKE Serverless在提供充足的计算资源后，可以使用CLS的云原生特性实现稳定性和程序调优。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;用户研发人员仅需在容器控制台点击新建日志采集按钮即可完成数据接入，无需在运维上投入人力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;借助云原生的能力和CLS的SQL分析、仪表盘、监控告警能力，分析出程序可优化点, 解决游戏开发商在初期和爆发期对游戏稳定性和运营数据分析的难题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了运维数据外，用户还将部分运营数据接入CLS。在游戏调整玩法、分析活动数据时，运营人员可借助CLS快速观测数据变化，并作出应对策略。游戏开发商在将CLS用作简单运维工具查日志、做接口调用告警外的同时，还将游戏的通关数据、用户行为分析、审计对账等运营数据在CLS中存储分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;187f729f1aabcd483fd11b8e9e1d3409&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.3&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;恶意BOT抢刷排行，如何保持游戏公平？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哪里有流量，哪里就有黑产。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于设计之初没有充分考虑安全问题，因此引来大量不法分子通过恶意BOT抢刷游戏排行，几乎每分每秒，都有恶意流量访问游戏接口，并且这一部分恶意群体通过互联网、QQ群和微信群中传播恶意刷排行的脚本，极大的破坏了游戏公平性，让本该属于游戏对抗的乐趣被恶意BOT抹杀。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且更重要的是随着羊了个羊热度的不但攀升，许多恶意BOT流量的大量涌入，导致游戏服务器 QPS、带宽快速升高，一度影响服务可用性。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;经过双方产研团队合作，决定快速接入腾讯云WAF进行防护，一开始接入WAF的时候，相关 QPS 峰值已达 21W，接入WAF之前CPU一直处于临界值水位 、网络链接打满的导致服务不可用的情况。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_img_placeholder&quot; data-ratio=&quot;0.45966850828729283&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9SmqmVtF4jdN5mtEHv9XRkCnBrOmXcp0zrOV28ibDCFqxcjtHfAZ5pIzCrQgD9ff3TqcxlsDdLChiat2qglcFcIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;905&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过选择负载均衡型WAF即可在不改动网络架构的情况下3秒完成业务接入，实现在用户无感的情况下对恶意流量进行清洗及防护。为了有效打击攻击者的恶意流量， WAF 中 BOT 行为管理也提供了全链路、全生命周期的的恶意行为流量体系，实现快速高效的恶意流量治理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9FPB6mZB01WGXHsGUE2UYENHAJNeKa8y0qwiajZdfHR5lvk4rjnrQabwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;小游戏设计的“三高”原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;通过腾讯云这次完整支持《羊了个羊》团队在小游戏架构扩容、系统运维以及安全防范领域的实战经验，我们也得到了一些启发，希望给同行一些参考。比如面对突发流量，小游戏系统在设计的过程中需要考虑以下能力：第一是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;高性能&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，能够承载瞬时爆发流量，保证响应时长在可接受的范围；其次是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;高可用&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，系统持续提供服务，小概率发生宕机时，过载保护将故障控制在可承受范围内，不影响核心业务；最后是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;高扩展&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，服务系统应该具备水平和垂直扩展能力，在成本和可用性中实现最佳平衡点。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;我们也看到，目前在国内甚至国际上，小游戏发行商还是以中小型游戏公司为主，公司大都处于早期创业或融资阶段，对云产品不熟悉、技术能力参差不齐，在算力资源、技术架构、业务逻辑、运维经验方面缺乏成熟的经验，这些都是小游戏公司早期非常典型的困境。通过腾讯云和《羊了个羊》产研团队的这次密切合作，不仅让腾讯云在服务类似客户上积累了宝贵的经验，也为未来的发展指明了清晰的目标，就是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;针对不同赛道搭建标准化架构，为游戏公司的业务保驾护航&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上期文章的开发者读者们太热情啦&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;😻小云继续给各位加赠福利😻&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;扫码下图一键领红包封面&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;如被领取完 请&lt;/span&gt;&lt;/span&gt;&lt;span&gt;关&lt;/span&gt;&lt;span&gt;注&lt;/span&gt;&lt;span&gt;开发者&lt;/span&gt;&lt;span&gt;公众&lt;/span&gt;&lt;span&gt;号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在后台回复【2023】继续领取&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.5868263473053892&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe963blWxQqSA3pbGLCwleGUrYicQnxXGtVpGbGuLiaBx6icBP4c9x6kZJiazaSNyKQOQoVOrdDric6iaiaSpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你可能感兴趣的腾讯工程师作品&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2&quot; data-w=&quot;24&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M6IC6IoU4PwMicRZB4dKAVUhfw1GR9CJvqeqIWic50hQeGiaVgjY4oK8BXrMNsMra2MQ3f4LAlLKT6ibW9GdTvibUtg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sPQicVg8nzU0ceHDyC83Jm2vibsTbUia3blLRW1z0KUrw4OIV2eOibRmEWfWJYVXuyN6TOno2sLg9ZU7meG4uAY2jg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;24&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247571906&amp;amp;idx=1&amp;amp;sn=4da401e74d5bae42b47fe9f17df31f1e&amp;amp;chksm=eaa9c392ddde4a84eaad051015f0af1bb2832eb35174d982aae1f5a0d5ef4f7371a2e8ebe0e2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你的2022年度开发者关键词，请查收&amp;gt;&amp;gt;&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;你的2022年度开发者关键词，请查收&amp;gt;&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;| &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247571091&amp;amp;idx=1&amp;amp;sn=59f966d59925222d3a535266bb3a59a5&amp;amp;chksm=eaa9ccc3ddde45d5a71e3d1b92661b88c02ae36fdd07c1cf7070a305c83eb946793cbef1d8f1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;React语境下前端DDD的长年探索经验&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;React语境下前端DDD的长年探索经验&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247570676&amp;amp;idx=1&amp;amp;sn=dbdef6eff7fee16efa6373f5caebfd36&amp;amp;chksm=eaa9cea4ddde47b25e60e32b5faeb0662481dd49a32f1a5f3fe8650da9264a54842a4e356318&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;国民级应用：微信是如何防止崩溃的？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;国民级应用：微信是如何防止崩溃的？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247570454&amp;amp;idx=2&amp;amp;sn=fe5976e862b193d03de576d0761553d9&amp;amp;chksm=eaa9ce46ddde475058a75c8830ca36d8f233758168e7ac42a7e636b307b7b46a1825599cd1be&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;从Linux零拷贝深入了解Linux-I/O&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;从Linux零拷贝深入了解Linux-I/O&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术盲盒：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568617&amp;amp;idx=1&amp;amp;sn=d3409583764c4877964765a6b774b1de&amp;amp;chksm=eaa9d6b9ddde5faff511c416033948f76b056b209df76c6eb12adfea3f618422297b9b11895b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;前端&lt;/a&gt;&lt;span&gt;&lt;strong&gt;｜&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568512&amp;amp;idx=1&amp;amp;sn=5a2e887c0ac511e9a4fe5cd68a388e48&amp;amp;chksm=eaa9d6d0ddde5fc6376f1ffcc6e7b050fefded23d5b24c5f7b801885f509df06cd53d99f0a45&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;后端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568656&amp;amp;idx=1&amp;amp;sn=98f7033418fc1fd7d019eeb18008b616&amp;amp;chksm=eaa9d740ddde5e56aa0b7df55dc2f70c65f329d37246453c2b3316356f3f84cc9f87eb6b8db4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;AI与算法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;AI与算法&lt;/a&gt;&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568672&amp;amp;idx=1&amp;amp;sn=85e4b3e1c46289058398b216edb40941&amp;amp;chksm=eaa9d770ddde5e669cfaa25c37887ae058c433e4296ca04f8ff5373184bc76d4420f1d2049a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运维｜&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;运维&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568677&amp;amp;idx=1&amp;amp;sn=e95255553777c53d38cb1e64c1c16432&amp;amp;chksm=eaa9d775ddde5e633a75d20eb484181c0e03cb6f8237a4141c599e4f13ad3af6748c5e8d1a9a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程师文化&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;工程师文化&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzI2NDU4OTExOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe97ibOIthe2pvwt1H0HqX0HVJVFK9WPNQKNsibXynR5yT5S7b45uIpzN7xeZdeJIfOibPjOflZ35rKZyw/0?wx_fmt=png&quot; data-nickname=&quot;腾讯云开发者&quot; data-alias=&quot;QcloudCommunity&quot; data-signature=&quot;腾讯云官方社区公众号，汇聚技术开发者群体，分享技术干货，打造技术影响力交流社区。&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; data-index=&quot;0&quot; data-origin_num=&quot;664&quot; data-isban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;🔹&lt;/span&gt;关注我并点亮星标🔹&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;工作日晚8点 &lt;/span&gt;看腾讯技术、学专家经验&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94245&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;点赞|分享|在看 传递好技术&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3428571428571427&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe94zy8bmYPnbKTD0kTDBhW3GbAVfG1HMK2YU7rbobopxLeEulM2GREMf3LnMlkYw2yjuwop3WNcHlg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;35&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>754c148d6eb88a7511db47082dd2857c</guid>
<title>针对于限流熔断组件 Hystrix 的基本参数和实现原理介绍分析</title>
<link>https://toutiao.io/k/ke3yssc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h1&gt;&lt;a id=&quot;_0&quot;/&gt;[每日一句]&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;也许你度过了很糟糕的一天，但这并不代表你会因此度过糟糕的一生。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;&lt;a id=&quot;_4&quot;/&gt;[温馨提示]&lt;/h1&gt; 
&lt;p&gt;承接第一篇文章&lt;a href=&quot;https://blog.csdn.net/l569590478/article/details/128714743?spm=1001.2014.3001.5501&quot;&gt;🏹【深入浅出SpringCloud原理及实战】「Netflix系列之Hystrix」针对于限流熔断组件Hystrix的基本参数和实现原理介绍分析&lt;/a&gt;&lt;/p&gt; 
 
&lt;h1&gt;&lt;a id=&quot;_15&quot;/&gt;[背景介绍]&lt;/h1&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;分布式系统的规模和复杂度不断增加，随着而来的是对分布式系统可用性的要求越来越高。在各种高可用设计模式中，【熔断、隔离、降级、限流】是经常被使用的。而相关的技术，Hystrix本身早已算不上什么新技术，但它却是最经典的技术体系！。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;Hystrix以实现熔断降级的设计，从而提高了系统的可用性。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;Hystrix是一个在调用端上，实现断路器模式，以及隔舱模式，通过避免级联故障，提高系统容错能力，从而实现高可用设计的一个Java服务组件库。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;Hystrix实现了资源隔离机制&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h1&gt;&lt;a id=&quot;_26&quot;/&gt;[熔断器状态]&lt;/h1&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;closed&lt;/strong&gt;：closed是关闭状态，服务调用方每次请求都到服务提供方；&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;open&lt;/strong&gt;：是open打开状态，意思是如果服务提供方的异常率或者是请求的并发量超过设置的阈值之后，就会开启熔断机制，开启熔断机制之后服务调用方所有的请求都不会在请求到服务提供方，而是直接使用本地的服务降级方法；&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;half-open&lt;/strong&gt;：是半打开状态，服务调用方所有的请求依然会请求到服务端，hystrix也有自我恢复机制，意思是当服务提供方的熔断机制处于打开状态时，会在开启一个时间窗口，就是一定时间后或者是下一次请求的时间大于时间窗口的时间，hystrix就会重新将这次请求再次发送到服务提供方，如果成功就将状态改为half-open状态，如果失败就继续处于开启状态，并且重新刷新时间窗口的时间。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h1&gt;&lt;a id=&quot;_34&quot;/&gt;[配置介绍]&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/Hystrix/wiki/Configuration&quot;&gt;主要参考:&lt;/a&gt; https://github.com/Netflix/Hystrix/wiki/Configuration&lt;/p&gt; 
&lt;p&gt;上一篇文章&lt;a href=&quot;https://my.oschina.net/liboware/blog/5076608&quot;&gt;🏹【Hystrix技术指南】（1）基本使用和配置说明&lt;/a&gt;主要是介绍一下相关的使用方式、以及相关的一些实战方面的配置，本篇文章会针对于配置进行具体介绍。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;Hystrix4_40&quot;/&gt;Hystrix属性的4中优先级&lt;/h2&gt; 
&lt;ol&gt;&lt;li&gt;内置全局默认值（Global default from code）&lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;如果下面3种都没有设置，默认是使用此种，后面用“默认值”代指这种。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;动态全局默认属性（Dynamic global default property）&lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;可以通过属性配置来更改全局默认值，后面用“默认属性”代指这种。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;内置实例默认值（Instance default from code）&lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;在代码中，设置的属性值，后面用“实例默认”来代指这种。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;动态配置实例属性（Dynamic instance property）&lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;可以针对特定的实例，动态配置属性值，来代替前面三种，后面用“实例属性”来代指这种。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;优先级：1 &amp;lt; 2 &amp;lt; 3 &amp;lt; 4&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;hystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;&lt;a id=&quot;_64&quot;/&gt;[命令属性]&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.strategy&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand.run()的隔离策略，有两种选项：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;THREAD — 固定大小线程池中，以单独线程执行，并发请求数受限于线程池大小。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;SEMAPHORE — 在调用线程中执行，通过信号量来限制并发量。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;默认值：THREAD（ExecutionIsolationStrategy.THREAD）&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;可选值：THREAD，SEMAPHORE&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;总结：隔离策略，默认是Thread, 可选Thread｜Semaphore&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.execution.isolation.strategy

实例属性：hystrix.command.HystrixCommandKey.execution.isolation.strategy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;


&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ExecutionIsolationStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;THREAD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ExecutionIsolationStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SEMAPHORE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.thread.timeoutInMilliseconds&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;设置调用者等待命令执行的超时限制，超过此时间，HystrixCommand被标记为TIMEOUT，并执行回退逻辑。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意：超时会作用在HystrixCommand.queue()，即使调用者没有调用get()去获得Future对象。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;默认值：&lt;strong&gt;命令执行超时时间，默认1000ms&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;默认属性: hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds

实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionTimeoutInMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.timeout.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;设置HystrixCommand.run()的执行是否有超时限制。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.execution.timeout.enabled

实例属性：hystrix.command.HystrixCommandKey.execution.timeout.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionTimeoutEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.thread.interruptOnTimeout&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand.run()的执行是否在超时发生时被中断。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;
默认属性：hystrix.command.default.execution.isolation.thread.interruptOnTimeout

实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnTimeout

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationThreadInterruptOnTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.thread.interruptOnCancel&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand.run()的执行但取消动作发生时候可以响应中断。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.execution.isolation.thread.interruptOnCancel
实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnCancel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationThreadInterruptOnCancel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.semaphore.maxConcurrentRequests&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;设置当使用ExecutionIsolationStrategy.SEMAPHORE时，HystrixCommand.run()方法允许的最大请求数。如果达到最大并发数时，后续请求会被拒绝。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;信号量应该是容器（比如Tomcat）线程池一小部分，不能等于或者略小于容器线程池大小，否则起不到保护作用。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests

实例属性：hystrix.command.HystrixCommandKey.execution.isolation.semaphore.maxConcurrentRequests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationSemaphoreMaxConcurrentRequests&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_211&quot;/&gt;&lt;strong&gt;回退方法&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;下面的属性控制HystrixCommand.getFallback()执行。这些属性对ExecutionIsolationStrategy.THREAD和ExecutionIsolationStrategy.SEMAPHORE都有效。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;fallback.isolation.semaphore.maxConcurrentRequests&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests

实例属性：hystrix.command.HystrixCommandKey.fallback.isolation.semaphore.maxConcurrentRequests

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withFallbackIsolationSemaphoreMaxConcurrentRequests&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;fallback.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.fallback.enabled

实例属性：hystrix.command.HystrixCommandKey.fallback.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withFallbackEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;Circuit_Breaker_258&quot;/&gt;断路器（Circuit Breaker）&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;设置断路器是否起作用，用来跟踪circuit的健康性，如果未达标则让request短路。默认true&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.circuitBreaker.enabled

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.requestVolumeThreshold&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置在一个滚动窗口中，打开断路器的最少请求数。&lt;/p&gt; 
 
&lt;p&gt;默认值：20&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
默认属性：hystrix.command.default.circuitBreaker.requestVolumeThreshold

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.requestVolumeThreshold

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerRequestVolumeThreshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.sleepWindowInMilliseconds&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置在回路被打开，拒绝请求到再次尝试请求并决定回路是否继续打开的时间，触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.sleepWindowInMilliseconds

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerSleepWindowInMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.errorThresholdPercentage&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置打开回路并启动回退逻辑的错误比率，错误比率阀值，如果错误率&amp;gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.circuitBreaker.errorThresholdPercentage

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.errorThresholdPercentage

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerErrorThresholdPercentage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.forceOpen&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;如果该属性设置为true，强制断路器进入打开状态，将会拒绝所有的请求，强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;该属性优先级比circuitBreaker.forceClosed高。&lt;/strong&gt;&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;
默认属性：hystrix.command.default.circuitBreaker.forceOpen

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.forceOpen

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerForceOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.forceClosed&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;如果该属性设置为true，强制断路器进入关闭状态，将会允许所有的请求，无视错误率，强制关闭熔断器 如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;
默认属性：hystrix.command.default.circuitBreaker.forceClosed

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.forceClosed

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerForceClosed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_386&quot;/&gt;请求上下文&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;requestCache.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand.getCacheKey()是否启用，由HystrixRequestCache通过请求缓存提供去重复数据功能。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.requestCache.enabled

实例属性：hystrix.command.HystrixCommandKey.requestCache.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withRequestCacheEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;requestLog.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand执行和事件是否要记录日志到HystrixRequestLog。&lt;/p&gt; 
&lt;p&gt;默认值：true&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.requestLog.enabled

实例属性：hystrix.command.HystrixCommandKey.requestLog.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withRequestLogEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;_428&quot;/&gt;压缩器属性&lt;/h3&gt; 
&lt;p&gt;下面的属性可以控制HystrixCollapser行为。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;maxRequestsInBatch&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置触发批处理执行之前，在批处理中允许的最大请求数。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.collapser.default.maxRequestsInBatch

实例属性：hystrix.collapser.HystrixCollapserKey.maxRequestsInBatch
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCollapserProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withMaxRequestsInBatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;timerDelayInMilliseconds&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置批处理创建到执行之间的毫秒数。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.collapser.default.timerDelayInMilliseconds

实例属性：hystrix.collapser.HystrixCollapserKey.timerDelayInMilliseconds
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCollapserProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withTimerDelayInMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;requestCache.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置请求缓存是否对HystrixCollapser.execute()和HystrixCollapser.queue()的调用起作用。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.collapser.default.requestCache.enabled

实例属性：hystrix.collapser.HystrixCollapserKey.requestCache.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCollapserProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withRequestCacheEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_489&quot;/&gt;线程池属性&lt;/h2&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;coreSize&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置核心线程池大小。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;默认值：10&lt;/p&gt; 
  &lt;ul&gt;&lt;li&gt;线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：&lt;/li&gt;&lt;li&gt;requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.threadpool.default.coreSize

实例属性：hystrix.threadpool.HystrixThreadPoolKey.coreSize
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixThreadPoolProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCoreSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;maximumSize&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;1.5.9新增属性，设置线程池最大值。这个是在不开始拒绝HystrixCommand的情况下支持的最大并发数。这个属性起作用的前提是设置了allowMaximumSizeToDrivergeFromCoreSize。1.5.9之前，核心线程池大小和最大线程池大小总是相同的。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;maxQueueSize&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置BlockingQueue最大的队列值。&lt;/p&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;修改SynchronousQueue和LinkedBlockingQueue需要重启。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;默认值：-1&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.threadpool.default.maxQueueSize

实例属性：hystrix.threadpool.HystrixThreadPoolKey.maxQueueSize
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixThreadPoolProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withMaxQueueSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;queueSizeRejectionThreshold&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置队列拒绝的阈值——一个人为设置的拒绝访问的最大队列值，即使maxQueueSize还没有达到。&lt;/p&gt; 
&lt;p&gt;当将一个线程放入队列等待执行时，HystrixCommand使用该属性。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意：如果maxQueueSize设置为-1，该属性不可用。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.threadpool.default.queueSizeRejectionThreshold

实例属性：hystrix.threadpool.HystrixThreadPoolKey.queueSizeRejectionThreshold
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixThreadPoolProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withQueueSizeRejectionThreshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;keepAliveTimeMinutes&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置存活时间，单位分钟。如果coreSize小于maximumSize，那么该属性控制一个线程从实用完成到被释放的时间。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.threadpool.default.keepAliveTimeMinutes

实例属性：hystrix.threadpool.HystrixThreadPoolKey.keepAliveTimeMinutes

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixThreadPoolProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withKeepAliveTimeMinutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;allowMaximumSizeToDivergeFromCoreSize&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在1.5.9中新增的属性。该属性允许maximumSize起作用。属性值可以等于或者大于coreSize值，设置coreSize小于maximumSize的线程池能够支持maximumSize的并发数，但是会将不活跃的线程返回到系统中去。（详见KeepAliveTimeMinutes）&lt;/p&gt; 
&lt;p&gt;默认值：false&lt;/p&gt; 
&lt;p&gt;默认属性：hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize&lt;/p&gt; 
&lt;p&gt;实例属性：hystrix.threadpool.HystrixThreadPoolKey.allowMaximumSizeToDivergeFromCoreSize&lt;/p&gt; 
&lt;p&gt;实例默认的设置：HystrixThreadPoolProperties.Setter()&lt;/p&gt; 
&lt;p&gt;.withAllowMaximumSizeToDivergeFromCoreSize(boolean value)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;metrics.rollingStats.timeInMilliseconds&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;p&gt;默认值：10000（毫秒）&lt;/p&gt; 
&lt;p&gt;默认属性：hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds&lt;/p&gt; 
&lt;p&gt;实例属性：hystrix.threadpool.HystrixThreadPoolKey.metrics.rollingStats.timeInMilliseconds&lt;/p&gt; 
&lt;p&gt;实例默认的设置：HystrixThreadPoolProperties.Setter()&lt;/p&gt; 
&lt;p&gt;.withMetricsRollingStatisticalWindowInMilliseconds(int value)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;metrics.rollingStats.numBuckets&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置滚动的统计窗口被分成的桶（bucket）的数目。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意：”metrics.rollingStats.timeInMilliseconds % metrics.rollingStats.numBuckets == 0&quot;必须为true，否则会抛出异常。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10&lt;/p&gt; 
&lt;p&gt;默认值：10&lt;/p&gt; 
&lt;p&gt;可能的值：任何能被metrics.rollingStats.timeInMilliseconds整除的值。&lt;/p&gt; 
&lt;p&gt;默认属性：hystrix.threadpool.default.metrics.rollingStats.numBuckets&lt;/p&gt; 
&lt;p&gt;实例属性：hystrix.threadpool.HystrixThreadPoolProperties.metrics.rollingStats.numBuckets&lt;/p&gt; 
&lt;p&gt;实例默认的设置：HystrixThreadPoolProperties.Setter()&lt;/p&gt; 
&lt;p&gt;.withMetricsRollingStatisticalWindowBuckets(int value)&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_642&quot;/&gt;其他配置属性&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt;hystrix.command.default.metrics.rollingPercentile.enabled：执行时是否enable指标的计算和跟踪，默认true&lt;/li&gt;&lt;li&gt;hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds：设置rolling percentile window的时间，默认60000&lt;/li&gt;&lt;li&gt;hystrix.command.default.metrics.rollingPercentile.numBuckets：设置rolling percentile window的numberBuckets。逻辑同上。默认6&lt;/li&gt;&lt;li&gt;hystrix.command.default.metrics.rollingPercentile.bucketSize：如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100&lt;/li&gt;&lt;li&gt;hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds 记录health 快照（用来统计成功和错误绿）的间隔，默认500ms33 Request Context 相关参数&lt;/li&gt;&lt;li&gt;hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存&lt;/li&gt;&lt;li&gt;hystrix.command.default.requestLog.enabled 记录日志到HystrixRequestLog，默认true&lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;Collapser_Properties__653&quot;/&gt;Collapser Properties 相关参数&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt;hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE&lt;/li&gt;&lt;li&gt;hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10&lt;/li&gt;&lt;li&gt;hystrix.collapser.default.requestCache.enabled 是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true&lt;/li&gt;&lt;/ul&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a9bdc704ffadff30d29ae5cac977ae1e</guid>
<title>怎样实现 T+0 的实时报表？</title>
<link>https://toutiao.io/k/ia28ukl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;T+0 的概念，运用比较广泛的是在金融领域，T（Transaction）表示交易日期，+0 就是指交易当天，+N 就代表交易的 N 天后&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在大数据、数据分析领域，也总用到这个概念，含义仍然相同，T+0 表示当天的实时数据，T+N 则表示当天的数据 N 天后才能看到&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;放到报表中 T+0 就是今天的报表就可以看到今天实时的数据，T+1 就是今天的数据，明天才能看到&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;T+0 报表的难点在哪里&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果所有数据都存在一个数据库中，那 T+0 报表其实没什么难度，直接查就是最新的实时数据&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但实际应用中，很多场景下，数据是会分开存储的，比如下图这样，由于历史数据过于庞大，为了保证业务库的性能不受影响，就只能把老的历史数据迁移到别的库去存储，这时候，如果报表需要同时分析历史数据和当前最新数据做 T+0 报表，就需要从不同的分库中同时取数，而且历史库和业务库很多时候又不是一个类型，&lt;strong&gt;怎么跨库查询取数就成了一难题&lt;/strong&gt;，&lt;strong&gt;这也正是 T+0 报表的难点所在&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果解决不了这个难题，那就只能用 ETL 等方式，定时把冷热库的数据抽取到一起，然后再出报表，那就是 T+1 甚至严重到会 T+7 了&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5740072202166066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH6Xq5egmvbeFJFPT3ibJ2icfsByXhjyOqqp1R7hVHiaqgCrSSuH0dMt6dIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;目前有什么手段&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;报表本身的多数据集&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;好一些的报表工具，其实提供了一个初级的解决方案，就是报表本身的多数据集功能，它可以直接进行跨库查询，获取最新数据，做出 T+0 报表，比如下面这样的&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2581227436823105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH695De5gya38rjDYhAp8FmOicIX4H5km9Krky5gwN5tD8aiaVgQbPyF4yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15162454873646208&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH6w2Q2DbLg8nWoBVl8ibN1zFs8ovFZk68lwQhqichw655icFdeNQY7kDkKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是报表工具计算能力有限，只能做一些初级简单的，比如上面的分组汇总，两个数据集的分组情况如果相同，或者第一个数据集包含第二个的，那可以这样做，否则分组就会错乱，就不好做了，就得用自定义数据集提前把数据合并好了&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还有一些其他复杂的计算单凭报表的计算能力也无法实现，也得用定义数据集算&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外分库的数据一般数据量非常大，全部把计算放到报表内，在性能上也不一定能保证，不是很适用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以报表工具的多源混算在简单场景下可以做出 T+0 报表，复杂情况下不能胜任，是比较初级的功能&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;数据库的跨库查询&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;数据库本身也有跨库查询的功能，比如 Oracle 的 DBLink，MySQL 的 FEDERATED 引擎，都可以进行跨库查询，也可以做到 T+0 查询，再把数据给到报表，就能做出 T+0 报表，但是这些功能都对异构数据支持的不是很好，对非关系型数据源更是无能为力，适用的场景也比较窄&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;JAVA 编码&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;这是工程师的杀手锏，没有好办法，那就敲代码呗，没有什么是代码搞不定的，一个跨库取数难不倒 JAVA, 不管你是同构异构还是非关系数据库，各种情况都能搞定&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但话又说回来，但凡有更简单的办法，谁愿意做个查询取数还得用 JAVA 实现呢&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JAVA 写起来难，算起来慢&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JAVA 这类高级语言，对结构化数据的计算支持很有限，虽然都能做，但却能力比较弱，写起来非常繁琐，简单做个求和运算都需要写数行代码的循环来实现，而报表数据源处理则大量涉及批量数据运算，采用高级语言开发时会导致动辄数百行的冗长代码，编写、调试和后续维护都会很困难，而且性能也无法保证，高手懂算法，写出来的就算的快一些，普通人写的可能就会出现性能问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JAVA 还破坏应用架构&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JAVA 代码需要和应用程序一起编译、打包，造成和应用的高度耦合，给后续维护带来困难&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每次修改，都得重新编译，就需要整个应用陪着重启甚至停机，影响应用稳定&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以 JAVA 虽然什么都可以搞定，能力很强，但却也不是一个很好的选择&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;更好的方法&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看过各种手段的不足后，我们也就明了了，更好的方案，需要它支持跨库运算，支持同构异构数据，支持各类不同数据源，支持大数据量，书写简单，性能好，不会破坏应用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有这样的方案吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;润乾报表&lt;/strong&gt;集成&lt;strong&gt;SPL 集算器&lt;/strong&gt;以后就具备了这样的能力&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4657039711191336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH66N5oIBwya1dRSQ2ktCluVRJtDfHrRicw7Y6OdRtiaW9tnlkRGtVJhf6w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;SPL&lt;/strong&gt; 是一款流行的专业的数据计算处理工具，很多项目开发商都在用，因为它不仅好用，&lt;strong&gt;而且还免费，开源&lt;/strong&gt;，是常年做项目，总需要做数据处理的工程师的好帮手&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;SPL 支持各类数据源&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;集成 SPL 后，润乾报表相当于多了一个计算层，这个计算层支持常见的各类数据源，可以同时计算来自不同数据源的数据，不管它是同构还是异构，不管你怎么分库，分到哪里，都能做到 T+0&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5613718411552346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH6GcrLMfHDThnicfr9pdroqhH8R0MKpGJOuSdxJco9q4ZxtydvNibDAx2w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;A&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=cold=db1.cursor(“select * from orders where odate&amp;lt;?”,date(now()))&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;/ 冷数据从历史库中取，昨天及以前的数据&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=hot=db2.cursor(“select * from orders where odate&amp;gt;=?”,date(now()))&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;/ 热数据从生产库中取，今天的数据&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=[cold,hot].conjx()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=A3.groups(area,customer;sum(amout):amout)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;开发简单，性能好&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;SPL 不仅可以像上面的代码一样，简单写出跨库的取数查询，比 JAVA 简单的多，它还比 SQL 写起来简单&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看个小例：&lt;strong&gt;查出各科成绩都在前 10 名的学生&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;用 SQL 写起来，比较复杂，也很难理解&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from (&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;rank&lt;/span&gt;() &lt;span class=&quot;code-snippet__keyword&quot;&gt;over&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; subject &lt;span class=&quot;code-snippet__keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; score &lt;span class=&quot;code-snippet__keyword&quot;&gt;DESC&lt;/span&gt;) ranking&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; score_table)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; ranking&amp;lt;=&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;count&lt;/span&gt;(*)=(&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;distinct&lt;/span&gt; subject) &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; score_table)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;用 SPL，则按思路过程写出计算就行，写起来简单，还容易理解，性能也比 SQL 要更好，而且在 SPL 中， 这样的高性能函数和算法还有很多，谁都可以直接用，不需要非得高手才能写出性能好的算法了&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;A&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=score_table.group(subject)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=A1.(~.rank(score).pselect@a(~&amp;lt;=10))&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=A1.(~(A2(#)).(name)).isect()&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;说到性能，还要提到开源 SPL 有自己的存储，它提供了&lt;strong&gt;高效的二进制文件存储方式&lt;/strong&gt;，文件存储具备很多优势，不仅读取效率更高，还可以有效利用文件压缩、并行等机制提速，同时还不会像数据库那样容易受到容量的限制，在一些传统的历史库无法保证计算性能和时效的情况下，甚至可以用 SPL 的二进制文件存储当做历史库来提升性能了&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;低耦合热切换&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;SPL 作为润乾报表的计算层，它编写的计算脚本是存储在报表模板里的，是解释执行的，这就避免了和应用的耦合&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;解释执行的 SPL 同时也具备了热切换的能力，不会像 JAVA 一样影响应用的稳定了&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大数据时代，数据的分库存储很常见，T+0 实时报表的需求更常见，用常规的手段来做，简单的、少量的情况还能应付，复杂，大量的时候，就需要用更好更新的技术了，润乾的 SPL 计算层，不仅可以轻松应对各类跨库实时查询，而且在开发效率和性能上也比常规手段更简单高效的多，它还开源免费，并不需要在报表以外再多加成本，另外润乾报表本身价格也很亲民，&lt;strong&gt;1W 一套，3W 一年随便用&lt;/strong&gt;，一套润乾，就把报表需求和各类数据准备的外围难题都解决了&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;感兴趣的小伙伴，请识别右侧二维码与我们联系&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;微信号｜RUNQIAN_RAQSOFT&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3dBJseibic1ccQ5icibsj5In3tQSrniaticue8OGWvoBqBSJhBibeicuGu5Nrt33yiccCtKGodgGziaQad8gHyZlG2e6ibGRA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a41ff24632d32aa34c5f120f79aad459</guid>
<title>【案例分享】如何利用京东云建设高可用业务架构</title>
<link>https://toutiao.io/k/4v1vbxo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：京东云 张久志&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本文以2022年一个实际项目为基础，来演示在京东云上构建高可用业务的整个过程。公有云及私有云客户可通过使用京东云的弹性IAAS、PAAS服务，创建高可用、高弹性、高可扩展、高安全的云上业务环境，提升业务SLA,提升运维自动化水平，降低资源成本及运维成本。有业务迁移上云需求，希望构建云上高可用业务架构的客户或对云上高可用架构规划有兴趣的读者可以一看。&lt;/p&gt;

&lt;p&gt;客户业务为典型的web应用，在京东云上创建一个通过公网IP/域名访问的高可用的web网站，包含通用应用的标准框架，包括访问接入层、APP层、缓存层、数据库层。整体业务架构设计提供可用区(AZ)级别的高可用等级。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文演示场景包括&lt;/strong&gt;单AZ出现故障导致的主机故障、数据库故障、缓存故障场景下，业务能够提供持续访问能力。并保障数据的完整性和一致性，同时，能够在无人干预的条件下，实现业务的弹性扩展，保障业务高并发的场景下有良好的响应时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本文的架构为演示架构，&lt;em&gt;并未严格遵循生产环境&lt;/em&gt;的业务性能及安全的整体规划步骤及要求，在生产环境中，至少应该对主机及CFS的存储性能进行压测，确保能够满足实际业务需求，同时，通过域名访问的web服务，建议使用WAF等安全防护产品，保障业务的入口安全。&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;1&lt;/strong&gt;、京东云高可用架构设计&lt;/h1&gt;

&lt;p&gt;业务架构以某单位的业务需求为基础，模拟其业务生产环境，规划京东云上的业务整体架构，其中，  NAT网关、负载均衡、堡垒机均创建在公网访问子网，其余主机及数据库等，创建在内部子网内。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f70e81156a5647d7a92a21a9a7fee997%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;其中应用主机使用高可用组创建， LB后端直接挂载高可用组。&lt;/p&gt;

&lt;p&gt;使用高可用组的目标是实现业务高峰期故障时，计算资源能自动加入负载均衡后端，自动化扩展业务处 理能力。减少运维干预成本。&lt;/p&gt;

&lt;h1&gt;2、&lt;strong&gt;资源需&lt;/strong&gt;&lt;strong&gt;求（所有&lt;/strong&gt;&lt;strong&gt;IP&lt;/strong&gt;&lt;strong&gt;及&lt;/strong&gt;&lt;strong&gt;URL&lt;/strong&gt;&lt;strong&gt;均调整为非真实&lt;/strong&gt;&lt;strong&gt;IP&lt;/strong&gt;&lt;strong&gt;及&lt;/strong&gt;&lt;strong&gt;URL&lt;/strong&gt;）&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb11cd1ff80c41acbc9afa80027f537a%7Etplv-k3u1fbpfcp-watermark.image?&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;3&lt;/strong&gt;、*&lt;strong&gt;&lt;em&gt;应用部&lt;/em&gt;&lt;/strong&gt;*署&lt;/h1&gt;

&lt;h2&gt;3.1 基础环境准备&lt;/h2&gt;

&lt;p&gt;业务以一个典型的wordpress的网站为例，业务容器化部署于云主机上，高可用依赖京东云的云主机高可用组，主机安装docker，并配置docker服务自动启动。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#创建应用数据目录 配置目录权限、安装docker等

 mkdir -p /wp

 chmod 777 /wp

 yum install docker vim -y

 systemctl enable docker

 systemctl start docker

 #挂载CFS文件作为应用数据目录

 yum install nfs-utils -y

 systemctl enable rpcbind    

 systemctl start rpcbind

 mount -t nfs -o vers=3 -o noresvport 10.0.0.200:/cfs /wp

#配置启动自动挂载CFS及启动服务，通过rc.local实现：

#[root@wpha0 wp]# cat /etc/rc.local

#!/bin/bash

# THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES

#

# It is highly advisable to create own systemd services or udev rules

# to run scripts during boot instead of using this file.

#

# In contrast to previous versions due to parallel execution during boot

# this script will NOT be run after all other services.

#

# Please note that you must run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure

# that this script will be executed during boot.

touch /var/lock/subsys/local

mount -t nfs -o vers=3 -o noresvport 10.0.0.200:/cfs /wp

#（说明，生产环境可在/etc/fstab挂载）

bash /root/start.sh

start.sh见以下代码

[root@wpha0 wp]# cat /root/start.sh

docker stop wordpress

sleep 3

docker rm wordpress

sleep 3

docker run -d --name=wordpress --restart=unless-stopped -p 443:443 -p 80:80 -v /wp:/var/www/html wordpress

#[root@wpha0 wp]#

#启动脚本编辑完成后，并写入rc.local后，rc.local调整成可执行，以实现启动主机运行脚本， rc.local实现了主机启动后自动挂载CFS到指定目录，然后，通过start.sh自动清除旧数据，重新拉起wordpress服务。

chmod +x /etc/rc.d/rc.local

#拉取应用所需镜像

 docker pull wordpress

#拉取镜像后，运行服务。

docker run -d --name=wordpress --restart=unless-stopped    -p 443:443 -p 80:80  -v /wp:/var/www/html  wordpress 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[]()[](&amp;lt;&amp;gt; &quot;点击并拖拽以移动&quot;)&lt;/p&gt;

&lt;p&gt;注意，这个场景下，主要调整了几个位置：&lt;/p&gt;

&lt;p&gt;1、挂载CFS为wordpress的工作目录，这样，调整页面内容以及拉起新主机后，网站内容都保持一致。相关自动挂载方式为在/etc/rc.local加入挂载命令，同时chmod +x /etc/rc.d/rc.local 把这个文件加一下可执行权限。&lt;/p&gt;

&lt;p&gt;2、需要把wp目录的权限改为777 （或docker内部的 33 tape等，不过不同版本可能有区别，改成777相对稳妥）， 否则挂载后，docker内部的wordpress无法获取目录读写权限。&lt;/p&gt;

&lt;p&gt;3、NFS挂载需要安装nfs插件 yum install nfs-utils -y 并启动rpc服务 systemctl enable rpcbind   systemctl start rpcbind&lt;/p&gt;

&lt;p&gt;WP目录为777 权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eaa8d5cd6fe34c46b0bbdb562d929d52%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;到这里基础主机环境准备完成。&lt;/p&gt;

&lt;p&gt;下一步，进行wordpress应用的配置，实现高可用可视化的演示效果。&lt;/p&gt;

&lt;h2&gt;3.2 业务侧 &lt;strong&gt;wordpress&lt;/strong&gt;配置&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;web应用使用wordpress部署。通过docker部署，并实现高可用组主机自动伸缩自动化拉起。&lt;/p&gt;

&lt;p&gt;通过docker拉取wordpress&lt;/p&gt;

&lt;p&gt;docker pull wordpress&lt;/p&gt;

&lt;p&gt;拉取镜像后&lt;/p&gt;

&lt;p&gt;docker run -d --name=wordpress --restart=unless-stopped    -p 443:443 -p 80:80  -v /wp:/var/www/html  wordpress&lt;/p&gt;

&lt;p&gt;其中/wp 是挂载的CFS，作为多个应用主机共同挂载，作为wordpress的应用的应用文件目录。&lt;/p&gt;

&lt;p&gt;启动wordpress容器，并挂载CFS目录为WP的应用目录。&lt;/p&gt;

&lt;p&gt;以上部署在3.1中已经完成。&lt;/p&gt;

&lt;p&gt;前置准备工作-负载均衡：&lt;/p&gt;

&lt;p&gt;配置一个带公网IP的负载均衡，并配置监听器，监听器后端暂时配置一个已经拉起了docker的这台主机&lt;/p&gt;

&lt;p&gt;前置准备工作-数据库：&lt;/p&gt;

&lt;p&gt;在配置网站前，需要首先在云控制台的RDS那里为wordpress创建一个账户：wordpress，并设置密码，建立一个库：wordpress（因为后续演示方案有调整，我又创建了一个新库wordpressbackup，实际正常来讲一个库就可以了），并授权wordpress库给wordpress用户。&lt;/p&gt;

&lt;p&gt;前置准备工作-redis：&lt;/p&gt;

&lt;p&gt;在控制台购买一个redis，记录redis的URL，为后续配置redis 缓存做准备。&lt;/p&gt;

&lt;p&gt;这样，基本的应用环境就绪了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过浏览器访问负载均衡(注意访问LB，不直接访问主机)的IP的80端口，即可进入wordpress的配置 页面， wordpress的配置，主要是数据库的地址以及数据库前缀的配置，输入正确的数据库的host 地址及密码即可，其余保持默认，其他依据官网手册指导保持默认配置即可。&lt;/p&gt;

&lt;p&gt;配置完成后，wordpress会自动为网站创建相关的表，并提示配置wordpress的admin以及管理密码。&lt;/p&gt;

&lt;p&gt;安装完成后，可以登录数据库查看创建的表，后续MySQL高可用演示时，也可以登录到数据库做些常规 操作，不受高可用切换影响。&lt;/p&gt;

&lt;p&gt;到此，基本的应用就安装完成了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0966498ec7a4295bdcd0562ff2fd1ee%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;配置&lt;strong&gt;redis&lt;/strong&gt;动态缓存加速：&lt;/p&gt;

&lt;p&gt;redis的角色，在这个案例里边，在wordpress里 redis 作为一个动态加速缓存使用，对加速网站访问， 减轻数据库压力起到一定作用。&lt;/p&gt;

&lt;p&gt;下载wordpress的redis插件，redis-cache。&lt;/p&gt;

&lt;p&gt;下载后通过wordpress的管理页面-plugin --addnew 直接上传，然后依据插件操作手册安装配置即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fc00a50244348f893cd1702784db988%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;安装redis-cache以后，会在/wp/wp-content/plugins 目录下生成一个 redis-cache目录。需要同时在/wp/wp- content 下生成一个 object-cache.php文件，正常来讲，需要调整一个参数host改成redis的域名即可。如果配置了密码，就需要调整这个以及redis-cache目录下的配置文件把密码配置进去，这个因为是 演示环境，redis设置 了免密，生产环境一定要设置密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c65929b92614b7d86f035a9844dd4f1%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;安装配置完成后，在管理界面的setting里会有redis的配置选项，这个和版本有关系，有些版本可能会让 在这里做参数配置。直接改文件参数效果是一样的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/813e43b27e0349ccad60bd0c1e53fd1b%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysql&lt;/strong&gt;及&lt;strong&gt;redis&lt;/strong&gt;管理及相关登录方式介绍：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MySQL的登录，没有安装client，使用了一个mysql的docker&lt;/p&gt;

&lt;p&gt;相关命令：&lt;/p&gt;

&lt;p&gt;docker run --name mysql -p 3306:3306  --restart=unless-stopped -v /root/dbackup/:/db -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7&lt;/p&gt;

&lt;p&gt;进入mysql的docker中：&lt;/p&gt;

&lt;p&gt;docker exec -it mysql bash&lt;/p&gt;

&lt;p&gt;连接wordpress使用的数据库：&lt;/p&gt;

&lt;p&gt;mysql  -h &lt;a href=&quot;http://mysql-xxxea04fc4c52.jdcloud.com&quot;&gt;mysql-xxxea04fc4c52.jdcloud.com&lt;/a&gt; -u wordpress -p&lt;/p&gt;

&lt;p&gt;use wordpressbackup;&lt;/p&gt;

&lt;p&gt;show tables;&lt;/p&gt;

&lt;p&gt;select id from wpbackup_posts;&lt;/p&gt;

&lt;p&gt;--中间因为做了多次演练和数据库切换，中间做了wordpress数据库导出和导入操作&lt;/p&gt;

&lt;p&gt;mysql 数据库导出（均在mysql的docker容器中执行命令）：&lt;/p&gt;

&lt;p&gt;mysqldump  -h  &lt;a href=&quot;http://mysql-xxxa04fc4c52.jdcloud.com&quot;&gt;mysql-xxxa04fc4c52.jdcloud.com&lt;/a&gt; -uwordpress -p --databases wordpressbackup &amp;gt;/db/wordpressbackup-0322.sql&lt;/p&gt;

&lt;p&gt;数据导入：&lt;/p&gt;

&lt;p&gt;进入数据库，&lt;/p&gt;

&lt;p&gt;use wordpressbackup;&lt;/p&gt;

&lt;p&gt;source /db/wordpressbackup-0322.sql;&lt;/p&gt;

&lt;p&gt;----redis验证&lt;/p&gt;

&lt;p&gt;redis验证，同样是没有安装client，通过docker里的命令行去连接：&lt;/p&gt;

&lt;p&gt;docker run -d --name redis --memory=1G -p 7379:6379   redis&lt;/p&gt;

&lt;p&gt;docker exec -it redis bash&lt;/p&gt;

&lt;p&gt;redis-cli -h &lt;a href=&quot;http://redis-j49rpxxx.jdcloud.com&quot;&gt;redis-j49rpxxx.jdcloud.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;登入后，查看信息：&lt;/p&gt;

&lt;p&gt;KEYS *&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;wordpress&lt;/strong&gt;配置主页显示&lt;strong&gt;hostname&lt;/strong&gt;及来源&lt;strong&gt;IP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;---让wordpress获取hostname 并在页面展示+获取访客地址，以增强演示效果，明确看到访问的实际主 机位置。&lt;/p&gt;

&lt;p&gt;为了让访问者看到访问的IP是哪个（证实高可用组的自动扩容及业务的自动拉起），需要在所使用的 theme 目录的function里加入相关代码。  /wp/wp- content/themes/twentytwentytwo/function.php&lt;/p&gt;

&lt;p&gt;[root@AG-wordpress- HA-group1-c8705-2 twentytwentytwo]# vim /wp/wp-content/themes/twentytwentytwo/function.php&lt;/p&gt;

&lt;p&gt;在里边加入以下代码，一个是show_ip函数，一个是show_hostname函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function get_the_user_ip() {
if ( ! empty( $_SERVER[&quot;HTTP_CLIENT_IP&quot;] ) ) {
//check ip from share internet
$ip = $_SERVER[&quot;HTTP_CLIENT_IP&quot;];
} elseif ( ! empty( $_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;] ) ) {
//to check ip is pass from proxy
$ip = $_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;];
} else {
$ip = $_SERVER[&quot;REMOTE_ADDR&quot;];
}
return apply_filters( &quot;wpb_get_ip&quot;, $ip );
}
add_shortcode(&quot;show_ip&quot;, &quot;get_the_user_ip&quot;);

function get_hostname()
{
     $hostname = gethostname();
          echo &quot;$hostname\n&quot;;
      return apply_filters( &quot;hostname&quot;, $hostname );
}

add_shortcode(&quot;show_hostname&quot;, &quot;get_hostname&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，在wordpress的site里加入短代码实现：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad341fbad9fd4bd4b2b8b98f65035911%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;保存后，看到页面可以显示相关的IP及hostname信息了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f82b7768e9fc429ebd29757e9f284501%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;到这里，  wordpress的应用环境配置完成。&lt;/p&gt;

&lt;p&gt;下一步配置业务的高可用环境，实现跨AZ的高可用组及主机自动弹性伸缩。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;3&lt;/strong&gt;.&lt;strong&gt;3&lt;/strong&gt; 实例模板及高可用组、&lt;strong&gt;LB&lt;/strong&gt;配置&lt;/h2&gt;

&lt;p&gt;单台主机配置完成后，重启能自动拉起应用，进行确认后， 将现有主机打一个镜像。作为高可用组的实例模板。后续LB后端的高可用组通过这个模板创建主机。&lt;/p&gt;

&lt;p&gt;其余包括数据库配置、网站数据、redis缓存配置等，均实现了服务及数据的分离，因此，在后期进行动 态弹性扩容时，使用这个模板的高可用组，可以直接拉起服务，实现动态弹性伸缩。&lt;/p&gt;

&lt;p&gt;实例模板：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5149fa2812f416091d2992f0049c7de%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7d9bbf1c75944feb7d3809ddea3f674%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;高可用组：&lt;/p&gt;

&lt;p&gt;高可用组使用制作好了wordpress的应用主机的镜像。做到高可用组自动弹性伸缩出新主机--新主机自动 拉起wordpress应用--新主机自动挂载到LB接收业务流量的模式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b7e37aa76594c32b16664419e052365%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38cdb2fdbf024bc299c808a5030f03bf%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3f97860d0ff47be8e049fced41b2fba%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LB&lt;/strong&gt;配置。&lt;/p&gt;

&lt;p&gt;LB监听器选择后端服务为高可用组，并配置健康检查。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/caf0279920b64072ab1dc5695dfc8248%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/896afa40d0d34ef8910abb267db5c765%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;高可用组挂载到LB后端以后，应用环境已经搭建完成。&lt;/p&gt;

&lt;p&gt;可以访问LB入口，访问到网站，并且会轮询到不同服务器，同时，访问单台服务器的外网IP 也可以访问网站业务：&lt;/p&gt;

&lt;p&gt;LB访问截图(2张，分别访问到了两个主机)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a67569d61eb649398bc00bdc9b7f5808%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fab3a2d83104d3fb61412ad6ae2238b%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;单台主机访问截图（直接访问单台主机IP，刷新后不会轮询主机）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/345d524519f1453cac886445997da756%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;演示环境就绪。&lt;/p&gt;

&lt;p&gt;下一步，进行破坏性演练，检验高可用环境的效果。&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;4&lt;/strong&gt;、应用演示&lt;/h1&gt;

&lt;p&gt;高可用演示脚本：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/162d3ba17cc34ee69dc11ffc162743d3%7Etplv-k3u1fbpfcp-watermark.image?&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;高可用组信息，目前LB后端挂载的为高可用组：&lt;/p&gt;

&lt;p&gt;测试页面信息（所有IP均为非真实IP）：&lt;/p&gt;

&lt;p&gt;业务入口(LB)：   &lt;a href=&quot;http://100.126.35.4/&quot;&gt;http://100.126.35.4/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;高可用组单台主机访问入口目前为：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://100.126.38.13/&quot;&gt;http://100.126.38.13/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://100.126.38.16/&quot;&gt;http://100.126.38.16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主机的高可用及自动伸缩：&lt;/p&gt;

&lt;p&gt;演示所需的一些脚本：&lt;/p&gt;

&lt;p&gt;一个是模拟生产环境，对业务主入口的LB持续访问，这个在测试过程中，一直可以访问到，不会中断。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
#for ((i=1;i&amp;lt;=10;i++))
for i in {1..15000}
 do
curl 100.126.35.4
echo $i
echo $(date +%T)
sleep 3
  done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个是模拟单机环境，对业主机入口的持续访问，这个在测试过程中，当针对单机关机时，访问会卡住。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

#for ((i=1;i&amp;lt;=10;i++))

for i in {1..15000}

 do

curl 100.126.38.16

echo $i

echo $(date +%T)

sleep 3

  done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;演示过程中，高可用组自动伸缩功能，能正常扩容出新的主机并提供业务访问。&lt;/p&gt;

&lt;p&gt;高可用组的自动伸缩，通过 stress模拟压力&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;安装stress后，直接运行（主机为2C）：&lt;/p&gt;

&lt;p&gt;stress --CPU 2&lt;/p&gt;

&lt;p&gt;通过top命令可以看到CPU被打满。&lt;/p&gt;

&lt;p&gt;过2分钟（高可用组伸缩策略配置的时间），高可用组会自动扩展一台主机，并作为高可用组的一台主机自动挂载到LB的后端，可在LB及主机界面看到自动扩容的主机。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f71ad612eda4d9b817c687bf01aa476%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在控制台将一台高可用组内主机关机，然后可见LB后端服务健康检查发现挂载的高可用组一台服务器异常，高可用组如配置最小的主机数量，则高可用组也自动扩出一台主机，继续提供服务。在此期间，流量会转发给后端正常主机，健康检查异常的主机不再接收流量，业务访问持续正常。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2520ad484806467e9ffdcb0cb0c1bb3e%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6228e2230996480fa94c354a732a6586%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PAAS&lt;/strong&gt;服务的高可用：&lt;/p&gt;

&lt;p&gt;本演示以MySQL及redis研发在底层直接杀docker，然后业务访问不中断，控制台上会出现主从切换现象在这个过程中对业务的访问不会中断。&lt;/p&gt;

&lt;p&gt;云数据库及缓存的破坏性操作，底层操作由研发操作。&lt;/p&gt;

&lt;p&gt;底层进行RDS主备切换（kill掉RDS主库），业务访问同样不会中断，研发提供截图可以看到主从切换过程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/691f3bc8a83548f69063bacc7cb844ac%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eae7e8dc0db94ef0b40d3d97103c73c4%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本文实际部署环境为京东为客户搭建的私有云环境（JDSTACK），公有云与私有云为相同技术栈，搭建及验证过程相似。限于篇幅，redis验证部分及主机可访问性脚本结果未截图，感兴趣的读者可自行在云上通过本文指引过程搭建验证。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>86fe9dcefd2c00ae87a0919db65c9a74</guid>
<title>MySQL 数据同步 Elasticsearch  4个 方案！</title>
<link>https://toutiao.io/k/xov50ug</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;大家好，我是老三，最近看到一篇文章，实战抓包，让我觉得对https有更了深的理解，给大家分享一下。&lt;/p&gt;&lt;p&gt;有位读者问起一个奇怪的事情，他说他想抓一个&lt;code&gt;baidu.com&lt;/code&gt;的数据包，体验下看包的乐趣。&lt;/p&gt;&lt;p&gt;但却发现“&lt;strong&gt;抓不到&lt;/strong&gt;”，这就有些奇怪了。&lt;/p&gt;&lt;p&gt;我来还原下他的操作步骤。&lt;/p&gt;&lt;p&gt;首先，通过&lt;code&gt;ping&lt;/code&gt;命令，获得访问百度时会请求哪个IP。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; ping baidu.com&lt;br/&gt;PING baidu.com (&lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt;) &lt;span&gt;56&lt;/span&gt;(&lt;span&gt;84&lt;/span&gt;) bytes of &lt;span&gt;data&lt;/span&gt;.&lt;br/&gt;&lt;span&gt;64&lt;/span&gt; bytes from &lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt; (&lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt;): icmp_seq=&lt;span&gt;1&lt;/span&gt; ttl=&lt;span&gt;49&lt;/span&gt; time=&lt;span&gt;30.6&lt;/span&gt; ms&lt;br/&gt;&lt;span&gt;64&lt;/span&gt; bytes from &lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt; (&lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt;): icmp_seq=&lt;span&gt;2&lt;/span&gt; ttl=&lt;span&gt;49&lt;/span&gt; time=&lt;span&gt;30.6&lt;/span&gt; ms&lt;br/&gt;&lt;span&gt;64&lt;/span&gt; bytes from &lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt; (&lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt;): icmp_seq=&lt;span&gt;3&lt;/span&gt; ttl=&lt;span&gt;49&lt;/span&gt; time=&lt;span&gt;30.6&lt;/span&gt; ms&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从上面的结果可以知道请求&lt;code&gt;baidu.com&lt;/code&gt;时会去访问&lt;code&gt;39.156.66.10&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;于是用下面的&lt;code&gt;tcpdump&lt;/code&gt;命令进行抓包，大概的意思是抓&lt;code&gt;eth0&lt;/code&gt;网卡且&lt;code&gt;ip&lt;/code&gt;为&lt;code&gt;39.156.66.10&lt;/code&gt;的网络包，保存到&lt;code&gt;baidu.pcap&lt;/code&gt;文件中。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; tcpdump &lt;span&gt;-i&lt;/span&gt; eth0 host &lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt; &lt;span&gt;-w&lt;/span&gt; baidu.pcap&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时在浏览器中打开&lt;code&gt;baidu.com&lt;/code&gt;网页。或者在另外一个命令行窗口，直接用&lt;code&gt;curl&lt;/code&gt;命令来模拟下。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; &lt;span&gt;curl&lt;/span&gt; &lt;span&gt;&#x27;https://baidu.com&#x27;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;按理说，&lt;strong&gt;访问baidu.com的数据包肯定已经抓下来了&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;然后停止抓包。&lt;/p&gt;&lt;p&gt;再用&lt;code&gt;wireshark&lt;/code&gt;打开&lt;code&gt;baidu.pcap&lt;/code&gt;文件，在过滤那一栏里输入&lt;code&gt;http.host == &quot;baidu.com&quot;&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;此时发现，一无所获。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22014925373134328&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCr3fo1ukjOibqXStCMs21EqsCvzzH7kB9CoKDwgLZl5IK8XKhahxuibGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1608&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;在wireshark中搜索baidu的包，发现一无所获&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这是为啥？&lt;/p&gt;&lt;p&gt;到这里，有经验的小伙伴，其实已经知道问题出在哪里了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;为什么没能抓到包&lt;/h2&gt;&lt;p&gt;这其实是因为他访问的是HTTPS协议的baidu.com。HTTP协议里的Host和实际发送的request body都会被加密。&lt;/p&gt;&lt;p&gt;正因为被加密了，所以没办法通过&lt;code&gt;http.host&lt;/code&gt;进行过滤。&lt;/p&gt;&lt;p&gt;但是。&lt;/p&gt;&lt;p&gt;虽然加密了，如果想筛选还是可以筛的。&lt;/p&gt;&lt;p&gt;HTTPS握手中的Client Hello阶段，里面有个扩展&lt;code&gt;server_name&lt;/code&gt;，会记录你想访问的是哪个网站，通过下面的筛选条件可以将它过滤出来。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;  tls.handshake.extensions_server_name == &lt;span&gt;&quot;baidu.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9059334298118669&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCggGplcUjOW6NAIv3untzR7kM4T1U5ggxia4Qkh5WMj5Agd4xWd1CrHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1382&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;通过tls的扩展server_name可以搜索到baidu的包&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;此时选中其中一个包，点击右键，选中&lt;code&gt;Follow-TCP Stream&lt;/code&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4402224281742354&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCnVkRwxOibusnLUe2DBZsyeqRIicoue0vPYyNuibVvQEEqsYNmZJZ5JR9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2158&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;右键找到tcp 流&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这个TCP连接的其他相关报文全都能被展示出来。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6685689201053556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCibXOKeaPF230PzQIfuJianK8JVJ9OwMY81zZicoicKOICz6nGZUo39Ra9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2278&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;HTTPS抓包&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;从截图可以看出，这里面完整经历了&lt;strong&gt;TCP握手&lt;/strong&gt;和&lt;strong&gt;TLS加密握手&lt;/strong&gt;流程，之后就是&lt;strong&gt;两段加密信息&lt;/strong&gt;和&lt;strong&gt;TCP挥手流程&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;可以看出18号和20号包，一个是从端口56028发到443，一个是443到56028的回包。&lt;/p&gt;&lt;p&gt;一般来说，像&lt;code&gt;56028&lt;/code&gt;这种比较大且没啥规律的数字，都是&lt;strong&gt;客户端随机生成的端口号&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;而&lt;code&gt;443&lt;/code&gt;，则是HTTPS的服务器端口号。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;HTTP用的是80端口，如果此时对着80端口抓包，也会抓不到数据。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;粗略判断，18号和20号包分别是客户端请求&lt;code&gt;baidu.com&lt;/code&gt;的请求包和响应包。&lt;/p&gt;&lt;p&gt;点进去看会发现&lt;strong&gt;URL和body都被加密了&lt;/strong&gt;，一无所获。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么问题就来了。有没有办法解密里面的数据呢？&lt;/p&gt;&lt;p&gt;有办法。我们来看下怎么做。&lt;/p&gt;&lt;h2&gt;解密数据包&lt;/h2&gt;&lt;p&gt;还是先执行tcpdump抓包&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; tcpdump &lt;span&gt;-i&lt;/span&gt; eth0 host &lt;span&gt;39.156&lt;/span&gt;.&lt;span&gt;66.10&lt;/span&gt; &lt;span&gt;-w&lt;/span&gt; baidu.pcap&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在另外一个命令行窗口下执行下面的命令，&lt;strong&gt;目的是将加密的key导出，并给出对应的导出地址&lt;/strong&gt;是&lt;code&gt;/Users/xiaobaidebug/ssl.key&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; export SSLKEYLOGFILE=/Users/xiaobaidebug/ssl.key&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在同一个命令行窗口下，继续执行curl命令或用命令行打开chrome浏览器。&lt;strong&gt;目的是为了让curl或chrome继承这个环境变量。&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; &lt;span&gt;curl&lt;/span&gt; &lt;span&gt;&#x27;https://baidu.com&#x27;&lt;/span&gt;&lt;br/&gt;或者&lt;br/&gt;&lt;span&gt;$&lt;/span&gt; open &lt;span&gt;-a&lt;/span&gt; Google\ Chrome &lt;span&gt;#在mac里打开chrome浏览器&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时会看到在&lt;code&gt;/Users/xiaobaidebug/&lt;/code&gt;下会多了一个&lt;code&gt;ssl.key&lt;/code&gt;文件。&lt;/p&gt;&lt;p&gt;这时候跟着下面的操作修改&lt;code&gt;wireshark&lt;/code&gt;的配置项。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6606741573033708&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwC27aib4vvXUvPuLkkqSuRqzBEKjjU6ibbwqfibc0e1KD4atHhvdmFLicxvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;890&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;打开wireshark的配置项&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;找到Protocols之后，使劲往下翻，找到&lt;code&gt;TLS&lt;/code&gt;那一项。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4778523489932886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCY1AOFH9El2xntd1s7qfQsTlVASdJDwVHORL3nic04H68oiaD3pfQibsaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1490&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;在配置项中找到Protocols&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;将导出的&lt;code&gt;ssl.key&lt;/code&gt;文件路径输入到这里头。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5875139353400223&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCQhUsUMicGdmK4kQ6tz8GOgp7KdyGIdVxQg3QmhW0j3iaaH6w7Sz7Y2UQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1794&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;在Protocols中找到TLS那一栏&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;点击确定后，就能看到&lt;strong&gt;18号和20号数据包已经被解密&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6542713567839196&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwClnA4gzqhPtiaVkMssKkCMvkEa1WVWJGbQhSpUK6AibyUly3WchXJOoRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1990&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;解密后的数据包内容&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;此时再用&lt;code&gt;http.host == &quot;baidu.com&quot;&lt;/code&gt;，就能过滤出数据了。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22961104140526975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCUoQ8olJPPMWUEep0TpTFHLlND4xgCiaibDs9k1CmGqrzRick0UBOPYmgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1594&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;解密后的数据包中可以过滤出baidu的数据包&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;到这里，其实&lt;strong&gt;看不了数据包的问题&lt;/strong&gt;就解决了。&lt;/p&gt;&lt;p&gt;但是，新的问题又来了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ssl.key文件是个啥？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这就要从HTTPS的加密原理说起了。&lt;/p&gt;&lt;h3&gt;HTTPS握手过程&lt;/h3&gt;&lt;p&gt;HTTPS的握手过程比较繁琐，我们来回顾下。&lt;/p&gt;&lt;p&gt;先是建立TCP连接，毕竟HTTP是基于TCP的应用层协议。&lt;/p&gt;&lt;p&gt;在TCP成功建立完协议后，就可以开始进入HTTPS阶段。&lt;/p&gt;&lt;p&gt;HTTPS可以用TLS或者SSL啥的进行加密，下面我们以&lt;code&gt;TLS1.2&lt;/code&gt;为例。&lt;/p&gt;&lt;p&gt;总的来说。整个加密流程其实分为&lt;strong&gt;两阶段&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一阶段&lt;/strong&gt;是TLS四次握手，这一阶段主要是利用&lt;strong&gt;非对称加密&lt;/strong&gt;的特性各种交换信息，最后得到一个&quot;会话秘钥&quot;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二阶段&lt;/strong&gt;是则是在第一阶段的&quot;会话秘钥&quot;基础上，进行&lt;strong&gt;对称加密&lt;/strong&gt;通信。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCbaBD1Rgd5WGSPFKxwm3MjIGMCbXEiczk8cib8j7o0Jktl3kgWB2OwfjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4800&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;TLS四次握手&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们先来看下第一阶段的TLS四次握手是怎么样的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一次握手&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二次握手&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三次握手&lt;/strong&gt;：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• &lt;code&gt;Client Key Exchange&lt;/code&gt;: 此时客户端再生成&lt;strong&gt;一个随机数&lt;/strong&gt;，叫 &lt;code&gt;pre_master_key &lt;/code&gt;。从第二次握手的&lt;strong&gt;服务器证书&lt;/strong&gt;里取出服务器公钥，用公钥加密 &lt;code&gt;pre_master_key&lt;/code&gt;，发给服务器。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• &lt;code&gt;Change Cipher Spec&lt;/code&gt;: 客户端这边&lt;strong&gt;已经拥有三个随机数&lt;/strong&gt;：客户端随机数，服务器随机数和pre_master_key，用这三个随机数进行计算得到一个&quot;&lt;strong&gt;会话秘钥&lt;/strong&gt;&quot;。此时客户端通知服务端，后面会用这个会话秘钥进行对称机密通信。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• &lt;code&gt;Encrypted Handshake Message&lt;/code&gt;：客户端会把迄今为止的通信数据内容生成一个摘要，用&quot;&lt;strong&gt;会话秘钥&lt;/strong&gt;&quot;加密一下，发给服务器做校验，此时客户端这边的握手流程就结束了，因此也叫&lt;strong&gt;Finished报文&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;第四次握手&lt;/strong&gt;：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• &lt;code&gt;Change Cipher Spec&lt;/code&gt;：服务端此时拿到客户端传来的 &lt;code&gt;pre_master_key&lt;/code&gt;（虽然被服务器公钥加密过，但服务器有私钥，能解密获得原文），集齐三个随机数，跟客户端一样，用这三个随机数通过同样的算法获得一个&quot;&lt;strong&gt;会话秘钥&lt;/strong&gt;&quot;。此时服务器告诉客户端，后面会用这个&quot;会话秘钥&quot;进行加密通信。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• &lt;code&gt;Encrypted Handshake Message&lt;/code&gt;：跟客户端的操作一样，将迄今为止的通信数据内容生成一个摘要，用&quot;&lt;strong&gt;会话秘钥&lt;/strong&gt;&quot;加密一下，发给客户端做校验，到这里，服务端的握手流程也结束了，因此这也叫&lt;strong&gt;Finished报文&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;四次握手中，客户端和服务端最后都拥有&lt;strong&gt;三个随机数&lt;/strong&gt;，他们很关键，我特地加粗了表示。&lt;/p&gt;&lt;p&gt;第一次握手，产生的客户端随机数，叫&lt;code&gt;client random&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;第二次握手时，服务器也会产生一个服务器随机数，叫&lt;code&gt;server random&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;第三次握手时，客户端还会产生一个随机数，叫&lt;code&gt;pre_master_key&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;这三个随机数共同构成最终的&lt;strong&gt;对称加密秘钥&lt;/strong&gt;，也就是上面提到的&quot;&lt;strong&gt;会话秘钥&lt;/strong&gt;&quot;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCibY2A20oUu6XuKFnWvHYqcia7XKxb8iaNRzsE7Lb7uv2VJCX6p4d1PtSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2700&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;三个随机数生成对称秘钥&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;你可以简单的认为，&lt;strong&gt;只要知道这三个随机数，你就能破解HTTPS通信。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;而这三个随机数中，&lt;code&gt;client random&lt;/code&gt; 和 &lt;code&gt;server random&lt;/code&gt; 都是&lt;strong&gt;明文&lt;/strong&gt;的，谁都能知道。&lt;strong&gt;而&lt;code&gt;pre_master_key&lt;/code&gt;却不行，它被服务器的公钥加密过，只有客户端自己，和拥有对应服务器私钥的人能知道。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;所以问题就变成了，&lt;strong&gt;怎么才能得到这个&lt;code&gt;pre_master_key&lt;/code&gt;？&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;怎么得到pre_master_key&lt;/h2&gt;&lt;p&gt;服务器私钥不是谁都能拿到的，所以问题就变成了，&lt;strong&gt;有没有办法从客户端那拿到这个&lt;code&gt;pre_master_key&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;有的。&lt;/p&gt;&lt;p&gt;客户端在使用HTTPS与服务端进行数据传输时，是需要先基于TCP建立HTTP连接，然后再调用客户端侧的TLS库（OpenSSL、NSS）。触发TLS四次握手。&lt;/p&gt;&lt;p&gt;这时候如果加入环境变量SSLKEYLOGFILE就可以干预TLS库的行为，让它输出一份含有&lt;code&gt;pre_master_key&lt;/code&gt;的文件。这个文件就是我们上面提到的&lt;code&gt;/Users/xiaobaidebug/ssl.key&lt;/code&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.53&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwC48iahhIISwRmdLbZsMeoek4FHkZomIIdnozia5EMsVh2unjNpyEkM1Sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;将环境变量注入到curl和chrome中&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;但是，虽然TLS库支持导出key文件。但前提也是，上层的应用程序在调用TLS库的时候，支持通过&lt;code&gt;SSLKEYLOGFILE&lt;/code&gt;环境触发TLS库导出文件。实际上，也&lt;strong&gt;并不是所有应用程序都支持将SSLKEYLOGFILE&lt;/strong&gt;。只是目前常见的curl和chrome浏览器都是支持的。&lt;/p&gt;&lt;h2&gt;SSLKEYLOGFILE文件内容&lt;/h2&gt;&lt;p&gt;再回过头来看&lt;code&gt;ssl.key&lt;/code&gt;文件里的内容。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# SSL/TLS secrets log file, generated by NSS&lt;/span&gt;&lt;br/&gt;CLIENT_RANDOM &lt;span&gt;5709&lt;/span&gt;aef8ba36a8eeac72bd6f970a74f7533172c52be41b200ca9b91354bd662b &lt;span&gt;09&lt;/span&gt;d156a5e6c0d246549f6265e73bda72f0d6ee81032eaaa0bac9bea362090800174e0effc93b93c2ffa50cd8a715b0f0&lt;br/&gt;CLIENT_RANDOM &lt;span&gt;57&lt;/span&gt;d269386549a4cec7f91158d85ca1376a060ef5a6c2ace04658fe88aec48776 &lt;span&gt;48&lt;/span&gt;c16429d362bea157719da5641e2f3f13b0b3fee2695ef2b7cdc71c61958d22414e599c676ca96bbdb30eca49eb488a&lt;br/&gt;CLIENT_RANDOM &lt;span&gt;5&lt;/span&gt;fca0f2835cbb5e248d7b3e75180b2b3aff000929e33e5bacf5f5a4bff63bbe5 &lt;span&gt;424&lt;/span&gt;e1fcfff35e76d5bf88f21d6c361ee7a9d32cb8f2c60649135fd9b66d569d8c4add6c9d521e148c63977b7a95e8fe8&lt;br/&gt;CLIENT_RANDOM be610cb1053e6f3a01aa3b88bc9e8c77a708ae4b0f953b2063ca5f925d673140 c26e3cf83513a830af3d3401241e1bc4fdda187f98ad5ef9e14cae71b0ddec85812a81d793d6ec934b9dcdefa84bdcf3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里有三列。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一列&lt;/strong&gt;是CLIENT_RANDOM，意思是接下来的&lt;strong&gt;第二列&lt;/strong&gt;就是&lt;strong&gt;客户端随机数&lt;/strong&gt;，再接下来的&lt;strong&gt;第三列&lt;/strong&gt;则是&lt;code&gt;pre_master_key&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;但是问题又来了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这么多行，wireshark怎么知道用哪行的pre_master_key呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;wireshark&lt;/code&gt;是可以获得数据报文上的&lt;code&gt;client random&lt;/code&gt;的。&lt;/p&gt;&lt;p&gt;比如下图这样。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6851106639839034&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCOYzB4M6qFotOibQGxsMOa6rQMRR90ic1hDvDmvkv1QuM4PwABMDsvG2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1988&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;Client Hello 里的客户端随机数&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;注意上面的客户端随机数是以 &lt;code&gt;&quot;bff63bbe5&quot;&lt;/code&gt;结尾的。&lt;/p&gt;&lt;p&gt;同样，还能在数据报文里拿到&lt;strong&gt;server random&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7634989200863931&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCTRrKwUrAlNcWd39GBKYMlc6mzkU61dUEnCsvSVvcY52ETWrsiaKFLIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1852&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;找到server random&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;此时将&lt;code&gt;client random&lt;/code&gt;放到ssl.key的第二列里挨个去做匹配。&lt;/p&gt;&lt;p&gt;就能找到对应的那一行记录。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15858585858585858&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIialv6kg0JthaZDYINaceCvwCS1Od4bgLkMv2XTotWCL6R0LiabBpvYSTF7tLVBO2KicOcoyX6rRBN2wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1980&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;ssl.key里的数据&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;注意第二列的那串字符串，也是以 &lt;code&gt;&quot;bff63bbe5&quot;&lt;/code&gt;结尾的，它其实就是前面提到的&lt;code&gt;client random&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;再取出这一行的&lt;strong&gt;第三列&lt;/strong&gt;数据，就是我们想要的&lt;code&gt;pre_master_key&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;那么这时候&lt;code&gt;wireshark&lt;/code&gt;就集齐了三个随机数，此时就可以计算得到&lt;strong&gt;会话秘钥&lt;/strong&gt;，通过它对数据进行解密了。&lt;/p&gt;&lt;p&gt;反过来，正因为需要客户端随机数，才能定位到&lt;code&gt;ssl.key&lt;/code&gt;文件里对应的&lt;code&gt;pre_master_key&lt;/code&gt;是哪一个。而只有TLS第一次握手（&lt;code&gt;client hello&lt;/code&gt;）的时候才会有这个随机数，所以如果你想用解密HTTPS包，就必须将TLS四次握手能抓齐，才能进行解密。如果连接早已经建立了，数据都来回传好半天了，这时候你再去抓包，是没办法解密的。&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• 文章开头通过抓包baidu的数据包，展示了用wireshark抓包的简单操作流程。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• HTTPS会对HTTP的URL和Request Body都进行加密，因此直接在&lt;code&gt;filter栏&lt;/code&gt;进行过滤&lt;code&gt;http.host == &quot;baidu.com&quot;&lt;/code&gt;会一无所获。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• HTTPS握手的过程中会先通过非对称机密去交换各种信息，其中就包括3个随机数，再通过这三个随机数去生成对称机密的会话秘钥，后续使用这个会话秘钥去进行对称加密通信。如果能获得这三个随机数就能解密HTTPS的加密数据包。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 三个随机数，分别是客户端随机数（client random），服务端随机数（server random）以及pre_master_key。前两个，是明文，第三个是被服务器公钥加密过的，在客户端侧需要通过SSLKEYLOGFILE去导出。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 通过设置SSLKEYLOGFILE环境变量，再让curl或chrome会请求HTTPS域名，会让它们在调用TLS库的同时导出对应的sslkey文件。这个文件里包含了三列，其中最重要的是第二列的client random信息以及第三列的pre_master_key。第二列client random用于定位，第三列pre_master_key用于解密。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;参考资料&lt;/h2&gt;&lt;p&gt;极客时间 -《网络排查案例课》&lt;/p&gt;&lt;h4/&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzkwODE5ODM0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWdFLJg0sAOqwHB1mb24icMADUgxm1qZQft5aN3H37NAmQnOvpGB7J9JVHxC6NSiacxbBP1DYdhIAeyA/0?wx_fmt=png&quot; data-nickname=&quot;三分恶&quot; data-alias=&quot;Fighter3FullStack&quot; data-signature=&quot;CSDN博客专家、优质创作者，华为云云享专家；肝过外包、混过国企，目前在一家跨境电商搬砖；写过诗，打过拳，佛系小码农。认真讲技术，随性侃人生，关注我，我们一起走的更远。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>