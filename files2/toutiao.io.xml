<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ff4f19069d80a8c8019636036493a4fe</guid>
<title>流程引擎的架构设计</title>
<link>https://toutiao.io/k/3johyl2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h3&gt;1 什么是流程引擎&lt;/h3&gt;

&lt;p&gt;流程引擎是一个底层支撑平台，是为提供流程处理而开发设计的。流程引擎和流程应用，以及应用程序的关系如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/195d2868-2dcc-45f0-98d6-486ee5b18f4f20220721190151.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;常见的支撑场景有：Workflow、BPM、流程编排等。本次分享，主要从BPM流程引擎切入，介绍流程引擎的架构设计方法。&lt;/p&gt;

&lt;h4&gt;1.1 什么是流程&lt;/h4&gt;

&lt;p&gt;简单来说，流程就是一系列活动的组合。比如，用于企业办公的OA系统中，就存在大量的申请审批类的流程。在生产制造业，有大量的从销售端的订单，到生产制造，再到签收回款的生产销售流程。在机器学习领域，有亚马逊AWS Sagemaker的大数据处理、机器学习的应用。综上，流程是一个概念，在和具体实现结合时，就产生了不同的流程产品，如DevOps、Spring Data Stream等。&lt;br/&gt;
在流程实现方面，主要可以分为2种实现方式，一种是用代码实现，比如：用代码实现一个加班申请，那么就要自己对接SSO进行单点登录，通过接口拿到发起人和审批人的信息，同时保存表单数据。另一种方式是使用流程引擎来实现，流程引擎对接应用场景所需数据，如加班申请，流程引擎对接SSO、OU、审批人配置、权限等，实现这样一个流程，只需要关心流程配置、流程节点和流程表单即可，流程流转以及流程的数据处理，都通过流程引擎来完成。&lt;br/&gt;
流程引擎可以快速落地流程实现，这也是流程引擎存在的价值。&lt;/p&gt;

&lt;h4&gt;1.2 什么是引擎&lt;/h4&gt;

&lt;p&gt;一般而言，引擎是一个程序或一套系统的支持部分。常见的程序引擎有游戏引擎、搜索引擎、杀毒引擎等。引擎是脱离具体业务场景的某一类业务场景的高度抽象和封装。&lt;br/&gt;
比如，某OA公司，封装了一套审批用的workflow，实施人员只需要配置流程和表单即可交付项目。再比如，美国某公司做了一个AI引擎做NBA（Next Best Action）推荐，封装了推荐领域的常用算法，在不同的场景自动选择和组合多种算法，进行智能推荐。&lt;/p&gt;

&lt;h4&gt;1.3 流程设计器&lt;/h4&gt;

&lt;p&gt;流程设计器是流程和引擎的连接方，用户通过流程设计器，将某种layout和rule固化成某种流程，然后通过数据和数据上下文，使用流程引擎自动按照某种固化的流程进行执行。&lt;br/&gt;
我将目前见到的流程设计器的理论基础，分为以下三类：1，自定义系；2，UML中的活动图系；3，BPMN系。&lt;/p&gt;

&lt;p&gt;1.3.1 自定义系&lt;/p&gt;

&lt;p&gt;用于Sagemaker等场景的AWS Step Function（自定义流程节点）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/2ab8e767-603b-49ef-a771-7786e96168ff20220721190227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1.3.2 UML Activity Diagram&lt;/p&gt;

&lt;p&gt;Flowportal BPM的流程设计器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/3a365416-02f9-4eea-9b93-f587a21be48920220721190240.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1.3.3 BPMN系&lt;/p&gt;

&lt;p&gt;activiti的流程设计器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/e410cbc3-a518-49ba-a968-fed123bc093d20220721190253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;炎黄盈动的流程设计器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/a1d01ca2-1ade-44fd-a776-79ff3dbb5ca620220721190307.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;题外话：炎黄盈动的流程设计器，和processon中的流程设计器界面几乎一样，因为本质上是一家的。&lt;/p&gt;

&lt;h3&gt;2 流程引擎的应用&lt;/h3&gt;

&lt;h4&gt;2.1 Workflow&lt;/h4&gt;

&lt;p&gt;工作流管理联盟(Workflow Management Coalition，WfMC)作为工作流管理的标准化组织而成立。&lt;br/&gt;
WfMC对工作流给出定义为：工作流是指一类能够完全自动执行的经营过程，根据一系列过程规则，将文档、信息或任务在不同的执行者之间进行传递与执行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/d8cee1d5-9a52-450b-8ddc-7f325551fccd20220721190516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在workflow中，流程引擎主要用于支撑流程审批和数据流转，应用场景非常广泛。&lt;br/&gt;
国外产品（开源或商用）通常需求和操作比较简单，不会有国内的需求那么复杂。国内的产品，经历了众多客户的锤炼，功能目前都比较强大。&lt;br/&gt;
一般而言，workflow使用场景最多的是OA产品。在OA办公中，包含了企业办公中的大量元素，这些元素足够形成特定的产品，比如门户系统、移动办公。在OA的项目落地过程中，结合行业、业务侧重点又可以形成行业解决方案和专题方案。&lt;br/&gt;
以下是某OA公司产品和解决方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/f8415b52-c267-4a7b-9bd1-94805353ed8f20220721190530.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;2.2 BPM（Business Process Management）&lt;/h4&gt;

&lt;p&gt;Workflow主要是解决审批和数据流转，而BPM主要是解决端到端、信息孤岛等问题而存在的。大多数用BPM产品的客户，都是在BPM基础上进行系统搭建，比如在BPM上面搭建OA、CRM、HR等系统。&lt;br/&gt;
BPM的使用场景，比Workflow更广泛，BPM产品中包含大量的和第三方系统交互的组件和自定义SQL、代码组件。比如，BPM系统中的文件触发器，可以在海关等交互场景下，通过监控FTP服务器中的文件，自动触发流程实例；可以通过定时器Timer，自动每日执行数据同步，并通过Mail节点将同步结果通知到相关运营成员等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/44faa3fb-8318-4d89-913d-59871c5712d120220721190548.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/70f7932f-0556-4d31-83ba-a67eeee4e77820220721190554.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;BPM的应用，可以按照执行前、执行中和执行后来划分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/fec79a78-4c77-4243-9599-a1696aa6fd3920220721190608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;2.3 流程编排&lt;/h4&gt;

&lt;p&gt;流程编排是脱离流程业务领域的更高一层抽象，使用方可以通过流程编排系统，结合自己的业务场景进行业务定制。比如，可以将相关业务代码，封装成function，然后通过云厂商平台的FAAS平台，将不同业务的function进行关联和调度，从而完成某项任务。&lt;/p&gt;

&lt;h3&gt;3 流程引擎的架构设计&lt;/h3&gt;

&lt;p&gt;鉴于一些朋友可能没有使用和接触过流程引擎，先介绍流程引擎的组成单元，再介绍基于某个BPM产品的项目是如何进行开发的。我们通过BPM项目开发，对流程引擎的作用有个初步的认识。&lt;/p&gt;

&lt;h4&gt;3.1 BPM流程引擎的组成单元&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; 组织、角色、用户、成员的组织架构托管；&lt;/li&gt;
&lt;li&gt; 流程资源文件的配置、校验、存储和执行，对不同的流程节点，流程引擎自动结合配置、数据处理其对应的业务逻辑，流程数据自动处理；&lt;/li&gt;
&lt;li&gt; 表单配置、数据绑定，表单数据的根据流程配置自动处理；&lt;/li&gt;
&lt;li&gt; 通用的数据接口；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.1.1 组织架构的设计&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/4ffe1507-bffb-444d-9775-5808a2c26be820220721200058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.1.2 流程设计器&lt;/p&gt;

&lt;p&gt;流程设计器包含左侧的分组节点列表，和右侧的画布。左侧的节点可以如下进行设计。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/0d602304-395f-43f0-bb01-62b3ad6ec4bd20220721200121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题：对于一个XML或JSON格式的流程图，如何进行解析？&lt;/strong&gt;&lt;br/&gt;
不同的节点，按照不同的业务场景，配置不同的配置项。比如，对于Human Node需要配置审批人，配置审批环节的展示表单，审批环节能够修改哪些字段，哪些字段的修改要进行留痕等。&lt;/p&gt;

&lt;p&gt;3.1.3 表单设计器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/e9d24917-afd7-453d-8bab-979f62e7e9da20220721200134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/bcd0a065-08c3-4bdf-a9c9-ff7c7998e54620220721200147.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这种是按照表单相关数据表，生成出一个表单，然后对表单字段进行配置和数据绑定。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/5b084e8d-e3e3-4696-8a2d-edfb5e0bc64a20220721200159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/f3715735-d51a-4b69-9bc5-4b916eb3cb1720220721200211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这种是Drag&amp;amp;Drop控件，然后配置控件的属性，如绑定字段等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/8a309588-e3ba-480a-aa05-8b05b12878d920220721200228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这种是Drag&amp;amp;Drop控件，无需关联数据库表字段的表单&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/6654a811-1f7c-41f3-80e0-938f6a35b0a220220721200238.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;数据表生成表单的概要流程如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/a9ab5820-b2a7-4419-9ad2-798f333b8e0d20220721200247.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;拖拽控件绑定数据表字段的概要流程如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/1a15c80c-37ab-4998-9237-cdec121466dd20220721200425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;拖拽控件无需绑定数据表字段的概要流程。使用NoSQL的Document记录或使用RDS提供的JSON类型进行保存会比较方便。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/5eb984cb-f644-4e53-a0a2-78ba45dfc3df20220721200435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.1.4 接口设计&lt;/p&gt;

&lt;p&gt;结合Activity的接口设计，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/ec165791-90b7-449a-b727-7aea61df8fce20220721200613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一些系统在创建一个流程任务的时候，要先按照流程模板先创建一个应用示例，再关联发起人和备注，调用RuntimeService，执行到StartNode，这类设计因人而异，这么做略显繁琐。&lt;/p&gt;

&lt;h4&gt;3.2 基于流程引擎的项目开发实践&lt;/h4&gt;

&lt;p&gt;3.2.1 流程项目实践流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 确定组织架构&lt;/li&gt;
&lt;li&gt; 确定流程，包括流程布局、审批人设置、权限&lt;/li&gt;
&lt;li&gt; 确定表单信息（字段、类型、数据源、校验规则）和表单样式&lt;/li&gt;
&lt;li&gt; 确定页面布局、样式、数据字段、搜索、导入、导出&lt;/li&gt;
&lt;li&gt; 报表&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.2.2 组织架构&lt;/p&gt;

&lt;p&gt;组织架构实现，有两种方法，一种是按照维度进行数据管理，另一种是在同一棵组织架构树下进行管理。&lt;br/&gt;
按照集团、公司、部门、用户等不同维度，进行数据管理，比较常见，这里不做讨论。下图为按维度维护数据的示例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/14e1fafe-7461-4d03-b42e-ec05bf82490920220721200652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;按照同一棵组织架构树进行数据维护，界面一般显示为左树右表。大多数商业化产品，都会将此组织架构树进行内存缓存，以方便审批人查找、开窗选择OrgUnit、Role、User、Member等场景。Member的引入是为了解决一人多职等场景。一般发起流程的时候，需要带出发起人拥有的Member列表，从而后续节点取合适的审批人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/121dfd67-da98-407b-a3cc-cb3e01cca95120220721200840.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;对于组织架构而言，需要考虑，系统本身要具备OU存储的能力，对于没有组织架构的用户，可以直接在系统的组织架构中新建组织架构。同时，对于已有系统的客户，可以通过组织架构数据同步来进行数据自动维护。对于用AD域内部管控的客户来说，需要具备AD域身份认证的能力。对于复杂场景，比如用户是SaaS化等复杂场景，组织架构也需要在系统内部，支持使用API的方式来获取组织信息。&lt;br/&gt;
所以在组织架构设计的时候，要使用插件的方式来做，具体使用哪种插件，可以在配置文件中进行配置。以下为一个商业产品的组织架构操作界面示例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/0c424e5a-e5a0-4407-905b-203b4239b54920220721200855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;常见的组织架构操作还有组织架构同步，比如流程系统同步微信企业号、钉钉等，这里不再展开。&lt;/p&gt;

&lt;p&gt;3.2.3 流程设计&lt;/p&gt;

&lt;p&gt;我们想象的流程，可能是向下面的这种简单流程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/ab07af2b-aaaf-498f-b3df-71bec6ba1d4920220721200911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;而实际项目，碰到的流程，一般是如下图所示的情景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/48a78007-667c-4f15-820d-264f6848de5020220721200922.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;初步看几个流程的模型文件是什么样的，先有个印象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/474fbaf7-ce59-4ea3-881d-d6d5c18efee320220721200933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&amp;lt;definitions id=&quot;definitions&quot;
targetNamespace=&quot;http://activiti.org/bpmn20&quot;
xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:activiti=&quot;http://activiti.org/bpmn&quot;&amp;gt;

&amp;lt;process id=&quot;vacationRequest&quot; name=&quot;Vacation request&quot;&amp;gt;
&amp;lt;startEvent id=&quot;request&quot; activiti:initiator=&quot;employeeName&quot;&amp;gt;
&amp;lt;extensionElements&amp;gt;
&amp;lt;activiti:formProperty id=&quot;numberOfDays&quot; name=&quot;Number of days&quot; type=&quot;long&quot; value=&quot;1&quot; required=&quot;true&quot;/&amp;gt;
&amp;lt;activiti:formProperty id=&quot;startDate&quot; name=&quot;First day of holiday (dd-MM-yyy)&quot; datePattern=&quot;dd-MM-yyyy hh:mm&quot; type=&quot;date&quot; required=&quot;true&quot; /&amp;gt;
&amp;lt;activiti:formProperty id=&quot;vacationMotivation&quot; name=&quot;Motivation&quot; type=&quot;string&quot; /&amp;gt;
&amp;lt;/extensionElements&amp;gt;
&amp;lt;/startEvent&amp;gt;
&amp;lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;request&quot; targetRef=&quot;handleRequest&quot; /&amp;gt;
&amp;lt;userTask id=&quot;handleRequest&quot; name=&quot;Handle vacation request&quot; &amp;gt;
&amp;lt;documentation&amp;gt;
${employeeName} would like to take ${numberOfDays} day(s) of vacation (Motivation: ${vacationMotivation}).
&amp;lt;/documentation&amp;gt;
&amp;lt;extensionElements&amp;gt;
&amp;lt;activiti:formProperty id=&quot;vacationApproved&quot; name=&quot;Do you approve this vacation&quot; type=&quot;enum&quot; required=&quot;true&quot;&amp;gt;
&amp;lt;activiti:value id=&quot;true&quot; name=&quot;Approve&quot; /&amp;gt;
&amp;lt;activiti:value id=&quot;false&quot; name=&quot;Reject&quot; /&amp;gt;
&amp;lt;/activiti:formProperty&amp;gt;
&amp;lt;activiti:formProperty id=&quot;managerMotivation&quot; name=&quot;Motivation&quot; type=&quot;string&quot; /&amp;gt;
&amp;lt;/extensionElements&amp;gt;
&amp;lt;potentialOwner&amp;gt;
&amp;lt;resourceAssignmentExpression&amp;gt;
&amp;lt;formalExpression&amp;gt;management&amp;lt;/formalExpression&amp;gt;
&amp;lt;/resourceAssignmentExpression&amp;gt;
&amp;lt;/potentialOwner&amp;gt;
&amp;lt;/userTask&amp;gt;
&amp;lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;handleRequest&quot; targetRef=&quot;requestApprovedDecision&quot; /&amp;gt;
&amp;lt;exclusiveGateway id=&quot;requestApprovedDecision&quot; name=&quot;Request approved?&quot; /&amp;gt;
&amp;lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;requestApprovedDecision&quot; targetRef=&quot;sendApprovalMail&quot;&amp;gt;
&amp;lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&amp;gt;${vacationApproved == &#x27;true&#x27;}&amp;lt;/conditionExpression&amp;gt;
&amp;lt;/sequenceFlow&amp;gt;
&amp;lt;task id=&quot;sendApprovalMail&quot; name=&quot;Send confirmation e-mail&quot; /&amp;gt;
&amp;lt;sequenceFlow id=&quot;flow4&quot; sourceRef=&quot;sendApprovalMail&quot; targetRef=&quot;theEnd1&quot; /&amp;gt;
&amp;lt;endEvent id=&quot;theEnd1&quot; /&amp;gt;
&amp;lt;sequenceFlow id=&quot;flow5&quot; sourceRef=&quot;requestApprovedDecision&quot; targetRef=&quot;adjustVacationRequestTask&quot;&amp;gt;
&amp;lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&amp;gt;${vacationApproved == &#x27;false&#x27;}&amp;lt;/conditionExpression&amp;gt;
&amp;lt;/sequenceFlow&amp;gt;
&amp;lt;userTask id=&quot;adjustVacationRequestTask&quot; name=&quot;Adjust vacation request&quot;&amp;gt;
&amp;lt;documentation&amp;gt;
Your manager has disapproved your vacation request for ${numberOfDays} days.
Reason: ${managerMotivation}
&amp;lt;/documentation&amp;gt;
&amp;lt;extensionElements&amp;gt;
&amp;lt;activiti:formProperty id=&quot;numberOfDays&quot; name=&quot;Number of days&quot; value=&quot;${numberOfDays}&quot; type=&quot;long&quot; required=&quot;true&quot;/&amp;gt;
&amp;lt;activiti:formProperty id=&quot;startDate&quot; name=&quot;First day of holiday (dd-MM-yyy)&quot; value=&quot;${startDate}&quot; datePattern=&quot;dd-MM-yyyy hh:mm&quot; type=&quot;date&quot; required=&quot;true&quot; /&amp;gt;
&amp;lt;activiti:formProperty id=&quot;vacationMotivation&quot; name=&quot;Motivation&quot; value=&quot;${vacationMotivation}&quot; type=&quot;string&quot; /&amp;gt;
&amp;lt;activiti:formProperty id=&quot;resendRequest&quot; name=&quot;Resend vacation request to manager?&quot; type=&quot;enum&quot; required=&quot;true&quot;&amp;gt;
&amp;lt;activiti:value id=&quot;true&quot; name=&quot;Yes&quot; /&amp;gt;
&amp;lt;activiti:value id=&quot;false&quot; name=&quot;No&quot; /&amp;gt;
&amp;lt;/activiti:formProperty&amp;gt;
&amp;lt;/extensionElements&amp;gt;
&amp;lt;humanPerformer&amp;gt;
&amp;lt;resourceAssignmentExpression&amp;gt;
&amp;lt;formalExpression&amp;gt;${employeeName}&amp;lt;/formalExpression&amp;gt;
&amp;lt;/resourceAssignmentExpression&amp;gt;
&amp;lt;/humanPerformer&amp;gt;
&amp;lt;/userTask&amp;gt;
&amp;lt;sequenceFlow id=&quot;flow6&quot; sourceRef=&quot;adjustVacationRequestTask&quot; targetRef=&quot;resendRequestDecision&quot; /&amp;gt;
&amp;lt;exclusiveGateway id=&quot;resendRequestDecision&quot; name=&quot;Resend request?&quot; /&amp;gt;
&amp;lt;sequenceFlow id=&quot;flow7&quot; sourceRef=&quot;resendRequestDecision&quot; targetRef=&quot;handleRequest&quot;&amp;gt;
&amp;lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&amp;gt;${resendRequest == &#x27;true&#x27;}&amp;lt;/conditionExpression&amp;gt;
&amp;lt;/sequenceFlow&amp;gt;
&amp;lt;sequenceFlow id=&quot;flow8&quot; sourceRef=&quot;resendRequestDecision&quot; targetRef=&quot;theEnd2&quot;&amp;gt;
&amp;lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&amp;gt;${resendRequest == &#x27;false&#x27;}&amp;lt;/conditionExpression&amp;gt;
&amp;lt;/sequenceFlow&amp;gt;
&amp;lt;endEvent id=&quot;theEnd2&quot; /&amp;gt;
&amp;lt;/process&amp;gt;
&amp;lt;/definitions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个屏幕截图都截不完的流程，如果用代码去实现整个流程，其工作量和效率，可想而知。而实际做项目，使用基于流程引擎的产品来做项目的时候，只需要确定节点、节点配置、数据配置和权限即可。&lt;br/&gt;
问题：一般流程，都带有邮件通知的节点，如何实现邮件通知节点？请考虑以下情景。&lt;br/&gt;
流程流转和执行的时候，会遇到各种情况的错误，比如找不到审批人等，此时流程引擎要对数据做rollback，而邮件通知节点的业务逻辑已经执行过了。&lt;/p&gt;

&lt;p&gt;权限方面，对于流程资源，哪些部门可以申请，哪些角色不可申请，都应该做流程控制。而在流程执行过程中，流程数据、不是路程的相关人也都不应该看到流程，处理过流程的审批人，不可以再对流程进行处理等，都是权限方面要考虑的问题。&lt;/p&gt;

&lt;p&gt;3.2.4 表单设计&lt;/p&gt;

&lt;p&gt;如下图所示的表单，可以分析以下，一个流程表单有多个主表信息和多个子表信息。一般而言，如果是通过流程引擎做非流程的数据处理，子表通过主表ID来做关联，如果通过流程引擎做流程的数据处理，子表和主表通过TaskId来做关联。以下为示例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/343f616f-51f3-4591-b822-9d944952e65e20220721201004.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;流程系统需要表单设计器，一个流程的不同节点可以挂接不同的表单，以方便不同角色的人关注不同维度的流程信息&lt;/p&gt;

&lt;p&gt;3.2.5 页面设计&lt;/p&gt;

&lt;p&gt;一般而言，对于流程的发起、审批、历史记录等，都是通用的系统界面。而一些业务场景，需要单独做列表界面，以方便使用。对于已有门户系统的客户，需要融合其界面样式。以下为曾经做过的项目示例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/a75f68b0-3fcf-44eb-bfa4-b68a497250c220220721201024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/550f3646-adea-4d19-a4a6-15fd382a3f4920220721201033.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.2.6 报表&lt;/p&gt;

&lt;p&gt;由于不是所有客户都有报表系统，所以流程系统需要具备一个基本的报表功能。下图为示例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/9b723bca-fdd7-4ea7-9cbe-1f24001eaf9520220721201050.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;有报表系统的客户，可以使用其商业版报表系统，获取（直接取、数仓）数据进行展示。常见的报表系统有FineReport、Tableau、PowerBI等。&lt;/p&gt;

&lt;h4&gt;3.3 BPM流程引擎架构设计&lt;/h4&gt;

&lt;p&gt;3.3.1 流程引擎的架构设计&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/27a03c1c-616d-42e6-b4f5-1ae92ef32d7320220721201118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.3.2 发起流程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/19f86ad4-2921-400f-8232-64ef47e2119d20220721201212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;流程引擎处理过程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/1f1a864f-a484-461e-9141-fd6bdcecb81320220721201222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;执行节点处理过程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/55f89a3a-0076-4613-863e-6f9a0bb0849220220721201233.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;问题：在流程引擎处理过程中，如果一个节点有多条连线，如何寻找FromNodeId是某个Node的连线？&lt;br/&gt;
人工处理时，指定连线text&lt;/p&gt;

&lt;h4&gt;3.4 流程引擎架构设计&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.jcloudcs.com/developer.jdcloud.com/40194f1f-778f-4d10-8a33-e1f70a43d46720220721201252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;3.4.1 业务识别&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; 识别业务场景中的配置项，使用集合或分组的方式，让业务可配置&lt;/li&gt;
&lt;li&gt; 支撑业务流程过程的可配置化&lt;/li&gt;
&lt;li&gt; 支撑业务场景中的数据，自动处理&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.4.2 流程引擎的实现&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; 资源相关服务，资源加载，资源保存，资源加密等&lt;/li&gt;
&lt;li&gt; 配置项相关服务&lt;/li&gt;
&lt;li&gt; PVM虚拟机的实现，即通过某个节点（发起时为开始节点）作为初始节点，按照某个连线的action进行节点的自动执行的虚拟机&lt;/li&gt;
&lt;li&gt; 数据配置、数据权限&lt;/li&gt;
&lt;li&gt; 流程数据和业务数据的自动处理&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;4 商业机会&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Business Process Analysis (BPA) 流程分析，帮助企业进行流程调整和优化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Process Assets Library（PAL）流程资产库，对企业流程进行知识化沉淀，将制度和流程落地做绑定，让审批人知晓流程中对应的职责&lt;/p&gt;&lt;/li&gt;
&lt;li&gt; Process Simulate 流程模拟，自动化测试&lt;/li&gt;
&lt;li&gt; Process Forecast 流程预测&lt;/li&gt;
&lt;li&gt; 低代码平台&lt;/li&gt;
&lt;li&gt; 更广泛的机会，在于业务领域+流程引擎，比如：DevOps、RPA、应用与服务编排、数据编排、FaaS编排等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;作者：马瑞&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ee72454c26be5da86fc6db60eff167c8</guid>
<title>轻松搞定亿级用户中心系统架构</title>
<link>https://toutiao.io/k/tlp6f9a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&quot; id=&quot;js_content&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;一、背景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;会员系统是一种基础系统，跟公司所有业务线的下单主流程密切相关。如果会员系统出故障，会导致用户无法下单，影响范围是全公司所有业务线。所以，会员系统必须保证高性能、高可用，提供稳定、高效的基础服务。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;随着同程和艺龙两家公司的合并，越来越多的系统需要打通同程APP、艺龙APP、同程微信小程序、艺龙微信小程序等多平台会员体系。例如微信小程序的交叉营销，用户买了一张火车票，此时想给他发酒店红包，这就需要查询该用户的统一会员关系。因为火车票用的是同程会员体系，酒店用的是艺龙会员体系，只有查到对应的艺龙会员卡号后，才能将红包挂载到该会员账号。除了上述讲的交叉营销，还有许多场景需要查询统一会员关系，例如订单中心、会员等级、里程、红包、常旅、实名，以及各类营销活动等等。所以，会员系统的请求量越来越大，并发量越来越高，今年五一小长假的秒并发tps甚至超过2万多。在如此大流量的冲击下，会员系统是如何做到高性能和高可用的呢？这就是本文着重要讲述的内容。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;二、ES高可用方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1. ES双中心主备集群架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;同程和艺龙两家公司融合后，全平台所有体系的会员总量是十多亿。在这么大的数据体量下，业务线的查询维度也比较复杂。有的业务线基于手机号，有的基于微信unionid，也有的基于艺龙卡号等查询会员信息。这么大的数据量，又有这么多的查询维度，基于此，我们选择ES用来存储统一会员关系。ES集群在整个会员系统架构中非常重要，那么如何保证ES的高可用呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先我们知道，ES集群本身就是保证高可用的，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;474&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8351851851851851&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibe1Rbvc6s1Ns4ymEO5t1lfbCI1ZNVYWg3hFFicdiazvHeH7RAZe7kw7bicg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当ES集群有一个节点宕机了，会将其他节点对应的Replica Shard升级为Primary Shard，继续提供服务。但即使是这样，还远远不够。例如ES集群都部署在机房A，现在机房A突然断电了，怎么办？例如服务器硬件故障，ES集群大部分机器宕机了，怎么办？或者突然有个非常热门的抢购秒杀活动，带来了一波非常大的流量，直接把ES集群打死了，怎么办？面对这些情况，让运维兄弟冲到机房去解决？这个非常不现实，因为会员系统直接影响全公司所有业务线的下单主流程，故障恢复的时间必须非常短，如果需要运维兄弟人工介入，那这个时间就太长了，是绝对不能容忍的。那ES的高可用如何做呢？我们的方案是ES双中心主备集群架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;291&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.512962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibe1Uch2gnjgyGU8ibfgJQdqWZPZiaGBlY0C3vX5H5nr1IBpZUiamNic2Khow/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们有两个机房，分别是机房A和机房B。我们把ES主集群部署在机房A，把ES备集群部署在机房B。会员系统的读写都在ES主集群，通过MQ将数据同步到ES备集群。此时，如果ES主集群崩了，通过统一配置，将会员系统的读写切到机房B的ES备集群上，这样即使ES主集群挂了，也能在很短的时间内实现故障转移，确保会员系统的稳定运行。最后，等ES主集群故障恢复后，打开开关，将故障期间的数据同步到ES主集群，等数据同步一致后，再将会员系统的读写切到ES主集群。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2. ES流量隔离三集群架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;双中心ES主备集群做到这一步，感觉应该没啥大问题了，但去年的一次恐怖流量冲击让我们改变了想法。那是一个节假日，某个业务上线了一个营销活动，在用户的一次请求中，循环10多次调用了会员系统，导致会员系统的tps暴涨，差点把ES集群打爆。这件事让我们后怕不已，它让我们意识到，一定要对调用方进行优先级分类，实施更精细的隔离、熔断、降级、限流策略。首先，我们梳理了所有调用方，分出两大类请求类型。第一类是跟用户的下单主流程密切相关的请求，这类请求非常重要，应该高优先级保障。第二类是营销活动相关的，这类请求有个特点，他们的请求量很大，tps很高，但不影响下单主流程。基于此，我们又构建了一个ES集群，专门用来应对高tps的营销秒杀类请求，这样就跟ES主集群隔离开来，不会因为某个营销活动的流量冲击而影响用户的下单主流程。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibelCGzuiaGDCllalbsibvETLKUJCITZ9hBR4VYCOszEIwqeoEhw9mriahqw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3. ES集群深度优化提升&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;讲完了ES的双中心主备集群高可用架构，接下来我们深入讲解一下ES主集群的优化工作。有一段时间，我们特别痛苦，就是每到饭点，ES集群就开始报警，搞得每次吃饭都心慌慌的，生怕ES集群一个扛不住，就全公司炸锅了。那为什么一到饭点就报警呢？因为流量比较大， 导致ES线程数飙高，cpu直往上窜，查询耗时增加，并传导给所有调用方，导致更大范围的延时。那么如何解决这个问题呢？通过深入ES集群，我们发现了以下几个问题： &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ES负载不合理，热点问题严重。ES主集群一共有几十个节点，有的节点上部署的shard数偏多，有的节点部署的shard数很少，导致某些服务器的负载很高，每到流量高峰期，就经常预警。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ES线程池的大小设置得太高，导致cpu飙高。我们知道，设置ES的threadpool，一般将线程数设置为服务器的cpu核数，即使ES的查询压力很大，需要增加线程数，那最好也不要超过“cpu core * 3 / 2 + 1”。如果设置的线程数过多，会导致cpu在多个线程上下文之间频繁来回切换，浪费大量cpu资源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;shard分配的内存太大，100g，导致查询变慢。我们知道，ES的索引要合理分配shard数，要控制一个shard的内存大小在50g以内。如果一个shard分配的内存过大，会导致查询变慢，耗时增加，严重拖累性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;string类型的字段设置了双字段，既是text，又是keyword，导致存储容量增大了一倍。会员信息的查询不需要关联度打分，直接根据keyword查询就行，所以完全可以将text字段去掉，这样就能节省很大一部分存储空间，提升性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ES查询，使用filter，不使用query。因为query会对搜索结果进行相关度算分，比较耗cpu，而会员信息的查询是不需要算分的，这部分的性能损耗完全可以避免。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;节约ES算力，将ES的搜索结果排序放在会员系统的jvm内存中进行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;增加routing key。我们知道，一次ES查询，会将请求分发给所有shard，等所有shard返回结果后再聚合数据，最后将结果返回给调用方。如果我们事先已经知道数据分布在哪些shard上，那么就可以减少大量不必要的请求，提升查询性能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过以上优化，成果非常显著，ES集群的cpu大幅下降，查询性能大幅提升。ES集群的cpu使用率： &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;293&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5165615141955836&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibe1bxCU9Y5iaJbicA3EGAUFicoFU4N2SMWAtrBbyZc8uMpDvAcnGmdU2rlQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1268&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;会员系统的接口耗时：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1064814814814814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibeG4vcZSdlKrrwsZegNcdJkc8f3JRrgqSicsI2VFsdcWibuBWJJx0n7plQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;三、会员Redis缓存方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;一直以来，会员系统是不做缓存的，原因主要有两个：第一个，前面讲的ES集群性能很好，秒并发3万多，99线耗时5毫秒左右，已经足够应付各种棘手的场景。第二个，有的业务对会员的绑定关系要求实时一致，而会员是一个发展了10多年的老系统，是一个由好多接口、好多系统组成的分布式系统。所以，只要有一个接口没有考虑到位，没有及时去更新缓存，就会导致脏数据，进而引发一系列的问题，例如：用户在APP上看不到微信订单、APP和微信的会员等级、里程等没合并、微信和APP无法交叉营销等等。那后来为什么又要做缓存呢？是因为今年机票的盲盒活动，它带来的瞬时并发太高了。虽然会员系统安然无恙，但还是有点心有余悸，稳妥起见，最终还是决定实施缓存方案。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1. ES近一秒延时导致的Redis缓存数据不一致问题的解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;在做会员缓存方案的过程中，遇到一个ES引发的问题，该问题会导致缓存数据的不一致。我们知道，ES操作数据是近实时的，往ES新增一个Document，此时立即去查，是查不到的，需要等待1秒后才能查询到。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;215&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibeanMHnWYicrfnUSQINQMJYKFFn1TSSsJLZLicKbiaibgV4bKw3Ql8QxJx4g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ES的近实时机制为什么会导致redis缓存数据不一致呢？具体来讲，假设一个用户注销了自己的APP账号，此时需要更新ES，删除APP账号和微信账号的绑定关系。而ES的数据更新是近实时的，也就是说，1秒后你才能查询到更新后的数据。而就在这1秒内，有个请求来查询该用户的会员绑定关系，它先到redis缓存中查，发现没有，然后到ES查，查到了，但查到的是更新前的旧数据。最后，该请求把查询到的旧数据更新到redis缓存并返回。就这样，1秒后，ES中该用户的会员数据更新了，但redis缓存的数据还是旧数据，导致了redis缓存跟ES的数据不一致。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5721107927411653&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibeRSFjW3MQZ6iafaLJqT0EiaJRicZOzT53pDC7RNw15Z4xPQ4uOMfRpjG4g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1047&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面对该问题，如何解决呢？我们的思路是，在更新ES数据时，加一个2秒的redis分布式并发锁，为了保证缓存数据的一致性，接着再删除redis中该会员的缓存数据。如果此时有请求来查询数据，先获取分布式锁，发现该会员ID已经上锁了，说明ES刚刚更新的数据尚未生效，那么此时查询完数据后就不更新redis缓存了，直接返回，这样就避免了缓存数据的不一致问题。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;309&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5444126074498568&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibeP7GVRSPry4DJdpemSaiaNwWiakmTian3OJJ7gp4PfbXXRZoSpAGdHPRfA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1047&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上述方案，乍一看似乎没什么问题了，但仔细分析，还是有可能导致缓存数据的不一致。例如，在更新请求加分布式锁之前，恰好有一个查询请求获取分布式锁，而此时是没有锁的，所以它可以继续更新缓存。但就在他更新缓存之前，线程block了，此时更新请求来了，加了分布式锁，并删除了缓存。当更新请求完成操作后，查询请求的线程活过来了，此时它再执行更新缓存，就把脏数据写到缓存中了。发现没有？主要的问题症结就在于“删除缓存”和“更新缓存”发生了并发冲突，只要将它们互斥，就能解决问题。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;280&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4935185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibesQc3FqyDSZRB7tHTia6IFviapEn36oSgK73S1YpriaM3ozcAt8MmsMyiag/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实施了缓存方案后，经统计，缓存命中率90%+，极大缓解了ES的压力，会员系统整体性能得到了很大提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2. Redis双中心多集群架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;接下来，我们看一下如何保障Redis集群的高可用。如下图所示： &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;322&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5673352435530086&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibeBrbDaBAAzicQ5czsfOCGhAfMSrM1QOc0RmSgGTNefbMZN3aCzMlu7Hg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1047&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于Redis集群的高可用，我们采用了双中心多集群的模式。在机房A和机房B各部署一套Redis集群。更新缓存数据时，双写，只有两个机房的redis集群都写成功了，才返回成功。查询缓存数据时，机房内就近查询，降低延时。这样，即使机房A整体故障，机房B还能提供完整的会员服务。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;四、高可用会员主库方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;上述讲到，全平台会员的绑定关系数据存在ES，而会员的注册明细数据存在关系型数据库。最早，会员使用的数据库是SqlServer，直到有一天，DBA找到我们说，单台SqlServer数据库已经存储了十多亿的会员数据，服务器已达到物理极限，不能再扩展了。按照现在的增长趋势，过不了多久，整个SqlServer数据库就崩了。你想想，那是一种什么样的灾难场景：会员数据库崩了，会员系统就崩了；会员系统崩了，全公司所有业务线就崩了。想想就不寒而栗，酸爽无比，为此我们立刻开启了迁移DB的工作。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1. MySql双中心Partition集群方案&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;经过调研，我们选择了双中心分库分表的MySql集群方案，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;368&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6481481481481481&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibegoDHm7N0Py4WrOiceMicRwhpxmVmwaN6W1qiczBmnESNWd6qlX3JVX04Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;会员一共有十多亿的数据，我们把会员主库分了1000多个分片，平分到每个分片大概百万的量级，足够使用了。MySql集群采用1主3从的架构，主库放在机房A，从库放在机房B，两个机房之间通过专线同步数据，延迟在1毫秒内。会员系统通过DBRoute读写数据，写数据都路由到master节点所在的机房A，读数据都路由到本地机房，就近访问，减少网络延迟。这样，采用双中心的MySql集群架构，极大提高了可用性，即使机房A整体都崩了，还可以将机房B的Slave升级为Master，继续提供服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;双中心MySql集群搭建好后，我们进行了压测，测试下来，秒并发能达到2万多，平均耗时在10毫秒内，性能达标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2. 会员主库平滑迁移方案&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;接下来的工作，就是把会员系统的底层存储从SqlServer切到MySql上，这是个风险极高的工作，主要有以下几个难点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;会员系统是一刻都不能停机的，要在不停机的情况下完成SqlServer到MySql的切换，就像是在给高速行驶的汽车换轮子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;会员系统是由很多个系统和接口组成的，毕竟发展了10多年，由于历史原因，遗留了大量老接口，逻辑错综复杂。这么多系统，必须一个不落的全部梳理清楚，DAL层代码必须重写，而且不能出任何问题，否则将是灾难性的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据的迁移要做到无缝迁移，不仅是存量10多亿数据的迁移，实时产生的数据也要无缝同步到mysql。另外，除了要保障数据同步的实时性，还要保证数据的正确性，以及SqlServer和MySql数据的一致性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于以上痛点，我们设计了“全量同步、增量同步、实时流量灰度切换”的技术方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，为了保证数据的无缝切换，采用实时双写的方案。因为业务逻辑的复杂，以及SqlServer和MySql的技术差异性，在双写mysql的过程中，不一定会写成功，而一旦写失败，就会导致SqlServer和MySql的数据不一致，这是绝不允许的。所以，我们采取的策略是，在试运行期间，主写SqlServer，然后通过线程池异步写MySql，如果写失败了，重试三次，如果依然失败，则记日志，然后人工排查原因，解决后，继续双写，直到运行一段时间，没有双写失败的情况。通过上述策略，可以确保在绝大部分情况下，双写操作的正确性和稳定性，即使在试运行期间出现了SqlServer和MySql的数据不一致的情况，也可以基于SqlServer再次全量构建出MySql的数据，因为我们在设计双写策略时，会确保SqlServer一定能写成功，也就是说，SqlServer中的数据是全量最完整、最正确的。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;330&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5807067812798472&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibeY2kvibC0Qtamz1UWvgfH55gzliaRHRR5ibUrpAyibcHRYqVnFicd812g6dQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1047&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 讲完了双写，接下来我们看一下“读数据”如何灰度。整体思路是，通过A/B平台逐步灰度流量，刚开始100%的流量读取SqlServer数据库，然后逐步切流量读取MySql数据库，先1%，如果没有问题，再逐步放流量，最终100%的流量都走MySql数据库。在逐步灰度流量的过程中，需要有验证机制，只有验证没问题了，才能进一步放大流量。那么这个验证机制如何实施呢？方案是，在一次查询请求里，通过异步线程，比较SqlServer和 MySql的查询结果是否一致，如果不一致，记日志，再人工检查不一致的原因，直到彻底解决不一致的问题后，再逐步灰度流量。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;328&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5778414517669532&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibesExtB7QRzajJ6aTzzcETzXSTwuySjcRzPVVWz8iahnewvZtZWOA9qvg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1047&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，整体的实施流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;125&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.22037037037037038&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibeKCzFHfNibCBU851ibCSiaHxw8RC9znkqEPcAeNxogxO3edLqdDArPSnxA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，在一个夜黑风高的深夜，流量最小的时候，完成SqlServer到MySql数据库的全量数据同步。接着，开启双写，此时，如果有用户注册，就会实时双写到两个数据库。那么，在全量同步和实时双写开启之间，两个数据库还相差这段时间的数据，所以需要再次增量同步，把数据补充完整，以防数据的不一致。剩下的时间，就是各种日志监控，看双写是否有问题，看数据比对是否一致等等。这段时间是耗时最长的，也是最容易发生问题的，如果有的问题比较严重，导致数据不一致了，就需要从头再来，再次基于SqlServer全量构建MySql数据库，然后重新灰度流量，直到最后，100%的流量全部灰度到MySql，此时就大功告成了，下线灰度逻辑，所有读写都切到MySql集群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3. MySql和ES主备集群方案&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;做到这一步，感觉会员主库应该没问题了，可dal组件的一次严重故障改变了我们的想法。那次故障很恐怖，公司很多应用连接不上数据库了，创单量直线往下掉，这让我们意识到，即使数据库是好的，但dal组件异常，依然能让会员系统挂掉。所以，我们再次异构了会员主库的数据源，双写数据到ES，如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;216&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.38055555555555554&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibeFONmFTTkWA6AiaOS7vWlaE0JVOibR1aZ7EXkyJY3cVUEKuL5VPBWNbnQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果dal组件故障或MySql数据库挂了，可以把读写切到ES，等MySql恢复了，再把数据同步到MySql，最后把读写再切回到MySql数据库。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;238&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4185185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibejOqmfkK30mGuVzf7V5yoiaibsPBvfmVaqedX6W9Mrfkh6YW5W3hN14gA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;五、异常会员关系治理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;会员系统不仅仅要保证系统的稳定和高可用，数据的精准和正确也同样重要。举个例子，一个分布式并发故障，导致一名用户的APP账户绑定了别人的微信小程序账户，这将会带来非常恶劣的影响。首先，一旦这两个账号绑定了，那么这两个用户下的酒店、机票、火车票订单是互相可以看到的。你想想，别人能看到你订的酒店订单，你火不火，会不会投诉？除了能看到别人的订单，你还能操作订单。例如，一个用户在APP的订单中心，看到了别人订的机票订单，他觉得不是自己的订单，就把订单取消了。这将会带来非常严重的客诉，大家知道，机票退订费用是挺高的，这不仅影响了该用户的正常出行，还导致了比较大的经济损失，非常糟糕。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对这些异常会员账号，我们进行了详细的梳理，通过非常复杂烧脑的逻辑识别出这些账号，并对会员接口进行了深度优化治理，在代码逻辑层堵住了相关漏洞，完成了异常会员的治理工作。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;294&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.51796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibewezEgeC2qPcYFiaibcm9JrPPMXZdsaUpEibJdO9iaPyKdotyVYSq36ktqA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;六、展望：更精细化的流控和降级策略&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;任何一个系统，都不能保证百分之一百不出问题，所以我们要有面向失败的设计，那就是更精细化的流控和降级策略。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1. 更精细化的流控策略&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;热点控制。针对黑产刷单的场景，同一个会员id会有大量重复的请求，形成热点账号，当这些账号的访问超过设定阈值时，实施限流策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于调用账号的流控规则。这个策略主要是防止调用方的代码bug导致的大流量。例如，调用方在一次用户请求中，循环很多次来调用会员接口，导致会员系统流量暴增很多倍。所以，要针对每个调用账号设置流控规则，当超过阈值时，实施限流策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全局流控规则。我们会员系统能抗下tps 3万多的秒并发请求量，如果此时，有个很恐怖的流量打过来，tps高达10万，与其让这波流量把会员数据库、es全部打死，还不如把超过会员系统承受范围之外的流量快速失败，至少tps 3万内的会员请求能正常响应，不会让整个会员系统全部崩溃。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;297&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5222222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aLqFHnREiaQEsAPIUlX70ibez25LtIqWWdB0DgzZ2ICcygUUUGUTugh5cDFnCZxn35soojwB0X3hvA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2. 更精细化的降级策略&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;基于平均响应时间的降级。会员接口也有依赖其他接口，当调用其他接口的平均响应时间超过阈值，进入准降级状态。如果接下来 1s 内进入的请求，它们的平均响应时间都持续超过阈值，那么在接下的时间窗口内，自动地熔断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于异常数和异常比例的降级。当会员接口依赖的其他接口发生异常，如果1分钟内的异常数超过阈值，或者每秒异常总数占通过量的比值超过阈值，进入降级状态，在接下的时间窗口之内，自动熔断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，我们最大的痛点是会员调用账号的治理。公司内，想要调用会员接口，必须申请一个调用账号，我们会记录该账号的使用场景，并设置流控、降级策略的规则。但在实际使用的过程中，申请了该账号的同事，可能异动到其他部门了，此时他可能也会调用会员系统，为了省事，他不会再次申请会员账号，而是直接沿用以前的账号过来调用，这导致我们无法判断一个会员账号的具体使用场景是什么，也就无法实施更精细的流控和降级策略。所以，接下来，我们将会对所有调用账号进行一个个的梳理，这是个非常庞大且繁琐的工作，但无路如何，硬着头皮也要做好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;12&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;来源：DBAPlus&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3134ed7dd258758f2254350756e3e6d1</guid>
<title>如何在 CentOS7 上搭建一套 ELK 系统？</title>
<link>https://toutiao.io/k/w3p5ee8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;/&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;span&gt;👇&lt;/span&gt;点击卡片&lt;/span&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;，&lt;/span&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;关注，置顶&lt;/span&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;公众号&lt;span&gt;👇&lt;/span&gt;&lt;/span&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;技术干货，及时送达！&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MzU0ODk2MzE3MA==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib178LnVu9br0VUuI4OKYwvXKpZnaGseFG3vyFJShp2VFcwVodS88CkUsNYcLDrglYLHPFoic6MJD4A/0?wx_fmt=png&quot; data-nickname=&quot;逻魔代码&quot; data-alias=&quot;lomagicode&quot; data-signature=&quot;逻魔代码，分享架构技术干货，打造有价值的经验分享社群，帮助后继者以前人的肩膀为基，建造更精妙的技术殿堂！&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;一、 问题背景&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;在 CentOS7 环境下，如何搭建一套 ELK 系统?&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;elk 安装包&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;elasticsearch-7.8.0-x86_64.rpm + kibana-7.8.0-x86_64.rpm + logst如下图&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1861198738170347&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBibRD5CF87Mu2ss6SEuwW7S14ePJvu5R2n6I4uibN9br5cJ7CSLotXuCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;CentOS 7&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CentOS 7.4   64bit,  图略。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;说明&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上熟悉了docker的用法之后，使用docker和不使用docker差别不大，篇幅所限，只记录重点，不涉及docker环境下的安装和配置。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;注：里面提到的所有操作都是我亲测过的。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二、 2. 安装（es 和 kibana）&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 安装es&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;rpm -ivh xxx.rpm&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装完毕后，需要配置内容。尤其是需要配置es&lt;code&gt;可以从远程机器访问&lt;/code&gt;。配置后启动，效果如下图。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7121879588839941&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBRCphnv5QPaMU6dibVPST1NemYvukLTsQPTFHjflYTmOfKjAB0XLstGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;681&quot;/&gt;&lt;strong&gt;要点：&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;es依赖java环境，所以先安装&lt;code&gt;jdk&lt;/code&gt;，自行解决。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;es安装完成后，可能需要修改配置文件，如端口等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;es启动时可能会报错，如 &lt;code&gt;can not run elasticsearch as root&lt;/code&gt;（新建其他用户，并配置各个目录权限即可解决，一搜即得）等，需要处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]&lt;/code&gt; 这个报错需要配置一下，参考这两个即可解惑。https://www.jianshu.com/p/692608b3b6f9  https://blog.csdn.net/weixin_40143280/article/details/105273199&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 安装kibana&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;rpm -ivh xxx.rpm&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装完毕后，需要配置内容。尤其是需要配置kibana&lt;code&gt;可以从远程机器访问&lt;/code&gt;。配置后启动，效果如下图。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中遇到一个报错，解决办法：The Reporting plugin encountered issues launching Chromium in a self-test&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动后效果如图&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5840336134453782&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBJnQ2IejwbiaeFoBYwzG3Q4oSEN5Mia8VRSLWnvQYZ1WLZBL7eYYTkK9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1190&quot;/&gt;启动过程如图：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBnOsBqBQ43bFic62oVZaszBicib7R9VVIGRUwZMUZmWfIElSBAQEHuyQcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;我安装的kibana启动比较顺利。&lt;code&gt;/usr/share/kibana --allow-root&lt;/code&gt; 就成功了，有一些&lt;code&gt;WARN&lt;/code&gt;信息，但无所谓。当然地，如果不喜欢控制台的输出信息，可以这样：&lt;code&gt; nohup bin/kibana --allow-root &amp;amp;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;关键部分暂时部署完成，目标是通过.net 或 java 或logstash的方式 将数据存入es，然后在kibana可以灵活展示和使用&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时kibana可以直接连接到刚才部署的es上面，看和操作es的一些index。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、 使用&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自己的思路：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;只先安装es和kibana，es用来存数据（姑且可以先用kibana的 示例数据，或者 通过csv文件导入的数据来玩，暂不考虑如何向es中导入数据的问题）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用kibana自带的sample数据或自己导入的数据，熟悉&lt;code&gt;dashboard&lt;/code&gt;、&lt;code&gt;cavans&lt;/code&gt;、&lt;code&gt;visulize&lt;/code&gt; 等的概念，做到大致了解，心中有数。可以产生各种灵活的饼图柱状图折线图热力图之类的东西自己玩。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5435684647302904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBlJicwE97TvcrQTAmO0ziaRNINwNZg1uicLbVepyYlGPN8ibPMqmwr7yp0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1928&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSB6rX75ibkb9SNCJGXYR0Yc83aiawBexz9gIgVibjzDLgTtJy1Tx2coKXZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6101083032490975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBu2yicHHgHaKKVMLiaraSAgkkDDFblw2SrEORNp8NYdyghSu7Yibv5OvYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1385&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.562929061784897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSB2BxN9Y440ibjmoVLoGeJeWDQpwPTEhGyAqmpEZia2p6Pd3wCM07Bbycw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1748&quot;/&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;四、 logstash的安装与使用&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;安装&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;rpm -ivh xxx.rpm&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装完毕后，需要配置内容，然后启动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，启动报错是很正常的，遇到什么解决什么，见招拆招就行了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跟前面的es和kibana一样，安装完成后，&lt;code&gt;/usr/share/logstash&lt;/code&gt; 和 &lt;code&gt;/etc/logstash&lt;/code&gt; 处出现文件。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;使用logstash&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我现在的目的是，通过logstash，不断地从一个mysql表中读数据，写入es的一个索引中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1269083969465649&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBgIwqxIXJDY3IWSyTpGLucXjApUjpf766WZiaVIdB2CrxvIs1edttUOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1048&quot;/&gt;如图，画横线的两个conf文件就是我的两次导入需要的配置文件，内容仿照&lt;code&gt;logstash-sample.conf&lt;/code&gt;的格式，使用mysql数据源，如&lt;code&gt;ph3.conf&lt;/code&gt;内容如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;input {&lt;br/&gt;        jdbc {&lt;br/&gt;                &lt;span&gt;# jdbc_driver_library =&amp;gt; &quot;./mysql-connector-java-5.1.49.jar&quot;&lt;/span&gt;&lt;br/&gt;                jdbc_driver_library =&amp;gt; &lt;span&gt;&quot;/usr/share/logstash/mylib/5.1.45/mysql-connector-java-5.1.45.jar&quot;&lt;/span&gt;&lt;br/&gt;                jdbc_driver_class =&amp;gt; &lt;span&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&lt;br/&gt;                jdbc_connection_string =&amp;gt; &lt;span&gt;&quot;jdbc:mysql://1.2.3.4:13308/test?characterEncoding=UTF-8&amp;amp;useSSL=false&quot;&lt;/span&gt;&lt;br/&gt;                jdbc_user =&amp;gt; root&lt;br/&gt;                jdbc_password =&amp;gt; 123456&lt;br/&gt;                jdbc_paging_enabled =&amp;gt; &lt;span&gt;&quot;true&quot;&lt;/span&gt; &lt;span&gt;#是否进行分页&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;# jdbc_page_size =&amp;gt; &quot;50000&quot;&lt;/span&gt;&lt;br/&gt;                tracking_column =&amp;gt; &lt;span&gt;&quot;id&quot;&lt;/span&gt;&lt;br/&gt;                use_column_value =&amp;gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;# statement_filepath =&amp;gt; &quot;sql文件路径，与下面的执行语句二选1&quot;&lt;/span&gt;&lt;br/&gt;                statement =&amp;gt; &lt;span&gt;&quot;SELECT * FROM ph3 where id &amp;gt; 0 &quot;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;# 设置监听间隔  各字段含义（由左至右）秒、分、时、天、月、年，全部为*默认含义为每分钟都更新&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;# schedule =&amp;gt; &quot; 10 * * * * *&quot;&lt;/span&gt;&lt;br/&gt;                schedule =&amp;gt; &lt;span&gt;&quot;5 * * * * *&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;}&lt;br/&gt;output {&lt;br/&gt;        elasticsearch {&lt;br/&gt;                document_id =&amp;gt; &lt;span&gt;&quot;%{id}&quot;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;# document_type =&amp;gt; &quot;&quot;&lt;/span&gt;&lt;br/&gt;                index =&amp;gt; &lt;span&gt;&quot;ph4-new-index&quot;&lt;/span&gt;&lt;br/&gt;                hosts =&amp;gt; [&lt;span&gt;&quot;localhost:9200&quot;&lt;/span&gt;]&lt;br/&gt;        }&lt;br/&gt;        stdout{&lt;br/&gt;                codec =&amp;gt; rubydebug&lt;br/&gt;        }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后执行命令，启动logstash进程去完成这件事：&lt;code&gt;sudo bin/logstash -f /etc/logstash/ph3.conf --path.settings=/etc/logstash&lt;/code&gt;命令内容：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;-f 指定了配置文件
--path.settings 指定一个目录，用到一些其他的通用配置，不用管。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能遇到一些报错，如提示找不到 logstash.yml 文件， --path.settings 指向的不是一个目录，权限不足等，都是网上一搜就能解决的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中特别注意，&lt;code&gt; tracking_column =&amp;gt; &quot;id&quot;&lt;/code&gt; 这一行 和 &lt;code&gt;document_id =&amp;gt; &quot;%{id}&quot;&lt;/code&gt;这行要体会一下意思，以免导入程序跑了半天数据库里只有1个document。这个问题可能会遇到，遇到也好解决，一搜就有。就是这个id字段不是随便写的，需要是mysql数据库的表里的字段，可以作为唯一标识的那种，比如int主键。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下上个启动图。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7007462686567164&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBgG3VDicGqiaCDBPuN2CoLd4YZmm5WFYr5ZpfDGWENIl9OAuXEvdaBvUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1340&quot;/&gt;如图，红框部分就是任务已经开始执行起来了。然后在kibana网页的&lt;code&gt;索引模式&lt;/code&gt;里面，就可以把这个索引加入到kibana管理里了，然后就可以跟其他数据一样随意操作。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4720531267293857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib3vQ6EzNK1CZWFJgibqECcSBmOVib1VrIHS2kkib3olEWXkpWyt2vpE5ia1HtqOA2eGKGAVWNTUterJ4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1807&quot;/&gt;自此这条路就完全打通了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;elk都安装且运行正常的情况下，
logstash 从mysql等数据源按照cron表达式确定的时间持续地从mysql中读取数据   ==&amp;gt;  把数据写入到es中  ==&amp;gt;  kibana管理这些数据，可以自定义出各种花样繁多的统计图统计表，导出统计数据等&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以后就很随意了。&lt;/p&gt;&lt;/section&gt;&lt;p mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;/p&gt;&lt;section mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19&quot;&gt;&lt;em&gt;&lt;span&gt;PS：文章有帮助的话，点赞、在看、转发吧！还可以打赏作者、鼓励原创哦！&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19&quot;&gt;&lt;span&gt;&lt;span&gt;-----------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-tools=&quot;公众号：Java精选&quot; data-id=&quot;91842&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22&quot;&gt;点击卡片关注我们，更多技术干货，&lt;span&gt;‍&lt;/span&gt;及时为您送达！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MzU0ODk2MzE3MA==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/HmXWpTc2vib178LnVu9br0VUuI4OKYwvXKpZnaGseFG3vyFJShp2VFcwVodS88CkUsNYcLDrglYLHPFoic6MJD4A/0?wx_fmt=png&quot; data-nickname=&quot;逻魔代码&quot; data-alias=&quot;lomagicode&quot; data-signature=&quot;逻魔代码，分享架构技术干货，打造有价值的经验分享社群，帮助后继者以前人的肩膀为基，建造更精妙的技术殿堂！&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;20&quot;&gt;&lt;p mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;20&quot;&gt;往期推荐&lt;/p&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;br mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247484572&amp;amp;idx=1&amp;amp;sn=259614b1319119b8d123d5d1d3196cea&amp;amp;chksm=fbb65291ccc1db87038934df758fca5cae05ba368393e6ae65bcd63fc07a94f381b5b201fe20&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Windows高效开发环境配置（一）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Windows高效开发环境配置（一）&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247484621&amp;amp;idx=1&amp;amp;sn=813ca3f18e262efbcb186c1ab26695f1&amp;amp;chksm=fbb652c0ccc1dbd694c47effd9f003a8ed045aa3692a3bb06d5857ad14c7060ecf3a611ace1b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【干货】彻底搞懂Eureka和Nacos的区别&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【干货】彻底搞懂Eureka和Nacos的区别&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247484542&amp;amp;idx=1&amp;amp;sn=cb34e6b94c24c4b1088ea792c9f68005&amp;amp;chksm=fbb65273ccc1db651e2b61805f6fecf69825fb910861b086e448091912ee2836f88b67ab07e0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【干货】MySQL索引背后的数据结构及算法原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【干货】MySQL索引背后的数据结构及算法原理&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0ODk2MzE3MA==&amp;amp;mid=2247484248&amp;amp;idx=1&amp;amp;sn=f5b9cb17c09cc283896c8171ed39e8c6&amp;amp;chksm=fbb65555ccc1dc43b1c607abfd48284aa33a2c7de5303300e8bd9273091022c17b0794add387&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;结合实操带你吃透Redis持久化&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;结合实操带你吃透Redis持久化&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;br mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19&quot;&gt;公&lt;/span&gt;&lt;span mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19&quot;&gt;众号“逻魔代码”所发表内容注明来源的，版权归原出处所有（无法查证版权的或者未注明出处的均来自网络，系转载，转载的目的在于传递更多信息，版权属于原作者。如有侵权，请联系，笔者会第一时间删除处理！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0425dcafc22bfd7d8f373ad596f317d7</guid>
<title>高并发整体可用性：一文详解降级、限流和熔断</title>
<link>https://toutiao.io/k/oh16qj7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;水满则溢，月盈则亏，任何事物都不可能无限制的发展，我们的系统服务能力也一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当随着流量的不断增长，达到或超过服务本身的可承载范围，系统服务的自我保护机制的建立就显得很重要了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文希望可以用最通俗的解释和贴切的实例来带大家了解什么是限流、降级和熔断。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Part1&lt;/span&gt;&lt;span&gt;限流 - 自知之明和眼力见&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个是本身的承载能力，一个是依赖方的服务能力，其实都是从当前系统的角度来说，&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;自知之明之被动限流&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;我只有这么大的能力，只能服务这么多客户！&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统对自身的承载能力需要有一个清晰的认识，对于超过承载能力的额外调用，要适当拒绝。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而怎样衡量系统承载能力是一个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般的我们有两种常见方案：一是定义阈值和规则，二是自适应限流策略。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阈值和规则是owner通过对业务的把控和自身的存储、连接的现状，根据人工经验制定的。这样的策略一般不会出什么大问题，但是不够灵活，对请求反馈的灵敏度和资源的利用率不够。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相对的，自适应策略则是一种动态限流策略，是通过对系统当前的运行状况，动态的调整限流阈值，在机器资源和流量处理之间寻找一个平衡。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如阿里开源的Sentinel限流器，在动态限流策略上支持&lt;span/&gt;&lt;sup&gt;[1]&lt;/sup&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Load 自适应：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CPU usage：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;眼力见之主动限流&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;合作方只有那么大的能力，我只能索取这么多！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对下游依赖系统的服务能力，需要有一个精准的判断，对于服务能力弱的下游系统，要适当减少调用，得有点眼力见，对不对。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为，绝大部分的业务系统都不是单独存在的，会依赖很多其他的系统，这些依赖方的服务能力，就像是木桶短板，限制了当前系统的处理能力。这个时候就需要把下游当做一个整体来考虑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，需要把集群限流和单机限流配合起来使用，特别是下游服务的实例数、服务能力等和当前系统有较大差距的时候，集群限流还是必要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一种方案&lt;/strong&gt;：是通过收集服务节点的请求日志，统计请求量，并通过限流配置，控制节点限流逻辑：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5919540229885057&quot; data-type=&quot;jpeg&quot; data-w=&quot;696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xE6oscyT530mM9xKSAtxErduPg9Fd28rJyjPN6JmDDMCzaC23m36BiatqFsUmWWzmnoglrnb3gVcLouaUia34p6w/640?wx_fmt=jpeg&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;摘自:微服务治理：体系、架构及实践&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我将其称为后置限流，即收集各个节点的请求量和既定阈值对比，超过则反馈到各个节点，依赖单机限流进行比例限流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;另一种方案&lt;/strong&gt;：是限流总控服务，根据配置生产token，然后各个节点消费token，正常获取token后才能继续业务：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4235423542354235&quot; data-type=&quot;jpeg&quot; data-w=&quot;1818&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xE6oscyT530mM9xKSAtxErduPg9Fd28rxmUqYNrQX7qqqFTS849bphbzTRa0LoF6ov3O4vaMjqqJGWxUpicdWmQ/640?wx_fmt=jpeg&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;摘自:Sentinel&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我将其称为前置限流，预先确定分配好可用的token，省去了汇总和反馈的处理机制，相比而言，这种控制方式要相对精准和优雅。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;1.3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;同步转异步&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;合作方虽然能力有限，但态度很好，加班加点的处理；而我们的客户也很友好，同意多等等&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个非常经典的例子，就是第三方支付平台的还款业务，用过的同学应该都有体会，一般都是支付完成之后等一会才会收到销账的通知。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时延的底层逻辑是什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般的，金融机构的服务接口，因为其数据一致性和系统稳定性的要求，性能方面可能不如互联网公司的系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，当到了月初月末的还款高峰，如果把支持成功用户的销账请求一股脑的都压给机构，后果可想而知。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，对于用户来说，整个流程是可以被拆分的，用户侧只要完成支付操作就可以了。至于最终结果，可以允许延后被通知。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，基本上，金融网关在处理机构销账都是异步的，即先将各业务的销账请求落地，然后异步的限速轮询待处理的单据，再和机构交互。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，不仅仅是在金融领域，只要我们的业务处理速度存在差异，且流程可以被拆分，即可考虑这种架构思路，来缓解系统压力，保障业务可用性。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Part2&lt;/span&gt;&lt;span&gt;降级 - 丢车保帅&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;事发突然，能力有限，我只能紧着几个重要客户服务！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，什么情况需要降级，什么链路可以被降级呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当整个业务处于高峰期，或活动脉冲期，当服务的负载很高，逼近了服务承载阈值，即可以考虑服务降级来保障主功能可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以降级的一定是非核心的链路，比如网购场景下的积分抵扣，如果降级积分抵扣链路，其实不影响大部分的支付功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，在系统中我们一般采用的降级方案有哪些呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1、页面降级&lt;/strong&gt;：即从用户操作页面进行操作，直接限制和截断某功能的入口：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6441379310344828&quot; data-type=&quot;gif&quot; data-w=&quot;725&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xE6oscyT530mM9xKSAtxErduPg9Fd28rXlcoeR2Ile34Be9eG8lnDpa8wribW6SjbbXOFiaBkss1VHWKGZgp7xHQ/640?wx_fmt=gif&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;从页面入口对积分链路降级&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，该业务场景下，是否使用积分，是在页面渲染阶段决定并返回给前段进行页面拼接的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们需要对其进行降级时，会通过控制平台进行降级开关切换，系统读到降级开启后，会返回前段积分降级的标识，前端将不再显示积分抵扣入口。即从入口处截断积分链路的执行，达到降级的目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2、存储降级&lt;/strong&gt;：使用缓存方式来降级频繁操作的存储&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.924074074074074&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xE6oscyT530mM9xKSAtxErduPg9Fd28rTwnBuSv4VAHPqt4o4PUJBxwJhoXoL82iaxqAKqiavYATadIMibjkX0Sgg/640?wx_fmt=png&quot;/&gt;&lt;figcaption&gt;https://blog.csdn.net/di_ko/article/details/118058080&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于秒杀业务这种写多读少的场景，对DB的压力是非常大的，一般的，我们会采用上图所示的缓存架构，用缓存操作代替DB操作，用异步MQ代替同步接口，也属于一种存储的降级行为。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3、读降级&lt;/strong&gt;：对于非核心信息的读请求禁用&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微信的抢红包场景，红包列表的展示属于抢红包的非核心链路，因此，对于列表展示，在业务压力较大的情况下，对头像等信息的读，可以直接禁用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4、写降级&lt;/strong&gt;：直接禁止相关写操作的服务请求&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;总结，一句话概括降级的核心--丢车保帅。以损失部分体验的代价，来换取整个业务链路的稳定性和持续可用。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Part3&lt;/span&gt;&lt;span&gt;熔断- 大局观&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;合作方遇到困难了，不能为了自己把人家逼上绝路，别把自己也拖垮！出于人道主义，还得时不时问询下，Are you ok ？&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;熔断机制之所以被我赋予大局观的美称，是因为其所要解决的问题是级联故障和服务雪崩！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4965229485396384&quot; data-type=&quot;gif&quot; data-w=&quot;719&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xE6oscyT530mM9xKSAtxErduPg9Fd28rqWdyxFhwxHoJYaiax8R8VeXShaQzMUY6eqRgnl6sFbz3lZDQbQ6Pp4w/640?wx_fmt=gif&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在分布式的环境下，异常是常态。如上图所示，当服务C出现调用异常时，会在服务B中出现大量的请求超时和调用延迟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些调用也是需要占用系统资源的，当大量请求积压，服务B的线程池等资源也会随之耗尽，最终导致整个服务链路的雪崩都是有可能的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，当服务C出现异常时，对服务C的调用适当暂停，同时不断监测其接口是否恢复，对于整个链路的健康非常有必要的，上述针对C的处理过程就是熔断。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48615160349854225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xE6oscyT530mM9xKSAtxErduPg9Fd28recXYP4L5PaAxt7XwhXz3b09M3aRX7gw6WOVtmFZhJuUJUcOGuHxROw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1372&quot;/&gt;&lt;figcaption&gt;Hystrix官方熔断流程&lt;span/&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上图可以看到，熔断操作的三个关键点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;熔断算法，即什么情况即会被判定为需要熔断&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熔断后处理，即当前系统不进行远程调用，但调用结果需要有替代逻辑&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;熔断恢复，适当的检测机制，用于结束熔断，恢复正常服务调用。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前在《在所依赖存储不授信的场景下实现柔性事务降级》一文中提到过，我们的分布式事务，会依赖底层存储做元数据存储和一致性校验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是底层存储的稳定性稍有不足，这里就涉及到了服务熔断的处理：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;当我们通过关键字监控，检测到底层存储的操作异常操作某阈值时，就会通过脚本触发一个开关切换的操作。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;此开关打开的作用是，弃用底层存储，直接走兜底消息队列，以保障绝大部分请求得以正常进行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在开发开启的时间段内，用试探线程去试探底层存储是否恢复，当探测到存储恢复正常时，切换开关恢复到正常链路。&lt;/p&gt;&lt;p&gt;（这一步目前还未实现，用人工代替了）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Sentinel: &lt;em&gt;&quot;https://github.com/alibaba/Sentinel/wiki/系统自适应限流&quot;&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Hystrix: &lt;em&gt;&quot;https://github.com/Netflix/Hystrix/wiki&quot;&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>61b94010ec389887e61653083d1040a6</guid>
<title>Logstash、Fluentd、Fluent Bit 还是 Vector？如何选择合适的开源日志收集器</title>
<link>https://toutiao.io/k/lfm3xkp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;企业无论是已经使用了开源日志收集工具，还是准备选择一款或多款工具，都有必要了解日志收集工具的关键要求。这些要求包括：高数据吞吐量、可靠性、可扩展性、灵活性、安全性以及资源（CPU和内存）消耗等。本文讨论了市面上流行的几款日志收集工具（包括 Logstash、Fluentd、Fluent Bit 和 Vector）及其主要特点。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5233333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z9BgVMEm7YsHhBHJ9Ife2Tx3DpR7TiaQuzCglTGSCWDmz65ibF6m8aO9qm1nGKmfXpvq4kjhm31gqLFQwMcpzGug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. Logstash&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Logstash&lt;/code&gt; 是最受欢迎的日志收集工具之一，它是 ELK（Elasticsearch/Logstash/Kibana）架构的一部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Logstash 的主要优势：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 处理结构化数据和非结构化数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 支持更高的数据安全性，能够匿名化或排除敏感字段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 支持数百个插件，包括输入、过滤和输出等插件。过滤器插件执行日志处理，比如聚合和解析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然 Logstash 是一款可靠的日志收集工具，在处理日志数据方面有诸多选项，但如果内存占用量小是个关键要求，本文介绍的其他日志收集工具可能更胜一筹。因为 Logstash 是用 Java 编写的，所以需要 JVM 支持。如果企业打算从嵌入式设备和物联网应用程序收集日志，它不是最佳选择。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. Fluentd&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Fluentd&lt;/code&gt; 是一款日志收集工具，内存占用量小，可以处理各种日志源和目的地。许多受支持的插件允许连接到多种类型的日志源和目的地。与其他日志收集工具一样，Fluentd 的典型日志源包括应用程序、基础设施和消息队列平台，而通常目的地是日志管理工具和存储归档系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Fluentd 的主要优势：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 支持许多日志源和目的地。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 灵活、可扩展的解析选项，支持多种输入格式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 拥有庞大的生态系统，包括成百上千个插件，以及用Ruby自行编写插件的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 支持 Apache 许可证，版本2.0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 供应商中立（CNCF项目）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果企业需要中立的供应商，Fluentd 是不错的选择。它还经常与 Kubernetes 和容器化环境一起使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. Fluent Bit&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Fluent Bit&lt;/code&gt; 不仅是一款日志收集工具，还可以用作数据流处理工具，并充当将日志数据转发到 Fluentd 的运送工具。Fluent Bit 在 Kubernetes 集群等容器化环境中运行顺畅。Fluent Bit 可以扩展并仍能节省资源，因为它占用的空间很小。虽然 Fluent Bit 经常用在 Kubernetes 环境中，但它也可以部署在裸机服务器、虚拟机和嵌入式设备上。&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1665666602814&quot; data-category_id_list=&quot;1|16|17|2|21|24|28|29|31|35|36|37|39|41|42|43|46|47|48|5|50|51|55|56|57|58|59|6|60|61|62|63|64|65|66|7|8&quot; data-id=&quot;1665666602814&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Fluent Bit的主要优势：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 轻量级设计，内存占用量极小（通常不到1MB）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 易于扩展的架构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 可插入式架构，有许多输入、过滤器和输出插件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 支持基于指标和基于日志的有效负载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 支持通过安全的连接将日志发送到存储后端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 使用 SQL，支持数据流处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 支持 Apache 许可证，版本2.0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 供应商中立（CNCF项目）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Fluent Bit 从众多日志源收集日志和指标，并将它们发送到不同的目的地。Fluent Bit 真正大放异彩的地方在于嵌入式、边缘及其他资源受限的环境，因为精简的运行时环境结合众多的输入/输出选项至关重要。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. Vector&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Vector&lt;/code&gt; 是一款高性能的日志收集工具。与本文中的其他日志收集工具相比，这款产品比较新。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vector 的主要优势：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 高效的内存/CPU消耗和高数据吞吐量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 良好的可靠性，正确性和交付方面有保证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 包括自定义 DSL，以一种安全、高性能的方式动态转换数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 支持基于指标和日志的有效负载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 大量的输入和输出集成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;● 可以部署为代理或聚合器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于广泛的部署选项、同时支持指标和日志以及可用集成的数量，使 Vector 成为一种出色而灵活的选择。由于 Vector 用 Rust 编写，提供了内存安全和效率保证，使其在其他现有工具中独树一帜。Vector 引入了单元测试框架，可以更轻松地维护复杂的日志收集工具拓扑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，Vector 的软件组件竭力为传送到目的地的日志和事件提供交付保证。Vector 的用户还可以获得 Vector 组件的代码总体稳定性方面的保证。无论在新环境中还是在旧环境中工作，它都值得认真考虑。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结 语&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很难判定哪一款工具主导市场，企业选择合适的日志收集工具取决于其特定需求和要求。比如说，如果企业在为需要资源消耗少的物联网应用程序寻找日志收集工具，那么最好使用 Vector 或 Fluent Bit，而不是 Logstash。如果企业看重供应商的中立性，CNCF 支持的项目（比如 Fluentd 和 Fluent Bit）倒是不错的选择。仔细检查性能、资源消耗、支持众多输入和输出格式的灵活性、可扩展性、可靠性、供应商锁定和安全要求，可以帮助企业找到适合的日志收集工具。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原文链接：https://era.co/blog/choose-open-source-log-collector&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4MjQ0MTU4Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z9BgVMEm7YtTw2oONBkwaiaM9hBxUj6yRLDEw8rSSxR8wWZFLjjXWpmGq5LNDlEAn4v9lSALDiaGfC4MyPZwL95g/0?wx_fmt=png&quot; data-nickname=&quot;k8s技术圈&quot; data-alias=&quot;kube100&quot; data-signature=&quot;专注容器、专注 kubernetes 技术......&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;点击上方卡片关注K8s技术圈，掌握前沿云原生技术&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>