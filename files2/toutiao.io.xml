<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bab550ba5f7f41b2f0cad503e674d074</guid>
<title>什么是分包？怎么利用分包优化</title>
<link>https://toutiao.io/k/9gs42k0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、什么是分包&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认情况下，Webpack 会将所有代码构建成一个单独的包，这在小型项目通常不会有明显的性能问题，但伴随着项目的推进，包体积逐步增长可能会导致应用的响应耗时越来越长。归根结底这种将所有资源打包成一个文件的方式存在两个弊端：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「资源冗余」&lt;/strong&gt;：客户端必须等待整个应用的代码包都加载完毕才能启动运行，但可能用户当下访问的内容只需要使用其中一部分代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「缓存失效」&lt;/strong&gt;：将所有资源达成一个包后，所有改动 —— 即使只是修改了一个字符，客户端都需要重新下载整个代码包，缓存命中率极低&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些问题都可以通过对产物做适当的分解拆包解决，例如 &lt;code&gt;node_modules&lt;/code&gt; 中的资源通常变动较少，可以抽成一个独立的包，那么业务代码的频繁变动不会导致这部分第三方库资源被无意义地重复加载。为此，Webpack 专门提供了 &lt;code&gt;SplitChunksPlugin&lt;/code&gt; 插件，用于实现产物分包。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、使用 SplitChunksPlugin&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 是 Webpack 4 之后引入的分包方案(此前为 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt;)，它能够基于一些启发式的规则将 Module 编排进不同的 Chunk 序列，并最终将应用代码分门别类打包出多份产物，从而实现分包功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用上，&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 的配置规则比较抽象，算得上 Webpack 的一个难点，仔细拆解后关键逻辑在于：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 通过 module 被引用频率、chunk 大小、包请求数三个维度决定是否执行分包操作，这些决策都可以通过 &lt;code&gt;optimization.splitChunks&lt;/code&gt; 配置项调整定制，基于这些维度我们可以实现：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;单独打包某些特定路径的内容，例如 &lt;code&gt;node_modules&lt;/code&gt; 打包为 &lt;code&gt;vendors&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单独打包使用频率较高的文件&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 还提供配置组概念 &lt;code&gt;optimization.splitChunks.cacheGroup&lt;/code&gt;，用于为不同类型的资源设置更有针对性的配置信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 还内置了 &lt;code&gt;default&lt;/code&gt; 与 &lt;code&gt;defaultVendors&lt;/code&gt; 两个配置组，提供一些开箱即用的特性：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;node_modules&lt;/code&gt; 资源会命中 &lt;code&gt;defaultVendors&lt;/code&gt; 规则，并被单独打包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;只有包体超过 20kb 的 Chunk 才会被单独打包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加载 Async Chunk 所需请求数不得超过 30&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加载 Initial Chunk 所需请求数不得超过 30&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这里所说的请求数不能等价对标到 http 资源请求数，下文会细讲&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，分包逻辑基本上都围绕着 Module 与 Chunk 展开，在介绍具体用法之前，有必要回顾一下 Chunk 的基础知识。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 什么是 Chunk&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&amp;amp;mid=2247484029&amp;amp;idx=1&amp;amp;sn=7862737524e799c5eaf1605325171e32&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;有点难的知识点：Webpack Chunk 分包规则详解&lt;/a&gt;》一文中，我们已经了解到 Chunk 是打包产物的基本组织单位，读者可以等价认为有多少 Chunk 就会对应生成多少产物(Bundle)。Webpack 内部包含三种类型的 Chunk：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Initial Chunk：基于 Entry 配置项生成的 Chunk&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Async Chunk：异步模块引用，如 &lt;code&gt;import(xxx)&lt;/code&gt; 语句对应的异步 Chunk&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Runtime Chunk：只包含运行时代码的 Chunk&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;关于运行时的概念，可参考《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&amp;amp;mid=2247484088&amp;amp;idx=1&amp;amp;sn=41bf509a72f2cbcca1521747bf5e28f4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Webpack 原理系列六：彻底理解 Webpack 运行时&lt;/a&gt;》&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 &lt;code&gt;SplitChunksPlugin&lt;/code&gt; 默认只对 Async Chunk 生效，开发者也可以通过 &lt;code&gt;optimization.splitChunks.chunks&lt;/code&gt; 调整作用范围，该配置项支持如下值：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;字符串 &lt;code&gt;&#x27;all&#x27;&lt;/code&gt; ：对 Initial Chunk 与 Async Chunk 都生效，建议优先使用该值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;字符串 &lt;code&gt;&#x27;initial&#x27;&lt;/code&gt; ：只对 Initial Chunk 生效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;字符串 &lt;code&gt;&#x27;async&#x27;&lt;/code&gt; ：只对 Async Chunk 生效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;函数 &lt;code&gt;(chunk) =&amp;gt; boolean&lt;/code&gt; ：该函数返回 &lt;code&gt;true&lt;/code&gt; 时生效&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;//...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;optimization&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;splitChunks&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;chunks&lt;/span&gt;: &lt;span&gt;&#x27;all&#x27;&lt;/span&gt;,&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 分包策略详解&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;2.2.1 根据 Module 使用频率分包&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 支持按 Module 被 Chunk 引用的次数决定是否进行分包，开发者可通过 &lt;code&gt;optimization.splitChunks.minChunks&lt;/code&gt; 设定最小引用次数，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;//...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;optimization&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;splitChunks&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;// 设定引用次数超过 4 的模块才进行分包&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;minChunks&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意，这里“被 Chunk 引用次数”并不直接等价于被 &lt;code&gt;import&lt;/code&gt; 的次数，而是取决于上游调用者是否被视作 Initial Chunk 或 Async Chunk 处理，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// common.js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&quot;common chunk&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// async-module.js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; common &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./common&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// entry-a.js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; common &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./common&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt;(&lt;span&gt;&#x27;./async-module&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// entry-b.js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; common &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./common&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// webpack.config.js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;entry&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;entry1&lt;/span&gt;: &lt;span&gt;&#x27;./src/entry-a.js&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;entry2&lt;/span&gt;: &lt;span&gt;&#x27;./src/entry-b.js&#x27;&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;optimization&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;splitChunks&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;minChunks&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上例包含四个模块，形成如下模块关系图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6496350364963503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3xDuJ3eicibllNWYkn0jqh4vRxWtl9tQRDFw5UDyUqL9UZyUQMTtkKsxSJvm0zHP3oWyufU7QQrvP2BE5x7HyvXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;822&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例中，&lt;code&gt;entry-a&lt;/code&gt;、&lt;code&gt;entry-b&lt;/code&gt; 分别被视作 Initial Chunk 处理；&lt;code&gt;async-module&lt;/code&gt; 被 &lt;code&gt;entry-a&lt;/code&gt; 以异步方式引入，因此被视作 Async Chunk 处理。那么对于 &lt;code&gt;common&lt;/code&gt; 模块来说，分别被三个不同的 Chunk 引入，此时引用次数为 3，命中 &lt;code&gt;optimization.splitChunks.minChunks = 2&lt;/code&gt; 规则，因此该模块&lt;strong&gt;「可能」&lt;/strong&gt;会被单独分包，最终产物：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;entry-a.js&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;entry-b.js&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;async-module.js&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;commont.js&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;2.2.2 限制分包数量&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在满足 &lt;code&gt;minChunks&lt;/code&gt; 基础上，还可以通过 &lt;code&gt;maxInitialRequest/maxAsyncRequests&lt;/code&gt; 配置项限定分包数量，配置项语义：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxInitialRequest&lt;/code&gt;：用于设置 Initial Chunk 最大并行请求数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxAsyncRequests&lt;/code&gt;：用于设置 Async Chunk 最大并行请求数&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里所说的“请求数”，是指加载一个 Chunk 时所需同步加载的分包数。例如对于一个 Chunk A，如果根据分包规则(如模块引用次数、第三方包)分离出了若干子 Chunk A¡，那么请求 A 时，浏览器需要同时请求所有的 A¡，此时并行请求数等于 ¡ 个分包加 A 主包，即 ¡+1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，对于上例所说的模块关系：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6496350364963503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3xDuJ3eicibllNWYkn0jqh4vRxWtl9tQRDgYXl8ibiaEeO4N2CW40DbKRFFaOkmEwzNv1CCgakYPO6O6Cwm9TgbbqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;822&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若 &lt;code&gt;minChunks = 2&lt;/code&gt; ，则 &lt;code&gt;common&lt;/code&gt; 模块命中 &lt;code&gt;minChunks&lt;/code&gt; 规则被独立分包，浏览器请求 &lt;code&gt;entry-a&lt;/code&gt; 时，则需要同时请求 &lt;code&gt;common&lt;/code&gt; 包，并行请求数为 1 + 1=2。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而对于下述模块关系：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3672627235213205&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3xDuJ3eicibllNWYkn0jqh4vRxWtl9tQRDZPR7nkf2kzkZtkmMgkpnA5hAaJUGCHOMoCaarjDB6hTDYhkAXQmlUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1454&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若 &lt;code&gt;minChunks = 2&lt;/code&gt; ，则 &lt;code&gt;common-1&lt;/code&gt; 、&lt;code&gt;common-2&lt;/code&gt; 同时命中 &lt;code&gt;minChunks&lt;/code&gt; 规则被分别打包，浏览器请求 &lt;code&gt;entry-b&lt;/code&gt; 时需要同时请求 &lt;code&gt;common-1&lt;/code&gt; 、&lt;code&gt;common-2&lt;/code&gt; 两个分包，并行数为 2 + 1 = 3，此时若 &lt;code&gt;maxInitialRequest = 2&lt;/code&gt;，则分包数超过阈值，&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 会放弃 &lt;code&gt;common-1&lt;/code&gt; 、&lt;code&gt;common-2&lt;/code&gt; 中体积较小的分包。&lt;code&gt;maxAsyncRequest&lt;/code&gt; 逻辑与此类似，不在赘述。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并行请求数关键逻辑总结如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Initial Chunk 本身算一个请求&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Async Chunk 不算并行请求&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;runtimeChunk&lt;/code&gt; 拆分出的 runtime 不算并行请求&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果同时有两个 Chunk 满足拆分规则，但是 &lt;code&gt;maxInitialRequests&lt;/code&gt;(或 &lt;code&gt;maxAsyncRequest&lt;/code&gt;) 的值只能允许再拆分一个模块，那么体积更大的模块会被优先拆解&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;2.2.3 限制分包体积&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在满足 &lt;code&gt;minChunks&lt;/code&gt; 与 &lt;code&gt;maxInitialRequests&lt;/code&gt; 的基础上，&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 还会进一步判断 Chunk 包大小决定是否分包，这一规则相关的配置项非常多：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;minSize&lt;/code&gt;：超过这个尺寸的 Chunk 才会正式被分包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxSize&lt;/code&gt;：超过这个尺寸的 Chunk 会尝试继续做分包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxAsyncSize&lt;/code&gt;：与 &lt;code&gt;maxSize&lt;/code&gt; 功能类似，但只对异步引入的模块生效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxInitialSize&lt;/code&gt;：与 &lt;code&gt;maxSize&lt;/code&gt; 类似，但只对 &lt;code&gt;entry&lt;/code&gt; 配置的入口模块生效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;enforceSizeThreshold&lt;/code&gt;：超过这个尺寸的 Chunk 会被强制分包，忽略上述其它 size 限制&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，结合前面介绍的两种规则，&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 的主体流程如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 尝试将命中 &lt;code&gt;minChunks&lt;/code&gt; 规则的 Module 统一抽到一个额外的 Chunk 对象；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断该 Chunk 是否满足 &lt;code&gt;maxInitialRequests&lt;/code&gt; 阈值，若满足则进行下一步&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断该 Chunk 资源的体积是否大于上述配置项 &lt;code&gt;minSize&lt;/code&gt; 声明的下限阈值；&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果体积&lt;strong&gt;「小于」&lt;/strong&gt; &lt;code&gt;minSize&lt;/code&gt; 则取消这次分包，对应的 Module 依然会被合并入原来的 Chunk&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 Chunk 体积&lt;strong&gt;「大于」&lt;/strong&gt; &lt;code&gt;minSize&lt;/code&gt; 则判断是否超过 &lt;code&gt;maxSize&lt;/code&gt;、&lt;code&gt;maxAsyncSize&lt;/code&gt;、&lt;code&gt;maxInitialSize&lt;/code&gt; 声明的上限阈值，如果超过则尝试将该 Chunk 继续分割成更小的部分&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;虽然 &lt;code&gt;maxSize&lt;/code&gt; 等上限阈值逻辑会产生更多的包体，但缓存粒度会更小，命中率相对也会更高，配合持久缓存与 HTTP 2 的多路复用能力，网络性能反而会有正向收益。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上述模块关系为例：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6496350364963503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3xDuJ3eicibllNWYkn0jqh4vRxWtl9tQRDFw5UDyUqL9UZyUQMTtkKsxSJvm0zHP3oWyufU7QQrvP2BE5x7HyvXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;822&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若此时 Webpack 配置的 &lt;code&gt;minChunks&lt;/code&gt; 大于 2，且 &lt;code&gt;maxInitialRequests&lt;/code&gt; 也同样大于 2，如果 &lt;code&gt;common&lt;/code&gt; 模块的体积大于上述说明的 &lt;code&gt;minxSize&lt;/code&gt; 配置项则分包成功，&lt;code&gt;commont&lt;/code&gt; 会被分离为单独的 Chunk，否则会被合并入原来的 3 个 Chunk。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;注意，这些属性的优先级顺序为：&lt;/p&gt;&lt;p&gt;&lt;code&gt;maxInitialRequest/maxAsyncRequests &amp;lt; maxSize &amp;lt; minSize&lt;/code&gt;&lt;/p&gt;&lt;p&gt;而命中 &lt;code&gt;enforceSizeThreshold&lt;/code&gt; 阈值的 Chunk 会直接跳过这些属性判断，强制进行分包。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3 使用&lt;code&gt;cacheGroups&lt;/code&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;2.3.1 理解缓存组&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除上述 &lt;code&gt;minChunks&lt;/code&gt;、&lt;code&gt;maxInitialRequest&lt;/code&gt;、&lt;code&gt;minSize&lt;/code&gt; 等基础规则外，&lt;code&gt;SplitChunksPlugin&lt;/code&gt; 还提供了 &lt;code&gt;cacheGroups&lt;/code&gt; 配置项用于为不同文件组设置不同的规则，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;//...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;optimization&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;splitChunks&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;cacheGroups&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;vendors&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;test&lt;/span&gt;: &lt;span&gt;/[\\/]node_modules[\\/]/&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;minChunks&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;minSize&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例通过 &lt;code&gt;cacheGroups&lt;/code&gt; 属性设置 &lt;code&gt;vendors&lt;/code&gt; 缓存组，所有命中 &lt;code&gt;vendors.test&lt;/code&gt; 规则的模块都会被视作 &lt;code&gt;vendors&lt;/code&gt; 分组，优先应用该组下的 &lt;code&gt;minChunks&lt;/code&gt;、&lt;code&gt;minSize&lt;/code&gt; 等分包配置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了 &lt;code&gt;minChunks&lt;/code&gt; 等分包基础配置项之外，&lt;code&gt;cacheGroups&lt;/code&gt; 还支持一些与分组逻辑强相关的属性，包括：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;test&lt;/code&gt;：接受正则表达式、函数及字符串，所有符合 &lt;code&gt;test&lt;/code&gt; 判断的 Module 或 Chunk 都会被分到该组&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;type&lt;/code&gt;：接受正则表达式、函数及字符串，与 &lt;code&gt;test&lt;/code&gt; 类似均用于筛选分组命中的模块，区别是它判断的依据是文件类型而不是文件名，例如 &lt;code&gt;type = &#x27;json&#x27;&lt;/code&gt; 会命中所有 JSON 文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;idHint&lt;/code&gt;：字符串型，用于设置 Chunk ID，它还会被追加到最终产物文件名中，例如 &lt;code&gt;idHint = &#x27;vendors&#x27;&lt;/code&gt; 时，输出产物文件名形如 &lt;code&gt;vendors-xxx-xxx.js&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;priority&lt;/code&gt;：数字型，用于设置该分组的优先级，若模块命中多个缓存组，则优先被分到 &lt;code&gt;priority&lt;/code&gt; 更大的组&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存组的作用在于能为不同类型的资源设置更具适用性的分包规则，一个典型场景是将所有 &lt;code&gt;node_modules&lt;/code&gt; 下的模块统一打包到 &lt;code&gt;vendors&lt;/code&gt; 产物，从而实现第三方库与业务代码的分离。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;2.3.2 默认分组&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Webpack 提供了两个开箱即用的 &lt;code&gt;cacheGroups&lt;/code&gt;，分别命名为 &lt;code&gt;default&lt;/code&gt; 与 &lt;code&gt;defaultVendors&lt;/code&gt;，默认配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;//...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;optimization&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;splitChunks&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;cacheGroups&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;default&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;idHint&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;reuseExistingChunk&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;minChunks&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;priority&lt;/span&gt;: &lt;span&gt;-20&lt;/span&gt;&lt;br/&gt;        },&lt;br/&gt;        &lt;span&gt;defaultVendors&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;idHint&lt;/span&gt;: &lt;span&gt;&quot;vendors&quot;&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;reuseExistingChunk&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;test&lt;/span&gt;: &lt;span&gt;/[\\/]node_modules[\\/]/i&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;priority&lt;/span&gt;: &lt;span&gt;-10&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      },&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个配置组能帮助我们：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;将所有 &lt;code&gt;node_modules&lt;/code&gt; 中的资源单独打包到 &lt;code&gt;vendors-xxx-xx.js&lt;/code&gt; 命名的产物&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对引用次数大于等于 2 的模块，也就是被多个 Chunk 引用的模块，单独打包&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开发者也可以将默认分组设置为 false，关闭分组配置，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;//...&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;optimization&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;splitChunks&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;cacheGroups&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;default&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4 配置项回顾&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我们再回顾一下 &lt;code&gt;SplitChunksPlugin&lt;/code&gt; 支持的配置项：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;minChunks&lt;/code&gt;：用于设置引用阈值，被引用次数超过该阈值的 Module 才会进行分包处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxInitialRequest/maxAsyncRequests&lt;/code&gt;：用于限制 Initial Chunk(或 Async Chunk) 最大并行请求数，本质上是在限制最终产生的分包数量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;minSize&lt;/code&gt;：超过这个尺寸的 Chunk 才会正式被分包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxSize&lt;/code&gt;：超过这个尺寸的 Chunk 会尝试继续做分包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxAsyncSize&lt;/code&gt;：与 &lt;code&gt;maxSize&lt;/code&gt; 功能类似，但只对异步引入的模块生效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxInitialSize&lt;/code&gt;：与 &lt;code&gt;maxSize&lt;/code&gt; 类似，但只对 &lt;code&gt;entry&lt;/code&gt; 配置的入口模块生效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;enforceSizeThreshold&lt;/code&gt;：超过这个尺寸的 Chunk 会被强制分包，忽略上述其它 size 限制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;cacheGroups&lt;/code&gt;：用于设置缓存组规则，为不同类型的资源设置更有针对性的分包策略&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、拆分运行时包&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&amp;amp;mid=2247484088&amp;amp;idx=1&amp;amp;sn=41bf509a72f2cbcca1521747bf5e28f4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Webpack 原理系列六：彻底理解 Webpack 运行时&lt;/a&gt;》一文中，已经比较深入介绍 Webpack 运行时的概念、组成、作用与生成机制，大致上我们可以将运行时理解为一种补齐模块化、异步加载等能力的应用骨架，用于支撑 Webpack 产物在各种环境下的正常运行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行时代码的内容由业务代码所使用到的特性决定，例如当 Webpack 检测到业务代码中使用了异步加载能力，就会将异步加载相关的运行时注入到产物中，因此业务代码用到的特性越多，运行时就会越大，有时甚至可以超过 1M 之多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，可以将 &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; 设置为 true，以此将运行时代码拆分到一个独立的 Chunk，实现分包。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;四、最佳实践&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，如何设置最适合项目情况的分包规则呢？这个问题并没有放诸四海皆准的通用答案，因为软件系统与现实世界的复杂性，决定了很多计算机问题并没有银弹，不过我个人还是总结了几条可供参考的最佳实践：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「尽量将第三方库拆为独立分包」&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如在一个 React + Redux 项目中，可想而知应用中的大多数页面都会依赖于这两个库，那么就应该将它们从具体页面剥离，避免重复加载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但对于使用频率并不高的第三方库，就需要按实际情况灵活判断，例如项目中只有某个页面 A 接入了 Three.js，如果将这个库跟其它依赖打包在一起，那用户在访问其它页面的时候都需要加载 Three.js，最终效果可能反而得不偿失，这个时候可以尝试使用异步加载功能将 Three.js 独立分包&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「保持按路由分包，减少首屏资源负载」&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设想一个超过 10 个页面的应用，假如将这些页面代码全部打包在一起，那么用户访问其中任意一个页面都需要等待其余 9 个页面的代码全部加载完毕后才能开始运行应用，这对 TTI 等性能指标明显是不友好的，所以应该尽量保持按路由维度做异步模块加载，所幸很多知名框架如 React、Vue 对此都有很成熟的技术支持&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「尽量保持」&lt;/strong&gt; &lt;code&gt;**chunks = &#x27;all&#x27;**&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;optimization.splitChunks.chunks&lt;/code&gt; 配置项用于设置 &lt;code&gt;SplitChunksPlugin&lt;/code&gt; 的工作范围，我们应该尽量保持 &lt;code&gt;chunks = &#x27;all&#x27;&lt;/code&gt; 从而最大程度优化分包逻辑&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0b5875e88c196d4fcbbd3a5b9ed1e4e4</guid>
<title>日志中台不重不丢实现浅谈</title>
<link>https://toutiao.io/k/cnc323n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

          

          
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c1d0e95a8dab3ac0a8f44a7138bff9fd</guid>
<title>迈向可验证的 AI: 形式化方法的五大挑战</title>
<link>https://toutiao.io/k/69dbklz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;307&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cNFA8C0uVPvcqbcictialp8AorQz8ickOsgZZj1QdV9Z49F3GibP9XJw1akUB4ZIm3bp508eZbAxYia6Xem1KMUWMOA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作者 | Sanjit A. Seshia, Dorsa Sadigh, S. Shankar Sastry&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编译 | 李梅、黄楠&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编辑 | 陈彩娴&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;人工智能试图模仿人类智能的计算系统，包括人类一些与智能具有直观联系的功能，例如学习、解决问题以及理性地思考和行动。在广义地解释上，AI 一词涵盖了许多密切相关的领域如机器学习。那些大量使用 AI 的系统在医疗保健、交通运输、金融、社交网络、电子商务和教育等领域都产生了重大的社会影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种日益增长的社会影响，也带来了一系列风险和担忧，包括人工智能软件中的错误、网络攻击和人工智能系统安全等方面。因此，AI 系统的验证问题以及更广泛的可信 AI 的话题已经开始引起研究界的关注。“可验证 AI”已经被确立为设计 AI 系统的目标，一个可验证的 AI 系统在特定的数学要求上具有强大的、理想情况下可证明的正确性保证。我们怎样才能实现这个目标？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最近，《ACM 通讯》（The Communications of ACM）上的一篇综述文章，试图从形式验证的角度来思考可证验 AI 面临的挑战，并给出了一些原则性的解决方案。文章作者是加州伯克利分校电气工程与计算机科学系的主任 S. Shankar Sastry 和 Sanjit A. Seshia 教授，以及斯坦福大学计算机科学系助理教授 Dorsa Sadigh。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在计算机科学和工程领域，形式方法涉及系统的严格的数学规范、设计和验证。其核心在于，形式方法是关于证明的：制定形成证明义务的规范，设计系统以履行这些义务，并通过算法证明搜索来验证系统确实符合其规范。从规范驱动的测试和仿真到模型检查和定理证明，一系列的形式化方法常被用于集成电路的计算机辅助设计，并已广泛被用于发现软件中的错误，分析网络物理系统，并发现安全漏洞。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文回顾了形式化方法传统的应用方式，指明了形式化方法在 AI 系统中的五个独特挑战，包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在讨论最新进展的基础上，作者提出了解决以上挑战的原则。本文不仅仅关注特定类型的 AI 组件如深度神经网络，或特定的方法如强化学习，而是试图涵盖更广泛的 AI 系统及其设计过程。此外，形式化方法只是通往可信 AI 的其中一种途径，所以本文的观点旨在对来自其他领域的方法加以补充。这些观点很大程度上来源于对自主和半自主系统中使用 AI 所产生的问题的思考，在这些系统中，安全性和验证性问题更加突出。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;概述&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;图 1 显示了形式验证、形式综合和形式指导的运行时弹性的典型过程。形式验证过程从三个输入开始：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;339&quot; data-backw=&quot;546&quot; data-height=&quot;635&quot; data-ratio=&quot;0.6213307240704501&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cNFA8C0uVPtlBIickYq1Xc0dczjMjAd28kUEoibunbB8jqibnUaThG7E2nHWfPHJ2DuzclxmicYkpe4iamLtCicZVQGQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1022&quot; data-width=&quot;1022&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图 1 ：用于验证、综合和运行时弹性的形式化方法&lt;/span&gt;&lt;/section&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;要验证的系统模型 S&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;环境模型 E&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;待验证的属性 Φ&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-1&quot;/&gt;&lt;p&gt;&lt;span&gt;验证者生成“是”或“否”的答案作为输出，来表明 S 是否满足环境 E 中的属性 Φ。通常，“否”输出伴随着反例，也称为错误跟踪（error trace），它是对系统的执行，表明 Φ 是如何被伪造的。一些验证工具还包括带有“是”答案的正确性证明或证书。我们对形式方法采取一种广泛的视角，包括使用形式规范、验证或综合的某些方面的任何技术。例如，我们囊括了基于仿真的硬件验证方法或基于模型的软件测试方法，因为它们也使用正式的规范或模型来指导仿真或测试的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要将形式验证应用于 AI 系统，必须能够以形式来表示至少 S、E 和 Φ 这三个输入，理想情况下，会存在有效的决策程序来回答先前所描述的“是/否”问题。然而，即使要对三个输入构建良好的表示，也并不是一件简单的事，更不用说处理底层设计和验证问题的复杂性了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们这里通过半自动驾驶领域的示例来说明本文的观点。图 2 显示了一个 AI 系统的说明性示例：一个闭环 CPS，包括一辆带有机器学习组件的半自动车辆及其环境。具体来说，假设半自动的“自我”（ego）车辆有一个自动紧急制动系统 (AEBS)，该系统试图对前方的物体进行检测和分类，并在需要避免碰撞时启动制动器。图 2 中，一个 AEBS 包括一个由控制器（自动制动）、一个受控对象（受控的车辆子系统，包括自主堆栈的其他部分）和一个传感器（摄像头），以及一个使用 DNN 的感知组件。AEBS 与车辆环境相结合，形成一个闭环 CPS。“自我”车辆的环境包括车辆外部（其他车辆、行人等）以及车辆内部（例如驾驶员）的代理和对象。这种闭环系统的安全要求可以非形式地刻画为以一种属性，即在移动的“自我”车辆与道路上的任何其他代理或物体之间保持安全距离。然而，这种系统在规范、建模和验证方面存在许多细微差别。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;227&quot; data-backw=&quot;546&quot; data-height=&quot;424&quot; data-ratio=&quot;0.41487279843444225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cNFA8C0uVPtlBIickYq1Xc0dczjMjAd284bML1ibjefiaiaCr73lFt5XKHPp8iciaCSqhEvwibrfCMCk5IeHfzWt2cRSg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1022&quot; data-width=&quot;1022&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;图 2：包含机器学习组件的闭环 CPS 示例&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一，考虑对半自动车辆的环境进行建模。即使是环境中有多少和哪些代理（包括人类和非人类）这样的问题，也可能存在相当大的不确定性，更不用说它们的属性和行为了。第二，使用 AI 或 ML 的感知任务即使不是不可能，也很难形式化地加以规定。第三，诸如 DNN 之类的组件可能是在复杂、高维输入空间上运行的复杂、高维对象。因此，在生成形式验证过程的三个输入 S、E、Φ 时，即便采用一种能够使验证易于处理的形式，也十分具有挑战性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果有人解决了这个问题，那就会面临一项艰巨的任务，即验证一个如图 2 那样复杂的基于 AI 的 CPS。在这样的 CPS 中，组合（模块化）方法对于可扩展性来说至关重要，但它会由于组合规范的难度之类的因素而难以实施。最后，建构中修正的方法（correct-by-construction,CBC）有望实现可验证 AI，但它还处于起步阶段，非常依赖于规范和验证方面的进步。图 3 总结了可验证 AI 的五个挑战性领域。对于每个领域，我们将目前有前景的方法提炼成克服挑战的三个原则，用节点表示。节点之间的边缘显示了可验证 AI 的哪些原则相互依赖，共同的依赖线程由单一颜色表示。下文将详细阐述这些挑战和相应的原则。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;302&quot; data-backw=&quot;546&quot; data-height=&quot;564&quot; data-ratio=&quot;0.5523996082272282&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cNFA8C0uVPtlBIickYq1Xc0dczjMjAd28ApJoX7Xciaiax41qYfmzn76cvp0d2Osj5oRUPo9BiafV4w2N3SNiaCsibBw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1021&quot; data-width=&quot;1021&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;图 3：可验证 AI 的 5 个挑战领域总结&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;环境建模&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;基于 AI/ML 的系统所运行的环境通常很复杂， 比如对自动驾驶汽车运行的各种城市交通环境的建模。事实上，AI/ML 经常被引入这些系统中以应对环境的复杂性和不确定性。当前的 ML 设计流程通常使用数据来隐性地规定环境。许多 AI 系统的目标是在其运行过程中发现并理解其环境，这与为先验指定的环境设计的传统系统不同。然而，所有形式验证和综合都与一个环境模型有关。因此，必须将有关输入数据的假设和属性解释到环境模型中。我们将这种二分法提炼为 AI 系统环境建模的三个挑战，并制定相应的原则来解决这些挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 建模不确定性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在形式验证的传统用法中，一种司空见惯的做法是将环境建模为受约束的非确定性过程，或者“干扰”。这种“过度近似”的环境建模能够允许人们更为保守地捕捉环境的不确定性，而无需过于详细的模型，这种模型的推理是很不高效的。然而，对于基于 AI 的自主性，纯粹的非确定性建模可能会产生太多虚假的错误报告，从而使验证过程在实践中变得毫无用处。例如在对一辆自动驾驶汽车的周围车辆行为的建模中，周围车辆的行为多种多样，如果采用纯粹的非确定性建模，就考虑不到总是意外发生的事故。此外，许多 AI/ML 系统隐式或显式地对来自环境的数据或行为做出分布假设，从而需要进行概率建模。由于很难准确地确定潜在的分布，所以不能假定生成的概率模型是完美的，并且必须在模型本身中对建模过程中的不确定性加以表征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;概率形式建模。&lt;/strong&gt;为了应对这一挑战，我们建议使用结合概率建模和非确定性建模的形式。在能够可靠地指定或估计概率分布的情况下，可以使用概率建模。在其他情况下，非确定性建模可用于对环境行为进行过度近似。虽然诸如马尔可夫决策过程之类的形式主义已经提供了一种混合概率和非确定性的方法，但我们相信，更丰富的形式主义如概率规划范式，可以提供一种更具表达力和程序化的方式来对环境进行建模。我们预测，在许多情况下，此类概率程序需要（部分地）从数据中进行学习或合成。此时，学习参数中的任何不确定性都必须传播到系统的其余部分，并在概率模型中加以表示。例如，凸马尔可夫决策过程提供了一种方法来表示学习转变概率值的不确定性，并扩展了用于验证和控制的算法来解释这种不确定性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 未知的变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在传统的形式验证领域如验证设备驱动程序中，系统 S 与其环境 E 之间的接口定义良好，E 只能通过该接口与 S 进行交互。对于基于 AI 的自主性而言，该接口是不完善的，它由传感器和感知组件规定，这些组件只能部分且嘈杂地捕捉环境，而且无法捕捕捉 S 和 E 之间的所有交互。所有环境的变量（特征）都是已知的，更不用说被感知到的变量。即使在环境变量已知的受限场景中，也明显缺乏有关其演变的信息，尤其是在设计的时候。此外，代表环境接口的激光雷达等传感器建模也是一项重大的技术挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;内省环境建模&lt;/strong&gt;。我们建议通过开发内省的设计和验证方法来解决这个问题，也就是说，在系统 S 中进行内省，来对关于环境 E 的假设 A 进行算法上的识别，该假设足以保证满足规范 Φ。理想情况下，A 必须是此类假设中最弱的一个，并且还必须足够高效，以便在设计时生成、并在运行时监控可用传感器和有关环境的其他信息源，以及方便在假设被违反时可以采取缓解措施。此外，如果涉及人类操作员，人们可能希望 A 可以翻译成可理解的解释，也就是说 S 可以向人类“解释”为什么它可能无法满足规范 Φ。处理这些多重要求以及对良好传感器模型的需求，使得内省环境建模成为一个非常重要的问题。初步的工作表明，这种可监控假设的提取在简单的情况下是可行的，虽然需要做更多的工作才能让它具有实用性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 模拟人类行为&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于许多 AI 系统，例如半自动驾驶汽车，人类代理是环境和系统的关键部分。关于人类的人工模型无法充分捕捉人类行为的可变性和不确定性。另一方面，用于建模人类行为的数据驱动方法可能对 ML 模型使用的特征的表达能力和数据质量敏感。为了实现人类 AI 系统的高度保证，我们必须解决当前人类建模技术的局限性，并为其预测准确性和收敛性提供保障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;主动的数据驱动建模。&lt;/strong&gt;我们相信，人类建模需要一种主动的数据驱动方法，模型结构和以数学形式表示的特征适合使用形式方法。人类建模的一个关键部分是捕捉人类意图。我们提出了一个三管齐下的方法：基于专家知识来定义模型的模板或特征，用离线学习来完成模型以供设计时使用，以及在运行时通过监控和与环境交互来学习和更新环境模型。例如，已经有研究表明，通过人类受试者实验从驾驶模拟器收集的数据，可用于生成人类驾驶员的行为模型，这些模型可用于验证和控制自动驾驶汽车。此外，计算机安全领域的对抗性训练和攻击技术可用于人类模型的主动学习，并可针对导致不安全行为的特定人类动作来进一步设计模型。这些技术可以帮助开发 human-AI 系统的验证算法。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;形式化规范&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;形式化验证严重依赖于形式化规范——即对系统应该做什么的精确的数学陈述。即使在形式化方法已经取得相当大成功的领域，提出高质量的形式化规范也是一项挑战，而 AI 系统尤其面临着独特的挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 难以形式化的任务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 2 中 AEBS 控制器中的感知模块必须检测和分类对象，从而将车辆和行人与其他实体区分开来。在经典的形式方法意义上，这个模块的准确性要求对每种类型的道路使用者和对象进行形式定义，这是极其困难的。这种问题存在于这个感知模块的所有实现中，而不仅仅出现在基于深度学习的方法中。其他涉及感知和交流的任务也会出现类似的问题，比如自然语言处理。那么，我们如何为这样的模块指定精度属性呢？规范语言应该是什么？我们可以使用哪些工具来构建规范？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;端到端/系统水平的规范（End-to-end/system-level specifications）&lt;/strong&gt;。为了应对上述挑战，我们可以对这个问题稍加变通。与其直接对难以形式化的任务进行规范，不如首先专注于精确地指定 AI 系统的端到端行为。从这种系统水平的规范中，可以获得对难以形式化的组件的输入-输出接口的约束。这些约束用作一个组件水平（component-level ）的规范，这个规范与整个 AI 系统的上下文相关。对于图 2 中的 AEBS 示例，这涉及对属性 Φ 的规定，该属性即在运动过程中与任何对象都保持最小距离，从中我们可得出对 DNN 输入空间的约束，在对抗分析中捕捉语义上有意义的输入空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 定量规范 vs. 布尔规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统上，形式规范往往是布尔型的，它将给定的系统行为映射为“真”或“假”。然而，在 AI 和 ML 中，规范通常作为规范成本或奖励的目标函数给出。此外，可能有多个目标，其中一些必须一起满足，而另一些则可能需要在某些环境中相互权衡。统一布尔和定量两种规范方法的最佳方式是什么？是否有能够统一捕捉 AI 组件常见属性（如鲁棒性和公平性）的形式？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;混合定量和布尔规范。&lt;/strong&gt;布尔规范和定量规范都有其优点：布尔规范更容易组合，但目标函数有助于用基于优化的技术进行验证和综合，并定义更精细的属性满足粒度。弥补这一差距的一种方法是转向定量规范语言，例如使用具有布尔和定量语义的逻辑（如度量时序逻辑），或将自动机与 RL 的奖励函数相结合。另一种方法是将布尔和定量规范组合成一个通用的规范结构，例如一本规则手册 ，手册中的规范可以按层次结构进行组织、比较和汇总。有研究已经确定了 AI 系统的几类属性，包括鲁棒性、公平性、隐私性、问责性和透明度。研究者正在提出新的形式主义，将形式方法和 ML 的思想联系起来，以对这些属性的变体（如语义鲁棒性）进行建模。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 数据 vs. 形式要求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“数据即规范”的观点在机器学习中很常见。有限输入集上标记的“真实”数据通常是关于正确行为的唯一规范。这与形式化方法非常不同，形式化方法通常以逻辑或自动机的形式给出，它定义了遍历所有可能输入的正确行为的集合。数据和规范之间的差距值得注意，尤其是当数据有限、有偏见或来自非专家时。我们需要技术来对数据的属性进行形式化，包括在设计时可用的数据和尚未遇到的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;规范挖掘(Specification mining)。&lt;/strong&gt; 为了弥合数据和形式规范之间的差距，我们建议使用算法从数据和其他观察中来推断规范——即所谓的规范挖掘技术。此类方法通常可用于 ML 组件，包括感知组件，因为在许多情况下，它不需要具有精确的规范或人类可读的规范。我们还可以使用规范挖掘方法，从演示或更复杂的多个代理（人类和人工智能）之间的交互形式来推断人类意图和其他属性。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;4&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;学习系统的建模&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在形式验证的大多数传统应用中，系统 S 在设计时是固定的且已知的，比如它可以是一个程序，或者一个用编程语言或硬件描述语言来描述的电路。系统建模问题主要涉及的，是通过抽象掉不相关的细节，来将 S 减小到更易于处理的大小。AI 系统给系统建模带来了非常不同的挑战，这主要源于机器学习的使用：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;高维输入空间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用于感知的 ML 组件通常在非常高维的输入空间上运行。比如，一个输入的RGB 图像可以是 1000 x 600 像素，它包含256((1000x600x3)) 个元素，输入通常就是这样的高维向量流。尽管研究人员已经对高维输入空间（如在数字电路中）使用了形式化方法，但基于 ML 的感知输入空间的性质是不同的，它不完全是布尔值，而是混合的，包括离散变量和连续变量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;高维参数/状态空间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;深度神经网络等 ML 组件具有数千到数百万个模型参数和原始组件。例如，图 2 中使用的最先进的 DNN 有多达 6000 万个参数和数十层组件。这就产生了巨大的验证搜索空间，抽象过程需要非常仔细。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;在线适应和进化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一些学习系统如使用 RL 的机器人，会随着它们遇到的新数据和新情况而发生进化。对于这样的系统，设计时的验证必须考虑系统行为的未来演变，或者随着学习系统的发展逐步地在线执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;在上下文中建模系统&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于许多 AI/ML 组件，它们的规范仅仅由上下文来定义。例如，要验证图 2 中基于 DNN 的系统的安全性，就需要对环境进行建模。我们需要对 ML 组件及其上下文进行建模的技术，以便可以验证在语义上有意义的属性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近年来，许多工作都专注于提高效率，来验证 DNN 的鲁棒性和输入-输出属性。然而，这还不够，我们还需要在以下三个方面取得进展：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;自动抽象和高效表示&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自动生成系统的抽象一直是形式方法的关键，它在将形式方法的范围扩展到大型硬件和软件系统方面发挥着至关重要的作用。为了解决基于 ML 的系统的超高维混合状态空间和输入空间方面的挑战，我们需要开发有效的技术来将 ML 模型抽象为更易于形式分析的、更简单的模型。一些有希望的方向包括：使用抽象解释来分析 DNN，开发用于伪造有 ML 组件的网络物理系统的抽象，以及设计用于验证的新表示（比如星集）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;解释与因果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果学习者在其预测中附上关于预测是如何从数据和背景知识中产生的的解释，那我们就可以简化对学习系统进行建模的任务。这个想法并不新鲜，ML 社区已经对诸如“基于解释的泛化”等术语进行了研究，但是最近，人们正在对使用逻辑来解释学习系统的输出重新产生了兴趣。解释生成有助于在设计时调试设计和规范，并有助于合成鲁棒的 AI 系统以在运行时提供保障。包含因果推理和反事实推理的 ML  还可以帮助生成用于形式方法的解释。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;语义特征空间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当生成的对抗性输入和反例在所使用的 ML 模型的上下文中具有语义意义时，ML 模型的对抗性分析和形式验证就更有意义。例如，针对汽车颜色或一天中时间的微小变化来分析 DNN 对象检测器的技术，比向少量任意选择的像素添加噪声的技术更有用。当前，大多数的方法在这一点上都还达不到要求。我们需要语义对抗分析，即在ML 模型所属系统的上下文中对它们进行分析。其中额的一个关键步骤，是表示对 ML 系统运行的环境建模的语义特征空间，而不是为 ML 模型定义输入空间的具体特征空间。这是符合直觉的，即与完整的具体特征空间相比，具体特征空间在语义上有意义的部分（如交通场景图像）所形成的潜在空间要低得多。图 2 中的语义特征空间是代表自动驾驶汽车周围 3D 世界的低维空间，而具体的特征空间是高维像素空间。由于语义特征空间的维数较低，因此可以更容易地进行搜索。但是，我们还需要一个“渲染器”，将语义特征空间中的一个点映射到具体特征空间中的一个点。渲染器的属性如可微性（differentiability），可以更容易地应用形式化方法来执行语义特征空间的目标导向搜索。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;5&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;用于设计和验证的计算引擎&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;硬件和软件系统形式化方法的有效性，是由底层“计算引擎”的进步推动的——例如，布尔可满足性求解 (SAT)、可满足性模理论 (SMT) 和模型检查。鉴于 AI/ML 系统规模、环境复杂性和所涉及的新型规范，需要一类新的计算引擎来进行高效且可扩展的训练、测试、设计和验证，实现这些进步必须克服的关键挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.1 &lt;/strong&gt;&lt;strong&gt;数据集设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据是机器学习的基本起点，提高 ML 系统质量就必须提高它所学习数据的质量。形式化方法如何帮助 ML 数据系统地选择、设计和扩充？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ML 的数据生成与硬件和软件的测试生成问题有相似之处。形式化方法已被证明对系统的、基于约束的测试生成是有效的，但这与对人工智能系统的要求不同，约束类型可能要复杂得多——例如，对使用传感器从复杂环境（如交通状况）捕获的数据的“真实性”进行编码要求。我们不仅需要生成具有特定特征的数据项（如发现错误的测试），还需要生成满足分布约束的集合；数据生成必须满足数据集大小和多样性的目标，以进行有效的训练和泛化。这些要求都需要开发一套新的形式化技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;形式&lt;/strong&gt;&lt;strong&gt;方法中的受控随机化&lt;/strong&gt;。数据集设计的这个问题有很多方面，首先必须定义“合法”输入的空间，以便根据应用程序语义正确形成示例；其次，需要捕获与现实世界数据相似性度量的约束；第三，通常需要对生成的示例的分布进行约束，以获得学习算法收敛到真实概念的保证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们相信这些方面可以通过随机形式方法来解决——用于生成受形式约束和分布要求的数据的随机算法。一类称为控制即兴创作的新技术是很有前景的，即兴创作的生成要满足三个约束的随机字符串（示例）x：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，控制即兴理论仍处于起步阶段，我们才刚刚开始了解计算复杂性并设计有效的算法。反过来，即兴创作依赖于计算问题的最新进展，例如约束随机抽样、模型计数和基于概率编程的生成方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.2 &lt;/strong&gt;&lt;strong&gt;定量验证&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了通过传统指标（状态空间维度、组件数量等）衡量AI 系统规模之外，组件的类型可能要复杂得多。例如，自主和半自主车辆及其控制器必须建模为混合动力系统，结合离散和连续动力学；此外，环境中的代表（人类、其他车辆）可能需要建模为概率过程。最后，需求可能不仅涉及传统关于安全性和活性的布尔规范，还包括对系统鲁棒性和性能的定量要求，然而大多数现有的验证方法，都是针对回答布尔验证问题。为了解决这一差距，必须开发用于定量验证的新可扩展引擎。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;定量语义分析&lt;/strong&gt;。一般来说，人工智能系统的复杂性和异构性意味着，规范的形式验证（布尔或定量）是不可判定的——例如，即便是确定线性混合系统的状态是否可达，也是不可判定的。为了克服计算复杂性带来的这一障碍，人们必须在语义特征空间上使用概率和定量验证的新技术，以增强本节前面讨论的抽象和建模方法。对于同时具有布尔和定量语义的规范形式，在诸如度量时间逻辑之类的形式中，将验证表述为优化，对于统一来自形式方法的计算方法和来自优化文献的计算方法至关重要。例如在基于模拟的时间逻辑证伪中，尽管它们必须应用于语义特征空间以提高效率，这种伪造技术也可用于系统地、对抗性地生成 ML 组件的训练数据。概率验证的技术应该超越传统的形式，如马尔科夫链或MDPs，以验证语义特征空间上的概率程序。同样，关于SMT求解的工作必须扩展到更有效地处理成本约束--换句话说，将SMT求解与优化方法相结合。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;我们需要了解在设计时可以保证什么，设计过程如何有助于运行时的安全操作，以及设计时和运行时技术如何有效地互操作。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.3 &lt;/strong&gt;&lt;strong&gt;AI/ML 的组合推理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于扩展到大型系统的正式方法，组合（模块化）推理是必不可少的。在组合验证中，一个大型系统（例如，程序）被拆分为它的组件（例如，程序），每个组件都根据规范进行验证，然后组件规范一起产生系统级规范。组合验证的一个常见方法是使用假设-保证合同，例如一个过程假设一些关于它的开始状态（前置条件），反过来又保证其结束状态（后置条件），类似的假设-保证范式已被开发并应用于并发的软件和硬件系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然而，这些范式并不涵盖人工智能系统，这在很大程度上是由于 &quot;形式化规范 &quot;一节中讨论的人工智能系统的规范化挑战。组合式验证需要组合式规范——也就是说，组件必须是可形式化的。然而，正如“形式化规范”中所述，可能无法正式指定一个感知组件的正确行为。因此，挑战之一就是开发不依赖于有完整组合规范的组合推理技术。此外，人工智能系统的定量和概率性质，要求将组合推理的理论扩展到定量系统和规范。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推断组件合同。&lt;/strong&gt;人工智能系统的组合式设计和分析需要在多个方面取得进展。首先，需要在一些有前景的初步工作基础上，为这些系统的语义空间开发概率保证设计和验证的理论。第二，必须设计出新的归纳综合技术，以算法方式生成假设-保证合同，减少规范负担并促进组合推理。第三，为了处理诸如感知等没有精确正式规格的组件的情况，我们提出了从系统级分析中推断组件级约束的技术，并使用这种约束将组件级分析，包括对抗性分析，集中在搜索输入空间的 &quot;相关 &quot;部分。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;6&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;建构中修正智能系统&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在理想的世界中，验证将与设计过程相结合，因此系统是“在建构中修正的”。例如，验证可以与编译/合成步骤交错进行，假设在集成电路中常见的寄存器传输级（RTL）设计流程中，或许它可以被集成到合成算法中，以确保实现满足规范。我们能不能为人工智能系统设计一个合适的在建构中逐步修正的设计流程？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.1 &lt;/strong&gt;&lt;strong&gt;ML 组件的规范驱动设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;给定一个正式的规范，我们能否设计一个可证明满足该规范的机器学习组件（模型）？这种全新的 ML 组件设计有很多方面：（1）设计数据集，（2） 综合模型的结构，（3）生成一组有代表性的特征，（4） 综合超参数和 ML 算法选择的其他方面，以及（5）在综合失败时自动化调试 ML 模型或规范的技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;ML 组件的正式合成。&lt;/strong&gt;解决前面所列出一些问题的解决方案正在出现，可以使用语义损失函数或通过认证的鲁棒性在 ML 模型上强制执行属性，这些技术可以与神经架构搜索等方法相结合，以生成正确构建的 DNN。另一种方法是基于新兴的形式归纳综合理论，即从满足形式化规范的程序实例中进行综合。解决形式归纳综合问题的最常见方法是使用 oracle-guided 方法，其中将学习者与回答查询的 oracle 配对；如示例中图2，oracle 可以是一个伪造者，它生成反例，显示学习组件的故障如何违反系统级规范。最后，使用定理证明来确保用于训练 ML 模型的算法的正确性，也是朝着建构修正的 ML 组件迈出的重要一步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.2 &lt;/strong&gt;&lt;strong&gt;基于机器学习的系统设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二个挑战，是设计一个包含学习和非学习组件的整体系统。目前已经出现的几个研究问题：我们能否计算出可以限制 ML 组件运行的安全范围？我们能否设计一种控制或规划算法来克服它接收输入的基于 ML 感知组件的限制？我们可以为人工智能系统设计组合设计理论吗？当两个 ML 模型用于感知两种不同类型的传感器数据（例如，LiDAR 和视觉图像），并且每个模型在某些假设下都满足其规范，那么二者在什么条件下可以一起使用、以提高可靠性整体系统？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这一挑战上，取得进展的一个突出例子是基于安全学习的控制的工作。这种方法预先计算了一个安全包络线，并使用学习算法在该包络线内调整控制器，需要基于例如可达性分析、来有效计算此类安全包络的技术；同样，安全 RL 领域也取得了显着进展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然而，这些并没有完全解决机器学习对感知和预测带来的挑战——例如，可证明安全的端到端深度强化学习尚未实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.3 &lt;/strong&gt;&lt;strong&gt;为弹性 AI 桥接设计时间和运行时间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正如“环境建模”部分所讨论的那样，许多 AI 系统在无法先验指定的环境中运行，因此总会有无法保证正确性的环境。在运行时实现容错和错误恢复的技术，对人工智能系统具有重要作用。我们需要系统地理解在设计时可以保证什么，设计过程如何有助于人工智能系统在运行时的安全和正确运行，以及设计时和运行时技术如何有效地互操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对此，关于容错和可靠系统的文献为我们提供了开发运行时保证技术的基础——即运行时验证和缓解技术；例如 Simplex 方法，就提供了一种将复杂但容易出错的模块与安全的、正式验证的备份模块相结合的方法。最近，结合设计时和运行时保证方法的技术显示了未验证的组件、包括那些基于人工智能和 ML 的组件，可以被包裹在运行时保证框架中，以提供安全运行的保证。但目前这些仅限于特定类别的系统，或者它们需要手动设计运行时监视器和缓解策略，在诸如内省环境建模、人工智能的监测器和安全回退策略的合成等方法上，还有更多的工作需要做。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此处讨论的建构中修正智能系统的设计方法可能会引入开销，使其更难以满足性能和实时要求。但我们相信（也许是非直觉的），在以下意义上，形式化方法甚至可以帮助提高系统的性能或能源效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统的性能调优往往与上下文无关——例如，任务需要独立于它们运行的环境来满足最后期限。但如果设计时就对这些环境进行正式表征，并在运行时对其进行监控，如果其系统运行经过正式验证是安全的，那么在这种环境下，ML 模型就可以用准确性来换取更高的效率。这种权衡可能是未来研究的一个富有成果的领域。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;7&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;结论&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从形式化方法的角度来看，我们剖析了设计高保证人工智能系统的问题。如图3所示，我们确定了将形式化方法应用于 AI 系统的五个主要挑战，并对这五项挑战中的每一项都制定了三项设计和验证原则，这些原则有希望解决这个挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 3 中的边显示了这些原则之间的依赖关系，例如运行时保证依赖于自省和数据驱动的环境建模，以提取可监测的假设和环境模型。同样，为了进行系统级分析，我们需要进行组合推理和抽象，其中一些 AI 组件可能需要挖掘规范，而其他组件则通过形式化的归纳综合构建生成正确的结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自 2016 年以来，包括作者在内的几位研究人员一直致力于应对这些挑战，当时本文已发表的原始版本介绍了一些样本进展。我们已经开发了开源工具 VerifAI 和 Scenic，它们实现了基于本文所述原则的技术，并已应用于自动驾驶和航空航天领域的工业规模系统。这些成果只是一个开始，还有很多事情要做。在未来的几年里，可验证 AI 有望继续成为一个富有成效的研究领域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原文链接：https://cacm.acm.org/magazines/2022/7/262079-toward-verified-artificial-intelligence/fulltext&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;strong&gt;&lt;span&gt;更多内容，点击下方关注：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5ODEzMjIyMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtXjwicoibpia0GEwTzHaE7VLcdMvxiaV27Es9lt6u2zZK5AsxwENshw3fU66UL2Hpf7eLneF1X86nGTA/0?wx_fmt=png&quot; data-nickname=&quot;AI科技评论&quot; data-alias=&quot;aitechtalk&quot; data-signature=&quot;聚焦AI前沿研究，关注AI青年成长&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;扫码添加 AI 科技评论 微信号，投稿&amp;amp;进群：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;234&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42857142857142855&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cNFA8C0uVPvfRWTsmyhhPlIqhibx1eNmrTncouRia4QwrSuNlnQfYBibiaLAEuTUtmZRibTENX8RgOhGH5NTj0XxgHg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;700&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8fb20332c21204b4d35a1a4096b2768f</guid>
<title>[推荐] 服务端监控架构设计与实践</title>
<link>https://toutiao.io/k/xhwa9mo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;28&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;作者：vivo互联网服务器团队-Deng Haibo&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、业务背景&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;当今时代处在信息大爆发的时代，信息借助互联网的潮流在全球自由的流动，产生了各式各样的平台系统和软件系统，越来越多的业务也会导致系统的复杂性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当核心业务出现了问题影响用户体验，开发人员没有及时发现，发现问题时已经为时已晚，又或者当服务器的CPU持续增高，磁盘空间被打满等，需要运维人员及时发现并处理，这就需要一套有效的监控系统对其进行监控和预警。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如何对这些业务和服务器进行监控和维护是我们开发人员和运维人员不可忽视的重要一环，这篇文章全篇大约5000多字，我将对vivo服务端监控的原理和架构演进之路做一次系统性整理，以便大家做监控技术选型时参考。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;vivo服务端监控旨在为服务端应用提供包括系统监控、JVM监控以及自定义业务指标监控在内的一站式数据监控，并配套实时、多维度、多渠道的告警服务，帮助用户及时掌握应用多方面状态，事前及时预警发现故障，事后提供详实的数据用于追查定位问题，提升服务可用性。目前vivo服务端监控累计接入业务方数量达到200+，本文介绍的是服务端监控，我司还有其他类型的优秀监控包括通用监控、调用链监控和客户端监控等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.1 监控系统的基本流程&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;无论是开源的监控系统还是自研的监控系统，整体流程都大同小异。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）数据采集&lt;/strong&gt;：可以包括JVM监控数据如GC次数，线程数量，老年代和新生代区域大小；系统监控数据如磁盘使用使用率，磁盘读写的吞吐量，网络的出口流量和入口流量，TCP连接数；业务监控数据如错误日志，访问日志，视频播放量，PV，UV等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）数据传输&lt;/strong&gt;：将采集的数据以消息形式或者 HTTP 协议的形式等上报给监控系统。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）数据存储&lt;/strong&gt;：有使用 MySQL、Oracle 等 RDBMS 存储的，也有使用时序数据库OpenTSDB、InfluxDB 存储的，还有使用 HBase 直接存储的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）数据可视化&lt;/strong&gt;：数据指标的图形化展示，可以是折线图，柱状图，饼图等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5）监控告警&lt;/strong&gt;：灵活的告警设置，以及支持邮件、短信、IM 等多种通知通道。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1.2 如何规范的使用监控系统&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在使用监控系统之前，我们需要了解监控对象的基本工作原理，例如JVM监控，我们需要清楚JVM的内存结构组成和常见的垃圾回收机制；其次需要确定如何去描述和定义监控对象的状态，例如监控某个业务功能的接口性能，可以监控该接口的请求量，耗时情况，错误量等；在确定了如何监控对象的状态之后，需要定义合理的告警阈值和告警类型，当收到告警提醒时，帮助开发人员及时发现故障；最后建立完善的故障处理体系，收到告警时迅速响应，及时处理线上故障。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、vivo服务端监控系统架构及演进之路&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在介绍vivo服务端监控系统架构之前，先带大家了解一下OpenTSDB时序数据库，在了解之前说明下为什么我们会选择OpenTSDB，原因有以下几点：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1） 监控数据采集指标在某一时间点具有唯一值，没有复杂的结构及关系。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）监控数据的指标具有随着时间不断变化的特点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）基于HBase分布式、可伸缩的时间序列数据库，存储层不需要过多投入精力，具有HBase的高吞吐，良好的伸缩性等特点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）开源，Java实现，并且提供基于HTTP的应用程序编程接口，问题排查快可修改。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.1 OpenTSDB简介&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;1）基于HBase的分布式的，可伸缩的时间序列数据库，主要用途就是做监控系统。譬如收集大规模集群（包括网络设备、操作系统、应用程序）的监控数据并进行存储和查询，支持秒级数据采集，支持永久存储，可以做容量规划，并很容易地接入到现有的监控系统里，OpenTSDB的系统架构图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6401673640167364&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2xnobx3xsmp0DabiaMibXiaK7qDoGCCp1ENT4pZhkz8JibQcuANQbg49Emw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;478&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（来自官方文档）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;存储结构单元为Data Point，即某个Metric在某个时间点的数值。Data Point包括以下部分：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;核心存储两张表：tsdb和tsdb-uid。表tsdb用来存储监控数据，如下图：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;291&quot; data-backw=&quot;517&quot; data-ratio=&quot;0.562862669245648&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2uX5jPrHdt43qWrRpWxAee60D0AUpSGOdDsTUpnJS31qoaDnT6hXeeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;517&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;（图片出处：&lt;/span&gt;&lt;span&gt;https://www.jianshu.com&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Row Key为Metric+Timestamp的小时整点+TagKey+TagValue，取相应的字节映射组合起来；列族t下的Qualifier为Timestamp的小时整点余出的秒数，对应的值即为Value。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; 表tsdb-uid用来存储刚才提到的字节映射，如下图：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;292&quot; data-backw=&quot;530&quot; data-ratio=&quot;0.5509433962264151&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2qAR97ziaovPrDoibeTkzZ3ETUFqpY9kWjEjwAib0mlBers3cOWp0k5rIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;530&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（图片出处：&lt;/span&gt;&lt;span&gt;https://www.jianshu.com&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;图中的“001”表示tagk=hots或者tagv=static，提供正反查询。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; 2）OpenTSDB使用策略说明：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.2 OpenTSDB在实践中需要关注的点&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）精确性问题&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;String &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;0.51&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt; f = Float.parseFloat(&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; raw = Float.floatToRawIntBits(f);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;[] float_bytes = Bytes.fromInt(raw);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; raw_back = Bytes.getInt(float_bytes, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; decode = Float.intBitsToFloat(raw_back);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Parsed Float: &quot;&lt;/span&gt; + f);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Encode Raw: &quot;&lt;/span&gt; + raw);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Encode Bytes: &quot;&lt;/span&gt; + UniqueId.uidToString(float_bytes));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Decode Raw: &quot;&lt;/span&gt; + raw_back);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Decoded Float: &quot;&lt;/span&gt; + decode);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如上代码，OpenTSDB在存储浮点型数据时，无法知悉存储意图，在转化时会遇到精确性问题，即存储&quot;0.51&quot;，取出为&quot;0.5099999904632568&quot;。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2）聚合函数问题&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;OpenTSDB的大部分聚合函数，包括sum、avg、max、min都是LERP（linear interpolation）的插值方式，即所获取的值存在被补缺的现象，对于有空值需求的使用很不友好。详细原理参见OpenTSDB关于interpolation的文档。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前vmonitor服务端监控使用的OpenTSDB是我们改造后的源码，新增了nimavg函数，配合自带的zimsum函数满足空值插入需求。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.3 vivo服务端监控采集器原理&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.670906200317965&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2bzVFH3vskVC1tKZUX7jlxc7NUUwriaDBZgP4JKDU1OB8nryHWaOiaibpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;629&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）定时器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;内含3种采集器：OS采集器、JVM采集器和业务指标采集器，其中OS及JVM每分钟执行采集和汇聚，业务指标采集器会实时采集并在1分钟的时间点完成汇聚重置，3份采集器的数据打包上报至RabbitMQ，上报动作异步超时。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2）业务指标采集器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;业务指标采集方式有2种：日志输出过滤和工具类代码上报(侵入式)，日志输出过滤是通过继承log4j的Filter，从而获取指标配置中指定的Appender输出的renderedMessage，并根据指标配置的关键词、聚合方式等信息进行同步监听采集；代码上报根据代码中指定的指标code进行message信息上报，属于侵入式的采集方式，通过调用监控提供的Util实现。业务指标配置每隔5分钟会从CDN刷新，内置多种聚合器供聚合使用，包括count计数、 sum求和、average平均、max最大值和min最小值统计。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.4 vivo服务端监控老版本架构设计&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2ksJjSLjN7LrhmVwaGdE1CWZNepoxfV2doZhMu67QsTeP1Gq2gC5kicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）数据采集及上报&lt;/strong&gt;：需求方应用接入的监控采集器vmonitor-agent根据监控指标配置采集相应数据，每分钟上报1次数据至RabbitMQ，所采用的指标配置每5分钟从CDN下载更新，CDN内容由监控后台上传。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）计算及存储&lt;/strong&gt;：监控后台接收RabbitMQ的数据，拆解后存储至OpenTSDB，供可视化图表调用，监控项目、应用、指标和告警等配置存储于MySQL；通过Zookeeper和Redis实现分布式任务分发模块，实现多台监控服务协调配合运作，供分布式计算使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）告警检测&lt;/strong&gt;：从OpenTSDB获取监控指标数据，根据告警配置检测异常，并将异常通过第三方依赖自研消息、短信发送，告警检测通过分布式任务分发模块完成分布式计算。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.5 vivo服务端监控老版本部署架构&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）自建机房A&lt;/strong&gt;：部署架构以国内为例，监控工程部署在自建机房A，监听本机房的RabbitMQ消息，依赖的Redis、OpenTSDB、MySQL、Zookeeper等均在同机房，需要上传的监控指标配置由文件服务上传至CDN，供监控需求应用设备调用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）云机房&lt;/strong&gt;：云机房的监控需求应用设备将监控数据上报至云机房本地的RabbitMQ，云机房的RabbitMQ将指定队列通过路由的方式转发至自建机房A的RabbitMQ，云机房的监控配置通过CDN拉取。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2.6 vivo服务端监控新版本架构设计&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6959876543209876&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2mwk22Mt3nO0dprIgonou1mBzOhFUU2lMh2TboMNqH3q42qf8nfKtNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;648&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）采集（接入方）&lt;/strong&gt;：业务方接入vmonitor-collector，并在相应环境的监控后台配置相关监控项即完成接入，vmonitor- collector将定时拉取监控项配置，采集服务数据并每分钟上报。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）数据聚合&lt;/strong&gt;：老版本支持的是RabbitMQ将采集到的数据，路由至监控机房的RabbitMQ（同机房则不发生该行为），由监控后台服务消费；CDN负责承载各应用的配置供应用定时拉取。新版本vmonitor-gateway作为监控数据网关，采用http方式上报监控数据以及拉取指标配置，抛弃了之前使用的RabbitMQ上报以及CDN同步配置的途径，避免两者故障时对监控上报的影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）可视化并且支持告警与配置&lt;/strong&gt;（监控后台vmonitor）：负责前台的数据多元化展示（包括业务指标数据，分机房汇总数据，单台服务器数据，以及业务指标复合运算呈现），数据聚合，告警（目前包括短信及自研消息）等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）数据存储&lt;/strong&gt;：存储使用HBASE集群和开源的OpenTSDB作为聚合的中介，原始数据上报之后通过OpenTSDB持久化到HBase集群，Redis作为分布式数据存储调度任务分配、告警状态等信息，后台涉及的指标和告警配置存储于MySQL。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、监控采集上报和存储监控数据策略&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为降低监控接入成本以及避免RabbitMQ上报故障和CDN同步配置故障对监控体系带来的影响，将由采集层通过HTTP直接上报至代理层，并通过采集层和数据代理层的队列实现灾时数据最大程度的挽救。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9052287581699346&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2Y8thqGIQ3OsS52sXoOWDvJeNgewlIiby6cqJ4G33PiczVJnh8QecSyDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;详细流程说明如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1）采集器&lt;/strong&gt;（vmonitor-collector）根据监控配置每分钟采集数据并压缩，存储于本地队列（最大长度100，即最大存储100分钟数据），通知可进行HTTP上报，将数据上报至网关。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）网关&lt;/strong&gt;（vmonitor-gateway）接收到上报的数据后鉴权，认定非法即丢弃；同时判断当前是否下层异常熔断，如果发生则通知采集层重置数据退回队列。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt; 3）网关校验&lt;/strong&gt;上报时带来的监控配置版本号，过期则在结果返回时将最新监控配置一并返回要求采集层更新配置。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）网关将上报的数据存储于该应用对应的Redis队列中（单个应用缓存队列key最大长度1w）；存储队列完成后立即返回HTTP上报，表明网关已接受到数据，采集层可移除该条数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;5）网关对Redis队列数据进行解压以及数据聚合；如果熔断器异常则暂停前一行为；完成后通过HTTP存储至OpenTSDB；如果存储行为大量异常则触发熔断器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、核心指标&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.1 系统监控告警和业务监控告警&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;将采集到的数据通过OpenTSDB存放到HBase中后，通过分布式任务分发模块完成分布式计算。如果符合业务方配置的告警规则，则触发相应的告警，对告警信息进行分组并且路由到正确的通知方。可以通过短信自研消息进行告警发送，可通过名字、工号、拼音查询录入需要接收告警的人员，当接收到大量重复告警时能够消除重复的告警信息，所有的告警信息可以通过MySQL表进行记录方便后续查询和统计，告警的目的不仅仅是帮助开发人员及时发现故障建立故障应急机制，同时也可以结合业务特点的监控项和告警梳理服务，借鉴行业最佳监控实践。告警流程图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.164179104477612&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2Q9aB26AG1WRFuZRtCf5H6VAhwLBUdng4DM1G5gDAKKG5L4LFwQSHtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;536&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.2 支持的告警类型以及计算公式&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1）最大值&lt;/strong&gt;：当指定字段超过该值时触发报警（报警阈值单位：number）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2）最小值&lt;/strong&gt;：当指定字段低于该值时触发报警（报警阈值单位：number）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3）波动量&lt;/strong&gt;：取当前时间到前15分钟这段时间内的最大值或者最小值与这15分钟内的平均值做浮动百分比报警，波动量需要配置波动基线，标识超过该基线数值时才做“报警阀值”判定，低于该基线数值则不触发报警（报警阈值单位：percent）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;计算公式&lt;/strong&gt;： &lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;180&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;波动量-向上波动计算公式：float rate = (float) (max - avg) / (float) avg;&lt;/p&gt;&lt;p&gt;波动量-向下波动计算公式：float rate = (float) (avg - min) / (float) avg;&lt;/p&gt;&lt;p&gt;波动量-区间波动计算公式：float rate = (float) (max - min) / (float) max;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4）日环比&lt;/strong&gt;：取当前时间与昨天同一时刻的值做浮动百分比报警（报警阈值单位：percent）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;计算公式：float rate = （当前值 - 上一周期值）/上一周期值&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5）周环比&lt;/strong&gt;：取当前时间与上周同一天的同一时刻的值做浮动百分比报警（报警阈值单位：percent）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;计算公式：float rate = （当前值 - 上一周期值）/上一周期值&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6）小时日环比&lt;/strong&gt;：取当前时间到前一小时内的数据值总和与昨天同一时刻的前一小时内的数据值总和做浮动百分比报警（报警阈值单位：percent）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;计算公式：float rate = (float) (anHourTodaySum - anHourYesterdaySum) / (float) anHourYesterdaySum。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、演示效果&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;5.1 业务指标数据查询&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）查询条件栏“指标”可选择指定指标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）双击图表上指标名称可展示大图，底部是根据起始时间的指标域合计值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）滚轮可以缩放图表。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;284&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4913294797687861&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2xdSySPfcPIPhCiaiapNDrNkwkOFOhKAs82MfiaTuMea1szz5T3Ua1heUA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1557&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;5.2 系统监控&amp;amp;JVM监控指标数据查询&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）每分钟页面自动刷新。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）如果某行，即某台机器整行显示红色，则代表该机器已逾半小时未上报数据，如机器是非正常下线就要注意排查了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）点击详情按钮，可以对系统&amp;amp;JVM监控数据进行明细查询。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;345&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.59765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2a73Izviar15dla3eU9mbyK0extiaicic5SHcDszTKTAZIiao0Cgvzkic2ZnA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;5.3 业务指标配置&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt; 单个监控指标(普通)可以针对单个指定Appender的日志文件进行数据采集。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;【必填】【指标类型】为“普通”、“复合”两种，复合是将多个普通指标二次聚合，所以正常情况下需要先新增普通指标。&lt;/p&gt;&lt;p&gt;【必填】【图表顺序】正序排列，控制指标图表在数据页面上的展示顺序。&lt;/p&gt;&lt;p&gt;【必填】【指标代码】默认自动生成UUID短码。&lt;/p&gt;&lt;p&gt;【可选】【Appender】为log4j日志文件的appender名称，要求该appender必须被logger的ref引用；如果使用侵入式采集数据则无需指定。&lt;/p&gt;&lt;p&gt;【可选】【关键字】为过滤日志文件行的关键词。&lt;/p&gt;&lt;p&gt;【可选】【分隔符】是指单行日志列分割的符号，一般为&quot;,&quot;英文逗号或其它符号。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;295&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5100430416068866&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt5W1AmZ2hW8H1NbJxJEbCnvOnoxhHLXHianEhK7vUtLnx2AEIChuTiaWlvkkbzWibFtVYic2oESKIKhGA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1394&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;六、主流监控对比&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;6.1 Zabbix&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Zabbix 于 1998 年诞生，核心组件采用 C 语言开发，Web 端采用 PHP 开发，它属于老牌监控系统中的优秀代表，能够监控网络参数，服务器健康和软件完整性，使用也很广泛。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Zabbix采用MySQL 进行数据存储，所有没有OpenTSDB支持 Tag的特性，因此没法按多维度进行聚合统计和告警配置，使用起来不灵活。Zabbix 没有提供对应的 SDK，应用层监控支持有限，也没有我们自研的监控提供了侵入式的埋点和采集功能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总体而言Zabbix 的成熟度更高，高集成度导致灵活性较差，在监控复杂度增加后，定制难度会升高，而且使用的MySQL关系型数据库，对于大规模的监控数据插入和查询是个问题。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;288&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.49760765550239233&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2xJMpslHaNzZQQUFqTIB3hgWU5W7UxsxOXq1w7vjz5PKMD4jS0zdpjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;627&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;6.2 Open-Falcon&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;OpenFalcon 是一款企业级、高可用、可扩展的开源监控解决方案，提供实时报警、数据监控等功能，采用 Go 和 Python 语言开发，由小米公司开源。使用 Falcon 可以非常容易的监控整个服务器的状态，比如磁盘空间，端口存活，网络流量等等。基于 Proxy-gateway，很容易通过自主埋点实现应用层的监控（比如监控接口的访问量和耗时）和其他个性化监控需求，集成方便。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;339&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5857805255023184&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2ntKb9cibxayI3L7lcRAk2HiaJv54Q6o8edlic2gXt2CA5cHQrBkAFKVaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;647&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;官方的架构图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;384&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6635658914728683&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2ZGZf6RIEHIAhic5YsBwg6LR8ice73TcQALcSiaHGcRO7EIW495zsewJ8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;645&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;6.3 Prometheus（普罗米修斯）&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Prometheus是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB)，Prometheus使用Go语言开发，是Google BorgMon监控系统的开源版本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;和小米的Open-Falcon一样，借鉴 OpenTSDB，数据模型中引入了 Tag，这样能支持多维度的聚合统计以及告警规则设置，大大提高了使用效率。监控数据直接存储在 Prometheus Server 本地的时序数据库中，单个实例可以处理数百万的 Metrics，架构简单，不依赖外部存储，单个服务器节点可直接工作。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;482&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;384&quot; data-ratio=&quot;0.8333333333333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2O8ygDKEZ2dMZ2cZbrEfjcJg8GOHuKuTgWXWHx5D0BByichjKCezcUpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;630&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;官方的架构图如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I29Q34qB2cvJKicoBbJTdI7tBgnm4gV3roiabn4L4wTkT4ibr4Lvo50uwhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;630&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;6.4 vivo服务端监控vmonitor&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vmonitor作为监控后台管理系统，可以进行可视化查看，告警的配置，业务指标的配置等，具备JVM监控、系统监控和业务监控的功能。通过采集层（vmonitor-collector采集器）和数据代理层（vmonitor-gateway网关）的队列实现灾时数据最大程度的挽救。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;提供了SDK方便业务方集成，支持日志输出过滤和侵入式代码上报数据等应用层监控统计，基于OpenTSDB时序开源数据库，对其源码进行了改造，新增了nimavg函数，配合自带的zimsum函数满足空值插入需求，具有强大的数据聚合能力，可以提供实时、多维度、多渠道的告警服务。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;261&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4514637904468413&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2Xs68KiafYF87d5Kzh2p2hWPfhaYq34WUJMBiaTbuEJ8W6gLOxDreU4qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;649&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;七、总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;676&quot; data-backw=&quot;578&quot; data-ratio=&quot;1.1690140845070423&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt5TX0ibD6odWcTNq4ic9zH2I2ib1F9eR2UuP9M40SDs5mph7JUBhW1jgeRdT0sAS1OwaicxokFsxW3veQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;781&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本文主要介绍了vivo服务端监控架构的设计与演进之路，是基于java技术栈做的一套实时监控系统，同时也简单列举了行业内主流的几种类型的监控系统，希望有助于大家对监控系统的认识，以及在技术选型时做出更合适的选择。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;监控体系里面涉及到的面很广，是一个庞大复杂的体系，本文只是介绍了服务端监控里的JVM监控，系统监控以及业务监控（包含日志监控和工具类代码侵入式上报），未涉及到客户端监控和全链路监控等，如果想理解透彻，必须理论结合实践再做深入。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;section data-recommend-type=&quot;list-normal&quot; data-recommend-tid=&quot;2&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501257_1&quot; data-recommend-article-time=&quot;1636251616&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/0?wx_fmt=jpeg&amp;amp;amp;random=0.27521905775014543&quot; data-recommend-article-title=&quot;强势开源一款小程序！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501257&amp;amp;idx=1&amp;amp;sn=7b4e27cdb1d3146a5e7e1951b5bdc9e8&amp;amp;chksm=c1ca33f9f6bdbaefd3874fa6313e422c8fb6b2799b40d09f36620f0ceaed4fd63c820da1f3ff&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强势开源一款小程序！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-11-07&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zc3KLDBfJlm8bD2WBlwbvnsktMdtfSudNaJWbHr1Iyr6HkwCxETHiaiceaWYLmq7tWmHV29U8Xv8UnoeCAOYNj9Q/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501242_1&quot; data-recommend-article-time=&quot;1634952613&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;强力推荐一个完善的物流（WMS）管理项目（附代码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501242&amp;amp;idx=1&amp;amp;sn=aa2297b69874de0993f62ea404376bab&amp;amp;chksm=c1ca338af6bdba9cf3e051ff3001e1f31f9fa97350f3851c797d6486eca360df537196dbe67b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;强力推荐一个完善的物流（WMS）管理项目（附代码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-23&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UWibGeSzVdcKHzDRdVHusb9CJicA5FdhDVPAiaicdTbibx5XoRkhKA3O7Q727cTSurBkJpciczjLrF2wkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501238_1&quot; data-recommend-article-time=&quot;1634606700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501238&amp;amp;idx=1&amp;amp;sn=d7e873d752a28b582d70bc9f7a981ddb&amp;amp;chksm=c1ca3386f6bdba9031ce115e734ce04c9b6728e8e027fbcf17d8d07f1e029ea5bea04f4a6273&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个 Spring Boot + MyBatis + Vue 音乐网站&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-10-19&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VduLA9tc9dQkaw5HWIV6pqNrOiciaE17jeIeTtoLfgLbyu67dWkRj3tjKX7AFIMrV0rKD5ic6kwicyxg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501208_1&quot; data-recommend-article-time=&quot;1632101100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;分享一套家庭理财系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501208&amp;amp;idx=1&amp;amp;sn=44fcdfe2d7f81a26845faf33750ea9bb&amp;amp;chksm=c1ca33a8f6bdbabec8ff34719f438465adf745cbef30bfb92be53897c714d8c13bdd01989d17&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;分享一套家庭理财系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-20&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42407407407407405&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VibcP3PNgQvXGZ7UJkVeu0JZsrldvF1urHlmNwhUP89IeKHz1PfJ12es2ArTwkYibAh3Y0soOib2rjA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501192_1&quot; data-recommend-article-time=&quot;1630718700&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一个互联网企业级别的开源支付系统&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501192&amp;amp;idx=1&amp;amp;sn=444404a565f02a8c532d291d99678a7b&amp;amp;chksm=c1ca33b8f6bdbaaeb7c65d9f6f0c399f609fb203f065b6e88a3ad5431473713dbb5ae3507b32&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一个互联网企业级别的开源支付系统&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-09-04&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.425&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UG0pYPldneUCCVsPia3Rtr9j3hlFHakhItFlOXuwLicUqQvP1PhkTM28CUU9BpRCWfWPfHYredCBiaA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501176_1&quot; data-recommend-article-time=&quot;1629509100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;推荐一套开源通用后台管理系统（附源码）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501176&amp;amp;idx=1&amp;amp;sn=68e3ae7a9dc33fbbd379906ddcefdf5b&amp;amp;chksm=c1ca3348f6bdba5e1774625745f5ef40081c9b8eb0189073734b6808efb872720781d25b8dc0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;推荐一套开源通用后台管理系统（附源码）&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-21&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VQRwetNLhDOB2Ej0fDZK4eRXsYlRNicgmsWwmuvlhibooic3N3su1lbMQPqWD186JiaOC5yJ9iaaic8bzw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501153_1&quot; data-recommend-article-time=&quot;1627704022&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;一款神仙接私活儿软件，吊到不行！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501153&amp;amp;idx=1&amp;amp;sn=bb29cffa56431b72a92709c0ae993af7&amp;amp;chksm=c1ca3351f6bdba4729c671cdcd0ee8b6af75c6ce8a7003e6c032942b849aab5bfedecd0f9d3b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;一款神仙接私活儿软件，吊到不行！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-31&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4265625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7UbyFoOMqOObokEYiahCar20LiaY8ZLGKzU7NYQQoGycgnhrmIzNJibPicGcNia3cbbXlYib6bcLJVV5aww/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501139_1&quot; data-recommend-article-time=&quot;1626571500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;基于 SpringBoot 的仿豆瓣平台【源码分享】&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501139&amp;amp;idx=1&amp;amp;sn=f133e70bda8abae27459ccc4d3d6d8fd&amp;amp;chksm=c1ca3363f6bdba75b9a4145510d9b6108c56146a3146b2e2e6d660a08221618b01c815d55642&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;基于 SpringBoot 的仿豆瓣平台【源码分享】&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-07-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42427884615384615&quot; data-type=&quot;jpeg&quot; data-w=&quot;832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VGxZrbRFy96Sm9cXQzVEhiaLibUUYhYH1SJL4HUXenau3DCeq0KEOsguY4CWjaEd1BeAicJd24qFM2w/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501105_1&quot; data-recommend-article-time=&quot;1623979500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;干掉 Wordpress！这个开源建站神器有点吊！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501105&amp;amp;idx=1&amp;amp;sn=caf01186b6d2e4a38e940ce07d822238&amp;amp;chksm=c1ca3301f6bdba17ba7127da24e28963ae40f944e587f14b57405e2a9ee9d8cdbcb835c880c8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;干掉 Wordpress！这个开源建站神器有点吊！&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-06-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42578125&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7Xw68Ow8vZian4lanQFAu09f4JOZlXbC85jsByb8V6StkOpibAdgPamPWoPPY3G7S3nic50QvxxuGNrg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247501098_2&quot; data-recommend-article-time=&quot;1623461160&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;从朋友那里搞了 20 个实战项目，速领！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4#rd&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;从朋友那里搞了 20 个实战项目，速领！&lt;/a&gt;&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;2021-06-12&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyNTI5NTQ1NQ==&amp;amp;mid=2247501098&amp;amp;idx=2&amp;amp;sn=520b81839bb5b4f1c990278e03e1991d&amp;amp;chksm=c1ca331af6bdba0c0e3435da519fadda3be81744168e30c56a823180bd458a5ec8a6b499f2a4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Baq5lYpIw7VzIP6xibP6U8htKa7YEad1iaTE02ZbsOfvDX1D8LoTiaNsMVgdjFOdm5LahpnNXFe3ibSp8S4FJ39KkA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;200&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4703703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Baq5lYpIw7X6YPYGQITyP8Zdk96ab7CX0Ind5E05VokoepTP9Adic0xRwiaQrAvfTeC7iafngRibhBShpVqibqNcCCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如有收获，点个在看，诚挚感谢&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100018364&quot; data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;19&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk54JM0xl7WLNGnqqwbcXQBWIOCMuOgPHRoOjMamXzrCqMS2xgOo5ibic9icPk7u3zsVgic3s1ZUYJ4xHXg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f5d8a0abee5d4d436709d068b13fb514</guid>
<title>[推荐] 高并发，你真的理解透彻了吗？</title>
<link>https://toutiao.io/k/93k2zfb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高并发，几乎是每个程序员都想拥有的经验。原因很简单：随着流量变大，会遇到各种各样的技术问题，比如接口响应超时、CPU load升高、GC频繁、死锁、大数据量存储等等，这些问题能推动我们在技术深度上不断精进。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在过往的面试中，如果候选人做过高并发的项目，我通常会让对方谈谈对于高并发的理解，但是能系统性地回答好此问题的人并不多，大概分成这样几类：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、&lt;strong&gt;对数据化的指标没有概念&lt;/strong&gt;：不清楚选择什么样的指标来衡量高并发系统？分不清并发量和QPS，甚至不知道自己系统的总用户量、活跃用户量，平峰和高峰时的QPS和TPS等关键数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、&lt;strong&gt;设计了一些方案，但是细节掌握不透彻&lt;/strong&gt;：讲不出该方案要关注的技术点和可能带来的副作用。比如读性能有瓶颈会引入缓存，但是忽视了缓存命中率、热点key、数据一致性等问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、&lt;strong&gt;理解片面，把高并发设计等同于性能优化&lt;/strong&gt;：大谈并发编程、多级缓存、异步化、水平扩容，却忽视高可用设计、服务治理和运维保障。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、&lt;strong&gt;掌握大方案，却忽视最基本的东西&lt;/strong&gt;：能讲清楚垂直分层、水平分区、缓存等大思路，却没意识去分析数据结构是否合理，算法是否高效，没想过从最根本的IO和计算两个维度去做细节优化。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4659090909090909&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt1db27zfRllYrkrYdTMf5ODQSbhFQMPbzShfJxWsGdUwoIeyRsL8V0Da4d7ibZicGD2ugKic7E9sicl0Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;616&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章，我想结合自己的高并发项目经验，系统性地总结下高并发需要掌握的知识和实践思路，希望对你有所帮助。内容分成以下3个部分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如何理解高并发？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高并发系统设计的目标是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高并发的实践方案有哪些？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如何理解高并发？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高并发意味着大流量，需要运用技术手段抵抗流量的冲击，这些手段好比操作流量，能让流量更平稳地被系统所处理，带给用户更好的体验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们常见的高并发场景有：淘宝的双11、春运时的抢票、微博大V的热点新闻等。除了这些典型事情，每秒几十万请求的秒杀系统、每天千万级的订单系统、每天亿级日活的信息流系统等，都可以归为高并发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很显然，上面谈到的高并发场景，并发量各不相同，&lt;strong&gt;那到底多大并发才算高并发呢&lt;/strong&gt;？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、不能只看数字，要看具体的业务场景。不能说10W QPS的秒杀是高并发，而1W QPS的信息流就不是高并发。信息流场景涉及复杂的推荐模型和各种人工策略，它的业务逻辑可能比秒杀场景复杂10倍不止。因此，不在同一个维度，没有任何比较意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、业务都是从0到1做起来的，并发量和QPS只是参考指标，最重要的是：在业务量逐渐变成原来的10倍、100倍的过程中，你是否用到了高并发的处理方法去演进你的系统，从架构设计、编码实现、甚至产品方案等维度去预防和解决高并发引起的问题？而不是一味的升级硬件、加机器做水平扩展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，各个高并发场景的业务特点完全不同：有读多写少的信息流场景、有读多写多的交易场景，&lt;strong&gt;那是否有通用的技术方案解决不同场景的高并发问题呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我觉得大的思路可以借鉴，别人的方案也可以参考，但是真正落地过程中，细节上还会有无数的坑。另外，由于软硬件环境、技术栈、以及产品逻辑都没法做到完全一致，这些都会导致同样的业务场景，就算用相同的技术方案也会面临不同的问题，这些坑还得一个个趟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，这篇文章我会将重点放在基础知识、通用思路、和我曾经实践过的有效经验上，希望让你对高并发有更深的理解。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;高并发系统设计的目标是什么？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先搞清楚高并发系统设计的目标，在此基础上再讨论设计方案和实践经验才有意义和针对性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;宏观目标&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高并发绝不意味着只追求高性能，这是很多人片面的理解。从宏观角度看，高并发系统设计的目标有三个：高性能、高可用，以及高可扩展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、高性能：性能体现了系统的并行处理能力，在有限的硬件投入下，提高性能意味着节省成本。同时，性能也反映了用户体验，响应时间分别是100毫秒和1秒，给用户的感受是完全不同的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、高可用：表示系统可以正常服务的时间。一个全年不停机、无故障；另一个隔三差五出线上事故、宕机，用户肯定选择前者。另外，如果系统只能做到90%可用，也会大大拖累业务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、高扩展：表示系统的扩展能力，流量高峰时能否在短时间内完成扩容，更平稳地承接峰值流量，比如双11活动、明星离婚等热点事件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6342592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt1db27zfRllYrkrYdTMf5ODibMTIy15HCkzH4FdnZhwPGiczoxwhLWN4YE37ibazKXMUTPQfB9LJBcLg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这3个目标是需要通盘考虑的，因为它们互相关联、甚至也会相互影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说：考虑系统的扩展能力，你会将服务设计成无状态的，这种集群设计保证了高扩展性，其实也间接提升了系统的性能和可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如说：为了保证可用性，通常会对服务接口进行超时设置，以防大量线程阻塞在慢请求上造成系统雪崩，那超时时间设置成多少合理呢？一般，我们会参考依赖服务的性能表现进行设置。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;微观目标&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再从微观角度来看，高性能、高可用和高扩展又有哪些具体的指标来衡量？为什么会选择这些指标呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;性能指标&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过性能指标可以度量目前存在的性能问题，同时作为性能优化的评估依据。一般来说，会采用一段时间内的接口响应时间作为指标。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、平均响应时间：最常用，但是缺陷很明显，对于慢请求不敏感。比如1万次请求，其中9900次是1ms，100次是100ms，则平均响应时间为1.99ms，虽然平均耗时仅增加了0.99ms，但是1%请求的响应时间已经增加了100倍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、TP90、TP99等分位值：将响应时间按照从小到大排序，TP90表示排在第90分位的响应时间， 分位值越大，对慢请求越敏感。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27494199535962877&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt1db27zfRllYrkrYdTMf5ODOoMt73YpeJDNepwjoCkpK7oK6htD3Wjardta5dQ7CDeZCvNYWGwmfQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;862&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、吞吐量：和响应时间呈反比，比如响应时间是1ms，则吞吐量为每秒1000次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常，设定性能目标时会兼顾吞吐量和响应时间，比如这样表述：在每秒1万次请求下，AVG控制在50ms以下，TP99控制在100ms以下。对于高并发系统，AVG和TP分位值必须同时要考虑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，从用户体验角度来看，200毫秒被认为是第一个分界点，用户感觉不到延迟，1秒是第二个分界点，用户能感受到延迟，但是可以接受。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，对于一个健康的高并发系统，TP99应该控制在200毫秒以内，TP999或者TP9999应该控制在1秒以内。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;可用性指标&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高可用性是指系统具有较高的无故障运行能力，可用性 = 正常运行时间 / 系统总运行时间，一般使用几个9来描述系统的可用性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39800995024875624&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt1db27zfRllYrkrYdTMf5ODu8L6WhzQ9yo4qnWtHIWpWZRokZNrU8RGCThoWX692SExv29ibb4Qj1A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;402&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于高并发系统来说，最基本的要求是：保证3个9或者4个9。原因很简单，如果你只能做到2个9，意味着有1%的故障时间，像一些大公司每年动辄千亿以上的GMV或者收入，1%就是10亿级别的业务影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;可扩展性指标&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面对突发流量，不可能临时改造架构，最快的方式就是增加机器来线性提高系统的处理能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于业务集群或者基础组件来说，扩展性 = 性能提升比例 / 机器增加比例，理想的扩展能力是：资源增加几倍，性能提升几倍。通常来说，扩展能力要维持在70%以上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是从高并发系统的整体架构角度来看，扩展的目标不仅仅是把服务设计成无状态就行了，因为当流量增加10倍，业务服务可以快速扩容10倍，但是数据库可能就成为了新的瓶颈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像MySQL这种有状态的存储服务通常是扩展的技术难点，如果架构上没提前做好规划（垂直和水平拆分），就会涉及到大量数据的迁移。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，高扩展性需要考虑：服务集群、数据库、缓存和消息队列等中间件、负载均衡、带宽、依赖的第三方等，当并发达到某一个量级后，上述每个因素都可能成为扩展的瓶颈点。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;高并发的实践方案有哪些？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了高并发设计的3大目标后，再系统性总结下高并发的设计方案，会从以下两部分展开：先总结下通用的设计方法，然后再围绕高性能、高可用、高扩展分别给出具体的实践方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;通用的设计方法&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通用的设计方法主要是从「纵向」和「横向」两个维度出发，俗称高并发处理的两板斧：纵向扩展和横向扩展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;纵向扩展（scale-up）&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的目标是提升单机的处理能力，方案又包括：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、提升单机的硬件性能：通过增加内存、CPU核数、存储容量、或者将磁盘升级成SSD等堆硬件的方式来提升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、提升单机的软件性能：使用缓存减少IO次数，使用并发或者异步的方式增加吞吐量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;横向扩展（scale-out）&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为单机性能总会存在极限，所以最终还需要引入横向扩展，通过集群部署以进一步提高并发处理能力，又包括以下2个方向：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、做好分层架构：这是横向扩展的前&lt;span&gt;提&lt;/span&gt;，因为高并发系统往往业务复杂，通过分层处理可以简化复杂问题，更容易做到横向扩展。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8009259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt1db27zfRllYrkrYdTMf5OD1EherBJmH2EX2PO2Xz44f9wibK5ggLRuurWOibbVAcSDeBV6xBK2icuCA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这种图是互联网最常见的分层架构，当然真实的高并发系统架构会在此基础上进一步完善。比如会做动静分离并引入CDN，反向代理层可以是LVS+Nginx，Web层可以是统一的API网关，业务服务层可进一步按垂直业务做微服务化，存储层可以是各种异构数据库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、各层进行水平扩展：无状态水平扩容，有状态做分片路由。业务集群通常能设计成无状态的，而数据库和缓存往往是有状态的，因此需要设计分区键做好存储分片，当然也可以通过主从同步、读写分离的方案提升读性能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;具体的实践方案&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面再结合我的个人经验，针对高性能、高可用、高扩展3个方面，总结下可落地的实践方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;高性能的实践方案&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、集群部署，通过负载均衡减轻单机压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、多级缓存，包括静态数据使用CDN、本地缓存、分布式缓存等，以及对缓存场景中的热点key、缓存穿透、缓存并发、数据一致性等问题的处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、分库分表和索引优化，以及借助搜索引擎解决复杂查询问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、考虑NoSQL数据库的使用，比如HBase、Redis等，但是团队必须熟悉这些组件，且有较强的运维能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、异步化，将次要流程通过多线程、MQ、甚至延时任务进行异步处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、限流，需要先考虑业务是否允许限流（比如秒杀场景是允许的），包括前端限流、Nginx接入层的限流、服务端的限流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7、对流量进行削峰填谷，通过MQ承接流量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;8、并发处理，通过多线程将串行逻辑并行化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9、预计算，比如抢红包场景，可以提前计算好红包金额缓存起来，发红包时直接使用即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;10、缓存预热，通过异步任务提前预热数据到本地缓存或者分布式缓存中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;11、减少IO次数，比如数据库和缓存的批量读写、RPC的批量接口支持、或者通过冗余数据的方式干掉RPC调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;12、减少IO时的数据包大小，包括采用轻量级的通信协议、合适的数据结构、去掉接口中的多余字段、减少缓存key的大小、压缩缓存value等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;13、程序逻辑优化，比如将大概率阻断执行流程的判断逻辑前置、For循环的计算逻辑优化，或者采用更高效的算法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;14、各种池化技术的使用和池大小的设置，包括HTTP请求池、线程池（考虑CPU密集型还是IO密集型设置核心参数）、数据库和Redis连接池等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;15、JVM优化，包括新生代和老年代的大小、GC算法的选择等，尽可能减少GC频率和耗时。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;16、锁选择，读多写少的场景用乐观锁，或者考虑通过分段锁的方式减少锁冲突。上述方案无外乎从计算和 IO 两个维度考虑所有可能的优化点，需要有配套的监控系统实时了解当前的性能表现，并支撑你进行性能瓶颈分析，然后再遵循二八原则，抓主要矛盾进行优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;高可用的实践方案&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、对等节点的故障转移，Nginx和服务治理框架均支持一个节点失败后访问另一个节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、非对等节点的故障转移，通过心跳检测并实施主备切换（比如redis的哨兵模式或者集群模式、MySQL的主从切换等）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、接口层面的超时设置、重试策略和幂等设计。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、降级处理：保证核心服务，牺牲非核心服务，必要时进行熔断；或者核心链路出问题时，有备选链路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、限流处理：对超过系统处理能力的请求直接拒绝或者返回错误码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、MQ场景的消息可靠性保证，包括producer端的重试机制、broker侧的持久化、consumer端的ack机制等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7、灰度发布，能支持按机器维度进行小流量部署，观察系统日志和业务指标，等运行平稳后再推全量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;8、监控报警：全方位的监控体系，包括最基础的CPU、内存、磁盘、网络的监控，以及Web服务器、JVM、数据库、各类中间件的监控和业务指标的监控。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9、灾备演练：类似当前的“混沌工程”，对系统进行一些破坏性手段，观察局部故障是否会引起可用性问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高可用的方案主要从冗余、取舍、系统运维3个方向考虑，同时需要有配套的值班机制和故障处理流程，当出现线上问题时，可及时跟进处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;高扩展的实践方案&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、合理的分层架构：比如上面谈到的互联网最常见的分层架构，另外还能进一步按照数据访问层、业务逻辑层对微服务做更细粒度的分层（但是需要评估性能，会存在网络多一跳的情况）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、存储层的拆分：按照业务维度做垂直拆分、按照数据特征维度进一步做水平拆分（分库分表）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、业务层的拆分：最常见的是按照业务维度拆（比如电商场景的商品服务、订单服务等），也可以按照核心接口和非核心接口拆，还可以按照请求源拆（比如To C和To B，APP和H5）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后的话&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高并发确实是一个复杂且系统性的问题，由于篇幅有限，诸如分布式Trace、全链路压测、柔性事务都是要考虑的技术点。另外，如果业务场景不同，高并发的落地方案也会存在差异，但是总体的设计思路和可借鉴的方案基本类似。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高并发设计同样要秉承架构设计的3个原则：简单、合适和演进。“过早的优化是万恶之源”，不能脱离业务的实际情况，更不要过度设计，合适的方案就是最完美的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望这篇文章能带给你关于高并发更全面的认识，如果你也有可借鉴的经验和深入的思考，欢迎评论区留言讨论。&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651516135&amp;amp;idx=1&amp;amp;sn=f1f14e39a9c846a43ca19a3cf40f75b0&amp;amp;chksm=bd2580988a52098e2e5f17ad8a779bed77ec94236fb30964620e50b4d1ebeeac68b6da7cef9b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;高并发下如何防重？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;高并发下如何防重？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651513836&amp;amp;idx=1&amp;amp;sn=37a40a1e7f36845b36c3ce589efe8c77&amp;amp;chksm=bd258f938a5206853eb812b26c990147c5419e2f4897ed22594e5a285def044352e7acf133c4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;服务端高并发分布式架构演进之路&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;服务端高并发分布式架构演进之路&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651506492&amp;amp;idx=1&amp;amp;sn=b2ff75dbbe026e96e2b74eb499fd5223&amp;amp;chksm=bd25ab438a522255f8ef889431b9eb4ac67fbc51ecf9becd176b816b111d1729d6a0387596ff&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;看完这篇还不懂高并发中的线程与线程池你来打我&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;看完这篇还不懂高并发中的线程与线程池你来打我&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>