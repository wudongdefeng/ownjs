<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6b8b96a2fd4d84716dfd06b3960d320c</guid>
<title>SpringBoot的starter到底是什么？</title>
<link>https://toutiao.io/k/uwwfdsl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家好，我是苏三，又跟大家见面了。&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道，Spring的功能非常强大，但也有些弊端。比如：我们需要手动去配置大量的参数，没有默认值，需要我们管理大量的jar包和它们的依赖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了提升Spring项目的开发效率，简化一些配置，Spring官方引入了SpringBoot。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，引入SpringBoot还有其他原因，在这里就不过多描述了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文重点跟大家一起聊聊&lt;code&gt;SpringBoot&lt;/code&gt;的&lt;code&gt;starter&lt;/code&gt;机制，因为它太重要了。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3597222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcXTdtD1yt5OZOwWKvNQC6DibdjESeic3KL7rTCLDvIesNibEJBxnFqX9Kg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1440&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1 为什么要用starter？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;SpringBoot&lt;/code&gt;还没有出来之前，我们使用&lt;code&gt;Spring&lt;/code&gt;开发项目。如果程序需要连接数据库，我们一般会使用&lt;code&gt;Hibernate&lt;/code&gt;或&lt;code&gt;Mybatis&lt;/code&gt;等&lt;code&gt;ORM&lt;/code&gt;框架，这里我以Mybatis为例，具体的操作步骤如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;到maven仓库去找需要引入的mybatis jar包，选取合适的版本。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;到maven仓库去找mybatis-spring整合的jar包，选取合适的版本。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在spring的applicationContext.xml文件中配置dataSource和mybatis相关信息。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然有些朋友可能会指正，不是还需要引入&lt;code&gt;数据库驱动包&lt;/code&gt;吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确实需要引入，但数据库驱动有很多，比如：mysql、oracle、sqlserver，这不属于mybatis的范畴，使用者可以根据项目的实际情况单独引入。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果程序只是需要连接数据库这一个功能还好，按上面的步骤做基本可以满足需求。但是，连接数据库可能只是庞大的项目体系中一个环节，实际项目中往往更复杂，需要引入更多的功能，比如：连接redis、连接mongodb、使用rocketmq、使用excel功能等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引入这些功能的话，需要再把上面的步骤再重复一次，工作量无形当中增加了不少，而且有很多&lt;code&gt;重复的工作&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，还是有个问题，每次到要到&lt;code&gt;maven&lt;/code&gt;中找合适的&lt;code&gt;版本&lt;/code&gt;，如果哪次找的mybatis.jar包 和 mybatis-spring.jar包&lt;code&gt;版本不兼容&lt;/code&gt;，程序不是会出现问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot为了解决以上两个问题引入了&lt;code&gt;starter机制&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2 starter有哪些要素？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们首先一起看看&lt;code&gt;mybatis-spring-boot-starter.jar&lt;/code&gt;是如何定义的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29918032786885246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcXbSGzkfqowOvS4xyLibzgfnvcfZv051TU4ZZTbejktzDKnqkWibLKqVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;可以看到它的META-INF目录下只包含了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;pom.protperties  配置maven所需的项目version、groupId和artifactId。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;pom.xml  配置所依赖的jar包。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MANIFEST.MF 这个文件描述了该Jar文件的很多信息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spring.provides 配置所依赖的artifactId，给IDE使用的，没有其他的作用。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意一下，没有一行代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们重点看一下&lt;code&gt;pom.xml&lt;/code&gt;，因为这个jar包里面除了这个没有啥重要的信息&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;project&lt;/span&gt; &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span&gt;xmlns:xsi&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;span&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-autoconfigure&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面可以看出，pom.xml文件中会引入一些jar包，其中除了引入&lt;code&gt;spring-boot-starter&lt;/code&gt;，之外重点看一下：&lt;code&gt;mybatis-spring-boot-autoconfigure&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们找到&lt;code&gt;mybatis-spring-boot-autoconfigure.jar&lt;/code&gt;文件，打开这个文件。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5314207650273224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKchxlYLlXCdNbBmy3R9y79HQOk9fI8OLoGayqG9AznicHz1bARQ2WcA2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;里面包含如下文件：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;pom.properties  配置maven所需的项目version、groupId和artifactId&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;pom.xml  配置所依赖的jar包&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;additional-spring-configuration-metadata.json  手动添加IDE提示功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MANIFEST.MF 这个文件描述了该Jar文件的很多信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spring.factories SPI会读取的文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spring-configuration-metadata.json 系统自动生成的IDE提示功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConfigurationCustomizer 自定义Configuration回调接口&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MybatisAutoConfiguration mybatis配置类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MybatisProperties mybatis属性类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SpringBootVFS 扫描嵌套的jar包中的类&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;spring-configuration-metadata.json&lt;/code&gt;和&lt;code&gt;additional-spring-configuration-metadata.json&lt;/code&gt;的功能差不多，我们在&lt;code&gt;applicationContext.properties&lt;/code&gt;文件中输入spring时，会自动出现下面的配置信息可供选择，就是这个功能了。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.453551912568306&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcFNibBg9EQ1R9o9Uws0Y5Z2iaCKGlvsoriaCHW77Kr2OIrkic75ylj3jIbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来自灵魂的一问：这两个文件有什么区别?&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：如果pom.xml中引入了&lt;code&gt;spring-boot-configuration-processor&lt;/code&gt;包，则会自动生成&lt;code&gt;spring-configuration-metadata.json&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果需要手动修改里面的&lt;code&gt;元数据&lt;/code&gt;，则可以&lt;code&gt;在additional-spring-configuration-metadata.json&lt;/code&gt;中编辑，最终两个文件中的元数据会合并到一起。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;MybatisProperties&lt;/code&gt;类是属性实体类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = MybatisProperties.MYBATIS_PREFIX)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MybatisProperties&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String MYBATIS_PREFIX = &lt;span&gt;&quot;mybatis&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; String configLocation;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; String[] mapperLocations;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; String typeAliasesPackage;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; String typeHandlersPackage;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; checkConfigLocation = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; ExecutorType executorType;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; Properties configurationProperties;&lt;br/&gt;  &lt;span&gt;@NestedConfigurationProperty&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; Configuration configuration;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getConfigLocation&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.configLocation;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setConfigLocation&lt;/span&gt;&lt;span&gt;(String configLocation)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.configLocation = configLocation;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@Deprecated&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getConfig&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.configLocation;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@Deprecated&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setConfig&lt;/span&gt;&lt;span&gt;(String config)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.configLocation = config;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; String[] getMapperLocations() {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.mapperLocations;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMapperLocations&lt;/span&gt;&lt;span&gt;(String[] mapperLocations)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.mapperLocations = mapperLocations;&lt;br/&gt;  }&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getTypeHandlersPackage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.typeHandlersPackage;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setTypeHandlersPackage&lt;/span&gt;&lt;span&gt;(String typeHandlersPackage)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.typeHandlersPackage = typeHandlersPackage;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getTypeAliasesPackage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.typeAliasesPackage;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setTypeAliasesPackage&lt;/span&gt;&lt;span&gt;(String typeAliasesPackage)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.typeAliasesPackage = typeAliasesPackage;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isCheckConfigLocation&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.checkConfigLocation;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setCheckConfigLocation&lt;/span&gt;&lt;span&gt;(&lt;span&gt;boolean&lt;/span&gt; checkConfigLocation)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.checkConfigLocation = checkConfigLocation;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ExecutorType &lt;span&gt;getExecutorType&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.executorType;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setExecutorType&lt;/span&gt;&lt;span&gt;(ExecutorType executorType)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.executorType = executorType;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Properties &lt;span&gt;getConfigurationProperties&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; configurationProperties;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setConfigurationProperties&lt;/span&gt;&lt;span&gt;(Properties configurationProperties)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.configurationProperties = configurationProperties;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Configuration &lt;span&gt;getConfiguration&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; configuration;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setConfiguration&lt;/span&gt;&lt;span&gt;(Configuration configuration)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.configuration = configuration;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; Resource[] resolveMapperLocations() {&lt;br/&gt;    ResourcePatternResolver resourceResolver = &lt;span&gt;new&lt;/span&gt; PathMatchingResourcePatternResolver();&lt;br/&gt;    List&amp;lt;Resource&amp;gt; resources = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Resource&amp;gt;();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.mapperLocations != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;      &lt;span&gt;for&lt;/span&gt; (String mapperLocation : &lt;span&gt;this&lt;/span&gt;.mapperLocations) {&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;          Resource[] mappers = resourceResolver.getResources(mapperLocation);&lt;br/&gt;          resources.addAll(Arrays.asList(mappers));&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;          &lt;span&gt;// ignore&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; resources.toArray(&lt;span&gt;new&lt;/span&gt; Resource[resources.size()]);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到&lt;code&gt;Mybatis&lt;/code&gt;初始化所需要的很多属性都在这里，相当于一个&lt;code&gt;JavaBean&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面重点看一下&lt;code&gt;MybatisAutoConfiguration&lt;/code&gt;的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@org&lt;/span&gt;.springframework.context.annotation.Configuration&lt;br/&gt;&lt;span&gt;@ConditionalOnClass&lt;/span&gt;({ SqlSessionFactory&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;SqlSessionFactoryBean&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt; })&lt;br/&gt;@&lt;span&gt;ConditionalOnBean&lt;/span&gt;(&lt;span&gt;DataSource&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;@&lt;span&gt;EnableConfigurationProperties&lt;/span&gt;(&lt;span&gt;MybatisProperties&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;@&lt;span&gt;AutoConfigureAfter&lt;/span&gt;(&lt;span&gt;DataSourceAutoConfiguration&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MybatisAutoConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(MybatisAutoConfiguration&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; MybatisProperties properties;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Interceptor[] interceptors;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ResourceLoader resourceLoader;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; DatabaseIdProvider databaseIdProvider;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; List&amp;lt;ConfigurationCustomizer&amp;gt; configurationCustomizers;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;MybatisAutoConfiguration&lt;/span&gt;&lt;span&gt;(MybatisProperties properties,&lt;br/&gt;                                  ObjectProvider&amp;lt;Interceptor[]&amp;gt; interceptorsProvider,&lt;br/&gt;                                  ResourceLoader resourceLoader,&lt;br/&gt;                                  ObjectProvider&amp;lt;DatabaseIdProvider&amp;gt; databaseIdProvider,&lt;br/&gt;                                  ObjectProvider&amp;lt;List&amp;lt;ConfigurationCustomizer&amp;gt;&amp;gt; configurationCustomizersProvider)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.properties = properties;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.interceptors = interceptorsProvider.getIfAvailable();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.resourceLoader = resourceLoader;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.databaseIdProvider = databaseIdProvider.getIfAvailable();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.configurationCustomizers = configurationCustomizersProvider.getIfAvailable();&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;checkConfigFileExists&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.properties.isCheckConfigLocation() &amp;amp;&amp;amp; StringUtils.hasText(&lt;span&gt;this&lt;/span&gt;.properties.getConfigLocation())) {&lt;br/&gt;      Resource resource = &lt;span&gt;this&lt;/span&gt;.resourceLoader.getResource(&lt;span&gt;this&lt;/span&gt;.properties.getConfigLocation());&lt;br/&gt;      Assert.state(resource.exists(), &lt;span&gt;&quot;Cannot find config location: &quot;&lt;/span&gt; + resource&lt;br/&gt;          + &lt;span&gt;&quot; (please add config file or check your Mybatis configuration)&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionFactory &lt;span&gt;sqlSessionFactory&lt;/span&gt;&lt;span&gt;(DataSource dataSource)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;    SqlSessionFactoryBean factory = &lt;span&gt;new&lt;/span&gt; SqlSessionFactoryBean();&lt;br/&gt;    factory.setDataSource(dataSource);&lt;br/&gt;    factory.setVfs(SpringBootVFS&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (StringUtils.hasText(&lt;span&gt;this&lt;/span&gt;.properties.getConfigLocation())) {&lt;br/&gt;      factory.setConfigLocation(&lt;span&gt;this&lt;/span&gt;.resourceLoader.getResource(&lt;span&gt;this&lt;/span&gt;.properties.getConfigLocation()));&lt;br/&gt;    }&lt;br/&gt;    Configuration configuration = &lt;span&gt;this&lt;/span&gt;.properties.getConfiguration();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (configuration == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !StringUtils.hasText(&lt;span&gt;this&lt;/span&gt;.properties.getConfigLocation())) {&lt;br/&gt;      configuration = &lt;span&gt;new&lt;/span&gt; Configuration();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (configuration != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !CollectionUtils.isEmpty(&lt;span&gt;this&lt;/span&gt;.configurationCustomizers)) {&lt;br/&gt;      &lt;span&gt;for&lt;/span&gt; (ConfigurationCustomizer customizer : &lt;span&gt;this&lt;/span&gt;.configurationCustomizers) {&lt;br/&gt;        customizer.customize(configuration);&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;    factory.setConfiguration(configuration);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.properties.getConfigurationProperties() != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;      factory.setConfigurationProperties(&lt;span&gt;this&lt;/span&gt;.properties.getConfigurationProperties());&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!ObjectUtils.isEmpty(&lt;span&gt;this&lt;/span&gt;.interceptors)) {&lt;br/&gt;      factory.setPlugins(&lt;span&gt;this&lt;/span&gt;.interceptors);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.databaseIdProvider != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;      factory.setDatabaseIdProvider(&lt;span&gt;this&lt;/span&gt;.databaseIdProvider);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (StringUtils.hasLength(&lt;span&gt;this&lt;/span&gt;.properties.getTypeAliasesPackage())) {&lt;br/&gt;      factory.setTypeAliasesPackage(&lt;span&gt;this&lt;/span&gt;.properties.getTypeAliasesPackage());&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (StringUtils.hasLength(&lt;span&gt;this&lt;/span&gt;.properties.getTypeHandlersPackage())) {&lt;br/&gt;      factory.setTypeHandlersPackage(&lt;span&gt;this&lt;/span&gt;.properties.getTypeHandlersPackage());&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!ObjectUtils.isEmpty(&lt;span&gt;this&lt;/span&gt;.properties.resolveMapperLocations())) {&lt;br/&gt;      factory.setMapperLocations(&lt;span&gt;this&lt;/span&gt;.properties.resolveMapperLocations());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; factory.getObject();&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionTemplate &lt;span&gt;sqlSessionTemplate&lt;/span&gt;&lt;span&gt;(SqlSessionFactory sqlSessionFactory)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ExecutorType executorType = &lt;span&gt;this&lt;/span&gt;.properties.getExecutorType();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (executorType != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SqlSessionTemplate(sqlSessionFactory, executorType);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SqlSessionTemplate(sqlSessionFactory);&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AutoConfiguredMapperScannerRegistrar&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryAware&lt;/span&gt;, &lt;span&gt;ImportBeanDefinitionRegistrar&lt;/span&gt;, &lt;span&gt;ResourceLoaderAware&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; BeanFactory beanFactory;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ResourceLoader resourceLoader;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;registerBeanDefinitions&lt;/span&gt;&lt;span&gt;(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;      ClassPathMapperScanner scanner = &lt;span&gt;new&lt;/span&gt; ClassPathMapperScanner(registry);&lt;br/&gt;      &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.resourceLoader != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;          scanner.setResourceLoader(&lt;span&gt;this&lt;/span&gt;.resourceLoader);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        List&amp;lt;String&amp;gt; packages = AutoConfigurationPackages.get(&lt;span&gt;this&lt;/span&gt;.beanFactory);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (logger.isDebugEnabled()) {&lt;br/&gt;          &lt;span&gt;for&lt;/span&gt; (String pkg : packages) {&lt;br/&gt;            logger.debug(&lt;span&gt;&quot;Using auto-configuration base package &#x27;{}&#x27;&quot;&lt;/span&gt;, pkg);&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        scanner.setAnnotationClass(Mapper&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        scanner.registerFilters();&lt;br/&gt;        scanner.doScan(StringUtils.toStringArray(packages));&lt;br/&gt;      } &lt;span&gt;catch&lt;/span&gt; (IllegalStateException ex) {&lt;br/&gt;        logger.debug(&lt;span&gt;&quot;Could not determine auto-configuration package, automatic mapper scanning disabled.&quot;&lt;/span&gt;, ex);&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setBeanFactory&lt;/span&gt;&lt;span&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.beanFactory = beanFactory;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setResourceLoader&lt;/span&gt;&lt;span&gt;(ResourceLoader resourceLoader)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.resourceLoader = resourceLoader;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@org&lt;/span&gt;.springframework.context.annotation.Configuration&lt;br/&gt;  &lt;span&gt;@Import&lt;/span&gt;({ AutoConfiguredMapperScannerRegistrar&lt;span&gt;.&lt;span&gt;class&lt;/span&gt; })&lt;br/&gt;  @&lt;span&gt;ConditionalOnMissingBean&lt;/span&gt;(&lt;span&gt;MapperFactoryBean&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MapperScannerRegistrarNotFoundConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;br/&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      logger.debug(&lt;span&gt;&quot;No {} found.&quot;&lt;/span&gt;, MapperFactoryBean&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;.&lt;span&gt;getName&lt;/span&gt;())&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个类就是一个&lt;code&gt;Configuration&lt;/code&gt;（配置类），它里面定义很多bean，其中最重要的就是&lt;code&gt;SqlSessionFactory&lt;/code&gt;的bean实例，该实例是&lt;code&gt;Mybatis&lt;/code&gt;的核心功能，用它创建&lt;code&gt;SqlSession&lt;/code&gt;，对数据库进行CRUD操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，&lt;code&gt;MybatisAutoConfiguration&lt;/code&gt;类还包含了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;@ConditionalOnClass 配置了只有包含SqlSessionFactory.class和SqlSessionFactoryBean.class，该配置类才生效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;@ConditionalOnBean 配置了只有包含dataSource实例时，该配置类才生效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;@EnableConfigurationProperties 该注解会自动填充MybatisProperties实例中的属性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AutoConfigureAfter 配置了该配置类在DataSourceAutoConfiguration类之后自动配置。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些注解都是一些辅助功能，决定Configuration是否生效，当然这些注解不是必须的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，重点看看&lt;code&gt;spring.factories&lt;/code&gt;文件有啥内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=\&lt;br/&gt;org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;里面只有一行配置，即&lt;code&gt;key&lt;/code&gt;为&lt;code&gt;EnableAutoConfiguration&lt;/code&gt;，&lt;code&gt;value&lt;/code&gt;为&lt;code&gt;MybatisAutoConfiguration&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，介绍了这么多东西，现在我们来总结一下，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;starter几个要素如下图所示：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39344262295081966&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcbdcjibWoIJiaia5OWgsleHBOwgAAWqzicAAa5czL7QxsJVpBiapfCiaO786A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;那么，编写starter需要哪些步骤?&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;1.需要定义一个名称为xxx-spring-boot-starter的空项目，里面不包含任何代码，可以有pom.xml和pom.properties文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.pom.xml文件中包含了名称为xxx-spring-boot-autoconfigure的项目。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.xxx-spring-boot-autoconfigure项目中包含了名称为xxxAutoConfiguration的类，该类可以定义一些bean实例。当然，Configuration类上可以打一些如：ConditionalOnClass、ConditionalOnBean、EnableConfigurationProperties等注解。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4.需要在spring.factories文件中增加key为EnableAutoConfiguration，value为xxxAutoConfiguration。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们试着按照这四步，自己编写一个starter看看能否成功，验证一下总结的内容是否正确。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3 如何定义自己的starter？&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.1 先创建一个空项目&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该项目名称为id-generate-starter，注意为了方便我把项目重命名了，原本应该是叫id-generate-spring-boot-starter的，如下图所示：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46994535519125685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcyEA2FCsUCd3qqzUfH6EH10mE7EgSnCZQRQ3KTX9Td7pEGAaLYU6E8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;pom.xml文件定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;project&lt;/span&gt; &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span&gt;xmlns:xsi&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;span&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.sue&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;id-generate-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;id-generate-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.sue&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;id-generate-spring-boot-autoconfigure&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看到，它只引入了id-generate-spring-boot-autoconfigure。当然如果有需要这里还可以引入多个autoconfigure或者多个其他jar包或者。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.2 创建id-generate-autoconfigure&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样为了方便我把项目重命名了，原本是叫id-generate-spring-boot-autoconfigure，如下图所示：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7117486338797814&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcYuQmkpj9ReVoPTly5en9SYgFUNLoicraF7fUAiaaicFq2bjBqKH0xCzGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该项目当中包含：pom.xml、spring.factories、IdGenerateAutoConfiguration、IdGenerateService 和 IdProperties 这5个关键文件，下面我们逐一看看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先从pom.xml&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;project&lt;/span&gt; &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span&gt;xmlns:xsi&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0.4.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;span&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.sue&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;id-generate-spring-boot-autoconfigure&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;id-generate-spring-boot-autoconfigure&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-autoconfigure&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-configuration-processor&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;optional&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;span&gt;optional&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;span&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;span&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，这个文件比较简单就引入了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;spring-boot-starter：springboot的相关jar包。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spring-boot-autoconfigure：springboot自动配置相关jar包。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spring-boot-configuration-processor：springboot生成IDE提示功能相关jar包。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点看看&lt;code&gt;spring.factories&lt;/code&gt;文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.sue.IdGenerateAutoConfiguration&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它里面只包含一行配置，其中key是EnableAutoConfiguration，value是IdGenerateAutoConfiguration。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再重点看一下IdGenerateAutoConfiguration&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@ConditionalOnClass&lt;/span&gt;(IdProperties&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;@&lt;span&gt;EnableConfigurationProperties&lt;/span&gt;(&lt;span&gt;IdProperties&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;@&lt;span&gt;Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;IdGenerateAutoConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; IdProperties properties;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; IdGenerateService &lt;span&gt;idGenerateService&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IdGenerateService(properties.getWorkId());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该类是一个使用了&lt;code&gt;@Configuration&lt;/code&gt;注解标记为了配置类，生效的条件是&lt;code&gt;@ConditionalOnClass&lt;/code&gt;注解中检测到包含IdProperties.class。并且使用&lt;code&gt;@EnableConfigurationProperties&lt;/code&gt;注解会自动注入IdProperties的实例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，最关键的点是该类里面创建了idGenerateService的bean实例，这是自动配置的精髓。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再看看IdGenerateService&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IdGenerateService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Long workId;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;IdGenerateService&lt;/span&gt;&lt;span&gt;(Long workId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.workId = workId;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Long &lt;span&gt;generate&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Random().nextInt(&lt;span&gt;100&lt;/span&gt;) + &lt;span&gt;this&lt;/span&gt;.workId;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到它是一个普通的类，甚至都没有使用&lt;code&gt;@Service&lt;/code&gt;注解，里面有个generate方法，根据workId的值和随机数动态生成id。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后看看IdProperties&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = IdProperties.PREFIX)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IdProperties&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String PREFIX = &lt;span&gt;&quot;sue&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Long workId;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Long &lt;span&gt;getWorkId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; workId;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setWorkId&lt;/span&gt;&lt;span&gt;(Long workId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.workId = workId;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它是一个配置实体类，里面包含了相关的配置文件。使用&lt;code&gt;@ConfigurationProperties&lt;/code&gt;注解，会自动把&lt;code&gt;application.properties&lt;/code&gt;文件中以sue开通的，参数名称跟IdProperties中一样的参数值，自动注入到IdProperties对象中。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.3 创建id-generate-test&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个项目主要用于测试。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8314917127071824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcacemCwmuvfO7ickibTY5m3SQDKTdH30VEldFuEcsFeI3Yib531kA6asMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该项目里面包含：pom.xml、application.properties、Application 和 TestRunner 文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看看pom.xml文件&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;project&lt;/span&gt; &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span&gt;xmlns:xsi&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;span&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.sue&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-id-generate-test&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-id-generate-test&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.sue&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;id-generate-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于只测试刚刚定义的id生成功能，所以只引入的id-generate-spring-boot-starter jar包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;application.properties配置资源文件&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;sue.workId=&lt;span&gt;123&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有一行配置，因为我们的IdProperties中目前只需要这一个参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Application是测试程序启动类&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Application&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        SpringApplication.run(Application&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很简单，就是一个普通的springboot启动类&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TestRunner是我们的测试类&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestRunner&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationRunner&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; IdGenerateService idGenerateService;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;(ApplicationArguments args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        Long sysNo = idGenerateService.generate();&lt;br/&gt;        System.out.println(sysNo);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它实现了&lt;code&gt;ApplicationRunner&lt;/code&gt;接口，所以在springboot启动的时候会调用该类的run方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，所有自定义starter的代码和测试代码都已经就绪。接下，运行一下Application类的main方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;176&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完美，验证成功了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们分析一下starter的底层实现原理。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4 starter的底层原理是什么？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面编写自己的starter的例子，相信大家对starter的认识更进一步了，现在跟大家一起看看starter的底层是如何实现的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;id-generate-starter.jar其实是一个空项目，依赖于id-generate-autoconfiguration.jar。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;id-generate-starter.jar是一个入口，我们给他取一个更优雅的名字：&lt;code&gt;门面模式&lt;/code&gt;，其他业务系统想引入相应的功能，必须要通过这个门面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们重点分析一下 id-generate-autoconfiguration.jar&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该jar包核心内容是：IdGenerateConfiguration，这个配置类中创建了IdGenerateService对象，IdGenerateService是我们所需要自动配置的具体功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来一个最重要的问题：
IdGenerateConfiguration为什么会自动加载的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还记得我们定义的spring.factories文件不？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.sue.IdGenerateAutoConfiguration&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它里面只包含一行配置，其中&lt;code&gt;key&lt;/code&gt;是&lt;code&gt;EnableAutoConfiguration&lt;/code&gt;，&lt;code&gt;value&lt;/code&gt;是&lt;code&gt;IdGenerateAutoConfiguration&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要搞明白这个过程，要从Application类的&lt;code&gt;@SpringBootApplication&lt;/code&gt;注解开始：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Target&lt;/span&gt;(ElementType.TYPE)&lt;br/&gt;&lt;span&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;br/&gt;&lt;span&gt;@Documented&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Inherited&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@SpringBootConfiguration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@EnableAutoConfiguration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@ComponentScan&lt;/span&gt;(excludeFilters = {&lt;br/&gt;    &lt;span&gt;@Filter&lt;/span&gt;(type = FilterType.CUSTOM, classes = TypeExcludeFilter&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;),&lt;br/&gt;    @&lt;span&gt;Filter&lt;/span&gt;(&lt;span&gt;type&lt;/span&gt; &lt;/span&gt;= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;) })&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;SpringBootApplication&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@AliasFor&lt;/span&gt;(annotation = EnableAutoConfiguration&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt;[] &lt;span&gt;exclude&lt;/span&gt;() &lt;span&gt;default&lt;/span&gt; &lt;/span&gt;{};&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@AliasFor&lt;/span&gt;(annotation = EnableAutoConfiguration&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;String&lt;/span&gt;[] &lt;span&gt;excludeName&lt;/span&gt;() &lt;span&gt;default&lt;/span&gt; &lt;/span&gt;{};&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@AliasFor&lt;/span&gt;(annotation = ComponentScan&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;attribute&lt;/span&gt; &lt;/span&gt;= &lt;span&gt;&quot;basePackages&quot;&lt;/span&gt;)&lt;br/&gt;  String[] scanBasePackages() &lt;span&gt;default&lt;/span&gt; {};&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;@AliasFor&lt;/span&gt;(annotation = ComponentScan&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;attribute&lt;/span&gt; &lt;/span&gt;= &lt;span&gt;&quot;basePackageClasses&quot;&lt;/span&gt;)&lt;br/&gt;  Class&amp;lt;?&amp;gt;[] scanBasePackageClasses() &lt;span&gt;default&lt;/span&gt; {};&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面可以看出该注解里面包含了&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;注解。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Target&lt;/span&gt;(ElementType.TYPE)&lt;br/&gt;&lt;span&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;br/&gt;&lt;span&gt;@Documented&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Inherited&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@AutoConfigurationPackage&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Import&lt;/span&gt;(AutoConfigurationImportSelector&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;EnableAutoConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  String ENABLED_OVERRIDE_PROPERTY = &lt;span&gt;&quot;spring.boot.enableautoconfiguration&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  Class&amp;lt;?&amp;gt;[] exclude() &lt;span&gt;default&lt;/span&gt; {};&lt;br/&gt;  String[] excludeName() &lt;span&gt;default&lt;/span&gt; {};&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;注解会引入&lt;code&gt;AutoConfigurationImportSelector&lt;/code&gt;类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该类的&lt;code&gt;selectImports&lt;/code&gt;方法一个关键方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; String[] selectImports(AnnotationMetadata annotationMetadata) {&lt;br/&gt;    &lt;span&gt;//配置有没有配置spring.boot.enableautoconfiguration开关，默认为true&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;//如果为false，则不执行自动配置的功能，直接返回&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!isEnabled(annotationMetadata)) {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; NO_IMPORTS;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//找spring-autoconfigure-metadata.properties中的元素&lt;/span&gt;&lt;br/&gt;    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader&lt;br/&gt;        .loadMetadata(&lt;span&gt;this&lt;/span&gt;.beanClassLoader);&lt;br/&gt;    &lt;span&gt;//获取EnableAutoConfiguration注解中的属性 &lt;/span&gt;&lt;br/&gt;    AnnotationAttributes attributes = getAttributes(annotationMetadata);&lt;br/&gt;    &lt;span&gt;//获取工程下所有配置key为EnableAutoConfiguration的值，即IdGenerateConfiguration等类。&lt;/span&gt;&lt;br/&gt;    List&amp;lt;String&amp;gt; configurations = getCandidateConfigurations(annotationMetadata,&lt;br/&gt;        attributes);&lt;br/&gt;    &lt;span&gt;//删除重复的值    &lt;/span&gt;&lt;br/&gt;    configurations = removeDuplicates(configurations);&lt;br/&gt;    &lt;span&gt;//获取需要排除的规则列表&lt;/span&gt;&lt;br/&gt;    Set&amp;lt;String&amp;gt; exclusions = getExclusions(annotationMetadata, attributes);&lt;br/&gt;    &lt;span&gt;//检查&lt;/span&gt;&lt;br/&gt;    checkExcludedClasses(configurations, exclusions);&lt;br/&gt;    &lt;span&gt;//删除需要排除的值&lt;/span&gt;&lt;br/&gt;    configurations.removeAll(exclusions);&lt;br/&gt;    &lt;span&gt;//根据配置文件中配置的开关，过滤一部分不满足条件的值&lt;/span&gt;&lt;br/&gt;    configurations = filter(configurations, autoConfigurationMetadata);&lt;br/&gt;    fireAutoConfigurationImportEvents(configurations, exclusions);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; StringUtils.toStringArray(configurations);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里就是starter能够自动配置的&lt;code&gt;秘密&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，有些朋友看其他人定义的springboot starter可能会有疑惑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看看druid-spring-boot-starter&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5737704918032787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKc6HtE7Zt3geXWLnw4dWvw7KFTcfKWNMHI8NziaX4Vlk6MvbRl3a7ZwTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;alibaba&lt;/code&gt;定义的&lt;code&gt;druid-spring-boot-starter&lt;/code&gt;只有xxx-spring-boot-starter.jar文件，而没有xxx-spring-boot-autoconfigure.jar文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再看看&lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt;：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19808743169398907&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKc0j5SElsxicmJ2ribs2utibJSmFbMjj8nlLB4bsfxE08I3ic1c7qtYu7ang/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更神奇的是这个文件中连&lt;code&gt;pom.xml&lt;/code&gt;都没有，一脸懵逼。。。。。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是我讲错了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：其实没有。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SpringBoot&lt;/code&gt;的原则是&lt;code&gt;约定优于配置&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从spring-boot-starter-jdbc内部空实现来看，它的约定是要把xxx-spring-boot-starter.jar和xxx-spring-boot-autoconfigure.jar区分开的。个人认为，alibaba定义得并不好，没有遵照springboot的约定，虽然功能不受影响。(这个地方欢迎一起探讨一下)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而springboot自己定义的spring-boot-starter-jdbc为什么连pom.xml文件也没有呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它不需要依赖xxx-spring-boot-autoconfigure.jar文件吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为springboot把所有的自动配置的类都统一放到spring-boot-autoconfigure.jar下面了：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0082644628099173&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcnfibicYxicOuaHGR5Rviat8bUS33vDMBsReINhxaqTPN6vWWGUPG8rnkgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot;/&gt;&lt;code&gt;spring.factories&lt;/code&gt;文件内容如下：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7609289617486339&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKcb9vcaJMpngnJJC37B2PdhqLBBZUP9hEvtPVRQmAGkf5Vwwe4mshJ5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;SpringBoot这样集中管理自动配置，而不需要从各个子包中遍历，我个人认为是为了查找效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们最后再看看&lt;code&gt;spring-cloud-starter-openfegin&lt;/code&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.273224043715847&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5gibhDyX2U3XkDx3NMAZQpKc1KwkhH3EZR7rPoFKs9sYLK5ggQm56ysAOFtxtaYEsMAFUMrw0ouFUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;明显看到，它是遵循了我们说的原则的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，还有一个原则一顺便提一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SpringBoot&lt;/code&gt;和&lt;code&gt;SpringCloud&lt;/code&gt;系列定义jar包的名称是:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;spring-boot-starter-xxx.jar&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spring-cloud-starter-xxx.jar&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而我们自己的项目定义的jar应该是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;xxx-spring-boot-starter.jar&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e3b24e12d4b09b7ec5607b1a9770b845</guid>
<title>Spring Cloud Gateway 服务网关</title>
<link>https://toutiao.io/k/dncyaq6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;简化客户端的工作。&lt;/strong&gt; 网关将微服务封装起来后，客户端只需同网关交互，而不必调用各个不同服务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;降低函数间的耦合度。&lt;/strong&gt; 一旦服务接口修改，只需修改网关的路由策略，不必修改每个调用该函数的客户端，从而减少了程序间的耦合性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;解放开发人员把精力专注于业务逻辑的实现。&lt;/strong&gt; 由网关统一实现服务路由(灰度与ABTest)、负载均衡、访问控制、流控熔断降级等非业务相关功能，而不需要每个服务 API 实现时都去考虑&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是 API 网关也存在不足之处，在微服务这种去中心化的架构中，网关又成了一个中心点或瓶颈点，它增加了一个我们必须开发、部署和维护的高可用组件。正是由于这个原因，在网关设计时必须考虑即使 API 网关宕机也不要影响到服务的调用和运行，所以需要对网关的响应结果有数据缓存能力，通过返回缓存数据或默认数据屏蔽后端服务的失败。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在服务的调用方式上面，网关也有一定的要求，API 网关最好是支持 I/O 异步、同步非阻塞的，如果服务是同步阻塞调用，可以理解为微服务模块之间是没有彻底解耦的，即如果A依赖B提供的API，如果B提供的服务不可用将直接影响到A不可用，除非同步服务调用在API网关层或客户端做了相应的缓存。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因此为了彻底解耦，在微服务调用上更建议选择异步方式进行。而对于 API 网关需要通过底层多个细粒度的 API 组合的场景，推荐采用响应式编程模型进行而不是传统的异步回调方法组合代码，其原因除了采用回调方式导致的代码混乱外，还有就是对于 API 组合本身可能存在并行或先后调用，对于采用回调方式往往很难控制。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、服务网关的基本功能&lt;/span&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;1288&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aL1HliaIc3VgZH3iapGgZ609Fp9QxnicRb7bsbKMeBzwY4aPorANibU2BYOg/640?wx_fmt=png&amp;amp;random=0.22107618839395138&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、流量网关与服务网关的区别&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.745398773006135&quot; data-type=&quot;png&quot; data-w=&quot;652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLKNVnbTRBHU1H1OzDkrwmDUiaSLAXvtTrIkibcFxvT4BB73LIvF5vysbw/640?wx_fmt=png&amp;amp;random=0.5712119692746644&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;流量网关和服务网关在系统整体架构中所处的位置如上图所示，流量网关（如Nignx）是指提供全局性的、与后端业务应用无关的策略，例如 HTTPS证书卸载、Web防火墙、全局流量监控等。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;而微服务网关（如Spring Cloud Gateway）是指与业务紧耦合的、提供单个业务域级别的策略，如服务治理、身份认证等。也就是说，流量网关负责南北向流量调度及安全防护，微服务网关负责东西向流量调度及服务治理。&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、服务网关的部署&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、主流网关的对比与选型：&lt;/span&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5520231213872833&quot; data-type=&quot;png&quot; data-w=&quot;692&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLqoRAj375BibB4cP9CKHT8nbN5cMZLYYgT4iagA6ficZAkRVgQ1Te0nU3A/640?wx_fmt=png&amp;amp;random=0.7480870954260643&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Kong 网关&lt;/strong&gt;：Kong 的性能非常好，非常适合做流量网关，但是对于复杂系统不建议业务网关用 Kong，主要是工程性方面的考虑&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Zuul1.x 网关&lt;/strong&gt;：Zuul 1.0 的落地经验丰富，但是性能差、基于同步阻塞IO，适合中小架构，不适合并发流量高的场景，因为容易产生线程耗尽，导致请求被拒绝的情况&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;gateway 网关&lt;/strong&gt;：功能强大丰富，性能好，官方基准测试 RPS (每秒请求数)是Zuul的1.6倍，能与 SpringCloud 生态很好兼容，单从流式编程+支持异步上也足以让开发者选择它了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Zuul 2.x&lt;/strong&gt;：性能与 gateway 差不多，基于非阻塞的，支持长连接，但 SpringCloud 没有集成 zuul2 的计划，并且 Netflix 相关组件都宣布进入维护期，前景未知。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;综上，gateway 网关更加适合 SpringCloud 项目，而从发展趋势上看，gateway 替代 zuul 也是必然的。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、Spring Cloud Gateway 网关的搭建：&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（1）声明依赖版本号：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt; &lt;span&gt;&amp;lt;&lt;span&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;spring-boot.version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.3.2.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;spring-boot.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&amp;gt;&lt;/span&gt;Hoxton.SR9&lt;span&gt;&amp;lt;/&lt;span&gt;spring-cloud.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;spring-cloud-alibaba.version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.2.6.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;spring-cloud-alibaba.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;br/&gt; &lt;span&gt;&amp;lt;!-- 只声明依赖，不引入依赖 --&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependencyManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;!-- 声明springBoot版本 --&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-dependencies&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${spring-boot.version}&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;span&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;!-- 声明springCloud版本 --&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;span&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;!-- 声明 springCloud Alibaba 版本 --&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-cloud-alibaba-dependencies&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${spring-cloud-alibaba.version}&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;span&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependencyManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（2）添加依赖：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;!-- 引入gateway网关 --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-gateway&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;exclusions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;exclusion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;         &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;exclusion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;exclusions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;注意：一定要排除掉 spring-boot-starter-web 依赖，否则启动报错&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（3）配置项目名与端口：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;server:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;9023&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;servlet:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;context-path:&lt;/span&gt; &lt;span&gt;/${spring.application.name}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;application:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;gateway&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，网关项目搭建完成，其实就添加这么一个依赖，关于详细的配置以及作用下文介绍。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、Spring Cloud Gateway 配置项的说明：&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在介绍 Spring Cloud Gateway 的配置项之前，我们先了解几个 Spring Cloud Gateway 的核心术语：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;断言（Predicate）&lt;/strong&gt;：参照 Java8 的新特性Predicate，允许开发人员匹配 HTTP 请求中的任何内容，比如请求头或请求参数，最后根据匹配结果返回一个布尔值。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;路由（route）&lt;/strong&gt;：由ID、目标URI、断言集合和过滤器集合组成。如果聚合断言结果为真，则转发到该路由。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;过滤器（filter）&lt;/strong&gt;：可以在返回请求之前或之后修改请求和响应的内容。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1、路由 Route：&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Route 主要由 路由id、目标uri、断言集合和过滤器集合组成，那我们简单看看这些属性到底有什么作用。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;id&lt;/strong&gt;：路由标识，要求唯一，名称任意（默认值 uuid，一般不用，需要自定义）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;uri&lt;/strong&gt;：请求最终被转发到的目标地址&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;order&lt;/strong&gt;：路由优先级，数字越小，优先级越高&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;predicates&lt;/strong&gt;：断言数组，即判断条件，如果返回值是boolean，则转发请求到 uri 属性指定的服务中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;filters&lt;/strong&gt;：过滤器数组，在请求传递过程中，对请求做一些修改&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2、断言 Predicate：&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Predicate 来自于 Java8 的接口。Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Predicate 可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。Spring Cloud Gateway 内置了许多 Predict，这些 Predict 的源码在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;org.springframework.cloud.gateway.handler.predicate&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 包中，有兴趣可以阅读一下。内置的一些断言如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45740740740740743&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLz2bYNM09Mk76jLnNS1Pt4Pm2eT5TUvU21IzIIlicLnsn1omzgMKvrkQ/640?wx_fmt=png&amp;amp;random=0.3643775901940207&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;以上11种断言这里就不再介绍如何配置了，官方文档写的很清楚：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面就以最后一种权重断言为例介绍一下如何配置。配置如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cloud:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;gateway:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 路由数组：指当请求满足什么样的断言时，转发到哪个服务上&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;routes:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 路由标识，要求唯一，名称任意&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;gateway-provider_1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 请求最终被转发到的目标地址&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;uri:&lt;/span&gt; &lt;span&gt;http://localhost:9024&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;# 设置断言&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;predicates:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# Path Route Predicate Factory 断言，满足 /gateway/provider/** 路径的请求都会被路由到 http://localhost:9024 这个uri中&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Path=/gateway/provider/**&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# Weight Route Predicate Factory 断言，同一分组按照权重进行分配流量，这里分配了80%&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# 第一个group1是分组名，第二个参数是权重&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Weight=group1,&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;# 配置过滤器（局部）&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;filters:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# StripPrefix：去除原始请求路径中的前1级路径，即/gateway&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;StripPrefix=1&lt;/span&gt;            &lt;br/&gt;            &lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;gateway-provider_2&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;uri:&lt;/span&gt; &lt;span&gt;http://localhost:9025&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;# 设置断言&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;predicates:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Path=/gateway/provider/**&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# Weight Route Predicate Factory，同一分组按照权重进行分配流量，这里分配了20%&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Weight=group1,&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 配置过滤器（局部）&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;filters:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# StripPrefix：去除原始请求路径中的前1级路径，即/gateway&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;StripPrefix=1&lt;/span&gt;            &lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spring Cloud Gateway 中的断言命名都是有规范的，格式：“&lt;/span&gt;&lt;code&gt;&lt;span&gt;xxx + RoutePredicateFactory&lt;/span&gt;&lt;/code&gt;&lt;span&gt;”，比如权重断言 &lt;/span&gt;&lt;code&gt;&lt;span&gt;WeightRoutePredicateFactory&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，那么配置时直接取前面的 “Weight”。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果路由转发匹配到了两个或以上，则是的按照配置先后顺序转发，上面都配置了路径：“ &lt;/span&gt;&lt;code&gt;&lt;span&gt;Path=/gateway/provider/**&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ”，如果没有配置权重，则肯定是先转发到 “&lt;/span&gt;&lt;code&gt;&lt;span&gt;http://localhost:9024&lt;/span&gt;&lt;/code&gt;&lt;span&gt;”，但是既然配置配置了权重并且相同的分组，则按照权重比例进行分配流量。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3、过滤器 filter：&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;Gateway 过滤器的生命周期：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;PRE&lt;/strong&gt;：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;POST&lt;/strong&gt;：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;Gateway 过滤器从作用范围可分为两种:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;GatewayFilter&lt;/strong&gt;：应用到单个路由或者一个分组的路由上（需要在配置文件中配置）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;GlobalFilter&lt;/strong&gt;：应用到所有的路由上（无需配置，全局生效）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（1）局部过滤器 &lt;/span&gt;&lt;code&gt;&lt;span&gt;GatewayFilter&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spring Cloud Gateway 中内置了许多的局部过滤器，如下图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLCtSHjgNWb7ZEcz8PQ9g9pUGnichLjiaUPaWVlfXC4yEazEp9hG2vJmog/640?wx_fmt=png&amp;amp;random=0.4181671214746099&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;局部过滤器需要在指定路由配置才能生效，默认是不生效的。以 “&lt;/span&gt;&lt;code&gt;&lt;span&gt;AddResponseHeaderGatewayFilterFactory&lt;/span&gt;&lt;/code&gt;&lt;span&gt;” 这个过滤器为例，为原始响应添加Header，配置如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cloud:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;gateway:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;routes:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;gateway-provider_1&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;uri:&lt;/span&gt; &lt;span&gt;http://localhost:9024&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;predicates:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Path=/gateway/provider/**&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;# 配置过滤器（局部）&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;filters:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;AddResponseHeader=X-Response-Foo,&lt;/span&gt; &lt;span&gt;Bar&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;# StripPrefix：去除原始请求路径中的前1级路径，即/gateway&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;StripPrefix=1&lt;/span&gt;   &lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;浏览器请求，发现响应头中已经有了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;X-Response-Foo=Bar&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 这个键值对，如下图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1281779661016949&quot; data-type=&quot;png&quot; data-w=&quot;944&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLjshfuXY0CaqCsfuGBK8ibicpA4gWYXsiaFJrd2ibictDHOlHOZK1JNGGjnA/640?wx_fmt=png&amp;amp;random=0.14726782775251857&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在前面的示例中，我们也使用到了另一个局部过滤器 &lt;/span&gt;&lt;code&gt;&lt;span&gt;StripPrefixGatewayFilterFactory&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，该过滤器主要用于截断原始请求的路径，当我们请求 &lt;/span&gt;&lt;code&gt;&lt;span&gt;localhost:9023/gateway/provider/test&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 时，实际请求会被转发到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;http://localhost:9024&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 服务上，并被截断成 “&lt;/span&gt;&lt;code&gt;&lt;span&gt;http://localhost:9024/provider/test&lt;/span&gt;&lt;/code&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：过滤器的名称只需要写前缀，过滤器命名必须是 &quot;&lt;/span&gt;&lt;code&gt;&lt;span&gt;xxx + GatewayFilterFactory&lt;/span&gt;&lt;/code&gt;&lt;span&gt;“（包括自定义）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更多过滤器的配置参考官方文档：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（2）自定义局部过滤器：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽说内置的过滤器能够解决很多场景，但是难免还是有些特殊需求需要定制一个过滤器，下面就来介绍一下如何自定义局部过滤器。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;/**&lt;br/&gt; * 名称必须是xxxGatewayFilterFactory形式&lt;br/&gt; * todo：模拟授权的验证，具体逻辑根据业务完善&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AuthorizeGatewayFilterFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AbstractGatewayFilterFactory&lt;/span&gt;&amp;lt;&lt;span&gt;AuthorizeGatewayFilterFactory&lt;/span&gt;.&lt;span&gt;Config&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String AUTHORIZE_TOKEN = &lt;span&gt;&quot;token&quot;&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;//构造函数，加载Config&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AuthorizeGatewayFilterFactory&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//固定写法&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;(AuthorizeGatewayFilterFactory.Config&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        log.info(&lt;span&gt;&quot;Loaded GatewayFilterFactory [Authorize]&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;//读取配置文件中的参数 赋值到 配置类中&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span&gt;shortcutFieldOrder&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//Config.enabled&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Arrays.asList(&lt;span&gt;&quot;enabled&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; GatewayFilter &lt;span&gt;apply&lt;/span&gt;&lt;span&gt;(AuthorizeGatewayFilterFactory.Config config)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (exchange, chain) -&amp;gt; {&lt;br/&gt;            &lt;span&gt;//判断是否开启授权验证&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!config.isEnabled()) {&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; chain.filter(exchange);&lt;br/&gt;            }&lt;br/&gt; &lt;br/&gt;            ServerHttpRequest request = exchange.getRequest();&lt;br/&gt;            HttpHeaders headers = request.getHeaders();&lt;br/&gt;            &lt;span&gt;//从请求头中获取token&lt;/span&gt;&lt;br/&gt;            String token = headers.getFirst(AUTHORIZE_TOKEN);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (token == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;//从请求头参数中获取token&lt;/span&gt;&lt;br/&gt;                token = request.getQueryParams().getFirst(AUTHORIZE_TOKEN);&lt;br/&gt;            }&lt;br/&gt; &lt;br/&gt;            ServerHttpResponse response = exchange.getResponse();&lt;br/&gt;            &lt;span&gt;//如果token为空，直接返回401，未授权&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(token)) {&lt;br/&gt;                response.setStatusCode(HttpStatus.UNAUTHORIZED);&lt;br/&gt;                &lt;span&gt;//处理完成，直接拦截，不再进行下去&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; response.setComplete();&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;/**&lt;br/&gt;             * todo chain.filter(exchange) 之前的都是过滤器的前置处理&lt;br/&gt;             *&lt;br/&gt;             * chain.filter().then(&lt;br/&gt;             *  过滤器的后置处理...........&lt;br/&gt;             * )&lt;br/&gt;             */&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;//授权正常，继续下一个过滤器链的调用&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; chain.filter(exchange);&lt;br/&gt;        };&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@AllArgsConstructor&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@NoArgsConstructor&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Config&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 控制是否开启认证&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; enabled;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;局部过滤器需要在路由中配置才能生效，配置如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cloud:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;gateway:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;routes:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;gateway-provider_1&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;uri:&lt;/span&gt; &lt;span&gt;http://localhost:9024&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;predicates:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Path=/gateway/provider/**&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;## 配置过滤器（局部）&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;filters:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;AddResponseHeader=X-Response-Foo,&lt;/span&gt; &lt;span&gt;Bar&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;## AuthorizeGatewayFilterFactory自定义过滤器配置，值为true需要验证授权，false不需要&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Authorize=true&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此时直接访问：&lt;/span&gt;&lt;code&gt;&lt;span&gt;http://localhost:9023/gateway/provider/port&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，不携带token，返回如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2251968503937008&quot; data-type=&quot;png&quot; data-w=&quot;635&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLxTlLJj1ibZxeDvsdwhOqEErJ4HO8oDeCNXgK6BtiaxbPLDMTmScLMaBg/640?wx_fmt=png&amp;amp;random=0.17874793870592254&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;请求参数带上&lt;/span&gt;&lt;code&gt;&lt;span&gt;token：http://localhost:9023/gateway/provider/port?token=abcdcdecd-ddcdeicd12&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，成功返回，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.20314735336194564&quot; data-type=&quot;png&quot; data-w=&quot;699&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aL7feeiccpPjeIPk20StAfRibVwnlLpR71icWTApgWoP8wic4RpP48oibd1Bg/640?wx_fmt=png&amp;amp;random=0.38360982121491816&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;上述的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;AuthorizeGatewayFilterFactory&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 只是涉及到了过滤器的前置处理，后置处理是在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;chain.filter().then()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;then()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法中完成的，具体可以看下项目源码中的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TimeGatewayFilterFactory&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，代码就不再贴出来了，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1648148148148148&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLEmP3PavWqSgCDvDz9tMSuic8AL8VCmq8VWz6nRxibfaWtbbKHzuwxf1Q/640?wx_fmt=png&amp;amp;random=0.32375503941074&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;（3）GlobalFilter 全局过滤器：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;全局过滤器应用全部路由上，无需开发者配置，Spring Cloud Gateway 也内置了一些全局过滤器，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31296296296296294&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLickXf2ZibvhdLUsI7QmfV9R7Sicmw8KpNHWYm0DgdHFOqA7eVRcJAabQA/640?wx_fmt=png&amp;amp;random=0.2584679662235234&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;code&gt;&lt;span&gt;GlobalFilter&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的功能其实和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;GatewayFilter&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是相同的，只是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;GlobalFilter&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的作用域是所有的路由配置，而不是绑定在指定的路由配置上。多个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;GlobalFilter&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@Order&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 或者&lt;/span&gt;&lt;code&gt;&lt;span&gt; getOrder()&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法指定执行顺序，order值越小，执行的优先级越高。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;注意，由于过滤器有 pre 和 post 两种类型，pre 类型过滤器如果 order 值越小，那么它就应该在pre过滤器链的顶层，post 类型过滤器如果 order 值越小，那么它就应该在 post 过滤器链的底层。示意图如下：&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0331210191082802&quot; data-type=&quot;png&quot; data-w=&quot;785&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLuKSibwk2IzlXw8ic6YlpWQgrVciaDzzsiaXtHbWSQRiaKgptgam3ZUJzWRg/640?wx_fmt=png&amp;amp;random=0.5390617368767863&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（4）自定义全局过滤器：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然除了内置的全局过滤器，实际工作中还需要定制过滤器，下面来介绍一下如何自定义。我们模拟 Nginx 的 Access Log 功能，记录每次请求的相关信息。代码如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Order&lt;/span&gt;(value = Integer.MIN_VALUE)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AccessLogGlobalFilter&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;GlobalFilter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Mono&amp;lt;Void&amp;gt; &lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(ServerWebExchange exchange, GatewayFilterChain chain)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//filter的前置处理&lt;/span&gt;&lt;br/&gt;        ServerHttpRequest request = exchange.getRequest();&lt;br/&gt;        String path = request.getPath().pathWithinApplication().value();&lt;br/&gt;        InetSocketAddress remoteAddress = request.getRemoteAddress();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; chain&lt;br/&gt;                &lt;span&gt;//继续调用filter&lt;/span&gt;&lt;br/&gt;                .filter(exchange)&lt;br/&gt;                &lt;span&gt;//filter的后置处理&lt;/span&gt;&lt;br/&gt;                .then(Mono.fromRunnable(() -&amp;gt; {&lt;br/&gt;            ServerHttpResponse response = exchange.getResponse();&lt;br/&gt;            HttpStatus statusCode = response.getStatusCode();&lt;br/&gt;            log.info(&lt;span&gt;&quot;请求路径:{},远程IP地址:{},响应码:{}&quot;&lt;/span&gt;, path, remoteAddress, statusCode);&lt;br/&gt;        }));&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，全局过滤器不必在路由上配置，注入到IOC容器中即可全局生效。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此时发出一个请求，控制台打印信息如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;请求路径:&lt;/span&gt;&lt;code&gt;&lt;span&gt;/gateway/provider/port&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，远程IP地址:&lt;/span&gt;&lt;code&gt;&lt;span&gt;/0:0:0:0:0:0:0:1:64114&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，响应码:&lt;/span&gt;&lt;code&gt;&lt;span&gt;200 OK&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、Gateway 集成 nacos 注册中心实现服务发现：&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上述 demo 中并没有集成注册中心，每次路由配置都是指定固定的服务uri，如下图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3074074074074074&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLGWE4Jc92b0GsvvQyGxpAXF0O8o59BWVYkiakespsRZnMTbjVZAjetow/640?wx_fmt=png&amp;amp;random=0.3030898788724039&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样做有什么坏处呢？&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;网关服务需要知道所有服务的域名或IP地址，另外，一旦服务的域名或IP地址发生修改，路由配置中的 uri 就必须修改&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务集群中无法实现负载均衡&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么此时我们可以集成的注册中心，使得网关能够从注册中心自动获取uri，并实现负载均衡，这里我们以 nacos 注册中心为例介绍一下&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（1）pom 文件中新增依赖：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;!--nacos注册中心--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（2）启动类添加&lt;/span&gt;&lt;code&gt;&lt;span&gt; @EnableDiscoveryClient&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 注解开启注册中心功能，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4143835616438356&quot; data-type=&quot;png&quot; data-w=&quot;584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLv4yIiaiaxZ9gxFNuqmt4b2HBqAHDuaQYRGqUPQWfueVaVFrrqJTulE9g/640?wx_fmt=png&amp;amp;random=0.6656917395701039&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;（3）配置 nacos 注册中心的地址：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;nacos:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;namespace:&lt;/span&gt; &lt;span&gt;856a40d7-6548-4494-bdb9-c44491865f63&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;url:&lt;/span&gt; &lt;span&gt;120.76.129.106&lt;/span&gt;&lt;span&gt;:80&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cloud:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;nacos:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;discovery:&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;server-addr:&lt;/span&gt; &lt;span&gt;${nacos.url}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;namespace:&lt;/span&gt; &lt;span&gt;${nacos.namespace}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;register-enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（4）服务路由配置：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cloud:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;gateway:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;routes:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;id:&lt;/span&gt; &lt;span&gt;gateway-provider_1&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;## 使用了lb形式，从注册中心负载均衡的获取uri&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;uri:&lt;/span&gt; &lt;span&gt;lb://gateway-provider&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;## 配置断言&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;predicates:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;Path=/gateway/provider/**&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;filters:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;-&lt;/span&gt; &lt;span&gt;AddResponseHeader=X-Response-Foo,&lt;/span&gt; &lt;span&gt;Bar&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;路由配置中唯一不同的就是路由的 uri，格式：&lt;/span&gt;&lt;code&gt;&lt;span&gt;lb://service-name&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，这是固定写法：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;lb：固定格式，指的是从nacos中按照名称获取微服务，并遵循负载均衡策略&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;service-name：nacos注册中心的服务名称，这里并不是IP地址形式的&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么指定了 lb 就可以开启负载均衡，前面说过全局过滤器 &lt;/span&gt;&lt;code&gt;&lt;span&gt;LoadBalancerClientFilter&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 就是负责路由寻址和负载均衡的，可以看到如下源码：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5166666666666667&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLpAW1EPDUiaTkOvqxvFbhxiaCmkXsZtYZWW45rPkPW15mappUR3JDaekQ/640?wx_fmt=png&amp;amp;random=0.7377025313470194&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（5）开启 gateway 自动路由配置：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随着我们的系统架构不断地发展，系统中微服务的数量肯定会越来越多，我们不可能每添加一个服务，就在网关配置一个新的路由规则，这样的维护成本很大；特别在很多种情况，我们在请求路径中会携带一个路由标识方便进行转发，而这个路由标识一般都是服务在注册中心中的服务名，因此这是我们就可以开启 spring cloud gateway 的自动路由功能，网关自动根据注册中心的服务名为每个服务创建一个router，将以服务名开头的请求路径转发到对应的服务，配置如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# enabled：默认为false，设置为true表明spring cloud gateway开启服务发现和路由的功能，网关自动根据注册中心的服务名为每个服务创建一个router，将以服务名开头的请求路径转发到对应的服务&lt;/span&gt;&lt;br/&gt;spring.cloud.gateway.discovery.locator.enabled = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# lowerCaseServiceId：启动 locator.enabled=true 自动路由时，路由的路径默认会使用大写ID，若想要使用小写ID，可将lowerCaseServiceId设置为true&lt;/span&gt;&lt;br/&gt;spring.cloud.gateway.discovery.locator.lower-case-service-id = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里需要注意的是，由于我们的网关项目配置了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;server.servlet.context-path&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 属性，这会导致自动路由失败的问题，因此我们需要做如下两个修改：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 重写过滤链，解决项目设置了 server.servlet.context-path 导致 locator.enabled=true 默认路由策略404的问题&lt;/span&gt;&lt;br/&gt;spring.cloud.gateway.discovery.locator.filters[0] = PreserveHostHeader&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GatewayConfig&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt; (&lt;span&gt;&quot;${server.servlet.context-path}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String prefix;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 过滤 server.servlet.context-path 属性配置的项目路径，防止对后续路由策略产生影响，因为 gateway 网关不支持 servlet&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Order&lt;/span&gt; (-&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; WebFilter &lt;span&gt;apiPrefixFilter&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (exchange, chain) -&amp;gt;&lt;br/&gt;        {&lt;br/&gt;            ServerHttpRequest request = exchange.getRequest();&lt;br/&gt;            String path = request.getURI().getRawPath();&lt;br/&gt; &lt;br/&gt;            path = path.startsWith(prefix) ? path.replaceFirst(prefix, &lt;span&gt;&quot;&quot;&lt;/span&gt;) : path;&lt;br/&gt;            ServerHttpRequest newRequest = request.mutate().path(path).build();&lt;br/&gt; &lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; chain.filter(exchange.mutate().request(newRequest).build());&lt;br/&gt;        };&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至此，我们就开启了 spring cloud gateway 的自动路由功能，网关自动根据注册中心的服务名为每个服务创建一个router，将以服务名开头的请求路径转发到对应的服务。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设我们的服务提供者在 nacos 注册中心的服务名为 “&lt;/span&gt;&lt;code&gt;&lt;span&gt;gateway-provider&lt;/span&gt;&lt;/code&gt;&lt;span&gt;”，这时我们只需要访问 “&lt;/span&gt;&lt;code&gt;&lt;span&gt;http://localhost:9023/gateway/gateway-provider/test&lt;/span&gt;&lt;/code&gt;&lt;span&gt;”，就可以将请求成功转发过去了&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5、Gateway 整合 Apollo 实现动态路由配置：&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上述例子都是将网关的一系列配置写到项目的配置文件中，一旦路由策略发生改变必须要重启项目，这样维护成本很高，特别是服务网关作为系统的中心点，一旦重启出现问题，影响面将是十分巨大的，因此，我们将网关的配置存放到配置中心中，这样由配置中心统一管理，一旦路由发生改变，只需要在配置中心修改即可，降低风险且实时失效。本部分就以 Apollo 配置中心为例介绍下如下实现动态路由配置：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（1）添加 apollo 配置中心依赖：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&amp;lt;!-- Apollo 统一配置中心 --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.ctrip.framework.apollo&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;apollo-client&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.7.0&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（2）添加 Apollo 路由更改监听刷新类：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt; com.ctrip.framework.apollo.enums.PropertyChangeType;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.ctrip.framework.apollo.model.ConfigChange;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.ctrip.framework.apollo.model.ConfigChangeEvent;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; com.ctrip.framework.apollo.spring.annotation.ApolloConfigChangeListener;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.beans.BeansException;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.cloud.context.environment.EnvironmentChangeEvent;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.cloud.gateway.config.GatewayProperties;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.cloud.gateway.event.RefreshRoutesEvent;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.cloud.gateway.route.RouteDefinitionWriter;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.ApplicationContext;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.ApplicationContextAware;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.ApplicationEventPublisher;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.ApplicationEventPublisherAware;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;br/&gt; &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; java.util.ArrayList;&lt;br/&gt; &lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * Apollo路由更改监听刷新&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GatewayPropertRefresher&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationContextAware&lt;/span&gt;, &lt;span&gt;ApplicationEventPublisherAware&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(GatewayPropertRefresher&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ID_PATTERN = &lt;span&gt;&quot;spring\\.cloud\\.gateway\\.routes\\[\\d+\\]\\.id&quot;&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DEFAULT_FILTER_PATTERN = &lt;span&gt;&quot;spring\\.cloud\\.gateway\\.default-filters\\[\\d+\\]\\.name&quot;&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ApplicationEventPublisher publisher;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt;  GatewayProperties gatewayProperties;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RouteDefinitionWriter routeDefinitionWriter;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setApplicationContext&lt;/span&gt;&lt;span&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.applicationContext = applicationContext;&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setApplicationEventPublisher&lt;/span&gt;&lt;span&gt;(ApplicationEventPublisher applicationEventPublisher)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.publisher = applicationEventPublisher;&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 监听路由修改&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ApolloConfigChangeListener&lt;/span&gt;(interestedKeyPrefixes = &lt;span&gt;&quot;spring.cloud.gateway.&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;(ConfigChangeEvent changeEvent)&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        refreshGatewayProperties(changeEvent);&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 刷新路由信息&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;refreshGatewayProperties&lt;/span&gt;&lt;span&gt;(ConfigChangeEvent changeEvent)&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        logger.info(&lt;span&gt;&quot;gateway网关配置 刷新开始！&quot;&lt;/span&gt;);&lt;br/&gt; &lt;br/&gt;        preDestroyGatewayProperties(changeEvent);&lt;br/&gt;        &lt;span&gt;//更新配置&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.applicationContext.publishEvent(&lt;span&gt;new&lt;/span&gt; EnvironmentChangeEvent(changeEvent.changedKeys()));&lt;br/&gt;        &lt;span&gt;//更新路由&lt;/span&gt;&lt;br/&gt;        refreshGatewayRouteDefinition();&lt;br/&gt; &lt;br/&gt;        logger.info(&lt;span&gt;&quot;gateway网关配置 刷新完成！&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/***&lt;br/&gt;     * GatewayProperties没有&lt;span&gt;@PreDestroy&lt;/span&gt;和destroy方法&lt;br/&gt;     * org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder#rebind(java.lang.String)中destroyBean时不会销毁当前对象&lt;br/&gt;     * 如果把spring.cloud.gateway.前缀的配置项全部删除（例如需要动态删除最后一个路由的场景），initializeBean时也无法创建新的bean，则return当前bean&lt;br/&gt;     * 若仍保留有spring.cloud.gateway.routes[n]或spring.cloud.gateway.default-filters[n]等配置，initializeBean时会注入新的属性替换已有的bean&lt;br/&gt;     * 这个方法提供了类似&lt;span&gt;@PreDestroy&lt;/span&gt;的操作，根据配置文件的实际情况把org.springframework.cloud.gateway.config.GatewayProperties#routes&lt;br/&gt;     * 和org.springframework.cloud.gateway.config.GatewayProperties#defaultFilters两个集合清空&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;preDestroyGatewayProperties&lt;/span&gt;&lt;span&gt;(ConfigChangeEvent changeEvent)&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        logger.info(&lt;span&gt;&quot;Pre Destroy GatewayProperties 操作开始!&quot;&lt;/span&gt;);&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; needClearRoutes = &lt;span&gt;this&lt;/span&gt;.checkNeedClear(changeEvent, ID_PATTERN, &lt;span&gt;this&lt;/span&gt;.gatewayProperties.getRoutes().size());&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (needClearRoutes)&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.gatewayProperties.setRoutes(&lt;span&gt;new&lt;/span&gt; ArrayList());&lt;br/&gt;        }&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; needClearDefaultFilters = &lt;span&gt;this&lt;/span&gt;.checkNeedClear(changeEvent, DEFAULT_FILTER_PATTERN, &lt;span&gt;this&lt;/span&gt;.gatewayProperties.getDefaultFilters().size());&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (needClearDefaultFilters)&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.gatewayProperties.setRoutes(&lt;span&gt;new&lt;/span&gt; ArrayList());&lt;br/&gt;        }&lt;br/&gt; &lt;br/&gt;        logger.info(&lt;span&gt;&quot;Pre Destroy GatewayProperties 操作完成!&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;refreshGatewayRouteDefinition&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        logger.info(&lt;span&gt;&quot;Refreshing Gateway RouteDefinition 操作开始!&quot;&lt;/span&gt;);&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.publisher.publishEvent(&lt;span&gt;new&lt;/span&gt; RefreshRoutesEvent(&lt;span&gt;this&lt;/span&gt;));&lt;br/&gt; &lt;br/&gt;        logger.info(&lt;span&gt;&quot;Gateway RouteDefinition refreshed 操作完成!&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/***&lt;br/&gt;     * 根据changeEvent和定义的pattern匹配key，如果所有对应PropertyChangeType为DELETED则需要清空GatewayProperties里相关集合&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;checkNeedClear&lt;/span&gt;&lt;span&gt;(ConfigChangeEvent changeEvent, String pattern, &lt;span&gt;int&lt;/span&gt; existSize)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; changeEvent.changedKeys().stream().filter(key -&amp;gt; key.matches(pattern)).filter(key -&amp;gt;&lt;br/&gt;        {&lt;br/&gt;            ConfigChange change = changeEvent.getChange(key);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; PropertyChangeType.DELETED.equals(change.getChangeType());&lt;br/&gt;        }).count() == existSize;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（3）暴露endpoint端点：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;# 暴露endpoint端点，暴露路由信息，有获取所有路由、刷新路由、查看单个路由、删除路由等方法&lt;/span&gt;&lt;br/&gt;management.endpoints.web.exposure.include = *&lt;br/&gt;management.endpoint.health.show-details = always&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至此，我们就完成了 Gateway 网关整合 Apollo 配置中心实现动态路由配置，一旦路由发生改变，只需要在配置中心修改即可被监听到并实时失效&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果有整合 Nacos 或 MySQL 进行动态路由配置的读者可以参考以下两篇文章：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（1）整合 Nacos 进行动态路由配置：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;https://www.cnblogs.com/jian0110/p/12862569.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（2）整合 MySQL 进行动态路由配置：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;https://blog.csdn.net/qq_42714869/article/details/92794911&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6、自定义全局异常处理器：&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过前面的测试可以看到一个现象：一旦路由的微服务下线或者失联了，Spring Cloud Gateway直接返回了一个错误页面，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2962962962962963&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLyx2fblMRtERDEazhicGbP2eHSHGbAdtJZPuiawDNdqn4U4yzzmBpGM5A/640?wx_fmt=png&amp;amp;random=0.9957610830835344&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;显然这种异常信息不友好，前后端分离架构中必须定制返回的异常信息。传统的Spring Boot 服务中都是使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@ControllerAdvice&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来包装全局异常处理的，但是由于服务下线，请求并没有到达。因此必须在网关中也要定制一层全局异常处理，这样才能更加友好的和客户端交互。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spring Cloud Gateway提供了多种全局处理的方式，今天只介绍其中一种方式，实现还算比较优雅：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;直接创建一个类 &lt;/span&gt;&lt;code&gt;&lt;span&gt;GlobalErrorExceptionHandler&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，实现 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ErrorWebExceptionHandler&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，重写其中的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;handle&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 方法，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;/**&lt;br/&gt; * 用于网关的全局异常处理&lt;br/&gt; * &lt;span&gt;@Order&lt;/span&gt;(-1)：优先级一定要比ResponseStatusExceptionHandler低&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@Order&lt;/span&gt;(-&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GlobalErrorExceptionHandler&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ErrorWebExceptionHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ObjectMapper objectMapper;&lt;br/&gt; &lt;br/&gt; &lt;span&gt;@SuppressWarnings&lt;/span&gt;({&lt;span&gt;&quot;rawtypes&quot;&lt;/span&gt;, &lt;span&gt;&quot;unchecked&quot;&lt;/span&gt;, &lt;span&gt;&quot;NullableProblems&quot;&lt;/span&gt;})&lt;br/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Mono&amp;lt;Void&amp;gt; &lt;span&gt;handle&lt;/span&gt;&lt;span&gt;(ServerWebExchange exchange, Throwable ex)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  ServerHttpResponse response = exchange.getResponse();&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (response.isCommitted()) {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; Mono.error(ex);&lt;br/&gt;  }&lt;br/&gt; &lt;br/&gt;  &lt;span&gt;// JOSN格式返回&lt;/span&gt;&lt;br/&gt;  response.getHeaders().setContentType(MediaType.APPLICATION_JSON);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (ex &lt;span&gt;instanceof&lt;/span&gt; ResponseStatusException) {&lt;br/&gt;   response.setStatusCode(((ResponseStatusException) ex).getStatus());&lt;br/&gt;  }&lt;br/&gt; &lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; response.writeWith(Mono.fromSupplier(() -&amp;gt; {&lt;br/&gt;   DataBufferFactory bufferFactory = response.bufferFactory();&lt;br/&gt;   &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;//todo 返回响应结果，根据业务需求，自己定制&lt;/span&gt;&lt;br/&gt;    CommonResponse resultMsg = &lt;span&gt;new&lt;/span&gt; CommonResponse(&lt;span&gt;&quot;500&quot;&lt;/span&gt;,ex.getMessage(),&lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; bufferFactory.wrap(objectMapper.writeValueAsBytes(resultMsg));&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;catch&lt;/span&gt; (JsonProcessingException e) {&lt;br/&gt;    log.error(&lt;span&gt;&quot;Error writing response&quot;&lt;/span&gt;, ex);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; bufferFactory.wrap(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;]);&lt;br/&gt;   }&lt;br/&gt;  }));&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，全局异常处理已经定制完成了，在测试一下，此时正常返回JSON数据了（JSON的样式根据架构需要自己定制），如下图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15612903225806452&quot; data-type=&quot;png&quot; data-w=&quot;775&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XCLicRQ86JYRzM8G1r2MH7aLJgricSvbH1bJTUmUkKia0iabbbzPLss1mKBrCia00xsA5VibQK7CNWibFMpg/640?wx_fmt=png&amp;amp;random=0.5502320669314837&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>35796551ef77bcd3c83a8d9bf6c346ec</guid>
<title>JAVA 规则引擎 JSR-94</title>
<link>https://toutiao.io/k/sty3d9t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body&quot;&gt;&lt;h1 id=&quot;javajsr-94&quot;&gt;&lt;a name=&quot;user-content-javajsr-94&quot; href=&quot;#javajsr-94&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;headeranchor&quot;/&gt;&lt;/a&gt;JAVA规则引擎JSR-94笔札&lt;/h1&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;JSR-94 是由JCP(Java Community Process)组织所制定的java规则引擎API的java请求规范。它主要定义了规则引擎在java运行时的一些API，指导各个java规则引擎的厂商能够基于这个API实现规则引擎。当前主流支持这个标准的开源java规则引擎有：Drools、OpenRules、JLisa、JRuleEngine。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;_1&quot;&gt;&lt;a name=&quot;user-content-_1&quot; href=&quot;#_1&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;headeranchor&quot;/&gt;&lt;/a&gt;什么是规则引擎&lt;/h2&gt;
&lt;p&gt;JSR-94标准描述的是java规则引擎API，那么什么是规则引擎呢？对于这个问题，业界没有一个严格的定义；当然，这并不妨碍对它的理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;规则的理解&lt;/strong&gt;，最简单的一种观点就是规则是一个if/then的单元；满足某种条件，然后执行某些操作。举个典型的例子：本店购买衣服如果金额超过300RMB，那么就享受八折优惠。具体分析这个规则，它需要输入的是本店购买衣服的金额，它需要满足条件是金额超过300RMB，所要做的是结算时候的金额打八折。当然这样可以举上很多例子，又比如本店优惠券100RMB只能用于衣服售价大于300RMB的服装；本店服装售价低于100RMB的服装，直接减免10RMB不享受其他优惠等等，再把这些规则放在一起，我们可以用规则集来称呼它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;规则引擎的理解&lt;/strong&gt;，继续来分析上面简单的那条规则，对于这条规则的执行它需要&lt;strong&gt;&lt;code&gt;输入数据-&amp;gt;判别条件 -&amp;gt; 执行操作 -&amp;gt; 输出结果&lt;/code&gt;&lt;/strong&gt;来完成它的功用；如果把这一条规则替换成一个规则集，那么执行就变成 &lt;strong&gt;&lt;code&gt;输入数据、规则集合 -&amp;gt; 执行满足规则集 -&amp;gt; 输出结果&lt;/code&gt;&lt;/strong&gt;；这样的执行过程就是规则引擎的一个简单抽象。&lt;/p&gt;
&lt;p&gt;当然，规则引擎有很多，它们并非都像以上为了方便理解而简单的抽象，甚至规则引擎之间有很大的差别。总体来说，有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它提供了一种机制，可以用于扩展业务和程序的逻辑；&lt;/li&gt;
&lt;li&gt;它有一种特定的文件格式或者工具或者语法形式，用来编辑规则和规则集从而扩展程序；&lt;/li&gt;
&lt;li&gt;它常伴有输入数据并产生输出结果，往往和程序紧密切合；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最常见的是Forward-chaining类型的规则引擎，而且一般采用的是RETE算法或者相关改进算法来实现。&lt;/p&gt;
&lt;h2 id=&quot;jsr-94&quot;&gt;&lt;a name=&quot;user-content-jsr-94&quot; href=&quot;#jsr-94&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;headeranchor&quot;/&gt;&lt;/a&gt;JSR-94 简略介绍&lt;/h2&gt;
&lt;p&gt;JSR-94 是由JCP(Java Community Process)组织所制定的java规则引擎API的java请求规范。标准制定开始于14 Nov, 2000，最后于04 Aug, 2004发布当前最终版本。该标准集合了IBM、Oracle、BEA Systems等等各个软件厂商的专家参与制定。它的目的是为了促进规则引擎技术在java程序中的发展；增加java规则引擎厂商之间的的交流以及标准化工作；让使用规则引擎的第三方应用更加方便与规范；也为了简化规则引擎商对外提供的API。&lt;/p&gt;
&lt;p&gt;这份标准已被Java规则引擎商广泛采用，得到了认可与支持。&lt;/p&gt;
&lt;h2 id=&quot;jsr-94_1&quot;&gt;&lt;a name=&quot;user-content-jsr-94_1&quot; href=&quot;#jsr-94_1&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;headeranchor&quot;/&gt;&lt;/a&gt;JSR-94 一些概念的定义&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rule（规则）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般而言，一个规则包含两个部分：条件和操作。当条件满足时，就会执行规则定义的操作。因为提供规则引擎的不同厂商往往规则定义的结构，规则执行的算法不同，所以JSR94标准中不直接定义规则的结构。规则的概念表示的是一个基本单位概念，可作为一个名字或者描述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rule Execution Set（规则执行集合）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;规则执行集合是指多个规则组成的集合。JSR94也不直接定义规则集合的结构，表示的也只是一个基本单位概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Rule Session（规则会话）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rule Session是指运行时程序与规则引擎之间的连接，一个规则会话会关联一个规则执行集合。一个规则会话，可能会消耗规则引擎的资源，所以当程序不再使用的时候应该释放该会话资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stateful Rule Session（全状态规则会话）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stateful Rule Session 是指运行程序长时间的同一个规则执行集合进行交互，有记录会话时的相关状态、数据信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stateless Rule Session（无状态规则会话）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stateless Rule Session 提供的是一种高效、简单的API来执行规则集合，不记录会话时的相关数据信息。&lt;/p&gt;
&lt;h2 id=&quot;jsr-94-api&quot;&gt;&lt;a name=&quot;user-content-jsr-94-api&quot; href=&quot;#jsr-94-api&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;headeranchor&quot;/&gt;&lt;/a&gt;JSR-94 API 的相关设计&lt;/h2&gt;
&lt;p&gt;JSR-94提供的规则引擎相关类和接口都是放在javax.rules 和 javax.rules.admin 这两个包名下。javax.rules 包主要定义的是规则引擎运行时的相关API，这些API主要提供的是与规则会话直接或者间接相关的API；另外一个javax.rules.admin 包提供的是管理规则执行集合相关的API。总体来看就是一个提供的是规则引擎运行接口，另一个提供的是规则执行集合的管理接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;规则引擎运行接口&lt;/strong&gt;，它主要提供了以下的几个功能点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;获取规则引擎厂商提供的 RuleServiceProvider 的实现实例；&lt;/li&gt;
&lt;li&gt;通过 RuleServiceProvider 获取到规则运行时的接口 RuleRuntime；&lt;/li&gt;
&lt;li&gt;通过 RuleRuntime 来创建 规则会话 RuleSession；&lt;/li&gt;
&lt;li&gt;获取到注册的相关资源，并且与 RuleSession 进行交互，其中包括规则执行集合的相关内容；&lt;/li&gt;
&lt;li&gt;执行规则集合，并且提供结果以及进行相关处理；&lt;/li&gt;
&lt;li&gt;用 Handle 实例来允许数据对象联系到 StatefulRuleSession； &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;规则执行集合管理接口&lt;/strong&gt;，主要提供的功能如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通过 RuleServiceProvider 获取到规则管理的实例 RuleAdministrator；&lt;/li&gt;
&lt;li&gt;通过一些java中标准的数据结构类来获取规则执行集合 RuleExecutionSet，比如：java.io.InputStream、java.lang.String、org.w3c.dom.Element等等；&lt;/li&gt;
&lt;li&gt;通过URI来管理 RuleRuntime 的规则执行集合；&lt;/li&gt;
&lt;li&gt;查询规则执行集合 RuleExecutionSet 中的 Rule 规则；&lt;/li&gt;
&lt;li&gt;set 和 get 应用程序或者引擎厂商的相关特别属性；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，不妨用一段代码具体来看JSR94一个无状态规则会话 执行的简化过程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    //获取规则引擎厂商提供的RuleServiceProvider 实例
    String uri = RuleServiceProviderImpl.RULE_SERVICE_PROVIDER;
    RuleServiceProviderManager.registerRuleServiceProvider(uri, RuleServiceProviderImpl.class);
    RuleServiceProvider ruleServiceProvider = RuleServiceProviderManager.getRuleServiceProvider(uri);
&lt;pre&gt;&lt;code&gt;//获取RuleAdministrator 和 RuleExectuionSetProvider 实例
HashMap&amp;amp;lt;String, String&amp;amp;gt; properties = new HashMap&amp;amp;lt;String, String&amp;amp;gt;();
RuleAdministrator ruleAdministrator = ruleServiceProvider.getRuleAdministrator();
LocalRuleExecutionSetProvider ruleExecutionSetProvider =
             ruleAdministrator.getLocalRuleExecutionSetProvider(properties);

//创建一个 RuleExecutionSet
InputStream inputStream = new ByteArrayInputStream(ruleString.getBytes());
RuleExecutionSet ruleSet = ruleExecutionSetProvider.createRuleExecutionSet(inputStream, properties);
RuleRuntime ruleRuntime = ruleServiceProvider.getRuleRuntime();

ruleAdministrator.registerRuleExecutionSet(&amp;amp;quot;isArule&amp;amp;quot;, ruleSet, properties);

//创建一个规则会话，并executeRules
StatelessRuleSession ruleSession = (StatelessRuleSession) runtime.createRuleSession(&amp;amp;quot;isArule&amp;amp;quot;, null, 
                RuleRuntime.STATELESS_SESSION_TYPE);
ruleSession.executeRules(Arrays.asList(args));
&lt;/code&gt;&lt;/pre&gt;
&lt;/code&gt;&lt;p&gt;&lt;code/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p/&gt;
&lt;h2 id=&quot;jsr-94_2&quot;&gt;&lt;a name=&quot;user-content-jsr-94_2&quot; href=&quot;#jsr-94_2&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;headeranchor&quot;/&gt;&lt;/a&gt;JSR-94 不足之处&lt;/h2&gt;
&lt;p&gt;JSR94标准规范定义的API比较简单，非常灵活；但是它最大的不足在于缺乏对于规则定义语言的定义。在它发布最终版本之后，W3C组织于2005年发起了一份RIF（Rule Interchange Format ）标准定义的讨论，这份标准定义更加详细、严格些，感兴趣可以翻阅相关资料， 5 February 2013已经发布了第二版，不过 公共认可程度 现在还比不上JSR94这份标准。&lt;/p&gt;
&lt;h2 id=&quot;_2&quot;&gt;&lt;a name=&quot;user-content-_2&quot; href=&quot;#_2&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;headeranchor&quot;/&gt;&lt;/a&gt;相关文献链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=94&quot; rel=&quot;noopener&quot;&gt;JavaTM Rule Engine API&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://zh.wikipedia.org/wiki/JSR-94&quot; rel=&quot;noopener&quot;&gt;JSR-94 - 维基百科，自由的百科全书&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/javarule-139829.html&quot; rel=&quot;noopener&quot;&gt;Getting Started With the Java Rule Engine API&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/j-java-rules/&quot; rel=&quot;noopener&quot;&gt;Java规则引擎与其API(JSR-94)&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://epf.eclipse.org/wikis/epfpractices/practice.tech.abrd.base/guidances/guidelines/JSR94_8E50FF6A.html&quot; rel=&quot;noopener&quot;&gt;Guideline: JSR94 - Eclipse&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://herzberg.ca.sandia.gov/docs/70/api/javax/rules/package-summary.html&quot; rel=&quot;noopener&quot;&gt;JSR 94 API API&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.w3.org/TR/rif-overview/&quot; rel=&quot;noopener&quot;&gt;RIF Overview&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.jiangzhenlin.cn/&quot; rel=&quot;noopener&quot;&gt;编程De 小站&lt;/a&gt;
&lt;/p&gt;&lt;/article&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2e740dc6cc276fccbeae2d3266ba77d9</guid>
<title>初探 Flutter 跨端游戏开发</title>
<link>https://toutiao.io/k/eq7rih7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文作者为奇舞团大前端CodeFarmer&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背景&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;笔者在公司前前后后做了有小一年Flutter 开发，从入门到后面业务方变动，到暂时放弃Flutter。对于Flutter争议不提，我们得承认Flutter 是一款很优秀的跨端解决方案，到前段时间的Flutter3.0的提出，3.0对游戏做了很友好的支持，笔者又重新开始以游戏为切入点 去上手Flutter。所以我们探索一下Flutter3.0 对于游戏的支持力度，是否可以低成本写出一个自己的小游戏呢？&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1PmKIcPMtgicklh3QKyBU7qFLuZ0aYYoKSDAwpBWWPVOM76ibY0bOibGUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2400&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Why？为什么要做Flutter游戏开发？&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一套代码多端运行（Flutter 特性）：可以想想开发一款游戏，既能争安卓市场，苹果市场还能挣Web市场的钱，是不是很好？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;比较流畅的仿原生环境，与纯原生环境相比流畅度无太大的降低；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;游戏很挣钱，apple store 收入70%来自游戏；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Flutter 3.0 新出了对广告、应用内购买、Firebase、Play 服务和游戏中心等服务的预构建集成加快游戏开发；（方便发布游戏，3.0对游戏支持很友好）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Flutter 侧重2d游戏，3D游戏 参考其他技术，如 unity3d&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Flutter3.0环境准备&lt;/h2&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9286376274328082&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1YiawFDVtwtCrD6jr3JCYUJftfCsdSFCiaO76DQpVbrpcMvFic5icSPOXzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1079&quot;/&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;以Mac 电脑为例，去准备Flutter 环境&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Flutter 3.0 SDK 下载&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;下载以下安装包以获取 Flutter SDK 的最新稳定版本：&lt;/p&gt;&lt;section&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Intel芯片&lt;/th&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;M1 芯片&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;flutter_macos_3.0.1-stable.zip&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;flutter_macos_arm64_3.0.1-stable.zip&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;解压SDK&lt;/p&gt;&lt;pre&gt;&lt;code&gt; &lt;span&gt;cd&lt;/span&gt; ~/development&lt;br/&gt; unzip ~/Downloads/flutter_macos_arm64_3.0.1-stable.zip&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;添加环境变量：(关于Mac 环境变量 不累述:参考)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; PATH=&lt;span&gt;&quot;&lt;span&gt;$PATH&lt;/span&gt;:`pwd`/flutter/bin&quot;&lt;/span&gt;&lt;br/&gt;open ~/.bash_profile&lt;br/&gt;&lt;span&gt;source&lt;/span&gt;  ~/.bash_profile&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;  - 查看Flutter环境完整性： flutter doctor&lt;br/&gt;  flutter doctor&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;环境常见问题&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;问题1：CocoaPods环境依赖安装cocoapods&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo gem install cocoapods&lt;br/&gt;Error: To &lt;span&gt;set&lt;/span&gt; up CocoaPods &lt;span&gt;for&lt;/span&gt; ARM macOS, run:&lt;br/&gt;  arch -x86_64 sudo gem install ffi&lt;br/&gt;  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;arch -x86_64 sudo gem install ffi、&lt;br/&gt;Building native extensions. This could take a &lt;span&gt;while&lt;/span&gt;...&lt;br/&gt;Successfully installed ffi-1.15.5&lt;br/&gt;Parsing documentation &lt;span&gt;for&lt;/span&gt; ffi-1.15.5&lt;br/&gt;Done installing documentation &lt;span&gt;for&lt;/span&gt; ffi after 3 seconds&lt;br/&gt;1 gem installed &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;问题2：Some Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses&lt;/p&gt;&lt;pre&gt;&lt;code&gt;flutter doctor --android-licenses&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整环境如下：非必须，缺失部分环境不影响开发&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;    [✓] Flutter (Channel stable, 3.0.1, on macOS 12.4 21F79 darwin-arm, locale&lt;br/&gt;        zh-Hans-CN)&lt;br/&gt;    [✓] Android toolchain - develop &lt;span&gt;for&lt;/span&gt; Android devices (Android SDK version&lt;br/&gt;        32.1.0-rc1)&lt;br/&gt;    [✓] Xcode - develop &lt;span&gt;for&lt;/span&gt; iOS and macOS (Xcode 13.4)&lt;br/&gt;    [✓] Chrome - develop &lt;span&gt;for&lt;/span&gt; the web&lt;br/&gt;    [✓] Android Studio (version 2021.2)&lt;br/&gt;    [✓] IntelliJ IDEA Ultimate Edition (version 2020.3.2)&lt;br/&gt;    [✓] VS Code (version 1.67.2)&lt;br/&gt;    [✓] Connected device (4 available)&lt;br/&gt;    [✓] HTTP Host Availability&lt;br/&gt;&lt;br/&gt;    • No issues found!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;第一个游戏模板&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个 Flutter 示例游戏 repo 预先集成了应用内购买、移动广告 SDK 和许多其他成功游戏的模块；&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;    &lt;span&gt;cd&lt;/span&gt; flutterdemo &lt;br/&gt;    git &lt;span&gt;clone&lt;/span&gt; https://github.com/flutter/samples.git&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Flutter 中的入门游戏，具有移动端（iOS 和 Android）游戏的所有到发布基本集成，包括以下功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;声音&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;音乐&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主菜单画面&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;广告 (AdMob)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;应用内购买&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;游戏服务（游戏中心和 Google Play 游戏服务）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;崩溃报告 (Firebase Crashlytics)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;lib&lt;br/&gt;├── src&lt;br/&gt;│   ├── ads&lt;span&gt;//广告&lt;/span&gt;&lt;br/&gt;│   ├── app_lifecycle&lt;span&gt;//生命周期&lt;/span&gt;&lt;br/&gt;│   ├── audio&lt;span&gt;//音频&lt;/span&gt;&lt;br/&gt;│   ├── crashlytics&lt;span&gt;//崩溃日志&lt;/span&gt;&lt;br/&gt;│   ├── game_internals&lt;span&gt;//&lt;/span&gt;&lt;br/&gt;│   ├── games_services&lt;span&gt;//游戏服务&lt;/span&gt;&lt;br/&gt;│   ├── in_app_purchase&lt;span&gt;//应用内购买&lt;/span&gt;&lt;br/&gt;│   ├── level_selection&lt;span&gt;//等级&lt;/span&gt;&lt;br/&gt;│   ├── main_menu&lt;span&gt;//menu&lt;/span&gt;&lt;br/&gt;│   ├── play_session&lt;span&gt;//&lt;/span&gt;&lt;br/&gt;│   ├── player_progress&lt;span&gt;//用户进度&lt;/span&gt;&lt;br/&gt;│   ├── settings&lt;span&gt;//设置&lt;/span&gt;&lt;br/&gt;│   ├── style&lt;br/&gt;│   └── win_game&lt;span&gt;//胜利&lt;/span&gt;&lt;br/&gt;├── ...&lt;br/&gt;└── main.dart&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;cd&lt;/span&gt; samples/game_template/&lt;br/&gt;flutter run&lt;br/&gt;Multiple devices found:&lt;br/&gt;[1]: ANA AN00 (NAB5T20525007949)&lt;br/&gt;[2]: iPhone 12 (159CF48A-D131-4187-9E51-391759D8ADC8)&lt;br/&gt;[3]: macOS (macos)&lt;br/&gt;[4]: Chrome (chrome)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Warning: CocoaPods not installed. Skipping pod install.&lt;br/&gt;  CocoaPods is used to retrieve the iOS and macOS platform side&lt;span&gt;&#x27;s plugin code&lt;br/&gt;  that responds to your plugin usage on the Dart side.&lt;br/&gt;  Without CocoaPods, plugins will not work on iOS or macOS.&lt;br/&gt;  For more info, see https://flutter.dev/platform-plugins&lt;br/&gt;To install see&lt;br/&gt;https://guides.cocoapods.org/using/getting-started.html#installation for&lt;br/&gt;instructions.&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动工程&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;flutter clean&lt;br/&gt;flutter pub get&lt;br/&gt;flutter run&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9326829268292683&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1mXsP17CcibR5q2TshuRhHBYWOC9Qicj92vzbyIuaAkesCjfXTv0VaiaXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2050&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以上模板，我们发现关键引入信息如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;  &lt;span&gt;games_services:&lt;/span&gt; &lt;span&gt;^2.0.7&lt;/span&gt;  &lt;span&gt;# 成就和排行榜&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;google_mobile_ads:&lt;/span&gt; &lt;span&gt;^1.1.0&lt;/span&gt;  &lt;span&gt;# 广告&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;in_app_purchase:&lt;/span&gt; &lt;span&gt;^3.0.1&lt;/span&gt;  &lt;span&gt;# 应用内购买&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;广告id切换：&lt;strong&gt;ios/Runner/Info.plist&lt;/strong&gt;  &lt;strong&gt;android/app/src/main/AndroidManifest.xml&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;GADApplicationIdentifier&amp;lt;/key&amp;gt;&lt;br/&gt;&amp;lt;string&amp;gt;ca-app-pub-1234567890123456~0987654321&amp;lt;/string&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;meta-data&lt;br/&gt;   android:name=&lt;span&gt;&quot;com.google.android.gms.ads.APPLICATION_ID&quot;&lt;/span&gt;&lt;br/&gt;   android:value=&lt;span&gt;&quot;ca-app-pub-1234567890123456~1234567890&quot;&lt;/span&gt;/&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;games_services&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;要启用游戏服务，请先在 iOS 上设置&lt;strong&gt;Game Center&lt;/strong&gt; ，在 Android 上设置&lt;strong&gt;Google Play 游戏服务&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6426592797783933&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1A0m65zR7XNvGoicrWJhQ2psNS1RAjO5f502ot6ZJVAKNpn3RIP5U80Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;722&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;登录&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让用户登录游戏中心 (iOS) 或 Google play 游戏服务 (Android)。在进行任何操作（例如发送分数或解锁成就）之前，应该先登录。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; GamesServices.signIn();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;判断登录&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;检查当前用户是否登录游戏服务（ios游戏中心或者Google play 游戏服务）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;GamesServices.isSignedIn;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;登出&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让用户退出 ios游戏中心/Goole Play 服务。调用后，将无法再对该用户的帐户进行任何操作。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; GamesServices.signOut();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;显示成就界面&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;GamesServices.showAchievements();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;显示排行榜-入参需要ios_leaderboard_id和android_leaderboard_id&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; GamesServices.showLeaderboards(iOSLeaderboardID: &lt;span&gt;&#x27;ios_leaderboard_id&#x27;&lt;/span&gt;, androidLeaderboardID: &lt;span&gt;&#x27;android_leaderboard_id&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;提交分数&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提交分数到排行榜&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt;入参需要android&lt;span&gt;_leaderboard_&lt;/span&gt;id和ios&lt;span&gt;_leaderboard_&lt;/span&gt;id&lt;br/&gt;*/&lt;/span&gt;&lt;br/&gt;GamesServices.submitScore(score: Score(androidLeaderboardID: &lt;span&gt;&#x27;android_leaderboard_id&#x27;&lt;/span&gt;,&lt;br/&gt;                                       iOSLeaderboardID: &lt;span&gt;&#x27;ios_leaderboard_id&#x27;&lt;/span&gt;,&lt;br/&gt;                                       value: &lt;span&gt;5&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;解锁成就&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt;android_id&lt;br/&gt;ios_id&lt;br/&gt;percentComplete` 成就的完成百分比，这个参数在iOS的情况下是可选的&lt;br/&gt;&lt;span&gt;`steps`&lt;/span&gt; Android 的成就步骤&lt;br/&gt;*/&lt;/span&gt;&lt;br/&gt;GamesServices.unlock(achievement: Achievement(androidID: &lt;span&gt;&#x27;android_id&#x27;&lt;/span&gt;,&lt;br/&gt;                                              iOSID: &lt;span&gt;&#x27;ios_id&#x27;&lt;/span&gt;,&lt;br/&gt;                                              percentComplete: &lt;span&gt;100&lt;/span&gt;,&lt;br/&gt;                                              steps: &lt;span&gt;2&lt;/span&gt;)); &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;增加步骤 (Android Only)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;增加安卓成就的步骤&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt; GamesServices.increment(achievement: Achievement(androidID: &lt;span&gt;&#x27;android_id&#x27;&lt;/span&gt;, steps: &lt;span&gt;50&lt;/span&gt;));&lt;br/&gt;&lt;span&gt;print&lt;/span&gt;(result);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;显示接入点 (iOS Only)&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;GamesServices.showAccessPoint(AccessPointLocation.topLeading);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;隐藏接入点 (iOS Only)&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;GamesServices.hideAccessPoint();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;获取Player id&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt; playerID = GamesServices.getPlayerID();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;获取Player name&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt; playerName = GamesServices.getPlayerName();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上介绍了Flutter3.0和3.0对游戏友好的支持，可以方便的打通移动端，方便的接入广告等服务，可以让开发者更专注游戏本身开发，而非 广告、音频控制、用户排名，应用支付等，下面我们介绍一下Flutter 游戏的核心，常用的游戏引擎和使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;游戏引擎&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Flame engine：https://github.com/flame-engine/flame/blob/main/i18n/README-ZH.md&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Flame 引擎的目的是为使用 Flutter 开发的游戏会遇到的常见问题提供一套完整的解决方案，Flame 利用了 Flutter 的强大功能，并提供了一种轻量级的方法来为所有平台开发 2-D 游戏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前 Flame 提供了以下功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;游戏循环 (game loop)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;组件/对象系统 (FCS)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;特效与粒子效果&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;碰撞检测&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;手势和输入支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图片、动画、精灵 (sprite) 以及精灵组&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一些简化开发的实用工具类&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了以上的功能以外，你可以使用一些桥接 Flame 的 package 来增强引擎本身的功能。 通过这些桥接 package，你可以访问 Flame 的组件、帮助程序， 或是与其他 package 进行绑定，从而达到平滑集成的效果。 目前我们有以下的桥接 package（Flame 引擎是模块化的，允许用户选择他们想要使用的 API）：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Flame – 核心包，提供游戏循环、基本碰撞检测、Sprite 和组件。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_audio 桥接 AudioPlayers ：可同时播放多个音频。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_bloc 桥接 Bloc ：BloC 状态管理。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43666666666666665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok15st4Tlaibnk6jFAKkTMXjicllayN7Qv032VQvcGwXgtp9UouerXgSbuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_fire_atlas 桥接 FireAtlas ：为游戏创建纹理图集。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_forge2d 桥接 Forge2D ：基于 Box2D 的物理引擎，具有高级碰撞检测的物理引擎，从 Box2D 移植到与 Flame 一起使用&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_lint - 引擎的代码格式规则 (&lt;code&gt;analysis_options.yaml&lt;/code&gt;)。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_oxygen 桥接 Oxygen ：轻量的实体-组件-系统 (ECS)。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Oxygen 是一个用 Dart 编写的轻量级实体组件系统框架，专注于性能和易用性。 Oxygen 在设计上是不可知的，您想要使用的任何游戏引擎都可以与 Oxygen 一起使用。&lt;/p&gt;&lt;p&gt;目标
Oxygen 深受 ECSY 的启发，因此它具有相同的设计原则。 Oxygen 的主要目标是轻巧、高性能和易于使用。 借助 API 尝试并帮助您充分利用 ECS 设计模式，而不会限制您构建逻辑。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_rive 桥接 Rive ：创建可交互的动画。https://rive.app/get-started/&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;RiveAnimation.asset(&lt;span&gt;&#x27;assets/truck.riv&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_svg 桥接 flutter_svg ：在 Flutter 中绘制 SVG。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; assetName = &lt;span&gt;&#x27;assets/image.svg&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; Widget svg = SvgPicture.asset(&lt;br/&gt;  assetName,&lt;br/&gt;  semanticsLabel: &lt;span&gt;&#x27;Acme Logo&#x27;&lt;/span&gt;&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_tiled 桥接 Tiled ：二维平面的地图编辑器。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;flame_audio– 为 Flame 游戏添加音频功能的模块。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2D游戏小例子&lt;/h2&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.101769911504425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1DY6IwFR9jyZMKwWT4Ux2HjEgbN9baaUooZ5YgrXDesPO0C0WvicLI5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;904&quot;/&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;dependencies:&lt;br/&gt;  flutter:&lt;br/&gt;    sdk: flutter&lt;br/&gt;  flame: &lt;span&gt;1.1&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;runApp(&lt;span&gt;const&lt;/span&gt; App());-&amp;gt; GameWidget(game)&amp;amp; 一个自定义pad 布局&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Joypad&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;StatefulWidget&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;//自定义pad 略 可以参考：https://pub.dev/packages/control_pad&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7262222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1iaAibDRic4xiaI2SXI18XUOrXy4RdNFWhicaicoFfFX0bwjFxwibVnP6RQ6ibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1125&quot;/&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Player&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;SpriteComponent&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; &lt;span&gt;HasGameRef&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt; &lt;span&gt;@override&lt;/span&gt;&lt;br/&gt;  Future&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt; onLoad() &lt;span&gt;async&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;.onLoad();&lt;br/&gt;    &lt;span&gt;// TODO 1&lt;/span&gt;&lt;br/&gt;    sprite = &lt;span&gt;await&lt;/span&gt; gameRef.loadSprite(&lt;span&gt;&#x27;player/player.png&#x27;&lt;/span&gt;);&lt;br/&gt;    position = gameRef.size / &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Plyaer:&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.103448275862069&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1qHbo8BNz3leZ5cNpQUdXVhbibBfIM2Y67qyAqkyFNmX06sGuMicYsKhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;29&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyGame&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;FlameGame&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;final&lt;/span&gt; Player _player = Player();&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@override&lt;/span&gt;&lt;br/&gt;  Future&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt; onLoad() &lt;span&gt;async&lt;/span&gt; {&lt;br/&gt;    add(_player);&lt;br/&gt;    &lt;span&gt;// empty&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;//Joypad(onDirectionChanged: onJoypadDirectionChanged) 方向控制pad&lt;/span&gt;&lt;br/&gt;&lt;span&gt;void&lt;/span&gt; onJoypadDirectionChanged(Direction direction) {&lt;br/&gt;    &lt;span&gt;// TODO 2&lt;/span&gt;&lt;br/&gt;    game.onJoypadDirectionChanged(direction);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;game-&amp;gt;player-&amp;gt;更新方向&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;//Player update 更新频率为 16毫秒左右&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@override&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;void&lt;/span&gt; update(&lt;span&gt;double&lt;/span&gt; delta) {&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;.update(delta);&lt;br/&gt;    &lt;span&gt;//移动小孩&lt;/span&gt;&lt;br/&gt;    movePlayer(delta);&lt;br/&gt;    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&#x27;update 更新时间---》&lt;span&gt;${(DateTime.now().microsecondsSinceEpoch - _timeNow)}&lt;/span&gt;&#x27;&lt;/span&gt;);&lt;br/&gt;    _timeNow = &lt;span&gt;DateTime&lt;/span&gt;.now().microsecondsSinceEpoch;&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0029154518950438&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1UazVIjKs54Oeu1tn1Z9o49al6oAaHMHPGbaYjQmsibBncO6CuSmbJfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;60hz=16毫秒刷新&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;关于移动速度和方向&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;void&lt;/span&gt; movePlayer(&lt;span&gt;double&lt;/span&gt; delta) {&lt;br/&gt;    &lt;span&gt;// TODO&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (direction) {&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.up:&lt;br/&gt;        moveUp(delta);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.down:&lt;br/&gt;        moveDown(delta);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.left:&lt;br/&gt;        moveLeft(delta);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.right:&lt;br/&gt;        moveRight(delta);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.none:&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;final&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; _playerSpeed = &lt;span&gt;300.0&lt;/span&gt;;&lt;br/&gt; &lt;span&gt;void&lt;/span&gt; moveUp(&lt;span&gt;double&lt;/span&gt; delta) {&lt;br/&gt;    position.add(Vector2(&lt;span&gt;0&lt;/span&gt;, -(delta * _playerSpeed)));&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;void&lt;/span&gt; moveDown(&lt;span&gt;double&lt;/span&gt; delta) {&lt;br/&gt;    position.add(Vector2(&lt;span&gt;0&lt;/span&gt;, delta * _playerSpeed));&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;void&lt;/span&gt; moveRight(&lt;span&gt;double&lt;/span&gt; delta) {&lt;br/&gt;    position.add(Vector2(delta * _playerSpeed, &lt;span&gt;0&lt;/span&gt;));&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;void&lt;/span&gt; moveLeft(&lt;span&gt;double&lt;/span&gt; delta) {&lt;br/&gt;    position.add(Vector2(-delta * _playerSpeed, &lt;span&gt;0&lt;/span&gt;));&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6455555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1icravH4kqMvxzGW9BokxNbxaGmGJLs8GPhiblbicXWrfwukYNTwTyrk6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果游戏视图的直径为 &lt;em&gt;2500×2500&lt;/em&gt; 像素，则您的玩家从坐标 x:1250, y:1250 的中间开始。 调用 &lt;code&gt;moveDown&lt;/code&gt; 会为玩家的 &lt;em&gt;Y&lt;/em&gt; 位置增加大约 300 像素，用户在向下方向握住手柄时，会导致精灵向下移动游戏视口。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;地图&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;//地图也是精灵，所以加载方式跟精灵一样&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyMap&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;SpriteComponent&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; &lt;span&gt;HasGameRef&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;@override&lt;/span&gt;&lt;br/&gt;  Future&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt;? onLoad() &lt;span&gt;async&lt;/span&gt; {&lt;br/&gt;    sprite = &lt;span&gt;await&lt;/span&gt; gameRef.loadSprite(&lt;span&gt;&#x27;player/rayworld_background.png&#x27;&lt;/span&gt;);&lt;br/&gt;    size = sprite!.originalSize;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.onLoad();&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//地图加载&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyGame&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;FlameGame&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;final&lt;/span&gt; Player _player = Player();&lt;br/&gt;  &lt;span&gt;final&lt;/span&gt; MyMap _map = MyMap();&lt;br/&gt;  &lt;span&gt;@override&lt;/span&gt;&lt;br/&gt;  Future&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt; onLoad() &lt;span&gt;async&lt;/span&gt; {&lt;br/&gt;     &lt;span&gt;await&lt;/span&gt; add(_map);&lt;span&gt;//添加地图&lt;/span&gt;&lt;br/&gt;     add(_player);&lt;br/&gt;  }&lt;br/&gt;} &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;添加会动的精灵 player&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.103448275862069&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cAd6ObKOzEDTEIuicyPOTS3PykVUEAok1EsW5nBVbiaPywokwGONx45AmZFvLK1lv2Y5hYsfAgxt3dKDy9q3pGLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;116&quot;/&gt;&lt;figcaption&gt;player_spritesheet&lt;/figcaption&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;Player &lt;span&gt;extends&lt;/span&gt; SpriteAnimationComponent &lt;span&gt;with&lt;/span&gt; HasGameRef{&lt;br/&gt;  &lt;span&gt;@override&lt;/span&gt;&lt;br/&gt;  Future&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt; onLoad() &lt;span&gt;async&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;.onLoad();&lt;br/&gt;     _loadAnimations().then((_) =&amp;gt; {animation = _standingAnimation});&lt;br/&gt;  }&lt;br/&gt; Future&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt; _loadAnimations() &lt;span&gt;async&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; spriteSheet = SpriteSheet(&lt;br/&gt;      image: &lt;span&gt;await&lt;/span&gt; gameRef.images.load(&lt;span&gt;&#x27;player/player_spritesheet.png&#x27;&lt;/span&gt;),&lt;br/&gt;      srcSize: Vector2(&lt;span&gt;29.0&lt;/span&gt;, &lt;span&gt;32.0&lt;/span&gt;),&lt;span&gt;//1个精灵的像素大小&lt;/span&gt;&lt;br/&gt;    );&lt;br/&gt;    _runDownAnimation =&lt;br/&gt;        spriteSheet.createAnimation(row: &lt;span&gt;0&lt;/span&gt;, stepTime: _animationSpeed, to: &lt;span&gt;4&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    _runLeftAnimation =&lt;br/&gt;        spriteSheet.createAnimation(row: &lt;span&gt;1&lt;/span&gt;, stepTime: _animationSpeed, to: &lt;span&gt;4&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    _runUpAnimation =&lt;br/&gt;        spriteSheet.createAnimation(row: &lt;span&gt;2&lt;/span&gt;, stepTime: _animationSpeed, to: &lt;span&gt;4&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    _runRightAnimation =&lt;br/&gt;        spriteSheet.createAnimation(row: &lt;span&gt;3&lt;/span&gt;, stepTime: _animationSpeed, to: &lt;span&gt;4&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    _standingAnimation =&lt;br/&gt;        spriteSheet.createAnimation(row: &lt;span&gt;0&lt;/span&gt;, stepTime: _animationSpeed, to: &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;void&lt;/span&gt; movePlayer(&lt;span&gt;double&lt;/span&gt; delta) {&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; (direction) {&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.up:&lt;br/&gt;        &lt;span&gt;//动画方向切换&lt;/span&gt;&lt;br/&gt;         animation = _runUpAnimation;&lt;br/&gt;        moveUp(delta);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.down:&lt;br/&gt;        animation = _runDownAnimation;&lt;br/&gt;        moveDown(delta);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.left:&lt;br/&gt;         animation = _runLeftAnimation;&lt;br/&gt;        moveLeft(delta);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.right:&lt;br/&gt;         animation = _runRightAnimation;&lt;br/&gt;        moveRight(delta);&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;case&lt;/span&gt; Direction.none:&lt;br/&gt;        &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此我们的利用Flame 做的一个游戏入门就结束了&lt;/p&gt;&lt;p&gt;当然游戏开发很复杂，想象力最重要！&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Bonfire&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Bonfire 引擎:(RPG 类)可以创造 Flutter.2D 游戏的引擎，基于 Flame&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;引用&amp;amp;资源&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;FlutterGame:https://flutter.dev/games
games-toolkit&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文档：https://docs.flutter.dev/resources/games-toolkit &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;游戏资源1：https://itch.io/game-assets &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;游戏资源2：https://itch.io/
Flutter &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;游戏地图：https://pub.dev/packages/level_map)&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0c61de097788e509bc0578d5e9a7a04d</guid>
<title>2022 年 AI 技术成熟度曲线发布</title>
<link>https://toutiao.io/k/tnvl541</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt; Datawhale干货 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;来源：&lt;/strong&gt;&lt;strong&gt;Gartner、图灵人工智能&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIyNjM2MzQyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsEXsBwQkpYLtE2vhn7Z3RVOSRu5M1VicIgqgMRKLsxsibK7OUSqUb1rUO4pfXnQyFYKqhryAIeh4MOg/0?wx_fmt=png&quot; data-nickname=&quot;Datawhale&quot; data-alias=&quot;Datawhale&quot; data-signature=&quot;一个专注于AI领域的开源组织，汇聚了众多优秀学习者，愿景-for the learner，和学习者一起成长。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;372&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6444444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1WNO00IZSNo0zmDXAiaQHaDzaeO4Y5hpWJZvfUFRm0rxyJSvmZad58Sw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;▲&lt;/span&gt;图1 2022年人工智能技术成熟度曲线&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;近日，Gartner发布了最新的《2022年人工智能技术成熟度曲线》报告，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;报告称尽早采用复合型人工智能（AI）、决策智能等AI技术将给企业机构带来明显的竞争优势&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，缓解AI模型脆弱性引发的问题，有助于捕捉业务背景信息，推动价值实现。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;p&gt;&lt;span&gt;已进入生产成熟期的技术，其实际效益已得到证明和认可。随着越来越多的企业机构认为风险已下降至可接受程度，AI技术的采用开始进入快速增长阶段（见图1）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AI一直是企业、政府和社会讨论的热门话题，企业机构很难分辨哪些AI技术具有真正的业务价值。数据和分析（D&amp;amp;A）领导者需制定具有前瞻性的AI战略，并充分利用当前可产生重大影响的技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Datawhale编辑&lt;span&gt;（转载请注明来源）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;115911&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1cA0Le3x73y5V59WmAetESMmxtRiczl3aUp8dSDMOvV3EkymngticLIIA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;40&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot; hm_fix=&quot;311:239&quot;&gt;一、合成数据&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8461538461538461&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1Glz9E4APGs94smWZxFNZ4Dr9ZkDDb3vBfMvveiarYnpajty6HscJtiag/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;39&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;当今AI发展所面临的主要问题之一是，为有效训练AI模型而获取真实数据并进行标记，会给企业机构带来沉重的负担。此举不但耗时，而且费用高昂，但这一问题可通过合成数据来弥补。另外，合成数据在去除个人身份信息（PII）方面也有至关重要的作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;115911&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.825&quot; data-type=&quot;png&quot; data-w=&quot;40&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1cA0Le3x73y5V59WmAetESMmxtRiczl3aUp8dSDMOvV3EkymngticLIIA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot; hm_fix=&quot;325:234&quot;&gt;二、因果人工智能&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8461538461538461&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1Glz9E4APGs94smWZxFNZ4Dr9ZkDDb3vBfMvveiarYnpajty6HscJtiag/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;39&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;人工智能的最终价值在于提高人类的行动水平。机器学习（ML）方法根据统计关系（相关性）进行预测，无论这些关系是否构成因果关系。当需要更规范地确定哪些最佳行动可促成特定结果时，因果人工智能可发挥至关重要的作用。该方法能够提高人工智能技术的自主性、可解释性、稳健性和效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;115911&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1cA0Le3x73y5V59WmAetESMmxtRiczl3aUp8dSDMOvV3EkymngticLIIA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;40&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot; hm_fix=&quot;309:221&quot;&gt;三、决策智能&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8461538461538461&quot; data-type=&quot;png&quot; data-w=&quot;39&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1Glz9E4APGs94smWZxFNZ4Dr9ZkDDb3vBfMvveiarYnpajty6HscJtiag/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;决策智能是一种实用的技术，旨在准确理解决策流程以及如何根据反馈来评估、管理和改进结果，从而提高决策水平。当前，随着人工智能技术在决策中的应用日益广泛，自动决策和增强智能受到热议，这一趋势正在将决策智能推向期望膨胀期。近期的危机揭示了业务流程的脆弱性，而在企业机构重构业务流程并增强韧性、适应性和灵活性的过程中，决策智能方法和技术将发挥重要作用。依托多种软件技术的决策智能市场正快速兴起，已开始为决策者提供解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;115911&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.825&quot; data-type=&quot;png&quot; data-w=&quot;40&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1cA0Le3x73y5V59WmAetESMmxtRiczl3aUp8dSDMOvV3EkymngticLIIA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section hm_fix=&quot;295:203&quot;&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;四、复合型人工智能&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8461538461538461&quot; data-type=&quot;png&quot; data-w=&quot;39&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1Glz9E4APGs94smWZxFNZ4Dr9ZkDDb3vBfMvveiarYnpajty6HscJtiag/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;复合型人工智能产生的前提在于，任何一种人工智能方法都不能解决所有问题。目前，复合型人工智能将“连接主义”派别的方法（如机器学习）与“符号主义”等派别的方法（如基于规则的推理、图分析、基于主体的建模和优化技术等）相结合，旨在减少人工智能解决方案学习时所需的数据和能量，使抽象化机制发挥更大作用。复合型人工智能是推动决策智能市场兴起的核心因素。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;115911&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.825&quot; data-type=&quot;png&quot; data-w=&quot;40&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1cA0Le3x73y5V59WmAetESMmxtRiczl3aUp8dSDMOvV3EkymngticLIIA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section hm_fix=&quot;360:246&quot;&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;五、生成式人工智能&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8461538461538461&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1Glz9E4APGs94smWZxFNZ4Dr9ZkDDb3vBfMvveiarYnpajty6HscJtiag/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;39&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;目前对生成式人工智能方法的探索正在升温，并且开始在生命科学、医疗、制造、材料科学、媒体、娱乐、汽车、航空航天、国防以及能源行业证明自身的价值。生成式人工智能已催生了营销、设计、建筑和内容领域的创造性工作。技术生成的合成数据可以提高人工智能交付的准确性和速度。生成式人工智能的使用日益普遍，已上市的产品种类越来越丰富，此技术最近被积极应用于元宇宙领域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;115911&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1cA0Le3x73y5V59WmAetESMmxtRiczl3aUp8dSDMOvV3EkymngticLIIA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;40&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot; hm_fix=&quot;330:239&quot;&gt;六、基础模型&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8461538461538461&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4e0PqmkFqFOhLd4p3RS5lrzHaFtqDTC1Glz9E4APGs94smWZxFNZ4Dr9ZkDDb3vBfMvveiarYnpajty6HscJtiag/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;39&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基础模型附带大量预训练数据集并可适用于广泛的用例，是人工智能领域发展过程中的重大进步。与以前的模型相比，基础模型能更高效地提供更先进的自然语言处理能力。基础模型已成为自然语言处理领域的首选架构，此架构还可支持计算机视觉、音频处理、软件工程、生物化学、金融和法律用例。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;235&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.40555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vI9nYe94fsGxu3P5YibTO899okS0X9WaLmQCtia4U8Eu1xWCz9t8Qtq9PH6T1bTcxibiaCIkGzAxpeRkRFYqibVmwSw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整理不易，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;赞&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;三连&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;↓&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>