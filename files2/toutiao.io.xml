<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4ab691aabc02cf3c54796d7421f0a94a</guid>
<title>面试官：MySQL 数据库查询慢，除了索引问题还可能是什么原因？</title>
<link>https://toutiao.io/k/4ivnhwu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;大家好，我是君哥。&lt;/p&gt;&lt;p&gt;mysql查询为什么会慢，关于这个问题，在实际开发经常会遇到，而面试中，也是个高频题。&lt;/p&gt;&lt;p&gt;遇到这种问题，我们一般也会想到是因为索引。&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;那除开索引之外，还有哪些因素会导致数据库查询变慢呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;有哪些操作，可以提升mysql的查询能力呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;今天这篇文章，我们就来聊聊会导致数据库查询变慢的场景有哪些，并给出原因和解决方案。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;数据库查询流程&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;我们先来看下，一条查询语句下来，会经历哪些流程。&lt;/p&gt;&lt;p&gt;比如我们有一张数据库表&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;`user`&lt;/span&gt; (&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;`id`&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; AUTO_INCREMENT &lt;span&gt;COMMENT&lt;/span&gt; &lt;span&gt;&#x27;主键&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;`name`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt; &lt;span&gt;COMMENT&lt;/span&gt; &lt;span&gt;&#x27;名字&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;`age`&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;0&#x27;&lt;/span&gt; &lt;span&gt;COMMENT&lt;/span&gt; &lt;span&gt;&#x27;年龄&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;`gender`&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;8&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;&#x27;0&#x27;&lt;/span&gt; &lt;span&gt;COMMENT&lt;/span&gt; &lt;span&gt;&#x27;性别&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`id`&lt;/span&gt;),&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_age`&lt;/span&gt; (&lt;span&gt;`age`&lt;/span&gt;),&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_gender`&lt;/span&gt; (&lt;span&gt;`gender`&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;) &lt;span&gt;ENGINE&lt;/span&gt;=&lt;span&gt;InnoDB&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt;=utf8;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们平常写的应用代码（go或C++之类的），这时候就叫&lt;strong mpa-from-tpl=&quot;t&quot;&gt;客户端&lt;/strong&gt;了。&lt;/p&gt;&lt;p&gt;客户端底层会带着账号密码，尝试向mysql建立一条TCP长链接。&lt;/p&gt;&lt;p&gt;mysql的&lt;strong mpa-from-tpl=&quot;t&quot;&gt;连接管理模块&lt;/strong&gt;会对这条连接进行管理。&lt;/p&gt;&lt;p&gt;建立连接后，客户端执行一条查询sql语句。比如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; gender = &lt;span&gt;1&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; age = &lt;span&gt;100&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端会将sql语句通过网络连接给mysql。&lt;/p&gt;&lt;p&gt;mysql收到sql语句后，会在&lt;strong mpa-from-tpl=&quot;t&quot;&gt;分析器&lt;/strong&gt;中先判断下SQL语句有没有语法错误，比如select，如果少打一个&lt;code&gt;l&lt;/code&gt;，写成&lt;code&gt;slect&lt;/code&gt;，则会报错&lt;code&gt;You have an error in your SQL syntax;&lt;/code&gt;。这个报错对于我这样的手残党来说可以说是很熟悉了。&lt;/p&gt;&lt;p&gt;接下来是&lt;strong mpa-from-tpl=&quot;t&quot;&gt;优化器&lt;/strong&gt;，在这里会&lt;strong mpa-from-tpl=&quot;t&quot;&gt;根据一定的规则选择该用什么索引&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;之后，才是通过&lt;strong mpa-from-tpl=&quot;t&quot;&gt;执行器&lt;/strong&gt;去调用&lt;strong mpa-from-tpl=&quot;t&quot;&gt;存储引擎&lt;/strong&gt;的接口函数。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK30llfbC5U0KXGEicjeVnLPkiclPicZGzc6G1MsGSrRbSaXBqAbwvTfTtuQ/640&quot; title=&quot;Mysql架构&quot; data-ratio=&quot;1.04&quot; data-w=&quot;1000&quot;/&gt;&lt;figcaption&gt;Mysql架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;存储引擎&lt;/strong&gt;类似于一个个组件，它们才是mysql真正获取一行行数据并返回数据的地方，存储引擎是可以替换更改的，既可以用不支持事务的MyISAM，也可以替换成支持事务的Innodb。这个可以在建表的时候指定。比如&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;`user`&lt;/span&gt; (&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  ...&lt;br mpa-from-tpl=&quot;t&quot;/&gt;) &lt;span&gt;ENGINE&lt;/span&gt;=&lt;span&gt;InnoDB&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在最常用的是&lt;strong mpa-from-tpl=&quot;t&quot;&gt;InnoDB&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们就重点说这个。&lt;/p&gt;&lt;p&gt;InnoDB中，因为直接操作磁盘会比较慢，所以加了一层内存提提速，叫&lt;strong mpa-from-tpl=&quot;t&quot;&gt;buffer pool&lt;/strong&gt;，这里面，放了很多内存页，每一页16KB，有些内存页放的是数据库表里看到的那种一行行的数据，有些则是放的索引信息。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3AicuSMsppX9uxkibXsNicTMzsOeTib1AZTMdmQIUgjXuiavMkPS3b8FMbicg/640&quot; title=&quot;bufferPool与磁盘&quot; data-ratio=&quot;0.7&quot; data-w=&quot;1000&quot;/&gt;&lt;figcaption&gt;bufferPool与磁盘&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;查询SQL到了InnoDB中。会根据前面优化器里计算得到的索引，去&lt;strong mpa-from-tpl=&quot;t&quot;&gt;查询相应的索引页&lt;/strong&gt;，如果不在buffer pool里则从磁盘里加载索引页。&lt;strong mpa-from-tpl=&quot;t&quot;&gt;再通过索引页加速查询，得到数据页&lt;/strong&gt;的具体位置。如果这些数据页不在buffer pool中，则从磁盘里加载进来。&lt;/p&gt;&lt;p&gt;这样我们就得到了我们想要的一行行数据。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3j17LhKgzqicwfKNrQjPff37PPhlo4yfR3zvhc2YAO6hgwtyUtG8OYuA/640&quot; title=&quot;索引页与磁盘页的关系&quot; data-ratio=&quot;1&quot; data-w=&quot;800&quot;/&gt;&lt;figcaption&gt;索引页与磁盘页的关系&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;最后将得到的数据结果返回给客户端。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;慢查询分析&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;如果上面的流程比较慢的话，我们可以通过开启&lt;code&gt;profiling&lt;/code&gt;看到流程慢在哪。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; &lt;span&gt;set&lt;/span&gt; profiling=&lt;span&gt;ON&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Query OK, 0 rows affected, 1 warning (0.00 sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;mysql&amp;gt; &lt;span&gt;show&lt;/span&gt; &lt;span&gt;variables&lt;/span&gt; &lt;span&gt;like&lt;/span&gt; &lt;span&gt;&#x27;profiling&#x27;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;---------------+-------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| Variable_name | Value |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;---------------+-------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| profiling     | ON    |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;---------------+-------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后正常执行sql语句。&lt;/p&gt;&lt;p&gt;这些SQL语句的执行时间都会被记录下来，此时你想查看有哪些语句被记录下来了，可以执行 &lt;code&gt;show profiles;&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; &lt;span&gt;show&lt;/span&gt; &lt;span&gt;profiles&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;----------+------------+---------------------------------------------------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| Query_ID | Duration   | Query                                             |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;----------+------------+---------------------------------------------------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;|        1 | 0.06811025 | &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; age&amp;gt;=&lt;span&gt;60&lt;/span&gt;                  |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;|        &lt;span&gt;2&lt;/span&gt; | &lt;span&gt;0.00151375&lt;/span&gt; | &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; gender = &lt;span&gt;2&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; age = &lt;span&gt;80&lt;/span&gt;  |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;|        &lt;span&gt;3&lt;/span&gt; | &lt;span&gt;0.00230425&lt;/span&gt; | &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; gender = &lt;span&gt;2&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; age = &lt;span&gt;60&lt;/span&gt;  |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;|        &lt;span&gt;4&lt;/span&gt; | &lt;span&gt;0.00070400&lt;/span&gt; | &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; gender = &lt;span&gt;2&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; age = &lt;span&gt;100&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;|        &lt;span&gt;5&lt;/span&gt; | &lt;span&gt;0.07797650&lt;/span&gt; | &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; age!=&lt;span&gt;60&lt;/span&gt;                  |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;----------+------------+---------------------------------------------------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt; &lt;span&gt;warning&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关注下上面的&lt;code&gt;query_id&lt;/code&gt;，比如&lt;code&gt;select * from user where age&amp;gt;=60&lt;/code&gt;对应的query_id是1，如果你想查看这条SQL语句的具体耗时，那么可以执行以下的命令。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; &lt;span&gt;show&lt;/span&gt; profile &lt;span&gt;for&lt;/span&gt; &lt;span&gt;query&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;----------------------+----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| Status               | Duration |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;----------------------+----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| starting             | 0.000074 |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| checking permissions | 0.000010 |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| Opening tables       | 0.000034 |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| init                 | 0.000032 |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| System &lt;span&gt;lock&lt;/span&gt;          | &lt;span&gt;0.000027&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| optimizing           | &lt;span&gt;0.000020&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| &lt;span&gt;statistics&lt;/span&gt;           | &lt;span&gt;0.000058&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| preparing            | &lt;span&gt;0.000018&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| executing            | &lt;span&gt;0.000013&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| Sending &lt;span&gt;data&lt;/span&gt;         | &lt;span&gt;0.067701&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| &lt;span&gt;end&lt;/span&gt;                  | &lt;span&gt;0.000021&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| &lt;span&gt;query&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;            | &lt;span&gt;0.000015&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| closing &lt;span&gt;tables&lt;/span&gt;       | &lt;span&gt;0.000014&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| freeing items        | &lt;span&gt;0.000047&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| cleaning up          | &lt;span&gt;0.000027&lt;/span&gt; |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;----------------------+----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt; &lt;span&gt;warning&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过上面的各个项，大家就可以看到具体耗时在哪。比如从上面可以看出Sending data的耗时最大，这个是指&lt;strong mpa-from-tpl=&quot;t&quot;&gt;执行器&lt;/strong&gt;开始查询数据并将数据发送给客户端的耗时，因为我的这张表符合条件的数据有&lt;strong mpa-from-tpl=&quot;t&quot;&gt;好几万条&lt;/strong&gt;，所以这块耗时最大，也符合预期。&lt;/p&gt;&lt;p&gt;一般情况下，我们开发过程中，耗时大部分时候都在&lt;code&gt;Sending data&lt;/code&gt;阶段，而这一阶段里如果慢的话，最容易想到的还是索引相关的原因。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;索引相关原因&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;索引相关的问题，一般能用explain命令帮助分析。通过它能看到&lt;strong mpa-from-tpl=&quot;t&quot;&gt;用了哪些索引&lt;/strong&gt;，大概会&lt;strong mpa-from-tpl=&quot;t&quot;&gt;扫描多少行&lt;/strong&gt;之类的信息。&lt;/p&gt;&lt;p&gt;mysql会在&lt;strong mpa-from-tpl=&quot;t&quot;&gt;优化器阶段&lt;/strong&gt;里看下选择哪个索引，查询速度会更快。&lt;/p&gt;&lt;p&gt;一般主要考虑几个因素，比如：&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;回到show profile中提到的sql语句，我们使用&lt;code&gt;explain select * from user where age&amp;gt;=60&lt;/code&gt; 分析一下。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14907407407407408&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK384CyKs22B0E3ORxicOAnq0mFeFaCENC3HSo4HvwGnVdREZWCh9Gfib0g/640&quot; data-w=&quot;1080&quot; title=&quot;explain sql&quot;/&gt;&lt;figcaption&gt;explain sql&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;上面的这条语句，使用的&lt;code&gt;type&lt;/code&gt;为ALL，意味着是&lt;strong mpa-from-tpl=&quot;t&quot;&gt;全表扫描&lt;/strong&gt;，&lt;code&gt;possible_keys&lt;/code&gt;是指&lt;strong mpa-from-tpl=&quot;t&quot;&gt;可能用得到的索引&lt;/strong&gt;，这里可能使用到的索引是为age建的普通索引，但实际上数据库使用的索引是在&lt;code&gt;key&lt;/code&gt;那一列，是&lt;code&gt;NULL&lt;/code&gt;。也就是说&lt;strong mpa-from-tpl=&quot;t&quot;&gt;这句sql不走索引，全表扫描&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;这个是因为数据表里，符合条件的数据行数（&lt;code&gt;rows&lt;/code&gt;）太多，如果使用age索引，那么需要将它们从age索引中读出来，并且age索引是&lt;strong mpa-from-tpl=&quot;t&quot;&gt;普通索引&lt;/strong&gt;，还需要&lt;strong mpa-from-tpl=&quot;t&quot;&gt;回表&lt;/strong&gt;找到对应的&lt;strong mpa-from-tpl=&quot;t&quot;&gt;主键&lt;/strong&gt;才能找到对应的&lt;strong mpa-from-tpl=&quot;t&quot;&gt;数据页&lt;/strong&gt;。算下来还不如直接走主键划算。于是最终选择了全表扫描。&lt;/p&gt;&lt;p&gt;当然上面只是举了个例子，实际上，mysql执行sql时，&lt;strong mpa-from-tpl=&quot;t&quot;&gt;不用索引或者用的索引不符合我们预期&lt;/strong&gt;这件事经常发生，索引失效的场景有很多，比如用了&lt;strong mpa-from-tpl=&quot;t&quot;&gt;不等号，隐式转换&lt;/strong&gt;等，这个相信大家背八股文的时候也背过不少了，我也不再赘述。&lt;/p&gt;&lt;p&gt;聊两个生产中容易遇到的问题吧。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;索引不符合预期&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;实际开发中有些情况比较特殊，比如有些数据库表一开始数据量小，索引少，执行sql时，确实使用了符合你预期的索引。但随时时间边长，开发的人变多了，数据量也变大了，甚至还可能会加入一些其他重复多余的索引，就有可能出现用着用着，用到了不符合你预期的其他索引了。从而导致查询突然变慢。&lt;/p&gt;&lt;p&gt;这种问题，也好解决，可以通过&lt;code&gt;force index&lt;/code&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;指定索引&lt;/strong&gt;。比如&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3hlL9hzg416jtwRJAlWhZEUZ5oM9tRRicibeHiauTg4PZTtflJnszUwepg/640&quot; title=&quot;force index指定索引&quot; data-ratio=&quot;0.14074074074074075&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;force index指定索引&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;通过&lt;code&gt;explain&lt;/code&gt;可以看出，加了force index之后，sql就选用了idx_age这个索引了。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;走了索引还是很慢&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;有些sql，用&lt;code&gt;explain&lt;/code&gt;命令看，明明是走索引的，但还是很慢。一般是两种情况：&lt;/p&gt;&lt;p&gt;第一种是索引区分度太低，比如网页全路径的url链接，这拿来做索引，一眼看过去全都是同一个域名，如果&lt;strong mpa-from-tpl=&quot;t&quot;&gt;前缀索引&lt;/strong&gt;的长度建得不够长，那这走索引跟走&lt;strong mpa-from-tpl=&quot;t&quot;&gt;全表扫描&lt;/strong&gt;似的，正确姿势是尽量让索引的&lt;strong mpa-from-tpl=&quot;t&quot;&gt;区分度&lt;/strong&gt;更高，比如域名去掉，只拿后面URI部分去做索引。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3EzMC7fictT9d9s3uBMja0BsPrueIuOLmeagruypRS6w9GduFwFhOPkA/640&quot; title=&quot;索引前缀区分度太低&quot; data-ratio=&quot;0.5&quot; data-w=&quot;800&quot;/&gt;&lt;figcaption&gt;索引前缀区分度太低&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;第二种是索引中匹配到的数据太大，这时候需要关注的是explain里的&lt;strong mpa-from-tpl=&quot;t&quot;&gt;rows&lt;/strong&gt;字段了。&lt;/p&gt;&lt;p&gt;它是用于&lt;strong mpa-from-tpl=&quot;t&quot;&gt;预估&lt;/strong&gt;这个查询语句需要查的行数的，它不一定完全准确，但可以体现个大概量级。&lt;/p&gt;&lt;p&gt;当它很大时，一般常见的是下面几种情况。&lt;/p&gt;&lt;ul mpa-from-tpl=&quot;t&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;如果这个字段具有&lt;strong mpa-from-tpl=&quot;t&quot;&gt;唯一&lt;/strong&gt;的属性，比如电话号码等，一般是不应该有大量重复的，那可能是你代码逻辑出现了&lt;strong mpa-from-tpl=&quot;t&quot;&gt;大量重复插入&lt;/strong&gt;的操作，你需要检查下代码逻辑，或者需要加个&lt;strong mpa-from-tpl=&quot;t&quot;&gt;唯一索引&lt;/strong&gt;限制下。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果这个字段下的数据就是会很大，是否需要全部拿？如果不需要，加个&lt;code&gt;limit&lt;/code&gt;限制下。如果确实要拿全部，那也不能一次性全拿，今天你数据量小，可能一次取一两万都没啥压力，万一哪天涨到了十万级别，那一次性取就有点吃不消了。你可能需要&lt;strong mpa-from-tpl=&quot;t&quot;&gt;分批次取&lt;/strong&gt;，具体操作是先用&lt;code&gt;order by id&lt;/code&gt;排序一下，拿到一批数据后取&lt;code&gt;最大id&lt;/code&gt;作为下次取数据的起始位置。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;连接数过小&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;索引相关的原因我们聊完了，我们来聊聊，&lt;strong mpa-from-tpl=&quot;t&quot;&gt;除了索引之外，还有哪些因素会限制我们的查询速度的。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们可以看到，mysql的server层里有个&lt;strong mpa-from-tpl=&quot;t&quot;&gt;连接管理&lt;/strong&gt;，它的作用是管理客户端和mysql之间的长连接。&lt;/p&gt;&lt;p&gt;正常情况下，客户端与server层如果只有&lt;strong mpa-from-tpl=&quot;t&quot;&gt;一条&lt;/strong&gt;连接，那么在执行sql查询之后，只能阻塞等待结果返回，如果有大量查询同时并发请求，那么&lt;strong mpa-from-tpl=&quot;t&quot;&gt;后面的请求都需要等待前面的请求执行完成&lt;/strong&gt;后，才能开始执行。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3c9WU7FyGe4jzn3caJWMOJPWOSPWGE6bp3TyV88ow9swXTlSFdCoczg/640&quot; data-w=&quot;1080&quot; title=&quot;连接过少会导致sql阻塞&quot;/&gt;&lt;figcaption&gt;连接过少会导致sql阻塞&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;因此很多时候我们的应用程序，比如go或java这些，&lt;strong mpa-from-tpl=&quot;t&quot;&gt;会打印出sql执行了几分钟的日志，但实际上你把这条语句单独拎出来执行，却又是毫秒级别的。&lt;/strong&gt;这都是因为这些sql语句在&lt;strong mpa-from-tpl=&quot;t&quot;&gt;等待&lt;/strong&gt;前面的sql执行完成。&lt;/p&gt;&lt;p&gt;怎么解决呢？&lt;/p&gt;&lt;p&gt;如果我们能&lt;strong mpa-from-tpl=&quot;t&quot;&gt;多建几条连接&lt;/strong&gt;，那么请求就可以并发执行，后面的连接就不用等那么久了。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43796296296296294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK36d77KUv53ibMkSkLg1b2El8qjdg0taeW2NiaLVbwvPbdNYuBzVyaIX6w/640&quot; data-w=&quot;1080&quot; title=&quot;增加连接可以加快执行sql&quot;/&gt;&lt;figcaption&gt;增加连接可以加快执行sql&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;而连接数过小的问题，&lt;strong mpa-from-tpl=&quot;t&quot;&gt;受数据库和客户端两侧同时限制&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;数据库连接数过小&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;Mysql的最大连接数默认是&lt;code&gt;100&lt;/code&gt;, 最大可以达到&lt;code&gt;16384&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;可以通过设置mysql的&lt;code&gt;max_connections&lt;/code&gt;参数，更改数据库的最大连接数。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; &lt;span&gt;set&lt;/span&gt; &lt;span&gt;global&lt;/span&gt; max_connections= &lt;span&gt;500&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Query OK, 0 rows affected (0.00 sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;mysql&amp;gt; &lt;span&gt;show&lt;/span&gt; &lt;span&gt;variables&lt;/span&gt; &lt;span&gt;like&lt;/span&gt; &lt;span&gt;&#x27;max_connections&#x27;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-----------------+-------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| Variable_name   | Value |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-----------------+-------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| max_connections | 500   |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-----------------+-------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的操作，就把最大连接数改成了500。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;应用侧连接数过小&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;数据库连接大小是调整过了，但貌似问题还是没有变化？还是有很多sql执行达到了几分钟，甚至超时？&lt;/p&gt;&lt;p&gt;那有可能是因为你应用侧（go，java写的应用，也就是mysql的客户端）的连接数也过小。&lt;/p&gt;&lt;p&gt;应用侧与mysql底层的连接，是&lt;strong mpa-from-tpl=&quot;t&quot;&gt;基于TCP协议的长链接&lt;/strong&gt;，而TCP协议，需要经过&lt;strong mpa-from-tpl=&quot;t&quot;&gt;三次握手和四次挥手&lt;/strong&gt;来实现建连和释放。如果我每次执行sql都重新建立一个新的连接的话，那就要不断握手和挥手，这很&lt;strong mpa-from-tpl=&quot;t&quot;&gt;耗时&lt;/strong&gt;。所以一般会建立一个&lt;strong mpa-from-tpl=&quot;t&quot;&gt;长连接池&lt;/strong&gt;，连接用完之后，塞到连接池里，下次要执行sql的时候，再从里面捞一条连接出来用，非常环保。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3HLmE3tERpYBAzmzgpy93vn33lxBycGUgg0mZsOe5nmZTV7tluToXCw/640&quot; data-w=&quot;1080&quot; title=&quot;连接池原理&quot;/&gt;&lt;figcaption&gt;连接池原理&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们一般写代码的时候，都会通过第三方的&lt;strong mpa-from-tpl=&quot;t&quot;&gt;orm库&lt;/strong&gt;来对数据库进行操作，而成熟的orm库，&lt;strong mpa-from-tpl=&quot;t&quot;&gt;百分之一千万都会有个连接池。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;而这个连接池，一般会有个大小。这个大小就控制了你的连接数最大值，如果说你的连接池太小，都还没有数据库的大，那调了数据库的最大连接数也没啥作用。&lt;/p&gt;&lt;p&gt;一般情况下，可以翻下你使用的orm库的文档，看下怎么设置这个连接池的大小，就几行代码的事情，改改就好。比如go语言里的&lt;code&gt;gorm&lt;/code&gt;里是这么设置的&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  db, err := gorm.Open(mysql.Open(conn), config)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    sqlDB, err := db.DB()&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;// SetMaxIdleConns 设置空闲连接池中连接的最大数量&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    sqlDB.SetMaxIdleConns(&lt;span&gt;200&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;// SetMaxOpenConns 设置打开数据库连接的最大数量&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    sqlDB.SetMaxOpenConns(&lt;span&gt;1000&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;buffer pool太小&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;连接数是上去了，速度也提升了。&lt;/p&gt;&lt;p&gt;曾经遇到过面试官会追问，&lt;strong mpa-from-tpl=&quot;t&quot;&gt;有没有其他办法可以让速度更快呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;那必须要眉头紧锁，假装思考，然后说：&lt;strong mpa-from-tpl=&quot;t&quot;&gt;有的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们在前面的数据库查询流程里，提到了进了innodb之后，会有一层内存buffer pool，用于将磁盘数据页加载到内存页中，只要查询到buffer pool里有，就可以直接返回，否则就要走磁盘IO，那就慢了。&lt;/p&gt;&lt;p&gt;也就是说，&lt;strong mpa-from-tpl=&quot;t&quot;&gt;如果我的buffer pool 越大，那我们能放的数据页就越多，相应的，sql查询时就更可能命中buffer pool，那查询速度自然就更快了。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;可以通过下面的命令查询到buffer pool的大小，单位是&lt;code&gt;Byte&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; &lt;span&gt;show&lt;/span&gt; &lt;span&gt;global&lt;/span&gt; &lt;span&gt;variables&lt;/span&gt; &lt;span&gt;like&lt;/span&gt; &lt;span&gt;&#x27;innodb_buffer_pool_size&#x27;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-------------------------+-----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| Variable_name           | Value     |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-------------------------+-----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| innodb_buffer_pool_size | 134217728 |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-------------------------+-----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.01&lt;/span&gt; sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是&lt;code&gt;128Mb&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;如果想要调大一点。可以执行&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; &lt;span&gt;set&lt;/span&gt; &lt;span&gt;global&lt;/span&gt; innodb_buffer_pool_size = &lt;span&gt;536870912&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Query OK, 0 rows affected (0.01 sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;mysql&amp;gt; &lt;span&gt;show&lt;/span&gt; &lt;span&gt;global&lt;/span&gt; &lt;span&gt;variables&lt;/span&gt; &lt;span&gt;like&lt;/span&gt; &lt;span&gt;&#x27;innodb_buffer_pool_size&#x27;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-------------------------+-----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| Variable_name           | Value     |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-------------------------+-----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;| innodb_buffer_pool_size | 536870912 |&lt;br mpa-from-tpl=&quot;t&quot;/&gt;+&lt;span&gt;-------------------------+-----------+&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;1 row in &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.01&lt;/span&gt; sec)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就把buffer pool增大到512Mb了。&lt;/p&gt;&lt;p&gt;但是吧，如果buffer pool大小正常，只是&lt;strong mpa-from-tpl=&quot;t&quot;&gt;别的原因&lt;/strong&gt;导致的查询变慢，那改buffer pool毫无意义。&lt;/p&gt;&lt;p&gt;但问题又来了。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;怎么知道buffer pool是不是太小了？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;这个我们可以看&lt;strong mpa-from-tpl=&quot;t&quot;&gt;buffer pool的缓存命中率&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK398LGqItZKn636v7utoQ0pHkksTErGQqzfoBIrwXxibLxSH27WNxRkEA/640&quot; title=&quot;查看buffer pool命中率&quot; data-ratio=&quot;0.5694444444444444&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;查看buffer pool命中率&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;通过 &lt;code&gt;show status like &#x27;Innodb_buffer_pool_%&#x27;;&lt;/code&gt;可以看到跟buffer pool有关的一些信息。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Innodb_buffer_pool_read_requests&lt;/code&gt;表示读请求的次数。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Innodb_buffer_pool_reads&lt;/code&gt; 表示从物理磁盘中读取数据的请求次数。&lt;/p&gt;&lt;p&gt;所以buffer pool的命中率就可以这样得到：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;buffer pool 命中率 = 1 - (Innodb_buffer_pool_reads/Innodb_buffer_pool_read_requests) * 100%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;比如我上面截图里的就是，1 - (405/2278354) = 99.98%。可以说命中率非常高了。&lt;/p&gt;&lt;p&gt;一般情况下&lt;strong mpa-from-tpl=&quot;t&quot;&gt;buffer pool命中率&lt;/strong&gt;都在&lt;code&gt;99%&lt;/code&gt;以上，如果低于这个值，才需要考虑加大innodb buffer pool的大小。&lt;/p&gt;&lt;p&gt;当然，还可以把这个命中率做到&lt;strong mpa-from-tpl=&quot;t&quot;&gt;监控&lt;/strong&gt;里，这样半夜sql变慢了，早上上班还能定位到原因，就很舒服。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;还有哪些骚操作？&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;前面提到的是在&lt;strong mpa-from-tpl=&quot;t&quot;&gt;存储引擎层&lt;/strong&gt;里加入了buffer pool用于缓存内存页，这样可以加速查询。&lt;/p&gt;&lt;p&gt;那同样的道理，&lt;strong mpa-from-tpl=&quot;t&quot;&gt;server层&lt;/strong&gt;也可以加个缓存，直接将第一次查询的结果缓存下来，这样&lt;strong mpa-from-tpl=&quot;t&quot;&gt;下次&lt;/strong&gt;查询就能立刻返回，听着挺美的。&lt;/p&gt;&lt;p&gt;按道理，如果命中缓存的话，确实是能为查询加速的。但这个功能限制很大，其中最大的问题是只要数据库表被更新过，表里面的&lt;strong mpa-from-tpl=&quot;t&quot;&gt;所有缓存都会失效&lt;/strong&gt;，数据表频繁的更新，就会带来频繁的缓存失效。所以这个功能只适合用于那些&lt;strong mpa-from-tpl=&quot;t&quot;&gt;不怎么更新的数据表。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;另外，这个功能在&lt;code&gt;8.0版本&lt;/code&gt;之后，就被&lt;strong mpa-from-tpl=&quot;t&quot;&gt;干掉&lt;/strong&gt;了。所以这功能用来聊聊天可以，没必要真的在生产中使用啊。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.762962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3X3iag9tDib7wYsNkuOov5bX3sQWjBpZu1wGvbhlIu8j9aGxsic7GE2iapw/640&quot; data-w=&quot;1080&quot; title=&quot;查询缓存被删除&quot;/&gt;&lt;figcaption&gt;查询缓存被删除&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;&lt;ul mpa-from-tpl=&quot;t&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据查询过慢一般是索引问题，可能是因为选错索引，也可能是因为查询的行数太多。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;客户端和数据库连接数过小，会限制sql的查询并发数，增大连接数可以提升速度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;innodb里会有一层内存buffer pool用于提升查询速度，命中率一般&amp;gt;99%，如果低于这个值，可以考虑增大buffer pool的大小，这样也可以提升速度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;查询缓存（query cache）确实能为查询提速，但一般不建议打开，因为限制比较大，并且8.0以后的Mysql里已经将这个功能干掉了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;最后&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;最近原创更文的阅读量稳步下跌，思前想后，夜里辗转反侧。&lt;/p&gt;&lt;p&gt;我有个不成熟的请求。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9937106918238994&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3d7A7sOTkHicgIBKubWIlvw32XxDvxajXTB5g59T1akeukibVJoAiclFFQ/640&quot; data-w=&quot;318&quot; title=&quot;&quot;/&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;能帮我点下右下角的&lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;点赞和在看&lt;/strong&gt;&lt;span&gt;吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;点击&lt;/strong&gt;下方名片，关注公众号:【小白debug】&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg5NDY2MDk4Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianpibeb1icaNfMQWI9DibKw3EcA2nvqMtwQ1GuX5bFuupzh6LaH1AkOZggtabj6t0mXvgIGibhwUYCz4w/0?wx_fmt=png&quot; data-nickname=&quot;小白debug&quot; data-alias=&quot;xiaobaidebug&quot; data-signature=&quot;答应我，关注之后，好好学技术，别只是收藏我的表情包。。&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;figure&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。&lt;/span&gt;&lt;span&gt;就&lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;超！开！心！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img align=&quot;center&quot; class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9249512670565302&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AnAgeMhDIianbibkNQ7b3dWIYFDypVnpK3mx3mvopcQE1KOgSCDoMyqOnQeTalVLFz0TNRH8mYiboSupu4cWMmlxQ/640&quot; data-w=&quot;1026&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;文章推荐：&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dfcb09f8d33bf78e4c8c74904b3a406f</guid>
<title>MySQL 的 timestamp 会存在时区问题？</title>
<link>https://toutiao.io/k/uxupyzj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;众所周知，MySQL 中有两个时间类型，timestamp 与 datetime，但当在网上搜索 timestamp 与 datetime 区别时，会发现网上有不少与时区有关的完全相反的结论，主要两种：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;timestamp 没有时区问题，而 datetime 有时区问题。原因是 timestamp 是以 UTC格式存储的，而 datetime 存储类似于时间字符串的形式；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;timestamp 也有时区问题。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;两种观点让人迷惑，那 timestamp 到底会不会有时区问题呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;基本概念&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;时区&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;由于地域的限制，人们发明了时区的概念，用来适应人们在时间感受上的差异。比如中国的时区是东 8 区，表示为 +8:00，或 GMT+8。而日本的时区是东 9 区，表示为 +9:00，或 GMT+9，当中国是早上 8 点时，日本是早上 9 点，即东 8 区的 8 点与东 9 区的 9 点，这两个时间是相等的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;另外时间还有如下两个概念：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;绝对时间&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：如 UNIX 时间戳，是 1970-01-01 00:00:00 开始到现在的秒数，如：1582416000，这种表示是绝对时间，不受时区影响，也叫纪元时 Epoch；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;本地时间&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：相对于某一时区的时间，是本地时间。比如东 8 区的 2020-02-23 08:00:00，是中国人的本地时间。而在此时，日本人的本地时间是 2020-02-23 09:00:00。所以本地时间都是与某一时区相关的，脱离时区看本地时间，是没有意义的，因为你并不知道这具体是指的什么时间点。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 Java 中，Date 对象是绝对时间，通过 SimpleDateForma t格式化出来的 &lt;strong&gt;yyyy-MM-dd HH:mm:ss&lt;/strong&gt; 形式的时间字符串，是本地时间。如果 SimpleDateFormat 没有调用 &lt;strong&gt;setTimeZone() &lt;/strong&gt;&lt;strong&gt;显示指定时区&lt;/strong&gt;，那么默认用的是 JVM 运行在的操作系统上的时区，我们开发机上的时区基本都是 GMT+8。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;timestamp 与 datetime 区别&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如下，我创建了一张表，里面 time_stamp 是 timestamp 类型，date_time 是 datetime类型，create_timestamp、create_datetime是timestamp与datetime类型，但是它们可以由数据库自动生成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`time_test`&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`time_stamp`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;timestamp&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`date_time`&lt;/span&gt; datetime,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`create_timestamp`&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;创建时间&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;`create_datetime`&lt;/span&gt; datetime &lt;span class=&quot;code-snippet__keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;创建时间&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  PRIMARY &lt;span class=&quot;code-snippet__keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;code-snippet__string&quot;&gt;`id`&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，将数据库时区设置为 +8:00，即中国的东 8 区。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7154471544715447&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIib44ia6iaTiaQ4agozKiaAVaPqZbh14HwsKKcJVxbibPQQfibv17olibQtoPpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;369&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;然后，如下图手动插入一个固定时间的数据，以及用 now() 函数插入当前时间。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24945770065075923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIQloooHXicDX5N4H7uyTyf9CgoXBuYbqQ6d87n5XH9bCDKN4yer13nyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;当插入完数据后，然后我们修改当前会话的时区为 +9:00，即日本的东 9 区，然后再次查看数据。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4386339381003202&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIjPzaVHvp27LdSUvJ0sAH6PnY9TOjVEpZp5b9nIrN5NFU7uPf8ibcz7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;937&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;如上，定义为 timestamp 类型的列 time_stamp、create_timestamp 不管是手动插入的，还是 now() 函数插入的，东9区都比东 8 区的时间大 1 个小时。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是正确的，说明 &lt;strong&gt;timestamp 类型是时区相关&lt;/strong&gt;的。然而，定义为 datetime 类型的date_time、create_datetime 字段，时间都没有变化，这说明 &lt;strong&gt;datetime 类型是时区无关&lt;/strong&gt;的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;结论&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;imestamp 在存储上是包含时区的，而 datetime 是不包含时区。说明网上的第一种说法是对的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;再看个例子&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;我们将东 8 区的的 2020-02-23 08:00:00 转换为 UNIX &lt;span&gt;时间戳&lt;/span&gt;（绝对时间），再插入数据库试试。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;如下，使用 Linux 的 date 命令转换时间串为 &lt;span&gt;UNIX 时间戳&lt;/span&gt;：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;date&quot;&lt;/span&gt; --date=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2020-02-23 08:00:00 +08:00&quot;&lt;/span&gt; +%s&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1582416000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后用 MySQL 的 from_unixtime() 函数，将 &lt;span/&gt;&lt;span&gt;UNIX&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;时间戳&lt;/span&gt;转换为 MySQL 时间类型来插入数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31995987963891676&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfITwx6sbEXtQrRUDeEwax96r6pPQGYUbyRXzs8cQB9xwfzRM4NvUsnTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;997&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;如上，查询出来的时间也是东 9 区的 9 点，时间也是正确的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;为什么网上又说 timestamp 类型存在时区问题？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我发现网上说 timestamp 有时区问题，都是应用端插入数据，然后到数据库中去看，结果发现时间不一样。因此我打算在 Java 中写个 Demo 试一下，看能不能重现这个问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，下面是 Java 中 Entity 的定义，与上面的 time_test 表对应。注意，这里面时间属性都是用 Date 类型定义的，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5923344947735192&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIUwo8aciazicDHKnXIQwFDDa4fedCibyZhqicBbqd4MxssBl0rfltpy8ePw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;287&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;然后，我写了两个接口&lt;/span&gt;&lt;span&gt; /insert &lt;/span&gt;&lt;span&gt;与 &lt;/span&gt;&lt;span&gt;/queryAll &lt;/span&gt;&lt;span&gt;来插入与查询数据，如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5553846153846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfItjQe6Z7L60uqjbrRhLpHnXw3TqEyGva9vAReiavtyOhNdRXIOEibnzUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;650&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我把数据库的时区&lt;/span&gt;&lt;span&gt;设置为 +09:00 时区，&lt;/span&gt;&lt;span&gt;即日本的东 9 区，如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36813186813186816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIcXnoxINlYn2rBhuqDKsWtSMctLPJJCDRI3pNLzopXOwicQkg6N70d2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;364&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;然后，调用 /insert 接口插入数据。注意，我接口传入的时间是东 8 区的 8 点，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.565922920892495&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfItqQ4dHZYgAIwEN9xhCnWWVpwr7nLaWvr31YRBlyr8olcTvHkthMtWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;插入完成后，去数据库中查询一把，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1554993678887484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIfd4tryrIeia6GXJsrrraCHfoQQWEBssYic7Z37tkiaaicdicltyu9fonReA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;791&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;可以看到，time_stamp 字段时间是 9  点。且我已将数据库时区设置为东 9 区，东 9 区的 9 点与东 8 区的 8 点，这两个时间实际是相等的，因此时间数据没错。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;用 /queryAll 接口将数据查询出来，如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45842450765864334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIicA9FVFVcyfz0gFXCgeNslH9j5d4ITQibAdDOsRLdArk8ibt03djbEvoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;timeStamp 属性是 1582416000000，这是毫秒级的时间缀，秒级则是 1582416000，对应是东 8 区的 2020-02-23 08:00:00，时间数据也没错。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后，我又将 MySQL 时区修改回 +8:00，并重启我们的 Java 应用，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3684210526315789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIE6vaS1U4r08ZgC5jMhEicib2QtaH11ZFRtplHnDAmGy1icQ19oMQcuVng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;380&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;再查询一下数据，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45842450765864334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIicA9FVFVcyfz0gFXCgeNslH9j5d4ITQibAdDOsRLdArk8ibt03djbEvoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;timeStamp 属性还是 1582416000000，时间没有变化，这也是正确的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;那为什么网上会说 timestamp 存在时区问题？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;经过一翻查看，我发现他们都提到了 JDBC 的 serverTimezone，会不会是这个配置错误导致的呢？就先试试吧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;如图，我把数据库时区修改回 +9:00 时区，然后故意把 &lt;span&gt;JDBC&lt;/span&gt; 的 URL 上的 serverTimezone 配置为与数据库不一致的 GMT+8 时区，然后重启 Java 应用，如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.415929203539823&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIBkg69w9sibQvyFGHaaULzkWjlcrCo8mxybbJZNWzW75v6mibF9Vj1ZtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;339&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;jdbc:&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;mysql:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:3306/testdb&lt;/span&gt;?serverTimezone=GMT%&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;B8&amp;amp;useUnicode=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&amp;amp;characterEncoding=utf8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;其中 GMT%2B8 就是 GMT+8，因为在 URL 上需要 urlencode，所以就变成了GMT%2B8。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;重新插入数据。注意，插入的时间还是东 8 区的 8 点，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4150453955901427&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIibbavmjSkBYcKY42CjlrnBsUB14q7yvSk9lzcicBGLgC2AEf4XWXt3WA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;771&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后，我再到数据库中查询一把，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1608300907911803&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfI0QDFnRialJ4V7MfUgFwjebc7rN1pZJHAIfpHKZnhUkSxG0QPSp7bvMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;771&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;time_stamp 时间竟然是 8 点！要知道我们虽然插入的是东 8 区的 8 点，但&lt;strong&gt;当前会话可是东 9 区&lt;/strong&gt;的，东 8 区的 8 点等于东 9 区的 9 点，所以正确显示应该为 9 点才对，&lt;strong&gt;时间差了 1 小时&lt;/strong&gt;！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;然后，我又调用 /queryAll 接口查询了一把，想看看 MyBatis 查询出来的时间数据对不对，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4766050054406964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIgwzIY5RUbXt83WfyBicUlEibN3daX01EJ76XNydicicdOjepGcunEXia65g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;919&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;可以看到 timeStamp 是 1582416000000，秒级是 1582416000，这个时间就是东 8 区的 8 点，东 9 区的 9 点啊！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;查询出来的时间竟然是正确的，为什么？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;serverTimezone 的本质&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了找出问题所在，我调试了一下 MySQL 的 JDBC 驱动代码，终于弄明白了原因。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主要可以看看如下这几点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1. &lt;span&gt;MySQL &lt;/span&gt;驱动创建连接后，会调用 &lt;/span&gt;&lt;span&gt;com.mysql.jdbc.ConnectionImpl#configureTimezone() 来配置此连接的时区。如果&lt;strong&gt;配置了 serverTimezone&lt;/strong&gt;，则会使用 serverTimezone 配置的时区。如果没有配置，会去取&lt;strong&gt;数据库中的 time_zone 变量&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这就是为什么我们没有配置 serverTimezone 变量时，结果也是正确的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;com.mysql.jdbc.ConnectionImpl&lt;span class=&quot;code-snippet__meta&quot;&gt;#configureTimezone()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;com.mysql.cj.protocol.a.NativeProtocol&lt;span class=&quot;code-snippet__meta&quot;&gt;#configureTimezone()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 调用 JDBC 的 setTimestamp() 方法时，实际调用的是 com.mysql.cj.jdbc.ClientPreparedStatement#setTimestamp()。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里面会根据 serverTimezone 指定的时区，将对应的 timestamp 对象转换为 serverTimezone 指定时区的本地时间字符串。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3. 执行 SQL 语句时，会执行 com.mysql.cj.jdbc.ClientPreparedStatement#execute()。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里面 sendPacket 变量保存着真实会发送到 MySQL 的 SQL 语句。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注意：看的是 8.0.11 版本 mysql-connector-java 驱动源码，不同版本代码会稍有差异。比如 5.2.16 版本驱动，jdbc url 上需要同时配置这两个配置 useTimezone=true&amp;amp;serverTimezone=GMT%2B8，且 setTimestamp() 对应的是 com.mysql.jdbc.PreparedStatement#setTimestampInternal方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;原理总结&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;MySQL &lt;/span&gt;驱动在发送 SQL 前，会将 JDBC 中的 Date 对象参数根据 serverTimeZone 配置的时区转化为日期字符串后，再发送 SQL 请求给 &lt;span&gt;MySQL&lt;/span&gt; server。同样，在 &lt;span&gt;MySQL&lt;/span&gt; Server 返回查询结果后，结果中的日期值也是日期字符串。&lt;span&gt;MySQL &lt;/span&gt;驱动会根据 serverTimeZone 配置的时区，将日期字符串转化为 Date 对象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，当 serverTimeZone 与数据库实际时区不一致时，会发生时区转换错误，导致时间偏差。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;比如 SQL 参数是一个 Date 对象，时间值是东 8 区的 2020-02-23 08:00:00。&lt;/span&gt;&lt;span&gt;注意它里面存储的可不是 2020-02-23 08:00:00 这个字符串，它是 Date 对象（绝对时间），只是我用文字表达出来是东8区的2020-02-23 08:00:00&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;然后，由于 serverTimeZone 配置的是东 8 区，MySQL 驱动会将这个 Date 对象转为 2020-02-23 08:00:00。&lt;/span&gt;&lt;span&gt;注意，这时已经是字符串了。&lt;/span&gt;&lt;span&gt;然后，再将 SQL 发送给 MySQL。&lt;/span&gt;&lt;span&gt;注意，这里的 SQL 里面已经将 Date 参数替换为 2020-02-23 08:00:00 了，因为 Date 对象本身是无法走网络的&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;然后，MySQL 数据库接收到这个时间字符串 2020-02-23 08:00:00 后。由于数据库时区配置是东 9 区，它会认为这个时间是东 9 区的，它会以东 9 区解析这个时间字符串。这时，数据库保存的时间是东 9 区的 2020-02-23 08:00:00，也就是东 8 区的 2020-02-23 07:00:00，保存的时间就偏差了 1 个小时。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么问题来了：查询结果里的时间为什么又对了呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为查询结果返回了东 9 区的时间字符串，而 Java 应用又将其理解为是东 8 区的时间，负负得正了！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;将 serverTi&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;mezone 与 MySQL 时区保持一致&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;那么，如果我们将 serverTimezone 配置改正确，即与数据库保持一致时，应该查询到的时间就会是错的，会少 1 个小时。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JDBC URL 中使用与数据库一样的东 9 区 GMT+9，如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;jdbc:&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;mysql:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:3306/testdb&lt;/span&gt;?serverTimezone=GMT%&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;B9&amp;amp;useUnicode=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&amp;amp;characterEncoding=utf8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;其中的 GMT%2B9，即是 GMT+9。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;然后，重启 Java 应用再查询一把看看，结果如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.440084835630965&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfITuM7icyfZYUpbL2Dvo7JRAmckiaeoewRL5nPzS7zYfSAPG0acLh8mD6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;943&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;返回的是毫秒级时间戳 1582412400000，秒级就是 1582412400。使用 Linux 的 date命令转换为时间字符串形式：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;date&quot;&lt;/span&gt; --date=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;@1582412400&quot;&lt;/span&gt; +&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%F %T %z&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2020&lt;/span&gt;-&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;-&lt;span class=&quot;code-snippet__number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;00&lt;/span&gt; +080&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;看到没，它是东 8 区的 7 点，刚好差了 1 个小时。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，使用 &lt;span&gt;MySQL &lt;/span&gt;timestamp 类型时，对于 Java 应用一定要&lt;strong&gt;保证 &lt;span&gt;J&lt;/span&gt;&lt;span&gt;DBC&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;URL &lt;/span&gt;中的 serverTimezone 与数据库中的时区配置是一&lt;/strong&gt;&lt;strong&gt;致的&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;另外一点是，当没有配置 serverTimezone 时，&lt;span&gt;MySQL &lt;/span&gt;驱动会自动读取 &lt;span&gt;MySQL&lt;/span&gt; Server中配置的时区，这里面也有坑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;MySQL 驱动自动读取数据库时区的坑&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;span&gt;MySQL &lt;/span&gt;安装好后默认时区是 SYSTEM。而 SYSTEM 指的是 system_time_zone 变量的时区，如下：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3854748603351955&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIkBOzkyHoK1myGAbjHWibQOHJNevIF6ABxYYLX953ibqx6XlibE0w51ftw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;358&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当 &lt;span&gt;MySQL &lt;/span&gt;驱动读到 time_zone 变量是 SYSTEM 时，会再去读取 system_time_zone 变量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而 system_time_zone 对于国内来说，默认是 CST。&lt;strong&gt;这是一个&lt;/strong&gt;&lt;strong&gt;混乱的时区&lt;/strong&gt;，是 4 个不同时区的缩写，如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2582781456953642&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIkhmdFmC1wIbiaJokzibQsLCQfeYtWrWfAg5trS5eCMs0IVpTcFRSfYqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;453&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;对于 Linux 或 &lt;span&gt;MySQL&lt;/span&gt;，会认为 CST 是中国标准时间 (+8:00)。但 Java 却认为 CST 是美国标准时间 (-6:00) &lt;/span&gt;&lt;span&gt;注：可能和 Java 运行在 Windows 中有关&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如下，Linux 中 CST 等于 +0800，即中国时区：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;date&quot;&lt;/span&gt; +&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%F %T %Z %z&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;-09-&lt;span class=&quot;code-snippet__number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;49&lt;/span&gt; CST +080&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;如下，Java 中 CST 等于 -06:00，美国时区：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12686567164179105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIcQe9jpfFM6kbA8v7lz2wCLxETTWK7eAXlCz9FQYdp1X444lDgx9ZZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;670&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，&lt;span&gt;MySQL &lt;/span&gt;驱动取到 CST 这个时区值时，它会以为这是 -6:00 时区，但 MySQL 却理解为 +8:00 时区。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此 &lt;strong&gt;MySQL 时区一定不要配置为 CST&lt;/strong&gt;，而要配置为具体的时区，如 +8:00。但如果MySQL 时区为 CST 且不可修改的情况下，一定要配置 JDBC 的 serverTimezone 为清晰的时区（如 GMT+8）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Entity 中日期属性是 String 呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们将 Entity 对象中的时间属性改为 String（&lt;strong&gt;不推荐&lt;/strong&gt;），如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6568265682656826&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfInTbK5G7s1sMIZgkl2mKyShp8T5c4WgicHMgrzq0dwWaaov3G5trZ22A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;271&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;然后也写两个接口，&lt;/span&gt;&lt;span&gt;/insert2&lt;/span&gt;&lt;span&gt; 与 &lt;/span&gt;&lt;span&gt;/queryAll2&lt;/span&gt;&lt;span&gt;，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5402476780185759&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIp0hEMGML2emNjDW9pXuHa3cZIEP2hy1MJMQqA4mLugeTWnd39K8uYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;646&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;然后插入数据。注意，这时我是直接将无时区的 8 点作为参数给到 SQL 的，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4072164948453608&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfI23613Yia9YbVKEhxTtBh6tHbdicicrocvAm3ibPaHt3Ia45bQE8MQcXbSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;然后再查询一把，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16141732283464566&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIxavNhmDlCELicO0Y9leYib46B5bDibKzElDv4VMicvAOI512Cnp1MJBKIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;762&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;如上所示，time_stamp 字段值是 8 点，但此时数据库时区是东 9 区，所以这是东 9 区的 8 点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;然后，将数据库与 JDBC 中 serverTimezone 都改为东 8 区，改完后重启Java应用。如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.727027027027027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfI6KjpXGbvdLbBj6PNMUQQyXstLewDeiagPa7T2RBERnye231LRG5IArQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;370&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;jdbc:&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;mysql:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:3306/testdb&lt;/span&gt;?serverTimezone=GMT%&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;B8&amp;amp;useUnicode=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&amp;amp;characterEncoding=utf8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;再次插入数据，参数还是无时区的 8 点，如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40258064516129033&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfITayoL8aNbteRHGp5ic2OG8Xyw9PcjIpxR5AYdiaN1hSu7LgYxq3pSuzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;775&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;再查询一把，如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15474642392717816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfI3ibYOfmgFc1ydPiba9dpNRBY2DiavAqEVLibdsxPxcF4TltetFvJaFmPgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;769&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;如上所示，time_stamp 字段值是 8 点，但现在数据库时间是东 8 区，所以这是东 8 区的 8 点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;然后，再将 JDBC URL 上的 serverTimezone 调整为东 9 区，然后重启 Java 应用。如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;jdbc:&lt;/span&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;mysql:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/localhost:3306/testdb&lt;/span&gt;?serverTimezone=GMT%&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;B9&amp;amp;useUnicode=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&amp;amp;characterEncoding=utf8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;现在 serverTimezone 与数据库中不一致，数据库是东 8 区，serverTimezone 是东 9 区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;再次插入无时区的 8 点，如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3646907216494845&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIwazq8ZjuAuwFuLRBKkVbmBXdaPJMyElsCT6wNJViaCqkZg08doWXE3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;然后再查询一把，结果如下：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1607843137254902&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HLLbwgojgOZ5yydb60ic0C85IgaMWNbfIozIk49nybeVeA9CN1WdG7YIvm5PG51owmELt7icdwvDrqVRDfz27TnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;765&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;time_stamp 字段值还是 8 点，数据库是东 8 区，所以这是东 8 区的 8 点。我们 serverTimezone 与数据库的时区不一致啊，但却没看到时间有偏差，这又是为什么？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;解释一下&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;前面说过了，对于 JDBC 中的 Date 对象，在发送给 &lt;span&gt;MySQL &lt;/span&gt;前，会先根据 serverTimezone 转换为相应时区的时间字符串，但现在 Entity 中时间属性是 String 类型，&lt;span&gt;MySQL &lt;/span&gt;驱动不会进行转换，所以不管 serverTimezone 怎么配置，对 String 类型的时间串都没影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这样的话，似乎 Java 中日期类型用时间字符串来存还好些，不容易出错。但请再认真考虑一下，调用方传了一个无时区的 8 点，&lt;strong&gt;数据库自作主张&lt;/strong&gt;，就将其认为是东 9 区的 8 点，但如果这个时间字符串实际是东 8 区的 8 点呢？这时如果保存到数据库中为东9区的8点，那数据就存错了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;如果目前 API 接口就传的是无时区的时间串，Entity 中就定义的 String，怎么解决呢？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;询问接口定义人员，这个接口的时间字符串指的是哪个时区的？比如是东 8 区的 2020-02-23 08:00:00；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;然后接口接收到时间后，要以东 8 区将时间字符串转换为 Date 对象，如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;SimpleDateFormat sdf = new SimpleDateFormat(&#x27;yyyy-MM-dd HH:mm:ss&#x27;);&lt;br/&gt;sdf.setTimeZone(TimeZone.getTimeZone(&quot;GMT+8&quot;));&lt;br/&gt;Date date = sdf.parse(&quot;2020-02-23 08:00:00&quot;);&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果 Entity 中时间属性定义的是 String，那么我们要再将 Date 对象以数据库的时区格式化为对应的时间字符串。比如，数据库时区是东 9 区，那么格式化后就是 2020-02-23 09:00:00，如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;SimpleDateFormat sdf = new SimpleDateFormat(&#x27;yyyy-MM-dd HH:mm:ss&#x27;);&lt;br/&gt;sdf.setTimeZone(TimeZone.getTimeZone(&quot;GMT+9&quot;));&lt;br/&gt;String dateStr = sdf.format(date);&lt;br/&gt;entity.setTimeStamp(dateStr);&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最后，将 Entity 保存到 &lt;span&gt;MySQL &lt;/span&gt;中的，就也会是东 9 区的 2020-02-23 09:00:00，结果正确。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，使用 String 类型来存储时间数据，要想将时间值保存正确超级麻烦，不建议在实际开发中这样使用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;最佳实践&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1. 大多数团队会规定 API 中传递时间要用 UNIX 时间缀。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为如果你传一个 2020-02-23 08:00:00 时间值，它到底是哪个时区的 8 点呢？对于 UNIX 时间戳，就不会有此问题，因为它是绝对时间。而如果某些特殊原因，一定要使用时间字符串，最好使用 ISO8601 规范那种带时区的时间串，比如 2020-02-23T08:00:00+08:00。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2. Mybatis 中 Entity 定义要与数据库定义一致。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据库中是 timestamp，那么 Entity 中要定义为 Date 对象，因为 &lt;span&gt;MySQL &lt;/span&gt;驱动在执行 SQL 时，会自动根据 serverTimezone 配置帮你转换为数据库时区的时间串。如果你自己来转换，你极有可能因为忘记调用 setTimeZone() 方法，而使用当前 Java 应用所在机器的默认时区，一旦 Java 应用所在机器的时区与数据库的时区不一致，就会出现时区问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3. JDBC 的 serverTimezone 参数要配置正确。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;当不配置时，&lt;span&gt;MySQL &lt;/span&gt;驱动会自动读取 MySQL Server 的时区，此时一定要将 &lt;span&gt;MySQL&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;erver&lt;/span&gt; 的时区指定为清晰的时区（如 +08:00），&lt;strong&gt;切勿使用 CST。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4. 如果数据库时区修改后，JDBC 的 serverTimezone 也要跟着修改，并重启 Java 应用。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;就算没有配置 serverTimezone，也需要重启。因为 &lt;span&gt;MySQL &lt;/span&gt;驱动初始化连接时，会将当前数据库时区缓存到一个 Java 变量中，不重启 Java 应用它不会变。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;数据库中用 timestamp 还是 int 来存储时间？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果用 int 型时间戳存储，不管数据库时区是啥都不影响，因为存储的是绝对时间。看起来完美解决了时区问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;但从某些角度看，这种方案只是把时区问题&lt;strong&gt;从数据库端推到应用端去了&lt;/strong&gt;，时区问题将出现在将时间字符串转换为时间缀的过程中。比如某程序员从  API 接口中拿到时间字符串后，没考虑时区，直接转为 UNIX 时间缀，就可能出现时区问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;因此，对于不带时区的时间串解析，一定要问清楚这是哪个时区的时间，并在代码中显式指定。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，用 int 存储时间还有如下 3 个不好的点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;开发人员看到这个字段后，无法一目了然的了解到这个时间缀大概是个什么时间，需要去转换一下，会很繁琐；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;像 update_time 这样的字段，数据库提供了DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP 的机制，这样在更新任何字段时，update_time 会自动更新。而如果使用 int存储，就需要程序员每次更新表时，重新 set 这个字段，容易遗忘；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;由于 int 只有 4 个字节，用它来存储时间，会在 2038 年后溢出，而对于 timestamp来说，&lt;span&gt;MySQL&lt;/span&gt; 将其底层存储统一修改为 8 个字节，相对来说还是比较容易的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然，也并不是建议不用 int，这是见仁见智的。不管用 timestamp 还是 int，都没有致命性问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;timestamp 本身是没有时区问题的，时区问题是由于 serverTimezone 配置错误、&lt;span&gt;MySQL &lt;/span&gt;使用 CST 这种混乱时区或 Entity 中将日期定义 String 类型导致的。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651518735&amp;amp;idx=1&amp;amp;sn=1e24fd1e6ea119c36f4cf173c3e0993f&amp;amp;chksm=bd259b708a521266715ce8545a7cfae1abbb56213f4b75058e39b44305579c0a19867b792047&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Java 日期处理易踩的十个坑&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java 日期处理易踩的十个坑&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651518728&amp;amp;idx=1&amp;amp;sn=8ca8814f27b3a264f68e8c15e7ddea69&amp;amp;chksm=bd259b778a52126119bc782e9bb430035d90032c230aab2bd55ced870e315e7404e643a9c6b4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;不指定时区会踩坑：MySQL Java 驱动升级遇到的 Bug 分析&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;不指定时区会踩坑：MySQL Java 驱动升级遇到的 Bug 分析&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651518728&amp;amp;idx=1&amp;amp;sn=8ca8814f27b3a264f68e8c15e7ddea69&amp;amp;chksm=bd259b778a52126119bc782e9bb430035d90032c230aab2bd55ced870e315e7404e643a9c6b4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;不指定时区会踩坑：MySQL Java 驱动升级遇到的 Bug 分析&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651488128&amp;amp;idx=1&amp;amp;sn=89dbe5a640db65a34e1d0a279af2d5af&amp;amp;chksm=bd2513ff8a529ae90558495f8849ff0dafd378671c124cbf36909e0ed559728ce41820299938&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Java 生鲜电商平台 - API 接口设计之 token、timestamp、sign 具体架构与实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java 生鲜电商平台 - API 接口设计之 token、timestamp、sign 具体架构与实现&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>be1378eabcaa888b18a40c9894cc014e</guid>
<title>也许是最客观、全面的比较 Rust 与 Go：都想把 Rust 也学一下</title>
<link>https://toutiao.io/k/2u61cx8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;最近一年，将 Rust 和 Go 进行比较的不少，但不少都不公正，带感情色彩。而这篇文章客观、全面的分析对比了 Rust 和 Go，让你具体项目时选择最合适的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 还是 Go，哪个更好？你应该为下一个项目选择哪种语言，为什么？两者在性能，简单性，安全性，功能，规模和并发性等方面如何比较？它们有什么共同点，并且在根本上有何不同？来自 &lt;span&gt;For the Go of Love&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 系列图书的作者，友好而公正的比较 Rust 和 Golang。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rust 和 Go 都很棒&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，非常重要的一点是，Go 和 Rust 都是绝对优秀的编程语言。它们是现代的，强大的，被广泛采用的，并且具有出色的性能。你可能已经阅读了一些文章和博客文章，目的是说服 Go 比 Rust 更好，反之亦然。但这确实没有道理；每种编程语言都代表一组权衡。每种语言针对不同的事物进行了优化，因此，应根据适合你的语言以及你要解决的问题来确定语言的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本文中，我将简要概述我认为 Go 是理想的选择，以及我认为 Rust 是更好的选择的地方。不过，理想情况下，你应该对这两种语言都有一定的了解。尽管它们的语法和样式差异很大，但 Rust 和 Go 都是用于构建软件的一流工具。话虽如此，让我们仔细看看这两种语言。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;相似之处&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 和 Go 有很多共同点，这是你经常听到他们一起被提及的原因之一。两种语言的共同目标是什么？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Rust 是一种专注于安全性和性能的低级静态类型多范式编程语言。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Gints Dreimanis&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go 是一种开放源代码编程语言，可轻松构建简单，可靠和高效的软件。—&lt;span&gt;Golang.org&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;内存安全&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 和 Rust 都属于优先考虑内存安全性的现代编程语言。数十年来，使用 C 和 C++ 等较旧的语言已经很清楚，导致错误和安全漏洞的最大原因之一是不安全或不正确地访问内存。Rust 和 Go 以不同的方式处理此问题，但是两者的目的都是要比其他有关内存管理的语言更聪明，更安全，并帮助你编写正确且性能良好的程序。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;快速，紧凑的可执行文件&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们都是编译语言，这意味着你的程序直接转换为可执行的机器代码，因此你可以将程序作为单个二进制文件进行部署；与 Python 和 Ruby 等解释型语言不同，你无需随程序一起分发解释器，大量库和依赖项，这是一大优势。与解释型语言相比，这也使 Rust 和 Go 程序都非常快。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通用语言&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 和 Go 都是功能强大，可扩展的通用编程语言，你可以使用它们来开发各种现代软件，从Web应用程序到分布式微服务，或者从嵌入式微控制器到移动应用程序。两者都具有出色的标准库和蓬勃发展的第三方生态系统，以及强大的商业支持和庞大的用户群。它们都已经存在了很多年，并将在未来几年继续被广泛使用。今天学习 Go 或 Rust 将是你的时间和精力的明智投资。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;务实（Pragmatic）的编程风格&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两种语言都不是纯函数式语言（例如 Scala 或 Elixir），也不是全面面向对象的语言（例如 Java 和 C#）。相反，尽管 Go 和 Rust 都具有与函数和面向对象的编程相关的功能，但它们都是务实的语言，旨在以最合适的方式解决问题，而不是强迫你采用特定的处理方式。（不过，如果你喜欢函数式编程风格，则在 Rust 中会发现更多的函数式特性，因为 Rust 的函数式功能比 Go 多得多。）&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我们可以讨论什么是“面向对象”语言，但是公平地说，Go 或 Rust 中都没有 C++，Java 或 C# 用户期望的面向对象编程风格。—Jack Mott&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;大规模发展&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 和 Go 都具有一些有用的特性，这使其适合于大型编程，包括大型团队，大型代码库，或两者兼而有之。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，尽管 C 程序员多年来一直在争论括号的位置，以及是否应使用制表符或空格使代码缩进，但 Rust 和 Go 都通过使用标准格式工具（gofmt 用于 Go  ，rustfmt 用于 Rust）完全消除了此类问题。它使用规范样式自动格式化你的代码。并不是说这种特殊的样式本身如此出色：而是 Rust 和 Go 程序员所欣赏的标准化。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;gofmt 的风格不是每个人的最爱，但 gofmt 是每个人的最爱。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Rob Pike&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两种语言得分很高的另一个领域是构建管道（build pipeline）。两者都具有出色的内置高性能标准构建和依赖管理工具。不再需要为复杂的第三方构建系统而费力，也不必每两年学习一次新的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在我早期的职业生涯中，具有 Java 和 Ruby 背景的 Go 和 Rust 代码构建工作似乎使我无法承受。当我在 Google 时，遇到用 Go 编写的服务感到很欣慰，因为我知道它易于构建和运行。Rust 的情况也是如此，尽管我只是在较小的规模上进行了研究。我希望无限可配置的构建系统的日子已经一去不复返了，所有语言都附带了它们自己专用的构建工具，这些工具可以直接使用。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Sam Rose&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;那有什么大惊小怪的？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑到所有这些，并且看到这两种语言的设计和功能如此强大，你可能想知道所有的圣战是关于什么的（我也是）。人们为什么对 “Go vs Rust” 如此大惊小怪，陷入愤怒的社交媒体争吵中，并写了很长的博客文章，内容涉及只有白痴才会使用Rust，或者 Go 不是真正的编程语言等等。它可能会让他们感觉更好，但对于试图决定要为项目使用哪种语言的人，或者应该学习哪种语言来促进编程事业的人，这并不能完全为你提供帮助。明智的人不会根据谁喊得最多而做出重要的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，让我们继续探讨一些成年人在某些方面可能会比较喜欢一种语言而不是另一种语言的问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;性能&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们已经说过，Go 和 Rust 都能生成非常快的程序，因为它们被编译为本机代码，而无需通过解释器或虚拟机。但是，Rust 的性能特别出色，它可与 C 和 C++ 相媲美（C/C++ 通常被认为是性能最高的编译语言），但与这些较旧的语言不同，它还提供了内存安全性和并发安全性，而执行速度却基本没有任何成本。Rust 还允许你创建复杂的抽象，而无需在运行时付出性能损失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比之下，尽管 Go 程序的性能也非常好，但是 Go 的主要目的是提高开发速度（包括编译），而不是提高执行速度。Go 编译器不会花费很多时间来尝试生成尽可能高效的机器代码；它更关心快速编译大量代码。因此，Rust 通常会在运行时基准测试中击败 Go。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 的运行时性能也始终如一且可预测，因为它不使用垃圾回收。Go 的垃圾收集器非常高效，并且经过优化，可以使其 STW 的时间尽可能短（并且在每个新的 Go 版本中都变得更短）。但是垃圾回收不可避免地在程序的行为方式中引入了一些不可预测性，这在某些应用程序（例如嵌入式系统）中可能是一个严重的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 Rust 旨在使程序员能够完全控制底层硬件，因此有可能将 Rust 程序优化为非常接近机器的最大理论性能。对于执行速度超过所有其他考虑因素的领域（例如游戏编程，操作系统内核，Web 浏览器组件和实时控制系统），Rust 使其成为绝佳的选择。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;简单&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果没有人能弄清楚如何使用它，那么编程语言有多快也没关系。Go 被故意认为是对 C++ 等语言不断增长的复杂性的一种反应。它的语法很少，关键字也不多，而且功能也很少。这意味着学习 Go 语言并不需要很长时间，你可以在其中编写有用的程序。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go 非常容易学习。我知道这是一个经常被吹捧的好处，但是我对能够这么快地提高生产力感到非常惊讶。多亏了语言，文档和工具，我实际上在两天之后就编写了有趣的，可提交的代码。— &lt;span&gt;Rust 程序员对 Go 的早期印象&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的关键词是简单。当然，简单（simple）与容易（easy）并不相同，但是简单的小型语言比复杂的大型语言更容易学习。要做的事情没有太多不同的方式，因此所有编写良好的 Go 代码看起来都一样。深入研究不熟悉的服务并了解其功能很容易。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;fmt.Println(&lt;span&gt;&quot;Gopher&#x27;s Diner Breakfast Menu&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; dish, price := &lt;span&gt;range&lt;/span&gt; menu {&lt;br/&gt;    fmt.Println(dish, price)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尽管核心语言很小，但 Go 的标准库功能非常强大。这意味着你的学习曲线还需要包括所需的标准库部分，而不仅仅是Go语法。另一方面，将功能从语言中移出并移入标准库意味着你现在可以专注于仅学习与你相关的库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 还被设计用于具有大型代码库和大型团队的大规模软件开发。在这种情况下，重要的是，新开发人员必须尽快上手。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用 Go，你可以快速完成工作。Go 是我使用过的最具生产力的语言之一。口头禅是：解决今天的实际问题。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Matthias Endler&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;特性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;与其他几种编程语言相比，Rust 支持更多的复杂特性，因此，你可以用它实现更多的功能。例如，它支持泛型。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Devathon&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 专门设计为包含许多强大而有用的功能，以帮助程序员以最少的代码完成最多的工作。例如，Rust 的 match 功能使你可以非常简洁地编写灵活的表达逻辑：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;is_prime&lt;/span&gt;&lt;/span&gt;(n: &lt;span&gt;u64&lt;/span&gt;) -&amp;gt; &lt;span&gt;bool&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;match&lt;/span&gt; n {&lt;br/&gt;        &lt;span&gt;0&lt;/span&gt;...&lt;span&gt;1&lt;/span&gt; =&amp;gt; &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;        _ =&amp;gt; !(&lt;span&gt;2&lt;/span&gt;..n).any(|d| n % d == &lt;span&gt;0&lt;/span&gt;),&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 Rust 的功能很多，这意味着有很多东西要学习，尤其是在一开始的时候。但这没关系：在 C++ 或 Java 中也有很多东西要学习，而且你没有获得 Rust 附带的高级功能，例如内存安全性。批评 Rust 是一种复杂的语言，没有抓住重点：它被设计成具有表现力，这意味着具有许多功能，并且在许多情况下，这是编程语言所需要的。当然，这是一条学习曲线，但是一旦你开始使用它，就可以了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Rust 为准备接受更复杂的语法和语义（可能会带来更高的可读性成本）以换取最大可能的性能的程序员，与 C++ 和 D 竞争思想共享。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Dave Cheney&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;并发&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数语言都对并发编程提供某种形式的支持（一次执行多项操作），但是 Go 是专为这项工作而设计的。Go 不使用操作系统线程，而是提供了一种轻量级的替代方案：goroutines。每个 goroutine 是一个独立执行的 Go 函数，Go 调度程序会将其映射到其控制下的 OS 线程之一。这意味着调度程序仅使用有限数量的 OS 线程即可非常有效地管理大量并发的goroutine。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，你可以在一个程序中运行数百万个并发 goroutine，而不会造成严重的性能问题。这使 Go 成为 Web 服务器和微服务等大规模并发应用程序的理想选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 还提供了快速，安全，有效的方式，goroutine 使用 channel 进行通信和共享数据。Go 的并发支持设计良好，使用起来很愉快。通常很难对并发程序进行推理，而构建可靠，正确的并发程序对任何语言都是一个挑战。但是，由于它是从一开始就内置在语言中的，而不是事后才想到的，Go 中的并发编程简单、合理、良好的集成进语言中。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go 使构建易于分解的应用程序变得非常容易，该应用程序在作为一组微服务部署时充分利用了并发性。Rust 也可以做这些事情，但是可以说有点困难。从某些方面来说，Rust 对防止与内存相关的安全漏洞的痴迷意味着程序员必须竭尽全力来执行使用其他语言（包括 Go）更简单的任务。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Sonya Koptyev&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比之下，Rust 中的并发是一个很新的特性，并且还有待稳定中，但是它的发展非常活跃，因此请留意这块。例如，Rust 的 &lt;span&gt;rayon&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt; 提供了一种非常优雅且轻巧的方法，可以将顺序计算转换为并行计算。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;具有轻量级 Goroutine 和 Channel 语法确实很棒。它确实显示出语法的威力，即如此小的细节使并发编程比其他语言感觉更好。— &lt;span&gt;Rust 程序员对 Go 的早期印象&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然在 Rust 中实现并发程序可能会不太直接，但仍然可以实现，并且这些程序可以利用 Rust 的安全保证。标准库的 Mutex 类就是一个很好的例子：在 Go 中，你可以忘记在访问某些东西之前先获得一个互斥锁，但是 Rust 不允许你这样做。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go 将并发作为第一类概念。这并不是说你无法在 Rust 中找到类似 Go 的并发方式，而是留给程序员练习。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Dave Cheney&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;安全性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们已经看到，Go 和 Rust 都以不同的方式来防止与内存管理有关的大量常见编程错误。但是，尤其是 Rust 会竭尽全力确保你不会做本不该做的不安全的事情。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Rust 的程序编辑器非常严格且学究（pedantic），它会检查你使用的每个变量以及引用的每个内存地址。它避免了可能的数据争用情况，并通知你有关未定义行为的信息。从根本上讲，并发和内存安全问题根本不可能进入Rust的安全子集。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Why Rust?&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这会使 Rust 中的编程成为几乎所有其他语言的不同体验，而且一开始可能具有挑战性。但对很多人来说，努力工作是值得的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;对我来说，Rust 的主要优点是感觉编译器成为我的靠山，不会让任何错误漏出（有时感觉像魔术）。&lt;em&gt;—Grzegorz Nosek&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;包括 Go 在内的许多语言都具有帮助程序员避免错误的功能，但是 Rust 将其提升到了一个新的高度，因此潜在的错误程序甚至无法编译。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用 Rust，库程序员可以使用很多工具来防止用户犯错误。Rust 使我们能够说我们拥有特定的数据。其他任何人都不可能拥有所有权，因此我们知道其他任何人都无法对其进行修改。我想不到曾经有过这么多工具来防止意外滥用。真是太好了。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Sam Rose&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于新手 Rust 程序员来说，“与借阅检查器（borrow checker）打架”是一个常见的症状，但是在大多数情况下，它发现的问题是代码中的真正错误（或至少是潜在的错误）。这可能会迫使你从根本上重新架构程序，以避免遇到这些问题。当正确性和可靠性是你的重中之重时，这是一件好事。语言不会改变编程方式的重点是什么？当你使用其他语言工作时，Rust 讲授的有关安全性的课程也会很有用。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果选择 Rust，通常需要该语言提供的保证：防止空指针和数据竞争的安全性，可预测的运行时行为以及对硬件的完全控制。如果你不需要这些功能，Rust 对于你的下一个项目可能不是一个好的选择。这是因为这些保证要付出一定的代价：学习坡度，时间问题。你将需要学习不良习惯并学习新概念。很有可能，刚开始时，你将与借阅检查器进行很多斗争。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Matthias Endler&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你发现 Rust 的编程模型的挑战性可能取决于你以前在其他语言中所拥有的经验。Python 或 Ruby 程序员可能会发现它有限制；而其他人可能很高兴。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果你是一位花了数周时间寻找这些语言的内存安全性错误的 C 或 C++ 程序员，那么你将非常感谢 Rust。“对抗借阅检查器”变为“编译器可以检测到吗？凉！”—Grzegorz Nosek&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;规模&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;当今的服务器程序包含数千万行代码，由成百上千的程序员进行处理，并且每天都会更新。Go 的设计和开发旨在提高在这种环境下的工作效率。Go 的设计考虑因素包括严格的依赖关系管理，随着系统增长的软件体系结构的适应性以及跨组件边界的鲁棒性。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Rob Pike&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你自己或以小组形式处理问题时，选择简单语言还是丰富语言是你的偏爱。但是随着软件变得越来越大，越来越复杂，以及团队越来越大，这种差异真正开始显现出来。对于大型应用程序和分布式系统，执行速度不如开发速度重要：像 Go 这样的故意最小化的语言减少了新开发人员的启动时间，并使他们更容易使用大型代码库。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用 Go，初级开发人员更容易提高工作效率，而中级开发人员更难引入脆弱的抽象，而抽象将导致问题。由于这些原因，Rust 在企业软件开发方面不如 Go 引人注目。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Loris Cro&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当涉及到大型软件开发时，清晰胜于灵活。Go 的限制性实际上使它比 Rust 等更复杂、功能更强大的语言更适合企业和大型组织。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;差异&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尽管 Rust 和 Go 都是流行的，现代的，广泛使用的语言，但从故意针对完全不同的用例的意义上来说，它们并不是真正的竞争对手。Go 的整个编程方法与 Rust 的方法完全不同，每种语言都适合某些人，同时又会激怒其他人。绝对很好，而且如果 Rust 和 Go 都以或多或少相同的方式或多或少地完成了相同的事情，那么我们实际上就不需要两种不同的语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，通过发现它们采取截然不同的方法的问题，我们是否能够了解 Rust 和 Go 的各自性质？让我们找出答案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;垃圾回收&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“进行垃圾收集或不进行垃圾收集”是没有正确答案的问题之一。垃圾回收和自动内存管理通常使开发可靠，高效的程序变得快速简便，对于某些人来说，这是必不可少的。但是其他人说，垃圾回收的性能开销和停顿，使程序在运行时无法正常运行，并引入了无法接受的延迟。争论不休。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go 与 Rust 完全不同。尽管两者都可以模糊地描述为系统语言或 C 语言的替代品，但它们具有不同的目标和应用，语言设计风格以及优先级。垃圾收集确实是一个巨大的区别。在 Go 中使用 GC 可使该语言变得更加简单和小巧。&lt;/p&gt;&lt;p&gt;在 Rust 中不使用 GC 可以使它真正更快（特别是如果你需要保证的等待时间，而不仅仅是高吞吐量），并启用 Go 中无法实现的特性和编程模式（或者至少在不牺牲性能的情况下）。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;PingCAP&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;更接近金属（Close to the metal）&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算机编程的历史一直是一个越来越复杂的抽象的故事，它使程序员能够解决问题而不必担心底层机器的实际工作原理。这使程序更易于编写，并且可能更具移植性。但是对于许多程序而言，访问硬件以及精确控制程序执行方式更为重要。Rust 的目标是让程序员拥有更多的控制权，使其“更接近金属”，但是 Go 提取了体系结构的详细信息，以使程序员更加接近问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;两种语言有不同的使用范围。Golang 对于编写微服务和典型的 “DevOps” 任务很有用，但它不是系统编程语言。对于并发性，安全性和/或性能很重要的任务，Rust 更强。但是它的学习曲线比 Go 更陡。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Matthias Endler&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Go 发展更快&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在其他地方写过，对于大多数程序而言，&lt;span&gt;性能并不如可读性重要&lt;/span&gt;&lt;sup&gt;[21]&lt;/sup&gt;。但是，当性能确实很重要时，它真的很重要。Rust 进行了许多设计折衷，以实现最佳的执行速度。相比之下，Go 更加关注简单性，并且愿意为此牺牲一些（运行时）性能。但是 Go 的构建速度是无与伦比的，这对于大型代码库而言非常重要。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Rust 比 Go 快。在上述基准测试中，Rust 速度更快，在某些情况下还快一个数量级。但是在选择使用 Rust 编写所有内容之前，请考虑一下 Go 在许多基准测试中并没有落后很多，并且它仍然比 Java，C#，JavaScript，Python 等同类工具快得多。&lt;/p&gt;&lt;p&gt;如果你需要一流的性能，那么你可以选择这两种语言中的任一种。如果你要构建一个处理高负载的 Web 服务，并且希望能够在垂直和水平方向上进行伸缩，则两种语言都将非常适合你。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Andrew Lader&lt;/span&gt;&lt;sup&gt;[22]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;正确性&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面，如果程序没有正常运行，则可以任意快。大多数代码不是长期编写的，但通常令人惊讶的是某些程序可以在生产环境中运行多长时间：在某些情况下需要数十年。在这种情况下，需要花一些额外的时间来开发程序，以确保程序正确，可靠并且将来不需要进行大量维护。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我的看法：明天将要发布的代码选择 Go，在未来五年内保持不变的代码选择 Rust。&lt;em&gt;—Grzegorz Nosek&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尽管 Go 和 Rust 对于任何严肃的项目都是不错的选择，但最好使自己对每种语言及其特征都尽可能了解。最终，其他人的想法无关紧要：只有你可以决定哪种对你和你的团队是合适的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果你想加快开发速度，也许是因为你要编写许多不同的服务，或者你有庞大的开发团队，那么 Go 是你选择的语言。Go 为你提供了一流的并发性，并且不容许不安全的内存访问（Rust 也不容忍），但不会强迫你管理每个最后的细节。Go 是快速而强大的工具，但是它避免了使开发人员陷入困境，而专注于简单性和统一性。另一方面，如果需要拧紧块性能，那么 Rust 应该是你的选择。&lt;em&gt;—&lt;/em&gt;&lt;span&gt;Andrew Lader&lt;/span&gt;&lt;sup&gt;[23]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结论&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我希望本文使你相信，Rust 和 Go 都值得你认真考虑。如果可能的话，你应该力求获得至少两种语言的某种程度的经验，因为它们对你在任何技术职业中都是非常有用的，即使你喜欢将编程作为业余爱好也是如此。如果你只有时间投入精力来学习一种语言，那么请在将 Go 和 Rust 都用于各种大小不同的程序之前，不要做出最终决定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且，对编程语言的了解实际上只是成为一名成功的软件工程师的一小部分。到目前为止，您将需要的最重要的技能是设计，工程，体系结构，沟通和协作。如果您擅长这些，那么无论您选择哪种语言，您都将是一名出色的软件工程师。学习愉快！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原文链接：https://bitfieldconsulting.com/golang/rust-vs-go&lt;/p&gt;&lt;p&gt;原文作者：John Arundel&lt;/p&gt;&lt;p&gt;编译：polarisxu&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[1]&lt;/span&gt;&lt;p&gt;For the Go of Love: &lt;em&gt;https://bitfieldconsulting.com/books/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[2]&lt;/span&gt;&lt;p&gt;Gints Dreimanis: &lt;em&gt;https://serokell.io/blog/rust-guide&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[3]&lt;/span&gt;&lt;p&gt;Golang.org: &lt;em&gt;https://golang.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[4]&lt;/span&gt;&lt;p&gt;Rob Pike: &lt;em&gt;https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;t=8m43s&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[5]&lt;/span&gt;&lt;p&gt;Sam Rose: &lt;em&gt;https://samwho.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[6]&lt;/span&gt;&lt;p&gt;Rust 程序员对 Go 的早期印象: &lt;em&gt;https://medium.com/better-programming/early-impressions-of-go-from-a-rust-programmer-f4fd1074c410&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[7]&lt;/span&gt;&lt;p&gt;Matthias Endler: &lt;em&gt;https://endler.dev/2017/go-vs-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[8]&lt;/span&gt;&lt;p&gt;Devathon: &lt;em&gt;https://devathon.com/blog/rust-vs-go-which-programming-language-to-choose/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[9]&lt;/span&gt;&lt;p&gt;Dave Cheney: &lt;em&gt;https://dave.cheney.net/2015/07/02/why-go-and-rust-are-not-competitors&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[10]&lt;/span&gt;&lt;p&gt;Sonya Koptyev: &lt;em&gt;https://sdtimes.com/softwaredev/the-developers-dilemma-choosing-between-go-and-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[11]&lt;/span&gt;&lt;p&gt;rayon: &lt;em&gt;https://github.com/rayon-rs/rayon&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[12]&lt;/span&gt;&lt;p&gt;Rust 程序员对 Go 的早期印象: &lt;em&gt;https://medium.com/better-programming/early-impressions-of-go-from-a-rust-programmer-f4fd1074c410&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[13]&lt;/span&gt;&lt;p&gt;Dave Cheney: &lt;em&gt;https://dave.cheney.net/2015/07/02/why-go-and-rust-are-not-competitors&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[14]&lt;/span&gt;&lt;p&gt;Why Rust?: &lt;em&gt;https://bitbucket.org/blog/why-rust&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[15]&lt;/span&gt;&lt;p&gt;Sam Rose: &lt;em&gt;https://samwho.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[16]&lt;/span&gt;&lt;p&gt;Matthias Endler: &lt;em&gt;https://endler.dev/2017/go-vs-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[17]&lt;/span&gt;&lt;p&gt;Rob Pike: &lt;em&gt;https://talks.golang.org/2012/splash.article&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[18]&lt;/span&gt;&lt;p&gt;Loris Cro: &lt;em&gt;https://kristoff.it/blog/why-go-and-not-rust&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[19]&lt;/span&gt;&lt;p&gt;PingCAP: &lt;em&gt;https://medium.com/better-programming/early-impressions-of-go-from-a-rust-programmer-f4fd1074c410&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[20]&lt;/span&gt;&lt;p&gt;Matthias Endler: &lt;em&gt;https://endler.dev/2017/go-vs-rust/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[21]&lt;/span&gt;&lt;p&gt;性能并不如可读性重要: &lt;em&gt;https://bitfieldconsulting.com/golang/slower&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[22]&lt;/span&gt;&lt;p&gt;Andrew Lader: &lt;em&gt;https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; cambria=&quot;&quot; cochin=&quot;&quot; georgia=&quot;&quot; times=&quot;&quot; new=&quot;&quot; roman=&quot;&quot; serif=&quot;&quot;&gt;[23]&lt;/span&gt;&lt;p&gt;Andrew Lader: &lt;em&gt;https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>444f73a3f1a8f772722bb23b4e784aaf</guid>
<title>提高「程序员」的思维方式</title>
<link>https://toutiao.io/k/ymhzlck</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;strong&gt; 大家好，我是Tom哥。&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;人和动物的最大区别就是，人具有思维能力，能将大脑里的东西实现出来。而动物则更多停留在模仿阶段，如：鹦鹉学舌。当然，这也是一种进化能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;这里着重提到了思维能力，人与人的思维能力也是有差异的。比如：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一线程序员关心的这个项目涉及到多少个接口? 接口的代码要如何实现？其他哪些接口可能会受到影响，需要重点 review&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;团队 TL 则关心的这个项目的复杂度有多少？预计多少工作量？能不能按时开发完成？整个系统的性能、稳定性、扩展性等方面有什么帮助？会不会增加整个系统的维护成本？如果挂了，对业务有什么影响。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;部门老板则关心这个项目要不要做？有没有什么风险？对业务和技术团队的价值在哪里？能带来多少用户量、GMV？优先级高不高？如何让业务方满意？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;我们可以发现基层、中层、高层，不同的职级的人关心的内容也不太一样，屁股决定脑袋。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不管是处于哪一个层级，都是做工作。那么在面对一件任务，你是如何开展工作的？我理解大概分为三个阶段：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一阶段：靠「直觉」，不管是男人女人，当面对一件事情大脑一般都会有一个初步解决方案，区别在于这个方案的完备性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二阶段：靠「项目经验」去解决问题。这个适合有一定工作年限的同学&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三阶段：靠「思维能力」去解决。我们不可能所有的事情都经历过，当面对一个陌生的、棘手的任务，我们希望有一定的方法论、工具包可以指引我们， 使我们可以有条不紊的开展工作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那么如何提高我们的思维能力？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1、无规矩不成方圆，首先要有流程意识&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;兵法有云，“兵马未动粮草先行”。要想提高思维能力，首先要有「流程意识」，无规矩不成方圆。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们相信，这个世间任何事情都是有规律可循的。我们要善于思考、善于发现，总结规律，抽象成流程。其中「使用流程」是基础，「优化流程」是进阶，「制定流程」则是巅峰。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5497702909647779&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdnlQMWBqzC9jsydzfiaUUgyr1ibschA4qgzydFu9wPq8LOHYZA0ib50WF7YnY4h7TQBtpf73iaYnympw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为研发人员，我们就以软件项目开发为例，从客户问题收集、市场调研，产品同学分析整理成需求文档，业务和技术侧的可行性分析，到开发编码，系统发布上线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;面对这多的环节，我们在设计流程时要注意哪些问题呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先，我们要确认流程包含的所有节点。并区分出核心节点和非核心节点，每个节点在流程中的作用、关键物料输出，以及是否可以缺失等等。核心节点，要投入更多的精力把控。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其次，将这些节点串联起来，就需要了解他们的上下游关系，这个顺序还是很重要的，乱了辈分很容易影响整个流程的交付。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后，流程的细化补充。可以叫上相关同学，大家一起头脑风暴，看看是否有一些异常的场景需要补充进来，将整个流程更加完善。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流程模板的制定非常考验大家的思维能力，尤其是一个全新的陌生领域。刚开始，有点盲人摸象的感觉，我们不清楚边界在哪里？哪些是重要的？哪些非核心的？不过没关系，我们可以尝试着按照自己的理解，先动起来。随着对业务逐渐熟悉，再对流程的各个细节优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构是一个逐步衍化的过程，流程模板也是一样的道理，没有什么生来就是完美的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2、流程是模板，说话靠数据&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“一图胜千言” ，除了图之前，人类对数字也是很敏感的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如你要买房，然后你去问中介，这套房子什么价？如果对方很高，那估计你要打人，不管有多高，你肯定是想听到一个具体的数字， 600万、1000万.....&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;知不知道是一回事，买不买的起是另一回事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据是理性的，具有很强的客观性，2大于1 本身就无法挑战。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们日常的工作汇报中，不论是 PPT 还是邮件，能用数字量化的尽量用数据来表达，比起苍白的语言，数据清爽又让人无法反驳，我们要学会用数据武装自己，增强自己的说服力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3、定期复盘，促使自己螺旋式成长&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;论语有一句话  “吾日三省吾身”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工作中你是否经常自我反省？一个项目结束，你是否会组织个复盘会，盘点哪些做的好的，哪些有待改进的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;复盘有点类似上面的流程事件的回顾，我们对各个环节的成果、失败背后的原因深度分析总结。抽取其中有价值的经验和方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;复盘一定要确保相关的项目人员都要参与进来，保证信息能完整的还原，容易得到一个更佳的复盘效果。我们可以采用时间为主线，梳理各个时间点的重要事件，并对事件满意度评价，促使后续能做的更好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有小伙伴会问了，复盘的重要性我也知道，但是我不知道怎么复盘？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;教给你一招，你可以采用  “5W根因分析法”，每一个环节每一个事件，反问自己是否取得了最好的结果？如果没有，那有哪些可以改进的点？有哪些优化方案？哪些方案是通用性经验？哪些方案是针对具体项目的经验？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要把复盘当成是一种追责，它能帮我们认清自己的不足，短暂的痛苦是为了以后更大的成长。“如果你感到痛苦，那是因为你在成长！”&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于我：Tom哥，前阿里P7技术专家，offer收割机，参加多次淘宝双11大促活动。欢迎关注，我会持续输出更多经典原创文章，为你晋级大厂助力&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;微信8.0将好友放开到了一万，小伙伴可以加我大号了，先到先得，再满就真没了。&lt;/strong&gt;&lt;strong&gt;扫描下方二维码即可加我微信啦，&lt;code&gt;2022，抱团取暖，一起牛逼。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot; mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;section mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.092130518234165&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwdaSEqIP60fNXXqd7e15vycGo75wsfR2yTDKxOpJaKG0BKzFod8CQxLtibu2vMp1GKBMDJRbk3rpLw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;521&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/h2&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>db4c80678eb464788810f4ecf4d543d1</guid>
<title>Spring Boot + Netty + WebSocket 实现消息推送</title>
<link>https://toutiao.io/k/cq3qyuh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3Njc0MzY4Mg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/d7GGBYRy9LC0SoVXq0yEURa15c2PIk6xqcKDrEuXgVa6Uh6XNjWicHiakuPvr8vSQrQVDv6YgvbNoq27JiaSdEI1A/0?wx_fmt=png&quot; data-nickname=&quot;架构鱼&quot; data-alias=&quot;BATJHR&quot; data-signature=&quot;架构鱼，专注于Java后端开发。涉及「Dubbo」「SpringCloud」「Java 并发」「RocketMQ」「Sharding-JDBC」「MyCAT」「Elastic-Job」「SkyWalking」「Spring」等等知识分享。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;↓↓↓&lt;/span&gt;（全网最新最稳定）&lt;span&gt;↓&lt;/span&gt;↓&lt;span&gt;↓&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;www.ajihuo.com&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;(上网址输入到浏览器即可下载最新IDE激活码)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p placeholder=&quot;1&quot;&gt;-&lt;/p&gt;&lt;p&gt;&lt;span&gt;正文&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;1&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于Netty&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Netty 是一个利用 Java 的高级网络的能力，隐藏其背后的复杂性而提供一个易于使用的 API 的客户端/服务器框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;2&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Maven依赖&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;!-- https://mvnrepository.com/artifact/io.netty/netty-all --&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.netty&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;netty-all&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.1.36.Final&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;3&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SpringBootApplication&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启动器中需要new一个NettyServer，并显式调用启动netty。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@SpringBootApplication&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;SpringCloudStudyDemoApplication&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;String[] args&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  SpringApplication.run(SpringCloudStudyDemoApplication.class,args);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;try&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   &lt;span&gt;new&lt;/span&gt; NettyServer(&lt;span&gt;12345&lt;/span&gt;).start();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;https://blog.csdn.net/moshowgame&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;http://127.0.0.1:6688/netty-websocket/index&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  }&lt;span&gt;catch&lt;/span&gt;(Exception e) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;NettyServerError:&quot;&lt;/span&gt;+e.getMessage());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  }&lt;br mpa-from-tpl=&quot;t&quot;/&gt; }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;4&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;NettyServer&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启动的NettyServer，这里进行配置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br mpa-from-tpl=&quot;t&quot;/&gt; * NettyServer Netty服务器配置&lt;br mpa-from-tpl=&quot;t&quot;/&gt; */&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;NettyServer&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; final &lt;span&gt;int&lt;/span&gt; port;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;NettyServer&lt;/span&gt;(&lt;span&gt;&lt;span&gt;int&lt;/span&gt; port&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;this&lt;/span&gt;.port = port;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;(&lt;span/&gt;) throws Exception &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        EventLoopGroup bossGroup = &lt;span&gt;new&lt;/span&gt; NioEventLoopGroup();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        EventLoopGroup &lt;span&gt;group&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; NioEventLoopGroup();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            ServerBootstrap sb = &lt;span&gt;new&lt;/span&gt; ServerBootstrap();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            sb.option(ChannelOption.SO_BACKLOG, &lt;span&gt;1024&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            sb.&lt;span&gt;group&lt;/span&gt;(&lt;span&gt;group&lt;/span&gt;, bossGroup) &lt;span&gt;// 绑定线程池&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .channel(NioServerSocketChannel.class) &lt;span&gt;// 指定使用的channel&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .localAddress(&lt;span&gt;this&lt;/span&gt;.port)&lt;span&gt;// 绑定监听端口&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .childHandler(&lt;span&gt;new&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;() { &lt;span&gt;// 绑定客户端连接时候触发操作&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        @&lt;span&gt;Override&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;initChannel&lt;/span&gt;(&lt;span&gt;SocketChannel ch&lt;/span&gt;) throws Exception &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;收到新连接&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;//websocket协议本身是基于http协议的，所以这边也要使用http解编码器&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; HttpServerCodec());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;//以块的方式来写的处理器&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; ChunkedWriteHandler());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; HttpObjectAggregator(&lt;span&gt;8192&lt;/span&gt;));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; WebSocketServerProtocolHandler(&lt;span&gt;&quot;/ws&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;65536&lt;/span&gt; * &lt;span&gt;10&lt;/span&gt;));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; MyWebSocketHandler());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    });&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            ChannelFuture cf = sb.bind().sync(); &lt;span&gt;// 服务器异步创建绑定&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            System.&lt;span&gt;out&lt;/span&gt;.println(NettyServer.class + &lt;span&gt;&quot; 启动正在监听：&quot;&lt;/span&gt; + cf.channel().localAddress());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            cf.channel().closeFuture().sync(); &lt;span&gt;// 关闭服务器通道&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;group&lt;/span&gt;.shutdownGracefully().sync(); &lt;span&gt;// 释放线程池资源&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            bossGroup.shutdownGracefully().sync();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;5&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;MyChannelHandlerPool&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通道组池，管理所有websocket连接&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br mpa-from-tpl=&quot;t&quot;/&gt; * MyChannelHandlerPool&lt;br mpa-from-tpl=&quot;t&quot;/&gt; * 通道组池，管理所有websocket连接&lt;br mpa-from-tpl=&quot;t&quot;/&gt; */&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyChannelHandlerPool&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; MyChannelHandlerPool(){}&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ChannelGroup channelGroup = &lt;span&gt;new&lt;/span&gt; DefaultChannelGroup(GlobalEventExecutor.INSTANCE);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;6&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;MyWebSocketHandler&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;处理ws一下几种情况：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;channelActive与客户端建立连接&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;channelInactive与客户端断开连接&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;channelRead0客户端发送消息处理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br mpa-from-tpl=&quot;t&quot;/&gt; * NettyServer Netty服务器配置&lt;br mpa-from-tpl=&quot;t&quot;/&gt; */&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;NettyServer&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; final &lt;span&gt;int&lt;/span&gt; port;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;NettyServer&lt;/span&gt;(&lt;span&gt;&lt;span&gt;int&lt;/span&gt; port&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;this&lt;/span&gt;.port = port;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;start&lt;/span&gt;(&lt;span/&gt;) throws Exception &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        EventLoopGroup bossGroup = &lt;span&gt;new&lt;/span&gt; NioEventLoopGroup();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        EventLoopGroup &lt;span&gt;group&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; NioEventLoopGroup();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            ServerBootstrap sb = &lt;span&gt;new&lt;/span&gt; ServerBootstrap();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            sb.option(ChannelOption.SO_BACKLOG, &lt;span&gt;1024&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            sb.&lt;span&gt;group&lt;/span&gt;(&lt;span&gt;group&lt;/span&gt;, bossGroup) &lt;span&gt;// 绑定线程池&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .channel(NioServerSocketChannel.class) &lt;span&gt;// 指定使用的channel&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .localAddress(&lt;span&gt;this&lt;/span&gt;.port)&lt;span&gt;// 绑定监听端口&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .childHandler(&lt;span&gt;new&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;() { &lt;span&gt;// 绑定客户端连接时候触发操作&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        @&lt;span&gt;Override&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;initChannel&lt;/span&gt;(&lt;span&gt;SocketChannel ch&lt;/span&gt;) throws Exception &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;收到新连接&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;//websocket协议本身是基于http协议的，所以这边也要使用http解编码器&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; HttpServerCodec());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;//以块的方式来写的处理器&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; ChunkedWriteHandler());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; HttpObjectAggregator(&lt;span&gt;8192&lt;/span&gt;));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; WebSocketServerProtocolHandler(&lt;span&gt;&quot;/ws&quot;&lt;/span&gt;, &lt;span&gt;&quot;WebSocket&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;65536&lt;/span&gt; * &lt;span&gt;10&lt;/span&gt;));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; MyWebSocketHandler());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    });&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            ChannelFuture cf = sb.bind().sync(); &lt;span&gt;// 服务器异步创建绑定&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            System.&lt;span&gt;out&lt;/span&gt;.println(NettyServer.class + &lt;span&gt;&quot; 启动正在监听：&quot;&lt;/span&gt; + cf.channel().localAddress());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            cf.channel().closeFuture().sync(); &lt;span&gt;// 关闭服务器通道&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;group&lt;/span&gt;.shutdownGracefully().sync(); &lt;span&gt;// 释放线程池资源&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            bossGroup.shutdownGracefully().sync();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;7&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;socket.html&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要是连接ws，发送消息，以及消息反馈&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1transitional.dtd&quot;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;html&lt;/span&gt; &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;meta&lt;/span&gt; &lt;span&gt;http-equiv&lt;/span&gt;=&lt;span&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span&gt;content&lt;/span&gt;=&lt;span&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Netty-Websocket&lt;span&gt;&amp;lt;/&lt;span&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;// by zhengkai.blog.csdn.net&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;var&lt;/span&gt; socket;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;window&lt;/span&gt;.WebSocket){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;window&lt;/span&gt;.WebSocket = &lt;span&gt;window&lt;/span&gt;.MozWebSocket;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;window&lt;/span&gt;.WebSocket){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            socket = &lt;span&gt;new&lt;/span&gt; WebSocket(&lt;span&gt;&quot;ws://127.0.0.1:12345/ws&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            socket.onmessage = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;)&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;var&lt;/span&gt; ta = &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;responseText&#x27;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                ta.value += event.data+&lt;span&gt;&quot;\r\n&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            };&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            socket.onopen = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;)&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;var&lt;/span&gt; ta = &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;responseText&#x27;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                ta.value = &lt;span&gt;&quot;Netty-WebSocket服务器。。。。。。连接 \r\n&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            };&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            socket.onclose = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;)&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;var&lt;/span&gt; ta = &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;responseText&#x27;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                ta.value = &lt;span&gt;&quot;Netty-WebSocket服务器。。。。。。关闭 \r\n&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            };&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;span&gt;else&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            alert(&lt;span&gt;&quot;您的浏览器不支持WebSocket协议！&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;(&lt;span&gt;message&lt;/span&gt;)&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;window&lt;/span&gt;.WebSocket){&lt;span&gt;return&lt;/span&gt;;}&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt;(socket.readyState == WebSocket.OPEN){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                socket.send(message);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;span&gt;else&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                alert(&lt;span&gt;&quot;WebSocket 连接没有建立成功！&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;form&lt;/span&gt; &lt;span&gt;onSubmit&lt;/span&gt;=&lt;span&gt;&quot;return false;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;ID&lt;span&gt;&amp;lt;/&lt;span&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;input&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text&quot;&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;uid&quot;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;&quot;${uid!!}&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;span&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;TEXT&lt;span&gt;&amp;lt;/&lt;span&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;input&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text&quot;&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;message&quot;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;&quot;这里输入消息&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;span&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;span&gt;input&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;button&quot;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;&quot;发送ws消息&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                  &lt;span&gt;onClick&lt;/span&gt;=&lt;span&gt;&quot;send(this.form.uid.value+&#x27;:&#x27;+this.form.message.value)&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;hr&lt;/span&gt; &lt;span&gt;color&lt;/span&gt;=&lt;span&gt;&quot;black&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;服务端返回的应答消息&lt;span&gt;&amp;lt;/&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;textarea&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;responseText&quot;&lt;/span&gt; &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;&quot;width: 1024px;height: 300px;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;8&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Controller&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;写好了html当然还需要一个controller来引导页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;IndexController&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/index&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ModelAndView &lt;span&gt;index&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  ModelAndView mav=&lt;span&gt;new&lt;/span&gt; ModelAndView(&lt;span&gt;&quot;socket&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  mav.addObject(&lt;span&gt;&quot;uid&quot;&lt;/span&gt;, RandomUtil.randomNumbers(&lt;span&gt;6&lt;/span&gt;));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;return&lt;/span&gt; mav;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;9&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;效果演示&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.696165191740413&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;339&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Tiblskiakg9JpUFdUFG1F204OeAGRWVBNhgr0NvgxFtoicCdtg4uaZ3USjEicB8RYob4NE2scPJehog/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7980769230769231&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Tiblskiakg9JpUFdUFG1F20wIuGkYOFgvV9ZeuOHyAFa9xxX3eBYSur2fuibtHDNSEvoU71icnrSWUA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;312&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33440514469453375&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;311&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Tiblskiakg9JpUFdUFG1F20nlqazyM6ZjUIAszibVgNEOaba9OibbjfdHOyDnia8A26cP2OWITVWwNwg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132251&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;10&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;改造netty支持url参数&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.首先，调整一下加载handler的顺序，优先MyWebSocketHandler在WebSocketServerProtocolHandler之上。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; MyWebSocketHandler());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;ch.pipeline().addLast(&lt;span&gt;new&lt;/span&gt; WebSocketServerProtocolHandler(&lt;span&gt;&quot;/ws&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;65536&lt;/span&gt; * &lt;span&gt;10&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.其次，改造MyWebSocketHandler 的channelRead方法，首次连接会是一个FullHttpRequest类型，可以通过FullHttpRequest.uri()获取完整ws的URL地址，之后接受信息的话，会是一个TextWebSocketFrame类型。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyWebSocketHandler &lt;span&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;TextWebSocketFrame&amp;gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) throws Exception {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;与客户端建立连接，通道开启！&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;//添加到channelGroup通道组&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        MyChannelHandlerPool.channelGroup.add(ctx.channel());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; channelInactive(ChannelHandlerContext ctx) throws Exception {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;与客户端断开连接，通道关闭！&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;//添加到channelGroup 通道组&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        MyChannelHandlerPool.channelGroup.remove(ctx.channel());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; channelRead(ChannelHandlerContext ctx, &lt;span&gt;Object&lt;/span&gt; msg) throws Exception {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;//首次连接是FullHttpRequest，处理参数 by zhengkai.blog.csdn.net&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; != msg &amp;amp;&amp;amp; msg &lt;span&gt;instanceof&lt;/span&gt; FullHttpRequest) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            FullHttpRequest request = (FullHttpRequest) msg;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;String&lt;/span&gt; uri = request.uri();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            Map paramMap=getUrlParams(uri);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            System.out.println(&lt;span&gt;&quot;接收到的参数是：&quot;&lt;/span&gt;+&lt;span&gt;JSON&lt;/span&gt;.toJSONString(paramMap));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;//如果url包含参数，需要处理&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt;(uri.contains(&lt;span&gt;&quot;?&quot;&lt;/span&gt;)){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;String&lt;/span&gt; newUri=uri.substring(&lt;span&gt;0&lt;/span&gt;,uri.indexOf(&lt;span&gt;&quot;?&quot;&lt;/span&gt;));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                System.out.println(newUri);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                request.setUri(newUri);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(msg &lt;span&gt;instanceof&lt;/span&gt; TextWebSocketFrame){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;//正常的TEXT消息类型&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            TextWebSocketFrame frame=(TextWebSocketFrame)msg;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            System.out.println(&lt;span&gt;&quot;客户端收到服务器数据：&quot;&lt;/span&gt; +frame.text());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            sendAllMessage(frame.text());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;super&lt;/span&gt;.channelRead(ctx, msg);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext channelHandlerContext, TextWebSocketFrame textWebSocketFrame) throws Exception {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sendAllMessage(&lt;span&gt;String&lt;/span&gt; message){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;//收到信息后，群发给所有channel&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        MyChannelHandlerPool.channelGroup.writeAndFlush( &lt;span&gt;new&lt;/span&gt; TextWebSocketFrame(message));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Map getUrlParams(&lt;span&gt;String&lt;/span&gt; url){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        Map&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;String&lt;/span&gt;&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        url = url.replace(&lt;span&gt;&quot;?&quot;&lt;/span&gt;,&lt;span&gt;&quot;;&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt; (!url.contains(&lt;span&gt;&quot;;&quot;&lt;/span&gt;)){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; map;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt; (url.split(&lt;span&gt;&quot;;&quot;&lt;/span&gt;).length &amp;gt; &lt;span&gt;0&lt;/span&gt;){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;String&lt;/span&gt;[] arr = url.split(&lt;span&gt;&quot;;&quot;&lt;/span&gt;)[&lt;span&gt;1&lt;/span&gt;].split(&lt;span&gt;&quot;&amp;amp;&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;String&lt;/span&gt; s : arr){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;String&lt;/span&gt; key = s.split(&lt;span&gt;&quot;=&quot;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;];&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;String&lt;/span&gt; value = s.split(&lt;span&gt;&quot;=&quot;&lt;/span&gt;)[&lt;span&gt;1&lt;/span&gt;];&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                map.put(key,value);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt;  map;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;span&gt;else&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; map;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.html中的ws地址也进行改造&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;socket&lt;/span&gt; = new WebSocket(&lt;span&gt;&quot;ws://127.0.0.1:12345/ws?uid=666&amp;amp;gid=777&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.改造后控制台输出情况&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;收到新连接&lt;br mpa-from-tpl=&quot;t&quot;/&gt;与客户端建立连接，通道开启！&lt;br mpa-from-tpl=&quot;t&quot;/&gt;接收到的参数是：{&lt;span&gt;&quot;uid&quot;&lt;/span&gt;:&lt;span&gt;&quot;666&quot;&lt;/span&gt;,&lt;span&gt;&quot;gid&quot;&lt;/span&gt;:&lt;span&gt;&quot;777&quot;&lt;/span&gt;}&lt;br mpa-from-tpl=&quot;t&quot;/&gt;/&lt;span&gt;ws&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;客户端收到服务器数据：&lt;span&gt;142531&lt;/span&gt;:这里输入消息&lt;br mpa-from-tpl=&quot;t&quot;/&gt;客户端收到服务器数据：&lt;span&gt;142531&lt;/span&gt;:这里输入消息&lt;br mpa-from-tpl=&quot;t&quot;/&gt;客户端收到服务器数据：&lt;span&gt;142531&lt;/span&gt;:这里输入消息&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;failed: WebSocket opening handshake timed &lt;span&gt;out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;听说是ssl wss的情况下才会出现，来自 @around-gao 的解决方法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;把MyWebSocketHandler和WebSocketServerProtocolHandler调下顺序就好了。&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>