<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>90ecdf73bdd93b6ae47632e60f87ba94</guid>
<title>聊聊数据库建表的15个小技巧</title>
<link>https://toutiao.io/k/uym7cfr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家好，我是苏三，又跟大家见面了。&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于后端开发同学来说，访问数据库，是代码中必不可少的一个环节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统中收集到用户的核心数据，为了安全性，我们一般会存储到数据库，比如：mysql，oracle等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后端开发的日常工作，需要不断的建库和建表，来满足业务需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常情况下，建库的频率比建表要低很多，所以，我们这篇文章主要讨论建表相关的内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们在建表的时候不注意细节，等后面系统上线之后，表的维护成本变得非常高，而且很容易踩坑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就跟大家一起聊聊，数据库建表的15个小技巧，希望对你会有所帮助。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5734597156398105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5heJ8iaZPDxrL0b4NLVuWA6exyYrhZ2IkCGgboUe4wRib4QDfrICUsceGciae7deR35icqJvPTweu2rYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;844&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.名字&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建表的时候，给&lt;code&gt;表&lt;/code&gt;、&lt;code&gt;字段&lt;/code&gt;和&lt;code&gt;索引&lt;/code&gt;起个好名字，真的太重要了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.1 见名知意&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;名字就像&lt;code&gt;表&lt;/code&gt;、&lt;code&gt;字段&lt;/code&gt;和&lt;code&gt;索引&lt;/code&gt;的一张脸，可以给人留下第一印象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好的名字，言简意赅，见名知意，让人心情愉悦，能够提高沟通和维护成本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;坏的名字，模拟两可，不知所云。而且显得杂乱无章，看得让人抓狂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;用户名称字段定义成：yong_hu_ming、用户_name、name、user_name_123456789&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你看了可能会一脸懵逼，这是什么骚操作？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;用户名称字段定义成：user_name&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;温馨提醒一下，名字也不宜过长，尽量控制在&lt;code&gt;30&lt;/code&gt;个字符以内。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.2 大小写&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;名字尽量都用&lt;code&gt;小写字母&lt;/code&gt;，因为从视觉上，小写字母更容易让人读懂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;字段名：PRODUCT_NAME、PRODUCT_name&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全部大写，看起来有点不太直观。而一部分大写，一部分小写，让人看着更不爽。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;字段名：product_name&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;名字还是使用全小写字母，看着更舒服。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.3 分隔符&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多时候，名字为了让人好理解，有可能会包含多个单词。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，多个单词间的&lt;code&gt;分隔符&lt;/code&gt;该用什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;反例：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;字段名：productname、productName、product name、product&lt;span&gt;@name&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单词间没有分隔，或者单词间用驼峰标识，或者单词间用空格分隔，或者单词间用@分隔，这几种方式都不太建议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;正例：&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;字段名：product_name&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;强烈建议大家在单词间用&lt;code&gt;_&lt;/code&gt;分隔。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.4 表名&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于表名，在言简意赅，见名知意的基础之上，建议带上&lt;code&gt;业务前缀&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是订单相关的业务表，可以在表名前面加个前缀：&lt;code&gt;order_&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：order_pay、order_pay_detail等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是商品相关的业务表，可以在表名前面加个前缀：&lt;code&gt;product_&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：product_spu，product_sku等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样做的好处是为了方便归类，把相同业务的表，可以非常快速的聚集到一起。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，还有有个好处是，如果哪天有非订单的业务，比如：金融业务，也需要建一个名字叫做pay的表，可以取名：finance_pay，就能非常轻松的区分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就不会出现&lt;code&gt;同名表&lt;/code&gt;的情况。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.5 字段名称&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;字段名称&lt;/code&gt;是开发人员发挥空间最大，但也最容易发生混乱的地方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有些表，使用flag表示状态，另外的表用status表示状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以统一一下，使用status表示状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一个表使用了另一个表的主键，可以在另一张表的名后面，加&lt;code&gt;_id&lt;/code&gt;或&lt;code&gt;_sys_no&lt;/code&gt;，例如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在product_sku表中有个字段，是product_spu表的主键，这时候可以取名：product_spu_id或product_spu_sys_no。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有创建时间，可以统一成：create_time，修改时间统一成：update_time。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;删除状态固定为：delete_status。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实还有很多公共字段，在不同的表之间，可以使用全局统一的命名规则，定义成相同的名称，以便于大家好理解。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.6 索引名&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在数据库中，索引有很多种，包括：主键、普通索引、唯一索引、联合索引等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每张表的主键只有一个，一般使用：&lt;code&gt;id&lt;/code&gt;或者&lt;code&gt;sys_no&lt;/code&gt;命名。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;普通索引和联合索引，其实是一类。在建立该类索引时，可以加&lt;code&gt;ix_&lt;/code&gt;前缀，比如：ix_product_status。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;唯一索引，可以加&lt;code&gt;ux_&lt;/code&gt;前缀，比如：ux_product_code。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.字段类型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在设计表时，我们在选择&lt;code&gt;字段类型&lt;/code&gt;时，可发挥空间很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间格式的数据有：date、datetime和timestamp等等可以选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字符类型的数据有：varchar、char、text等可以选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数字类型的数据有：int、bigint、smallint、tinyint等可以选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，选择很多，有时候是一件好事，也可能是一件坏事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何选择一个&lt;code&gt;合适&lt;/code&gt;的字段类型，变成了我们不得不面对的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果字段类型选大了，比如：原本只有1-10之间的10个数字，结果选了&lt;code&gt;bigint&lt;/code&gt;，它占&lt;code&gt;8&lt;/code&gt;个字节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，1-10之间的10个数字，每个数字&lt;code&gt;1&lt;/code&gt;个字节就能保存，选择&lt;code&gt;tinyint&lt;/code&gt;更为合适。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样会白白浪费7个字节的空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果字段类型择小了，比如：一个18位的id字段，选择了&lt;code&gt;int&lt;/code&gt;类型，最终数据会保存失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以选择一个合适的字段类型，还是非常重要的一件事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下原则可以参考一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;尽可能选择占用存储空间小的字段类型，在满足正常业务需求的情况下，从小到大，往上选。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果字符串长度固定，或者差别不大，可以选择char类型。如果字符串长度差别较大，可以选择varchar类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是否字段，可以选择bit类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;枚举字段，可以选择tinyint类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主键字段，可以选择bigint类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;金额字段，可以选择decimal类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;时间字段，可以选择timestamp或datetime类型。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.字段长度&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们已经定义好了&lt;code&gt;字段名称&lt;/code&gt;，选择了合适的&lt;code&gt;字段类型&lt;/code&gt;，接下来，需要重点关注的是&lt;code&gt;字段长度&lt;/code&gt;了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：varchar(20)，biginit(20)等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题来了，&lt;code&gt;varchar&lt;/code&gt;代表的是&lt;code&gt;字节&lt;/code&gt;长度，还是&lt;code&gt;字符&lt;/code&gt;长度呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：在mysql中除了&lt;code&gt;varchar&lt;/code&gt;和&lt;code&gt;char&lt;/code&gt;是代表&lt;code&gt;字符&lt;/code&gt;长度之外，其余的类型都是代表&lt;code&gt;字节&lt;/code&gt;长度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;biginit(n) 这个&lt;code&gt;n&lt;/code&gt;表示什么意思呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们定义的字段类型和长度是：bigint(4)，bigint实际长度是&lt;code&gt;8&lt;/code&gt;个字节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在有个数据a=1，a显示4个字节，所以在不满4个字节时前面填充0（前提是该字段设置了zerofill属性），比如：0001。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当满了4个字节时，比如现在数据是a=123456，它会按照实际的长度显示，比如：123456。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但需要注意的是，有些mysql客户端即使满了4个字节，也可能只显示4个字节的内容，比如会显示成：1234。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以bigint(4)，这里的4表示显示的长度为4个字节，实际长度还是占8个字节。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.字段个数&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在建表的时候，一定要对&lt;code&gt;字段个数&lt;/code&gt;做一些限制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我之前见过有人创建的表，有几十个，甚至上百个字段，表中保存的数据非常大，查询效率很低。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果真有这种情况，可以将一张&lt;code&gt;大表&lt;/code&gt;拆成多张&lt;code&gt;小表&lt;/code&gt;，这几张表的主键相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议每表的字段个数，不要超过&lt;code&gt;20&lt;/code&gt;个。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 主键&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在创建表时，一定要创建&lt;code&gt;主键&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为主键自带了主键索引，相比于其他索引，主键索引的查询效率最高，因为它不需要回表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，主键还是天然的&lt;code&gt;唯一索引&lt;/code&gt;，可以根据它来判重。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;单个&lt;/code&gt;数据库中，主键可以通过&lt;code&gt;AUTO_INCREMENT&lt;/code&gt;，设置成&lt;code&gt;自动增长&lt;/code&gt;的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但在&lt;code&gt;分布式&lt;/code&gt;数据库中，特别是做了分库分表的业务库中，主键最好由外部算法(比如：雪花算法）生成，它能够保证生成的id是全局唯一的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，主键建议保存跟业务无关的值，减少业务耦合性，方便今后的扩展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过我也见过，有些一对一的表关系，比如：用户表和用户扩展表，在保存数据时是一对一的关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，用户扩展表的主键，可以直接保存用户表的主键。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.存储引擎&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;mysql5.1&lt;/code&gt;以前的版本，默认的存储引擎是&lt;code&gt;myslam&lt;/code&gt;，而&lt;code&gt;mysql5.1&lt;/code&gt;以后的版本，默认的存储引擎变成了&lt;code&gt;innodb&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前我们还在创建表时，还一直纠结要选哪种存储引擎？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;myslam&lt;/code&gt;的索引和数据分开存储，而有利于查询，但它不支持事务和外键等功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;code&gt;innodb&lt;/code&gt;虽说查询性能，稍微弱一点，但它支持事务和外键等，功能更强大一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前的建议是：读多写少的表，用myslam存储引擎。而写多读多的表，用innodb。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但虽说mysql对innodb存储引擎性能的不断优化，现在myslam和innodb查询性能相差已经越来越小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，建议我们在使用&lt;code&gt;mysql8&lt;/code&gt;以后的版本时，直接使用默认的&lt;code&gt;innodb&lt;/code&gt;存储引擎即可，无需额外修改存储引擎。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. NOT NULL&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在创建字段时，需要选择该字段是否允许为&lt;code&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在定义字段时，应该尽可能明确该字段&lt;code&gt;NOT NULL&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们主要以innodb存储引擎为例，myslam存储引擎没啥好说的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要有以下原因：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在innodb中，需要额外的空间存储null值，需要占用更多的空间。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;null值可能会导致索引失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;null值只能用&lt;code&gt;is null&lt;/code&gt;或者&lt;code&gt;is not null&lt;/code&gt;判断，用&lt;code&gt;=号&lt;/code&gt;判断永远返回false。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，建议我们在定义字段时，能定义成NOT NULL，就定义成NOT NULL。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果某个字段直接定义成NOT NULL，万一有些地方忘了给该字段写值，就会&lt;code&gt;insert&lt;/code&gt;不了数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也算合理的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但有一种情况是，系统有新功能上线，新增了字段。上线时一般会先执行sql脚本，再部署代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于老代码中，不会给新字段赋值，则insert数据时，也会报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此，非常有必要给NOT NULL的字段设置默认值，特别是后面新增的字段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; product_sku &lt;span&gt;add&lt;/span&gt; &lt;span&gt;column&lt;/span&gt;  brand_id &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8.外键&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在mysql中，是存在&lt;code&gt;外键&lt;/code&gt;的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;外键存在的主要作用是：保证数据的&lt;code&gt;一致性&lt;/code&gt;和&lt;code&gt;完整性&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) primary &lt;span&gt;key&lt;/span&gt; auto_increment,&lt;br/&gt;  cname &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;15&lt;/span&gt;)&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有个班级表class。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后有个student表：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; student(&lt;br/&gt;  &lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) primary &lt;span&gt;key&lt;/span&gt; auto_increment,&lt;br/&gt;  &lt;span&gt;name&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;15&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  gender &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  cid &lt;span&gt;int&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;foreign&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;(cid) &lt;span&gt;references&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt;)&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中student表中的cid字段，保存的class表的id，这时通过&lt;code&gt;foreign key&lt;/code&gt;增加了一个外键。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，如果你直接通过student表的id删除数据，会报异常：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;a foreign key constraint fails&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;必须要先删除class表对于的cid那条数据，再删除student表的数据才行，这样能够保证数据的一致性和完整性。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;顺便说一句：只有存储引擎是innodb时，才能使用外键。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果只有两张表的关联还好，但如果有十几张表都建了外键关联，每删除一次主表，都需要同步删除十几张子表，很显然性能会非常差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，互联网系统中，一般建议不使用外键。因为这类系统更多的是为了性能考虑，宁可牺牲一点数据一致性和完整性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了&lt;code&gt;外键&lt;/code&gt;之外，&lt;code&gt;存储过程&lt;/code&gt;和&lt;code&gt;触发器&lt;/code&gt;也不太建议使用，他们都会影响性能。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9. 索引&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在建表时，除了指定&lt;code&gt;主键索引&lt;/code&gt;之外，还需要创建一些&lt;code&gt;普通索引&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; product_sku(&lt;br/&gt;  &lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) primary &lt;span&gt;key&lt;/span&gt; auto_increment,&lt;br/&gt;  spu_id &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  brand_id &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;name&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;15&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在创建商品表时，使用spu_id（商品组表）和brand_id（品牌表）的id。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像这类保存其他表id的情况，可以增加普通索引：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; product_sku (&lt;br/&gt;  &lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) primary &lt;span&gt;key&lt;/span&gt; auto_increment,&lt;br/&gt;  spu_id &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  brand_id &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;name&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;15&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`ix_spu_id`&lt;/span&gt; (&lt;span&gt;`spu_id`&lt;/span&gt;) &lt;span&gt;USING&lt;/span&gt; BTREE,&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`ix_brand_id`&lt;/span&gt; (&lt;span&gt;`brand_id`&lt;/span&gt;) &lt;span&gt;USING&lt;/span&gt; BTREE&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面查表的时候，效率更高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但索引字段也不能建的太多，可能会影响保存数据的效率，因为索引需要额外的存储空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议单表的索引个数不要超过：&lt;code&gt;5&lt;/code&gt;个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果在建表时，发现索引个数超过5个了，可以删除部分&lt;code&gt;普通索引&lt;/code&gt;，改成&lt;code&gt;联合索引&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顺便说一句：在创建联合索引的时候，需要使用注意&lt;code&gt;最左匹配原则&lt;/code&gt;，不然，建的联合索引效率可能不高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于数据重复率非常高的字段，比如：状态，不建议单独创建普通索引。因为即使加了索引，如果mysql发现&lt;code&gt;全表扫描&lt;/code&gt;效率更高，可能会导致索引失效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你对索引失效问题比较感兴趣，可以看看我的另一篇文章《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;amp;mid=2247491626&amp;amp;idx=1&amp;amp;sn=18fc949c06f04fe8f4c29b6fc5c66f9c&amp;amp;chksm=c0e838c2f79fb1d45c6f9b2ab188bb4663414690bab0718a7d46beb875e6b83e5e67ec27d2ff&amp;amp;token=660773166&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊索引失效的10种场景，太坑了&lt;/a&gt;》，里面有非常详细的介绍。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10.时间字段&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;时间字段&lt;/code&gt;的类型，我们可以选择的范围还是比较多的，目前mysql支持：date、datetime、timestamp、varchar等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;varchar&lt;/code&gt;类型可能是为了跟接口保持一致，接口中的时间类型是String。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果哪天我们要通过时间范围查询数据，效率会非常低，因为这种情况没法走索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;date&lt;/code&gt;类型主要是为了保存&lt;code&gt;日期&lt;/code&gt;，比如：2020-08-20，不适合保存&lt;code&gt;日期和时间&lt;/code&gt;，比如：2020-08-20 12:12:20。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;code&gt;datetime&lt;/code&gt;和&lt;code&gt;timestamp&lt;/code&gt;类型更适合我们保存&lt;code&gt;日期和时间&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但它们有略微区别。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;timestamp&lt;/code&gt;：用4个字节来保存数据，它的取值范围为&lt;code&gt;1970-01-01 00:00:01&lt;/code&gt; UTC ~ &lt;code&gt;2038-01-19 03:14:07&lt;/code&gt;。此外，它还跟时区有关。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;datetime&lt;/code&gt;：用8个字节来保存数据，它的取值范围为&lt;code&gt;1000-01-01 00:00:00&lt;/code&gt; ~ &lt;code&gt;9999-12-31 23:59:59&lt;/code&gt;。它跟时区无关。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优先推荐使用&lt;code&gt;datetime&lt;/code&gt;类型保存日期和时间，可以保存的时间范围更大一些。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;温馨提醒一下，在给时间字段设置默认值是，建议不要设置成：&lt;code&gt;0000-00-00 00:00:00&lt;/code&gt;，不然查询表时可能会因为转换不了，而直接报错。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11.金额字段&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mysql中有多个字段可以表示浮点数：float、double、decimal等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;code&gt;float&lt;/code&gt;和&lt;code&gt;double&lt;/code&gt;可能会丢失精度，因此推荐大家使用&lt;code&gt;decimal&lt;/code&gt;类型保存金额。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般我们是这样定义浮点数的：decimal(m,n)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中&lt;code&gt;n&lt;/code&gt;是指&lt;code&gt;小数&lt;/code&gt;的长度，而&lt;code&gt;m&lt;/code&gt;是指&lt;code&gt;整数加小数&lt;/code&gt;的总长度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们定义的金额类型是这样的：decimal(10,2)，则表示整数长度是8位，并且保留2位小数。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12.唯一索引&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;唯一索引&lt;/code&gt;在我们实际工作中，使用频率相当高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可以给单个字段，加唯一索引，比如：组织机构code。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以给多个字段，加一个联合的唯一索引，比如：分类编号、单位、规格等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单个的唯一索引还好，但如果是联合的唯一索引，字段值出现null时，则唯一性约束可能会失效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于唯一索引失效的问题，感兴趣的小伙伴可以看看我的另一篇文章《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;amp;mid=2247497090&amp;amp;idx=1&amp;amp;sn=53b81535a9815853382c3a4bff8c844b&amp;amp;chksm=c0e82d6af79fa47ccfece23a8b0ad46ef6c647f1d2f961823eed181732c47e250ed0cbcfe6fd&amp;amp;token=1169141359&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;明明加了唯一索引，为什么还是产生重复数据？&lt;/a&gt;》。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;创建唯一索引时，相关字段一定不能包含null值，否则唯一性会失效。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13.字符集&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mysql中支持的&lt;code&gt;字符集&lt;/code&gt;有很多，常用的有：latin1、utf-8、utf8mb4、GBK等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这4种字符集情况如下：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22905759162303665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5heJ8iaZPDxrL0b4NLVuWA6eI5YDlUiaPpU6hNmAC1gGIxCSL5agIRlY3e5gbrmybRssLd4CfD97XFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1528&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;latin1&lt;/code&gt;容易出现乱码问题，在实际项目中使用比较少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;code&gt;GBK&lt;/code&gt;支持中文，但不支持国际通用字符，在实际项目中使用也不多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从目前来看，mysql的字符集使用最多的还是：&lt;code&gt;utf-8&lt;/code&gt;和&lt;code&gt;utf8mb4&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中&lt;code&gt;utf-8&lt;/code&gt;占用3个字节，比&lt;code&gt;utf8mb4&lt;/code&gt;的4个字节，占用更小的存储空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但utf-8有个问题：即无法存储emoji表情，因为emoji表情一般需要4个字节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此，使用utf-8字符集，保存emoji表情时，数据库会直接报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，建议在建表时字符集设置成：&lt;code&gt;utf8mb4&lt;/code&gt;，会省去很多不必要的麻烦。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;14. 排序规则&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道，你关注过没，在mysql中创建表时，有个&lt;code&gt;COLLATE&lt;/code&gt;参数可以设置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;`order`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;`id`&lt;/span&gt; &lt;span&gt;bigint&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;br/&gt;  &lt;span&gt;`code`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_bin &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`name`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;30&lt;/span&gt;) &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_bin &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`id`&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;UNIQUE&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`un_code`&lt;/span&gt; (&lt;span&gt;`code`&lt;/span&gt;),&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`un_code_name`&lt;/span&gt; (&lt;span&gt;`code`&lt;/span&gt;,&lt;span&gt;`name`&lt;/span&gt;) &lt;span&gt;USING&lt;/span&gt; BTREE,&lt;br/&gt;  &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_name`&lt;/span&gt; (&lt;span&gt;`name`&lt;/span&gt;)&lt;br/&gt;) &lt;span&gt;ENGINE&lt;/span&gt;=&lt;span&gt;InnoDB&lt;/span&gt; AUTO_INCREMENT=&lt;span&gt;5&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt;=utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt;=utf8mb4_bin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它是用来设置&lt;code&gt;排序规则&lt;/code&gt;的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字符排序规则跟字符集有关，比如：字符集如果是&lt;code&gt;utf8mb4&lt;/code&gt;，则字符排序规则也是以：&lt;code&gt;utf8mb4_&lt;/code&gt;开头的，常用的有：&lt;code&gt;utf8mb4_general_ci&lt;/code&gt;、&lt;code&gt;utf8mb4_bin&lt;/code&gt;等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中utf8mb4_general_ci排序规则，对字母的大小写不敏感。说得更直白一点，就是不区分大小写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而utf8mb4_bin排序规则，对字符大小写敏感，也就是区分大小写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，这一点还是非常重要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如order表中现在有一条记录，name的值是大写的YOYO，但我们用小写的yoyo去查，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; &lt;span&gt;order&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&#x27;yoyo&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果字符排序规则是utf8mb4_general_ci，则可以查出大写的YOYO的那条数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果字符排序规则是utf8mb4_bin，则查不出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此，字符排序规则一定要根据实际的业务场景选择，否则容易出现问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;15.大字段&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在创建表时，对一些特殊字段，要额外关注，比如：&lt;code&gt;大字段&lt;/code&gt;，即占用较多存储空间的字段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：用户的评论，这就属于一个大字段，但这个字段可长可短。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但一般会对评论的总长度做限制，比如：最多允许输入500个字符。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果直接定义成&lt;code&gt;text&lt;/code&gt;类型，可能会浪费存储空间，所以建议将这类字段定义成&lt;code&gt;varchar&lt;/code&gt;类型的存储效率更高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，我还见过更大的字段，即该字段直接保存合同数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个合同可能会占&lt;code&gt;几Mb&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在mysql中保存这种数据，从系统设计的角度来说，本身就不太合理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像合同这种非常大的数据，可以保存到&lt;code&gt;mongodb&lt;/code&gt;中，然后在mysql的业务表中，保存mongodb表的id。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3f86d8e0e62ac892b45c63ef5e1a87ab</guid>
<title>我是一个Dubbo数据包...</title>
<link>https://toutiao.io/k/xbkwmfd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hello，大家好呀，我是小楼！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天给大家带来一篇关于Dubbo IO交互的文章，本文是一位同事所写，用有趣的文字把枯燥的知识点写出来，通俗易懂，非常有意思，所以迫不及待找作者授权然后分享给大家：&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;一些有趣的问题&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dubbo是一个优秀的RPC框架，其中有错综复杂的线程模型，本篇文章笔者从自己浅薄的认知中，来剖析Dubbo的整个IO过程。在开始之前，我们先来看如下几个问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;业务方法执行之后，数据包就发出去了吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;netty3和netty4在线程模型上有什么区别？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据包到了操作系统socket buffer，经历了什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Provider打出的log耗时很小，而Consumer端却超时了，怎么可以排查到问题？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据包在物理层是一根管道就直接发过去吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Consumer 业务线程await在Condition上，在哪个时机被唤醒？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;……&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来笔者将用Dubbo2.5.3 作为Consumer，2.7.3作为Provider来讲述整个交互过程，笔者站在数据包视角，用第一人称来讲述，系好安全带，我们出发咯。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;有意思的旅行&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、Dubbo2.5.3 Consumer端发起请求&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是一个数据包，出生在一个叫Dubbo2.5.3 Consumer的小镇，我的使命是是传递信息，同时也喜欢出门旅行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;某一天，我即将被发送出去，据说是要去一个叫Dubbo 2.7.3 Provider的地方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一天，业务线程发起发起方法调用，在&lt;code&gt;FailoverClusterInvoker#doInvoke&lt;/code&gt;我选择了一个Provider，然后经过各种Consumer Filter，再经过Netty3的pipeline，最后通过&lt;code&gt;NioWorker#scheduleWriteIfNecessary&lt;/code&gt;方法，我来到了NioWorker的writeTaskQueue队列中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我回头看主线程时，发现他在DefaultFuture中的Condition等待，我不知道他在等什么，也不知道他要等多久。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在writeTaskQueue队列排了一会队，看到netty3 IO worker线程在永不停歇的执行run方法，大家都称这个为死循环。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我很幸运，&lt;code&gt;NioWorker#processWriteTaskQueue&lt;/code&gt;选择了我，我被写到操作系统的Socket缓冲区，我在缓冲区等待，反正时间充足，我回味一下今天的旅行，期间我辗转了两个旅行团，分别叫主线程和netty3 IO worker线程，嗯，两个旅行团服务都不错，效率很高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;索性我把今天的见闻记录下来，绘制成一张图，当然不重要的地方我就忽略了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45165562913907287&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0THEvfacO6Rlia1mUDnU6HFu74W61icupxwsHvOiaiaBWB6nUjRiajzEHNsOD1Y4ibOMLwJtm8b4SbqxRyQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1510&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、操作系统发送数据包&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在操作系统socket缓冲区，经过了很多神奇的事情。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在一个叫传输层的地方给我追加上了目标端口号、源端口号&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在一个叫网络层的地方给我追加上了目标IP、源IP，同时通过目标IP与掩码做与运算，找到“下一跳”的IP&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在一个叫数据链路层的地方通过ARP协议给我追加上了“下一跳”的目标MAC地址、源MAC地址&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最有意思的是，我们坐的都是一段一段缆车，每换一个缆车，就要修改目标MAC地址、源MAC地址，后来问了同行的数据包小伙伴，这个模式叫“下一跳”，一跳一跳的跳过去。这里有很多数据包，体型大的单独一个缆车，体型小的几个挤一个缆车，还有一个可怕的事情，体型再大一点，要分拆做多个缆车（虽然这对我们数据包没啥问题），这个叫拆包和粘包。期间我们经过交换机、路由器，这些地方玩起来很Happy。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然也有不愉快的事情，就是拥堵，目的地缆车满了，来不及被拉走，只能等待咯。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、在Provider端的经历&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好不容易，我来到了目的地，我坐上了一个叫“零拷贝”号的快艇，迅速到了netty4，netty4果然富丽堂皇，经过&lt;code&gt;NioEventLoop#processSelectedKeys&lt;/code&gt;，再经过pipeline中的各种入站handler，我来到了AllChannelHandler的线程池，当然我有很多选择，但是我随便选了一个目的地，这里会经历解码、一系列的Filter，才会来的目的地“业务方法”，&lt;code&gt;NettyCodecAdapter#InternalDecoder&lt;/code&gt;解码器很厉害，他可以处理拆包和粘包。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1592442645074224&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0THEvfacO6Rlia1mUDnU6HFutDKwB4ichGIPPttKUnYPvUa6A2Jr0S6F6iaT5f7rOjEXfODBFvEKO2Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1482&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在AllChannelHandler的线程池中我会停留一会，于是我也画了一张图，记录旅程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5143487858719646&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0THEvfacO6Rlia1mUDnU6HFu2WXr9ZLiaK2R6ib1HZkd5MfRhnR4psoNmXxqeCpHJyRbY68J9jMfwAMA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1359&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自此，我的旅行结束，新的故事将由新的数据包续写。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4、Provider端产生了新的数据包&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是一个数据包，出生在一个叫Dubbo2.7.3 Provider的小镇，我的使命是去唤醒命中注定的线程，接下来我会开始一段旅行，去一个叫Dubbo2.5.3 Consumer的地方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Provider业务方法执行之后&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;由业务线程经过&lt;code&gt;io.netty.channel.AbstractChannelHandlerContext#writeAndFlush&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再经过&lt;code&gt;io.netty.util.concurrent.SingleThreadEventExecutor#execute&lt;/code&gt; 执行addTask&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将任务放入队列&lt;code&gt;io.netty.util.concurrent.SingleThreadEventExecutor#taskQueue&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我便跟随着&lt;code&gt;io.netty.channel.AbstractChannelHandlerContext$WriteTask&lt;/code&gt;等待NioEventLoop发车，等待的过程中，我记录了走过的脚步。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5553956834532374&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0THEvfacO6Rlia1mUDnU6HFuB1Z8hx2qcMDcQe9sITBHYYqDZg9ULYJKCicExKLMib1ic2Klu92icT0jZg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1390&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，我看到NioEventLoop是一个死循环，不停地从任务队列取任务，执行任务&lt;code&gt;AbstractChannelHandlerContext.WriteAndFlushTask&lt;/code&gt;，然后指引我们到socket缓冲区等候，永不知疲倦，我似乎领略到他身上有一种倔强的、追求极致的匠人精神。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过&lt;code&gt;io.netty.channel.AbstractChannel.AbstractUnsafe#write&lt;/code&gt;，我到达了操作系统socket缓冲区。在操作系统层面和大多数数据包一样，也是做缆车达到目的地。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5、到达dubbo 2.5.3 Consumer端&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到达dubbo 2.5.3 Consumer端，我在操作系统socket缓冲区等了一会，同样是坐了“零拷贝”号快艇，到达了真正的目的地dubbo 2.5.3 Consumer，在这里我发现，&lt;code&gt;NioWorker#run&lt;/code&gt;是一个死循环，然后执行&lt;code&gt;NioWorker#processSelectedKeys&lt;/code&gt;，通过&lt;code&gt;NioWorker#read&lt;/code&gt;方式读出来，我就到达了AllChannelHandler的线程池，这是一个业务线程池。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在这里等待一会，等任务被调度，我看见&lt;code&gt;com.alibaba.dubbo.remoting.exchange.support.DefaultFuture#doReceived&lt;/code&gt;被执行了，同时Condition的signal被执行了。我在远处看到了一个被阻塞线程被唤醒，我似乎明白，因为我的到来，唤醒了一个沉睡的线程，我想这应该是我生命的意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，我的使命也完成了，本次旅程结束。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结netty3和netty4的线程模型&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们根据两个数据包的自述，来总结一下netty3和netty4的线程模型。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、netty3写过程&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7016423357664233&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0THEvfacO6Rlia1mUDnU6HFuZzTWQkmvGJ1v3EFPsbejBEgeT7rNVHSsib2qmod8oiaIAOibBwAILn8pg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1096&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、Netty4的读写过程&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7829145728643216&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0THEvfacO6Rlia1mUDnU6HFu0UTXPOY5l8JRxBrpUp4onSJYbQKzrsxoyNU4ywX5joh6YWqedIICfA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;995&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;说明：这里没有netty3的读过程，netty3读过程和netty4相同，pipeline是由IO线程执行。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结：netty3与netty4线程模型的区别在于写过程，netty3中pipeline由业务线程执行，而netty4无论读写，pipeline统一由IO线程执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;netty4中ChannelPipeline中的Handler链统一由I/O线程串行调度，无论是读还是写操作，netty3中的write操作时由业务线程处理Handler链。netty4中可以降低线程之间的上下文切换带来的时间消耗，但是netty3中业务线程可以并发执行Handler链。如果有一些耗时的Handler操作会导致netty4的效率低下，但是可以考虑将这些耗时操作放在业务线程最先执行，不放在Handler里处理。由于业务线程可以并发执行，同样也可以提高效率。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;一些疑难问题排查&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有遇到一些比较典型的疑难问题，例如当Provider答应的didi.log耗时正常，而Consumer端超时了，此时有如下排查方向，didi.log的Filter其实处于非常里层，往往不能反映真实的业务方法执行情况。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Provider除了业务方向执行外，序列化也有可能是耗时的，所以可以用arthas监控最外侧方法org.apache.dubbo.remoting.transport.DecodeHandler#received，排除业务方法耗时高的问题&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Provider中数据包写入是否耗时，监控io.netty.channel.AbstractChannelHandlerContext#invokeWrite方法&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;通过netstat 也能查看当前tcp socket的一些信息，比如Recv-Q, Send-Q，Recv-Q是已经到了接受缓冲区，但是还没被应用代码读走的数据。Send-Q是已经到了发送缓冲区，但是对方还没有回复Ack的数据。这两种数据正常一般不会堆积，如果堆积了，可能就有问题了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13846153846153847&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0THEvfacO6Rlia1mUDnU6HFuQCPFkc2BtofhkicxepxG6h8qN5ghyr1c6A6Zl3QgmibTMB9ZrwIJDJmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2600&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;看Consumer NioWorker#processSelectedKeys （dubbo2.5.3）方法是否耗时高。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;直到最终整个链路的所有细节……问题肯定是可以解决的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;尾声&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在整个交互过程中，笔者省略线程栈调用的一些细节和源代码的细节，例如序列化与反序列化，dubbo怎么读出完整的数据包的，业务方法执行前那些Filter是怎么排序和分布的，netty的Reactor模式是如何实现的。这些都是非常有趣的问题……&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b0a3e532aefa2dc0e8c22bd03dbbf19c</guid>
<title>万字详解：推荐系统的知识与整体框架</title>
<link>https://toutiao.io/k/hdnyagr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;谈数据&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;learning-bigdata&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;聚焦数据治理，数字化转型，数据中台等领域专业知识总结和实战分享，做你身边最有价值的数据号！&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>299b891c0fa60c4c088c21b4beb329fe</guid>
<title>盘点 8 月份 yyds 的开源项目</title>
<link>https://toutiao.io/k/lrj24dc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;本期推荐开源项目目录：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1. 好用的 Shell 脚本工具&lt;/p&gt;&lt;p&gt;2. 开源的 Dashboard 工具&lt;/p&gt;&lt;p&gt;3. 人脸恢复算法&lt;/p&gt;&lt;p&gt;4. 静态网站生成器&lt;/p&gt;&lt;p&gt;5. 适用于 macOS 的代码编辑器&lt;/p&gt;&lt;p&gt;6. 开发者学习路线图&lt;/p&gt;&lt;p&gt;7. 嘴上一句话，电脑自己画&lt;/p&gt;&lt;hr/&gt;&lt;h1&gt;01&lt;/h1&gt;&lt;section&gt;&lt;span&gt;好用的 Shell 脚本工具&lt;/span&gt;&lt;/section&gt;&lt;p&gt;gum 本月刚刚开源就已经获得了 1W 的 Star，这是一个高度可配置、开箱即用的 shell 脚本工具，只需要几行代码就能帮助你编写有用的 shell 脚本。&lt;/p&gt;&lt;p&gt;该项目提供了详细的教程，感兴趣的可以去项目的主页查看。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;编程语言：Go&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0M9zcmoTviaC865WDmHYlpbRrNrXou3neRJQIE5kHibGicXQxCfmRGSf6Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;837&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/charmbracelet/gum&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0Mw0CsNNUxasNteYLC6VUoR1belkYehHDzelo7pns2WbqDvgN7vSsM5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h1&gt;02&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;开源的 Dashboard 工具包&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Tabler 是基于 Bootstrap 构建的免费开源 HTML Dashboard UI 工具包，可以通过 preview.tabler.io 网站预览 Tabler 的能力。通过该开源工具你能快速构建大多数的 Dashboard，比如地图、曲线图、柱状图、表单等等。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;编程语言：HTML、CSS、JS&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/tabler/tabler&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9074074074074074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0MCEJCoLKMHD4RpHbEhB48g3Wib6e9LEYBEjWekKT86okU1FQQk1ltZ4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9101851851851852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0MatQt7LNORJaFnsHuhZnTeiaic7AZpy4WjWXgZqlsnYZEM2daH9Tbdepw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h1&gt;03&lt;/h1&gt;&lt;section&gt;&lt;span&gt;人脸恢复算法&lt;/span&gt;&lt;/section&gt;&lt;p&gt;获得 21K 的 Star 的 GFPGAN 算法可以恢复一个模糊的人脸。基于生成对抗网络，当你输入一个模糊的面部照片，它能基于该模糊的照片输出一个清晰的人脸。&lt;/p&gt;&lt;p&gt;当然最后生成的清晰的人脸并不是图片的原图复原，只是基于模糊的人脸去”生成“的新的人脸，具体会生成什么样子，取决于这个算法所训练的数据集是什么样的。&lt;/p&gt;&lt;p&gt;比如你训练这个算法的时候用的都是男人脸的数据，当你用训练好的模型去恢复一个模糊女人脸时，最后生成的清晰人脸可能会偏男性。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;编程语言：Python&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/TencentARC/GFPGAN&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5174488567990373&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0MZZfVnv4rPsic2EJ4pejKbCGtzr5K961icDv55jhE8GdKXEc7yKDNP3XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot;/&gt;&lt;/p&gt;&lt;h1&gt;04&lt;/h1&gt;&lt;section&gt;&lt;span&gt;静态网站生成器&lt;/span&gt;&lt;/section&gt;&lt;section&gt;Astro 是一款现轻量级的静态网站生成器，在 GitHub 上已经斩获 18K 的 Star。该项目可以提供详细的中文教程，只要你具备基本的前端编程基础，就能快速搭建一个属于自己的静态网站。&lt;/section&gt;&lt;section&gt;&lt;strong&gt;如何安装&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;# Recommended!&lt;br/&gt;npm create astro@latest&lt;br/&gt; # Manual:&lt;br/&gt;npm install --save-dev astro&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/withastro/astro&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5194444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0Mf7vbOJ5RA7S53DK4UibIn95TpvDccTFhdQAo9eoeAeqyVkdiaUoWs52Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h1&gt;05&lt;/h1&gt;&lt;section&gt;&lt;span&gt;适用于 macOS 的代码编辑器&lt;/span&gt;&lt;/section&gt;&lt;p&gt;很多编辑器是基于 Electron 构建的，但这会导致 IDE 无法充分利用所有系统资源。会出现整体代码占用空间更大，丢帧、卡顿等问题。而原生应用程序会非常流畅，可以更好地利用系统资源以获得更好的性能和可靠性。&lt;br/&gt;&lt;br/&gt;&lt;span&gt;CodeEdit 便是这样的一款代码编辑器，非常轻量级，运营流程。&lt;/span&gt;&lt;span&gt;CodeEdit 的外观和感觉都像是由 Apple 设计和开发的应用程序，并严格遵守他们的设计标准和开发模式，甚至包括应用程序图标和命名策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;编程语言：Swift&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/CodeEditApp/CodeEdit&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39537037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0MJJV691zoWBQ8Ic87tvTWQ2eDjj2buFOgER9kdou7QQDLwnDXjD7rCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h1&gt;06&lt;/h1&gt;&lt;section&gt;&lt;span&gt;开发者学习路线图&lt;/span&gt;&lt;/section&gt;&lt;p&gt;这个仓库整理了 2022 年流行技术栈的学习路线，包括、前端、后的、Vue、Python、Javascript、区块链等等，你可以比对这些路线图了解自己所处的领域有哪些知识点。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4033078880407124&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0Ms3CZIApF25vxNyRbbEedWMve02gg1EXyiafMc1sYPSkueyWgVkqyRLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;786&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址:https://github.com/kamranahmedse/developer-roadmap&lt;/p&gt;&lt;h1&gt;07&lt;/h1&gt;&lt;section&gt;&lt;span&gt;嘴上一句话，电脑自己画&lt;/span&gt;&lt;/section&gt;&lt;p&gt;嘴上一句话，电脑自己画。你输入一句话，AI 自动画出你描述的场景。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.599609375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0MLpH0GlVUT63Apop8kvBSkVwv9UDiaicOQSV88ct0L98p1GaP4ZbItfCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.599609375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0Mhxyg2aX1norzsyyMhZMIsFqN31p3iakyaxMQeHGwtt86tTZu8qQXXzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.599609375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyhyCbEktoMf3hEbgicI6Q0Miaut1OeNjNAM6lCIF0gKGvNoSd8Jx8Fx7YQpfwS24pv3OqDZRF5zkYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;section&gt;你很难想象刚刚这几幅图是计算机自动生成的，Disco Diffusion 是一个输入关键词就出图的 AI 创作程序，已经在 GitHub 的开源，任何人都可以玩。&lt;/section&gt;&lt;section&gt;&lt;strong&gt;编程语言：Python&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;开源地址：https://github.com/jina-ai/discoart&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6ab1a3800009f45e23492c2d395e81fc</guid>
<title>面试：你知道Java性能优化有哪些手段？</title>
<link>https://toutiao.io/k/9spc6yd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好，我是田哥&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前两天，一位群里的朋友找我聊，面试中被问到性能优化手段该如何回答，今天我们就聊聊。&lt;span&gt;本文主要侧重于理论分析，我们从整体上看一下 Java 性能优化都有哪些可以遵循的规律。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;本文主讲理论，&lt;/span&gt;&lt;span&gt;关于实践，后续的文章会用较多的案例来细化本文的知识点，适合反复思考和归纳&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;概述&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;性能优化根据优化的类别，分为业务优化和技术优化。业务优化产生的效果也是非常大的，但它属于产品和管理的范畴。同作为程序员，在平常工作中，我们面对的优化方式，主要是通过一系列的技术手段，来完成对既定的优化目标。这一系列的技术手段，我大体归纳为如图以下 7 类：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.45843828715365237&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/07BicZywOVtkGt1dqMc5piaAibINwjicIA91iaUpFpnicTRJMPic2ph9ApS7aiclFdQZrTTvU5GCzNvSiaHEFXtN1yC458Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，优化方式集中在对计算资源和存储资源的规划上。优化方法中有多种用空间换时间的方式，但只照顾计算速度，而不考虑复杂性和空间问题，也是不可取的。我们要做的，就是在照顾性能的前提下，达到资源利用的最优状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我简要介绍一下这7个优化方向。如果你感觉比较枯燥，那也没关系，我们本文的目的，就是让你的脑海里有一个总分的概念，以及对理论基础有一个整体的认识。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;复用优化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在写代码的时候，你会发现有很多重复的代码可以提取出来，做成公共的方法。这样，在下次用的时候，就不用再费劲写一遍了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种思想就是复用。上面的描述是编码逻辑上的优化，对于数据存取来说，有同样的复用情况。无论是在生活中还是编码中，重复的事情一直在发生，如果没有复用，工作和生活就会比较累。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在软件系统中，谈到数据复用，我们首先想到的就是缓冲和缓存。注意这两个词的区别，它们的意义是完全不同的，很多同学很容易搞混，在这里简单地介绍一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓冲（Buffer），常见于对数据的暂存，然后批量传输或者写入。多使用顺序方式，用来缓解不同设备之间频繁地、缓慢地随机写，缓冲主要针对的是写操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存（Cache），常见于对已读取数据的复用，通过将它们缓存在相对高速的区域，缓存主要针对的是读操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与之类似的，是对于对象的池化操作，比如数据库连接池、线程池等，在 Java 中使用得非常频繁。由于这些对象的创建和销毁成本都比较大，我们在使用之后，也会将这部分对象暂时存储，下次用的时候，就不用再走一遍耗时的初始化操作了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;计算优化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;并行执行&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在的 CPU 发展速度很快，绝大多数硬件，都是多核。要想加快某个任务的执行，最快最优的解决方式，就是让它并行执行。并行执行有以下三种模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一种模式是多机，采用负载均衡的方式，将流量或者大的计算拆分成多个部分，同时进行处理。比如，Hadoop 通过 MapReduce 的方式，把任务打散，多机同时进行计算。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二种模式是采用多进程。比如 Nginx，采用 NIO 编程模型，Master 统一管理 Worker 进程，然后由 Worker 进程进行真正的请求代理，这也能很好地利用硬件的多个 CPU。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三种模式是使用多线程，这也是 Java 程序员接触最多的。比如 Netty，采用 Reactor 编程模型，同样使用 NIO，但它是基于线程的。Boss 线程用来接收请求，然后调度给相应的 Worker 线程进行真正的业务计算。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像 Golang 这样的语言，有更加轻量级的协程（Coroutine），协程是一种比线程更加轻量级的存在，但目前在 Java 中还不太成熟，就不做过多介绍了，但本质上，它也是对于多核的应用，使得任务并行执行。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;变同步为异步&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再一种对于计算的优化，就是变同步为异步，这通常涉及编程模型的改变。同步方式，请求会一直阻塞，直到有成功，或者失败结果的返回。虽然它的编程模型简单，但应对突发的、时间段倾斜的流量，问题就特别大，请求很容易失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;异步操作可以方便地支持横向扩容，也可以缓解瞬时压力，使请求变得平滑。同步请求，就像拳头打在钢板上；异步请求，就像拳头打在海绵上。你可以想象一下这个过程，后者肯定是富有弹性的，体验更加友好。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;惰性加载&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后一种，就是使用一些常见的设计模式来优化业务，提高体验，比如单例模式、代理模式等。举个例子，在绘制 Swing 窗口的时候，如果要显示比较多的图片，就可以先加载一个占位符，然后通过后台线程慢慢加载所需要的资源，这就可以避免窗口的僵死。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结果集优化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来介绍一下对结果集的优化。举个比较直观的例子，我们都知道 XML 的表现形式是非常好的，那为什么还有 JSON 呢？除了书写要简单一些，一个重要的原因就是它的体积变小了，传输效率和解析效率变高了，像 Google 的 Protobuf，体积就更小了一些。虽然可读性降低，但在一些高并发场景下（如 RPC），能够显著提高效率，这是典型的对结果集的优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是由于我们目前的 Web 服务，都是 C/S 模式。数据从服务器传输到客户端，需要分发多份，这个数据量是急剧膨胀的，每减少一小部分存储，都会有比较大的传输性能和成本提升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像 Nginx，一般都会开启 GZIP 压缩，使得传输的内容保持紧凑。客户端只需要一小部分计算能力，就可以方便解压。由于这个操作是分散的，所以性能损失是固定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了这个道理，我们就能看到对于结果集优化的一般思路，你要尽量保持返回数据的精简。一些客户端不需要的字段，那就在代码中，或者直接在 SQL 查询中，就把它去掉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一些对时效性要求不高，但对处理能力有高要求的业务。我们要吸取缓冲区的经验，尽量减少网络连接的交互，采用批量处理的方式，增加处理速度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果集合很可能会有二次使用，你可能会把它加入缓存中，但依然在速度上有所欠缺。这个时候，就需要对数据集合进行处理优化，采用索引或者 Bitmap 位图等方式，加快数据访问速度。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;资源冲突优化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在平常的开发中，会涉及很多共享资源。这些共享资源，有的是单机的，比如一个 HashMap；有的是外部存储，比如一个数据库行；有的是单个资源，比如 Redis 某个 key 的Setnx；有的是多个资源的协调，比如事务、分布式事务等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现实中的性能问题，和锁相关的问题是非常多的。大多数我们会想到数据库的行锁、表锁、Java 中的各种锁等。在更底层，比如 CPU 命令级别的锁、JVM 指令级别的锁、操作系统内部锁等，可以说无处不在。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有并发，才能产生资源冲突。也就是在同一时刻，只能有一个处理请求能够获取到共享资源。解决资源冲突的方式，就是加锁。再比如事务，在本质上也是一种锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照锁级别，锁可分为乐观锁和悲观锁，乐观锁在效率上肯定是更高一些；按照锁类型，锁又分为公平锁和非公平锁，在对任务的调度上，有一些细微的差别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对资源的争用，会造成严重的性能问题，所以会有一些针对无锁队列之类的研究，对性能的提升也是巨大的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;算法优化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;算法能够显著提高复杂业务的性能，但在实际的业务中，往往都是变种。由于存储越来越便宜，在一些 CPU 非常紧张的业务中，往往采用空间换取时间的方式，来加快处理速度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;算法属于代码调优，代码调优涉及很多编码技巧，需要使用者对所使用语言的 API 也非常熟悉。有时候，对算法、数据结构的灵活使用，也是代码优化的一个重要内容。比如，常用的降低时间复杂度的方式，就有递归、二分、排序、动态规划等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个优秀的实现，比一个拙劣的实现，对系统的影响是非常大的。比如，作为 List 的实现，LinkedList 和 ArrayList 在随机访问的性能上，差了好几个数量级；又比如，CopyOnWriteList 采用写时复制的方式，可以显著降低读多写少场景下的锁冲突。而什么时候使用同步，什么时候是线程安全的，也对我们的编码能力有较高的要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分的知识，就需要我们在平常的工作中注意积累，后面的课时中，也会挑比较重要的知识点穿插讲解。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;高效实现&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在平时的编程中，尽量使用一些设计理念良好、性能优越的组件。比如，有了 Netty，就不用再选择比较老的 Mina 组件。而在设计系统时，从性能因素考虑，就不要选 SOAP 这样比较耗时的协议。再比如，一个好的语法分析器（比如使用 JavaCC），其效率会比正则表达式高很多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总之，如果通过测试分析，找到了系统的瓶颈点，就要把关键的组件，使用更加高效的组件进行替换。在这种情况下，适配器模式是非常重要的。这也是为什么很多公司喜欢在现有的组件之上，再抽象一层自己的；而当在底层组件进行切换的时候，上层的应用并无感知。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;JVM 优化&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 Java 是运行在 JVM 虚拟机之上，它的诸多特性，就要受到 JVM 的制约。对 JVM 虚拟机进行优化，也能在一定程度上能够提升 JAVA 程序的性能。如果参数配置不当，甚至会造成 OOM 等比较严重的后果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前被广泛使用的垃圾回收器是 G1，通过很少的参数配置，内存即可高效回收。CMS 垃圾回收器已经在 Java 14 中被移除，由于它的 GC 时间不可控，有条件应该尽量避免使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JVM 性能调优涉及方方面面的取舍，往往是牵一发而动全身，需要全盘考虑各方面的影响。所以了解 JVM 内部的一些运行原理，还是特别重要的，它有益于我们加深对代码更深层次的理解，帮助我们书写出更高效的代码。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是代码优化的 7 个大方向，我们通过简要的介绍，让大家对性能优化的内容有了大体的了解。这7大方向是代码优化的最主要方向，当然，性能优化还包含数据库优化、操作系统优化、架构优化等其他一些内容，这些不是我们的重点，在后面的文章中，我们也只做简要的介绍。&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;欢迎加入 &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDM3MDgyMA==&amp;amp;mid=2247512591&amp;amp;idx=1&amp;amp;sn=4c2dfb0eb51825f86586d7b6a4e511bd&amp;amp;chksm=fd551ae4ca2293f28526c34f0c0bbb09f8b704cb8919efb61c5c4266ac36220b8dfd920db133&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;田哥的java面试辅导知识‍星球（点击了解详情）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;我的Java面试辅导知识星球（点击了解详情）&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，分享面试经验和面试技巧，带你一起学编程做项目（电商项目：快乐购物项目，造轮子：手写RPC框架mink）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;想加入的同学，可添加田哥微信（&lt;strong&gt;tj20120622&lt;/strong&gt;）给你&lt;strong&gt;优惠价&lt;/strong&gt; ，&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;备注【星球优惠价】，非诚勿扰谢谢。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;文章推荐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDM3MDgyMA==&amp;amp;mid=2247511102&amp;amp;idx=1&amp;amp;sn=409beae53dd4775bfe920be433199017&amp;amp;chksm=fd5504d5ca228dc35d72bfe3bb5d798539ea862852d51046941435b516c4d16ffa707ca6ec76&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;50000多字，线程池源码详解！建议收藏&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;50000多字，线程池源码详解！建议收藏&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDM3MDgyMA==&amp;amp;mid=2247511865&amp;amp;idx=1&amp;amp;sn=219843ec26874dfe7d8b5f4dceb075f2&amp;amp;chksm=fd5507d2ca228ec473eb3b515240ccefde6bea0b483ca7c95a12464cf1cb8539c318dc0b87da&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;网易面试：说说零拷贝，成功上岸！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;网易面试：说说零拷贝，成功上岸！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDM3MDgyMA==&amp;amp;mid=2247511825&amp;amp;idx=2&amp;amp;sn=c4dc825f10db162bc3e825f97d332d1f&amp;amp;chksm=fd5507faca228eec519aaa154acff63bb8a9cc4f423d9516b9e7b2de9f1cefd413f946ec2744&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Java学习专栏！全网最牛！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Java学习专栏！全网最牛！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4MDM3MDgyMA==&amp;amp;mid=2247511618&amp;amp;idx=1&amp;amp;sn=af59a094650d55c448338a715b981605&amp;amp;chksm=fd5506a9ca228fbf7c8c36b8fe6bc689ac78331db52b6624a94042f9bf1a4fbc3344b4ae31fa&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;学习 MySQL 需要知道的 28 个小技巧&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;学习 MySQL 需要知道的 28 个小技巧&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>