<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e3f9152d94963169872d509e91fd57ee</guid>
<title>分布式系统下的认证与授权</title>
<link>https://toutiao.io/k/gq6zhrc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot; itemprop=&quot;articleBody&quot;&gt;&amp;#13;
&lt;p&gt;在软件系统设计中，如何让应用能够在各种环境中安全高效的访问是个复杂的问题，这个问题的背后是一系列软件设计时需要考虑的架构安全问题：&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/&quot;&gt;架构安全性 | 凤凰架构&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认证：系统如何识别合法用户，也就是解决 &lt;strong&gt;你是谁&lt;/strong&gt; 的问题；&lt;/li&gt;
&lt;li&gt;授权：系统在识别合法用户后，还需要解决 &lt;strong&gt;你能做什么&lt;/strong&gt; 的问题；&lt;/li&gt;
&lt;li&gt;凭证：系统如何保证它与用户之间的承诺是双方真实意图的体现，是准确、完整且不可抵赖的；&lt;/li&gt;
&lt;li&gt;保密：如何安全的持久化用户的账户信息，确保不会被任何人窃取与滥用；&lt;/li&gt;
&lt;li&gt;传输：在复杂的用户环境中，如何安全的传递用户信息，保证不被第三方窃听、篡改和冒充。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在漫长的架构演进历史中，业界对这些问题已经有很成熟的解决方案。在架构安全这块，最好的是遵循技术标准与最佳实践，尽可能&lt;strong&gt;不重复造轮子或“创新”&lt;/strong&gt;。下面这个思维导图就是针对这些问题的常见的技术标准及方案：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-1-1024x808.png&quot; alt=&quot;架构安全思维导图&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在研究分布式系统的认证和授权问题前，让我们回到单体架构的时代，看看在单体架构上这些问题是如何被解决的。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;单体系统&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-2.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-2-1024x408.png&quot; alt=&quot;单体系统&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;认证&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;认证主要解决 &lt;strong&gt;你是谁&lt;/strong&gt; 的问题，从方式上来看有以下三种：&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/authentication.html&quot;&gt;认证 | 凤凰架构&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于通信信道：建立通信信道之前需要证明 &lt;strong&gt;你是谁&lt;/strong&gt;。在网络传输（Network）场景中的典型是基于 SSL/TLS 传输安全层的认证。&lt;/li&gt;
&lt;li&gt;基于通信协议：在获取资源之前需要证明 &lt;strong&gt;你是谁&lt;/strong&gt;。在互联网（Internet）场景中的典型是基于 HTTP 协议的认证。&lt;/li&gt;
&lt;li&gt;基于通信内容：在提供服务之前需要证明 &lt;strong&gt;你是谁&lt;/strong&gt;。在万维网（World Wide Web）场景中的典型是基于 Web 内容的认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在单体系统时代，认证方式一般是在通信信道上开启 HTTPS，在通信协议上利用 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7235#section-4.2&quot;&gt;HTTP Basic&lt;/a&gt;/&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7616&quot;&gt;Digest&lt;/a&gt;/&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6750&quot;&gt;Bearer&lt;/a&gt;/&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7486&quot;&gt;HOBA&lt;/a&gt;/&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6287&quot;&gt;OCRA&lt;/a&gt; 等方式并在通信内容上结合表单或 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6238&quot;&gt;TOTP&lt;/a&gt; 等的认证组合方式。这样可以从通信的不同阶段获得相应的安全保证。&lt;/p&gt;
&lt;p&gt;如果想对基于 HTTP 协议的认证方式做进一步的了解，可以参考这两篇文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/authentication.html&quot;&gt;认证 | 凤凰架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/api-2/&quot;&gt;细说API - 认证、授权和凭证 - Thoughtworks洞见&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;认证的一个常见应用场景是单点登录。单点登录主要解决了一个一次登录访问多个独立应用的问题。在单点登录方案出现之前，每个应用都需要独立登录维持各自的会话。相关的技术方案已经很成熟，主要有以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4120&quot;&gt;Kerberos-based&lt;/a&gt;：MIT 设计的 SSO 协议，基于对称密码学，并需要一个值得信赖的第三方。其广泛用于操作系统认证，如被 Windows 2000 和后续的操作系统作为默认的认证方法。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apereo.org/projects/cas&quot;&gt;CAS&lt;/a&gt;：Yale 设计的 SSO 协议，基于浏览器的 SSO 方案，部署简单，适用于简单的应用场景。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&quot;&gt;SAML&lt;/a&gt;：基于 XML 标记语言的认证断言方案，适用的场景众多，但技术较复杂。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openid.net/connect/&quot;&gt;OIDC&lt;/a&gt;：在 OAuth2 的基础上额外加一个 JWT 来传递用户信息。功能全面强大，是目前很流行的 SSO 方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;授权&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;授权主要解决 &lt;strong&gt;你能做什么&lt;/strong&gt; 的问题，从方案上来说有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Access-control_list&quot;&gt;ACL&lt;/a&gt;：访问控制列表（Access-control list）广泛用于操作系统内部的文件系统、网络及进程权限控制方面。如在 Linux 中，可通过 &lt;code&gt;getfacl&lt;/code&gt; 获取目录的默认 ACL 设置。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Role-based_access_control&quot;&gt;RBAC&lt;/a&gt;：RBAC 通过将权限属性从 ACL 方案中的单个用户抽取成更为抽象的角色（Role），通过给角色一组权限属性，再将多个角色赋予某个用户，实现了比 ACL 更为灵活强大的权限控制方案。实际上大部分系统的授权方案采用 RBAC 就足够了。但 RBAC 在面临复杂的权限控制需求时可能面临角色爆炸的问题，这时可以考虑采用更细粒度的 ABAC 方案。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Attribute-based_access_control&quot;&gt;ABAC&lt;/a&gt;：ABAC 是比 RBAC 更细粒度的权限控制方案。通过引入一组称为“属性”的特征，包括用户属性、环境属性和资源属性。例如，ABAC 可以对用户的访问做进一步的控制，如只允许在特定的时间或与相关员工相关的某些分支机构进行访问员工信息的操作，而不是让某部门的人员总是能够访问员工信息。但 ABAC 的问题在于初始设置需要定义大量的属性，工作量比 RBAC 要大。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6749&quot;&gt;OAuth2&lt;/a&gt;：OAuth2 是为了解决应用系统给第三方系统授权的问题而设计的授权框架。传统的客户端服务器交互模式中，客户端持有资源访问凭证（如用户名密码），服务端验证成功后放行。而在给第三方系统提供资源时，如果给第三方系统资源凭证，可能会带来未知的安全问题，比如凭证泄漏，凭证回收等问题。当应用系统面向第三方系统提供服务时，需要使用此方案。同时因为 OAuth2 做授权的时候一般需要用户登录，也能实现单点登录的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想对授权做进一步的了解，可以参考这篇文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/authorization.html&quot;&gt;授权 | 凤凰架构&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;凭证&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;凭证是为了解决在认证授权后如何承载认证授权信息的问题。在单体应用时代，主流的解决方案是基于 HTTP 协议的 Cookie-Session 机制为代表的服务端状态存储技术。&lt;/p&gt;
&lt;p&gt;由于 HTTP 协议本身是无状态的，要维持一个会话（Session），而不是每次访问都重新认证授权，需要客户端也就是浏览器通过 Cookie 来存储服务器端返回的一个凭证信息，这个凭证信息一般是一串随机的字符串，用来代表用户此次的会话标识。每次请求浏览器都会在 HTTP Header 中携带这个 Cookie 信息，应用拿到这个会话标识后从内存或缓存（Cache）中查询出用户的信息，这样就定位到了具体的用户，实现了会话的维持。&lt;/p&gt;
&lt;p&gt;这套古老的方案存在以下先天优势：&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/credentials.html&quot;&gt;凭证 | 凤凰架构&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态信息都存储于服务器，只要依靠客户端的 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&quot;&gt;同源策略&lt;/a&gt; 和 HTTPS 的传输层安全，保证 Cookie 中的键值不被窃取而出现被冒认身份的情况，就能完全规避掉上下文信息在传输过程中被泄漏和篡改的风险（但 Cookie 方案容易受到 &lt;a href=&quot;https://owasp.org/www-community/attacks/csrf&quot;&gt;CSRF&lt;/a&gt; 攻击，这种可通过 &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation&quot;&gt;CSRF Token&lt;/a&gt; 技术防御）；&lt;/li&gt;
&lt;li&gt;另一大优点是服务端有主动的状态管理能力，可根据自己的意愿随时修改、清除任意上下文信息，譬如很轻易就能实现强制某用户下线的这样功能；&lt;/li&gt;
&lt;li&gt;服务端也很容易实现如统计用户在线这类功能；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一切都很美好，直到我们来到了分布式系统时代。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;分布式系统&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;分布式系统与单体系统的一大区别就是状态管理。分布式系统通过把单体系统中有状态的部分转移到中间件中去管理，从而很容易做到水平扩容，提高系统峰值处理能力。在架构认证和授权部分，分布式和单体并没有什么不同，唯独有变化的在持有状态的凭证部分。&lt;/p&gt;
&lt;p&gt;我们知道单体应用在服务端管理用户会话信息，客户端只持有会话标识。如果服务端要将此用户会话状态转移出去有两种处理思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将用户会话信息继续托管至服务端。此时有几种服务端方案可以选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中心化存储：转移到中间件如 Redis 中去。利用 Redis &lt;a href=&quot;https://redis.io/topics/benchmarks&quot;&gt;极高的并发处理能力&lt;/a&gt;，也可以做到弹性横行扩容。不过可能会带来中间件高可用性维护难的问题，通过租赁云服务商的托管中间件是降低中间件 &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_point_of_failure&quot;&gt;单点故障（SPOF）&lt;/a&gt; 的一种方式；&lt;/li&gt;
&lt;li&gt;会话复制（Session replication）：让各个节点之间采用复制式的 Session，每一个节点中的 Session 变动都会发送到组播地址的其他服务器上，这样某个节点崩溃了，不会中断该节点用户的服务。但 Session 之间组播复制的同步代价高昂，节点越多时，同步成本越高。&lt;/li&gt;
&lt;li&gt;会话粘滞（Sticky session）：通过负载均衡算法如 Nginx 的 &lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/&quot;&gt;IP Hash&lt;/a&gt; 算法将来自同一 IP 的请求转发至同一服务。每个服务节点都不重复地保存着一部分用户的状态，如果这个服务崩溃了，里面的用户状态便完全丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么在分布式系统中共享状态就这么困难？这是因为分布式系统中有一个不可能三角的理论：&lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP&lt;/a&gt;。这个理论简单地理解就是因为在分布式系统中，因为网络无法做到绝对的可靠（分区容错性：&lt;strong&gt;P&lt;/strong&gt;artition Tolerance），只能在一致性（&lt;strong&gt;C&lt;/strong&gt;onsistency）和可用性（&lt;strong&gt;A&lt;/strong&gt;vailability）间选择一个。 比如上述的三种服务端方案其实都是牺牲了 CAP 的某个方面。比如第一种中心化存储方案我们放弃了中心化存储的分区容错性，一旦其网络分区，整个集群都会不可用。第二种会话复制方案我们牺牲了可用性，当节点在同步会话数据时，整个服务会短暂的不可用。第三种会话粘滞方案我们牺牲了一致性，一旦某个节点宕机，整个集群的数据会因该节点的数据丢失而达到不一致的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将状态从服务端转移到客户端。Cookie-Session 是一种引用令牌（Reference tokens），也就是客户端持有的是服务端存储的会话引用标识。还有一种自包含令牌（Self-contained tokens），如 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7519.html&quot;&gt;JWT&lt;/a&gt; 就是这种客户端保存会话信息的技术，服务端只是去校验会话信息是否合法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;JWT&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;如果你对 JWT 不了解，可以先看这两篇：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://icyfenix.cn/architect-perspective/general-architecture/system-security/credentials.html#jwt&quot;&gt;JWT | 凤凰架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pingidentity.com/en/company/blog/posts/2019/jwt-security-nobody-talks-about.html&quot;&gt;The Hard Parts of JWT Security Nobody Talks About&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于 JWT 的 Payload 并未做过多限制，所以很容易产生滥用的问题，并且带来很多误解。比如下面的一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;误把 JWT 当作 Cookie-Session 使用（把 JWT 当作引用令牌使用），会带来未知的隐患。遵循不重复造轮子和“创新”的指导原则，尽可能不要这么做；&lt;/li&gt;
&lt;li&gt;认为 JWT 更安全。虽然 JWT 采用了一定的加密算法签名，使其具备了抗篡改的能力。但其 Payload 大部分都只是采用 &lt;code&gt;base64UrlEncode&lt;/code&gt; 编码，数据并不是加密的。攻击者可以通过 &lt;a href=&quot;https://owasp.org/www-community/attacks/Session_hijacking_attack&quot;&gt;会话劫持（Session hijacking）&lt;/a&gt; 技术拿到 JWT 会话信息，之后通过 &lt;a href=&quot;https://campus.barracuda.com/product/webapplicationfirewall/doc/49058327/session-replay-attack/&quot;&gt;会话重放攻击（Session Replay Attack）&lt;/a&gt; 获取用户资源，所以最佳实践是通过启用 TLS/SSL 来加密通信信道。&lt;/li&gt;
&lt;li&gt;把 JWT 存储到浏览器的 Local Storage 中。此方式很容易受到 &lt;a href=&quot;https://owasp.org/www-community/attacks/xss/&quot;&gt;XSS&lt;/a&gt; 攻击导致 JWT 泄漏。可通过服务端启用 &lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot;&gt;内容安全策略（CSP）&lt;/a&gt; 来防御这种攻击。&lt;/li&gt;
&lt;li&gt;采用对称加密方式签名（Signature）。对称加密密钥一旦泄漏，会让整个服务的基础设施遭受安全威胁。JWT 支持非对称加密算法，只有签名的服务需要私钥，其他验证 JWT 信息的服务只需要使用公钥即可。&lt;/li&gt;
&lt;li&gt;不校验 JWT 的签名算法。这篇 &lt;a href=&quot;https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/&quot;&gt;Critical vulnerabilities in JSON Web Token libraries&lt;/a&gt; 文章提到 JWT 的一种漏洞，通过 &lt;code&gt;none&lt;/code&gt; 算法规避令牌验证。所以最好每次都验证 JWT header 中的签名算法是否是期望的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相信看了上述的一些问题，你对 JWT 的“简单、安全”有了新的理解。这还没完，JWT 还有以下一些 Cookie-Session 没有的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令牌难以主动失效：JWT 中虽然有 &lt;code&gt;exp&lt;/code&gt;、&lt;code&gt;nbf&lt;/code&gt; 与 &lt;code&gt;iat&lt;/code&gt; 这些和时间相关的属性，但很难在令牌到期之前让令牌失效，比如很难在用户退出登录时立刻让签发的令牌全部失效。虽然可能通过一些“黑名单”的技术解决这个问题，不过相比 Cookie-Session 来说，引入了一定的复杂性；&lt;/li&gt;
&lt;li&gt;令牌数据老旧：很难把签发的令牌全部更新成最新的数据。比如把用户的权限信息（Role）放在 JWT Payload 中，当用户的角色发生变化时，很难把之前签发的令牌信息更新成最新的数据；&lt;/li&gt;
&lt;li&gt;令牌存储：存储在客户端意味着有多种选择：Cookie？Local Storage？如果放在 Cookie 中，为了安全，一般会给 Cookie 设置 &lt;code&gt;http-only&lt;/code&gt; 和 &lt;code&gt;secure&lt;/code&gt; 的属性。但这也会带来一定的不便性，比如客户端要读取 JWT Payload 的内容只能借助服务端 API 接口。如果将 JWT 存储至浏览器 Local Storage，虽然方便了客户端读取，但可能会带来 XSS 攻击的威胁，又需要去设置 CSP 来防御这种威胁；&lt;/li&gt;
&lt;li&gt;令牌大小：JWT 相比 Cookie-Session 还是大不少，尤其是要在 Payload 中存储一些额外的权限信息。一般服务端都有对 HTTP Header 的大小限制；&lt;/li&gt;
&lt;li&gt;网络开销：更大的文本意味着更高的网络开销，进一步会需要更复杂的基础设施，也会产生复杂的运维问题等；&lt;/li&gt;
&lt;li&gt;难以统计：服务端无状态意味着很难做诸如统计用户在线数量的功能；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JWT 解决了 Cookie-Session 方案在分布式系统中因 CAP 的限制而带来的问题，但同时也带来了一些新的问题。所以并不能说 JWT 就是 Cookie-Session 在分布式系统中的完美替代。&lt;/p&gt;
&lt;p&gt;那么 JWT 的最佳使用场景到底是什么？这篇 &lt;a href=&quot;http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/&quot;&gt;Stop using JWT for sessions&lt;/a&gt; 给出了以下的结论：&lt;strong&gt;JWT 更适合作分布式系统中的一次性令牌使用&lt;/strong&gt;。分布式系统继续使用 Cookie-Session 做会话管理，但可以在认证鉴权后生成 JWT 做分布式系统内部服务调用间的一次性令牌。&lt;/p&gt;
&lt;p&gt;让我们通过一个例子来理解下在分布式系统下的认证授权场景。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;一个例子&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-3.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/12/authentication-and-authorization-in-distributed-systems-3-1024x713.png&quot; alt=&quot;分布式系统下的认证授权场景&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;此处Auth服务承担的是授权（Authorization）的职责，而不是认证（Authentication）的职责；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OAuth2在协议中是做授权框架的，但是其一般需要登录授权，也能实现SSO的功能。&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;用户通过 HTTPS 访问我们的应用。当请求发送至微服务网关层（Gateway），网关检测 HTTP Header 中的 Cookie 发现没有 &lt;code&gt;SESSIONID&lt;/code&gt; 这个键值对，重定向至 SSO 登录页面。&lt;/li&gt;
&lt;li&gt;用户通过 SSO 登录我们的应用。&lt;/li&gt;
&lt;li&gt;用户信息存放至 AD/LDAP 等系统中。管理员提前给用户配置好角色权限。&lt;/li&gt;
&lt;li&gt;SSO 集成方案我们选择 OIDC。OIDC 集成了 AD/LDAP，当用户提供正确的用户名和密码后，SSO 重定向至网关。&lt;/li&gt;
&lt;li&gt;网关生成了 &lt;code&gt;SESSIONID&lt;/code&gt; 键值对并通过 HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; 响应给用户浏览器设置了此 Cookie。&lt;/li&gt;
&lt;li&gt;浏览器重新发起带 &lt;code&gt;SESSIONID&lt;/code&gt; Cookie 的请求。网关经过查询其缓存或中间件（如将会话信息存放至 Redis）中的 Session 信息确认了用户的身份信息。之后网关请求 Auth 服务利用其私钥签名生成 JWT 凭证，JWT Payload 中可以存放一部分用户信息和角色信息，这些信息可以从中间件中或 AD/LDAP 中查询出。&lt;/li&gt;
&lt;li&gt;网关之后将此 JWT 凭证通过反向代理转发至内部的 BFF 服务，之后请求到达内部的领域微服务。&lt;/li&gt;
&lt;li&gt;各领域微服务接受到请求后，先从 HTTP Header 中拿出 JWT 凭证。&lt;/li&gt;
&lt;li&gt;在执行真正的业务逻辑前，先利用之前定时从 Auth 服务中同步获取的公钥。
&lt;ol&gt;
&lt;li&gt;Auth 服务通过一个类似 &lt;code&gt;https://&amp;lt;your_domain&amp;gt;/.well-known/jwks.json&lt;/code&gt; 的 API 提供 JWT 公钥的分发。关于 &lt;code&gt;.well-known&lt;/code&gt; 前缀，可阅读 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5785&quot;&gt;RFC 5785&lt;/a&gt; 做进一步了解。在 &lt;code&gt;jwks.json&lt;/code&gt; 文件中，我们可以找到 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7517&quot;&gt;JWK&lt;/a&gt; 或 JSON Web Key，这是我们用来验证签名的公钥。&lt;/li&gt;
&lt;li&gt;校验 JWT 这块逻辑属于微服务共有的部分，一般可以开发一个 SDK 包来做这个通用的工作。为了提高性能，可使用缓存技术，定时从 Auth 中同步公钥。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;获取到公钥后验证成功后拿出 JWT Payload 即可获取到用户信息和角色权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全部流程就是这样，我们得到了以下的一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个流程里我们并没有将 JWT 返回给用户，只是在认证授权过后生成一个一次性的 JWT 令牌凭证用于微服务内部服务间的调用。因为用户的权限信息存放至 JWT Payload 中，内部的服务并不需要从 AD/LDAP 中获取用户权限信息。可能有人觉得内部服务直接从中间件中获取用户会话信息也可以，但这又让我们的应用进一步耦合了中间件，同时也让一个请求链路中产生更多的子请求，不如直接在请求头中存放用户信息的方式高效。&lt;/li&gt;
&lt;li&gt;在微服务内部间传递的是经过非对称加密算法签名的 JWT 凭证，并不是一个 JWT Payload 信息。就算我们的微服务内部被入侵，攻击者也并不能通过篡改凭证中用户的权限信息来搞破坏。这也满足了分布式系统中 &lt;a href=&quot;https://icyfenix.cn/distribution/secure/zero-trust.html&quot;&gt;零信任网络（Zero Trust）&lt;/a&gt; 的部分要求。&lt;/li&gt;
&lt;li&gt;与外部第三方应用的通讯（M2M），可以采用 OAuth2 的方式或 Personal Access Token 这种方式来集成。&lt;/li&gt;
&lt;li&gt;通过引入 SDK 与定时同步公钥的机制，我们引入了一定的复杂度。比如 SDK 在异构编程语言的项目中开发复杂的问题。不过这个问题在云原生系统时代有了不同的解法，让我们之后讨论这个问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;架构总是在演进，也许分布式系统中很多问题我们还没完全解决，就来到了云原生时代。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;云原生系统&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;如果你对云原生应用开发还不了解的话，可以先看看我这篇 &lt;a href=&quot;https://www.bmpi.dev/dev/guide-to-k8s-cloud-native/&quot;&gt;K8S 云原生应用开发小记&lt;/a&gt;。云原生系统其实并不是什么后分布式系统时代。它们两者都是为了解决不同场景的问题而出现的解决方案。&lt;/p&gt;
&lt;p&gt;在认证授权这块，云原生系统的优势在于可以通过 &lt;a href=&quot;https://icyfenix.cn/immutable-infrastructure/mesh/&quot;&gt;服务网格(Service Mesh)&lt;/a&gt; 做一些业务系统中通用的切面工作，比如我们在分布式系统中遇到的校验 JWT 的 SDK 其实就可以放入服务网格中的边车（&lt;a href=&quot;https://www.thoughtworks.com/radar/techniques/sidecars-for-endpoint-security&quot;&gt;Sidecar&lt;/a&gt;）去实现，让业务应用更专注特定领域的业务。&lt;/p&gt;
&lt;p&gt;由于这篇文章并不主要讨论云原生，对这部分感兴趣的可以参考以下两篇文章做进一步了解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/service-mesh-authentication-authorization/&quot;&gt;Service Mesh架构下的认证与授权&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/microservices-authentication-token-management/&quot;&gt;微服务下的身份认证和令牌管理&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;由于篇幅及能力限制，这篇文章我只能从高层次梳理在不同架构演进中认证、授权及凭证这些和架构安全相关的技术的发展过程。由于这些技术涉及了大量的技术标准及实践，很难在一篇文章中对这些技术做详尽的分享，更无法去分享如何实现。但有了这些理论支持和最佳实践，希望能让你在实现的过程中多了一个指引。如果你想进一步了解，可参考文章中的参考文章链接。&lt;/p&gt;
&lt;p&gt;最后，技术总是在不断的发展，但并不是新技术总比老技术“先进”。正如文章中对 Cookie-Session 与 JWT 的分析对比，技术方案总是充满了各种 &lt;code&gt;Trade-off&lt;/code&gt;。而作为一个工程师，我们能做的就是认清这些技术的历史背景及局限性，选择最适合项目需求的技术方案。&lt;/p&gt;
&amp;#13;
&lt;/div&gt;&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>071eb3e6c014e8c3f76f442e2fcb6c90</guid>
<title>编个程序来计算怎么还房贷最合适</title>
<link>https://toutiao.io/k/2e9wmt4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;👆&lt;/span&gt;&lt;span&gt;点击“&lt;/span&gt;&lt;span&gt;博文视点Broadview&lt;/span&gt;&lt;span&gt;”，获取更多书讯&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05669291338582677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nr1VNxfeqxVOw2nPJHVH4xeZibzPY5F4ibOuOZLMsUMrzIibGB6KMw7EurSKv6DkrtLzuhYdBa30A9Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在购房过程中，关于&lt;/span&gt;&lt;span&gt;房贷&lt;/span&gt;&lt;span&gt;的决策肯定&lt;/span&gt;&lt;span&gt;困扰着很多&lt;/span&gt;&lt;span&gt;想买房的读者，比如下面这些非常细节的问题。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;首付多点好，还是少点好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;贷款30年好，还是15年好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;是提前还款合适，还是按计划还完合适？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;确实，一套商品房的贷款动不动就一两百万，如果处理不好，会直接影响我们未来的现金流和生活质量。但你可别忘了，我们理工男在财富管理上有三大优势。本节，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;我就利用我们独有的“工具优势”，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;编程验证各种房贷方案的优缺点，彻底解决你对还房贷方式的疑问。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;影响房贷的因素有哪些？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一&lt;/span&gt;&lt;span&gt;名&lt;/span&gt;&lt;span&gt;“理工男”&lt;/span&gt;&lt;span&gt;，当我们着手解决问题时，要做的第一件事情是什么&lt;/span&gt;&lt;span&gt;？&lt;/span&gt;&lt;strong&gt;&lt;span&gt;就是清晰地定义问题。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“怎么还房贷比较好”，这个问题的表述显然是非常模糊的。那我就来帮你“翻译翻译”，看看怎么更清晰地定义它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个问题其实应该是：&lt;strong&gt;如何确定房贷的首付金额和还款年限，让我们的家庭财富在一个目标期限上最大化？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，我们其实是在解决一个最优化问题。要确定的变量很简单，只有两个，即&lt;strong&gt;首付金额&lt;/strong&gt;和&lt;strong&gt;还款年限&lt;/strong&gt;；优化的目标也很简单，就是指定一个目标期限，比如30年，让我们的家庭财富在这个期限内积累得最多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说实话，这个问题要是放到工程师的算法面试中，都显得太简单了。但就是这样，仍然有大量的读者想不清楚这个问题，还需要求助别人。可见，学习知识固然重要，知道怎么运用知识更重要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;言归正传，定义清楚了问题，我们还得弄明白影响家庭财富的主要变量有哪些，这样才能用编程的方式去优化它。从我的经验出发，我认为&lt;/span&gt;&lt;strong&gt;&lt;span&gt;影响家庭财富的主要变量有下面六项。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房产总价&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房产升值速度&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房贷利率&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;工资收入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;理财收入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;家庭生活支出&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;这六个变量，再加上问题中的两个关键变量——首付金额和还款年限，共同组成了影响家庭财富的所有要素。那剩下的事情就简单了，我们就通过编程来确定，到底如何贷款才能让我们积累的家庭总财富达到最多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;2&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;首付&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;到底是付得多好，还是付得少好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来解决第一个最关键的，也是读者最关心的问题：买房时，我应该多交一点首付，还是应该以最低的首付比例贷款，把余钱留起来呢？我们举例来说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设小Y是一名在北京工作了5年的程序员，他看上了一套位于郊区的小两居，价值350万元。小Y工作这5年，攒了100万元，父母可以支援他100万元，也就是说，他有200万元可以用的购房款。这时问题就来了：他是把200万元全部用作首付，还是只交35%的首付款（122.5万元）？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们已经知道了房产总价这个关键变量，假设还款年限为30年，为了解决首付金额的问题，我们还要考虑上面列出的五个其他要素。这里，我们根据（2021年8月的）客观情况，给出这些变量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房产的升值速度：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;假设每年3%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;房贷利率：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;目前是4.65%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;工资收入：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;小Y的工资税后收入是每月3万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;理财收入：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们按永久组合的收益率来算，是6.8%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;家庭生活支出：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;每月5000元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;明确了这些要素，我们就来算一算，在这两种首付方案的前提下，30年后小Y家庭的财富总额分别是多少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过程序进行模拟后，我把得到的结果展示在了图1中。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4691607684529828&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mQf0icvvIdyHiaaWDPvpias3HdrwbX2icazXfjueRssTTYUibNwCNVjJSYHfJR7SgnSpLxU1W4ic4Ckwvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;989&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.21510957324106114&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mQf0icvvIdyHiaaWDPvpias3HM0tLVUnicYTJxNjkkOXp8HBg5nIIgMJKYQBOFNa1XJvEbCOic3gPLrQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1734&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1  不同贷款计划下的30年财富积累对比&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从图1中可以看出，同&lt;/span&gt;&lt;span&gt;样是贷款30年，如果小Y只交122.5万元的首付，留下剩余的77.5万元作为理财款，那么在还完贷款的30年后，他的财富总额会是2998.5万元；&lt;/span&gt;&lt;span&gt;而如果把200万元全部作为首付，他的财富总额是2874.1万元。&lt;/span&gt;&lt;span&gt;低首付方案在30年后的财富总额多出了100多万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过对比，我们似乎可以得出结论，应该是首付交得越少越好。至少在小Y这个案例的场景下，这个结论肯定是正确的。那么是不是说，在所有场景下，都是首付交得越少越好呢？你可以先思考一下，本文还会详细讲这个问题。接下来，我们看第二个关键问题，贷款期限。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;3&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;到底是贷款30年好，还是贷款15年好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了首付的金额，你可能还纠结贷款期限的问题：&lt;/span&gt;&lt;span&gt;到底是贷款30年好，还是贷款15年好呢？&lt;/span&gt;&lt;span&gt;除此之外，对于那些已经有了房贷的读者，在有余钱的情况下，要不要提前还贷呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要回答这两个问题，我们还是要用程序“说话”。我们继续用小Y的例子：在首付款固定为122.5万元的情况下，我们把贷款期限分别调成30年和15年，看看30年后，两种情况下的最终结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再回到图1，观察第二个柱状图和第三个柱状图后会发现：采用这两种贷款方案，最后得到的结果差异很大，贷款15年的财富总额足足少了140多万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个结论确实有点反直觉，按理说，贷款15年，我们还的房贷利息应该比贷款30年低很多，为什么反而少积累了这么多财富呢？原因先不展开说，后面一起详细分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可能还有读者会说：我已经贷款七八年了，也攒了一些闲钱，我在纠结是否应该早点还房贷。那我们就再验证一下“贷款30年，在第15年时一次性还清剩余贷款”这个方案怎么样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从图1中我们看到，这个方案的财富总额是2943.23万元，比最优方案少了55.27万元。所以和按时还款比起来，提前还款的方案其实没什么优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过这几次验证，似乎说明首付越低，还款时间越长，越有利于我们财富的积累和增长。事实到底是不是这样呢？在这个结论的背后，还隐藏着什么别的关键因素吗？下面，我们就来讨论一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;4&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;影响房贷的终极要素是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不知道你有没有注意到，我们在做上面的计算时，默认了小Y的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;理财能力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是比较强的：&lt;/span&gt;&lt;span&gt;能够坚持用永久组合配置自己的所有理财资金，能够产生稳定的6.8%的年化收益。&lt;/span&gt;&lt;span&gt;其实，这个要求对普通人来说是非常高的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果我们假设小Y是一个极端保守的人，只存货币基金或银行定期，他的理财收益率只有3%，那么结论会不同吗？沿用上面的几个贷款方案，只把理财收益率从6.8%修改为3%，看看结果如何。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图2所示，可以惊奇地发现我们的结论逆转了，首付高、还款时间短成了更合适的选项。其实，如果理财收益率降低到3%，上面关于贷款期限和是否提前还贷的结果也会逆转。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有心的读者可能会问：那其他变量呢？比如个人收入、生活支出的改变，会导致结论反转吗？这里就直接说结论了：不会。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;只有理财收益率和房贷利率的关系，是影响房贷方式的终极要素。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用一句话总结就是，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;如果你的稳定理财利率高于房贷贷款利率，那么首付少付、还款年限长合适；反之，如果你的稳定理财利率低于房贷贷款利率，那么首付多付、还款年限短合适。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46130653266331656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mQf0icvvIdyHiaaWDPvpias3HsLPRlwYXZpuNr4yUy87zAgNiciaXdtpL4Q3bstoPt7L3FzJ6VsCkiaWlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;995&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2603076923076923&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mQf0icvvIdyHiaaWDPvpias3H3eicMTtNCicCRsn4pQ4Y21MMqDq6uJkoxFu8s4DkibbFp3vvfaUV22kDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1625&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;图&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt; &lt;span&gt;理财能力较差情况下的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;年&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;财富积累结果&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;对比&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么会这样呢？&lt;/span&gt;&lt;span&gt;除了程序演算的结果告诉了我们这个事实，从逻辑上其实也不难理解。&lt;/span&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;span&gt;如果你少交了50万元首付款，把这些钱拿去理财，是否能够赚到钱？&lt;/span&gt;&lt;span&gt;赚到的钱能否抵消那多出的50万元贷款产生的房贷利息？&lt;/span&gt;&lt;span&gt;如果能抵消，甚至超出，那你还能获得多余的理财收益；&lt;/span&gt;&lt;span&gt;如果不能，那不如趁早还贷，因为你的理财能力不够强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;5&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;结合实际情况选择合适的贷款方案&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，首付付得少还有一些其他的好处。&lt;/span&gt;&lt;span&gt;例如，流动性资金会多一些，能够抓住未来更多的投资机会，能够有现金应对更多不可知的应急事件，等等。&lt;/span&gt;&lt;span&gt;但是，我们并不能简单地说是首付多更好还是少更好，关键是要根据实际情况制定最适合自己的方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拿我的例子来说，我在做买房决策时会做以下两件事。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一件，根据自己的资金情况，严格地控制购房预算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设我现在有200万元购房款，我要把房价和购房款的比例控制在2倍以内，那我的购房预算就是400万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二件，是尽量少付首付，留一些流动资金。例如，我在真正贷款时，即使可以付50%的首付，也会按照35%的比例付首付。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一方面，我对自己的理财能力有足够的信心，相信自己有能力实现超过4.65%的理财收益；另一方面，我目前在美国工作，这里的房贷利率比国内低得多，只有2.65%（截至2022年1月）。在这种利率情况下，如果理财能力强的话，就应该寻求高贷款加理财的组合方案。反之，如果美国房贷利率不断升高（现在已有升高趋势），当利率高过理财收益率时，这里的结论就要反转。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里再强调一下，要结合自己的实际情况选择合适的贷款方案。如果房贷利率进一步上涨，或者当前其他投资标的的收益都不稳定，再或者你对自己的理财能力没有信心，那么多付首付、还款年限短、提前还贷当然是更划算的选择。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;本节介绍的内容，充分发挥了我们理工男的优势，解决了还房贷这个过程中的很多细节问题。最后，再重复一遍我们的结论：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如果你的稳定理财利率高于房贷贷款利率，那么首付少、还款年限长合适；如果你的稳定理财利率低于房贷贷款利率，那么首付多、还款年限短合适。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;思考题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我知道很多人面临着这样的问题：手头的钱只够付最低的首付，还款压力还特别大，每个月还了贷款，就没有多余的钱理财了。结合本文内容，你觉得有没有什么好的方法，能改变这样的处境？例如，通过改变房贷计划来解决或有什么其他的解决方法？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;7&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p data-autoskip=&quot;1&quot;&gt;本文节选自《理工男谈理财：构建受益一生的财富体系》一书，欢迎阅读本书了解更多相关内容！&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mpcps class=&quot;js_editor_new_cps&quot; data-templateid=&quot;list&quot; data-traceid=&quot;e4b27ef1-e0d5-4c32-90d6-93a4a343e158&quot; data-goodssouce=&quot;1&quot; data-pid=&quot;101_13539555&quot; data-appuin=&quot;2395946309&quot; data-buffer=&quot;{&amp;quot;category_id&amp;quot;:10,&amp;quot;pid&amp;quot;:&amp;quot;101_13539555&amp;quot;,&amp;quot;biz_uin&amp;quot;:&amp;quot;2395946309&amp;quot;,&amp;quot;trace_id&amp;quot;:&amp;quot;e4b27ef1-e0d5-4c32-90d6-93a4a343e158&amp;quot;,&amp;quot;sku_id&amp;quot;:&amp;quot;101_13539555&amp;quot;,&amp;quot;source_id&amp;quot;:2,&amp;quot;source_name&amp;quot;:&amp;quot;京东&amp;quot;,&amp;quot;audit_state&amp;quot;:1,&amp;quot;main_img&amp;quot;:&amp;quot;https://pcm-img.zhls.qq.com/productcenter-cf4fa192--1018824-6988664030369236265/16810561102122022/6647c2681357bbd99beca7467676ee87.jpg&amp;quot;,&amp;quot;product_name&amp;quot;:&amp;quot;理工男谈理财：构建受益一生的财富体系&amp;quot;,&amp;quot;current_price&amp;quot;:10990,&amp;quot;first_category_id&amp;quot;:&amp;quot;10&amp;quot;,&amp;quot;product_label_name_list&amp;quot;:[&amp;quot;京东配送&amp;quot;],&amp;quot;select_tag_name_list&amp;quot;:[],&amp;quot;templateId&amp;quot;:&amp;quot;list&amp;quot;,&amp;quot;appuin&amp;quot;:&amp;quot;2395946309&amp;quot;,&amp;quot;isNewCpsKOL&amp;quot;:1}&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;6.621897810218978&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lvtTPFnuXVWCLJkfzsPTXbiaiaPkG27ACVe6XTGsPxElHSZj2ZQ9wyo6EcTF6DzqMPct5aHmHBiaia7Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;5.883280757097792&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lvtTPFnuXVWCLJkfzsPTXbneCJ2XSibyEHeTicOp3dPwAcDzVvQH3lgd2FmXAMgQ0kxanmul4QxwtQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;131&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;131&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nibLUfTfYZX5HTrpdIheibr0fSjl2zRSlPChntQibntly3KmguL1DYqVTiaexXE8ibLLs2jOCMtuwVGwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-width=&quot;131px&quot; title=&quot;理工男二维码.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;限时下单立减50，快快扫码抢购吧！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p draggable=&quot;true&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;发布：刘恩惠&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;审核：陈歆懿&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3ntPMYAJur3UuYzhSDgO7Puv74VHDtgNjyJbpQvt1gicgSpjrlpDy6BheYoAmtjiaF7cdIuPkuUlFkw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1920&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;29.8961937716263&quot; data-ratio=&quot;0.01574074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3ntPMYAJur3UuYzhSDgO7Pu8DQL5f0FQIuDZC87yrAuNLy4frEdlMeWkthrlzczb0RbMOBQCAwDrA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;如果喜欢本文&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;欢迎&lt;/span&gt; &lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;留言&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;分享至朋友圈&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 三连&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;92644&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt; &lt;strong&gt;热文推荐 &lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;574&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;244&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3m3jibtjia3lCrCvUY6N19QMZ3FjCcpuHouXkdLicQVUiaLicgR8cgSbk7RA8G427GKowhbEvVefuJp53g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;▼点击阅读原文，了解本书详情~&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bd4cf2d1fc4dc2a71985e651afe5c0fb</guid>
<title>Android开机全解析</title>
<link>https://toutiao.io/k/usk1um1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;对于任何操作系统来讲，开机时间的优化都是一个很关键的工作。如果用户每次启动设备都需要等待很长的时间，那么其用户体验是很差的。本文从Android12出发，分以下三部分阐述Android系统的开机优化：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Android开机过程&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分析开机时间&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;开机速度优化实践&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;备注&lt;/em&gt;&lt;br/&gt;&lt;em&gt;1. 文中所有的代码都省略了无关部分，并且省略了省略号；&lt;/em&gt;&lt;br/&gt;&lt;em&gt;2. 由于作者能力有限，难免会有不正确或者不完善的地方。欢迎大家指正。&lt;/em&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. Android开机过程&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;p&gt;要想进行开机速度的优化，首先需要了解开机的详细流程。开机过程从CPU上电开始，到锁屏界面显示出来结束。下图为比较简洁的开机流程图。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.969551282051282&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIw8HK32icu8NX2gO3J211wNIBXkjm4a51W8ghDOn2EEkBypEggKehsYfw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;624&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;再来看一张比较详细的开机流程图&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7559153175591532&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwjbSEmibtUKianXoTA8YAVbuxdV1pBTSuicg887R3vsgOYSIF8icr0Fn2Cw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;803&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总的来说，开机过程分为以下六主要子过程&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.1 Boot ROM&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Boot ROM是硬编码在CPU内部固定地址的一段ROM(在一些较老的系统上也可能使用外挂Boot ROM（相对CPU来说）)，这块代码是由CPU制造商提供。当用户按下电源键或者系统重启之后，触发CPU上电动作，此时其它硬件还未初始化，然而这块ROM就已经可读了。CPU首先执行PBL(Primary Boot Loader，主引导加载程序，固化在ROM上)代码。在必要的硬件初始化之后，Boot ROM开始加载Bootloader到RAM中，然后PC指针跳过去执行bootloader。在加载 Bootloader之前，PBL也可以进行验证。如果验证无法通过，则不会加载运行Bootloader，从而开机失败。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6907378335949764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwIJ5cLmpiaVXbpkDXlXal89Y5W0p0JlYF6Y96V1tUMG0t9IsurANQDBQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;637&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;  CPU刚上电时，CPU 处于未初始化状态，还没有设定内部时钟，此时只有内部 RAM 可用。当电源稳定后会开始执行 Boot ROM 代码。Boot ROM通过系统寄存器映射到 ASIC (Application Specific Integrated Circuit, 即专用集成电路，是指应特定用户要求和特定电子系统的需要而设计、制造的集成电路)中的物理区域来找到boot media，进而可以找到Bootloader&lt;br/&gt;&lt;strong&gt;B.&lt;/strong&gt;  boot  media序列确定之后，Boot ROM 加载 Bootloader到内部 RAM 中，之后Boot ROM代码会跳到Bootloader&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.2Bootloader&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Bootloader是一个特殊的独立于内核的程序，是CPU复位后进入操作系统之前执行的一段代码。Bootloader完成由硬件启动到操作系统启动的过渡，从而为操作系统提供基本的运行环境，如初始化CPU、时钟、堆栈、存储器系统等。Bootloader功能类似于PC机的BIOS程序,其代码与CPU芯片的内核结构、具体型号、应用系统的配置及使用的操作系统等因素有关，因此不可能有通用的bootloader,开发时需要用户根据具体情况进行移植。嵌入式Linux系统中常用的Bootloader有armboot、redboot、blob、U-Boot、Bios-lt、Bootldr等，其中U-Boot是当前比较流行，功能比较强大的Bootloader，可以支持多种体系结构，但相对也比较复杂。硬件初始化完成之后，Bootloader将boot.img(kernel + ramdisk(ramdisk.img中主要是存放android启动后第一个用户进程init可执行文件和init.*.rc等相关启动脚本以及sbin目录下的adbd工具))从flash上copy到RAM里面，然后CPU执行转向kernel。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6907378335949764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwic3xIicTsgrf7EUJ7sJb297icvVV56ibJ8AdFxpoOm9jeGrVw4wkDIFXhw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;637&quot;/&gt;&lt;/p&gt;&lt;p&gt;Android_boot_2_bootloader.png&lt;/p&gt;&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; Bootloader第一阶段首先会检测和设置外部RAM&lt;br/&gt;&lt;strong&gt;B.&lt;/strong&gt; 外部 RAM可用之后，将Bootloader代码加载到外部RAM中&lt;br/&gt;&lt;strong&gt;C.&lt;/strong&gt; Bootloader第二阶段包含了设置文件系统，内存，网络等等。&lt;br/&gt;&lt;strong&gt;D.&lt;/strong&gt; Bootloader查找Linux内核并将其从boot media (或者其他地方，这取决于系统配置) 加载到 RAM 中，并且会配置一些内核启动时需要的启动参数&lt;br/&gt;&lt;strong&gt;E.&lt;/strong&gt;  Bootloader执行完之后会跳转到 Linux 内核执行&lt;br/&gt;一般也可将Bootloader程序的执行分为两个阶段，如下图所示&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8162962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIw4LPkphCYKm4SJ8eA1JwH1icuIC3V4v8bhoiaalia3ExrCNdvnYVwpRlzg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;675&quot;/&gt;&lt;/p&gt;&lt;p&gt;bootloader_1.png&lt;/p&gt;&lt;p&gt;&lt;br/&gt;执行Bootloader程序过程中，如果镜像验证失败、BootLinux (&amp;amp;Info) 函数启动失败或者接收到启动至 fastboot 的命令（比如使用 adb reboot bootloader进行重启、在启动时按下了电源键+下音量键组合）时，会进入到Fastboot模式(Fastboot 是一种电脑通过USB数据线对手机固件进行刷写、擦除/格式化、调试、传输各种指令的固件通信协议, 俗称线刷模式或快速引导模式)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.3Kernel&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Android kernel基于上游 Linux LTS (Linux Long Term Supported，长期支持) 内核。在 Google，LTS 内核会与 Android 专用补丁结合，形成所谓的“Android 通用内核 (ACK，Android Common Kernel)”。较新的 ACK（版本 5.4 及更高版本）也称为 GKI (Generic Kernel Image，通用内核镜像 )内核。GKI项目通过统一核心内核并将 SoC 和板级支持从核心内核移至可加载模块中，解决了内核碎片化问题。GKI 内核为内核模块提供了稳定的内核模块接口 (KMI)，因此模块和内核可以独立进行更新。GKI 具有以下特点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;基于 ACK 来源构建而成。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;是每个架构和每个 LTS 版本的单内核二进制文件以及关联的可加载模块（目前只有适用于 android11-5.4 和 android12-5.4 的 arm64）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;已经过关联 ACK 支持的所有 Android 平台版本的测试。在 GKI 内核版本的生命周期内不会发生功能弃用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;为给定 LTS 中的驱动程序提供了稳定版 KMI。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不包含 SoC 专用代码或板卡专用代码。下图显示了 GKI 内核和供应商模块架构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6145584725536993&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIw4Hs9AFBkwDX1YCNQsYkRFexNDKtI0nRA5Lqia8bQDqvSdA5lUjtg3XQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;838&quot;/&gt;&lt;/p&gt;&lt;p&gt;generic-kernel-image-architecture.png&lt;/p&gt;&lt;p&gt;&lt;br/&gt;由于Android的kernel实际上就是Linux kernel，只是针对移动设备做了一些优化，所以与其它Linux kernel的启动方式大同小异，都是对start_kernel函数的调用和执行。Kernel主要工作内容为设置缓存、被保护存储器、计划列表，加载驱动，启动kernel守护，挂载根目录，初始化输入输出，开启中断，初始化进程表等。当内核完成这些系统设置后，接下来在系统文件中寻找”init”文件，然后启动root进程或者系统的第一个进程。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Kernel启动过程分为两个阶段：&lt;br/&gt;1）内核引导阶段。通常使用汇编语言编写，主要检查内核与当前硬件是否匹配。这部分也与硬件体系结构相关。&lt;br/&gt;2）内核启动阶段。引导阶段结束前，将调用start_kernel()进入内核启动阶段。内核启动阶段相关的代码主要位于kernel/init/main.c。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6907378335949764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwxJqHesoUpR6Ku2NOJKskFtVfGmjUrN5qVGtaFUeKuWoFgUu5pSx2XQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;637&quot;/&gt;&lt;/p&gt;&lt;p&gt;Android_boot_3_kernel.png&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;A.&lt;/strong&gt; 内存管理单元和高速缓存初始化完成之后，系统便可以使用虚拟内存和启动用户空间进程&lt;br/&gt;&lt;strong&gt;B.&lt;/strong&gt;  内核在根目录寻找初始化程序（/system/core/init），执行该程序以启动init进程&lt;br/&gt;Kernel启动的核心函数是start_kernel函数，它完成了内核的大部分初始化工作。这个函数在最后调用了reset_init函数进行后续的初始化。reset_init函数最主要的任务就是启动内核线程kernel_init。kernel_init函数将完成设备驱动程序的初始化，并调用init_post函数启动用户空间的init进程。到init_post函数为止，内核的初始化已经基本完成。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6401028277634961&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwNPoJzCv1EntC3hfUj3KcanvibzhIM1F44FlErgjTAjz7ObNesMIvkag/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;389&quot;/&gt;&lt;/p&gt;&lt;p&gt;boot_kernel.png&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.4 init进程&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;用户空间的第一个进程便是init进程，进程号为1。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13020833333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIw64GeJLy3WMWpeQhMxrdFhPTicMmD5ibHeU2JKUcMF5DgSwzibLkURo2Mw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;768&quot;/&gt;&lt;/p&gt;&lt;p&gt;init_process.png&lt;/p&gt;&lt;p&gt;当系统启动完成之后，init进程会作为守护进程监视其它进程。在Linux中所有的进程都是由init进程直接或间接fork出来的。在init进程启动的过程中，会相继启动servicemanager(binder服务管理者)、Zygote进程。而Zygote又会创建system_server进程以及app进程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6312769010043041&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwdWVpYEk6afuibynLVXTq62DjHrbwub51mzKyO2OAPONWxsYGaEdJ9gw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;697&quot;/&gt;&lt;/p&gt;&lt;p&gt;Android_boot_4_init.png&lt;/p&gt;&lt;p&gt;&lt;br/&gt;对于init进程的功能分为4部分：&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;system/core/&lt;span class=&quot;code-snippet__keyword&quot;&gt;init&lt;/span&gt;/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -main.cpp&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -&lt;span class=&quot;code-snippet__keyword&quot;&gt;init&lt;/span&gt;.cpp&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -parser.cpp&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/system/core/rootdir/&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  -&lt;span class=&quot;code-snippet__keyword&quot;&gt;init&lt;/span&gt;.rc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;init进程的入口为main.cpp类的main方法。&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;if&lt;/span&gt; __has_feature(address_sanitizer)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     __asan_set_error_report_callback(AsanReportCallback);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;code-snippet__built_in&quot;&gt;strcmp&lt;/span&gt;(basename(argv[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ueventd&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ueventd_main(argc, argv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(argc &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;code-snippet__built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;subcontext&quot;&lt;/span&gt;)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            android::base::InitLogging(argv, &amp;amp;android::base::KernelLogger);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; BuiltinFunctionMap function_map;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; SubcontextMain(argc, argv, &amp;amp;function_map);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;code-snippet__built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;selinux_setup&quot;&lt;/span&gt;)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; SetupSelinux(argv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;code-snippet__built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;second_stage&quot;&lt;/span&gt;)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; SecondStageMain(argc, argv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; FirstStageMain(argc, argv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要执行了三步&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;FirstStageMain&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(REBOOT_BOOTLOADER_ON_PANIC){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        InstallRebootSignalHandlers();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    boot_clock::time_point start_time = boot_clock::now();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::pair&amp;lt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; errors;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; CHECKCALL(x) \&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;if&lt;/span&gt; (x != 0) errors.emplace_back(#x &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot; failed&quot;&lt;/span&gt;, errno);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    umask(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(clearenv());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(setenv(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;PATH&quot;&lt;/span&gt;, _PATH_DEFPATH, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(mount(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/dev&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;, MS_NOSUID, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;mode=0755&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(mkdir(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/dev/pts&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0755&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(mkdir(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/dev/socket&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0755&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(mount(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;devpts&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/dev/pts&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;devpts&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; MAKE_STR(x) __STRING(x)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(mount(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/proc&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;proc&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hidepid=2,gid=&quot;&lt;/span&gt; MAKE_STR(AID_READPROC)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;undef&lt;/span&gt; MAKE_STR&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(chmod(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/proc/cmdline&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0440&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;gid_t&lt;/span&gt; groups[] = {AID_READPROC};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(setgroups(arraysize(groups), groups));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(mount(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;sysfs&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/sys&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;sysfs&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CHECKCALL(mount(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;selinuxfs&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/sys/fs/selinux&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;selinuxfs&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    InitKernelLogging(argv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* path = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/system/bin/init&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* args[] = {path, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;selinux_setup&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nullptr&lt;/span&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    execv(path, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;**&amp;gt;(args));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    PLOG(FATAL) &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;execv(\&quot;&quot;&lt;/span&gt; &amp;lt;&amp;lt; path &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;\&quot;) failed&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要通过mount挂载对应的文件系统，mkdir创建对应的文件目录，并配置相应的访问权限。&lt;br/&gt;需要注意的是，这些文件只是在应用运行的时候存在，一旦应用运行结束就会随着应用一起消失。&lt;br/&gt;挂载的&lt;strong&gt;文件系统&lt;/strong&gt;主要有四类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;tmpfs: 一种虚拟内存文件系统，它会将所有的文件存储在虚拟内存中。由于tmpfs是驻留在RAM的，因此它的内容是不持久的。断电后，tmpfs 的内容就消失了，这也是被称作tmpfs的根本原因。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;devpts: 为伪终端提供了一个标准接口，它的标准挂接点是/dev/pts。只要pty(pseudo-tty, 虚拟终端)的主复合设备/dev/ptmx被打开，就会在/dev/pts下动态的创建一个新的pty设备文件。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;proc: 也是一个虚拟文件系统，它可以看作是内核内部数据结构的接口，通过它我们可以获得系统的信息，同时也能够在运行时修改特定的内核参数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;sysfs: 与proc文件系统类似，也是一个不占有任何磁盘空间的虚拟文件系统。它通常被挂接在/sys目录下。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在FirstStageMain还会通过InitKernelLogging(argv)来初始化log日志系统。此时Android还没有自己的系统日志，采用kernel的log系统，打开的设备节点/dev/kmsg， 那么可通过cat /dev/kmsg来获取内核log。&lt;/p&gt;&lt;p&gt;最后会通过execv方法传递对应的path与下一阶段的参数selinux_setup。&lt;br/&gt;&lt;strong&gt;SetupSelinux&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SetupSelinux&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    InitKernelLogging(argv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (REBOOT_BOOTLOADER_ON_PANIC) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        InstallRebootSignalHandlers();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SelinuxSetupKernelLogging();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SelinuxInitialize();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (selinux_android_restorecon(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/system/bin/init&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        PLOG(FATAL) &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;restorecon failed of /system/bin/init failed&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* path = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/system/bin/init&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* args[] = {path, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;second_stage&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nullptr&lt;/span&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    execv(path, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;**&amp;gt;(args));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    PLOG(FATAL) &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;execv(\&quot;&quot;&lt;/span&gt; &amp;lt;&amp;lt; path &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;\&quot;) failed&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这阶段主要是初始化 SELinux。SELinux 是安全加强型 Linux，能够很好的对全部进程强制执行访问控制，从而让 Android 更好的保护和限制系统服务、控制对应用数据和系统日志的访问，提高系统安全性。&lt;br/&gt;接下来调用execv进入到最后阶段SecondStageMain。&lt;br/&gt;&lt;strong&gt;SecondStageMain&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SecondStageMain&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SetStdioToDevNull(argv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    InitKernelLogging(argv);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    property_init();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Epoll epoll;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    InstallSignalFdHandler(&amp;amp;epoll);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    property_load_boot_defaults(load_debug_prop);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    StartPropertyService(&amp;amp;epoll);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       subcontexts = InitializeSubcontexts();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ActionManager&amp;amp; am = ActionManager::GetInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ServiceList&amp;amp; sm = ServiceList::GetInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    LoadBootScripts(am, sm);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    am.QueueEventTrigger(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;early-init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    am.QueueEventTrigger(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    am.QueueBuiltinAction(InitBinder, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;InitBinder&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    am.QueueEventTrigger(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;late-init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        am.ExecuteOneCommand();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;auto&lt;/span&gt; next_process_action_time = HandleProcessActions();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SecondStageMain的主要工作总结&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;使用epoll对init子进程的信号进行监听&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;初始化系统属性，使用mmap共享内存&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;开启属性服务，并注册到epoll中&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;加载系统启动脚本&quot;init.rc&quot;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;解析启动脚本，启动相关服务&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;重点介绍下init.rc文件的解析&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;LoadBootScripts&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ActionManager&amp;amp; action_manager, ServiceList&amp;amp; service_list)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Parser parser = CreateParser(action_manager, service_list);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; bootscript = GetProperty(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ro.boot.init_rc&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (bootscript.empty()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        parser.ParseConfig(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/init.rc&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!parser.ParseConfig(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/system/etc/init&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            late_import_paths.emplace_back(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/system/etc/init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!parser.ParseConfig(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/product/etc/init&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            late_import_paths.emplace_back(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/product/etc/init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!parser.ParseConfig(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/product_services/etc/init&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            late_import_paths.emplace_back(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/product_services/etc/init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!parser.ParseConfig(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/odm/etc/init&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            late_import_paths.emplace_back(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/odm/etc/init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!parser.ParseConfig(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/vendor/etc/init&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            late_import_paths.emplace_back(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/vendor/etc/init&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        parser.ParseConfig(bootscript);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过ParseConfig来解析init.rc配置文件。.rc文件以行为单位，以空格为间隔，以#开始代表注释行。.rc文件主要包含Action、Service、Command、Options、Import，其中对于Action和Service的名称都是唯一的，对于重复的命名视为无效。init.rc中的Action、Service语句都有相应的类来解析，即ActionParser、ServiceParser。以下为init.rc配置文件的部分内容。&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;system/core/rootdir/init.rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;/init.environ.rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;/init.usb.rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;/init.${ro.hardware}.rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;/init.${ro.zygote}.rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;/init.trace.rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;early-init&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;ueventd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;/mnt 0775 root system&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;init&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;tmpfs none /sys/fs/cgroup mode=0750,uid=0,gid=1000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;/sys/fs/cgroup/memory 0750 root system&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;cgroup none /sys/fs/cgroup/memory memory&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;property:sys.boot_from_charger_mode=1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;class_stop&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;charger&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;late-init&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;ueventd /sbin/ueventd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;core&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;critical&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;seclabel&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;u:r:ueventd:s0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;logd /system/bin/logd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;core&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;logd stream 0666 logd logd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;logdr seqpacket 0666 logd logd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;logdw dgram 0222 logd logd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;seclabel&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;u:r:logd:s0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;console /system/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;core&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;console&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;disabled&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;shell&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;seclabel&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;u:r:shell:s0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;adbd /sbin/adbd --root_seclabel=u:r:su:s0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;core&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;adbd stream 660 system system&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;disabled&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;seclabel&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;u:r:adbd:s0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;servicemanager /system/bin/servicemanager&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;core&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;system&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;system&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;critical&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart healthd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart zygote&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart media&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart surfaceflinger&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart drm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;late-init&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;early-fs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;fs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;post-fs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;late-fs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;post-fs-data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;load_persist_props_action&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;这里启动zygote-start&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;zygote-start&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;firmware_mounts_complete&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;early-boot&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;boot&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，在解析init.rc的配置中，在late-init阶段启动了Zygote进程。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.5 Zygote&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6312769010043041&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwicvtEjUtcyCDUKTqF9EIicBqOmCwKqDiaQLnLMZWTVvSyGKmFLug72PVQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;697&quot;/&gt;&lt;/p&gt;&lt;p&gt;Android_boot_5_zygote.png&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Zygote进程是Android中所有Java进程的父进程。Zygote进程在Init进程启动过程中被以service服务的形式启动。Zygote进程相关的.rc配置文件为init.zygote64.rc或者init.zygote32.rc。以init.zygote64.rc为例，其内容如下&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;system/core/rootdir/init.zygote64.rc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;main&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;-20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;root&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;root readproc reserved_disk&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;zygote stream 660 root system&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;usap_pool_primary stream 660 root system&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;exec_background - system system -- /ssystem/bin/vdc volume abort_fuse&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;write /sys/power/state on&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart audioserver&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart cmeraserver&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart media&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;restart netd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;onrestart&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;setprop sys.android.reboot 1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;writepid&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;/dev/cpuset/foreground/tasks&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;critical&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;window=${zygote.critical_window.minute:-off} target=zygote-fatal&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;init进程解析init.zygote64.rc配置文件之后，会调用app_process&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; argv[]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(zygote){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         runtime.start(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.android.internal.os.ZygoteInit&quot;&lt;/span&gt;, args, zygote);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行到frameworks/base/core/jni/AndroidRuntime.cpp的start()方法&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; AndroidRuntime::start(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* className, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; Vector&amp;lt;String8&amp;gt;&amp;amp; options, &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; zygote)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ALOGD(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; START %s uid %d &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;\n&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; Name！= &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;？&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; Name：&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;(unknown)&quot;&lt;/span&gt;, getuid() );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        LOG_EVENT_LONG(LOG_BOOT_PROGRESS_START, ns2ms(systemTime(SYSTEM_TIME_MONOTONIC)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(startVm(&amp;amp;mJavaVM, &amp;amp;env, zygote, primaryZygote) != &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        onVmCreated(env);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        env.CallStaticVoidMethod(startClass, startMeth, strArray)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AndroidRuntime.cpp的start方法主要做了以下工作：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;加载libart.so&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;启动虚拟机&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;加载注册JNI方法&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;启动Zygote&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;执行ZygoteInit.java的main()方法&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@UnsupportedAppUsage&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; argv[]) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (startSystemServer) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Runnable r = forkSystemServer(abiList, socketName, zygoteServer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (r != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          r.run();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Log.i(TAG, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Accepting command socket connections&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    caller = zygoteServer.runSelectLoop(abiList);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (caller != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        caller.run();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Zygote进程主要做了以下工作&lt;/p&gt;&lt;p&gt;zygote进程在fork子进程的时候可以共享虚拟机和资源，从而加快进程的启动速度，节省内存。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.6 SystemServer&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5590851334180432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwvic0ic79r7ENrIibPk0ZabpL7AGfzJXXuJz5VibDDzq1VIpyhdP94hjyXQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;787&quot;/&gt;&lt;/p&gt;&lt;p&gt;Android_boot_6_systemserver.png&lt;/p&gt;&lt;p&gt;SystemServer进程由Zygote进程fork而来，是Zygote孵化出的第一个进程。SystemServer和Zygote进程是Android Framework层的两大重要进程。SystemServer负责启动和管理整个Java frameWork。SystemServer进程在开启的时候，会初始化AMS、WMS、PMS等关键服务。同时会加载本地系统的服务库，调用createSystemContext()创建系统上下文，创建ActivityThread及开启各种服务等等。&lt;/p&gt;&lt;p&gt;SystemServer的启动相关代码如下&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SystemServer().run();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Looper.prepareMainLooper();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.loadLibrary(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;android_servers&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        createSystemContext();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mSystemServiceManager = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SystemServiceManager(mSystemContext);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mSystemServiceManager.setStartInfo(mRuntimeRestart,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                mRuntimeStartElapsedTime, mRuntimeStartUptime);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SystemServerInitThreadPool.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        traceEnd();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        traceBeginAndSlog(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;StartServices&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        startBootstrapServices();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        startCoreServices();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        startOtherServices();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SystemServerInitThreadPool.shutdown();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable ex) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Slog.e(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;System&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;******************************************&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Slog.e(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;System&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;************ Failure starting system services&quot;&lt;/span&gt;, ex);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; ex;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        traceEnd();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Looper.loop();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Main thread loop unexpectedly exited&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，SystemServer最重要的工作就是通过执行三个方法来启动所有服务&lt;/p&gt;&lt;p&gt;分别对应引导服务、核心服务和其他服务：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;引导服务(Bootstrap services)：这类服务包括 Installer，ActivityManagerService&lt;br/&gt;PowerManagerService, DisplayManagerService, PackageManagerService, UserManagerService等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;核心服务(Core services )：这类服务包括 LightsService, BatteryService, UsageStatsServtce,&lt;br/&gt;WebViewUpdateService等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;其他服务：所有其它服务&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在startOtherServices()方法中会启动SystemUI，之后SystemServer通知AMS系统已准备好，此时AMS启动桌面并且发送BOOT_COMPLETED广播。至此，系统层面启动流程结束。&lt;/p&gt;&lt;p&gt;通过下图再回顾下整个开机流程&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9091666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwgSHf5SdPFXvVxzdNZHjWeNOtkGg2WgDuc1nVuo3yxyZGbJ4lu8aibwA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 分析开机时间&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;p&gt;要想进行开机速度的优化，我们需要分析开机时间的分布，从而找出异常耗时的地方，从而进行实际的优化工作。下面介绍如何分析开机时间。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.1 分析开机日志&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Android的log系统是独立于Linux内核log系统的. Android系统把Log分为了四类，不同的类别记录不同的Log信息，默认通过logcat抓取的是main信息：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2863247863247863&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwa7BLazGLzRJhNQ49NOBYvRYKRIRn7tS7icfBasOxEqPORFiaP6k3c26w/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;702&quot;/&gt;&lt;/p&gt;&lt;p&gt;init_process_log.png&lt;/p&gt;&lt;p&gt;行末数字即为此刻距开机时刻的时间间隔。每行代表开机的各个关键阶段。&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;阶段&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;boot_progress_start&lt;/td&gt;&lt;td&gt;系统进入用户空间，标志着kernel启动完成&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_preload_start&lt;/td&gt;&lt;td&gt;Zygote启动&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_preload_end&lt;/td&gt;&lt;td&gt;Zygote结束&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_system_run&lt;/td&gt;&lt;td&gt;SystemServer ready,开始启动Android系统服务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_pms_start&lt;/td&gt;&lt;td&gt;PMS开始扫描安装的应用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_pms_system_scan_start&lt;/td&gt;&lt;td&gt;PMS先行扫描/system目录下的安装包&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_pms_data_scan_start&lt;/td&gt;&lt;td&gt;PMS扫描/data目录下的安装包&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_pms_scan_end&lt;/td&gt;&lt;td&gt;PMS扫描结束&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_pms_ready&lt;/td&gt;&lt;td&gt;PMS就绪&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_ams_ready&lt;/td&gt;&lt;td&gt;AMS就绪&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;boot_progress_enable_screen&lt;/td&gt;&lt;td&gt;AMS启动完成后开始激活屏幕，从此以后屏幕才能响应用户的触摸，它在WindowManagerService发出退出开机动画的时间节点之前&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sf_stop_bootanim&lt;/td&gt;&lt;td&gt;SF设置service.bootanim.exit属性值为1，标志系统要结束开机动画了&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;wm_boot_animation_done&lt;/td&gt;&lt;td&gt;开机动画结束，这一步用户能直观感受到开机结束&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;各行log对应的打印代码为&lt;br/&gt;&lt;strong&gt;boot_progress_start&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; AndroidRuntime::start(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* className, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; Vector&amp;lt;String8&amp;gt;&amp;amp; options, &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt; zygote)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; options.size(); ++i) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (options[i] == startSystemServer) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            primary_zygote = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; LOG_BOOT_PROGRESS_START = &lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           LOG_EVENT_LONG(LOG_BOOT_PROGRESS_START,  ns2ms(systemTime(SYSTEM_TIME_MONOTONIC)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_preload_start&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] argv&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(!enableLazyPreload){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        bootTimingsTraceLog.traceBegin(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ZygotePreload&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        EventLog.writeEvent(BOOT_PROGRESS_PRELOAD_START, SystemClock.uptimeMillis());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        preload(bootTimingsTraceLog);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        EventLog.writeEvent(BOOT_PROGRESS_PRELOAD_END, SystemClock.uptimeMillis());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        bootTimingsTraceLog.traceEnd();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_system_run&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   Slog.i(TAG, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Entered the Android system server!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; uptimeMillis = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN, uptimeMillis);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!mRuntimeRestart){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            FrameworkStatsLog.write(FrameworkStatsLog.BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FrameworkStatsLog.BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__SYSTEM_SERVER_INIT_START,uptimeMillis);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_pms_start&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PackageManagerService&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Injector injector, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; onlyCore, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; factoryTest)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    LockGuard.installLock(mLock, LockGuard.INDEX_PACKAGES);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START,SystemClock.uptimeMillis()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    );&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_pms_system_scan_start&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PackageManagerService&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Injector injector, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; onlyCore, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; factoryTest)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; startTime = SystemClock.uptimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START, startTime);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_pms_data_scan_start&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PackageManagerService&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Injector injector, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; onlyCore, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; factoryTest)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; systemScanTime = SystemClock.uptimeMillis() - startTime;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; systemPackagesCount = mPackages.size();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Slog.i(TAG, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Finished scanning system apps. Time: &quot;&lt;/span&gt; + systemScanTime&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; ms, packageCount: &quot;&lt;/span&gt; + systemPackagesCount&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; , timePerPackage: &quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    + (systemPackagesCount == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; : systemScanTime / systemPackagesCount)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; , cached: &quot;&lt;/span&gt; + cachedSystemApps);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mIsUpgrade &amp;amp;&amp;amp; systemPackagesCount &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            FrameworkStatsLog.write(FrameworkStatsLog.BOOT_TIME_EVENT_DURATION_REPORTED,                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;BOOT_TIME_EVENT_DURATION__EVENT__OTA_PACKAGE_MANAGER_SYSTEM_APP_AVG_SCAN_TIME,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     systemScanTime / systemPackagesCount);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!mOnlyCore) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SystemClock.uptimeMillis());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            scanDirTracedLI(sAppInstallDir, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, scanFlags | SCAN_REQUIRE_KNOWN, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        packageParser, executorService);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_pms_scan_end&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PackageManagerService&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Injector injector, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; onlyCore, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; factoryTest)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mPackageUsage.read(mSettings.mPackages);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mCompilerStats.read();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    SystemClock.uptimeMillis());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Slog.i(TAG, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Time to scan packages: &quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    + ((SystemClock.uptimeMillis()-startTime)/&lt;span class=&quot;code-snippet__number&quot;&gt;1000f&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; seconds&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_pms_ready&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;PackageManagerService&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Injector injector, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; onlyCore, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; factoryTest)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        t.traceBegin(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;write settings&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mSettings.writeLPr();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        t.traceEnd();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY, SystemClock.uptimeMillis());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_ams_ready&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/ frameworks/base&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/services/core&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/java/com&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/android/server&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/am/&lt;/span&gt;ActivityManagerService.java&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public void systemReady(final Runnable goingCallback, @NonNull TimingsTraceAndSlog t) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        t.traceEnd();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        EventLog.writeBootProgressAmsReady(SystemClock.uptimeMillis());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;boot_progress_enable_screen&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;enableScreenAfterBoot&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; booted)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        writeBootProgressEnableScreen(SystemClock.uptimeMillis());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindowManager.enableScreenAfterBoot();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; (mGlobalLock) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            updateEventDispatchingLocked(booted);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;sf_stop_bootanim&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; SurfaceFlinger::bootFinished()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         property_set(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;service.bootanim.exit&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         LOG_EVENT_LONG(LOGTAG_SF_STOP_BOOTANIM, ns2ms(systemTime(SYSTEM_TIME_MONOTONIC)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;wm_boot_animation_done&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/ frameworks/base&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/services/core&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/java/com&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/android/server&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/wm/&lt;/span&gt;WindowManagerService.java&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;private void performEnableScreen() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        EventLogTags.writeWmBootAnimationDone(SystemClock.uptimeMillis());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Trace.asyncTraceEnd(TRACE_TAG_WINDOW_MANAGER,   &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Stop bootanim&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以将测试机与对比机抓取的此log数据制作成表格，制作成折线图，可以更加直观的观察到耗时异常的流程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36333333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIw7RH011r933veQJM1eIfEM1BNqo1xbJQQ9JoQZ1fWFlDJSSnn251KVQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;boot_time_chart_1.png&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过&quot;boot_progress_&quot;关键字分析日志，粒度较大，只能定位出大概的耗时流程，之后还需分析流程内部具体的耗时情况。开机各流程内部也有相应的日志，可以进行更加细致的分析。例如在SystemServiceManager.java类中启动服务时，会打印启动某项服务的日志。通过查看某个服务A与下一个服务的日志时间，可以计算出启动服务A的耗时。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwvibTjaztgCWYbgwvFToC7icolO9hsBGvicmYraWuMFlF7eeNb9xWuG8ZQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;a0ca34f607cf9c51134adcfebc515333.png&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &amp;lt;T &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; SystemService&amp;gt; T startService(Class&amp;lt;T&amp;gt; serviceClass)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            final &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; name = serviceClass.getName();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Slog.i(TAG, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Starting &quot;&lt;/span&gt; + name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;StartService &quot;&lt;/span&gt; + name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                Constructor&amp;lt;T&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;constructor&lt;/span&gt; = serviceClass . getConstructor (&lt;span class=&quot;code-snippet__params&quot;&gt;Context.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                service = &lt;span class=&quot;code-snippet__keyword&quot;&gt;constructor&lt;/span&gt;.newInstance(&lt;span class=&quot;code-snippet__params&quot;&gt;mContext&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } catch ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                startService(&lt;span class=&quot;code-snippet__params&quot;&gt;service&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return service;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } finally {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Trace.traceEnd(&lt;span class=&quot;code-snippet__params&quot;&gt;Trace.TRACE_TAG_SYSTEM_SERVER&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用bootchart工具可以进行更加直观的分析。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.2 使用bootchart工具&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;bootchart是一个能对GNU/Linux boot过程进行性能分析并把结果直观化的开源工具，在系统启动过程中自动收集 CPU 占用率、磁盘吞吐率、进程等信息，并以图形方式显示分析结果，可用作指导优化系统启动过程。BootChart包含数据收集工具和图像产生工具，数据收集工具在原始的BootChart中是独立的shell程序，但在Android中，数据收集工具被集成到了init程序中。&lt;br/&gt;以下涉及到的命令，请自行应该参数的path。&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;do_bootchart_start&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; start;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!android::base::ReadFileToString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/data/bootchart/enabled&quot;&lt;/span&gt;, &amp;amp;start)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       LOG(VERBOSE) &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Not bootcharting&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   g_bootcharting_thread = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::thread(bootchart_thread_main);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以只要生成/data/bootchart/enabled文件即可&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__attr&quot;&gt;adb&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;shell touch /data/bootchart/enabled&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;adb&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;reboot&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在设备启动后，提取启动图表：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;adb&lt;/span&gt;  pull /data/bootchart&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取到bootchart数据之后进行打包&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-czf&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;bootchart&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.tgz&lt;/span&gt; *&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-jar&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;bootchart&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.jar&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;bootchart&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.tgz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5126262626262625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwCD87mficBiaIga4ibIkgTicZunJF723jz28IuSSQUkPiaOt0MicIjd20xicgw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;396&quot;/&gt;&lt;/p&gt;&lt;p&gt;Bootchart.png&lt;/p&gt;&lt;p&gt;从生成的图片可以更加直观详细的看到开机耗时以及硬件使用情况。个人认为，bootchart的分析应该是以PIXEL或者开机速度正常机子的bootchart为参考来对照分析。使用完之后，记得删除enabled文件以防每次开机都收集启动数据。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.3 抓取boottrace&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;抓取开机阶段的trace，也就是boottrace，是一种重要的分析开机的手段。抓取方式如下：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;将手机中的atrace.rc拉取下来，并备份；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__attribute&quot;&gt;adb&lt;/span&gt; pull /system/etc/init/atrace.rc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;在文件atrace.rc末尾添加&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; on property:persist.debug.atrace.boottrace=1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;start&lt;/span&gt; boottrace&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    service boottrace /&lt;span class=&quot;code-snippet__keyword&quot;&gt;system&lt;/span&gt;/&lt;span class=&quot;code-snippet__keyword&quot;&gt;bin&lt;/span&gt;/atrace &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    disabled&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    oneshot&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;将修改后的atrace.rc文件push到手机里面&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; adb &lt;span class=&quot;code-snippet__keyword&quot;&gt;push&lt;/span&gt; atrace.rc /&lt;span class=&quot;code-snippet__keyword&quot;&gt;system&lt;/span&gt;/etc/init/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;打开抓取boottrace的属性开关&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;adb&lt;/span&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;setprop&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.debug&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.atrace&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.boottrace&lt;/span&gt; 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;5&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;重启手机&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;手机启动完成之后等待几秒，关闭boottrace属性开关&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;adb&lt;/span&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;setprop&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.debug&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.atrace&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.boottrace&lt;/span&gt; 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;8&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;生成boottrace文件&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; adb shell atrace --async_stop -z -c -o /data/&lt;span class=&quot;code-snippet__built_in&quot;&gt;local&lt;/span&gt;/tmp/boot_trace&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;10&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;拉取boottrace日志文件&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; adb  pull /data/&lt;span class=&quot;code-snippet__built_in&quot;&gt;local&lt;/span&gt;/tmp/boot_trace&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以通过分析boot_trace文件来分析了。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 开机速度优化实践&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;p&gt;在Android S升级Android T的过程中，遇到一个开机速度的问题。同一个项目的手机，在升级Android T之后，比之前的开机时间大概要多18秒左右。&lt;br/&gt;首先在手机开机之后，查看boot_progress相关日志如下&lt;/p&gt;&lt;p&gt;&lt;em aria-label=&quot;icon: copy&quot;&gt;&lt;svg viewbox=&quot;64 64 896 896&quot; focusable=&quot;false&quot; data-icon=&quot;copy&quot; fill=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;/&gt;&lt;/svg&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:35.244 I/boot_progress_start( 1059): 4040&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:35.934 I/boot_progress_preload_start( 1059): 4730&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:37.255 I/boot_progress_preload_end( 1059): 6051&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:37.636 I/boot_progress_system_run( 2221): 6432&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:38.260 I/boot_progress_pms_start( 2221): 7056&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:38.473 I/boot_progress_pms_system_scan_start( 2221): 7269&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:38.797 I/boot_progress_pms_data_scan_start( 2221): 7593&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:38.803 I/boot_progress_pms_scan_end( 2221): 7599&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:38.894 I/boot_progress_pms_ready( 2221): 7690&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:58.006 I/boot_progress_ams_ready( 2221): 26802&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;07-15 04:13:59.164 I/boot_progress_enable_screen( 2221): 27960&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span/&gt;&lt;br/&gt;&lt;span aria-hidden=&quot;true&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现，在boot_progress_pms_ready到boot_progress_ams_ready之间，耗时近20秒，严重超时。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;确定了大体的耗时异常点之后，我们抓取boottrace再进行进一步的分析。&lt;br/&gt;由于PMS和AMS服务军运行再SystemServer进程当中，所以我们重点关注SystemServer进程的运行情况。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24416666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwVljHzJqblQhibtCBz4KQBAeQCNskdlsQyC6bduVSOriaYKDV84GXNcQA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;9d055601ad4ebe5eddec1aff0249da2c.png&lt;/p&gt;&lt;p&gt;查看trace文件发现，主要是因为在启动AudioService的时候耗时较长。startService相关的日志也表明了这一点。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12583333333333332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/yyLvy204xWibt5Ih0icthSOQgz1XcmYqIwcOKX0RyoSMm5a01TcpZiaoeiaRfbpXsnWsC0qEYOogAEBAJTR0qDiaARw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;be264267394792edc34e531924092587.png&lt;/p&gt;&lt;p&gt;&lt;br/&gt;可见，启动AudioService耗时15.5秒左右。通过在AudioService相关的代码里面添加log，最终定位到为AudioService驱动在Android T上的问题。转交Audio模块处理之后，开机时间正常。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;作者：努比亚技术团队&lt;br/&gt;链接：https://www.jianshu.com/p/3f23e027b591&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注我获取更多知识或者投稿&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yyLvy204xW9Uibw4qQxibOBKL1DicLX10o3w57n09uKDowd4ZDjRIgSMUn9cqY6ia77Ys3VfZjG8LUviacGSr0DFIvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-ratio=&quot;0.20555555555555555&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yyLvy204xW9Uibw4qQxibOBKL1DicLX10o3gibpbVwAGtDUV15FZianjGs1whAZ2gg71IV6J7zQpQhtQRcSyHrGJbxg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;180&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cf220873f82dcc9289102b84ddfa2df5</guid>
<title>如何做好全球化的前端性能度量？</title>
<link>https://toutiao.io/k/kzex89q</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWs1NJylovNEmBNS46YI3PXrNhBtqGjqhlh7Shme9rBYzZL7x5sPuaLQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、前言&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ICBU 作为海外数字商业板块的常青树，扎根于全球化的土壤里，如何做好全球用户体验、提升页面性能已经成为了一个老生常谈的话题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;面对日益复杂的网络环境，如何做好全球化的前端性能度量，同时更进一步，基于度量做到让前端开发者更容易发现性能问题、问题都能有解法、解决后能看到效果，本文将根据多年前端性能优化的经验，从如下三个角度进行分享。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、性能指标采集&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. CWV 是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;核心 Web 指标是适用于所有网页的 Web 指标子集，每位网站所有者都应该测量这些指标，并且这些指标还将显示在所有 Google 工具中。每项核心 Web 指标代表用户体验的一个不同方面，能够进行实际测量，并且反映出以用户为中心的关键结果的真实体验。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;CWV，全称（Core Web Vitals，核心 Web 指标），包含 LCP、CLS、FID 三个指标，分别对应加载性能、交互性和视觉稳定性。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2571428571428571&quot; data-type=&quot;png&quot; data-w=&quot;1470&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWNJRoeQxHzqIRNdBE5myrlL4hWD0bx7ZNL5aAo0bDuZtRWhAKTOicJhw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 为什么使用 FCP + CWV 作为核心指标？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;选择使用 FCP + CWV 作为核心指标有以下几点考虑：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们需要一个统一的、标准的、符合行业规范的【指标】来对全球化场景下的前端性能进行度量；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们需要一个合理的区间来对当下的性能状态进行更加直观的展示（优秀、良好、较差）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;【指标】本身需要能够客观的反应页面的状态，尽量减少主观性，且能指导页面优化方向；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 为什么【自定义首屏】不再被作为核心指标？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;出于历史原因，ICBU 很长一段时间都使用【自定义首屏】（exposed_time）来作为衡量页面性能的关键指标，但随着时间推移，我们发现了【自定义首屏】的一些弊端，包括但不限于：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;容易作弊：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;【自定义首屏】需要在代码中手动上报，上报的时机完全取决于业务开发同学，数据可信度不高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;缺乏共识：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;每个团队对于首屏的定义都不相同，无法用统一的阈值来衡量所有场景的性能，各团队之间无法拉通、对齐，且与业内公认指标无法进行关联，比如 SEO 场景，自定义首屏优化后无法反馈 SEO 是否优化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;优化困难：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;【自定义首屏】只能衡量“首屏时间”，当该指标较差需要优化时，开发者往往无从下手，因为导致首屏时间变长的因素过多，需要花费大量精力进行问题排查、性能优化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;指标过于单一：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在聊用户体验的时候，关注的不应该仅仅是页面加载的时间，而是页面加载到用户与页面交互的整个生命周期，除了加载性能以外，还应该关注用户交互延迟、页面布局偏移、核心元素加载时机等多维度的指标。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 为什么要在 CWV 的基础上增加 FCP 指标？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2648401826484018&quot; data-type=&quot;png&quot; data-w=&quot;876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWaVHAqu5nSulLCpia7mXbMjCFskK3v7Sd41URon6X6PvhIxYCHHwwBKA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通常来讲，【LCP】已经反应大部分场景页面加载性能的情况，但是对于某些首跳场景、页面生命周期较短的场景而言，可能无法等到【页面最大元素】加载完毕就已经跳出了，针对这类场景我们在 CWV 的基础上再加上了 FCP，来作为衡量页面加载性能的辅助指标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;并且，我们认为，对于用户而言，【页面上首次渲染内容】的时机也是非常关键的，他可以很好的反应页面主文档在经过网络请求之后，真正渲染到页面上的时间差，利于我们在做性能优化的时候更精细的进行问题排查。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5. 当前的性能指标和业界指标有什么区别？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在选择阈值的时候主要考虑了两点因素：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;基于这两点，目前的前端核心性能指标完全 follow 了 Google 提供的指标阈值，并在其基础上针对国际化场景现状进行了微调，例如 FCP 指标，参考了【自定义首屏】的衡量标准，对各阶段的阈值进行了部分调整，&lt;strong&gt;使其在不影响用户体验的情况下更易于达成。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在展示数据的 75 百分位值的同时，性能平台也增加了 90 分位值、中位数、平均值等多个维度数据的展示，我们鼓励开发者从不同视角对性能进行评估，更多的探索极致性能、极致体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. CWV 指标阈值设定的背景是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果把 FCP 的优秀区间设为 0-0.1s，从指标上来看的确很优秀，但是又有几个网站能做到这么极致？所以这样来定阈值不具备任何参考价值。在 Google 评估如何设置阈值时，会根据 Chrome 用户体验报告 (CrUX) 中的数据来验证这些阈值是否可以实现，&lt;strong&gt;为了确保该阈值可实现，要求至少有 10% 的用户满足该阈值的条件，并且会根据实际数据的变化不断进行调整。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;基于各类文献可以得出，各个指标阈值的设置主要基于以下两点：&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;6.1 LCP 的取值依据&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;体验质量：&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;基于“一秒钟原则”，我们通常认为，用户对一项任务失去注意力的等待时间为 1s，Google 研究发现，1s 这个值是用来描述一个区间的近似值，这个区间从几百毫秒到几秒不等。&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;1 秒阈值的两个常见引用来源是卡德等人和米勒。卡德通过引用纽厄尔的认知统一理论，定义了 1 秒的&quot;立即响应&quot;阈值。纽厄尔将立即响应解释为&quot;必须在大约一秒钟内对某些刺激作出的响应（即大约从 0.3 秒到 3 秒）。&quot;纽厄尔在此之前就&quot;认知的实时约束&quot;展开过讨论，其中指出&quot;与环境交互引发的认知计算是以秒计的&quot;，范围从大约 0.5 秒到 2-3 秒。1 秒阈值的另一个常见引用来源是米勒，他指出&quot;如果响应延迟超过两秒（可能超出时长为一秒左右），那么人类可以通过且将会通过机器通信执行的任务将发生严重的特征改变。&quot;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;基于以上研究，LCP （最大内容绘制）的“良好”阈值应该在 0.3s-3s 之间，由于 FCP （首次内容绘制）的“良好”阈值为 1.8s（2021 年更新的数据），所以最终 LCP 的“良好”候选阈值应该在 1.8s-3s 之间。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;可实现性：&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;确定好阈值之后我们再来看能够满足候选“良好”阈值所占的百分比，从 CrUX 的数据我们可以看到：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4381443298969072&quot; data-type=&quot;png&quot; data-w=&quot;388&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWKibEwvibbWFlxn5sIwu1GSYPNeLA50ibGmtahsV7b6JGfCUWeYibPcYJ1w/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;只有不到 10% 的域满足 1s 的阈值，但 1.5 秒到 3 秒之间的其他所有阈值也都满足我们的要求，即至少有 10% 的域满足&quot;良好&quot;阈值，因此这些阈值仍然是有效的候选值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此外，为了确保所选取的阈值对于优化良好的网站始终都可实现，我们分析了全网表现最出色的网站的 LCP 性能，从而确定哪些阈值对于这些网站是始终都可实现的。具体来说，我们的目标是确定一个对于表现最出色的网站来说，始终可以在第 75 个百分位数实现的阈值。我们发现，1.5 秒和 2 秒的阈值并不是始终都可以实现的，而 2.5 秒的阈值是始终可以实现的。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;6.2 CLS 的取值逻辑&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;体验质量：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;累积布局偏移 (CLS) 是一项新指标，用于测量页面可见内容的偏移量。鉴于 CLS 是一项全新指标，我们不知道能够直接为该指标的阈值提供参考的研究。因此，为了确定一个符合用户期望的阈值，我们对具有不同布局偏移量的真实世界页面进行了评估，进而确定在对享受页面内容造成严重干扰之前，用户可接受的最大偏移量。在我们的内部测试中，我们发现 0.15 及以上的偏移水平始终被认为具有干扰性，而 0.1 及以下的偏移水平虽然可以被注意到，但不具有过度干扰性。因此，虽然零布局偏移是理想情况，但我们得出的结论是，0.1 及以下的值是 CLS 的候选&quot;良好&quot; 阈值。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;可实现性：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47619047619047616&quot; data-type=&quot;png&quot; data-w=&quot;378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWmcOgvTdibyhRBTZcmg3raLNAOlFDt4eWAuUDB6d3TpzQ8I2e9nLmMJw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;虽然 CrUX 数据表明 0.05 可能是一个合理的 CLS &quot;良好&quot;阈值，但我们认识到，目前在某些用例中还难以避免干扰性的布局偏移。例如，对于如社交媒体嵌入这样的第三方嵌入内容，嵌入内容的高度有时在完成加载之前是未知的，这就可能导致布局偏移大于 0.05。因此，我们的结论是，虽然许多域都满足 0.05 的阈值，但将 CLS 阈值定为略微宽松一点的 0.1 能够在体验质量和可实现性之间取得更好的平衡。我们希望网络生态系统在未来能够确定一个针对由第三方嵌入引起的布局偏移的解决方案，这将使我们能够在核心 Web 指标的未来迭代中采用 0.05 或 0 这两个更为严格的 CLS &quot;良好&quot;阈值。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;6.3 FID 的取值逻辑&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;体验质量：&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;雅各布·尼尔森 (Jakob Nielsen) 撰写的响应时间：3 个重要界限常常被引用，文章中将 0.1 秒定义为用户感觉到系统立即做出反应的界限。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在实现时间性的完美虚拟按钮一文中，卡雷索亚 (Kaaresoja) 等人研究了在不同的延迟下，触摸触屏上的虚拟按钮和随后显示按钮被触摸的视觉反馈之间的同时性感知。当按下按钮和视觉反馈之间的延迟为 85 毫秒或更短时，参与者在 75% 的情况下报告视觉反馈是在按下按钮的同时出现的。此外，对于 100 毫秒或更短的延迟，参与者报告的按下按钮的感知质量始终很高，而感知质量在 100 毫秒到 150 毫秒的延迟下有所下降，并且在 300 毫秒的延迟下达到非常低的水平。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;鉴于上述研究，Google 得出结论，100ms 左右的延迟值范围是 Web 指标合适的首次输入延迟阈值。&lt;/span&gt;&lt;span&gt;此外，鉴于用户在 300 毫秒或更长的延迟下报告了低质量级别，则 300 毫秒为合理的&quot;欠佳&quot;阈值。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;可实现性：&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;据 Google 观察，全网最出色的网站始终能够在第 75 个百分位数上（并且通常在第 95 个百分位数上）满足此阈值，所以 100ms 是合理的 FID “良好” 阈值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4444444444444444&quot; data-type=&quot;png&quot; data-w=&quot;387&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWicunwIfmXcz4a7iaL0gQkXYjCmFkJe0pPDMI5WJ7m4ysEZXdjRPNmiaEg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、性能数据分析&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 多通道数据流转&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.38836898395721925&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;2992&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWaNkqm7uWwibr4hNb2lzsibib4CULIptXUA8QDB39Spl80SMLmCCrAOUng/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在数据流转通道的设计上，为了兼容多端的性能数据采集和旧的采集逻辑，我们采用了多通道 + 对照组的方式。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;多通道（Web + App）：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Web：黄金令箭多点位对性能数据进行采集&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;App：UT 通道，保障数据传输效率和完整性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;对照组（SLS）：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 多维度聚合分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了满足开发者的性能分析诉求，我们需要对采集上报的性能数据进行多维度的聚合处理，区别于以往的取平均值进行分析，我们对取值范围进行了扩充，包括（75 百分位、中位数、90 百分位），用于分析长尾性能数据、规避离群值对整体性能的影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;同时基于场景、URL、spm_id、国家、端型等多个维度，对性能数据进行聚合，让开发者能通过不同视角进行性能分析，保障性能分析的准确性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 为什么默认取 75 百分位值？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;参考一些业内各类文献，选择 75 百分位值的原因基于如下两个标准：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;选取的百分位值应当&lt;strong&gt;确保对页面或网站的大多数访问都达到了目标性能水平&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;选取的百分位值应当&lt;strong&gt;不受异常值的过度影响&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;这两点如何解释呢？&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先是第一点，通俗一点讲就是应该选择一个高百分位值，也就是大部分页面都能实现的值，但是随着百分位值的升高，结果值受异常数据影响的可能性就越大。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其次是第二点，如果我们为了满足第一个标准，可以选择一个较高的百分位（例如：95 百分位数）作为阈值，&lt;strong&gt;但是随着百分位数的增加，其结果值越容易受到异常数据的影响。&lt;/strong&gt;比如我们使用 95 百分位数对页面进行评估，页面总共采集了 100 条数据，如果其中有 5 条数据是异常值，那么第 95 百分位数就会收到异常值的影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;综上所述，为了兼顾两个目标，分析得出 75 百分位值更接近合理的平衡点，在采用 75 百分位值时，大多数网站都能达到性能水平或者更高，且 100 条数据中，只有当异常数据达到 25 条时，才会对结果值造成影响，几率相较于 95 百分位值更低，结果值的可信度更高。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、性能报表展示&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于分析的数据需要找到合适的报表进行性能数据的展示，同时为了提供全球化的视野，性能平台进行了一系列的定制开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 核心性能指标卡片&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2/&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2701100762066046&quot; data-type=&quot;png&quot; data-w=&quot;2362&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWWRzhulk0YvCFMRkVAHdX6DPxeyibxicaqoDiax4sMzFriaj3we81jMTgvA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;筛选框：可以根据日期、地区、端型进行数据筛选&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;总采样 PV，指当前采集到性能数据的条数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;核心指标模块：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 性能优化方案&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2/&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27410617551462624&quot; data-type=&quot;png&quot; data-w=&quot;1846&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcW81BKwMoiciar4wf5HbDtIvac0QKGFMmAL3TEUMy7Yv0iaZHfb7NLnX1Bg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 页面主文档 - 网络加载链路分析图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2/&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2669456066945607&quot; data-type=&quot;png&quot; data-w=&quot;2390&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWw3c2EA1PnibkClT1F8icKib5xpKy8ic6liasKRvYGr5ibSibqELNaLoOOQ0RQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主要分为【网络加载阶段】和【页面渲染阶段】，各阶段计算逻辑参考：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3355899419729207&quot; data-type=&quot;png&quot; data-w=&quot;2068&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWzSykJrdAoicjTbuT7jUqc4vfS3icoyfCaTh5E5DOe5vicQTWk1zKgNNVA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 实时数据趋势图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2/&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5173288250211328&quot; data-type=&quot;png&quot; data-w=&quot;2366&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWN9Jo4fLbysqoCh44ibFOS3hTchib6CyYm4fqKzNmsGjDwCY5Zhfm4upg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5. 全球流量分布图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2/&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6650563607085346&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1242&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWibLMc7QPDJatlKY0Oz0ymMibLBDtwDcxKzCYZRfwibiapZgibTnkWI2nqqw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全球流量分布：按 pv 排序，可以根据对应的国家进行数据下钻&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. 用户性能分布图（Google CrUX 数据）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2/&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2364341085271318&quot; data-type=&quot;png&quot; data-w=&quot;2064&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIqliclTUGv0VdMWmNKUdgcWNiaJkzlJ4UaibiaWMQvUFVbOQFzRVTVrZbhOHGesOmDgSCJBO3MceuxzQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、小结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上就是目前 ICBU 在全球化前端性能领域的探索进度，未来还会不断的有新的能力和方案沉淀。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，我们一定要清楚的认识到&lt;strong&gt;性能指标好 ≠ 用户体验好&lt;/strong&gt;，但是性能指标依然是辅助我们进行分析和优化的指南针，会引导我们更好的持续优化用户体验。&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;参考链接：&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;定义核心 Web 指标阈值：https://web.dev/defining-core-web-vitals-thresholds/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;认知统一理论：https://dl.acm.org/doi/book/10.5555/86564&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;响应时间：3 个重要界限：https://www.nngroup.com/articles/response-times-3-important-limits/&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;因果关系感知：https://psycnet.apa.org/record/1964-05029-000&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;实现时间性的完美虚拟按钮：https://dl.acm.org/doi/10.1145/2611387&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Web Vitals Changelog：https://chromium.googlesource.com/chromium/src/+/master/docs/speed/metrics_changelog/README.md&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CWV 等体验指标纳入 Google 搜索排名：https://developers.google.com/search/blog/2020/11/timing-for-page-experience&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CWV FAQ：https://support.google.com/webmasters/thread/86521401&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a5873e443eaff923a7909d4d7bc9855c</guid>
<title>万字长文带你彻底搞懂什么是 DevOps</title>
<link>https://toutiao.io/k/v4z4vo2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;您好，我是路人，更多优质文章见个人博客：http://itsoku.com&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 日渐成为研发人员耳熟能详的一个组合词，但什么是 DevOps，为什么 DevOps 对于互联网企业如此重要，真正将其思考透彻的人却不多，带着这些困惑，本文将带你一探 DevOps 的起源、原则和实践，让你搞清楚到底何为 DevOps。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 的起源可以追溯到 2008 年，在一次敏捷大会的敏捷基础设施话题组被提及，从起源我们可以了解到 DevOps 的发展跟敏捷软件开发是密不可分的。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 定义&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-type=&quot;png&quot; data-ratio=&quot;0.053125&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 经过这些年的发展，其定义也在不断变化，先来看三段 DevOps 的 wiki 定义。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;1、DevOps 2017 - 2020 年英文 wiki 定义（直译）&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps是一种软件工程文化和实践（Practices），旨在整合软件开发和软件运维。DevOps运动的主要特点是强烈倡导对构建软件的所有环节（从集成、测试、发布到部署和基础架构管理）进行全面的自动化和监控 DevOps 的目标是缩短开发周期，提高部署频率和更可靠地发布，与业务目标保持一致。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;2、DevOps 2021 年英文 wiki 定义（直译）&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 是一系列整合软件开发和软件运维活动的实践（Practices）。目标是缩短软件开发生命周期并使用持续交付提供高质量的软件。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;另：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 与敏捷软件开发是互补关系，DevOps 的许多方面来自于敏捷方法论。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;3、DevOps 中文 wiki 定义&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;提取这三段的共同点，可以看到不论定义如何变化，DevOps 所要实现的目标都是一致的——缩短软件开发生命周期并使用 持续交付 提供高质量的软件。由于持续交付活动中包含了构建、测试和发布等活动，我更倾向于用这个定义，可以更好地缩减定义长度。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;另外可以看到英文直接翻译过来的定义中都包含「实践」 一词，而中文 wiki 经过一定的翻译或本地化后变成了「文化、运动或惯例」，其还更强调开发运维之间沟通合作这一点，因此将最新的英文 wiki 定义与中文 wiki 定义相结合，可以帮助我们更好地理解 DevOps，那么它的最终定义是什么就交由读者朋友自己去领会吧。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 发展背景&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-type=&quot;png&quot; data-ratio=&quot;0.053125&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;为什么 DevOps 会如此热门，时常被人所提及，这与其发展背景是分不开的，主要原因可以概括为以下几点：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;以上主要从企业的角度说明了 DevOps 的发展，这是较为深层次的原因，表层的推动因素包括：容器化技术的发展、微服务架构的发展等等，这些技术上的创新为 DevOps 提供了良好的发展条件，以解决企业面临的这些问题。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 原则与实践&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.053125&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;了解了什么是 DevOps 及其发展原因后，又该如何具体的进行 DevOps 实践，我们采用黄金圈法则来思考这一问题。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5465465465465466&quot; data-type=&quot;jpeg&quot; data-w=&quot;666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/A1HKVXsfHNk5f8BYzosFZZRrXgicicYBzcjbW5zcYia81m3gJvsibLiaZuQSm9R2e1SD8ebhxhmJWl3dicQhTNiaibMQCw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 原则是总体指导思想，实践是具体的执行方法，DevOps 是一个动态的过程，在进行相关实践的时候可以看看其应用了哪些原则，当违背原则的时候需要思考实践的合理性。&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 原则&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-type=&quot;png&quot; data-ratio=&quot;0.053125&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 包含以下三大原则：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;流动原则&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;坚持少做&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;产品开始开发时采用 MVP 原则。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;产品迭代时要适时做减法。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;控制任务数量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;减少前置时间，降低测试人员的等待时间。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;任务越多，预估越不准确。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;反馈原则&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;在复杂系统中安全地工作&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;管理复杂的工作，识别出设计和操作的问题；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;群策群力解决问题，从而快速构建新知识；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;在整个组织中，将区域性的知识应用到全局范围；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;领导者要持续培养有以上才能的人。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;持续学习与实验原则&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;建立学习型组织和安全文化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;将日常工作的改进制度化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;把局部发现转化为全局优化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;在日常工作中注入弹性模式&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 实践&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-type=&quot;png&quot; data-ratio=&quot;0.053125&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;基于 DevOps 的相关原则，有与其对应的实践，包括：流动的技术实践、反馈的技术实践和持续学习与实验的技术实践。在应用这些实践之前还需认真设计组织结构，使其有利于实践的开展。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;设计组织结构&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;松耦合架构，提高生产力和安全性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;保持小规模（“两个披萨原则”）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;要使职能导向有效，需要由传统的集中式运维向提供运维服务的方向转变。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5385375494071146&quot; data-type=&quot;png&quot; data-w=&quot;1012&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNk5f8BYzosFZZRrXgicicYBzcc9h5Dvd7r3RyicaMNnVO7K8X7IQTTLC9gZVicD8RdIBqh4icibvwXofqNA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;运维融入项目开发工作&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;流动的技术实践&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;该部分包含以下内容：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;运行部署流水线的基础&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;所有内容做版本控制。&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;自动化和手动测试的脚本；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;支持代码打包、部署、数据库迁移、应用配置的脚本；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;项目相关文件（需求文档、部署过程、发布说明等）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;防火墙配置、服务器配置等脚本。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;应用程序代码版本控制；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;数据库代码版本控制；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;运维配置代码版本控制；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;实现快速可靠的自动化测试&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;持续构建、测试和集成。&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;代码分支持续集成到主干中，并确保通过单元测试、集成测试和验收测试。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;常用工具：Jenkins、TFS、TeamCity、GitLab CI。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;对持续集成的配合：自动化测试工具；一旦失败必须立即解决的文化；代码持续合入到主干，而不是持续在特性分支上工作。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;代码持续集成&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;自动化和低风险发布&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;自动化部署步骤：构建、测试、部署；相关流程包括：&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;代码打包、构建；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;上传 Docker 镜像；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;创建预配置的 Kubernetes 服务；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;自动化单元测试、冒烟测试；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;数据库迁移自动化；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;配置自动化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;将部署和发布解耦&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;部署指在特定环境中安装制定版本的软件。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;发布指将产品特性提供给所有客户或部分客户使用。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;降低发布风险的架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;反馈的技术实践&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;这部分包含以下内容：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;建立遥测系统&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;将建立生产遥测融入日常开发工作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;使用遥测指导问题的解决。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;建立自助访问的可视化遥测信息系统（信息辐射器）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;发现和填补遥测的盲区（建立充分而完整的遥测）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;业务级别：订单量、用户数、流失率、广告展示和点击等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;应用程序级别：事务处理事件、应用程序故障等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;基础架构级别：服务器吞吐量、CPU负载、磁盘使用率等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;客户端软件级别：应用出错和崩溃、客户端的事务处理事件等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;部署流水线级别：流水线状态、部署频率等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;智能告警&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;应用反馈实现安全部署&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;让开发团队自行管理生产服务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;首先由开发团队管理，然后才交由集中的运维团队管理。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;运维工程师由生产支持转变为顾问或加入团队，帮助做好部署准备，建立服务发布指南（包括：支持有效的监控、部署可靠、架构能支持快速频繁的部署等）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;为团队分配SRE人员。SRE定位：SRE就是软件开发工程师负责了运维工作，SRE非常稀少，只能分配给最重要的团队。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;应用A/B测试&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;&lt;span&gt;建立评审和协作流程&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;持续学习与实验的技术实践&lt;/strong&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;这部分包含以下内容：&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;将学习融入日常工作&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;公正文化和学习文化&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;人为错误往往不是问题的根本原因，可能是复杂系统中存在不可避免的设计问题而导致。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;不应该对造成故障的人进行「点名、责备和羞辱」，我们的目标是最大限度地抓住组织学习的机会。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;从学习的角度看待错误、报错、失误、过失等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;相关实践1：在事后分析中，不指责，公正地进行评判，使工程师自己愿意对事情负责，并且热情地帮助其他人避免同样的错误发生；广泛地公开事后分析会议结果。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;相关实践2：在生产环境中引入受控的人为故障（捣乱猴），针对不可避免的问题进行演练。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;创建故障演练日&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;帮助团队模拟和演练事故，使其具备实战能力。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;暴露系统的潜在缺陷。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;将局部经验转化为全局改进&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;运用自动化测试记录和传播知识&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;自动化界面测试，令使用者知道系统如何使用；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;单元测试，令调用者知道方法API如何使用。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;预留组织学习和改进的时间&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;让所有人教学相长&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;所有的工程师都越来越需要某些技能，而不只是开发人员如此。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;越来越多的技术价值流采用了DevOps的原则和模式。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;[每周学习文化] 每周一次的学习时间，每个同伴既要自己学习，又要教别人。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;实践重点&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.053125&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 的实践包含许多内容，提炼了以下重点方便查阅：&lt;span/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;流动原则的实践&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;部署流水线的基础（所有内容做版本控制、在类生产环境按预期工作才算完成）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;实现快速可靠的自动化测试（自动化运行、始终保持流水线处于绿色状态）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;代码持续集成（小批量开发）&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;自动化和低风险发布（自助式部署、部署和发布解耦、采用持续交付）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;降低发布风险的架构（云原生架构）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;反馈原则的实践&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;建立遥测系统（Tracing、Metrics、Logging）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;智能告警（使用统计分析方法和预防故障的告警）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;应用反馈实现安全部署（部署后立即发现问题、共同承担责任）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;应用A/B测试（功能规划中集成A/B测试、使用特性开关）&lt;/span&gt;&lt;span&gt;建立评审和协作流程（同行评审、减少审批流程、结对编程）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;持续学习与实验原则的实践&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;将学习融入日常工作（从学习的角度看待事故、寻找更弱的故障信号）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;将局部经验转化为全局改进（ChatOps、让规范便于执行、非功能性的运维需求）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;预留组织学习和改进的时间（定时偿还技术债务、教学相长、内部教练）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;结语&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.053125&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/b2YlTLuGbKDsbJzupnILVFhPtMaRjmvPKYRqTMjibE9pnd8oiawLVrQbOHQe4wBXkBQkzpKCWPKBqWgOLgwccBug/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;DevOps 的发展与技术的发展相辅相成，也为技术人员提供了更多的学习道路和发展方向，借用一句 DevOps 领袖的话来作为本文的结束语。&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;本文整理自笔者分享的 PPT，原文及 PPT 地址：https://github.com/lcomplete/TechShare&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2204545454545455&quot; data-w=&quot;440&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RkqIyCg0bs5eA3lABIgSNCAiaiaXF3XfK77DciajeWbGUJ91ribtXtpsDEzlYeAB4icdIhcSrlEeJM4Kf0FiaS68icE8w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;↓&lt;strong&gt;↓&lt;strong&gt;↓ &lt;/strong&gt;&lt;/strong&gt;点击阅读原文，直达个人博客&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/xe4FY1hGDmq17JSGmvlibgJjT73DIFV5hNpPbbL7bDtKBKyOka9bl1LLiam25MusZplIsuk5l0zQW2Pg1WhvCRJw/?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;193&quot; data-cropy1=&quot;63&quot; data-cropy2=&quot;246&quot; data-fileid=&quot;100014145&quot; data-ratio=&quot;0.9583333333333334&quot; data-type=&quot;jpeg&quot; data-w=&quot;192&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/x0kXIOa6owVWZPKyaM6oCE4YHtIwIicLjFIDeHX6FKElExLvJakC6vZk9b33M8ghbhyg0t8Bts4sh9ia98kC11eA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;你在看吗&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>