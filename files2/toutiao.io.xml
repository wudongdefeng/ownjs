<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3a1bf1f5b3157c49e385f5928e40a782</guid>
<title>浅谈服务接口的高可用设计</title>
<link>https://toutiao.io/k/o24imrp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h5&gt;作者：京东零售 王磊&lt;/h5&gt;

&lt;h3&gt;前言&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;作为一个后端研发人员，开发服务接口是我正常不过的工作了，这些接口不管是面向前端HTTP或者是供其他服务RPC远程调用的，都绕不开一个共同的话题就是“高可用”，接口开发往往看似简单，但保证高可用这块实现起来却不并没有想想的那么容易，接下来我们就看一下，一个高可用的接口是该考虑哪些内容，同时文中有不足的欢迎批评指正。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;到底啥是高可用&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;用一句简单的话来概就是我们的系统具不具备应对和规避风险的能力。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;为啥做高可用&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1. 程序都是有人开发的，在开发过程中会犯错从而导致线上事故的发生
2. 系统运行依赖各种运行环境：CPU、内存、硬盘、网络等等，而这些都有可能损坏
3. 业务拉新用户正在注册账号，结果注册接口挂了用户体验受影响
4. 双十一、618等大促大量用户下单，结果下单服务接口挂了GMV受影响等等
5. 其他未知因素等等
总之为了应对这些不可控因素的发生，我们必须要做高可用
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;高可用的关键点&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;我们说过高可用的本质是系统是否具备应对和规避风险的能力，那么从这个角度出发来设计高可用接口的有以下几个关键因素：Dependence（依赖）、Probability（概率）、Time（时长）、Scope（范围）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;1. 依赖的资源相对少
2. 风险的概率足够低
3. 影响的范围足够小
4. 影响时长足够短
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;接口高可用设计的几个原则&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;结合这些关键点，我们来看一下具体具体注意事项&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;1、控制依赖&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;能少依赖就少依赖，能不强依赖就不强依赖&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;少依赖
例如：日常每分钟10个请求，查询Mysql数据即可满足，此时盲目引入Redis中间件，不仅浪费资源而且增加系统复杂性

弱依赖
例如：用户注册服务强依赖新用户优惠券发放服务，当优惠券发放服务故障后，整个注册不可用，好的方式是采用弱依赖，使用异步化的
方式，这样优惠券发送服务不可用时，不会影响注册链路。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2、避免单点&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;避免单点故障的核心是通过备份或者冗余快速的进行容错&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;1. 我们采用多机房多实力部署我们应用来保障故障风险分摊，一旦有一台服务器出现问题，其他服务仍然能够继续支撑我们的服务
2. 每次上线我们都会保留上一次上线发布版本，这样一旦上线的程序出现问题我们能够快速回滚到上一版本
3. 每个接口至少保障2人知道相关业务，一旦线上服务出现问题，其中任何一人一个能够快速处理相关线上问题
4. 不管是Mysql还是Redis等中间件都支持数据主备机群部署

类似的例子很多这里就不再一一列举了
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3、负载均衡&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;将风险进行分摊避免分险扩散&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;例如：无论是Ngnix或者JSF的，其负载均衡目的就是尽量的将流量分散到不同的服务器节点上，这样可以有效的保障单节点因系统瓶颈
问题而引发一系列的风险。 

像上面这个例子我想每个研发人员都知道也都会这么做，但是是不是所有的场景我们都考虑到均衡这个问题？

例如：通常为了提高读并发的能力，我们会把数据缓存到JIMDB中，但是因为缓存的key出现了热点数据导致JIMDB单分片负载过高，恰
好，这个分片上也缓存了其他数据，但是因为CPU负载过高，导致查询性能变差，大量的超时，影响了业务。所以，我们在接口设计
的时候，假如遇到类似场景，也要充分考虑数据存储的均衡性，同时针对热点数据做好监控，随时支持动态均衡。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;4、资源隔离&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;隔离的目的将风险控制在可控范围内，避免风险扩散&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;例如：接口部署之间服务部署物理上是相互隔离的，避免单机房或者单服务器出现故障影响整个服务

例如：我们在存储业务数据的时候会将数据分库分表，数据通过不同分片存储，这样就不会导致某个服务器挂掉影响到整个服务
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;5、接口限流&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;限流是一种保护措施，目的是将风险控制在可控范围内&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;我们在开发接口的时候，一定要结合业务流量情况进行限流措施，限流一方面处于对自身服务资源的保护，同时也是对依赖资源的一种
保护措施。

目前集团JSF在流量控制这块已经有了对应的限流处理能力，同时我们也可以结合实际业务进行限流模块的开发。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6、服务熔断&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;熔断也是一种保护措施，目的是将风险控制在可控范围内，避免风险扩散&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;例如：经常我们服务A会同时调用B、C、D多个服务，当我们依赖的服务其中一个出现故障或者性能下降的时候，就是导致整体服务
可用率下降，所以我们在开发此类服务的时候，一定要注意接口之间的隔离。我们可以利用类似Hystrix组件实现，也可以借助DUCC
进行手动隔离。

其实熔断也是一种控制资源依赖的一种，将强依赖降级为弱依赖
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;7、异步处理&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;将同步操作转为异步操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;例如：用户页面领取一些权益，针对领取这个服务在大促期间因为用户流量较大，为了避免系统负载，此时采用MQ异步接收用户领取
请求然后进行优惠券发放,这样不仅极大的减少了事故的影响范围，也减少问题发生概率。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;8、降级方案&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;服务降级属于一种问题发生后的补救措施，通过服务降级可以减少一部分风险影响范围&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;对于重要的服务接口我们都要具备完善的降级方案，这里需要说明的是，降级有损的，我们一定要在系统开发前就要考虑各种问题
发生的可能，降级的前提是通过降级非核心业务保证核心业务运行。

例如：大促峰值期间，一般会提前降级掉很多功能，同时限流，主要是为了保护峰值绝大部分人的交易支付体验。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;9、灰度发布&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;通过灰度发布降低风险影响范围&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;例如：我们上线一个新服务，通过一定的灰度策略，让用户先行体验新版本的应用，通过收集这部分用户对新版本应用的反馈以及
对新版本功能、性能、稳定性等指标进行评论，进而决定继续放大新版本投放范围直至全量升级或回滚至老版本。根据线上反馈结果，
做到查漏补缺，发现重大问题，可回滚“旧版本”
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;10、混沌工程&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;通过提前对系统进行一些破坏性的手段，提前发现潜在问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;例如：一个复杂接口系统依赖了太多的服务和组件，这些组件随时随地都可能会发生故障，而一旦它们发生故障，会不会如蝴蝶效应
一般造成整体服务不可用呢，我们并不知道，因此我们可以借助泰山平台混沌工程进行演练，针对发生的场景制定各种预案，将风险
控制在可控范围内。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a84340a876bd2c937c066f2a42cb9a9d</guid>
<title>如何在 Nuxt 3 中使用 wavesurfer.js</title>
<link>https://toutiao.io/k/1eferiy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h1&gt;安装 wavesurfer.js&lt;/h1&gt;

&lt;p&gt;在项目中安装 &lt;code&gt;wavesurfer.js&lt;/code&gt;&lt;/p&gt;

&lt;pre lang=&quot;bash&quot;&gt;&lt;code&gt;npm install --save wavesurfer.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;常规方式引入&lt;/h1&gt;

&lt;p&gt;如果你的根目录中没有 &lt;code&gt;components&lt;/code&gt; 目录则需要创建该目录，并在此目录中创建 &lt;code&gt;WaveSurfer.vue&lt;/code&gt; 内容如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
import WaveSurfer from &#x27;wavesurfer.js&#x27;  

const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  options:{  
    type:Object,  
  }  
});
const wavesurferMain = ref(null);  
const waveSurfer = ref(null);  


let options = props.options;  
let wsOptions = Object.assign({  
      container: wavesurferMain.value  
    },  
    options);  

waveSurfer.value = new WaveSurfer.create(wsOptions);  
waveSurfer.value.load(props.src); 
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们集成该组件，在这个例子中我们将在 &lt;code&gt;app.vue&lt;/code&gt; 直接引用，并且我将测试音频文件 &lt;code&gt;demo.wav&lt;/code&gt;，放在根目录的&lt;code&gt;public&lt;/code&gt; 中。&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div&amp;gt;
    &amp;lt;WaveSurfer src=&quot;/demo.wav&quot;:options=&quot;waveSurferOption&quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const waveSurferOption = {  
  height: 340,  
  progressColor: &#x27;#e03639&#x27;,  
  waveColor: &#x27;#e7e7e7&#x27;,  
  cursorColor: &#x27;#FFDDDD&#x27;,  
  barWidth: 2,  
  mediaControls: true,  
  backend: &#x27;MediaElement&#x27;,  
  scrollParent:true,  
  xhr: {  
    mode: &#x27;no-cors&#x27;  
  }  
};  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在执行 &lt;code&gt;npm run dev&lt;/code&gt;  ，页面将报错 &lt;code&gt;self is not defined&lt;/code&gt;。
这是因为在 &lt;code&gt;setup&lt;/code&gt; 这个生命周期中，DOM 节点并未创建，所以我们需要在&lt;code&gt;mounted&lt;/code&gt; 阶段进行导入。&lt;/p&gt;

&lt;h1&gt;正确的引入方式&lt;/h1&gt;

&lt;p&gt;更改  &lt;code&gt;WaveSurfer.vue&lt;/code&gt;  文件内容如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  options:{  
    type:Object,  
  }  
});  

const wavesurferMain = ref(null);  
const waveSurfer = ref(null);  

onMounted(async ()=&amp;gt;{  
  const WaveSurfer = (await import(&#x27;wavesurfer.js&#x27;)).default;  
  const options = props.options;  
  const wsOptions = Object.assign({  
        container: wavesurferMain.value  
      },  
      options);  
  waveSurfer.value = new WaveSurfer.create(wsOptions);  
  waveSurfer.value.load(props.src);  
});  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在你应该能看到已经可以正常加载了。&lt;/p&gt;

&lt;h1&gt;加载插件&lt;/h1&gt;

&lt;p&gt;加载方式和插件一样，官方的插件在 &lt;code&gt;wavesurfer.js/dist/plugin&lt;/code&gt; 目录下，这个例子将加载时间线插件如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
  &amp;lt;div ref=&quot;waveTimeline&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  options:{  
    type:Object,  
  }  
});  

const wavesurferMain = ref(null);  
const waveTimeline = ref(null);  
const waveSurfer = ref(null);  

onMounted(async ()=&amp;gt;{  
  const WaveSurfer = (await import(&#x27;wavesurfer.js&#x27;)).default;  
  const Timeline  = (await import(&#x27;wavesurfer.js/dist/plugin/wavesurfer.timeline&#x27;)).default;  
  const options = props.options;  
  const wsOptions = Object.assign({  
        container: wavesurferMain.value,  
        plugins:[  
          Timeline.create({container:waveTimeline.value})  
        ]  
      },  
      options);  
  waveSurfer.value = new WaveSurfer.create(wsOptions);  
  waveSurfer.value.load(props.src);  

});  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;加载波形数据&lt;/h1&gt;

&lt;p&gt;如果音频文件过大，使用插件原生的波形生成方式会非常慢。这个时候可以通过服务端生成波形数据，并让插件直接通过波形数据进行渲染。具体生成方式可以参考官方的解决方案&lt;a href=&quot;https://wavesurfer-js.org/faq/&quot;&gt;FAQ&lt;/a&gt;。在这个项目中，生成波形数据文件后，我把它移动到项目的&lt;code&gt;public&lt;/code&gt;中，更改 &lt;code&gt;WaveSurfer.vue&lt;/code&gt; 内容如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
  &amp;lt;div ref=&quot;waveTimeline&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  peaksData:{  
    type:String,  
  },  
  options:{  
    type:Object,  
  }  
});  

const wavesurferMain = ref(null);  
const waveTimeline = ref(null);  
const waveSurfer = ref(null);  

onMounted(async ()=&amp;gt;{  
  const WaveSurfer = (await import(&#x27;wavesurfer.js&#x27;)).default;  
  const Timeline  = (await import(&#x27;wavesurfer.js/dist/plugin/wavesurfer.timeline&#x27;)).default;  
  const options = props.options;  
  const wsOptions = Object.assign({  
        container: wavesurferMain.value,  
        plugins:[  
          Timeline.create({container:waveTimeline.value})  
        ]  
      },  
      options);  
  waveSurfer.value = new WaveSurfer.create(wsOptions);  
  fetch(props.peaksData)  
      .then(response =&amp;gt; {  
        if (!response.ok) {  
          throw new Error(&quot;HTTP error &quot; + response.status);  
        }  
        return response.json();  
      })  
      .then(peaks =&amp;gt; {  
        waveSurfer.value.load(props.src,peaks.data);  
      })  
      .catch((e) =&amp;gt; {  
        console.error(&#x27;error&#x27;, e);  
      });  

});  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;app.vue&lt;/code&gt; 中变更如下：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div&amp;gt; 
    &amp;lt;WaveSurfer src=&quot;/demo.wav&quot; peaks-data=&quot;/demo.json&quot; :options=&quot;waveSurferOption&quot; /&amp;gt;  
  &amp;lt;/div&amp;gt;
  &amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const waveSurferOption = {  
  height: 340,  
  progressColor: &#x27;#e03639&#x27;,  
  waveColor: &#x27;#e7e7e7&#x27;,  
  cursorColor: &#x27;#FFDDDD&#x27;,  
  barWidth: 2,  
  mediaControls: false,  
  backend: &#x27;MediaElement&#x27;,  
  scrollParent:true,  
  xhr: {  
    mode: &#x27;no-cors&#x27;  
  }  
}  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;暴露插件的方法&lt;/h1&gt;

&lt;p&gt;现在我们只是正常初始化插件并让它加载了音频文件，目前我们并不能操作它。
因为 &lt;code&gt;Vue3&lt;/code&gt; 中，默认并不会暴露 &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; 中声明的绑定。我们需要使用 &lt;code&gt;defineExpose&lt;/code&gt; 来暴露对应的属性。&lt;code&gt;WaveSurfer.vue&lt;/code&gt; 如下变更：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div ref=&quot;wavesurferMain&quot;&amp;gt;&amp;lt;/div&amp;gt;  
  &amp;lt;div ref=&quot;waveTimeline&quot;&amp;gt;&amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const props = defineProps({  
  src:{  
    type:String,  
    required:true  
  },  
  peaksData:{  
    type:String,  
  },  
  options:{  
    type:Object,  
  }  
});  

const wavesurferMain = ref(null);  
const waveTimeline = ref(null);  
const waveSurfer = ref(null);  

onMounted(async ()=&amp;gt;{  
  // 省略逻辑

});  
defineExpose(  
    {  
      waveSurfer  
    }  
)  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;app.vue&lt;/code&gt; 中我们可以这样调用：&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;  
  &amp;lt;div&amp;gt;    
  &amp;lt;WaveSurfer ref=&quot;refWaveSurfer&quot; src=&quot;/demo.wav&quot; peaks-data=&quot;/demo.json&quot; :options=&quot;waveSurferOption&quot;/&amp;gt;  
    &amp;lt;button @click=&quot;play&quot;&amp;gt;play&amp;lt;/button&amp;gt;  
    &amp;lt;button @click=&quot;pause&quot;&amp;gt;pause&amp;lt;/button&amp;gt;  
  &amp;lt;/div&amp;gt;
  &amp;lt;/template&amp;gt;  
&amp;lt;script setup&amp;gt;  
const waveSurferOption = {  
  height: 340,  
  progressColor: &#x27;#e03639&#x27;,  
  waveColor: &#x27;#e7e7e7&#x27;,  
  cursorColor: &#x27;#FFDDDD&#x27;,  
  barWidth: 2,  
  mediaControls: false,  
  backend: &#x27;MediaElement&#x27;,  
  scrollParent:true,  
  xhr: {  
    mode: &#x27;no-cors&#x27;  
  }  
}  
const refWaveSurfer = ref(null);  

function play() {  
  refWaveSurfer.value.waveSurfer.play();  // 调用播放方法 
}  

function pause(){  
  refWaveSurfer.value.waveSurfer.pause();  // 调用暂停方法
}  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;项目&lt;/h1&gt;

&lt;p&gt;你可以在以下仓库看到完整的示例
&lt;a href=&quot;https://github.com/AnyStudy/nuxt-3-wavesurfer-demo&quot;&gt;https://github.com/AnyStudy/nuxt-3-wavesurfer-demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1c99463195a2c0211f507ee2da1baece</guid>
<title>某百度程序员中午面试一个阿里程序员，晚上去阿里面试，面试官竟是中午那个人！</title>
<link>https://toutiao.io/k/19gswwt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d60721a1b9a2af8c4a566498df41ad85</guid>
<title>看我是如何用C#编写一个小于8KB的贪吃蛇游戏的</title>
<link>https://toutiao.io/k/n8fxr18</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;blockquote data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;由于微信排版问&lt;/span&gt;&lt;span&gt;题，在PC端浏览&lt;/span&gt;&lt;span&gt;效果最佳&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;译者注：这是Michal Strehovský大佬的一篇文章，他目前在微软.NET Runtime团队工作，主要是负责.NET NativeAOT功能的开发。我在前几天看到这篇文章，非常喜欢，虽然它的内容稍微有点过时(还是使用的.NET Core 3.0)，不过其中的一些编程技巧和思维方式很受用，特意找到Michal大佬要到了授权，翻译给大家看。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;作者：Michal Strehovský&lt;/p&gt;&lt;p&gt;译者：InCerry&lt;/p&gt;&lt;p&gt;原文链接：https://medium.com/@MStrehovsky/building-a-self-contained-game-in-c-under-8-kilobytes-74c3cf60ea04&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;作为一个在1.44MB软盘和56kbit调制解调器时代长大的人，我一直喜欢小程序。我可以在随身携带的软盘上装下许多小程序。如果一个程序不能放在我的软盘上，我就开始思考为什么-它有大量的图形吗？有音乐吗？这个程序能做很多复杂的事情吗？还是它根本就是&lt;strong&gt;臃肿&lt;/strong&gt;的？&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7497142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibAFIiaib8jric0IbjDxHlTibf6ZYrQXMVvyxLsib5u3B7ibNt5eyuDibwgTlVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;p&gt;图片来自 Brett Jordan Unsplash&lt;/p&gt;&lt;p&gt;现在，磁盘空间变得如此便宜（巨大的闪存盘无处不在），人们放弃了对程序大小的优化。&lt;/p&gt;&lt;p&gt;有一个场景的大小仍然很重要，那就是传输：当在线路上传输一个程序时，每秒只能传递兆字节的数据。一个快速的100MBit连接在最好的情况下每秒只能传输12MB。如果在线路的另一端是一个等待下载完成的人，五秒和一秒之间的差异会对他们的体验产生很大的影响。&lt;/p&gt;&lt;p&gt;此人可能直接（用户通过网络下载程序）或间接（部署Severless服务以响应 Web 请求）暴露在传输时间中。&lt;/p&gt;&lt;p&gt;人们通常认为任何快于0.1秒的东西都是即时的，3.0秒大约是用户的流量保持不间断的极限，而你很难在10秒后让用户保持参与。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;虽然更小一点程序不再是必须的，但它仍然是&lt;strong&gt;更好&lt;/strong&gt;的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这篇文章是作为一个实验而出现的，目的是找出一个有用的自包含运行时的C#可执行文件可以有多小。C#应用程序能否达到用户会认为瞬间就能下载完毕的大小？它是否能使C#被用于现在还没有被使用的场景？&lt;/p&gt;&lt;h2&gt;究竟什么是 “自包含”?&lt;/h2&gt;&lt;p&gt;一个自包含的应用程序是指包括在操作系统的虚构安装上运行所需的一切。&lt;/p&gt;&lt;p&gt;C#编译器属于一组以虚拟机为目标的编译器（Java和Kotlin是该组的另一个知名的语言）：C#编译器的输出是一个可执行文件，需要某种虚拟机（VM）来执行。人们不能只安装一个裸机操作系统，并期望能够在上面运行由C#编译器产生的程序。&lt;/p&gt;&lt;p&gt;至少在Windows上，过去人们可以依靠在整个机器上安装.NET Framework来运行C#编译器的输出。现在，有许多Windows SKU不再携带.NET Framework（物联网、Nano Server、ARM64......）。.NET Framework也不支持C#语言的最新增强功能。它有点像在走下坡路。&lt;/p&gt;&lt;p&gt;为了使C#应用程序自成一体，它需要包括运行时和它使用的所有类库。在我们的计划中，要把很多东西装进只有8KB的预算中！这是很重要的。&lt;/p&gt;&lt;h2&gt;8KB的游戏&lt;/h2&gt;&lt;p&gt;我们要创建一个克隆版的贪吃蛇游戏，下面是完成后的演示:&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1968503937007875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibHA39zV9Xtib98RCV6icwxEkNdFe2NBn2LVbPezDrkZvMRbuBT0OPhdAg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;381&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如果你对游戏机制不感兴趣，请随意跳到有趣的部分，我们在9个步骤中将游戏从&lt;strong&gt;65MB&lt;/strong&gt;缩小到&lt;strong&gt;8KB&lt;/strong&gt;（向下滚动到你看到图形的地方）。&lt;/p&gt;&lt;p&gt;游戏将在文本模式下运行，我们将使用框画字符来画蛇。我相信Vulcan或DirectX会更有趣，但我们会用&lt;code&gt;System.Console&lt;/code&gt;来搞定。&lt;/p&gt;&lt;h2&gt;一个无分配的游戏&lt;/h2&gt;&lt;p&gt;我们将建立一个无分配的游戏 - 我所说的无分配并不是指C#游戏开发者中常见的 &quot;不要在游戏循环中分配&quot;。我的意思是 &quot;在整个代码库中禁止使用引用类型的&lt;code&gt;new&lt;/code&gt;关键字&quot;。其原因将在缩小游戏的最后阶段变得明显。&lt;/p&gt;&lt;p&gt;有了这样的限制，人们可能会想，使用C#到底有没有意义：没有&lt;code&gt;new&lt;/code&gt;关键字，我们就不会使用垃圾收集器，我们就不能抛出异常，等等 - 像C语言一样，也可以工作。&lt;/p&gt;&lt;p&gt;使用C#的一个原因是 &quot;因为我们可以&quot;。另一个原因是可测试性和代码共享 - 虽然游戏整体上是无分配的，但这并不意味着它的一部分不能在没有这种限制的不同项目中重复使用。例如，游戏的部分内容可以包含在xUnit项目中，以获得单元测试覆盖。如果选择C语言来构建游戏，那么即使代码从其他地方被重用，事情也必须受到C语言所能做到的限制。但由于C#提供了高水平和低水平结构的良好组合，我们可以遵循&quot;&lt;strong&gt;默认为高水平，必要时为低水平&lt;/strong&gt;(译者注：也就是说C#语言下限很低，上限很高的意思，99%的情况可以直接编写简单的高抽象的代码，1%的情况可以直接写类似C++低级代码)&quot;的哲学。&lt;/p&gt;&lt;p&gt;为了达到8KB的部署大小，低级别的部分将是必要的。&lt;/p&gt;&lt;h2&gt;游戏结构&lt;/h2&gt;&lt;p&gt;让我们从一个表示帧缓冲器的&lt;code&gt;结构体&lt;/code&gt;开始。帧缓冲器是一个组件，用来保存要绘制到屏幕上的像素（或者在这里是字符）：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;FrameBuffer&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Width &lt;span&gt;=&lt;/span&gt; &lt;span&gt;40&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Height &lt;span&gt;=&lt;/span&gt; &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Area &lt;span&gt;=&lt;/span&gt; Width &lt;span&gt;*&lt;/span&gt; Height&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;fixed&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; _chars&lt;span&gt;[&lt;/span&gt;Area&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;SetPixel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; character&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _chars&lt;span&gt;[&lt;/span&gt;y &lt;span&gt;*&lt;/span&gt; Width &lt;span&gt;+&lt;/span&gt; x&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; character&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Clear&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; Area&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            _chars&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&#x27; &#x27;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Render&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;const&lt;/span&gt; &lt;span&gt;ConsoleColor&lt;/span&gt; snakeColor &lt;span&gt;=&lt;/span&gt; ConsoleColor&lt;span&gt;.&lt;/span&gt;Green&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;ForegroundColor &lt;span&gt;=&lt;/span&gt; snakeColor&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;=&lt;/span&gt; Area&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; c &lt;span&gt;=&lt;/span&gt; _chars&lt;span&gt;[&lt;/span&gt;i &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;c &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&#x27;*&#x27;&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;c &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;&#x27;A&#x27;&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; c &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;&#x27;Z&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;c &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;&#x27;a&#x27;&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; c &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;&#x27;z&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;ForegroundColor &lt;span&gt;=&lt;/span&gt; c &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&#x27;*&#x27;&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; ConsoleColor&lt;span&gt;.&lt;/span&gt;Red &lt;span&gt;:&lt;/span&gt; ConsoleColor&lt;span&gt;.&lt;/span&gt;White&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;ForegroundColor &lt;span&gt;=&lt;/span&gt; snakeColor&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;else&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;i &lt;span&gt;%&lt;/span&gt; Width &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; i &lt;span&gt;/&lt;/span&gt; Width &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们提供了一些方法来设置各个像素，清除帧缓冲区，并将帧缓冲区的内容渲染到&lt;code&gt;System.Console&lt;/code&gt;中。渲染步骤对几个字符进行了特殊处理，这样我们就可以得到彩色的输出，而不需要对帧缓冲区的每个像素进行颜色跟踪。&lt;/p&gt;&lt;p&gt;需要指出的一个有趣的事情是&lt;code&gt;fixed _chars[Area]&lt;/code&gt;字段：这是C#的语法，用于声明一个固定数组。固定数组是一个数组，其各个元素是结构的一部分。您可以将其视为一组字段&lt;code&gt;char _char_0, _char_1, _char_2, _char_3,...的快捷方式。_char_Area&lt;/code&gt;，可以作为一个数组访问。这个数组的大小需要是一个编译时的常数，以便整个结构的大小是固定的。&lt;/p&gt;&lt;p&gt;我们不能过分追求固定数组的大小，因为作为结构的一部分，数组需要住在堆栈中，而堆栈往往被限制在很小的字节数内（通常每个线程1MB）。但是，&lt;code&gt;40*20*2字节（width*height*sizeof(char)）&lt;/code&gt;应该没问题。&lt;/p&gt;&lt;p&gt;接下来我们需要的是一个随机数发生器。.NET自带的随机数发生器是一个引用类型（有很好的理由！），我们禁止自己使用&lt;code&gt;new&lt;/code&gt;关键字 - 我们不能使用它。一个简单的&lt;code&gt;结构&lt;/code&gt;就可以了。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; _val&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; seed&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _val &lt;span&gt;=&lt;/span&gt; seed&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; _val &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;1103515245&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; _val &lt;span&gt;+&lt;/span&gt; &lt;span&gt;12345&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; &lt;span&gt;2147483648&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个随机数发生器不是很好，但我们不需要任何复杂的东西。&lt;/p&gt;&lt;p&gt;现在，我们只需要一些东西来包装蛇的逻辑。是时候建立一个 &quot;蛇&quot;结构了。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Snake&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; MaxLength &lt;span&gt;=&lt;/span&gt; &lt;span&gt;30&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; _length&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 身体是一个打包的整数，打包了X坐标、Y坐标和字符。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 为蛇的身体。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 只有原始类型可以使用C#的`固定`，因此这是一个`int`。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;fixed&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; _body&lt;span&gt;[&lt;/span&gt;MaxLength&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; _direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; _oldDirection&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; Course &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;set&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;_oldDirection &lt;span&gt;!=&lt;/span&gt; _direction&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                _oldDirection &lt;span&gt;=&lt;/span&gt; _direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;_direction &lt;span&gt;-&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; _direction &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                _direction &lt;span&gt;=&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;Snake&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; direction&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _body&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;x&lt;span&gt;,&lt;/span&gt; y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;DirectionToChar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;direction&lt;span&gt;,&lt;/span&gt; direction&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Pack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _direction &lt;span&gt;=&lt;/span&gt; direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _oldDirection &lt;span&gt;=&lt;/span&gt; direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _length &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Update&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;Part&lt;/span&gt; oldHead &lt;span&gt;=&lt;/span&gt; Part&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_body&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;Part&lt;/span&gt; newHead &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_direction &lt;span&gt;switch&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Direction&lt;span&gt;.&lt;/span&gt;Left &lt;span&gt;=&amp;gt;&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Width &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Direction&lt;span&gt;.&lt;/span&gt;Right &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;oldHead&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                _ &lt;span&gt;=&amp;gt;&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;X&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_direction &lt;span&gt;switch&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Direction&lt;span&gt;.&lt;/span&gt;Up &lt;span&gt;=&amp;gt;&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Direction&lt;span&gt;.&lt;/span&gt;Down &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;oldHead&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                _ &lt;span&gt;=&amp;gt;&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;DirectionToChar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_direction&lt;span&gt;,&lt;/span&gt; _direction&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        oldHead &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;oldHead&lt;span&gt;.&lt;/span&gt;X&lt;span&gt;,&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;DirectionToChar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_oldDirection&lt;span&gt;,&lt;/span&gt; _direction&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; _length &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Part&lt;/span&gt; current &lt;span&gt;=&lt;/span&gt; Part&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_body&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;current&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;==&lt;/span&gt; newHead&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; current&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;==&lt;/span&gt; newHead&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                result &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        _body&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; oldHead&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Pack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; _length &lt;span&gt;-&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;--&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            _body&lt;span&gt;[&lt;/span&gt;i &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; _body&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        _body&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; newHead&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Pack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        _oldDirection &lt;span&gt;=&lt;/span&gt; _direction&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; result&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Draw&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;FrameBuffer&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; _length&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Part&lt;/span&gt; p &lt;span&gt;=&lt;/span&gt; Part&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_body&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetPixel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;p&lt;span&gt;.&lt;/span&gt;X&lt;span&gt;,&lt;/span&gt; p&lt;span&gt;.&lt;/span&gt;Y&lt;span&gt;,&lt;/span&gt; p&lt;span&gt;.&lt;/span&gt;Character&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Extend&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;_length &lt;span&gt;&amp;lt;&lt;/span&gt; MaxLength&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            _length &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span&gt;HitTest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; _length&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Part&lt;/span&gt; current &lt;span&gt;=&lt;/span&gt; Part&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_body&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;current&lt;span&gt;.&lt;/span&gt;X &lt;span&gt;==&lt;/span&gt; x &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; current&lt;span&gt;.&lt;/span&gt;Y &lt;span&gt;==&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; &lt;span&gt;DirectionToChar&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Direction&lt;/span&gt; oldDirection&lt;span&gt;,&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; newDirection&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; DirectionChangeToChar &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;│┌?┐┘─┐??└│┘└?┌─&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; DirectionChangeToChar&lt;span&gt;[&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;oldDirection &lt;span&gt;*&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;newDirection&lt;span&gt;]&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 帮助结构来打包和解压_body中打包的整数。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; X&lt;span&gt;,&lt;/span&gt; Y&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; Character&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; c&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            X &lt;span&gt;=&lt;/span&gt; x&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            Y &lt;span&gt;=&lt;/span&gt; y&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            Character &lt;span&gt;=&lt;/span&gt; c&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Pack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; X &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;24&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Y &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;16&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Character&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt; &lt;span&gt;Unpack&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; packed&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Part&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;packed &lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;24&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;packed &lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;packed&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;Direction&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Up&lt;span&gt;,&lt;/span&gt; Right&lt;span&gt;,&lt;/span&gt; Down&lt;span&gt;,&lt;/span&gt; Left &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;蛇需要跟踪的状态是。代表蛇的身体的每个像素的坐标：&lt;/p&gt;&lt;p&gt;蛇提供了一些方法来&quot;延长&quot;蛇的长度（如果蛇已经长到一定长度则返回false），用蛇的身体来 &quot;测试&quot;一个像素，&quot;绘制&quot;蛇到一个 &quot;FrameBuffer&quot;中，以及&quot;更新&quot;蛇的位置，作为对游戏tick的响应（如果蛇吃了自己则返回false）。还有一个属性用于设置蛇的当前&quot;路线&quot;。&lt;/p&gt;&lt;p&gt;我们使用与帧缓冲区相同的固定数组技巧来保持蛇的无分配。这意味着蛇的最大长度必须是一个编译时常数。&lt;/p&gt;&lt;p&gt;我们需要的最后一件事是游戏循环:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Game&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;Result&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Win&lt;span&gt;,&lt;/span&gt; Loss &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt; _random&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Game&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; randomSeed&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        _random &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;randomSeed&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Result&lt;/span&gt; &lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;FrameBuffer&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;Snake&lt;/span&gt; s &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Snake&lt;/span&gt;&lt;span&gt;(&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;(&lt;/span&gt;Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;MakeFood&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; foodX&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;&lt;span&gt;long&lt;/span&gt;&lt;/span&gt; gameTime &lt;span&gt;=&lt;/span&gt; Environment&lt;span&gt;.&lt;/span&gt;TickCount64&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Clear&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Draw&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;return&lt;/span&gt; Result&lt;span&gt;.&lt;/span&gt;Loss&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Draw&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;Console&lt;span&gt;.&lt;/span&gt;KeyAvailable&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;ConsoleKeyInfo&lt;/span&gt; ki &lt;span&gt;=&lt;/span&gt; Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ReadKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;intercept&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;switch&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;ki&lt;span&gt;.&lt;/span&gt;Key&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;case&lt;/span&gt; ConsoleKey&lt;span&gt;.&lt;/span&gt;UpArrow&lt;span&gt;:&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        s&lt;span&gt;.&lt;/span&gt;Course &lt;span&gt;=&lt;/span&gt; Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;.&lt;/span&gt;Up&lt;span&gt;;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;case&lt;/span&gt; ConsoleKey&lt;span&gt;.&lt;/span&gt;DownArrow&lt;span&gt;:&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        s&lt;span&gt;.&lt;/span&gt;Course &lt;span&gt;=&lt;/span&gt; Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;.&lt;/span&gt;Down&lt;span&gt;;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;case&lt;/span&gt; ConsoleKey&lt;span&gt;.&lt;/span&gt;LeftArrow&lt;span&gt;:&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        s&lt;span&gt;.&lt;/span&gt;Course &lt;span&gt;=&lt;/span&gt; Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;.&lt;/span&gt;Left&lt;span&gt;;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;case&lt;/span&gt; ConsoleKey&lt;span&gt;.&lt;/span&gt;RightArrow&lt;span&gt;:&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        s&lt;span&gt;.&lt;/span&gt;Course &lt;span&gt;=&lt;/span&gt; Snake&lt;span&gt;.&lt;/span&gt;Direction&lt;span&gt;.&lt;/span&gt;Right&lt;span&gt;;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HitTest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;foodX&lt;span&gt;,&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;s&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Extend&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;MakeFood&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; foodX&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;else&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;return&lt;/span&gt; Result&lt;span&gt;.&lt;/span&gt;Win&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetPixel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;foodX&lt;span&gt;,&lt;/span&gt; foodY&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&#x27;*&#x27;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Render&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            gameTime &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;long&lt;/span&gt;&lt;/span&gt; delay &lt;span&gt;=&lt;/span&gt; gameTime &lt;span&gt;-&lt;/span&gt; Environment&lt;span&gt;.&lt;/span&gt;TickCount64&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;delay &lt;span&gt;&amp;gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Thread&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;delay&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;else&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                gameTime &lt;span&gt;=&lt;/span&gt; Environment&lt;span&gt;.&lt;/span&gt;TickCount64&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;MakeFood&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;in&lt;/span&gt; &lt;span&gt;Snake&lt;/span&gt; snake&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; foodX&lt;span&gt;,&lt;/span&gt; &lt;span&gt;out&lt;/span&gt; &lt;span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;do&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            foodX &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            foodY &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;_random&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;snake&lt;span&gt;.&lt;/span&gt;&lt;span&gt;HitTest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;foodX&lt;span&gt;,&lt;/span&gt; foodY&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetWindowSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;,&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetBufferSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;FrameBuffer&lt;span&gt;.&lt;/span&gt;Width&lt;span&gt;,&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;Title &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;See Sharp Snake&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Console&lt;span&gt;.&lt;/span&gt;CursorVisible &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;FrameBuffer&lt;/span&gt; fb &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FrameBuffer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Game&lt;/span&gt; g &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Game&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;Environment&lt;span&gt;.&lt;/span&gt;TickCount64&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;Result&lt;/span&gt; result &lt;span&gt;=&lt;/span&gt; g&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; fb&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; message &lt;span&gt;=&lt;/span&gt; result &lt;span&gt;==&lt;/span&gt; Result&lt;span&gt;.&lt;/span&gt;Win &lt;span&gt;?&lt;/span&gt; &lt;span&gt;&quot;You win&quot;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&quot;You lose&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; position &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;FrameBuffer&lt;span&gt;.&lt;/span&gt;Width &lt;span&gt;-&lt;/span&gt; message&lt;span&gt;.&lt;/span&gt;Length&lt;span&gt;)&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; i &lt;span&gt;&amp;lt;&lt;/span&gt; message&lt;span&gt;.&lt;/span&gt;Length&lt;span&gt;;&lt;/span&gt; i&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SetPixel&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;position &lt;span&gt;+&lt;/span&gt; i&lt;span&gt;,&lt;/span&gt; FrameBuffer&lt;span&gt;.&lt;/span&gt;Height &lt;span&gt;/&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; message&lt;span&gt;[&lt;/span&gt;i&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            fb&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Render&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            Console&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ReadKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;intercept&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用随机数发生器生成蛇的随机位置和方向，我们随机地将食物放在游戏表面，确保它不与蛇重叠，然后开始游戏循环。&lt;/p&gt;&lt;p&gt;在游戏循环中，我们要求蛇更新它的位置并检查它是否吃了自己。然后我们画出蛇，检查键盘的输入，用食物对蛇进行测试，并将所有内容渲染到控制台。&lt;/p&gt;&lt;p&gt;这就差不多了。让我们看看我们在尺寸方面的情况。&lt;/p&gt;&lt;h2&gt;.NET Core 3.0 贪吃蛇的大小&lt;/h2&gt;&lt;p&gt;我把游戏放在GitHub repo中，这样你就可以跟着做了。该项目文件将根据传递给&lt;code&gt;publish&lt;/code&gt;的&lt;code&gt;Mode&lt;/code&gt;属性，以不同的配置制作游戏。要用CoreCLR生成默认配置，请运行：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将产生一个单一的EXE文件，其容量高达65MB。产生的EXE包括游戏、.NET运行时和作为.NET标准部分的基础类库。你可能会说 &quot;仍然比Electron好&quot;，但让我们看看我们是否能做得更好。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibG6kqtibBRgiagKia0tyrlZvmysOmmd9nibMxIy5Y0guhwtJmApZ6ibPTJrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;IL Linker&lt;/h2&gt;&lt;p&gt;IL Linker是一个随.NET Core 3.0出厂的工具 - 该工具通过扫描整个程序并删除未被引用的程序集来删除你的应用程序中未使用的代码。要在项目中使用它，需要传递一个&lt;code&gt;PublishTrimmed&lt;/code&gt;属性来发布。像这样：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:PublishTrimmed&lt;span&gt;=&lt;/span&gt;true &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这种设置下，游戏缩减到25MB。这是一个很好的开端，带来了60%的缩减，但离我们10KB的目标还很远。&lt;/p&gt;&lt;p&gt;IL Linker有更积极的设置，但没有公开，它们可以进一步降低这个数字，最终，我们将受到CoreCLR运行时本身coreclr.dll(5.3MB的限制)。我们可能已经在通往8KB游戏的道路上走到了死胡同。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibtibH9TliaFHHs1sYf7tV2EjHYCcDEj1rNsU2hnmvRrKo6DznibibCaqqzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;曲线救国: Mono&lt;/h2&gt;&lt;p&gt;Mono是另一个.NET运行时，对很多人来说是Xamarin的同义词。为了用C#贪吃蛇构建一个可执行文件，我们可以使用Mono自带的mkbundle工具。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;mkbundle SeeSharpSnake.dll &lt;span&gt;--simple&lt;/span&gt; &lt;span&gt;-o&lt;/span&gt; SeeSharpSnake.exe &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将产生一个12.3MB的可执行文件，它依赖于mono-2.0-sgen.dll，它本身有5.9MB - 所以我们看到总共有18.2MB。当试图启动它时，我碰到了 &quot;错误的映射文件：&lt;code&gt;mono_file_map_error&lt;/code&gt;失败&quot;，但是除了这个错误之外，还会有其它问题，mono最终的结果是18.2 MB。&lt;/p&gt;&lt;p&gt;与CoreCLR不同，Mono还依赖于Visual C++运行时再分配库，而该库在默认的Windows安装中是不可用的：为了保持应用程序自成一体的目标，我们需要将该库与应用程序一起携带。这使应用程序的占用空间又增加了一兆字节左右。&lt;/p&gt;&lt;p&gt;我们有可能通过添加IL链接器来缩小体积，但我们会遇到与CoreCLR相同的问题-运行时（mono-2.0-sgen.dll）的大小为5.9MB（加上它上面的C++运行时库的大小），它代表了任何可能的IL级优化可能带给我们的底限。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibutfMSkTjNzm3DjfLxqhvxzJNfvN63FHia05x0C9s6e2OXDJm7GLR3UQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;我们可以把运行时拿掉吗？&lt;/h2&gt;&lt;p&gt;很明显，为了达到接近8KB的目标，我们需要把运行时从应用程序中剥离出来。唯一可以做到这一点的.NET运行时是CoreRT。虽然人们通常称CoreRT为&quot;运行时&quot;，但它更接近于一个&quot;运行时库&quot;。它不是像CoreCLR或Mono那样的虚拟机 - CoreRT的运行时只是一组函数，支持由CoreRT的AOT编译器产生的本地代码。&lt;/p&gt;&lt;p&gt;CoreRT自带的库使CoreRT看起来像其他的.NET运行时：有一个添加GC的库，添加支持反射的库，添加JIT的库，添加解释器的库，等等。但所有这些库都是可选的（包括GC）。&lt;/p&gt;&lt;p&gt;更多关于CoreRT与CoreCLR和Mono的不同之处在这篇文章。当我在阅读D语言的运行时间时，它让我想起了CoreRT的很多内容。这篇文章也是一个有趣的阅读。&lt;/p&gt;&lt;p&gt;让我们看看我们在默认的CoreRT配置下的情况:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这降到了4.7MB。这是迄今为止最小的，但仍然不够好。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibibFyzunSaiaSE6rLkhgcKnRbCuGt3ia69TDm3zm4nj98d1l7RCvTtWrxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;在CoreRT中设置节省级别为中等&lt;/h2&gt;&lt;p&gt;CoreRT-AOT编译器提供了大量影响代码生成的设置。默认情况下，编译器试图以牺牲生成的可执行文件的大小为代价，最大限度地提高生成代码的速度和与其他.NET运行机制的兼容性。&lt;/p&gt;&lt;p&gt;编译器有一个内置的链接器，可以删除未使用的代码。我们在Snake项目中定义的 &quot;CoreRT-Moderate &quot;设置放宽了对删除未使用代码的一个限制，允许更多的删除。我们还要求编译器用程序速度换取一些额外的字节。大多数.NET程序在这种模式下都能正常工作。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT-Moderate &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们现在是4.3 MB。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibd846baveibVPaFWgtELs0NUf6CHI0ib0aJYqAiaR7HN5j94pdLMcEPgicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;在CoreRT中设置节省级别为高&lt;/h2&gt;&lt;p&gt;我把另外几个编译选项归纳为&quot;高&quot;模式。这个模式将删除对许多会影响到应用程序的东西的支持，但Snake（作为低级别的东西）不会有问题。&lt;/p&gt;&lt;p&gt;我们将删除：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;框架实施细节的堆栈跟踪数据&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;框架产生的异常中的异常信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对非英语区的支持&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;EventSource工具化&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT-High &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们已经达到了3.0MB。这是我们开始时的5%，但CoreRT还有一招。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibgiaMMsVOfaz0Ulb8yhtMlBWxqibTpEciboOYDTFZe3hRlyicZp4VyCIEVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;关闭反射&lt;/h2&gt;&lt;p&gt;CoreRT运行时库的很大一部分是用于实现.NET的反射。因为CoreRT是一个提前编译的基于运行时库的.NET实现，它不需要典型的基于虚拟机的运行时（如CoreCLR和Mono）需要的大部分数据结构。这些数据包括诸如类型、方法、签名、基础类型等的名称。CoreRT嵌入这些数据是因为使用.NET反射的程序需要它，但不是因为运行时需要它。我把这些数据称为 &quot;反射开销&quot;，因为它对运行时来说就是这样的。&lt;/p&gt;&lt;p&gt;CoreRT支持一种无反射模式，可以避免这种开销。你可能会觉得很多.NET代码在没有反射的情况下无法工作，你可能是对的，但有很多东西确实可以工作，令人惊讶。Gui.cs、System.IO.Pipelines，甚至是一个基本的WinForms应用程序。贪吃蛇肯定会工作，所以让我们把这个模式打开。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT-ReflectionFree &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们现在是1.2MB。反映反射开销是相当大的!&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4iby6BhAvICy7PtxeQ9n9P8oiavOLHXibiaCvZUe1F3iaEknXEeFu36SwwTMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;来点骚操作&lt;/h2&gt;&lt;p&gt;现在我们已经走到了.NET SDK可能实现的尽头，我们需要来点骚操作。我们现在要做的事情已经开始变得很荒谬了，我不指望其他人能做到这一点。我们要依靠CoreRT编译器和运行时的实现细节。&lt;/p&gt;&lt;p&gt;正如我们前面所看到的，CoreRT是一套运行时库，加上一个超前的编译器。如果我们用一个最小的重新实现来取代运行时库呢？我们已经决定不使用垃圾收集器，这使得这项工作更加可行。&lt;/p&gt;&lt;p&gt;让我们从简单的事情开始：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Threading&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-synch-l1-2-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; delayMs&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Environment&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-sysinfo-l1-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;&lt;span&gt;long&lt;/span&gt;&lt;/span&gt; &lt;span&gt;GetTickCount64&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;long&lt;/span&gt;&lt;/span&gt; TickCount64 &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;GetTickCount64&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里我们重新实现了&lt;code&gt;Thread.Sleep&lt;/code&gt;和&lt;code&gt;Environment.TickCount64&lt;/code&gt;（用于Windows），同时避免了对现有运行时库的所有依赖。&lt;/p&gt;&lt;p&gt;让我们对游戏使用的&lt;code&gt;System.Console&lt;/code&gt;子集做同样的事情：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Console&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            FALSE &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            TRUE &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-processenvironment-l1-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; &lt;span&gt;GetStdHandle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; s_outputHandle &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GetStdHandle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; s_inputHandle &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GetStdHandle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0.dll&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EntryPoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;SetConsoleTitleW&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; Title &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;set&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;fixed&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; c &lt;span&gt;=&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;SetConsoleTitle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;c&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;CONSOLE_CURSOR_INFO&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; Size&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; Visible&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleCursorInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; CONSOLE_CURSOR_INFO&lt;span&gt;*&lt;/span&gt; cursorInfo&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; CursorVisible &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;set&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;CONSOLE_CURSOR_INFO&lt;/span&gt; cursorInfo &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;CONSOLE_CURSOR_INFO&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    Size &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    Visible &lt;span&gt;=&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;TRUE &lt;span&gt;:&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;FALSE &lt;/span&gt;&lt;span&gt;                &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;SetConsoleCursorInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;cursorInfo&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleTextAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;ushort&lt;/span&gt;&lt;/span&gt; attribute&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;ConsoleColor&lt;/span&gt; ForegroundColor &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;set&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;SetConsoleTextAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;ushort&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;KEY_EVENT_RECORD&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; KeyDown&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; RepeatCount&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; VirtualKeyCode&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; VirtualScanCode&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; UChar&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; ControlKeyState&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;INPUT_RECORD&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; EventType&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;KEY_EVENT_RECORD&lt;/span&gt; KeyEvent&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l1-2-0&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EntryPoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;PeekConsoleInputW&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; CharSet &lt;span&gt;=&lt;/span&gt; CharSet&lt;span&gt;.&lt;/span&gt;Unicode&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;PeekConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; hConsoleInput&lt;span&gt;,&lt;/span&gt; INPUT_RECORD&lt;span&gt;*&lt;/span&gt; lpBuffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; nLength&lt;span&gt;,&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; lpNumberOfEventsRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; KeyAvailable &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;get&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; nRead&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;INPUT_RECORD&lt;/span&gt; buffer&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;PeekConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_inputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;nRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;nRead &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;buffer&lt;span&gt;.&lt;/span&gt;EventType &lt;span&gt;==&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; buffer&lt;span&gt;.&lt;/span&gt;KeyEvent&lt;span&gt;.&lt;/span&gt;KeyDown &lt;span&gt;!=&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;FALSE&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;                    &lt;span&gt;ReadConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_inputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;nRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l1-2-0&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EntryPoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;ReadConsoleInputW&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; CharSet &lt;span&gt;=&lt;/span&gt; CharSet&lt;span&gt;.&lt;/span&gt;Unicode&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;ReadConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; hConsoleInput&lt;span&gt;,&lt;/span&gt; INPUT_RECORD&lt;span&gt;*&lt;/span&gt; lpBuffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; nLength&lt;span&gt;,&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; lpNumberOfEventsRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;ConsoleKeyInfo&lt;/span&gt; &lt;span&gt;ReadKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; intercept&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;/span&gt; nRead&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;INPUT_RECORD&lt;/span&gt; buffer&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;do&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;ReadConsoleInput&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_inputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;nRead&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;buffer&lt;span&gt;.&lt;/span&gt;EventType &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; buffer&lt;span&gt;.&lt;/span&gt;KeyEvent&lt;span&gt;.&lt;/span&gt;KeyDown &lt;span&gt;==&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;FALSE&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ConsoleKeyInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;buffer&lt;span&gt;.&lt;/span&gt;KeyEvent&lt;span&gt;.&lt;/span&gt;UChar&lt;span&gt;,&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;ConsoleKey&lt;span&gt;)&lt;/span&gt;buffer&lt;span&gt;.&lt;/span&gt;KeyEvent&lt;span&gt;.&lt;/span&gt;VirtualKeyCode&lt;span&gt;,&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;SMALL_RECT&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; Left&lt;span&gt;,&lt;/span&gt; Top&lt;span&gt;,&lt;/span&gt; Right&lt;span&gt;,&lt;/span&gt; Bottom&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleWindowInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; absolute&lt;span&gt;,&lt;/span&gt; SMALL_RECT&lt;span&gt;*&lt;/span&gt; consoleWindow&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;SetWindowSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;SMALL_RECT&lt;/span&gt; rect &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;SMALL_RECT&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Left &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Top &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Right &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;x &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                Bottom &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;y &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;SetConsoleWindowInfo&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; BOOL&lt;span&gt;.&lt;/span&gt;TRUE&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;rect&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;short&lt;/span&gt;&lt;/span&gt; X&lt;span&gt;,&lt;/span&gt; Y&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleScreenBufferSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; size&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;SetBufferSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;SetConsoleScreenBufferSize&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; X &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;x&lt;span&gt;,&lt;/span&gt; Y &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;y &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l2-1-0&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;SetConsoleCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; position&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;SetCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; x&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; y&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;SetConsoleCursorPosition&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;COORD&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; X &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;x&lt;span&gt;,&lt;/span&gt; Y &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;y &lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;DllImport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;api-ms-win-core-console-l1-2-0&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; EntryPoint &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;WriteConsoleW&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;BOOL&lt;/span&gt; &lt;span&gt;WriteConsole&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt; handle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; buffer&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; numChars&lt;span&gt;,&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; charsWritten&lt;span&gt;,&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt;*&lt;/span&gt; reserved&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;Write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; c&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; dummy&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;WriteConsole&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;s_outputHandle&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;c&lt;span&gt;,&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;dummy&lt;span&gt;,&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们用这个替换框架重建游戏：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;dotnet publish &lt;span&gt;-r&lt;/span&gt; win-x64 &lt;span&gt;-c&lt;/span&gt; Release /p:Mode&lt;span&gt;=&lt;/span&gt;CoreRT-ReflectionFree /p:IncludePal&lt;span&gt;=&lt;/span&gt;true &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不出所料，这并没有为我们节省多少。我们要替换的API已经是相对轻量级的了，重写它们只获得了几千字节，不值得一提。但这是通往我们旅程中最后一步的重要垫脚石。&lt;/p&gt;&lt;h2&gt;替换所有的运行时库&lt;/h2&gt;&lt;p&gt;在Snake游戏中剩下的1.2MB的代码和数据是用来支持我们看不到的东西，但却在那里 - 在我们需要它们的时候准备好了。有垃圾收集器，对异常处理的支持，当发生未处理的异常时格式化和打印堆栈痕迹到控制台的代码，以及许多其他隐藏在底层的东西。&lt;/p&gt;&lt;p&gt;编译器可以检测到这些都不需要，并避免生成它们，但我们要做的事情非常奇怪，不值得添加编译器功能来支持它。避免这种情况的方法是简单地提供一个替代的运行时库。&lt;/p&gt;&lt;p&gt;让我们从重新定义一个最小版本的基本类型开始：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 对象的布局是与编译器的契约.&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; m_pEEType&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Void&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 原始类型的布局是特例，因为它将是递归的。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 这些真的不需要任何字段来工作。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Char&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;SByte&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Byte&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Int16&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;UInt16&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Int32&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;UInt32&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Int64&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;UInt64&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;UIntPtr&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Single&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Double&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ValueType&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Enum&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;ValueType&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Nullable&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 字符串类型的布局是与编译器的契约。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; Length&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; _firstChar&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;span&gt;.&lt;/span&gt;Intrinsic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;get&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;return&lt;/span&gt; Internal&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;span&gt;.&lt;/span&gt;Unsafe&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; _firstChar&lt;span&gt;,&lt;/span&gt; index&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Delegate&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MulticastDelegate&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Delegate&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;RuntimeTypeHandle&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;RuntimeMethodHandle&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;RuntimeFieldHandle&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Attribute&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;IntrinsicAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;RuntimeHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; OffsetToStringData &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IntPtr&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;CharSet&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        None &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Ansi &lt;span&gt;=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Unicode &lt;span&gt;=&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Auto &lt;span&gt;=&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;DllImportAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; EntryPoint&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;CharSet&lt;/span&gt; CharSet&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;DllImportAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; dllName&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;LayoutKind&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Sequential &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Explicit &lt;span&gt;=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        Auto &lt;span&gt;=&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;StructLayoutAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;StructLayoutAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;LayoutKind&lt;/span&gt; layoutKind&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Internal&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Unsafe&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 这个方法的主体是由编译器生成的。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 它将做Unsafe.Add应该做的事情。只是不可能用C#来表达它。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;span&gt;.&lt;/span&gt;Intrinsic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span&gt;&lt;span&gt;Add&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; source&lt;span&gt;,&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; elementOffset&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这一点上，让我们放弃项目文件和dotnet CLI，直接启动各个工具。我们首先启动C#编译器（CSC）。我建议从 &quot;x64 Native Tools Command Prompt for VS 2019 &quot;启动这些命令 - 如果你安装了Visual Studio，它就在你的开始菜单中。正确的工具版本在该窗口的PATH上。&lt;/p&gt;&lt;p&gt;&lt;code&gt;/noconfig&lt;/code&gt;、&lt;code&gt;/nostdlib&lt;/code&gt;和&lt;code&gt;/runtimemetadataversion&lt;/code&gt;是编译定义&lt;code&gt;System.Object&lt;/code&gt;的东西需要的神奇开关。我选择了&lt;code&gt;.lexe&lt;/code&gt;文件扩展名而不是&lt;code&gt;.exe&lt;/code&gt;，因为&lt;code&gt;.exe&lt;/code&gt;将被用于成品。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;csc.exe /debug /O /noconfig /nostdlib /runtimemetadataversion:v4.0.30319 MiniBCL.cs Game&lt;span&gt;\&lt;/span&gt;FrameBuffer.cs Game&lt;span&gt;\&lt;/span&gt;Random.cs Game&lt;span&gt;\&lt;/span&gt;Game.cs Game&lt;span&gt;\&lt;/span&gt;Snake.cs Pal&lt;span&gt;\&lt;/span&gt;Thread.Windows.cs Pal&lt;span&gt;\&lt;/span&gt;Environment.Windows.cs Pal&lt;span&gt;\&lt;/span&gt;Console.Windows.cs /out:zerosnake.ilexe /langversion:latest /unsafe &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将成功地用C#编译器编译出游戏的IL字节码版本。我们仍然需要某种运行时来执行它。&lt;/p&gt;&lt;p&gt;让我们尝试将其送入CoreRT提前编译器，从IL中生成本地代码。如果你按照上面的步骤，你会在你的NuGet软件包缓存中找到ilc.exe，即CoreRT提前编译器（类似于&lt;code&gt;%USERPROFILE%\.nuget\packages\runtime.win-x64.microsoft.dotnet.ilcompiler\1.0.0-alpha-27402-01\Tools&lt;/code&gt;的地方）。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;ilc.exe zerosnake.ilexe &lt;span&gt;-o&lt;/span&gt; zerosnake.obj &lt;span&gt;--systemmodule&lt;/span&gt; zerosnake &lt;span&gt;--Os&lt;/span&gt; &lt;span&gt;-g&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将会以 &quot;预期类型&#x27;Internal.Runtime.CompilerHelpers.StartupCodeHelpers&#x27;未在模块&#x27;zerosnake&#x27;中找到&quot;的异常而崩溃。事实证明，除了一个托管的开发者所期望的明显的最低限度外，还有一个CoreRT编译器编译输入的最低限度。&lt;/p&gt;&lt;p&gt;让我们跳到后面去，添加需要的东西：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Internal&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 编译器寻找的一个类，它有帮助器来初始化&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 进程。编译器可以优雅地处理不存在的帮助器。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 但是类本身不存在则无法处理。让我们添加一个空类。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;class&lt;/span&gt; &lt;span&gt;StartupCodeHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 一种特殊的类型，编译器用它来实现通用接口&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// (例如IEnumerable&amp;lt;T&amp;gt;)的数组。我们的数组将不会实现任何通用接口。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Array&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 自定义属性，标志着一个类具有特殊的&quot;调用&quot;。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 编译器有特殊的逻辑处理类型，有这个属性。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;McgIntrinsicsAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 一个负责运行静态构造函数的类。编译器将调用这个&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;//代码以确保静态构造函数的运行，并且只运行一次。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;span&gt;.&lt;/span&gt;McgIntrinsics&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;ClassConstructorRunner&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; &lt;span&gt;CheckStaticClassConstructionReturnNonGCStaticBase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;StaticClassConstructionContext&lt;/span&gt; context&lt;span&gt;,&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; nonGcStaticBase&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;CheckStaticClassConstruction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; context&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;return&lt;/span&gt; nonGcStaticBase&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;CheckStaticClassConstruction&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;StaticClassConstructionContext&lt;/span&gt; context&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 非常简化的类构造函数运行器。在现实世界中，类构造器运行器&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 需要能够处理潜在的多个线程竞相初始化的问题。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 一个单一的类，并需要能够处理潜在的死锁&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 类构造函数之间的潜在死锁。&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 如果该类已经被初始化，我们就完成了。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;initialized &lt;span&gt;==&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span&gt;                &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 将该类标记为初始化。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            context&lt;span&gt;.&lt;/span&gt;initialized &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;// 运行类的构造函数。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;            &lt;span&gt;&lt;span&gt;Call&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;context&lt;span&gt;.&lt;/span&gt;cctorMethodAddress&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 这是一个特殊的编译器内在因素，调用pfn所指向的方法。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 编译器会为此生成代码，我们只需将其标记为 &quot;extern&quot;。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 一旦C#得到适当的函数指针支持（计划在C#9中），就不需要这个了。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerServices&lt;span&gt;.&lt;/span&gt;Intrinsic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span&gt;&lt;span&gt;Call&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;T&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; pfn&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 这个数据结构是与编译器的契约。它持有一个静态&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 构造函数的地址，以及一个指定该构造函数是否已经执行的标志。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;span&gt;.&lt;/span&gt;StructLayout&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;InteropServices&lt;span&gt;.&lt;/span&gt;LayoutKind&lt;span&gt;.&lt;/span&gt;Sequential&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; &lt;span&gt;StaticClassConstructionContext&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 指向静态类构造方法代码的指针。这是由&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 绑定器/运行时。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;IntPtr&lt;/span&gt; cctorMethodAddress&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 该类的初始化状态。这被初始化为0&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 时，运行时都会调用类库的CheckStaticClassConstruction，并使用这个上下文。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;//结构，除非初始化==1。这个检查是特定的，以允许类库为每一个Cctor存储更多的&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 比二进制状态更多，如果它想这样做的话。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; initialized&lt;span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们用这些新添加的代码重建IL字节码，并重新运行ILC。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;csc.exe /debug /O /noconfig /nostdlib /runtimemetadataversion:v4.0.30319 MiniRuntime.cs MiniBCL.cs Game&lt;span&gt;\&lt;/span&gt;FrameBuffer.cs Game&lt;span&gt;\&lt;/span&gt;Random.cs Game&lt;span&gt;\&lt;/span&gt;Game.cs Game&lt;span&gt;\&lt;/span&gt;Snake.cs Pal&lt;span&gt;\&lt;/span&gt;Thread.Windows.cs Pal&lt;span&gt;\&lt;/span&gt;Environment.Windows.cs Pal&lt;span&gt;\&lt;/span&gt;Console.Windows.cs /out:zerosnake.ilexe /langversion:latest /unsafeilc.exe zerosnake.ilexe &lt;span&gt;-o&lt;/span&gt; zerosnake.obj &lt;span&gt;--systemmodule&lt;/span&gt; zerosnake &lt;span&gt;--Os&lt;/span&gt; &lt;span&gt;-g&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们有了zerosnake.obj - 一个标准的对象文件，与其他本地编译器（如C或C++）产生的对象文件没有区别。最后一步是连接它。我们将使用link.exe工具，它应该在我们的 &quot;x64本地工具命令提示符 &quot;的PATH中（你可能需要在Visual Studio中安装C/C++开发工具）。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;link.exe /debug:full /subsystem:console zerosnake.obj /entry:__managed__Main &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;__managed__Main&lt;/code&gt;符号名称是与编译器的契约 - 它是ILC创建的程序的托管入口的名称。&lt;/p&gt;&lt;p&gt;但它并没有发挥作用:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpPInvoke &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol SetConsoleTextAttribute &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol WriteConsoleW &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol GetStdHandle &lt;/span&gt;&lt;span&gt;&lt;span&gt;..&lt;/span&gt;. &lt;/span&gt;&lt;span&gt;fatal error LNK1120: &lt;span&gt;17&lt;/span&gt; unresolved externals &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中一些符号看起来很熟悉 - 链接器不知道在哪里寻找我们调用的Windows API。让我们来添加这些的导入库:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;link.exe /debug:full /subsystem:console zerosnake.obj /entry:__managed__Main kernel32.lib ucrt.lib &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这看起来更好 - 只有4个未解决的符号:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpPInvoke &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpPInvokeReturn &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpReversePInvoke2 &lt;/span&gt;&lt;span&gt;error LNK2001: unresolved external symbol RhpReversePInvokeReturn2 &lt;/span&gt;&lt;span&gt;fatal error LNK1120: &lt;span&gt;4&lt;/span&gt; unresolved externals &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其余缺失的符号是编译器希望在运行时库中找到的辅助工具。它们的缺失只有在链接时才会被发现，因为这些辅助工具通常是在汇编中实现的，而且编译器只用它们的符号名称来指代它们（而不是我们上面提供的其他编译器需要的类型和方法）。&lt;/p&gt;&lt;p&gt;当本机代码调用到托管代码，以及托管代码调用到本机代码时，这些帮助程序会建立和拆除堆栈框架。这对于GC的运行是必要的。由于我们没有GC，让我们用一段C#和另一个编译器能理解的神奇属性来存根它们。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 编译器理解的自定义属性，指示它&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;// 在给定的符号名称下导出方法。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;RuntimeExportAttribute&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span&gt;Attribute&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;RuntimeExportAttribute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;/span&gt; entry&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;Internal&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;CompilerHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;class&lt;/span&gt; &lt;span&gt;StartupCodeHelpers&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 这些方法的包含类型并不重要。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;// 让我们把它们放在StarupCodeHelpers中。&lt;/span&gt; &lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;RuntimeExport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;RhpReversePInvoke2&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;RhpReversePInvoke2&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; frame&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;RuntimeExport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;RhpReversePInvokeReturn2&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;RhpReversePInvokeReturn2&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; frame&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;RuntimeExport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;RhpPInvoke&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;RhpPinvoke&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; frame&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;[&lt;/span&gt;&lt;span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;Runtime&lt;span&gt;.&lt;/span&gt;RuntimeExport&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;RhpPInvokeReturn&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;/span&gt;&lt;span&gt;        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span&gt;RhpPinvokeReturn&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;System&lt;span&gt;.&lt;/span&gt;IntPtr&lt;/span&gt; frame&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在用这些修改重建C#源代码并重新运行ILC后，链接终于会成功。&lt;/p&gt;&lt;p&gt;我们现在已经只有27KB，而且游戏还能正常运行!&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibVZgpEBAvDs6Tu7ZV3dMtL0TRUKRo4ObRdrmMgFM40lh5o0vf2Q7Oicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;扰乱链接器&lt;/h2&gt;&lt;p&gt;剩余的几千字节可以通过使用本地开发者用来缩小其本地应用程序的技巧来削减。&lt;/p&gt;&lt;p&gt;我们要做的是&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;禁用增量链接&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;剥离重定位信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;合并可执行文件中的类似部分&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将可执行文件中的内部对齐设置为一个小值&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;link&lt;span&gt;.&lt;/span&gt;exe &lt;span&gt;/&lt;/span&gt;debug&lt;span&gt;:&lt;/span&gt;full &lt;span&gt;/&lt;/span&gt;subsystem&lt;span&gt;:&lt;/span&gt;console zerosnake&lt;span&gt;.&lt;/span&gt;obj &lt;span&gt;/&lt;/span&gt;entry&lt;span&gt;:&lt;/span&gt;__managed__Main kernel32&lt;span&gt;.&lt;/span&gt;lib ucrt&lt;span&gt;.&lt;/span&gt;lib &lt;span&gt;/&lt;/span&gt;merge&lt;span&gt;:&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;modules&lt;span&gt;=&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;rdata &lt;span&gt;/&lt;/span&gt;merge&lt;span&gt;:&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;pdata&lt;span&gt;=&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;rdata &lt;span&gt;/&lt;/span&gt;incremental&lt;span&gt;:&lt;/span&gt;no &lt;span&gt;/&lt;/span&gt;DYNAMICBASE&lt;span&gt;:&lt;/span&gt;NO &lt;span&gt;/&lt;/span&gt;filealign&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;align&lt;span&gt;:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成功! 最后只有8176字节，不到8KB !&lt;/p&gt;&lt;p&gt;游戏仍然可以运行，有趣的是，它仍然是完全可调试的 - 请在Visual Studio中打开EXE（文件-&amp;gt;打开解决方案），打开作为游戏一部分的一个C#文件，在其中设置一个断点，点击F5启动EXE，并看到断点被击中。你可以在ILC中禁用优化，使可执行文件更容易被调试 - 只要放弃&lt;code&gt;--Os&lt;/code&gt;参数。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9337142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibyrdb9n7A3Lll4zT3zKzfDwpicz97bW5TH6LpZFmtHiauaN0cX33jPxHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;我们可以把它编译得更小吗？&lt;/h2&gt;&lt;p&gt;可执行文件仍然携带着一些并非必要的数据 - ILC编译器只是没有提供命令行选项来禁止其生成。&lt;/p&gt;&lt;p&gt;其中一个被生成但我们不需要的数据结构是各个方法的GC信息。CoreRT有一个精确的垃圾收集器，它要求每个方法描述GC堆的引用在方法主体的每个指令中的位置。由于我们在Snake游戏中没有垃圾收集器，这些数据是不必要的。其他运行时（例如Mono）使用保守的垃圾收集器，不需要这些数据（它只是假设堆栈和CPU寄存器的任何部分都可能是GC引用）- 保守的垃圾收集器以GC性能换取额外的大小节省。CoreRT中使用的精确的垃圾收集器也可以在保守模式下运行，但它还没有被连接起来。这是一个潜在的未来补充，我们可以利用它来使程序编译得更小。&lt;/p&gt;&lt;p&gt;也许有一天，我们可以使我们的游戏的简化版本适合于512字节的启动扇区。在那之前，祝你黑客行动愉快.&lt;/p&gt;&lt;h2&gt;.NET性能优化交流群&lt;/h2&gt;&lt;p&gt;相信大家在开发中经常会遇到一些性能问题，苦于没有有效的工具去发现性能瓶颈，或者是发现瓶颈以后不知道该如何优化。之前一直有读者朋友询问有没有技术交流群，但是由于各种原因一直都没创建，现在很高兴的在这里宣布，我创建了一个专门交流.NET性能优化经验的群组，主题包括但不限于：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;如何找到.NET性能瓶颈，如使用APM、dotnet tools等工具&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;.NET框架底层原理的实现，如垃圾回收器、JIT等等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如何编写高性能的.NET代码，哪些地方存在性能陷阱&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;希望能有更多志同道合朋友加入，分享一些工作中遇到的.NET性能问题和宝贵的性能分析优化经验。&lt;strong&gt;目前一群已满，现在开放二群，可以直接扫码进入。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果提示已经达到200人，可以加我微信，我拉你进群: &lt;strong&gt;ls1075&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;微信长按下图即可加群&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4500484966052376&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibRDDf9x0B66JZWpOpPFsRpqH6mKl51ccwiaBHf2PG2LL2pwL1r5Ej4Kg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1031&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;另外也创建了&lt;strong&gt;QQ群&lt;/strong&gt;，群号: 687779078，欢迎大家加入。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.792&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AWNKm2Xf6KEQP5h5YsfQrgKRKBbRhW4ibpo1gbx6sq1cYiaQw85WPwboEDh6QR6DqC01lDPvJhwra39yEFic7bO4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>498ec33ca92507ef76fa57eec72e9f0f</guid>
<title>Titus 网关中的缓存一致性机制</title>
<link>https://toutiao.io/k/t9cftid</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;API网关引入缓存可以在不影响数据一致性的前提下，有效优化接口时延。本文介绍了Netflix在Titus网关上引入缓存的实践，比较了有无缓存对访问时延的影响。原文: &lt;span&gt;Consistent caching mechanism in Titus Gateway&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前言&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Titus是Netflix的云容器运行时，可大规模运行和管理容器。自从Titus&lt;span&gt;最初以高级Mesos框架发布&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;以来，已经从基于Mesos构建演变为基于Kubernetes，并能够处理越来越多的容器。随着Titus用户数逐年增加，系统负载和压力也大幅增加，最初的假设和架构选择已不再可行。本文介绍了当前Titus如何通过水平扩展来处理海量API调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为此我们在API网关层引入了缓存机制，可以在不放弃严格数据一致性的前提下，将数据处理从选举为领导者的控制器中卸载，并保证客户端的可观察性。Titus API客户端总是能够获取到最新(不是过时的)版本的数据，而不用管是哪个网关节点为其提供服务，或者以何种顺序提供服务。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概述&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图介绍了单个Titus集群(又称cell)的简化高层架构:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5507246376811594&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWm1nszplFEQ49S7OvtFzo6dszRQ5MFEfkDhdvicggktfUdonuQZlp7QfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Titus Job Coordinator&lt;/strong&gt;是被选举出管理系统活跃状态的领导者进程，活跃数据包括当前正在运行的作业和任务。当新领导者被选出时，需要从外部存储加载所有数据。在变更内存状态之前，变更首先持久化到活跃数据存储中。已完成的作业和任务数据首先移动到归档存储中，然后才从活跃数据存储和领导者的内存中删除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Titus Gateway&lt;/strong&gt;负责处理用户请求。用户请求可以是作业创建请求、对活跃数据存储的查询，或者对归档存储的查询(后者在Titus Gateway中直接处理)，请求在所有Titus Gateway节点上实现负载均衡。所有节点的读取都是一致的，因此不管哪个Titus Gateway实例都可以为查询提供服务。例如，可以通过一个实例发送写操作，并从另一个实例进行读操作，可以完全保证数据读取一致性。Titus Gateway总是连接到当前Titus Job Coordinator的领导者节点，在领导者节点发生故障转移期间，对活跃数据的所有读写读操作都将被拒绝，直到重新和活跃领导者节点建立连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在系统的初始版本中，对活跃数据集的所有查询都被转发到单例Titus Job Coordinator上。所有请求都会接收到最新数据，客户端不会遇到&lt;span&gt;read-your-write或monotonic-read问题&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19685990338164253&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmWe07IXia9b8Y7wQrV5f8EJVcumCIBdnsTtib3bLyGHH0via1YwLpj4TlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Titus API上的数据一致性是非常有用的，可以简化客户端实现。因果一致性，包括read-your-writes和monotonic-reads，使客户端不必实现同步机制。在&lt;span&gt;PACELC&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;术语中，我们选择PC/EC，在提高读的理论可用性的同时，对写具有与之前系统相同的可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，批处理工作流编排系统可以创建多个作业，这些作业是单个工作流执行的一部分，并在创建作业之后，监视作业的执行进度。如果系统创建了新作业，立即查询以获取其状态，如果存在数据同步滞后的情况，系统可能会认为作业丢失了，必须创建一个替换作业。在这种情况下，系统将需要直接处理数据同步的延迟，例如，可以通过超时或面向客户端的更新跟踪机制。由于Titus API的读取总是反映最新的一致状态，因此不需要这样的变通方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着通信量的增长，处理所有请求的单一领导者节点开始过载，响应延迟开始增加并且领导者服务器正以危险的高利用率运行。为了缓解这个问题，我们决定直接处理来自Titus Gateway节点的所有查询请求，但仍然维持最初的一致性保证:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2041062801932367&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmRHeSyHhlfayz5l2IVWlWRynVW1tBIp4ts5sPaJnrMFGjtng7iaT1y9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来自Titus Job Coordinator的状态通过持久流连接复制，具有较低的事件同步延迟。Titus Job Coordinator提供一种新的连接协议允许监控缓存一致性级别，并确保客户端总是接收到最新的数据版本，缓存与当前主进程保持同步。当发生故障转移(由于当前领导者节点发生故障或系统升级)时，从新当选的领导者节点加载新的快照，以替换之前的缓存状态。处理客户端请求的Titus网关现在可以水平扩展，这些机制的细节和工作原理是本文的主要主题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何知道缓存是最新的?&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于从一开始就基于数据版本一致性控制方案构建的系统来说，这个问题很简单，并且可以要求客户端遵循既定协议。Kubernetes就是个很好的例子，从Kubernetes集群中读取的每个对象和每个集合都有唯一的版本号，这个版本号是单调递增的，用户可以请求自上次收到的修订版本以来的所有更改。更多细节请参见&lt;span&gt;Kubernetes API概念&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;和&lt;span&gt;共享通知器模式(Shared Informer Pattern)&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们案例中，不希望更改API契约，并对用户施加额外的约束和要求。这样做需要将大量客户端从旧有API迁移到受影响的团队(帮助我们解决Titus的内部可伸缩性问题除外)。根据经验，这样的迁移需要消耗大量工作，特别是在迁移时间轴不完全受我们控制的情况下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了履行现有API合约，必须确保对于在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_0&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 987.6 842.6&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 时间收到的请求，返回给客户端的数据是从Titus Job Coordinator缓存中读取的包含到 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_0&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 987.6 842.6&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 时间为止的所有状态更新。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2222222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmYibhEdSzkdn7dWnjuFEGDUeAxzfhQibN4t9KeYticG1NDs8DnaWIRA02w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据从Titus Job Coordinator传输到Titus Gateway缓存的路径可以描述为具有不同处理速度的事件队列序列:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.17632850241545894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmxU74yYBq7M8UD3fp6gzkCHfb0h17RdPoiciaGlhzrkQicEiaK4OJngibI0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事件源生成的消息可以在任何阶段进行缓冲。此外，由于从Titus Gateway到Titus Job Coordinator的每个事件流订阅都建立了处理流水线的不同实例，因此每个网关实例中的缓存状态可能有很大不同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们假设一系列事件 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;E_1&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -680 1141.6 830&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;45&quot; d=&quot;M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(738, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;…&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;E_{10}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -680 1495.1 845.6&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;45&quot; d=&quot;M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(738, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_1&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 987.6 827&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 时间的两个Titus Gateway实例流水线中的位置:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3671497584541063&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmwIHHaoCZ7ic7NmZT70ZlXUpTKiaYYwg7UoZnr6ptKJA1qbmL3xZL8U3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果客户端在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_1&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 987.6 827&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 时间访问Titus Gateway 2，将会读取到 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;E_8&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -680 1141.6 845.6&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;45&quot; d=&quot;M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(738, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;38&quot; d=&quot;M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 版本的数据。如果向Titus Gateway 1发出请求，其缓存相对于另一个网关是旧的，因此客户端可能读取到旧版本的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这两种情况下，缓存中的数据都不是最新的。如果客户端在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_1&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 987.6 827&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 时间创建了一个新对象，而对象的值被事件更新 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;E_{10}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -680 1495.1 845.6&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;45&quot; d=&quot;M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(738, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 获取，那么在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_1&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 987.6 827&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 时，该对象在两个网关中都不存在。成功完成创建请求的客户端也许会感到惊讶，因为后续查询返回了not-found错误(违反read-your-write一致性)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决方案是刷新时间T₁之前创建的所有事件，并迫使客户端等待缓存接收到所有事件。这项工作可以分为两个步骤，每个步骤都有自己独特的解决方案。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实现细节&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通过结合两种策略解决了缓存同步问题(如上所述):&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Titus Gateway &amp;lt;-&amp;gt; Titus Job Coordinator在线同步协议。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在单个服务器进程中使用高分辨率单调时间源，如Java的nano时间。Java的nano时间被用作JVM中的逻辑时间，以定义JVM进程中发生的事件顺序。也可以用基于原子整数值生成器对事件进行排序作为替代解决方案。使用本地逻辑时间源可以避免&lt;span&gt;分布式时钟同步问题&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果Titus Gateway订阅了没有同步步骤的Titus Job Coordinator事件流，则无法估计有多少数据过时。为了保证Titus Gateway接收到在某个时间 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_n&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 1058.3 834.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 之前发生的所有状态更新，两个服务之间必须显式同步。下面是我们实现的协议:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Titus Gateway接收客户端请求(&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;query_a&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -442 2863.1 647&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;71&quot; d=&quot;M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(460, 0)&quot;&gt;&lt;path data-c=&quot;75&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1032, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1498, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(1949, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;79&quot; d=&quot;M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(490, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Titus Gateway向本地缓存请求获取最新版本数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Titus Gateway中的本地缓存记录本地逻辑时间，并以keep-alive消息(&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;keepalive_a&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 4503.1 888&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6B&quot; d=&quot;M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(521, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(987, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1453, 0)&quot;&gt;&lt;path data-c=&quot;70&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1956, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2485, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2783, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3128, 0)&quot;&gt;&lt;path data-c=&quot;76&quot; d=&quot;M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(3613, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(466, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;)的形式将其发送给Titus Job Coordinator。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Titus Job Coordinator将保持活跃请求与请求到达的本地逻辑时间 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_a&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 1008.1 834.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 一起保存在本地队列(&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;KA_a&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 2063.1 873.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4B&quot; d=&quot;M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(889, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(750, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;T_a&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 1008.1 834.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(584, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;)中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Titus Job Coordinator向Titus Gateway发送状态更新，直到前者观察到状态更新事件，其时间戳超过了所记录的本地逻辑时间(&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;E1&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -680 1264 680&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;45&quot; d=&quot;M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(764, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;E2&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -680 1264 680&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;45&quot; d=&quot;M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(764, 0)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这时，Titus Job Coordinator为keep-alive消息发送确认事件(&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;KA_a&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -716 2063.1 873.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4B&quot; d=&quot;M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(889, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;41&quot; d=&quot;M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(750, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; keep-alive ACK)。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Titus Gateway接收到keep-alive确认，因此知道本地缓存包含了直到发送keep-alive请求时发生的所有状态更改。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;此时，可以从本地缓存处理初始客户端请求，确保客户端获得足够新的数据版本(&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;response_a&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -442 4333.1 636&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(451, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(917, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1386, 0)&quot;&gt;&lt;path data-c=&quot;70&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1889, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2374, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2974, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(3443, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(466, -150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;)。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个流程如下图所示:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.29589371980676327&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmpPhR6JOWQbtVkjyVI5VjOpribYO7ydWVNZJj9C7AuouiaBzcFxk9Lr6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上流程解释了如何将Titus Gateway缓存与Titus Job Coordinator中的真实源同步，但没有说明Titus Job Coordinator中的内部队列是如何处理直到所有消息都处理完毕的。这里的解决方案是向每个事件添加逻辑时间戳，并确保在事件流中发出的消息之间有最小的时间间隔。如果由于数据更新而没有创建足够的事件，则生成模拟消息并将其插入到流中。模拟消息确保每个keep-alive请求在限定的时间内得到确认，从而避免无限期等待系统中发生某些更改。例如:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.16666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmn8n4GczPicmDynD6McaSZPeSXEpkpPn6UT3rxyQicHicBJojQwqnJE3eA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;Ta&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 1233 687&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(704, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;、&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;Tb&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 1133 705&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(704, 0)&quot;&gt;&lt;path data-c=&quot;62&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;、&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;Tc&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 1137 688&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(704, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;、&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;Td&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 1224 704&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(704, 0)&quot;&gt;&lt;path data-c=&quot;64&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 和 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;Te&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -677 1170 688&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(704, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 是高分辨率单调逻辑时间戳。在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;Td&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 1224 704&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;54&quot; d=&quot;M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(704, 0)&quot;&gt;&lt;path data-c=&quot;64&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 时间插入模拟消息，因此事件流中两个连续事件之间的间隔总是低于一个可配置的阈值。将这些时间戳值与keep-alive请求到达时间戳进行比较，以了解何时可以发送keep-alive确认。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外还有一些优化技术，以下是在Titus中实现的:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在为每个新的客户端请求发送keep-alive请求之前，等待固定的间隔，并为在此期间到达的所有请求发送一个keep-alive请求。因此keep-alive的最大请求速率受1/max_interval的限制。例如，如果max_interval设置为5ms，则keep-alive最大连接请求速率为200 req/sec。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在Titus Job Coordinator中分解多个keep-alive请求，向最新的一个请求发送响应，该请求的到达时间戳小于通过网络发送的最后一个事件的时间戳。在Titus Gateway端，具有给定时间戳的keep-alive响应确认所有挂起的请求，其keep-alive时间戳早于或等于接收到的请求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于没有时序要求的请求，不要等待缓存同步，从每个Titus Gateway上的本地缓存提供数据。能够容忍最终一致性的客户端可以选择使用这个新的API，以减少响应时间并提高可用性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据到目前为止所介绍的机制，我们尝试估算不同场景下到达Titus Gateway的客户端请求的最大等待时间。假设最大keep-alive间隔是5ms, Titus Job Coordinator中发出的事件之间的最大间隔是2ms。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设系统处于空闲状态(对数据不做任何更改)，并且客户端请求到达的时间是新的keep-alive请求等待时间开始的时间，那么缓存更新延迟等于7毫秒+网络传播延迟+处理时间。如果忽略处理时间，并假设网络传播延迟&amp;lt;1ms(因为只需发回很小的keep-alive响应)，那么在典型情况下，应该预期延迟为8ms。如果客户端请求不需要等待发送keep-alive请求，并且在Titus Job Coordinator中立即确认keep-alive请求，则延迟等于网络传播延迟+处理时间，估计小于1ms。缓存同步带来的平均延迟约为4ms。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着状态更改事件和客户端请求的增加，网络传播延迟和流处理时间开始成为更重要的因素。然而，Titus Job Coordinator现在可以将其服务高带宽流的能力提供给有限数量的Titus Gateway，依靠网关实例服务客户端请求，而不是自己为所有客户端请求提供有效负载。Titus Gateway可以横向扩展，以匹配客户端请求量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们对低请求量和高请求量的场景进行了经验测试，结果将在下一节中介绍。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;性能测试结果&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了展示系统在使用和不使用缓存机制时的表现，我们运行了两个测试:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;低/中等负载的测试显示，由于缓存同步机制的开销，延迟中位数增加了，但P99的延迟更低。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;负载接近Titus Job Coordinator容量峰值时的测试，超过峰值后原始系统将崩溃。以前的结果是成立的，显示缓存解决方案具有更好的可伸缩性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面测试中的单个请求由一个查询组成，该查询大小适中，是100条记录的集合，序列化后响应大小约为256KB。总有效负载(请求大小乘以并发请求数)在第一个测试中需要大约2Gbps的网络带宽，在第二个测试中需要大约8Gbps的网络带宽。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;中等负载水平&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该测试展示了中等负载系统中缓存同步对查询延迟的影响。此测试的查询速率设置为每秒1000个请求。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6111111111111112&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmVhuq8Q7VQXeMSNklNWoahOuLK2k1icKk8cJ2ClJmdfr51mlVM1An8zQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于增加了同步延迟，在没有缓存的情况下，延迟中位数是我们在引入缓存机制后观察到的延迟的一半。但好处是在最差情况下的P99延迟降低了90%，从没有缓存时的292毫秒下降到有缓存时的30毫秒。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;负载水平接近Titus Job Coordinator的最大值&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果Titus Job Coordinator必须处理所有查询请求(当缓存未启用时)，那么其处理流量的能力将达到每秒4000查询，并在大约4500查询/秒时崩溃(延迟急剧增加并且吞吐量快速下降)。因此，最大负载测试保持在每秒4000查询。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6171497584541062&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmvZMkD9IoTnmKYucg0p62GeuRdY4d4ZBfXCdlibOJYf5LO1zywOnOcZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在不启用缓存的情况下，P99徘徊在1000毫秒左右，P80徘徊在336毫秒左右，而启用缓存的P99为46毫秒，P80为22毫秒。在没有缓存的情况下，中位数在17ms时看起来比在启用缓存时的19ms更好。但应注意的是，在保持相同的延迟百分比的情况下，启用缓存的系统可以线性扩展支持更多的请求负载，而没有缓存的系统只能支持大约15%的额外负载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在启用缓存时，将负载翻倍并不会增加延迟。以下是每秒运行8000查询请求时的延迟百分比:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6147342995169082&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0VHhEB6Dt85muxvXELF8bWmnNpJTT9hMBOX6tjbQm552DVPevgPfH9Jdh6hNgaY7j62jSdxgTUVXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结论&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在达到之前系统的垂直扩展极限之后，我们很高兴实现了真正的解决方案，使(在实际意义上)Titus只读API实现了无限可伸缩性。当流量较低时，能够通过牺牲一定的时延中位数来实现更好的尾部延迟，并获得了横向扩展API网关处理层的能力，以处理流量的增长，而无需更改API客户端。升级过程完全透明，没有一个客户端在迁移期间以及之后察觉到API行为的任何异常或更改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里介绍的机制可应用于任何依赖单一领导者组件作为托管数据真实源(数据适合在内存中存储)的系统，并能够实现较低的时延。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于参考技术，有大量关于缓存一致性协议的文献，包括多处理器体系架构(&lt;span&gt;Adve &amp;amp; Gharachorloo, 1996&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;)和分布式系统(&lt;span&gt;Gwertzman &amp;amp; Seltzer, 1996&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;)。我们的工作符合Gwertzman和Seltzer(1996)在调查报告中探索的客户轮询和失效协议机制。在读取副本中促进线性化的集中时间戳与&lt;span&gt;Calvin&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;系统(例如&lt;span&gt;FoundationDB&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;等系统中的实际实现)以及AWS &lt;span&gt;Aurora&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;中的副本水印类似。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/em&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Consistent caching mechanism in Titus Gateway: &lt;em&gt;https://netflixtechblog.com/consistent-caching-mechanism-in-titus-gateway-6cb89b9ce296&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Titus, the Netflix container management platform, is now open source: &lt;em&gt;https://netflixtechblog.com/titus-the-netflix-container-management-platform-is-now-open-source-f868c9fb5436&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Consistency model: &lt;em&gt;https://en.wikipedia.org/wiki/Consistency_model#Session_guarantees&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;PACELC: &lt;em&gt;http://www.cs.umd.edu/~abadi/papers/abadi-pacelc.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Kubernetes API概念: &lt;em&gt;https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;共享通知器模式(Shared Informer Pattern): &lt;em&gt;https://github.com/kubernetes/client-go/blob/54928eef9f824667b23a938188498992d437156a/tools/cache/shared_informer.go#L35-L133&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;分布式时钟同步问题: &lt;em&gt;https://en.wikipedia.org/wiki/Logical_clock&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Shared memory consistency models: a tutorial: &lt;em&gt;https://ieeexplore.ieee.org/abstract/document/546611&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Gwertzman &amp;amp; Seltzer, 1996: &lt;em&gt;https://www.usenix.org/publications/library/proceedings/sd96/full_papers/seltzer.ps&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;Calvin: Fast Distributed Transactions for Partitioned Database Systems: &lt;em&gt;https://cs.yale.edu/homes/thomson/publications/calvin-sigmod12.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;FoundationDB: A Distributed Unbundled Transactional Key Value Store: &lt;em&gt;https://www.foundationdb.org/files/fdb-paper.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases: &lt;em&gt;https://web.stanford.edu/class/cs245/readings/aurora.pdf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>