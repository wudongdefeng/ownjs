<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ecff5c9f11cc83a2d73bf89de6c8b4e9</guid>
<title>优质网站同好者周刊（第 108 期） | 倾城博客</title>
<link>https://toutiao.io/k/2ua3wsf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%AF%BC%E8%88%AA&quot;&gt;&lt;code&gt;导航&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/ChatGPT&quot;&gt;&lt;code&gt;ChatGPT&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：ai导航, ai产品, ai写作, chatgpt, 人工智能&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;AI 导航是一个集成最新最前沿AI产品的导航网站，提供丰富、多样化的AI产品信息和服务，为用户带来更便捷、高效、科技感的生活体验。为用户提供最新、最全面的AI产品信息，让用户快速、便捷地了解和使用各种AI产品。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.ainavpro.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Ai 导航 | 最新最前沿的 AI 产品&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.ainavpro.com/&quot;&gt;AI 导航&lt;/a&gt; 是一个集成最新最前沿 &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;AI&lt;/a&gt; 产品的 &lt;a href=&quot;https://nicelinks.site/tags/%E5%AF%BC%E8%88%AA&quot;&gt;导航&lt;/a&gt; 网站，提供丰富、多样化的 AI 产品信息和服务，为用户带来更便捷、高效、科技感的生活体验。为用户提供最新、最全面的 AI 产品信息，让用户快速、便捷地了解和使用各种 AI 产品。如果您想通过 AI 产品提升效率，抑或是基于 AI（ChatGPT）技术研发工具产品，可以前往 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.ainavpro.com/&quot;&gt;AI 导航&lt;/a&gt; 以获取更多见闻和灵感。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6409c4d62e215167d398529c&quot;&gt;倾城之链 - Ai 导航 | 最新最前沿的 AI 产品&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E8%BF%9C%E7%A8%8B&quot;&gt;&lt;code&gt;远程&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E4%BD%9C&quot;&gt;&lt;code&gt;工作&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B9%B3%E5%8F%B0&quot;&gt;&lt;code&gt;平台&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：technology, engineers, hire, teams, software, development, Pakistan, US, Remotebase, freelancers, startups, USA&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Remotebase | Hire silicon valley caliber developers remotely | Remote software engineers jobs&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.remotebase.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Remotebase | Hire remote developers from Top 1% in 24 hours | 2 week free-trial&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.remotebase.com/&quot;&gt;Remotebase&lt;/a&gt; 是一个帮助 &lt;a href=&quot;https://nicelinks.site/tags/%E8%BF%9C%E7%A8%8B&quot;&gt;远程&lt;/a&gt; 工作者和远程团队寻找适合自己的工作和公司的平台。Remotebase 聚焦于远程工作文化，并提供了大量有关远程工作的文章、视频和工具，以帮助远程工作者和远程团队更好地管理自己的工作和生活。通过 3 个简单步骤雇用您理想的工程团队：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;告诉我们您的要求&lt;/strong&gt;：在 Remotebase 的网站上填写表格，告诉他们您想何时聘请远程开发人员、您需要什么样的开发人员技能、您需要多少团队成员以及有关您公司的一些详细信息。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;安排通话&lt;/strong&gt;：在合适的时间与他们通话，讨论您的需求以及您希望与您的技术团队实现的目标。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;24 小时内获取相关开发人员&lt;/strong&gt;：Remotebase 将根据您的要求为您匹配最相关的开发人员，并在 24 小时内组建您的工程团队。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Remotebase 的主要功能是提供一系列远程工作职位列表，涵盖了软件开发、设计、销售、客户服务等多个领域。网站上的每个职位都提供了详细的描述和要求，以便远程工作者更好地了解职位需求和公司文化。此外，Remotebase 还提供了一个可以根据技能和地理位置筛选职位的高级搜索工具，以帮助用户更快地找到符合自己需求的职位。&lt;/p&gt;&lt;p&gt;Remotebase 也提供了一些特色的功能，例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;可以查看公司的远程工作政策和文化，了解其远程工作的要求和支持；&lt;/li&gt;&lt;li&gt;可以查看当前公司的远程工作人数，以及他们的工作地点和时区，以帮助用户更好地了解团队分布情况；&lt;/li&gt;&lt;li&gt;可以查看公司的历史招聘记录，以了解公司对远程工作者的态度和经验。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总的来说， &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.remotebase.com/&quot;&gt;Remotebase&lt;/a&gt; 是一个很好的远程工作招聘平台，为远程工作者和远程团队提供了更好的机会和工具，以实现更好的远程工作生活。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6409ba782e215167d398510e&quot;&gt;倾城之链 - Remotebase | Hire remote developers from Top 1% in 24 hours | 2 week free-trial&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Vue&quot;&gt;&lt;code&gt;Vue&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%BB%84%E4%BB%B6%E5%BA%93&quot;&gt;&lt;code&gt;组件库&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/TypeScript&quot;&gt;&lt;code&gt;TypeScript&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A Vue 3 Component Library. Fairly Complete. Theme Customizable. Uses TypeScript. Fast.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.naiveui.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Naive UI | A Vue 3 Component Library&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.naiveui.com/&quot;&gt;Naive UI&lt;/a&gt; ，一个 Vue 3 组件库；它比较完整，主题可调，用 TypeScript 写的，快。更详细介绍，它所具有的功能特征为：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;比较完整&lt;/strong&gt;：有超过 80 个组件，希望能帮你少写点代码；全都可以 treeshaking。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;主题可调&lt;/strong&gt;：提供了一个使用 TypeScript 构建的先进的类型安全主题系统。你只需要提供一个样式覆盖的对象，剩下的都交给 Naive UI。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;使用 TypeScript&lt;/strong&gt;：Naive UI 全量使用 TypeScript 编写，和你的 TypeScript 项目无缝衔接。顺便一提，你不需要导入任何 CSS 就能让组件正常工作。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;快&lt;/strong&gt;：作者尽力让它不要太慢。至少 select、tree、transfer、table、cascader 都可以用虚拟列表。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除上述功能特征之外，它支持启用 JSX &amp;amp; TSX、支持服务端渲染（SSR）、内部基于 CSS in JS 方案..... 该项目在 &lt;a href=&quot;https://github.com/tusen-ai/naive-ui&quot;&gt;Github 开源&lt;/a&gt;，截止目前（2023 年 03 月 08 日）收获 11.9K Star，感兴趣的朋友可移步以了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/64087a70db7c992ea465003d&quot;&gt;倾城之链 - Naive UI | A Vue 3 Component Library&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%95%88%E7%8E%87&quot;&gt;&lt;code&gt;效率&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E4%BB%A3%E7%A0%81&quot;&gt;&lt;code&gt;代码&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot;&gt;&lt;code&gt;工具&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Snippet Explorer is a tool to easily browse and import Snippets directly to Raycast.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/snippets.ray.so.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Snippet Explorer by Raycast&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://snippets.ray.so/&quot;&gt;Snippet Explorer&lt;/a&gt; 一种轻松浏览代码片段（Snippets）并将其直接导入 &lt;a href=&quot;https://nicelinks.site/post/6378d324049fa51046c4ac75&quot;&gt;Raycast&lt;/a&gt; 的工具（基于 &lt;a href=&quot;https://nicelinks.site/post/61c928af5be6454b4e3d5146&quot;&gt;Next.js&lt;/a&gt; 所构建）。其中类别包括 Symbols、Arrows、Unicode、Date、Miscellaneous、Currency、Spelling、Coding、Feedback、GitHub 等内容。&lt;/p&gt;&lt;p&gt;如果您的机器安装了 Raycast 应用程序，通过点击 Snippets 来选择它们。要选择多个，请按住⌘或用鼠标选择它们，然后点击 &quot;添加到 Raycast&quot;按钮。你也可以将 Snippets 下载为 JSON 文件，或复制 URL 与他人分享。添加到 Raycast 之后，即可快速使用这些片段。如果您导入了 &lt;code&gt;Command&lt;/code&gt;，只需输入 &lt;code&gt;!cmd&lt;/code&gt;，即可得到该图标：&lt;code&gt;⌘&lt;/code&gt;；同样，如果您导入了 &lt;code&gt;Apple&lt;/code&gt;，只需输入 &lt;code&gt;!apple&lt;/code&gt;，即可得到：&lt;code&gt;&lt;/code&gt;；如果您是开发人员，导入 &lt;code&gt;Console Log&lt;/code&gt;，只需输入：&lt;code&gt;!log&lt;/code&gt;，即可得 &lt;code&gt;console.log()&lt;/code&gt;（鼠标在括弧中间）；在可以输入文本的环境，都有效，可以提升效率。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/64087343db7c992ea464fea6&quot;&gt;倾城之链 - Snippet Explorer by Raycast&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%81%B5%E6%84%9F&quot;&gt;&lt;code&gt;灵感&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&quot;&gt;&lt;code&gt;机器学习&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Generate your dream room in seconds.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.roomgpt.io.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - RoomGPT ｜ Generating dream rooms using AI for everyone.&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.roomgpt.io/&quot;&gt;RoomGPT&lt;/a&gt; ， 基于 &lt;a href=&quot;https://nicelinks.site/post/5fd20cb4c06d6302c1907ec7&quot;&gt;Tailwind CSS&lt;/a&gt; 构建、部署在 &lt;a href=&quot;https://nicelinks.site/post/63dba9f93b0bd5224de21d36&quot;&gt;Vercel&lt;/a&gt; 的网站，它提供 &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;AI&lt;/a&gt; 服务，为每个人打造梦幻房间。只需选择想要的房间主题（现代、极简、优质）和房型（客厅、卧室、浴室、办公室、游戏室），上传照片，等待片刻，就能生成梦幻房间图片。它 100% 免费。&lt;/p&gt;&lt;p&gt;值得一提的是，该项目在 &lt;a href=&quot;https://github.com/Nutlope/roomGPT&quot;&gt;Github 开源&lt;/a&gt; ，如果您感兴趣，可以移步从而了解更多。 RoomGPT 使用被称为 &lt;a href=&quot;https://github.com/lllyasviel/ControlNet&quot;&gt;ControlNet&lt;/a&gt; 的 ML（机器学习）模型来生成房间的变体。此应用程序使您能够上传任何房间的照片，这将使用 Next.js API 路由通过此 ML 模型发送照片，并返回您生成的房间。ML 模型托管在 &lt;a href=&quot;https://replicate.com/&quot;&gt;Replicate&lt;/a&gt; 上， &lt;a href=&quot;https://nicelinks.site/redirect?url=https://upload.io/&quot;&gt;Upload&lt;/a&gt; 用于图像存储。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6403059cdb7c992ea464e0c0&quot;&gt;倾城之链 - RoomGPT ｜ Generating dream rooms using AI for everyone.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/mockups&quot;&gt;&lt;code&gt;mockups&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot;&gt;&lt;code&gt;工具&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91%E5%99%A8&quot;&gt;&lt;code&gt;图片编辑器&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Create Amazing Mockups&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/shots.so.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Shots - Create Amazing Mockups&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://shots.so/&quot;&gt;Shots&lt;/a&gt;，很精致的一款 Mockups 工具（Create Amazing Mockups），可以用来创建令人惊叹的设备模型，可以做出非常漂亮的图片效果；它支持多类模型，如 iPhone、Mac、iMac、iPad Pro、iPad、iWatch、Sample Desktop、Pro Display XDR、Browser、MacBook Air、截图类等场景，而且支持各种各种，如图片弧度、3D、偏移量、背景、主题、比例等等。此外，Shots 支持在线拷贝图片，也提供直接下载；更棒的是它使用非常简单，上传照片即可开始，且完全免费；简直是不能更棒（Amazing Production）。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6402e783db7c992ea464dd62&quot;&gt;倾城之链 - Shots - Create Amazing Mockups&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;世有伯乐，然后有千里马。千里马常有，而伯乐不常有&lt;/strong&gt;。故虽有名马，祗辱于奴隶人之手，骈死于槽枥之间，不以千里称也。── 唐 · 韩愈《马说》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bb35ac2de2d30f7db6312ade24d9ea69</guid>
<title>2022年中国开源创新大赛初赛结果发布 76个项目晋级决赛</title>
<link>https://toutiao.io/k/zt2bbs1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content               autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;由中央网信办信息化发展局指导，中国互联网发展基金会、中国网络空间研究院、中国互联网投资基金联合主办，北京长风信息技术产业联盟承办的2022年中国开源创新大赛日前结束初赛评选阶段。初赛阶段评审专家组在众多参赛项目/社区中最终遴选出76个优秀开源项目/社区晋级决赛。&lt;/p&gt;&lt;p&gt;参与初赛阶段评审的专家对参赛项目和社区整体实力表示认可。初赛评审专家、开源社理事庄表伟认为，本次大赛参与项目众多，各具特色，整体上反映出中国开源创新的水平。初赛评审专家、开放基础设施基金会独立董事王庆认为，本次大赛规模空前，参赛作品数量众多且质量优秀，仅云计算和云原生赛道就有超过36个参赛作品，很多都是开源界享誉盛名的中国本土优秀开源创新项目，竞争十分激烈。初赛评审专家、北京大学软件与微电子学院副教授荆琦指出，本次大赛项目百花齐放，包括大型企业开源团队贡献的项目、科研院所开源团队贡献的项目、小团队或者个人的成名项目和一些初创项目。初赛评审专家、亚马逊云科技开发者生态总监郭悦表示，本次大赛参赛项目实力强劲，有基金会孵化的顶级毕业项目，有来自高校的明星项目，还有全球头部企业发起的热门项目。&lt;/p&gt;&lt;p&gt;作为首届面向全国的开源创新大赛，赛事组织形式和组织能力同样受到普遍关注。评审专家们认为，大赛在很短的时间内征集到了海量高水平的项目参赛，非常难得；赛制设置有亮点、有创新，开放赛道和社区赛道给很多推进开源发展的组织提供了展示机会；评分规则根据专家意见制定，初赛采用“盲审盲评”，有专家的现场讨论，有评分后的反馈跟踪，公平公正。&lt;/p&gt;&lt;p&gt;2022年中国开源创新大赛决赛将于2023年4月中旬在北京举行。决赛评审指标体系将增加代码扫描方法和定期增量成绩维度，进一步量化、细化指标体系，为决赛阶段的专家评审提供更多的客观依据。本次公布的所有晋级决赛的参赛项目/社区将荣获2022中国优秀开源项目/社区奖，更多信息请关注赛事官网。&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://bs.bjos.club&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://bjos.csdn.net&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://bjos.oschina.net&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pages.segmentfault.com/kyds&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;附件&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;022&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;年&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;中国开源创新大赛优秀开源项目&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;社区获奖名单&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（晋级决赛名单）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;table cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编号&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;优秀开源项目/社区获奖名单&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（晋级决赛名单）&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;1&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;AI元宇宙虚拟数字人&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;2&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache DolphinScheduler&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;3&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache Doris&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;4&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache IoTDB&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;5&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache Kylin&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;6&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache Kyuubi&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;7&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache Linkis&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;8&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache StreamPark&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;9&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;Apollo&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;10&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Byzer-lang&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;11&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;ChunJun&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;12&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;CloudWeGo&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;13&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;CodePecker软件成分分析系统 V3.0——“析微”&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;14&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;CodePecker源代码缺陷分析系统（SAST）——“补阙” V7.0&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;15&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;CubeFS云原生存储&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;16&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Curve&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;17&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Dromara&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;18&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Eulaceura&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;19&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Excelize&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;20&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;FeatureProbe&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;21&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;FISCO BCOS 国产开源联盟链生态圈&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;22&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Fluid&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;23&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;genmai&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;24&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;GitCode开源平台                            &lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;25&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;HummerRisk 云原生安全平台&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;26&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Hypercrx&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;27&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Hyperf&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;28&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;IOTSharp&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;29&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;jeewms&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;30&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Karmada&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;31&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;KubeEdge&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;32&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;LinkWeChat&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;33&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Nacos&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;34&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OneOS物联网操作系统&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;35&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OpenCloudOS&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;36&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OpenCV&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;37&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OpenDigger&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;38&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;openEuler 发行版（on riscv）&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;39&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OpenFunction 函数计算平台&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;40&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;openGauss&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;41&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;openkylin&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;42&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;openKylin RISC-V开源版本&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;43&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;PikaPython&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;44&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;RustDesk 远程桌面&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;45&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;rvcc&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;46&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;SBOM服务&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;47&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Scheme-langserver&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;48&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;ShardingSphere&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;49&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Slime&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;50&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;StoneDB&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;51&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Swow&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;52&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;TDengine 时序数据库&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;53&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;TuGraph图数据库&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;54&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;UKUI桌面环境&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;55&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Volcano&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;56&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Wechaty&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;57&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;凹语言&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;58&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;稻香AI&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;59&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;迪力匡正软件供应链风险分析工具&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;60&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;定时调度器&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;61&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;基于OpenAPI的业务感知APP日志分析工具&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;62&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;基于开源鸿蒙打造的行业全场景操作系统——在鸿OS&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;63&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;建木&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;64&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;金融业生僻字处理&lt;/span&gt; &lt;span&gt;开源项目&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;65&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;开源问答&lt;/span&gt; &lt;span&gt;Answer&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;66&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;开源指南针&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;67&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;可信3.0开源基础软件&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;68&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;龙蜥操作系统&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;69&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;龙蜥社区&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;70&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;深度社区&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;71&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;深度桌面操作系统&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;72&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;事件网格Apache Event&lt;/span&gt; Mesh&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;73&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;思否开发者社区&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;74&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;腾源会&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;75&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;序列大数据的智能计算&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;76&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;智能高铁废液循环系统&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/rAfZEbwugWq83XibXiaMJbRVeiane6WplwcMo5MLO97bsYGicmFomwa4rViaOkoeLvcjLIXXTJWhG0EebmTlEBLyONA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fd227a0f3baefc222121fb1151473bf5</guid>
<title>Go 闯进 Top 10、C++ 再次被 Java 反超，TIOBE 3 月榜单发布</title>
<link>https://toutiao.io/k/c6x3uu9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content               autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;👆&lt;/span&gt;&lt;span&gt;点击“&lt;/span&gt;&lt;span&gt;博文视点Broadview&lt;/span&gt;&lt;span&gt;”，获取更多书讯&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05669291338582677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nr1VNxfeqxVOw2nPJHVH4xeZibzPY5F4ibOuOZLMsUMrzIibGB6KMw7EurSKv6DkrtLzuhYdBa30A9Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.10027855153203342&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PW0wIHxgg3npgLu0khEqdibc8UNib9mUOF5Oic7ofxC1krfeqOz5wtoEWMiczOpKGic8QcQLLuSPHicTEZhBqib9LGTeA/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-type=&quot;gif&quot; data-w=&quot;1077&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;121695&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;整理 | 苏宓&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;出品 | CSDN（ID：CSDNnews）&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;编程语言本身没有优劣之分，但是随着技术的演进，其使用率也会存在巨大差异。当下，在 TIOBE 3 月编程语言榜单发布之际，我们也将透过编程语言排名的变化看其背后的领域发展！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qkyxEibG4Uy3ibtP06LgbDfGUObnDFMEz9icU556dwCZyNgtwXH29EwH6Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;25&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;38&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.5833333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBg0eJoRbL7pySaOticLOsHo5UngDB6cPN2beKOzf31Yg2dMj4PwaOcfvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;24&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Go 闯进 Top 10&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本月榜单中，最让人感到惊喜的是，Go 语言以 1.24% 的占比进入了 TIOBE 榜单的 Top 10，&lt;span&gt;工程师们似乎都很喜欢 Go 编程&lt;/span&gt;&lt;span&gt;语言&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事实上，这一次并不是 Go 语言最巅峰的时刻，其在 2017-2018 年间，使用率最高达到了 2.36%，几乎是现在的一倍。彼时它凭借着良好的语言设计、并发性等优势，常被用在服务器编程、分布式系统、网络编程、云平台开发等场景中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3335826477187734&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6pY9UXkCicPVoY8vWgF4KkVZoxb7P7det7NXuwUBToVPI2iaBSDmSO6HZeVFiaLZXvCG55knzuhpVA/640?wx_fmt=png&amp;amp;tp=wxpic&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;2674&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那如今在 Go 趋于平稳发展之际，为何会冲入榜单的第 10 位？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对此，&lt;span&gt;TIOBE 软件公司 CEO &lt;span&gt;Paul Jansen 解析道，“&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Go 不是具有革命性的语言，但它的优势在于结合了合适且正确的功能。&lt;/span&gt;&lt;span&gt;它有内置的并发性和垃圾回收功能&lt;/span&gt;&lt;span&gt;，也是静态类型的，并且有良好的性能。&lt;/span&gt;&lt;span&gt;Go 得到了 Google 公司的支持，这对其自身发展也很有帮助，也&lt;/span&gt;&lt;span&gt;提高了人们对该语言的长期信任。&lt;/span&gt;&lt;span&gt;Docker 和 Kubernetes 等流行的技术都是在 Go 的帮助下开发的。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;不过，Go 是否会持续保持在前十名，还有待时间的验证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qOfecjttGpW3J3tvO19FFTIAqx9ibBwTIZv6fzIvOlLJUicfaicjQJpZ1w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;27&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;39&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4444444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBggIqetBXcWGOlezQAJlyHIWPsCVUBXsib4x7cArqTTJvhs2bJFx2zd3g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;27&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;C++ 再次被 Java 反超&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，C++ 在保持了三个月第三名的位置之后，在本月中，又被 Java 以 0.27% 微弱的差距反超，如今排在第四位。两者当前处于你追我赶的局面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8306569343065694&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6pY9UXkCicPVoY8vWgF4KkBicYnS1dw6ib9wTNdfLn0Tibhp88A3qzq65PNbB8cs2MrMvrIUsryakYw/640?wx_fmt=png&amp;amp;tp=wxpic&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1370&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实近些年来，Java 一直呈现下滑的趋势，尤其是在企业服务应用的后端也不占太多优势，其曾经主要应用的网站、移动应用开发等场景趋于饱和，有所下滑也属于情理之中，但即使下滑，它也依然在编程语言界具有不可撼动的地位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qgxOukGzL6akS7ibtpEgg5xkibkgpJxVwylfcDicBABiaXlgBLsd1Afds1w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;30&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;40&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgwAiaFbdGibjlyVib4rymZQBJnScynWXX8eKJe331VTML0LCTJvz0zbyicA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;30&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;其他编程语言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;以下为 Top 20-50 的编程语言榜单：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.961380443714051&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6pY9UXkCicPVoY8vWgF4KkD8exbSpepBcJQiae7Yl4sbRRjWYicCc5UntI0GjiaqknMSRlaAkjS6xuw/640?wx_fmt=png&amp;amp;tp=wxpic&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1217&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第 51-100 名如下，由于它们之间的数值差异较小，仅以文本形式列出（按字母&lt;/span&gt;&lt;span&gt;排序）：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ActionScript, Apex, AutoHotkey, B4X, bc, BlitzMax, Bourne shell, C shell, Chapel, Clojure, Common Lisp, Crystal, Eiffel, Elixir, Erlang, Forth&lt;/span&gt;&lt;span&gt;, GAMS, Hack, IDL, Inform, Io, Ioke, J#, JScript, Korn shell, LabVIEW, Ladder Logic, Limbo, LPC, MQL5, NATURAL, OCaml, OpenCL, OpenEdge ABL, PL/I, Processing, Programming Without Coding Technology, Q, Raku, REXX, S, Smalltalk, Solidity, SPARK, Stata, VBScript, VHDL, X++, XC, Zig&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qA3wIF4M1rgJPLkc2t7tiatN4Txs9MPGEdYzyfH069BSHiatSpOjibBKlg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;30&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;38&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3103448275862069&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgzmj60G6W7xTnibtyh5WHDzz3kD9eaZFer03k1Zm3ZpCwNZ7oF6Q7P8A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;29&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Top 10 编程语言 TIOBE 指数走势（2002-2023）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6pY9UXkCicPVoY8vWgF4KkjzmZ95hMOAdNMOqMgfofXaialhClsgF8jKotWZB0149cAzeibyx7jYhA/640?wx_fmt=png&amp;amp;tp=wxpic&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1368&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qZDicaoukpArCbp8E1Z8kCR4PoiazstRK6YZq6iaon8P2yaG3tqgjBNt9w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&amp;amp;tp=wxpic&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;30&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;39&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgPGJbK2AAaxMZ9of2jA8nld2huWcPWNSzWhLwuGrOclCESK0Fu7GwrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;30&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;历史排名（1987-2023）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注：以下排名位次取决于 12 个月的平均值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45887778631821674&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6pY9UXkCicPVoY8vWgF4KkJAr1eM7cgYwbDQZIENgsziaM2AFKUgopo8LUIOYUdGam3E2UIGsWkXw/640?wx_fmt=png&amp;amp;tp=wxpic&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1301&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qVYsK9rW3PnGicfctGFTuTNMT7ZAnZriaDjnwZnQbs6fPlWEkhHFoOsfw/640?wx_fmt=png&amp;amp;tp=wxpic&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;31&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;40&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgdyaYh3icicanrG3WoExXjNV0MIwQlpomfCY5NIfG7NMoRCcb0HHfhQfQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;30&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;编程语言“名人榜”（2003-2022）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1591549295774648&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh6pY9UXkCicPVoY8vWgF4KkXxXvaCbbheXicn6QpVodwWpF85yzrev2xLS5yDu2DDbOxSlgElk6URw/640?wx_fmt=png&amp;amp;tp=wxpic&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;710&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;【说明】：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;TIOBE 编程语言社区排行榜是编程语言流行趋势的一个指标，每月更新，这份排行榜排名基于全球技术工程师、课程和第三方供应商的数量，其中包括了流行的搜索引擎以及技术社区，如 Google、百度、维基百科、必应、亚马逊等等。具体的计算方式详见：https://www.tiobe.com/tiobe-index/pro&lt;/span&gt;&lt;span&gt;gramming-languages-definition/。请注意这个排行榜只是反映某个编程语言的热门程度，并不能说明一门编程语言好不好，或者一门语言所编写的代码数量多少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个排行榜可以用来考察你的编程技能是否与时俱进，也可以在开发新系统时作为一个语言选择依据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细榜单信息可参考 TIOBE 官网：https://www.tiobe.com/tiobe-index&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;---本文转载于CSDN公众号---&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93355&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;50%&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8428571428571429&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ldFaBNSkvHhBCS6gKD3G0bw0mcAHyH1uJGVdiaI89TibcaDY6iaafaOkZJIXcUDDRcnvMEaWQCpKMClyHvbCkIbDA/640?wx_fmt=gif&quot; data-w=&quot;140&quot; data-width=&quot;25%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;相关新书&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;258&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;258&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgIdo7icZ3M8nSt6QTjBiaWU3pJjl4crKksTKqJm98nFvboUg6ibKncF6hA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; title=&quot;9787121450068.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Go语言设计模式（双色版）&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;廖显东 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;121695&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;全书共6章，分别为设计模式入门、创建型设计模式、结构型设计模式、行为型设计模式、设计模式扩展、设计模式与软件架构。本书简洁而不失技术深度，内容覆盖Go语言的主流设计模式和软件架构，以极简的文字介绍了复杂的案例，是学习Go语言设计模式和软件架构的实用教程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;98&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;98&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgRfhreLsAJFwfCaDnMZ15jVqlyxOGicnOwJwBnNeu3RK9u61ubWggcDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-width=&quot;98px&quot; title=&quot;Go语言设计模式二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（扫码了解本书详情！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;258&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;258&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgicyVcX9X7rpBWUibsrV6Uuz3u7HZAs7HibmhxFXDqnia7D3q7libvhLwVcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; title=&quot;9787121447532.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;疯狂Java讲义（第6版）（上册）》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;李刚&lt;/span&gt; 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;121695&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书是《疯狂Java讲义》第6版的上册，第6版保持了前5版系统、全面、讲解浅显、细致的特性，全面新增介绍了Java 12到Java 17的新特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《疯狂Java讲义》第6版深入介绍了Java编程的相关方面，上、下册内容覆盖了Java的基本语法结构、Java的面向对象特征、Java集合框架体系、Java泛型、异常处理、Java GUI编程、JDBC数据库编程、Java注释、Java的IO流体系、Java多线程编程、Java网络通信编程和Java反射机制，覆盖了java.lang、java.util、java.text、java.io和java.nio、java.sql、java.awt、javax.swing包下绝大部分的类和接口。第6版重点介绍了Java的模块化系统，还详细介绍了Java 12到Java 17引入的块字符串，instanceof的模式匹配，增强型switch语句、switch表达式及模式匹配，密封类，Record类，以及Java 12到Java 17新增的各种API功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;98&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;98&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgnuoHiawXLOKxtAibz8UN9Ex6AbsicYXLAGiaY6VQLYJgy1rcwxbFIzTpEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-width=&quot;98px&quot; title=&quot;疯狂Java讲义二维码 (2).png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（限时五折，快快扫码抢购吧！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;258&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;258&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgswEw344PgweXGD9b9m8DTFjFHbDQvqU9DGWEMQWibRb8L00NCKaU6Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; title=&quot;9787121449246.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;疯狂Java讲义（第6版）（下册）》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;李刚&lt;/span&gt; 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;121695&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书是《疯狂Java讲义》的第6版的下册，第6版保持了前5版系统、全面、讲解浅显、细致的特性，全面新增介绍了Java 12到Java 17的新特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;98&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;98&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgD9xgY2iafsExw4bARMWtkiayzxqoTUUNph5Qr8DJiaoSL92vOjlFETOIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-width=&quot;98px&quot; title=&quot;疯狂Java讲义下二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（扫码了解本书详情！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;258&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;258&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgYx8t5H4j8jEgZRDSSV6ib3RdQY40f4mf3N0R5Z8HuQQpROwicW98MknA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; title=&quot;9787121449635.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;《漫画Java编程》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;孙卫琴，杜聚宾 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;121695&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书结合大量典型生动的范例，深入浅出地讲解了Java编程的各种基本技术。本书的范例都基于最新的JDK 17版本。本书内容包括：创建和运行Java程序的基本方法、Java语言的基本语法、数据类型和变量、操作符、流程控制、继承、多态、访问控制级别、接口、内部类、异常处理、数组、集合、输入与输出、多线程、反射和注解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书别具一格，以Java领域的两位大咖老师：杜聚宾和孙卫琴传授大力Java编程技术为线索，带领读者身临其境地进入Java技术之旅。本书加入了许多生动形象的漫画，以及贴近现实生活的有趣范例，大大增加了书的趣味性，帮助读者轻松地掌握Java语言的编程思想和种种运用技巧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书主要面向所有的Java初学者，以及希望巩固Java面向对象编程思想和实用技巧的程序员。本书还可作为高校的Java课程教材，以及企业Java培训教材。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;98&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;98&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgpgIyutsZzfz0y1zQYHiasTMicyIXpQTgdk0EuqOg4eSFhibpO4OibCh0YQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-width=&quot;98px&quot; title=&quot;漫画java二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（限时五折，快快扫码抢购吧！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;258&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;258&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBg8CIJmosfDibD4icGFstTz2wbBUc0Xr6dVy3Auq4ArSuab4jIX8XadvVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot; title=&quot;看漫画学Python：有趣、有料、好玩、好用（全彩修订版）.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;看漫画学Python：有趣、有料、好玩、好用（全彩修订版）》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;关东升 著，赵大羽 绘&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;121695&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书秉承有趣、有料、好玩、好用的理念，通过3个漫画人物的轻松对话、搞笑形象及夸张动作，把复杂的Python技术问题简单化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书总计16章：第1章介绍Python的历史和特点，并进行开发环境搭建；第2～5章介绍Python的基础知识，包括数据类型、表达式、流程控制等；第6～7章介绍Python常用的容器类型数据和字符串数据；第8～11章介绍Python的进阶内容，包括函数、类与对象、异常处理、常用内置模块等；第12～16章介绍Python实用库的使用方法，包括文件读写、图形用户界面、网络通信、数据库访问和多线程等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书在每一章中都安排了“动动手”环节，您可在该环节找到应用实例；在每一章结尾都提供了“练一练”环节，您可在该环节找到同步练习题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;98&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;98&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgDJiamJdEdSlpmsIxQHQa0rYOWxfl6WZQySyPNDlpt3hIMzJuftKRgyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-width=&quot;98px&quot; title=&quot;看漫画学python二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（限时五折，快快扫码抢购吧！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;94013&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/7QRTvkK2qC6EKB3qBHxT1pNjWWaBmsyddIgGDPoUFAfqOJ01k5aGCNzal5A2caXCzfFbcqXxc3kBc4nhicVjNDw/640?wx_fmt=gif&quot; data-ratio=&quot;1.6167664670658684&quot; data-w=&quot;334&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;每日抽奖赠书&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;奖品《绝非偶然》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nVyZb0Tm01fWNXtEYP8YBgiaNicxdqKfempyrkOkJaC6AhgtA71cGYzMFOZ4L8O7te4W3wjx1iaHrxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;450&quot; data-width=&quot;156px&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;发布：刘恩惠&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;审核：陈歆懿&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt; &lt;section data-role=&quot;splitline&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;16401&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果喜欢本文&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;欢迎&lt;/span&gt; &lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;留言&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;分享至朋友圈&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 三连&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;119077&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;&amp;lt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;  PAST · 往期回顾 &lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong data-brushtype=&quot;text&quot;&gt; &amp;gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTk0NjMwOQ==&amp;amp;mid=2651170970&amp;amp;idx=1&amp;amp;sn=cbc1b003e19cd0295c8a5610e73d1c5b&amp;amp;chksm=bd01c2b08a764ba6a3ec3db91e81681ed23f9b914c697b0383a93799c6f0369367f35ee6db66&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;246&quot; data-ratio=&quot;0.4257531324980005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lWVm2u7R69UvyBFMuWDEFTjIBkQYUDROrn1A4voanbGmMu5hic0UBD0MAmf4ib6dRgcQe7NdOmn9Og/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3751&quot; data-width=&quot;100%&quot; title=&quot;默认标题__2023-02-10+17_41_32.png&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTk0NjMwOQ==&amp;amp;mid=2651172130&amp;amp;idx=1&amp;amp;sn=612830f7b78fadd1061f0574aa7f2ab6&amp;amp;chksm=bd01c7088a764e1e3c082f185a9f179a64c6c3a9f177553ee06674933c4a60720c600855229d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;产品经理和开发者别打架了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;产品经理和开发者别打架了！&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTk0NjMwOQ==&amp;amp;mid=2651172130&amp;amp;idx=1&amp;amp;sn=612830f7b78fadd1061f0574aa7f2ab6&amp;amp;chksm=bd01c7088a764e1e3c082f185a9f179a64c6c3a9f177553ee06674933c4a60720c600855229d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;产品经理和开发者别打架了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;产品经理和开发者别打架了！&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;574&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;244&quot; data-ratio=&quot;0.4777777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3npgLu0khEqdibc8UNib9mUOFWz3Av7aEWkgib7uEOIIVCVonIgnJrUgibElFcvUXFAIMOvoxHX3gqU5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;900-400_画板 1-1.png&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/fgnkxfGnnkTMNtGy7KWfCrdJibAYY6HtIGhhtVOFQXzkE5GcmZIhTLgxggMlCe3oMwqKNesBDoU7kfgzFHuxyeA/640?wx_fmt=gif&quot; data-ratio=&quot;0.75&quot; data-w=&quot;160&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点击阅读原文，查看更多图书！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9ce94e05c57e6768454ebe5c297bfc3c</guid>
<title>定位任意时刻性能问题，持续性能分析实践解析</title>
<link>https://toutiao.io/k/lbm4c67</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content               autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/yvBJb5IiafvmiaBnXvbGDru5fwoNCGwhCdc2xA5ahKkfBePMIjkboicYBKINVBY43ZVG1CibXJORibIAzkhpAke0PhQ/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;持续性能剖析简介&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;更好的应用性能，可以提供更好的用户体验，可以降低企业IT成本，可以让系统更稳定和可靠。在应用性能剖析技术出现以前，开发人员排查问题只能依赖各种日志和监控，这需要提前在应用代码中埋点，不但对应用代码侵入性较大且可能由于埋点不全而无法提供足够信息，诊断问题非常费时，很多时候无法找出原因。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着应用性能剖析技术出现，开发人员可以很方便的找出应用程序性能瓶颈（如CPU利用率高、内存占用高等），从而进行优化。但由于早期应用性能剖析技术开销较大，只能在开发环境而不能在生产长时间开启，生产环境出问题时很可能没有被记录下来，开发人员在开发环境模拟和复现问题很困难，导致解决问题的效率很低，也很有可能无法解决。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;近些年来，性能剖析技术持续发展，功能越来越丰富，开销也显著改善，达到生产环境持续开启水准，不过离广泛普及还存在诸多障碍。性能剖析一般过程有三步：生产环境抓取、保存性能剖析文件、性能剖析文件可视化。当应用体量较大时，这3个步骤每步都存在着难度，需要解决大量计算、存储、产品设计等多方面问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;ARMS Continuous Profiler&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;1]&lt;/strong&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;应运而生，由阿里云ARMS（&lt;strong&gt;应用实时监控服务&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;2]&lt;/strong&gt;&lt;/sup&gt;&lt;/strong&gt;）团队和&lt;strong&gt;Dragonwell&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;3]&lt;/strong&gt;&lt;/sup&gt;&lt;/strong&gt;团队联合研发。它基于当前最成熟的性能剖析技术，将整个性能剖析过程产品化，适合在生成环境持续开启。与常规性能剖析相比，ARMS Continuous Profiler增加时间维度，核心功能如下：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;定位任意时刻的性能问题（比如CPU占用高、内存占用高）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持两个时段的性能对比，找出应用演进过程中的性能差异&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;观测应用的调用栈，以便更好的审视和理解代码设计&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;ARMS 持续性能分析功能演示&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们举例来说明如何用ARMS持续性能分析来解决问题。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;常见场景一：CPU 热点解析&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以某图书馆的服务应用举例，其Java进程占用大量CPU，接口响应时间达到了十多秒，应用性能很差。&lt;/span&gt;&lt;/section&gt;&lt;article&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36254295532646047&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbraZdBQhotQxOZbgJyck9hZJvAdciaWBMbicpHXE6mGXrgnwSF3SlkvAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1164&quot;/&gt;&lt;/p&gt;&lt;/article&gt;&lt;/article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3687214611872146&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbNL67vibKubjbMStuu2hLTogXOWBX0SsDRf4ZFbWRNbOtuADM7iamj2xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31399317406143346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bb3fCknasEnpTXkGEn8GDQYdHib1mRJjXS31YQrbc8ypA3KKyDDKay4Zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;879&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为当前应用CPU占用很高，因此我们直接在性能分析类型中选择CPU Time&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;菜单路径：ARMS控制台 -&amp;gt; 应用首页 -&amp;gt; 应用诊断 -&amp;gt; CPU&amp;amp;内存诊断 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1791044776119403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbrtDvvLZWicRichGT1DXVgyeOGsXVQ9jTy3woHvibnAsIKEmbsLUNldVQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;335&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16539263377345378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbR7kVC0IUv8KQ2ibX5zTG6cb0m5HWiaicxO2ANufYApacZiaXMf7RCVibhMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1439&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从火焰图我们可以看到，java.util.LinedList.node(int)方法占用了85%的CPU，对应的业务代码方法是DemoController.countAllBookPages(List)，结合代码，可以发现，这个方法对于对象很多的集合性能很差，因为要从头或者从尾部逐个遍历。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4460285132382892&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BboF1gBpDngpDYhdhDiaZsPH4xicRKZ1MQftMSklMwoY92Q7icBB0JNR5nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;982&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;定位到原因后，我们可以通过两个解决方案进行修复。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一个方法是将LinkedList修改为下标访问方式更高效的ArrayList&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1796875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbHawt4HPdicsu6pQcWKRbLNCfia01UvTrv7M8VM7uic1fslJ0uibbtIURcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1408&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二个方法是将LinkedList的遍历算法从普通for循环修改为增强的for循环&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25415162454873647&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbmPhbxUF2kgpP5A2iawOK6icEDLZKJUFwmpt0gsOhQUYrOqBqJVYLteXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1385&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;将修复后的代码重新部署，以相同压力分别压测两种方案，可以看到接口响应时间显著下降，Java进程CPU利用率显著下降。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.15862808145766344&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bbhynfr41TicwAQC9NejMMEGDib6icA5Qz2bfA1TbhyoCDubn7n7APCp84g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34084231145935356&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbxXnTyrkic0Uqibg8YB1QV66WjbeV5mSUibrjN08OoCnicR75KO6hHHvY6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1021&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;常见场景二：内存申请热点&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以某图书馆的服务应用举例，其Java进程占用大量CPU，接口响应时间达到十多秒，应用性能很差。&lt;/span&gt;&lt;/section&gt;&lt;article&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.30017452006980805&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bbib4gmL6hVMwPpRLsB37Qte2Nw7ibWdQUelUIzVHt0PfzGryL1CTXjTuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1146&quot;/&gt;&lt;/p&gt;&lt;/article&gt;&lt;/article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.301556420233463&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbJmP22eOvFU37ReibkBWkAibwbuQgqTVpBhGYVP0rmiaich6nGglv2Cuxsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2728155339805825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbZ507CyWVA9H02mdPXXSV4VWV8kD9ibkbrgV5y8LssBJICrc52Kibo5qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为当前应用CPU占用很高，我们直接在性能分析类型中选择：CPU Time&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;菜单路径：ARMS控制台 -&amp;gt; 应用首页 -&amp;gt; 应用诊断 -&amp;gt; CPU&amp;amp;内存诊断 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1791044776119403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbrtDvvLZWicRichGT1DXVgyeOGsXVQ9jTy3woHvibnAsIKEmbsLUNldVQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;335&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14125200642054575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bb0xJHibrK74iaIicRvelztuOCryltyjKqqYrKnsAB88QyCjHic7eXoQqe6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1246&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从CPU热点方法，我们发现Java进程89%的时间都在做GC，说明应用存在很大的内存压力。我们下一步选择内存热点剖析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1476510067114094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbTx62WoC9hcVDdOUhiaGg0dibME5vQOicLGdDCXHOFkuibkgVeaVafc9I9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;447&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19271255060728745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbzaZA8sJdpAZ0R8nJgJSj0kkhUAGNibzUAD7jGfIYDp8DYaY0OcTWVsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1235&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上图的内存申请热点火焰图，我们可以找到过去一段时间所有内存申请中，DemoController.queryAllBooks方法占了99%，进一步检查，可以发现业务代码创建了2万个大对象并保存到了List。&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;67&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;注：这个方法本来应该从数据库中读取2万本书，这里进行了简化，但效果相同，都是在堆中创建了一个占用大量内存的List&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28592162554426703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bb6AZMApSrr7NN16QYEicc07aChcjhPPbaXJRJvqxEWZPaZdxS6Bjc86g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;689&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个接口本来想实现的是按分页查询书籍列表，但由于实现错误，误将所有书籍都查出来了然后最终只返回了指定分页的部分，所以可以直接从数据库中用分页的方式查询，这样就可以避免大量的Java内存占用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2895845875978326&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbQslJrynjlE2y2qljL1blNuHfkDK5ha6Nmd4N9Z0YIVc1iaQH6RuGdow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1661&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;将修复后的代码重新部署，以前相同压力进行压测，可以看到接口响应时间显著下降，Java进程CPU利用率显著下降。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3041002277904328&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbvTSkYZ2NMfvNYlcCy8ibapABH0VBeWYXHibibricVQ2k16ia1nTJyMMmBUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;878&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28679653679653677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbPxgNSnjRZXdZzhaT6NCux4BtfaguQNbzg5OOxSFz0ayON86242Xuew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;924&quot;/&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;ARMS 持续性能分析的设计和实现&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1、产品设计&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;产品整体分为3个部分，第一个部分负责在应用端收集性能剖析数据，第二个部分用于传输和存储剖析结果文件，第三部分用于查询和展示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44884241971620614&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bbc1iaQD5u3DrKx9Z1x0QicIRRUQw1vIuFFC3m4icAF3w1DiarUZdD06a14Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1339&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一个部分主要使用&lt;strong&gt;Java Flight Recorder&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;4]&lt;/strong&gt;&lt;/sup&gt;&lt;/strong&gt;、&lt;strong&gt;async-profiler&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;5]&lt;/strong&gt;&lt;/sup&gt;&lt;/strong&gt;，我们会根据Java版本情况自动选择其一，其核心功能是周期性对应用程序进行采样，并且不会因为安全点问题导致结果不准确。下图是对一个线程采样6次的例子，可以看到每次采样瞬间的调用栈。最终保存为JFR格式的文件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2652134423251589&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbEoyicLbEzQqvRN0sepopA8tMFGz6cvDyn2WHh7Iic3eX1ibDEmFugiaib6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1101&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二个部分比较重要的是JFR Analyzer，其核心功能是读取JFR文件，对其进行解析、计算和聚合，最终生成便于查询和展示的中间结果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第三个部分的核心功能是将剖析结果展示为表格或火焰图，也要支持对比能力。&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2、Java Flight Recorder&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;JFR是OpenJDK内置的低开销监控和性能剖析工具，深度集成在虚拟机各个角落。当Oracle在OpenJDK11上开源JDK Flight Recorder之后，阿里巴巴也是作为主要贡献者，与RedHat等社区贡献者一起将 JFR 移植到OpenJDK 8。&lt;/span&gt;&lt;/p&gt;&lt;article&gt;&lt;article&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;JFR由两个部分组成：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第1个部分分布在虚拟机各个关键路径上，负责捕获信息。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;第2个部分是虚拟机内单独模块，负责接收和存储第1个部分产生的数据，这些数据通常也叫做事件。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;JFR包含160种以上事件，JFR事件包含很多有用的上下文信息及时间戳。比如方法执行调用栈、文件访问、特定GC阶段的发生，或特定GC阶段、耗时。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;387&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbVEb5fbHVe3RvlkoWQf8uOI49O8edHfOJtXEFJk1jjeRpzEq7YVj7bg/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5019710906701709&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbibE8zxs7ftTicfuE3gpRkbgs50AgIv9RBpic9wiaGLMcmeud89j85xRAcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1522&quot;/&gt;&lt;/p&gt;&lt;/article&gt;&lt;/article&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3、async-profiler&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;async-profiler是一个低开销的Java性能剖析工具，依靠JVM的特定API进行CPU和内存申请的剖析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为OracleJDK 8上JFR功能是商业特性，所以在OracleJDK8上我们用async-profiler作为替换技术，实现相同剖析能力。而对于OpenJDK8，由于内存申请热点剖析功能存在较大性能开销，我们也用async-profiler作为替代技术。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;async-profiler使用C++开发，以动态库方式加载到JVM进程中，支持生成JFR格式文件，这样不论我们用JFR还是async-profiler，因为文件格式相同，所以分析和存储方案都可以复用。&lt;/span&gt;&lt;/section&gt;&lt;article&gt;&lt;article&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5068259385665529&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbDk8Mibnaw5jKpHVPJq1MJ0AmOITD8QxNqT7xWMjyoHkK0I7EVPE3icrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot;/&gt;&lt;/section&gt;&lt;/article&gt;&lt;/article&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4、JFR File Analyzer&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JFR File Analyzer的输入是JFR文件，输出是一种支持按时间范围高效查询的树状结构。一个JFR文件中可以包含CPU热点、内存申请热点等多个方面的数据，每个方面都有对应的解析和存储实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45165189363416597&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbkIE8AkEOr2hvT7Ah1baiaDoNn6sDPL1l3ibjzHrp4JWfIT9c0jzh3LWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2482&quot;/&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文介绍了持续性能剖析的产生背景，通过两个例子演示了ARMS Continuous Profiler的实际使用场景，也对ARMS Continuous Profiler的设计和核心模块进行了介绍，其主要特点如下：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4684838160136286&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbtAddwcsmicO9d8Kczo8ibwbX8EgvarFey6pvIAfFwZAuxGtibCzicicmhvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1174&quot;/&gt;&lt;/section&gt;&lt;article&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49566724436741766&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbicXMyBmD4vdLy2ccSz4ibYZcJhibnIq1V3rCBMBddnZevflP1BE1wTjiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;/article&gt;&lt;p&gt;&lt;span&gt;对ARMS Continuous Profiler感兴趣的读者，可以加入专属服务钉群，或者阅读产品文档，欢迎试用和交流。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;👉 专属服务钉群：&lt;/span&gt;&lt;span&gt;22560019672&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2380410022779043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbHulX5gSnhOibu2LszGr4bOSYUkMFeHt5E91x5kn7VoRkpiaRLWeJbFEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;878&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;📒 文档：&lt;/span&gt;&lt;span&gt;https://help.aliyun.com/document_detail/473143.html&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;span&gt;&lt;span&gt;ARMS Continuous Profiler&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;https://help.aliyun.com/document_detail/473143.html&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;span&gt;应用实时监控服务&lt;strong/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;https://help.aliyun.com/product/34364.html&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[3] &lt;span&gt;&lt;span&gt;&lt;span&gt;Dragonwell&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://dragonwell-jdk.io/#/index&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[4] &lt;span&gt;&lt;span&gt;Java Flight Recorder&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[5] &lt;span&gt;&lt;span&gt;async-profiler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;https://github.com/async-profiler/async-profiler&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;107450&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;5.29875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bb9Ruym7S63OegIcAaiaW38wHOVWgbT6jULctW9eWZ4ib07KrvGPZ2SibQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dbc88ce5f50d852d444d180706220c22</guid>
<title>有哪些公司大规模使用了prometheus？有没有经典案例分享下？ - SuperOps</title>
<link>https://toutiao.io/k/p5qn7s3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;fmt&quot;&gt;
          &lt;h1 id=&quot;cloudflare--prometheus&quot;&gt;Cloudflare 如何大规模运行 Prometheus&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZuDvqbQdq.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们使用Prometheus来深入了解构成我们全球网络的所有不同硬件和软件。Prometheus 允许我们随着时间的推移衡量健康状况和绩效，如果任何服务有任何问题，请在它成为问题之前通知我们的团队。&lt;/p&gt;
&lt;p&gt;在撰写本文时，我们运行了 916 个 Prometheus 实例，总共有大约 49 亿个时间序列。这是显示确切数字的屏幕截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZuFhft1VE.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这平均每个实例大约有 500 万个时间序列，但实际上我们混合了非常小和非常大的实例，最大的实例每个存储大约 3000 万个时间序列。&lt;/p&gt;
&lt;p&gt;运行如此庞大的 Prometheus 部署并非没有挑战。在这篇博文中，我们将介绍在尝试为每个 Prometheus 实例收集数百万个时间序列时可能遇到的一些问题。&lt;/p&gt;
&lt;h2 id=&quot;heading&quot;&gt;指标基数&lt;/h2&gt;
&lt;p&gt;当您开始运行自己的 Prometheus 实例时，您可能会听到的第一个问题是基数，这个问题最引人注目的案例被称为“基数爆炸”。&lt;/p&gt;
&lt;p&gt;因此，让我们首先从 Prometheus 的角度来看一下基数意味着什么，什么时候它可能成为问题，以及一些处理它的方法。&lt;/p&gt;
&lt;p&gt;假设我们有一个我们想要检测的应用程序，这意味着以 Prometheus 可以从我们的应用程序读取的指标形式添加一些可观察的属性。指标可以是您可以用数字表示的任何内容，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;车辆行驶的速度。&lt;/li&gt;
&lt;li&gt;当前温度。&lt;/li&gt;
&lt;li&gt;某些特定事件发生的次数。&lt;br/&gt;
要在我们的应用程序中创建指标，我们可以使用许多 Prometheus 客户端库之一。为简单起见，我们选择client_python，但无论您使用何种语言，相同的概念都将适用。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;from prometheus_client import Counter

# Declare our first metric.
# First argument is the name of the metric.
# Second argument is the description of it.
c = Counter(mugs_of_beverage_total, &#x27;The total number of mugs drank.&#x27;)

# Call inc() to increment our metric every time a mug was drank.
c.inc()
c.inc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用这个简单的代码，Prometheus 客户端库将创建一个单一的指标。为了让 Prometheus 收集此指标，我们需要我们的应用程序运行 HTTP 服务器并在那里公开我们的指标。最简单的方法是使用 client_python 本身提供的功能 - 请参阅此处的文档。&lt;/p&gt;
&lt;p&gt;当 Prometheus 向我们的应用程序发送 HTTP 请求时，它将收到以下响应：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# HELP mugs_of_beverage_total The total number of mugs drank.
# TYPE mugs_of_beverage_total counter
mugs_of_beverage_total 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Prometheus 自己的文档中广泛介绍了这种格式和底层数据模型。&lt;/p&gt;
&lt;p&gt;有关详细信息，请参阅数据模型和说明格式页面。&lt;/p&gt;
&lt;p&gt;如果愿意，我们可以添加更多指标，它们都将出现在对指标端点的 HTTP 响应中。&lt;/p&gt;
&lt;p&gt;Prometheus 指标可以具有标签形式的额外维度。我们可以使用这些向我们的指标添加更多信息，以便我们可以更好地了解正在发生的事情。&lt;/p&gt;
&lt;p&gt;通过我们的示例指标，我们知道消耗了多少杯，但如果我们还想知道它是哪种饮料怎么办？或者我们想知道这是冷饮还是热饮？添加标签非常容易，我们需要做的就是指定它们的名称。一旦我们这样做了，我们需要在递增我们的计数器以传递这些额外信息时传递标签值（与指定标签名称的顺序相同）。&lt;/p&gt;
&lt;p&gt;让我们调整示例代码来执行此操作。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from prometheus_client import Counter

c = Counter(mugs_of_beverage_total, &#x27;The total number of mugs drank.&#x27;, [&#x27;content&#x27;, &#x27;temperature&#x27;])

c.labels(&#x27;coffee&#x27;, &#x27;hot&#x27;).inc()
c.labels(&#x27;coffee&#x27;, &#x27;hot&#x27;).inc()
c.labels(&#x27;coffee&#x27;, &#x27;cold&#x27;).inc()
c.labels(&#x27;tea&#x27;, &#x27;hot&#x27;).inc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们的 HTTP 响应现在将显示更多条目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# HELP mugs_of_beverage_total The total number of mugs drank.
# TYPE mugs_of_beverage_total counter
mugs_of_beverage_total{content=&quot;coffee&quot;, temperature=&quot;hot&quot;} 2
mugs_of_beverage_total{content=&quot;coffee&quot;, temperature=&quot;cold&quot;} 1
mugs_of_beverage_total{content=&quot;tea&quot;, temperature=&quot;hot&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正如我们所看到的，我们为每个唯一的标签组合都有一个条目。&lt;/p&gt;
&lt;p&gt;这将我们带到了指标上下文中基数的定义。基数是所有标签的唯一组合的数量。您拥有的标签越多，每个标签可以取的值越多，您可以创建的独特组合就越多，基数就越高。&lt;/p&gt;
&lt;h2 id=&quot;-vs--vs-&quot;&gt;指标 vs 样本 vs 时间序列&lt;/h2&gt;
&lt;p&gt;现在我们应该停下来对指标和时间序列进行重要区分。&lt;/p&gt;
&lt;p&gt;指标是具有某些已定义维度（标签）的可观察属性。在我们的示例中，它是一个 Counter 类对象。&lt;/p&gt;
&lt;p&gt;时间序列是该指标的一个实例，具有所有维度（标签）的独特组合，加上一系列时间戳和值对——因此得名“时间序列”。名称和标签告诉我们正在观察什么，而时间戳和值对告诉我们可观察的属性如何随时间变化，允许我们使用这些数据绘制图表。&lt;/p&gt;
&lt;p&gt;这意味着单个指标将创建一个或多个时间序列。时间序列的数量完全取决于标签的数量以及这些标签可以取的所有可能值的数量。&lt;/p&gt;
&lt;p&gt;每次我们为我们的指标添加一个新标签时，我们都冒着增加将作为结果导出到 Prometheus 的时间序列数量的风险。&lt;/p&gt;
&lt;p&gt;在我们的示例中，我们有两个标签，“内容”和“温度”，它们都可以有两个不同的值。所以我们最终可以创建的时间序列的最大数量是四个 (2&lt;em&gt;2)。如果我们添加另一个也可以有两个值的标签，那么我们现在最多可以导出八个时间序列 (2&lt;/em&gt;2*2)。我们拥有的标签越多或它们可以拥有的时间序列越多。&lt;/p&gt;
&lt;p&gt;如果所有标签值都由您的应用程序控制，您将能够计算出所有可能的标签组合的数量。但真正的风险是当您使用来自外部世界的标签值创建指标时。&lt;/p&gt;
&lt;p&gt;如果我们跟踪对 Web 服务器的 HTTP 请求数量而不是饮料，并且我们使用请求路径作为标签值之一，那么任何发出大量随机请求的人都可能迫使我们的应用程序创建大量时间序列. 为避免这种情况，通常最好永远不要接受来自不受信任来源的标签值。&lt;/p&gt;
&lt;p&gt;使事情变得更复杂的是，您在阅读 Prometheus 文档时可能还会听到“示例”。样本介于指标和时间序列之间——它是特定时间戳的时间序列值。这里的时间戳可以是显式的也可以是隐式的。如果样本缺少任何明确的时间戳，则意味着该样本代表最新值——它是给定时间序列的当前值，而时间戳只是您进行观察的时间。&lt;/p&gt;
&lt;p&gt;如果您查看我们示例指标的 HTTP 响应，您会发现返回的条目都没有时间戳。实际上任何地方都没有时间戳。这是因为 Prometheus 服务器本身负责时间戳。当 Prometheus 收集指标时，它会记录开始每次收集的时间，然后它将使用它为每个时间序列编写时间戳和值对。&lt;/p&gt;
&lt;p&gt;这就是为什么我们的应用程序导出的不是真正的指标或时间序列——它是样本。&lt;/p&gt;
&lt;p&gt;令人困惑？让我们回顾一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们从一个指标开始——它只是对我们可以观察到的事物的定义，比如喝醉的杯子数。&lt;/li&gt;
&lt;li&gt;我们的指标作为 HTTP 响应公开。该响应将包含一个样本列表——这些是我们指标的各个实例（由名称和标签表示），加上当前值。&lt;/li&gt;
&lt;li&gt;当 Prometheus 从我们的 HTTP 响应中收集所有样本时，它会添加该收集的时间戳，并将所有这些信息结合在一起，我们就有了一个时间序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZuZFwhuG1.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;heading-1&quot;&gt;基数相关问题&lt;/h2&gt;
&lt;p&gt;每个时间序列都会消耗我们的资源，因为它需要保存在内存中，所以我们拥有的时间序列越多，消耗的资源指标就越多。对于客户端库和 Prometheus 服务器来说都是如此，但对于 Prometheus 本身来说更像是一个问题，因为单个 Prometheus 服务器通常会从许多应用程序收集指标，而应用程序只保留自己的指标。&lt;/p&gt;
&lt;p&gt;因为我们知道我们拥有的标签越多，我们最终得到的时间序列就越多，你可以看到这什么时候会成为一个问题。简单地向我们所有的指标添加一个具有两个不同值的标签可能会使我们必须处理的时间序列数量增加一倍。这反过来将使我们的 Prometheus 服务器的内存使用量增加一倍。如果我们让 Prometheus 消耗的内存超过它实际使用的内存，那么它就会崩溃。&lt;/p&gt;
&lt;p&gt;这种情况通常被描述为“基数爆炸”——一些指标突然添加了大量不同的标签值，创建了大量的时间序列，导致普罗米修斯耗尽内存，结果你失去了所有的可观察性。&lt;/p&gt;
&lt;h2 id=&quot;prometheus-&quot;&gt;Prometheus 是如何使用内存的？&lt;/h2&gt;
&lt;p&gt;为了更好地处理基数问题，最好先更好地了解 Prometheus 的工作原理以及时间序列如何消耗内存。&lt;/p&gt;
&lt;p&gt;为此，让我们遵循普罗米修斯内部时间序列生命周期中的所有步骤。&lt;/p&gt;
&lt;h2 id=&quot;---http-&quot;&gt;第一步 - HTTP 抓取&lt;/h2&gt;
&lt;p&gt;从 Prometheus 向我们的应用程序发送 HTTP 请求的过程称为“抓取”。在 Prometheus 配置文件中，我们定义了一个“抓取配置”，告诉 Prometheus 发送 HTTP 请求的位置、发送频率，以及可选地对请求和响应应用额外处理。&lt;/p&gt;
&lt;p&gt;它将记录它发送 HTTP 请求的时间，并稍后将其用作所有收集的时间序列的时间戳。&lt;/p&gt;
&lt;p&gt;发送请求后，它将解析响应以查找那里公开的所有样本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZv5TDe91G.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;第二步——新的时间序列还是更新？&lt;/h2&gt;
&lt;p&gt;一旦 Prometheus 有了从我们的应用程序收集的样本列表，它将把它保存到TSDB - 时间序列数据库 - Prometheus 保存所有时间序列的数据库。&lt;/p&gt;
&lt;p&gt;但在此之前，它需要首先检查哪些样本属于 TSDB 中已经存在的时间序列，哪些属于全新的时间序列。&lt;/p&gt;
&lt;p&gt;正如我们之前提到的，时间序列是从指标生成的。每个唯一的指标标签组合都有一个时间序列。&lt;/p&gt;
&lt;p&gt;这意味着 Prometheus 必须检查是否已经存在具有相同名称和完全相同标签集的时间序列。在内部，时间序列名称只是另一个名为 &lt;strong&gt;name&lt;/strong&gt; 的标签，因此名称和标签之间没有实际区别。下面的两种表示都是导出相同时间序列的不同方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mugs_of_beverage_total{content=&quot;tea&quot;, temperature=&quot;hot&quot;} 1
{__name__=&quot;mugs_of_beverage_total&quot;, content=&quot;tea&quot;, temperature=&quot;hot&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于一切都是标签，Prometheus 可以简单地使用 sha256 或任何其他算法对所有标签进行哈希处理，以得出每个时间序列唯一的单个 ID。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZv9KGR6vS.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;知道它可以快速检查是否有任何时间序列已经存储在 TSDB 中具有相同的哈希值。基本上我们的标签哈希被用作 TSDB 中的主键。&lt;/p&gt;
&lt;h2 id=&quot;----tsdb&quot;&gt;第三步 - 附加到 TSDB&lt;/h2&gt;
&lt;p&gt;一旦 TSDB 知道它是否必须插入新的时间序列或更新现有的时间序列，它就可以开始真正的工作。&lt;/p&gt;
&lt;p&gt;在内部，所有时间序列都存储在名为Head的结构上的地图中。该映射使用标签哈希作为键，使用名为memSeries 的结构作为值。这些 memSeries 对象存储所有时间序列信息。memSeries 的结构定义相当大，但我们真正需要知道的是它具有所有时间序列标签和包含所有样本（时间戳和值对）的块的副本。&lt;/p&gt;
&lt;p&gt;每个 memSeries 实例都存储一次标签。&lt;/p&gt;
&lt;p&gt;样本使用“varbit”编码存储在块内，这是一种针对时间序列数据优化的无损压缩方案。每个块代表特定时间范围内的一系列样本。这有助于 Prometheus 更快地查询数据，因为它需要做的就是首先找到标签与我们的查询匹配的 memSeries 实例，然后找到负责查​​询时间范围的块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZvcYLtYAU.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认情况下， Prometheus 将每两小时wall clock创建一个块。所以会有一个块用于：00:00 - 01:59、02:00 - 03:59、04:00 - 05:59、...、22:00 - 23:59。&lt;/p&gt;
&lt;p&gt;我们只能附加一个块，它被称为“头块”。这是负责最近时间范围的块，包括我们抓取的时间。任何其他块都包含历史样本，因此是只读的。&lt;/p&gt;
&lt;p&gt;每个块最多可以容纳120 个样本。这是因为一旦我们在一个块上有超过 120 个样本，“varbit”编码的效率就会下降。TSDB将尝试估计给定块何时达到 120 个样本，并相应地设置当前 Head Chunk 的最大允许时间。&lt;/p&gt;
&lt;p&gt;如果我们尝试附加一个时间戳高于当前 Head Chunk 的最大允许时间的样本，则 TSDB 将创建一个新的 Head Chunk 并根据附加速率为其计算新的最大时间。&lt;/p&gt;
&lt;p&gt;所有块都必须与挂钟时间的那两个小时时段对齐，因此如果 TSDB 正在为 10:00-11:59 构建一个块并且它在 11:30 已经“满”，那么它将为11:30-11:59时间范围。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZveSuiPL5.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于默认的 Prometheus 抓取间隔是一分钟，因此需要两个小时才能达到 120 个样本。&lt;/p&gt;
&lt;p&gt;这意味着使用 Prometheus 默认值，每个 memSeries 应该有一个块，每两个小时的数据有 120 个样本。&lt;/p&gt;
&lt;p&gt;回到我们的时间序列——此时 Prometheus 要么创建一个新的 memSeries 实例，要么使用已经存在的 memSeries。一旦有了要使用的 memSeries 实例，它就会将我们的样本附加到 Head Chunk。如果需要，这可能需要 Prometheus 创建一个新块。&lt;/p&gt;
&lt;h2 id=&quot;heading-3&quot;&gt;第四步——内存映射旧块&lt;/h2&gt;
&lt;p&gt;经过几个小时的 Prometheus 运行和抓取指标后，我们的时间序列上可能会有不止一个块：&lt;/p&gt;
&lt;p&gt;一个“Head Chunk”——包含最后两个小时的挂钟插槽中的最多两个小时。&lt;br/&gt;
一个或多个用于历史范围 - 这些块仅供阅读，Prometheus 不会尝试在此处附加任何内容。&lt;br/&gt;
由于所有这些块都存储在内存中，Prometheus 将尝试通过将它们写入磁盘和内存映射来减少内存使用。这样做的好处是内存映射块不使用内存，除非 TSDB 需要读取它们。&lt;/p&gt;
&lt;p&gt;Head Chunk 从不进行内存映射，它始终存储在内存中。&lt;/p&gt;
&lt;h2 id=&quot;---&quot;&gt;第五步 - 将块写入磁盘&lt;/h2&gt;
&lt;p&gt;到目前为止，所有时间序列都完全存储在内存中，您拥有的时间序列越多，Prometheus 的内存使用率就越高。唯一的例外是内存映射块，它们被卸载到磁盘，但如果查询需要，将被读入内存。&lt;/p&gt;
&lt;p&gt;这允许 Prometheus 每秒抓取和存储数千个样本，我们最大的实例每秒附加 550k 个样本，同时还允许我们同时查询所有指标。&lt;/p&gt;
&lt;p&gt;但是您不能将所有内容永远保存在内存中，即使数据的内存映射部分也是如此。&lt;/p&gt;
&lt;p&gt;每两个小时 Prometheus 就会将内存中的块持久化到磁盘上。这个过程也与挂钟对齐，但偏移了一个小时。&lt;/p&gt;
&lt;p&gt;当使用普罗米修斯默认值并假设我们每两个小时的挂钟有一个块时，我们会看到：&lt;/p&gt;
&lt;p&gt;02:00 - 为 02:00 - 03:59 时间范围创建一个新块&lt;br/&gt;
03:00 - 为 00:00 - 01:59 写一个块&lt;br/&gt;
04:00 - 为 04:00 - 05:59 时间范围创建一个新块&lt;br/&gt;
05:00 - 为 02:00 - 03:59 写一个块&lt;br/&gt;
……&lt;br/&gt;
22:00 - 为 22:00 - 23:59 时间范围创建一个新块&lt;br/&gt;
23:00 - 为 20:00 - 21:59 写一个块&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZvjBXjSYG.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一旦一个块被写入一个块，它就会从 memSeries 中移除，从而从内存中移除。Prometheus 将在配置的保留期内将每个块保留在磁盘上。&lt;/p&gt;
&lt;p&gt;块最终将被“压缩”，这意味着 Prometheus 将采用多个块并将它们合并在一起以形成一个覆盖更大时间范围的块。这个过程有助于减少磁盘使用，因为每个块都有一个占用大量磁盘空间的索引。通过将多个块合并在一起，可以重复使用该索引的大部分，从而允许 Prometheus 使用相同数量的存储空间存储更多数据。&lt;/p&gt;
&lt;h2 id=&quot;heading-4&quot;&gt;第六步——垃圾收集&lt;/h2&gt;
&lt;p&gt;在将块写入块并从 memSeries 中删除后，我们可能会得到一个没有块的 memSeries 实例。如果任何时间序列不再被任何应用程序公开，那么就会发生这种情况，因此没有试图向其附加更多样本的刮擦。&lt;/p&gt;
&lt;p&gt;一种常见的模式是将软件版本导出为 build_info 指标，Prometheus 本身也这样做：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prometheus_build_info{version=&quot;2.42.0&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当 Prometheus 2.43.0 发布时，该指标将导出为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prometheus_build_info{version=&quot;2.43.0&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这意味着带有 version=”2.42.0” 标签的时间序列将不再接收任何新样本。&lt;/p&gt;
&lt;p&gt;一旦这个时间序列的最后一个块被写入一个块并从 memSeries 实例中删除，我们就没有剩下的块了。这意味着我们的 memSeries 仍然消耗一些内存（主要是标签），但实际上没有做任何事情。&lt;/p&gt;
&lt;p&gt;为了摆脱这样的时间序列，Prometheus 将在写入一个块后立即运行“head 垃圾回收”（记住 Head 是包含所有 memSeries 的结构）。这个垃圾收集，除其他外，将寻找任何没有单个块的时间序列，并将其从内存中删除。&lt;/p&gt;
&lt;p&gt;由于这发生在写入一个块之后，并且写入一个块发生在块窗口的中间（与挂钟对齐的两个小时片），唯一会找到的 memSeries 是那些“孤立的”——它们之前收到过样本，但现在不是了。&lt;/p&gt;
&lt;h2 id=&quot;heading-5&quot;&gt;这是什么意思呢？&lt;/h2&gt;
&lt;p&gt;Prometheus 中使用的 TSDB 是一种特殊的数据库，针对非常特定的工作负载进行了高度优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从应用程序中抓取的时间序列保存在内存中。&lt;/li&gt;
&lt;li&gt;如果有连续更新，样本将使用最有效的编码进行压缩。&lt;/li&gt;
&lt;li&gt;几个小时前的块被写入磁盘并从内存中删除。&lt;/li&gt;
&lt;li&gt;当时间序列从应用程序中消失并且不再被抓取时，它们仍然保留在内存中，直到所有块都写入磁盘并且垃圾收集将它们删除。&lt;br/&gt;
这意味着 Prometheus 在一遍又一遍地连续抓取相同的时间序列时效率最高。当它只抓取时间序列一次而不再抓取时，效率最低——与使用该内存存储的信息量相比，这样做会带来显着的内存使用开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们试着想象一下普罗米修斯是如何设计完美的数据类型的，我们最终会得到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZvtcxhQhh.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一些连续的线条描述了一些观察到的特性。&lt;/p&gt;
&lt;p&gt;另一方面，如果我们想可视化 Prometheus 在处理时效率最低的数据类型，我们将以这样的方式结束：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZvuNXZzhC.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我们有单个数据点，每个数据点代表我们测量的不同属性。&lt;/p&gt;
&lt;p&gt;尽管您可以调整 Prometheus 的一些行为，并通过传递其中一个隐藏的标志来调整它以用于短暂的时间序列，但通常不鼓励这样做。这些标志仅用于测试，可能会对 Prometheus 服务器的其他部分产生负面影响。&lt;/p&gt;
&lt;p&gt;为了更好地理解短暂时间序列对内存使用的影响，让我们看另一个例子。&lt;/p&gt;
&lt;p&gt;让我们看看如果我们在 00:25 启动我们的应用程序会发生什么，允许 Prometheus 在它导出时抓取它一次：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prometheus_build_info{version=&quot;2.42.0&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在第一次抓取之后立即将我们的应用程序升级到新版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prometheus_build_info{version=&quot;2.43.0&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 00:25 Prometheus 将创建我们的 memSeries，但我们必须等到 Prometheus 写入一个包含 00:00-01:59 数据的块并运行垃圾收集，然后 memSeries 从内存中删除，这将在 03 发生： 00。&lt;/p&gt;
&lt;p&gt;这个单个样本（数据点）将创建一个时间序列实例，该实例将使用资源在内存中保留超过两个半小时，这样我们就有了一个时间戳和值对。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZvzPWb7Vo.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果我们要连续抓取大量仅存在很短时间的时间序列，那么我们将在内存中慢慢积累大量 memSeries，直到下一次垃圾回收。&lt;/p&gt;
&lt;p&gt;查看此类 Prometheus 服务器的内存使用情况，我们会看到这种模式随时间重复出现：&lt;br/&gt;
&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZvBuZp6WG.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的重要信息是短暂的时间序列很昂贵。只被抓取一次的时间序列保证在 Prometheus 中存活一到三个小时，具体取决于抓取的确切时间。&lt;/p&gt;
&lt;h2 id=&quot;heading-6&quot;&gt;基数的代价&lt;/h2&gt;
&lt;p&gt;至此我们应该知道一些关于 Prometheus 的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们知道什么是指标、样本和时间序列。&lt;/li&gt;
&lt;li&gt;我们知道，指标上的标签越多，它可以创建的时间序列就越多。&lt;/li&gt;
&lt;li&gt;我们知道每个时间序列都会保存在内存中。&lt;/li&gt;
&lt;li&gt;我们知道时间序列会在内存中保留一段时间，即使它们只被刮掉一次。&lt;br/&gt;
考虑到所有这些，我们现在可以看到问题 - 一个具有高基数的指标，尤其是具有来自外部世界的标签值的指标，很容易在很短的时间内创建大量时间序列，导致基数爆炸。这会增加 Prometheus 的内存使用量，如果它使用了所有可用的物理内存，这可能会导致 Prometheus 服务器崩溃。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了更好地了解这个问题，让我们调整示例指标以跟踪 HTTP 请求。&lt;/p&gt;
&lt;p&gt;我们的指标将有一个存储请求路径的标签。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from prometheus_client import Counter

c = Counter(http_requests_total, &#x27;The total number of HTTP requests.&#x27;, [&#x27;path&#x27;])

# HTTP request handler our web server will call
def handle_request(path):
  c.labels(path).inc()
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们使用 curl 命令发出单个请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; curl https://app.example.com/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们应该在我们的应用程序中看到这些时间序列：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# HELP http_requests_total The total number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{path=&quot;/index.html&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是如果一个邪恶的黑客决定向我们的应用程序发送一堆随机请求会发生什么？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; curl https://app.example.com/jdfhd5343
&amp;gt; curl https://app.example.com/3434jf833
&amp;gt; curl https://app.example.com/1333ds5
&amp;gt; curl https://app.example.com/aaaa43321
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将创建额外的时间序列：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# HELP http_requests_total The total number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{path=&quot;/index.html&quot;} 1
http_requests_total{path=&quot;/jdfhd5343&quot;} 1
http_requests_total{path=&quot;/3434jf833&quot;} 1
http_requests_total{path=&quot;/1333ds5&quot;} 1
http_requests_total{path=&quot;/aaaa43321&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果有 1,000 个随机请求，我们最终会在 Prometheus 中得到 1,000 个时间序列。如果我们的指标有更多标签，并且所有标签都是根据请求负载（HTTP 方法名称、IP、标头等）设置的，我们很容易得到数百万个时间序列。&lt;/p&gt;
&lt;p&gt;通常它不需要任何恶意行为者来引起与基数相关的问题。一类常见的错误是在指标上贴上错误标签并将原始错误对象作为值传递。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from prometheus_client import Counter

c = Counter(errors_total, &#x27;The total number of errors.&#x27;, [error])

def my_func:
  try:
    ...
  except Exception as err:
    c.labels(err).inc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果需要处理的错误是一般性的，例如“权限被拒绝”，这很有效：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;errors_total{error=&quot;Permission Denied&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是如果错误字符串包含一些特定于任务的信息，例如我们的应用程序无法访问的文件的名称，或者 TCP 连接错误，那么我们可能很容易以这种方式得到高基数指标：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;errors_total{error=&quot;file not found: /myfile.txt&quot;} 1
errors_total{error=&quot;file not found: /other/file.txt&quot;} 1
errors_total{error=&quot;read udp 127.0.0.1:12421-&amp;gt;127.0.0.2:443: i/o timeout&quot;} 1
errors_total{error=&quot;read udp 127.0.0.1:14743-&amp;gt;127.0.0.2:443: i/o timeout&quot;} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一旦被抓取，所有这些时间序列将在内存中保留至少一小时。在 Prometheus 中持续累积时间序列非常容易，直到内存不足。即使是 Prometheus 自己的客户端库也有可能使您面临此类问题的错误。&lt;/p&gt;
&lt;h2 id=&quot;heading-7&quot;&gt;时间序列需要多少内存？&lt;/h2&gt;
&lt;p&gt;Prometheus 中存储的每个时间序列（作为 memSeries 实例）包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有标签的副本。&lt;/li&gt;
&lt;li&gt;包含样本的块。&lt;/li&gt;
&lt;li&gt;Prometheus 内部所需的额外字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标签所需的内存量将取决于这些标签的数量和长度。您拥有的标签越多，或者名称和值越长，使用的内存就越多。&lt;/p&gt;
&lt;p&gt;Prometheus 内部存储标签的方式也很重要，但这是用户无法控制的。有一个开放的拉取请求，它通过将所有标签存储为单个字符串来改进标签的内存使用。&lt;/p&gt;
&lt;p&gt;块将消耗更多内存，因为它们在每次抓取之后慢慢填充更多样本，因此这里的内存使用将遵循一个循环 - 我们从附加第一个样本时的低内存使用开始，然后内存使用缓慢上升直到新的块被创建，我们重新开始。&lt;/p&gt;
&lt;p&gt;您可以通过在 Prometheus 服务器上运行此查询来计算您的时间序列需要多少内存：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go_memstats_alloc_bytes / prometheus_tsdb_head_series&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请注意，您的 Prometheus 服务器必须配置为自行抓取才能正常工作。&lt;/p&gt;
&lt;p&gt;其次这个计算是基于 Prometheus 使用的所有内存，而不仅仅是时间序列数据，所以它只是一个近似值。使用它来粗略了解每个时间序列使用了多少内存，不要假设它是那个确切的数字。&lt;/p&gt;
&lt;p&gt;第三，Prometheus 是用Golang编写的，这是一种具有垃圾收集功能的语言。因此，Prometheus 所需的实际物理内存量通常会更高，因为它将包括需要由 Go 运行时释放的未使用（垃圾）内存。&lt;/p&gt;
&lt;h2 id=&quot;prometheus&quot;&gt;保护普罗米修斯免受基数爆炸Prometheus&lt;/h2&gt;
&lt;p&gt;确实提供了一些选项来处理高基数问题。您可以在抓取配置块中设置许多选项。以下是 Prometheus 文档中相关选项的摘录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# An uncompressed response body larger than this many bytes will cause the
# scrape to fail. 0 means no limit. Example: 100MB.
# This is an experimental feature, this behaviour could
# change or be removed in the future.
[ body_size_limit: &amp;lt;size&amp;gt; | default = 0 ]
# Per-scrape limit on number of scraped samples that will be accepted.
# If more than this number of samples are present after metric relabeling
# the entire scrape will be treated as failed. 0 means no limit.
[ sample_limit: &amp;lt;int&amp;gt; | default = 0 ]

# Per-scrape limit on number of labels that will be accepted for a sample. If
# more than this number of labels are present post metric-relabeling, the
# entire scrape will be treated as failed. 0 means no limit.
[ label_limit: &amp;lt;int&amp;gt; | default = 0 ]

# Per-scrape limit on length of labels name that will be accepted for a sample.
# If a label name is longer than this number post metric-relabeling, the entire
# scrape will be treated as failed. 0 means no limit.
[ label_name_length_limit: &amp;lt;int&amp;gt; | default = 0 ]

# Per-scrape limit on length of labels value that will be accepted for a sample.
# If a label value is longer than this number post metric-relabeling, the
# entire scrape will be treated as failed. 0 means no limit.
[ label_value_length_limit: &amp;lt;int&amp;gt; | default = 0 ]

# Per-scrape config limit on number of unique targets that will be
# accepted. If more than this number of targets are present after target
# relabeling, Prometheus will mark the targets as failed without scraping them.
# 0 means no limit. This is an experimental feature, this behaviour could
# change in the future.
[ target_limit: &amp;lt;int&amp;gt; | default = 0 ]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置所有与标签长度相关的限制可以避免极长的标签名称或值最终占用过多内存的情况。&lt;/p&gt;
&lt;p&gt;回到我们带有错误标签的指标，我们可以想象这样一种场景，其中某些操作返回一条巨大的错误消息，甚至是包含数百行的堆栈跟踪。如果这样的堆栈跟踪最终作为标签值，它将比其他时间序列占用更多的内存，甚至可能是兆字节。由于标签在 Prometheus 处理查询时被复制，这可能会导致内存使用量显着增加。&lt;/p&gt;
&lt;p&gt;设置 label_limit 提供了一些基数保护，但即使只有一个标签名称和大量值，我们也可以看到高基数。通过 sample_limit 是避免高基数的最终保护。它使我们能够对可以从每个应用程序实例中抓取的时间序列数量实施硬性限制。所有这些限制的不利之处在于，违反其中任何一个都会导致整个抓取错误。&lt;/p&gt;
&lt;p&gt;如果我们将 sample_limit 配置为 100 并且我们的指标响应包含 101 个样本，那么 Prometheus根本不会抓取任何内容。这是 Prometheus 开发人员经过深思熟虑做出的设计决定。&lt;/p&gt;
&lt;p&gt;主要动机似乎是处理部分抓取的指标很困难，最好将失败的抓取视为事件。&lt;/p&gt;
&lt;h2 id=&quot;cloudflare-&quot;&gt;Cloudflare 如何处理高基数？&lt;/h2&gt;
&lt;p&gt;我们在世界各地拥有数百个数据中心，每个数据中心都有专门的 Prometheus 服务器负责抓取所有指标。每个 Prometheus 都在抓取数百个不同的应用程序，每个应用程序都运行在数百台服务器上。结合起来有很多不同的指标。意外导致基数问题并不难，过去我们已经处理过很多与之相关的问题。&lt;/p&gt;
&lt;h2 id=&quot;heading-8&quot;&gt;基本限制&lt;/h2&gt;
&lt;p&gt;我们部署的最基本的保护层是抓取限制，我们对所有配置的抓取实施。这些是 99% 的应用程序导出指标永远不会超过的合理默认值。&lt;/p&gt;
&lt;p&gt;默认情况下，每个时间序列最多允许 64 个标签，这比大多数指标使用的要多得多。我们还将标签名称和值的长度限制为 128 和 512 个字符，这对于绝大多数刮擦来说也绰绰有余。&lt;/p&gt;
&lt;p&gt;最后，我们默认将 sample_limit 设置为 200 - 因此每个应用程序最多可以导出 200 个时间序列而无需任何操作。&lt;/p&gt;
&lt;p&gt;当有人想要导出更多时间序列或使用更长的标签时会发生什么？他们所要做的就是在他们的抓取配置中明确设置它。&lt;/p&gt;
&lt;p&gt;这些限制是为了防止意外发生，并确保如果任何应用程序正在导出大量时间序列（超过 200 个），负责它的团队就会知道这一点。这有助于我们避免应用程序导出实际上不需要的数千个时间序列的情况。一旦超过 200 个时间序列标记，您应该开始更多地考虑您的指标。&lt;/p&gt;
&lt;h2 id=&quot;ci-&quot;&gt;CI 验证&lt;/h2&gt;
&lt;p&gt;下一层保护是在有人发出拉取请求以为其应用程序添加新的或修改现有的抓取配置时在 CI（持续集成）中运行的检查。&lt;/p&gt;
&lt;p&gt;这些检查旨在确保我们在所有 Prometheus 服务器上都有足够的容量来容纳额外的时间序列，如果该更改会导致收集额外的时间序列。&lt;/p&gt;
&lt;p&gt;例如，如果有人想修改 sample_limit，假设通过将现有限制 500 更改为 2,000，对于具有 10 个目标的抓取，每个目标增加 1,500，有 10 个目标即 10*1,500=15,000 个额外的时间序列可能被刮掉。在允许合并拉取请求之前，我们的 CI 将检查所有 Prometheus 服务器是否有至少 15,000 个时间序列的备用容量。&lt;/p&gt;
&lt;p&gt;这让我们有信心在应用更改后不会使任何 Prometheus 服务器过载。&lt;/p&gt;
&lt;h2 id=&quot;heading-9&quot;&gt;我们的自定义补丁&lt;/h2&gt;
&lt;p&gt;最重要的保护层之一是我们在 Prometheus 之上维护的一组补丁。Prometheus 存储库上有一个开放的拉取请求。该补丁集由两个主要元素组成。首先是允许我们对 TSDB 随时可以存储的时间序列总数实施限制的补丁。在普罗米修斯的标准构建中没有等效的功能，如果任何刮擦产生一些样本，它们将被附加到 TSDB 内的时间序列，如果需要创建新的时间序列。这是带有未设置任何 sample_limit 的抓取的标准流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2023/03/blog-10.png&quot; alt=&quot;图片&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过我们的补丁，我们告诉 TSDB 允许在任何时间存储来自所有擦除的总共 N 个时间序列。因此，当 TSDB 被要求追加新样本时，它会首先检查已经存在多少时间序列。&lt;/p&gt;
&lt;p&gt;如果存储的时间序列总数低于配置的限制，那么我们将像往常一样附加样本。与标准 Prometheus 的不同之处在于，当要附加新样本时，TSDB 已经存储了它允许拥有的最大时间序列数。&lt;/p&gt;
&lt;p&gt;然后，我们的修补逻辑将检查我们要追加的样本是否属于已经存储在 TSDB 中的时间序列，或者它是否是需要创建的新时间序列。如果时间序列已经存在于 TSDB 中，那么我们允许继续追加。如果时间序列尚不存在，而我们的追加将创建它（将创建一个新的 memSeries 实例），那么我们将跳过此示例。我们还将向抓取逻辑发信号通知一些样本已被跳过。这是我们的补丁修改后的流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.super-ops.com/uploads/post/4MZvVhYyFb1.png&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过运行“go_memstats_alloc_bytes / prometheus_tsdb_head_series”查询，我们知道每个时间序列需要多少内存（平均），我们也知道每个服务器上有多少物理内存可供 Prometheus 使用，这意味着我们可以轻松计算粗略数量我们可以将时间序列存储在 Prometheus 中，考虑到由于 Prometheus 是用 Go 编写的，因此存在垃圾收集开销：&lt;/p&gt;
&lt;p&gt;Prometheus 可用的内存/每个时间序列的字节数 = 我们的容量&lt;/p&gt;
&lt;p&gt;这并没有捕捉到普罗米修斯的所有复杂性，但给了我们一个粗略的估计，即我们可以期望有多少时间序列的容量。&lt;/p&gt;
&lt;p&gt;通过在我们所有的普罗米修斯服务器上设置这个限制，我们知道它永远不会抓取比我们的内存更多的时间序列。这是我们避免 Prometheus 服务器因内存不足而崩溃的风险的最后一道防线。&lt;/p&gt;
&lt;p&gt;第二个补丁修改了 Prometheus 处理 sample_limit 的方式 - 使用我们的补丁而不是让整个抓取失败，它只是忽略多余的时间序列。如果我们有一个 sample_limit 设置为 200 的抓取，并且应用程序公开了 201 个时间序列，那么除了最后一个时间序列之外的所有时间序列都将被接受。这是具有 sample_limit 选项集的抓取的标准 Prometheus 流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2023/03/blog-9.png&quot; alt=&quot;图片&quot;/&gt;&lt;/p&gt;
&lt;p&gt;整个抓取要么成功要么失败。Prometheus 简单地计算一次抓取中有多少样本，如果超过 sample_limit 允许的数量，则抓取失败。&lt;/p&gt;
&lt;p&gt;使用我们的自定义补丁，我们不关心刮擦中有多少样本。&lt;/p&gt;
&lt;p&gt;相反，我们在将时间序列附加到 TSDB 时计算时间序列。一旦我们附加了 sample_limit 个样本，我们就开始有选择性了。仅当它们属于已存储在 TSDB 中的时间序列时，才会附加任何多余的样本（达到 sample_limit 之后）。即使在我们超过 sample_limit 之后我们仍然允许追加一些样本的原因是将样本追加到现有时间序列很便宜，它只是添加一个额外的时间戳和值对。&lt;/p&gt;
&lt;p&gt;另一方面，创建新的时间序列要昂贵得多——我们需要分配新的 memSeries 实例和所有标签的副本，并将其保存在内存中至少一个小时。&lt;/p&gt;
&lt;p&gt;这是我们修改后的流程的样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2023/03/blog-12.png&quot; alt=&quot;图片&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两个补丁都为我们提供了两个级别的保护。&lt;/p&gt;
&lt;p&gt;TSDB 限制补丁保护整个 Prometheus 不被太多的时间序列过载。这是因为阻止时间序列吃内存的唯一方法是防止它们被附加到 TSDB。一旦他们进入 TSDB 就已经太晚了。&lt;/p&gt;
&lt;p&gt;虽然 sample_limit 补丁阻止了单个抓取使用过多的 Prometheus 容量，这可能导致创建太多的时间序列并耗尽 Prometheus 的总容量（由第一个补丁强制执行），这反过来会影响所有其他抓取，因为某个新的时间系列将不得不被忽略。&lt;/p&gt;
&lt;p&gt;同时，我们的补丁通过将每次抓取的时间序列限制在某个级别，而不是硬性失败并从受影响的抓取中删除所有时间序列，这将意味着失去受影响应用程序的所有可观察性，从而为我们提供优雅的降级。&lt;/p&gt;
&lt;p&gt;还值得一提的是，如果没有我们的 TSDB 总限制补丁，我们可以继续向 Prometheus 添加新的抓取，仅此一项就可能导致耗尽所有可用容量，即使每个抓取都设置了 sample_limit 并且抓取的时间序列少于此限制允许的数量。&lt;/p&gt;
&lt;p&gt;Prometheus 本身导出的额外指标会告诉我们是否有任何抓取超出限制，如果发生这种情况，我们会提醒负责它的团队。&lt;/p&gt;
&lt;p&gt;这也有利于我们进行自助容量管理——不需要团队签署您的分配，如果 CI 检查通过，那么我们就有您的应用程序所需的容量。我们更喜欢优雅降级的主要原因是我们希望我们的工程师能够自信地部署应用程序及其指标，而无需成为 Prometheus 的主题专家。&lt;/p&gt;
&lt;p&gt;这样，即使是最没有经验的工程师也可以开始导出指标，而不必不断地想“这会导致事故吗？” &lt;/p&gt;
&lt;p&gt;另一个原因是试图掌握您的使用情况可能是一项具有挑战性的任务。&lt;br/&gt;
表面上看起来很简单，毕竟您只需要阻止自己创建太多指标、添加太多标签或设置来自不受信任来源的标签值即可。&lt;/p&gt;
&lt;p&gt;实际上，这就像尝试确保您的应用程序不使用太多资源（如 CPU 或内存）一样简单 - 您可以通过简单地分配更少的内存和进行更少的计算来实现这一点。没有比这更容易的了，直到你真正尝试去做。&lt;/p&gt;
&lt;p&gt;任何应用程序为您做的越多，它就越有用，它可能需要的资源就越多。您的需求或客户的需求会随着时间的推移而变化，因此您不能只对它可以消耗多少字节或 CPU 周期划一条线。如果你这样做，这条线最终会被重新绘制，多次。通常，在指标上添加更多标签可以让您获得更多洞察力，因此您尝试监控的应用程序越复杂，就越需要额外的标签。&lt;/p&gt;
&lt;p&gt;除此之外，在大多数情况下我们不会同时看到所有可能的标签值，它通常是所有可能组合的一小部分。&lt;/p&gt;
&lt;p&gt;例如，我们之前在示例中使用的 errors_total 指标可能根本不存在，直到我们开始看到一些错误，即使这样，也可能只会记录一两个错误。&lt;/p&gt;
&lt;p&gt;这适用于我们看到工程师正在使用的许多标签。这意味着查看一个应用程序可能导出多少个时间序列，以及它实际导出多少个，会给我们两个完全不同的数字，这使得容量规划变得更加困难。&lt;/p&gt;
&lt;p&gt;尤其是在处理部分由多个不同团队维护的大型应用程序时，每个团队都从他们的堆栈部分导出一些指标。出于这个原因，我们确实容忍了一定比例的短暂时间序列，即使它们不是普罗米修斯的完美选择并且会消耗我们更多的内存。&lt;/p&gt;
&lt;p&gt;文档最后，我们维护了一组内部文档页面，这些页面试图指导工程师完成抓取和使用指标的过程，其中包含大量特定于我们环境的信息。Prometheus 和 PromQL（普罗米修斯查询语言）在概念上非常简单，但这意味着所有复杂性都隐藏在整个指标管道的不同元素之间的交互中。&lt;/p&gt;
&lt;p&gt;从工程角度管理指标的整个生命周期是一个复杂的过程。您必须在您的应用程序中定义您的指标，使用名称和标签，以便您轻松处理生成的时间序列。&lt;/p&gt;
&lt;p&gt;然后，您必须以正确的方式配置 Prometheus 抓取并将其部署到正确的 Prometheus 服务器。接下来，您可能需要创建记录和/或警报规则以利用您的时间序列。&lt;/p&gt;
&lt;p&gt;最后，您需要创建一个仪表板来可视化所有指标并能够发现趋势。在这个过程的各个阶段都会有陷阱和犯错的余地。我们在之前关于 Prometheus 的博文中介绍了一些最基本的陷阱 -监控我们的监控。在同一篇博客文章中，我们还提到了我们用来帮助​​我们的工程师编写有效的 Prometheus 警报规则的工具之一。&lt;/p&gt;
&lt;p&gt;拥有涵盖所有特定于我们环境和最常见任务的基础知识的良好内部文档非常重要。能够回答“如何做 IX？” 无需等待主题专家，让每个人都更有效率，行动更快，同时也避免普罗米修斯专家一遍又一遍地回答相同的问题。&lt;/p&gt;
&lt;h2 id=&quot;heading-10&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;Prometheus 是一个出色且可靠的工具，但处理高基数问题可能具有挑战性，尤其是在许多不同的应用程序被同一个 Prometheus 服务器抓取的环境中。过去，我们在 Prometheus 实例过载方面遇到过很多问题，并开发了许多工具来帮助我们处理这些问题，包括自定义补丁。但解决高基数问题的关键是更好地理解 Prometheus 的工作原理以及哪种使用模式会出现问题。更好地了解 Prometheus 内部结构使我们能够维护一个快速可靠的可观察性平台，而无需过多的繁文缛节，而我们围绕它开发的工具（其中一些是开源的）可帮助我们的工程师避免最常见的陷阱并自信地进行部署.&lt;/p&gt;

        &lt;/article&gt;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>