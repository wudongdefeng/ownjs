<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>18f75e72ca813e905a06da3d0f58b781</guid>
<title>三万字盘点Spring 9大核心基础功能</title>
<link>https://toutiao.io/k/sgg56hz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;今天来跟大家聊一聊Spring的9大核心基础功能。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;话不多说，先上目录&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0031948881789137&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WeIvMxgMRFjqT9jJa01edMJb6Orn03FytAL2pmFfoloqQjAdBGYs7ibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;626&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;友情提示，本文过长，建议收藏，嘿嘿嘿！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;资源管理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;资源管理是Spring的一个核心的基础功能，不过在说Spring的资源管理之前，先来简单说一下Java中的资源管理。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Java资源管理&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java中的资源管理主要是通过&lt;code&gt;java.net.URL&lt;/code&gt;来实现的，通过URL的&lt;code&gt;openConnection&lt;/code&gt;方法可以对资源打开一个连接，通过这个连接读取资源的内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;资源不仅仅指的是网络资源，还可以是本地文件、一个jar包等等。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1、来个Demo&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，比如你想到访问&lt;code&gt;www.baidu.com&lt;/code&gt;这个百度首页网络资源，那么此时就可以这么写&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JavaResourceDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//构建URL 指定资源的协议为http协议&lt;/span&gt;&lt;br/&gt;        URL url = &lt;span&gt;new&lt;/span&gt; URL(&lt;span&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//打开资源连接&lt;/span&gt;&lt;br/&gt;        URLConnection urlConnection = url.openConnection();&lt;br/&gt;        &lt;span&gt;//获取资源输入流&lt;/span&gt;&lt;br/&gt;        InputStream inputStream = urlConnection.getInputStream();&lt;br/&gt;        &lt;span&gt;//通过hutool工具类读取流中数据&lt;/span&gt;&lt;br/&gt;        String content = IoUtil.read(&lt;span&gt;new&lt;/span&gt; InputStreamReader(inputStream));&lt;br/&gt;        System.out.println(content);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解释一下上面代码的意思：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先构建一个URL，指定资源的访问协议为http协议&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过URL打开一个资源访问连接，然后获取一个输入流，读取内容&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3305084745762712&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W6GAcxEM8VYvVYmfORgvFicsZb7bKq99btQkibCg3ncgKCnIVKleqriaibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;944&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成功读取到百度首页的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，也可以通过URL访问本地文件资源，在创建URL的时候只需要指定协议类型为&lt;code&gt;file://&lt;/code&gt;和文件的路径就行了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;URL url = &lt;span&gt;new&lt;/span&gt; URL(&lt;span&gt;&quot;file://&quot;&lt;/span&gt; + &lt;span&gt;&quot;文件的路径&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式这里我就不演示了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这种方式实际上最终也是通过&lt;code&gt;FileInputStream&lt;/code&gt;来读取文件数据的，不信你可以自己debug试试。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2、原理&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每种协议的URL资源都需要一个对应的一个URLStreamHandler来处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35648148148148145&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WCvA0O4DUVkySN6XZDibyPmOq8KJxELlZpJEibHWPzpgR7ulWoEib2BzlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;URLStreamHandler&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说，&lt;code&gt;http://&lt;/code&gt;协议有对应的URLStreamHandler的实现，&lt;code&gt;file://&lt;/code&gt;协议的有对应的URLStreamHandler的实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java除了支持&lt;code&gt;http://&lt;/code&gt;和&lt;code&gt;file://&lt;/code&gt;协议之外，还支持其它的协议，如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25989672977624784&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WibxO4xQ6r7VLFia4M76QTJAw8NnXTz7KXN0Zjn5b2IXEiaOzaukxnVngQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;581&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于的URLStreamHandler如下图所示&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41032608695652173&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WWKEgY0pEoOca3m4p3VbefkhV2rIa1mnyZyed8sKYQ2VlRQmnSm3APA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;736&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当在构建URL的时候，会去解析资源的访问协议，根据访问协议找到对应的URLStreamHandler的实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，除了Java本身支持的协议之外，我们还可以自己去扩展这个协议，大致只需要两步即可：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;实现URLConnection，可以通过这个连接读取资源的内容&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现URLStreamHandler，通过URLStreamHandler可以获取到URLConnection&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过需要注意的是，URLStreamHandler的实现需要放在&lt;code&gt;sun.net.www.protocol.协议名称&lt;/code&gt;包下，类名必须是&lt;code&gt;Handler&lt;/code&gt;，这也是为什么截图中的实现类名都叫&lt;code&gt;Handler&lt;/code&gt;的原因。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然如果不放在指定的包下也可以，但是需要实现&lt;code&gt;java.net.URLStreamHandlerFactory&lt;/code&gt;接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于扩展我就不演示了，如果你感兴趣可以自行谷歌一下。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Spring资源管理&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然Java提供了标准的资源管理方式，但是Spring并没有用，而是自己搞了一套资源管理方式。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1、资源抽象&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Spring中，资源大致被抽象为两个接口&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Resource：可读资源，可以获取到资源的输入流&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WritableResource：读写资源，除了资源输入流之外，还可以获取到资源的输出流&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;Resource&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WxbCy6vGsI51OgN4ETlSAhEV3QTDAfOiabBlcxN7tRsTicmpYcbXXDX2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Resource接口继承了InputStreamSource接口，而InputStreamSource接口可以获取定义了获取输入流的方法&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3262135922330097&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WlweFWz8iaaKXLRM6iaw6ib9THzIoBT6pn7Vh6icLfGo5plcnFZNyEwSzcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;WritableResource&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4787037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WJjgq6z8eQqjrs429vQWjUcg7AsPZ3fZXv3liaOEu2qAhtu3TCX2cOqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;WritableResource&lt;/code&gt;继承了&lt;code&gt;Resource&lt;/code&gt;接口，可以获取到资源的输出流，因为有的资源不仅可读，还可写，就比如一些本地文件的资源，往往都是可读可写的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Resource&lt;/code&gt;的实现很多，这里我举几个常见的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;FileSystemResource：读取文件系统的资源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;UrlResource：前面提到的Java的标准资源管理的封装，底层就是通过URL来访问资源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ClassPathResource：读取classpath路径下的资源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ByteArrayResource：读取静态字节数组的数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，想要通过Spring的资源管理方式来访问前面提到百度首页网络资源，就可以这么写&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;//构建资源&lt;/span&gt;&lt;br/&gt;Resource resource = &lt;span&gt;new&lt;/span&gt; UrlResource(&lt;span&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;//获取资源输入流&lt;/span&gt;&lt;br/&gt;InputStream inputStream = resource.getInputStream();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是一个本地文件资源，那么除了可以使用UrlResource，也可以使用FileSystemResource，都是可以的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2、资源加载&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然&lt;code&gt;Resource&lt;/code&gt;有很多实现，但是在实际使用中，可能无法判断使用具体的哪个实现，所以Spring提供了&lt;code&gt;ResourceLoader&lt;/code&gt;资源加载器来根据资源的类型来加载资源。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6351851851851852&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WyulF68grUt5IQJeE8tnuicuvz8GX9dBqfe5iao6TE9QmDiaAtuJRqr1Eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ResourceLoader&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;code&gt;getResource&lt;/code&gt;方法，传入一个路径就可以加载到对应的资源，而这个路径不一定是本地文件，可以是任何可加载的路径。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;有个唯一的实现&lt;code&gt;DefaultResourceLoader&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.32037037037037036&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WMaFxoIMicSzeuXMpnou8IQBTYc5mSRdCQgBlYXWrs8iaIT9VCKQQ5jLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如对于上面的例子，就可以通过&lt;code&gt;ResourceLoader&lt;/code&gt;来加载资源，而不用直接new具体的实现了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;//创建ResourceLoader&lt;/span&gt;&lt;br/&gt;ResourceLoader resourceLoader = &lt;span&gt;new&lt;/span&gt; DefaultResourceLoader();&lt;br/&gt;&lt;span&gt;//获取资源&lt;/span&gt;&lt;br/&gt;Resource resource = resourceLoader.getResource(&lt;span&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了&lt;code&gt;ResourceLoader&lt;/code&gt;之外，还有一个&lt;code&gt;ResourcePatternResolver&lt;/code&gt;可以加载资源&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5305555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WGZPPrXpiaxtlovYXRaVadgw7IAhqdZibOMv9hGoibiaIYa1PWvv1Cc7K0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ResourcePatternResolver&lt;/code&gt;继承了&lt;code&gt;ResourceLoader&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;code&gt;ResourcePatternResolver&lt;/code&gt;提供的方法可以看出，他可以加载多个资源，支持使用通配符的方式，比如&lt;code&gt;classpath*:&lt;/code&gt;，就可以加载所有classpath的资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ResourcePatternResolver&lt;/code&gt;只有一个实现&lt;code&gt;PathMatchingResourcePatternResolver&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W0Zz2F1JD9HlRaBW92tg3ibIVlVQZBhL7W7N59vVbq9pVicKlibFG99kTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;PathMatchingResourcePatternResolver&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3、小结&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这就讲完了Spring的资源管理，这里总结一下本节大致的内容&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java的标准资源管理：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring的资源管理：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;资源抽象：Resource 、WritableResource&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;资源加载：ResourceLoader 、ResourcePatternResolver&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring的资源管理在Spring中用的很多，比如在SpringBoot中，&lt;code&gt;application.yml&lt;/code&gt;的文件就是通过ResourceLoader加载成Resource，之后再读取文件的内容的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;2.822429906542056&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W89ptkHoH1HCutQke38EON3v0EWl8c0kSGWcyPbicnb60icyLl8G7pGjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;107&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;环境&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一节末尾举的例子中提到，SpringBoot配置文件是通过ResourceLoader来加载配置文件，读取文件的配置内容&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么当配置文件都加载完成之后，这个配置应该存到哪里，怎么能够读到呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就引出了Spring框架中的一个关键概念，环境，它其实就是用于管理应用程序配置的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1、Environment&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Environment就是环境抽象出来的接口&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40828402366863903&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WQ34JZatmcuVO6CGFgwNUppJhMwiaPywianXmHPB9YfWTTHgCBAuYVzicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Environment继承PropertyResolver&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;PropertyResolver&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;containsProperty&lt;/span&gt;&lt;span&gt;(String key)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;String &lt;span&gt;getProperty&lt;/span&gt;&lt;span&gt;(String key)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &amp;lt;T&amp;gt; &lt;span&gt;T &lt;span&gt;getProperty&lt;/span&gt;&lt;span&gt;(String key, Class&amp;lt;T&amp;gt; targetType)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &amp;lt;T&amp;gt; &lt;span&gt;T &lt;span&gt;getRequiredProperty&lt;/span&gt;&lt;span&gt;(String key, Class&amp;lt;T&amp;gt; targetType)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IllegalStateException&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;String &lt;span&gt;resolvePlaceholders&lt;/span&gt;&lt;span&gt;(String text)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上是PropertyResolver提供的部分方法，这里简单说一下上面方法的作用&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;getProperty(String key)&lt;/code&gt;，很明显是通过配置的key获取对应的value值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;getProperty(String key, Class&amp;lt;T&amp;gt; targetType)&lt;/code&gt;，这是获取配置，并转换成对应的类型，比如你获取的是个字符串的&lt;code&gt;&quot;true&quot;&lt;/code&gt;，这里就可以给你转换成布尔值的&lt;code&gt;true&lt;/code&gt;，具体的底层实现留到下一节讲&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;resolvePlaceholders(String text)&lt;/code&gt;，这类方法可以处理&lt;code&gt;${...}&lt;/code&gt;占位符，也就是先取出&lt;code&gt;${...}&lt;/code&gt;占位符中的key，然后再通过key获取到值&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以Environment主要有一下几种功能：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来个demo&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先在&lt;code&gt;application.yml&lt;/code&gt;的配置文件中加入配置&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.352&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WrCCg71ibR8rmccG0gmziaeTjZNJgjrNOoj5icve96WQAEG0ibUc7kF5Utw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试代码如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;EnvironmentDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ConfigurableApplicationContext applicationContext = SpringApplication.run(EnvironmentDemo&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//从ApplicationContext中获取到ConfigurableEnvironment&lt;/span&gt;&lt;br/&gt;        ConfigurableEnvironment environment = applicationContext.getEnvironment();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//获取name属性对应的值&lt;/span&gt;&lt;br/&gt;        String name = environment.getProperty(&lt;span&gt;&quot;name&quot;&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;name = &quot;&lt;/span&gt; + name);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动应用，获取到ConfigurableEnvironment对象，再获取到值&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ConfigurableEnvironment是Environment子接口，通过命名也可以知道，他可以对Environment进行一些功能的配置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;name = 三友的java日记&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2、配置属性源PropertySource&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PropertySource是真正存配置的地方，属于配置的来源，它提供了一个统一的访问接口，使得应用程序可以以统一的方式获取配置获取到属性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41574074074074074&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WA8XqDVk1CgzgloqibVtB38kATo7I0g4GRlZ6EMbCqtOes05a1arf8Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;PropertySource&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来个简单demo&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PropertySourceDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        Map&amp;lt;String, Object&amp;gt; source = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;        source.put(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;三友的java日记&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        PropertySource&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; propertySource = &lt;span&gt;new&lt;/span&gt; MapPropertySource(&lt;span&gt;&quot;myPropertySource&quot;&lt;/span&gt;, source);&lt;br/&gt;&lt;br/&gt;        Object name = propertySource.getProperty(&lt;span&gt;&quot;name&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;name = &quot;&lt;/span&gt; + name);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单说一下上面代码的意思&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先创建了一个map，就是配置来源，往里面添加了一个配置key-value&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建了一个PropertySource，使用的实现是MapPropertySource，需要传入配置map，所以最终获取到属性不用想就知道是从map中获取的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后成获取到属性&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36629213483146067&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WmgfFcQJaHNRkYlCGhyf9gLyBFHGDY4SM9wPW846vfITt0mK1rCQaqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;890&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了MapPropertySource之外，还有非常多的实现&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5601851851851852&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WLN1NxUwtIfqBd3PTFK27IwBaOzeYugLQ4S4It2PibPUeicumt5ahpk1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;PropertySource实现&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如CommandLinePropertySource，它其实就封装了通过命令启动时的传递的配置参数&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然PropertySource才是真正存储配置的地方，那么Environment获取到的配置真正也就是从PropertySource获取的，并且他们其实是一对多的关系&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31236897274633124&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WjqEm4WpicekvJu3PrXwMNZ2bxmQSib4dbicFuGIEh3GLO5Pa5sibewfZmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;477&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实很好理解一对多的关系，因为一个应用程序的配置可能来源很多地方，比如在SpringBoot环境底下，除了我们自定义的配置外，还有比如系统环境配置等等，这些都可以通过Environment获取到&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当从Environment中获取配置的时候，会去遍历所有的PropertySource，一旦找到配置key对应的值，就会返回&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果有多个PropertySource都含有同一个配置项的话，也就是配置key相同，那么获取到的配置是从排在前面的PropertySource的获取的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是为什么，当你在配置文件配置username属性时获取到的却是系统变量username对应的值，因为系统的PropertySource排在配置文件对应的PropertySource之前&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3、SpringBoot是如何解析配置文件&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot是通过PropertySourceLoader来解析配置文件的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.525&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WMph2WJ89pHJMnicDalRU9vPHtLptrHfklpnZoBfU0MQLCdta1sXOOGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;load方法的第二个参数就是我们前面提到的资源接口Resource&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过Resource就可以获取到配置文件的输入流，之后就可以读取到配置文件的内容，再把配置文件解析成多个PropertySource，之后把PropertySource放入到Environment中，这样我们就可以通过Environment获取到配置文件的内容了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PropertySourceLoader默认有两个实现，分别用来解析&lt;code&gt;properties&lt;/code&gt;和&lt;code&gt;yml&lt;/code&gt;格式的配置文件&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3035230352303523&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WQICcg7mttJ46flQSaKnY8uicmFczWnPHv4oPI4c4tCKhkmFaWZMy6XQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;738&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，上面的图就可以优化成这样&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2491349480968859&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WuFFSKCEfuMCCKO01ZHEhiavaaotyR2ia5ibohxHZYOlO7elOpuIJbmrjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;289&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;类型转换&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上一节介绍Environment时提到了它的&lt;code&gt;getProperty(String key, Class&amp;lt;T&amp;gt; targetType)&lt;/code&gt;可以将配置的字符串转换成对应的类型，那么他是如何转换的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就跟本文要讲的Spring类型转换机制有关了&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1、类型转换API&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring类型转换主要涉及到以下几个api：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;PropertyEditor&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Converter&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GenericConverter&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConversionService&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TypeConverter&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我会来详细介绍这几个api的原理和他们之间的关系。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.1、PropertyEditor&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PropertyEditor并不是Spring提供的api，而是JDK提供的api，他的主要作用其实就是将String类型的字符串转换成Java对象属性值。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;PropertyEditor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;setValue&lt;/span&gt;&lt;span&gt;(Object value)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Object &lt;span&gt;getValue&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;String &lt;span&gt;getAsText&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;setAsText&lt;/span&gt;&lt;span&gt;(String text)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; java.lang.IllegalArgumentException&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就拿项目中常用的&lt;code&gt;@Value&lt;/code&gt;来举例子，当我们通过&lt;code&gt;@Value&lt;/code&gt;注解的方式将配置注入到字段时，大致步骤如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2958801498127341&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2Wu8uWw6Ygb6zVicP5W5A1ib2Y3NULFqguZsPpQ4cbIJsyMJjWnibI4aCng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;267&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;取出&lt;code&gt;@Value&lt;/code&gt;配置的key&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据&lt;code&gt;@Value&lt;/code&gt;配置的key调用Environment的&lt;code&gt;resolvePlaceholders(String text)&lt;/code&gt;方法，解析占位符，找到配置文件中对应的值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调用PropertyEditor将对应的值转换成注入的属性字段类型，比如注入的字段类型是数字，那么就会将字符串转换成数字&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在转换的过程中，Spring会先调用PropertyEditor的setAsText方法将字符串传入，然后再调用getValue方法获取转换后的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring提供了很多PropertyEditor的实现，可以实现字符串到多种类型的转换&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.711340206185567&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2Wn6FMe7zwB9JyNibfOG6jH1vRnYY3XKsoIBBFKChibtngsgquotWMwW1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;970&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这么多实现中，有一个跟我们前面提到的Resource有关的实现&lt;code&gt;ResourceEditor&lt;/code&gt;，它是将字符串转换成Resource对象&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42213883677298314&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WT2ib6VFxVWPbhSOTlYaRZnNPShyk7X46IpbNia4iarFd9tbgE7yQ7kJIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1066&quot;/&gt;&lt;figcaption&gt;ResourceEditor&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，可以直接通过@Value的方式直接注入一个Resource对象，就像下面这样&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; Resource resource;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实归根到底，底层也是通过ResourceLoader来加载的，这个结论是不变的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;所以，如果你想知道@Value到底支持注入哪些字段类型的时候，看看PropertyEditor的实现就可以了，当然如果Spring自带的都不满足你的要求，你可以自己实现PropertyEditor，比如把String转成Date类型，Spring就不支持。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.2、Converter&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于PropertyEditor局限于字符串的转换，所以Spring在后续的版本中提供了叫Converter的接口，他也用于类型转换的，相比于PropertyEditor更加灵活、通用&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5337301587301587&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WprSia9ogibtxgNobpYjaOde0AfibLhH158f4Rd4vJoTA6c1s68DcpxVMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;figcaption&gt;Converter&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Converter是个接口，泛型S是被转换的对象类型，泛型T是需要被转成的类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样地，Spring也提供了很多Converter的实现&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WNJDVL2dtWKEolzib9xFco4IxZpxdiasGicyQjpT7uISp4aXzURQEP1MdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些主要包括日期类型的转换和String类型转换成其它的类型&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.3、GenericConverter&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GenericConverter也是类型转换的接口&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4462962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WD50MDria1pTUpMS11Cocm14TKibQzSkibuQf7ibHnWIKo7QbO2n6MBy5Tw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个接口的主要作用是可以处理带有泛型类型的转换，主要的就是面向集合数组转换操作，从Spring默认提供的实现就可以看出&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6787037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W2Q64jd3XNbZic89o0viadBMiaLjnXKibjS6Zd2u5XlSXyAk09YtC7BJlQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那Converter跟GenericConverter有什么关系呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我举个例子，假设现在需要将将源集合&lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt;转换成目标集合&lt;code&gt;Collection&amp;lt;Date&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2026578073089701&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WQc5RNfTYR3icjbJGXFzDpmbJUk96Z2ufJuXMEK3bp8qNenq6xgPiahwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;301&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设现在有个String转换成Date类型的Converter，咱就叫StringToDateConverter，那么整个转换过程如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先会找到GenericConverter的一个实现CollectionToCollectionConverter，从名字也可以看出来，是将一个几个转换成另一个集合&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后遍历源集合&lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt;，取出元素&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据目标集合泛型Date，找到StringToDateConverter，将String转换成Date，将转换的Date存到一个新的集合&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;返回这个新的集合，这样就实现了集合到集合的转换&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以通过这就可以看出Converter和GenericConverter其实是依赖关系&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.4、ConversionService&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于我们使用者来说，不论是Converter还是GenericConverter，其实都是类型转换的，并且类型转换的实现也很多，所以Spring为了方便我们使用Converter还是GenericConverter，提供了一个门面接口ConversionService&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37962962962962965&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W26MeEfLbclpTz1F3c9I48HvEia7uw01WM7ia4sLiaAQWSMAGpEquiaoiakg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ConversionService&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以直接通过ConversionService来进行类型转换，而不需要面向具体的Converter或者是GenericConverter&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ConversionService有一个基本的实现GenericConversionService&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WS10icKCRUovJMwia4iacWe1m9rNVEvRbb5ia2vwbMfuDr4ED01rrlsiaRzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;GenericConversionService&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时GenericConversionService还实现了ConverterRegistry的接口&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5692640692640693&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WiaicUicaVDWKbO4kWiaFuvCM7yibDAArflEMyWvaWHKvEZ1JPRuQjJaDpQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;924&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ConverterRegistry提供了对Converter和GenericConverter进行增删改查的方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33055555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WUgNXXtDj2fG4sR75SSzXLrOa6ia0IDQeow18n93w5mVWnrKQR91qVqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ConverterRegistry&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就可以往ConversionService中添加Converter或者是GenericConverter了，因为最终还是通过Converter和GenericConverter来实现转换的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是我们一般不直接用GenericConversionService，而是用DefaultConversionService或者是ApplicationConversionService（SpringBoot环境底下使用）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为DefaultConversionService和ApplicationConversionService在创建的时候，会添加很多Spring自带的Converter和GenericConverter，就不需要我们手动添加了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.5、TypeConverter&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TypeConverter其实也是算是一个门面接口，他也定义了转换方法&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36203703703703705&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2Wlw6lqlOT39h6BNWqEqSyeOl4nKkXlmIkJdOF0iciagWT2LtBkhsUUw8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他是将PropertyEditor和ConversionService进行整合，方便我们同时使用PropertyEditor和ConversionService&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;convertIfNecessary方法会去调用PropertyEditor和ConversionService进行类型转换，值得注意的是，&lt;strong&gt;优先使用PropertyEditor进行转换，如果没有找到对应的PropertyEditor，会使用ConversionService进行转换&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TypeConverter有个简单的实现SimpleTypeConverter，这里来个简单的demo&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TypeConverterDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        SimpleTypeConverter typeConverter = &lt;span&gt;new&lt;/span&gt; SimpleTypeConverter();&lt;br/&gt;        &lt;br/&gt;        &lt;span&gt;//设置ConversionService&lt;/span&gt;&lt;br/&gt;        typeConverter.setConversionService(DefaultConversionService.getSharedInstance());&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//将字符串&quot;true&quot;转换成Boolean类型的true&lt;/span&gt;&lt;br/&gt;        Boolean b = typeConverter.convertIfNecessary(&lt;span&gt;&quot;true&quot;&lt;/span&gt;, Boolean&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;b = &quot;&lt;/span&gt; + b);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要注意，ConversionService需要我们手动设置，但是PropertyEditor不需要，因为SimpleTypeConverter默认会去添加PropertyEditor的实现。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;小结&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这就讲完了类型转换的常见的几个api，这里再简单总结一下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;PropertyEditor：String转换成目标类型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Converter：用于一个类型转换成另一个类型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GenericConverter：用于处理泛型的转换，主要用于集合&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConversionService：门面接口，内部会调用Converter和GenericConverter&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TypeConverter：门面接口，内部会调用PropertyEditor和ConversionService&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画张图来总结他们之间的关系&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3926247288503254&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WgC6mibKrBftpxtYiapqEP5X4iaRQicuPQJJT7rAZ8ic2gpWhwmpIb9R9l1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;461&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面在举@Value的例子时说，类型转换是根据PropertyEditor来的，其实只说了一半，因为底层实际上是根据TypeConverter来转换的，所以@Value类型转换时也能使用ConversionService类转换，所以那张图实际上应该这么画才算对&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8041958041958042&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WAlhr5yBlnibmq04e0CFia2pHXHQt9tBRZFl5LoaP7rJNh4t0dJltWGdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;429&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2、Environment中到底是如何进行类型转换的？&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们回到开头提到的话题，Environment中到底是如何进行类型转换的，让我们看看Environment类的接口体系&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Environment有个子接口ConfigurableEnvironment中，前面也提到过&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它继承了ConfigurablePropertyResolver接口&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4826086956521739&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WuxwPtcS8IdCHHc72zfMUpaySjLhf3Vics4f604505AiaPHnVhdiaj5pSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;920&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而ConfigurablePropertyResolver有一个&lt;code&gt;setConversionService&lt;/code&gt;方法&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3527777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2Wfsd36AXkIm14V2nSnvEa0VQAyUpJAK6sSUK0KklcqWXtTiaO3vw53TA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以从这可以看出，Environment底层实际上是通过ConversionService实现类型转换的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这其实也就造成了一个问题，因为ConversionService和PropertyEditor属于并列关系，那么就会导致Environment无法使用PropertyEditor来进行类型转换，也就会丧失部分Spring提供的类型转换功能，就比如无法通过Environment将String转换成Resource对象，因为Spring没有实现String转换成Resource的Converter&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然你可以自己实现一个String转换成Resource的Converter，然后添加到ConversionService，之后Environment就支持String转换成Resource了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据绑定&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一节我们讲了类型转换，而既然提到了类型转换，那么就不得不提到数据绑定了，他们是密不可分的，因为在数据绑定时，往往都会伴随着类型转换，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据绑定的意思就是将一些配置属性跟我们的Bean对象的属性进行绑定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知你是否记得，在远古的ssm时代，我们一般通过xml方式声明Bean的时候，可以通过&lt;code&gt;&amp;lt;property/&amp;gt;&lt;/code&gt;来设置Bean的属性&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;bean&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;com.sanyou.spring.core.basic.User&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;username&quot;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;&quot;三友的java日记&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String username;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后Spring在创建User的过程中，就会给&lt;code&gt;username&lt;/code&gt;属性设置为&lt;code&gt;三友的java日记&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是数据绑定，将&lt;code&gt;三友的java日记&lt;/code&gt;绑定到username这个属性上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据绑定的核心api主要包括以下几个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;PropertyValues&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BeanWrapper&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DataBinder&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1、PropertyValues&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们先来讲一下PropertyValue（注意没有s）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5805555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W0W7HKMPerGwNNxlro8MV6TLAGkEhefSNlZ3jYKKicMKxOWyfbf9fCBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顾明思议，PropertyValue就是就是封装了属性名和对应的属性值，它就是数据绑定时属性值的来源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前面的提到的xml创建Bean为例，Spring在启动的时候会去解析xml中的&lt;code&gt;&amp;lt;property/&amp;gt;&lt;/code&gt;标签，然后将&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;value&lt;/code&gt;封装成PropertyValue&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当创建User这个Bean的时候，到了属性绑定的阶段的时候，就会取出PropertyValue，设置到User的username属性上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而PropertyValues，比PropertyValue多了一个s，也就是复数的意思，所以其实PropertyValues本质上就是PropertyValue的一个集合&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3453703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WZQMVGtJdqaLPzibOv56MwTjSnZhMibeppHH0Lmreibo8Y0gf9T4fKVGOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为一个Bean可能有多个属性配置，所以就用PropertyValues来保存。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2、BeanWrapper&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanWrapper其实就数据绑定的核心api了，因为在Spring中涉及到数据绑定都是通过BeanWrapper来完成的，比如前面提到的Bean的属性的绑定，就是通过BeanWrapper来的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanWrapper是一个接口，他有一个唯一的实现BeanWrapperImpl。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36203703703703705&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WgGEAcibs6kItFR7ZgibZmOqFI4a4caPWAXxSl8xtibQQn1Nib5X0eGoCow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来个demo&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BeanWrapperDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//创建user对象&lt;/span&gt;&lt;br/&gt;        User user = &lt;span&gt;new&lt;/span&gt; User();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//创建BeanWrapper对象，把需要进行属性绑定的user对象放进去&lt;/span&gt;&lt;br/&gt;        BeanWrapper beanWrapper = &lt;span&gt;new&lt;/span&gt; BeanWrapperImpl(user);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//进行数据绑定，将三友的java日记这个属性值赋值到username这个属性上&lt;/span&gt;&lt;br/&gt;        beanWrapper.setPropertyValue(&lt;span&gt;new&lt;/span&gt; PropertyValue(&lt;span&gt;&quot;username&quot;&lt;/span&gt;, &lt;span&gt;&quot;三友的java日记&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;username = &quot;&lt;/span&gt; + user.getUsername());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39067055393586003&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WXaKibHy2B04YD3yNSibTUkj6wne5FMYpxvM0yNc8sIBggaX79VgLIqYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成功获取到，说明设置成功&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanWrapperImpl也间接实现了TypeConverter接口&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6861111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WhjbONPjQoQCicqliauQiaRN7q7uohdYoDC6tFdBu6Wl6CiaqGSJEgGlN5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然底层还是通过前面提到的ConversionService和PropertyEditor实现的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以当配置的类型跟属性的类型不同时，就可以对配置的类型进行转换，然后再绑定到属性上&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这里简单说一下数据绑定和@Value的异同，因为这两者看起来好像是一样的，但实际还是有点区别的&lt;/p&gt;&lt;p&gt;相同点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;两者都会涉及到类型转换，@Value和数据绑定都会将值转换成目标属性对应的类型，并且都是通过TypeConverter来转换的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不同点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;1、发生时机不同，@Value比数据绑定更早，当@Value都注入完成之后才会发生数据绑定(属性赋值)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2、属性赋值方式不同，@Value是通过反射来的，而是数据绑定是通过setter方法来的，如果没有setter方法，属性是没办法绑定的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;3、DataBinder&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DataBinder也是用来进行数据绑定的，它的底层也是间接通过BeanWrapper来实现的数据绑定的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3768518518518518&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WGBDgyRh6Q1gCZuF9fqepYwyuoCMibhicI8ibicT6PFKY8F71WvTQpLX7Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是他相比于BeanWrapper多了一些功能，比如在数据绑定之后，可以对数据校验，比如可以校验字段的长度等等&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到数据校验，是不是想到了SpringMVC中的参数校验，通过@Valid配合一些诸如@NotBlank、@NotNull等注解，实现优雅的参数校验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实SpringMVC的参数校验就是通过DataBinder来的，所以DataBinder其实在SpringMVC中用的比较多，但是在Spring中确用的很少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你有兴趣，可以翻一下SpringMVC中关于请求参数处理的HandlerMethodArgumentResolver的实现，里面有的实现会用到DataBinder（WebDataBinder）来进行数据请求参数跟实体类的数据绑定、类型转换、数据校验等等。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;不知道你有没有注意过，平时写接口的时候，前端传来的参数String类型的时间字符串无法通过Spring框架本身转换成Date类型，有部分原因就是前面提到的Spring没有相关的Converter实现&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的来说，数据绑定在xml配置和SpringMVC中用的比较多的，并且数据绑定也是Spring Bean生命周期中一个很重要的环节。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;泛型处理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring为了方便操作和处理泛型类型，提供了一个强大的工具类——ResolvableType。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型处理其实是一块相对独立的东西，因为它就只是一个工具类，只还不过这个工具类在Spring中却是无处不在！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ResolvableType提供了有一套灵活的API，可以在运行时获取和处理泛型类型等信息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5592592592592592&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WJbKzfNQUibR0vqMXLAw2a78eVmMrt2HGp4NkL8Cv3icEyWVIHRyqd7PA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ResolvableType&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来就通过一个案例，来看一看如何通过ResolvableType快速简单的获取到泛型的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我声明了一个MyMap类，继承HashMap，第一个泛型参数是Integer类型，第二个泛型参数是List类型，List的泛型参数又是String&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyMap&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span&gt;Integer&lt;/span&gt;, &lt;span&gt;List&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来就来演示一下如何获取到HashMap的泛型参数以及List的泛型参数&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，先来通过&lt;code&gt;ResolvableType#forClass&lt;/code&gt;方法创建一个MyMap类型对应的ResolvableType&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;//创建MyMap对应的ResolvableType&lt;/span&gt;&lt;br/&gt;ResolvableType myMapType = ResolvableType.forClass(MyMap&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为泛型参数是在父类HashMap中，所以我们得获取到父类HashMap对应的ResolvableType，通过&lt;code&gt;ResolvableType#getSuperType()&lt;/code&gt;方法获取&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;//获取父类HashMap对应的ResolvableType&lt;/span&gt;&lt;br/&gt;ResolvableType hashMapType = myMapType.getSuperType();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来需要获取HashMap的泛型参数对应的ResolvableType类型，可以通过&lt;code&gt;ResolvableType#getGeneric(int... indexes)&lt;/code&gt;就可以获取指定位置的泛型参数ResolvableType，方法参数就是指第几个位置的泛型参数，从0开始&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如获取第一个位置的对应的ResolvableType类型&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;//获取第一个泛型参数对应的ResolvableType&lt;/span&gt;&lt;br/&gt;ResolvableType firstGenericType = hashMapType.getGeneric(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在有了第一个泛型参数的ResolvableType类型，只需要通过&lt;code&gt;ResolvableType#resolve()&lt;/code&gt;方法就可以获取到ResolvableType类型对应的class类型，这样就可以获取到一个泛型参数的class类型&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;//获取第一个泛型参数对应的ResolvableType对应的class类型，也就是Integer的class类型&lt;/span&gt;&lt;br/&gt;Class&amp;lt;?&amp;gt; firstGenericClass = firstGenericType.resolve();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想获取到HashMap第二个泛型参数的泛型类型，也就是List泛型类型就可以这么写&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;//HashMap第二个泛型参数的对应的ResolvableType，也就是List&amp;lt;String&amp;gt;&lt;/span&gt;&lt;br/&gt;ResolvableType secondGenericType = hashMapType.getGeneric(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;//HashMap第二个泛型参数List&amp;lt;String&amp;gt;的第一个泛型类型String对应的ResolvableType&lt;/span&gt;&lt;br/&gt;ResolvableType secondFirstGenericType = secondGenericType.getGeneric(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;//这样就获取到了List&amp;lt;String&amp;gt;的泛型类型String&lt;/span&gt;&lt;br/&gt;Class&amp;lt;?&amp;gt; secondFirstGenericClass = secondFirstGenericType.resolve();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的演示下来可以发现，其实每变化一步，其实就是获取对应泛型或者是父类等等对应的ResolvableType，父类或者是泛型参数又可能有泛型之类的，只需要一步一步获取就可以了，当需要获取到具体的class类型的时候，通过&lt;code&gt;ResolvableType#resolve()&lt;/code&gt;方法就行了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了上面提到的通过&lt;code&gt;ResolvableType#forClass&lt;/code&gt;方法创建ResolvableType之外，还可以通过一下几个方法创建：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;forField(Field field)&lt;/code&gt;：获取字段类型对应的ResolvableType&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;forMethodReturnType(Method method)&lt;/code&gt;：获取方法返回值类型对应的ResolvableType&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;forMethodParameter(Method method, int parameterIndex)&lt;/code&gt;：获取方法某个位置方法参数对应的ResolvableType&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;forConstructorParameter(Constructor&amp;lt;?&amp;gt; constructor, int parameterIndex)&lt;/code&gt;：获取构造方法某个构造参数对应的ResolvableType&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面解释可以看出，对于一个类方法参数，方法返回值，字段等等都可以获取到对应的ResolvableType&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;国际化&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;国际化（Internationalization，简称i18n）也是Spring提供的一个核心功能，它其实也是一块相对独立的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓的国际化，其实理解简单点就是对于不同的地区国家，输出的文本内容语言不同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring的国际化其实主要是依赖Java中的国际化和文本处理方式。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1、Java中的国际化&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;Locale&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Locale是Java提供的一个类，它可以用来标识不同的语言和地区，如en_US表示美国英语，zh_CN表示中国大陆中文等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36666666666666664&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WPSqET6sFdSFlhD7db59JrnH6BLyA8eTtsbCVt4ZtaVVIyItWHKPgZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前Java已经穷举了很多国家的地区Locale。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以使用Locale类获取系统默认的Locale，也可以手动设置Locale，以适应不同的语言环境。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;ResourceBundle&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ResourceBundle是一个加载本地资源的一个类，他可以根据传入的Locale不同，加载不同的资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来个demo&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先准备资源文件，资源文件通常是.properties文件，文件名命名规则如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;basename_lang_country.properties&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;basename无所谓，叫什么都可以，而lang和country是从Locale中获取的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，我们看看英语地区的Locale&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WNkjrX4F97cu2ocCUDvJDwyOEibbcic6g0B1PibRnm4aNFZOd30RlW2jQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上图可以看出，英语Locale的lang为en，country为空字符串，那么此时英语地区对应资源文件就可以命名为：basename_en.properties，由于country为空字符串，可以省略&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中国大陆Locale如下图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13240740740740742&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WF8m7xzyDbLR25sswZIzEgthGYzpM3Xe1aqicIOGic62WQ2iapH7NToWgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时文件就可以命为：basename_zh_CN.properties&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，现在既然知道了命名规则，我们就创建两个文件，basename就叫message，一个英语，一个中文，放在classpath路径下&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中文资源文件：message_zh_CN.properties，内容为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;name=三友的java日记&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;英文资源文件：message_en.properties，内容为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;name=sanyou&#x27;s java diary&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了文件之后，就可以通过&lt;code&gt;ResourceBundle#getBundle(String baseName,Locale locale)&lt;/code&gt;方法来获取获取ResourceBundle&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一个参数baseName就是我们的文件名中的basename，对于我们的demo来说，就是message&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二个参数就是地区，根据地区的不同加载不同地区的文件&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试一下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ResourceBundleDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//获取ResourceBundle，第一个参数baseName就是我们的文件名称，第二个参数就是地区&lt;/span&gt;&lt;br/&gt;        ResourceBundle chineseResourceBundle = ResourceBundle.getBundle(&lt;span&gt;&quot;message&quot;&lt;/span&gt;, Locale.SIMPLIFIED_CHINESE);&lt;br/&gt;        &lt;span&gt;//根据name键取值&lt;/span&gt;&lt;br/&gt;        String chineseName = chineseResourceBundle.getString(&lt;span&gt;&quot;name&quot;&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;chineseName = &quot;&lt;/span&gt; + chineseName);&lt;br/&gt;&lt;br/&gt;        ResourceBundle englishResourceBundle = ResourceBundle.getBundle(&lt;span&gt;&quot;message&quot;&lt;/span&gt;, Locale.ENGLISH);&lt;br/&gt;        String englishName = englishResourceBundle.getString(&lt;span&gt;&quot;name&quot;&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;englishName = &quot;&lt;/span&gt; + englishName);&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.34959349593495936&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WaRic1DQuhhiacnoEVyYNn9JPIiaH5Va5OPEIaIyCSdXbJo6ZloTy7jLCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;738&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实运行结果可以看出，其实是成功获取了，只不过中文乱码了，这主要是因为ResourceBundle底层其实编码是&lt;code&gt;ISO-8859-1&lt;/code&gt;，所以会导致乱码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决办法最简单就是把中文用Java Unicode序列来表示，之后就可以读出中文了了，比如&lt;code&gt;三友的java日记&lt;/code&gt;用Java Unicode序列表示为&lt;code&gt;\u4e09\u53cb\u7684java\u65e5\u8bb0&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了这种方式之外，其实还可以继承ResourceBundle内部一个Control类&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4415322580645161&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W8weMFvzVlSU8Fe5Pj6pnicpnANJ7jbFY6eDo1WLqia9op6ahekciaS6EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;992&quot;/&gt;&lt;figcaption&gt;Control&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重写newBundle方法&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7787037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WNQ7e0DwyW7yIiaNkrB9mibtuhvCrKLnjO1cIqXib8dmgQeCdVNjDWHzMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;newBundle&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;newBundle是创建ResourceBundle对应核心方法，重写的时候你就可以随心所欲让它支持其它编码方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了新的Control之后，获取ResourceBundle时只需要通过&lt;code&gt;ResourceBundle#getBundle(String baseName, Locale targetLocale,Control control)&lt;/code&gt;方法指定Control就可以了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring实际上就是通过这种方式扩展，支持不同编码的，后面也有提到。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;MessageFormat&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MessageFormat顾明思议就是把消息格式化。它可以接收一条包含占位符的消息模板，并根据&lt;strong&gt;提供的参数&lt;/strong&gt;替换&lt;strong&gt;占位符&lt;/strong&gt;，生成最终的消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MessageFormat对于将动态值插入到消息中非常有用，如欢迎消息、错误消息等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来个Demo&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MessageFormatDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String message = MessageFormat.format(&lt;span&gt;&quot;你好：{0}&quot;&lt;/span&gt;, &lt;span&gt;&quot;张三&quot;&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;message = &quot;&lt;/span&gt; + message);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解释一下上面这段代码：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;你好：{0}&lt;/code&gt;其实就是前面提到的消息的模板，&lt;code&gt;{0}&lt;/code&gt;就是&lt;strong&gt;占位符&lt;/strong&gt;，中间的0代表消息格式化的时候将&lt;strong&gt;提供的参数&lt;/strong&gt;第一个参数替换占位符的值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;张三&lt;/code&gt;就是提供的参数，你可以写很多个，但是我们的demo只会取第一个参数，因为是&lt;code&gt;{0}&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以输出结果为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;message = 你好：张三&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成功格式化消息。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2、Spring国际化&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring提供了一个国际化接口MessageSource&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.32222222222222224&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WbHJ0q0lNTcMXmolthwJREgyH0nOxgp0P0FpSiaYQ8EX9ic65v55zwJwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;MessageSource&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他有一个基于ResourceBundle + MessageFormat的实现ResourceBundleMessageSource&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4842592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WMVibBYR2pNUB8FqSeSTn2iaw8OibVt1PO623O5vMZDTF6C1yLTWBmHcKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ResourceBundleMessageSource&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他的本质可以在资源文件存储&lt;strong&gt;消息的模板&lt;/strong&gt;，然后通过MessageFormat来替换&lt;strong&gt;占位符&lt;/strong&gt;，MessageSource的getMessage方法就可以传递具体的参数&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来个demo&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在模拟登录欢迎语句，对于不同的人肯定要有不同的名字，所以资源文件需要存模板，需要在不同的资源文件加不同的模板&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中文资源文件：message_zh_CN.properties&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;welcome=您好:{0}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;英文资源文件：message_en.properties&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;welcome=hello:{0}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;占位符，就是不同人不同名字&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MessageSourceDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ResourceBundleMessageSource messageSource = &lt;span&gt;new&lt;/span&gt; ResourceBundleMessageSource();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//Spring已经扩展了ResourceBundle的Control，支持资源文件的不同编码方式，但是需要设置一下&lt;/span&gt;&lt;br/&gt;        messageSource.setDefaultEncoding(&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//添加 baseName，就是前面提到的文件中的basename&lt;/span&gt;&lt;br/&gt;        messageSource.addBasenames(&lt;span&gt;&quot;message&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//中文，传个中文名字&lt;/span&gt;&lt;br/&gt;        String chineseWelcome = messageSource.getMessage(&lt;span&gt;&quot;welcome&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; Object[]{&lt;span&gt;&quot;张三&quot;&lt;/span&gt;}, Locale.SIMPLIFIED_CHINESE);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;chineseWelcome = &quot;&lt;/span&gt; + chineseWelcome);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//英文，英语国家肯定是英文名&lt;/span&gt;&lt;br/&gt;        String englishWelcome = messageSource.getMessage(&lt;span&gt;&quot;welcome&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; Object[]{&lt;span&gt;&quot;Bob&quot;&lt;/span&gt;}, Locale.ENGLISH);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;englishWelcome = &quot;&lt;/span&gt; + englishWelcome);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;chineseWelcome = 您好:张三&lt;br/&gt;englishWelcome = hello:Bob&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成功根据完成不同国家资源的加载和模板消息的格式化。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;小结&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里来简单总结一下这一小节说的内容&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Locale：不同国家和地区的信息封装&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ResourceBundle：根据不同国家的Locale，加载对应的资源文件，这个资源文件的命名需要遵守&lt;code&gt;basename_lang_country.properties&lt;/code&gt;命名规范&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MessageFormat：其实就是一个文本处理的方式，他可以解析模板，根据参数替换模板的占位符&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MessageSource：Spring提供的国际化接口，其实他底层主要是依赖Java的ResourceBundle和MessageFormat，资源文件存储模板信息，MessageFormat根据MessageSource方法的传参替换模板中的占位符&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;BeanFactory&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道Spring的核心就是IOC和AOP，而BeanFactory就是大名鼎鼎的IOC容器，他可以帮我们生产对象。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1、BeanFactory接口体系&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanFactory本身是一个接口&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4898148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WC5zmANnPcSiaYygpJxcNYhTqfjiafibCM2icUUicqKJJICkVzQlAThJZk0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;BeanFactory&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的接口定义可以看出从可以从BeanFactory获取到Bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他也有很多子接口，不同的子接口有着不同的功能&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;ListableBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HierarchicalBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConfigurableBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AutowireCapableBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;ListableBeanFactory&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3731481481481482&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2Wp6UHYkgB27UEoEibVM5rqqTcHFr7BW8xWfjR8uPBa94jGrNv5uPYEdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ListableBeanFactory&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从提供的方法可以看出，提供了一些获取集合的功能，比如有的接口可能有多个实现，通过这些方法就可以获取这些实现对象的集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;HierarchicalBeanFactory&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5212962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WuuhGIoVmMtBffdRNBc1JDf9x8ibdqDjsX8c53rQ2Deibg5EpRwaqfOjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;HierarchicalBeanFactory&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从接口定义可以看出，可以获取到父容器，说明BeanFactory有子父容器的概念。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;ConfigurableBeanFactory&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5046296296296297&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WRtoJqndV7iaJ1FmJsJ2g0u0dR4AodK3oxzWBibKscGUYJeW5Wetgmeibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ConfigurableBeanFactory&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从命名可以看出，可配置BeanFactory，所以可以对BeanFactory进行配置，比如截图中的方法，可以设置我们前面提到的类型转换的东西，这样在生成Bean的时候就可以类型属性的类型转换了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;AutowireCapableBeanFactory&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3712962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W2W2OiakdaTCic6dBWIRWlRmgVoqSeO55Nqa6V4nY6Ffp6RzeQvlbVVpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供了自动装配Bean的实现、属性填充、初始化、处理获取依赖注入对象的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如@Autowired最终就会调用&lt;code&gt;AutowireCapableBeanFactory#resolveDependency&lt;/code&gt;处理注入的依赖。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;其实从这里也可以看出，Spring在BeanFactory的接口设计上面还是基于不同的职责进行接口的划分，其实不仅仅是在BeanFactory，前面提到的那些接口也基本符合这个原则。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2、BeanDefinition及其相关组件&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;BeanDefinition&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanDefinition是Spring Bean创建环节中很重要的一个东西，它封装了Bean创建过程中所需要的元信息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;BeanDefinition&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AttributeAccessor&lt;/span&gt;, &lt;span&gt;BeanMetadataElement&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//设置Bean className&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;setBeanClassName&lt;/span&gt;&lt;span&gt;(@Nullable String beanClassName)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//获取Bean className&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Nullable&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;String &lt;span&gt;getBeanClassName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;//设置是否是懒加载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;setLazyInit&lt;/span&gt;&lt;span&gt;(&lt;span&gt;boolean&lt;/span&gt; lazyInit)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//判断是否是懒加载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isLazyInit&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;//判断是否是单例&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isSingleton&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上代码是BeanDefinition接口的部分方法，从这方法的定义名称可以看出，一个Bean所创建过程中所需要的一些信息都可以从BeanDefinition中获取，比如这个Bean的class类型，这个Bean是否是懒加载，这个Bean是否是单例的等等，因为有了这些信息，Spring才知道要创建一个什么样的Bean。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;读取BeanDefinition&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;读取BeanDefinition大致分为以下几类&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;BeanDefinitionReader&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ClassPathBeanDefinitionScanner&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;BeanDefinitionReader&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6842592592592592&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W7nTsCxo8un6fSjVhUKuicHd17bPVtToj7G6pNj0aOcw9g9f5DfAcbng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;BeanDefinitionReader&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanDefinitionReader可以通过&lt;code&gt;loadBeanDefinitions(Resource resource)&lt;/code&gt;方法来加载BeanDefinition，方法参数就是我们前面说的资源，比如可以将Bean定义在xml文件中，这个xml文件就是一个资源&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanDefinitionReader的相关实现：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;XmlBeanDefinitionReader：读取xml配置的Bean&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PropertiesBeanDefinitionReader：读取properties文件配置的Bean，是的，你没看错，Bean可以定义在properties文件配置中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AnnotatedBeanDefinitionReader：读取通过注解定义的Bean，比如@Lazy注解等等，AnnotatedBeanDefinitionReader不是BeanDefinitionReader的实现，但是作用是一样的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;ClassPathBeanDefinitionScanner&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46944444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WHfkyobiaV19CHnvBK2S2erWWF9FRHVFoH8emFh5HtEhYFQdSiau2C7EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个作用就是扫描指定包下通过@Component及其派生注解（@Service等等）注解定义的Bean，其实就是@ComponentScan注解的底层实现&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ClassPathBeanDefinitionScanner这个类其实在很多其它框架中都有使用到，因为这个类可以扫描指定包下，生成BeanDefinition，对于那些需要扫描包来生成BeanDefinition来说，用的很多&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说常见的MyBatis框架，他的注解@MapperScan可以扫描指定包下的Mapper接口，其实他也是通过继承ClassPathBeanDefinitionScanner来扫描Mapper接口的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WJ1nOYgpML51ILpVL6wuTJCpuy5ZgAtAy8npFvUicuSjeS5csdDiau6Yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;BeanDefinitionRegistry&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个从命名就可以看出，是BeanDefinition的注册中心，也就是用来保存BeanDefinition的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4148148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W2v7dm8eg87Q09WDlZmj0TWfnc0Yg8pEO0VLaSicVhwCmkrsaT9jAlDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供了BeanDefinition的增删查的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲到这里，就可以用一张图来把前面提到东西关联起来&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3149381541389153&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WllmEDMJPhfIaslApLzSAu7pj3taGickEHjtGYePrAMUlUTicH4NhOo8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过BeanDefinitionReader或者是ClassPathBeanDefinitionScanner为每一个Bean生成一个BeanDefinition&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BeanDefinition生成之后，添加到BeanDefinitionRegistry中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当从BeanFactory中获取Bean时，会从BeanDefinitionRegistry中拿出需要创建的Bean对应的BeanDefinition，根据BeanDefinition的信息来生成Bean&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当生成的Bean是单例的时候，Spring会将Bean保存到SingletonBeanRegistry中，也就是平时说的三级缓存中的第一级缓存中，以免重复创建，需要使用的时候直接从SingletonBeanRegistry中查找&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3、BeanFactory核心实现&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到的BeanFactory体系都是一个接口，那么BeanFactory的实现类是哪个类呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanFactory真正底层的实现类，其实就只有一个，那就是DefaultListableBeanFactory这个类，这个类以及父类真正实现了BeanFactory及其子接口的所有的功能。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40925925925925927&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W0bRI5gV0GgTd5BVP92Cpme6BPUZMLOdzeCPqjFX9nCp7m0VmENFFNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且接口的实现上可以看出，他也实现了BeanDefinitionRegistry，也就是说，在底层的实现上，其实BeanFactory跟BeanDefinitionRegistry的实现是同一个实现类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面说了这么多，来个demo&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BeanFactoryDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//创建一个BeanFactory&lt;/span&gt;&lt;br/&gt;        DefaultListableBeanFactory beanFactory = &lt;span&gt;new&lt;/span&gt; DefaultListableBeanFactory();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//创建一个BeanDefinitionReader，构造参数是一个BeanDefinitionRegistry&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//因为DefaultListableBeanFactory实现了BeanDefinitionRegistry，所以直接把beanFactory当做构造参数传过去&lt;/span&gt;&lt;br/&gt;        AnnotatedBeanDefinitionReader beanDefinitionReader = &lt;span&gt;new&lt;/span&gt; AnnotatedBeanDefinitionReader(beanFactory);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//读取当前类 BeanFactoryDemo 为一个Bean，让Spring帮我们生成这个Bean&lt;/span&gt;&lt;br/&gt;        beanDefinitionReader.register(BeanFactoryDemo&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//从容器中获取注册的BeanFactoryDemo的Bean&lt;/span&gt;&lt;br/&gt;        BeanFactoryDemo beanFactoryDemo = beanFactory.getBean(BeanFactoryDemo&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;beanFactoryDemo = &quot;&lt;/span&gt; + beanFactoryDemo);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单说一下上面代码的意思&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;创建一个BeanFactory，就是DefaultListableBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建一个AnnotatedBeanDefinitionReader，构造参数是一个BeanDefinitionRegistry，因为BeanDefinitionReader需要把读出来的BeanDefinition存到BeanDefinitionRegistry中，同时因为DefaultListableBeanFactory实现了BeanDefinitionRegistry，所以直接把beanFactory当做构造参数传过去&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;读取当前类 BeanFactoryDemo 为一个Bean，让Spring帮我们生成这个Bean&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后面就是获取打印&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23703703703703705&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WlPaJtQBmoHTPkEnGg3ZJrhbemibAzpNoyrWrrNntDbQ5LHknQhHcPuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成功获取到我们注册的Bean&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;总结&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本节主要讲了实现IOC的几个核心的组件&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanFactory及其接口体系：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;ListableBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HierarchicalBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConfigurableBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AutowireCapableBeanFactory&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanDefinition及其相关组件：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;BeanDefinition&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BeanDefinitionReader和ClassPathBeanDefinitionScanner：读取资源，生成BeanDefinition&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BeanDefinitionRegistry：存储BeanDefinition&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BeanFactory核心实现：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;DefaultListableBeanFactory：IOC容器，同时实现了BeanDefinitionRegistry接口&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ApplicationContext&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;终于讲到了ApplicationContext，因为前面说的那么多其实就是为ApplicationContext做铺垫的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看看ApplicationContext的接口&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3296296296296296&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WIuL8RwPXU7L5iavT83RTibkplSVNkujeWcEU5wc64qkjWFP6DWMtEbibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你会惊讶地发现，ApplicationContext继承的几个接口，除了EnvironmentCapable和ApplicationEventPublisher之外，其余都是前面说的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EnvironmentCapable这个接口比较简单，提供了获取Environment的功能&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2W86sYoFTVyaq3OnKdeNQfHYSNIaLfe7NM4tm6SaDbuibT9Y4GWbGBuGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;850&quot;/&gt;&lt;figcaption&gt;EnvironmentCapable&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明了可以从ApplicationContext中获取到Environment，所以EnvironmentCapable也算是前面说过了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于ApplicationEventPublisher我们留到下一节说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ApplicationContext也继承了ListableBeanFactory和HierarchicalBeanFactory，也就说明ApplicationContext其实他也是一个BeanFactory，所以说ApplicationContext是IOC容器的说法也没什么毛病，但是由于他还继承了其它接口，功能比BeanFactory多多了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;所以，ApplicationContext是一个集万千功能为一身的接口，一旦你获取到了ApplicationContext（可以@Autowired注入），你就可以用来获取Bean、加载资源、获取环境，还可以国际化一下，属实是个王炸。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然ApplicationContext继承了这些接口，但是ApplicationContext对于接口的实现是通过一种委派的方式，而真正的实现都是我们前面说的那些实现&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么叫委派呢，咱写一个例子你就知道了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyApplicationContext&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationContext&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ResourcePatternResolver resourcePatternResolver = &lt;span&gt;new&lt;/span&gt; PathMatchingResourcePatternResolver();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; Resource[] getResources(String locationPattern) &lt;span&gt;throws&lt;/span&gt; IOException {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; resourcePatternResolver.getResources(locationPattern);&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上，其实是一段伪代码&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为ApplicationContext继承了ResourcePatternResolver接口，所以我实现了getResources方法，但是真正的实现其实是交给变量中的PathMatchingResourcePatternResolver来实现的，这其实就是委派，不直接实现，而是交给其它真正实现了这个接口的类来处理&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同理，ApplicationContext对于BeanFactory接口的实现其实最终也是交由DefaultListableBeanFactory来委派处理的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;委派这种方式在Spring内部还是用的非常多的，前面提到的某些接口在的实现上也是通过委派的方式来的&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ApplicationContext有一个子接口，ConfigurableApplicationContext&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WozewictHPvFEibv9M9ficqib0ylF3eic7cebcvtmVm6hfpQlD7rkMVMakBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从提供的方法看出，就是可以对ApplicationContext进行配置，比如设置Environment，同时也能设置parent，说明了ApplicationContext也有子父的概念&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我们已经看到了很多以Configurable开头的接口，这就是命名习惯，表示了可配置的意思，提供的都是set、add之类的方法&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ApplicationContext的实现很多，但是他有一个非常重要的抽象实现AbstractApplicationContext，因为其它的实现都是继承这个抽象实现&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46574074074074073&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WLDpdyJfxHae4gIbzkK1TibODYRjMBTYgEN380gPJfic6ibkeexgZCDJJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;AbstractApplicationContext&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个类主要是实现了一些继承的接口方法，通过委派的方式，比如对于BeanFactory接口的实现&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5370370370370371&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WHOVSxTibSWxYBdbsW7vfCTpeia4hgt87pWAg7A5P8uAnF2IxEcg9qwRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且AbstractApplicationContext这个类也实现了一个非常核心的refresh方法&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5231481481481481&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WjAtn4gqRKu9u9q9ogMbg63EgCTydA2e5QiaCK3DwNacUQDkTkBtzSMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有的ApplicationContext在创建之后必须调用这个refresh方法之后才能使用，至于这个方法干了哪些事，后面有机会再写一篇文章来着重扒一扒。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;事件&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一小节在说ApplicationContext继承的接口的时候，我们留下了一个悬念，那就是ApplicationEventPublisher的作用，而ApplicationEventPublisher就跟本节要说的事件有关。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring事件是一种观察者模式的实现，他的作用主要是用来解耦合的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当发生了某件事，只要发布一个事件，对这个事件的监听者（观察者）就可以对事件进行响应或者处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子来说，假设发生了火灾，可能需要打119、救人，那么就可以基于事件的模型来实现，只需要打119、救人监听火灾的发生就行了，当发生了火灾，通知这些打119、救人去触发相应的逻辑操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5166163141993958&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WrTBj4bLNswj2WeDianOhtcLicibDClsCuvWZCRTMLxWRQAzsRaM4rzNhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;331&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1、什么是Spring Event 事件&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring Event 事件就是Spring实现了这种事件模型，你只需要基于Spring提供的API进行扩展，就可以轻易地完成事件的发布与订阅&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring事件相关api主要有以下几个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;ApplicationEvent&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ApplicationListener&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ApplicationEventPublisher&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;ApplicationEvent&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8555555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WcqAZKiaNyPbfLlDgR10o7wfVgcIBxZ8kFt1px3zbeQCbz0te7zOW9kA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ApplicationEvent&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事件的父类，所有具体的事件都得继承这个类，构造方法的参数是这个事件携带的参数，监听器就可以通过这个参数来进行一些业务操作。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;ApplicationListener&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2611111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WiafOGgqJdwKSFQQROaWOicrIIGgKBrclpgYx2NFPNrdglIyFxOJYs4jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ApplicationListener&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事件监听的接口，泛型是需要监听的事件类型，子类需要实现onApplicationEvent，参数就是监听的事件类型，onApplicationEvent方法的实现就代表了对事件的处理，当事件发生时，Spring会回调onApplicationEvent方法的实现，传入发布的事件。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;ApplicationEventPublisher&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8064814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WVmibiamDx6Toka8bte7Jmf9dtNs4b7ZicKFswv1RSDLc0CRNM8L9DAPJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;ApplicationEventPublisher&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一小节留下来的接口，事件发布器，通过publishEvent方法就可以发布一个事件，然后就可以触发监听这个事件的监听器的回调。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ApplicationContext继承了ApplicationEventPublisher，说明只要有ApplicationContext就可以来发布事件了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;话不多说，上代码&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就以上面的火灾为例&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;创建一个火灾事件类&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;火灾事件类继承ApplicationEvent&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 火灾事件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;FireEvent&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;ApplicationEvent&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;FireEvent&lt;/span&gt;&lt;span&gt;(String source)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;(source);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;创建火灾事件的监听器&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打119的火灾事件的监听器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Call119FireEventListener&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationListener&lt;/span&gt;&amp;lt;&lt;span&gt;FireEvent&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onApplicationEvent&lt;/span&gt;&lt;span&gt;(FireEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;打119&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;救人的火灾事件的监听器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SavePersonFireEventListener&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationListener&lt;/span&gt;&amp;lt;&lt;span&gt;FireEvent&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onApplicationEvent&lt;/span&gt;&lt;span&gt;(FireEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;救人&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事件和对应的监听都有了，接下来进行测试：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Application&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//创建一个Spring容器&lt;/span&gt;&lt;br/&gt;        AnnotationConfigApplicationContext applicationContext = &lt;span&gt;new&lt;/span&gt; AnnotationConfigApplicationContext();&lt;br/&gt;        &lt;span&gt;//将 事件监听器 注册到容器中&lt;/span&gt;&lt;br/&gt;        applicationContext.register(Call119FireEventListener&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        applicationContext.register(SavePersonFireEventListener&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        applicationContext.refresh();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 发布着火的事件，触发监听&lt;/span&gt;&lt;br/&gt;        applicationContext.publishEvent(&lt;span&gt;new&lt;/span&gt; FireEvent(&lt;span&gt;&quot;着火了&quot;&lt;/span&gt;));&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将两个事件注册到Spring容器中，然后发布FireEvent事件&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;打&lt;span&gt;119&lt;/span&gt;&lt;br/&gt;救人&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;控制台打印出了结果，触发了监听。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果现在需要对火灾进行救火，那么只需要去监听FireEvent，实现救火的逻辑，注入到Spring容器中，就可以了，其余的代码根本不用动。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2、Spring内置的事件&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring内置的事件很多，这里我罗列几个&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;事件类型&lt;/th&gt;&lt;th&gt;触发时机&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ContextRefreshedEvent&lt;/td&gt;&lt;td&gt;在调用ConfigurableApplicationContext 接口中的refresh()方法时触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ContextStartedEvent&lt;/td&gt;&lt;td&gt;在调用ConfigurableApplicationContext的start()方法时触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ContextStoppedEvent&lt;/td&gt;&lt;td&gt;在调用ConfigurableApplicationContext的stop()方法时触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ContextClosedEvent&lt;/td&gt;&lt;td&gt;当ApplicationContext被关闭时触发该事件，也就是调用close()方法触发&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在ApplicationContext(Spring容器)启动的过程中，Spring会发布这些事件，如果你需要这Spring容器启动的某个时刻进行什么操作，只需要监听对应的事件即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3、Spring事件的传播特性&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring事件的传播是什么意思呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到，ApplicationContext有子父容器的概念，而Spring事件的传播就是指当通过子容器发布一个事件之后，不仅可以触发在这个子容器的事件监听器，还可以触发在父容器的这个事件的监听器。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;上代码&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;EventPropagateApplication&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 创建一个父容器&lt;/span&gt;&lt;br/&gt;        AnnotationConfigApplicationContext parentApplicationContext = &lt;span&gt;new&lt;/span&gt; AnnotationConfigApplicationContext();&lt;br/&gt;        &lt;span&gt;//将 打119监听器 注册到父容器中&lt;/span&gt;&lt;br/&gt;        parentApplicationContext.register(Call119FireEventListener&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        parentApplicationContext.refresh();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 创建一个子容器&lt;/span&gt;&lt;br/&gt;        AnnotationConfigApplicationContext childApplicationContext = &lt;span&gt;new&lt;/span&gt; AnnotationConfigApplicationContext();&lt;br/&gt;        &lt;span&gt;//将 救人监听器 注册到子容器中&lt;/span&gt;&lt;br/&gt;        childApplicationContext.register(SavePersonFireEventListener&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        childApplicationContext.refresh();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 设置一下父容器&lt;/span&gt;&lt;br/&gt;        childApplicationContext.setParent(parentApplicationContext);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 通过子容器发布着火的事件，触发监听&lt;/span&gt;&lt;br/&gt;        childApplicationContext.publishEvent(&lt;span&gt;new&lt;/span&gt; FireEvent(&lt;span&gt;&quot;着火了&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建了两个容器，父容器注册了打119的监听器，子容器注册了救人的监听器，然后将子父容器通过setParent关联起来，最后通过子容器，发布了着火的事件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;救人&lt;br/&gt;打&lt;span&gt;119&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从打印的日志，的确可以看出，虽然是子容器发布了着火的事件，但是父容器的监听器也成功监听了着火事件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这种传播特性，从源码中也可以看出来&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45555555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WJfQ020G5ZuE9jSmOOeHiaVdL5fdibq2oaIxmClcuxdFGrukRiciafqgeYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;事件传播源码&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果父容器不为空，就会通过父容器再发布一次事件。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;传播特性的一个小坑&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说过，在Spring容器启动的过程，会发布很多事件，如果你需要有相应的扩展，可以监听这些事件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，不知道你有没有遇到过这么一个坑，就是在SpringCloud环境下，你监听这些&lt;strong&gt;Spring事件&lt;/strong&gt;的监听器会执行很多次，这其实就是跟传播特性有关。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在SpringCloud环境下，为了使像FeignClient和RibbonClient这些不同服务的配置相互隔离，会为每个FeignClient或者是RibbonClient创建一个Spring容器，而这些容器都有一个公共的父容器，那就是SpringBoot项目启动时创建的容器&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4318181818181818&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2Wj5KXyiapjb8DrCFyT6fD66Wceb0GpG0XKUUdtZoxc7hPVUxPus7K2Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;352&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设你监听了容器刷新的ContextRefreshedEvent事件，那么你自己写的监听器就在SpringBoot项目启动时创建的容器中&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个服务的配置容器他也是Spring容器，启动时也会发布ContextRefreshedEvent，那么由于传播特性的关系，你的事件监听器就会触发执行多次&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4586894586894587&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/B279WL06QYwXUTuic8sM3leVShk4foK2WbW3204B1rl7qnedslZXxBwSQTekqLeFJ3mPPZrFvrtaGYKjib9ib4DWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;351&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何解决这个坑呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可以进行判断这些监听器有没有执行过，比如加一个判断的标志；或者是监听类似的事件，比如ApplicationStartedEvent事件，这种事件是在SpringBoot启动中发布的事件，而子容器不是SpringBoot，所以不会多次发这种事件，也就会只执行一次。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这到这整篇文章终于写完了，这里再来简单地回顾一下本文说的几个核心功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;资源管理：对资源进行统一的封装，方便资源读取和管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;环境：对容器或者是项目的配置进行管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;类型转换：将一种类型转换成另一种类型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据绑定：将数据跟对象的属性进行绑定，绑定之前涉及到类型转换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;泛型处理：一个操作泛型的工具类，Spring中到处可见&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;国际化：对Java的国际化进行了统一的封装&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BeanFactory：IOC容器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ApplicationContext：一个集万千功能于一身的王炸接口，也可以说是IOC容器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事件：Spring提供的基于观察者模式实现的解耦合利器&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然除了上面，Spring还有很多其它核心功能，就比如AOP、SpEL表达式等等，由于AOP涉及到Bean生命周期，本篇文章也没有涉及到Bean生命周期的讲解，所以这里就不讲了，后面有机会再讲；至于SpEL他是Spring提供的表达式语言，主要是语法，解析语法的一些东西，这里也不讲了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我怕你文章看得过于入迷，所以再来重复一遍，如果本篇文章对你有所帮助，还请多多点赞、转发、在看，非常感谢！！&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哦，真差点就忘了，本文所有demo代码都在这了&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;h6&gt;https://github.com/sanyou3/spring-core-basic.git&lt;/h6&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[1].《极客时间--小马哥讲Spring核心编程思想》&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[2].https://blog.csdn.net/zzuhkp/article/details/119455964 &lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[3].https://blog.csdn.net/zzuhkp/article/details/119455948&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[4].https://blog.csdn.net/u010086122/article/details/81566515&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;···&lt;/span&gt;&lt;span&gt;···········  END  ·············&lt;/span&gt;&lt;span&gt;·&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMTgzOTQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicbnQMY3O39lQic6aWFibIibG3nSvCe4npSAicia5P7DfBRFKzZWftbw6Cw9ez7iagtVvBeK0WeN8ibEWyWHw/0?wx_fmt=png&quot; data-nickname=&quot;码农参上&quot; data-alias=&quot;CODER_SANJYOU&quot; data-signature=&quot;专注后端技术分享，有趣、深入、直接，与你聊聊技术。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9f7c035362f208ffe8b361e3f3a43e52</guid>
<title>KCL 社区开源双周报 | KCL 0.5.1 和 0.5.2 版本正式发布</title>
<link>https://toutiao.io/k/4wph5qm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content&amp;#10;                       autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.37184115523465705&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/pQIKoiaRd0nOSHDRMksw8fMMrBPNV3oDgz3Zv9KkR0l2ZEXhUibTxBnmMt6MSzR6KQWLAv82dibn3lQUlbN0f4aGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;section data-style=&quot;outline: 0px; font-size: 16px; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); visibility: visible; font-family: system-ui, -apple-system, Arial, sans-serif;&quot; class=&quot;js_darkmode__8&quot;&gt;&lt;section data-style=&quot;outline: 0px; text-align: center; clear: both; min-height: 1em; text-wrap: wrap; color: rgb(62, 62, 62); letter-spacing: 1.5px; font-size: 15px; word-break: break-all; visibility: visible; line-height: 2;&quot; class=&quot;js_darkmode__9&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;双周同步开源进展&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;欢迎加入 KCL 社区进行互动～&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;KCL 是一个开源的基于约束的记录及函数语言并通过成熟的编程语言技术和实践来改进对大量繁杂配置比如云原生 Kubernetes 配置场景的编写，致力于构建围绕配置的更好的模块化、扩展性和稳定性，更简单的逻辑编写，以及更简单的自动化和生态工具集成。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;本栏目将会双周更新 KCL 语言社区最新动态，包括功能、官网更新和最新的社区动态等，帮助大家更好地了解 KCL 社区！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;KCL 官网：https://kcl-lang.io&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;｜内容概述｜&lt;/strong&gt;&lt;em&gt;&lt;strong/&gt;&lt;/em&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;过去两周 (2023 07.26 - 08.09)，KCL 所有项目中总计有 &lt;strong&gt;34&lt;/strong&gt; 个 PR 被合并，感谢所有贡献者的杰出工作，以下是重点合并内容概述&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;🔧 语言及工具链更新&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;KCL Doc 文档工具新增 Markdown 文档导出支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;KCL Import 导入工具更新 - 支持 JsonSchema 转换为 KCL Schema&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;KCL 包管理工具 KPM 支持在 kcl.mod 中设置编译参数，优化命令行提示信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;KCL IDE 插件优化补全、跳转和悬停文档显示等功能，并支持 NeoVim 编辑器&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;🏄 API 更新&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;KCL Schema 模型解析 GetSchemaType API 新增装饰器信息和包信息字段&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;🏠 社区扩展更新&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;📰 官网和用例更新&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;KCL 官网新增 v0.5.x 文档版本选择&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;新增 KCL 用例仓库: &lt;span&gt;&lt;em&gt;https://github.com/kcl-lang/examples&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;｜特别鸣谢｜&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;感谢 @jakezhu9 对 KCL Import 工具 JsonSchema 转换的贡献 🙌&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;感谢 @xxmao123 对 Vim 和 NeoVim KCL 插件的贡献 🙌&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;感谢 @yyxhero 在 Helmfile KCL 插件支持中提供的帮助与支持 🙌&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;感谢 @nkabir, @mihaigalos, @prahaladramji, @dhhopen 等在使用 KCL 过程中提出的宝贵建议和讨论  🙌&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__179&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__179&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;｜精选更新｜&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;KCL Import 工具更新&lt;/h2&gt;&lt;p&gt;KCL Import 工具在 Protobuf, OpenAPI 模型和 Go 结构体转换为 KCL Schema 的基础上，新增 JsonSchema 到 KCL Schema 的转换支持，比如对于如下的 JsonSchema&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{&lt;br/&gt; &lt;span&gt;&quot;$schema&quot;&lt;/span&gt;: &lt;span&gt;&quot;http://json-schema.org/draft-07/schema#&quot;&lt;/span&gt;,&lt;br/&gt; &lt;span&gt;&quot;$id&quot;&lt;/span&gt;: &lt;span&gt;&quot;https://example.com/schemas/customer.json&quot;&lt;/span&gt;,&lt;br/&gt; &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;object&quot;&lt;/span&gt;,&lt;br/&gt; &lt;span&gt;&quot;$defs&quot;&lt;/span&gt;: {&lt;br/&gt;  &lt;span&gt;&quot;address&quot;&lt;/span&gt;: {&lt;br/&gt;   &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;object&quot;&lt;/span&gt;,&lt;br/&gt;   &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;city&quot;&lt;/span&gt;: {&lt;br/&gt;     &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;string&quot;&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    &lt;span&gt;&quot;state&quot;&lt;/span&gt;: {&lt;br/&gt;     &lt;span&gt;&quot;$ref&quot;&lt;/span&gt;: &lt;span&gt;&quot;#/$defs/state&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;   }&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;state&quot;&lt;/span&gt;: {&lt;br/&gt;   &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;object&quot;&lt;/span&gt;,&lt;br/&gt;   &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: {&lt;br/&gt;     &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;string&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; },&lt;br/&gt; &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;  &lt;span&gt;&quot;name&quot;&lt;/span&gt;: {&lt;br/&gt;   &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;string&quot;&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;address&quot;&lt;/span&gt;: {&lt;br/&gt;   &lt;span&gt;&quot;$ref&quot;&lt;/span&gt;: &lt;span&gt;&quot;#/$defs/address&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过 KCL Import 工具可以输出为如下 KCL 代码&lt;/p&gt;&lt;pre&gt;&lt;code&gt;schema Customer:&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;&lt;br/&gt;    Customer&lt;br/&gt;&lt;br/&gt;    Attributes&lt;br/&gt;    ----------&lt;br/&gt;    name: str, optional&lt;br/&gt;    address: Address, optional&lt;br/&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    name?: str&lt;br/&gt;    address?: Address&lt;br/&gt;&lt;br/&gt;schema Address:&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;&lt;br/&gt;    Address&lt;br/&gt;&lt;br/&gt;    Attributes&lt;br/&gt;    ----------&lt;br/&gt;    city: str, optional&lt;br/&gt;    state: State, optional&lt;br/&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    city?: str&lt;br/&gt;    state?: State&lt;br/&gt;&lt;br/&gt;schema State:&lt;br/&gt;    &lt;span&gt;&quot;&quot;&quot;&lt;br/&gt;    State&lt;br/&gt;&lt;br/&gt;    Attributes&lt;br/&gt;    ----------&lt;br/&gt;    name: str, optional&lt;br/&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    name?: str&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Helmfile KCL 插件&lt;/h2&gt;&lt;p&gt;Helmfile 是用于部署 Helm Chart 的声明性规范和工具，通过 Helmfile KCL 插件您可以&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过无侵入的 Hook 方式编辑或者验证 Helm Chart 配置，将 Kubernetes 配置管理的数据部分和逻辑部分分离&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;修改资源标签/注解, 注入 Sidecar 容器配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用 KCL Schema 校验资源，定义自己的抽象模型并分享复用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;优雅地维护多环境、多租户场景配置，而不是简单地复制粘贴&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面以一个简单示例进行详细说明，使用 Helmfile KCL 插件无需您安装与 KCL 任何相关的组件，只需本机具备 Helmfile 工具的最新版本即可。&lt;/p&gt;&lt;p&gt;我们可以编写一个如下所示 &lt;code&gt;helmfile.yaml&lt;/code&gt; 文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;repositories:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;prometheus-community&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;url:&lt;/span&gt; &lt;span&gt;https://prometheus-community.github.io/helm-charts&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;releases:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;prom-norbac-ubuntu&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;namespace:&lt;/span&gt; &lt;span&gt;prometheus&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;chart:&lt;/span&gt; &lt;span&gt;prometheus-community/prometheus&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;set:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;rbac.create&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;value:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;transformers:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# Use KCL Plugin to mutate or validate Kubernetes manifests.&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;krm.kcl.dev/v1alpha1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;KCLRun&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;&quot;set-annotation&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;annotations:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;config.kubernetes.io/function:&lt;/span&gt; &lt;span&gt;|&lt;br/&gt;          container:&lt;br/&gt;            image: docker.io/kcllang/kustomize-kcl:v0.2.0&lt;br/&gt;&lt;/span&gt;    &lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;source:&lt;/span&gt; &lt;span&gt;|&lt;br/&gt;        [resource | {if resource.kind == &quot;Deployment&quot;: metadata.annotations: {&quot;managed-by&quot; = &quot;helmfile-kcl&quot;}} for resource in option(&quot;resource_list&quot;).items]&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述配置中，我们引用了 Prometheus Helm Chart, 并通过一行 KCL 代码就可以完成 Prometheus 的所有的 Deployment 资源注入标签 &lt;code&gt;managed-by=&quot;helmfile-kcl&quot;&lt;/code&gt;，通过如下命令我们可以将上述配置下发到集群&lt;/p&gt;&lt;pre&gt;&lt;code&gt;helmfile apply&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更多用例请参考: &lt;span&gt;&lt;em&gt;https://github.com/kcl-lang/krm-kcl&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;其他更新内容&lt;/h2&gt;&lt;p&gt;详见&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;KCL v0.5.1 Release: https://github.com/kcl-lang/kcl/releases/tag/v0.5.1&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;KCL v0.5.2 Release: https://github.com/kcl-lang/kcl/releases/tag/v0.5.2&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;｜双周社区会议预告｜&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;主题：KusionStack + KCL 社区双周会&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;时间：2023/08/17 20:00-20:45 (GMT+08:00) &lt;/strong&gt;中国标准时间 - 北京（重复周期：2023/08/03-2024/08/29 20:00-20:45, 每双周周四）&lt;/p&gt;&lt;p&gt;点击链接入会: &lt;em&gt;&lt;span&gt;https://meeting.tencent.com/dm/Hc6sNpqTWnPb&lt;/span&gt;&lt;/em&gt;，或添加至&lt;span&gt;腾讯&lt;/span&gt;会议列表：&lt;strong&gt;&lt;span&gt;778-2381-6338&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;｜其他资源｜&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-style=&quot;margin-bottom: 0px; font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; letter-spacing: normal; text-align: left; text-wrap: wrap; background-color: rgb(255, 255, 255);&quot; class=&quot;js_darkmode__201&quot;&gt;❤️ 感谢所有 KCL 用户和社区小伙伴在社区中提出的宝贵反馈与建议。后续我们会撰写更多 KCL v0.5.x 新版本功能解读系列文章，敬请期待!&lt;/p&gt;&lt;p data-style=&quot;margin-bottom: 0px; font-size: 16px; padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; letter-spacing: normal; text-align: left; text-wrap: wrap; background-color: rgb(255, 255, 255);&quot; class=&quot;js_darkmode__202&quot;&gt;更多其他资源请参考：&lt;/p&gt;&lt;ul class=&quot;js_darkmode__203 list-paddingleft-1&quot; data-style=&quot;margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; letter-spacing: normal; text-align: left; text-wrap: wrap; background-color: rgb(255, 255, 255);&quot;&gt;&lt;li&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__204&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;KCL 网站&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;:&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt; &lt;span&gt;https://kcl-lang.io/&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__206&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;KusionStack 网站: &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://kusionstack.io/&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__206&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;KCL 2023 路线规划: https://kcl-lang.io/docs/community/release-policy/roadmap&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;KCL v0.6.0 Milestone: https://github.com/kcl-lang/kcl/milestone/6&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;KCL Github Issues: https://github.com/kcl-lang/kcl/issues&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;KCL Github Discussion: https://github.com/orgs/kcl-lang/discussions&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;KCL Community: https://github.com/kcl-lang/community&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__206&quot;&gt;&lt;span&gt;KCL v0.5.1 Release: https://github.com/kcl-lang/kcl/releases/tag/v0.5.1&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__206&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;KCL v0.5.2 Release: &lt;em&gt;&lt;span&gt;https://github.com/kcl-lang/kcl/releases/tag/v0.5.2&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__206&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__206&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;｜写在最后｜&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-style=&quot;margin-top: 5px; margin-bottom: 5px; line-height: 26px; color: rgb(1, 1, 1);&quot; class=&quot;js_darkmode__206&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;让我们感谢并向编辑器之神 Vim 之父 Bram Moolenaar 这位伟大的传奇人物致敬，一个了不起的人，永远不会遗忘。R.I.P.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;em&gt;&lt;span/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;｜往期内容回顾｜&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyMDM5Mjk2Mw==&amp;amp;mid=2247484932&amp;amp;idx=1&amp;amp;sn=2ecdbc82e3a41e8e542dc4ac357da1d6&amp;amp;chksm=c192c268f6e54b7eb1c0037764fc525ace05d67144943bd2283af8a376b530a83360f5adadfa&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;KCL v0.5.0 重磅发布 - 面向云原生场景更易用的语言、工具链，社区集成和扩展支持&quot; linktype=&quot;image&quot; imgurl=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/pQIKoiaRd0nPGlbClN5AOia5T7U1fXCx5Mia7N0sIyuJiczGGjfRM2ZcBaw4sz5qb0o8qgng2xsx8W4LBKDMF3iayXQ/0?wx_fmt=jpeg&quot; imgdata=&quot;[object Object]&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;KCL v0.5.0 重磅发布 - 面向云原生场景更易用的语言、工具链，社区集成和扩展支持&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyMDM5Mjk2Mw==&amp;amp;mid=2247484932&amp;amp;idx=1&amp;amp;sn=2ecdbc82e3a41e8e542dc4ac357da1d6&amp;amp;chksm=c192c268f6e54b7eb1c0037764fc525ace05d67144943bd2283af8a376b530a83360f5adadfa&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;使用 Github、Argo CD 和 KCL 实现 GitOps 以简化 DevOps&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;使用 Github、Argo CD 和 KCL 实现 GitOps 以简化 DevOps&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyMDM5Mjk2Mw==&amp;amp;mid=2247484843&amp;amp;idx=1&amp;amp;sn=dc93c86bf46fa978064fa20d85a37ef7&amp;amp;chksm=c192c1c7f6e548d13448aea78eb5ee5e964f6745c220af2b615ffc0c6606b807cebda7f103a8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;KPM：KCL语言的包管理器&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;KPM：KCL语言的包管理器&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyMDM5Mjk2Mw==&amp;amp;mid=2247484752&amp;amp;idx=1&amp;amp;sn=c76e6b34f576ed02473b5d470aa6e9ba&amp;amp;chksm=c192c13cf6e5482a101eab623721fdfaded768946d1b3e0d5905b02439e3cc01290c70bc11bd&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;聊聊 K8S 中的 SideCar 设计模式·第 2 篇&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;聊聊 K8S 中的 SideCar 设计模式·第 2 篇&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkyMDM5Mjk2Mw==&amp;amp;mid=2247484916&amp;amp;idx=1&amp;amp;sn=b148117a7a094a7752cbe7c670aa7b81&amp;amp;chksm=c192c198f6e5488e58b9b70b8104025ac99b102c2f40de6791256652849a78ff764643607d21&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Kusion v0.8.2 发布啦！输出结果支持结构化展示，便于与其它系统集成&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Kusion v0.8.2 发布啦！输出结果支持结构化展示，便于与其它系统集成&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;欢迎来玩~ 欢迎 star ⭐️&lt;/strong&gt;&lt;/section&gt;&lt;p data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;&lt;span data-style=&quot;color: rgba(10, 11, 11, 0.84);&quot; class=&quot;js_darkmode__113&quot;&gt;&lt;strong&gt;&lt;em data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;https://github.com/kcl-lang/kcl&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;&lt;span data-style=&quot;color: rgba(10, 11, 11, 0.84);&quot; class=&quot;js_darkmode__113&quot;&gt;&lt;strong&gt;&lt;em data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;&lt;strong&gt;&lt;em data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;https://kcl-lang.io&lt;/em&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;&lt;span data-style=&quot;color: rgba(10, 11, 11, 0.84);&quot; class=&quot;js_darkmode__113&quot;&gt;&lt;strong&gt;&lt;em data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;&lt;strong&gt;&lt;em data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;https://github.com/KusionStack/kusion&lt;/em&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16537319965037=&quot;rgba(116, 159, 238, 0.1)&quot; data-darkmode-original-bgcolor-16537319965037=&quot;#fff|rgb(255, 255, 255)|rgba(116, 159, 238, 0.1)&quot; data-darkmode-color-16537319965037=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16537319965037=&quot;#fff|rgb(34, 34, 34)|rgb(0, 128, 255)&quot;&gt;&lt;strong&gt;&lt;em&gt;https://kusionstack.io/&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pQIKoiaRd0nOfiaaQNYDuTZgS9RJ9nh5LLoluNSaUCvwyouIicATBbn1VqZKaGCpavMj18b2fYpWwDtz04Gs2xiakw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>df19f8616d107bb731e2a5fa44b5921e</guid>
<title>关于Linux 网络抓包的一些笔记整理</title>
<link>https://toutiao.io/k/1yeyvdy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;写在前面&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;遇到一个 &lt;code&gt;ping 单通&lt;/code&gt; 的情况，需要抓包分析下，所以整理这部分笔记&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;博文内容涉及：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;HTTP/TCP&lt;/code&gt; 抓包分析 Demo&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ICMP&lt;/code&gt; 抓包分析 Demo&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Nginx&lt;/code&gt; 抓包分析用户名密码 Demo&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;理解不足小伙伴帮忙指正&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt; 这世界的存在完全只是就它对一个其他事物的，一个进行 &quot;表象者&quot; 的关系来说的，这个进行 &quot;表象者&quot; 就是人自己    -----《作为意志和表象的世界》(第一篇 世界作为表象初论）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;custom_select_card mp_profile_iframe mp_common_widget&quot; data-pluginname=&quot;mp-common-profile&quot; data-from=&quot;0&quot; data-id=&quot;MzkyNjIxNTYwMw==&quot; data-alias=&quot;java__coder&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/BFyULpfKEVo1qu5c29sq6tc9MgAgeyLqJriaTHrpz3vQM1H1vFSe5JNUfSZOGheQKcicNuDA9FSNmnRiaZADors7A/0?wx_fmt=png&quot; data-nickname=&quot;山河已无恙&quot; data-signature=&quot;我徒然学会了抗拒热闹，却还来不及透悟真正的冷清。——张大春&quot; data-weuitheme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;tcpdump 简单介绍&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Linux 中常常使用 &lt;code&gt;tcpdump&lt;/code&gt; 网络抓包工具来进行抓包，排查一些网络问题,需要安装的工具包&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms82.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$rpm&lt;/span&gt; -ql tcpdump || yum -y install tcpdump&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;tcpdump 抓包命令基本用法 &lt;code&gt;tcpdump [选项] [过滤条件]&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见监控选项&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;-i&lt;/code&gt; 指定监控的&lt;code&gt;网络接口&lt;/code&gt;,指定抓取某一个网卡接口的流量；不使用&lt;code&gt;-i&lt;/code&gt; 指定网卡，&lt;code&gt;tcpdump&lt;/code&gt; 会默认抓取第一块网卡的流量；&lt;code&gt;-i any&lt;/code&gt; 监控抓取的是所有网卡的流量；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;-A&lt;/code&gt; 转换为ACSII码，以方便阅读&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;-w&lt;/code&gt; 将数据包信息保存到指定文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;-r&lt;/code&gt; 从指定文件读取数据包信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;-c&lt;/code&gt; 定义抓包个数 (默认会一直抓取下去)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;-nn&lt;/code&gt; 不解析域名&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;tcpdump的过滤条件，按Ctrl + C 键停止抓包&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;类型：&lt;code&gt;host、net、port 80、portrange 600-800&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方向：&lt;code&gt;src(从指定IP接收)、dst(发送到指定ip)&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;协议&lt;/code&gt;：tcp、udp、ip、wlan、arp、......&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;多个条件组合&lt;/code&gt;：and、or、not&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实战&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;HTTP/TCP 请求抓包分析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 python2 的  &lt;code&gt;SimpleHTTPServer&lt;/code&gt; 模块启动一个 简单的 HTTP 服务&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@vms152 ~]&lt;span&gt;# jobs&lt;/span&gt;&lt;br/&gt;[1]+  运行中               coproc COPROC python -m SimpleHTTPServer 8080 &amp;amp;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发出HTTP请求&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$curl&lt;/span&gt; 192.168.29.152:8080&lt;br/&gt;&amp;lt;!DOCTYPE html PUBLIC &lt;span&gt;&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;&lt;/span&gt;&amp;gt;&amp;lt;html&amp;gt;&lt;br/&gt;&amp;lt;title&amp;gt;Directory listing &lt;span&gt;for&lt;/span&gt; /&amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;。。。。。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抓包命令 &lt;code&gt;tcpdump -i ens32  -A -nn -w /root/web.cap  host 192.168.29.152 and port 8080&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抓取 &lt;code&gt;ens32&lt;/code&gt;网卡，主机为 &lt;code&gt;192.168.29.152&lt;/code&gt; 端口为 &lt;code&gt;8080&lt;/code&gt; 的所有出站入站的包。抓包写入 &lt;code&gt;/root/web.cap&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -i ens32  -A -nn -w /root/web.cap  host 192.168.29.152 and port 8080&lt;br/&gt;tcpdump: listening on ens32, link-type EN10MB (Ethernet), capture size 262144 bytes&lt;br/&gt;^C11 packets captured&lt;br/&gt;11 packets received by filter&lt;br/&gt;0 packets dropped by kernel&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抓取到 &lt;code&gt;host 192.168.29.152 and port 8080&lt;/code&gt; 的所有包，这里数据包包括出站和入站的所有包，没有指定协议即，即包括所有&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;tcpdump&lt;/code&gt; 的数据包文件是是乱码，Linux 下需要通过 &lt;code&gt;-r&lt;/code&gt; 命令来读取 &lt;code&gt;tcpdump -A -r /root/web.cap &lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -A -r /root/web.cap&lt;br/&gt;reading from file /root/web.cap, link-type EN10MB (Ethernet)&lt;br/&gt;03:24:14.285274 IP vms152.liruilongs.github.io.41204 &amp;gt; 192.168.29.152.webcache: Flags [S], seq 317480493, win 29200, options [mss 1460,sackOK,TS val 270896233 ecr 0,nop,wscale 7], length 0&lt;br/&gt;E..&amp;lt;.D@.@.................^-......r............&lt;br/&gt;.%.i........&lt;br/&gt;03:24:14.286103 IP 192.168.29.152.webcache &amp;gt; vms152.liruilongs.github.io.41204: Flags [S.], seq 601235906, ack 317480494, win 64240, options [mss 1460], length 0&lt;br/&gt;E..,9.....HJ............&lt;span&gt;#.!...^.`...lm........&lt;/span&gt;&lt;br/&gt;03:24:14.286137 IP vms152.liruilongs.github.io.41204 &amp;gt; 192.168.29.152.webcache: Flags [.], ack 1, win 29200, length 0&lt;br/&gt;E..(.E@.@..     ..............^.&lt;span&gt;#.!.P.r.....&lt;/span&gt;&lt;br/&gt;03:24:14.286282 IP vms152.liruilongs.github.io.41204 &amp;gt; 192.168.29.152.webcache: Flags [P.], seq 1:84, ack 1, win 29200, length 83: HTTP: GET / HTTP/1.1&lt;br/&gt;E..{.F@.@.................^.&lt;span&gt;#.!.P.r.....GET / HTTP/1.1&lt;/span&gt;&lt;br/&gt;User-Agent: curl/7.29.0&lt;br/&gt;Host: 192.168.29.152:8080&lt;br/&gt;Accept: */*&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;03:24:14.286480 IP 192.168.29.152.webcache &amp;gt; vms152.liruilongs.github.io.41204: Flags [.], ack 84, win 64240, length 0&lt;br/&gt;E..(9.....HM............&lt;span&gt;#.!...^.P.............&lt;/span&gt;&lt;br/&gt;03:24:14.287219 IP 192.168.29.152.webcache &amp;gt; vms152.liruilongs.github.io.41204: Flags [P.], seq 1:18, ack 84, win 64240, length 17: HTTP: HTTP/1.0 200 OK&lt;br/&gt;E..99.....H;............&lt;span&gt;#.!...^.P.......HTTP/1.0 200 OK&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;03:24:14.287228 IP vms152.liruilongs.github.io.41204 &amp;gt; 192.168.29.152.webcache: Flags [.], ack 18, win 29200, length 0&lt;br/&gt;E..(.G@.@.................^.&lt;span&gt;#.!.P.r.....&lt;/span&gt;&lt;br/&gt;03:24:14.287349 IP 192.168.29.152.webcache &amp;gt; vms152.liruilongs.github.io.41204: Flags [FP.], seq 18:913, ack 84, win 64240, length 895: HTTP&lt;br/&gt;E...9.....D.............&lt;span&gt;#.!...^.P...@...Server: SimpleHTTP/0.6 Python/2.7.5&lt;/span&gt;&lt;br/&gt;Date: Mon, 19 Dec 2022 19:24:14 GMT&lt;br/&gt;Content-type: text/html; charset=UTF-8&lt;br/&gt;Content-Length: 758&lt;br/&gt;&lt;br/&gt;&amp;lt;!DOCTYPE html PUBLIC &lt;span&gt;&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;&lt;/span&gt;&amp;gt;&amp;lt;html&amp;gt;&lt;br/&gt;&amp;lt;title&amp;gt;Directory listing &lt;span&gt;for&lt;/span&gt; /&amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;。。。。。。。&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&amp;lt;/html&amp;gt;&lt;br/&gt;&lt;br/&gt;03:24:14.287355 IP vms152.liruilongs.github.io.41204 &amp;gt; 192.168.29.152.webcache: Flags [.], ack 914, win 30430, length 0&lt;br/&gt;E..(.H@.@.................^.&lt;span&gt;#.%TP.v.....&lt;/span&gt;&lt;br/&gt;03:24:14.287560 IP vms152.liruilongs.github.io.41204 &amp;gt; 192.168.29.152.webcache: Flags [F.], seq 84, ack 914, win 30430, length 0&lt;br/&gt;E..(.I@.@.................^.&lt;span&gt;#.%TP.v.....&lt;/span&gt;&lt;br/&gt;03:24:14.287692 IP 192.168.29.152.webcache &amp;gt; vms152.liruilongs.github.io.41204: Flags [.], ack 85, win 64239, length 0&lt;br/&gt;E..(9.....HJ............&lt;span&gt;#.%T..^.P....F........&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面的抓包数据，可以看到一次 完整的 TCP 的握手挥手。上面的数据直接看不太方便，所以需要一些工具来分析包内数据，可以通过 &lt;code&gt;wireshark&lt;/code&gt; 分析抓取的数据包，导出文件用 &lt;code&gt;wireshark&lt;/code&gt; 打开&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22314814814814815&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BFyULpfKEVqc5S5HSnCQHbGKFQCqLKpCW6BxibQBVIqPf4t4OibuwT62tzdGAp4xYiaFMTY1JvVcTHnicJs1a5MJAg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，前三个包为一次 TCP 握手建立连接，第四个包为 建立 TCP 连接后的客户端发出 HTTP 请求(这个时候也有一次 ACK )，之后的三次为 数据传输的过程，然后是 HTTP 响应(FIN/ACK),四次挥手的，这里看到三次，是因为在 HTTP 协议返回的时候，携带了第一次挥手的报文，在抓包的时候我们没有指定tcp协议，所以看到三次。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5981481481481481&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BFyULpfKEVqc5S5HSnCQHbGKFQCqLKpCIYfzc4nT6IrkFXo0ww8l3cG0CEiaqnnBTNFdekRpzAmgsEL70q1GStw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指定协议抓包可以更清楚的看到三次握手，四次挥手&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -i ens32  -A -nn host 192.168.29.152 and port 8080 and tcp&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时可以通过抓包获取传输的数据&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5287037037037037&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BFyULpfKEVqc5S5HSnCQHbGKFQCqLKpC3ejmbufmdj3XxrMcibqsJm3e5Bw5KHg8lz8Z691YXP6U7uIaghxNJUw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;ICMP(ping) 请求抓包分析&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的时候，网络不通，可以通过 抓包的方式来确认是出站的问题，还是入站的问题&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 &lt;code&gt;192.168.29.152 &lt;/code&gt; 机器 去 &lt;code&gt;ping&lt;/code&gt; 机器 &lt;code&gt; 192.168.26.152&lt;/code&gt; ，网络不通，一直超时，说明包进去了，但是没有回来&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@vms152 ~]&lt;span&gt;# ip a | grep gl&lt;/span&gt;&lt;br/&gt;    inet 192.168.29.152/24 brd 192.168.29.255 scope global ens32&lt;br/&gt;[root@vms152 ~]&lt;span&gt;# ping -i 0.01 -c 3 192.168.26.152&lt;/span&gt;&lt;br/&gt;PING 192.168.26.152 (192.168.26.152) 56(84) bytes of data.&lt;br/&gt;&lt;br/&gt;--- 192.168.26.152 ping statistics ---&lt;br/&gt;3 packets transmitted, 0 received, 100% packet loss, time 70ms&lt;br/&gt;&lt;br/&gt;[root@vms152 ~]&lt;span&gt;#&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是通过 &lt;code&gt; 192.168.26.152&lt;/code&gt; 去 &lt;code&gt;ping&lt;/code&gt; 机器 &lt;code&gt;192.168.29.152&lt;/code&gt; 确是通的，想确认是那里问题&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$ip&lt;/span&gt; a | grep gl&lt;br/&gt;    inet 192.168.26.152/24 brd 192.168.26.255 scope global ens32&lt;br/&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$ping&lt;/span&gt; -i 0.01 -c 3 192.168.29.152&lt;br/&gt;PING 192.168.29.152 (192.168.29.152) 56(84) bytes of data.&lt;br/&gt;64 bytes from 192.168.29.152: icmp_seq=1 ttl=128 time=0.907 ms&lt;br/&gt;64 bytes from 192.168.29.152: icmp_seq=2 ttl=128 time=1.03 ms&lt;br/&gt;64 bytes from 192.168.29.152: icmp_seq=3 ttl=128 time=0.991 ms&lt;br/&gt;&lt;br/&gt;--- 192.168.29.152 ping statistics ---&lt;br/&gt;3 packets transmitted, 3 received, 0% packet loss, time 20ms&lt;br/&gt;rtt min/avg/max/mdev = 0.907/0.977/1.033/0.052 ms&lt;br/&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─$&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;29.152&lt;/code&gt; 和 &lt;code&gt;26.152&lt;/code&gt; 不同网段通信，需要路由实现，当前我们通过 Linux 的软路由功能实现,下面为软路由的机器，为了方便，这里称为代理机器或者网关机器。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$ip&lt;/span&gt; a | grep gl&lt;br/&gt;    inet 192.168.29.154/24 brd 192.168.29.255 scope global ens32&lt;br/&gt;    inet 192.168.26.154/24 brd 192.168.26.255 scope global ens33&lt;br/&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─$&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;26.152&lt;/code&gt; 对 &lt;code&gt;29.152 &lt;/code&gt; 进行抓包&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -i ens32  -A -nn  host 192.168.29.152 and icmp&lt;br/&gt;tcpdump: verbose output suppressed, use -v or -vv &lt;span&gt;for&lt;/span&gt; full protocol decode&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时在 &lt;code&gt;29.152&lt;/code&gt; 发起对 &lt;code&gt;26.152&lt;/code&gt; 的 &lt;code&gt;ping&lt;/code&gt; 请求&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@vms152 ~]&lt;span&gt;# ping -i 0.01 -c 3 192.168.26.152&lt;/span&gt;&lt;br/&gt;PING 192.168.26.152 (192.168.26.152) 56(84) bytes of data.&lt;br/&gt;&lt;br/&gt;--- 192.168.26.152 ping statistics ---&lt;br/&gt;3 packets transmitted, 0 received, 100% packet loss, time 37ms&lt;br/&gt;&lt;br/&gt;[root@vms152 ~]&lt;span&gt;#&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，可以收到&lt;code&gt;29.152&lt;/code&gt;的 ping 的请求 &lt;code&gt;ICMP echo request&lt;/code&gt;，并且做出了响应 &lt;code&gt;ICMP echo reply&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -i ens32  -A -nn  host 192.168.29.152 and icmp&lt;br/&gt;tcpdump: verbose output suppressed, use -v or -vv &lt;span&gt;for&lt;/span&gt; full protocol decode&lt;br/&gt;listening on ens32, link-type EN10MB (Ethernet), capture size 262144 bytes&lt;br/&gt;04:35:24.595447 IP 192.168.29.152 &amp;gt; 192.168.26.152: ICMP &lt;span&gt;echo&lt;/span&gt; request, id 13245, seq 1, length 64&lt;br/&gt;E..TL.@.?.5...........~.3......c.....$...................... !&lt;span&gt;&quot;#$%&amp;amp;&#x27;()*+,-./01234567&lt;br/&gt;04:35:24.595485 IP 192.168.26.152 &amp;gt; 192.168.29.152: ICMP echo reply, id 13245, seq 1, length 64&lt;br/&gt;E..T2...@...............3......c.....$...................... !&quot;&lt;/span&gt;&lt;span&gt;#$%&amp;amp;&#x27;()*+,-./01234567&lt;/span&gt;&lt;br/&gt;04:35:24.607313 IP 192.168.29.152 &amp;gt; 192.168.26.152: ICMP &lt;span&gt;echo&lt;/span&gt; request, id 13245, seq 2, length 64&lt;br/&gt;E..TL.@.?.5.............3......c.....R...................... !&lt;span&gt;&quot;#$%&amp;amp;&#x27;()*+,-./01234567&lt;br/&gt;04:35:24.607344 IP 192.168.26.152 &amp;gt; 192.168.29.152: ICMP echo reply, id 13245, seq 2, length 64&lt;br/&gt;E..T2...@...............3......c.....R...................... !&quot;&lt;/span&gt;&lt;span&gt;#$%&amp;amp;&#x27;()*+,-./01234567&lt;/span&gt;&lt;br/&gt;04:35:24.635735 IP 192.168.29.152 &amp;gt; 192.168.26.152: ICMP &lt;span&gt;echo&lt;/span&gt; request, id 13245, seq 3, length 64&lt;br/&gt;E..TL.@.?.5o............3......c....~....................... !&lt;span&gt;&quot;#$%&amp;amp;&#x27;()*+,-./01234567&lt;br/&gt;04:35:24.635783 IP 192.168.26.152 &amp;gt; 192.168.29.152: ICMP echo reply, id 13245, seq 3, length 64&lt;br/&gt;E..T2&amp;amp;..@...............3......c....~....................... !&quot;&lt;/span&gt;&lt;span&gt;#$%&amp;amp;&#x27;()*+,-./01234567&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明问题不在这里，是其他机器的问题, 可能出现在软路由的机器上面,这次在 软路由的机器上面 抓包分析&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -i ens32  -A -nn  host 192.168.29.152 and icmp&lt;br/&gt;tcpdump: verbose output suppressed, use -v or -vv &lt;span&gt;for&lt;/span&gt; full protocol decode&lt;br/&gt;listening on ens32, link-type EN10MB (Ethernet), capture size 262144 bytes&lt;br/&gt;04:42:23.905630 IP 192.168.29.152 &amp;gt; 192.168.26.152: ICMP &lt;span&gt;echo&lt;/span&gt; request, id 13246, seq 1, length 64&lt;br/&gt;E..TY.@.@.(............P3......c....&lt;span&gt;#....................... !&quot;#$%&amp;amp;&#x27;()*+,-./01234567&lt;/span&gt;&lt;br/&gt;04:42:23.925388 IP 192.168.29.152 &amp;gt; 192.168.26.152: ICMP &lt;span&gt;echo&lt;/span&gt; request, id 13246, seq 2, length 64&lt;br/&gt;E..TY&lt;span&gt;#@.@.(.............3......c.....9...................... !&quot;#$%&amp;amp;&#x27;()*+,-./01234567&lt;/span&gt;&lt;br/&gt;04:42:23.950773 IP 192.168.29.152 &amp;gt; 192.168.26.152: ICMP &lt;span&gt;echo&lt;/span&gt; request, id 13246, seq 3, length 64&lt;br/&gt;E..TY&amp;amp;@.@.(...........;.3......c....s....................... !&lt;span&gt;&quot;#$%&amp;amp;&#x27;()*+,-./01234567&lt;br/&gt;^C&lt;br/&gt;3 packets captured&lt;br/&gt;3 packets received by filter&lt;br/&gt;0 packets dropped by kernel&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，在&lt;code&gt;ens32&lt;/code&gt; 网卡，只有 ping 请求的包 出现 &lt;code&gt;ICMP echo request&lt;/code&gt; ,没有响应的包出现。即问题出现在这里，&lt;code&gt;29.152&lt;/code&gt; ping 发送的包,确实到了 &lt;code&gt;26.152&lt;/code&gt;，并且确实从 &lt;code&gt;26.152&lt;/code&gt;返回了包，但是返回之后找不到回家的路，不知道对应的IP在那里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同网段互通需要路由器，这里 &lt;code&gt;26.152&lt;/code&gt; 的网关配置为 &lt;code&gt;26.2&lt;/code&gt; ,但是 &lt;code&gt;26.2&lt;/code&gt; 不是作为路由器的机器，所以没有跨网段的能力，也没有对应的路由控制表，所以 &lt;code&gt;26.152&lt;/code&gt; 的网关需要配置为 &lt;code&gt;26.154&lt;/code&gt; 。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@vms152 ~]&lt;span&gt;# ping -i 0.01 -c 4 192.168.26.152&lt;/span&gt;&lt;br/&gt;PING 192.168.26.152 (192.168.26.152) 56(84) bytes of data.&lt;br/&gt;64 bytes from 192.168.26.152: icmp_seq=1 ttl=63 time=1.13 ms&lt;br/&gt;64 bytes from 192.168.26.152: icmp_seq=2 ttl=63 time=0.875 ms&lt;br/&gt;64 bytes from 192.168.26.152: icmp_seq=3 ttl=63 time=0.854 ms&lt;br/&gt;64 bytes from 192.168.26.152: icmp_seq=4 ttl=63 time=4.00 ms&lt;br/&gt;&lt;br/&gt;--- 192.168.26.152 ping statistics ---&lt;br/&gt;4 packets transmitted, 4 received, 0% packet loss, time 31ms&lt;br/&gt;rtt min/avg/max/mdev = 0.854/1.715/4.001/1.324 ms&lt;br/&gt;[root@vms152 ~]&lt;span&gt;#&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样抓包可以确认&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -i ens32  -A -nn host 192.168.29.152 and icmp&lt;br/&gt;tcpdump: verbose output suppressed, use -v or -vv &lt;span&gt;for&lt;/span&gt; full protocol decode&lt;br/&gt;listening on ens32, link-type EN10MB (Ethernet), capture size 262144 bytes&lt;br/&gt;22:37:01.732511 IP 192.168.29.152 &amp;gt; 192.168.26.152: ICMP &lt;span&gt;echo&lt;/span&gt; request, id 13818, seq 31, length 64&lt;br/&gt;E..T..@.@.............h.5......c....e/...................... !&lt;span&gt;&quot;#$%&amp;amp;&#x27;()*+,-./01234567&lt;br/&gt;22:37:01.733040 IP 192.168.26.152 &amp;gt; 192.168.29.152: ICMP echo reply, id 13818, seq 31, length 64&lt;br/&gt;E..T;...?..x..........p.5......c....e/...................... !&quot;&lt;/span&gt;&lt;span&gt;#$%&amp;amp;&#x27;()*+,-./01234567&lt;/span&gt;&lt;br/&gt;22:37:02.917124 IP 192.168.29.152 &amp;gt; 192.168.26.152: ICMP &lt;span&gt;echo&lt;/span&gt; request, id 13818, seq 32, length 64&lt;br/&gt;E..T.V@.@...............5.. ...c............................ !&lt;span&gt;&quot;#$%&amp;amp;&#x27;()*+,-./01234567&lt;br/&gt;22:37:02.917591 IP 192.168.26.152 &amp;gt; 192.168.29.152: ICMP echo reply, id 13818, seq 32, length 64&lt;br/&gt;E..T?...?..-............5.. ...c............................ !&quot;&lt;/span&gt;&lt;span&gt;#$%&amp;amp;&#x27;()*+,-./01234567&lt;/span&gt;&lt;br/&gt;^C&lt;br/&gt;4 packets captured&lt;br/&gt;4 packets received by filter&lt;br/&gt;0 packets dropped by kernel&lt;br/&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─$&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ping 单通除了防火墙之外、网关是一个需要注意的地方。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Nginx 请求抓包分析用户名密码&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装 nginx ,配置nginx的用户认证&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms152.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$rpm&lt;/span&gt; -ql nginx || yum -y install  nginx&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;备份修改配置文件&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$cp&lt;/span&gt; /etc/nginx/nginx.conf  /etc/nginx/nginx.conf.bak&lt;br/&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$vim&lt;/span&gt; /etc/nginx/nginx.conf&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;认证需要 在配置文件 &lt;code&gt;server&lt;/code&gt; 模块下面添加对应的配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;server {&lt;br/&gt;        ...........&lt;br/&gt;        auth_basic &lt;span&gt;&quot;auth-liruilong&quot;&lt;/span&gt;;&lt;br/&gt;        auth_basic_user_file /etc/nginx/pass;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装压测工具，http-tools可以创建访问网站的用户名和密码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$yum&lt;/span&gt; -y install  httpd-tools&lt;br/&gt;......&lt;br/&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$htpasswd&lt;/span&gt; -c /etc/nginx/pass liruilong&lt;br/&gt;New password:&lt;br/&gt;Re-type new password:&lt;br/&gt;Adding password &lt;span&gt;for&lt;/span&gt; user liruilong&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动服务&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$systemctl&lt;/span&gt; start  nginx&lt;br/&gt;┌──[root@vms.154.liruilongs.github.io]-[~]&lt;br/&gt;└─&lt;span&gt;$systemctl&lt;/span&gt; is-active nginx&lt;br/&gt;active&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问抓包&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36454849498327757&quot; data-type=&quot;png&quot; data-w=&quot;897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BFyULpfKEVqc5S5HSnCQHbGKFQCqLKpCgSLlicZhndXg5dszUcaOcXEw75ZzicQhoiblz8aRu3fIgdLTxYOyy2kmQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms.154.liruilongs.github.io]-[/var/&lt;span&gt;log&lt;/span&gt;/nginx]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -i ens33 -A -w /root/web.cap host 192.168.26.1 and port 80&lt;br/&gt;tcpdump: listening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes&lt;br/&gt;&lt;br/&gt;^C67 packets captured&lt;br/&gt;68 packets received by filter&lt;br/&gt;0 packets dropped by kernel&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过抓包解析登录用户名密码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;┌──[root@vms.154.liruilongs.github.io]-[/var/&lt;span&gt;log&lt;/span&gt;/nginx]&lt;br/&gt;└─&lt;span&gt;$tcpdump&lt;/span&gt; -A -r /root/web.cap | grep Basic&lt;br/&gt;reading from file /root/web.cap, link-type EN10MB (Ethernet)&lt;br/&gt;Authorization: Basic bGlydWlsb25nOmxpcnVpbG9uZw==&lt;br/&gt;Authorization: Basic bGlydWlsb25nOmxpcnVpbG9uZw==&lt;br/&gt;Authorization: Basic bGlydWlsb25nOmxpcnVpbG9uZw==&lt;br/&gt;Authorization: Basic bGlydWlsb25nOmxpcnVpbG9uZw==&lt;br/&gt;┌──[root@vms.154.liruilongs.github.io]-[/var/&lt;span&gt;log&lt;/span&gt;/nginx]&lt;br/&gt;└─&lt;span&gt;$echo&lt;/span&gt; &lt;span&gt;&quot;bGlydWlsb25nOmxpcnVpbG9uZw==&quot;&lt;/span&gt; | base64 -d \n&lt;br/&gt;liruilong:liruilong&lt;br/&gt;┌──[root@vms.154.liruilongs.github.io]-[/var/&lt;span&gt;log&lt;/span&gt;/nginx]&lt;br/&gt;└─$&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于 &lt;code&gt;tcpdump&lt;/code&gt; 抓包 就和小伙伴分享到这里，生活加油 &lt;code&gt;^_^&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7efa1b3c40a3a7e8b39d6765c0847f7a</guid>
<title>Go1.21 那些事：泛型库、for 语义变更、统一 log/slog、WASI 等新特性，你知道多少？</title>
<link>https://toutiao.io/k/onjj80w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content&amp;#10;                       autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go1.21 在昨天晚上 11 点 30 多的时候，终于发布出来了，真的是...日常拖迭代了，一直往后挪。之前说在前面迭代实现的功能，又放到这个迭代里发布了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5046296296296297&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KVl0giak5ib4ia8vDfNoYribyPEOTtAiaZsndayn8nNFaG9CmdvMYzqnrpIk2neCZLFXfpcVia1X4UJGYsqJA4DluLZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次新版本的大部分变更都在工具链、运行时和库的实现上，继续保持了 Go1 的兼容性承诺。（甚至增强了... 😂）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要体验的同学可以按如下命令下载：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KVl0giak5ib4ia8vDfNoYribyPEOTtAiaZsndYdibiarzh9RSnmCforXCgWS37nWhTX94SeXZibognQ0qMNMviamMExcqqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于本次 Go1.21 相关特性，我又看了一遍 Release Notes。重要的更新我基本都写了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是文章汇总，欢迎吸取知识：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更多 Go1.21 Release Notes 相关资料，可以查看：&lt;code&gt;https://go.dev/doc/go1.21&lt;/code&gt;。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关注和加煎鱼微信，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一手消息和知识，拉你进技术交流群&lt;span&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9988738738738738&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4jVkzHVvaqjo3O0BIqDRJKkEyib7SJsryxHBFGsvek0FkdiczfJP6AdbWnK25DvlX3dY8wRObPbVJQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxMDI4MDc1NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4iac2xQZIq5icSiaTepuae8zLIUMiaxibbUM8ic735ewo6e89GRtjGbUBlgNYibwCjAicglQcvz6dCQ6yTKOw/0?wx_fmt=png&quot; data-nickname=&quot;脑子进煎鱼了&quot; data-alias=&quot;eddycjy&quot; data-signature=&quot;分享计算机基础、Go 语言、微服务架构和系统设计；著有图书《Go 语言编程之旅》。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07106598984771574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/486RHs1WbcgGib6o96dHbvGUGGwPicd8wusUGH1cXR29tM4bO0lNzialzkQhvU6m5ZUdaKibmcF2OQayjMe9Bia6iaXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是煎鱼，&lt;span&gt;出版过 Go 畅销书《Go 语言编程之旅》，再到获得 GOP（Go 领域最有观点专家）荣誉，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247483854&amp;amp;idx=1&amp;amp;sn=ec422fbf4d846975f2930ddeb5e81373&amp;amp;chksm=f9041493ce739d85a4b987eece14da627206cdad798f645cc770868312e4a22b6df24804f186&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的出书之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的出书之路&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;日常分享高质量文章，输出 Go 面试、工作经验、架构设计，&lt;span&gt;加微信拉读者交流群，和大家交流！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d01f3db41df0cb05d46824a375f0217a</guid>
<title>测试同学如何提升自己的职场竞争力</title>
<link>https://toutiao.io/k/rq7qqv5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;老张的求知思考世界&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;For-Think&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;专注互联网领域相关技术实践和思考，也分享职场成长、读书杂谈等内容。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>