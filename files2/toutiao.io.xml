<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f61a392a332124ec9bffc84b4ad50c3c</guid>
<title>掌握了这一招，Go版本的管理不用愁</title>
<link>https://toutiao.io/k/j2wtexh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;section&gt;&lt;span&gt;今天带来一篇关于Go版本管理器gvm的小短文。&lt;/span&gt;&lt;span&gt;废话不多说，开始安装。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;安装&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你使用的mac，mac 需要先安装xcode-select，没安装过的同学可以按照如下命令进行执行安装，这里不做太多说明了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;xcode-select --install&lt;br/&gt;brew update&lt;br/&gt;brew install mercurial&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照github上面指示，我们这里按照命令行进行下载gvm-installer进行安装，终端执行有问题的同学也可以到&lt;span&gt;gvm-installer&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;页面进行clone安装。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$bash&lt;/span&gt; &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)&lt;br/&gt;Cloning from https://github.com/moovweb/gvm.git to /Users/admin/.gvm&lt;br/&gt;Created profile &lt;span&gt;for&lt;/span&gt; existing install of Go at &lt;span&gt;&quot;/opt/homebrew/Cellar/go/1.18.1/libexec&quot;&lt;/span&gt;&lt;br/&gt;Installed GVM v1.0.22&lt;br/&gt;&lt;br/&gt;Please restart your terminal session or to get started right away run&lt;br/&gt; `&lt;span&gt;source&lt;/span&gt; /Users/admin/.gvm/scripts/gvm`&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来为了使gvm生效，需要执行一下上面提示的&lt;code&gt;source /Users/admin/.gvm/scripts/gvm&lt;/code&gt;命令即可，执行结束就可以在新终端使用gvm来切换控制go的版本了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;使用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装好了，咱们就可以来简单了解一下gvm的支持的一些功能。这下可以呼唤gvm的help选项了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; &lt;span&gt;help&lt;/span&gt;&lt;br/&gt;Usage: gvm [&lt;span&gt;command&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;Description:&lt;br/&gt;  GVM is the Go Version Manager&lt;br/&gt;&lt;br/&gt;Commands:&lt;br/&gt;  version    - &lt;span&gt;print&lt;/span&gt; the gvm version number &lt;span&gt;# 查看gvm的版本&lt;/span&gt;&lt;br/&gt;  get        - gets the latest code (&lt;span&gt;for&lt;/span&gt; debugging) &lt;span&gt;# 获取最新的代码（一般为了调试）&lt;/span&gt;&lt;br/&gt;  use        - select a go version to use (--default to &lt;span&gt;set&lt;/span&gt; permanently) &lt;span&gt;# 选择使用的Go版本 （--default 可以永久设置）&lt;/span&gt;&lt;br/&gt;  diff       - view changes to Go root &lt;span&gt;# 查看Go root中的变更&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;help&lt;/span&gt;       - display this usage text &lt;br/&gt;  implode    - completely remove gvm &lt;span&gt;# 完全删除 gvm 和所有已安装的 Go 版本和包&lt;/span&gt;&lt;br/&gt;  install    - install go versions &lt;span&gt;# 安装某个版本的Go&lt;/span&gt;&lt;br/&gt;  uninstall  - uninstall go versions &lt;span&gt;# 卸载某个版本的Go&lt;/span&gt;&lt;br/&gt;  cross      - install go cross compilers &lt;span&gt;# 安装跨平台Go编译器&lt;/span&gt;&lt;br/&gt;  linkthis   - link this directory into GOPATH &lt;span&gt;# 将项目路径链接到GOPATH中&lt;/span&gt;&lt;br/&gt;  list       - list installed go versions &lt;span&gt;# 罗列已经安装的Go版本列表&lt;/span&gt;&lt;br/&gt;  listall    - list available versions &lt;span&gt;# 罗列可用的Go版本&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alias&lt;/span&gt;      - manage go version aliases &lt;span&gt;# 管理Go版本别名&lt;/span&gt;&lt;br/&gt;  pkgset     - manage go packages sets &lt;span&gt;# 管理Go包的设置&lt;/span&gt;&lt;br/&gt;  pkgenv     - edit the environment &lt;span&gt;for&lt;/span&gt; a package &lt;span&gt;set&lt;/span&gt; &lt;span&gt;# 编辑Go包集合的环境&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;gvm的简单使用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先通过&lt;code&gt;gvm listall&lt;/code&gt;命令来看下目前的Go版本列表，如下，列表太长了，这里Go1-15的版本列表省略了，可以看出最新的是Go1.19的beta和几个rc版本了。那么咱们接下来通过下载Go1.19的rc版本来做示例。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; listall&lt;br/&gt;&lt;br/&gt;gvm gos (available)&lt;br/&gt;&lt;br/&gt;   go1&lt;br/&gt;   ...&lt;br/&gt;   go1.16&lt;br/&gt;   go1.16beta1&lt;br/&gt;   go1.16rc1&lt;br/&gt;   go1.16.1&lt;br/&gt;   go1.16.2&lt;br/&gt;   go1.16.3&lt;br/&gt;   go1.16.4&lt;br/&gt;   go1.16.5&lt;br/&gt;   go1.16.6&lt;br/&gt;   go1.16.7&lt;br/&gt;   go1.16.8&lt;br/&gt;   go1.16.9&lt;br/&gt;   go1.16.10&lt;br/&gt;   go1.16.11&lt;br/&gt;   go1.16.12&lt;br/&gt;   go1.16.13&lt;br/&gt;   go1.16.14&lt;br/&gt;   go1.16.15&lt;br/&gt;   go1.17&lt;br/&gt;   go1.17beta1&lt;br/&gt;   go1.17rc1&lt;br/&gt;   go1.17rc2&lt;br/&gt;   go1.17.1&lt;br/&gt;   go1.17.2&lt;br/&gt;   go1.17.3&lt;br/&gt;   go1.17.4&lt;br/&gt;   go1.17.5&lt;br/&gt;   go1.17.6&lt;br/&gt;   go1.17.7&lt;br/&gt;   go1.17.8&lt;br/&gt;   go1.17.9&lt;br/&gt;   go1.17.10&lt;br/&gt;   go1.17.11&lt;br/&gt;   go1.17.12&lt;br/&gt;   go1.18&lt;br/&gt;   go1.18beta1&lt;br/&gt;   go1.18beta2&lt;br/&gt;   go1.18rc1&lt;br/&gt;   go1.18.1&lt;br/&gt;   go1.18.2&lt;br/&gt;   go1.18.3&lt;br/&gt;   go1.18.4&lt;br/&gt;   go1.19beta1&lt;br/&gt;   go1.19rc1&lt;br/&gt;   go1.19rc2&lt;br/&gt;   release.r56&lt;br/&gt;   release.r57&lt;br/&gt;   release.r58&lt;br/&gt;   release.r59&lt;br/&gt;   release.r60&lt;br/&gt;   release.r57.1&lt;br/&gt;   release.r57.2&lt;br/&gt;   release.r58.1&lt;br/&gt;   release.r58.2&lt;br/&gt;   release.r60.1&lt;br/&gt;   release.r60.2&lt;br/&gt;   release.r60.3&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;安装一个Go版本&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看下目前使用的Go版本，小土这里使用的是go1.18.1的版本。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$go&lt;/span&gt; version&lt;br/&gt;go version go1.18.1 darwin/arm64&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装一个最新Go1.19的rc1版本。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; install go1.19rc1&lt;br/&gt;Installing go1.19rc1...&lt;br/&gt; * Compiling...&lt;br/&gt;go1.19rc1 successfully installed!&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;版本切换&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，咱们切换一下下载好的go版本，这里使用&lt;code&gt;gvm use  version&lt;/code&gt;即可切换。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; use go1.19rc1&lt;br/&gt;Now using version go1.19rc1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何永久切换呢？加上&lt;code&gt;--default&lt;/code&gt;即可永久设置，可以通过新建终端执行&lt;code&gt;go version&lt;/code&gt;,验证查看Go版本是否完全切换。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$gvm&lt;/span&gt; use go1.19rc1 --default&lt;br/&gt;Now using version go1.19rc1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后我们使用&lt;code&gt;go version&lt;/code&gt;查看当前使用的Go版本，看来是切换成功了。那么你就可以来去自如地切换Go版本了。尤其是在调试不同Go版本带来的问题代码时候特别有用。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$go&lt;/span&gt; version&lt;br/&gt;go version go1.19rc1 darwin/arm64&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;升级问题排查&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若在升级Go过程中，gvm文件的状态发生错乱或者其他问题，可以通过执行&lt;code&gt;rm -rf ~/.gvm&lt;/code&gt;来删除gvm进行问题的fix。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天的短文主要介绍了一个gvm的使用，希望对大家有所帮助，更多详情可以查看&lt;span&gt;gvm&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，另外站长之前写了一篇关于升级Go版本的文章，主要讲的是使用&lt;span&gt;goup&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;来进行Go版本的管理。小土这里就不介绍了，😆，感兴趣的同学可以查看&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzY0NDE3NA==&amp;amp;mid=2247485026&amp;amp;idx=1&amp;amp;sn=dcc047b6afe0e4e4daf37f8c9e499fce&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;终于找到了一款我喜欢的安装和管理 Go 版本的工具&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;gvm-installer: &lt;em&gt;https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;gvm: &lt;em&gt;https://github.com/moovweb/gvm&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;goup: &lt;em&gt;https://github.com/owenthereal/goup&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UzjmETLXwBYuP3ncUTaemHXQYjOZDS40VoicqII73Hu9RncJv06g0kJhnrVicSmUfJRg5Wf9qcDHj7zf5vTjns5A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是 polarisxu，北大硕士毕业，曾在 360 等知名互联网公司工作，10多年技术研发与架构经验！2012 年接触 Go 语言并创建了 Go 语言中文网！著有《&lt;/span&gt;&lt;span&gt;Go语言编程之旅&lt;/span&gt;&lt;span&gt;》、开源图书《&lt;/span&gt;&lt;span&gt;Go语言标准库&lt;/span&gt;&lt;span&gt;》等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;坚持输出技术（包括 Go、Rust 等技术）、职场心得和创业感悟！欢迎关注「polarisxu」一起成长！也欢迎加我微信好友交流：&lt;/span&gt;&lt;span&gt;gopherstudio&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c4bf873050e5f75b5ead713547698e17</guid>
<title>十种实现延迟任务的方案</title>
<link>https://toutiao.io/k/72twanf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;延迟任务，相信大家都不陌生，很多业务场景都会用到。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;js_darkmode__1&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;js_darkmode__1&quot;&gt;&lt;span&gt;比如，你在淘宝上买了件商品，收到货物后，很少有人主动去点 “确认收货”，但细心的我们发现，经过若干天后，系统会自动确认收货，完结订单。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;js_darkmode__1&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;js_darkmode__1&quot;&gt;&lt;span&gt;这是怎么回事？&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdBduS6EiatWo08iblKT72jaG4G7Z7YDg9ZkurncaiaO84nmXJgoAdUtlB9l1vCT1sAyIQkwxXMIXicHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdBduS6EiatWo08iblKT72jaG4G7Z7YDg9ZkurncaiaO84nmXJgoAdUtlB9l1vCT1sAyIQkwxXMIXicHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdBduS6EiatWo08iblKT72jaG4G7Z7YDg9ZkurncaiaO84nmXJgoAdUtlB9l1vCT1sAyIQkwxXMIXicHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;什么是延迟任务？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;顾明思议，我们把需要延迟执行的任务叫做延迟任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;延迟任务的使用场景有以下这些：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;红包 24 小时未被查收，需要延迟执退还业务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个月账单日，需要给用户发送当月的对账单；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;订单下单之后 30 分钟后，用户如果没有付钱，系统需要自动取消订单。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;等事件都需要使用延迟任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;延迟任务实现思路分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;延迟任务实现的关键是在某个时间节点执行某个任务。基于这个信息我们可以想到实现延迟任务的手段有以下两个：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自己手写一个“死循环”一直判断当前时间节点有没有要执行的任务；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;借助 JDK 或者第三方提供的工具类来实现延迟任务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而通过 JDK 实现延迟任务我们能想到的关键词是：DelayQueue、ScheduledExecutorService，而第三方提供的延迟任务执行方法就有很多了，例如：Redis、Netty、MQ 等手段。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;延迟任务实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;下面我们将结合代码来讲解每种延迟任务的具体实现。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案1、无限循环实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;此方式我们需要开启一个无限循环一直扫描任务，然后使用一个 Map 集合用来存储任务和延迟执行的时间，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.time.Instant;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.time.LocalDateTime;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayTaskExample&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-snippet__type&quot;&gt;Long&lt;/span&gt;&amp;gt; _TaskMap = new &lt;span class=&quot;code-snippet__type&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt;[] args) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.out.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;程序启动时间：&quot;&lt;/span&gt; + &lt;span class=&quot;code-snippet__type&quot;&gt;LocalDateTime&lt;/span&gt;.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        _TaskMap.put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;task-1&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__type&quot;&gt;Instant&lt;/span&gt;.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;).toEpochMilli()); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        loopTask();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; void loopTask() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Long&lt;/span&gt; itemLong = 0L;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__type&quot;&gt;Iterator&lt;/span&gt; it = _TaskMap.entrySet().iterator();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (it.hasNext()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__type&quot;&gt;Map&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Entry&lt;/span&gt; entry = (&lt;span class=&quot;code-snippet__type&quot;&gt;Map&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Entry&lt;/span&gt;) it.next();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                itemLong = (&lt;span class=&quot;code-snippet__type&quot;&gt;Long&lt;/span&gt;) entry.getValue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__type&quot;&gt;Instant&lt;/span&gt;.now().toEpochMilli() &amp;gt;= itemLong) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.out.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;执行任务：&quot;&lt;/span&gt; + entry.getKey() +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; ，执行时间：&quot;&lt;/span&gt; + &lt;span class=&quot;code-snippet__type&quot;&gt;LocalDateTime&lt;/span&gt;.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    _TaskMap.remove(entry.getKey());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序执行的结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;程序启动时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T18&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:51&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28.188&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;执行任务：&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;task-1&lt;/span&gt; ，执行时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T18&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:51&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:31.189&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看出任务延迟了 3s 钟执行了，符合我们的预期。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Java API 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Java API 提供了两种实现延迟任务的方法：DelayQueue 和 ScheduledExecutorService。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;ScheduledExecutorService 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们可以使用 ScheduledExecutorService 来以固定的频率一直执行任务，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayTaskExample&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;程序启动时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        scheduledExecutorServiceTask();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;scheduledExecutorServiceTask&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ScheduledExecutorService executor = Executors.newScheduledThreadPool(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        executor.scheduleWithFixedDelay(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Runnable() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;执行任务&quot;&lt;/span&gt; +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; ，执行时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                TimeUnit.SECONDS);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序执行的结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;程序启动时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T21&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:10.416&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;执行任务 ，执行时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T21&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:12.421&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;执行任务 ，执行时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-12T21&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:14.422&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;......&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看出使用 ScheduledExecutorService#scheduleWithFixedDelay(...) 方法之后，会以某个频率一直循环执行延迟任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案3、&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;DelayQueue 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;DelayQueue 是一个支持延时获取元素的无界阻塞队列，队列中的元素必须实现 Delayed 接口，并重写 getDelay(TimeUnit) 和 compareTo(Delayed) 方法，DelayQueue 实现延迟队列的完整代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        DelayQueue delayQueue = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DelayQueue();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        delayQueue.put(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DelayElement(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        delayQueue.put(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DelayElement(&lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        delayQueue.put(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DelayElement(&lt;span class=&quot;code-snippet__number&quot;&gt;5000&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;开始时间：&quot;&lt;/span&gt; +  DateFormat.getDateTimeInstance().format(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Date()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (!delayQueue.isEmpty()){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(delayQueue.take());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;结束时间：&quot;&lt;/span&gt; +  DateFormat.getDateTimeInstance().format(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Date()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayElement&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Delayed&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; delayTime = System.currentTimeMillis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayElement&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; delayTime)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.delayTime = (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.delayTime + delayTime);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getDelay&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(TimeUnit unit)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; unit.convert(delayTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Delayed o)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.getDelay(TimeUnit.MILLISECONDS) &amp;gt; o.getDelay(TimeUnit.MILLISECONDS)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.getDelay(TimeUnit.MILLISECONDS) &amp;lt; o.getDelay(TimeUnit.MILLISECONDS)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;code-snippet__title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; DateFormat.getDateTimeInstance().format(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Date(delayTime));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序执行的结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;开始时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:38&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:39&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:41&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:43&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;结束时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-4-12&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:40&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:43&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Redis 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用 Redis 实现延迟任务的方法大体可分为两类：通过 zset 数据判断的方式，和通过键空间通知的方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;方案4、通过数据判断的方式&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们借助 zset 数据类型，把延迟任务存储在此数据集合中，然后在开启一个无线循环查询当前时间的所有任务进行消费，实现代码如下（需要借助 Jedis 框架）：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; redis.clients.jedis.Jedis;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; utils.JedisUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.time.Instant;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Set;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayQueueExample&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String _KEY = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;myDelayQueue&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Jedis jedis = JedisUtils.getJedis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; delayTime = Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;).getEpochSecond();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, delayTime, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;).getEpochSecond(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;).getEpochSecond(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_3&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;).getEpochSecond(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_4&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.zadd(_KEY, Instant.now().plusSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;).getEpochSecond(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;order_5&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        doDelayQueue(jedis);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;doDelayQueue&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Jedis jedis)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 当前时间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Instant nowInstant = Instant.now();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; lastSecond = nowInstant.plusSeconds(-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;).getEpochSecond(); &lt;span class=&quot;code-snippet__comment&quot;&gt;// 上一秒时间&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; nowSecond = nowInstant.getEpochSecond();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 查询当前时间的所有任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Set&amp;lt;String&amp;gt; data = jedis.zrangeByScore(_KEY, lastSecond, nowSecond);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (String item : data) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 消费任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;消费：&quot;&lt;/span&gt; + item);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 删除已经执行的任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            jedis.zremrangeByScore(_KEY, lastSecond, nowSecond);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Thread.sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;); &lt;span class=&quot;code-snippet__comment&quot;&gt;// 每秒轮询一次&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;方案5、通过键空间通知&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;默认情况下 Redis 服务器端是不开启键空间通知的，需要我们通过 config set notify-keyspace-events Ex 的命令手动开启，开启键空间通知后，我们就可以拿到每个键值过期的事件，我们利用这个机制实现了给每个人开启一个定时任务的功能，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; redis.clients.jedis.Jedis;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; redis.clients.jedis.JedisPubSub;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; utils.JedisUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; TaskExample {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; final &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; _TOPIC = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;__keyevent@0__:expired&quot;&lt;/span&gt;; &lt;span class=&quot;code-snippet__comment&quot;&gt;// 订阅频道名称&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[] args) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Jedis jedis = JedisUtils.getJedis();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 执行定时任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        doTask(jedis);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 订阅过期消息，执行定时任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * @param jedis Redis 客户端&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; doTask(Jedis jedis) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 订阅过期消息&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jedis.psubscribe(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; JedisPubSub() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; onPMessage(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; pattern, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; channel, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; message) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 接收到消息，执行定时任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;收到消息：&quot;&lt;/span&gt; + message);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }, _TOPIC);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案6、Netty 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Netty 是由 JBOSS 提供的一个 Java 开源框架，它是一个基于 NIO 的客户、服务器端的编程框架，使用 Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、服务端应用。Netty 相当于简化和流线化了网络应用的编程开发过程，例如：基于 TCP 和 UDP 的 socket 服务开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以使用 Netty 提供的工具类 HashedWheelTimer 来实现延迟任务，实现代码如下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先在项目中添加 Netty 引用，配置如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/io.netty/netty-common --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.netty&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;netty-common&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.1.48.Final&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;Netty 实现的完整代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayTaskExample&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;程序启动时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        NettyTask();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 基于 Netty 的延迟任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;NettyTask&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 创建延迟任务实例&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        HashedWheelTimer timer = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashedWheelTimer(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__comment&quot;&gt;// 时间间隔&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                TimeUnit.SECONDS,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;); &lt;span class=&quot;code-snippet__comment&quot;&gt;// 时间轮中的槽数&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 创建一个任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        TimerTask task = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TimerTask() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Timeout timeout&lt;/span&gt;) throws Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;执行任务&quot;&lt;/span&gt; +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; ，执行时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 将任务添加到延迟队列中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        timer.newTimeout(task, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, TimeUnit.SECONDS);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序执行的结果为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;程序启动时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T10&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:16&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:23.033&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;执行任务 ，执行时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T10&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:16&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:26.118&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;HashedWheelTimer 是使用定时轮实现的，定时轮其实就是一种环型的数据结构，可以把它想象成一个时钟，分成了许多格子，每个格子代表一定的时间，在这个格子上用一个链表来保存要执行的超时任务，同时有一个指针一格一格的走，走到那个格子时就执行格子对应的延迟任务，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5205811138014528&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/HrWw6ZuXCsjJ5ZkIvjsIlossH2WTNtSJA2D4ELea2Kias5Ie6SugsBuWrHkC8GokGnRibBqRvZFGeaIuEPTEgBeA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;413&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(图片来源于网络)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上的图片可以理解为，时间轮大小为 8，某个时间转一格（例如 1s），每格指向一个链表，保存着待执行的任务。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案7、8 MQ 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果专门开启一个 MQ 中间件来执行延迟任务，就有点杀鸡用宰牛刀般的奢侈了，不过已经有了 MQ 环境的话，用它来实现延迟任务的话，还是可取的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;几乎所有的 MQ 中间件都可以实现延迟任务，在这里更准确的叫法应该叫延队列。本文就使用 RabbitMQ 为例，来看它是如何实现延迟任务的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;RabbitMQ 实现延迟队列的方式有两种：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 rabbitmq-delayed-message-exchange 插件实现延迟功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注意：延迟插件 rabbitmq-delayed-message-exchange 是在 RabbitMQ 3.5.7 及以上的版本才支持的，依赖 Erlang/OPT 18.0 及以上运行环境。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于使用死信交换器比较麻烦，所以推荐使用第二种实现方式 rabbitmq-delayed-message-exchange 插件的方式实现延迟队列的功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，我们需要下载并安装 rabbitmq-delayed-message-exchange 插件，下载地址：http://www.rabbitmq.com/community-plugins.html&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;选择相应的对应的版本进行下载，然后拷贝到 RabbitMQ 服务器目录，使用命令 rabbitmq-plugins enable rabbitmq_delayed_message_exchange 开启插件，在使用命令 rabbitmq-plugins list 查询安装的所有插件，安装成功如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37130801687763715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HrWw6ZuXCsjJ5ZkIvjsIlossH2WTNtSJbwicYpVV6eFDmuW6bicqlz8Hu5sgNHebX2Uy5toiavDf1sicqsYOtGgzeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;474&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后重启 RabbitMQ 服务，使插件生效。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，我们先要配置消息队列，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.example.rabbitmq.mq.DirectConfig;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.*;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayedConfig&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; String QUEUE_NAME = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;delayed.goods.order&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; String EXCHANGE_NAME = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;delayedec&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Queue &lt;span class=&quot;code-snippet__title&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Queue(DelayedConfig.QUEUE_NAME);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 配置默认的交换机&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;CustomExchange &lt;span class=&quot;code-snippet__title&quot;&gt;customExchange&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Map&amp;lt;String, Object&amp;gt; args = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        args.put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;x-delayed-type&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;direct&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;//参数二为类型：必须是x-delayed-message&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; CustomExchange(DelayedConfig.EXCHANGE_NAME, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;x-delayed-message&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;, args);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 绑定队列到交换器&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;Binding &lt;span class=&quot;code-snippet__title&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Queue queue, CustomExchange exchange)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; BindingBuilder.bind(queue).to(exchange).with(DelayedConfig.QUEUE_NAME).noargs();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;然后添加增加消息的代码，具体实现如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.AmqpException;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.AmqpTemplate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.Message;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.MessagePostProcessor;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayedSender&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; AmqpTemplate rabbitTemplate;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String msg)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleDateFormat sf = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;发送时间：&quot;&lt;/span&gt; + sf.format(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Date()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rabbitTemplate.convertAndSend(DelayedConfig.EXCHANGE_NAME, DelayedConfig.QUEUE_NAME, msg, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; MessagePostProcessor() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Message &lt;span class=&quot;code-snippet__title&quot;&gt;postProcessMessage&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Message message)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; AmqpException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                message.getMessageProperties().setHeader(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;x-delay&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; message;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;再添加消费消息的代码：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;.RabbitHandler;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;.RabbitListener;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@RabbitListener(queues = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;delayed.goods.order&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayedReceiver&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@RabbitHandler&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void process(String msg) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleDateFormat sdf = new SimpleDateFormat(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;接收时间:&quot;&lt;/span&gt; + sdf.format(new Date()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;消息内容：&quot;&lt;/span&gt; + msg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;最后，我们使用代码测试一下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.example.rabbitmq.RabbitmqApplication;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.example.rabbitmq.mq.delayed.DelayedSender;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.junit.runner.RunWith;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.boot.test.context.SpringBootTest;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.test.context.junit4.SpringRunner;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Date;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__type&quot;&gt;RunWith&lt;/span&gt;(&lt;span class=&quot;code-snippet__type&quot;&gt;SpringRunner&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__type&quot;&gt;SpringBootTest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DelayedTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @&lt;span class=&quot;code-snippet__type&quot;&gt;Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;DelayedSender&lt;/span&gt; sender;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @&lt;span class=&quot;code-snippet__type&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void &lt;span class=&quot;code-snippet__type&quot;&gt;Test&lt;/span&gt;() &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;InterruptedException&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;SimpleDateFormat&lt;/span&gt; sf = new &lt;span class=&quot;code-snippet__type&quot;&gt;SimpleDateFormat&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sender.send(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hi Admin.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Thread&lt;/span&gt;.sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;); &lt;span class=&quot;code-snippet__comment&quot;&gt;//等待接收程序执行之后，再退出测试&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序的执行结果如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;发送时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:47&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:51&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;接收时间&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:2020-04-13&lt;/span&gt; 20&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:47&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:54&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;消息内容：&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Hi&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Admin&lt;/span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从结果可以看出，以上程序执行符合延迟任务的实现预期。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案9、使用 Spring 定时任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你使用的是 Spring 或 SpringBoot 的项目的话，可以使用借助 Scheduled 来实现，本文将使用 SpringBoot 项目来演示 Scheduled 的实现，实现我们需要声明开启 Scheduled，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@EnableScheduling&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Application&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SpringApplication.run(Application.class, args);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;然后添加延迟任务，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ScheduleJobs&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Scheduled&lt;/span&gt;(fixedDelay = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;fixedDelayJob&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;任务执行，时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;此时当我们启动项目之后就可以看到任务以延迟了 2s 的形式一直循环执行，结果如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;任务执行，时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T14&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:07&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:53.349&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;任务执行，时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T14&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:07&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:55.350&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;任务执行，时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T14&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:07&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:57.351&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们也可以使用 Corn 表达式来定义任务执行的频率，例如使用 @Scheduled(cron = &quot;0/4 * * * * ?&quot;) 。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方案10、Quartz 实现延迟任务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Quartz 是一款功能强大的任务调度器，可以实现较为复杂的调度功能，它还支持分布式的任务调度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们使用 Quartz 来实现一个延迟任务，首先定义一个执行任务代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.quartz.JobExecutionContext;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.quartz.JobExecutionException;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.scheduling.quartz.QuartzJobBean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.time.LocalDateTime;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SampleJob&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;QuartzJobBean&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;executeInternal&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(JobExecutionContext jobExecutionContext)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; JobExecutionException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;任务执行，时间：&quot;&lt;/span&gt; + LocalDateTime.now());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;在定义一个 JobDetail 和 Trigger 实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.quartz.*;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;.Bean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.&lt;span class=&quot;code-snippet__keyword&quot;&gt;annotation&lt;/span&gt;.Configuration;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SampleScheduler&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; JobDetail sampleJobDetail() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; JobBuilder.newJob(SampleJob.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;).withIdentity(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;sampleJob&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                .storeDurably().build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Trigger sampleJobTrigger() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 3s 后执行&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        SimpleScheduleBuilder scheduleBuilder =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;).withRepeatCount(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; TriggerBuilder.newTrigger().forJob(sampleJobDetail()).withIdentity(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;sampleTrigger&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                .withSchedule(scheduleBuilder).build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;最后在 SpringBoot 项目启动之后开启延迟任务，实现代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.boot.CommandLineRunner;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.springframework.scheduling.quartz.SchedulerFactoryBean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt; * SpringBoot 项目启动后执行&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MyStartupRunner&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; SchedulerFactoryBean schedulerFactoryBean;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; SampleScheduler sampleScheduler;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String... args)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 启动定时任务&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        schedulerFactoryBean.getScheduler().scheduleJob(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                sampleScheduler.sampleJobTrigger());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;以上程序的执行结果如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13&lt;/span&gt; 19&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:02&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:12.331&lt;/span&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;INFO&lt;/span&gt; 17768 &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-attr&quot;&gt;[  restartedMain]&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.example&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.demo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.DemoApplication&lt;/span&gt;         : &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Started&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;DemoApplication&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;in&lt;/span&gt; 1&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.815&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;seconds&lt;/span&gt; (&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;JVM&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;for&lt;/span&gt; 3&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.088&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;任务执行，时间：2020&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-04-13T19&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:02&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:15.019&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从结果可以看出在项目启动 3s 之后执行了延迟任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文讲了延迟任务的使用场景，以及延迟任务的 10 种实现方式：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;手动无限循环；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;ScheduledExecutorService；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DelayQueue；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Redis zset 数据判断的方式；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Redis 键空间通知的方式；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Netty 提供的 HashedWheelTimer 工具类；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RabbitMQ 死信队列；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RabbitMQ 延迟消息插件 rabbitmq-delayed-message-exchange；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Spring Scheduled；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Quartz。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651515017&amp;amp;idx=1&amp;amp;sn=a290eb47d904f571a52ed0538dabf8e1&amp;amp;chksm=bd2584f68a520de01e5df6932e8ef341108b9b733b43ce79c090c99a35ac15eb373594f3ec9b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;延时消息常见实现方案&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;延时消息常见实现方案&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651479415&amp;amp;idx=1&amp;amp;sn=1676ed0dcad2863036d54888e07c528f&amp;amp;chksm=bd2531088a52b81e2e44bb1fd75f42f237dc855d59b63486da770115103c5160bca4c98c19f0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SpringBoot 定时任务踩坑记录&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;SpringBoot 定时任务踩坑记录&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651479415&amp;amp;idx=1&amp;amp;sn=1676ed0dcad2863036d54888e07c528f&amp;amp;chksm=bd2531088a52b81e2e44bb1fd75f42f237dc855d59b63486da770115103c5160bca4c98c19f0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SpringBoot 定时任务踩坑记录&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651513303&amp;amp;idx=1&amp;amp;sn=f24b13d9d2ca23c8296f657ead20c6b5&amp;amp;chksm=bd258da88a5204be37a07c0078e6137ec0999421ebcf528ae86fccc32fc79d36628e35f811e0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;几种简单实用的分布式定时任务！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;几种简单实用的分布式定时任务！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>12cd036872609e3229c51d67358bea47</guid>
<title>推荐学Java——初识数据库</title>
<link>https://toutiao.io/k/58sk8pe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;引言&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面已经学习了四篇关于Java的内容，算是一个基本路线和重难点划分，接下来就进入真正的Java后端开发之旅了，一起go吧！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Java反射&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000114&quot; data-ratio=&quot;0.5376532399299475&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfp26cuFSnAF6icA9hSQaciaUoLwmiaIxqKDbiaxge5QIVDM11MlJtDG9oaNx5VB8pbTr7NG9ibWFhnHhIcdkjlSJfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2284&quot;/&gt;&lt;figcaption&gt;java反射知识导图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这块的内容不多，但也很重要，虽然开发中可能不是经常用到，但经常会在 &lt;strong&gt;看源码&lt;/strong&gt;的场景中遇到，实际开发中有些情景也是会遇到，所以掌握这一节的内容，有助于你进阶！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过学习前面章节的内容你应该对一个类（Class）的结构应该掌握的很熟悉了，那么反射中就提供了对应的 API 来调用，如上图中的&lt;strong&gt;常用反射对象&lt;/strong&gt;，掌握他们的写法和调用方式，并尝试着自己写一个类去反射，体验一下这个过程。而获得 &lt;code&gt;Class&lt;/code&gt; 对象的方式下面就会用到。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;JDBC&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000115&quot; data-ratio=&quot;0.7727272727272727&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfp26cuFSnAF6icA9hSQaciaUoLwmiaIxqKOrHWibLaTVhJNU9jgXSEyB0V1h906oYfRtic1aZ4PpTCp3TqJ0UZ2ICg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2728&quot;/&gt;&lt;figcaption&gt;JDBC知识导图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是计算机专业的，那么可能在大学接触过 &lt;code&gt;SQL Server&lt;/code&gt; ，那么你对&lt;code&gt;JDBC&lt;/code&gt;就不会很陌生了，至少听过，代码不会写没事，接下来会告诉你的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们前面所学过的知识都是基础操作层面的，而接下来要学习的内容都是完整的体系化，举个例子：你的微信头像修改了，换个手机之后头像依然是修改后的，那么你这个&lt;strong&gt;头像存放在哪里呢？&lt;/strong&gt; 这就是我们要学习的数据库相关知识，到这你应该明白了，原来头像是放在数据库的，无论你是手机还是电脑登录微信，都会从数据库取你的头像，所以你看到的都是同一个头像。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们是开发者，使用者才不关系头像存放在哪里，所以JDBC就是让我们明白这其中的原理和基本的操作方法（新增、删除、修改、查询）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，&lt;strong&gt;常见的数据库&lt;/strong&gt;有哪些呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SQL Server&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MySQL：典型的关系型数据库，Java开发常用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;NoSQL&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;DB2&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Postgre SQL&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Oracle&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;流程&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，JDBC一个完整的流程（原理）分为四个步骤&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;加载驱动&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;与数据库建立链接&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;执行SQL&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;释放资源&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在实际开发中，这些底层的步骤几乎轮不到我们自己来写，一方面有世界级的大公司开源框架（数据库连接池）做了这个工作；另一方面你所在的公司有大牛在，这个工作早就做好了。但我们还是需要明白，因为面试可能需要问你（因为只有你答上来了，面试官才放心你真的学过Java，哈哈）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于上面的每个流程，都有对应的API，而不同的框架封装后暴漏出来的API又有可能不同，这些都需要我们随机应变，不断学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数据库连接池&lt;/strong&gt; 使用很广泛的一个就是国内大厂阿里开源的&lt;code&gt;DRUID&lt;/code&gt;（下载地址：&lt;code&gt;https://github.com/alibaba/druid&lt;/code&gt;），具体使用教程可以看官方文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看官方文档学习框架用法，看框架源码学习编程思想，这条路我们会一直走下去！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;安装MySQL&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下载：&lt;code&gt;https://dev.mysql.com/downloads/installer/&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装：基本上一路next即可，遇到有execute的，先点击execute&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试是否安装成功：打开&lt;code&gt;MySQL 8.0 Command Line Client&lt;/code&gt; ，输入&lt;code&gt;你安装时设置的密码&lt;/code&gt;，回车即可看到类似如下信息，则说明安装成功。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100000113&quot; data-ratio=&quot;0.41645569620253164&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfp26cuFSnAF6icA9hSQaciaUoLwmiaIxqKYbbZkRVmibx5w3YxBvCicwaIMuhjXMFKdRpRVQD9MntIJQrwLrem7skg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;790&quot;/&gt;&lt;figcaption&gt;MySQL安装成功&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQL是特别重要的内容，Java后端没有不会SQL的，其实也比较简单，你可以将它理解为一门小巧别致的语言，下面就来点基本的内容吧。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;关于数据库，种类很多，有不同的使用场景，一般的中小型互联网公司，使用MySQL居多。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;查看 MySql 版本&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;命令行输入 &lt;code&gt;mysql -uroot -proot&lt;/code&gt;如果出现如下提示，则证明安装成功。(&lt;code&gt;-u&lt;/code&gt;后面跟的是用户名，&lt;code&gt;-p&lt;/code&gt;后面跟的是密码)&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Welcome to the MySQL monitor.  Commands end with ; or \g.&lt;br/&gt;Your MySQL connection id is 3&lt;br/&gt;Server version: 5.5.27 MySQL Community Server (GPL)&lt;br/&gt;&lt;br/&gt;Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.&lt;br/&gt;&lt;br/&gt;Oracle is a registered trademark of Oracle Corporation and/or its&lt;br/&gt;affiliates. Other names may be trademarks of their respective&lt;br/&gt;owners.&lt;br/&gt;&lt;br/&gt;Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据库常用操作&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分内容相对于数据库中表的操作会少很多，实际开发中如果不负责库和表的创建，那么使用的也很少，一般是由管理员开通权限你才可以创建，当然很多人也喜欢使用图形化界面创建，下面是常用命令，工具的话，一般&lt;code&gt;Navicat&lt;/code&gt; 使用的比较多。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1，创建数据库&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; 数据库名字;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2，创建数据库，并指定编码方式&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; 数据库名字 &lt;span&gt;character&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; utf8;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3，查看所有数据库&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;show&lt;/span&gt; &lt;span&gt;databases&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4，查看某个数据库的创建情况&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;show&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; 数据库名字;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5，修改数据库&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; 数据库名字 &lt;span&gt;character&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; 字符集；&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6，删除数据库&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;drop&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; 数据库名字;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7，选中某个数据库&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;use&lt;/span&gt; 数据库名字;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8，查看当前正在使用的数据库&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;database&lt;/span&gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这节内容已经进入Java后端开发，数据库和表的相关操作是必备技能，下一节会重点学习关于数据库中表的操作，是非常重要的内容，赶紧跟上节奏，开始Java之旅吧！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;小编特意创建了一个公众号：&lt;code&gt;推荐学java&lt;/code&gt;，会分享与&lt;code&gt;java&lt;/code&gt;相关的内容，并且以原创为主，微信搜索关注（关注即送小编挑选的精品视频教程），一起学Java！&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>88a8d9f6d316068794c9cf021e31fcfd</guid>
<title>怎么理解数据网格（Data Mesh）</title>
<link>https://toutiao.io/k/2ndykvb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMic9VQP5dl39PTFIPPptNeOOfyyh9HD3OYW5KIYtoRnwLOBRkI0R3VEO1cibXQQM9qia2pcicpSKeXIwnA/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1080&quot; data-cropy1=&quot;384.9134948096886&quot; data-cropy2=&quot;1080&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6444444444444445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMicicW0cv3ibRlJj84nB6STZtk3fYQHWYK97qhUEyG9zFWRH22q2nicdhkqHtGBZbicRPpI6jm9HiaOLyb6Q/640?wx_fmt=jpeg&amp;amp;random=0.16714616822623896&amp;amp;random=0.2686191700895806&amp;amp;random=0.7176600974562688&amp;amp;random=0.8246339628617241&amp;amp;random=0.10099707550712478&amp;amp;random=0.2264544707841858&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;来源：网络翻译    编辑：数据一哥&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;全文共&lt;/span&gt;&lt;span&gt; 2179&lt;/span&gt;&lt;span&gt;个字，建议阅读 &lt;/span&gt;&lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span&gt;分钟&lt;/span&gt;&lt;/section&gt;&lt;p data-first-child=&quot;&quot; data-pid=&quot;Tn8Aulv5&quot;&gt;数据网格是一种架构模式，用于在大型复杂组织中实现企业数据平台。它有助于扩展分析的采用范围，使其超越单个平台和单个实施团队&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;418797&quot;&gt;&lt;section label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-pid=&quot;DW3hWTTy&quot;&gt;对分析的需求并不新鲜。组织总是需要分析业务绩效，自从引入计算机以来，就一直使用计算机来分析业务绩效。大约在20世纪80年代，组织开始通过使用专门用于决策支持的数据库来构建数据仓库解决方案。这些解决方案长期以来为组织提供了良好的服务。&lt;/p&gt;&lt;p data-pid=&quot;6I1dr__x&quot;&gt;然而，随着业务的变化以及生成的数据越来越多样化，使用关系数据库的数据仓库解决方案可能并不总是最佳解决方案。在2000年代，大数据作为一个通用术语被引入。快速采用了新的解决方案，可以分析以极高速度生成的大量不同数据。这包括数据湖和分析大量数据的横向扩展解决方案等技术。&lt;/p&gt;&lt;p data-pid=&quot;Huttp10S&quot;&gt;近年来，许多组织成功地使用了现代体系结构和分析模式，这些模式将数据仓库技术和最新的大数据技术相结合。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7034722222222223&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMicicW0cv3ibRlJj84nB6STZtk3wx76QeZD96d61icTf3GD0CI7s9Vva9DJRVxtdKFs4X850fOyV6L3z8w/640?wx_fmt=jpeg&amp;amp;random=0.029802783645130226&amp;amp;random=0.5205229111813525&amp;amp;random=0.35682923852719295&amp;amp;random=0.5445245411841149&amp;amp;random=0.23903426178773168&amp;amp;random=0.47255929090411763&amp;amp;random=0.1558255656184684&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;YVSLeUEd&quot;&gt;然而，一些组织在使用此模式部署分析解决方案时会遇到问题。这些解决方案通常仍作为整体解决方案实施，其中一个团队是平台提供商，另一个团队是进行数据集成的团队。从团队设置的角度来看，这适用于较小的组织和高度集中的组织。然而，仅使用一个团队通常会在大型组织中造成瓶颈。这一瓶颈导致了大量积压工作，组织中的一些部门不得不等待数据集成服务和分析解决方案。&lt;/p&gt;&lt;p data-pid=&quot;UaXGUZCV&quot;&gt;随着组织采用现代数据科学解决方案，这种模式变得越来越普遍。与过去的传统商业智能解决方案相比，许多数据科学解决方案需要更多的数据。&lt;/p&gt;&lt;p data-pid=&quot;wj0Aiu6U&quot;&gt;最近转向使用微服务作为应用程序开发模式是围绕数据集成的长期积压的另一个驱动因素，因为它增加了数据源的数量。&lt;/p&gt;&lt;p data-pid=&quot;YSmNy8qb&quot;&gt;在大型组织中，让一个团队在一个平台上处理所有数据摄取也可能会有问题。一个团队很少有针对每个数据源的专家。从业务角度来看，大多数组织都是分散和分布的。不同的业务部门和部门处理不同的操作部分，因此数据专家通常分布在各个部门。&lt;/p&gt;&lt;p data-pid=&quot;0ij0y5j8&quot;&gt;为了解决这些问题，几年前引入了一种称为数据网格的新体系结构模式。Data mesh的目标是让分布式团队以分散和灵活的方式处理和共享信息。&lt;/p&gt;&lt;p data-pid=&quot;_-GYF_0G&quot;&gt;数据网格是一种技术模式，也需要组织变革。数据网格方法的好处是通过实施发布和使用数据产品的多学科团队来实现的。&lt;/p&gt;&lt;p data-pid=&quot;GkLdl4xi&quot;&gt;以下概念是理解数据网格体系结构的基础：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6638772663877266&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z2DApiaibzMicicW0cv3ibRlJj84nB6STZtk3peRmF0p5icibStP7rHrXxT3V98hMzjtHJCNkdeZ6yyT418MIglweRtOg/640?wx_fmt=png&amp;amp;random=0.8163755905714156&amp;amp;random=0.3385328550201565&amp;amp;random=0.7687748870311433&amp;amp;random=0.5313682449720702&amp;amp;random=0.38058537219104416&quot; data-type=&quot;png&quot; data-w=&quot;717&quot;/&gt;&lt;/p&gt;&lt;p data-pid=&quot;hF7iKyt4&quot;&gt;数据域有三个方面：&lt;/p&gt;&lt;p data-pid=&quot;kMJBwYkc&quot;&gt;有关数据域以及如何定义它们的更多信息，请参阅什么是数据域？&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;418797&quot;&gt;&lt;section label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;数据产品&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;

&lt;/section&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;数据产品是数据网格的另一个重要组成部分。&lt;/span&gt;&lt;span&gt;数据产品旨在将产品思维带入数据世界。&lt;/span&gt;&lt;span&gt;为了使您的数据产品获得成功，它需要为目标用户提供长期的业务价值。&lt;/span&gt;&lt;span&gt;在数据网格中，数据产品涉及数据、代码资产、元数据和相关策略。&lt;/span&gt;&lt;span&gt;数据产品可以作为API、报表、表或数据湖中的数据集交付。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;G8Mq4W71&quot;&gt;成功的数据产品必须：&lt;/p&gt;&lt;p data-pid=&quot;tmuRg80v&quot;&gt;对于本节，如果您将其格式设置为：&lt;/p&gt;&lt;p data-pid=&quot;br3-CMb-&quot;&gt;数据产品的代码资产包括生成数据产品的代码和交付数据产品的代码。它还包括用于创建产品和产品最终报告的管道。&lt;/p&gt;&lt;p data-pid=&quot;0-yizR0u&quot;&gt;有关使用数据网格的具体指导，请参阅什么是数据产品&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;418797&quot;&gt;&lt;section label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;自助服务平台&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;

&lt;/section&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;数据网格的核心是有一个平台，允许数据域自己构建数据产品。&lt;/span&gt;&lt;span&gt;他们需要能够通过使用与其用户相关的工具和流程来定义其数据产品，而不需要对中央平台或中央平台团队有强烈的依赖性。&lt;/span&gt;&lt;span&gt;在数据网格中，您拥有开发和管理自主产品的自主团队。&lt;/span&gt;&lt;/p&gt;&lt;p data-pid=&quot;YLTSYXxV&quot;&gt;在与了解您的数据的业务用户进行分散和协调的同时，您还将有多面手在您的平台上工作。因此，您不能将需要专业知识才能操作的专业工具作为基于网格的平台的核心基础&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;418797&quot;&gt;&lt;section label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;联合治理&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;

&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-pid=&quot;CRtxZUvi&quot;&gt;当您采用自助式分布式数据平台时，您必须更加重视治理。缺乏治理会导致跨数据域的竖井和数据重复。联合您的治理，因为了解治理需求的人存在于与域一致的团队和数据所有者中。&lt;/p&gt;&lt;p data-pid=&quot;xKchdmlU&quot;&gt;要创建联合治理，请围绕平台和数据需求实施自动化策略。使用高度自动化进行测试和监控。采用代码优先的实施策略，将标准、策略、数据产品和平台部署作为代码处理&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;418797&quot;&gt;&lt;section label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;86134&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;06&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-pid=&quot;m2yuNDJa&quot;&gt;数据网格是实现企业数据平台的有效方法，但它不是所有组织的最佳解决方案。数据网格需要能够独立工作的自治团队。它在需要将其分析采用范围扩展到单个平台和实施团队之外并拥有独立业务部门的大型复杂组织中效果最好。&lt;/p&gt;&lt;p data-pid=&quot;YUmSX5Xr&quot;&gt;使用数据网格时，在实施治理时要特别小心，以免创建竖井。始终将对数据的产品思考作为实施的核心，以确保成功。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;131&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;原文连接：https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/scenarios/cloud-scale-analytics/architectures/what-is-data-mes&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;488773&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;97&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;97&quot; data-ratio=&quot;1.1078320090805902&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMicicB06SeBS1EpdcVwH89ibRqv8kccFH3oMhZZj4xW8MAkx0Y82kzP6gMkTU0oaNbv0PYFbpp3PuiafTg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;881&quot;/&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;长按以识别二维码，加入大数据微信号群~ &lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI4MzE4MjQxOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z2DApiaibzMicibStrZbEKicUIkEia0iaUrqcr4dq64JSoTr0gAkQE7QESQcYrsNqGvdQWrNUZKUz9zjO2WxEAKD5J5GQ/0?wx_fmt=png&quot; data-nickname=&quot;数据社&quot; data-alias=&quot;DataClub&quot; data-signature=&quot;头部企业大数据分析负责人，中国DBA联盟成员，个人专注数据仓库架构，数据分析，MPP数据库研究、流处理计算等&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;公众号推送规则变了&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点击上方公众号名片，&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;收藏公众号&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;，不错过精彩内容推送！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.428&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/z2DApiaibzMicicVu89OQvdamdpW8lLUicFNnw3RiaNIEeKGVTYiaqdW9dk33euSNmSsyekJl0tfFK1MIb37QTrf4AQHQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;
&lt;section&gt;
&lt;section&gt;
&lt;section&gt;
&lt;p data-mid=&quot;&quot;&gt;往期推荐&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;&lt;section&gt;
&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649388748&amp;amp;idx=1&amp;amp;sn=e20fd0c5ed2758cec67872b85b1b5a2c&amp;amp;chksm=f39042f0c4e7cbe6e97d88343e08915e234825faa83eab9d9360146139fc5c6d2d5465288419&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;
&lt;section&gt;
&lt;p&gt;如何成为数据极客？&lt;/p&gt;
&lt;/section&gt;
&lt;/a&gt;
&lt;/section&gt;&lt;section&gt;
&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649388742&amp;amp;idx=1&amp;amp;sn=432931e05e5984ed6001412a6235af46&amp;amp;chksm=f39042fac4e7cbec5dd2e6a6f268a5ee836d37dbd353e59e00215c7af2197b1188921856a465&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;
&lt;section&gt;
&lt;p&gt;一学就会一用却废！到底应该用ETL还是ELT？&lt;/p&gt;
&lt;/section&gt;
&lt;/a&gt;
&lt;/section&gt;&lt;section&gt;
&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649388734&amp;amp;idx=1&amp;amp;sn=619b48f9960457ae5d5b0467c221a55c&amp;amp;chksm=f3904282c4e7cb94f754e88394f09c92abc1f9903b050b750e5380b244079185ec5bbcfb9df3&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;
&lt;section&gt;
&lt;p&gt;详解维度建模之事实表&lt;/p&gt;
&lt;/section&gt;
&lt;/a&gt;
&lt;/section&gt;&lt;section&gt;
&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649388675&amp;amp;idx=1&amp;amp;sn=61011192137fb0871856702f6715d746&amp;amp;chksm=f39042bfc4e7cba94925c6cb68b2e431056e400dae0968deccc6fedf2e7372e13f07a236970b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;
&lt;section&gt;
&lt;p&gt;数据开发流程规范&lt;/p&gt;
&lt;/section&gt;
&lt;/a&gt;
&lt;/section&gt;&lt;section&gt;
&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649388618&amp;amp;idx=1&amp;amp;sn=5b2e9072a162e3502df3372d85762383&amp;amp;chksm=f3904276c4e7cb602fc3ee1102300485cf1273420e7be39d4a52a2064ee0e65a9e24df12d20a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;
&lt;/a&gt;&lt;section&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649388618&amp;amp;idx=1&amp;amp;sn=5b2e9072a162e3502df3372d85762383&amp;amp;chksm=f3904276c4e7cb602fc3ee1102300485cf1273420e7be39d4a52a2064ee0e65a9e24df12d20a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;
&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649388618&amp;amp;idx=1&amp;amp;sn=5b2e9072a162e3502df3372d85762383&amp;amp;chksm=f3904276c4e7cb602fc3ee1102300485cf1273420e7be39d4a52a2064ee0e65a9e24df12d20a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;20图学懂从0到1搭建企业级数据治理体系【建议收藏】&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8095487fccf0aeafef88e2d690b6e7ee</guid>
<title>Why not RocksDB in Streaming State?</title>
<link>https://toutiao.io/k/wkye2vn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;本文以 Apache Flink 为例，聊聊为什么 RocksDB 不是流计算引擎中理想的状态存储。Flink 中使用 RocksDB 作为大状态的存储后端，但在实际线上大规模的生产应用中，我们发现 RocksDB 和流计算场景的组合，即使在参数调优及技术优化后，也始终达不到预期的理想状态。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;背景&lt;/h1&gt;&lt;p&gt;RocksDB 是一个非常优秀的 Key-Value 存储，并且在经过 Facebook 多年的迭代和优化后，稳定性和功能的丰富性都能满足于各种主流场景的需要。我相信当开发者在进行 Embeded KV 存储选型时，RocksDB 仍然是一个很主流的选择，这可能也是为什么 Apache Flink 最初设计大状态 KeyedStateBackend 时，选择了 RocksDB 作为底层存储的原因吧（当然近年来也有不少优秀的存储如 Titan、TerarkDB 被设计出来解决新硬件和新场景下 RocksDB 不太给力的问题，在此不作讨论）。RocksDB 作为流计算引擎的状态存储，从使用者的角度来说，一般情况下并不会有很大的缺陷，但从分布式计算引擎角度来看，在实际线上大规模的生产应用中，我们会发现 RocksDB 和流计算放在一起，始终无法成为一个完美的组合。&lt;/p&gt;&lt;h1&gt;RocksDB&lt;/h1&gt;&lt;p&gt;&lt;span&gt;RocksDB&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 使用 LSM-Tree 的结构，数据以类似 Log 的方式追加写入，不断产生新文件，并通过 Compaction 合并来去除不同文件中重复、过期、已删除的 Key-Value 数据。底层文件使用 SSTable 格式，SST 文件中的 Key-Value 数据按 Key 进行排序，并以一定规则划分为多个 Data Block，并基于 Data Block 的元信息来构建 Index Block，以保证较好的读取性能。&lt;/p&gt;&lt;p&gt;SST 文件在 RocksDB 中，以不同 Level（层级）的形式来组织。数据从内存中持久化成 SST 文件后，会先存在于 L0 层，当 L0 层数据到达 Compaction 触发条件时，数据会被 compact 到 L1 层，以此类推，存活时间越长的数据，最终到达的 Level 层级会越高。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6589147286821705&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LPVpEXa2xuApNUv5GMZH2yblotfTzc5YvxljR97xjzUHf86dKCV39xqWQTfGTlxxGQQqPE642F0Jyruqx2JIgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2580&quot;/&gt;&lt;/p&gt;&lt;h2&gt;数据写入&lt;/h2&gt;&lt;p&gt;如上图所示，数据写入会经过如下的过程：序列化、API 调用、写入 Memtable、持久化到 SST 文件。RocksDB 默认（可配置）在内存中维护了 2 个 Memtable，当用户调用 RocksDB 的写入 API 时，数据会同步写入到 Memtable 中，如果 Memtable 已经写满或达到其他 flush 条件，则会转换为 Immutable Memtable，并调度 RocksDB 的 flush 线程异步对其按 Key 整理、去重等操作，并持久化成 L0 层的一个新的 SST 文件。（如果用户开启 WAL，数据会同步写入到 WAL 中）&lt;/p&gt;&lt;p&gt;这里要注意，数据的写入一定是 append-only 的，这里的写入同样包括了更新。因为 RocksDB 采用 LSM-Tree 的数据结构，所以多次写入相同 Key 的数据，会在触发 Compaction 或者 Flush 操作时进行合并，而不是直接在 Memtable 中原地更新（update in-place）。这同样适用于 Delete 操作，对于单个 Key 的删除操作，在 SST 文件中以 (Key -&amp;gt; DeleteType) 的形式存在。（Memtable 使用的数据结构默认以 Skip-List 形式存在）&lt;/p&gt;&lt;h2&gt;数据读取&lt;/h2&gt;&lt;p&gt;这里先介绍 RocksDB SST 文件在不同 Level 的特性：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;L0 层：SST 文件资身是按 Key 排序，但 L0 层的 SST 文件之间是无序的，每个 L0 层的 SST 文件之间会发生 Key Range 的重合，也就是说相同 Key 的数据可能存在于在 L0 层的每一个 SST 文件中。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;L1 ~ Ln 层：多个 L0 层的 SST 文件达到 Compaction 条件后，与若干个 L1 层文件进行 Compaction 后形成新的 L1 层 SST 文件，L1 层 SST 文件之间不会出现 Key Range 的重合，也就是说相同 Key 的数据最多只会存在于 L1 层的一个 SST 文件中（L2 ~ Ln 层同理）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;读取数据时，数据可能存在于 Memtable、Block Cache、SST 文件中。读取操作分为两种类型：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Point Lookup（点查）：先从 Memtable 和 Block Cache 中尝试获取结果，如果没有找到则会按照层级查找 SST 文件。对于 L0 层 SST 文件，先通过 KeyRange 过滤出可能包含此 Key 的 SST 文件再进行查找；再对于 L1~Ln 层的文件进行二分查找定位对应的 SST 文件并进行读取。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Range Scan：多路归并的思想，返回给用户的 Iterator 由多个 Iterator 组成：每个 Memtable、Immutable Memtable、L0 层 SST 文件、以及多个 L1 ~ Ln 层 SST 文件中构建 Iterator，并以多路归并的方式返回给用户具体的值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;上述的操作有很多默认的优化策略在此不一一列举了，比如点查操作中每个 SST 文件可以构建 bloom filter 来快速判断 Key 是否存在，遍历操作中每个 Iterator 会对底层的数据进行预读取以获得更少的 IO 次数。对于单个 SST 文件而言，它的&lt;span&gt;文件结构&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;如下所示，单个 SST 文件查询会通过对 index block 进行二分查找来定位到具体的 data block ：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;beginning_of_file&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;data block &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;// 具体的 KV 数据&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;data block &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// 具体的 KV 数据&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;data block N&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// 具体的 KV 数据&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;meta block &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; filter block&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;// Filter 信息，比如 bloom filter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;meta block &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; index block&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;              &lt;/span&gt;&lt;span&gt;// data block 对应的 index，查询中通过对 index block 进行二分查找来定位到具体的 data block &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;compression&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;range deletion&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;stats block&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;meta block K&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; future extended block&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;metaindex block&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Footer&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;                         &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;&amp;lt;end_of_file&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;Compaction 策略&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;为什么要进行 Compaction?&lt;/strong&gt;：或者说 Compaction 有什么作用，我们都知道 Compaction 是将多个文件合并成一个文件的过程，在合并过程中会进行相同 Key 的去重，过期 Key 的删除等操作。一次 Compaction 可以简单看作将 N 个文件数据读取后，经过整理再重新写一遍的过程。在这里举两个极端的例子：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;完全不发生 Compaction：SST 文件只存在于 L0 层，由于 L0 层不保证 SST 之间的 Key Range 不发生重合，所以数据读取需要访问很多 L0 层 SST 文件，在读取性能上会非常差。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;持续发生 Compaction：假如每生成一个 SST 文件，我们就将它和其他 SST 文件进行 Compaction，那么数据写入的开销则会非常大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;可以看出，Compaction 策略的不同决定了读写放大，也决定了读写的性能，所以一个合理的 Compaction 策略其实是对读写性能的平衡，针对不同场景的需求，我们应该认真考虑其场景所适合的 Compaction 策略。RocksDB 默认提供三种 Compaction 策略，每个策略的触发条件都比较复杂，原理可看对应链接，这里仅描述一下它们的特点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Leveled Compaction（默认策略）&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;：Compaction 触发频率相对高，读放大低，写放大高&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Universal Compaction&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;：Compaction 触发频率相对低，读放大高，写放大低&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;FIFO Compaction&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;：几乎不发生 Compaction，读放大高，写放大几乎没有&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;流式场景和状态访问&lt;/h1&gt;&lt;p&gt;这里以 Apache Flink 为例来看看 Streaming State 在流式场景中是如何使用的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;场景一：WordCount，统计每 60s 内，每个 word 出现的次数&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;对于每条数据：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;Window 算子根据 word 和时间戳，找到该数据所属的窗口&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;将 word、窗口标识符（即窗口起始时间和结束时间）和其他信息（如 KeyGroup）拼接成 RocksDB 的 Key 并序列化成 byte[]&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;调用 RocksDB API 读取窗口的中间结果数据并反序列化&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;使用新 word 更新中间结果&lt;/span&gt;&lt;span&gt;&lt;span&gt;5.&lt;/span&gt;序列化中间结果并调用 RocksDB API 写入&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;场景二：A 流 Join B 流，逻辑如下&lt;/strong&gt;：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;SELECT &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;FROM a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;WHERE a&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;AND a&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;time BETWEEN b&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;time &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; INTERVAL &lt;/span&gt;&lt;span&gt;&#x27;4&#x27;&lt;/span&gt;&lt;span&gt; HOUR AND b&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;对于 A 流的每条数据（B 流同理）：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;Join 算子收到 A 流数据后，遍历 B 流的状态数据列表并逐一反序列化&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;从 B 流的状态中找到符合 Join 条件的数据并拼接起来发送给下游&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;取出 A 流状态数据列表，反序列化后将新数据 append 到列表末尾&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;A 流状态数据列表重新序列化并写入&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我们发现，不管是窗口聚合还是双流 Join 的场景，&lt;strong&gt;我们可以看到状态存储的读写总是和当前数据所涉及的时间边界范围内的状态有关&lt;/strong&gt;，比如窗口聚合场景中只会对数据所在的窗口进行读写，双流 Join 场景中只会对 Join 条件中的时间范围内状态进行读取和写入，而并非像 Web 服务中的 ACID 一样去操作所有时间段的数据。这个特性点恰好也和我们常说的，越接近当前时间的数据价值越高，越久远的数据价值越低是不谋而合的。&lt;/p&gt;&lt;h1&gt;RocksDB 作为状态存储&lt;/h1&gt;&lt;p&gt;Apache Flink 目前使用 RocksDB 作为状态存储，在小状态场景下，可以使用少量冗余的资源来掩盖状态存储带来的问题；在大状态场景或是数据倾斜的场景下，我们为了流式作业的高性能吞吐需要，往往需要付出非常大的 overhead。&lt;/p&gt;&lt;h2&gt;选择哪一种 Compaction 策略？&lt;/h2&gt;&lt;p&gt;上面提到 RocksDB 内置的三种 Compaction 策略，以 &lt;strong&gt;Leveled Compaction&lt;/strong&gt; 为例，会出现以下问题：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;写放大问题&lt;/strong&gt;：Leveled Compaction 针对的是少写多读的场景，而在流式计算中，新数据的处理通常都会产生多次的状态访问和状态更新，大部分场景更接近于读写比例 1：1（比如典型的滚动窗口计算场景中间结果的 update）。频繁的数据写入会造成 Leveled Compaction 上各个层级频繁触发 Full Compaction，尤其是每次 Checkpoint 都会强制产生一个 L0 层文件，很容易就达到 Leveled Compaction 的默认触发条件。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;共振问题&lt;/strong&gt;：如果用户侧有 TaskManager 整体的 CPU 监控，我们很容易看到，每 4 个 Checkpoint 触发时间点，就会有一次 CPU 陡增的现象，并且作业的吞吐会出现明显的下降，这是因为 RocksDB 的 Leveled Compaction 默认在 L0 层的 SST 文件数量达到 4 个时就会触发 L0-&amp;gt;L1 层的 Compaction 操作，而各个 Task 的 Checkpoint 操作通常在一两分钟内同时触发，所以此时会导致 Compaction 共振问题，CPU 陡增也会影响 Task 正常的数据处理线程。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;潮汐问题&lt;/strong&gt;：通常来说，数据流量越大，RocksDB 的写入越多，Compaction 的触发越频繁。而恰好流式场景会有非常典型的潮汐现象，高峰和低峰流量往往会差好几倍，但是实际情况中，我们会发现 Compaction 的资源开销越在高峰阶段，开销越大，而真正处理作业逻辑的算力更加不够，只能通过继续增大资源的方式来缓解问题，也就造成了低峰时期的资源利用率会非常非常低。&lt;/p&gt;&lt;p&gt;对于 &lt;strong&gt;Universal Compaction&lt;/strong&gt;，会稍微好一些但仍然有类似的问题。这里我们可以着重看一下功能最少，表面看起来最鸡肋的 RocksDB 的 &lt;strong&gt;FIFO Compaction&lt;/strong&gt;，描述摘自 &lt;span&gt;wiki&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;FIFO compaction style &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; the simplest compaction strategy&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;It&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; suited &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; keeping &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt; log &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;data &lt;/span&gt;&lt;span&gt;with&lt;/span&gt;&lt;span&gt; very low overhead &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;query log &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; example&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;It&lt;/span&gt;&lt;span&gt; periodically deletes the old data&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; so it&lt;/span&gt;&lt;span&gt;&#x27;s &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;basically a TTL compaction style&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;In&lt;/span&gt;&lt;span&gt; FIFO compaction&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; all files are &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; level &lt;/span&gt;&lt;span&gt;0.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;When&lt;/span&gt;&lt;span&gt; total size of the data exceeds configured size&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;CompactionOptionsFIFO&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;max_table_files_size&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; we &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; the oldest table file&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;This&lt;/span&gt;&lt;span&gt; means that &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt; write amplification of data &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; always &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; addition to WAL write amplification&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;FIFO 的方式，其实是在 L0 层以 SST 文件的形式维护了一个“流”，存活时间越长的数据优先级越低，越有可能被 TTL 删除，这样就和流式场景比较相像了。不过使用 FIFO Compaction 策略会导致 L0 层文件过多，数据读取性能变差，RocksDB 也提供了一些非常简易的 Compaction 策略来缓解这一问题，我们也可以通过增加 bloom filter + cache 的形式来减少数据查询的文件 IO 次数。&lt;/p&gt;&lt;p&gt;在我看来 FIFO 是三者中最适合流式场景的 Compaction 策略，但是由于没有和 Flink 内部机制打通（比如 TTL 两边不对齐），可能会出现数据丢失的风险，我们也不推荐用户进行使用。（当然，我们可以通过 RocksDB 的 API 来自定义 Compaction 策略，或者去稍微改改 Flink or RocksDB 的源码以满足需求）&lt;/p&gt;&lt;h2&gt;Embeded Storage 和分布式计算&lt;/h2&gt;&lt;p&gt;RocksDB 是 Embeded Storage，Embeded 也就意味着在分布式计算应用中，每个 Task 维护的 DB 实例是相互隔离的，很难拿到一个&lt;strong&gt;全局视角&lt;/strong&gt;以做出最优的方案。关于状态存储，我在 &lt;span&gt;Hazelcast Jet 论文&lt;sup&gt;[7]&lt;/sup&gt;&lt;/span&gt; 中有提到过 Embeded 和 Distributed Storage 的对比，这里从另一个角度讲讲。&lt;/p&gt;&lt;p&gt;以上面提到的 Compaction 共振问题为例，如果我们像 HBase 一样，可以通过 jitter（抖动因子参数）将各个 Compaction 操作的时间错开，那么我们看到的作业输出可能是平稳且符合预期的。除此之外，扩缩容问题也是类似的，Apache Flink 中作业的扩缩容，对应着状态扩缩容示意图如下：&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6453703703703704&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/LPVpEXa2xuApNUv5GMZH2yblotfTzc5Yme10OzrlHN9kgPmR4Yde31pLofTWDZeJicKRa35R1DjLT99uhpcnicew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;rocksdb-state-rescale&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;假设算子最大允许存在 6 个 KeyGroup（任何数据都会被映射到 6 个 KeyGroup 范围内），缩容前这个算子有 3 个 Task，分别负责 {1,2}，{3,4}，{5,6} 三个 KeyGroup 的数据处理，在算子并行度从 3 调整为 2 后，新的 2 个 Task 需要处理 6 个 KeyGroup 的数据，则对应负责的 KeyGroup Range 就变成了 {1,2,3} 和 {4,5,6}。这也是流式计算中应对扩缩容的通用做法，每个 Task 会负责一定 KeyGroup Range 内的数据处理，在进行扩缩容时，KeyGroup Range 会根据 Task 的数量进行重新分配，相对应的，每个 Task 负责的 KeyGroup Range 发生变化，也就意味着之前不同 Task 中 RocksDB 实例之间需要进行数据迁移和合并。从单机存储的设计角度来考虑，在设计之初便是为了服务于单机场景，往往不会为这种扩缩容情况作过多考虑（更别提流式计算这类对扩缩容耗时敏感的场景了）。&lt;/p&gt;&lt;h2&gt;资源竞争&lt;/h2&gt;&lt;p&gt;资源竞争的问题上面已经提到，RocksDB flush 线程和 compaction 线程所用的 CPU 资源，会和作业处理数据线程的 CPU 资源产生竞争。分布式计算任务，部署在 Yarn 或者 K8s 上，为了保证其他资源（如 Memory）不到达瓶颈，通常部署的一个实例（container）上 CPU 数不会特别多，也就是个位数的级别。在这种情况下，RocksDB 的异步操作对于作业处理产生的资源竞争影响就会非常大。当然，RocksDB 的 Compaction 线程会被设置为 low-priority，但这在流式场景中数据持续流入的情况下并不起太大的作用，而且当 Compaction 过于滞后时，RocksDB 会出现 Write Stall 等现象，让 Task 的处理线程在短时间内完全 hang 住。&lt;/p&gt;&lt;h2&gt;其它&lt;/h2&gt;&lt;p&gt;除了上述问题，篇幅原因，在这里简要概括过去在工作中遇到过的其他问题（或是在流式场景中可以改进的问题）：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;序列化&lt;/strong&gt;：在 Flink 的使用下，RocksDB 并不能很好地处理 Read-Modify-Write 的场景，尤其是用户数据结构较为复杂时，现象会非常明显，一次 Update 即意味着一次读取时的反序列化和一次写入时的序列化，很多用户自定义 UDAF 时不注意存储数据结构的复杂度，这里很容易出现瓶颈。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;压缩&lt;/strong&gt;：数据的压缩和解压缩，同上。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;小文件&lt;/strong&gt;：频繁 update，造成生成的 SST 文件都是小文件。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;时间语义&lt;/strong&gt;：缺乏丰富的时间语义（比如事件时间）&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;retract&lt;/strong&gt;：retract 操作会造成大量 delete 从而降低 scan 和 seek 的性能 ....&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;p&gt;本文主要介绍了 RocksDB 的相关原理和与流式场景结合时存在的若干问题。这并不影响用户继续使用 RocksDBStateBackend 作为大状态的存储后端，只是期待未来会有一个跟流式场景更加贴合的 Storage 吧，可能是 Embeded Storage，也可能是 Distributed Storage，随着流式场景越来越流行，这件事情一定会有人在做或者即将准备做的。&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; RocksDB: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/RocksDB-Overview&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 文件结构: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/Rocksdb-BlockBasedTable-Format#file-format&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; Leveled Compaction（默认策略）: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/Leveled-Compaction&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; Universal Compaction: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/Universal-Compaction&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; FIFO Compaction: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/FIFO-compaction-style&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; wiki: &lt;em&gt;https://github.com/facebook/rocksdb/wiki/FIFO-compaction-style&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[7]&lt;/code&gt; Hazelcast Jet 论文: &lt;em&gt;http://www.liaojiayi.com/Hazelcast-jet/&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>