<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1a67e1905eb23a4b08d5d94d29cdd13a</guid>
<title>八万字《高并发的哲学原理》第二章：Apache 的性能瓶颈与 Nginx 的性能优势</title>
<link>https://toutiao.io/k/t6a635o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h3&gt;本文共 5000 字，阅读大约需要 17 分钟。&lt;/h3&gt;&lt;hr/&gt;&lt;p&gt;每一名后端开发可能都知道 Nginx 比 Apache 性能强，但是为什么强，强在哪里，接下来我们动手实验解答这个问题。&lt;/p&gt;&lt;h2&gt;Nginx 利用了新的 Linux kernel API&lt;/h2&gt;&lt;p&gt;Nginx 利用了 Linux 内核引入的 epoll 事件驱动 API，大幅降低了海量 TCP 连接下的 CPU 负载，提升了单个系统的 TCP 响应容量，这是 Nginx 性能更好的本质原因：时代在进步。&lt;/p&gt;&lt;p&gt;每一篇技术文章都会说，Nginx 的 epoll 比 Apache 的 select 性能高，但为什么，却几乎没人解释。下面我来尝试解释。&lt;/p&gt;&lt;h3&gt;epoll 简单解释&lt;/h3&gt;&lt;p&gt;众所周知，epoll 是一种高性能事件驱动 IO 多路复用机制，那他和 select 这种原始 IO 多路复用机制比有什么优势呢？简单来说，就是：转守为攻。&lt;/p&gt;&lt;p&gt;epoll 化被动为主动，以前需要两次遍历才能实现的网络数据包和线程的匹配，现在通过事件驱动的方式主动献上指针，性能暴增。这就像云原生时代的 Prometheus 监控：化主动上传为被动查询，大幅提升单个采集节点的性能上限，成功解决了监控领域的高并发性能问题。&lt;/p&gt;&lt;p&gt;在 5K 个 TCP 连接的情况下，每收到一个数据包，Nginx 找到对应线程的速度比 Apache 高了两个数量级，即便是 event 模式下的 Apache，性能依然远低于 Nginx，因为 Nginx 就是专门为“反向代理”设计的，而 Apache 本质是个 web 应用容器，无法做到纯粹的事件驱动，性能自然无法和 Nginx 相比。&lt;/p&gt;&lt;h3&gt;Apache 的原始并发模型&lt;/h3&gt;&lt;p&gt;Apache 支持三种进程模型：&lt;code&gt;prefork&lt;/code&gt;、&lt;code&gt;worker&lt;/code&gt; 和 &lt;code&gt;event&lt;/code&gt;，在此我们简单讨论一下这三种模式的优缺点。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;prefork 是进程模式，需要消耗更多的内存，每次接到一段新的数据，需要使用 &lt;code&gt;select&lt;/code&gt; 模型，遍历 &lt;code&gt;TCP连接数 x 进程数&lt;/code&gt; 这么多次才能找到匹配的进程，在数千个 TCP 连接下，光是寻找线程就需要消耗掉一个 CPU 核心，单机性能达到极限，无法利用更多的 CPU 资源&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;worker 是线程模式，依旧使用 &lt;code&gt;select&lt;/code&gt; 模型来遍历 TCP 请求和线程，性能上限和 prefork 一致，区别是内存消耗量有了一些降低，初始 TCP 承载能力稍好，请求数突然增加的场景下，开新线程的速度反而比 prefork 更慢，且基础延迟比 prefork 模式更高&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;event 模式采用和 Nginx 一致的 &lt;code&gt;epoll&lt;/code&gt; 模型承载，理论上表现和 Nginx 一致，但由于 Apache 大概率和 mod_php（插件）模式的 PHP 一起部署，由于 PHP 阻塞运行的特性，性能和上面两兄弟并无明显区别。而且即便是 event 模式下的 Apache，性能依然远低于 Nginx。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;接下来我们使用 jmeter 测试一下 prefork、worker、event 三种模式的性能。&lt;/p&gt;&lt;h2&gt;压力测试&lt;/h2&gt;&lt;h3&gt;测试环境&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;客户端：&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;macOS&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Java 19.0.1&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;i5-10400 6 核 12 线程&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;32GB 内存&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;千兆有线网络&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;软件环境&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;服务端：&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Laravel 9.19&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;给默认路由增加 sleep 500ms 的代码，模拟数据库、Redis、RPC、cURL微服务等场景&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;执行 &lt;code&gt;php artisan optimize&lt;/code&gt; 后测试&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;CentOS Stream release 9&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;kernel 5.14.0-200.el9.x86_64&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Apache/2.4.53&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Nginx/1.20.1&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;PHP 8.0.26&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;物理服务器 E5-2682V4 2.5GHz 16 核 32 线程 * 2 （阿里云 5 代 ECS 同款 CPU）256GB RAM&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;虚拟机 64 vCPU （赋予了虚拟机所有母鸡的 CPU 资源）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;虚拟机内存 32GB&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;软件环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;PHP 环境：&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;测试代码&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;Route::get(&#x27;/&#x27;, function () {&lt;br/&gt;usleep(500000);&lt;br/&gt;return view(&#x27;welcome&#x27;);&lt;br/&gt;});&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;IfModule mpm_prefork_module&amp;gt;&lt;br/&gt;    StartServers         100&lt;br/&gt;    MinSpareServers      5&lt;br/&gt;    MaxSpareServers      100&lt;br/&gt;    MaxRequestWorkers    500&lt;br/&gt;    MaxRequestsPerChild  100000&lt;br/&gt;&amp;lt;/IfModule&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;pm = static&lt;br/&gt;pm.max_children = 500&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;试验设计&lt;/h3&gt;&lt;p&gt;我们将测试三种配置下的性能表现差异：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Apache 标准模式：prefork + mod_php 插件式运行 PHP&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Nginx + php-fpm 专用解释器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Nginx 作为 HTTP 反向代理服务器后接 Apache（prefork 模式 + mod_php 插件式运行 PHP）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;请求计划&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;客户端新线程开启后，每隔 5 秒发送一个请求&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;jmeter 用 50 秒开 5000 个线程，持续压测 100 秒，最大请求 QPS 为 1000&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;为什么这么设计？&lt;/h3&gt;&lt;p&gt;单独对比 Nginx 和 Apache 性能的文章很多，数据结果也大同小异，无非是 Nginx 的 QPS 更高，但是为什么却没人回答，我本次的实验设计就是要回答这个问题。&lt;/p&gt;&lt;h4&gt;Apache 标准模式：prefork + mod_php&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41896024464831805&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qehPQXlzsA0E4l9ZfWiaFsu5pm0sCHwBBFV8w564DR5m0Oxq2fJXtOUoOUcb0edQ9R93uUad2Jb8NmhntJWv3Nw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2616&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3394607843137255&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qehPQXlzsA0E4l9ZfWiaFsu5pm0sCHwBBeP4IzPcs30k8GBKgJSDCpk882oP1C8icoyALSf2W2kIANjrp3fTTrSQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3264&quot;/&gt;&lt;/p&gt;&lt;h4&gt;nginx + php-fpm&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4271548436308162&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qehPQXlzsA0E4l9ZfWiaFsu5pm0sCHwBBwibhVU3ic463zw9c2vHdCvg6gMWoGGak5Z8hCxibmNfPczibPkroZp1z5g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2622&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3412264723740134&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qehPQXlzsA0E4l9ZfWiaFsu5pm0sCHwBBPYtibmYpL5rHjlenZ0OO90ZefwT4HC1hd6Z4bic4XDM2wy4ibianeqG3zg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3294&quot;/&gt;&lt;/p&gt;&lt;h4&gt;nginx 反向代理 Apache 标准模式&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3432926829268293&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qehPQXlzsA0E4l9ZfWiaFsu5pm0sCHwBBCh5ib4FCpE6pWIzVsUFspNR1rhFmd9IgGT08UsB9xxmxRlpLeSA0UOg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3280&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42605363984674327&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qehPQXlzsA0E4l9ZfWiaFsu5pm0sCHwBBSfForp0FJAcb6GEUiamnspicXcx3v6HpFv4Rv1KU21CxGGOGgEP5GNHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2610&quot;/&gt;&lt;/p&gt;&lt;h3&gt;结果分析&lt;/h3&gt;&lt;p&gt;我们可以很明显地看出，Apache + prefork 的问题在于它对数千个 TCP 连接的处理能力不足。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Nginx + fpm 一共发出了 59146 个请求，成功了五万个&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Nginx + Apache 一共发出了 56464 个请求，成功了五万两千个，比 fpm 还多一些&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;fpm 模式最大 QPS 为 800 但比较稳定，Nginx + Apache 最大 QPS 1000 但不够稳定&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;至于 Apache 标准模式，显然它的技术架构不足以处理 5000 个 TCP 连接下 1000 QPS 的状况，QPS 低且不稳定，错误率高达 43%&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;结论：&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Nginx 处理海量用户的海量 TCP 连接的能力超群&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提升 Apache 性能只需要在前面加一个 Nginx 作为 HTTP 反向代理即可，因为此时 Apache 只需要处理好和 Nginx 之间的少量 TCP 连接，性能损耗较小&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;php-fpm 和 mod_php 在执行 PHP 的时候没有任何性能差异&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Nginx epoll 和 Apache prefork 模型相比，优势劣势如下：&lt;/h4&gt;&lt;h4&gt;优势&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Nginx 每个 worker 进程可以 handle 上千个 TCP 连接，消耗很少的内存和 CPU 资源，可以让单台服务器承接比 Apache 多两个数量级的用户量，相比于 Apache 单机 5K 的 TCP 连接数上限（对应的是 2000 个在线用户），是一个巨大的进步&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Nginx 对 TCP 的复用使它非常善于应对海量客户端的直接连接，根据我的实测，在 HTTP 高并发下 Nginx 的活跃 TCP 连接数可以做到 Apache 的五分之一，而且用户量越高，复用效果越好&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在架构上，基于 FastCGI 网络协议进行架构扩展，也可以更轻易地利用多台物理服务器的并行计算能力，提升整个系统的性能上限&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;劣势&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;在低负载下，Nginx 事件驱动的特性使得每个请求的响应时长比 Apache prefork 模式略长一些（14ms vs 9ms）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;我的真实经验&lt;/h3&gt;&lt;h4&gt;新冠时期的&lt;span&gt;爱情&lt;/span&gt;机遇&lt;/h4&gt;&lt;p&gt;疫情初期，我司的私域电商业务兴起于草莽之间，在 3 月中旬才上班的情况下，半个月的 GMV 超过了前面一年，4 月就完成了全年目标，电商系统性能压力陡增。&lt;/p&gt;&lt;p&gt;当时我们的电商系统是购买的一个 PHP 单体系统，天生不具有扩展性，外加业务模式是团购秒杀，可要了亲命了。客户端为微信小程序，服务端主要提供两种业务：开团瞬间的海量 HTTP API 请求，以及每一个页面都非常消耗资源的订单管理后台。&lt;/p&gt;&lt;p&gt;当时我面临的第一个问题是数据库顶不住，我找到请求数最高的接口：商品详情，为它增加了一层保持时长为一分钟的 Redis 缓存，开团瞬间数据库的压力降低了很多。&lt;/p&gt;&lt;p&gt;而且幸运的是当时阿里云刚刚将 PolarDB 商用几个月，我用它顶住了开团三分钟内涌入的大约 4000 名用户，但是当我把虚拟机升级到 16 核 32G 内存的时候出现了一个非常诡异的现象：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;CPU 和内存占用率分别只有 8% 和 6%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;但大量的新用户就是无法建立 TCP 连接，首次连接的客户端表现为长时间的等待&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果运气好在等待一段时间后成功进去了，那访问便会一直如丝般顺滑，每个接口的返回时间都非常短&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这是为什么呢？这是因为新用户无法和服务器建立 TCP 连接！&lt;/p&gt;&lt;p&gt;默认情况下，CentOS 7.9 的最大文件打开数（ulimit）为 1024，一切皆文件，每个 TCP 连接也是一个文件，所以也被锁定在了 1024 个。一般大家都会把这个数字设置为 65535，但是我观察到，这台虚拟机此时的 TCP 连接数只能跑到 5-6K 之间，远远达不到用户的需求，无论是采用 prefork、worker 还是 event 都是这样。而原因就是我们上面实测过的：此时 Apache 花费了一颗核心的全部时间片来进行数据包和线程的匹配，已经忙不过来了。&lt;/p&gt;&lt;p&gt;后来，我在这台机器上安装了一个 Nginx，反向代理全部的用户请求再发送给 Apache：请求一下子舒畅了，而且 Nginx 使用的最大活跃 TCP 连接数量也只有 1K，就完全满足了三分钟 4000 用户的需求。&lt;/p&gt;&lt;h3&gt;还记得我们的目标吗？一百万 QPS&lt;/h3&gt;&lt;p&gt;在 2022 年的主流云服务器硬件上，经过 OPCache 性能优化的 PHP 应用，只需要 2 vCore 便可以达到 5K 的单机 Apache TCP 上限，此时 QPS 在 200 左右，单纯提升核心数量无法让这个数字大幅增加。而通过使用 Nginx，我们可以将单系统的 QPS 上限从 200 提升到 1000。&lt;/p&gt;&lt;h3&gt;接下来&lt;/h3&gt;&lt;p&gt;下一篇文章，我们将讨论基础设施层面的并发：虚拟机和 k8s 技术。同时我会继续现身说法，讲述我为自研团购秒杀系统设计的架构，我称它为百亿架构（年 GMV 百亿之前不用换架构）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本系列文章已经汇总成开源技术书《PPHC》发布在 Github：https://github.com/johnlui/PPHC&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3130128956623681&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qehPQXlzsA0E4l9ZfWiaFsu5pm0sCHwBBGwtLicIkM60XCWrVrCrR8CU00w5FUbv9v2NFibo7ntArsahJEDvBj4Kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1706&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0c300b49bc910a4d00f3812078b183a8</guid>
<title>还在用 JS 做节流吗？CSS 也可以防止按钮重复点击</title>
<link>https://toutiao.io/k/0xewo67</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;众所周知，函数节流（throttle）是 JS 中一个非常常见的优化手段，可以有效避免函数过于频繁的执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：一个保存按钮，为了避免重复提交或者服务器考虑，往往需要对点击行为做一定的限制，比如只允许每&lt;code&gt;300ms&lt;/code&gt;提交一次，这时候我想大部分同学都会到网上直接拷贝一段&lt;code&gt;throttle&lt;/code&gt;函数，或者直接引用&lt;code&gt;lodash&lt;/code&gt;工具库&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;btn.addEventListener(&lt;span&gt;&#x27;click&#x27;&lt;/span&gt;, _.throttle(save, &lt;span&gt;300&lt;/span&gt;))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实除了 JS 方式， CSS 也可以非常轻易实现这样一个功能，无需任何框架库，一起看看吧&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;一、CSS 实现思路分析&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CSS 实现和 JS 的思维不同，需要从另一个角度去看待这个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这里的需要对点击事件进行限制，也就是禁用点击事件，想想有什么方式可以禁用事件，没错，就是&lt;code&gt;pointer-events&lt;/code&gt;;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是时间的限制，每次点击后需要自动禁用&lt;code&gt;300ms&lt;/code&gt;，时间过后重新恢复，那么，有什么特性和时间以及状态恢复有关呢？没错，就是&lt;code&gt;animation&lt;/code&gt;;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，还需要有触发时机，这里是点击行为，所以必然和伪类&lt;code&gt;:active&lt;/code&gt;有关联。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，综合分析，实现这样一个功能需要用到&lt;code&gt;pointer-events&lt;/code&gt;、&lt;code&gt;animation&lt;/code&gt;以及&lt;code&gt;:active&lt;/code&gt;，那么如何将这些思路串联起来呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38425925925925924&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xvBbEKrVNtKia3QdkXxrx7Sr8Vzqk6dLyCChY5jsIe9zM1ljKViaxGrusBWhOMeRucgWXjK2WYlhm8ydfxia1Kedg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思考3秒...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;🤔&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;🤔&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;🤔&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你想到了吗？💡💡💡&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这种场景可以理解成是&lt;strong&gt;对 CSS 动画的控制&lt;/strong&gt;，比如有一个动画控制按钮从&lt;strong&gt;禁用&lt;/strong&gt;-&amp;gt;&lt;strong&gt;可点击&lt;/strong&gt;的变化，每次点击时让这个动画重新执行一遍，在执行的过程中，一直处于&lt;strong&gt;禁用&lt;/strong&gt;状态，是不是就达到了“节流”的效果了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来看看具体实现&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、CSS 动画的精准控制&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设有一个按钮，绑定了一个点击事件&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onclick&lt;/span&gt;=&lt;span&gt;&quot;console.log(&#x27;保存&#x27;)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;保存&lt;span&gt;&amp;lt;/&lt;span&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时的按钮连续点击就会不断地触发，效果如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4564814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xvBbEKrVNtKia3QdkXxrx7Sr8Vzqk6dLy8sj3SvawwahAwNDNEoVia3SqvajSwdbhicI7hQT9dS4CjWeUuBnOEq9A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面定义一个关于&lt;code&gt;pointer-events&lt;/code&gt;的动画，就叫做 &lt;code&gt;throttle&lt;/code&gt; 吧&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@keyframes&lt;/span&gt; throttle {&lt;br/&gt;  &lt;span&gt;from&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;pointer-events&lt;/span&gt;: none;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;to&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;pointer-events&lt;/span&gt;: all;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很简单吧，就是从&lt;strong&gt;禁用&lt;/strong&gt;到&lt;strong&gt;可点击&lt;/strong&gt;的变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，将这个动画绑定在按钮上，这里为了方便测试，将动画设置成了&lt;code&gt;2s&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;button&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;animation&lt;/span&gt;: throttle &lt;span&gt;2s&lt;/span&gt; step-end forwards;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，这里动画的缓动函数设置成了阶梯曲线，&lt;code&gt;step-end&lt;/code&gt;，它可以很方便控制&lt;code&gt;pointer-events&lt;/code&gt;的变化时间点。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有兴趣的可以参考这篇文章：&lt;span&gt;CSS3 animation属性中的steps功能符深入介绍 « 张鑫旭-鑫空间-鑫生活 (zhangxinxu.com)&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下示意，&lt;code&gt;pointer-events&lt;/code&gt;在0~2秒内的值都是&lt;code&gt;none&lt;/code&gt;，一旦到达2秒，就立刻变成了&lt;code&gt;all&lt;/code&gt;，由于是&lt;code&gt;forwards&lt;/code&gt;，会一直保持&lt;code&gt;all&lt;/code&gt;的状态&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5231481481481481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xvBbEKrVNtKia3QdkXxrx7Sr8Vzqk6dLypH7AiceEZug43qz5XGHaIxIZr4ib7icAygBNge2kz0W7fF97rd5lvhdNg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;figcaption&gt;&lt;span&gt;最后，在点击时重新执行一遍动画，只需要在按下时设置动画为&lt;/span&gt;&lt;code&gt;none&lt;/code&gt;&lt;span&gt;就行了&lt;/span&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这个技巧之前在这篇文章中有更详细的介绍：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyMDc1NTYxNg==&amp;amp;mid=2247483991&amp;amp;idx=1&amp;amp;sn=4cd152d5b7d949a4a5e012eac7035aa5&amp;amp;chksm=97c66198a0b1e88e4cb35c5f7f49849fb7a2a27835ff06ed22103aadfb23eeceb0bb9d612ece&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;CSS 实现按钮点击动效的套路&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;CSS 实现按钮点击动效的套路&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;:active&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;animation&lt;/span&gt;: none;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了演示方便，我们暂时把颜色变化也加在动画里&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@keyframes&lt;/span&gt; throttle {&lt;br/&gt;  &lt;span&gt;from&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;color&lt;/span&gt;: red;&lt;br/&gt;    &lt;span&gt;pointer-events&lt;/span&gt;: none;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;to&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;color&lt;/span&gt;: green;&lt;br/&gt;    &lt;span&gt;pointer-events&lt;/span&gt;: all;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在如果文字是&lt;code&gt;red&lt;/code&gt;，表示是禁用态，只有是&lt;code&gt;green&lt;/code&gt;，才表示可以被点击，非常清晰明了，如下&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.415&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xvBbEKrVNtKia3QdkXxrx7Sr8Vzqk6dLyZAbml5NY8tXQgOLH0icKK5f8Picgv9W0OibeJOHMYZMuF2oxX5t9SgArw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是最终点击对比效果，很好地限制了点击频率&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.462992125984252&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xvBbEKrVNtKia3QdkXxrx7Sr8Vzqk6dLyAXmTk7ibc8PFbrGsHXickmlQF5MQtYHzp3fEpTZG1sTlicNj0agDWObLA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1270&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整代码如下，就这么几行，&lt;strong&gt;如果需要改限制时间，直接改动画时间就行了&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;button&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;animation&lt;/span&gt;: throttle &lt;span&gt;2s&lt;/span&gt; step-end forwards;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;:active&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;animation&lt;/span&gt;: none;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;@keyframes&lt;/span&gt; throttle {&lt;br/&gt;  &lt;span&gt;from&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;pointer-events&lt;/span&gt;: none;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;to&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;pointer-events&lt;/span&gt;: all;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你也可以查看以下任意链接：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CSS throttle (codepen.io)&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CSS throttle - 码上掘金 (juejin.cn)&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CSS throttle (runjs.work)&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、CSS 实现的其他思路&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还记得之前这一篇文章吗？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyMDc1NTYxNg==&amp;amp;mid=2247486014&amp;amp;idx=1&amp;amp;sn=e99c4311196e37e24303c565efdde212&amp;amp;chksm=97c669f1a0b1e0e7dc368f35b049538eec02364bb8efc69f963c1583405e4b5a79011220e34e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;还在用定时器吗？借助 CSS 来监听事件&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;还在用定时器吗？借助 CSS 来监听事件&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;借用这种思路，也可以很轻松实现节流的效果。而且为了更好的体验，可以用上真正的按钮禁用&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;btn.disabled = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体思路是这样的，通过&lt;code&gt;:active&lt;/code&gt;去触发&lt;code&gt;transition&lt;/code&gt;变化，然后通过监听&lt;code&gt;transition&lt;/code&gt;回调去动态设置按钮的禁用状态，实现如下&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义一个无关紧要的过渡属性，比如&lt;code&gt;opacity&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;button&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;opacity&lt;/span&gt;: .&lt;span&gt;99&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;transition&lt;/span&gt;: opacity &lt;span&gt;2s&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;:not(&lt;/span&gt;&lt;span&gt;:disabled)&lt;/span&gt;&lt;span&gt;:active&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;opacity&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;transition&lt;/span&gt;: &lt;span&gt;0s&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后监听&lt;code&gt;transition&lt;/code&gt;的起始回调&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 过渡开始&lt;/span&gt;&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.addEventListener(&lt;span&gt;&#x27;transitionstart&#x27;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;ev&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;  ev.target.disabled = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;// 过渡结束&lt;/span&gt;&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.addEventListener(&lt;span&gt;&#x27;transitionend&#x27;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;ev&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;  ev.target.disabled = &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样做的最大好处是，&lt;strong&gt;这部分禁用的逻辑是完全和业务逻辑是解耦的&lt;/strong&gt;，可以在任意时候，任意场合下无缝接入，也不受框架和环境影响，效果如下&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4697406340057637&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xvBbEKrVNtKia3QdkXxrx7Sr8Vzqk6dLyDR1AqJmpQA9UgoOoZk5Qh9FIHpByUmicQx7rfobFicyQQkhbravd5vicA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1388&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整代码也可以查看以下任意链接：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CSS throttle disabled (codepen.io)&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CSS throttle disabled - 码上掘金 (juejin.cn)&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CSS throttle disabled (runjs.work)&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;四、总结一下&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上通过 CSS 的思路实现了类似“节流”的功能，相比 JS 实现而言，实现更精简、使用更简单，没有框架限制，下面一起总结一下实现要点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;函数节流是一个非常常见的优化方式，可以有效避免函数过于频繁的执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CSS 的实现思路和 JS 不同，重点在于在于找到和该场景相关联的属性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CSS 实现“节流”其实就是控制一个动画的精准控制，假设有一个动画控制按钮从&lt;strong&gt;禁用&lt;/strong&gt;-&amp;gt;&lt;strong&gt;可点击&lt;/strong&gt;的变化，每次点击时让这个动画重新执行一遍，在执行的过程中，一直处于&lt;strong&gt;禁用&lt;/strong&gt;状态，这样就达到了“节流”的效果&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;还可以通过 transition 的回调函数动态设置按钮禁用态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这种实现的好处在于禁用逻辑和业务逻辑是完全解耦的&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，这种实现方式还是比较有局限的，仅限于点击行为，像很多时候，节流可能会用在滚动事件或者键盘事件上，像这些场景就用传统方式实现就行了。最后，如果觉得还不错，对你有帮助的话，欢迎&lt;span&gt;点赞、收藏、转发❤❤❤&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section label=&quot;Copyright © 2016 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownPayStyle(&#x27;shifu_t_042&#x27;)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;Node 社群&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89226&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我组建了一个氛围特别好的 Node.js 社群，里面有很多 Node.js小伙伴，如果你对Node.js学习感兴趣的话（后续有计划也可以），我们可以一起进行Node.js相关的交流、学习、共建。&lt;/span&gt;&lt;span&gt;下方加 考拉 好友回复「Node」即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwsF7OKB4iaaXAzQPbNstk2LybA0Zz5I1hiaiazE9W7WH2Ojt2dibDODWMVUmHqgfXCefVwt7z5ibNMWLvg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;578.2649006622516&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;700.2119205298013&quot; data-fileid=&quot;100016913&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2093425605536332&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwvFQgO67XibvUG5S2UMXwCghOuJvE8BFRzUXnCAfWXkU1qHld6Ly9xiarib3siaWicJWJ0U3lI8kSgD38w/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;span&gt; “分享、点赞&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;在看” 支持一波👍&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;&lt;strong&gt;CSS3 animation属性中的steps功能符深入介绍 « 张鑫旭-鑫空间-鑫生活 (zhangxinxu.com):&lt;/strong&gt; &lt;em&gt;https://www.zhangxinxu.com/wordpress/2018/06/css3-animation-steps-step-start-end/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;&lt;strong&gt;CSS throttle (codepen.io):&lt;/strong&gt; &lt;em&gt;https://codepen.io/xboxyan/pen/rNKmmVq&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;&lt;strong&gt;CSS throttle - 码上掘金 (juejin.cn): &lt;/strong&gt;&lt;em&gt;https://code.juejin.cn/pen/7164961819369570345&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;&lt;strong&gt;CSS throttle (runjs.work): &lt;/strong&gt;&lt;em&gt;https://runjs.work/projects/47885939389440f4&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;&lt;strong&gt;CSS throttle disabled (codepen.io):&lt;/strong&gt; &lt;em&gt;https://codepen.io/xboxyan/pen/oNyWwvB&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;&lt;strong&gt;CSS throttle disabled - 码上掘金 (juejin.cn): &lt;/strong&gt;&lt;em&gt;https://code.juejin.cn/pen/7164994189032161311&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;&lt;strong&gt;CSS throttle disabled (runjs.work): &lt;/strong&gt;&lt;em&gt;https://runjs.work/projects/41e8b998624743fc&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>589a749877abb7770d1fb1a7b5be4607</guid>
<title>Flink CEP 在抖音电商的业务实践</title>
<link>https://toutiao.io/k/202x730</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;本文整理自抖音电商实时数仓研发工程师张健，在 FFA 实时风控专场的分享。本篇内容主要分为四个部分：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Flink CEP 简介&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;业务场景与挑战&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;解决方案实践&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;未来展望&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Tips：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;点击&lt;/span&gt;&lt;strong&gt;&lt;span&gt;「阅读原文」&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;查看原文视频&amp;amp;演讲 ppt&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAeloEimmReQAAAAstQy6ubaLX4KHWvLEZgBPEjIEIeRAQTt2BzNPgMIsrQKYBIc92sAR8eOb9e94G&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqzklJwcvUIj0YVcpoPeeib3BdicjSMVczic8oFgpLGzxp89ETjdRIeAQs2OX0tWDI7NvQOUbrggVPcQ1UuDMnEibcCibg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibDibreXTEOUJ5uTg1Fiaq5xUu9yiammhgVbwAhTUT31DdYBPPn5vgflgpvWELyrCCdFQU&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/XxT9TiaJ1ibf3rFKHtt2yXrJpCDia37R3rjlyd6wzzicd55QmIWDrKHqRA/0&quot; data-username=&quot;v2_060000231003b20faec8c7e7881dc1dccd00ea35b077960b9c6a44e8a5c5efa3651fa144024c@finder&quot; data-nickname=&quot;ApacheFlink&quot; data-desc=&quot;Flink CEP 在抖音电商的业务实践｜张健 #FFA2022&quot; data-nonceid=&quot;12511278105074252795&quot; data-type=&quot;video&quot; data-authiconurl=&quot;https://dldir1v6.qq.com/weixin/checkresupdate/auth_icon_level1_ba9f2ea346de48a3ae0428273fc48117.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p cid=&quot;n15&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;Flink CEP 简介&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n15&quot; mdtype=&quot;heading&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n17&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrbJSPye3wIgjRducQY3JOE1IMb9M7mictyib9M9N5hqJ46R5p150nFvicg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Flink CEP 是基于 Flink Runtime 构建的复杂事件处理库，它擅长处理跨多个事件的复杂规则匹配场景。例如检测用户下单后，是否超过半个小时没有发生支付行为；检测用户进入直播间后，是否有浏览商品随后加入购物车行为。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Flink CEP 有以下优势：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持跨多事件的规则匹配计算；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持精准一次计算语义；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;低延迟、&lt;/span&gt;高吞吐等特性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 cid=&quot;n29&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p cid=&quot;n29&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;业务场景与挑战&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n29&quot; mdtype=&quot;heading&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着抖音电商业务逐渐趋于稳定和成熟，抖音电商实时数仓团队接到的实时数据规则类业务需求也逐步增多，因此我们开始尝试使用 Flink CEP 来支持这些业务场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面列举两个典型的业务场景，并介绍一下 Flink CEP 在这些场景中遇到的一些挑战。&lt;/span&gt;&lt;/section&gt;&lt;h3 cid=&quot;n35&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 cid=&quot;n35&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.1 业务背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n37&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLr9ClABibGG7vegia6PA5auEovyHfwxEWwK9uW8CdI5sXRUxeIprb2nk0g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一是实时预警场景，它是非常典型的业务诉求，把用户看数据的方式从大屏“盯盘”转换为“根据规则检测结果，主动推送”，这无疑对一些关键业务问题的发现和洞察起到至关重要的作用。有如下三个具体案例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;直播实时检测场景。当检测到 10 分钟内观看人数持续下跌的直播间时，实时把消息推送给直播达人，方便其及时做出直播策略的调整。比如调整讲解商品的话术，发放粉丝礼物等等，进而提升转化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实时风控的场景。当检测到有用户 30 分钟内创建了多笔订单，均未支付的情况，这个用户大概率是一个刷单用户。我们会将这个用户实时推送给平台治理同学，并做出相应的封禁处置，促进平台的整体生态健康。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;售后咨询场景。当检测到一个用户发起咨询后，超过 30 分钟都未得到回复，会立即通知相关的客服人员及时回复，提升整体的用户体验。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二是实施营销场景，它是基于实时数据驱动，根据定义的规则策略挖掘目标群体，并根据业务目标做出精准营销投放的营销活动。有如下三个具体案例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实时发券场景。针对一些价格比较高的商品，当检测到用户下单后超过 30 分钟没有支付，那么该用户很有可能是觉得价格太高，所以一直犹豫要不要支付。这个时候可以及时给这个用户发放一些优惠券刺激购买，从而提升平台的转化率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;帮助商家及时发现爆款商品场景。当检测到某款商品在五分钟内成交超过 1000 单时，会实时将这个商品的名称、品牌、库存等信息推送给商家，以便商家及时补货、直播间挂链接等行为，提升运营效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在线发奖励场景。当检测到一个达人在完成电商大学学习后，一天内进行了电商开播或者发布了电商短视频等行为，就会对这个达人发放抖 dou+券等仪式奖励,提升整体达人的入驻率，进而给商家提升更加多元的达人选择。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 cid=&quot;n59&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 cid=&quot;n59&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.2 业务挑战&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n61&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrRcjUfX9ywAvbxEmd7QrnZkJbibTRfiavTZnOcI1ouCLLYXMGBJEichkIg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一，在规则配置方面存在灵活性不足的问题。当前无论是新增还是修改规则，都需要实时数仓的研发同学通过修改代码的方式来支持，这就导致研发同学需要频繁的对接业务。在一些极端的场景，比如双十一大促期间，一个研发同学往往需要同时应对接，二十多个运营同学的规则创建或者修改的诉求。业务需求也由于人力的单点阻塞问题迟迟无法上线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二，规则与计算任务之间存在深度耦合。当每个规则都需要强制绑定一个计算任务时，就会导致计算任务的数量会随着规则的创建逐渐增多。大量的任务会造成极高的运维成本和巨大的资源浪费，使整个系统最终变得不可维护。以前面提到的商家自定义规则检测爆款商品的这个场景为例，考虑到当前抖音电商庞大的商家群体，最终创建规则的数量可能是巨大的，进而导致整个计算任务的数量也随之爆炸。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三，当前 Flink CEP 支持的规则语义不够丰富。列举两个典型的案例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第一个案例，假设我们需要检测用户多次下单后，没有在一小时内完成支付行为。这种场景的特点是用户最后一次下单后，一直没有支付事件来触发这个规则完成匹配。当前 Flink CEP 不支持这种场景，但在真实的业务中这又是非常普遍的规则诉求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第二个案例，假设我们需要检测用户在过去一小时内，是否完成浏览商品、加入购物车、下单行为。注意这里要求的三种行为不分先后顺序，只要在规定的时间内完成以上三种行为即可。这种场景当前 Flink CEP 也不支持。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 cid=&quot;n75&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p cid=&quot;n75&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;解决方案实践&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n75&quot; mdtype=&quot;heading&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n78&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLr515PzN2jQkyH2nto2W1SBQ4yDCYA6dbLa5ONDKH1nic8zHia65hlBib8A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;整体我们分为四个阶段来解决上述的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一阶段，我们对 Flink CEP 规则的核心信息进行了提炼和抽象，并设计了一套清晰易懂的规则 DSL。这样就可以让业务同学自主配置业务规则，从而解决规则配置灵活性不足的问题。&lt;span&gt;那么如何让业务配置的规则运行起来？&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;第二阶段，我们对 Flink CEP 计算任务进行改造，让其支持动态提交规则或者更新规则的能力，从而实现规则与计算任务之间的彻底解耦。解耦之后，不再强制要求每一个规则必须对应一个计算任务来运行。也就是同一个计算任务可以同时接收提交的多条规则，实现收敛整体计算任务的数量，提升规则利用率的目标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前面两个阶段要解决了规则配置的灵活性以及规则与其他任务的强绑定问题，但是仍然没有解决规则本身的语义丰富性问题。因此，第三阶段，我们主要针对特定业务的场景的规则诉求、升级和拓展规则的语义。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;经过前三阶段的升级和优化，前面提到的业务痛点已经基本得到了解决，但规则引擎在易用性和周边能力方面还有所欠缺。例如我们无法直观的查看当前系统运行的规则内容、注册事件数据；业务提交的规则与计算任务之间根据什么样的策略来进行分发；用户&lt;/span&gt;&lt;span&gt;仍然需要订阅规则引擎的输出数据进行格式转换、写入目标存储等操作。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此在第四阶段，我们整合了前面的方案，并不断丰富周边能力生态，打造了一站式实时规则平台。支持用户在平台上进行事件注册、预览、规则配置、规则调试、规则发布等全流程的自主操作，进一步提升工作效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n93&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrnckYCmShO7icGUxIkgcryc4QYclb6hpNhnChSx328lXFTXNFCLMlDVw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了实现业务自主配置规则，规则的语法必须清晰易懂。我们设计规则 DSL 整体结合了 JSON 和基础 SQL 语法，利用 JSON 的高可读性来描述规则的元数据、规则匹配属性等信息，利用 SQL 的强大表达力来描述 CEP 匹配条件以及匹配结果的处理逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n97&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrLAfZe2sPgd4jmjib0x4TgFiakJia1E5CFibT7AsnuMuJXfSEep4WVpEtKw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里我们发现了一个新的问题，如何通过 SQL 来表达事件是否满足匹配条件？SQL 可以查询哪些表？以一个具体的案例来回答这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设要检测用户下单后是否发生了支付行为，那么规则编译生成的 NFA 可能是上图所示的样子。在规则运行时，我们将当前流入的事件以及当前规则的中间匹配结果，都以数据表的形式注册到上下文。当前流入的事件对应的表名称默认是 events，规则中间匹配结果对应的表名称和它的 PatternName 保持一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这个案例中，每个 SQL 可查询到的表就是三张，分别是 events 表，表示当前流入的事件；create_order 表，表示当前已经匹配到的下单事件；pay_order 表，表示已经匹配到的支付事件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在配置 SQL 时，就可以对已经注册到上下文的任意数据表进行查询。当 SQL 查询的结果非空时，就表示当前匹配条件判断通过。状态机经过 Take 边流转到下一个状态，并将事件保存到对应的表，否则就会到 Ignore 边，丢弃掉事件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n107&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLriaicTEBZml5kSKA9fxhGEZdU2QxaeklekffibvegDf3xrspX18OkBt54w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再来看一下这个案例对应的规则配置条件的完整配置。整体是一个数组的形式，数组中每个元素表示一个 pattern，第二个 pattern 与前一个 pattern 之间的连接类型是 FOLLOWED_BY。第一个 pattern 的匹配条件是从流中检测用户下单事件，第二个 pattern 匹配条件是从流入检测用户支付事件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意，这个支付事件的订单是上一步我们缓存下来的下单事件对应的那个订单。经过上面的改造实现了，只要稍微有一些 SQL 基础的业务人员，都可以看懂并配置规则。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n113&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrXZkdp9oOX8MbtTH8drFp8wfVhYqlOictKAv1Ge40ux9IXQW4GKJoFnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面我们提到，当前的 Flink CEP 计算任务不支持动态提交规则。主要原因是在编译阶段 Flink CEP 规则计算逻辑就确定了，并且已经通过 NFACompiler 编译完毕。在运行时计算任务只能固定执行之前已经编译好的规则。那么我们是如何改造的呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n117&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrKVQ2YE8LlIg1Qibc4l0ztn3eJQteFicgicIYEtexkFP7KcSquBglrvoJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了实现规则的动态发现，我们引入了一个规则流，用户提交或修改的规则都可以发到这条流中。为了实现规则的动态注入，我们将规则流设计为 Broadcast Stream。当发现新提交的规则时，广播分发到所有的 SubTask。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了实现规则的在线加载执行，我们基于前面提到的规则 DSL，研发了一套基于规则的解析器。当 SubTask 收到分发的规则后，可以在线解析生成规则运行需要的组件。例如 NFA、规则匹配条件 SQL 对应的执行计划、匹配结果处理函数等。然后保存到 Flink State 中，持续检测和处理后续的事件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解释一下为什么采用 Broadcast Stream 来实现规则的动态注入。由于 Flink CEP 是有状态的计算，规则的更新/删除往往需要伴随 Flink States 的操作和处理。例如：当删除规则时，连带当前规则关联的事件缓存等状态信息也需要一并删除。对比通过其他方式感知规则变更，比如启动一个异步线程定时扫描规则，通过 Broadcast Stream 的方式优势是，当检测到规则变更，能够更方便安全的操作 Flink State。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的方案解决了一个计算任务动态提交规则的诉求，但当一个计算任务运行多条规则时，又带来了一个新的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;问题一，由于规则的事件分组逻辑可能不同。(比如规则 A 需要先对事件流按照&quot;用户的 IP 地址&quot;路由到同一 Task 后再进行 NFA 匹配计算。而规则 B 则需要对事件流按”用户的设备 ID“进行路由）。那么当这两个规则运行在同一个计算任务时，如何兼容呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了解决这个问题，我们新增了 KeyGenOperator 算子。当检测到新的事件流入时，先根据每一条规则配置生成一个与之对应分组的 Key，然后按分组 Key 再进行下游的 Task 分发，这样就实现了对多条规则的不同事件分组逻辑的兼容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;问题二，由于同一个计算任务运行多条规则，就可能会带来规则计算冗余的问题。比如，规则 A 关注用户下单、支付等支付相关事件，而规则 B 关注用户的商品浏览、评论等流量相关的事件。如果同一个计算任务同时运行这两条规则，那么这个任务就必须同时消费这两类事件。也就是说规则 A 本不关注流量类的事件，但由于整个任务整体订阅了这类事件，就导致规则 A 也必须处理这类事件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了解决上述问题，我们在 KeyGenOperator 算子新增了“事件筛选”组件，实现针对同一输入事件不同规则里的个性化事件筛选。也就是说，针对新流入的事件，仅当规则关注这个事件的时候，才会生成与之对应的分组 Key，并且进行后续的计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得一提的是：在商家自定义预警的业务场景中，由于事件筛选的效果是比较好的（也就是说，商家自定义的每个规则仅关注当前商家所属商品的相关事件），那么经过我们测试，单个任务（在 600Core、800 并发度的情况下）可以支持的商家简单规则数量可以超过百万。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n137&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrzpLmWUkoG7wXGog6tQyNMRKBgnGV6mNibZOqNzUR2470mcrGiaBoDQTw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当发生事件 A 后一段时间内，没有发生事件 B，其对应的伪代码可能是上面的这种形式。当前的 Flink CEP 不支持这种语义，因为可能造成没有事件触发这条规则，最终完成匹配的情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n141&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLr8anWN0QtR0IQQibD6Gg64GHp1C2ztpibjPqwx4cDVfVxnAbjardSEYIA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对这个问题，我们在规则生成的 NFA 中引入一种 Pending 状态。当流入事件满足创建订单的条件之后，状态会随之迁移到 Pending 状态等待超时。当 Flink CEP 任务的 watermark 向前推进时，会触发 Pending 状态的 NFC 进行计算，判断是否已经超时，如果超时就会触发 NFA，迁移到下一个 Final 状态。如果在这之前系统流入了订单支付事件，就会转移到 Stop 状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这种方式，我们实现了对发生事件 A 之后一段时间内，没有发生事件 B 类的语义的支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n147&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrBXPtY9ibIOM1iclD8mhtvr7pDsSicrnoNCLgRQUw1lt7ibz1gkjdJAyRpA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了进一步提升规则引擎的应用性，我们整合前面的方案，拓展规则引擎的周边能力，研发了一站式规则平台。用户可以在平台上自助进行事件的注册、预览、规则配置、调试、发布等全流程的自助操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平台整个架构共分为四层，分别是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事件层，例如看播事件、下单事件、物流事件、客服事件等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;计算层，负责动态的接收用户提交的 CEP 规则，并对规则进行解析，检测后续流入事件。计算层的核心是规则计算模块，也就是具体的 Flink CEP 计算任务。同时在计算层还有规则调度模块和规则解析模块，规则调度模块负责将新提交的规则分发到具体的 Flink CEP 计算任务，调度策略可以选择同事件源优先或者负载均衡优先。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同事件源优先是将关注相同 topic 的事件的规则，调动到同一个 Flink CEP 计算任务。例如将关注看播事件的规则调度到一个计算任务中，而将关注物流事件的规则调度到另一个计算任务中。负载均衡优先则是根据 Flink CEP 计算任务当前的负载情况，尽量将新提交的规则调度到相对空闲的计算任务执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;规则解析模块负责当集团任务收到规则之后，解析并编译规则，生成规则运行时的组件。例如前面提到的 NFA、规则匹配条件对应的 SQL 执行计划等等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;触达层，负责计算层规则匹配结果的数据应用，主要包括延迟策略管理、维度字段扩充、推送目标管理等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;延迟策略管理主要负责当目标完成匹配后，是否立即进入下一个动作。例如，当用户完成既定的行为动作之后，可以选择立即发放优惠券，或者等待五分钟之后再发放优惠券。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;维度字段扩充主要负责当目标完成匹配后，为数据补充相关的维度字段。例如，当用户完成浏览、下单、支付行为后，我们可以根据平台的配置，拼接补充订单关联的商品信息。例如商品的名称、价格等，供用户最终更好的决策。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;推送目标管理主要负责当目标完成匹配后，具体需要执行的动作。例如当检测到用户有可能存在刷单行为时，给平台治理同学推送飞书消息。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平台层，负责与用户交互以及任务运维等工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n175&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6Guw4Haia1ALIcYlGqjUkLrmHiaN3QMy1licibG61eB9tpdGuBwZ0dEAfKXr0UFsNnL5V0DEfa2KhBVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务成效方面：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务自主配置规则，提升需求支持灵活性。目前共创建各类实时规则 2.5w+，服务平台运营同学 100+。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;规则与计算任务解耦，无需研发介入即可支持规则创建/变更。业务规则需求支持平均耗时由 1day 缩减至 1hour。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提升 CEP 规则语义丰富度。规则引擎能力实现了抖音电商 70%+ 业务场景的覆盖。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术成效方面：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;由 Case By Case 的点状需求支持模式向面向平台的例行迭代转变，避免了单点人力阻塞问题，提升整体代码健壮性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;整体计算任务数量得到收敛，当前总体任务数量≤50，月均计算任务治理运维相关工作量降低50%+。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;降低计算任务整体资源浪费，单任务平均资源利用率提升 50%+。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 cid=&quot;n197&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p cid=&quot;n197&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;未来展望&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 cid=&quot;n197&quot; mdtype=&quot;heading&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;未来我们计划在以下三个方面继续对规则引擎进行建设。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第一，继续打磨实时规则平台周边生态能力，实现更丰富、灵活的事件接入、触达方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第二，探索规则计算流批一体，打破离线、实时事件之间的壁垒，拓展平台应用范围。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第三，打通公司大数据研发环境，实现更加便捷的计算任务操作，进一步降低人工成本。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;往期精选&lt;/p&gt;&lt;/section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu7uZJO5iblibcnHgAJoOd3fGp9PYUia1ZB5h2Bl2SJottD7OlCd8tHsMZKCUwEDaMjD7VasGziaA0DY6Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247502825&amp;amp;idx=1&amp;amp;sn=800710970b1d8c5bc16d94060494c980&amp;amp;chksm=fd3845abca4fccbd0229483926197abb4e7380ae9813b4c8599792ad322b1d3c272973a2a7b7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;282&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;120&quot; data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu4Aw9HhH6JXKMXHARq8ia8R7WFvEzU9voNDrJoRI4McC0Ym7DyGibT3UibhtJvzLw9NLHzkWAT4iagic2g/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247502728&amp;amp;idx=1&amp;amp;sn=32416fc9bc222fd4dce6561b23b449ef&amp;amp;chksm=fd3845caca4fccdcc750b157c96bdf7d820eb44804916df8141c7434d5c70dc456ab35697b60&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;282&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;120&quot; data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5oI8ibMbbsa7PZEW4ibu8RicqdqoUVXqaH7kLBjrVDdLjmmxb4USOGSZHtx0SHE0of3oZ0iaiaiaS74lhQ/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247502629&amp;amp;idx=1&amp;amp;sn=7f04a874a091f87a59b656c32a96a436&amp;amp;chksm=fd384567ca4fcc7123ece1ed123c39ae572ce3e77dd661d4f3e71f9d1326642439b27d105290&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;282&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;120&quot; data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu7riaMPKn8U49F88Sib4uHeu1AEgZoeZp6Aza7W36iaYgv1MD4Asz9kONyvuribmo9EJkF0q3JIEhaX3g/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247502624&amp;amp;idx=1&amp;amp;sn=4f9fbae3bbcac2022395fd0eae4bbb04&amp;amp;chksm=fd384562ca4fcc74e487bf1c6290ab6f506feb26286a1e4f7903c089cd34643e9d90c8354bd2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;282&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;120&quot; data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5YsL1PcLaKL2UvKZpbKwQVLzKtKEO20P2wQs1Hba7Py8by8k3dpGKsiaBYc7716vGueD36unlmZPg/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▼ 关注「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Apache Flink&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」，获取更多技术干货 &lt;span&gt;▼&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU3Mzg4OTMyNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6FJHxaI14AsXuzeg4SybT0hiaCSohrIY75oiaOMzhQU7RouiafjNa76k2CtD6xxB2JqnawqFqV3zg3A/0?wx_fmt=png&quot; data-nickname=&quot;Apache Flink&quot; data-alias=&quot;apacheflinkcc&quot; data-signature=&quot;Flink 中文社区官微，Flink PMC 维护&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; has-insert-preloading=&quot;1&quot; data-index=&quot;0&quot; data-origin_num=&quot;354&quot; data-isban=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;154&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2657407407407407&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu42ZFF7ZuFicKeibkgZ4DDS8j7eJtqbI4F56deNrG9DAmP11NGicYeicfUTc2qSjoXPxty5SQCicBiaBIHA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100010714&quot; data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Z6bicxIx5naLWBBEcl44aIic1Mthe1nZiaramW5s4e8WwyCYYbTzu6uPBpgI6sxNXNymEnOYKpJpcrItUia7lS64mA/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot;/&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;点击「阅&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;读原文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;」，查看原文视频&amp;amp;演讲 &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;PPT&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4ee7adced4b9b35aaeadecc82f8a9c26</guid>
<title>订单流量录制与回放探索实践 ｜ 得物技术</title>
<link>https://toutiao.io/k/xo3gjp4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;背景介绍&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1.1 得物pandora介绍&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;什么是流量录制回放？流量录制回放是应用端通过挂载注入录制器探针自动注册到服务端形成录制流量回流，将所有外部调用依赖的响应内容（如数据库、分布式缓存、外部服务响应等）进行完整记录。由平台向回放器分发流量回放指令。其核心价值是通过直接录制生产的真实数据，将生产真实数据转化成可复用、可执行的流量，快速地在测试环境中进行回放比对接口返回值和中间链路的验证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;得物版本的流量录制回放平台pandora在官方开源版本上进行了很大的拓展，支持了很多官方版本不支持的子调用和入口调用。此外，平台还对得物的中间件进行了诸多适配工作，避免了大量的回放失败噪音。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;744&quot; data-ratio=&quot;0.3959552953698776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1GftXBxPWvMCja1bq2RaRvg7k1Quriaibn2oXwLYoajvUQ4rQjyryXbeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1879&quot; data-width=&quot;1879&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1.2 市场工具对比&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;目前市场上已知的流量录制回放平台大部分都是在Jvm-Sandbox-Repeater基础上进行二次开发和改造，并且多数都是只支持Java语言。核心原理也都是通过录制线上真实流量然后在测试环境进行回放，验证代码逻辑正确性。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;实践落地&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;2.1 协作模式&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在具体的实施层面，目前采用的是业务测试，平台研发，业务研发三方协同的模式。任务分拆如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R11qlp8ehLYO7m33lcu3QsMLCvLuwPmpZbrUPbhJuHYBmKYDoibeuib3kQ/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1072.1167883211679&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;620.1459854014599&quot; data-height=&quot;1383&quot; data-ratio=&quot;0.5792910447761194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1nMb0aSbDn3dB3GBScgia9Ht53bVR2daoBP0snUBSP17UZ6DazHVzTEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1072&quot; data-width=&quot;2406&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;得物&lt;/strong&gt;&lt;strong&gt;流量回放&lt;/strong&gt;&lt;strong&gt;实施模式&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;2.2 阶段应用&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;流量回放在各阶段的理想实施应用：&lt;/span&gt;&lt;/p&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提测阶段卡点：聚焦核心场景，低成本验证每次提测对于核心场景的影响；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;测试回归阶段卡点：全量场景，重点追求覆盖场景全面性，验证新功能对历史功能的影响；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;预发环境回归：目前预发跟生产同库，未来会推动落地基于预发&amp;amp;生产环境的流量回放，尽可能拉近录制时环境和回放时环境的仿真差异，从而降低回放阶段的噪音影响；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在得物的整体QA体系中，流量回放短期聚焦在回归兜底保障上。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;865&quot; data-ratio=&quot;0.3754340277777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1mtBnic9G9DnLibQWdOicD54pE3zLXyj0Z8GnqxqibZvoSiaxnN4uRofDssQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2304&quot; data-width=&quot;2304&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;得物&lt;/strong&gt;&lt;strong&gt;迭代&lt;/strong&gt;&lt;strong&gt;&amp;amp;项目时间轴&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;2.3 实践落地&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;流量回放的开展自发起后，在本域由探索尝试阶段逐渐过渡到应用场景拓展阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;订单&lt;/strong&gt;&lt;strong&gt;流量回放&lt;/strong&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在经过一段时间的探索，摸索出了一套适用于本域迭代的模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.28331466965285557&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74BIYeKPLWUmJjKkfpc8pQhSHTPF7m5JyGq4Kec6Rf8glJm8xWnXZVCZ9YgSDEjcwncYle3Lxa0XcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;893&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Part1、尝试接入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;团队开始开展流量回放的专项之后，通过调研，选取了40%的服务优先接入。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 阶段目标&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 实施方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 收益成果&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;Part2、探索升级&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;上一阶段花费大量的时间梳理接口配置标签，用例沉淀速度缓慢，并且收益与投入不成正比，因此调整了策略，应用智能化分析进行提效，快速沉淀用例，扩大用例量及覆盖的接口量。45%业务应用接入并均实现强卡点落地，配合平台侧优化，解决大部分组件适配和使用问题，迭代应用流程以及应用指标分析机制基本跑顺。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 阶段目标&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用：接入的应用交由对应的服务负责人，负责对应服务的接口维护运营及沉淀、排错分析&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用例：尝试探索新的用例沉淀方式，进一步扩大用例量，增加覆盖的接口量；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;排错：根据服务的用例量以及接入的时间，提升测试排错能力，阶段2结束测开排错达到五五开；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2.收益成果&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从开始试点到应用卡点，沉淀的用例量也在应用热点流量方案之后开始了升级之路。接入的应用数也超过原定目标达到50%且均实现强卡点落地。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用智能化分析策略提效效果明显，沉淀的用例数成指数型增长，接入应用的P0接口覆盖率达到100%。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;测试排错能力提升，每迭代流量回放发现的bug数也在增加，新方案的可实施性和可推广性基本符合预期。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;Part3、专项提速&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;在沉淀的用例case大量的增加、&lt;span&gt;用例沉淀速度提效明显的前提下，流量回放在迭代的应用中发现更多的缺陷，规划扩大接入的应用以及覆盖的接口范围。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 阶段目标&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用接入：新增40%应用接入，接入应用占比合计90%；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;排错：提升测试的排错能力，新版本排错由平台研发转交业务研发，测试开发排错占比五五开；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用例量：加速沉淀用例量，扩大覆盖的范围，至少65%的应用完成全量用例沉淀；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;卡点：接入应用达到100%卡点，提升排错速度，部分应用由生产卡点转为预发卡点；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;全域接入应用接口维度覆盖率98%以上，接口配置完善度98%以上，全量用例路径覆盖率60%以上。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2. 收益成果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着应用的接入，沉淀的用例量也在扩大，发现的问题数也在增多。同时也增加覆盖率的指标来衡量流量回放用例覆盖的代码占总代码行的比值。随着对覆盖率的关注，平台采样策略也进行了一个调整，删除所有历史沉淀用例，仅沉淀新策略实施之后录制的流量。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;流量回放接入90%应用，扩大应用接入和case沉淀，超预期达成目标，沉淀应用Case量是原计划的3倍，此阶段累计发现缺陷数占全域流量回放发现的bug数的45%，充分验证了落地策略的有效性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从阶段3本域发现的缺陷统计来看，其中回归类BUG占比38%，发现线上自有/隐藏问题占比8%，迭代过程中代码问题（日志报错）和代码规范类问题占比46%，性能问题占比8%；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接口配置完善度100%；接口维度覆盖率96.49%；全量用例路径覆盖率79.32%，全量代码覆盖率平均39.8%；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;总结分析&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.1 问题归类分析&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1.1 累计发现的缺陷分类：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;1060&quot; data-ratio=&quot;0.5925097820011179&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1CGtLJESEFqJcibL1mZdeHCHjVIunynqicibgUPPIbFuKSeIuPhH3mYCXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1789&quot; data-width=&quot;1789&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1.2 累计发现的缺陷来源分类：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;827&quot; data-ratio=&quot;0.6817807089859852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1nsiagyXvqKjJULDvfcV2N1MOcpFcQ8ADhulUPje8JnQ13AYGVsRuRlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1213&quot; data-width=&quot;1213&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1.3 典型案例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;76&quot; data-ratio=&quot;0.060751398880895285&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1MOadnm8CMVvxtMeiaVibBae7yBSpmibXC9QfibZQqDAGlwcR87fFaXtrmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1251&quot; data-width=&quot;1251&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;49&quot; data-ratio=&quot;0.0650730411686587&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R11gKsSlK2PuPLzYtjOy1gj1PlOCuaFcfF4UaUIQ64cFOPtOIk59Zgjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;753&quot; data-width=&quot;753&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;277&quot; data-ratio=&quot;0.263558515699334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1MDHqLOWRrjAibUm4RIWJkJyeMQiaILicGvicRUc3sHKckv1EW1jwVRkz9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot; data-width=&quot;1051&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过对缺陷以及缺陷来源的归类不难看出：&lt;/span&gt;&lt;/p&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;流量回放发现拦截的问题近一半都是会引起生产业务报错的，其中包括像金额不对涉及资损的问题以及字段传值不对、枚举类型取错等缺陷；作为生产发布前的最后阶段的防线之一，充分展现了流量录制回放作为对测试回归的兜底能力的补充手段的重要性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;45%左右的问题是手工测试过程中难以发现隐藏比较深的代码层面问题，例如NPE报错、入参出参字段未序列化等，这些问题如果仅仅通过前端测试或接口测试不看日志不一一对比所有字段势必会将问题带到生产环境，最终影响生产环境的稳定性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;6%左右的性能问题，例如存在重复子调用，影响接口RT，如果不在生产发布前发现解决，势必给用户体验带来一定的挑战。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从缺陷的来源上看，发现的缺陷来源还是集中在项目迭代需求和技术优化上，充分验证了流量回放整体提速后的有效性以及对测试覆盖兜底能力的补充。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过对失败用例的排错分析经验的累积和分享培训，参与专项的测试团队的整体技术水平通过流量回放专项提速在技术氛围上有明显提升，培养了多位同学对自身负责模块的实现的代码走读能力，以及深挖缺陷的code diff能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.2 适用性分析&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;先投入能迅速形成能卡点有收益的应用（迭代代码变更相对少，分层结构比较好，异步少，写操作少），把看得到的使用效果做出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;流量回放&lt;/strong&gt;&lt;strong&gt;能否完全替代手工回归以及自动化？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前来看，答案是否定的。首先，从沙箱挂载到接口配置再到流量录制这一套流程下来，也需要较长的时间才能达到较高的用例覆盖，对于一些边界极端场景还是需要手工设计；其次，流量录制回放是后置的回归兜底，更侧重于对历史逻辑的回归验证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、接口覆盖不全。迭代需求新接口，未配置关联录制，不在流量回放的录制范围。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、全量代码覆盖率不高。接口已经配置覆盖了，但是由于采样比例小场景极端等原因，接口的分支场景并没有录制到未被覆盖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、排错能力的高低影响。接口覆盖了，排错的时候由于新加了子调用，导致失败的用例在排错的时候容易被简单定义为代码变更。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、平台问题。diff比对异常，显示回放成功，异步线程的回放是一个待攻克的难点。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.3 面临的挑战&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.3.1 排错的效率&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;录制流量后对流量进行回放，发现回放结果比对失败的很多。经过对失败原因的排查与分析，有些是代码bug导致的失败，但更多的失败不一定是代码bug，常见噪音主要包含：&lt;/span&gt;&lt;/p&gt;&lt;ul start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;代码修改，新增或删除了子调用，导致mock失败&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;平台不支持的子调用，导致失败&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时间戳相关的子调用，diff不一致&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;子调用中使用随机参数相关，导致mock匹配不上&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;repeater代码自身缺陷&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务自增数据差异&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;配置中心数据不一致&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;返回无序元素集合，造成结果对比误差&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;失败原因很多，真正有效的失败数很少。如此一来，每次回放失败的排查成本就非常高。给业务的推进造成了巨大的阻碍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原版repeater上报的信息不够丰富，很多情况需要看日志才能排查。目前也没有公开成熟的参考的方案。平台也进行了一些初步的探索，对回放失败的场景自动进行归类，上报更丰富的数据信息提供排查指引，帮助排查人员聚焦定位问题。同时平台也针对一些噪音进行自动识别并在回放时自动过滤降噪。&lt;/span&gt;&lt;/p&gt;&lt;table data-ace-table-col-widths=&quot;226;75;510&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;strong&gt;回放失败分类&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;strong&gt;界面提示&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;strong&gt;界面展示信息&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;子调用多调用&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;错误&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;得物链路traceId, 多调用的参数，调用堆栈，是否参数不匹配，是否完全多出来一次调用，等等&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;子调用少调用+回放时捕获到异常&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;错误&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;得物链路traceId, 回放轨迹，异常堆栈，参数&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;子调用少调用&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;错误&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;得物链路traceId, 回放轨迹&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;入口返回diff有差异&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;错误&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;得物链路traceId, 返回数据的diff比对&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;仅回放时捕获到异常&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;告警&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;得物链路traceId, 异常堆栈，参数&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.3.2 异步线程录制回放问题&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;入口主线程不等子线程执行完就返回的异步场景，当前的策略是用户可配置对异步子线程的多调用忽略，只关注主线程的执行情况。这一方式虽然可以提升这种异步线程场景的回放成功率，但是损失了异步子线程业务逻辑的回归能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;267&quot; data-ratio=&quot;0.1245916938870742&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R15WD4cic4PQDw6Tq2hYvV6icjhIlZq0LF9tccl8hg2DncrXSXfgThk40g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2143&quot; data-width=&quot;2143&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的案例就是由于应用开启了排查提效优先的开关，忽略了异步子线程的调用，导致diff比对异常，显示回放成功。该接口在生产发布时报了异常，String类型长度超长被try catch，埋点丢失。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;展望&amp;amp;未&lt;/span&gt;来规划&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;流量录制回放作为测试领域的一个新兴事物，在诞生初期就吸引了广大测试同仁的关注，市场上也有些公司也对此进行了一些实践。我们对流量录制回放的实践还处于起步的阶段，一些问题的解法也在探索中 。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;预发&lt;/strong&gt;&lt;strong&gt;只读&lt;/strong&gt;&lt;strong&gt;接口&lt;/strong&gt;&lt;strong&gt;非&lt;/strong&gt;&lt;strong&gt;mock&lt;/strong&gt;&lt;strong&gt;回放&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在得物预发环境是联通生产环境的数据库和下游应用，因此对于预发进行不mock的回放，特别是对只读接口进行不mock的回放能够在上线前的最后阶段进行一次兜底的回归校验。最难解决的问题是，当前是只读的接口难以保证后续的变更不会引入写操作。在当前阶段开放这一功能会引入额外的资损类风险敞口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对此问题，每次回放前都进行人工校验可能可以解决，但是又引入了极大的效率问题。如何高效地保证在预发/灰度环境进行不mock流量回放不会产生资损风险，是一个值得探索的问题，需要研发跟测试的共同努力。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;方案1-单回放（准实时回放）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;228&quot; data-ratio=&quot;0.6745562130177515&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1zAiaUjaX639KavUsk5RsgMWCIydS6LdT8Lq5E2s3wPFzfpUxOl8qmSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;338&quot; data-width=&quot;338&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;方案1落地遇到的问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.配置中心的数据不一致，噪音比较大&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.时效问题，有10S的时差，一些业务对时效要求比较高&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;方案2-双回放（实时回放）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;305&quot; data-ratio=&quot;0.4959349593495935&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1XszqqIEjI0QpkAgELThSAk5iaNKl6LwwOeQm2ubIfduV2lENZGH7DAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot; data-width=&quot;615&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方案2不仅避免了上面方案1的问题，另外后续规划还可以根据覆盖率沉淀有效用例集，手工添加异常用例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过一段时间的运行，目前已经看到了一些流量录制回放在业务迭代中产生了价值，发现了一些隐藏bug。接入流量回放明显的变化是能够将测试从繁重的回归测试、用例梳理维护等重复性高的劳动中解放出来，将重心放在测试计划的设定、思考测试策略以及自我提升的实践上，比如做些辅助排错提效的coding能力提升和加强对业务的熟悉的宽度和深度上，从而最大程度的保障业务系统的质量和稳定性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;未来期望能在不断的实践中把得物的流量录制回放体系建设得越来越完善，解放更多的生产力，产出更多的价值。&lt;/span&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;strong mp-original-font-size=&quot;11&quot; mp-original-line-height=&quot;17.600000381469727&quot;&gt;&lt;span mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19.200000762939453&quot;&gt;*文&lt;/span&gt;&lt;/strong&gt;&lt;strong mp-original-font-size=&quot;11&quot; mp-original-line-height=&quot;17.600000381469727&quot;&gt;&lt;span mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19.200000762939453&quot;&gt;/苏三&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;section mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;section mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;section mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关注得物技术，每周一三五晚18:30更新技术干货&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;新年红包封面福利🧧&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.335423197492163&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AAQtmjCc74CKrq7p4soNiaN0eK6k4L4R1c1W9qa9UszibGfcia9mFuk3zZBzBBpibibaj0EsOGbnvXjibPo6GBxa3l0g/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;957&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;关注&lt;/span&gt;&lt;strong&gt;&lt;span&gt;「得物技术」&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;公众号&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzkxNTE3ODU0NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74AlsHDtoVyU8hqzNTGS26fV9PmHAcZ8uib1GWNJibIuBiavPdAXw9IOzjlEAYRJUNjOEme5geMNPoZ1Q/0?wx_fmt=png&quot; data-nickname=&quot;得物技术&quot; data-alias=&quot;&quot; data-signature=&quot;技术知识分享交流平台，与你一同走向技术的云端。&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; data-index=&quot;0&quot; data-origin_num=&quot;253&quot; data-isban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;发私信消息&lt;/span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2023&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;即可免费领取&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>84765b3c8c36e28dd62bf5bf244be07b</guid>
<title>谷歌版ChatGPT灾难级发布，市值一夜狂跌7000亿，熬夜网友：退钱！</title>
<link>https://toutiao.io/k/p62cqyb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h5 data-mpa-powered-by=&quot;yiban.io&quot;&gt;来源：量子位 | 微信公众号ID：QbitAI&lt;/h5&gt;&lt;p&gt;看完谷歌的最新直播，我感觉，微软被“诈骗”了。&lt;/p&gt;&lt;p&gt;谷歌CEO劈柴哥前脚刚发文说要推出ChatGPT竞品&lt;strong&gt;Bard&lt;/strong&gt;，又有各种消息暗示2月8日晚上的发布会会有“新消息”。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;不到24小时&lt;/strong&gt;，微软就连夜上线了ChatGPT版搜索。&lt;/p&gt;&lt;p&gt;微软CEO纳德拉还非常重视地表示：&lt;strong&gt;竞争才刚开始&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;然鹅，就在外界早已搬好板凳坐等“搜索引擎变天”、一众厂商也纷纷宣布跟进之际，&lt;strong&gt;谷歌却是千呼万唤没出来&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;这个在巴黎召开的最新直播中，传说中的谷歌版ChatGPT露面了，但又没完全露面。&lt;/p&gt;&lt;p&gt;怎么说呢……释出的信息，就等于把劈柴哥的文字稿又给念了一遍……&lt;/p&gt;&lt;p&gt;甚至官方浅浅展示的Demo里，还被扒出了至少2处错误。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.548618219037871&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEKulWyaaBLm1TJzrpibsLXorvpdpp83EwICeGF998d6W2XSrm0U2r8Aw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1954&quot;/&gt;&lt;/p&gt;&lt;p&gt;更多Demo示例，没有。技术讲解，没有。上线日期，更没有……&lt;/p&gt;&lt;p&gt;翻译一下，就是Bard内测中，将来会整合到搜索里。饼就是这么个饼，好不好吃就不多说了。&lt;/p&gt;&lt;p&gt;这把我和同事们的脸，打得是啪啪响……&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5195652173913043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEtUGmQCKwwFaVNbj4EVOcGauSclwEPMZuPIgyiapupREHcMuHb9dX30g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;920&quot;/&gt;&lt;/p&gt;&lt;p&gt;群里“退钱”的呼声那是此起彼伏。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.25585585585585585&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEFF0NwVmSgQAa6aR6WfyVLKgWetplaKE8MdPlHm1lkRzicA3XCpBbRlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot;/&gt;&lt;/section&gt;&lt;p&gt;这不，直播还没结束，已经有网友坐不住了：敢情大家关心的信息咱一点也不多说呗？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3883677298311445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPE9xhknI0sbGOO5Puov1Xx8UD9Asepf1jrc7XAyGibBPrRFuoFwJM6fPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1066&quot;/&gt;&lt;/p&gt;&lt;p&gt;还有网友犀利吐槽：用真正的Bard的话来说，谷歌就是在“无事生非”&lt;span&gt;（莎士比亚作品）&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45473684210526316&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPENRstu9O0VYATroibiad40JLQA2rtW63J0Q966gEHH1lP2c7GZyLlaZdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;950&quot;/&gt;&lt;/p&gt;&lt;p&gt;直播一结束，谷歌的股价就呈现出了一条醒目的下降曲线，收盘时已跌超7%，市值一夜蒸发7000亿。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7514705882352941&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEKgEWocW0f51j9MjnicPmq4hibZ0vQbanC0TtmVIOyoK3ELib1LjOnE8Ww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1360&quot;/&gt;&lt;/p&gt;&lt;p&gt;还带跌了一众中概股，甚至连微软也没能幸免。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7511111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEWDxS6TnpZAB0B36Qb2BF43stp3uo6SlgCA277Wth97h4DBicz0VzkrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1350&quot;/&gt;&lt;/p&gt;&lt;p&gt;这一波啊，怕不是谷歌下的一盘大棋，既唬住了微软，又给过热的市场当头浇了一盆冷水。&lt;/p&gt;&lt;h2&gt;Bard与ChatGPT同题PK&lt;/h2&gt;&lt;p&gt;虽然这场发布会没有公布Bard太多细节，但网友们来都来了，自然不会空手而归。&lt;/p&gt;&lt;p&gt;没有内测资格，还可以反向测试，拿Bard演示中出现的问题去问ChatGPT，就给了它俩一对一PK的机会。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;关于詹姆斯韦伯望远镜的新发现，有什么可以告诉我九岁孩子的？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;ChatGPT由于训练数据停留在2021年，回答的都还是将来时，对可能发生的情况做预测。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6656833824975418&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPE1EKwIyzIyV95F2AWMDKiank6XnXbvHCjjxcwgBAhO1PVm7fNswPH31g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1017&quot;/&gt;&lt;/p&gt;&lt;p&gt;Bard的消息就明显灵通一些，列举出三个新发现。末尾还贴心地附上一句“这些发现可以激发孩子对宇宙中无穷奇妙的想象”。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.54638671875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEWutfibD0SVr7EF3tjdtvXl9NargWUHpWC4EkfznRkPNvXtjHq8b0lVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2048&quot;/&gt;&lt;/p&gt;&lt;p&gt;这是由于Bard背后的对话语言模型LaMDA——是让谷歌工程师“走火入魔”，认为它有人格的那个模型。&lt;/p&gt;&lt;p&gt;除了神经网络外，LaMDA还内置了一套工具箱，包括计算器、翻译器和访问搜索引擎获取外部信息的接口。&lt;/p&gt;&lt;p&gt;然鹅，Bard的这段回答被指出至少有2处事实性错误，成了股价大跌的导火索。&lt;/p&gt;&lt;p&gt;第一条，詹姆斯韦伯望远镜发现“绿豌豆”星系并不是在2023年，而是2022年7月。&lt;/p&gt;&lt;p&gt;第三条，第一张系外行星照片不是由詹姆斯韦伯望远镜拍摄，而是欧洲南方天文台的甚大望远镜早在2004年就拍下。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0033112582781456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEGQGMb6cttMT5mL6d8gUYusBrRN2MdKUNmb8aAT156bP759mCymow7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1208&quot;/&gt;&lt;/p&gt;&lt;p&gt;路透社就援引分析师观点，指出谷歌作为AI领域的领军企业，在ChatGPT这项技术上却“睡着了”。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;谷歌匆忙宣传，才导致了演示视频里出现错误答案的尴尬混乱。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;而The Verge则发文表示，谷歌&lt;strong&gt;仍然&lt;/strong&gt;在把AI技术&lt;strong&gt;滴灌&lt;/strong&gt;到搜索、地图和翻译中，并同样把股价下跌归因于“谷歌的失误可能把投资人吓跑了”。&lt;/p&gt;&lt;p&gt;虽然ChatGPT出错闹的笑话也不少，但谷歌这样错误出现在官方宣传视频上全球上百万人围观，还是尴尬了点。&lt;/p&gt;&lt;p&gt;咱只能说，大家还要忍受很久AI的“一本正经胡说八道”了。&lt;/p&gt;&lt;h2&gt;搜索引擎重回风口浪尖&lt;/h2&gt;&lt;p&gt;虽然总的来说谷歌开了一场尴尬的发布会，但无论如何，围绕AI的一场搜索引擎大战还是打响了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;微软必应&lt;/strong&gt;算是赢下这一场，国内&lt;strong&gt;百度&lt;/strong&gt;也有了全线产品接入类ChatGPT产品“文心一言”的风声，甚至最老牌的&lt;strong&gt;雅虎&lt;/strong&gt;也有了动作暗示重返搜索领域。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5152027027027027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEjgkMawmXINwKWutZhNgia9HricbydVmgXzsicSgVEo0RBGPo5ciayHlVZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1184&quot;/&gt;&lt;/p&gt;&lt;h6&gt;&lt;strong&gt;△&lt;/strong&gt; BRB=Be Right Back，马上回来&lt;/h6&gt;&lt;p&gt;毕竟ChatGPT诞生不到3天，就有网友发现在不少情况下，它比搜索引擎更好使。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Gmail之父&lt;/strong&gt;当时还感叹：谷歌距离被全面颠覆可能只有一两年的时间，搜索引擎的结果页面被干掉，最赚钱的广告没有地方可放了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4276629570747218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEn1ZiahlJtsNlFPys4Roj4TWStb18u2lwBV20ngXAF325m4icv0XtFzsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1258&quot;/&gt;&lt;/p&gt;&lt;p&gt;搜索引擎，曾经是一个时代的王者，最大的流量入口。&lt;/p&gt;&lt;p&gt;后来渐渐被社交网络和信息流应用抢走了风头。&lt;/p&gt;&lt;p&gt;在这期间，谷歌搜索也有数次大更新，其中不乏AI技术的参与。&lt;/p&gt;&lt;p&gt;2012年，谷歌发布&lt;strong&gt;大规模知识图谱&lt;/strong&gt;，从文本搜索进化到语义搜索，并可以直接呈现一些简单问题的答案。&lt;/p&gt;&lt;p&gt;2015年，机器学习算法&lt;strong&gt;RankBrain&lt;/strong&gt;投入使用，可通过预测来处理之前从未有过的查询。&lt;/p&gt;&lt;p&gt;2019年，预训练模型&lt;strong&gt;BERT&lt;/strong&gt;加入，可根据上下文理解整个句子、绕过拼写错误，上线一年后参与了几乎100%的查询。&lt;/p&gt;&lt;p&gt;可以看出，这些更新的重点都在&lt;strong&gt;提升理解用户意图的能力&lt;/strong&gt;，对使用体验有不小提升，但都还算不上颠覆性的变化。&lt;/p&gt;&lt;p&gt;以ChatGPT和Bard为代表的生成式AI，更大的意义在于&lt;strong&gt;从“寻找问题的答案”跨越到“直接完成任务”&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;正如谷歌演示中，特别强调了Bard可以回答“没有唯一答案”的问题。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5659276546091015&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEXAKNJIfqMu1fr3Hu8N7f9DvPicgMAI8pIPgmD6HgoywEJbL8icbRCFSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1714&quot;/&gt;&lt;/p&gt;&lt;p&gt;微软新版必应提供的的示例也多是“规划一次旅行”、“写一首押韵的诗”这样的开放式问题。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.615625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEoyKLuS94w2In8muQPpsGKycHujA8uvicz0tvian22joNd0iaW1FAdkhcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;答案此前并不存在，搜索的瞬间由AI生成出来，也就是AIGC&lt;span&gt;（AI生成内容）&lt;/span&gt;的含义所在了。&lt;/p&gt;&lt;p&gt;但一波热潮之下，也有冷静的人指出新模式的潜在问题：&lt;/p&gt;&lt;p&gt;归根到底内容还是人类生产的，AI只是能够从训练数据中学习、提炼、模仿。&lt;/p&gt;&lt;p&gt;如全球最大的编程问答社区Stack Overflow，在人们发现ChatGPT能够写代码、给代码写注释还能修复bug之后，正在经历流量的骤降。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7418032786885246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPElUnDeosXwSW9mz8grbaHoibXWH4RiabDHibgYnTjDhIQEKTQZia5KnexxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;976&quot;/&gt;&lt;/p&gt;&lt;h2&gt;谷歌又赶个晚集，但并非没有后手&lt;/h2&gt;&lt;p&gt;谷歌第一次被吐槽“赶了个晚集”，是在12月底的公司会议由内部员工提出。&lt;/p&gt;&lt;p&gt;毕竟逼得各家竞相出手的ChatGPT，后缀GPT里的“T”——Transfomer，还是&lt;strong&gt;谷歌发明的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;6年前，Google在论文《Attention is All you need》中首次提出Transformer模型，它使用自注意力机制，取代了在NLP任务中常用的RNN网络结构。&lt;/p&gt;&lt;p&gt;谷歌官方博客上提到这点的说法还被网友看出“挺酸的”：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7741935483870968&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPExMLsUoZYLxua1C6oq4vcD5E0wdnLrca6wb7ZonCQ4BAdZWiaxd859Hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;&lt;p&gt;网友不是没有解读出谷歌官方心里的小九九，各种调侃逗乐在互联网上蔓延。&lt;/p&gt;&lt;p&gt;有人拿今日的谷歌&lt;strong&gt;比作当年的柯达&lt;/strong&gt;：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Transformer是你的项目又怎样，柯达还发明了数码相机呢！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4046610169491525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEExNCxez4GfibRNsCicFqaROEuyZHRgIe1CzFtMIMnicHZEaLpFI3b5goQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;944&quot;/&gt;&lt;/p&gt;&lt;p&gt;还有梗图画尽了谷歌宝宝心里的委屈：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9655172413793104&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPELBKSoS1FGsg40qOyJ0uOGVCoKBe9saHl7BRNicKVNNhZ9pibUvYjWS6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;928&quot;/&gt;&lt;/p&gt;&lt;p&gt;Bard背后的对话模型LaMDA，两年前的谷歌I/O大会上就已亮相，去年进化到2.0。但LaMDA一直处于内测之中，并不是所有人都能畅快玩耍。&lt;/p&gt;&lt;p&gt;不过话说回来，谷歌不慌不忙，倒也不仅仅是因为“优势在我”，不想太过主动革自家搜索引擎的命。&lt;/p&gt;&lt;p&gt;浅浅对比一下——&lt;/p&gt;&lt;p&gt;哪怕是接受了两个多月的外部测试反馈和内部调试，ChatGPT仍然会不受控地口出狂言，发表一些政治偏向或种族和性别主义歧视言论。&lt;/p&gt;&lt;p&gt;需要强调的是，&lt;strong&gt;越大的公司对声誉和社会责任的顾虑越多&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;去年11月，Meta具有1200亿参数语言模型Galactica，在生成内容里引用文献时，发生作者真实存在但文献虚构，以还存在一本正经胡说八道的情况。&lt;/p&gt;&lt;p&gt;事态引起舆论哗然，短短3天后，饱受争议的团队无奈宣布Demo&lt;span&gt;（暂时）&lt;/span&gt;下架。&lt;/p&gt;&lt;p&gt;无论何时都需要从公司整体战略部署行动，谷歌的考虑不外如是。&lt;/p&gt;&lt;p&gt;这样看来，谷歌现在表现出的不紧不慢，也未必没有更深层次的考量。&lt;/p&gt;&lt;p&gt;但大公司的谨慎小心，在这波AIGC浪潮里，多少是束缚住了科技巨头的手脚，让他们总显得慢了那么一拍。&lt;/p&gt;&lt;p&gt;前车之鉴，就是2022年同样爆火的AI绘画。&lt;/p&gt;&lt;p&gt;玩得最开的，当属Stable Diffusion背后的公司&lt;strong&gt;Stability AI&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.703125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEbDcyOu1AQ0PI9lg9DrYJbxyZghXaGnzX99rfm3ROlY5ZGKGKEyFCfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;虽然用户在用其进行AI绘画时得按需付费，但它&lt;strong&gt;开放源代码&lt;/strong&gt;，开发者可以完全免费下载底层代码来训练自己的模型。&lt;/p&gt;&lt;p&gt;开放性像一柄双刃剑，让Stability AI陷入了版权、监管等诸多争议之中。&lt;/p&gt;&lt;p&gt;但如其创始人兼CEO相信的那样，“开源AI技术释放人类的创造力”，并带来了巨大的关注和收益。&lt;/p&gt;&lt;p&gt;另一边，伦理、版权多重顾虑缠身的OpenAI旗下DALL-E2、谷歌Imagen，在藏着掖着地隔岸观望后，才下场公测。&lt;/p&gt;&lt;p&gt;结果么，两家&lt;strong&gt;都跌了跟头&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;2022年上半年发布模型后，它俩磨磨叽叽，在11月才先后向公众开放。话题度、使用量都明显不如前者。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0254237288135593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEvlibg5hgG2sb9WVic5ese9l2icfdLBZoc67pGAccMaIQz5Od9Joia2OR4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;236&quot;/&gt;&lt;/p&gt;&lt;p&gt;也正因如此，OpenAI才痛定思痛，推出ChatGPT来抢占先机。&lt;/p&gt;&lt;p&gt;ChatGPT背后的GPT3.5对OpenAI来说是两年前的旧玩意。&lt;/p&gt;&lt;p&gt;为了不再被抢风头，做第一个吃螃蟹的弄潮儿，仅用13天，ChatGPT就迎来诞生，并迅速火遍地球。&lt;/p&gt;&lt;p&gt;不仅抢先将对家逼到墙角，ChatGPT的用户反馈还能帮助收集反馈，以改进新模型。&lt;/p&gt;&lt;p&gt;危急存亡之秋，谷歌被逼打响搜索引擎保卫战，被迫出手Bard，行动部署里却还残留一惯瞻前顾后的影子：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;只给“值得信任的测试人员”内测&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;好在谷歌不是没有反将一军的能力。&lt;/p&gt;&lt;p&gt;首先，多年的&lt;strong&gt;技术积淀&lt;/strong&gt;为底。&lt;/p&gt;&lt;p&gt;不仅论文发布数量最多，思维链路提示&lt;span&gt;（chain-of-thought）&lt;/span&gt;、大模型涌现现象的研究也走在前面。&lt;/p&gt;&lt;p&gt;其次，一旦开放，谷歌可以利用自身保有的巨大优势：&lt;/p&gt;&lt;p&gt;谷歌搜索的&lt;strong&gt;基础用户量大，反馈迭代快&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;李飞飞之徒、英伟达AI科学家Jim Fan在推特预测，Bard背后，有谷歌10亿用户的流量池。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5705128205128205&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtDq27XHibrZSZTqgaVjKduPEZ4Oib0aXGvlos3BV8AmuhvwvytXCEbEts2yw7VfzUlDRk7SYx0PlolQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1248&quot;/&gt;&lt;/p&gt;&lt;p&gt;这是谷歌手握的另一张重量级的王牌。&lt;/p&gt;&lt;p&gt;但没有人知道，谷歌搜索的忠实用户，会有多少转化成为Bard的拥趸。&lt;/p&gt;&lt;p&gt;那么现在，Bard依然半掩面，你觉得谷歌还能反将一军吗？&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;— &lt;strong&gt;完&lt;/strong&gt; —&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;戳原文，有资源噢~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>