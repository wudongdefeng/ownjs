<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>39edbf1e1b662232108d872884cdea11</guid>
<title>使用 vue-class-setup 编写 class 风格组合式API，支持Vue2和Vue3</title>
<link>https://toutiao.io/k/776yjzb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;我司基于&lt;code&gt;vue-class-component&lt;/code&gt;开发的项目有上百个，其中部署的 SSR 服务也接近100个，如此庞大体量的项目一开始的时候还幻想着看看是否要升级Vue3，结果调研一番下来，才发现&lt;code&gt;vue-class-component&lt;/code&gt;对Vue3的支持，最后一个版本发布都过去两年了，迟迟还没有发布正式版本。目前基本上处于无人维护的状态，而且升级存在着大量的破坏性更新，对于未来是否还要继续使用Vue3现在还是持保留意见，但是不妨碍我们先把组件库做成Vue2和Vue3通用，于是就有了本文。&lt;/p&gt;

&lt;p&gt;在过去的三年里，&lt;code&gt;vue-class-component&lt;/code&gt;最大的问题是就是无法正确的校验组件的传参，事件类型，这给我带来了巨大的阴影，在经过一番调研后，惊喜的发现使用&lt;code&gt;defineComponent&lt;/code&gt;定义的组件，在Vue2.7和3.x都可以正确的识别类型，所以先计划内部的组件库先做到同时支持Vue2和Vue3，如果后面还要继续采用Vue3就变得容易得多。&lt;/p&gt;

&lt;p&gt;于是，回到了开头，调研了一番&lt;code&gt;vue-class-component&lt;/code&gt;在Vue3的支持，目前最新的版本是&lt;a href=&quot;https://www.npmjs.com/package/vue-class-component/v/8.0.0-rc.1&quot;&gt;8.0.0-rc.1&lt;/a&gt;，结果大失所望，目前基本上处于无人维护的状态，社区内又没有一个能满足我需求的，同时支持Vue2和Vue3的。&lt;/p&gt;

&lt;h2&gt;诞生想法&lt;/h2&gt;

&lt;p&gt;鉴于&lt;code&gt;vue-class-component&lt;/code&gt;组件目前无法做到正确的组件类型检验，当我惊喜的发现组合式API写出来的代码可以被正确的识别类型时，诞生了一个使用 class 风格来编写组合式API的想法，于是花费一个月的实践，踩遍了所有的坑，终于诞生了&lt;a href=&quot;https://github.com/fmfe/vue-class-setup&quot;&gt;vue-class-setup&lt;/a&gt;，一个使用 class 风格来编写代码的库，它gzip压缩后，1kb大小。&lt;/p&gt;

&lt;h2&gt;快速开始&lt;/h2&gt;

&lt;pre lang=&quot;bash&quot;&gt;&lt;code&gt;npm install vue-class-setup
&lt;/code&gt;&lt;/pre&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;script lang=&quot;ts&quot;&amp;gt;
import { defineComponent } from &#x27;vue&#x27;;
import { Setup, Context } from &#x27;vue-class-setup&#x27;;

// Setup 和 Context 必须一起工作
@Setup
class App extends Context {
    private _value = 0;
    public get text() {
        return String(this._value);
    }
    public set text(text: string) {
        this._value = Number(text);
    }
    public onClick() {
        this._value++;
    }
}
export default defineComponent({
    // 注入类实例的逻辑
    ...App.inject(),
});
&amp;lt;/script&amp;gt;
&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{{ text }}&amp;lt;/p&amp;gt;
        &amp;lt;button @click=&quot;onClick()&quot;&amp;gt;&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尝试多很多种方案，最终采用了上面的形式为最佳实践，它无法做到&lt;code&gt;export default&lt;/code&gt;直接导出一个类，必须使用&lt;code&gt;defineComponent&lt;/code&gt; 来包装一层，因为它只是一个&lt;code&gt;组合类（API）&lt;/code&gt;，并非是一个组件。&lt;/p&gt;

&lt;h2&gt;最佳实践&lt;/h2&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;script lang=&quot;ts&quot;&amp;gt;
import { defineComponent } from &#x27;vue&#x27;;
import { Setup, Define } from &#x27;vue-class-setup&#x27;;

// 传入组件的 Props 和 Emit，来让组合类获取正确的 `Props` 和 `Emit` 类型
@Setup
class App extends Define&amp;lt;Props, Emit&amp;gt; {
    // ✨ 你可以直接这里定义Props的默认值，不需要像 vue-property-decorator 那样使用一个 Prop 装饰器来定义
    public readonly dest = &#x27;--&#x27;;
    // 自动转换成 Vue 的 &#x27;computed&#x27;
    public get text() {
        return String(this.value);
    }
    public click(evt: MouseEvent) {
        // 发射事件，可以正确的识别类型
        this.$emit(&#x27;click&#x27;, evt);
    }
}
/**
 * 这里提供了另外一种在 setup 函数中使用的例子，默认推荐使用 `defineComponent`
 * 如果有多个类实例，也可以在 setup 中实例化类
 * &amp;lt;script lang=&quot;ts&quot; setup&amp;gt;
 *      const app = new App();
 * &amp;lt;\/script&amp;gt;
 * &amp;lt;template&amp;gt;
 *      &amp;lt;div&amp;gt;{{ app.text }}&amp;lt;/div&amp;gt;
 * &amp;lt;/template&amp;gt;
 */
export default defineComponent({
    ...App.inject(),
});
&amp;lt;/script&amp;gt;
&amp;lt;script lang=&quot;ts&quot; setup&amp;gt;
// 如果在 setup 中定义类型，需要导出一下
export interface Props {
    value: number;
    dest?: string;
}
export interface Emit {
    (event: &#x27;click&#x27;, evt: MouseEvent): void;
}
// 这里不再需要使用变量来接收，可以利用 Vue 的编译宏来为组件生成正确的 Props 和 Emit
// ❌ const props = defineProps&amp;lt;Props&amp;gt;();
// ❌ const emit = defineEmits&amp;lt;Emit&amp;gt;();
defineProps&amp;lt;Props&amp;gt;(); //  ✅
defineEmits&amp;lt;Emit&amp;gt;(); //  ✅

// 这种默认值的定义，也不再推荐，而是直接在类上声明
// ❌ withDefaults(defineProps&amp;lt;Props&amp;gt;(), { dest: &#x27;--&#x27; });
// ✅ @Setup
// ✅ class App extends Define&amp;lt;Props, Emit&amp;gt; {
// ✅     public readonly dest = &#x27;--&#x27;
// ✅ }

// Setup 装饰器，会在类实例化时，自动 使用 reactive 包装类，
// 如果你在 setup 手动实例化，则不需要再执行一次 reactive 
// const app = reactive(new App()); // ❌
// const app = new App();           // ✅
&amp;lt;/script&amp;gt;
&amp;lt;template&amp;gt;
    &amp;lt;button class=&quot;btn&quot; @click=&quot;click($event)&quot;&amp;gt;
        &amp;lt;span class=&quot;text&quot;&amp;gt;{{ text }}&amp;lt;/span&amp;gt;
        &amp;lt;span class=&quot;props-dest&quot;&amp;gt;{{ dest }}&amp;lt;/span&amp;gt;
        &amp;lt;span class=&quot;props-value&quot;&amp;gt;{{ $props.value }}&amp;lt;/span&amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;多个类实例&lt;/h2&gt;

&lt;p&gt;在一些复杂的业务时，有时需要多个实例&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;script lang=&quot;ts&quot;&amp;gt;
import { onBeforeMount, onMounted } from &#x27;vue&#x27;;
import { Setup, Context, PassOnTo } from &#x27;vue-class-setup&#x27;;

@Setup
class Base extends Context {
    public value = 0;
    public get text() {
        return String(this.value);
    }
    @PassOnTo(onBeforeMount)
    public init() {
        this.value++;
    }
}

@Setup
class Left extends Base {
    public left = 0;
    public get text() {
        return String(`value:${this.value}`);
    }
    public init() {
        super.init();
        this.value++;
    }
    @PassOnTo(onMounted)
    public initLeft() {
        this.left++;
    }
}

@Setup
class Right extends Base {
    public right = 0;
    public init() {
        super.init();
        this.value++;
    }
    @PassOnTo(onMounted)
    public initLeft() {
        this.right++;
    }
}
&amp;lt;/script&amp;gt;
&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
const left = new Left();
const right = new Right();
&amp;lt;/script&amp;gt;
&amp;lt;template&amp;gt;
    &amp;lt;p class=&quot;left&quot;&amp;gt;{{ left.text }}&amp;lt;/p&amp;gt;
    &amp;lt;p class=&quot;right&quot;&amp;gt;{{ right.text }}&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;PassOnTo&lt;/h2&gt;

&lt;p&gt;在类实例准备就绪后，PassOnTo 装饰器，会将对应的函数，传递给回调，这样我们就可以顺利的和 &lt;code&gt;onMounted&lt;/code&gt; 等钩子一起配合使用了&lt;/p&gt;

&lt;pre lang=&quot;ts&quot;&gt;&lt;code&gt;import { onMounted } from &#x27;vue&#x27;;
@Setup
class App extends Define {
    @PassOnTo(onMounted)
    public onMounted() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Watch&lt;/h2&gt;

&lt;p&gt;在使用 &lt;code&gt;vue-property-decorator&lt;/code&gt; 的 &lt;code&gt;Watch&lt;/code&gt; 装饰器时，他会接收一个字符串类型，它不能正确的识别类实例是否存在这个字段，但是现在 &lt;a href=&quot;https://github.com/fmfe/vue-class-setup&quot;&gt;vue-class-setup&lt;/a&gt; 能检查你的类型是否正确，如果传入一个类实例不存在的字段，类型将会报错&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;script lang=&quot;ts&quot;&amp;gt;
import { Setup, Watch, Context } from &#x27;vue-class-setup&#x27;;

@Setup
class App extends Context {
    public value = 0;
    public immediateValue = 0;
    public onClick() {
        this.value++;
    }
    @Watch(&#x27;value&#x27;)
    public watchValue(value: number, oldValue: number) {
        if (value &amp;gt; 100) {
            this.value = 100;
        }
    }
    @Watch(&#x27;value&#x27;, { immediate: true })
    public watchImmediateValue(value: number, oldValue: number | undefined) {
        if (typeof oldValue === &#x27;undefined&#x27;) {
            this.immediateValue = 10;
        } else {
            this.immediateValue++;
        }
    }
}
&amp;lt;/script&amp;gt;
&amp;lt;script setup lang=&quot;ts&quot;&amp;gt;
const app = new App();
&amp;lt;/script&amp;gt;
&amp;lt;template&amp;gt;
    &amp;lt;p class=&quot;value&quot;&amp;gt;{{ app.value }}&amp;lt;/p&amp;gt;
    &amp;lt;p class=&quot;immediate-value&quot;&amp;gt;{{ app.immediateValue }}&amp;lt;/p&amp;gt;
    &amp;lt;button @click=&quot;app.onClick()&quot;&amp;gt;Add&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;defineExpose&lt;/h2&gt;

&lt;p&gt;在一些场景，我们希望可以暴露组件的一些方法和属性，那么就需要使用 &lt;code&gt;defineExpose&lt;/code&gt; 编译宏来定义导出了，所以提供了一个&lt;code&gt;.use&lt;/code&gt;的类静态方法帮你获取当前注入的类实例&lt;/p&gt;

&lt;pre lang=&quot;vue&quot;&gt;&lt;code&gt;&amp;lt;script lang=&quot;ts&quot;&amp;gt;
import { defineComponent } from &#x27;vue&#x27;;
import { Setup, Context } from &#x27;vue-class-setup&#x27;;

@Setup
class App extends Context {
    private _value = 0;
    public get text() {
        return String(this._value);
    }
    public set text(text: string) {
        this._value = Number(text);
    }
    public addValue() {
        this._value++;
    }
}
export default defineComponent({
    ...App.inject(),
});
&amp;lt;/script&amp;gt;
&amp;lt;script lang=&quot;ts&quot; setup&amp;gt;
const app = App.use();

defineExpose({
    addValue: app.addValue,
});
&amp;lt;/script&amp;gt;
&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p class=&quot;text&quot;&amp;gt;{{ text }}&amp;lt;/p&amp;gt;
        &amp;lt;p class=&quot;text-eq&quot;&amp;gt;{{ app.text === text }}&amp;lt;/p&amp;gt;
        &amp;lt;button @click=&quot;addValue&quot;&amp;gt;&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;为什么使用 class ？&lt;/h2&gt;

&lt;p&gt;其实不太想讨论这个问题，喜欢的自然会喜欢，不喜欢的自然会不喜欢，世上本无路，走的人多了，就有了路。&lt;/p&gt;

&lt;h2&gt;最后&lt;/h2&gt;

&lt;p&gt;不管是 选项 API 还是 组合式API，代码都是人写出来的，别人都说 Vue 无法胜任大型项目，但是在我司的实践中经受住了实践，基本上没有产生那种数千行的组件代码。&lt;/p&gt;

&lt;p&gt;如果喜欢使用 class 风格来编写代码的，不妨来关注一下&lt;/p&gt;



&lt;p&gt;如果你的业务复杂，需要使用 SSR 和微服务架构，不妨也关注一下&lt;/p&gt;


&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bdc8a567d7fa074ff1bb97f4f794bf2f</guid>
<title>自动化的艺术</title>
<link>https://toutiao.io/k/emvjd0m</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;对于基础设施来说，很多服务都有类似的架构、数据库交互和UI，本文介绍了Paypal通过模板自动化基础设施微服务脚手架代码的实践，最大化节约了开发服务的时间并保证了服务的一致性。原文：The Art of Automating Automation&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;简介&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为PayPal网站可靠性和云工程(SRCE, Site Reliability &amp;amp; Cloud Engineering)团队的一部分，我们一直致力于通过自动化提升效率。然而，编写能够让人凭直觉自动化完成工作的软件并不是一件简单的任务。在PayPal基础设施中，任何操作的自动化组件都必须提供最高级别的可靠性、安全性、效率和自助服务能力。本文我们将讨论如何在全球网络服务(GNS, Global Network Services)中实现自动化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GNS团队有大量的操作需要自动化，范围从需要几小时人力投入的普通任务，到需要运维团队投入很多天精力的复杂任务。对我们来说，最大的挑战是如何在不消耗大量开发周期的情况下自动化这些大大小小的操作，我们需要努力证明“ROI(投资回报)”的合理性，这点特别重要。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;软件服务需求&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要将任何网络功能转变为服务，需要完成以下一系列任务:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;用户界面开发&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;开放给PayPal开发社区的所有服务都必须具有某种形式的用户界面(UI)，以便用户像使用任何其他服务一样使用网络。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数据库交互和表管理&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;大多数服务需要设计数据库表以及编写数据库交互代码来操作数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;核心业务逻辑&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;与自动化工具Terraform集成&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们的基础用户包括网络运营团队，他们不会使用基于UI的服务。相反，他们基于GitOps模式运作，这意味着我们开发的所有服务都需要通过开发Terraform provider与Terraform集成。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;认证和授权&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;这涉及到与标准的企业身份验证(如单点登录、多因素身份验证、角色管理等)的集成。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务帐户，API消费者的节流和限速&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们决定为所有东西提供API。因此，我们开发的所有服务都必须提供服务帐户，并确保能够节流和限速。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的列表可以看出，构建一个可行的网络服务需要花费大量时间开发重要的外围组件。在理想情况下，我们能够只把时间花在编写核心业务逻辑上，而不做其他事情。通过两种方式，我们达到了编写更少代码的理想状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决这个问题的第一种方法是迁移到真正的微服务组件以及构建可插拔的库架构，第二种方法是基于模板的自动代码生成，可以基于通用模板生成UI、后端和数据库层代码。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;代码生成&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;长期以来，数据建模一直是设计良好的软件产品的支柱。一旦确定了基本数据构建块，构建围绕数据工作的软件组件就比较容易了。如果数据是以标准格式获取的，那么围绕数据的各种软件组件就有很大的自动化空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这正是我们采用的方法。我们团队的所有项目都从识别数据模型开始。数据模型是用YAML格式定义的，这样我们的动态代码生成模块就可以为系统的各个部分生成代码。下图显示了这个过程:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.540625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UaBkuWXlf0qAyEZFgzWt99o2aSakxVEETDKE0icCsWTXrOeHz06eNMEzJW1oXvROn4dIKkHsiasicSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;figcaption&gt;GNS软件架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;UI代码生成&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;React框架已经被包括PayPal在内的业界广泛采用。PayPal应用程序团队有一个非常模块化的React库，用于构建面向客户的应用程序。我们以该库为基础，在任何合适的地方使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数系统程序员都不熟悉UI编程。为了促进快速UI组件开发，我们依赖于模型驱动设计。使用模型驱动设计，典型的GNS开发人员只需指定UI布局，不用编写任何UI代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GNS代码生成引擎采用用户定义的模型，并使用React框架，生成一个独立的React代码容器，带有功能完整的UI。这种方法允许开发人员专注于应用程序的业务逻辑。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;后端代码生成&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过去，开发提供REST API功能的微服务非常繁琐，开发人员需要为每个端点编写软件并配置web服务网关。然而，Flask框架作为标准框架已经得到了Python开发人员的广泛认可。类似的，Golang除了内置支持之外，还有gorilla/mux框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数GNS服务是用Golang或Python编写的。我们在上述框架的帮助下，设计了基于Jinja模板生成通用代码的GNS代码生成引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以YAML格式定义的数据模型，代码生成引擎使用预定义的Jinja模板来生成服务的基础代码。GNS开发人员可以在这些代码的基础上实现精确的业务逻辑，从而减少编程错误，并消除从头编写所有内容的乏味工作。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据库层代码生成&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数GNS服务需要某种形式的数据库来存储建模阶段所描述的信息。编写代码来添加、删除和修改数据库中的条目是很繁琐的，而且容易出现bug、风格不统一等。Python和Golang拥有处理对象关系映射(ORM, Object Relationship Mapper )的开源库，我们选择采用sqlalchemy来规范化数据库操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于模型是用YAML格式定义的，我们的代码生成引擎除了生成后端代码外，还生成数据库处理方法。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Terraform Provider代码生成&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Terraform已经成为自动化基础设施的最常用工具。作为GNS服务提供商，我们已经决定所有自动化服务都将有针对Terraform的接口，从而能够适配正被不断采用的持续部署流水线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Terraform体系架构灵活且方便扩展，能够为我们喜欢的任何自动化添加Provider。请参阅terrform文档了解更多细节。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21041666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UaBkuWXlf0qAyEZFgzWt99DHCYs2ey9ft2o0HtnhnNrhLS88N0D8yicgHNOBOlGCZP7qKD97JY5ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;figcaption&gt;Terraform Provider架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于Terraform Provider是一个构造良好的库，我们的代码生成引擎可以基于Jinja模板生成基于golang的Provider程序，然后将这些代码构建到一个可插拔模块中，该模块可以安装到正在运行的terraform实例中。一旦完成，用户就可以在GNS服务上进行标准的terraform操作，就像任何其他服务一样。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结论&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自动化任何网络服务所需的大部分任务已经由我们的代码生成引擎生成，从而允许我们只专注于服务的核心逻辑。转向微服务体系架构以及采用基于模板的代码生成和模型驱动的体系架构使我们能够以更快的速度生产服务。在撰写本文时，我们可以在一天之内完成任何服务的工作框架，从而帮助团队可以专注于核心逻辑，并在更短的时间内产生更多的服务。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt; &lt;br/&gt;[1] The Art of Automating Automation: https://medium.com/paypal-tech/the-art-of-automating-automation-17b32594a41f&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>96c398c38307529827c256b6f817fbf4</guid>
<title>基于AOP模式实现系统告警</title>
<link>https://toutiao.io/k/t4w9d0y</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;blockquote&gt;&lt;p&gt;工作群里的消息怕过于安静，又怕过于频繁&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;一、业务背景&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;在开发的过程中会遇到各种各样的开发问题，服务器宕机、网络抖动、代码本身的bug等等。针对代码的bug，我们可以提前预支，通过发送告警信息来警示我们去干预，尽早处理。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、告警的方式&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、钉钉告警&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;通过在企业钉钉群，添加群机器人的方式，通过机器人向群内发送报警信息。至于钉钉机器人怎么创建，发送消息的api等等，请参考官方文档&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、企业微信告警&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;同样的套路，企业微信也是，在企业微信群中，添加群机器人。通过机器人发送告警信息。具体请看官方文档&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、邮件告警&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;与上述不同的是，邮件是发送给个人的，当然也可以是批量发送，只实现了发送文本格式的方式，至于markdown格式，有待考察。邮件发送相对比较简单，这里就不展开赘述。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、源码解析&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、Alarm自定义注解&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Target&lt;/span&gt;({ElementType.METHOD})&lt;br/&gt;&lt;span&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;br/&gt;&lt;span&gt;@Documented&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Inherited&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;@interface&lt;/span&gt; Alarm {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 报警标题&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; String&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;String &lt;span&gt;title&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送报警格式：目前支持text，markdown&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;MessageTye &lt;span&gt;messageType&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; MessageTye.TEXT&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 告警模板id&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;String &lt;span&gt;templateId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 成功是否通知：true-通知，false-不通知&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;successNotice&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;1.1、注解使用&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Alarm&lt;/code&gt;标记在方法上使用，被标记的方法发生异常，会根据配置，读取配置信息，发送异常堆栈信息。使用方法如下所示：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Alarm&lt;/span&gt;(title = &lt;span&gt;&quot;某某业务告警&quot;&lt;/span&gt;, messageType = MessageTye.MARKDOWN, templateId = &lt;span&gt;&quot;errorTemp&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;1.2、注解字段解析&lt;/span&gt;&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;告警消息标题：可以定义为业务信息，如导师身份计算&lt;/p&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;messageType&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;告警消息展示类型：目前支持text文本类型，markdown类型&lt;/p&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;templateId&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;消息模板id：与配置文件中配置的模板id一致&lt;/p&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;successNotice&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;正常情况是否也需要发送告警信息，默认值是fasle，表示不需要发送。当然，有些业务场景正常情况也需要发送，比如：支付出单通知等。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、配置文件分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;2.1、钉钉配置文件&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alarm:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;dingtalk:&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 开启钉钉发送告警&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 钉钉群机器人唯一的token&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;token:&lt;/span&gt; &lt;span&gt;xxxxxx&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 安全设置：加签的密钥&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;secret:&lt;/span&gt; &lt;span&gt;xxxxxxx&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.2、企业微信配置文件&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alarm:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;wechat:&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 开启企业微信告警&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 企业微信群机器人唯一key&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;key:&lt;/span&gt; &lt;span&gt;xxxxxdsf&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 被@人的手机号&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;to-user:&lt;/span&gt; &lt;span&gt;1314243&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.3、邮件配置文件&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alarm:&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;mail:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;smtpHost:&lt;/span&gt; &lt;span&gt;xxx@qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;smtpPort:&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;to:&lt;/span&gt; &lt;span&gt;xxx@qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;from:&lt;/span&gt; &lt;span&gt;132&lt;/span&gt;&lt;span&gt;@qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;username:&lt;/span&gt; &lt;span&gt;wsrf&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;password:&lt;/span&gt; &lt;span&gt;xxx&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.4、自定义模板配置&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alarm:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;template:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 开启通过模板配置&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 配置模板来源为文件&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;source:&lt;/span&gt; &lt;span&gt;FILE&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 配置模板数据&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;templates:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;errorTemp:&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;templateId:&lt;/span&gt; &lt;span&gt;errorTemp&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;templateName:&lt;/span&gt; &lt;span&gt;服务异常模板&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;templateContent:&lt;/span&gt; &lt;span&gt;这里是配置模板的内容&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;spring:alarm:template:enabled&lt;/code&gt;，Boolean类型，表示开启告警消息使用模板发送。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;spring:alarm:template:source&lt;/code&gt;，模板来源，枚举类：JDBC（数据库）、FILE（配置文件）、MEMORY（内存），目前只支持FILE，其他两种可自行扩展。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;spring:alarm:template:templates&lt;/code&gt;，配置模板内容，是一个map，&lt;code&gt;errorTemp&lt;/code&gt;是模板id，需要使用哪种模板，就在&lt;code&gt;@Alarm&lt;/code&gt;中的templateId设置为对应配置文件中的templateId。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;3、核心AOP分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;3.1、原理分析&lt;/span&gt;&lt;/h3&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6061946902654868&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBibB9PbDKazdiafMDFsibRbLsA6Nshib4yQqDgkmGuWjyNtD0ibplD1tiaTag2Otv2uw4o0RPUZrrUt2Wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1356&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;3.2、自定义切面&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Aspect&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AlarmAspect&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; AlarmTemplateProvider alarmTemplateProvider;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String ERROR_TEMPLATE = &lt;span&gt;&quot;\n\n&amp;lt;font color=\&quot;#F37335\&quot;&amp;gt;异常信息:&amp;lt;/font&amp;gt;\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;```java\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;#{[exception]}\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;```\n&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String TEXT_ERROR_TEMPLATE = &lt;span&gt;&quot;\n异常信息:\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;#{[exception]}&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String MARKDOWN_TITLE_TEMPLATE = &lt;span&gt;&quot;# 【#{[title]}】\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;\n请求状态：&amp;lt;font color=\&quot;#{[stateColor]}\&quot;&amp;gt;#{[state]}&amp;lt;/font&amp;gt;\n\n&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String TEXT_TITLE_TEMPLATE = &lt;span&gt;&quot;【#{[title]}】\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;请求状态：#{[state]}\n&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Pointcut&lt;/span&gt;(&lt;span&gt;&quot;@annotation(alarm)&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;alarmPointcut&lt;/span&gt;&lt;span&gt;(Alarm alarm)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Around&lt;/span&gt;(value = &lt;span&gt;&quot;alarmPointcut(alarm)&quot;&lt;/span&gt;, argNames = &lt;span&gt;&quot;joinPoint,alarm&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;around&lt;/span&gt;&lt;span&gt;(ProceedingJoinPoint joinPoint, Alarm alarm)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;{&lt;br/&gt;        Object result = joinPoint.proceed();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (alarm.successNotice()) {&lt;br/&gt;            String templateId = alarm.templateId();&lt;br/&gt;            String fileTemplateContent = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (Objects.nonNull(alarmTemplateProvider)) {&lt;br/&gt;                AlarmTemplate alarmTemplate = alarmTemplateProvider.loadingAlarmTemplate(templateId);&lt;br/&gt;                fileTemplateContent = alarmTemplate.getTemplateContent();&lt;br/&gt;            }&lt;br/&gt;            String templateContent = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;            MessageTye messageTye = alarm.messageType();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (messageTye.equals(MessageTye.TEXT)) {&lt;br/&gt;                templateContent = TEXT_TITLE_TEMPLATE.concat(fileTemplateContent);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (messageTye.equals(MessageTye.MARKDOWN)) {&lt;br/&gt;                templateContent = MARKDOWN_TITLE_TEMPLATE.concat(fileTemplateContent);&lt;br/&gt;            }&lt;br/&gt;            Map&amp;lt;String, Object&amp;gt; alarmParamMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;            alarmParamMap.put(&lt;span&gt;&quot;title&quot;&lt;/span&gt;, alarm.title());&lt;br/&gt;            alarmParamMap.put(&lt;span&gt;&quot;stateColor&quot;&lt;/span&gt;, &lt;span&gt;&quot;#45B649&quot;&lt;/span&gt;);&lt;br/&gt;            alarmParamMap.put(&lt;span&gt;&quot;state&quot;&lt;/span&gt;, &lt;span&gt;&quot;成功&quot;&lt;/span&gt;);&lt;br/&gt;            sendAlarm(alarm, templateContent, alarmParamMap);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@AfterThrowing&lt;/span&gt;(pointcut = &lt;span&gt;&quot;alarmPointcut(alarm)&quot;&lt;/span&gt;, argNames = &lt;span&gt;&quot;joinPoint,alarm,e&quot;&lt;/span&gt;, throwing = &lt;span&gt;&quot;e&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doAfterThrow&lt;/span&gt;&lt;span&gt;(JoinPoint joinPoint, Alarm alarm, Exception e)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        log.info(&lt;span&gt;&quot;请求接口发生异常 : [{}]&quot;&lt;/span&gt;, e.getMessage());&lt;br/&gt;        String templateId = alarm.templateId();&lt;br/&gt;        &lt;span&gt;// 加载模板中配置的内容，若有&lt;/span&gt;&lt;br/&gt;        String templateContent = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;        String fileTemplateContent = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (Objects.nonNull(alarmTemplateProvider)) {&lt;br/&gt;            AlarmTemplate alarmTemplate = alarmTemplateProvider.loadingAlarmTemplate(templateId);&lt;br/&gt;            fileTemplateContent = alarmTemplate.getTemplateContent();&lt;br/&gt;        }&lt;br/&gt;        MessageTye messageTye = alarm.messageType();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (messageTye.equals(MessageTye.TEXT)) {&lt;br/&gt;            templateContent = TEXT_TITLE_TEMPLATE.concat(fileTemplateContent).concat(TEXT_ERROR_TEMPLATE);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (messageTye.equals(MessageTye.MARKDOWN)) {&lt;br/&gt;            templateContent = MARKDOWN_TITLE_TEMPLATE.concat(fileTemplateContent).concat(ERROR_TEMPLATE);&lt;br/&gt;        }&lt;br/&gt;        Map&amp;lt;String, Object&amp;gt; alarmParamMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;        alarmParamMap.put(&lt;span&gt;&quot;title&quot;&lt;/span&gt;, alarm.title());&lt;br/&gt;        alarmParamMap.put(&lt;span&gt;&quot;stateColor&quot;&lt;/span&gt;, &lt;span&gt;&quot;#FF4B2B&quot;&lt;/span&gt;);&lt;br/&gt;        alarmParamMap.put(&lt;span&gt;&quot;state&quot;&lt;/span&gt;, &lt;span&gt;&quot;失败&quot;&lt;/span&gt;);&lt;br/&gt;        alarmParamMap.put(&lt;span&gt;&quot;exception&quot;&lt;/span&gt;, ExceptionUtil.stacktraceToString(e));&lt;br/&gt;        sendAlarm(alarm, templateContent, alarmParamMap);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sendAlarm&lt;/span&gt;&lt;span&gt;(Alarm alarm, String templateContent, Map&amp;lt;String, Object&amp;gt; alarmParamMap)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ExpressionParser parser = &lt;span&gt;new&lt;/span&gt; SpelExpressionParser();&lt;br/&gt;        TemplateParserContext parserContext = &lt;span&gt;new&lt;/span&gt; TemplateParserContext();&lt;br/&gt;        String message = parser.parseExpression(templateContent, parserContext).getValue(alarmParamMap, String&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        MessageTye messageTye = alarm.messageType();&lt;br/&gt;        NotifyMessage notifyMessage = &lt;span&gt;new&lt;/span&gt; NotifyMessage();&lt;br/&gt;        notifyMessage.setTitle(alarm.title());&lt;br/&gt;        notifyMessage.setMessageTye(messageTye);&lt;br/&gt;        notifyMessage.setMessage(message);&lt;br/&gt;        AlarmFactoryExecute.execute(notifyMessage);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;4、模板提供器&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;4.1、AlarmTemplateProvider&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;定义一个抽象接口&lt;code&gt;AlarmTemplateProvider&lt;/code&gt;，用于被具体的子类实现&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;AlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 加载告警模板&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; templateId 模板id&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; AlarmTemplate&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AlarmTemplate &lt;span&gt;loadingAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.2、BaseAlarmTemplateProvider&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;抽象类&lt;code&gt;BaseAlarmTemplateProvider&lt;/code&gt;实现该抽象接口&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BaseAlarmTemplateProvider&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AlarmTemplate &lt;span&gt;loadingAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(templateId)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmException(&lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;告警模板配置id不能为空&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; getAlarmTemplate(templateId);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 查询告警模板&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; templateId 模板id&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; AlarmTemplate&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;abstract&lt;/span&gt; AlarmTemplate &lt;span&gt;getAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.3、YamlAlarmTemplateProvider&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;具体实现类&lt;code&gt;YamlAlarmTemplateProvider&lt;/code&gt;，实现从配置文件中读取模板，该类在项目启动时，会被加载进spring的bean容器&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;YamlAlarmTemplateProvider&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseAlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; TemplateConfig templateConfig;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AlarmTemplate &lt;span&gt;getAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Map&amp;lt;String, AlarmTemplate&amp;gt; configTemplates = templateConfig.getTemplates();&lt;br/&gt;        AlarmTemplate alarmTemplate = configTemplates.get(templateId);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (ObjectUtils.isEmpty(alarmTemplate)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmException(&lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;未发现告警配置模板&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; alarmTemplate;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.4、MemoryAlarmTemplateProvider和JdbcAlarmTemplateProvider&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;抽象类&lt;code&gt;BaseAlarmTemplateProvider&lt;/code&gt;还有其他两个子类，分别是&lt;code&gt;MemoryAlarmTemplateProvider&lt;/code&gt;和&lt;code&gt;JdbcAlarmTemplateProvider&lt;/code&gt;。但是这两个子类暂时还未实现逻辑，后续可以自行扩展。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MemoryAlarmTemplateProvider&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseAlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Function&amp;lt;String, AlarmTemplate&amp;gt; function;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AlarmTemplate &lt;span&gt;getAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        AlarmTemplate alarmTemplate = function.apply(templateId);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (ObjectUtils.isEmpty(alarmTemplate)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmException(&lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;未发现告警配置模板&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; alarmTemplate;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JdbcAlarmTemplateProvider&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseAlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Function&amp;lt;String, AlarmTemplate&amp;gt; function;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AlarmTemplate &lt;span&gt;getAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        AlarmTemplate alarmTemplate = function.apply(templateId);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (ObjectUtils.isEmpty(alarmTemplate)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmException(&lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;未发现告警配置模板&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; alarmTemplate;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;两个类中都有Function&amp;lt;String, AlarmTemplate&amp;gt;接口，为函数式接口，可以供外部自行去实现逻辑。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;5、告警发送&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;5.1、AlarmFactoryExecute&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;该类内部保存了一个容器，主要用于缓存真正的发送类&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AlarmFactoryExecute&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;AlarmWarnService&amp;gt; serviceList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AlarmFactoryExecute&lt;/span&gt;&lt;span&gt;(List&amp;lt;AlarmWarnService&amp;gt; alarmLogWarnServices)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        serviceList = alarmLogWarnServices;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addAlarmLogWarnService&lt;/span&gt;&lt;span&gt;(AlarmWarnService alarmLogWarnService)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        serviceList.add(alarmLogWarnService);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;AlarmWarnService&amp;gt; &lt;span&gt;getServiceList&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; serviceList;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(NotifyMessage notifyMessage)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (AlarmWarnService alarmWarnService : getServiceList()) {&lt;br/&gt;            alarmWarnService.send(notifyMessage);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.2、AlarmWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;抽象接口，只提供一个发送的方法&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;AlarmWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送信息&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; notifyMessage message&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(NotifyMessage notifyMessage)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.3、BaseWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;与抽象的模板提供器&lt;code&gt;AlarmTemplateProvider&lt;/code&gt;一样的套路，该接口有一个抽象的实现类&lt;code&gt;BaseWarnService&lt;/code&gt;,该类对外暴露send方法，用于发送消息，内部用doSendMarkdown，doSendText方法实现具体的发送逻辑，当然具体发送逻辑还是得由其子类去实现。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BaseWarnService&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AlarmWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(NotifyMessage notifyMessage)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (notifyMessage.getMessageTye().equals(MessageTye.TEXT)) {&lt;br/&gt;            CompletableFuture.runAsync(() -&amp;gt; {&lt;br/&gt;                &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                    doSendText(notifyMessage.getMessage());&lt;br/&gt;                } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;                    log.error(&lt;span&gt;&quot;send text warn message error&quot;&lt;/span&gt;, e);&lt;br/&gt;                }&lt;br/&gt;            });&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (notifyMessage.getMessageTye().equals(MessageTye.MARKDOWN)) {&lt;br/&gt;            CompletableFuture.runAsync(() -&amp;gt; {&lt;br/&gt;                &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                    doSendMarkdown(notifyMessage.getTitle(), notifyMessage.getMessage());&lt;br/&gt;                } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;                    log.error(&lt;span&gt;&quot;send markdown warn message error&quot;&lt;/span&gt;, e);&lt;br/&gt;                }&lt;br/&gt;            });&lt;br/&gt;        }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送Markdown消息&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; title   Markdown标题&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; message Markdown消息&lt;br/&gt;     * &lt;span&gt;@throws&lt;/span&gt; Exception 异常&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendMarkdown&lt;/span&gt;&lt;span&gt;(String title, String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送文本消息&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; message 文本消息&lt;br/&gt;     * &lt;span&gt;@throws&lt;/span&gt; Exception 异常&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendText&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.4、DingTalkWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;主要实现了钉钉发送告警信息的逻辑&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DingTalkWarnService&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ROBOT_SEND_URL = &lt;span&gt;&quot;https://oapi.dingtalk.com/robot/send?access_token=&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String token;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String secret;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;DingTalkWarnService&lt;/span&gt;&lt;span&gt;(String token, String secret)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.token = token;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.secret = secret;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sendRobotMessage&lt;/span&gt;&lt;span&gt;(DingTalkSendRequest dingTalkSendRequest)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        String json = JSONUtil.toJsonStr(dingTalkSendRequest);&lt;br/&gt;        String sign = getSign();&lt;br/&gt;        String body = HttpRequest.post(sign).contentType(ContentType.JSON.getValue()).body(json).execute().body();&lt;br/&gt;        log.info(&lt;span&gt;&quot;钉钉机器人通知结果：{}&quot;&lt;/span&gt;, body);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 获取签名&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; 返回签名&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;getSign&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; timestamp = System.currentTimeMillis();&lt;br/&gt;        String stringToSign = timestamp + &lt;span&gt;&quot;\n&quot;&lt;/span&gt; + secret;&lt;br/&gt;        Mac mac = Mac.getInstance(&lt;span&gt;&quot;HmacSHA256&quot;&lt;/span&gt;);&lt;br/&gt;        mac.init(&lt;span&gt;new&lt;/span&gt; SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), &lt;span&gt;&quot;HmacSHA256&quot;&lt;/span&gt;));&lt;br/&gt;        &lt;span&gt;byte&lt;/span&gt;[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ROBOT_SEND_URL + token + &lt;span&gt;&quot;&amp;amp;timestamp=&quot;&lt;/span&gt; + timestamp + &lt;span&gt;&quot;&amp;amp;sign=&quot;&lt;/span&gt; + URLEncoder.encode(&lt;span&gt;new&lt;/span&gt; String(Base64.getEncoder().encode(signData)), StandardCharsets.UTF_8.toString());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendText&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        DingTalkSendRequest param = &lt;span&gt;new&lt;/span&gt; DingTalkSendRequest();&lt;br/&gt;        param.setMsgtype(DingTalkSendMsgTypeEnum.TEXT.getType());&lt;br/&gt;        param.setText(&lt;span&gt;new&lt;/span&gt; DingTalkSendRequest.Text(message));&lt;br/&gt;        sendRobotMessage(param);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendMarkdown&lt;/span&gt;&lt;span&gt;(String title, String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        DingTalkSendRequest param = &lt;span&gt;new&lt;/span&gt; DingTalkSendRequest();&lt;br/&gt;        param.setMsgtype(DingTalkSendMsgTypeEnum.MARKDOWN.getType());&lt;br/&gt;        DingTalkSendRequest.Markdown markdown = &lt;span&gt;new&lt;/span&gt; DingTalkSendRequest.Markdown(title, message);&lt;br/&gt;        param.setMarkdown(markdown);&lt;br/&gt;        sendRobotMessage(param);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.5、WorkWeXinWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;主要实现了发送企业微信告警信息的逻辑&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WorkWeXinWarnService&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String SEND_MESSAGE_URL = &lt;span&gt;&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=%s&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String key;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String toUser;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;WorkWeXinWarnService&lt;/span&gt;&lt;span&gt;(String key, String toUser)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.key = key;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.toUser = toUser;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;createPostData&lt;/span&gt;&lt;span&gt;(WorkWeXinSendMsgTypeEnum messageTye, String contentValue)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        WorkWeXinSendRequest wcd = &lt;span&gt;new&lt;/span&gt; WorkWeXinSendRequest();&lt;br/&gt;        wcd.setMsgtype(messageTye.getType());&lt;br/&gt;        List&amp;lt;String&amp;gt; toUsers = Arrays.asList(&lt;span&gt;&quot;@all&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (StringUtils.isNotEmpty(toUser)) {&lt;br/&gt;            String[] split = toUser.split(&lt;span&gt;&quot;\\|&quot;&lt;/span&gt;);&lt;br/&gt;            toUsers = Arrays.asList(split);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (messageTye.equals(WorkWeXinSendMsgTypeEnum.TEXT)) {&lt;br/&gt;            WorkWeXinSendRequest.Text text = &lt;span&gt;new&lt;/span&gt; WorkWeXinSendRequest.Text(contentValue, toUsers);&lt;br/&gt;            wcd.setText(text);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (messageTye.equals(WorkWeXinSendMsgTypeEnum.MARKDOWN)) {&lt;br/&gt;            WorkWeXinSendRequest.Markdown markdown = &lt;span&gt;new&lt;/span&gt; WorkWeXinSendRequest.Markdown(contentValue, toUsers);&lt;br/&gt;            wcd.setMarkdown(markdown);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; JSONUtil.toJsonStr(wcd);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendText&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String data = createPostData(WorkWeXinSendMsgTypeEnum.TEXT, message);&lt;br/&gt;        String url = String.format(SEND_MESSAGE_URL, key);&lt;br/&gt;        String resp = HttpRequest.post(url).body(data).execute().body();&lt;br/&gt;        log.info(&lt;span&gt;&quot;send work weixin message call [{}], param:{}, resp:{}&quot;&lt;/span&gt;, url, data, resp);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendMarkdown&lt;/span&gt;&lt;span&gt;(String title, String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String data = createPostData(WorkWeXinSendMsgTypeEnum.MARKDOWN, message);&lt;br/&gt;        String url = String.format(SEND_MESSAGE_URL, key);&lt;br/&gt;        String resp = HttpRequest.post(url).body(data).execute().body();&lt;br/&gt;        log.info(&lt;span&gt;&quot;send work weixin message call [{}], param:{}, resp:{}&quot;&lt;/span&gt;, url, data, resp);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.6、MailWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;主要实现邮件告警逻辑&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MailWarnService&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String smtpHost;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String smtpPort;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String to;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String from;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String username;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String password;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Boolean ssl = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Boolean debug = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;MailWarnService&lt;/span&gt;&lt;span&gt;(String smtpHost, String smtpPort, String to, String from, String username, String password)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.smtpHost = smtpHost;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.smtpPort = smtpPort;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.to = to;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.from = from;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.username = username;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.password = password;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setSsl&lt;/span&gt;&lt;span&gt;(Boolean ssl)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.ssl = ssl;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setDebug&lt;/span&gt;&lt;span&gt;(Boolean debug)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.debug = debug;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendText&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        Properties props = &lt;span&gt;new&lt;/span&gt; Properties();&lt;br/&gt;        props.setProperty(&lt;span&gt;&quot;mail.smtp.auth&quot;&lt;/span&gt;, &lt;span&gt;&quot;true&quot;&lt;/span&gt;);&lt;br/&gt;        props.setProperty(&lt;span&gt;&quot;mail.transport.protocol&quot;&lt;/span&gt;, &lt;span&gt;&quot;smtp&quot;&lt;/span&gt;);&lt;br/&gt;        props.setProperty(&lt;span&gt;&quot;mail.smtp.host&quot;&lt;/span&gt;, smtpHost);&lt;br/&gt;        props.setProperty(&lt;span&gt;&quot;mail.smtp.port&quot;&lt;/span&gt;, smtpPort);&lt;br/&gt;        props.put(&lt;span&gt;&quot;mail.smtp.ssl.enable&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        Session session = Session.getInstance(props);&lt;br/&gt;        session.setDebug(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;        MimeMessage msg = &lt;span&gt;new&lt;/span&gt; MimeMessage(session);&lt;br/&gt;        msg.setFrom(&lt;span&gt;new&lt;/span&gt; InternetAddress(from));&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (String toUser : to.split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;)) {&lt;br/&gt;            msg.setRecipient(MimeMessage.RecipientType.TO, &lt;span&gt;new&lt;/span&gt; InternetAddress(toUser));&lt;br/&gt;        }&lt;br/&gt;        Map&amp;lt;String, String&amp;gt; map = JSONUtil.toBean(message, Map&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        msg.setSubject(map.get(&lt;span&gt;&quot;subject&quot;&lt;/span&gt;), &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;        msg.setContent(map.get(&lt;span&gt;&quot;content&quot;&lt;/span&gt;), &lt;span&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;        msg.setSentDate(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;        Transport transport = session.getTransport();&lt;br/&gt;        transport.connect(username, password);&lt;br/&gt;        transport.sendMessage(msg, msg.getAllRecipients());&lt;br/&gt;        transport.close();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendMarkdown&lt;/span&gt;&lt;span&gt;(String title, String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        log.warn(&lt;span&gt;&quot;暂不支持发送Markdown邮件&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;6、AlarmAutoConfiguration自动装配类&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;运用了springboot自定义的starter，再&lt;code&gt;META-INF&lt;/code&gt;包下的配置文件&lt;code&gt;spring.factories&lt;/code&gt;下，配置上该类&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=\&lt;br/&gt;    com.seven.buttemsg.autoconfigure.AlarmAutoConfiguration&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;自动装配类，用于装载自定义的bean&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AlarmAutoConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 邮件相关配置装载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = MailConfig.PREFIX, name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;, havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(MailConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MailWarnServiceMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;(MailWarnService&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;MailWarnService&lt;/span&gt; &lt;span&gt;mailWarnService&lt;/span&gt;(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;MailConfig&lt;/span&gt; &lt;span&gt;mailConfig&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            MailWarnService mailWarnService = &lt;span&gt;new&lt;/span&gt; MailWarnService(mailConfig.getSmtpHost(), mailConfig.getSmtpPort(), mailConfig.getTo(), mailConfig.getFrom(), mailConfig.getUsername(), mailConfig.getPassword());&lt;br/&gt;            mailWarnService.setSsl(mailConfig.getSsl());&lt;br/&gt;            mailWarnService.setDebug(mailConfig.getDebug());&lt;br/&gt;            AlarmFactoryExecute.addAlarmLogWarnService(mailWarnService);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; mailWarnService;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 企业微信相关配置装载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = WorkWeXinConfig.PREFIX, name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;, havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(WorkWeXinConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WorkWechatWarnServiceMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;(MailWarnService&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;WorkWeXinWarnService&lt;/span&gt; &lt;span&gt;workWechatWarnService&lt;/span&gt;(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;WorkWeXinConfig&lt;/span&gt; &lt;span&gt;workWeXinConfig&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; WorkWeXinWarnService(workWeXinConfig.getKey(), workWeXinConfig.getToUser());&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;setDataChangedListener&lt;/span&gt;&lt;span&gt;(WorkWeXinWarnService workWeXinWarnService)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            AlarmFactoryExecute.addAlarmLogWarnService(workWeXinWarnService);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 钉钉相关配置装载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = DingTalkConfig.PREFIX, name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;, havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(DingTalkConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;DingTalkWarnServiceMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;(DingTalkWarnService&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;DingTalkWarnService&lt;/span&gt; &lt;span&gt;dingTalkWarnService&lt;/span&gt;(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;DingTalkConfig&lt;/span&gt; &lt;span&gt;dingtalkConfig&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            DingTalkWarnService dingTalkWarnService = &lt;span&gt;new&lt;/span&gt; DingTalkWarnService(dingtalkConfig.getToken(), dingtalkConfig.getSecret());&lt;br/&gt;            AlarmFactoryExecute.addAlarmLogWarnService(dingTalkWarnService);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; dingTalkWarnService;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 消息模板配置装载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = TemplateConfig.PREFIX, name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;, havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(TemplateConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;TemplateConfigServiceMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AlarmTemplateProvider &lt;span&gt;alarmTemplateProvider&lt;/span&gt;&lt;span&gt;(TemplateConfig templateConfig)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (TemplateSource.FILE == templateConfig.getSource()) {&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; YamlAlarmTemplateProvider(templateConfig);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (TemplateSource.JDBC == templateConfig.getSource()) {&lt;br/&gt;                &lt;span&gt;// 数据库（如mysql）读取文件，未实现，可自行扩展&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; JdbcAlarmTemplateProvider(templateId -&amp;gt; &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (TemplateSource.MEMORY == templateConfig.getSource()) {&lt;br/&gt;                &lt;span&gt;// 内存（如redis，本地内存）读取文件，未实现，可自行扩展&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MemoryAlarmTemplateProvider(templateId -&amp;gt; &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; YamlAlarmTemplateProvider(templateConfig);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AlarmAspect &lt;span&gt;alarmAspect&lt;/span&gt;&lt;span&gt;(@Autowired(required = &lt;span&gt;false&lt;/span&gt;)&lt;/span&gt; AlarmTemplateProvider alarmTemplateProvider) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmAspect(alarmTemplateProvider);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;主要借助spring的切面技术，以及springboot的自动装配原理，实现了发送告警逻辑。对业务代码无侵入，只需要在业务代码上标记注解，就可实现可插拔的功能，比较轻量。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、参考源码&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;编程文档：&lt;br/&gt;https://gitee.com/cicadasmile/butte-java-note&lt;br/&gt;&lt;br/&gt;应用仓库：&lt;br/&gt;https://gitee.com/cicadasmile/butte-flyer-parent&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7f737c6b4ce1b6a37d60b07ddbc15426</guid>
<title>独立开发变现周刊（第73期）：0美元营销预算创建年收入7.2万美元的产品交易市场</title>
<link>https://toutiao.io/k/8gibdxj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body-box nuxt-content&quot;&gt;&lt;h1 id=&quot;独立开发变现周刊第73期0美元营销预算创建年收入72万美元的产品交易市场&quot;&gt;&lt;a href=&quot;#%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E5%8F%98%E7%8E%B0%E5%91%A8%E5%88%8A%E7%AC%AC73%E6%9C%9F0%E7%BE%8E%E5%85%83%E8%90%A5%E9%94%80%E9%A2%84%E7%AE%97%E5%88%9B%E5%BB%BA%E5%B9%B4%E6%94%B6%E5%85%A572%E4%B8%87%E7%BE%8E%E5%85%83%E7%9A%84%E4%BA%A7%E5%93%81%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;独立开发变现周刊（第73期）：0美元营销预算创建年收入7.2万美元的产品交易市场&lt;/h1&gt;
&lt;p&gt;分享独立开发、产品变现相关内容，每周五发布。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1、supa-palette: 一体化的颜色面板生成器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2、AI-powered纹身艺术家&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3、Stripe App Marketplace: Stripe应用市场&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4、Memberstack: 快速启动搭建账号体系和付款&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5、如何用0美元的营销预算创建年收入7.2万美元的在线应用询价市场&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1supa-palette-一体化的颜色面板生成器&quot;&gt;&lt;a href=&quot;#1supa-palette-%E4%B8%80%E4%BD%93%E5%8C%96%E7%9A%84%E9%A2%9C%E8%89%B2%E9%9D%A2%E6%9D%BF%E7%94%9F%E6%88%90%E5%99%A8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;1、supa-palette: 一体化的颜色面板生成器&lt;/h2&gt;
&lt;p&gt;轻松创建和谐，可访问的调色板，为你的设计助力。&lt;/p&gt;
&lt;p&gt;可以方便的导出Figma Tokens, Chakra UI, Material UI, Tailwind, CSS, CSS Vars, JSON.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpsz8m4wj21p70u0dm2.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;颜色面板调色这一个细分的领域也能做成一个持续赚钱的产品。产品做的很细致并专业。值得我们学习。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpszrb89j20kf0c8jsd.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.supa-palette.com/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;supa-palette官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2ai-powered纹身艺术家&quot;&gt;&lt;a href=&quot;#2ai-powered%E7%BA%B9%E8%BA%AB%E8%89%BA%E6%9C%AF%E5%AE%B6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;2、AI-powered纹身艺术家&lt;/h2&gt;
&lt;p&gt;这是一个在线产品。如果你有一个纹身的想法，但找不到合适的设计，让我们的人工智能在几秒钟内生成一个。它可以让你根据自己喜欢的东西创造出完美的设计，它会给你无限的选择，让每个人都能创造自己喜欢的东西。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpt0oftdj21e60u0gor.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tattoosai.com/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;tattoosai官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;3stripe-app-marketplace-stripe应用市场&quot;&gt;&lt;a href=&quot;#3stripe-app-marketplace-stripe%E5%BA%94%E7%94%A8%E5%B8%82%E5%9C%BA&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;3、Stripe App Marketplace: Stripe应用市场&lt;/h2&gt;
&lt;p&gt;Stripe支付平台推出了App Marketplace的新服务，Stripe将提供第三方应用的访问，以及应用发布者、用户和Stripe自己创建的脚本，这些脚本将应用与Stripe整合在一起。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpt0hreqj21de0ro12d.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;应用市场的想法来自于该公司对Stripe产品使用方式的观察:简而言之，支付不是凭空产生的，而是更广泛的业务服务流的一部分，可能涉及销售或营销活动、客户支持团队以及合同或其他协议的发布。
Stripe Apps允许你将Stripe与帮助台、会计软件等连接起来，这样你就可以简化工作流程，并在Stripe中方便的添加。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpt05u7bj21t90u0teq.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Stripe App Marketplace还处在早期的Beta阶段，也是属于发展阶段，可以考虑在上面开发一些应用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.stripe.com/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Stripe App Marketplace网站&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4memberstack-快速启动搭建账号体系和付款&quot;&gt;&lt;a href=&quot;#4memberstack-%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E6%90%AD%E5%BB%BA%E8%B4%A6%E5%8F%B7%E4%BD%93%E7%B3%BB%E5%92%8C%E4%BB%98%E6%AC%BE&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;4、Memberstack: 快速启动搭建账号体系和付款&lt;/h2&gt;
&lt;p&gt;这个产品的目标是无缝地将用户的账户体系和付款集成到网站构建中。&lt;/p&gt;
&lt;p&gt;Memberstack在以下情况下特别有用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创作者。&lt;/li&gt;
&lt;li&gt;希望快速将产品推向市场的创业者&lt;/li&gt;
&lt;li&gt;想要创造个性化用户体验的营销人员&lt;/li&gt;
&lt;li&gt;一些自由职业者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Memberstack可以让你用你最喜欢的网页设计工具建立会员制网站、Dashboard。与Webflow，卡片，PageCloud, Hubspot CMS，静态HTML快速集成。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpszxossj21m10u0418.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.memberstack.com/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Memberstack官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5如何用0美元的营销预算创建年收入72万美元的在线应用询价市场&quot;&gt;&lt;a href=&quot;#5%E5%A6%82%E4%BD%95%E7%94%A80%E7%BE%8E%E5%85%83%E7%9A%84%E8%90%A5%E9%94%80%E9%A2%84%E7%AE%97%E5%88%9B%E5%BB%BA%E5%B9%B4%E6%94%B6%E5%85%A572%E4%B8%87%E7%BE%8E%E5%85%83%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%BA%94%E7%94%A8%E8%AF%A2%E4%BB%B7%E5%B8%82%E5%9C%BA&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;5、如何用0美元的营销预算创建年收入7.2万美元的在线应用询价市场&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpt0s89pj20m80b4mxx.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Hi,我们是Laurits Just和Jan-Philipp Peters, BitsForDigits的创始人。BitsForDigits是一家年收入超过10万美元的在线企业收购市场。我们的平台是匿名和免费的，业主可以完全或部分出售他们的业务。&lt;/p&gt;
&lt;p&gt;我们每天都能看到越来越多的盈利业务，如软件即服务(SaaS)、电子商务和移动应用，而这些业务的创始人都在寻求流动性。&lt;/p&gt;
&lt;p&gt;在企业生命周期的某个时刻，所有者可能会想通过出售股权来购买一套公寓。另一些人则会考虑将公司全部出售，以进行下一个项目。&lt;/p&gt;
&lt;p&gt;在BitsForDigits上，企业主可以与收购方会面，就全面或部分收购进行谈判。最重要的是，该平台对创始人来说是完全免费的。我们只向买家收费。&lt;/p&gt;
&lt;p&gt;到目前为止，目前每月收入6000美元，新注册人数稳步增长。我们最初最大的增长动力是我们在Product Hunt上的发布，为我们的平台增加了300多名用户。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpszo1q7j20nm0gqwfx.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;你是怎么想到这个想法的&quot;&gt;&lt;a href=&quot;#%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E6%83%B3%E5%88%B0%E8%BF%99%E4%B8%AA%E6%83%B3%E6%B3%95%E7%9A%84&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;你是怎么想到这个想法的?&lt;/h3&gt;
&lt;p&gt;2016年，我们在丹麦哥本哈根的大学相识，从那时起就一直是朋友。在学习期间，我们总是讨论创业，但觉得在创业之前我们需要获得更多的经验。Laurits搬到英国伦敦为贝莱德工作，而Jan-Philipp则在爱尔兰都柏林为Facebook和谷歌工作。2021年夏天，我们终于敢于跳入深渊，辞掉工作，开始构建BitsForDigits。&lt;/p&gt;
&lt;p&gt;这个想法最初来自于一次有趣的交易，在那次交易中，Basecamp的创始人大卫把他们的一部分业务卖给了杰夫·贝佐斯。通过这笔交易，他们设法获得了一些流动性，以确保自己的财务安全，同时保持了足够的所有权，以继续运营公司。&lt;/p&gt;
&lt;p&gt;看到越来越多的这种收购交易在世界各地进行，而创始人和投资者没有一个集中的市场，我们的想法就诞生了。最近，由于来自企业主和收购者的巨大需求，我们开始允许在平台上进行全面收购。&lt;/p&gt;
&lt;p&gt;为了初步验证我们的市场，我们对创始人和投资者进行了无数次采访，慢慢缩小了我们的核心目标群体:白手起家的互联网企业所有者和成熟的微型私募股权收购方。从那时起，我们用LowCode工具建立了一个简单的MVP平台，把它发送给潜在的客户 —— 得到了很多的积极反馈。&lt;/p&gt;
&lt;p&gt;来自金融和科技行业的高薪工作，让我们最初依靠自己的储蓄启动了BitsForDigits。有了基本的保障，我们就有时间建立平台，并在早期拒绝风险投资。&lt;/p&gt;
&lt;h3 id=&quot;请向我们介绍你的第一个产品的设计原型和制造过程&quot;&gt;&lt;a href=&quot;#%E8%AF%B7%E5%90%91%E6%88%91%E4%BB%AC%E4%BB%8B%E7%BB%8D%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BA%A7%E5%93%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%88%B6%E9%80%A0%E8%BF%87%E7%A8%8B&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;请向我们介绍你的第一个产品的设计、原型和制造过程。&lt;/h3&gt;
&lt;p&gt;在编程方面，我们都不是技术高手，所以我们用几个简单的NoCode工具构建了最初的MVP。作为基础，我们选择了Webflow，它可以进行漂亮的网站开发，并与我们今后需要的许多其他软件解决方案无缝集成。&lt;/p&gt;
&lt;p&gt;为了对用户进行身份验证并创建真实的登录体验，我们选择了与MemberStack合作。这个工具可以插入Webflow，允许用户访问会员专属内容，还可以处理订阅支付。&lt;/p&gt;
&lt;p&gt;MVP的最后一个关键工具是MemberChat，这是一个消息传递集成，使我们的用户能够彼此聊天。&lt;/p&gt;
&lt;p&gt;通过这些简单的工具，我们成功地建立了一个市场，所有者和收购者可以注册，发布企业和投资者的简介，并讨论潜在的收购。总而言之，MVP每月的订阅费约为90美元——非常便宜。&lt;/p&gt;
&lt;p&gt;我们与国际律师事务所Hogan Lovells合作，作为早期创业公司参与他们的金融科技导师计划。他们为我们提供有关所有司法管辖区的法律建议，以确保我们在这一领域符合监管机构的要求。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpszjs5pj20nm0btt9t.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;描述启动业务的过程&quot;&gt;&lt;a href=&quot;#%E6%8F%8F%E8%BF%B0%E5%90%AF%E5%8A%A8%E4%B8%9A%E5%8A%A1%E7%9A%84%E8%BF%87%E7%A8%8B&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;描述启动业务的过程。&lt;/h3&gt;
&lt;p&gt;在最初的“测试”发布后，有一些等待名单上的客户(大多数是我们采访过的买家和卖家)，我们2021年12月在Product Hunt上推出。&lt;/p&gt;
&lt;p&gt;在平台上发行不仅能够帮助我们确认产品的需求，同时也能够帮助我们在最初的业务和收购方中培育市场。最终，我们成功地成为了当天排名第二的产品，并进入了Product Hunt年度“金猫奖”金融科技类的决赛。&lt;/p&gt;
&lt;p&gt;“创业是一段有起有伏的旅程，所以不要因为第一次成功就停下来。”&lt;/p&gt;
&lt;p&gt;从那时起，我们特别开始参与像IndieHackers这样的社区，并在Twitter上与相关用户见面，继续发展BitsForDigits。&lt;/p&gt;
&lt;p&gt;我们没有在市场营销上花一分钱。所有用户都是通过产品搜索、搜索引擎优化、直接推广等自然渠道获得的。&lt;/p&gt;
&lt;p&gt;经验可以总结为三件事:&lt;/p&gt;
&lt;p&gt;1、倾听用户的意见&lt;/p&gt;
&lt;p&gt;2、通过分享你学到的东西来帮助他们&lt;/p&gt;
&lt;p&gt;3、不期望任何回报的给予&lt;/p&gt;
&lt;h3 id=&quot;是什么有效地吸引和留住了客户&quot;&gt;&lt;a href=&quot;#%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E6%95%88%E5%9C%B0%E5%90%B8%E5%BC%95%E5%92%8C%E7%95%99%E4%BD%8F%E4%BA%86%E5%AE%A2%E6%88%B7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;是什么有效地吸引和留住了客户?&lt;/h3&gt;
&lt;p&gt;在发展BitsForDigits的过程中，我们最大的两个洞见是双重的:&lt;/p&gt;
&lt;p&gt;1、测试不同的引流渠道，&lt;/p&gt;
&lt;p&gt;2、不要担心营销预算&lt;/p&gt;
&lt;p&gt;从Gabriel Weinberg那里，我们知道创业公司可以通过19个渠道获取用户并获得吸引力。关键是测试哪些渠道最有效，并专注于这些渠道。我们注意到这3个渠道最适合我们:&lt;/p&gt;
&lt;p&gt;1、社区建设&lt;/p&gt;
&lt;p&gt;2、内容营销&lt;/p&gt;
&lt;p&gt;3、销售&lt;/p&gt;
&lt;p&gt;所以，这就是我们的重点。&lt;/p&gt;
&lt;p&gt;当我们开始与创始人和收购企业家交谈时，社区建设成为了一个重要的关注点。我们从加入现有的社区开始，然后在这个空间中创建我们的粉丝。总之，解决他们的问题是我们成长的方式。&lt;/p&gt;
&lt;p&gt;此外，这些渠道可以免费利用。我们不需要每个月花费数千美元在谷歌广告上获取客户。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://tva1.sinaimg.cn/large/e6c9d24ely1h6fpszejthj20nm0k2mz1.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;你未来的计划是什么样&quot;&gt;&lt;a href=&quot;#%E4%BD%A0%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%AE%A1%E5%88%92%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;你未来的计划是什么样?&lt;/h3&gt;
&lt;p&gt;今天，我们专注于两个主题:发展平台和新产品功能。同时处理这两件事有时会很困难，但这是有帮助的。我们设法聘请了一名全职员工加入我们的办公室，以及两名兼职远程助理。他们帮了很大的忙。&lt;/p&gt;
&lt;p&gt;在短期内，我们寻求使BitsForDigits盈利，这样我们就可以继续保持业务的可持续性和有机增长。从长远来看，我们寻求扩大我们的产品供应，因为创始人目前面临的很多流动性需求仍未得到满足。&lt;/p&gt;
&lt;h3 id=&quot;通过创业你学到了什么特别有用或有益的东西吗&quot;&gt;&lt;a href=&quot;#%E9%80%9A%E8%BF%87%E5%88%9B%E4%B8%9A%E4%BD%A0%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%E7%89%B9%E5%88%AB%E6%9C%89%E7%94%A8%E6%88%96%E6%9C%89%E7%9B%8A%E7%9A%84%E4%B8%9C%E8%A5%BF%E5%90%97&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;通过创业，你学到了什么特别有用或有益的东西吗?&lt;/h3&gt;
&lt;p&gt;可能所有创始人都必须为自己学到的一件大事就是专注。在创业初期，你总有1000件事可以做，每次只做一两件是很容易的。每个人都得到过这个建议，但在这样一个动态的环境中，一次只专注于一个领域可能更需要学习的技能。&lt;/p&gt;
&lt;p&gt;我们可能做过的最好的决定就是选择彼此作为联合创始人。我们看到过许多其他的创始团队因为不同的工作风格、愿景或其他原因而解散。我们相识已久，这有助于我们有效地合作。&lt;/p&gt;
&lt;p&gt;创业的最后一条建议是“立即开始”。许多人认为他们可以永远研究一个问题，但真正的产品与市场契合是在与客户的互动中产生的，而不是在写文档之中。&lt;/p&gt;
&lt;h3 id=&quot;对其他想要起步或刚刚起步的创业者有什么建议&quot;&gt;&lt;a href=&quot;#%E5%AF%B9%E5%85%B6%E4%BB%96%E6%83%B3%E8%A6%81%E8%B5%B7%E6%AD%A5%E6%88%96%E5%88%9A%E5%88%9A%E8%B5%B7%E6%AD%A5%E7%9A%84%E5%88%9B%E4%B8%9A%E8%80%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;span class=&quot;icon icon-link&quot;/&gt;&lt;/a&gt;对其他想要起步或刚刚起步的创业者有什么建议?&lt;/h3&gt;
&lt;p&gt;首先，你不需要成为一个程序员来建立一个在线业务。今天有许多用例的NoCode工具，这是非常容易和便宜的开始。&lt;/p&gt;
&lt;p&gt;其次，不要重复发明轮子。在像Indie Hackers这样的网站上，每天都有大量的创始人分享他们如何创建和发展业务。看看什么适合他们，然后把它应用到你的初创公司。&lt;/p&gt;
&lt;p&gt;最后，不要气馁。创业是一段有起有伏的旅程，所以不要因为第一次成功就停下来。&lt;/p&gt;
&lt;p&gt;本次周刊结束，欢迎大家留言投稿，我们下周见！&lt;/p&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2fe46022e6e9744026a82e91fcddb148</guid>
<title>单体架构服务转型至分布式的踩坑经历</title>
<link>https://toutiao.io/k/jxgbje7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt; （给&lt;/span&gt;&lt;span&gt;ImportNew&lt;/span&gt;&lt;span&gt;加星标，提高Java技能）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在聊架构风格之前先明确一个问题，什么是架构？我们为什么要选择架构？用来解决哪些问题？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;什么是架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;书本定义：“软件的架构是一种抽象的结构，他由软件的各个组成部分和这些部分之间的依赖关系构成”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的理解是，架构就是根据业务选择合适的技术、中间件，并且按照合适的设计模式对这些模块，进行组装来满足业务特性的需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;选择架构风格的目的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们选择架构风格的初衷在于 “三更原则”（自己的理解） ：&lt;/span&gt;&lt;span&gt;更好地降本提效、更快地发版上线、更好地维护系统稳定性&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任何一个架构风格，都可以实现功能性需求，但是一个好的架构风格能在功能性需求之上，提升非功能性需求。那么你可能会问，什么是非功能性需求？举例：扩展性、稳定性等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里将会以我认知结合踩过的坑，来给大家详细讲一下，我们是如何从单体架构演进到分布式架构。在向分布式单体架构的演进的道路上，又是如何进行的抉择，以及为什么最后同时选择了 微服务架构+分布式架构 的原因。接下来就结合一个系统来作为案例，贯穿主线讲解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先来讲一下，最初的单体架构的经历和转型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;单体架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在系统创建之初，往往都是集中业务、单点部署系统，所有业务打一个包，快速上线。满足了业务初期的快速发版上线，而且适合中小公司没有自己的 PaaS 平台，应对初期快速迭代的业务，开发、迭代、测试、发布都是非常的便捷。那么单体架构都有什么类型呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;单体架构类型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单体架构也分为大泥团架构、分层单体架构、模块化单体架构，他们的区别是什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;大泥团单体架构&lt;/strong&gt;：毫无分层、所有模块聚焦在一起，相互穿插（除非是你接手需要改造，否则不要创建这样的架构风格。这种大泥团架构很难拆分，到最后的下场往往都是重新搭建）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;分层单体架构&lt;/strong&gt;：普遍的选择。架构进行了简单的分层，比如传统的 MVC 三层架构；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;模块化单体架构&lt;/strong&gt;：一般是随着业务的发展，由分层单体架构演变而来，特点就是引入了多个业务模块并且提供相应的服务能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;单体架构的优缺点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用的开发很简单&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;易于对应用程序大规模的更改&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;测试相对简单、直观&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;部署简单明了&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;横向扩展不费吹灰之力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在业务的初期，单体架构的优点，无论从哪个方面来说，都优于其他架构风格，但是随着业务的增加、耦合，单体架构的缺点也逐渐暴露出来，这个也符合“康威定律”。那么单体架构的“后期”会暴露出哪些问题呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;代码库膨胀&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;过度的复杂性会吓退开发者&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开发速度慢&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从代码提交到实际部署的周期很长，而且容易出问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;难以扩展&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;系统的稳定性得不到保障&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;需要长期依赖某个可能过时的技术栈&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单体架构的这些缺点，其实影响的还是我上面提到的“三更原则”。经过上面的铺垫，相信大家已经对单体架构风格已经有了简单的理解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;光有方法论是不行的，我们得结合项目以及代码片段来加深理解，做到真正的应用。&lt;/span&gt;&lt;span&gt;接下来我就用一个库存系统来进行串联进行讲解。先通过这张图来了解下库存系统是用来做什么的？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;366&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.64453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdzDNS0bhayFG1gtsVLC5DvDOzQbVjwgibnM2BQeRmGbiaaPOBKNWoacGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;单体架构的案例——库存系统&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最初的库存代码分层如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;api&lt;/strong&gt;：对外提供的 Dubbo 服务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;common&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：封装了公共方法&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;dao&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：封装了数据库 DHCP 交互&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;domain&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：实体类&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;inner-api&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：系统内部 API 交互&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;router&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：废弃&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;rpc&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：上下游 RCP 交互&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;service&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：业务逻辑层&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;web&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Web &lt;/span&gt;服务层&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;worker&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：任务调度层&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;450&quot; data-backw=&quot;480&quot; data-ratio=&quot;0.9375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdpYUeamL7VEiaI892QcHJRvWC54ImAqlBDqolPhcFZs41yEzWo91r5pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在最初很长的一段时间里，我们部署了两个单体服务。一个是 API 接口来保障上游的库存查询以及调用，另一个是 Web 服务的后台管理平台。这两个单体服务很好的贴合了最初的业务迭代和发版速度，但是后来随着业务的增加附加调用量的增加，单体服务的无论是从性能和稳定性都出现了较大的波动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;意料之外，情理之中的事故惨案&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2015 年 6 月 26 日晚，也是一个促销活动的前夕，库存的 Web 管理平台挂了，原因就是大量库存导入，服务器的内存不足导致机器宕机。商家、运营无法通过导表的方式去维护库存数量，在这之前已经经历过了多次横向扩容。还是出现了预料之外的流量和稳定性的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;342&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.60234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdCP7BurRGDibGgiaKMyj7f9S7uXH6WD1YRWVibMjPLxhELggiar7rbPMNLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且在接下来的大促过程当中，库存的单体服务 API 接口也承受了非常大的压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一方面是上游调用方有很多，比如 App 端首页中的门店网关，查询商品是否有库存，是否展示。购物车加车，也会查询商品库存的数量，提单则会对库存数量进行扣减，乃至后续的订单取消同样也会调用库存接口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一方面大的 KA 商家通过中台对接对库存进行操作，为了尽可能的让商家门店的库存和线上平台的库存保持一致，减少线上线下库存不一致导致的超卖、少卖。中台同步间隔时间都非常短，5 分钟~10 分钟就要全量同步一次。后续随着入驻的商家增多，这个量级增长得也非常的迅速。于是我们开启了单体服务向分布式服务演进的大门。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分布式架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;分布式架构的优缺点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;优点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可用性高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可扩展性高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;系统容错性高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务代码可读性高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;维护简单&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些优点正是我们当时库存系统欠缺的，尤其是其中的可用性、系统容错性，是我们系统演进迭代的首要目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《分布式架构体系》中描述到，分布式架构的核心理念也是按照（功能、业务、领域等）对系统进行拆分，通过合理的拆分结构，实现各业务模块的解耦，同时通过系统级容错设计，在廉价硬件基础设施上构建起高可用、可扩展的开放技术体系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以我们库存系统到底要按照什么进行拆分，功能？业务？领域？在拆分之前我们一定要明确设计的目标，避免目标方向错误带来的人力、成本资源的浪费。在弄清楚目标之前，我们先了解下分布式架构的缺点，通过了解这些缺点来衡量满足我们目标的前提下，需要进行哪些方面的取舍，就如 CAP 原则一样，只能满足其中的两个，AP 或者 CP。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）分布式架构的缺点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务多，人员对拆分后的业务模块理解要花费一些成本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;技术栈升级耗费人力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分布式事务的保持&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务模块之间的 RPC 交互损耗&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;库存系统的特点，高可用、高并发、强数据一致性。接下来我们就来讲一下，库存是如何从单体架构向分布式架构进行的转型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;单体架构如何向分布式架构转型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为库存面临的最大的问题是稳定性，所以我们首先针对功能进行了拆分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）功能拆分&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一步是相对简单的，我们梳理出库存面向服务的业务方进行服务划分。这部分无需进行太多代码的改造，一套接口通过变更不同的 group 别名，部署到不同的集群即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;255&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.4490566037735849&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdekuOZ8N3RDUwM91cFIeoK74UQ7yPJlfWtOOrxCtr7FypUUm30e8Uicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1060&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拆分后，不同的服务应对不同的业务方，系统错误的隔离性好，不会说出现一损俱损的局面，稳定性上也有了保障。在解决了稳定性的问题后，留给我们了一些喘气的间隔，可以有时间去进行代码的优化。因为刚才也提到了，我们只是通过分布式的集群部署来解决容错性的问题，但是代码还是一套，臃肿的代码也会拖慢我们的开发上线速度。那么接下来要进行的就是，对业务代码的解耦，这块也是难度最高的。我们是如何做的呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）业务拆分&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务拆分的思路是什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;以业务本身为导向，充分了解系统业务模型，划分业务边界；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务依赖的范围，细分功能，尽量减少功能之间的重复依赖；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据拆分功能的影响大小进行评估，拆小保大；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;拆分的过程中不要修改业务逻辑，不要进行拆分之外的任何优化动作（除非是bug）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于上述拆分的思路，库存系统又是如何划分的业务模块呢？动了哪些代码？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）如何划分业务模块&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于业务划分，网上有很多方法论，事件风暴法、四色建模法等等，但是万法不离其宗，那就是围绕事件。以库存系统举例：库存初始化（门店 + sku 库存创建）、库存数量维护（修改现货数量、修改可售状态）、扣减业务（购物车扣减、提单扣减、订单取消扣减）、提醒业务（缺货提醒）等。每一个事件都有独立的链路轴，以及时间线可以形成闭环。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;198&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.3484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdl4rf64J1zialx9NYmeLN6aeYelaekwicIicgTyc8qBJeQZSGl8IZeDMiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;133&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.23359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdgj2UTkqn1IhyYAx5n9ZCvk2BLdUNc8ft9YYd6AUogTHk0sMnpSicTIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;156&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.275&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdicURVEibTM9EHNZTqtN4jbzclO7IAXY03L1OkvLKwiaUQIuJXHXty1guQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4）如何在原有模块上拆分&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大多数单体架构都是面向过程的设计，domain 层充斥这个各种 DTO、VO、BO，所以在层与层的数据交互过程中，大都是经历了多次的 POJO。另外就是 Service 层充斥着和 DAO 层数据交互以及参杂了业务，而且严重违反了依赖倒置原则，整个层变得非常的沉重。这里举个例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;272&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.478125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdsRDlaqUn5tRZ5Nia3IECJic73kS6NUNulmKYgYGGFpgrdlEib0fXT1EaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里截取部分代码片段作为案例，来讲述下我们在拆分业务的过程中，需要做一些什么操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.47265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdQcQPy0Yxn1altWTTPv8POhCuvdnQeC9d0yc201GGLvWTcrxPgEbOwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原始代码&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SkuMainServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SkuMainService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; org.slf4j.Logger LOGGER = LoggerFactory.getLogger(SkuMainServiceImpl.class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; SkuMainDao skuMainDao;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ZkConfManagerCenterService zkConfManagerCenterService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ProductImagesService productImagesService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; MqService mqServiceImpl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;${system.group.environment}&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; String systemGroupEnvironment;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@throws&lt;/span&gt; Exception&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;editorSaveProuct&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(SkuMainInfoMQEntity skuMainInfoMQEntity)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SkuMainBean skuMainBean = skuMainInfoMQEntity.getSkuMainBean();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (skuMainBean == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;修改参数为空！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SkuMainBean originalSku = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.getSkuMainBeanBySkuId(skuMainBean.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (originalSku == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;无效SkuId！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SkuMainBean skuMainUpdate = updateIsWeightMark(skuMainBean);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SkuMainBean skuMainPre = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.get(skuMainUpdate.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 系统下架的商品 强制下架&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (skuMainPre != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; skuMainPre.getSystemFixedStatus() != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; skuMainPre.getSystemFixedStatus().equals(SystemFixedStatusEnum.SYSTEM_FIXED_STATUS_DOWN.getCode())) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                skuMainUpdate.setFixedStatus(FixedStatusEnum.PRODUCT_DOWN.getCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; flag = skuMainDao.editorProduct(skuMainUpdate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (flag) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!zkConfManagerCenterService.isDefaultStoreStatisticsScore(skuMainBean.getOrgCode())) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    SkuMainBean saveSkumainBean = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.get(skuMainUpdate.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 防止未查到,把缓存覆盖&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (saveSkumainBean != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        cacheSkuMainBean(saveSkumainBean);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 发送Sku修改MQ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    sendSkuModifyMq(SkuModifyOpSourceEnum.MIX_UPDATE_SKU, originalSku, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SkuMainInfoMQEntity(skuMainUpdate));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ProductImagesBean productImagesBean = productImagesService.queryImagesBySkuId(skuMainUpdate.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    SkuMainInfoCheckMQEntity skuMainInfoCheckMQEntity = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SkuMainInfoCheckMQEntity();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    skuMainInfoCheckMQEntity.setSkuMainBean(skuMainUpdate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    skuMainInfoCheckMQEntity.setProductImagesBean(productImagesBean);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mqServiceImpl.sendJosMQ(skuMainInfoCheckMQEntity, MqTypeEnum.RcsKeyWordsCheck);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mqServiceImpl.sendJosMQ(skuMainInfoCheckMQEntity, MqTypeEnum.SenseKeyWordsCheck);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    LOGGER.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;add open platform sku , not not not send mq! skuId = {}&quot;&lt;/span&gt;, skuMainBean.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            LOGGER.error(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;修改商品信息失败.e:&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Exception(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CQS 和 SRP 的改造，拆解 GOD Classes&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;Read 服务&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;420&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.73984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdLicibjiaohBSQZ9nOAQKDS6Eicj7qdsbySSyHMCjxYHIX7l6mD3JUiaxjrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;Write 服务&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.70078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdKxrl018Hg6EG7sQwN3IbdKNiaq8KstgpLnaE0ZV2CSmx7YqliargPicDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;抽离到业务层 Business 层后&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SkuMainBusinessServiceImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SkuMainBusinessService&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; org.slf4j.Logger LOGGER = LoggerFactory.getLogger(SkuMainBusinessServiceImpl.class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; ZkConfManagerCenterService zkConfManagerCenterService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; MqService mqService;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; SkuMainReadservice skuMainReadservice;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; SkuMainWriteservice skuMainWriteservice;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;${system.group.environment}&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; String systemGroupEnvironment;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 问题：service层聚合了太多业务逻辑 倒置上层方法没办法统一&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; skuMainInfoMQEntity&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@throws&lt;/span&gt; Exception&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;editorSaveProuct&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(SkuMainInfoMQEntity skuMainInfoMQEntity)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SkuMainBean skuMainBean = skuMainInfoMQEntity.getSkuMainBean();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (skuMainBean == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;修改参数为空！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SkuMainBean originalSku = skuMainReadservice.getSkuMainBeanBySkuId(skuMainBean.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (originalSku == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;无效SkuId！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SkuMainBean skuMainUpdate = skuMainWriteservice.updateIsWeightMark(skuMainBean);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            SkuMainBean skuMainPre = skuMainReadservice.queryDbById(skuMainUpdate.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 系统下架的商品 强制下架&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (skuMainPre != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; skuMainPre.getSystemFixedStatus() != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; skuMainPre.getSystemFixedStatus().equals(SystemFixedStatusEnum.SYSTEM_FIXED_STATUS_DOWN.getCode())) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                skuMainUpdate.setFixedStatus(FixedStatusEnum.PRODUCT_DOWN.getCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; flag = skuMainWriteservice.editorProduct(skuMainUpdate);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (flag) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!zkConfManagerCenterService.isDefaultStoreStatisticsScore(skuMainBean.getOrgCode())) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    SkuMainBean saveSkumainBean = skuMainservice.queryDbById(skuMainUpdate.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 防止未查到,把缓存覆盖&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (saveSkumainBean != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        skuMainWriteservice.cacheSkuMainBean(saveSkumainBean);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 发送Sku修改MQ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    skuMainWriteservice.sendSkuModifyMq(SkuModifyOpSourceEnum.MIX_UPDATE_SKU, originalSku, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; SkuMainInfoMQEntity(skuMainUpdate));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    LOGGER.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;add open platform sku , not not not send mq! skuId = {}&quot;&lt;/span&gt;, skuMainBean.getId());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            LOGGER.error(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;修改商品信息失败.e:&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Exception(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;构建好的业务层&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;653&quot; data-backw=&quot;568&quot; data-ratio=&quot;1.15&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdcNibuBZWRXHYYqtdwQiaUhCQxbMcgl1XEBLIpDO88RagkMVta8wQdYtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;拆分小结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拆分到这里，业务层的划分基本就比较清晰了。而且在这个增量整合底层代码的过程中，面向过程的业务线也都梳理的比较清晰了，底层方法也都提取到了业务层收口，通过接口对外提供服务。那么接下来我们要面临的问题就是，如何对具体的读写进行拆分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基于 CQRS 打造分布式服务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面我们也提到了，进行了整体功能的拆分，并没有对具体的读写服务的拆分。在面向服务的场景下，功能里也是分读服务、写服务。那么我们有什么原则来指导读写服务的分离么？那就是 CQRS 的思想：命令职责查询分离，不单单指代码，同样也是适用于服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;338&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdGNpfSNKn7kiaaByNfmbR2azF0y0d5C9ibGZlx4xuAHy8T6YQrTj4Uic4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;优先拆分读还是优先拆分写&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建议从拆分读开始，因为读服务相对于写服务简单一些，而且更容易提高系统对外服务的稳定性，写服务的流程相对底层改动比较大，测试的周期也会比较长。在前期，动写服务系统出问题的概率会比较大，所以综合稳定性、扩展性来说，优先拆分读服务是一个比较好的选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CQRS 的思想适合所有业务场景吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以库存系统举例，我们就按照 CQRS 的思想复刻一版，看看会出现什么问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这个过程中，存在两个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;521&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.91640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdmibfQ4RfAK0QsFv62Rl3KibcWibqiaroOZ3icktFsZHyt3LUibB9IN8MXM5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以每一个架构、每一种思想都是要结合业务去分析。我们可以借鉴 CQRS 的命令查询职责分离，在面对业务系统部署的时候，不要死板的遵循固有的模式，要对现有的风格做出一定的取舍。所以，我们在应对库存业务的时候，基于 CQRS 的风格创建出了库存独有的 CQRS-StockCenter。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CQRS 的活学活用：CQRS-StockCenter&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;340&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcdRlKtTamQ5qwUXdLBneCSWTQeFBicR8qY47f1Ar9fmiaLyKBGDF2gF2rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;库存通过这套设计强依赖了 Redis 来作为库存查询、修改的中间件。保障了数据的强一致性。库存在原有的服务上，分离了读写，保障了系统的 CQRS 命令职责查询分离。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;365&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.6433224755700325&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bOFRtzuajQxY0PThPI4lcd9NyBbewPgSQgMy1kOVDoKK0p5KkO36vVrAwca0o16VXtk1IN46l7XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1228&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;分布式事务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家都知道事务。简单来说，事务由一组关联操作构成，A-&amp;gt;B-&amp;gt;C ，如果执行到C报错了，那么要回滚 B-&amp;gt;A。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于本地事务来说，这个相对很简单，如果你用了事务型数据库比如 MySQL，并且不涉及多个数据源的情况下，保障事务的 ACID 非常的容易。&lt;/span&gt;&lt;span&gt;但是我们这里要提到的就是分布式事务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;系统拆分后，由于每个服务是一个独立的模块，负责一块业务，那么在整个业务轴的流程下，各个服务节点的跨系统事务回滚成为了一个难题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业界也有一些方案，比如 &lt;/span&gt;&lt;span&gt;JTA（Java Transaction API 即 Java 事务 API）和 JTS（Java Transaction Service 即 Java 事务服务），为 J2EE 平台提供了分布式事务服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，这种需要满足 XA（两阶段提交）的标准非常的重。而且现在的业务多样性，很多数据库比如 MongoDB，并不支持 XA 的标准分布式事务，一些流行的中间件，比如 RabbitMQ 和 Kafka 也不支持分布式事务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;44&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;转自：树洞君，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接：&lt;/span&gt;juejin.cn/post/7121885160068349982&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651513836&amp;amp;idx=1&amp;amp;sn=37a40a1e7f36845b36c3ce589efe8c77&amp;amp;chksm=bd258f938a5206853eb812b26c990147c5419e2f4897ed22594e5a285def044352e7acf133c4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;服务端高并发分布式架构演进之路&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;服务端高并发分布式架构演进之路&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651513836&amp;amp;idx=1&amp;amp;sn=37a40a1e7f36845b36c3ce589efe8c77&amp;amp;chksm=bd258f938a5206853eb812b26c990147c5419e2f4897ed22594e5a285def044352e7acf133c4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;服务端高并发分布式架构演进之路&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651518323&amp;amp;idx=1&amp;amp;sn=ef13c94a371805a24a3774386ff8b21a&amp;amp;chksm=bd25990c8a52101a3b45deebc745403224d03fe514c73cfe6e6f02b36985c54f2984c02be08a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;千万不要把Request传递到异步线程里面！有坑！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;千万不要把Request传递到异步线程里面！有坑！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651518521&amp;amp;idx=1&amp;amp;sn=d866c57f0bd3787afef2baa1e9b6bef4&amp;amp;chksm=bd259a468a52135032aecef6bc6d8976c7fc70e8692a4800d21e366377328a3c869c3dede323&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;新来个技术总监，给公司项目引入了全新的业务架构，堪称最佳实践！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;新来个技术总监，给公司项目引入了全新的业务架构，堪称最佳实践！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>