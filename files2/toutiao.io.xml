<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3950a01f9cc280144bf7955f12a573a2</guid>
<title>醒醒吧，未来不会有 Go2 了！</title>
<link>https://toutiao.io/k/d6zkan1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;马上春节了，节前最后一更。提前预祝大家春节快乐！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本周末在学习的时候，看到 Go 团队大当家 Russ Cox（下称：rsc）在近期分享的《&lt;span&gt;GopherCon 2022: Russ Cox - Compatibility: How Go Programs Keep Working&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;》，讲的是 Go 在兼容性方面的现有问题和思考，还埋了个新预期。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.668693009118541&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4jtSWQDZX6Za6wCpMuV2KqiaGeMayMCUFgKsR79T9fjGNUcAxt3HGeWAxF4GgvVsBUHhjbud0qJ88Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1974&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他提出了一个新的 Slogan：“Go is boring, and that&#x27;s good.（Go 很无聊，这很好）”，原因在于无聊代表稳定的。无聊意味着你能够专注于你的工作，而不是我们的工作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5620360551431601&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jtSWQDZX6Za6wCpMuV2KqiaH37qk8ZFmAcUxpsJiaopdia4CxWUkzwW1nyaMZWtvKOuVBlAIL5SeQ2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1886&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心来讲，Go 团队希望 Go 足够简洁，Gopher 不要整天卷 Go 的各种奇思妙计，要把精力都关注到自己的工作上，不要关注他们。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我一开始听起来多少有点道理和自己的想法，听着听着这个车就刹不住了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在最后的最后，rsc 冷不丁的正式官宣：&lt;strong&gt;不会有 Go2 了，会一直保持 Go1，将会加倍投入对 Go1 兼容性的建设，这将非常有价值&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5630965005302226&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jtSWQDZX6Za6wCpMuV2KqiazyXYMjjND86wmqiaXt38VibVYOtXSF5r2ic5NQBHxBl9aZo46xXDxwmAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1886&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，他也讲了，狭义里的 Go2 可能已经发生了，只是慢慢转为了 Go1 的新特性融入到了 Go 之中。（我很想说，版本号也还是 Go1，好一个意识...）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最重要的，那些没法兼容的 “新” 东西怎么办？大方向的大招已经在前文《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247497881&amp;amp;idx=1&amp;amp;sn=91ab6e1c034d80621be301d2ae89b3e4&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;加大力度！Go 将会增强 Go1 向后兼容性&lt;/a&gt;》有介绍过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心之一：&lt;strong&gt;使用 Go 工程中的 go.mod 文件内的 go 版本号来控制编译&lt;/strong&gt;的选择，决定各个库在不同 Go 版本下以不同的表现来应用其特性，将会影响编译时的决定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5616438356164384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jtSWQDZX6Za6wCpMuV2KqiacLU2XPFqabbA6brrkFw6vpX1DCYE8u5C3h2RAgQfreojJzub53C50g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1898&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;主模块（main module)：声明 go 版本是 1.19，他可以使用泛型和带下划线的数字。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模块 A v1.0.0：声明 go 版本是 1.17，模块 A 里的包不可以使用泛型（1.18 才开始支持），带下划线的数字可以正常使用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模块 B v1.2.1：声明 go 版本是 1.12，两者都不能用。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上述说明中，主模块、模块 A、模块 B，分别根据 go.mod 内的 go 版本号，应用到了不同的可用特性（有的可以用泛型，有的不可以用带下划线的数字，有的都不能用等）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本质是结合 Go modules 原本的依赖管理逻辑，再复用 go.mod 的 go 版本号给不同版本的不同特性来做好编译的控制逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;未来将不会有 Go2，都会是 Go1.x。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;已经找到能往里各种塞的姿势了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;推荐阅读&lt;span/&gt;&lt;/h4&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;GopherCon 2022: Russ Cox - Compatibility: How Go Programs Keep Working:&lt;em&gt;https://www.youtube.com/watch?v=v24wrd3RwGo&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关注和加煎鱼微信，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一手消息和知识，拉你进技术交流群&lt;span&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9988738738738738&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4jVkzHVvaqjo3O0BIqDRJKkEyib7SJsryxHBFGsvek0FkdiczfJP6AdbWnK25DvlX3dY8wRObPbVJQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07106598984771574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/486RHs1WbcgGib6o96dHbvGUGGwPicd8wusUGH1cXR29tM4bO0lNzialzkQhvU6m5ZUdaKibmcF2OQayjMe9Bia6iaXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是煎鱼，&lt;span&gt;出版过 Go 畅销书《Go 语言编程之旅》，再到获得 GOP（Go 领域最有观点专家）荣誉，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247483854&amp;amp;idx=1&amp;amp;sn=ec422fbf4d846975f2930ddeb5e81373&amp;amp;chksm=f9041493ce739d85a4b987eece14da627206cdad798f645cc770868312e4a22b6df24804f186&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的出书之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的出书之路&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;日常分享高质量文章，输出 Go 面试、工作经验、架构设计，&lt;span&gt;加微信拉读者交流群，和大家交流！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9bf2746ce8c4d352ba9ef917c7983649</guid>
<title>Web 3D 从入门到跑路</title>
<link>https://toutiao.io/k/ww8p4f5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文为来自 &lt;strong&gt;字节跳动-业务中台-前端团队&lt;/strong&gt; 成员的文章，已授权 ELab 发布。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前情概要&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为在该领域小白的我，在准备该主题分享之前，我信心满满的去知乎查了下，如何学习 WebGL？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;如何入手webGl以及three.js呢? - 知乎&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前端开发者应该如何学习计算机图形学相关的知识? - 知乎&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大三计算机，想接触图形学方面的知识，直接学WebGL还是OpenGL ? - 知乎&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 等 .......&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;摘取自知乎回复：图形 + 数学 + 体系结构 + 操作系统 + 软件工程 + 设计模式 + 编译原理 + (C++功力) ≈ 更好的3D 软件工程师。(然而我不想成为更好的3D 软件工程师)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时也看了很多大佬分享学习路径，基本上都是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;图形学 和 数学 打好基础。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;网友说：推荐看3d数学基础这本书，学好线性代数，接口本质就是数学和物理，涉及大量矩阵变换...&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;选择一个领域，Web (WebGL、Threejs)、3D引擎、游戏 (Unity) .....&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;网友说：语言是以硬件为基础的，如果你了解CPU，学习C语言很随意，同样着色器语言GLSL是类似C语言的高级语言在GPU上执行的语言，学习 WebGL API和着色器语言最好去了解GPU的渲染管线、可编程着色器。语言和硬件又是隔离的，没有必要深入了解硬件，知道一个大概印象就行。&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;干：不断学习、不断实践、直到可以造轮子，再循环 ......&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看了比较多的知乎回复后，我发现这玩意学习路径和门槛都比较高的，都是和底层、数学强相关的。而且 WebGL 技术和 Web 前端技术还是有比较大区别，感觉除了只是叫&lt;code&gt;Web&lt;/code&gt;外没别的相同啦。速成是不可能的，有尤其在该领域我是个小白，所以本次分享 (到此结束)。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.048780487804878&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a80PcicPiaVteejHHrMRKRsIYshZeXogNFSZOVvfJibadibHxN9kKEocUxHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;984&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次分享，大致分为两个部分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;概念篇：浅浅了解计算机图形相关知识。先了解 OpenGL、WebGL等库或语言都是干什么的；无论是库还是语言，核心都是为了GPU 服务的，我们还需要理解 GPU 设计模型 和 图形渲染管线；以上，我们才能将技能点串起来，知道后续发力方向 和 如何实践。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实践篇：先通过 Three.js 入个门，再看后续是 深入学习 还是 跑路放弃。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;概念篇：计算机图形相关知识&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;Three.js? GLSL? WebGL? OpenGL?&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4029574861367837&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8ZHveZobH3J1RyVWaicJ9zNspspsXMVchlbOIibkqo9TAZqtib9Ts8ZX0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1082&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考：&lt;span&gt;WebGL，OpenGL和OpenGL ES三者的关系&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 图&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;OpenGL&lt;/strong&gt; (Open Graphics Library)&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;OpenGL&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; is a cross-language, cross-platform application programming interface (API) for rendering 2D and 3D vector graphics. The API is typically used to interact with a graphics processing unit (GPU), to achieve hardware-accelerated rendering.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OpenGL 是API 、是规范。GPU 硬件厂商需要满足统一OpenGL规范。而 OpenGL ES (Open Graphics Library for Embedded Systems) 是 OpenGL 子集，专门针对手机等嵌入式设备而设计的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;人话版本是：发动机(GPU) 驱动是方向盘、离合器等等，OpenGL 定义操纵 发动机(GPU) 发动规范，OpenGL 不关心方向盘是圆的还是方的，驱动 发动机(GPU) 干活啦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;用方向盘 (驱动器) -&amp;gt; 依照调用标准使用 (&lt;/strong&gt; &lt;strong&gt;OpenGL&lt;/strong&gt; &lt;strong&gt;) -&amp;gt; 指挥发动机 (&lt;/strong&gt; &lt;strong&gt;GPU&lt;/strong&gt; &lt;strong&gt;) 干活&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;WebGL&lt;/strong&gt; (Web Graphics Library)&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;WebGL&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt; is a cross-platform, royalty-free open web standard for a low-level 3D graphics API based on OpenGL ES, exposed to ECMAScript via the HTML5 Canvas element.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WebGL 是在 OpenGL ES 基础上建立的在 &lt;strong&gt;浏览器&lt;/strong&gt; 跑起来的图形学标准，同理是浏览器厂商规范 ≈ 让JS 操作接口。光有规范是不够的，还要程序告诉 GPU 如何进行渲染。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;GLSL&lt;/strong&gt; (OpenGL Shading Language)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面讲到图形渲染管线会说到，这里浅浅先通过例子感受下 &lt;span&gt;立方体 demo&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;代码&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt; 阉割版：有类C语言的着色器语言、有我们熟悉JS语言、有矩阵相乘 ...&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;      &lt;br/&gt;&amp;lt;canvas id=&lt;span&gt;&quot;canvas&quot;&lt;/span&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;br/&gt;&amp;lt;script &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;shader-source&quot;&lt;/span&gt; id=&lt;span&gt;&quot;vertexShader&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        precision mediump &lt;span&gt;float&lt;/span&gt;; // 接收 JavaScript 传递过来的点的坐标（X, Y, Z）&lt;br/&gt;        attribute vec3 a_Position;&lt;br/&gt;        attribute vec4 a_Color; // 接收顶点颜色&lt;br/&gt;        varying vec4 v_Color;&lt;br/&gt;        uniform mat4 u_Matrix;&lt;br/&gt;        void &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;            gl_Position = u_Matrix * vec4(a_Position, 1);&lt;br/&gt;            v_Color = a_Color; // 将顶点颜色插值处理传递给片元着色器&lt;br/&gt;            gl_PointSize = 5.0;&lt;br/&gt;        }&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;script &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;shader-source&quot;&lt;/span&gt; id=&lt;span&gt;&quot;fragmentShader&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        precision mediump &lt;span&gt;float&lt;/span&gt;;&lt;br/&gt;        varying vec4 v_Color;&lt;br/&gt;        void &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;            gl_FragColor = v_Color;  // 点的最终颜色。&lt;br/&gt;        }&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;script&amp;gt; //获取canvaslet &lt;br/&gt;        canvas = getCanvas(&lt;span&gt;&#x27;#canvas&#x27;&lt;/span&gt;);&lt;br/&gt;        //使用该着色器程序&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; program = createSimpleProgramFromScript(gl, &lt;span&gt;&#x27;vertexShader&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;fragmentShader&#x27;&lt;/span&gt;);&lt;br/&gt;        gl.useProgram(program);&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; positions = [&lt;br/&gt;            -0.5, -0.5, 0.5, 1, 0, 0, 1,&lt;br/&gt;            0.5, -0.5, 0.5, 1, 0, 0, 1,&lt;br/&gt;            0.5, 0.5, 0.5, 1, 0, 0, 1,&lt;br/&gt;            -0.5, 0.5, 0.5, 1, 0, 0, 1, .....&lt;br/&gt;        ]&lt;br/&gt;        // ----- 省略一些代码 -----&lt;br/&gt;        &lt;span&gt;function&lt;/span&gt; &lt;span&gt;&lt;span&gt;render&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;            //先绕 Y 轴旋转矩阵。&lt;br/&gt;            matrix.rotationY(deg2radians(yAngle), dstMatrix);&lt;br/&gt;            //再绕 X 轴旋转&lt;br/&gt;            matrix.multiply(dstMatrix, matrix.rotationX(deg2radians(xAngle), tmpMatrix), dstMatrix);&lt;br/&gt;            //模型投影矩阵。&lt;br/&gt;            matrix.multiply(projectionMatrix, dstMatrix, dstMatrix)&lt;br/&gt;            // ----- 省略一些代码 -----&lt;br/&gt;            requestAnimationFrame(render);&lt;br/&gt;        }      &lt;br/&gt;    &amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Three.js&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WebGL学习有门槛，&lt;span&gt;Three.js&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt; 作为方向入门，就像 jQuery 一样的存在，可以快速的创建出三维场景。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5563480741797432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8IRgUiciaArtCgg5s66lSjyvvXHdGgGQPfwSoZCHDmibtaKWtYoxEX8G3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2804&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;阶段总结&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要一个规范/接口告诉驱动如何 和 GPU 通信，这个规范/接口是 OpenGL，发展至今嵌入式设备崛起，OpenGL ES 也应运而生，WebGL 是基于 OpenGL ES 可以让其在浏览器上通过Javascript 调用的规范/接口，但WebGL门槛不低，要和GPU通信，就需要了解计算机图形学知识，那肯定也需要用到着色器，所以 Three.js 封装好成为三维引擎，也不用知道那么多底层知识，就可以创建 Web 3D。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这个过程就好比 深度学习领域：Tensorflow (xxx.js / Python) 都可以调调现有成熟模型，看起来是调参数十分的简单，但是模型背后是 线性代数、高数、统计学 ...&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;理解 GPU 设计模型&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是渲染呢？简单的说就是从计算机程序最后到图像的过程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家面试都会被问到一个问题 &lt;code&gt;从输入url到页面渲染完成，都经历了些什么呢？&lt;/code&gt; 大部分同学都止步于 ....... 生成Render Tree。那后续是如何将各种信息转换为屏幕上的像素呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在说明渲染过程之前，先来大致看下为什么需要 GPU？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;下面绘制图片，引用来自该文档 &lt;span&gt;The Book of Shaders by Patricio Gonzalez Vivo &amp;amp; Jen Lowe&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6589057043073341&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8CBYyBavqQLQuq13eDJ5j343N6sGEd0cmH5j7ibyF3WpN7iaRMHTGpmlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1718&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要对每个像素的计算，如此设计模式对CPU压力会比较大，故有 GPU 结构去处理该场景。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3919491525423729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a84wia0Z7ho7F5hvcY3vnkiczNfckngnxXCLG5b9rLHd81sJy06GpudS5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1888&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述这么设计的原因是：对每个像素进行计算，而且是相同的运算，这样并行计算的效率会更高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上可以理解：GPU 计算能力不如 CPU，但是 GPU 人多力量大 (管子多，且管子只处理已知简单任务)，类比于 建筑工程师 (CPU) 设计出来建筑图纸和每项任务，工人们 (GPU) 搬砖干活。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;🤔 这些破管子都干了些啥？着色器又是什么？必须浅浅了解下 图形渲染管线 Render Pipeline。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.39113428943937417&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8Z4YdQUQI1mGRVT38tLDMbHsRfYvjL5eqLp5caEtiastuf4ia91ibvv9AA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1534&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;了解 图形渲染管线&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9147424511545293&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8GZpOtiaPiaFUuyQeleZd18JTtYJfoAdRroCgz3ke9afUlfgiaHGxBgEXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;563&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回顾你的学习生涯，初中数学计算立方体面积，老师在 2D 黑板上画了XYZ 轴，并骗你这是个 3D立方体(视觉上)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任何用3D空间中表示的事物，在 🖥 中都是2D像素数组，而WebGL/OpenGL 大部分工作也是把3D坐标转换为2D像素。这个过程叫做 &lt;strong&gt;图形渲染管线 Render&lt;/strong&gt; &lt;strong&gt;Pipeline&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合上面那些个GPU 模型里的破管子，有一堆原始图形数据 经过 一个 破管子后，最终输出至屏幕中的过程就是 图形渲染管线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图形渲染管线 Render Pipeline 被划分为几个阶段，跟咱们的ByteCycle 流水线一样，每个阶段会把上个阶段的输出作为输入，也可以理解是函数式编程 pipeline 模式。也就是说，每个阶段都有专门的函数 / 小程序去处理，函数 / 小程序 ≈ &lt;strong&gt;着色器 (Shader)&lt;/strong&gt; 。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5004812319538018&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8GTvKffVoOhbP9vh6RF2moYhHOxicKibaMZxNznGOTicc5bFdumsTBiazJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2078&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CPU 和 GPU 是通力合作的关系来渲染图像&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43818849449204406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a87RyLzGkC2cic3DvficRCwys2dUGOv2QscShjPhIglMqSh2tC1Swrhlicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1634&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;渲染管线抽象流程&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;顶点着色器&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;3D坐标 转为 另一种3D坐标(后面会解释 从局部到世界坐标系)，并对顶点属性进行处理。&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;图元的装配&lt;/td&gt;&lt;td&gt;将 顶点着色器 输出的点作为输入，并绘制成图元形状。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;几何着色器&lt;/td&gt;&lt;td&gt;将 图元形状 构造成新的图元 或 其他形状。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;光栅化过程&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;把 图元 映射为 最终屏幕上相应的 像素。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;片段着色器&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;计算一个像素的最终颜色。例如一个立方体在灯光照射下会有阴影，这里也会将其处理。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;测试与混合&lt;/td&gt;&lt;td&gt;例如 有3D遮挡场景 或 物体是透明，在这个过程中就需要判断是否在该帧被丢弃。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3843612334801762&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8wtRFrzAibcKsbHKI7uvIhicDwmjGkPR0PwDicib8reNJXdIEtLBIFf3Ricg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1816&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单了解下GLSL 语言，类似C语言，以下是顶点着色器的例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;#version 300 es  #声明了着色器版本号 300 代表是 3.0 之后版本&lt;/span&gt;&lt;br/&gt;&lt;span&gt;in&lt;/span&gt; vec4 aPos ;&lt;br/&gt;&lt;span&gt;# in = 输入变量 浮点型向量vec4 变量名称 aPos&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# eg: aPos = {1.0, 1.0, 1.0, 1.0}&lt;/span&gt;&lt;br/&gt;void &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;()&lt;br/&gt;{&lt;br/&gt;    gl_Position = aPos ;&lt;br/&gt;    &lt;span&gt;# 顶点着色器的内置输出变量&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;阶段总结&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于浏览器，通过Javascript 来实现编程技术，能在 2D屏幕 上看到 3D效果。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;基础能力：数学、物理 ....&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能力支持：基于 GPU 图形渲染管线架构设计，在 Web端 通过 WebGL (-&amp;gt; OpenGL ES -&amp;gt; OpenGL) 和 着色器 (着色器GLSL 语言实现)，实现驱动能力。(任何语言实现都是以硬件为基础)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这里，你可能会有这样的疑问，如何让 3D空间点坐标 转为 屏幕 2D二维点坐标？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;浅看 3D空间点 to 屏幕 2D二维点&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5595595595595596&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8PyqwM2ib1erLXGOAVETOHxpfJEeBH2VcibNrhqqicqUyW30jvhYPmPsLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1998&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个复杂场景中，物体如 🦖 、周边🌸🌸🌱🌿 等，都需要软件建模，建模好后再将其放置到该场景中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当对每个物体🦖 建模的时候，物体本身是有自己的独立坐标系 &lt;strong&gt;[1] 局部坐标系 Local Space&lt;/strong&gt;，但 🦖 🌸🌸🌱🌿 放到场景中就有不同放置位置，所有物体共享同一个坐标系，叫 &lt;strong&gt;[2] 世界坐标系 World Space&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在世界坐标系场景下，我们是从正面某个位置去观察 🦖，如果视角变化至沿着Z轴负方向看呢？又是另外一个画面，叫做 &lt;strong&gt;[3] 视觉坐标系 View Space&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3256059009483667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8aWQsPia1VQstxibwHG78aJs55u5dStEm6dkRiasekibXUoibEXw7BpypkqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1898&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;剩下两个坐标系说明：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;[4] 裁剪坐标系 Clip Space /&lt;/strong&gt; &lt;strong&gt;DNC&lt;/strong&gt;: 归一化处理，和 需要判断哪个片段需要展示在屏幕内。(这里不做展开跟机器学习归一化目标一致，统计学中数据收敛作用)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;[5] 屏幕坐标系 Screen Space&lt;/strong&gt;：根据裁剪坐标系计算，再转换为屏幕坐标。最后将数据传到光栅器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;以上理解版&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们每个人都是一个独立个体都以&quot;自我为中心&quot; ( [1] 局部坐标系)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;随着我们长大要进入社会 ([2] 世界坐标系)，学习、工作 ....&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在这个过程中，有人仰视你，有人俯视你，你可以选择平视他们 或者 后脑勺对着他们，总之其他人会站在自己的角度看问题 或者 看你 ([3] 视觉坐标系) ....&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;AnyWay，过程中你可能会生活磨平棱角 ([4] 裁剪坐标系)，变成了你小时候最讨厌的人，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;But，你就是你，是不一样的烟火，.... 让蔷薇开出一种结果 ([5] 屏幕坐标系)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理解有些概念后，咱们再看看这些过程间转换，是如何离不开 线性代数基础知识的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;[1] 局部空间-&amp;gt; [2] 世界空间&lt;/strong&gt;，涉及 &lt;code&gt;矩阵的平移、缩放、旋转&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缩放：代表多少倍，缩放S1、S2、S3 倍数&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2803532008830022&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8odaic6eibN8J9AvWmRJApnydwV0S2C8OO7kwKsQjNTkdxh4udib8KJdNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;906&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;平移：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30512820512820515&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8HDlPjSk2ib4HvHjkrSzVqHtggH6stHF3fuXibPfPuh84EUEa5YHUz4pw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;span data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section role=&quot;presentation&quot; data-formula=&quot;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;span&gt;旋转：由 P(x, y, z) 变为 P&#x27; (x&#x27;, y&#x27;, z&#x27;)，旋转 θ 角度，略过 ... &lt;/span&gt;&lt;span&gt;变换 - LearnOpenGL CN&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 0 1 0&quot; preserveaspectratio=&quot;xMidYMid slice&quot; aria-hidden=&quot;true&quot;/&gt;&lt;/section&gt;&lt;/span&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;[2] 世界空间 -&amp;gt; [3] 视觉空间&lt;/strong&gt;，构建 &lt;code&gt;线性变换矩阵&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任何方位观察到的物体都是不同的，从A 位置 变换至 B 位置，只要知道 变换前后的&lt;code&gt;基向量&lt;/code&gt;，就能知道 运动至哪里，方法通过 &lt;code&gt;矩阵相乘&lt;/code&gt; (对几何空间的线性变化) ....&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;矩阵向量乘积: &lt;code&gt;变换后的基向量&lt;/code&gt; * 未变化前的位置 (x, y) = 基向量变换后新(x&#x27;, y&#x27;)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5582120582120582&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8OSoQZANwLG6mSEwkEPKKz76KoRHcmm0HnDAWHCkNK6wk0YVB9kovWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1924&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5196182396606575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8zqCzPiaY22hxicDBYRUpsOnF9TyRsVCUsZXvfohpR4T6cpm6YpQicicwTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1886&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;[3] 视觉空间 -&amp;gt; [4] 裁剪空间 -&amp;gt; [5] 屏幕空间&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;将 3D 点 表示到 2D 点， &lt;code&gt;投影&lt;/code&gt; -&amp;gt; &lt;code&gt;点积&lt;/code&gt; (实际上会更复杂些) ....&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再将能视觉展示的空间展示，不能展示的被剪裁掉&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;剪裁后点位，会归一化处理，保证交付给发光二极管。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;总之，学好线性代数很重要。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;《线性代数》（同济版）——教科书中的耻辱柱&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt; 该文章 引起了我相当强烈的共鸣 (没学好真不怨我)&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5588235294117647&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8XLa5ZsiaHm0icQzN8chpYKglyTw4tq2xCyDGApiaGOKDZowFRA5hib06Yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1224&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8Ikv3SUvsHJJqHBRZTySiafppLEfHj0kS4F2uZModnWD2iaicWLFWYwMyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实践篇：用 Three.js 入个门&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先用低成本学习Three.js，快速入门 .....&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;3D 建模概念必备&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是个大导演，有一天你想请 安琪拉大宝贝儿 来北京 献歌一曲，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;要有地点 &lt;code&gt;Scene 场景&lt;/code&gt; ，选择 人民大会堂作为 舞台吧；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要有灯光 &lt;code&gt;Light 灯光&lt;/code&gt;, 才能让观众看到 安琪拉大宝贝儿 唱歌；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关于 安琪拉大宝贝 作为 &lt;code&gt;模型&lt;/code&gt;，来之前要保养一下，皮肤看起来吹弹可破 &lt;code&gt;材质 Material&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;XXX 大品牌疯狂赞助，并要求她穿上新一季 服饰 和 配上妆发 &lt;code&gt;贴图与纹理 Texture&lt;/code&gt;;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一切准备就绪后，N个机器 &lt;code&gt;Camera 相机&lt;/code&gt; 360 度无死角的拍摄，她唱 XXX歌曲。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你刚在脑海里构建出来的画面 ≈ &lt;code&gt;渲染器 Render&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4914712153518124&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a86fzicLibQnNyRStlKvhkcRD9DAIJ6I4G6slpe3DGcS25usRpAH3ibbSGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1876&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Three.js demo&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt; 自己去对照着想象这个👻，就是 安琪拉大宝贝儿 吧&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上几个关键词是：&lt;code&gt;Scene 场景&lt;/code&gt;、&lt;code&gt;Light 灯光&lt;/code&gt;、&lt;code&gt;模型&lt;/code&gt;、&lt;code&gt;材质 Material&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;、&lt;code&gt;Texture&lt;/code&gt;、&lt;code&gt;Camera 相机&lt;/code&gt;、&lt;code&gt;渲染器 Render&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理解了以上的几个概念后，对我们实践上手应用 Three.js 非常的关键。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;实践代码走一波&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;STEP1: 创建舞台 和 相机，并渲染至页面上&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import * as THREE from &lt;span&gt;&#x27;three&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;class ThreeDemo {&lt;br/&gt;  &lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;    this.width = window.innerWidth&lt;br/&gt;    this.height = window.innerHeight&lt;br/&gt;    this.aspectRatio = this.width / this.height&lt;br/&gt;&lt;br/&gt;    // 创建场景&lt;br/&gt;    this.scene = null&lt;br/&gt;    // 创建相机&lt;br/&gt;    this.camera = null&lt;br/&gt;    // 创建灯光&lt;br/&gt;    this.light = null&lt;br/&gt;    // 创建模型&lt;br/&gt;    this.model = null&lt;br/&gt;    // 创建材质&lt;br/&gt;    this.material = null&lt;br/&gt;    // 创建纹理&lt;br/&gt;    this.texture = null&lt;br/&gt;    // 创建渲染&lt;br/&gt;    this.renderer = null&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;init&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;    this.createScene() // 创建舞台 和 相机&lt;br/&gt;    this.createRenderer() // 创建渲染&lt;br/&gt;    document.body.appendChild(this.renderer.domElement) // 渲染至页面上&lt;br/&gt;    &lt;br/&gt;    const render = () =&amp;gt; {&lt;br/&gt;      this.renderer.render(this.scene, this.camera) // 渲染场景&lt;br/&gt;      requestAnimationFrame(render)&lt;br/&gt;    }&lt;br/&gt;    render()&lt;br/&gt;    &lt;br/&gt;    this.axesHelper()&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;createScene&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;    // ====== 搭建个舞台 ======&lt;br/&gt;    this.scene = new THREE.Scene() &lt;br/&gt;    this.scene.fog = new THREE.Fog(0x090918, 1, 600)&lt;br/&gt;    &lt;br/&gt;    // ====== 搭建相机 (模拟人视角去看景象) PerspectiveCamera = 透视相机 ======&lt;br/&gt;    this.camera = new THREE.PerspectiveCamera(&lt;br/&gt;      75, // 视角&lt;br/&gt;      this.aspectRatio, // 纵横比&lt;br/&gt;      0.1, // nearPlane 近平面&lt;br/&gt;      2000 // farPlane 远平面&lt;br/&gt;    )&lt;br/&gt;    // 设置相机位置&lt;br/&gt;    this.camera.position.set(10, 10, 10) // x, y, z&lt;br/&gt;    // 更新摄像头宽高比例&lt;br/&gt;    this.camera.aspect = this.aspectRatio&lt;br/&gt;    // 更新摄像头的矩阵&lt;br/&gt;    this.camera.updateProjectionMatrix()&lt;br/&gt;&lt;br/&gt;    // 将相机放到舞台上&lt;br/&gt;    this.scene.add(this.camera)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;createRenderer&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;    this.renderer = new THREE.WebGLRenderer({ antialias: &lt;span&gt;true&lt;/span&gt; })&lt;br/&gt;    this.renderer.outputEncoding = THREE.sRGBEncoding&lt;br/&gt;    // 设置渲染器宽高&lt;br/&gt;    this.renderer.setSize(this.width, this.height)&lt;br/&gt;    this.renderer.setClearColor(this.scene.fog.color)&lt;br/&gt;&lt;br/&gt;    // 屏幕变化 更新渲染 (相机视角变化 和 渲染器变化)&lt;br/&gt;    window.addEventListener(&lt;span&gt;&#x27;resize&#x27;&lt;/span&gt;, () =&amp;gt; {&lt;br/&gt;      this.camera.aspect = window.innerWidth / window.innerHeight&lt;br/&gt;      this.camera.updateProjectionMatrix()&lt;br/&gt;      this.renderer.setSize(window.innerWidth, window.innerHeight)&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;  &lt;br/&gt;  // 辅助坐标系&lt;br/&gt;  &lt;span&gt;&lt;span&gt;axesHelper&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;    const axesHelper = new THREE.AxesHelper(5)&lt;br/&gt;    this.scene.add(axesHelper)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;const instance = new ThreeDemo()&lt;br/&gt;instance.init()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;this.camera.position.set(10, 10, 10)&lt;/code&gt; 在这个位置上看&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5420289855072464&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8VicXfbGHdAzGQ4baicV0dkstCUQPcS4Rdum9PLnX7wJJJibiaOHgIlxAAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1380&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们在&lt;code&gt;this.camera.position.set(0, 0, 5)&lt;/code&gt; 这个位置上看&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6502732240437158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8icKtia1nbQF3oIyDiaWdYeZ6shD2F4eqddRpWUhGJLEdGZSibvlr7Wia0gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1830&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;STEP2: 加模型 和 灯光&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 加入环境光&lt;br/&gt;// 环境光会均匀的照亮场景中的所有物体&lt;br/&gt;this.light = new THREE.AmbientLight(0x404040) // soft white light&lt;br/&gt;this.scene.add(this.light)&lt;br/&gt;&lt;br/&gt;// 场景中添加球&lt;br/&gt;const geometry = new THREE.BoxGeometry(2, 2, 2)&lt;br/&gt;const geometry_material = new THREE.MeshStandardMaterial({ color: 0xaafabb })&lt;br/&gt;instance.scene.add(new THREE.Mesh(geometry, geometry_material))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有光照&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5508571428571428&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a82dC0RuloQmk23xdiaZDFU2u41AEdAJiceFnwkfxQJCJ86ic0OaS4VshKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1750&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48040638606676345&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8wjncLx3gudric7iad6ibL6tlSgmIFgVjvf6CANSajDpvdUsWu32wkVyEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1378&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无光照 (无环境光加入)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里不仅加入环境光，还加入了平行光，即平行光是沿着特定方向发射的光&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &lt;span&gt;&lt;span&gt;createLight&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;    // 环境光会均匀的照亮场景中的所有物体&lt;br/&gt;    this.light = new THREE.AmbientLight(0x404040) // soft white light&lt;br/&gt;    this.scene.add(this.light)&lt;br/&gt;&lt;br/&gt;    // 平行光是沿着特定方向发射的光&lt;br/&gt;    this.directionalLight = new THREE.DirectionalLight( 0xffffff, 0.6 )&lt;br/&gt;    this.directionalLight.position.set(0, 5, 5)&lt;br/&gt;    &lt;br/&gt;    this.scene.add(this.directionalLight)&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5358744394618834&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8ywM6BWAVm1uU0LpsAcMy6RsDoKWZD5m5BNcnOSr6c2ib5jAT6Lq63aw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1784&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;STEP3: 贴膜 (材质和纹理)&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://www.poliigon.com/ 在这个网站上去找一些贴图&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 场景中添加立方体&lt;br/&gt;const geometry = new THREE.BoxGeometry(2, 2, 2)&lt;br/&gt;const geometry_material = new THREE.MeshStandardMaterial({ &lt;br/&gt;  map: textureLoader.load(&lt;span&gt;&#x27;../public/textures/RoofTilesTerracotta004/RoofTilesTerracotta004_COL_1K.jpg&#x27;&lt;/span&gt;),&lt;br/&gt;  aoMap: textureLoader.load(&lt;span&gt;&#x27;../public/textures/RoofTilesTerracotta004/RoofTilesTerracotta004_AO_1K.jpg&#x27;&lt;/span&gt;),&lt;br/&gt;  alphaMap: textureLoader.load(&lt;span&gt;&#x27;../public/textures/RoofTilesTerracotta004/RoofTilesTerracotta004_AO_1K.jpg&#x27;&lt;/span&gt;),&lt;br/&gt;  normalMap: textureLoader.load(&lt;span&gt;&#x27;../public/textures/RoofTilesTerracotta004/RoofTilesTerracotta004_NRM_1K.png&#x27;&lt;/span&gt;),&lt;br/&gt;  transparent: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;  roughness: 0,&lt;br/&gt;})&lt;br/&gt;const model = new THREE.Mesh(geometry, geometry_material)&lt;br/&gt;instance.scene.add(model)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5686145764937623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIqpIVrX62SgKOmvK0FPc3a8k2ia63UGrtib5ZUHjECSxIeE3VOCbQIXSn0gyiahzao1RiaC4r05WW4VNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3046&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Step X：以上小结&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;先将 &lt;code&gt;Scene 场景&lt;/code&gt;、&lt;code&gt;Light 灯光&lt;/code&gt;、&lt;code&gt;Camera 相机&lt;/code&gt; 设置好，并将其通过&lt;code&gt;渲染器 Render&lt;/code&gt; 渲染至页面上&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;确定好 &lt;code&gt;模型&lt;/code&gt; 穿上 &lt;code&gt;材质 Material&lt;/code&gt; 和 &lt;code&gt;贴图 Texture&lt;/code&gt; 后，并设定好该模型位置，再添加至场景&lt;code&gt;Scene 场景&lt;/code&gt; 中，即可得到3D物体啦。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最后总结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你没有系统的接触过该方向，那可以先从Three.js 入手，兴趣是最好的老师，通过理解场景、灯光、相机 ... 等大概知道一些概念。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图形学虽然水很深，但再深也有底，深入 WebGL + 着色器 (GLSL语言) -&amp;gt; 硬件上运作机制 &lt;strong&gt;等等等&lt;/strong&gt; ...&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;如何入手webGl以及three.js呢? - 知乎: &lt;em&gt;https://www.zhihu.com/question/383398859/answer/1121471144&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;前端开发者应该如何学习计算机图形学相关的知识? - 知乎: &lt;em&gt;https://www.zhihu.com/question/24351718&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;大三计算机，想接触图形学方面的知识，直接学WebGL还是OpenGL ? - 知乎: &lt;em&gt;https://www.zhihu.com/question/422713076&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;WebGL，OpenGL和OpenGL ES三者的关系: &lt;em&gt;https://blog.csdn.net/qq_23034515/article/details/108283747&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;OpenGL: &lt;em&gt;https://en.wikipedia.org/wiki/OpenGL&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;WebGL: &lt;em&gt;https://www.khronos.org/webgl/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;立方体 demo: &lt;em&gt;http://ifanqi.top/webgl/pages/lesson12.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;代码: &lt;em&gt;https://github.com/lucefer/webgl/blob/master/pages/lesson12.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Three.js: &lt;em&gt;https://threejs.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;The Book of Shaders by Patricio Gonzalez Vivo &amp;amp; Jen Lowe: &lt;em&gt;https://thebookofshaders.com/01/?lan=ch&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;变换 - LearnOpenGL CN: &lt;em&gt;https://learnopengl-cn.github.io/01%20Getting%20started/07%20Transformations/#_18&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;《线性代数》（同济版）——教科书中的耻辱柱: &lt;em&gt;https://zhuanlan.zhihu.com/p/199665495&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;Three.js demo: &lt;em&gt;https://threejs.org/examples/#webgl_animation_skinning_additive_blending&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❤️ 谢谢支持&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上便是本次分享的全部内容，希望对你有所帮助^_^&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;喜欢的话别忘了 &lt;strong&gt;分享、点赞、收藏&lt;/strong&gt; 三连哦~。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎关注公众号 &lt;strong&gt;ELab团队&lt;/strong&gt; 收货大厂一手好文章&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;字&quot; data-textnode-index=&quot;346&quot; data-index=&quot;7804&quot;&gt;&lt;span data-raw-text=&quot;节&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12090&quot;&gt;字节&lt;/span&gt;&lt;span data-raw-text=&quot;跳&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12091&quot;&gt;跳&lt;/span&gt;&lt;span data-raw-text=&quot;动&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12092&quot;&gt;动&lt;/span&gt;&lt;span data-raw-text=&quot;校&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12093&quot;&gt;校&lt;/span&gt;&lt;span data-raw-text=&quot;/&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12094&quot;&gt;/&lt;/span&gt;&lt;span data-raw-text=&quot;社&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12095&quot;&gt;社&lt;/span&gt;&lt;span data-raw-text=&quot;招&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12096&quot;&gt;招&lt;/span&gt;&lt;span data-raw-text=&quot;内&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12097&quot;&gt;内&lt;/span&gt;&lt;span data-raw-text=&quot;推&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12098&quot;&gt;推&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index-1642080622978=&quot;991&quot; data-index-1642080622978=&quot;12099&quot;&gt;码&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;:&quot; data-textnode-index-1642080622978=&quot;992&quot; data-index-1642080622978=&quot;12100&quot;&gt;:&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1642080622978=&quot;992&quot; data-index-1642080622978=&quot;12101&quot;&gt; &lt;/span&gt;&lt;span&gt;W7HD8A6&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;348&quot; data-index=&quot;7823&quot;&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index-1642080622978=&quot;994&quot; data-index-1642080622978=&quot;12109&quot;&gt;投&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;递&quot; data-textnode-index=&quot;348&quot; data-index=&quot;7824&quot;&gt;&lt;span data-raw-text=&quot;递&quot; data-textnode-index-1642080622978=&quot;995&quot; data-index-1642080622978=&quot;12110&quot;&gt;递&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;链&quot; data-textnode-index=&quot;348&quot; data-index=&quot;7825&quot;&gt;&lt;span data-raw-text=&quot;链&quot; data-textnode-index-1642080622978=&quot;996&quot; data-index-1642080622978=&quot;12111&quot;&gt;链&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;接&quot; data-textnode-index=&quot;348&quot; data-index=&quot;7826&quot;&gt;&lt;span data-raw-text=&quot;接&quot; data-textnode-index-1642080622978=&quot;997&quot; data-index-1642080622978=&quot;12112&quot;&gt;接&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;:&quot; data-textnode-index=&quot;348&quot; data-index=&quot;7827&quot;&gt;&lt;span data-raw-text=&quot;:&quot; data-textnode-index-1642080622978=&quot;998&quot; data-index-1642080622978=&quot;12113&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;348&quot; data-index=&quot;7828&quot;&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1642080622978=&quot;999&quot; data-index-1642080622978=&quot;12114&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index-1642080622978=&quot;1000&quot; data-index-1642080622978=&quot;12115&quot;/&gt;https://job.toutiao.com/s/6stp6SM&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>39630651e64e702e8a2fb4da10621892</guid>
<title>【SpringBoot技术专题】「StateMachine」StateMachine状态机设计及实现开发学习指南_洛神灬殇的博客-CSDN博客</title>
<link>https://toutiao.io/k/s5v2a6g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h1&gt;&lt;a id=&quot;_0&quot;/&gt;前言介绍&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;本文主要介绍一下状态机以及相关的一些概念。结合一个简单的订单状态流程，示例怎样在Springboot中集成&lt;strong&gt;Spring-statemachine&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;&lt;a id=&quot;Finitestate_machine_4&quot;/&gt;有限状态机（Finite-state machine）&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;有限状态机（英语：finite-state machine，缩写：FSM），简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;应用FSM模型可以帮助对象生命周期的状态的顺序以及导致状态变化的事件进行管理&lt;/strong&gt;。&lt;strong&gt;将状态和事件控制从不同的业务Service方法的if else中抽离出来。FSM的应用范围很广，对于有复杂状态流，扩展性要求比较高的场景都可以使用该模型。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;下面是状态机模型中的4个要素，即现态、条件、动作、次态。&lt;/p&gt; 
 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;条件：又称为“事件”。当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;状态机中，每个状态有着相应的行为，随着行为的触发来切换状态。其中一种做法是使用二维数组实现状态机机制，其中横坐标表示行为，纵坐标表示状态，具体的数值则表示当前的状态。&lt;/p&gt; 
&lt;p&gt;我们以登录场景设计一个状态机。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/0fe603fc054d6224eea82d9894fc2ed8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;设计一张状态机表。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;横轴是动作，纵轴是状态&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/08db042643dcbf9371b5d4f61ddfb487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;此时它的二维数组，如下所示&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e078a40bfa69e2e67ec62bdaa71f53e6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;此外，我们也可以通过状态模式实现一个状态机，状态模式将每一个状态封装成独立的类，具体行为会随着内部状态而改变。状态模式用类表示状态，这样我们就能通过切换类来方便地改变对象的状态，避免了冗长的条件分支语句，&lt;/li&gt;&lt;li&gt;让系统具有更好的灵活性和可扩展性。现在，我们定义一个状态枚举，其中包括未连接、已连接、注册中、已注册 4 种状态。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/4f0630218f313daef6b0bc787b99f439.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;定义一个环境类，它是实际上是真正拥有状态的对象。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/2d84c3ea529a05ce342694c01379c841.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;状态模式用类表示状态，这样就能通过切换类来方便地改变对象的状态。我们定义几个状态类。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e1eaf986be1f1638b98768651e9ba67b.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/8b487ffa5a3173a94f00dac44a725f4c.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/d0806f13bb43f3744e10137a2eb32b00.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/dc805e2c8d052b98577cdf72d698f493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;注意的是，如果某个行为不会触发状态的变化，我们可以抛出一个 RuntimeException 异常。此外，调用时，通过环境类控制状态的切换，如下所示。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/dea88f080ff5363f8dae49823fc3a5a2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;Spring StateMachine 让状态机结构更加层次化，可以帮助开发者简化状态机的开发过程。现在，我们来用 Spring StateMachine 进行改造。修改 pom 文件，添加 Maven/gradle 依赖。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-xml&quot;&gt;dependencies {
    compile &#x27;org.springframework.statemachine:spring-statemachine-core:1.2.7.RELEASE&#x27;
}  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;定义一个状态枚举，其中包括未连接、已连接、注册中、已注册 4 种状态。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegStatusEnum&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;UNCONNECTED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;CONNECTED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;LOGINING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;LOGIN_INTO_SYSTEM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;定义事件枚举，事件的发生触发状态转换&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;CONNECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;BEGIN_TO_LOGIN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;LOGIN_SUCCESS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;LOGIN_FAILURE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;token constant&quot;&gt;LOGOUT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;配置状态机，通过注解打开状态机功能。&lt;br/&gt; 配置类一般要继承EnumStateMachineConfigurerAdapter类，并且重写一些configure方法以配置状态机的初始状态以及事件与状态转移的联系。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;BEGIN_TO_LOGIN&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;CONNECT&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;LOGIN_FAILURE&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;LOGIN_SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;LOGOUT&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegStatusEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;CONNECTED&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegStatusEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;LOGINING&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegStatusEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;LOGIN_INTO_SYSTEM&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegStatusEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;UNCONNECTED&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EnumSet&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Configuration&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statemachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EnableStateMachine&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statemachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EnumStateMachineConfigurerAdapter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statemachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;builders&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StateMachineStateConfigurer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statemachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;builders&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StateMachineTransitionConfigurer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;qyz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegStatusEnum&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@EnableStateMachine&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StateMachineConfig&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EnumStateMachineConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StateMachineStateConfigurer&lt;/span&gt; states&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        states&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withStates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegStatusEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNCONNECTED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EnumSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegStatusEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StateMachineTransitionConfigurer&lt;/span&gt; transitions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        
        transitions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExternal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNCONNECTED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;CONNECTED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;CONNECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExternal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;CONNECTED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGINING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BEGIN_TO_LOGIN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExternal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGINING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNCONNECTED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGIN_FAILURE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExternal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGINING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGIN_INTO_SYSTEM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGIN_SUCCESS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExternal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGIN_INTO_SYSTEM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNCONNECTED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGOUT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Spring StateMachine 提供了注解配置实现方式，所有 StateMachineListener 接口中定义的事件都能通过注解的方式来进行配置实现。这里以连接事件为案例，@OnTransition 中 source 指定原始状态，target 指定目标状态，当事件触发时将会被监听到从而调用 connect() 方法。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在启动springboot时，需要注入状态机的状态，事件的配置。起主要涉及到以下两个类：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;StateMachineStateConfigurer &amp;lt; S, E&amp;gt; 配置状态集合以及初始状态，泛型参数S代表状态，E代表事件。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;StateMachineTransitionConfigurer 配置状态流的转移，可以定义状态转换接受的事件。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;配置事件监听器，事件发生时会触发的操作&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Configuration&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statemachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OnTransition&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statemachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WithStateMachine&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@WithStateMachine&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StateMachineEventConfig&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OnTransition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;UNCONNECTED&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CONNECTED&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Switch state from UNCONNECTED to CONNECTED: connect&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OnTransition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CONNECTED&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;LOGINING&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;beginToLogin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Switch state from CONNECTED to LOGINING: beginToLogin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OnTransition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;LOGINING&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;LOGIN_INTO_SYSTEM&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loginSuccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Switch state from LOGINING to LOGIN_INTO_SYSTEM: loginSuccess&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OnTransition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;LOGINING&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;UNCONNECTED&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loginFailure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Switch state from LOGINING to UNCONNECTED: loginFailure&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;      
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@OnTransition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;LOGIN_INTO_SYSTEM&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;UNCONNECTED&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Switch state from LOGIN_INTO_SYSTEM to UNCONNECTED: logout&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;通过注解自动装配一个状态机&lt;br/&gt; 这里写了一个rest接口来触发状态机变化&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebApi&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StateMachine&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/testStateMachine&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testStateMachine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;CONNECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BEGIN_TO_LOGIN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGIN_FAILURE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RegEventEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LOGOUT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Switch&lt;/span&gt; state from &lt;span class=&quot;token constant&quot;&gt;UNCONNECTED&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CONNECTED&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; connect
&lt;span class=&quot;token class-name&quot;&gt;Switch&lt;/span&gt; state from &lt;span class=&quot;token constant&quot;&gt;CONNECTED&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LOGINING&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; beginToLogin
&lt;span class=&quot;token class-name&quot;&gt;Switch&lt;/span&gt; state from &lt;span class=&quot;token constant&quot;&gt;LOGINING&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UNCONNECTED&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; loginFailure
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt;&lt;li&gt;从输出可以看到，虽然send了4个事件，但只有三条输出。原因是最后一个LOGOUT事件发生时，状态机是UNCONNECTED状态，没有与LOGOUT事件关联的状态转移，故不操作。&lt;/li&gt;&lt;li&gt;使用spring实现的状态机将类之间的关系全部交由了IOC容器做管理，实现了真正意义上的解耦。果然Spring大法好啊。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;Spring StateMachine 让状态机结构更加层次化，我们来回顾下几个核心步骤：&lt;/p&gt; 
 
&lt;hr/&gt; 
&lt;h3&gt;&lt;a id=&quot;_264&quot;/&gt;状态转移的监听器&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;状态转移过程中，可以通过监听器（Listener）来处理一些持久化或者业务监控等任务。在需要持久化的场景中，可以在状态机模式中的监听器中添加持久化的处理。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a id=&quot;_268&quot;/&gt;其中主要涉及到&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;StateMachineListener事件监听器(通过Spring的event机制实现)。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;监听stateEntered(进入状态)、stateExited(离开状态)、eventNotAccepted(事件无法响应)、transition(转换)、transitionStarted(转换开始)、transitionEnded(转换结束)、stateMachineStarted(状态机启动)、stateMachineStopped(状态机关闭)、stateMachineError(状态机异常)等事件，借助listener可以跟踪状态转移。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;StateChangeInterceptor拦截器接口，不同于Listener。其可以改变状态转移链的变化。主要在preEvent(事件预处理)、preStateChange(状态变更的前置处理)、postStateChange(状态变更的后置处理)、preTransition(转化的前置处理)、postTransition(转化的后置处理)、stateMachineError(异常处理)等执行点生效。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;StateMachine 状态机实例，spring statemachine支持单例、工厂模式两种方式创建，每个statemachine有一个独有的machineId用于标识machine实例；需要注意的是statemachine实例内部存储了当前状态机等上下文相关的属性，因此这个实例不能够被多线程共享。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;为了方便扩展更多的Listener，以及管理Listeners和Interceptors。可以定义一个基于状态机实例的Handler: PersistStateMachineHandler,以及持久化实体的监听器OrderPersistStateChangeListener如下：&lt;/p&gt; 
&lt;p&gt;监听器的Handler以及接口定义PersistStateMachineHandler：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistStateMachineHandler&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LifecycleObjectSupport&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistingStateChangeInterceptor&lt;/span&gt; interceptor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; 
         &lt;span class=&quot;token class-name&quot;&gt;PersistingStateChangeInterceptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CompositePersistStateChangeListener&lt;/span&gt; listeners &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; 
         &lt;span class=&quot;token class-name&quot;&gt;CompositePersistStateChangeListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

   
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistStateMachineHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; 
       stateMachine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token class-name&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stateMachine&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;State machine must be set&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stateMachine &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onInit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStateMachineAccessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doWithAllRegions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;function &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; 
       function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addStateMachineInterceptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;interceptor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


   
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleEventWithState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt; 
       state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StateMachineAccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; withAllRegions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
        stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStateMachineAccessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withAllRegions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StateMachineAccess&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; withAllRegions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
           a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resetStateMachine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DefaultStateMachineContext&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addPersistStateChangeListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PersistStateChangeListener&lt;/span&gt; listener&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       listeners&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;listener&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


   
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistStateChangeListener&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

       
       &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onPersist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
           &lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Transition&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; transition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;token class-name&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistingStateChangeInterceptor&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;   
         &lt;span class=&quot;token class-name&quot;&gt;StateMachineInterceptorAdapter&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       
       &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;preStateChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
             &lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;token class-name&quot;&gt;Transition&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; transition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
               &lt;span class=&quot;token class-name&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
           listeners&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onPersist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; transition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CompositePersistStateChangeListener&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; 
           &lt;span class=&quot;token class-name&quot;&gt;AbstractCompositeListener&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PersistStateChangeListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt;
           &lt;span class=&quot;token class-name&quot;&gt;PersistStateChangeListener&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onPersist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
               &lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;token class-name&quot;&gt;Transition&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; transition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     
             &lt;span class=&quot;token class-name&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PersistStateChangeListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; iterator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getListeners&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
               iterator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;token class-name&quot;&gt;PersistStateChangeListener&lt;/span&gt; listener &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; iterator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
               listener&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onPersist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; transition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;持久化状态发生变化的订单实体的Listener实现类OrderPersistStateChangeListener:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderPersistStateChangeListener&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; 
                  &lt;span class=&quot;token class-name&quot;&gt;PersistStateMachineHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PersistStateChangeListener&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderRepo&lt;/span&gt; repo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onPersist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;   
        &lt;span class=&quot;token class-name&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;token class-name&quot;&gt;Transition&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; transition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;token class-name&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; order &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; repo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findByOrderId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt; status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            repo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Springboot注入Handler和Listener bean的Configuration类，OrderPersistHandlerConfig&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderPersistHandlerConfig&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; stateMachine&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStateService&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;PersistStateMachineHandler&lt;/span&gt; handler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;persistStateMachineHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPersistStateChangeListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;persistStateChangeListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStateService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistStateMachineHandler&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;persistStateMachineHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistStateMachineHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stateMachine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderPersistStateChangeListener&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;persistStateChangeListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderPersistStateChangeListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;订单服务的Controller&amp;amp;Service示例&lt;/p&gt; 
&lt;p&gt;示例提供了两个简单的接口，一个是查看所有订单列表，一个是改变一个订单的状态。&lt;/p&gt; 
&lt;p&gt;Controller如下OrderController:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/orders&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStateService&lt;/span&gt; orderStateService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; orders &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; orderStateService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listDbEntries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;orders&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


    
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/{orderId}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processOrderState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;orderId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; orderId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; orderStateService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;orderId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;订单服务类OrderStateService：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStateService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersistStateMachineHandler&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStateService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PersistStateMachineHandler&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;handler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderRepo&lt;/span&gt; repo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;listDbEntries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; orders &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; repo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;StringJoiner&lt;/span&gt; sj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringJoiner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt; order &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; orders&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            sj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderStatusChangeEvent&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; repo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findByOrderId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handleEventWithState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MessageBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withPayload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4da0c38900e0ddf29c9671d23cc08aed</guid>
<title>阿里强制 boolean 类型不能用 is 开头？</title>
<link>https://toutiao.io/k/21wjyc1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;pre&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;重磅资讯，干货，第一时间送达&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;# 背景&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平时工作中大家经常使用到boolean以及Boolean类型的数据，前者是基本数据类型，后者是包装类，为什么不推荐使用isXXX来命名呢？到底是用基本类型的数据好呢还是用包装类好呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;# 例子&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.其他非boolean类型&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; isHot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; getIsHot() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; isHot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.boolean类型&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; isHot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;isHot&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; isHot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.包装类型&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Boolean&lt;/span&gt; isHot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Boolean&lt;/span&gt; getHot() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; isHot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.不以is开头&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; hot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;isHot&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; hot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5.包装类型&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Boolean&lt;/span&gt; hot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Boolean&lt;/span&gt; getHot() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; hot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实阿里巴巴发布的java开发手册中就写明了，强制规定，布尔类型的数据，无论是boolean还是Boolean都不准使用isXXX来命名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3508158508158508&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;858&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icu8ekKAcwiaaTxg3xCEDX5s53ZEOiaBbha0Dj1vTR1Co8zIjzxqueCMbFnIjxwx0eBqnbV1UbsORdqu7DqMrRP4Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于非boolean类型的参数，getter和setter方法命名的规范是以get和set开头&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于boolean类型的参数，setter方法是以set开头，但是getter方法命名的规范是以is开头&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;包装类自动生成的getter和setter方法的名称都是getXXX()和setXXX()&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.其实javaBeans规范中对这些均有相应的规定，基本数据类型的属性，其getter和setter方法是getXXX()和setXXX，但是对于基本数据中布尔类型的数据，又有一套规定，其getter和setter方法是isXXX()和setXXX。但是包装类型都是以get开头&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.这种方式在某些时候是可以正常运行的，但是在一些rpc框架里面，当反向解析读取到isSuccess()方法的时候，rpc框架会“以为”其对应的属性值是success，而实际上其对应的属性值是isSuccess，导致属性值获取不到，从而抛出异常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;# 总结&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、boolean类型的属性值不建议设置为is开头，否则会引起rpc框架的序列化异常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、如果强行将IDE自动生成的isSuccess()方法修改成getSuccess()，也能获取到Success属性值，若两者并存，则之后通过getSuccess()方法获取Success属性值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;工作中使用基本类型的数据好还是包装类好&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;咱们举个例子，一个计算盈利的系统，其盈利比例有正有负，若使用了基本类型bouble定义了数据，当RPC调用时，若出现了问题，本来应该返回错误的，但是由于使用了基本类型，返回了0.0，系统会认为没有任何问题，今年收支平衡，而不会发现其实是出现了错误。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;若使用了包装数据类型Double，当RPC调用失败时，会返回null，这样直接就能看到出现问题了，而不会因为默认值的问题影响判断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实阿里java开发手册中对于这个也有强制规定:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4209905660377358&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icu8ekKAcwiaaTxg3xCEDX5s53ZEOiaBbhadFaCpiaMC2VUt2BOeqrBw2NKOAoWRCIPMsh6MZWxp3N9jzXfJvh6v4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;848&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，这里建议大家POJO中使用包装数据类型，局部变量使用基本数据类型。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0387d73f0064c81a5ec8e442387e9d0b</guid>
<title>八个 Web Components 前端框架，一定有一个你用得上</title>
<link>https://toutiao.io/k/t82736r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;/p&gt;&lt;section&gt;通过之前的系列文章，大家对 Web Components 一定有了一个深入的了解。通过实战也对 Web Components 怎么写、怎么用比较熟悉了。&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;但是，在实现时我们不难发现，原生的 Web Component 对于封装组件其实并不是很流畅，需要对属性进行处理、需要对数据进行监听、需要对事件进行控制等等。这一切都在和效率开发背道而驰。&lt;/p&gt;&lt;p&gt;所以在针对这些不符合现在开发模式的情况，出现了很多 Web Components 前端框架。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;Stencil&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;Stencil 是用于生成 Web Components 的编译器，由 Ionic 团队构建。Stencil 允许开发人员使用。TypeScript 和 JSX 等技术来定义组件，然后生成可在现代浏览器和旧版浏览器上运行的 100% 基于标准的 Web Component。当你的组件一旦经过 build 完成后，就会脱离 Stencil，不再依赖。并且 Stencil 相对原生 Web Components 提供了完善的项目目录架构和配置，与直接使用 Custom Elements 相比，Stencil 提供了额外的 API，使编写快速组件变得更加简单，Stencli 具有以下特性：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Virtual DOM&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JSX 和异步渲染等 API 使快速&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;强大的组件创建&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Reactive data-binding 单向数据流&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;组件懒加载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无依赖性组件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;静态网站生成(SSG)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;开发人员体验也得到了调整，并带有实时重新加载和嵌入编译器的小型开发服务器。&lt;/p&gt;&lt;p&gt;通过 &quot;npm init stencil&quot; 我们可以去体验 Stencil 提供 cli 工具，Stencil 会提供保姆式的选项配置：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45392749244712993&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wr65KQicCqibcLwMeiar6UEct9ky1kjmQM1TwokcG3CRZpwsajKdKRA3Hcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1324&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Stencil 组件看起来很像基于类的 React 组件，只是添加了 TypeScript 装饰器：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import { Component, Prop, h } from &lt;span&gt;&#x27;@stencil/core&#x27;&lt;/span&gt;;&lt;br/&gt;import { format } from &lt;span&gt;&#x27;../../utils/utils&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;@Component({&lt;br/&gt;  tag: &lt;span&gt;&#x27;my-component&#x27;&lt;/span&gt;,&lt;br/&gt;  styleUrl: &lt;span&gt;&#x27;my-component.css&#x27;&lt;/span&gt;,&lt;br/&gt;  shadow: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; class MyComponent {&lt;br/&gt;  /**&lt;br/&gt;   * The first name&lt;br/&gt;   */&lt;br/&gt;  @Prop() first: string;&lt;br/&gt;&lt;br/&gt;  /**&lt;br/&gt;   * The middle name&lt;br/&gt;   */&lt;br/&gt;  @Prop() middle: string;&lt;br/&gt;&lt;br/&gt;  /**&lt;br/&gt;   * The last name&lt;br/&gt;   */&lt;br/&gt;  @Prop() last: string;&lt;br/&gt;&lt;br/&gt;  private getText(): string {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; format(this.first, this.middle, this.last);&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;render&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &amp;lt;div&amp;gt;Hello, World! I&lt;span&gt;&#x27;m {this.getText()}&amp;lt;/div&amp;gt;;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的组件可以像任何其他 HTML 元素一样使用：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;my-component first=&lt;span&gt;&quot;Stencil&quot;&lt;/span&gt; last=&lt;span&gt;&quot;&#x27;Don&#x27;t call me a framework&#x27; JS&quot;&lt;/span&gt;&amp;gt;&amp;lt;/my-component&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5002632964718273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wrIo1Z6bfLuskMsoW02UVqTjwKe2ayB1ocqFib0G54lic0m7OBILNbvicvw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1899&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;Omi&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;Omi 是腾讯开源的前端跨框架跨平台的框架。是下一代 Web 框架，Omi 的目标是去万物糟粕，合精华为一。Omi 是一个跨框架的框架，任何框架都可以使用 Omi 自定义原始，当然 Web Components 也可以。它具有以下特性：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;小巧并且高性能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基于 Shadow/Ligit Dom 设计&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Web Components + JSX/TSX 融合为一个框架 Omi&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Shadow/Light DOM 与 Virtual DOM 融合，Omi 既使用了虚拟 DOM，也是使用真实 Shadow DOM，让视图更新更准确更迅速&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;局部 CSS 最佳解决方案(Shadow DOM)，社区为局部 CSS 折腾了不少框架和库(使用 js 或 json 写样式，如:Radium，jsxstyle，react-style；与 webpack 绑定使用生成独特的 className 文件名—类名—hash值，如：CSS Modules，Vue)，还有运行时注入scoped atrr 的方式，都是 hack 技术；Shadow DOM Style 是最完美的方案&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对 custom elements 友好, 通过字符串 &#x27;0&#x27;或者&#x27;false&#x27;传递 false，通过:和Omi.$传递任意复杂类型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;符合浏览器的发展趋势以及 API 设计理念&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们可以通过一下命令快速开始开发项目。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ npm i omi-cli -g    &lt;span&gt;# install cli&lt;/span&gt;&lt;br/&gt;$ omi init my-app     &lt;span&gt;# 初始化项目，也可以在空目录里执行 &#x27;omi init&#x27;&lt;/span&gt;&lt;br/&gt;$ &lt;span&gt;cd&lt;/span&gt; my-app           &lt;span&gt;# 如果在空目录里执行 &#x27;omi init&#x27; 忽略这条命令&lt;/span&gt;&lt;br/&gt;$ npm start           &lt;span&gt;# 开发&lt;/span&gt;&lt;br/&gt;$ npm run build       &lt;span&gt;# 编译发布&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;import { WeElement, render, h, tag } from &lt;span&gt;&#x27;omi&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;import &lt;span&gt;&#x27;./o-counter&#x27;&lt;/span&gt;&lt;br/&gt;import &lt;span&gt;&#x27;./index.css&#x27;&lt;/span&gt;&lt;br/&gt;import * as css from &lt;span&gt;&#x27;./index.less&#x27;&lt;/span&gt;&lt;br/&gt;import logo from &lt;span&gt;&#x27;./logo.svg&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;interface MyAppProps {&lt;br/&gt;  name: string&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;@tag(&lt;span&gt;&#x27;my-app&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; default class extends WeElement&amp;lt;MyAppProps&amp;gt; {&lt;br/&gt;&lt;br/&gt;  static css = css.default&lt;br/&gt;&lt;br/&gt;  abc: string&lt;br/&gt;&lt;br/&gt;  onCountChanged = (evt: CustomEvent) =&amp;gt; {&lt;br/&gt;    console.log(evt.detail)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  render(props) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;      &amp;lt;div class=&lt;span&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;header class=&lt;span&gt;&quot;app-header&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;          &amp;lt;img&lt;br/&gt;            src={logo}&lt;br/&gt;            class=&lt;span&gt;&quot;app-logo&quot;&lt;/span&gt;&lt;br/&gt;            alt=&lt;span&gt;&quot;logo&quot;&lt;/span&gt;&lt;br/&gt;          /&amp;gt;&lt;br/&gt;          &amp;lt;h1 class=&lt;span&gt;&quot;app-title&quot;&lt;/span&gt;&amp;gt;Welcome to {props.name}&amp;lt;/h1&amp;gt;&lt;br/&gt;        &amp;lt;/header&amp;gt;&lt;br/&gt;        {this.abc}&lt;br/&gt;        &amp;lt;o-counter onCountChanged={this.onCountChanged}&amp;gt;&amp;lt;/o-counter&amp;gt;&lt;br/&gt;&lt;br/&gt;      &amp;lt;/div&amp;gt;&lt;br/&gt;    )&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;render(&amp;lt;my-app&amp;gt;&amp;lt;/my-app&amp;gt;, &lt;span&gt;&#x27;#root&#x27;&lt;/span&gt;, {&lt;br/&gt;  // &lt;span&gt;if&lt;/span&gt; using OMI to build the whole application, ignore the attributs of DOM and use props of virtual dom&lt;br/&gt;  ignoreAttrs: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Omi 组件看起来也非常像 React 组件。相似度 95%，哈哈哈。如果你是一个 React 开发者一定感觉这语法非常的友好。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5002632964718273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wrGv36dWUNbXFs5MjfkUMvMSIeuicLMX17DdS3AHYR8o5u2mqMnEVV8zw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1899&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;Slim.js&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;Slim.js 是一个开源的轻量级 Web Components 库，它为组件提供数据绑定和扩展能力，使用 es6 原生类继承。专注于帮助开发者更好的编写原生web组件，而不依赖于其他框架，但是也提供了良好的拓展性，开发者可以自由拓展。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;slim.js 核心很小（压缩后不到 3kB），从名字也能看出它很小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;slim.js 带有可选的内置指令——可以选择适合的指令，从而保持包很小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;slim.js 速度很快——它使用浏览器的 Background Task API 按需创建绑定并释放内存作为后台任务（在所有主要浏览器上）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;slim.js 是可扩展的。您可以使用简单的 API 将您自己的自定义指令添加到注册表中，或者添加在组件生命周期的每一步执行您的代码的全局插件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;slim.js 基于自定义元素技术，因此您的用户界面可以在任何地方使用，并且不会干扰任何其他库或框架。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;slim.js 使您能够编写核心组件、用户界面的复杂部分和整个 web 应用程序——您选择您的尺寸，slim.js将提供。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过以下命令可以快速开始 slim.js：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;npm install slim-js&lt;br/&gt; &lt;span&gt;# 或者&lt;/span&gt;&lt;br/&gt;yarn add slim-js&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者从 CDN 使用：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;IIFE / Global： &amp;lt;script src=&lt;span&gt;&quot;https://unpkg.com/slim-js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;Module： &amp;lt;script src=&lt;span&gt;&quot;https://unpkg.com/slim-js?module&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;import { Slim } from &lt;span&gt;&#x27;slim-js&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;const myHTML = `&amp;lt;h1&amp;gt;Welcome, {{this.username}}!&amp;lt;/h1&amp;gt;`;&lt;br/&gt;&lt;br/&gt;class AwesomeComponent extends Slim {&lt;br/&gt;  &lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    super();&lt;br/&gt;    this.username = &lt;span&gt;&#x27;John Jimmy Junior&#x27;&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;Slim.element(&lt;span&gt;&#x27;my-awesome-component&#x27;&lt;/span&gt;, myHTML, AwesomeComponent);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;slim.js 基于浏览器的原生 DOM API 的网络组件规范。如果您希望支持旧版浏览器，您可能需要添加一个 polyfill。将以下标记添加到您的主 HTML 文件中：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&lt;span&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.17/webcomponents-lite.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5002632964718273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wrj7KLRb3JRgaJEw1jABYCT1sfK4bveibFUe37jCQ7Hz41rYRbOWPKa1w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1899&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;Polymer&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;Polymer 是 Google 推出的 Web Components 库，支持数据的单向和双向绑定，兼容性较好，跨浏览器性能也较好；提供了一组用于创建 custom elements 的功能。这些功能旨在使 custom elements 像标准 DOM 元素一样工作更容易和更快。与标准 DOM 元素类似，Polymer 元素可以是：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;使用构造函数或 document.createElement&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用特性或特性配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在每个实例中填充内部 DOM&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;响应属性和属性的变化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用内部默认值或外部样式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;响应操纵其内部状态的方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;使用以下命令可以运行一个 Polymer 程序：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;npm install -g polymer-cli@next&lt;br/&gt;&lt;br/&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/PolymerLabs/polymer-3-first-element.git&lt;br/&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; polymer-3-first-element&lt;br/&gt;&lt;br/&gt;npm install&lt;br/&gt;&lt;br/&gt;polymer serve --open&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;polymer 这语法和 Web Components 的原生语法真的非常的像。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import { PolymerElement, html } from &lt;span&gt;&#x27;@polymer/polymer/polymer-element.js&#x27;&lt;/span&gt;;&lt;br/&gt;import &lt;span&gt;&#x27;@polymer/iron-icon/iron-icon.js&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;class IconToggle extends PolymerElement {&lt;br/&gt;  static get &lt;span&gt;&lt;span&gt;template&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; html`&lt;br/&gt;      &amp;lt;style&amp;gt;&lt;br/&gt;        :host {&lt;br/&gt;          display: inline-block;&lt;br/&gt;        }&lt;br/&gt;        iron-icon {&lt;br/&gt;          fill: var(--icon-toggle-color, rgba(0,0,0,0));&lt;br/&gt;          stroke: var(--icon-toggle-outline-color, currentcolor);&lt;br/&gt;        }&lt;br/&gt;        :host([pressed]) iron-icon {&lt;br/&gt;          fill: var(--icon-toggle-pressed-color, currentcolor);&lt;br/&gt;        }&lt;br/&gt;      &amp;lt;/style&amp;gt;&lt;br/&gt;      &amp;lt;!-- shadow DOM goes here --&amp;gt;&lt;br/&gt;      &amp;lt;iron-icon icon=&lt;span&gt;&quot;[[toggleIcon]]&quot;&lt;/span&gt;&amp;gt;&amp;lt;/iron-icon&amp;gt;&lt;br/&gt;    `;&lt;br/&gt;  }&lt;br/&gt;  static get &lt;span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;      toggleIcon: {&lt;br/&gt;        &lt;span&gt;type&lt;/span&gt;: String&lt;br/&gt;      },&lt;br/&gt;      pressed: {&lt;br/&gt;        &lt;span&gt;type&lt;/span&gt;: Boolean,&lt;br/&gt;        notify: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;        reflectToAttribute: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;        value: &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    };&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    super();&lt;br/&gt;    this.addEventListener(&lt;span&gt;&#x27;click&#x27;&lt;/span&gt;, this.toggle.bind(this));&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;&lt;span&gt;toggle&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    this.pressed = !this.pressed;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;customElements.define(&lt;span&gt;&#x27;icon-toggle&#x27;&lt;/span&gt;, IconToggle);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5002632964718273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wrpNJqh7AkzvBYI7yBiaFh10BCtIOiaIfyXFnF7d7ggtibThhLLshW4icGVw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1899&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;hybrids&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;hybrids 是一个 JavaScript UI 框架，用于创建功能齐全的 Web 应用程序、组件库或具有独特的混合声明性和功能性架构的单个 Web Components。该框架的主要目标是为网络平台提供一套完整的工具——一切都没有外部依赖。它支持构建 UI 组件、管理复杂状态、使用客户端路由创建应用程序流以及针对全球市场本地化其内容。所有部分都遵循相同的独特概念，使其易于理解和使用！它具有：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;简单的结构，组件模型基于普通对象和纯函数，仍然在底层使用Web Components API&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无缝本地化，对组件内容自动翻译的内置支持使翻译无缝且易于集成&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;该框架提供了一种方法来添加具有复数形式的动态消息、HTML 内容，或在模板上下文之外使用消息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;复杂状态管理，store 模块提供基于声明式模型定义的全局状态管理，内置对异步外部存储、关系、离线缓存等的支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;结构化客户端路由，路由器模块为客户端应用程序提供了一个全局导航系统。它不是仅仅将 URL 与相应的组件匹配，而是依赖于树状结构的视图，这些视图在组件定义中有自己的路由配置。它使 URL 成为可选的，对对话框、受保护的视图等具有开箱即用的支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里套用一个官网的例子，给大家演示一下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import { define, html } from &lt;span&gt;&quot;hybrids&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; increaseCount(host) {&lt;br/&gt;  host.count += 1;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; default define({&lt;br/&gt;  tag: &lt;span&gt;&quot;simple-counter&quot;&lt;/span&gt;,&lt;br/&gt;  count: 0,&lt;br/&gt;  render: ({ count }) =&amp;gt; html`&lt;br/&gt;    &amp;lt;button onclick=&lt;span&gt;&quot;&lt;span&gt;${increaseCount}&lt;/span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;      Count: &lt;span&gt;${count}&lt;/span&gt;&lt;br/&gt;    &amp;lt;/button&amp;gt;&lt;br/&gt;  `&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这代码相对前面几个实例，非常的简单，代码结构也非常的清晰。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5002632964718273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wrxYrcDI0JoOwUeQWoBruYG86jnWnsXrxIjZ7l43AxgGxFVDQKicibmHvQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1899&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;X-Tag&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;X-Tag 是微软推出的开源库，支持 Web Components 规范，兼容Web Components。X-Tag 最初由 Mozilla 开发，现在由 Microsoft 的开发人员提供支持，它是一个开源 JavaScript 库，它包装了 W3C 标准 Web Components API 系列，为组件开发提供了一个紧凑、功能丰富的接口。虽然 X-Tag 可以轻松利用所有 Web Components API（自定义元素、Shadow DOM、模板和 HTML 导入），但它只需要自定义元素 API 支持即可运行。在没有原生自定义元素 API 的情况下，X-Tag 使用 Google 的 Polymer 框架所依赖的相同的 polyfill 。它的特点也很明显：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;标准，基于 Web Components API 构建&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高效，3k min/gzip中的强大功能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可插拔，可以和其他库一起使用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;它有两种版本：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;x-tag + polyfills&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Just x-tag no polyfills&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里演示一个 x-tag + polyfills 版本，看看效果：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br/&gt;&amp;lt;html lang=&lt;span&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;head&amp;gt;&lt;br/&gt;  &amp;lt;meta charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;meta http-equiv=&lt;span&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; content=&lt;span&gt;&quot;IE=edge&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;meta name=&lt;span&gt;&quot;viewport&quot;&lt;/span&gt; content=&lt;span&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;  &amp;lt;x-clock&amp;gt;&amp;lt;/x-clock&amp;gt;&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&amp;lt;script src=&lt;span&gt;&quot;../src/x-tag-polyfilled.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;script src=&lt;span&gt;&quot;../src/index.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;/html&amp;gt; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;//index.js&lt;br/&gt;xtag.create(&lt;span&gt;&#x27;x-clock&#x27;&lt;/span&gt;, class extends XTagElement {&lt;br/&gt;  &lt;span&gt;&lt;span&gt;connectedCallback&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;    this.start();&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;&lt;span&gt;start&lt;/span&gt;&lt;/span&gt; (){&lt;br/&gt;    this.update();&lt;br/&gt;    this._interval = setInterval(() =&amp;gt; this.update(), 1000);&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;&lt;span&gt;stop&lt;/span&gt;&lt;/span&gt; (){&lt;br/&gt;    this._interval = clearInterval(this._data.interval);&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;&lt;span&gt;update&lt;/span&gt;&lt;/span&gt; (){&lt;br/&gt;    this.textContent = new Date().toLocaleTimeString();&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;&#x27;tap::event&#x27;&lt;/span&gt; (){&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (this._interval) this.stop();&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt; this.start();&lt;br/&gt;  }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5002632964718273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wrd04via5NVRGrQ0u1kicaNezwxVeLnJic69YlcIe6BAS5BxFmsqhdUomkA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1899&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;LitElement&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;LitElement 是一个简单的基类，用于使用 lit-html 创建快速、轻量级的 Web Components。LitElement 现在是Lit 库 monorepo的一部分。Lit 2 包括 lit-html 2.x 和 LitElement 3.x。LitElement 使用lit-html渲染到元素的Shadow DOM 中，并添加 API 来帮助管理元素属性和特性。LitElement 对属性的变化做出反应。&lt;/p&gt;&lt;p&gt;LitElement 具有以下特点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;简单、现代、安全、小巧且快速&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;允许您使用带有嵌入式 JavaScript 表达式的模板文字在 JavaScript 中编写 HTML 模板&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;lit-html 识别模板的静态和动态部分，因此它可以有效地只更新更改的部分&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;lit-html 不依赖于任何组件模型，它只专注于创建和更新 DOM&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里也演示一个简单的例子，运行下面的 HTML 代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;&lt;br/&gt;&amp;lt;html&amp;gt;&lt;br/&gt;&amp;lt;head&amp;gt;&lt;br/&gt;  &amp;lt;!-- Polyfills only needed &lt;span&gt;for&lt;/span&gt; Firefox and Edge. --&amp;gt;&lt;br/&gt;  &amp;lt;script src=&lt;span&gt;&quot;https://unpkg.com/@webcomponents/webcomponentsjs@latest/webcomponents-loader.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;  &amp;lt;!-- Works only on browsers that support Javascript modules like&lt;br/&gt;  Chrome, Safari, Firefox 60, Edge 17 --&amp;gt;&lt;br/&gt;  &amp;lt;script &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;module&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    import {LitElement, html, css} from &lt;span&gt;&#x27;https://unpkg.com/lit-element/lit-element.js?module&#x27;&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;    class MyElement extends LitElement {&lt;br/&gt;&lt;br/&gt;      static get &lt;span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;          mood: {&lt;span&gt;type&lt;/span&gt;: String}&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;      &lt;br/&gt;      static get &lt;span&gt;&lt;span&gt;styles&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; css`.mood { color: green; }`;&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      &lt;span&gt;&lt;span&gt;render&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; html`Web Components are &amp;lt;span class=&lt;span&gt;&quot;mood&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;${this.mood}&lt;/span&gt;&amp;lt;/span&amp;gt;!`;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    customElements.define(&lt;span&gt;&#x27;my-element&#x27;&lt;/span&gt;, MyElement);&lt;br/&gt;  &amp;lt;/script&amp;gt;&lt;br/&gt;  &lt;br/&gt;  &amp;lt;my-element mood=&lt;span&gt;&quot;great&quot;&lt;/span&gt;&amp;gt;&amp;lt;/my-element&amp;gt;&lt;br/&gt;  &lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&amp;lt;/html&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5002632964718273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wrXjxAN6RDG2dLXuehJbzibcicia9v5KMnicJmCCrR60TNMJElTzl6OBiaj0Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1899&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;direflow&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;direflow 是一个 React组件 + web component +web componen t属性变化重新挂载 React 组件的 web component框架。direflow的响应式其实分为2块：组件内部响应式（通过React自身响应式流程），组件外部响应式（WebComponents属性变化监听重渲染组件）。如果外部属性不会经常变化的话，性能这块没有问题，因为组件内部的响应式完全是走了React自身的响应式。属性外部属性如果会经常变化的话，direflow框架在这块还有一定的优化空间。&lt;/p&gt;&lt;p&gt;direflow 具有以下特点:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;使用 React 的强大功能来创建您的组件构建它&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Direflow 使开始开发变得非常容易！在几分钟内创建您的第一个 Direflow 组件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建丰富且完全独立的微前端&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;构建整个 UI 库并在任何 UI 框架和库中使用它&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;运行下面的命令自己尝试一下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;npm i -g direflow-cli&lt;br/&gt;&lt;br/&gt;direflow create&lt;br/&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; &amp;lt;project-folder&amp;gt;&lt;br/&gt;  &lt;br/&gt;npm install&lt;br/&gt;&lt;br/&gt;npm start&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这完全就是在写 React。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  import React, { useContext } from &lt;span&gt;&#x27;react&#x27;&lt;/span&gt;;&lt;br/&gt;  import PropTypes from &lt;span&gt;&#x27;prop-types&#x27;&lt;/span&gt;;&lt;br/&gt;  import { EventContext, Styled } from &lt;span&gt;&#x27;direflow-component&#x27;&lt;/span&gt;;&lt;br/&gt;  import styles from &lt;span&gt;&#x27;./App.css&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  const App = (props) =&amp;gt; {&lt;br/&gt;    const dispatch = useContext(EventContext);&lt;br/&gt;&lt;br/&gt;    const handleClick = () =&amp;gt; {&lt;br/&gt;      const event = new Event(&lt;span&gt;&#x27;my-event&#x27;&lt;/span&gt;);&lt;br/&gt;      dispatch(event);&lt;br/&gt;    };&lt;br/&gt;&lt;br/&gt;    const renderSampleList = props.sampleList.map((sample) =&amp;gt; (&lt;br/&gt;      &amp;lt;div key={sample} className=&lt;span&gt;&#x27;sample-text&#x27;&lt;/span&gt;&amp;gt;&lt;br/&gt;        → {sample}&lt;br/&gt;      &amp;lt;/div&amp;gt;&lt;br/&gt;    ));&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;      &amp;lt;Styled styles={styles}&amp;gt;&lt;br/&gt;        &amp;lt;div className=&lt;span&gt;&#x27;app&#x27;&lt;/span&gt;&amp;gt;&lt;br/&gt;          &amp;lt;div className=&lt;span&gt;&#x27;top&#x27;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;div className=&lt;span&gt;&#x27;header-image&#x27;&lt;/span&gt; /&amp;gt;&lt;br/&gt;          &amp;lt;/div&amp;gt;&lt;br/&gt;          &amp;lt;div className=&lt;span&gt;&#x27;bottom&#x27;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;div className=&lt;span&gt;&#x27;header-title&#x27;&lt;/span&gt;&amp;gt;{props.componentTitle}&amp;lt;/div&amp;gt;&lt;br/&gt;            &amp;lt;div&amp;gt;{renderSampleList}&amp;lt;/div&amp;gt;&lt;br/&gt;            &amp;lt;button className=&lt;span&gt;&#x27;button&#x27;&lt;/span&gt; onClick={handleClick}&amp;gt;&lt;br/&gt;              Click me!&lt;br/&gt;            &amp;lt;/button&amp;gt;&lt;br/&gt;          &amp;lt;/div&amp;gt;&lt;br/&gt;        &amp;lt;/div&amp;gt;&lt;br/&gt;      &amp;lt;/Styled&amp;gt;&lt;br/&gt;    );&lt;br/&gt;  };&lt;br/&gt;&lt;br/&gt;  App.defaultProps = {&lt;br/&gt;    componentTitle: &lt;span&gt;&#x27;Test Direflow&#x27;&lt;/span&gt;,&lt;br/&gt;    sampleList: [&lt;br/&gt;      &lt;span&gt;&#x27;Create with React&#x27;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&#x27;Build as Web Component&#x27;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&#x27;Use it anywhere!&#x27;&lt;/span&gt;,&lt;br/&gt;    ],&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  App.propTypes = {&lt;br/&gt;    componentTitle: PropTypes.string,&lt;br/&gt;    sampleList: PropTypes.array,&lt;br/&gt;  };&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;export&lt;/span&gt; default App;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5002632964718273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lCQLg02gtibvwiciboTf2Aq7gtibGLPcI8wrCGnr50E2uDTv4II06ZHvUpJ0qua3ttDpicJuZPRzH4HaYX7umlQ18iaQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1899&quot;/&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;尽管 Web Components 可能还没有全面的进入研发者的视野，现在还备受争议，但是它已经被很多大厂已经直接或者间接将它用于实践，并且在市场上也出现了很多 Web Components 库，可以轻松的使用和构建 Web Components，本文也列举了八个 Web Components 的前端框架：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Stencil：是一个用于构建可重用、可扩展的设计系统的工具链。生成可在每个浏览器中运行的小型、极快且 100% 基于标准的 Web Components。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Omi：是 Web Components + JSX/TSX 融合为一个框架，小巧的尺寸和高性能，融合和 React 和 Web Components 各自的优势。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Slim.js：是一个开源的轻量级 Web Components 库，它为组件提供数据绑定和扩展能力，使用 es6 原生类继承。专注于帮助开发者更好的编写原生web组件，而不依赖于其他框架，但是也提供了良好的拓展性，开发者可以自由拓展。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Polymer ：是 Google 推出的 Web Components 库，支持数据的单向和双向绑定，兼容性较好，跨浏览器性能也较好；提供了一组用于创建 custom elements 的功能。这些功能旨在使 custom elements 像标准 DOM 元素一样工作更容易和更快。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hybrids：是一个 JavaScript UI 框架，用于创建功能齐全的 Web 应用程序、组件库或具有独特的混合声明性和功能性架构的单个 Web Components。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;X-Tag：是微软推出的开源库，支持 Web Components 规范，兼容Web Components API。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;LitElement：是一个简单的基类，用于使用 lit-html 创建快速、轻量级的 Web Components。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;direflow：是一个 React组件 + web component +web componen t属性变化重新挂载 React 组件的 web component框架。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这些框架都有自己的特性，也各具自己的优缺点，在实战了中具体需要用哪一个 Web Components 前端框架完全取决于你自己。好啦，本文的内容到此结束了。&lt;/p&gt;&lt;section&gt;最后，我希望从这个 Web Components 系列教程中你可以学到了很多东西.&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section label=&quot;Copyright © 2016 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownPayStyle(&#x27;shifu_t_042&#x27;)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;Node 社群&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89226&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我组建了一个氛围特别好的 Node.js 社群，里面有很多 Node.js小伙伴，如果你对Node.js学习感兴趣的话（后续有计划也可以），我们可以一起进行Node.js相关的交流、学习、共建。下方加 考拉 好友回复「Node」即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwsF7OKB4iaaXAzQPbNstk2LybA0Zz5I1hiaiazE9W7WH2Ojt2dibDODWMVUmHqgfXCefVwt7z5ibNMWLvg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;578.2649006622516&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;700.2119205298013&quot; data-fileid=&quot;100016913&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2093425605536332&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwvFQgO67XibvUG5S2UMXwCghOuJvE8BFRzUXnCAfWXkU1qHld6Ly9xiarib3siaWicJWJ0U3lI8kSgD38w/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt; “分享、点赞&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;在看” 支持一波👍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>