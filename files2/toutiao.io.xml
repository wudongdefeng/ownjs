<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e2437de811620049013bfb0665bb6fea</guid>
<title>推荐 4 个开源工具</title>
<link>https://toutiao.io/k/g30nqhu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;Hi，艾瑞巴蒂，晚上好！今天推荐 4 个登上 GitHub 热搜的开源项目，它们分别是：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;1. 炫酷的 UI 工具：glslViewer&lt;/section&gt;&lt;p&gt;2. Textual&lt;/p&gt;&lt;p&gt;3. ToolJet：开源的低代码开发框架&lt;/p&gt;&lt;p&gt;4.  Linux 命令大全搜索工具&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;01&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;炫酷的 UI 工具：glslViewer&lt;/span&gt;&lt;/p&gt;&lt;p&gt;glslViewer 是由 @patriciogonzalezvivo 发布的，无需 UI 就能够显示 2D/3D GLSL 着色器，目前在 Github 上已经获得了 3.6k 的 stars。&lt;/p&gt;&lt;p&gt;可以使用 Python 或者任何可以和 glslViewer back/forth communication 的工具来定制喜欢的 UI。接下来，让我们一起欣赏炫酷画面~~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.85875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ePw3ZeGRruw9icwlLVIghYgr2ia8bZLP3IaF1PDquP4c4k3IHpbgEkbN8epYUhSqYTYRLm1bE8yYNnTZckND3ghw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/patriciogonzalezvivo/glslViewer&lt;/p&gt;&lt;h1&gt;02&lt;/h1&gt;&lt;p&gt;&lt;span&gt;Textual&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Textual 是由 @Textualize 开源基于 Python 框架搭建，可以创建能够在终端运行的交互式应用程序，作者的设计灵感来源于现代的 Web 开发，目前在 Github 上已经获得了 15.2k 的 stars。&lt;/p&gt;&lt;p&gt;Textual  使用 Rich 来渲染富文本，所以 Rich 可以渲染的任何东西都可以在 Textual 中使用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruw9icwlLVIghYgr2ia8bZLP3IBxx8icd0Sd6UE3ianVRBOhJOFDpttQcXeq2d4TqahHCBJJKhrpSFu9nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1879629629629629&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruw9icwlLVIghYgr2ia8bZLP3IsriaxiaEB2CKwYXUIT7t9CyuJc2LC47G94PHl3TwytgONSCwclTpAopQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/Textualize/textual&lt;/p&gt;&lt;h1&gt;03&lt;/h1&gt;&lt;p&gt;&lt;span&gt;ToolJet：开源的低代码开发框架&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ToolJet 是一个开源的低代码开发框架，拥有丰富的可视化工具，仅需要几步就可以快速构建和部署企业级工具，目前在 Github 已经获得了 14.5k 的 stars。&lt;/p&gt;&lt;p&gt;ToolJet 支持连接多种数据源，包括数据库、云平台、第三方服务接口等 40 多种数据源。在应用层可以发布到 APP、制作数据面板、表单等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5488888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruw9icwlLVIghYgr2ia8bZLP3IOa1Yz6lDZOrLLN9aVeyFicafqqujHmgbdbWmibpviaMzbNG9tQsTwzr8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5731481481481482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruw9icwlLVIghYgr2ia8bZLP3InibyS8fu4ZmeWVXGsx1cuuNLKYT6x6ez3zV4BjYGZjxk1hwNJGKRa2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5981481481481481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruw9icwlLVIghYgr2ia8bZLP3IKib0Exr4PZicK7Osgia1DPxJNWmXB4iaia87xIKJ62IeoMiadAr5PZZdsuZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5981481481481481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruw9icwlLVIghYgr2ia8bZLP3I6Ly4xecOPqwDblHKT5yK2R2BichG11hULAcpsVwSuR5pJBYM8cgHMzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/ToolJet/ToolJet&lt;/p&gt;&lt;h1&gt;04&lt;/h1&gt;&lt;p&gt;&lt;span&gt;Linux 命令大全搜索工具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Linux Command 是 Linux 命令大全搜索工具，该工具当前搜集了 570 多个 Linux 命令，主要内容包含：Linux 基础命令、Linux 学习资源整理，例如社区网站、相关知识、软件工具、开源镜像站点等，目前在 Github 已经获得 20.8k 的 stars。&lt;/p&gt;&lt;p&gt;该工具支持移动端和 Web 搜索，默认从 A-Z 排序，每条命令都会有注释说明，带有语法、参数及命令示例~逛姐觉得非常贴心，墙裂推荐！！！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35600425079702447&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruw9icwlLVIghYgr2ia8bZLP3I3QyHhWaJw8WvcBMWfjViaibVJLsUJE2egib8qFfECBzAfovjTupDHU4Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;941&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://wangchujiang.com/linux-command/&lt;/p&gt;&lt;p&gt;&lt;span&gt;历史盘点&lt;/span&gt;&lt;/p&gt;&lt;section&gt;逛逛 GitHub 每天推荐一个好玩有趣的开源项目。历史推荐的开源项目已经收录到 GitHub 项目，欢迎 Star：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;https:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8091503267973856&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruzicgHPfCeAsrkT2JZwiaOF05zRiaXr2dUukXKGk8CJwfrXALKJ5l0fLpV2abibCYKb7d8B7vNp2u3iccg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1530&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;1. &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498662&amp;amp;idx=1&amp;amp;sn=0087c4f3b79ba3420e917e9b42d45eda&amp;amp;chksm=f9a2286fced5a1794eb9a73d0be7c2e16eaceabf3a0420647c40cb4202bd116d9a15dd57c008&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;GitHub 上有什么好玩的项目？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/em&gt;&lt;span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247507541&amp;amp;idx=1&amp;amp;sn=79edebda20ac94221aa641090fc9878e&amp;amp;chksm=f9a20d9cced5848a5ba699a819f52907f537e557c10c7bb24bf87b2e0212feecfb06419b2feb&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;推荐一款高颜值网易云播放器&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;推荐一款高颜值网易云播放器&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;3. &lt;/span&gt;&lt;/em&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247500031&amp;amp;idx=1&amp;amp;sn=b4349fc85264c255bf9a22e1f25b035a&amp;amp;chksm=f9a21336ced59a20518444a3e2bddb584f6d02266e831546ee5c00935d01d5bd61ed86ab606f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;基于 Spring Boot 的百度云高仿项目&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;4. &lt;/span&gt;&lt;/em&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498464&amp;amp;idx=1&amp;amp;sn=4f85123d6ca67578ca7bad8f7dc71453&amp;amp;chksm=f9a22929ced5a03ffded2c41fd257d3eb96be02195de3ca66a083177bf5f73e2f418728f7f06&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;盘点百度 4 个牛逼哄哄的开源项目&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498464&amp;amp;idx=1&amp;amp;sn=4f85123d6ca67578ca7bad8f7dc71453&amp;amp;chksm=f9a22929ced5a03ffded2c41fd257d3eb96be02195de3ca66a083177bf5f73e2f418728f7f06&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;172&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;172&quot; data-ratio=&quot;1.005449591280654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxW7LMX2Iz5DfjRIbFTS7UROhxibBmicicT0HpjIh1yniaJJibSnLFuicMHRx5NEdiaOh2OOACfr6MvR38ibQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;734&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2638db18b14d1c0f423ceab33671904d</guid>
<title>认识区块链，认知区块链——Web3</title>
<link>https://toutiao.io/k/78f76n5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;MavenTalk&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;mavenTalk&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;创业者，关注人与自然的和谐成长.&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f4c63ce98ede1e65dc758eb187e32beb</guid>
<title>无 Sidecar 又成为新的趋势了？</title>
<link>https://toutiao.io/k/bg297mu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Istio的实验性环境网格（Ambient Mesh）号称能大大降低运营复杂性，但Linkerd的拥护者们则认为Sidecar本身并不是问题的关键。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一种新的Istio服务网格架构抛弃了Sidecar代理，凭借显著降低运营复杂性的承诺引得企业IT专业人士纷纷侧目。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;但竞争对手Linkerd项目的支持者则认为，导致复杂性难题的核心并不是Sidecar架构——而是Envoy代理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;分布式应用程序环境中的服务网格网络方法最早出现在2016年，源自专为虚拟机环境设计的Linkerd 1.0版本。由谷歌、IBM和Lyft支持的Istio则于2017年发布，主要面向的是Kubernetes容器编排环境。Linkerd 2.0紧随其后发布，也开始重点关注Kubernetes。从那时起，容器编排器的日益普及扩大了服务网格的应用范围，着力将应用层和开发者从复杂的微服务网络负担当中解放出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直到今年，这些服务网格的基本架构设计都是相同的——两者都使用一种称为Sidecar代理的特殊容器来将网络管理从应用程序当中剥离出来。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这些Sidecar代理与应用程序密切相关，作为各个Kubernetes Pod的组成部分。与传统网络相比，这种紧密性也让我们能对应用程序路由和监控进行更细粒度的控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;但随着服务网格在大规模环境中得到广泛应用，Sidecar代理的局限性也凸显了出来。&lt;/span&gt;&lt;span&gt;在对性能高度敏感的环境中，将容器绑定到每个应用程序可能会产生难以承受的开销。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;因为期间需要重新启动所有Sidecar，这会使服务网格的升级困难重重，可能严重影响应用程序的可用性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;应用程序容器也可能与Sidecar容器不同步，这会产生更多潜在的可靠性问题。&lt;/span&gt;&lt;span&gt;在应用程序可能需要服务网格的某些功能的环境中，管理庞大的Sidecar可能产生难以承受的负担。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;以双向TLS认证（简称mTLS）为例，这些功能发生在开放系统互连模型的较低层——特别是L4层——但并不需要L7层上的完整应用级精细过滤。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Istio Ambient Mesh项目目前处于实验性阶段，由Google和Solo.io的工程师在今年9月份开源。其中包含了一个新的架构，维护人员称它通过服务网格Sidecar回避了这些问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Ambient Mesh不会将服务网格的所有功能捆绑到随每个应用程序一起部署的Sidecar中，而是将代理分解为一组两个共享资源，称为DaemonSet，分别部署在每个Kubernetes集群上。IT管理员可以使用相同类型的现有Istio配置文件和Kubernetes应用程序文件，来指示应用程序是否需要L4层或L7层路由功能。&lt;/span&gt;&lt;span&gt;Ambient Mesh中的整合代理将据此执行流量路由，而不需要为每个Pod配备一个Sidecar。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vHicVZXtcAzBfgThmkl68angq1vwxZdMyfJY7soV7ibV3hIWPibIKICAWLqgIPxZ339l7kKzns084QZKZtibl8Msgw/640?wx_fmt=jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这种新方法才刚刚起步，但已经有一些Istio用户表示很想一探究竟。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;“这太棒了，我们将尽快采用，”Constant Contact公司首席软件工程师David Ortiz在本周的一次在线采访中说。“&lt;/span&gt;&lt;span&gt;它大大简化了Istio的操作，特别是在升级方面。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;一位KubeCon与会者表示，他计划在Ambient Mesh成熟时对其进行仔细评估，并表达了浓厚的兴趣。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;有线电视提供商Comcast云服务执行总监Greg Otto本周在接受采访时说：“Sidecar确实发挥过重要的作用，但我们也很希望能以不同的思路服务和扩展L7层和L4层。在边缘场景中，我们非常关注L7层[过滤]，但并不想因此影响到整个[网络]，单独交给L4层[路由]明显更适合。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Otto说，虽然Sidecar代理出于安全目的提供了最严格的服务分离，但Istio的Envoy代理中的大多数关键常见漏洞披露（CVE）都源自L7层。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;“在不需要[L7层过滤]的地方，最好能先把它放一放，”他说。“这样即使存在CVE，我们的攻击面也会小得多。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Linkerd主动对线：问题不在于Sidecar，而在于Envoy&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;根据Linkerd缔造者兼Buoyant.io首席执行官William Morgan的说法，还有另一种方法可以减少L7层的关键漏洞以及与Sidecar相关的大部分资源开销：直接弃用Envoy。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;“归根结底，Sidecar实际上非常简单——它们在操作上非常简单，不难理解，而且故障和安全域非常清楚，”Morgan说。“&lt;/span&gt;&lt;span&gt;问题不在于Sidecar——而是由于Enovy的存在，我们不得不面对一个巨大、多用途、资源匮乏且难以操作的代理。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;过去，对Envoy的支持是Istio相对于Linkerd的一个独特卖点，这也使其成为广受欢迎的云原生计算基金会毕业项目。但由Morgan领导的Linkerd维护者则坚持使用他们自己的代理，该代理专为服务网格而设计，代码库规模和资源需求都比Envoy更小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，一位企业Linkerd用户表示，他认为问题的关键不是打造出无Sidecar服务网格，毕竟Sidecar本身跟简单和透明并不矛盾。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;丹麦数字金融服务公司Lunar首席平台架构师Kasper Nissen本周接受采访时表示：“从我们的角度来看，Sidecar既简单又易于理解——它与我们使用的其他容器技术没什么区别。一年半前，我们默认使用全服务网格，相应的资源消耗可能也就增加了10%。跟我们获得的mTLS和详尽可见性效果相比，这并不算多。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Nissen说，他也遇到过Sidecar代理和Lunar使用的Humio日志分析应用程序间不同步的问题。如果Sidecar重新启动，该服务没有时间转移其本地数据，于是Nissen团队只能“设置超时、听天由命”，坐视部分数据因此丢失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;然而，Morgan和Nissen坚持认为，&lt;/span&gt;&lt;span&gt;Sidecar同步问题的根源在于Kubernetes网络的一个更深层次的问题，这个问题在开源社区三年来一直没有解决。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;默认情况下，没有办法确保各种容器（无论是由Linkerd等服务使用的短期init容器还是常规应用程序容器）按特定顺序启动和停止。2019年曾有一项Kubernetes增强提案尝试解决这个问题，但被拒绝了；社区中的讨论仍在继续，但情况并没有改变。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;“如今一切服务都在作为Sidecare进行交付，所以这个问题应该由Kubernetes方面负责解决。”Nissen说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Morgan也认为，在Kubernetes中解决这个问题才是根治Sidecar同步性挑战的最佳方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;“云原生世界向来以探索新功能（而非修复旧设计）为先，所以大家对这类提议的兴趣相对不大。&lt;/span&gt;&lt;span&gt;但Sidecar将继续成为服务网格的未来&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，”Morgan说。“我们当然知道Sidecar有缺陷，可正确答案应该是最终通过Kubernetes的调整来解决，而不是大幅改变架构、向基础设施操作中引入更复杂的机制。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3d23961e32d2c1c3efcc39db5e4a0762</guid>
<title>笔记｜Java 性能优化实践（第 9 章）</title>
<link>https://toutiao.io/k/1w1dwjz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h1&gt;9.JVM 上的代码执行&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;Java 虚拟机规范描述了符合规范的Java实现需要如何执行代码&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;9.1 字节码解释概述&lt;/h2&gt;&lt;p&gt;JVM以栈式机器的方式运行；&lt;/p&gt;&lt;p&gt;JVM提供的三个主要存储区&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• &lt;strong&gt;求值栈&lt;/strong&gt; 属于特定方法的本地&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 用于临时存储结果的局部变量（也属于方法本地）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• &lt;strong&gt;对象堆&lt;/strong&gt; 在方法和线程间共享&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;栈式计算的举例&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;计算 &lt;code&gt;if x &amp;lt; 3 + 1&lt;/code&gt;的过程:&lt;/p&gt;&lt;p&gt;初始状态：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8515901060070671&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/399sxLagOtibRY7ZYnzSWMW6TRmLFRd0eFypl4mQkBichXmjoZ81ico7reAk7GG4748iaPAUicWanxwwr8tgk2YtIAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;初始解释状态&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;计算右侧子树，3进栈&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8515901060070671&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/399sxLagOtibRY7ZYnzSWMW6TRmLFRd0ersvWHUzTtQrB5PwiaNljW1icLWIbnnYib6hVqhW3viaNx91qNCsibMFwR9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;子树求值&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;1&lt;/code&gt;继续进栈&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8515901060070671&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/399sxLagOtibRY7ZYnzSWMW6TRmLFRd0eXDcHatQffkf4fsqkiancpK1z4lLVKv2Ctp4TAGNmUqxkrNTj4UicAWgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;子树求值&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;对&lt;strong&gt;栈顶&lt;/strong&gt;的两个值进行计算&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7544169611307421&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/399sxLagOtibRY7ZYnzSWMW6TRmLFRd0eiaqSscGlY8KeCgUNLwcojEdhRZbfCjNghZ0gIm9b4hTrxn8Vlk010Bg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;子树求值&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;得到的&lt;code&gt;4&lt;/code&gt;进栈，之后进行下一步&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7491166077738516&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/399sxLagOtibRY7ZYnzSWMW6TRmLFRd0eHNQIYhN6sXw2KcnomOuUpQS789jMn58c8KS143ZJZb4qHD0TP0l4eQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;子树求值&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;拐言： 虽然这个图其实和整体这一章没啥关系，但墙裂建议细嚼慢用，理解这部分对一些内容，比如力扣上的一些表达式求值，括号匹配之类的，大有精进&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;9.1.1 JVM字节码&lt;/h3&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• 字节码: 在JVM中，每一个栈式机器操作码（opcode）用一字节表示，称为字节码（bytecode）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 范围 0-255&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 带类型信息的，如&lt;code&gt;iadd&lt;/code&gt;和&lt;code&gt;dadd&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 很多以&quot;家族&quot;形式出现，n条用于基本类型，1条用于对象引用&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 选择大端（&lt;code&gt;big-endian&lt;/code&gt;）方式，高位优先&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 操作码有简洁形式，允许省略参数，如&lt;code&gt;load&lt;/code&gt;和&lt;code&gt;aload_0&lt;/code&gt;,后者为将当前对象放到栈顶，&lt;strong&gt;少了一个参数&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&quot;简洁形式和具体类型指令增加了操作码数量&quot;&lt;/p&gt;&lt;p&gt;主要操作码类别：&lt;/p&gt;&lt;h4&gt;加载和保存&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;英语为原版内容&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;table class=&quot;preview-table&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;操作码家族名&lt;/td&gt;&lt;td&gt;参数&lt;/td&gt;&lt;td&gt;描述&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;load&lt;/td&gt;&lt;td&gt;(i1)&lt;/td&gt;&lt;td&gt;Loads value from local variable i1 onto the stack&lt;br/&gt;将局部变量&lt;code&gt;i1&lt;/code&gt;加载到栈顶&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;store&lt;/td&gt;&lt;td&gt;(i1)&lt;/td&gt;&lt;td&gt;Stores top of stack into local variable i1&lt;br/&gt;将栈顶的值保存到局部变量&lt;code&gt;i1&lt;/code&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ldc&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Loads value from CP#c1 onto the stack&lt;br/&gt;将常量池中的&lt;code&gt;c1&lt;/code&gt;的值加载到栈顶&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;const&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Loads simple constant value onto the stack&lt;br/&gt;将简单常量值加载到栈上&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pop&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Discards value on top of stack&lt;br/&gt;抛弃栈顶的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;dup&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Duplicates value on top of stack&lt;br/&gt;复制栈顶的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;getfield&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Loads value from field indicated by CP#c1 in object on top of stack onto the stack&lt;br/&gt;将位于栈顶的对象中的以常量池c1的位置指示的字段加载到栈上&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;putfield&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Stores value from top of stack into field indicated by CP#c1&lt;br/&gt;将栈顶的值保存到以常量池c1位置指示的字段 中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;getstatic&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Loads value from static field indicated by CP#c1 onto the stack&lt;br/&gt;将以常量池c1位置指示的静态字段中的值加载到栈上&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;putstatic&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Stores value from top of stack into static field indicated by CP#c1&lt;br/&gt;将栈顶的值保存到以常量池c1位置指示的静态字段中&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;ldc 与 const的区别&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;算术操作码&lt;/h4&gt;&lt;section&gt;&lt;table class=&quot;preview-table&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;操作码家族名&lt;/td&gt;&lt;td&gt;描述&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;add&lt;/td&gt;&lt;td&gt;Adds two values from top of stack&lt;br/&gt;栈顶两个值相加&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sub&lt;/td&gt;&lt;td&gt;Subtracts two values from top of stack&lt;br/&gt;栈顶两个值相减&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;div&lt;/td&gt;&lt;td&gt;Divides two values from top of stack&lt;br/&gt;栈顶两个值相除&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mul&lt;/td&gt;&lt;td&gt;Multiplies two values from top of stack&lt;br/&gt;栈顶两个值相乘&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;(cast)&lt;/td&gt;&lt;td&gt;Casts value at top of stack to a different primitive type&lt;br/&gt;将栈顶值强制转为一个不同的基本类型&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;neg&lt;/td&gt;&lt;td&gt;Negates value at top of stack&lt;br/&gt;对栈顶值求反&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;rem&lt;/td&gt;&lt;td&gt;Computes remainder (integer division) of top two values on stack&lt;br/&gt;栈顶两个值取模&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h4&gt;流程控制&lt;/h4&gt;&lt;section&gt;&lt;table class=&quot;preview-table&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;操作码家族名&lt;/td&gt;&lt;td&gt;参数&lt;/td&gt;&lt;td&gt;描述&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;if&lt;/td&gt;&lt;td&gt;(i1)&lt;/td&gt;&lt;td&gt;Branch to the location indicated by the&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;argument, if the condition is true&lt;br/&gt;如果条件为true，跳转到i1&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;goto&lt;/td&gt;&lt;td&gt;i1&lt;/td&gt;&lt;td&gt;Unconditional branch to the supplied offset&lt;br/&gt;跳转到i1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;tableswitch&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Out of scope&lt;br/&gt;本书不讨论&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lookupswitch&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Out of scope&lt;br/&gt;本书不讨论&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h4&gt;方法调用&lt;/h4&gt;&lt;section&gt;&lt;table class=&quot;preview-table&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;操作码家族名&lt;/td&gt;&lt;td&gt;参数&lt;/td&gt;&lt;td&gt;描述&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;invokevirtual&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Invokes the method found at CP#c1 via virtual dispatch&lt;br/&gt;通过虚拟分派 （virtual dispatch) 调用在常量池c1找到的方法&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;invokespecial&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Invokes the method found at CP#c1 via “special” (i.e., exact) dispatch&lt;br/&gt;通过特殊分配（or 精确分派）调用在常量池c1位置找到的方法&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;invokeinterface&lt;/td&gt;&lt;td&gt;c1, count, 0&lt;/td&gt;&lt;td&gt;Invokes the interface method found at CP#c1 using interface offset lookup&lt;br/&gt;使用接口位移查找，调用在常量池C1位置找到的方法&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;invokestatic&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Invokes the static method found at CP#c1&lt;br/&gt;调用在常量池c1位置的静态方法&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;invokedynamic&lt;/td&gt;&lt;td&gt;c1, 0, 0&lt;/td&gt;&lt;td&gt;Dynamically looks up which method to invoke and executes it&lt;br/&gt;动态查找要调用的方法并执行该方法&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• &lt;strong&gt;调用点&lt;/strong&gt; 一个方法被另一个方法调用，这个位置为称为调用点，被调用的对象称为接收者对象（receiver object),其&lt;strong&gt;运行时类型&lt;/strong&gt;被称为接收者类型（receiver type)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 对静态方法的调用总为&lt;code&gt;invokestatic&lt;/code&gt;，并且没有接收对象&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 对象方法调用会转成三种可能的字节码(invokevirtual,invokespecial,invokeinterface)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 实例方法 invokevirtual,静态类型是接口类型 invokeinterface,private或父类调用 invokespecial&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• invokedynamic ----lamda 表达式，或在其他JVM上的运行的非JAVA语言&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;hljs code__pre&quot;&gt;&lt;code class=&quot;prettyprint language-java prettyprinted&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;&lt;span class=&quot;typ&quot;&gt;LambdaExample&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;HELLO&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;str&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;&lt;span class=&quot;pln&quot;&gt;main&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; args&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;throws&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;typ&quot;&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;typ&quot;&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;&lt;span class=&quot;typ&quot;&gt;Thread&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        t&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        t&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;操作码如下：&lt;/p&gt;&lt;pre class=&quot;hljs code__pre&quot;&gt;&lt;code class=&quot;prettyprint language-java prettyprinted&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;&lt;span class=&quot;pln&quot;&gt;main&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[])&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;throws&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; invokedynamic &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; astore_1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// class java/lang/Thread &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; dup&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; aload_1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; invokespecial &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// Method java/lang/Thread.&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                              &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;//          &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/Runnable;)V &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; astore_2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; aload_2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; invokevirtual &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// Method java/lang/Thread.start:()V&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;19&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; aload_2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; invokevirtual &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// Method java/lang/Thread.join:()V&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;平台操作码&lt;/h4&gt;&lt;section&gt;&lt;table class=&quot;preview-table&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;操作码家族名&lt;/td&gt;&lt;td&gt;参数&lt;/td&gt;&lt;td&gt;描述&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;new&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Allocates space for an object of type found at CP#c1&lt;br/&gt;为在常量池c1位置的对象所找到的类型分配空间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;newarray&lt;/td&gt;&lt;td&gt;prim&lt;/td&gt;&lt;td&gt;Allocates space for a primitive array of type prim&lt;br/&gt;为prim类型的基本类型数组分配空间,&lt;strong&gt;长度为栈顶&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;anewarray&lt;/td&gt;&lt;td&gt;c1&lt;/td&gt;&lt;td&gt;Allocates space for an object array of type found at CP#c1&lt;br/&gt;为在常量池c1位置找到的类型的对象数组分配空间 &lt;strong&gt;长度为栈顶&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arraylength&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Replaces array on top of stack with its length&lt;br/&gt;获得栈顶的数组的长度，并将其置到栈顶&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;monitorenter&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Locks monitor of object on top of stack&lt;br/&gt;&lt;strong&gt;锁定栈顶对象的管程&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;monitorexit&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Unlocks monitor of object on top of stack&lt;br/&gt;&lt;strong&gt;解锁顶对象的管程&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;当一个操作码被分派时，JVM一定是在执行解释器，而不是用户代码，这时堆是一个稳定态，因此是一个可以暂停的安全点&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;9.2 简单的解释器&lt;/h2&gt;&lt;p&gt;文中线了一个简单的解释器的代码模拟:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;拐言：&lt;/p&gt;&lt;p&gt;这段代码非常值得一读, 中间有几个有意思的点已经加注释。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre class=&quot;hljs code__pre&quot;&gt;&lt;code class=&quot;prettyprint language-java prettyprinted&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;/**&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;com&quot;&gt; * instr 是要执行的内存块&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;com&quot;&gt; * 这个内存块显然是一块连续的数据，里面即有变量位置，也有字节码&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;com&quot;&gt; **/&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;EvalValue&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;&lt;span class=&quot;pln&quot;&gt;execMethod&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; instr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;instr &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; instr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;length &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;typ&quot;&gt;EvaluationStack&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;eval&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;&lt;span class=&quot;typ&quot;&gt;EvaluationStack&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;/**&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;com&quot;&gt;         * current 就是当前执行的位置,可以理解成指令偏移&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;com&quot;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;current&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        LOOP&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;while&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 读到一个值，即当前的字节码&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; instr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++];&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 通过查表的方式得到字节码值&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 这里table 保存了所有的字节码集合&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// b &amp;amp; 0xff 是因为字节码为0-255&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;typ&quot;&gt;Opcode&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;op&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; table&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;b &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;0xff&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;op &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;str&quot;&gt;&quot;Unrecognized opcode byte: &quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;b &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;0xff&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 要知道这个字节码有几个参数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;num&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; op&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;numParams&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;switch&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; IADD&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    eval&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;iadd&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ICONST_0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    eval&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;iconst&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; IRETURN&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 将栈顶值返回 &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; eval&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ISTORE&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 将栈顶值保存到当前值&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 注意这里因为current ++ 是下一个位置&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 因为store有两个参数 &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    istore&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;instr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++]);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ISUB&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    eval&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;isub&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// Dummy implementation&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 这下面的指令都有多个参数 &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ALOAD&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ALOAD_0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ASTORE&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; GETSTATIC&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; INVOKEVIRTUAL&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; LDC&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;str&quot;&gt;&quot;Executing &quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; op &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;str&quot;&gt;&quot; with param bytes: &quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 在内存中接着步进num步，把相应的参数取出来作为指令的参数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; current&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; current &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; num&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;instr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;str&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 执行指针步进num&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 因为相应的参数已经读取完了&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// 所以下一个字节（内存中的数据）还是一个字节码（可执行的指令）&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    current &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; num&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; RETURN&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;default&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;str&quot;&gt;&quot;Saw &quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; op &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;str&quot;&gt;&quot; : can&#x27;t happen. Exit.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;9.1.3 HotSpot的一些细节&lt;/h3&gt;&lt;h4&gt;关于final&lt;/h4&gt;&lt;p&gt;因为final不能被覆盖，所以final在译成字节码时是可以为&lt;code&gt;invokespacial&lt;/code&gt;的，但这会违反&lt;strong&gt;里氏替换原则&lt;/strong&gt;，因此就当为&lt;code&gt;invokevirtual&lt;/code&gt;,&lt;strong&gt;而HotSpot专门为final配置了一个字节码&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;解释：&lt;/p&gt;&lt;p&gt;先有：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;将一个声明为final的方法改为不用final修饰，不会破坏与现有二进制文件的兼容性&lt;/p&gt;&lt;p&gt;---- Java语言规范 13.4.7节&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;比如有代码&lt;/p&gt;&lt;p&gt;代码A的定义&lt;/p&gt;&lt;pre class=&quot;hljs code__pre&quot;&gt;&lt;code class=&quot;prettyprint language-java prettyprinted&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;final&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;&lt;span class=&quot;pln&quot;&gt;fMethod&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;com&quot;&gt;// ... do something&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用方的定义&lt;/p&gt;&lt;pre class=&quot;hljs code__pre&quot;&gt;&lt;code class=&quot;prettyprint language-java prettyprinted&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;&lt;span class=&quot;typ&quot;&gt;CallA&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;&lt;span class=&quot;pln&quot;&gt;otherMethod&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A obj&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;        obj&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;fMethod&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是如果A的final去掉了，同时有b继承a，并重写了fMethod，这里时如果传入&lt;code&gt;otherMethod&lt;/code&gt;是一个b的对象，这时调用就会出错。&lt;/p&gt;&lt;p&gt;同时，因为根据&lt;code&gt;将一个声明为final的方法改为不用final修饰，不会破坏与现有二进制文件的兼容性&lt;/code&gt;,也就是说，A改变后，不会影响CallA，所以，这里不能用invokespecial.&lt;/p&gt;&lt;h4&gt;关于终结机制（finalization)&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;如果一个对象有终结机制，则必须到终结子系统中的注册，并且该注册必须在超类的构造器调用完后立刻执行。&lt;/p&gt;&lt;p&gt;Java语言规范&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;9.2 AOT编译和JIT编译&lt;/h2&gt;&lt;h3&gt;9.2.1 AOT编译（Ahead of Time )&lt;/h3&gt;&lt;p&gt;即静态编译，比如C或C++&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• 只有一次编译&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 只有一次机会（即编译）来进行潜在优化&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;9.2.2 JIT编译&lt;/h3&gt;&lt;p&gt;JIT（Just-In-Time）编译其实是一种通用的技术，即程序（大多数为中间格式，比如.class)在&lt;strong&gt;运行时&lt;/strong&gt;被转化为高度优化的机器代码&lt;/p&gt;&lt;p&gt;JIT会在运行时收集程序信息，进行&lt;strong&gt;性能剖析(profile)&lt;/strong&gt;,用以确定程序哪部分使用频率最高且优化收益最大，因此也被称为剖析制导优化。（profile-guided optimization,PGO)&lt;/p&gt;&lt;p&gt;因为JIT与应用程序同时运行，因此JIT的执行成本要和预期收入保持平衡。&lt;/p&gt;&lt;p&gt;剖析是运行时的结果 ，同时，HotSpot不会保存任何剖析，会在下次运行时重新执行。&lt;/p&gt;&lt;h3&gt;9.2.3 AOT和JIT的比较&lt;/h3&gt;&lt;p&gt;AOT&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• 相对简单&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 与汇编代码对应，可以获利机器的直接性能特性&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 放弃了运行时的优化可能&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 针对处理器优化，可以满足极端性能要求&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 不易扩展&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;JIT&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• 可以针对处理器优化，不必重新编译&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 部分商用JVM也有AOT&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• JAVA9开始，已经提供AOT编译功能&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;9.3 HotSpot JIT基础&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;这时B应该已经达到编译要求？ 感觉这段晕乎&lt;/p&gt;&lt;p&gt;原文: &lt;code&gt;OSR is used to help the case where a method is not called frequently enough to be compiled but contains a loop that would be eligible for compilation if the loop body was a method in its own right&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;9.3.1 Klass字，虚函数表和指针变换&lt;/h3&gt;&lt;p&gt;单个方法的简单编译如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5530035335689046&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/399sxLagOtibRY7ZYnzSWMW6TRmLFRd0e3oZib0PZyIZmNSia5iboFiadeeIKNzSKiaXOleDtzLS2yiaYLgcaEfp2HoJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;单个方法的简单编译&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;即当一个方法需要优化时，会通过JIT编译器优化后保存到代码缓存中，此时相关Klass中虚函数表(vtable)的条目会更新，以指向新的代码。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;vtable的这种更新被称为指针变换(pointer swizzling)&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;9.3.2 JIT编译日志&lt;/h3&gt;&lt;p&gt;-XX:PrintCompilation 打开编译日志&lt;/p&gt;&lt;p&gt;ex&lt;/p&gt;&lt;pre class=&quot;hljs code__pre&quot;&gt;&lt;code class=&quot;prettyprint language-bash prettyprinted&quot;&gt;&lt;span class=&quot;pln&quot;&gt;java &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;XX&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:+&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;PrintCompilation&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; optjava&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Caching&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;/&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出：&lt;/p&gt;&lt;pre class=&quot;hljs code__pre&quot;&gt;&lt;code class=&quot;prettyprint language-bash prettyprinted&quot;&gt;&lt;span class=&quot;lit&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;hashCode &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;min &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;charAt &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;length &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;indexOf &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;AbstractStringBuilder&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ensureCapacityInternal &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;    n &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;arraycopy &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;   made not entrant&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;equals &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;AbstractStringBuilder&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;append &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;getChars &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  java&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;82&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  optjava&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Caching&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;touchEveryLine &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  optjava&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Caching&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;touchEveryLine &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  optjava&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Caching&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;touchEveryLine &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;lit&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  optjava&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Caching&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;touchEveryItem &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一列 编译时间&lt;/p&gt;&lt;p&gt;第二列 编译顺序&lt;/p&gt;&lt;p&gt;其他说明&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• n 方法是原生的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• s 方法是同步的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• ！方法有异常处理程序&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• % 方法通过栈上替换编译&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以通过 &lt;code&gt;-XX:+LogCompilation -XX:+UnlockDiagnosticVMOptions&lt;/code&gt; 来得到一个xml的详细日志，其中&lt;code&gt;LogCompilation&lt;/code&gt;为编译的详细日志，&lt;code&gt;UnlockDiagnosticVMOptions&lt;/code&gt;为打开诊断选项。&lt;/p&gt;&lt;h3&gt;9.3.3 HotSpot中的编译器&lt;/h3&gt;&lt;p&gt;HotSpot中的编译器：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• C1 用于GUI和其他客户端&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• C2 用于服务器&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;都依赖方法被调用的次数或调用计数（invocation count)&lt;/p&gt;&lt;p&gt;C1 简单，编译时间短，不像C2那样充分优化&lt;/p&gt;&lt;p&gt;共用的技术: **静态单一赋值(static single assignment,SSA )**，每个变量只被赋值一次，不会重新赋值，即javap被重写为只包括final变量。&lt;/p&gt;&lt;h3&gt;9.3.4 HotSpot中的分层编译（Tiered Compliation）&lt;/h3&gt;&lt;ul class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• 第0层 解释器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 第1层 C1 开启全部优化，不开启剖析&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 第2层 C1 支持调用和回边计数器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 第3层 C1 开启全部剖析器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 第4层 C2&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;编译路径&lt;/p&gt;&lt;section&gt;&lt;table class=&quot;preview-table&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;路径&lt;/td&gt;&lt;td&gt;描述&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0-3-4&lt;/td&gt;&lt;td&gt;解释器，开启全部剖析功能的C1，C2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0-2-3-4&lt;/td&gt;&lt;td&gt;解释器，在C2忙禄的情况下，快速用C1编译，然后是完全编译的C1，然后是C2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0-3-1&lt;/td&gt;&lt;td&gt;简单方法&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0-4&lt;/td&gt;&lt;td&gt;无分层编译，即直接到C2&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h2&gt;9.4 代码缓存&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;代码缓存&lt;/strong&gt; JIT编译的代码被存储的内存区域&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;代码缓存同时存储了虚拟机本身的其他原生代码，比如解释器部分内容&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;代码缓存被实现为一个堆，有未分配区域和空闲链表&lt;/p&gt;&lt;p&gt;当原生代码被删除时，相应块被加到空闲列表块，同时有清扫进程(sweeper)来回收块。&lt;/p&gt;&lt;p&gt;存储新的原生方法：&lt;/p&gt;&lt;ol class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 从空闲链表中找一个足够大的块&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 从未分配空间中创建一个新块&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;原生代码被删除的情况:&lt;/p&gt;&lt;ol class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 被取消了优化（基于某种假设进行了推测性优化，结果证明条件不成立）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 被替换成另一个版本（分层编译的情况下）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 包含该方法的类被卸载了&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以使用如下开关控制代码缓存的最大值：&lt;/p&gt;&lt;p&gt;&lt;code&gt;-XX:ReservedCodeCacheSize=&amp;lt;n&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;碎片&lt;/h3&gt;&lt;p&gt;C1结果被C2优化后移除，会产生大量碎片&lt;/p&gt;&lt;h2&gt;9.5 简单JIT调优&lt;/h2&gt;&lt;ol class=&quot; list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 打开 &lt;code&gt;PrintCompilation&lt;/code&gt; 开关&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 收集显示哪些方法被编译的日志&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 通过 &lt;code&gt;ReservedCodeCacheSize&lt;/code&gt; 增加代码缓存&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;4. 重新运行程序&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;5. 查看缓存增大后已编译的方法的集合&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;关于老拐瘦&lt;/h2&gt;&lt;p&gt;中年争取不油不丧积极向上的码农一名&lt;/p&gt;&lt;p&gt;咖啡，摄影，骑行，音乐&lt;/p&gt;&lt;p&gt;样样通，样样松&lt;/p&gt;&lt;p&gt;喜欢可以关注一下公众号 &lt;strong&gt;IT老拐瘦&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/399sxLagOtibRY7ZYnzSWMW6TRmLFRd0eoZsicZ8l18DZlz5OuMib10s7LicGtAicafia6qTZqoHD8k9cpH4MzcxYuicA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;IT老拐瘦&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;目前个人博客长驻： &lt;span&gt;yfge.github.io&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>40f16cd78d05ecef8d660225442843e5</guid>
<title>RocketMQ 重试机制详解及最佳实践</title>
<link>https://toutiao.io/k/fbw6d12</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;108&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.1875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/yvBJb5IiafvksXNHe6554ZsjqrWjd5N5AmmH22PkwibojicVa4IqjEuaEc5qzDX4NuwibcmDibr79xJ0PeW88OorK9w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;引言&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文主要介绍在使用 RocketMQ 时为什么&lt;/span&gt;&lt;span&gt;&lt;span&gt;需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;重试与兜底机制&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，生产者与消费者触发&lt;/span&gt;&lt;strong&gt;&lt;span&gt;重试的条件和具体行为&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，如何在 RocketMQ 中&lt;/span&gt;&lt;strong&gt;&lt;span&gt;合理使用重试机制&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，帮助构建弹性，高可用系统的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;最佳实践&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;RocketMQ 的重试机制包括三部分，分别是生产者重试，服务端内部数据复制遇到非预期问题时重试，消费者消费重试。本文中仅讨论生产者重试和消费者消费重试两种面向用户侧的实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;187&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3236775818639798&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvl3oZeCmhub2AlQh82zA6icYlEFRcJfCibj9IJ4icUcB6pW33O3tPWxVZa46sRk1TcnyU8iciaL2J1r9EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1588&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;生产者发送重试&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;RocketMQ 的生产者在发送消息到服务端时，可能会因为网络问题，服务异常等原因导&lt;/span&gt;&lt;span&gt;致调用失败，这时候应该怎么办？&lt;/span&gt;&lt;span&gt;如何尽可能的保证消息不丢失呢？&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 生产者重试次数&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;RocketMQ 在客户端中内置了请求重试逻辑，支持在初始化&lt;/span&gt;&lt;span&gt;&lt;span&gt;时配置消息发送&lt;/span&gt;&lt;strong&gt;&lt;span&gt;最大重试次数（默认为 2 次&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;），失败时会按照设置的重试次数重新发送。直到消息发送成功，或者达到最大重试次数时结束，并在最后一次失败后返回调用错误的响应。对于&lt;/span&gt;&lt;strong&gt;&lt;span&gt;同步发送和异步发送，均支持消息发送重试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;同步发送：调用线程会一直阻塞，直到某次重试成功或最终重试失败（返回错误码或抛出异常）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;异步发送：调用线程不会阻塞，但调用结果会通过回调的形式，以异常事件或者成功事件返回。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 生产者重试间隔&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在介绍生产者重试前，我们先来了解下流控的概念，流控一般是指服务端压力过大，容量不足时服务端会限制客户端收发消息的行为，是服务端自我保护的一种设计。RocketMQ 会根据当前是否触发了流控而采用不同的&lt;/span&gt;&lt;span&gt;重试策略：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;非流控错误场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：其他触发条件触发重试后，均会&lt;strong&gt;立即进行重试，无等待间隔&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;流控错误场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：系统会按照预设的&lt;strong&gt;指数退避策略进行延迟重试&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果故障是由过载流控引起的，&lt;strong&gt;重试会增加服务端负载，导致情况进一步恶化&lt;/strong&gt;，因此客户端在遇到流控时会在两次尝试之间等待一段时间。每次尝试后的等待时间都呈指数级延长。指数回退可能导致很长的回退时间，因为指数函数增长很快。指数退避算法通过以下参数控制重试行为，更多信息，请参见 &lt;/span&gt;&lt;span&gt;connection-backoff.md&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;INITIAL_BACKOFF：第一次失败重试前后需等待多久，默认值：1 秒；&lt;br/&gt;MULTIPLIER ：指数退避因子，即退避倍率，默认值：1.6；&lt;br/&gt;JITTER ：随机抖动因子，默认值：0.2；&lt;br/&gt;MAX_BACKOFF ：等待间隔时间上限，默认值：120 秒；&lt;br/&gt;MIN_CONNECT_TIMEOUT ：最短重试间隔，默认值：20 秒。&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;plain&quot;&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;ConnectWithBackoff()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;current_backoff&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;INITIAL_BACKOFF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;current_deadline&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;now() + INITIAL_BACKOFF&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;(TryConnect(Max(current_deadline, now() + MIN_CONNECT_TIMEOUT))!= SUCCESS)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;SleepUntil(current_deadline)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;current_backoff&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;Min(current_backoff * MULTIPLIER, MAX_BACKOFF)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;current_deadline&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;now() + current_backoff + UniformRandom(-JITTER * current_backoff, JITTER * current_backoff)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;特别说明&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：对于事务消息，只会进行&lt;/span&gt;&lt;span&gt;透明重试（transparent retries）&lt;/span&gt;&lt;span&gt;，网络超时或异常等场景不会进行重试。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 重试带来的副作用&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不停的重试看起来很美好，但也是有副作用的，主要包括两方面：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;消息重复，服务端压力增大&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;远程调用的不确定性，因请求超时触发消息发送重试流程，此时客户端无法感知服务端的处理结果；客户端进行的消息发送重试可能会导致消费方重复消费，应该按照用户ID、业务主键等信息&lt;strong&gt;幂等处理消息&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;较多的重试次数也会&lt;strong&gt;增大服务端的处理压力&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 用户的最佳实践是什么&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）合理设置发送超时时间，发送的最大次数&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;发送的最大次数在初始化客户端时配置在 ClientConfiguration；对于某些实时调用类场景，可能会导致消息发送请求链路被阻塞导致业务请求整体耗时高或耗时；需要合理评估每次调用请求的超时时间以及最大重试次数，避免影响全链路的耗时。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2）如何保证发送消息不丢失&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于分布式环境的复杂性，例如网络不可达时 RocketMQ 客户端发送请求重试机制并不能保证消息发送一定成功。业务方需要捕获异常，并做好冗余保护处理，常见的解决方案有两种：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;ol ne-level=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;向调用方返回业务处理失败；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;尝试将失败的消息存储到数据库，然后由后台线程定时重试，保证业务逻辑的最终一致性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3）关注流控异常导致无法重试&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;触发流控的根本原因是系统容量不足，如果因为突发原因触发消息流控，且客户端内置的重试流程执行失败，&lt;br/&gt;则建议执行服务端扩容，将请求调用临时替换到其他系统进行应急处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4）早期版本客户端如何使用故障延迟机制进行发送重试？&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于 RocketMQ 4.x 和 3.x 以下客户端&lt;span&gt;开启故障延迟机制&lt;/span&gt;可以用：&lt;/span&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;41&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;producer.setSendLatencyFaultEnable(true)&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;配置重试次数使用&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;81&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;producer.setRetryTimesWhenSendFailed()&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;producer.setRetryTimesWhenSendAsyncFailed() &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;消费者消费重试&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;消息中间件做异步解耦时的一个典型问题是如果下游服务处理消息事件失败，那应该怎么做呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;RocketMQ 的消息确认机制以及消费重试策略可以帮助分析如下问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;消费重试策略可以在设计实现消费者逻辑时保证每条消息处理的完整性，避免部分消息消费异常导致业务状态不一致。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当系统出现异常（宕机故障）等场景时，处理中的消息状态如何恢复，消费重试具体行为是什么。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 什么是消费重试？&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;什么时候认为消费失败？&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;消费者在接收到消息后将调用用户的消费函数执行业务逻辑。如果客户端返回消费失败 ReconsumeLater，抛出非预期异常，或消息处理超时（包括在 PushConsumer 中排队超时），&lt;strong&gt;只要服务端服务端一定时间内没收到响应，将认为消费失败&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;消费重试是什么？&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;消费者在消费某条消息失败后，服务端会根据重试策略重新向客户端投递该消息。超过一次定数后若还未消费成功，则该消息将不再继续重试，直接被发送到死信队列中；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;重试过程状态机&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：消息在重试流程中的状态和变化逻辑；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;重试间隔&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：上一次消费失败或超时后，下次重新尝试消费的间隔时间；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;最大重试次数&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：消息可被重试消费的最大次数。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;  &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 消息重试的场景&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;需要注意重试是应对异常情况，给予程序再次消费失败消息的机会，不应该被用作常态化的链路。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;推荐使用&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;场景：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务处理失败，失败原因跟当前的消息内容相关，预期一段时间后可执行成功；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;是一个小概率事件，对于大批的消息只有很少量的失败，后面的消息大概率会消费成功，是非常态化的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;  &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;正例：消费逻辑是扣减库存，极少量商品因为乐观锁版本冲突导致扣减失败，重试一般立刻成功。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;错误使用&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;场景：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消费处理逻辑中使用消费失败来做条件判断的结果分流，是不合理的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;反例：订单在数据库中状态已经是已取消，此时如果收到发货的消息，处理时不应返回消费失败，而应该返回成功并标记不用发货。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消费处理中使用消费失败来做处理速率限流，是不合理的。&lt;br/&gt;限流的目的是将超出流量的消息暂时堆积在队列中达到削峰的作用，而不是让消息进入重试链路。&lt;br/&gt;这种做法会让消息反复在服务端和客户端之间传递，增大了系统的开销，主要包括以下方面：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;ul ne-level=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;RocketMQ 内部重试涉及写放大，每一次重试将生成新的重试消息，大量重试将带来严重的 IO 压力；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重试有复杂的退避逻辑，内部实现为梯度定时器，该定时器本身不具备高吞吐的特性，大量重试将导致重试消息无法及时出队。重试的间隔将不稳定，将导致大量重试消息延后消费，即削峰的周期被大幅度延长。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 不要以重试替代限流&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上述误用的场景实际上是组合了限流和重试能力来进行削峰，RocketMQ 推荐的削峰最佳手段为组合&lt;/span&gt;&lt;strong&gt;限流和堆积&lt;/strong&gt;&lt;span&gt;，业务以保护自身为前提，需要对消费流量进行限流，并利用 RocketMQ 提供的堆积能力将超出业务当前处理的消息滞后消费，以达到削峰的目的。&lt;/span&gt;&lt;span&gt;下图中超过处理能力的消息都应该被堆积在服务端，而不是通过消费失败进行重试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5293159609120521&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvl3oZeCmhub2AlQh82zA6icY0ibia1UKV1YxhjdxKQX7Ym0qUAsubAIfnPP4o11dtTgpSic0702le7Ygw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;614&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果不想依赖额外的产品/组件来完成该功能，也可以利用一些本地工具类，比如 Guava 的 RateLimiter 来完成单机限流。如下所示，声明一个 50 QPS 的 RateLimiter，在消费前以阻塞的方式 acquire 一个令牌，获取到即处理消息，未获取到阻塞。&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;plain&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;RateLimiter rateLimiter = RateLimiter.create(&lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;PushConsumer pushConsumer = provider.newPushConsumerBuilder()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .setClientConfiguration(clientConfiguration)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .setConsumerGroup(consumerGroup)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .setMessageListener(messageView -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rateLimiter.acquire();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        LOGGER.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Consume message={}&quot;&lt;/span&gt;, messageView);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ConsumeResult.SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .build();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. PushConsumer 消费重试策略&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;PushConsumer 消费消息时，消息的几个主要状态如下：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;430&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7444444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvl3oZeCmhub2AlQh82zA6icYWMmKn8whHssxFnbJtDQugMzshwMLMiaFKXPcF9mmEDOHS7v78w79oqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Ready：已就绪状态。消息在消息队列RocketMQ版服务端已就绪，可以被消费者消费；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Inflight：处理中状态。消息被消费者客户端获取，处于消费中还未返回消费结果的状态；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Commit：提交状态。消费成功的状态，消费者返回成功响应即可结束消息的状态机；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DLQ：死信状态&lt;br/&gt;消费逻辑的最终兜底机制，若消息一直处理失败并不断进行重试，直到超过最大重试次数还未成功，此时消息不会再重试。&lt;br/&gt;该消息会被投递至死信队列。您可以通过消费死信队列的消息进行业务恢复。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;最大重试次数&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;PushConsumer 的最大重试次数由创建时决定。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如，最大重试次数为 3 次，则该消息最多可被投递 4 次，1 次为原始消息，3 次为重试投递次数。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;无序消息（非顺序消息）：重试间隔为阶梯时间，具体时间如下：&lt;br/&gt;&lt;strong&gt;说明&lt;/strong&gt;：若重试次数超过 16 次，后面每次重试间隔都为 2 小时。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;258&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.44558697514995715&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvl3oZeCmhub2AlQh82zA6icYfTpfr4AcXTCIm774wLuF0ibZP21odnItIRu6Qx0bTdo31K8iaud8iboNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1167&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5. SimpleConsumer 消费重试策略&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;h3&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;和 PushConsumer 消费重试策略不同，SimpleConsumer 消费者的重试间隔是预分配的，每次获取消息消费者会在调用 API 时设置一个不可见时间参数 &lt;strong&gt;InvisibleDuration&lt;/strong&gt;，即消息的最大处理时长。若消息消费失败触发重试，不需要设置下一次重试的时间间隔，直接复用不可见时间参数的取值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;159&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.27507163323782235&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvl3oZeCmhub2AlQh82zA6icY5XkBdJnLFw25yibbqmW05UK4GZWRXLFgiarzTjy0EMhlSXoko8dT3b5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1047&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于不可见时间为预分配的，可能和实际业务中的消息处理时间差别较大，可以通过 API 接口修改不可见时间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如，预设消息处理耗时最多 20 ms，但实际业务中 20 ms内消息处理不完，可以修改消息不可见时间，延长消息处理时间，避免消息触发重试机制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;修改消息不可见时间需要满足以下条件：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如下图所示，消息不可见时间修改后立即生效，即从调用 API 时刻开始，重新计算消息不可见时间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;262&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.45414847161572053&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvl3oZeCmhub2AlQh82zA6icYKVE1Soic9Ye3ZJBjC4sDhUrG7WicKk9UeRb5kzAXFztdU7WhcXvdjO3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;687&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;与 PushConsumer 相同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;消息重试间隔 = 不可见时间 － 消息实际处理时长&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如：消息不可见时间为 30 ms，实际消息处理用了 10 ms 就返回失败响应，则距下次消息重试还需要 20 ms，此时的消息重试间隔即为 20 ms；若直到 30 ms 消息还未处理完成且未返回结果，则消息超时，立即重试，此时重试间隔即为 0 ms。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SimpleConsumer 的消费重试间隔通过消息的不可见时间控制。&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;plain&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ClientServiceProvider provider1 = ClientServiceProvider.loadService();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;String topic1 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Your Topic&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;FilterExpression filterExpression1 = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; FilterExpression(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Your Filter Tag&quot;&lt;/span&gt;, FilterExpressionType.TAG);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SimpleConsumer simpleConsumer = provider1.newSimpleConsumerBuilder()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .setConsumerGroup(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Your ConsumerGroup&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .setClientConfiguration(ClientConfiguration.newBuilder().setEndpoints(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Your Endpoint&quot;&lt;/span&gt;).build())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;List&lt;/span&gt;&amp;lt;MessageView&amp;gt; messageViewList = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    messageViewList = simpleConsumer.receive(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;, Duration.ofSeconds(&lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    messageViewList.&lt;span class=&quot;code-snippet__keyword&quot;&gt;forEach&lt;/span&gt;(messageView -&amp;gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(messageView);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            simpleConsumer.ack(messageView);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (ClientException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (ClientException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;案例：某产品使用消息队列来发送解耦“视频渲染”的业务逻辑，发送方发送任务编号，消费方收到编号后处理任务。由于消费方的业务逻辑耗时较长，消费者重新消费到同一个任务时，该任务未完成，只能返回消费失败。在这种全新的 API 下，用户可以调用可以通过修改不可见时间给消息续期，实现对单条消息状态的精确控制。&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;plain&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;simpleConsumer&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.changeInvisibleDuration&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;simpleConsumer&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.changeInvisibleDurationAsync&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6. 功能约束与最佳实践&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;尽快明确的向服务端返回成功或失败，不要以超时（有时是异常抛出）代替消费失败。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;错误示例：&lt;/span&gt;&lt;span&gt;如果当前消费速度过高触发限流，则返回消费失败，等待下次重新消费。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;正确示例：&lt;/span&gt;&lt;span&gt;如果当前消费速度过高触发限流，则延迟获取消息，稍后再消费。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;发送重试和消费重试会导致相同的消息&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;重复消费&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;，消费方应该有一个&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;良好的幂等设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span&gt;正确示例：某系统中消费的逻辑是为某个用户发送短信，该短信已经发送成功了，当消费者应用重复收到该消息，此时应该返回消费成功。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;总结&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文主要介绍重试的基本概念，生产者消费者收发消息时触发重试的条件和具体行为，以及 RocketMQ 收发容错的最佳实践。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;重试策略帮助我们从随机的、短暂的瞬态故障中恢复，是在容忍错误时，提高可用性的一种强大机制。但请谨记 “重试是对于分布式系统来说自私的”，因为客户端认为其请求很重要，并要求服务端花费更多资源来处理，盲目的重试设计不可取，合理的使用重试可以帮助我们构建更加弹性且可靠的系统。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欢迎扫描下方二维码加入钉钉群一起沟通交流～&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvl3oZeCmhub2AlQh82zA6icYicEIF2WMMAVU8pZpZDIPZaTWJuqJbMTeN3gclHJpOE32Gxwvo2mUARQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;868&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点击阅读原文，进入官网了解更多详情～&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>