<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>de2b355106be82700422038f873927de</guid>
<title>测试角色在项目各阶段的项目管理 tips</title>
<link>https://toutiao.io/k/w4i9u34</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h4&gt;作者：京东物流 宋雪薇&lt;/h4&gt;

&lt;h4&gt;1 前言&lt;/h4&gt;

&lt;p&gt;项目管理是一个繁杂的过程，每个阶段需要涉及到不同人员、资源的协调配合。每个角色都有自己的定位和任务，为了紧密配合项目经理或无分配项目经理运行项目的场景下确保项目成员共同达成项目目标，不同的角色掌握相应的项目管理意识就尤为重要。&lt;/p&gt;

&lt;p&gt;那么，测试角色作为项目交付的质量把控者，具备相应的项目管理意识在项目的高质量、高效率交付目标上有着重要作用，如前置识别质量风险、进度风险等。本文旨在梳理、谈论测试角色在项目各阶段如何评估测试范围及风险、前置暴露问题以及推进测试进度等项目管理事项，高效协作及交付测试角色产物，最终与项目各方共同推进达到高质量、高效率交付的目标。&lt;/p&gt;

&lt;h3&gt;2 现状及思考&lt;/h3&gt;

&lt;p&gt;在现有敏捷迭代快速交付模式下，针对某一需求/项目会拆分至各个团队，各个团队节奏及交付目标不完全一致，且无项目经理角色跟踪推进的情况下，存在后置与协作团队沟通确认事项，如：未拉齐依赖方排期、前期未识别出改动系统、需求/设计变更未及时同步相关方、无设计方案沟通导致提测内容不满足提测标准，等均可影响交付节奏。那么作为测试角色的我们可以做哪些事情？&lt;/p&gt;

&lt;p&gt;核心主旨：高效沟通协作，提前思考后续阶段较容易影响进度、质量问题及风险点，暴露问题，前置沟通、评估及推进相关事宜；避免问题后置暴露在测试阶段；下一章节就让我们来详谈各个阶段测试角色可提前关注事项，与各方高效协作共同推进解决的相关tips。&lt;/p&gt;

&lt;h3&gt;3 详谈测试介入各阶段的项目管理tips&lt;/h3&gt;

&lt;h4&gt;3.1 需求评审阶段&lt;/h4&gt;

&lt;p&gt;软件测试的第一步就是需求评审，只有对软件需求做了准确、完整的评审后，才能对接下来各种测试工作的开展做好基础，如需求评审理解偏差，后期很多测试任务都将会受到影响。&lt;/p&gt;

&lt;p&gt;需求评审完成需了解哪些信息：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 优先级——识别项目/需求重点程度，优先级，以及期望上线时间情况（定位后续跟进力度）&lt;/li&gt;
&lt;li&gt; 需求背景——该需求基于什么业务背景改造（便于需求理解不偏差及后续测试阶段重点关注的核心目标）&lt;/li&gt;
&lt;li&gt; 改动范围——评审改动范围基于现有系统是否有冲突、是否明确合理，是否影响其他系统，也可关注下体验问题（避免后续开发测试阶段流程不通返工）&lt;/li&gt;
&lt;li&gt; 识别改动/交互系统——明确该需求是否涉及其他系统改动，识别改动系统/是否需配合联调系统（识别改动系统前置协调拉齐相关系统周期，避免后续阶段临时协调资源情况）&lt;/li&gt;
&lt;li&gt; 测试节点——软件需要进行哪些方面的测试，如功能测试、联调测试、回归测试、性能测试、稳定性测试、兼容性测试、安全测试等&lt;/li&gt;
&lt;li&gt; 测试环境——明确交互系统是否支持测试环境联调（可前置协调/前置确定联调方案，避免后置沟通确定环境占用测试周期）&lt;/li&gt;
&lt;li&gt; 测试数据——根据改动范围思考测试数据来源，识别是否可内部闭环造数，是否可使用测试小工具&lt;/li&gt;
&lt;li&gt; 测试方式——可前置思考使用功能测试、自动化测试&lt;/li&gt;
&lt;li&gt; 测试人员——识别测试干系人、明确主测试方（如重点项目/需求需要主测试情况）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.2 设计评审阶段&lt;/h4&gt;

&lt;p&gt;设计评审为评价设计满足质量要求的能力，识别问题及提出解决办法。设计过程中越早增加质量保证活动对最终设计效果的影响就越明显。目前较大项目/逻辑较复杂需求/研发优化，均需研发输出设计评审文档并邀请测试参与涉及评审。&lt;/p&gt;

&lt;p&gt;设计评审时需要check的内容：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 设计思路满足需求——结合需求背景及内容优先关注设计思路是否与需求评审阶段理解的有偏差&lt;/li&gt;
&lt;li&gt; 设计内容是否存在遗漏——评估是否存在遗漏功能&lt;/li&gt;
&lt;li&gt; 关注实现方式——实时、异步等处理方式对后续测试排期、方式及测试难度有参考价值&lt;/li&gt;
&lt;li&gt; 评估改动设计影响——基于原有系统改动除本次需求修改内容是否影响原有功能，是需明确影响范围，研发侧输出影响范围&lt;/li&gt;
&lt;li&gt; 明确阶段范围——根据需求是否存在拆解阶段交付，是需明确各阶段交付内容&lt;/li&gt;
&lt;li&gt; 交互方/依赖方实现方式——关注交互方/依赖方实现方式&lt;/li&gt;
&lt;li&gt; UAT/灰度/上线方案——根据上线特性，前置沟通UAT/灰度/上线方案&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.3 排期阶段&lt;/h4&gt;

&lt;p&gt;排期阶段是项目管理中重要的一环，时常在此阶段会暴露一些风险，排期容易出现两个问题，一是排期不合理，二是后续不能按照排期稳步推进，好的排期就要尽量避免这两个问题，那么测试阶段合理的排期就需尽可能多的参考该节点及之前节点项目各方提供的有效信息，全局评估、拆分任务交付，最终提供较合理排期。&lt;/p&gt;

&lt;p&gt;输出测试排期需要考虑的维度：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 参考项目重点程度、优先级——是否优先级与已排期需求冲突，需参考优先级调整资源及排期&lt;/li&gt;
&lt;li&gt; 结合需求、设计参考及核对研发工时及排期、阶段交付内容——研发提供拆解后的任务排期是否合理（前置功能是否提前交付，依赖的任务是否有序等），测试依据研发排期时间提供可并行/串行等较合理的测试排期&lt;/li&gt;
&lt;li&gt; 关注研发是否有联调排期——需保障提测质量，时间紧任务重情况下是否压缩研发联调排期，可能影响提测质量及测试交付时间&lt;/li&gt;
&lt;li&gt; 测试联调排期——测试输出联调周期需拉齐对接系统排期（可协同产品沟通拉齐），避免临时协调联调时间导致延期&lt;/li&gt;
&lt;li&gt; APP排期——需确认实现方式为：原生/flutter&lt;/li&gt;
&lt;li&gt; 明确方案是否存在变更——可再次明确需求/设计方案是否存在变更未同步情况&lt;/li&gt;
&lt;li&gt; 明确主测试方——如涉及多方系统，排期阶段可明确主产品、主研发、主测试方&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.4 测试用例编写、评审阶段&lt;/h4&gt;

&lt;p&gt;测试用例的编写必须依据需求文档，结合设计方案，确认所有以疑问点，覆盖所有功能需求点，跟进需求情况输出冒烟测试用例、功能测试用例、联调测试用例，思考业务实操场景，模拟用户场景串联流程保障测试内容的高覆盖。并在用例评审节点邀请产研参与评审，有序进行用例评审，确认疑问共同完善测试点并会后输出评审会议纪要。&lt;/p&gt;

&lt;p&gt;测试用例编写、评审阶段需要注意的事项：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 确认需求文档版本及标准——明确最新PRD版本（存在产研线下沟通后未同步测试情况，尽量避免），如有原型需明确原型及PRD内容描述不一致情况下如何开展测试工作&lt;/li&gt;
&lt;li&gt; 思考细节逻辑合理性及歧义描述——思考细节逻辑描述是否合理，PRD描述存在歧义点需标注明确&lt;/li&gt;
&lt;li&gt; 包含充分的异常测试用例——丰富异常用例，避免异常情况下功能异常&lt;/li&gt;
&lt;li&gt; 识别用户体验问题——提示信息是否明确、页面功能是否易用&lt;/li&gt;
&lt;li&gt; 业务范围和系统设计维度补全用例——跟进需求及设计细化测试维度丰富测试用例&lt;/li&gt;
&lt;li&gt; 测试数据、账号、配置等——识别测试数据、账号及配置是否需协同方配合，是否可使用工具等提升效率，如需全流程连通在该阶段记录&lt;/li&gt;
&lt;li&gt; 测试用例评审——与产研侧确认测试范围、沟通疑问，评审用例设计的清晰度与合理性，优先级排定是否合理，是否覆盖了需求上所有测试点，用例是否具有很好的可执行性，用例的冗余处理机制，是否设计了充足的异常测试用例，是否从用户的角度出发来设计用户使用场景和使用流程的测试用例，是否简洁、复用性强。&lt;/li&gt;
&lt;li&gt; 联调用例评审——输出交互场景与交互方评审，如为主测试，评审前串联整个项目/需求的流程场景用例，组织评审、明确测试数据、账号、配置等信息&lt;/li&gt;
&lt;li&gt; 用例评审会议纪要——记录待确认点及已确认点&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.5 编码阶段&lt;/h4&gt;

&lt;p&gt;编码阶段作为研发角色活动，通过编码过程来实现产品需求，此阶段的异常等需相关方知悉；&lt;/p&gt;

&lt;p&gt;研发阶段需同步的信息：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 需求/方案变更——是否存在需求/方案变更，是否及时同步至产品、测试侧&lt;/li&gt;
&lt;li&gt; 是否有提测延期风险——存在延期风险会压缩后续测试周期，需前置识别并抛出&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.6 代码评审阶段&lt;/h4&gt;

&lt;p&gt;代码评审是研发全流程的工程实践之一，通过代码评审可以更好的保障产品质量和代码质量；可根据改动大小与研发侧沟通进行线上/线下等评审方式参与。&lt;/p&gt;

&lt;p&gt;代码评审阶段需检验的标准：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 慢sql、空指针等——可有意识评审慢sql、空指针等问题&lt;/li&gt;
&lt;li&gt; 业务逻辑——测试人员需关注是否有明显的逻辑错误，改动是否遵循业务逻辑&lt;/li&gt;
&lt;li&gt; 补全回归用例——跟进改动范围可识别需改动影响原有功能部分，特别注意需确保主流程是否影响，补充回归用例&lt;/li&gt;
&lt;li&gt; 文档——提供新接口/修改接口是否有相应的接口文档更新维护&lt;/li&gt;
&lt;li&gt; 需求冲突识别——关注改动范围，识别其他需求是否也存在改动该段代码问题，避免需求冲突&lt;/li&gt;
&lt;li&gt; 提高个人代码评审能力——学习研发针对代码评审的意见/建议以及好的代码实现逻辑，便于问题更早的发现（以及代码编写规范、可读性、可维护性等）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.7 冒烟测试阶段&lt;/h4&gt;

&lt;p&gt;冒烟测试是指在对一个新版本进行系统大规模的测试之前，先验证一下软件的基本功能是否实现，是否具备可测性，尽早发现较阻塞进度问题，提前识别。&lt;/p&gt;

&lt;p&gt;冒烟测试阶段重点关注的维度：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 基本功能验证——优先验证基本功能是否可用，便于后续逻辑等较复杂功能开展&lt;/li&gt;
&lt;li&gt; 主流程验证——优先识别主流程问题，避免流程阻塞，阻碍测试进度，提前暴露流程问题及风险（方式依据项目/需求情况有效采取手工/自动化方式进行）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.8 功能测试阶段（内部测试阶段）&lt;/h4&gt;

&lt;p&gt;功能测试阶段开始了大规模的测试工作，在此期间仔细详尽的测试，&lt;/p&gt;

&lt;p&gt;功能测试阶段核心把控的思想：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 明确变更同步——针对测试阶段任何变更需同步至相关方，避免一方不知情&lt;/li&gt;
&lt;li&gt; 识别需求冲突——共同测试需求，测试分支、需求相互影响&lt;/li&gt;
&lt;li&gt; 测试数据高效使用——分析测试数据是否可验证多用例，高效使用测试数据验证尽可能多用例提升效率&lt;/li&gt;
&lt;li&gt; 测试问题务必抛出——测试阶段发现的问题即使较小也需要抛出来提供给相关确认方确认，如无需更改则记录相关结论&lt;/li&gt;
&lt;li&gt; 探索性测试——探索性测试，可在测试阶段发现前期未识别到的影响功能等&lt;/li&gt;
&lt;li&gt; 测试进度报告、风险抛出——针对时间较长/较大需求、项目发送测试进度报告，暴露风险（识别是否有影响进度、质量等风险问题，抛出问题，记录待确认问题及已沟通确认问题&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.9 联调测试阶段（包含研发联调、测试联调）&lt;/h4&gt;

&lt;p&gt;联调测试为了保障该需求/项目的所有改动场景下发的数据在全链路系统下正常流转闭环，覆盖用户真实实操场景来确保项目/需求的交付质量。&lt;/p&gt;

&lt;p&gt;联调测试阶段注重：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 研发联调环节——再次核对涉及系统交互需求/项目，研发联调工作是否覆盖主流程测试点&lt;/li&gt;
&lt;li&gt; 联调场景验证——与全链路系统进行联调测试验证，覆盖用户真实实操场景&lt;/li&gt;
&lt;li&gt; 补全联调场景——在联调阶段，可能存在场景覆盖不全情况，可有选择性了解上下游系统逻辑，可覆盖补全联调场景，且针对接口及消息尽量全的确保数据传输场景&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.10 稳定性测试（适用于APP）&lt;/p&gt;

&lt;p&gt;为保障APP端用户体验，APP稳定性测试不可或缺，上线前针对上线版本进行稳定性测试已加入到APP测试流程中，日常针对APP稳定性随机测试也持续监控。&lt;/p&gt;

&lt;p&gt;稳定性测试需监控：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 崩溃率——监控阿凡达平台统计，分析APP线上崩溃原因，丰富稳定性测试脚本&lt;/li&gt;
&lt;li&gt; CPU实时监控——记录稳定性测试期间对应版本的CPU占用数据，平均值、最大值&lt;/li&gt;
&lt;li&gt; 内存实时监控——记录稳定性测试期间对应版本内存占用数据，平均值、最大值&lt;/li&gt;
&lt;li&gt; 网络实时监控——记录稳定性测试期间对应版本流量占用数据，平均值、最大值&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.11 UAT阶段&lt;/h4&gt;

&lt;p&gt;UAT阶段主要为业务验收阶段，用户角色验收产研测交付内容，为确保UAT顺利进行，较大项目/需求测试人员有针对性进行主流程拉通测试可提前发现配置、环境因素所产生的问题，此环节可加快UAT进度确保项目更高效交付（该阶段可根据项目诉求调整）。&lt;/p&gt;

&lt;p&gt;UAT阶段应保障：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 拉通主流程——根据项目/需求大小确定是否需拉通UAT，避免UAT因配置/环境等原因产生流程阻塞&lt;/li&gt;
&lt;li&gt; 跟进/复盘UAT问题——针对较大项目/需求跟进及复盘UAT中产生的问题，规避重复问题产生事项&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;3.12 上线前master回归测试阶段&lt;/h4&gt;

&lt;p&gt;上线前master回归未确保长时间需求不上线分支及版本冲突等因素，上线当前进行master回归操作可有效确保发布内容运行稳定，保障质量。&lt;/p&gt;

&lt;p&gt;master回归阶段需check：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; master回归测试——回归上线功能主流程以及原有流程主流程，规避测试分支与上线分支代码冲突等问题&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;4 暴露风险最终与协作方共同确定运作策略&lt;/h3&gt;

&lt;p&gt;在项目各环节已前置思考可能带来的风险，提前规避、提前暴露，但并不能完全保障，那么在暴露风险后，可参考风险程度分析与分类定位，与项目各方高效协作，共同商榷解除风险的可行性方案以及后续运行策略。&lt;/p&gt;

&lt;h4&gt;4.1 风险程度分析&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  极小：没有危害或微小危害 20%&lt;/li&gt;
&lt;li&gt;  轻度：轻度危害 40%&lt;/li&gt;
&lt;li&gt;  中度：中等 60%&lt;/li&gt;
&lt;li&gt;  重度：较大危害 80%&lt;/li&gt;
&lt;li&gt;  极大：重度危害 100%&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;4.2 风险识别分类/分解结构&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  技术类：明确是否为需求/技术层面引起的风险&lt;/li&gt;
&lt;li&gt;  组织类：明确是否为项目依赖关系、资源等原因引起的风险&lt;/li&gt;
&lt;li&gt;  外部：明确外部影响具体原因&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;4.3 与协作方共同商榷风险推进方案&lt;/h4&gt;

&lt;p&gt;测试人员可根据测试角度定位风险优先级，优先解决风险程度较高问题，且优先级较高风险需同步至上级知悉，必要时可采取升级等方式处理；&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 如为技术类风险——与项目经理、产品、研发共同评估技术层面解除方案；&lt;/li&gt;
&lt;li&gt; 如为组织类风险——与项目经理、产品、研发共同协同调整计划/申请资源等方式处理；&lt;/li&gt;
&lt;li&gt; 如为外部风险——测试人员需提供具体问题，协同项目经理、产品沟通具体原因，采取相对应的应对措施；&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;4.4 举例说明&lt;/h4&gt;

&lt;p&gt;4.4.1 举例一&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;背景：&lt;/strong&gt;管理工作台项目（优先级top1，交付时间紧，开发工作量大）&lt;br/&gt;
&lt;strong&gt;产生问题：&lt;/strong&gt;因测试周期时间紧，为避免延期提测，测试在研发阶段明确提测时间时，发现提测存在延期风险&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt;依据风险程度，可内部解除的快速推进落地，需耗时较长/协调资源等需及时反馈至上级沟通，确保风险尽快解除落地。&lt;/p&gt;

&lt;h3&gt;5 总结&lt;/h3&gt;

&lt;p&gt;前置评估、高效协作&lt;/p&gt;

&lt;p&gt;保障在前置阶段通过测试经验总结提前思考后续阶段会带来的影响，包含但不仅限于：信息不同步、影响范围不明确、依赖关系不清晰等，前置有意识的识别较容易影响进度、质量问题及风险点，并暴露问题，继而与相关协作方高效协作、评估及推进风险点解除，避免问题后置暴露在测试阶段甚至交付上线阶段。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a2cda73aebba27deb6edabcfb2650751</guid>
<title>Vue3 响应式 API 之 ref 和 reactive</title>
<link>https://toutiao.io/k/6roiua9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我们知道 ref 函数和 reactive 函数用于实现数据的响应性。但是开发中如何选择使用 ref 和 reactive 呢？下面我们就详细说说 ref 和 reactive 的区别。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;回顾&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Vue3 版本之前，响应数据在 data 函数中定义&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script&amp;gt;&lt;br/&gt;  &lt;span&gt;export&lt;/span&gt; default {&lt;br/&gt;    &lt;span&gt;&lt;span&gt;data&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;        title: &lt;span&gt;&quot;Hello, Vue!&quot;&lt;/span&gt;&lt;br/&gt;      };&lt;br/&gt;    }&lt;br/&gt;  };&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue2 会遍历 data 中的所有属性，使用 Object.defineProperty 把每个 property 全部转为 getter/setter，getter 用来收集依赖，setter 用来执行 notify，发布更新事件。Vue2 对每个属性创建一个 Dep 对象，作为订阅发布模式的中间机构来收集依赖。Vue 追踪这些依赖，在其被访问和修改时通知变更。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Vue3&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue3 中引入了 ref，reactive 来创建响应式数据：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&lt;br/&gt;  &amp;lt;h2&amp;gt;{{ data.author }}&amp;lt;/h2&amp;gt;&lt;br/&gt;  &amp;lt;button @click=&lt;span&gt;&quot;&quot;&lt;/span&gt;changeTitle&amp;gt;修改title&amp;lt;/button&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script&amp;gt;&lt;br/&gt;  import { ref, reactive, toRefs } from &lt;span&gt;&quot;vue&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;export&lt;/span&gt; default {&lt;br/&gt;    &lt;span&gt;&lt;span&gt;setup&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;      const title = ref(&lt;span&gt;&quot;Hello, Vue 3!&quot;&lt;/span&gt;);&lt;br/&gt;      // 修改&lt;br/&gt;      &lt;span&gt;function&lt;/span&gt; &lt;span&gt;&lt;span&gt;changeTitle&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;        title.value == &lt;span&gt;&quot;Hello, Vue3!&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      const data = reactive({&lt;br/&gt;        author: &lt;span&gt;&quot;青年码农&quot;&lt;/span&gt;,&lt;br/&gt;        age: &lt;span&gt;&quot;18&quot;&lt;/span&gt;&lt;br/&gt;      });&lt;br/&gt;&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; { title, data, changeTitle };&lt;br/&gt;    }&lt;br/&gt;  };&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的代码我们大概可以看出区别。ref 的作用就是将一个原始数据类型转换成一个响应式数据，原始数据类型共有 7 个，分别是：String、Number、BigInt、Boolean、Symbol、Undefined、Null。但是有个奇淫技巧，那就是 ref 也可以是对象。后面我们再说。reactive 的作用就是将一个对象转换成一个响应式对象。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ref&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;ref 的作用就是将一个原始数据类型转换成一个带有响应式特性的数据类型。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const title = ref(&lt;span&gt;&quot;Hello, Vue 3!&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ref 接收参数并将其包裹在一个带有 value 属性的对象中返回，然后可以使用该属性访问或更改响应式变量的值，比如上面的代码我们使用 count.value 去修改值，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;title.value = &lt;span&gt;&quot;Hello, Vue3!&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到了 ref 也是可以接受对象类型&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const data = ref({&lt;br/&gt;    author: &lt;span&gt;&quot;青年码农&quot;&lt;/span&gt;,&lt;br/&gt;    age: &lt;span&gt;&quot;18&quot;&lt;/span&gt;&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种也是可以的，赋值的时候就会有点别扭了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data.value.author = &lt;span&gt;&quot;nmgwap&quot;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ref 响应式原理是依赖于 Object.defineProperty()，因此如果是对象，还是建议用 reactive。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;216&quot; data-backw=&quot;416&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5192307692307693&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHSQHJYRvOmWuNibo0t4l5ibEmzOPFQX0mSEtEmnJiay6Ziawgib9H0IlXic1olb7Jj9ATWXGEDzJM1wL8EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;416&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;reactive&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;reactive 返回对象的响应式副本, 它将解包所有深层的 refs，同时维持 ref 的响应性。一般我们用来实现对象或者数组的响应性。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const data = reactive({&lt;br/&gt;    author: &lt;span&gt;&quot;青年码农&quot;&lt;/span&gt;,&lt;br/&gt;    age: &lt;span&gt;&quot;18&quot;&lt;/span&gt;&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改和普通对象没区别，视图会实时更新&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;data.author = &lt;span&gt;&quot;nmgwap&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ref 是针对原始数据类型 和 reactive 是用于对象 这两个 API 都是为了给 JavaScript 普通的数据类型赋予响应式特性(reactivity)。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f82a904713c92d1a83e72b30ef9a15f5</guid>
<title>在这种模式下，程序员“越老越值钱”</title>
<link>https://toutiao.io/k/fgm7u2n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89434&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;为什么很多程序员自嘲为“码农”？为什么软件开发这一脑力劳动工种，却把“年轻体力好”作为用人条件之一？如果你知道这个行业曾经以“写了多少行代码”、“做了多少个功能”等“计件式”标准来考核员工的话，大概就能理解一二。&lt;/p&gt;&lt;p&gt;传统的软件开发模式无法最大程度激发程序员的创造力、创新性，也无法培养其为客户解决问题、创造价值的能力，反而使一代又一代程序员随着年龄渐长，陷入“35岁危机”，不得不离开这个行业，另寻出路。&lt;/p&gt;&lt;p&gt;那么这样一个行业现状能不能改？怎么改？一家成立于2001年的软件开发公司，通过其20年的发展摸索，试图找出这一问题的答案。日前，盛安德科技发展有限公司CEO张纪伟接受了中国网财经采访，详细阐述了其“提升和体现程序员价值，推动中国软件业变革”的愿景和思路。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.4992503748125936&quot; data-type=&quot;png&quot; data-w=&quot;667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/t09VbpQYMctIBj4czwJMIc6jD8a7WicOAEb4ITJykhnhMOibfXLnribUBAz8nEuE7NkrKOYbFKbeKiayUmkIPzAIWg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;盛安德CEO张纪伟(采访对象供图)&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统软件开发模式下，程序员遭遇“35岁瓶颈”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在传统的软件开发模式下，程序员就像一个复杂系统中的齿轮，虽然承担着大量的工作，但并不是整个系统中最有价值的部分。&lt;/p&gt;&lt;p&gt;传统软件开发模式借鉴了工业生产，特别是流水线生产的管理方法，强调流程的可控性，将软件开发拆解成需求分析、设计、代码、测试、维护等独立的环节来进行。“于是程序员‘前面’有架构师、需求分析师、项目经理等等，他们敲定了整个软件的框架和功能，最后剩下大量的代码工作，留给程序员去填。然而‘前面’的环节才是最有价值的。”张纪伟表示。&lt;/p&gt;&lt;p&gt;由于代码的工作量非常大，需要占用诸多人力，一些欧美软件公司在做好了前期的需求、设计、架构之后，将代码“外包”给更具人力成本优势的其他国家的软件公司来做。由此，印度的软件外包行业得以迅速发展，并在相当程度上影响了刚刚起步的中国软件行业。&lt;/p&gt;&lt;p&gt;“在上世纪90年代末到本世纪初的几年里，中国的软件行业其实就是模仿，或者说照搬了印度软件外包模式。”张纪伟回忆，“我们那时候甚至以为‘软件就应该是这么开发的’。”&lt;/p&gt;&lt;p&gt;起初，张纪伟就是因为觉得印度的软件外包模式颇具“钱”景，并且在同样具有人力成本优势的中国可复制，才从供职的杂志社辞职，于2001年8月创立了盛安德。&lt;/p&gt;&lt;p&gt;“但是我们经过好多尝试，最终发现这条路(传统软件开发模式)走不通。”张纪伟称。&lt;/p&gt;&lt;p&gt;诚然，传统软件开发模式有其优越性，它极大地增加了项目的可控性，使成本变得可预测。但是它的不足也很明显：这种比照流水线生产的开发管理，忽略了软件开发是一件需要程序员想象力和创造力的工作。&lt;/p&gt;&lt;p&gt;“有的公司用‘一天做了多少行代码’、‘做了多少个功能’作为程序员的绩效考核标准，但无论是功能还是代码量，程序员很容易就可以做到。在搜索引擎上搜一搜，能找到很多方法实现这个功能。但这个功能在软件当中是不是最好用的，就不一定了。”张纪伟称，“也就是说东西虽然做出来了，但对用户来说，结果并不是很好。而程序员本身，也没有产生他应该产生的价值。”&lt;/p&gt;&lt;p&gt;但这并不是程序员单方面的问题，而是在这种传统软件开发模式下，程序员几乎没有机会与用户直接沟通，只是按照需求分析“照章办事”。而且，在前期需求分析完成后，如果要修改，通常需要比较复杂的流程，因此进入开发阶段后，程序员也很少再有机会听取用户的需求意见。&lt;/p&gt;&lt;p&gt;流水线式的分工，使很多程序员终其职业生涯只做“写代码”一件事，也“只会写代码”。这就导致很多程序员在年龄渐长后，遭遇“中年危机”。&lt;/p&gt;&lt;p&gt;“如果你的开发工作就只有写代码，那35岁以后可能真的会‘往下走’。到时候，体力不如年轻人好，学东西又不如年轻人快。年轻人学一个新技术，可能两三天，看点资料就会了。但是大龄程序员可能就做不到。”张纪伟称，“那种认为‘我的技术强’、‘我凭技术混饭吃’的程序员，到35岁以后尤其会有这样的问题。”&lt;/p&gt;&lt;p&gt;上世纪50年代，“现代管理学之父”彼得·德鲁克在其著作中首次提出“知识工作者”概念。与传统工厂模式下的工人不同，知识工作者从事的不是重复性的工作，而是需要在动态的、变革的环境中充分发挥自己的灵感和创造性。知识工作者是无法被“计件式”考核所督导的，他们的工作动力来自于高度的自主性。&lt;/p&gt;&lt;p&gt;进入到21世纪以来，以知识经济为主体的新经济快速发展壮大，世界正如德鲁克所预言的：知识工作者日渐成为社会劳动的主体。互联网、云计算、大数据、人工智能……一系列新技术和新应用接连涌现并快速迭代。软件作为它们背后的“基础”，其创造性和革新力也被提出了更高的要求，无论是在开发模式上还是在人才培养上。&lt;/p&gt;&lt;p&gt;软件开发作为典型的知识工种，一些业内人士开始主动转型，探寻一种能让程序员实现自身价值提升、能更好地激发其主动性和创造力的新型开发和管理模式。&lt;/p&gt;&lt;p&gt;&lt;span&gt;敏捷开发模式下，程序员“越老越值钱”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2001年，17位软件工程师在美国共同发表了“敏捷宣言”，敏捷开发模式正式诞生，并被认为“改变了软件世界”。&lt;/p&gt;&lt;p&gt;“敏捷宣言”中提出了敏捷开发的基本原则，即个体和交互胜过过程和工具、能工作的软件胜过详尽的文档、客户合作胜过合同谈判、响应变化胜过遵循计划。&lt;/p&gt;&lt;p&gt;这四项原则突出了敏捷开发以“人”为核心的理念，认为人比流程重要。持续集成、快速迭代、重构等等，是敏捷开发区别于传统开发模式的突出特点。这使得敏捷开发能更快速、更有效地交付有价值的软件，同时实现人的价值提升。&lt;/p&gt;&lt;p&gt;敏捷模式诞生以来，在欧美国家软件行业得到了广泛认可和验证。但在遥远的中国，这一模式既新奇、又小众。&lt;/p&gt;&lt;p&gt;张纪伟和盛安德接触到敏捷模式，是因为一次机缘巧合。彼时的盛安德经历了创业之初找不到客户、借钱发工资的艰难时期，也经历了05、06年软件外包行业蓬勃发展的朝阳时期。但张纪伟仍然在探寻一条能让公司和员工一起稳健成长、长远发展的“对”的路径。&lt;/p&gt;&lt;p&gt;“大概是在2006年，一位英国客户千里迢迢跑到中国，要和我们签一个敏捷合同，之前我们从未听说过敏捷。我们提供六、七个人，客户方也有两、三个人，还派一个人长期在我们办公室和我们一起工作。但项目还是很快就遇到大麻烦，怎么救也没救过来。尽管项目不成功，却让我们认识了敏捷。”张纪伟回忆，“很快我们就发现敏捷是ODC业务(离岸软件开发)的唯一出路。没有敏捷，离岸外包都是没有希望的。”&lt;/p&gt;&lt;p&gt;于是从2006年起，张纪伟开始在整个公司倡导并实践敏捷理念。紧接着2008年的经济危机，使张纪伟进一步验证并坚定了自己的选择。&lt;/p&gt;&lt;p&gt;“2008年金融危机对我们的影响很大，手里的固定价格项目(传统模型下的开发项目)一个个结束，程序员从项目里出来，找不到下一个项目。市场上没有销售线索进来了，连询盘的都没有。我们不得已，裁减了近1/3人员。”张纪伟称，“但当时我们也发现，剩下2/3人员所在的按时间付费项目(敏捷模式下的开发项目)，几乎都没受到影响。敏捷项目是和客户‘共建’的，只要客户不垮，我们的业务不会出现大问题。”&lt;/p&gt;&lt;p&gt;敏捷项目与客户的高度黏性、长期性、相对稳定性，使张纪伟坚定了把敏捷模式作为主要发展方向的决心。“2009年以后，我们明确将按时间付费项目作为公司主营业务。”&lt;/p&gt;&lt;p&gt;张纪伟认为，与传统开发模式不同，敏捷更依赖于程序员个人的能力，同时也更能体现和提升程序员的个人价值。&lt;/p&gt;&lt;p&gt;“传统软件开发将解决用户问题的工作都交给设计师、需求分析师、项目经理了，程序员根本不碰客户，程序员只是做代码，这个是有问题的。而敏捷模式，简单来说就是要求程序员去碰客户。你要去了解业务、了解需求、了解客户想要解决的问题是什么，然后你要去解决用户的问题，而不是只写代码。”张纪伟称，“传统模式下程序员开始自己的工作时，第一个问题肯定是‘需求是什么’，敏捷程序员应该问的是‘问题是什么’。”&lt;/p&gt;&lt;p&gt;也就是说，与传统模式下的程序员相比，敏捷程序员会身兼数职，不仅仅是需求分析、设计等等，有时甚至需要熟知客户所在行业的业务特性和行业特征，以便提供更有针对性的服务和解决方案。&lt;/p&gt;&lt;p&gt;这对程序员自身来说，既是考验，也是成长机遇。“不同的客户会有不同的需要解决的问题。我们认为程序员需要去理解这些，并且提高自身解决问题的能力。随着年龄增长、阅历增加，经验增加不断地累积，他解决问题的能力会不断提升。”张纪伟表示，“因此在敏捷模式下，程序员是‘越老越值钱’。”&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.667&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/t09VbpQYMctIBj4czwJMIc6jD8a7WicOAQKZeQMT3iaaV9aXyANWkOsgEoSK4vAhU03YIkDSibzsC3ySWrOePpaWA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;盛安德科技发展有限公司(采访对象供图)&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何留住敏捷型人才？盛安德提出“程序员第一”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;软件开发公司想要实践敏捷模式，不是易事。这需要在管理制度、企业文化层面大刀阔斧的改革，直到缔造一个适合敏捷模式的氛围和环境。&lt;/p&gt;&lt;p&gt;正如知识工作者的贡献无法在督导中产生，敏捷程序员也不需要“管理者”。&lt;/p&gt;&lt;p&gt;“敏捷项目里，程序员直接与客户对接，公司不会安排人去‘管理’程序员。客户也不会去‘管理’程序员，但是他会在一段时间后进行评估。如果客户不满意，那么程序员就会丢掉项目，也会丢掉收入。”张纪伟称。&lt;/p&gt;&lt;p&gt;也就是说，敏捷程序员的收入直接与客户满意度挂钩。“程序员为客户解决问题的能力体现了他的价值，他的价值又通过小时单价被反映出来，小时单价越高，工资就越高。”张纪伟介绍，“这样的话程序员就会很清楚：我的工作、收入不取决于我的上级，不取决于任何人，只跟我创造的价值有观。只要我能解决用户的问题，我的收入就有保障。”&lt;/p&gt;&lt;p&gt;这种情况下，程序员个人与客户之间基于长久合作的信任，存在“强”联系，而公司方面与客户只有“弱”联系。那么，如何留住程序员人才，对软件公司的发展至关重要。&lt;/p&gt;&lt;p&gt;“我们很早就知道程序员的重要性，为了留住人才想了种种办法，包括尝试不同的薪酬激励和组织形式。”张纪伟表示。&lt;span/&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>05fa9a1c42d8ff9488a02f3d25b73fe3</guid>
<title>面试官：一千万的数据，你是怎么查询的？</title>
<link>https://toutiao.io/k/pl76dj8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好，我是田哥&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近在给大家做模拟面试和简历优化，其中发现很多人一看到&lt;strong&gt;什么千万级数据&lt;/strong&gt;之类的面试题就会腿软。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也许有些人没遇过上千万数据量的表，也不清楚查询上千万数据量的时候会发生什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就来带大家实操一下，这次是基于&lt;strong&gt;MySQL 5.7.26&lt;/strong&gt;做测试&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;准备数据&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有一千万的数据怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有数据自己不会造吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;造数据难吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码创建一千万？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那是不可能的，太慢了，可能真的要跑一天。可以采用数据库脚本执行速度快很多。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建表&lt;span/&gt;&lt;/h6&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt;  (&lt;br/&gt;  &lt;span&gt;`id`&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;br/&gt;  &lt;span&gt;`user_id`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`ip`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`op_data`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr1`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr2`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr3`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr4`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr5`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr6`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr7`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr8`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr9`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr10`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr11`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`attr12`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`id`&lt;/span&gt;) &lt;span&gt;USING&lt;/span&gt; BTREE&lt;br/&gt;) &lt;span&gt;ENGINE&lt;/span&gt; = &lt;span&gt;InnoDB&lt;/span&gt; AUTO_INCREMENT = &lt;span&gt;1&lt;/span&gt; &lt;span&gt;CHARACTER&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; = utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt; = utf8mb4_general_ci ROW_FORMAT = Dynamic;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建数据脚本&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;采用批量插入，效率会快很多，而且每1000条数就commit，数据量太大，也会导致批量插入效率慢&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;DELIMITER ;;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;PROCEDURE&lt;/span&gt; batch_insert_log()&lt;br/&gt;&lt;span&gt;BEGIN&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;DECLARE&lt;/span&gt; i &lt;span&gt;INT&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;DECLARE&lt;/span&gt; userId &lt;span&gt;INT&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;10000000&lt;/span&gt;;&lt;br/&gt; &lt;span&gt;set&lt;/span&gt; @execSql = &lt;span&gt;&#x27;INSERT INTO `test`.`user_operation_log`(`user_id`, `ip`, `op_data`, `attr1`, `attr2`, `attr3`, `attr4`, `attr5`, `attr6`, `attr7`, `attr8`, `attr9`, `attr10`, `attr11`, `attr12`) VALUES&#x27;&lt;/span&gt;;&lt;br/&gt; &lt;span&gt;set&lt;/span&gt; @execData = &lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;  WHILE i&amp;lt;=10000000 &lt;span&gt;DO&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;set&lt;/span&gt; @&lt;span&gt;attr&lt;/span&gt; = &lt;span&gt;&quot;&#x27;测试很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的属性&#x27;&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;set&lt;/span&gt; @execData = &lt;span&gt;concat&lt;/span&gt;(@execData, &lt;span&gt;&quot;(&quot;&lt;/span&gt;, userId + i, &lt;span&gt;&quot;, &#x27;10.0.69.175&#x27;, &#x27;用户登录操作&#x27;&quot;&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;,&quot;&lt;/span&gt;, @&lt;span&gt;attr&lt;/span&gt;, &lt;span&gt;&quot;)&quot;&lt;/span&gt;);&lt;br/&gt;  if i % 1000 = 0&lt;br/&gt;  then&lt;br/&gt;     &lt;span&gt;set&lt;/span&gt; @stmtSql = &lt;span&gt;concat&lt;/span&gt;(@execSql, @execData,&lt;span&gt;&quot;;&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;prepare&lt;/span&gt; stmt &lt;span&gt;from&lt;/span&gt; @stmtSql;&lt;br/&gt;    &lt;span&gt;execute&lt;/span&gt; stmt;&lt;br/&gt;    &lt;span&gt;DEALLOCATE&lt;/span&gt; &lt;span&gt;prepare&lt;/span&gt; stmt;&lt;br/&gt;    &lt;span&gt;commit&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;set&lt;/span&gt; @execData = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;   else&lt;br/&gt;     &lt;span&gt;set&lt;/span&gt; @execData = &lt;span&gt;concat&lt;/span&gt;(@execData, &lt;span&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;   &lt;span&gt;end&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;SET&lt;/span&gt; i=i+&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;END&lt;/span&gt; &lt;span&gt;WHILE&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;END&lt;/span&gt;;;&lt;br/&gt;DELIMITER ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开始测试&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;哥的电脑配置比较低：win10 标压渣渣i5 读写约500MB的SSD&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于配置低，本次测试只准备了3148000条数据，占用了磁盘5G(还没建索引的情况下)，跑了38min，电脑配置好的同学，可以插入多点数据测试&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SELECT count(1) FROM `user_operation_log`&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回结果：3148000&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;三次查询时间分别为：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;普通分页查询&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL 支持 LIMIT 语句来选取指定的条数数据， Oracle 可以使用 ROWNUM 来选取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL分页查询语法如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; [&lt;span&gt;offset&lt;/span&gt;,] &lt;span&gt;rows&lt;/span&gt; | &lt;span&gt;rows&lt;/span&gt; &lt;span&gt;OFFSET&lt;/span&gt; &lt;span&gt;offset&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一个参数指定第一个返回记录行的偏移量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二个参数指定返回记录行的最大数目&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们开始测试查询结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询3次时间分别为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样看起来速度还行，不过是本地数据库，速度自然快点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换个角度来测试&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;相同偏移量，不同数据量&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;1000&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;10000&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;100000&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;1000000&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询时间如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;数量&lt;/th&gt;&lt;th&gt;第一次&lt;/th&gt;&lt;th&gt;第二次&lt;/th&gt;&lt;th&gt;第三次&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;10条&lt;/td&gt;&lt;td&gt;53ms&lt;/td&gt;&lt;td&gt;52ms&lt;/td&gt;&lt;td&gt;47ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;100条&lt;/td&gt;&lt;td&gt;50ms&lt;/td&gt;&lt;td&gt;60ms&lt;/td&gt;&lt;td&gt;55ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1000条&lt;/td&gt;&lt;td&gt;61ms&lt;/td&gt;&lt;td&gt;74ms&lt;/td&gt;&lt;td&gt;60ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10000条&lt;/td&gt;&lt;td&gt;164ms&lt;/td&gt;&lt;td&gt;180ms&lt;/td&gt;&lt;td&gt;217ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;100000条&lt;/td&gt;&lt;td&gt;1609ms&lt;/td&gt;&lt;td&gt;1741ms&lt;/td&gt;&lt;td&gt;1764ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1000000条&lt;/td&gt;&lt;td&gt;16219ms&lt;/td&gt;&lt;td&gt;16889ms&lt;/td&gt;&lt;td&gt;17081ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面结果可以得出结束：&lt;strong&gt;数据量越大，花费时间越长&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;相同数据量，不同偏移量&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;100000&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;偏移量&lt;/th&gt;&lt;th&gt;第一次&lt;/th&gt;&lt;th&gt;第二次&lt;/th&gt;&lt;th&gt;第三次&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;36ms&lt;/td&gt;&lt;td&gt;40ms&lt;/td&gt;&lt;td&gt;36ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1000&lt;/td&gt;&lt;td&gt;31ms&lt;/td&gt;&lt;td&gt;38ms&lt;/td&gt;&lt;td&gt;32ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10000&lt;/td&gt;&lt;td&gt;53ms&lt;/td&gt;&lt;td&gt;48ms&lt;/td&gt;&lt;td&gt;51ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;100000&lt;/td&gt;&lt;td&gt;622ms&lt;/td&gt;&lt;td&gt;576ms&lt;/td&gt;&lt;td&gt;627ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1000000&lt;/td&gt;&lt;td&gt;4891ms&lt;/td&gt;&lt;td&gt;5076ms&lt;/td&gt;&lt;td&gt;4856ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面结果可以得出结束：&lt;strong&gt;偏移量越大，花费时间越长&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;, &lt;span&gt;attr&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何优化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然我们经过上面一番的折腾，也得出了结论，针对上面两个问题：偏移大、数据量大，我们分别着手优化&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优化偏移量大问题&lt;span/&gt;&lt;/h4&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;采用子查询方式&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以先定位偏移位置的 id，然后再查询数据&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &amp;gt;= (&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询结果如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;sql&lt;/th&gt;&lt;th&gt;花费时间&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;第一条&lt;/td&gt;&lt;td&gt;4818ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第二条(无索引情况下)&lt;/td&gt;&lt;td&gt;4329ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第二条(有索引情况下)&lt;/td&gt;&lt;td&gt;199ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第三条(无索引情况下)&lt;/td&gt;&lt;td&gt;4319ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第三条(有索引情况下)&lt;/td&gt;&lt;td&gt;201ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面结果得出结论：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一条花费的时间最大，第三条比第一条稍微好点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;子查询使用索引速度更快&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：只适用于id递增的情况&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;id非递增的情况可以使用以下写法，但这种缺点是分页查询只能放在子查询里面&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：某些 mysql 版本不支持在 in 子句中使用 limit，所以采用了多个嵌套select&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;IN&lt;/span&gt; (&lt;span&gt;SELECT&lt;/span&gt; t.id &lt;span&gt;FROM&lt;/span&gt; (&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; t)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;采用 id 限定方式&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方法要求更高些，id必须是连续递增，而且还得计算id的范围，然后使用 between，sql如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;between&lt;/span&gt; &lt;span&gt;1000000&lt;/span&gt; &lt;span&gt;AND&lt;/span&gt; &lt;span&gt;1000100&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &amp;gt;= &lt;span&gt;1000000&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询结果如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从结果可以看出这种方式非常快&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;注意：这里的 LIMIT 是限制了条数，没有采用偏移量&lt;/em&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优化数据量大问题&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回结果的数据量也会直接影响速度&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1000000&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1000000&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;, user_id, ip, op_data, attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8, attr9, attr10, attr11, attr12 &lt;span&gt;FROM&lt;/span&gt; &lt;span&gt;`user_operation_log`&lt;/span&gt; &lt;span&gt;LIMIT&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1000000&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询结果如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;sql&lt;/th&gt;&lt;th&gt;花费时间&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;第一条&lt;/td&gt;&lt;td&gt;15676ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第二条&lt;/td&gt;&lt;td&gt;7298ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;第三条&lt;/td&gt;&lt;td&gt;15960ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从结果可以看出减少不需要的列，查询效率也可以得到明显提升&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一条和第三条查询速度差不多，这时候你肯定会吐槽，那我还写那么多字段干啥呢，直接 * 不就完事了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意本人的 MySQL 服务器和客户端是在_同一台机器_上，所以查询数据相差不多，有条件的同学可以测测客户端与MySQL分开&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SELECT * 它不香吗？&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里顺便补充一下为什么要禁止 &lt;code&gt;SELECT *&lt;/code&gt;。难道简单无脑，它不香吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要两点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;用 &quot;&lt;code&gt;SELECT * &lt;/code&gt;&quot; 数据库需要解析更多的对象、字段、权限、属性等相关内容，在 SQL 语句复杂，硬解析较多的情况下，会对数据库造成沉重的负担。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增大网络开销，&lt;code&gt;*&lt;/code&gt; 有时会误带上如log、IconMD5之类的无用且大文本字段，数据传输size会几何增涨。特别是MySQL和应用程序不在同一台机器，这种开销非常明显。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后，如果你也需要修改简历，需要模拟面试的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;欢迎加入我的知识星球，我给你&lt;strong&gt;免费做&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.392&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/07BicZywOVtl3Hy5Al12e1adAoYLt8qWJuDVicFwk2oVSU26gTMgCba7ibibufIxJfGFSkOwcfxtbic7mxVQDlPJV5Q/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1855846f28959a5a4dd62e7f6e148a07</guid>
<title>一剑破万法：noexcept 与 C++ 异常导致的 coredump</title>
<link>https://toutiao.io/k/p5p2j28</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-1g0fqss&quot; options=&quot;[object Object]&quot;&gt;&lt;p data-first-child=&quot;&quot; data-pid=&quot;NtJnqJ7r&quot;&gt;作为C/C++程序员，最不想见到的就是coredump。coredump的原因有很多，今天我来谈谈其中一种十分常见的原因，那就是由于异常没有被catch导致的coredump。&lt;/p&gt;&lt;h2 id=&quot;h_609434714_0&quot; data-into-catalog-status=&quot;&quot;&gt;从一篇知乎文章讲起&lt;/h2&gt;&lt;p data-pid=&quot;_RG-85wv&quot;&gt;先看一位知友的文章： &lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/456536345&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-b7f13c3b68b39bfe492f02212cc69bbe_180x120.jpg&quot; data-image-width=&quot;646&quot; data-image-height=&quot;268&quot; data-text=&quot;津的技术专栏：C++11 std::thread异常coredump导致调用堆栈丢失问题的跟踪和解决（std::teminate）&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p data-pid=&quot;e6m7_G9y&quot;&gt;这篇文章讲的是这位知友遇到std::thread执行时程序出现coredump，但经过gdb调试后却无法一眼看到问题代码的位置。有时候coredump不可怕，但是core栈不清晰最可怕。这是因为coredump的原因是在回调函数中抛出了异常，如果不是被std::thread回调，本身C++异常导致的coredump在gdb调试时是能直观看到出问题的代码行的。&lt;/p&gt;&lt;p data-pid=&quot;iBbGtZip&quot;&gt;然后作者使用了极其高深而琐细的方法，最终定位到了引发coredump的代码。不得不说作者其实很厉害，我也从中学到不少。但其实这有更简便的方法，请听我细细道来！&lt;/p&gt;&lt;h3 id=&quot;h_609434714_1&quot; data-into-catalog-status=&quot;&quot;&gt;演示代码&lt;/h3&gt;&lt;p data-pid=&quot;9MwIJ_-R&quot;&gt;借用一下这位知友后来写的demo验证代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;/&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thread_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread_func start ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//vec.push_back(1);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;c1&quot;&gt;//vec.push_back(2);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;weIWHEUv&quot;&gt;该程序运行后会触发一个coredump。由于是demo代码，所以其实你一眼就能找到bug所在，但这不是重点，让我们假装不知，然后去排查。&lt;/p&gt;&lt;h3 id=&quot;h_609434714_2&quot; data-into-catalog-status=&quot;&quot;&gt;典型的coredump堆栈&lt;/h3&gt;&lt;p data-pid=&quot;3EsUJZyN&quot;&gt;gdb打开coredump文件后，&lt;code&gt;bt&lt;/code&gt;命令展示的堆栈信息如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Program terminated with signal 6, Aborted.
#0  0x00007fa9f0015387 in raise () from /lib64/libc.so.6
Missing separate debuginfos, use: debuginfo-install glibc-2.17-326.el7_9.x86_64 libgcc-4.8.5-44.el7.x86_64 libstdc++-4.8.5-44.el7.x86_64
(gdb) bt
#0  0x00007fa9f0015387 in raise () from /lib64/libc.so.6
#1  0x00007fa9f0016a78 in abort () from /lib64/libc.so.6
#2  0x00007fa9f0b41a95 in __gnu_cxx::__verbose_terminate_handler() () from /lib64/libstdc++.so.6
#3  0x00007fa9f0b3fa06 in ?? () from /lib64/libstdc++.so.6
#4  0x00007fa9f0b3fa33 in std::terminate() () from /lib64/libstdc++.so.6
#5  0x00007fa9f0b963c5 in ?? () from /lib64/libstdc++.so.6
#6  0x00007fa9f03b4ea5 in start_thread () from /lib64/libpthread.so.0
#7  0x00007fa9f00ddb0d in clone () from /lib64/libc.so.6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;oSTUdfzW&quot;&gt;这是一个非常典型的coredump文件。请记住不管你在实际生产过程中是多么复杂的C++程序，只要coredump文件中有&lt;code&gt;signal 6&lt;/code&gt;、&lt;code&gt;int raise()&lt;/code&gt;、&lt;code&gt;int abort()&lt;/code&gt;这三个关键字，基本就可以大概率确认这是一起由于异常没有被catch而导致的coredump。 &lt;/p&gt;&lt;p data-pid=&quot;vPEA-d4e&quot;&gt;在实际生产过程中采用原作者的排查方法无疑比较繁琐的，而且未必有这样的条件（因为涉及到修改libstdc++的源码，重新编译，重新连接）。其实我说的简便的方法就是C++11开始引入的&lt;code&gt;noexcept&lt;/code&gt;关键字！&lt;/p&gt;&lt;h3 id=&quot;h_609434714_3&quot; data-into-catalog-status=&quot;&quot;&gt;修改演示代码&lt;/h3&gt;&lt;p data-pid=&quot;JdtBoMwK&quot;&gt;来给回调函数加上noexcept声明：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;/&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thread_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread_func start ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//vec.push_back(1);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;c1&quot;&gt;//vec.push_back(2);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;TzoW6w-0&quot;&gt;重新编译执行，然后gdb调试coredump文件。这次的core堆栈如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Program terminated with signal 6, Aborted.
#0  0x00007f35b2889387 in raise () from /lib64/libc.so.6
Missing separate debuginfos, use: debuginfo-install glibc-2.17-326.el7_9.x86_64 libgcc-4.8.5-44.el7.x86_64 libstdc++-4.8.5-44.el7.x86_64
(gdb) bt
#0  0x00007f35b2889387 in raise () from /lib64/libc.so.6
#1  0x00007f35b288aa78 in abort () from /lib64/libc.so.6
#2  0x00007f35b33b5a95 in __gnu_cxx::__verbose_terminate_handler() () from /lib64/libstdc++.so.6
#3  0x00007f35b33b3a06 in ?? () from /lib64/libstdc++.so.6
#4  0x00007f35b33b29b9 in ?? () from /lib64/libstdc++.so.6
#5  0x00007f35b33b3624 in __gxx_personality_v0 () from /lib64/libstdc++.so.6
#6  0x00007f35b2e4c8e3 in ?? () from /lib64/libgcc_s.so.1
#7  0x00007f35b2e4cc7b in _Unwind_RaiseException () from /lib64/libgcc_s.so.1
#8  0x00007f35b33b3c46 in __cxa_throw () from /lib64/libstdc++.so.6
#9  0x00007f35b3408b17 in std::__throw_out_of_range(char const*) () from /lib64/libstdc++.so.6
#10 0x0000000000401595 in std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;::_M_range_check (this=0x7f35b2851e60, __n=1) at /usr/include/c++/4.8.2/bits/stl_vector.h:794
#11 0x0000000000401313 in std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;::at (this=0x7f35b2851e60, __n=1) at /usr/include/c++/4.8.2/bits/stl_vector.h:812
#12 0x0000000000400fde in thread_func () at demo.cpp:9
#13 0x000000000040262f in std::_Bind_simple&amp;lt;void (*())()&amp;gt;::_M_invoke&amp;lt;&amp;gt;(std::_Index_tuple&amp;lt;&amp;gt;) (this=0xd32040) at /usr/include/c++/4.8.2/functional:1732
#14 0x0000000000402589 in std::_Bind_simple&amp;lt;void (*())()&amp;gt;::operator()() (this=0xd32040) at /usr/include/c++/4.8.2/functional:1720
#15 0x0000000000402522 in std::thread::_Impl&amp;lt;std::_Bind_simple&amp;lt;void (*())()&amp;gt; &amp;gt;::_M_run() (this=0xd32028) at /usr/include/c++/4.8.2/thread:115
#16 0x00007f35b340a330 in ?? () from /lib64/libstdc++.so.6
#17 0x00007f35b2c28ea5 in start_thread () from /lib64/libpthread.so.0
#18 0x00007f35b2951b0d in clone () from /lib64/libc.so.6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;yHLmREcN&quot;&gt;看#11 的位置已经指出了demo.cpp的第9行，即：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;h_609434714_4&quot; data-into-catalog-status=&quot;&quot;&gt;bRPC社区的案例&lt;/h2&gt;&lt;p data-pid=&quot;iMIpYqfe&quot;&gt;通过前面的解读，我们可以发现发生在回调函数中未被catch的异常所引发的coredump，在不加noexcept声明的情况下，其堆栈信息颇为隐晦。在C++在线服务中，回调函数自然必不可少，不管是多线程或者是协程的代码，都会用到回调函数。比如实现接口的代码都是被RPC框架所调用的回调函数。&lt;/p&gt;&lt;p data-pid=&quot;Kv0Ip8S8&quot;&gt;前面的demo中，回调函数是极为简单的，但在实际生产环境中，业务逻辑十分复杂，因此存在大量的函数嵌套调用，稍不注意异常就会被连续抛到RPC框架的调度逻辑中，此时更难以觉察，甚至会误导业务程序员以为是RPC框架自身的bug。比如在bRPC社区中就多次出现这样的issue：&lt;/p&gt;&lt;p data-pid=&quot;pmdI6T0o&quot;&gt;&lt;b&gt;这些对于bRPC的误解，其实才是本文写作的初衷&lt;/b&gt;。&lt;/p&gt;&lt;p data-pid=&quot;jVyJHBXP&quot;&gt;以&lt;code&gt;#1437&lt;/code&gt;为例，看一下其中的core堆栈信息：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#0 0x00007f635e6fb597 in raise () from /lib64/libc.so.6
#1 0x00007f635e6fcdc8 in abort () from /lib64/libc.so.6
#2 0x00007f635f0029d5 in __gnu_cxx::__verbose_terminate_handler() () from /lib64/libstdc++.so.6
#3 0x00007f635f000946 in ?? () from /lib64/libstdc++.so.6
#4 0x00007f635efff909 in ?? () from /lib64/libstdc++.so.6
#5 0x00007f635f000574 in __gxx_personality_v0 () from /lib64/libstdc++.so.6
#6 0x00007f635ea99903 in ?? () from /lib64/libgcc_s.so.1
#7 0x00007f635ea99e37 in _Unwind_Resume () from /lib64/libgcc_s.so.1
#8 0x000056490472bc40 in operator() (this=, obj=) at incubator-brpc-0.9.7/src/brpc/destroyable.h:35
#9 ~unique_ptr (this=, __in_chrg=) at /usr/include/c++/4.8.2/bits/unique_ptr.h:184
#10 ~DestroyingPtr (this=, __in_chrg=) at incubator-brpc-0.9.7/src/brpc/destroyable.h:41
#11 brpc::policy::ProcessNsheadRequest (msg_base=) at incubator-brpc-0.9.7/src/brpc/policy/nshead_protocol.cpp:325
#12 0x00005649046e7eda in brpc::ProcessInputMessage (void_arg=void_arg@entry=0x5649087f8840) at incubator-brpc-0.9.7/src/brpc/input_messenger.cpp:135
#13 0x00005649046e8bf3 in operator() (this=, last_msg=0x5649087f8840) at incubator-brpc-0.9.7/src/brpc/input_messenger.cpp:141
#14 brpc::InputMessenger::OnNewMessages (m=0x7f5fa8f07040) at /usr/include/c++/4.8.2/bits/unique_ptr.h:184
#15 0x000056490479339d in brpc::Socket::ProcessEvent (arg=0x7f5fa8f07040) at incubator-brpc-0.9.7/src/brpc/socket.cpp:1017
#16 0x00005649046bcaca in bthread::TaskGroup::task_runner (skip_remained=skip_remained@entry=1) at incubator-brpc-0.9.7/src/bthread/task_group.cpp:296
#17 0x00005649046bcdcb in bthread::TaskGroup::run_main_task (this=this@entry=0x5649085aa4e0) at incubator-brpc-0.9.7/src/bthread/task_group.cpp:157
#18 0x00005649046b720e in bthread::TaskControl::worker_thread (arg=0x564907f066e0) at incubator-brpc-0.9.7/src/bthread/task_control.cpp:76
#19 0x00007f635f2b2dc5 in start_thread () from /lib64/libpthread.so.0
#20 0x00007f635e7c04dd in clone () from /lib64/libc.so.6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;5WpgVTsv&quot;&gt;通过&lt;code&gt;ProcessNsheadRequest()&lt;/code&gt;这个函数，可知这是一个nshead协议的bRPC服务，nshead是百度内部一个古老的RPC协议，bRPC也支持该协议。如果是更通用的baidu_std协议的bRPC服务，那么堆栈信息中应该是&lt;code&gt;ProcessRpcRequest()&lt;/code&gt;，比如issue&lt;code&gt;#165&lt;/code&gt;。&lt;/p&gt;&lt;p data-pid=&quot;KQLUL0rG&quot;&gt;直观来看，确实是core在了bthread调度的地方，&lt;code&gt;run_main_task() -&amp;gt; task_runner() -&amp;gt; ProcessEvent() -&amp;gt; OnNewMessages()&lt;/code&gt;  因此导致bRPC的使用者，将矛头直指bRPC，但真相并非如此。其本质是接口service的业务实现中出现了未被catch的异常。&lt;/p&gt;&lt;p data-pid=&quot;uSjGvMeC&quot;&gt;但具体是什么代码抛出的异常，其实仍然难以排查，如果是增量上线引入的代码，通过review本次上线的代码应该可以发现端倪。我们应该勤于在自己的业务函数中加上noexcept声明，这样更为及时地获取准确的coredump堆栈信息。但若要避免线上经常出现此类问题，则需要我们养成一个好编码习惯，请继续阅读。&lt;/p&gt;&lt;h2 id=&quot;h_609434714_5&quot; data-into-catalog-status=&quot;&quot;&gt;C++在线服务与异常的最佳实践&lt;/h2&gt;&lt;p data-pid=&quot;TVvPspzp&quot;&gt;以下经验不止适用于bRPC服务，其他C++ RPC框架的使用者也应该能从中受益。&lt;/p&gt;&lt;h3 id=&quot;h_609434714_6&quot; data-into-catalog-status=&quot;&quot;&gt;不在服务运行时抛异常&lt;/h3&gt;&lt;p data-pid=&quot;eOp7kw-T&quot;&gt;由于C++的异常规格与Java差异较大，对于是否该使用C++的异常，C++圈子内向来争论不休。&lt;/p&gt;&lt;p data-pid=&quot;5Tc7lOPe&quot;&gt;我个人的经验是：在在线服务中，不应当在服务运行时主动throw异常。这里的服务运行中主要指的是请求处理的业务代码中。虽然异常意味着本次请求已经完全不可能继续正常处理。但若主动抛出异常，而本函数内或函数的整个调用链上都遗漏了对这种异常的catch，那么服务就会core掉。从而导致同期能够正常处理的请求也得不到处理。&lt;/p&gt;&lt;p data-pid=&quot;hDywOrVY&quot;&gt;当然这里说的是单进程多线程/协程的服务，对于多进程单线程处理请求的服务而言，单进程coredump该服务仍然可以继续工作。不过这种多进程的模式在在线服务中不太流行。&lt;/p&gt;&lt;p data-pid=&quot;CNW1lOj8&quot;&gt;另外服务运行时不throw异常还包括一些其他的背景线程。比如服务内有一个词典组件，该组件会定期热加载词典文件。加载过程在运行在一个单独的线程中的，这种线程内的函数也要避免throw异常。&lt;/p&gt;&lt;p data-pid=&quot;yUKXA0hw&quot;&gt;当然凡事并无绝对，受限于业务场景，有些时候也存在一些&lt;b&gt;workaround&lt;/b&gt;。下文会有讨论。&lt;/p&gt;&lt;h3 id=&quot;h_609434714_7&quot; data-into-catalog-status=&quot;&quot;&gt;服务启动时可以抛异常&lt;/h3&gt;&lt;p data-pid=&quot;QmA1KZT1&quot;&gt;对于一个在线服务而言，除了正常的运行时业务代码，还有一部分代码是在服务启动时去throw异常。所谓的服务启动时，就是该服务在正常处理外部请求之前，要先做各类初始化操作（比如各类组件的初始化），所以该阶段也可以称作初始化阶段。此时由于并不处理请求，因此可以抛出异常，直截了当地终止服务。彼时查看coredump堆栈，可以快速发现哪一处初始化失败了。&lt;/p&gt;&lt;h3 id=&quot;h_609434714_8&quot; data-into-catalog-status=&quot;&quot;&gt;勤于给函数加上noexcept声明&lt;/h3&gt;&lt;p data-pid=&quot;IbdawaAp&quot;&gt;即使遵守了前面的准则，我们不主动throw异常，但未必能完全规避异常。比如在使用标准库或者某些第三方库的时候，仍然有可能抛出异常。这时就需要我们在可能抛异常的第一现场加上异常对应的catch逻辑，从而避免其继续跑到上层调用的函数中。&lt;/p&gt;&lt;p data-pid=&quot;gr9rxlm1&quot;&gt;因此我们要勤于给函数加上noexcept声明，当然无差别的noexcept声明，确实会让代码略显冗余。确认哪些函数是必要添加的位置，从勤于变成善于，这需要一些经验。当然无差别的noexcept也并非不可取。&lt;/p&gt;&lt;h3 id=&quot;h_609434714_9&quot; data-into-catalog-status=&quot;&quot;&gt;lambda表达式添加noexcept声明&lt;/h3&gt;&lt;p data-pid=&quot;yF9na5-0&quot;&gt;除了普通函数、成员函数外，lambda函数也可以添加noexcept声明。比如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;/&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread_func start ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//vec.push_back(1);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;c1&quot;&gt;//vec.push_back(2);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_609434714_10&quot; data-into-catalog-status=&quot;&quot;&gt;兜底：service函数加上noexcept&lt;/h3&gt;&lt;p data-pid=&quot;Q-4mq9PS&quot;&gt;以bRPC的echo_server为例，下面是一个提供Echo接口的服务。实现该接口的执行逻辑就是自定义类型继承proto生成的Service父类，然后覆写虚函数Echo。这时我们可以该这个Echo函数加一下noexcept声明。&lt;/p&gt;&lt;p data-pid=&quot;UggIHGb9&quot;&gt;虽然抛出异常的代码未必就在Echo中，而可能是Echo层层调用的千里之外的某个函数中。但加上noexcept之后，当业务代码抛出异常时，也不会让人误以为的core在RPC框架中，避免干扰排查方向。故而是一种兜底的做法。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EchoServiceImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EchoService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EchoServiceImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EchoServiceImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protobuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RpcController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntl_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EchoRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protobuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_609434714_11&quot; data-into-catalog-status=&quot;&quot;&gt;是否应该使用标准库/第三方库中会抛出异常的函数？&lt;/h3&gt;&lt;p data-pid=&quot;nGV2Y25-&quot;&gt;我们需要熟悉哪些标准库的函数或者第三方库的函数会抛异常。比如STL容器中at()函数都是会做越界检查的，会抛异常。我个人强烈建议程序员自己做边界检查，避免使用at()。比如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 使用v[i]
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 使用value
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;yNBxdSyO&quot;&gt;当然这样严格的使用限制虽然避免了线上coredump的风险，但是可能会导致自己业务逻辑的bug无法被发现。比如在你预期的逻辑中，使用&lt;code&gt;v[i]&lt;/code&gt;或&lt;code&gt;m[key]&lt;/code&gt;的时候永远不会越界。但是你在实现时考虑不周，在某些极少数的边界情况出现了越界。彼时由于做了边界检查规避了coredump，导致功能上线了很长时间，而未发现有bug。这后果有时候可能更严重。&lt;/p&gt;&lt;p data-pid=&quot;Q57pxsIY&quot;&gt;我们也可以给上面的if都补一个else去做日志打印或者报警之类的功能，但如果想更快发现bug，避免bug产生实际影响，那么我建议你在这种情况下，使用at()，并且给整个函数加上noexcept声明，从而让coredump快速定位。这也就是我前面提到的『不在服务时抛异常』的一些workaround情况。&lt;/p&gt;&lt;h2 id=&quot;h_609434714_12&quot; data-into-catalog-status=&quot;&quot;&gt;noexcept specifier&lt;/h2&gt;&lt;h3 id=&quot;h_609434714_13&quot; data-into-catalog-status=&quot;&quot;&gt;基本介绍&lt;/h3&gt;&lt;p data-pid=&quot;H1_nvAaa&quot;&gt;前面我所提到的在函数声明中加入noexcept声明的用法，被称为&lt;code&gt;noexcept specifier&lt;/code&gt;。其实这只是noexcept这个关键字的其中一个用法，还有另外一个用法，我们稍后会讲。先关注&lt;code&gt;noexcept specifier&lt;/code&gt;。可以参考：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//en.cppreference.com/w/cpp/language/noexcept_spec&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-text=&quot;noexcept specifier (since C++11)&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p data-pid=&quot;2aU9tzE8&quot;&gt;所谓noexcept，其实是noexcept(true)的简化，同样可以声明成noexcept(false)表示可能会抛异常。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 等价于 void foo() noexcept;
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 基本等价于 void bar();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;6DhMaosg&quot;&gt;自定义函数在没有加noexcept或noexcept(true)声明的时候，其默认是noexcept(false)。但对于一些特殊函数即使在没有显式添加noexcept声明时，也可能是noexcept(true)的。比如所有析构函数在C++11以后默认是noexcept的。这是语法规范的一部分。当然你也可以显式地修改它：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;lPzCJShp&quot;&gt;&lt;b&gt;注意，本文以下内容中在未特殊指明的时候，所说的noexcept声明，都指的是noexcept(true)含义的noexcept声明。&lt;/b&gt;&lt;/p&gt;&lt;h3 id=&quot;h_609434714_14&quot; data-into-catalog-status=&quot;&quot;&gt;noexcept与多态&lt;/h3&gt;&lt;p data-pid=&quot;PBYYfbO1&quot;&gt;如果在类中把某个虚函数声明成noexcept，那么在继承这个类的子类中，其同名函数必须也要声明成noexcept，否则编译直接失败。&lt;/p&gt;&lt;p data-pid=&quot;2Ard6HKz&quot;&gt;这对于框架与组件库的设计者来说是一个极好的功能，方便限制住使用方在实现子类的时候不会漏掉noexcept，从而减少后续排查coredump的麻烦。但是请注意，对于框架和组件库中一些已有的函数如果之前没有加noexcept，后续就不要再加了。因为会破坏前向兼容性，导致使用者存量的代码无法编译通过！&lt;/p&gt;&lt;p data-pid=&quot;eDuGKsjb&quot;&gt;因此作为框架与组件库的设计者应该在第一次释出新函数接口的时候，就考虑加上noexcept声明。&lt;/p&gt;&lt;p data-pid=&quot;V9wa-yNz&quot;&gt;再说个题外话，当在子类中需要覆写的虚函数同时使用override和noexcept的时候，要保证noexcept在前，override在后。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_609434714_15&quot; data-into-catalog-status=&quot;&quot;&gt;noexcept与直接throw&lt;/h3&gt;&lt;p data-pid=&quot;12CEoEK7&quot;&gt;通常当你给一个函数加上&lt;code&gt;noexcept&lt;/code&gt;声明的时候，就不应该在这个函数中再显式地&lt;code&gt;throw&lt;/code&gt;异常了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;... error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;ZKxtTca2&quot;&gt;对于高版本g++编译的时候会出现编译警告：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;In &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; ‘void foo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;’:
warning: throw will always call terminate&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-Wterminate&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
     throw runtime_error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;... error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;OF4bjPRN&quot;&gt;如果开启g++的&lt;code&gt;-Werror&lt;/code&gt;、&lt;code&gt;-Werror=terminate&lt;/code&gt;编译选项，则会直接编译失败。 值得一提的是g++4.8是没有这个编译检查的，不会有编译警告或者导致编译失败。具体从哪个版本引入的这项检查，我没有去深究，至少我用过的g++7是有的。&lt;/p&gt;&lt;p data-pid=&quot;kDQJAIgn&quot;&gt;当然如果在noexcept(true)函数中调用了一个内部会throw异常的函数，这种情况是不会编译警告或编译失败的。&lt;/p&gt;&lt;h3 id=&quot;h_609434714_16&quot; data-into-catalog-status=&quot;&quot;&gt;noexcept与函数的声明与定义&lt;/h3&gt;&lt;p data-pid=&quot;4xEH1aoh&quot;&gt;当函数声明与定义分离时，如果在声明函数的头文件中的加入了noexcept声明。那么在定义函数的源文件中也要加上noexcept。而前面我们所提到的override关键字在函数声明与定义分离的时候，只能在函数声明的时候添加！&lt;/p&gt;&lt;h2 id=&quot;h_609434714_17&quot; data-into-catalog-status=&quot;&quot;&gt;noexcept operator&lt;/h2&gt;&lt;p data-pid=&quot;fLHls5Yo&quot;&gt;前面提到的noexcept用法都是&lt;code&gt;noexcept specifier&lt;/code&gt;，其实它还有另外一个用法是&lt;code&gt;noexcept operator&lt;/code&gt;，用于判定一个表达式是否是noexcept的。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;/&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 或者 void bar() {
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo() check noexcept:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar() check noexcept:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;G3CMlcdu&quot;&gt;运行后输出：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;foo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; check noexcept:1
bar&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; check noexcept:0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;awyzd2xz&quot;&gt;注意，&lt;code&gt;noexcept operator&lt;/code&gt;判断是一个表达式，不是函数。所以要使用&lt;code&gt;noexcept(foo())&lt;/code&gt;而不是&lt;code&gt;noexcept(foo)&lt;/code&gt;。其实这不难理解，因为foo本身可能存在重载：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;/&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo() check noexcept:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo(1) check noexcept:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;QNaP2wGR&quot;&gt;运行后输出：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;foo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; check noexcept:1
foo&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; check noexcept:0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;FcQ9iERn&quot;&gt;另外尽管这个例子中我是用cout来输出的，但是其实&lt;code&gt;noexcept operator&lt;/code&gt;是在编译期间求值的，也就是说程序运行时&lt;code&gt;noexcept operator&lt;/code&gt;是无开销的。&lt;/p&gt;&lt;p data-pid=&quot;ty6ELI_Z&quot;&gt;不信你可以这样来做一下测试：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;/&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 或者 void bar() {
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; foo is not noexcept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; bar is not noexcept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;dob85MRl&quot;&gt;这个代码在编译阶段就会失败，编译输出：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;error: static assertion failed: bar is not noexcept
     static_assert&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;noexcept&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bar&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot; bar is not noexcept&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;Ii8kGSOk&quot;&gt;&lt;code&gt;noexcept operator&lt;/code&gt;也可以用来检测，类的成员函数，前面我们提到过类的析构函数默认都是noexcept(true)的，对于类中其他默认的函数，在不加声明的时候具体是noexcept(true)还是noexcept(false)，是比较复杂的。在本文中不过度展开了，有兴趣可以阅读： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.cppreference.com/w/cpp/language/noexcept&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;en.cppreference.com/w/c&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;pp/language/noexcept&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;h_609434714_18&quot; data-into-catalog-status=&quot;&quot;&gt;noexcept不是coredump万金油!&lt;/h2&gt;&lt;p data-pid=&quot;K7wwkTYe&quot;&gt;请注意虽然本文标题十分&lt;b&gt;标题党&lt;/b&gt;地使用了『一剑破万法』的说法，但是这个『万法』仅仅指的是各类C++异常（Exception)，对于其他原因导致的coredump，比如访问非法内存地址触发coredump，noexcept并不会有太大帮助！&lt;/p&gt;&lt;p data-pid=&quot;gb-VaGXM&quot;&gt;所以noexcept并不是排查coredump的万金油，它只对异常导致的coredump有效。&lt;/p&gt;&lt;h2 id=&quot;h_609434714_19&quot; data-into-catalog-status=&quot;&quot;&gt;高版本gcc/gdb能解决问题吗？&lt;/h2&gt;&lt;p data-pid=&quot;7U1ZRCmc&quot;&gt;高版本的gcc/g++和gdb对于回调函数中异常没被catch导致的coredump堆栈不清晰的问题有优化吗？来做个测试。我这里有一个gcc 9.4，gdb 9.2的环境。&lt;/p&gt;&lt;p data-pid=&quot;EwYkGTYA&quot;&gt;先试一下前面提到的知友的那个未加noexcept声明的demo代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cp&quot;/&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;thread_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread_func start ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//vec.push_back(1);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;c1&quot;&gt;//vec.push_back(2);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;W01XRlpL&quot;&gt;加上-g参数编译，重新触发coredump，进行gdb调试：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#1  0x00007fa0eec91859 in __GI_abort () at abort.c:79&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#2  0x00007fa0eef3d911 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#3  0x00007fa0eef4938c in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#4  0x00007fa0eef493f7 in std::terminate() () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#5  0x00007fa0eef496a9 in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#6  0x00007fa0eef403ab in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#7  0x00005621d5f5b8fc in std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;::_M_range_check (this=0x7fa0eeb19de0, __n=1)&lt;/span&gt;
    at /usr/include/c++/9/bits/stl_vector.h:1070
&lt;span class=&quot;c1&quot;&gt;#8  0x00005621d5f5b6ed in std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;::at (this=0x7fa0eeb19de0, __n=1) at /usr/include/c++/9/bits/stl_vector.h:1091&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#9  0x00005621d5f5b36a in thread_func () at zhiyou.cpp:9&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#10 0x00005621d5f5c15e in std::__invoke_impl&amp;lt;void, void (*)()&amp;gt; (__f=@0x5621d6810eb8: 0x5621d5f5b309 &amp;lt;thread_func()&amp;gt;)&lt;/span&gt;
    at /usr/include/c++/9/bits/invoke.h:60
&lt;span class=&quot;c1&quot;&gt;#11 0x00005621d5f5c0f6 in std::__invoke&amp;lt;void (*)()&amp;gt; (__fn=@0x5621d6810eb8: 0x5621d5f5b309 &amp;lt;thread_func()&amp;gt;) at /usr/include/c++/9/bits/invoke.h:95&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#12 0x00005621d5f5c088 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::_M_invoke&amp;lt;0ul&amp;gt; (this=0x5621d6810eb8) at /usr/include/c++/9/thread:244&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#13 0x00005621d5f5c045 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::operator() (this=0x5621d6810eb8) at /usr/include/c++/9/thread:251&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#14 0x00005621d5f5c016 in std::thread::_State_impl&amp;lt;std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt; &amp;gt;::_M_run (this=0x5621d6810eb0)&lt;/span&gt;
    at /usr/include/c++/9/thread:195
&lt;span class=&quot;c1&quot;&gt;#15 0x00007fa0eef75de4 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#16 0x00007fa0eee69609 in start_thread (arg=&amp;lt;optimized out&amp;gt;) at pthread_create.c:477&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#17 0x00007fa0eed8e133 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;iINDJ1et&quot;&gt;可以看出 #7 #8 能看出是at导致的越界异常，#9 指明了行号。看起来似乎不错，但在复杂的回调逻辑中表现如何呢？我们来试一下bRPC的echo_server的代码，原版代码：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/apache/brpc/blob/master/example/echo_c%252B%252B/server.cpp&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/apache/brpc/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;blob/master/example/echo_c%2B%2B/server.cpp&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;Wlr1qJOn&quot;&gt;在Echo接口函数的底部中加上一个会抛出异常的代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;        &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protobuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RpcController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntl_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EchoRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protobuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This object helps you to call done-&amp;gt;Run() in RAII style. If you need
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;c1&quot;&gt;// to process the request asynchronously, pass done_guard.release().
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;n&quot;&gt;brpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClosureGuard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done_guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;brpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cntl_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// The purpose of following logs is to help you to understand
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;c1&quot;&gt;// how clients interact with servers more intuitively. You should 
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;c1&quot;&gt;// remove these logs in performance-sensitive servers.
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Received request[log_id=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;] from &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote_side&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; to &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_side&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; (attached=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Fill response.
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// You can compress the response by setting Controller, but be aware
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;c1&quot;&gt;// that compression may be costly, evaluate before turning on.
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;c1&quot;&gt;// cntl-&amp;gt;set_response_compress_type(brpc::COMPRESS_TYPE_GZIP);
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FLAGS_echo_attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Set attachment which is wired to network directly instead of
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;            &lt;span class=&quot;c1&quot;&gt;// being serialized into protobuf messages.
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;            &lt;span class=&quot;n&quot;&gt;cntl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cntl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 抛出越界异常！
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;27v66Ose&quot;&gt;来进行编译，启动echo_server。接着启动echo_client会向它发请求，echo_server出现了coredump，gdb进行调试。coredump堆栈如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#1  0x00007f8be87d5859 in __GI_abort () at abort.c:79&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#2  0x00007f8be8baf911 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#3  0x00007f8be8bbb38c in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#4  0x00007f8be8bba369 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#5  0x00007f8be8bbad21 in __gxx_personality_v0 () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#6  0x00007f8be89b5bef in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#7  0x00007f8be89b65aa in _Unwind_Resume () from /lib/x86_64-linux-gnu/libgcc_s.so.1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#8  0x00005609e57d96f3 in brpc::detail::Destroyer&amp;lt;brpc::policy::MostCommonMessage&amp;gt;::operator() (this=&amp;lt;optimized out&amp;gt;, obj=&amp;lt;optimized out&amp;gt;)&lt;/span&gt;
    at ./src/brpc/destroyable.h:35
&lt;span class=&quot;c1&quot;&gt;#9  std::unique_ptr&amp;lt;brpc::policy::MostCommonMessage, brpc::detail::Destroyer&amp;lt;brpc::policy::MostCommonMessage&amp;gt; &amp;gt;::~unique_ptr (this=&amp;lt;optimized out&amp;gt;, &lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;__in_chrg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;optimized out&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at /usr/include/c++/9/bits/unique_ptr.h:292
&lt;span class=&quot;c1&quot;&gt;#10 brpc::DestroyingPtr&amp;lt;brpc::policy::MostCommonMessage&amp;gt;::~DestroyingPtr (this=&amp;lt;optimized out&amp;gt;, __in_chrg=&amp;lt;optimized out&amp;gt;)&lt;/span&gt;
    at ./src/brpc/destroyable.h:41
&lt;span class=&quot;c1&quot;&gt;#11 brpc::policy::ProcessRpcRequest (msg_base=&amp;lt;optimized out&amp;gt;) at src/brpc/policy/baidu_rpc_protocol.cpp:314&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#12 0x00005609e59663db in brpc::ProcessInputMessage (void_arg=&amp;lt;optimized out&amp;gt;) at src/brpc/input_messenger.cpp:159&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#13 0x00005609e5966f35 in brpc::InputMessenger::InputMessageClosure::~InputMessageClosure (this=&amp;lt;optimized out&amp;gt;, __in_chrg=&amp;lt;optimized out&amp;gt;)&lt;/span&gt;
    at src/brpc/input_messenger.cpp:194
&lt;span class=&quot;c1&quot;&gt;#14 0x00005609e5967a6b in brpc::InputMessenger::OnNewMessages (m=0x7f8bc801aea0) at /usr/include/c++/9/bits/atomic_base.h:493&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#15 0x00005609e5b39002 in brpc::Socket::ProcessEvent (arg=0x7f8bc801aea0) at src/brpc/socket.cpp:1093&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#16 0x00005609e5aa682f in bthread::TaskGroup::task_runner (skip_remained=&amp;lt;optimized out&amp;gt;) at src/bthread/task_group.cpp:298&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#17 0x00005609e5a9ddb1 in bthread_make_fcontext () at /usr/include/c++/9/bits/stl_iterator.h:803&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;Eel9wX8e&quot;&gt;发现并不清晰，对于大多数业务程序员来说颇具迷惑性。我们在Echo接口函数加上noexcept声明，再重走一遍上述流程，看一下新的coredump堆栈：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#1  0x00007f987922d859 in __GI_abort () at abort.c:79&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#2  0x00007f9879607911 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#3  0x00007f987961338c in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#4  0x00007f9879612369 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#5  0x00007f9879612d21 in __gxx_personality_v0 () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#6  0x00007f987940dbef in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#7  0x00007f987940e281 in _Unwind_RaiseException () from /lib/x86_64-linux-gnu/libgcc_s.so.1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#8  0x00007f987961369c in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#9  0x00007f987960a3ab in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#10 0x000055e51d9cf0d6 in std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;::_M_range_check (__n=0, this=&amp;lt;synthetic pointer&amp;gt;)&lt;/span&gt;
    at /usr/include/c++/9/bits/stl_vector.h:1089
&lt;span class=&quot;c1&quot;&gt;#11 std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;::at (__n=0, this=&amp;lt;synthetic pointer&amp;gt;) at /usr/include/c++/9/bits/stl_vector.h:1091&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#12 example::EchoServiceImpl::Echo (this=&amp;lt;optimized out&amp;gt;, cntl_base=0x7f9854027df0, request=0x7f9854028120, response=0x7f9854029950, &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;optimized out&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at server.cpp:73
&lt;span class=&quot;c1&quot;&gt;#13 0x000055e51d9cd39a in example::EchoService::CallMethod (method=&amp;lt;optimized out&amp;gt;, done=&amp;lt;optimized out&amp;gt;, response=&amp;lt;optimized out&amp;gt;, &lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;optimized out&amp;gt;, &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;optimized out&amp;gt;, &lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;optimized out&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at echo.pb.cc:671
&lt;span class=&quot;c1&quot;&gt;#14 example::EchoService::CallMethod (this=&amp;lt;optimized out&amp;gt;, method=&amp;lt;optimized out&amp;gt;, controller=&amp;lt;optimized out&amp;gt;, request=&amp;lt;optimized out&amp;gt;, &lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;optimized out&amp;gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;optimized out&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at echo.pb.cc:663
&lt;span class=&quot;c1&quot;&gt;#15 0x000055e51dbf37a0 in brpc::policy::ProcessRpcRequest (msg_base=0x7f985401f460) at /usr/include/c++/9/bits/unique_ptr.h:381&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#16 0x000055e51db3c37b in brpc::ProcessInputMessage (void_arg=&amp;lt;optimized out&amp;gt;) at src/brpc/input_messenger.cpp:159&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#17 0x000055e51db3ced5 in brpc::InputMessenger::InputMessageClosure::~InputMessageClosure (this=&amp;lt;optimized out&amp;gt;, __in_chrg=&amp;lt;optimized out&amp;gt;)&lt;/span&gt;
    at src/brpc/input_messenger.cpp:194
&lt;span class=&quot;c1&quot;&gt;#18 0x000055e51db3da0b in brpc::InputMessenger::OnNewMessages (m=0x7f986001aea0) at /usr/include/c++/9/bits/atomic_base.h:493&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#19 0x000055e51dd0efa2 in brpc::Socket::ProcessEvent (arg=0x7f986001aea0) at src/brpc/socket.cpp:1093&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#20 0x000055e51dc7c7cf in bthread::TaskGroup::task_runner (skip_remained=&amp;lt;optimized out&amp;gt;) at src/bthread/task_group.cpp:298&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#21 0x000055e51dc73d51 in bthread_make_fcontext () at /usr/include/c++/9/bits/stl_iterator.h:803&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;meBqqTEY&quot;&gt;可以看出 #10，#11，#12清晰的展示出了越界异常，以及问题代码的行号server.cpp:73，这一行就是std::cout&amp;lt;&amp;lt; v.at(0)&amp;lt;&amp;lt; std::endl; 所在的行。&lt;/p&gt;&lt;p data-pid=&quot;irzVzLgh&quot;&gt;所以说高版本的gcc/g++、gdb对于本文所探讨的问题确实有优化，但对于复杂的回调链路仍旧捉肩见肘，因此noexcept依旧是我们的首选。当然更高版本的gcc/g++，gdb我就没有环境测试了，其他同学有其他版本的测试结论可以评论回复。不过对于生产环境而言，升级编译器版本往往并不是自己或者自己团队所能决定的了，这是一项浩大的变更工作。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>