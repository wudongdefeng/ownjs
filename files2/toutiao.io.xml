<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>40d4260ef6f939069d33e531a6b88b19</guid>
<title>Python爬虫之BeautifulSoup4使用</title>
<link>https://toutiao.io/k/3nzbc9s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;钢铁知识库，一个学习python爬虫、数据分析的知识库。人生苦短，快用python。&lt;/p&gt;

&lt;p&gt;上一章我们讲解针对结构化的&lt;code&gt;html&lt;/code&gt;、&lt;code&gt;xml&lt;/code&gt;数据，使用&lt;code&gt;Xpath&lt;/code&gt;实现网页内容爬取。本章我们再来聊另一个高效的神器：&lt;code&gt;Beautiful Soup4&lt;/code&gt;。相比于传统正则表达方式去解析网页源代码，这个就简单得多，实践是检验真理的唯一标准，话不多说直接上号开搞验证。&lt;/p&gt;

&lt;h2&gt;Beautiful Soup 简介&lt;/h2&gt;

&lt;p&gt;首先说说BeautifulSoup是什么。简单来说，这是Python的一个HTML或XML的解析库，我们可以用它方便从网页中提取数据，官方解释如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;BeautifulSoup 提供一些简单的、Python 式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。 BeautifulSoup 自动将输入文档转换为 Unicode 编码，输出文档转换为 utf-8 编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时你仅仅需要说明一下原始编码方式就可以了。 BeautifulSoup 已成为和 lxml、html5lib 一样出色的 Python 解释器，为用户灵活地提供不同的解析策略或强劲的速度。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，利用它可以省去很多繁琐的提取工作，提高解析效率。&lt;/p&gt;

&lt;h2&gt;BeautifulSoup 安装&lt;/h2&gt;

&lt;p&gt;BeautifulSoup3 目前已经停止开发，推荐使用 BeautifulSoup4，不过它也被移植到&lt;code&gt;bs4&lt;/code&gt;了，也就是说导入时我们需要&lt;code&gt;import bs4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在开始之前，请确保已经正确安装&lt;code&gt;beautifulsoup4&lt;/code&gt;和&lt;code&gt;lxml&lt;/code&gt;，使用pip安装命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install beautifulsoup4
pip install lxml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解析器&lt;/h2&gt;

&lt;p&gt;BeautifulSoup在解析时实际上依赖解析器。除了支持Python标准库中的HTML解析器，还支持一些第三方的解析器，如果不安装它，则Python会使用默认的解析器。&lt;/p&gt;

&lt;p&gt;下面列出BeautifulSoup支持的解析器&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;解析器&lt;/th&gt;
&lt;th&gt;使用方法&lt;/th&gt;
&lt;th&gt;优势&lt;/th&gt;
&lt;th&gt;劣势&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python 标准库&lt;/td&gt;
&lt;td&gt;BeautifulSoup(markup, &quot;html.parser&quot;)&lt;/td&gt;
&lt;td&gt;Python 的内置标准库、执行速度适中 、文档容错能力强&lt;/td&gt;
&lt;td&gt;Python 2.7.3 or 3.2.2) 前的版本中文容错能力差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LXML HTML 解析器&lt;/td&gt;
&lt;td&gt;BeautifulSoup(markup, &quot;lxml&quot;)&lt;/td&gt;
&lt;td&gt;速度快、文档容错能力强&lt;/td&gt;
&lt;td&gt;需要安装 C 语言库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LXML XML 解析器&lt;/td&gt;
&lt;td&gt;BeautifulSoup(markup, &quot;xml&quot;)&lt;/td&gt;
&lt;td&gt;速度快、唯一支持 XML 的解析器&lt;/td&gt;
&lt;td&gt;需要安装 C 语言库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;html5lib&lt;/td&gt;
&lt;td&gt;BeautifulSoup(markup, &quot;html5lib&quot;)&lt;/td&gt;
&lt;td&gt;最好的容错性、以浏览器的方式解析文档、生成 HTML5 格式的文档&lt;/td&gt;
&lt;td&gt;速度慢、不依赖外部扩展&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;通过上面可以看出，lxml 有解析HTML和XML的功能，相比默认的HTML解析器更加强大，速度，容错能力强。&lt;/p&gt;

&lt;p&gt;推荐使用它，下面统一使用lxml进行演示。使用时只需在初始化时第二个参数改为 lxml 即可。&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;from bs4 import BeautifulSoup
soup = BeautifulSoup(&#x27;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&#x27;, &#x27;lxml&#x27;)
print(soup.p.string)
&#x27;&#x27;&#x27;
Hello
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;基本使用&lt;/h2&gt;

&lt;p&gt;下面举个实例来看看BeautifulSoup的基本用法：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;html = &quot;&quot;&quot;
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;The Dormouse&#x27;s story&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&amp;gt;&amp;lt;b&amp;gt;The Dormouse&#x27;s story&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&quot;story&quot;&amp;gt;Once upon a time there were three little sisters; and their names were
&amp;lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&amp;gt;&amp;lt;!-- Elsie --&amp;gt;&amp;lt;/a&amp;gt;,
&amp;lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&amp;gt;Lacie&amp;lt;/a&amp;gt; and
&amp;lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&amp;gt;Tillie&amp;lt;/a&amp;gt;;
and they lived at the bottom of a well.&amp;lt;/p&amp;gt;
&amp;lt;p class=&quot;story&quot;&amp;gt;...&amp;lt;/p&amp;gt;
&quot;&quot;&quot;
from bs4 import BeautifulSoup
soup = BeautifulSoup(html, &#x27;lxml&#x27;)  # 初始化
print(soup.prettify())
print(soup.title.string)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果，你们也可以将上面代码复制到编辑器执行看看：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;
   The Dormouse&#x27;s story
  &amp;lt;/title&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
  &amp;lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&amp;gt;
   &amp;lt;b&amp;gt;
    The Dormouse&#x27;s story
   &amp;lt;/b&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p class=&quot;story&quot;&amp;gt;
   Once upon a time there were three little sisters; and their names were
   &amp;lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&amp;gt;
    &amp;lt;!-- Elsie --&amp;gt;
   &amp;lt;/a&amp;gt;
   ,
   &amp;lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&amp;gt;
    Lacie
   &amp;lt;/a&amp;gt;
   and
   &amp;lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&amp;gt;
    Tillie
   &amp;lt;/a&amp;gt;
   ;
and they lived at the bottom of a well.
  &amp;lt;/p&amp;gt;
  &amp;lt;p class=&quot;story&quot;&amp;gt;
   ...
  &amp;lt;/p&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
The Dormouse&#x27;s story
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先声明一个html变量，它是一个HTML字符串，注意html和body标签都没有闭合。&lt;/p&gt;

&lt;p&gt;经过初始化，使用&lt;code&gt;prettify()&lt;/code&gt;方法把要解析的字符串以标准缩进格式输出，发现结果中自动补全了html和body标签。这一步不是&lt;code&gt;prettify()&lt;/code&gt;方法做的，而是在初始化BeautifulSoup时就完成了。然后调用&lt;code&gt;soup.title.string&lt;/code&gt;拿到title里面的文本内容。&lt;/p&gt;

&lt;p&gt;通过简单调用几个属性完成文本提取，是不是非常方便呢？&lt;/p&gt;

&lt;h2&gt;节点选择器&lt;/h2&gt;

&lt;p&gt;直接调用节点的名称就可以选择节点元素，再调用 string 属性就可以得到节点内的文本了，这种选择方式速度非常快。如果单个节点结构层次非常清晰，可以选用这种方式来解析。&lt;/p&gt;

&lt;h3&gt;选择元素&lt;/h3&gt;

&lt;p&gt;还是以上面的HTML代码为例，详细说明选择元素的方法：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;from bs4 import BeautifulSoup
soup = BeautifulSoup(html, &#x27;lxml&#x27;)
print(soup.title)
print(type(soup.title))
print(soup.title.string)
print(soup.head)
print(soup.p)
&#x27;&#x27;&#x27;
&amp;lt;title&amp;gt;The Dormouse&#x27;s story&amp;lt;/title&amp;gt;
&amp;lt;class &#x27;bs4.element.Tag&#x27;&amp;gt;
The Dormouse&#x27;s story
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;The Dormouse&#x27;s story&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&amp;gt;&amp;lt;b&amp;gt;The Dormouse&#x27;s story&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先输出title节点的选择结果，包含标签。&lt;/p&gt;

&lt;p&gt;接下来输出它的类型，是一个&lt;code&gt;bs4.element.Tag&lt;/code&gt;类型，Tag具有一些属性，比如string。&lt;/p&gt;

&lt;p&gt;调用string属性可以看到输出节点的文本内容。&lt;/p&gt;

&lt;p&gt;继续尝试head、p节点。发现p只取了第一个匹配的节点。说明当有多个节点时只取一个。&lt;/p&gt;

&lt;h3&gt;获取属性&lt;/h3&gt;

&lt;p&gt;每个节点可能有多个属性比如id 、class等，选择元素后可以调用attrs获取所有属性：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;print(soup.p.attrs)
print(soup.p.attrs[&#x27;name&#x27;])
&#x27;&#x27;&#x27;
{&#x27;class&#x27;: [&#x27;title&#x27;], &#x27;name&#x27;: &#x27;dromouse&#x27;}
dromouse
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到attrs返回结果是字典，它把选择节点所有属性都组合成一个字典。取值直接按字典方式即可。&lt;/p&gt;

&lt;p&gt;当然还有一种更简单的获取方式：不写attrs，直接在元素后面中括号取值也行：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;print(soup.p[&#x27;name&#x27;])
print(soup.p[&#x27;class&#x27;])
&#x27;&#x27;&#x27;
dromouse
[&#x27;title&#x27;]
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是注意区分：有的返回字符串、有的返回字符串组成的列表。&lt;/p&gt;

&lt;p&gt;对于class，一个节点元素可能有多个class，所以返回的是列表。&lt;/p&gt;

&lt;h3&gt;子节点和子孙节点&lt;/h3&gt;

&lt;p&gt;选取节点元素之后，如果想要获取它的直接子节点，可以调用 contents 属性，示例如下：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;html4 = &quot;&quot;&quot;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;The Dormouse&#x27;s story&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;p class=&quot;story&quot;&amp;gt;
            钢铁知识库
            &amp;lt;a href=&quot;http://a.com&quot; class=&quot;钢铁学数据分析&quot; id=&quot;link1&quot;&amp;gt;
                &amp;lt;span&amp;gt;Elsie&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
            &amp;lt;a href=&quot;http://b.com&quot; class=&quot;钢铁学自动化&quot; id=&quot;link2&quot;&amp;gt;Lacie&amp;lt;/a&amp;gt; 
            and
            &amp;lt;a href=&quot;http://example.com&quot; class=&quot;cccc&quot; id=&quot;link3&quot;&amp;gt;Tillie&amp;lt;/a&amp;gt;
            钢铁学爬虫.
        &amp;lt;/p&amp;gt;
        &amp;lt;p class=&quot;story&quot;&amp;gt;...&amp;lt;/p&amp;gt;
&quot;&quot;&quot;
from bs4 import BeautifulSoup
soup = BeautifulSoup(html4, &#x27;lxml&#x27;)
print(soup.p.contents)
&#x27;&#x27;&#x27;
[&#x27;\n            钢铁知识库\n            &#x27;, &amp;lt;a class=&quot;钢铁学数据分析&quot; href=&quot;http://a.com&quot; id=&quot;link1&quot;&amp;gt;
&amp;lt;span&amp;gt;Elsie&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;, &#x27;\n&#x27;, &amp;lt;a class=&quot;钢铁学自动化&quot; href=&quot;http://b.com&quot; id=&quot;link2&quot;&amp;gt;Lacie&amp;lt;/a&amp;gt;, &#x27; \n            and\n            &#x27;, &amp;lt;a class=&quot;cccc&quot; href=&quot;http://example.com&quot; id=&quot;link3&quot;&amp;gt;Tillie&amp;lt;/a&amp;gt;, &#x27;\n            钢铁学爬虫.\n        &#x27;]

&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到返回结果是列表形式。p 节点里既包含文本，又包含文本，最后统一返回列表。&lt;/p&gt;

&lt;p&gt;需要注意，列表中的每个元素都是 p 节点的直接子节点。比如第一个 a 节点里面的span节点，这相当于子孙节点了，但返回结果并没有单独把span节点列出来。所以说，contents属性得到的结果是直接子节点的列表。&lt;/p&gt;

&lt;p&gt;同样，我们可以调用children属性得到相应的结果：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;from bs4 import BeautifulSoup
soup = BeautifulSoup(html, &#x27;lxml&#x27;)
print(soup.p.children)
for i, child in enumerate(soup.p.children):
    print(i, child)
&#x27;&#x27;&#x27;
&amp;lt;list_iterator object at 0x0000000001D9A1C0&amp;gt;
0 
            钢铁知识库

1 &amp;lt;a class=&quot;钢铁学数据分析&quot; href=&quot;http://a.com&quot; id=&quot;link1&quot;&amp;gt;
&amp;lt;span&amp;gt;Elsie&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
2 

3 &amp;lt;a class=&quot;钢铁学自动化&quot; href=&quot;http://b.com&quot; id=&quot;link2&quot;&amp;gt;Lacie&amp;lt;/a&amp;gt;
4  
            and

5 &amp;lt;a class=&quot;cccc&quot; href=&quot;http://example.com&quot; id=&quot;link3&quot;&amp;gt;Tillie&amp;lt;/a&amp;gt;
6 
            钢铁学爬虫.
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还是同样的 HTML 文本，这里调用了 children 属性来选择，返回结果是生成器类型。接下来，我们用 for 循环输出相应的内容。&lt;/p&gt;

&lt;p&gt;如果要得到所有的子孙节点的话，可以调用 descendants 属性：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;&amp;lt;generator object Tag.descendants at 0x000001D77A90E570&amp;gt;
0 
            钢铁知识库

1 &amp;lt;a class=&quot;钢铁学数据分析&quot; href=&quot;http://a.com&quot; id=&quot;link1&quot;&amp;gt;
&amp;lt;span&amp;gt;Elsie&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
2 

3 &amp;lt;span&amp;gt;Elsie&amp;lt;/span&amp;gt;
4 Elsie
5 

6 

7 &amp;lt;a class=&quot;钢铁学自动化&quot; href=&quot;http://b.com&quot; id=&quot;link2&quot;&amp;gt;Lacie&amp;lt;/a&amp;gt;
8 Lacie
9  
            and

10 &amp;lt;a class=&quot;cccc&quot; href=&quot;http://example.com&quot; id=&quot;link3&quot;&amp;gt;Tillie&amp;lt;/a&amp;gt;
11 Tillie
12 
            钢铁学爬虫.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时返回结果还是生成器。遍历输出一下可以看到，这次的输出结果就包含了 span 节点。descendants 会递归查询所有子节点，得到所有的子孙节点。&lt;/p&gt;

&lt;p&gt;除此之外，还有父节点&lt;code&gt;parent&lt;/code&gt; 和祖先节点&lt;code&gt;parents&lt;/code&gt;，兄弟节点&lt;code&gt;next_sibling&lt;/code&gt;和&lt;code&gt;previous_siblings&lt;/code&gt; 日常用得少不再演示，后续需要自行查官方文档即可。&lt;/p&gt;

&lt;h2&gt;方法选择器&lt;/h2&gt;

&lt;p&gt;前面聊的通过属性选择节点，但如果进行比较复杂的话还是比较繁琐。幸好BeautifulSoup还为我们提供另外一些查询方法，比如find_all 和 find ，调用他们传入相应参数就可以灵活查询。&lt;/p&gt;

&lt;h3&gt;find_all&lt;/h3&gt;

&lt;p&gt;顾名思义，就是查询所有符合条件的元素，可以给它传入一些属性或文本来得到符合条件的元素，功能十分强大。&lt;/p&gt;

&lt;p&gt;它的 API 如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find_all(name , attrs , recursive , text , **kwargs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以根据节点名来查询元素，下面我们用一个实例来感受一下：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;html5=&#x27;&#x27;&#x27;
&amp;lt;div class=&quot;panel&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
        &amp;lt;h4&amp;gt;Hello&amp;lt;/h4&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
        &amp;lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;python&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;java&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&#x27;&#x27;&#x27;
from bs4 import BeautifulSoup
soup = BeautifulSoup(html5, &#x27;lxml&#x27;)
print(soup.find_all(name=&#x27;ul&#x27;))
print(type(soup.find_all(name=&#x27;ul&#x27;)[0]))
&#x27;&#x27;&#x27;
[&amp;lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;, &amp;lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;python&amp;lt;/li&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;java&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;]
&amp;lt;class &#x27;bs4.element.Tag&#x27;&amp;gt;
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到返回了一个列表，分别是两个ul长度为2，且类型依然是bs4.element.Tag类型。&lt;/p&gt;

&lt;p&gt;因为都是Tag类型，所以依然可以继续嵌套查询，还是同样文本，查询ul节点后再继续查询内部li节点。&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;from bs4 import BeautifulSoup
soup = BeautifulSoup(html5, &#x27;lxml&#x27;)
for ul in soup.find_all(name=&#x27;ul&#x27;):
    print(ul.find_all(name=&#x27;li&#x27;))
&#x27;&#x27;&#x27;
[&amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;]
[&amp;lt;li class=&quot;element&quot;&amp;gt;python&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;java&amp;lt;/li&amp;gt;]
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回结果是列表类型，元素依然是Tag类型。&lt;/p&gt;

&lt;p&gt;接下来我们可以遍历每个li获取它的文本：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;for ul in soup.find_all(name=&#x27;ul&#x27;):
    print(ul.find_all(name=&#x27;li&#x27;))
    for li in ul.find_all(name=&#x27;li&#x27;):
        print(li.string)
&#x27;&#x27;&#x27;
[&amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;]
钢铁
知识
仓库
[&amp;lt;li class=&quot;element&quot;&amp;gt;python&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;java&amp;lt;/li&amp;gt;]
python
java
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;find&lt;/h3&gt;

&lt;p&gt;除了 find_all 方法，还有 find 方法，不过 find 方法返回的是单个元素，也就是第一个匹配的元素，而 find_all 返回的是所有匹配的元素组成的列表。示例如下：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;html5=&#x27;&#x27;&#x27;
&amp;lt;div class=&quot;panel&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
        &amp;lt;h4&amp;gt;Hello&amp;lt;/h4&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
        &amp;lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;python&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;java&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&#x27;&#x27;&#x27;
from bs4 import BeautifulSoup
soup = BeautifulSoup(html5, &#x27;lxml&#x27;)
print(soup.find(name=&#x27;ul&#x27;))
print(type(soup.find(name=&#x27;ul&#x27;)))
print(soup.find(class_=&#x27;list&#x27;))


&#x27;&#x27;&#x27;
&amp;lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;class &#x27;bs4.element.Tag&#x27;&amp;gt;
&amp;lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;
&amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回结果不再是列表形式，而是第一个匹配的节点元素，类型依然是 Tag 类型。&lt;/p&gt;

&lt;h3&gt;其它方法&lt;/h3&gt;

&lt;p&gt;另外还有许多的查询方法，用法与前面介绍的 find_all、find 方法完全相同，只不过查询范围不同，在此做一下简单的说明。&lt;/p&gt;

&lt;p&gt;find_parents 和 find_parent：前者返回所有祖先节点，后者返回直接父节点。&lt;/p&gt;

&lt;p&gt;find_next_siblings 和 find_next_sibling：前者返回后面所有的兄弟节点，后者返回后面第一个兄弟节点。&lt;/p&gt;

&lt;p&gt;find_previous_siblings 和 find_previous_sibling：前者返回前面所有的兄弟节点，后者返回前面第一个兄弟节点。&lt;/p&gt;

&lt;p&gt;find_all_next 和 find_next：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。&lt;/p&gt;

&lt;p&gt;find_all_previous 和 find_previous：前者返回节点前所有符合条件的节点，后者返回第一个符合条件的节点。&lt;/p&gt;

&lt;h2&gt;CSS选择器&lt;/h2&gt;

&lt;p&gt;BeautifulSoup还提供了另外一种选择器，CSS选择器。如果对 Web 开发熟悉的话，那么对 CSS 选择器肯定也不陌生。如果不熟悉的话，可以参考 &lt;a href=&quot;http://www.w3school.com.cn/cssref/css_selectors.asp&quot;&gt;http://www.w3school.com.cn/cssref/css_selectors.asp&lt;/a&gt; 了解。&lt;/p&gt;

&lt;p&gt;使用 CSS 选择器，只需要调用 select 方法，传入相应的 CSS 选择器即可，我们用一个实例来感受一下：&lt;/p&gt;

&lt;pre lang=&quot;python&quot;&gt;&lt;code&gt;html5=&#x27;&#x27;&#x27;
&amp;lt;div class=&quot;panel&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
        &amp;lt;h4&amp;gt;Hello&amp;lt;/h4&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
        &amp;lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;python&amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;element&quot;&amp;gt;java&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&#x27;&#x27;&#x27;
from bs4 import BeautifulSoup
soup = BeautifulSoup(html5, &#x27;lxml&#x27;)
print(soup.select(&#x27;.panel .panel-heading&#x27;))
print(soup.select(&#x27;ul li&#x27;))
print(soup.select(&#x27;#list-2 .element&#x27;))
print(type(soup.select(&#x27;ul&#x27;)[0]))
&#x27;&#x27;&#x27;
[&amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
&amp;lt;h4&amp;gt;Hello&amp;lt;/h4&amp;gt;
&amp;lt;/div&amp;gt;]
[&amp;lt;li class=&quot;element&quot;&amp;gt;钢铁&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;知识&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;仓库&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;python&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;java&amp;lt;/li&amp;gt;]
[&amp;lt;li class=&quot;element&quot;&amp;gt;python&amp;lt;/li&amp;gt;, &amp;lt;li class=&quot;element&quot;&amp;gt;java&amp;lt;/li&amp;gt;]
&amp;lt;class &#x27;bs4.element.Tag&#x27;&amp;gt;
&#x27;&#x27;&#x27;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果为所有匹配的节点。例如&lt;code&gt;select(&#x27;ul li&#x27;)&lt;/code&gt;则是所有ul节点下面的所有li节点，返回结果是列表。&lt;/p&gt;

&lt;p&gt;select 方法同样支持嵌套选择(soup.select(&#x27;ul&#x27;))、属性获取(ul[&#x27;id&#x27;])，以及文本获取(li.string/li.get_text())&lt;/p&gt;

&lt;p&gt;---- 钢铁知识库 2022.08.22&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;到此 BeautifulSoup 的使用介绍基本就结束了，最后钢铁知识库做一下简单的总结：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;推荐使用 LXML 解析库，速度快、容错能力强。&lt;/li&gt;
&lt;li&gt;建议使用 find、find_all 方法查询匹配单个结果或者多个结果。&lt;/li&gt;
&lt;li&gt;如果对 CSS 选择器熟悉的话可以使用 select 匹配，可以像Xpath一样匹配所有。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2a41dd14875d6247d4f74c4e68009720</guid>
<title>一文彻底理解Go语言栈内存/堆内存</title>
<link>https://toutiao.io/k/8csj4gy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;&lt;h2 data-line=&quot;4&quot;&gt;&lt;strong&gt;&lt;span&gt;系列导读&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code data-line=&quot;6&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;本文基于64位平台、1Page=8KB、Go1.6&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4148148148148147&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhuZuquZTuGz1icCkzeiaibsvUMJqnMRfNy72uw1NtsQUia3OFIXwbI35mSQRLy9k2VP8kxJib9zxWWJicg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-line=&quot;16&quot;&gt;&lt;/p&gt;&lt;p data-line=&quot;16&quot;&gt;&lt;span&gt;本文为《Go语言轻松进阶》系列第二章「内存与垃圾回收」的第三小节。&lt;span&gt;第二章目录&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;知识预备&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Go内存设计与实现&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Go的垃圾回收原理&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MDEwMDYyOA==&amp;amp;mid=2454619630&amp;amp;idx=1&amp;amp;sn=2aa429b75e4300ea6e7b841885256623&amp;amp;chksm=87aae315b0dd6a03c6e5ff32fadabcf09cd9b496ab3f45c24ff5d0b927aa2be045bba39f56c3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;TCMalloc内存分配原理(完结)&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;(未开始)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;查看本系列完整内容请访问&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n347&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n694&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;http://tigerb.cn/go/#/kernal/&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 cid=&quot;n3&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;本文导读&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;p cid=&quot;n4&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;本文将从6个方向层层递进，帮助大家彻底理解Go语言的栈内存和堆内存：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n5&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n7&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;计算机为什么需要内存？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n9&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为什么需要栈内存？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n11&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为什么需要堆内存？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n13&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Go语言分配的是虚拟内存&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n15&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Go语言栈内存的分配&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n17&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Go语言堆内存的分配&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 cid=&quot;n18&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;计算机为什么需要内存？&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;p cid=&quot;n19&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;计算机是运行自动化程序的载体，程序(或称之为进程)由可执行代码被执行后产生。那么计算机在运行程序的过程中为什么需要「内存」呢？为了轻松理解这个问题，我们先来简单看看：&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n25&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;代码的本质&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n26&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;简单来看代码主要包含两部分：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n27&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n29&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;指令部分：中央处理器CPU可执行的指令&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n31&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;数据部分：常量等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n32&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;代码包含了指令，代码被转化为可执行二进制文件，被执行后加载到内存中，中央处理器CPU通过内存获取指令，图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n33&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220731175631.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;591&quot; data-backw=&quot;713&quot; data-ratio=&quot;0.8284547311095983&quot; data-type=&quot;png&quot; data-w=&quot;2938&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWRGS3Q8vlruicXalPE6SJM2FWGJTSDfkqIq60A4uSG6RTwgWLrYoq1tQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n34&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;详细请移步历史文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5MDEwMDYyOA==&amp;amp;mid=2454620218&amp;amp;idx=1&amp;amp;sn=e09eae504ea538c508c174c620757fa9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;「回到本真，代码到底是什么？」&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n35&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;程序的运行过程&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n36&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;可执行代码文件被执行之后，代码中的待执行指令被加载到了内存当中。这时CPU就可以从内存中获取指令、并执行指令。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n37&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;CPU执行指令简易过程分为三步：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n38&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n40&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;取指：&lt;strong&gt;CPU控制单元&lt;/strong&gt;从内存中获取指令&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n42&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;译指：&lt;strong&gt;CPU控制单元&lt;/strong&gt;解析从内存中获取指令&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n44&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;执行：&lt;strong&gt;CPU运算单元&lt;/strong&gt;负责执行具体的指令操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n45&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;我们通过一个简易的时序图来看看CPU获取并执行指令的过程：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n46&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220807232114.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6604998377150276&quot; data-type=&quot;png&quot; data-w=&quot;3081&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWQrfTyibb3Dx5RvnLE4ib5OBRpC25YBFiaUR9nmscMUgVesDOVdLjOvDhQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n47&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;详细请移步历史文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5MDEwMDYyOA==&amp;amp;mid=2454620244&amp;amp;idx=1&amp;amp;sn=10d2d3e3a2605a21fa6621098bd3bcb8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;「回到本真，代码是如何运行的？」&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n48&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;内存的作用&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n49&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;通过以上我们可以基本看出「内存」在计算机中扮演的角色：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n57&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;至此我们基本明白了内存存在的意义。但是呢，我们又经常会听到关于「栈内存」、「堆内存」的概念，那「栈内存」和「堆内存」到底是什么呢？接下来我们继续来看看这个问题。&lt;/span&gt;&lt;/p&gt;&lt;h1 cid=&quot;n58&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;为什么需要栈内存？&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;p cid=&quot;n59&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;程序在使用内存的过程中，不仅仅只需要关注内存的分配问题，还需要关注到内存使用完毕的回收问题，这就是内存管理中面临的最大两个问题：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n347&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n694&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;有没有简单、高效、且通用的办法统一解决这个内存分配问题呢？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n67&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;答：最简单、高效的分配和回收方式就是对一段&lt;/span&gt;&lt;span&gt;&lt;strong&gt;连续内存&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;线性分配&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」，「栈内存」的分配就采用了这种方式。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n68&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;「栈内存」的简易管理过程：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n71&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 栈内存分配逻辑：current - alloc&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p cid=&quot;n72&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220807234036.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6102051551814834&quot; data-type=&quot;png&quot; data-w=&quot;1901&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWfic8CaPhZn75pwFEjoiaK6O9oTW68bQex1H01tPVPricAgmJMqMJCcXWg/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n75&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 栈内存释放逻辑：current + alloc&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p cid=&quot;n76&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220807234046.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6827330508474576&quot; data-type=&quot;png&quot; data-w=&quot;1888&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWf95uYdAB20TXQGMtz6Q3pYicsAicTicXvjJhx3RRR2TIfSOgEAbRbqChw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n77&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;通过利用「栈内存」，CPU在执行指令过程中可以高效地存储临时变量。其次：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n83&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220807235914.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5689555683785343&quot; data-type=&quot;png&quot; data-w=&quot;3466&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylW7K8l8ImP2hyhMfP3g9QExWzFnziaLuoiaAZxo6ThPBHzvkUBlrZTOseg/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n84&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;所以同时你应该也理解了「为什么称之为栈内存？」。&lt;/span&gt;&lt;span&gt;&lt;span&gt;「栈内存」是计算机对连续内存的采取的「线性分配」管理方式，便于高效存储指令运行过程中的临时变量&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 cid=&quot;n85&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;为什么需要堆内存？&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;p cid=&quot;n86&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;假如函数A内变量是个指针且被函数B外的代码依赖，如果对应变量内存被回收，这个指针就成了野指针不安全。怎么解决这个问题呢？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n87&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;答：这就是「堆内存」存在的意义，Go语言会在代码编译期间通过「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;逃逸分析&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」把分配在「栈」上的变量分配到「堆」上去。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n88&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220808002156.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;612&quot; data-backw=&quot;713&quot; data-ratio=&quot;0.8584821428571429&quot; data-type=&quot;png&quot; data-w=&quot;2240&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWtxbmiaURfMRK04xhSQvVn3YeFZ9Xj6gyMibicUqWluEYYyzxyytsXA1kA/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n347&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n694&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;「堆内存」如何回收呢？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n91&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;答：堆内存通过「垃圾回收器」回收，关于「垃圾回收器」后续我们详解。&lt;/span&gt;&lt;/p&gt;&lt;h1 cid=&quot;n92&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Go语言分配的是虚拟内存&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;p cid=&quot;n93&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;span md-inline=&quot;plain&quot;&gt;通过以上我们了解了「内存」、「栈内存」、「堆内存」存在的意义。除此之外，还有一个重要的知识点：程序和操作系统实际操作的都是虚拟内存，最终由&lt;/span&gt;&lt;span&gt;CPU通过&lt;strong&gt;内存管理单元MMU&lt;/strong&gt;(Memory Manage Unit)把虚拟内存的地址转化为实际的物理内存地址&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。图示如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n94&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20210129194928.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6819243344231667&quot; data-type=&quot;png&quot; data-w=&quot;2141&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWKTdDQTYK90ChM6F1BsQ9XcSybnOUYO3ACRlicmYfLqic5NgvbFzg1rnQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n95&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;使用虚拟内存的原因：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n96&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n98&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;对于我们的&lt;/span&gt;&lt;span&gt;进程而言，可使用的内存是连续的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n100&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;span&gt;安全，防止了进程直接对物理内存的操作&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;(如果进程可以直接操作物理内存，那么存在某个进程篡改其他进程数据的可能)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n102&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;span&gt;提升物理内存的利用率&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，当进程真正要使用物理内存时再分配&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n104&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;虚拟内存和物理内存是通过MMU(管理单元内存Memory Management Unit)映射的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n105&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;所以，一个很重要的知识点：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n347&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n694&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;结论：&lt;/span&gt;&lt;span&gt;Go语言源代码对「栈内存」和「堆内存」的分配、释放等操作，都是对虚拟内存的操作，最终中央处理器CPU会统一通过MMU(管理单元内存Memory Management Unit)转化为实际的物理内存。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n108&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;也就是说Go语言源代码中：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n109&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n111&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;「栈内存」的分配或释放都是对虚拟内存的操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n113&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;「堆内存」的分配或释放都是对虚拟内存的操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n113&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n114&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220818132131.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9715743440233237&quot; data-type=&quot;png&quot; data-w=&quot;1372&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWUkhmUskJ98SKoeicmCh3LOx4VXWReypPliam1cvica5iaUedkGeIeQic2icA/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n115&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n115&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;接着我们分别通过&lt;strong&gt;分配时机&lt;/strong&gt;、&lt;strong&gt;分配过程&lt;/strong&gt;两部分，来看看Go语言栈内存和堆内存的分配。&lt;/span&gt;&lt;/p&gt;&lt;h1 cid=&quot;n116&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Go语言栈内存的分配&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;h2 cid=&quot;n117&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Go语言栈内存分配的时机&lt;/span&gt;&lt;/h2&gt;&lt;ol class=&quot;list-paddingleft-1&quot; cid=&quot;n1192&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n1194&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;创建&lt;code&gt;Goroutinue&lt;/code&gt;时&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;p cid=&quot;n1203&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;栈扩容时&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;h3 cid=&quot;n130&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;栈内存分配时机-创建&lt;code&gt;Goroutinue&lt;/code&gt;时&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n131&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;创建&lt;code&gt;g0&lt;/code&gt;函数代码片段：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/runtime/proc.go::1720&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 创建 m&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;allocm&lt;/span&gt;&lt;span&gt;(_p_ *p, fn &lt;span&gt;func&lt;/span&gt;()&lt;/span&gt;, &lt;span&gt;id&lt;/span&gt; &lt;span&gt;int64&lt;/span&gt;) *&lt;span&gt;m&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; iscgo || mStackIsSystemAllocated() {&lt;br/&gt;        mp.g0 = malg(&lt;span&gt;-1&lt;/span&gt;)&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;&lt;span&gt;// 创建g0 并申请8KB栈内存&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 依赖的malg函数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;        mp.g0 = malg(&lt;span&gt;8192&lt;/span&gt; * sys.StackGuardMultiplier)&lt;br/&gt; }&lt;br/&gt;    &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n133&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;创建&lt;code&gt;g&lt;/code&gt;函数代码片段：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/runtime/proc.go::3999&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 创建一个带有任务fn的goroutine&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;newproc1&lt;/span&gt;&lt;span&gt;(fn *funcval, argp unsafe.Pointer, narg &lt;span&gt;int32&lt;/span&gt;, callergp *g, callerpc &lt;span&gt;uintptr&lt;/span&gt;)&lt;/span&gt; *&lt;span&gt;g&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;    newg := gfget(_p_)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; newg == &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;&lt;span&gt;// 全局队列、本地队列找不到g 则 创建一个全新的goroutine&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;// _StackMin = 2048&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;// 申请2KB栈内存&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;// 依赖的malg函数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;      newg = malg(_StackMin)&lt;br/&gt;      casgstatus(newg, _Gidle, _Gdead)&lt;br/&gt;      allgadd(newg)&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n135&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;以上都依赖&lt;code&gt;malg&lt;/code&gt;函数代码片段，其作用是创建一个全新&lt;code&gt;g&lt;/code&gt;：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/runtime/proc.go::3943&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 创建一个指定栈内存的g&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;malg&lt;/span&gt;&lt;span&gt;(stacksize &lt;span&gt;int32&lt;/span&gt;)&lt;/span&gt; *&lt;span&gt;g&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; newg := &lt;span&gt;new&lt;/span&gt;(g)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; stacksize &amp;gt;= &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;     &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;     systemstack(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;     &lt;span&gt;// 分配栈内存&lt;/span&gt;&lt;br/&gt;     newg.stack = stackalloc(&lt;span&gt;uint32&lt;/span&gt;(stacksize))&lt;br/&gt;  })&lt;br/&gt;     &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; newg&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3 cid=&quot;n138&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;栈内存分配时机-栈扩容&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/runtime/stack.go::838&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;copystack&lt;/span&gt;&lt;span&gt;(gp *g, newsize &lt;span&gt;uintptr&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 分配新的栈空间&lt;/span&gt;&lt;br/&gt; &lt;span&gt;new&lt;/span&gt; := stackalloc(&lt;span&gt;uint32&lt;/span&gt;(newsize))&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// ...略&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;结论：&lt;/span&gt;&lt;span&gt;创建Goroutine和栈扩容时，栈内存的分配都是由函数&lt;code&gt;stackalloc&lt;/code&gt;&lt;/span&gt;&lt;span&gt;分配。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n142&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405133309.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4086629001883239&quot; data-type=&quot;png&quot; data-w=&quot;531&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWXuqhX6Q27nb2Qp2v0icyOq7urRhqB7PCicUibYWTguXjCeT1sfPrRiaI0g/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n143&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;所以，我们通过分析&lt;code&gt;stackalloc&lt;/code&gt;函数就可以知道栈内存的分配过程了，具体如下。&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n144&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;栈内存分配过程&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n145&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Go语言栈内存的分配按待分配的栈大小分为两大类：&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n151&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;小于32KB栈分配过程&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n154&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;1. 先去&lt;code&gt;M&lt;/code&gt;线程缓存&lt;code&gt;mcache&lt;/code&gt;的栈内存缓存&lt;code&gt;stackcache&lt;/code&gt;中分配：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n154&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n155&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220819133249.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30138768430182133&quot; data-type=&quot;png&quot; data-w=&quot;2306&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWoKtPicgxGgpfve3L61JRJ7MVhuQxicaZ8ZgVHY6ZrCb6glQAUjsJcrFw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;2. 如果&lt;code&gt;stackcache&lt;/code&gt;内存不足，则从全局栈内存缓存池&lt;code&gt;stackpool&lt;/code&gt;中分配：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n159&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234800.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6745098039215687&quot; data-type=&quot;png&quot; data-w=&quot;1785&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWNuQTmqoayicaAZFKCOtYmNKTKhcraFrabWudFv6Mib32xcJKK1ucNkAw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n162&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n162&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n162&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;3. 如果&lt;code&gt;stackpool&lt;/code&gt;内存不足，则从逻辑处理器结构&lt;code&gt;p&lt;/code&gt;中的&lt;code&gt;p.pagecache&lt;/code&gt;中分配：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n162&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n163&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220819133321.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9514310494362532&quot; data-type=&quot;png&quot; data-w=&quot;2306&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWic74ibcxpScsCiaJxCIfRanMpDEXtpKSKpRVl4PU3YxoNaPrXDvFr4x1Q/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n166&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n166&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n166&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;4. 如果&lt;code&gt;p.pagecache&lt;/code&gt;内存不足，则从堆&lt;code&gt;mheap&lt;/code&gt;中分配：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n166&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n167&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220819133338.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.293148308759757&quot; data-type=&quot;png&quot; data-w=&quot;2306&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWcQ5RVramd7nKOXFHvOVQsy2gjVGva7CkbEKM7LPX4iblWZWGHBGC2dA/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n168&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 cid=&quot;n168&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;大于等于32KB栈分配过程&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n1660&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;1. 直接从全局栈内存缓存池&lt;code&gt;stackLarge&lt;/code&gt;中分配：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n169&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234822.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42533081285444235&quot; data-type=&quot;png&quot; data-w=&quot;1587&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWXK7jQF0hhRbjs6K1sNMoSyI90CLAqoIGhczCeibKibeGHfbBFbUhX10g/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n169&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234822.png&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2380&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;2. 全局栈内存缓存池&lt;code&gt;stackLarge&lt;/code&gt;不足，则从逻辑处理器结构&lt;code&gt;p&lt;/code&gt;中的&lt;code&gt;p.pagecache&lt;/code&gt;中分配，如果&lt;code&gt;p.pagecache&lt;/code&gt;则去堆上&lt;code&gt;mheap&lt;/code&gt;分配：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n169&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n170&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234828.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8182283666154634&quot; data-type=&quot;png&quot; data-w=&quot;1953&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWhAH6KfJeSE8nLXW1OxsibPfUVMq3SPFAwuLFLYG6W54ria9wFYcPHJIg/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 cid=&quot;n171&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Go语言堆内存的分配&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;p cid=&quot;n2383&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;想要更好的理解Go堆内存分配需要先了解Go的内存三层架构以及Go的内存管理单元&lt;code&gt;mspan&lt;/code&gt;。历史文章请查看：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2388&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n172&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Go语言堆内存分配时机&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n174&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;判断一个变量是否应该分配到「堆内存」的关键点就是：&lt;/span&gt;&lt;span&gt;代码编译阶段，编译器会通过&lt;strong&gt;逃逸分析&lt;/strong&gt;&lt;strong&gt;判断并标记&lt;/strong&gt;上该变量是否需要分配到堆上。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n175&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;通常我们在创建如下变量时，变量都有可能被分配到堆上：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; cid=&quot;n2392&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n2396&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;切片&lt;code&gt;Slice&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2404&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;创建数组时&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2406&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;创建&lt;code&gt;Channel&lt;/code&gt;时&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2408&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n2415&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;等等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n200&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;涉及相关数据类型的写操作函数整理如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n200&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;表格可左右滑动查看&lt;/span&gt;&lt;/p&gt;&lt;figure cid=&quot;n201&quot; mdtype=&quot;table&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr cid=&quot;n202&quot; mdtype=&quot;table_row&quot;&gt;&lt;th&gt;&lt;span&gt;类型&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;名称&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;描述&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;代码位置&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr cid=&quot;n207&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;切片&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;makeslice(et *_type, len, cap int) unsafe.Pointer&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;创建切片&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/slice.go::83&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n212&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;切片&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;growslice(et *_type, old slice, cap int) slice&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;切片扩容&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/slice.go::125&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n217&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;切片&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;makeslicecopy(et *_type, tolen int, fromlen int, from unsafe.Pointer) unsafe.Pointer&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;copy切片&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/slice.go::36&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n222&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;字节字符串&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;gobytes(p *byte, n int) (b []byte)&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;转换字符串&lt;code&gt;string&lt;/code&gt;为&lt;code&gt;[]byte&lt;/code&gt;类型&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/string.go::301&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n227&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;字节字符串&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;slicebytetostring(buf *tmpBuf, ptr *byte, n int) (str string)&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;转换字节字符串&lt;code&gt;[]byte&lt;/code&gt;为类型&lt;code&gt;string&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/string.go::80&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n232&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;字节字符串&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;rawstring(size int) (s string, b []byte)&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;按大小初始化一个新的&lt;code&gt;string&lt;/code&gt;类型&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/string.go::83&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n237&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;字节字符串&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;rawbyteslice(size int) (b []byte)&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;按大小初始化一个新的&lt;code&gt;[]byte&lt;/code&gt;类型&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/string.go::83&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n242&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;字节字符串&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;rawruneslice(size int) (b []rune)&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;按大小初始化一个新的&lt;code&gt;[]rune&lt;/code&gt;类型&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/string.go::83&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n247&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;Channel&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;makechan(t *chantype, size int) *hchan&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;创建一个&lt;code&gt;chan&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/chan.go::71&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n252&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;数组&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;func newarray(typ *_type, n int) unsafe.Pointer&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;初始化一个数组&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/malloc.go::1191&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n257&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;map申请内存&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/map.go::571&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n262&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;Map&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;func (h *hmap) newoverflow(t *maptype, b *bmap) *bmap&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;map申请溢出桶&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;src/runtime/map.go::245&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n267&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span cid=&quot;n268&quot; mdtype=&quot;table_cell&quot;&gt;等等&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span cid=&quot;n269&quot; mdtype=&quot;table_cell&quot;&gt;...&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span cid=&quot;n270&quot; mdtype=&quot;table_cell&quot;&gt;...&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p cid=&quot;n272&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;这里我们以初始化切片的源代码为例来看看切片何时被分配到堆上的逻辑判断：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n285&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;切片分配过程源代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 代码位置：src/cmd/compile/internal/gc/walk.go::1316&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 初始化切片&lt;/span&gt;&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; OMAKESLICE:&lt;br/&gt;    &lt;span&gt;// ...略...&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// &lt;/span&gt;&lt;span&gt;逃逸标识，是否需要逃逸到堆上&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; n.Esc == EscNone {&lt;br/&gt;        &lt;span&gt;// ...略...&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;// 不需要逃逸&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 直接栈上分配内存&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;        t = types.NewArray(t.Elem(), i) &lt;span&gt;// [r]T&lt;/span&gt;&lt;br/&gt;        &lt;br/&gt;        &lt;span&gt;// ...略...&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;       &lt;span&gt; &lt;span&gt;// 需要内存逃逸到堆上&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;        &lt;br/&gt;        &lt;span&gt;// ...略...&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;       &lt;span&gt; &lt;span&gt;// 默认使用makeslice64函数从堆上分配内存&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;        fnname := &lt;span&gt;&quot;makeslice64&quot;&lt;/span&gt;&lt;br/&gt;        argtype := types.Types[TINT64]&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// ...略...&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;len&lt;/span&gt;.Type.IsKind(TIDEAL) || maxintval[&lt;span&gt;len&lt;/span&gt;.Type.Etype].Cmp(maxintval[TUINT]) &amp;lt;= &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp;&lt;br/&gt;            (&lt;span&gt;cap&lt;/span&gt;.Type.IsKind(TIDEAL) || maxintval[&lt;span&gt;cap&lt;/span&gt;.Type.Etype].Cmp(maxintval[TUINT]) &amp;lt;= &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;// 校验通过，则&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;// 使用makeslice函数从堆上分配内存&lt;/span&gt;&lt;br/&gt;            fnname = &lt;span&gt;&quot;makeslice&quot;&lt;/span&gt;&lt;br/&gt;            argtype = types.Types[TINT]&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// ...略...&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 调用上面指定的runtime函数&lt;/span&gt;&lt;br/&gt;        m.Left = mkcall1(fn, types.Types[TUNSAFEPTR], init, typename(t.Elem()), conv(&lt;span&gt;len&lt;/span&gt;, argtype), conv(&lt;span&gt;cap&lt;/span&gt;, argtype))&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// ...略...&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n287&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;最终分配堆内存的地方都会依赖函数&lt;code&gt;mallocgc&lt;/code&gt;，我们通过阅读&lt;code&gt;mallocgc&lt;/code&gt;的代码就可以看到堆内存的分配过程。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n288&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405235337.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6477611940298508&quot; data-type=&quot;png&quot; data-w=&quot;335&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylW2qsymCAbtmXhuqAyAa737iaRyU1l8h6j0LG9nSHoIdHEbKxaBicaSqGA/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n289&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Go语言堆内存分配过程&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n290&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;堆内存的分配按对象的大小分，主要分为三大类：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n298&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;「微对象」和「小对象」&lt;strong&gt;通常&lt;/strong&gt;通过逻辑处理器结构&lt;code&gt;P&lt;/code&gt;的线程缓存&lt;code&gt;mcache&lt;/code&gt;分配，「大对象」直接从堆上&lt;code&gt;mheap&lt;/code&gt;中分配，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n299&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405235126.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5704622322435174&quot; data-type=&quot;png&quot; data-w=&quot;1774&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWQq8uPibrfIZPzEiaEE2R2v72Ym5DZAoRn0KHDjQtotqDAmcee8lH2Uwg/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n305&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405235250.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48&quot; data-type=&quot;png&quot; data-w=&quot;1250&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWXHv5rspLZ7I3kQTSr2MYUaYt2RiaiakBeictH2okSKKtKoywZLK8CoF5Q/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n306&quot; mdtype=&quot;heading&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h3 cid=&quot;n306&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;微对象的分配过程&lt;/span&gt;&lt;/h3&gt;&lt;blockquote cid=&quot;n307&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n308&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;微对象 0 &amp;lt; Micro Object &amp;lt; 16B&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n311&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n311&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;1. 线程缓存&lt;code&gt;mcache&lt;/code&gt;的&lt;code&gt;tiny&lt;/code&gt;内存充足，则直接分配「微对象」所需内存，图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n311&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n312&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234253.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6942800788954635&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWNiaOA6EVfn7VgLicAJoVaSRpXLXlc1pgPIGroE3gOllBBOlcIzibcic2Iw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n315&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n315&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n315&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;2. 线程缓存&lt;code&gt;mcache&lt;/code&gt;的&lt;code&gt;tiny&lt;/code&gt;内存不足，先去线程缓存&lt;code&gt;mcache&lt;/code&gt;的&lt;code&gt;alloc&lt;/code&gt;申请16B给&lt;code&gt;tiny&lt;/code&gt;，再分配「微对象」所需内存，简易图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n315&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n316&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234330.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6194144838212635&quot; data-type=&quot;png&quot; data-w=&quot;1298&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWrwg9OK3Fic6J7ic8MHXdtF4jHyvm8oQgmoxkvZymibxGRVA6iaCc0zgfxw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n317&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;申请16B详细过程图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n317&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n318&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234341.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9503296703296703&quot; data-type=&quot;png&quot; data-w=&quot;2275&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWicpnNW9dOq2LS95Fh4ctCfgnhgOic6HiauxmFMqVerMyqKnTUQty3ql0A/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n319&quot; mdtype=&quot;heading&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h3 cid=&quot;n319&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 cid=&quot;n319&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;小对象的分配过程&lt;/span&gt;&lt;/h3&gt;&lt;blockquote cid=&quot;n320&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n321&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;小对象 16B =&amp;lt; Small Object &amp;lt;= 32KB&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n324&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n324&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;1. 线程缓存&lt;code&gt;mcache&lt;/code&gt;的&lt;code&gt;alloc&lt;/code&gt;充足，则直接分配「小对象」所需内存，简易图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n324&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n325&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220820172242.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.054270462633452&quot; data-type=&quot;png&quot; data-w=&quot;1124&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWQYWia0seNfMyf1odcYps91IAXOImhV3RV3VlMibA5QnZTEkZwSEcnnqw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n326&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n326&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;详细分配过程图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n326&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n327&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234425.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4949618320610687&quot; data-type=&quot;png&quot; data-w=&quot;3275&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWPSqCPdqjNyYPTJpM94Yby3FLXkpKZnXtrC7GsK8QZaribydysoE1hsw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n330&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n330&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;2. 线程缓存&lt;code&gt;mcache&lt;/code&gt;的&lt;code&gt;alloc&lt;/code&gt;不足，则去中央缓存&lt;code&gt;mcentral&lt;/code&gt;获取一个&lt;code&gt;mspan&lt;/code&gt;，再分配「小对象」所需内存，图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n330&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n331&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234513.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7551487414187643&quot; data-type=&quot;png&quot; data-w=&quot;2185&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWtKGA3rHJozV3flicicdKIQFhYGPicynibIJibk9Zf4zbPxH2k5UFZOPFkNw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n331&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234513.png&quot;&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2996&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;3. 线程缓存&lt;code&gt;mcache&lt;/code&gt;的&lt;code&gt;alloc&lt;/code&gt;不足，且中央缓存&lt;code&gt;mcentral&lt;/code&gt;不足，则去逻辑处理器结构的&lt;code&gt;pagecache&lt;/code&gt;分配，如果&lt;code&gt;pagecache&lt;/code&gt;直接去堆上&lt;code&gt;mheap&lt;/code&gt;获取一个&lt;code&gt;mspan&lt;/code&gt;，再分配「小对象」所需内存，图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n2550&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n335&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234521.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4068905364151767&quot; data-type=&quot;png&quot; data-w=&quot;2293&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylW31oVa9ibbyqwV9wF4sN7BjHblXicXZl9EJ94yS1nzcNkSZJrdhSZHOAQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n336&quot; mdtype=&quot;heading&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 cid=&quot;n336&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;大对象的分配过程&lt;/span&gt;&lt;/h3&gt;&lt;blockquote cid=&quot;n337&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n338&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;大对象 32KB &amp;lt; Large Object&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n341&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n341&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;1. 逻辑处理器结构的&lt;code&gt;pagecache&lt;/code&gt;充足，则直接分配「大对象」所需内存，图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n341&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n342&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234609.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5937193326790972&quot; data-type=&quot;png&quot; data-w=&quot;1019&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWnHOBTm4fQEWK86B7NhmowHMKFLbRJMnofjdsG6Cetpb8bOZMnK6UAQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n345&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n345&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;2. 逻辑处理器结构的&lt;code&gt;pagecache&lt;/code&gt;不足，则直接去堆上&lt;code&gt;mheap&lt;/code&gt;分配「大对象」所需内存，图示如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n345&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n346&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220405234616.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9336349924585219&quot; data-type=&quot;png&quot; data-w=&quot;1326&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdhicj3gELvLibsUzupCVSJylWScLrwVHn8Pam3SpXQk4p3GnypR7zVmYibrvwf11OENUMsU3oQJqvtuA/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 cid=&quot;n347&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p cid=&quot;n3067&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;code/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n3068&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;http://cdn.tigerb.cn/20220503213918.png&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7425578831312017&quot; data-type=&quot;png&quot; data-w=&quot;1814&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdgHkALTycoQMSlP76DG3nC61JiaFvjVibZ4XmbHvCSTH1lTeb87eQxNx0t0qQFyRuMdWGP0rW9gsm8A/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Go轻松进阶系列&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 更多文章&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5MDEwMDYyOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TiccVmMZ3icdia9Gagoyr7f529Zq7RkVUsUymKGWVic6b7J5eK7cgQ8RxtxsZPh0yicclre6QclI6oprVIrxV5axibtQ/0?wx_fmt=png&quot; data-nickname=&quot;TIGERB&quot; data-alias=&quot;tigerbcode&quot; data-signature=&quot;技术不凌驾业务 业务不拖累技术&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.06302521008403361&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;714&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdjOmxkheVnwCeibLWia2yTSSAnu4wH1RgmdCrGrIicz5oicSN5gbZxKaiaZ3oicxDC3iaOCm92d2VjbqGMmw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools-id=&quot;36694&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.375&quot; data-type=&quot;gif&quot; data-w=&quot;40&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/TiccVmMZ3icdiazAwOwey9wAIliamDeGicTOXib4HFynOX3BUxJMO7b4Azq3fNx3JgEwKU3NMG3N2hLLfIsqCUJMd43w/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;

          

          



                    
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>26833cf24bd032283a5d41f8c0b3d974</guid>
<title>重新推荐一下ssseg，一个简单好用的通用分割框架</title>
<link>https://toutiao.io/k/qufjf59</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;只对这个项目相关的有趣应用感兴趣的小伙伴可以直接跳过这个part。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;项目地址&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;https:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;更新的内容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 增加了&lt;/span&gt;&lt;span&gt;一些SOTA模型的支持，例如BEiT和ConvNeXt，相关模型和训练log都已经在相关文档里提供：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46308186195826645&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZTbkic2pYRo6JcTjaHU0lkzfcJ8gVQV14zuTDWKLdmprib6jMOENRdfhwCxo8lR90WJHJZZicbTFiaYFdDE8bX8uQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1246&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. Config文件结构调整，方便大家更好地搭建训练模型，例如训练backbone为BEiT的upernet，你只需要在Config里这样定义：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SEGMENTOR_CFG = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;type&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;upernet&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;num_classes&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;benchmark&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;align_corners&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;backend&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;nccl&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;norm_cfg&#x27;&lt;/span&gt;: {&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;type&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;syncbatchnorm&#x27;&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;act_cfg&#x27;&lt;/span&gt;: {&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;type&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;relu&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;inplace&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;backbone&#x27;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;type&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;beit_base_patch16_224_pt22k_ft22k&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;series&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;beit&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;pretrained&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;selected_indices&#x27;&lt;/span&gt;: (&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;norm_cfg&#x27;&lt;/span&gt;: {&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;type&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;layernorm&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;eps&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;1e-6&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;head&#x27;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;feature2pyramid&#x27;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;embed_dim&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;768&lt;/span&gt;, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;rescales&#x27;&lt;/span&gt;: [&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0.5&lt;/span&gt;],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;in_channels_list&#x27;&lt;/span&gt;: [&lt;span class=&quot;code-snippet__number&quot;&gt;768&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;768&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;768&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;768&lt;/span&gt;],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;feats_channels&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;pool_scales&#x27;&lt;/span&gt;: [&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;dropout&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0.1&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;auxiliary&#x27;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;in_channels&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;768&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;out_channels&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;512&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;dropout&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0.1&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;而不需要像之前那样分别在&lt;span&gt;SEGMENTOR_CFG&lt;/span&gt;里去定义FPN，decoder等等模块的参数。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 支持借助slurm进行多机训练，例如：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;apache&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;git&lt;/span&gt; clone https://github.com/SegmentationBLWX/sssegmentation&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;cd&lt;/span&gt; sssegmentation&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;bash&lt;/span&gt; scripts/slurmtrain.sh TEST(即分组名称) \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attribute&quot;&gt;deeplab&lt;/span&gt;(任务Tag) \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attribute&quot;&gt;4&lt;/span&gt;(使用的卡数) \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attribute&quot;&gt;ssseg&lt;/span&gt;/configs/deeplabv3/deeplabv3_resnet50os8_ade20k.py(config文件路径)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;4. 对优化器和scheduler进行了重构，方便更好地适配当前主流的以transformer为backbone的模型训练所需的tricks。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5. 部分Bug修复和模型调用方式的优化等等。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;快速使用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;项目repo提供了几百个训练好的分割模型供大家调用，具体而言，需要先安装一下我们的SSSegmentation：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;pip&lt;/span&gt; install sssegmentation&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;然后简单写个脚本即可：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import torch.utils.model_zoo as model_zoo&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from ssseg.modules.models.segmentors import BuildSegmentor&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;config = {} &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;weight_url = &#x27;&#x27; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;segmentor = BuildSegmentor(config, &#x27;TEST&#x27;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;segmentor.load_state_dict(model_zoo.load_url(weight_url, map_location=&#x27;cpu&#x27;)[&#x27;model&#x27;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;results = segmentor(imgs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;相关的config和weight_url可以根据自己想要调用的模型在这里找到：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/sssegmentation.readthedocs.io/en&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/latest/&lt;/span&gt;ModelZoo.html&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;当然，你也可以参考在线文档进行环境配置和模型调用：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/sssegmentation.readthedocs.io/en&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/latest/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;git&lt;/span&gt; clone https://github.com/SegmentationBLWX/sssegmentation&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;wget https://github.com/SegmentationBLWX/modelstore/releases/download/ssseg_pspnet/pspnet_resnet101os8_ade20k_train.pth&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;bash scripts/inference.sh ssseg/configs/pspnet/pspnet_resnet101os8_ade20k.py pspnet_resnet101os8_ade20k/epoch_130.pth --imagepath dog.jpg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c5f6b503de0f233fd580d597d892d1e9</guid>
<title>7大特征交互模型，最好的深度学习推荐算法总结</title>
<link>https://toutiao.io/k/br8mb1w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;👆&lt;/span&gt;&lt;span&gt;点击“&lt;/span&gt;&lt;span&gt;博文视点Broadview&lt;/span&gt;&lt;span&gt;”，获取更多书讯&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nr1VNxfeqxVOw2nPJHVH4xeZibzPY5F4ibOuOZLMsUMrzIibGB6KMw7EurSKv6DkrtLzuhYdBa30A9Q/640?wx_fmt=png&quot; data-ratio=&quot;0.05669291338582677&quot; data-w=&quot;635&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;深度学习自出现以来，不断改变着人工智能领域的技术发展，推荐系统领域的研究同样也受到了深远的影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一方面，研究人员利用深度学习技术提升传统推荐算法的能力；另一方面，研究人员尝试用深度学习的思想来设计新的推荐算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于深度学习的推荐算法研究不仅在学术界百花齐放，目前也受到了工业界的重视和广泛采用。深度学习具有强大的表征学习和函数拟合能力，它能在众多方面改革传统的推荐算法，如&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;协同过滤、特征交互、图表示学习、序列推荐、知识融合及深度强化学习&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。下面将介绍推荐系统中较为重要的方向——&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;特征交互&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于隐向量的协同过滤的方法将用户和物品独立地映射到低维空间，计算简单，很适合作为召回模型或者粗排模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而推荐系统在精排阶段为了能够更准确地刻画用户对物品的兴趣，往往会考虑更丰富的情景特征，例如时间、地点等上下文信息，以及捕捉更细粒度的特征交互，例如用户画像和物品属性之间的交互作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在过去，人们通过手动设计交互特征，或者利用梯度提升树自动提取和选择一些有用的交互特征，但这样终究只能覆盖到训练集里面出现过的特征模式，不能泛化到未在训练集中出现过的特征组合。随着深度学习技术的快速发展，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自动特征交互方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;也迎来了新的思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;203:504&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AFM 模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;因子分解机（Factorization Machine，FM）模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的特点是考虑了所有可能的二阶特征组合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当数据集中存在大量不必要做特征交互的组合时，这些特征的交互产生的噪声可能会影响模型的性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，Jun Xiao 等人提出了&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基于注意力网络调整的因子分解机（Attentional Factorization Machines，AFM）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。AFM 模型的整体结构如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3712962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mAG2oEcvFwWSTD8HO5DtPSamic9JLeVNmcp4HJshE70UBibbECIkGU8icZy62btmNdShHV58M2wRMYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AFM 模型的整体结构&lt;/span&gt;&lt;/p&gt;&lt;h4/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;229:505&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;2&quot;&gt;2&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;PNN 模型&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;在推荐系统的精排模型或者广告点击率预估模型中，输入的样本往往有一个特点：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;特征是高维稀疏的。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，用户和物品的ID、离散化的时间、类别类型的属性，都可以作为有用的特征出现在样本数据中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种高维稀疏的特征可以归到不同的特征域（field），每个特征域用独热编码或者多热编码表示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样做的好处是，虽然每个样本的特征数量是可变的，所有样本的特征域的数量却是固定的，因此，可以很方便地把所有特征域对应的隐向量拼接起来，输入到MLP 进行下一步的操作。一个简单的样本示例如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;span&gt;&lt;mjx-container jax=&quot;SVG&quot; role=&quot;presentation&quot; tabindex=&quot;0&quot; ctxtmenu_counter=&quot;1&quot; data-formula=&quot;\underbrace{[0,1,0,0,0,0,0]}_\text{日期$=$周} \quad \underbrace{[0,1]}_\text{性别$=$男} \quad \underbrace{[0,0,1,0, \cdots, 0,0]}_\text{地点$=$伦敦}&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 18712 2618.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;munder&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;OP&quot;&gt;&lt;g data-mml-node=&quot;munder&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(778, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1222.7, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1722.7, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2167.3, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2667.3, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(3112, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3612, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(4056.7, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4556.7, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5001.3, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5501.3, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5946, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6446, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0, -630)&quot;&gt;&lt;path data-c=&quot;E152&quot; d=&quot;M-24 327L-18 333H-1Q11 333 15 333T22 329T27 322T35 308T54 284Q115 203 225 162T441 120Q454 120 457 117T460 95V60V28Q460 8 457 4T442 0Q355 0 260 36Q75 118 -16 278L-24 292V327Z&quot;/&gt;&lt;path data-c=&quot;E153&quot; d=&quot;M-10 60V95Q-10 113 -7 116T9 120Q151 120 250 171T396 284Q404 293 412 305T424 324T431 331Q433 333 451 333H468L474 327V292L466 278Q375 118 190 36Q95 0 8 0Q-5 0 -7 3T-10 24V60Z&quot; transform=&quot;translate(6274, 0)&quot;/&gt;&lt;g data-c=&quot;E156&quot; transform=&quot;translate(2912, 0)&quot;&gt;&lt;path data-c=&quot;E151&quot; d=&quot;M-10 60Q-10 104 -10 111T-5 118Q-1 120 10 120Q96 120 190 84Q375 2 466 -158L474 -172V-207L468 -213H451H447Q437 -213 434 -213T428 -209T423 -202T414 -187T396 -163Q331 -82 224 -41T9 0Q-4 0 -7 3T-10 25V60Z&quot;/&gt;&lt;path data-c=&quot;E150&quot; d=&quot;M-18 -213L-24 -207V-172L-16 -158Q75 2 260 84Q334 113 415 119Q418 119 427 119T440 120Q454 120 457 117T460 98V60V25Q460 7 457 4T441 0Q308 0 193 -55T25 -205Q21 -211 18 -212T-1 -213H-18Z&quot; transform=&quot;translate(450, 0)&quot;/&gt;&lt;/g&gt;&lt;svg x=&quot;350&quot; y=&quot;-300&quot; viewbox=&quot;665.5 -300 2662 720&quot;&gt;&lt;path data-c=&quot;E154&quot; d=&quot;M-10 0V120H410V0H-10Z&quot; transform=&quot;scale(9.982, 1)&quot;/&gt;&lt;/svg&gt;&lt;svg x=&quot;3712&quot; y=&quot;-300&quot; viewbox=&quot;665.5 -300 2662 720&quot;&gt;&lt;path data-c=&quot;E154&quot; d=&quot;M-10 0V120H410V0H-10Z&quot; transform=&quot;scale(9.982, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(2149.3, -1627.3) scale(0.707)&quot;&gt;&lt;g data-mml-node=&quot;mtext&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;日&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(884, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;期&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1768, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtext&quot; transform=&quot;translate(2546, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;周&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mstyle&quot; transform=&quot;translate(6724, 0)&quot;&gt;&lt;g data-mml-node=&quot;mspace&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;munder&quot; transform=&quot;translate(7724, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;OP&quot; transform=&quot;translate(212.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;munder&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(778, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1222.7, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1722.7, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0, -630)&quot;&gt;&lt;path data-c=&quot;E152&quot; d=&quot;M-24 327L-18 333H-1Q11 333 15 333T22 329T27 322T35 308T54 284Q115 203 225 162T441 120Q454 120 457 117T460 95V60V28Q460 8 457 4T442 0Q355 0 260 36Q75 118 -16 278L-24 292V327Z&quot;/&gt;&lt;path data-c=&quot;E153&quot; d=&quot;M-10 60V95Q-10 113 -7 116T9 120Q151 120 250 171T396 284Q404 293 412 305T424 324T431 331Q433 333 451 333H468L474 327V292L466 278Q375 118 190 36Q95 0 8 0Q-5 0 -7 3T-10 24V60Z&quot; transform=&quot;translate(1550.7, 0)&quot;/&gt;&lt;g data-c=&quot;E156&quot; transform=&quot;translate(550.3, 0)&quot;&gt;&lt;path data-c=&quot;E151&quot; d=&quot;M-10 60Q-10 104 -10 111T-5 118Q-1 120 10 120Q96 120 190 84Q375 2 466 -158L474 -172V-207L468 -213H451H447Q437 -213 434 -213T428 -209T423 -202T414 -187T396 -163Q331 -82 224 -41T9 0Q-4 0 -7 3T-10 25V60Z&quot;/&gt;&lt;path data-c=&quot;E150&quot; d=&quot;M-18 -213L-24 -207V-172L-16 -158Q75 2 260 84Q334 113 415 119Q418 119 427 119T440 120Q454 120 457 117T460 98V60V25Q460 7 457 4T441 0Q308 0 193 -55T25 -205Q21 -211 18 -212T-1 -213H-18Z&quot; transform=&quot;translate(450, 0)&quot;/&gt;&lt;/g&gt;&lt;svg x=&quot;350&quot; y=&quot;-300&quot; viewbox=&quot;75.1 -300 300.3 720&quot;&gt;&lt;path data-c=&quot;E154&quot; d=&quot;M-10 0V120H410V0H-10Z&quot; transform=&quot;scale(1.126, 1)&quot;/&gt;&lt;/svg&gt;&lt;svg x=&quot;1350.3&quot; y=&quot;-300&quot; viewbox=&quot;75.1 -300 300.3 720&quot;&gt;&lt;path data-c=&quot;E154&quot; d=&quot;M-10 0V120H410V0H-10Z&quot; transform=&quot;scale(1.126, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(0, -1627.3) scale(0.707)&quot;&gt;&lt;g data-mml-node=&quot;mtext&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;性&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(884, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;别&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1768, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtext&quot; transform=&quot;translate(2546, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;男&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mstyle&quot; transform=&quot;translate(10149.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mspace&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;munder&quot; transform=&quot;translate(11149.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;OP&quot;&gt;&lt;g data-mml-node=&quot;munder&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(278, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(778, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1222.7, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1722.7, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2167.3, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2667.3, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(3112, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3612, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4056.7, 0)&quot;&gt;&lt;path data-c=&quot;22EF&quot; d=&quot;M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5395.3, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5840, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6340, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(6784.7, 0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(7284.7, 0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0, -630)&quot;&gt;&lt;path data-c=&quot;E152&quot; d=&quot;M-24 327L-18 333H-1Q11 333 15 333T22 329T27 322T35 308T54 284Q115 203 225 162T441 120Q454 120 457 117T460 95V60V28Q460 8 457 4T442 0Q355 0 260 36Q75 118 -16 278L-24 292V327Z&quot;/&gt;&lt;path data-c=&quot;E153&quot; d=&quot;M-10 60V95Q-10 113 -7 116T9 120Q151 120 250 171T396 284Q404 293 412 305T424 324T431 331Q433 333 451 333H468L474 327V292L466 278Q375 118 190 36Q95 0 8 0Q-5 0 -7 3T-10 24V60Z&quot; transform=&quot;translate(7112.7, 0)&quot;/&gt;&lt;g data-c=&quot;E156&quot; transform=&quot;translate(3331.3, 0)&quot;&gt;&lt;path data-c=&quot;E151&quot; d=&quot;M-10 60Q-10 104 -10 111T-5 118Q-1 120 10 120Q96 120 190 84Q375 2 466 -158L474 -172V-207L468 -213H451H447Q437 -213 434 -213T428 -209T423 -202T414 -187T396 -163Q331 -82 224 -41T9 0Q-4 0 -7 3T-10 25V60Z&quot;/&gt;&lt;path data-c=&quot;E150&quot; d=&quot;M-18 -213L-24 -207V-172L-16 -158Q75 2 260 84Q334 113 415 119Q418 119 427 119T440 120Q454 120 457 117T460 98V60V25Q460 7 457 4T441 0Q308 0 193 -55T25 -205Q21 -211 18 -212T-1 -213H-18Z&quot; transform=&quot;translate(450, 0)&quot;/&gt;&lt;/g&gt;&lt;svg x=&quot;350&quot; y=&quot;-300&quot; viewbox=&quot;770.3 -300 3081.3 720&quot;&gt;&lt;path data-c=&quot;E154&quot; d=&quot;M-10 0V120H410V0H-10Z&quot; transform=&quot;scale(11.555, 1)&quot;/&gt;&lt;/svg&gt;&lt;svg x=&quot;4131.3&quot; y=&quot;-300&quot; viewbox=&quot;770.3 -300 3081.3 720&quot;&gt;&lt;path data-c=&quot;E154&quot; d=&quot;M-10 0V120H410V0H-10Z&quot; transform=&quot;scale(11.555, 1)&quot;/&gt;&lt;/svg&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(2256.1, -1627.3) scale(0.707)&quot;&gt;&lt;g data-mml-node=&quot;mtext&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;地&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(884, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;点&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1768, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtext&quot; transform=&quot;translate(2546, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;伦&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(884, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;敦&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个样本有三个特征域：日期、性别和地点。每个特征域内用一个独热编码表示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一种简单的做法是，通过特征嵌入查找（Embedding Lookup）得到每个特征域的低维表示向量，然后将所有特征域的表示向量拼接起来，输入MLP 计算高阶特征交互。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样的做法本质上是通过求和的形式把各个特征域的表示向量组合到MLP 中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了引入更有效的特征交互，Yanru Qu 等人提出&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;PNN（Product-based Neural Networks）模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，创新性地引入了一个特征域之间的显式二阶交互层，作用在特征嵌入层和MLP 层之间，具体模型框架如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6018518518518519&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mAG2oEcvFwWSTD8HO5DtPS5JQcwbG5SczEzzfia7u6n01qyAKvLxH5SuWR8hEZEmiaWZ8jn6icQk5EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PNN 模型结构图&lt;/span&gt;&lt;/p&gt;&lt;h4/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;233:499&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot;&gt;3&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;Wide &amp;amp; Deep 模型&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Wide &amp;amp; Deep 模型是谷歌公司于2016 年推出的结合深度学习的推荐模型，一经问世便广受好评，目前也成了工业界主流的推荐模型之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Wide &amp;amp;Deep 模型强调一个好的推荐系统应该兼顾记忆性（memorization）和泛化性（generalization）。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;记忆性是指模型能够捕捉数据集中频繁共现的特征规律，并建立它们和标签直接的关系。这一能力可以通过枚举交叉特征（cross-productfeature），并用一个逻辑回归模型去学习这些交叉特征的关联系数来实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，如果在训练数据集中，用户经常点击某个主题、名人相关的新闻，那么&amp;lt;用户ID，主题ID，如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mAG2oEcvFwWSTD8HO5DtPSnHAMfaxpDP9mwXD7DmykxomKNw2ujnicvTDYX0Xca6fwv2IJfocicjUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mAG2oEcvFwWSTD8HO5DtPSESpicCVMVC4k7MljvzebJFAQibFgTjlZ0LkxNSpwSxBaeXp1LEIzRYvQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1&quot;/&gt;&lt;span&gt;Wide &amp;amp; Deep 模型结构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;模型分为左右两个部分，左边是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;宽度模块，负责记忆性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。右边是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;深度模块，负责泛化性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，输入内容是稀疏特征，经过特征隐向量嵌入查找得到低维的稠密向量表示。&lt;/span&gt;&lt;/p&gt;&lt;h4/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;220:506&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;4&quot;&gt;4&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;DeepFM 模型&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;在Wide &amp;amp; Deep 模型的深度模块中，DNN 模块可以自动学习特征之间的高阶交互关系。然而，它并不能保证学习到良好的低阶特征交互。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，宽度模块可以通过人工提取交叉特征的方式引入部分的低阶特征交互关系，但是人们依旧不能期望能通过手工枚举的形式罗列所有有效的特征组合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而经典的因子分解机模型，旨在显式地建模特征之间的二阶交互关系，能自动捕捉所有的二阶特征交互关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了弥补现有的模型要么太偏向于学习高阶特征交互，要么太偏向于学习线性特征，或者依赖于人工经验来提取低阶特征交互的缺点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Huifeng Guo 等人提出了&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DeepFM 模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，将因子分解机和多层感知机融合到一个模型中，使得新的模型能&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;同时拥有良好的建模低阶特征交互（来自FM 模块）和高阶特征交互（来自DNN 模块）的能力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mAG2oEcvFwWSTD8HO5DtPSOYoBFKpVXSlnw99GzHBlJHqtb5gXLee0lgm5D7Ogs0IdoTqWA4V1UA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DeepFM 模型结构&lt;/span&gt;&lt;/p&gt;&lt;h4/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;199:501&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;5&quot;&gt;5&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;DCN 模型&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;人们普遍认识到，线性模型虽然简单方便，有高扩展性且易于解释，但是它的表达能力有限，依赖于工程师手工设计交叉特征，并且不能泛化到训练数据中未曾出现过的特征组合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到目前为止，自动学习高阶特征交互的能力还是依赖于DNN。因此，学者们对DNN 在特征交互上的进一步改进颇为感兴趣。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;考虑到DNN 的特点是只能隐式地对潜在的高阶特征交互进行建模，而其建模过程和结果都是一个黑盒，并不能保证能够学习到全面的高阶特征交互。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;是否能够通过设计一种新的深度神经网络，使得它在高阶特征交互的学习上有某种良好的特性呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;带着这种问题，Ruoxi Wang 等人提出了&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DCN模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，它具有非常优异的特点：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;能够显式地捕捉高阶特征交互，并且阶数可控。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个模型的框架和Wide&amp;amp;Deep、DeepFM 类似，也是分成左右两个部分，本节只讨论DCN 的特殊部分——&lt;/span&gt;&lt;strong&gt;&lt;span&gt;交叉网络（Cross Network）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，结构如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7502392344497608&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mAG2oEcvFwWSTD8HO5DtPScJG1kZawucia4kG8EFjrtkZhX2FT9nLIeh7Z1GbfMsvuWFufWyOiakiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1045&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DCN 中的交叉网络模块&lt;/span&gt;&lt;/p&gt;&lt;h4/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;218:521&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;6&quot;&gt;6&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;xDeepFM 模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;DCN 的发表很快吸引了许多业内学者的浓厚兴趣。其中，Jianxun Lian 等人发现，虽然DCN 中的交叉网络具有简洁、计算高效的优点，但同时也有一个明显的缺点，即交叉网络最终的隐状态的形式有很大的局限性，它只能是原始特征隐向量 &lt;span&gt;&lt;mjx-container jax=&quot;SVG&quot; role=&quot;presentation&quot; tabindex=&quot;0&quot; ctxtmenu_counter=&quot;3&quot; data-formula=&quot;\boldsymbol{x}_{0}&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -452 1062.6 617.6&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M74 282H63Q43 282 43 296Q43 298 45 307T56 332T76 365T110 401T159 433Q200 451 233 451H236Q273 451 282 450Q358 437 382 400L392 410Q434 452 483 452Q538 452 568 421T599 346Q599 303 573 280T517 256Q494 256 478 270T462 308Q462 343 488 367Q501 377 520 385Q520 386 516 389T502 396T480 400T462 398Q429 383 415 341Q354 116 354 80T405 44Q449 44 485 74T535 142Q539 156 542 159T562 162H568H579Q599 162 599 148Q599 135 586 111T550 60T485 12T397 -8Q313 -8 266 35L258 44Q215 -7 161 -7H156Q99 -7 71 25T43 95Q43 143 70 165T125 188Q148 188 164 174T180 136Q180 101 154 77Q141 67 122 59Q124 54 136 49T161 43Q183 43 200 61T226 103Q287 328 287 364T236 400Q200 400 164 377T107 302Q103 288 100 285T80 282H74Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(659, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/span&gt; 的一种缩放形式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了探索更自由的显式高阶特征交互，Jianxun Lian 等人提出了一种新的网络结构——&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;压缩交互网络（Compressed Interaction Network，CIN）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;压缩交互网络的灵感来自两个方面。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第一，用了向量级别（vector-wise）的交互取代原素级别（bit-wise）的交互。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然用隐向量来表示一个特征域，那么不同的特征域之间的交互是有意义的，而同一个特征内的元素之间的交互是无意义的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，DNN 采用的是元素级别的全连接操作，它虽然在理论上能建模任意复杂的函数，但是要学好它并不容易。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尤其是在推荐场景中特征交互明显的数据集上，DNN 是否真的能高效地刻画高阶特征交互仍然是一个未知数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;无独有偶，Alex Beutel 等人在Latent Cross 一文中也提倡向量级别的交互，并且通过一个模拟数据经验性地证明了，要训练好一个DNN 去捕捉特征交互并不容易。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二，既然深度神经网络的优势在于自动抽取复杂的特征，例如从图像、文本和语音等复杂的原始数据中自动提取抽象的特征，那么是否可以把所有的特征组合看成散乱无章的原始数据，期望利用神经网络去从中自动提取到有用的特征交互呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;答案是可能的，这便是压缩交互网络中“压缩”一词的由来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图展示了压缩交互网络的整体结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6712962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mAG2oEcvFwWSTD8HO5DtPS48FjAygPA4NNBSzZia49QR6IxGFmXia2XrtjMjvopId2NwAmX7GzM88A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;压缩交互网络的整体结构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为每层都是前一层和输入特征嵌入矩阵的交互操作，因此网络每增加一层，能够达到的特征交互阶数就增加了一层。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了让模型从低阶到高阶的特征交互都能充分地捕捉到，每层的特征图都会历经一个求和池化操作并输送给最终的预测单元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得一提的是，压缩交互网络的结构与循环神经网络（RNN）和卷积神经网络（CNN）都颇有渊源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与循环神经网络相同的是，压缩交互网络的每次计算都取决于前一层网络的激活值和一个输入值；不同的是，循环神经网络每次输入的内容是新的（例如，一个句子里面的不同单词），每层神经元的参数是共享的；而压缩交互网络的每次输入的内容是固定的（总是原始的特征嵌入矩阵），而每层神经元的参数是新的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与卷积神经网络异曲同工之处是，压缩交互网络的中间计算结果 &lt;span&gt;&lt;mjx-container jax=&quot;SVG&quot; role=&quot;presentation&quot; tabindex=&quot;0&quot; ctxtmenu_counter=&quot;10&quot; data-formula=&quot;\boldsymbol{Z}^{k+1}&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -853.7 2183.5 853.7&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;5A&quot; d=&quot;M223 430Q192 430 192 448Q192 450 225 561T261 677Q265 683 270 684Q273 686 534 686Q796 686 797 685Q805 682 805 673Q805 668 804 661T800 648T798 641Q796 637 531 352L266 67L329 66H364Q412 66 446 70T523 96T596 157Q617 186 630 220T649 273T663 297Q667 299 684 299H688Q715 299 715 281Q715 278 673 145T628 8Q626 4 617 0H348Q289 0 221 0T139 -1Q112 -1 99 -1T78 1T69 5T68 12Q68 16 71 31T77 49L84 57Q91 65 104 79T133 110T170 151T213 196L610 624H540Q533 624 514 624T488 624T467 623T443 620T422 616T398 609T373 600Q292 560 255 449Q251 436 246 433T223 430Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(861.4, 363) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6B&quot; d=&quot;M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(521, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1299, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/span&gt; 可以类比为一幅图像，需要从中学出 &lt;span&gt;&lt;mjx-container jax=&quot;SVG&quot; role=&quot;presentation&quot; tabindex=&quot;0&quot; ctxtmenu_counter=&quot;7&quot; data-formula=&quot;H_{k+1}&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 2153.1 891&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;48&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(831, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6B&quot; d=&quot;M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(521, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1299, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/span&gt; 个特征图，每个特征图配置一个参数量为 &lt;span&gt;&lt;mjx-container jax=&quot;SVG&quot; role=&quot;presentation&quot; tabindex=&quot;0&quot; ctxtmenu_counter=&quot;5&quot; data-formula=&quot;H_{k} \times M&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -683 3522.8 840.8&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;48&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(831, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6B&quot; d=&quot;M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1471.6, 0)&quot;&gt;&lt;path data-c=&quot;D7&quot; d=&quot;M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2471.8, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/span&gt; 的卷积核，特征图的维度为D。&lt;/span&gt;&lt;/p&gt;&lt;h4/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;7&quot;&gt;7&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AutoInt 模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;随着Transformer 模型在自然语言处理任务上的成功应用，学者们也逐渐探索&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Transformer 的结构如何应用在学习特征交互上&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Weiping Song 等人将Transformer 中的核心模块Multi-head Self-Attention（MSA）——作用在推荐任务的特征嵌入表示层，用来自动学习高阶的特征交互。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MSA 中有两个重要单元——&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自注意力机制（self-attention）和多头映射（multi-head）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自注意力机制旨在改善特征的隐向量表示，使得新的向量可以适量包含其他特征的信息（称为上下文感知的向量表示），而不再是独自的ID 表示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它本质上是一种以&amp;lt; 查询词，索引键，内容值&amp;gt; 为形式的特征交互过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个特征以自己的向量表示作为查询词（Query），和其他特征的向量为索引键（Key）计算相似度，再以相似度为权重，把其他特征的向量（作为内容值Value）作用在自身向量上。&lt;/span&gt;&lt;/p&gt;&lt;h4/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107294&quot;&gt;&lt;section&gt;&lt;section hm_fix=&quot;192:493&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JaFvPvvA2J1Clvz4XjNkCCVBtkQpCltfeUCXf9ZIy5iabeyU9OpE347LBN0rHfLxDmwibicgY4DKcwdFhQYbJkicNQ/640?wx_fmt=png&quot; data-w=&quot;59&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;8&quot;&gt;8&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;特征交互的其他思路&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;如何有效地学习特征交互是推荐系统精排、广告点击率等阶段中十分重要的一个难点。这方面的研究工作还有很多，受篇幅所限，本文不能一一列举。感兴趣的读者可以参考相关文章继续阅读。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;新浪微博AI Lab 团队提出的FiBiNet模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，从两个方面改进了现有特征交互方法：将传统的两个向量点积或者哈达玛积操作替换成双线性乘法操作，用来捕捉更细粒度的特征交互关系；引入了SENET 模块，动态地调整特征向量的重要程度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;华为诺亚方舟实验室提出的两阶段训练模型AutoFIS，&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;能够自动捕捉到有意义的特征交互，摒弃无意义的甚至会带来噪声的特征交互，最终能同时在效果和效率上改进已有模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;阿里妈妈团队基于DIN 模型的框架&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，提出CAN 模型，把特征交互形式化成一种基于DNN 的特征变换。例如，要得到特征A 相对于目标特征B 的隐向量表示，只需要为特征B 专门引入一组DNN 的参数，当把特征A的原始隐向量输入给这个DNN 时，这个DNN 的输出向量就是特征A 和特征B 交互过后的隐向量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文节选自《推荐系统：前沿与实践》（李东胜 练建勋 张乐 任侃 卢暾 邬涛 谢幸 著）。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;7&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p data-autoskip=&quot;1&quot; hm_fix=&quot;203:544&quot;&gt;本文节选自《推荐系统：前沿与实践》（李东胜 练建勋 张乐 任侃 卢暾 邬涛 谢幸 著）。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;专享六折优惠，扫描下方二维码抢购！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.265740740740741&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mAG2oEcvFwWSTD8HO5DtPS5ZjFgKLsNafefHVvf9cXdJhWPlE3IcaKfpyvf5RPibqSPlwpNlIic1nA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;6400.png&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;发布：刘恩惠&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;审核：陈歆懿&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3ntPMYAJur3UuYzhSDgO7Puv74VHDtgNjyJbpQvt1gicgSpjrlpDy6BheYoAmtjiaF7cdIuPkuUlFkw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1920&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;29.8961937716263&quot; data-fileid=&quot;503655759&quot; data-ratio=&quot;0.01574074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3ntPMYAJur3UuYzhSDgO7Pu8DQL5f0FQIuDZC87yrAuNLy4frEdlMeWkthrlzczb0RbMOBQCAwDrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果喜欢本文&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;欢迎&lt;/span&gt; &lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;留言&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;分享至朋友圈&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 三连&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;92644&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt; &lt;strong&gt;热文推荐 &lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;574&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;244&quot; data-fileid=&quot;503655761&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3m3jibtjia3lCrCvUY6N19QMZ3FjCcpuHouXkdLicQVUiaLicgR8cgSbk7RA8G427GKowhbEvVefuJp53g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;▼点击阅读原文，了解本书详情~&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3a9b25c1dbd4f576335839ba144a7a1e</guid>
<title>你真的需要Apple TV吗？不如自制一个Android TV！</title>
<link>https://toutiao.io/k/52qhy81</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;去年我写了一篇《树莓派家用指北》，介绍了树莓派是如何作为家庭服务器改善我的生活的，指路链接 👉 &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2ODAyNTgyMQ==&amp;amp;mid=2247484910&amp;amp;idx=1&amp;amp;sn=c539198095c8d4828d06f933777510a9&amp;amp;chksm=ceb3d15cf9c4584aa5c5b4e104e8aba0ad41f1df5e4fc57588400939d3e6a208135476e34140&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;树莓派家用指北&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;树莓派家用指北&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天我们的主角依旧是我的那个树莓派，只是以另一种形式在我的家里发光发热——电视盒子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这可能有人会好奇，这个树莓派用作电视盒子后，原先的家庭服务器怎么办？事实上我之所以把这个树莓派做成电视盒子，第一个原因是我搬家了，需要重新升级规划下家里的软件系统，第二是我用 NAS 替代了原先的树莓派用作家庭服务器（有机会的话以后讲一下）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以为了不让这个“理财产品”就这么吃灰下去，我一直积极探索可能的用处，终于，我发现了一个最适合他的场景——Android TV。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;为什么会想到 Android TV？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搬家之后，新屋子里有一个电视 + 办宽带送的中国移动的电视盒子，第一次打开它的时候，卡顿的系统、上古的 UI、繁杂的广告让我不禁感叹，这真的是 2022 年的东西吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;心想那要不买一个 Apple TV 吧？可再看看价格，不免囊中羞涩，算了算了，还是留点老婆本吧。况且 Apple TV 这么好的盒子用在一个只有 1080P 的电视里属实是有些浪费了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.49859154929577465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhlyqGwA1TGgHWG5lWkoAbibaSibMP9FzuoIGibThMvZffmG3uIp4UL2dDuQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1420&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然用不了苹果的电视服务，用安卓的总可以吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是我又去搜索了一些国内的电视盒子，什么小米的、当贝的、荣耀的，横向比较了一下，不是性能孱弱（通常都是 2GB+32GB）就是广告遍地，而且还不能看海外电视。当然了，最关键的是还要多花一笔钱，想了想还是放弃了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然国内的安卓盒子不行，为什么不试试原生的 Android TV 呢？2022 年了，原生的 Android TV 应该有不少的发展了吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抱着试一试的心态，我打开了 Android 开发者的官网，发现 2022 年的 Android TV 无论是 UI 还是体验，都比以前有了长足进步，现在就差一个载体，而我刚好有这个最好的载体——树莓派。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4972253052164262&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhlOzicZCoyg24N3hUno6DAj2Z9fgSXE5D7MqeYia3PhP6apYNQibFqphPZg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1802&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;行动起来&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文不是一个教学贴，因此不会手把手的记录整个流程，简单介绍一些我在自制这一过程中的关键点以及可能出现的问题。参考的帖子：https://konstakang.com/devices/rpi4/LineageOS18-ATV/&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;准备工作&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你需要准备的东西有：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一个树莓派 3B/4B，至少有 2GB RAM，建议 32GB+ 的 SD 卡（我的是 8GB RAM + 256GB ROM）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一根 mini HDMI 转 HDMI/DP/VGA 数据线（根据你家的电视接口定）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;树莓派风扇（如果有最好，毕竟是 24 小时不关机的，散热还是有必要的）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我选择的是 konstakang 提供的 LineageOS 18.1 Android TV (Android 11)，没有选择上 Android 12 的原因是当时还没有出 12 的 GApps（谷歌提供的一些套件），再加上一个电视盒子也没必要追求那么新的操作系统（国内还有不少手机停在 Android 10 万年不更新）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;rom 地址在 👉https://www.androidfilehost.com/?fid=17825722713688273838&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给树莓派刷入安卓系统的方法和刷入其他系统的方法基本一致，建议直接使用 Raspberry Pi Imager 烧录系统。工具地址 👉https://www.raspberrypi.com/software/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后就和安卓刷机没什么区别了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;resize 你的 SD 卡&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1717557251908397&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhl2OuTNkK9RyIP56l3xAus49olRKyx33p3jUaViaDkpyCMHgsGuPKibMTA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1572&quot;/&gt;刚烧录的 Android TV 系统会出现不正常分区的问题，我们需要将 SD 卡上的空白空间都利用起来，执行 resize 的流程也很简单，只需要使用 TWRP 将提供的 resize.zip 刷入系统即可。流程和安卓刷机是一样的，需要借助一个叫做 TWRP 的工具，有安卓刷机经验的小伙伴应该很了解这个步骤。有关 TWRP 的介绍这里就不展开了，移步 👉https://twrp.me&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhl5iaYLzsxN5AxZfIRLhEicYR8ZkLdR4HLsWnIaPYicb5Xfc8a8iaC8icicgJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;resize.zip 的下载地址：https://androidfilehost.com/?fid=2981970449027577728&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;root &amp;amp; GApps 的安装&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhljGErGoPiaWOzBjGPOmB6vbiaicxmZUccG0peh5VCLPKeRKIQNMyMcmTyA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然选择了自建 Android TV，肯定是希望可以享受到一些海外的优质媒体服务，那么谷歌套件就必不可少了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要借助 magisk 实现 root，然后刷入一些谷歌套件 GApps（需要科学上网），通常我们会选择 OpenGApps（感谢开源 🙏）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;rpi-magisk 地址：https://androidfilehost.com/?fid=2981970449027577730&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OpenGApps for andriod tv：https://opengapps.org/?arch=arm64&amp;amp;api=11.0&amp;amp;variant=tvstock&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;其他实用技巧&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;SSH 连接你的 Android TV&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;打开开发者选项&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;连接电视盒子&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;adb connect 192.168.2.134&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;以 root 方式访问 adb&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.19562575941676794&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhlrIgl2mFJl4plQ0AUq9r4MkziasicePEugaApoyhiak9sObW2SIZbMlJyQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1646&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;adb root&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;从 android tv 获取 ssh 访问的 private key&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;adb pull /data/ssh/ssh_host_rsa_key my_private_key&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;文件添加权限&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;因为该文件是利用 adb 下载得到的，利用该文件执行 ssh 命令时会提示权限过高，因此需要设置权限为 400&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.26700680272108845&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhlw7EdVBNI2HicLibt5oiaP4PjlB6pbgFtbMae3fia3cJCHv1druLdXegr0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1176&quot;/&gt;&lt;/figure&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;chmod 400 my_private_key&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;ssh 连接树莓派&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5886666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhlADWZJycBLpBTVYq53yEcRUDGibaISJiceOVtMJ3ae3LrD5U5ZlicayiakQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1500&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ssh -i my_private_key root@&amp;lt;你的树莓派地址&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;查看当前 cpu 温度&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过查看你的树莓派运行时的温度，来决定是否需要为其加装一个风扇&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cat /sys/class/thermal/thermal_zone0/temp&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.09237875288683603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhlOaDfVb5fhYMLZOOYibribicWt2J9AZR204FwNKKD7ac2aScVFSiaIkg03Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;866&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;最后&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前这个 Android TV 服务在我家里已经运行了有半年了，配合着家里的软路由实现入口级的科学上网以及 NAS 用作家庭媒体中心，最后利用小爱音箱红外版接入了小米智能家居，已经可以实现不逊色于 Apple TV 的娱乐服务。不信，你看看我家的猫咪都爱上了看电视呢！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8568464730290456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gyby8dXA5fdSPqCvX08kuHVhlIx1vDFUWAdsenxtM6UBaYIicjyNWJHCDobflrrJnJ1zkiasevETtfHHg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;964&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>