<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4522bb53bd0e1a9e8e12431844547348</guid>
<title>详解 Redis 分布式锁的 5 种方案</title>
<link>https://toutiao.io/k/awcan1r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;本地加锁&lt;/code&gt;的方式在分布式的场景下不适用，所以本文我们来探讨下如何引入&lt;code&gt;分布式锁&lt;/code&gt;解决本地锁的问题。本篇所有代码和业务基于我的开源项目 PassJava。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇主要内容如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39223300970873787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCooKxnMKGclCbNIib8H6M1c4Y8htHcasQqZruiaP4oUd6qjiaicPJb8K9Ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、本地锁的问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们来回顾下本地锁的问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前题目微服务被拆分成了四个微服务。前端请求进来时，会被转发到不同的微服务。假如前端接收了 10 W 个请求，每个微服务接收 2.5 W 个请求，假如缓存失效了，每个微服务在访问数据库时加锁，通过锁（&lt;code&gt;synchronzied&lt;/code&gt; 或 &lt;code&gt;lock&lt;/code&gt;）来锁住自己的线程资源，从而防止&lt;code&gt;缓存击穿&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一种&lt;code&gt;本地加锁&lt;/code&gt;的方式，在&lt;code&gt;分布式&lt;/code&gt;情况下会带来数据不一致的问题：比如服务 A 获取数据后，更新缓存 key =100，服务 B 不受服务 A 的锁限制，并发去更新缓存 key = 99，最后的结果可能是 99 或 100，但这是一种未知的状态，&lt;strong&gt;与期望结果不一致&lt;/strong&gt;。流程图如下所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8601851851851852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCYJjUHGalvNeDic5vRZDXKkx4snDuXpjGzbbGoibT5EyhHlgblBah7bgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、什么是分布式锁&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于上面本地锁的问题，我们需要一种支持&lt;strong&gt;分布式集群环境&lt;/strong&gt;下的锁：查询 DB 时，只有一个线程能访问，其他线程都需要等待第一个线程释放锁资源后，才能继续执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;生活中的案例&lt;/strong&gt;：可以把锁看成房门外的一把&lt;code&gt;锁&lt;/code&gt;，所有并发线程比作&lt;code&gt;人&lt;/code&gt;，他们都想进入房间，房间内只能有一个人进入。当有人进入后，将门反锁，其他人必须等待，直到进去的人出来。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5092592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPC1LT84btcNTFoo7RDRAGgHQI6FulBXxFAC27MToEWg3NVPsCea0PuWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看下分布式锁的基本原理，如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1843220338983051&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCW5kYr6zdAYibDutqNGy618aVemA1fWcOpibZo0apj46ODQoHicjxcgu7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;944&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来分析下上图的分布式锁：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;1.前端将 10W 的高并发请求转发给四个题目微服务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.每个微服务处理 2.5 W 个请求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.每个处理请求的线程在执行业务之前，需要先抢占锁。可以理解为“占坑”。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4.获取到锁的线程在执行完业务后，释放锁。可以理解为“释放坑位”。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;5.未获取到的线程需要等待锁释放。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;6.释放锁后，其他线程抢占锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;7.重复执行步骤 4、5、6。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大白话解释：所有请求的线程都去同一个地方&lt;code&gt;“占坑”&lt;/code&gt;，如果有坑位，就执行业务逻辑，没有坑位，就需要其他线程释放“坑位”。这个坑位是所有线程可见的，可以把这个坑位放到 Redis 缓存或者数据库，这篇讲的就是如何用 Redis 做&lt;code&gt;“分布式坑位”&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、Redis 的 SETNX&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 作为一个公共可访问的地方，正好可以作为“占坑”的地方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 Redis 实现分布式锁的几种方案，我们都是用 SETNX 命令（设置 key 等于某 value）。只是高阶方案传的参数个数不一样，以及考虑了异常情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看下这个命令，&lt;code&gt;SETNX&lt;/code&gt;是&lt;code&gt;set If not exist&lt;/code&gt;的简写。意思就是当 key 不存在时，设置 key 的值，存在时，什么都不做。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Redis 命令行中是这样执行的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;set&lt;/span&gt; &amp;lt;key&amp;gt; &amp;lt;value&amp;gt; NX&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以进到 redis 容器中来试下 &lt;code&gt;SETNX&lt;/code&gt; 命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先进入容器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;docker &lt;span&gt;exec&lt;/span&gt; -it &amp;lt;容器 id&amp;gt; redid-cli&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后执行 SETNX 命令：将 &lt;code&gt;wukong&lt;/code&gt; 这个 key 对应的 value 设置成 &lt;code&gt;1111&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;set&lt;/span&gt; wukong 1111 NX&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回 &lt;code&gt;OK&lt;/code&gt;，表示设置成功。重复执行该命令，返回 &lt;code&gt;nil&lt;/code&gt;表示设置失败。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38485804416403785&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCqDib3bibbTLKphRWEAwVbPEzKyxicEeibrFrgRYd3Q4WR8OaH8Ia7Jylcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;四、青铜方案&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先用 Redis 的 SETNX 命令来实现最简单的分布式锁。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 青铜原理&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看下流程图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.223433242506812&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCxs1PdjQntwo8jPGInhlib5VuXULINGuH4Md9vcpXoxzqxFeQibojcMwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;734&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;多个并发线程都去 Redis 中申请锁，也就是执行 setnx 命令，假设线程 A 执行成功，说明当前线程 A 获得了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他线程执行 setnx 命令都会是失败的，所以需要等待线程 A 释放锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线程 A 执行完自己的业务后，删除锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他线程继续抢占锁，也就是执行 setnx 命令。因为线程 A 已经删除了锁，所以又有其他线程可以抢占到锁了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码示例如下，Java 中 setnx 命令对应的代码为 &lt;code&gt;setIfAbsent&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;setIfAbsent 方法的第一个参数代表 key，第二个参数代表值。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 1.先抢占锁&lt;/span&gt;&lt;br/&gt;Boolean lock = redisTemplate.opsForValue().setIfAbsent(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;, &lt;span&gt;&quot;123&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(lock) {&lt;br/&gt;  &lt;span&gt;// 2.抢占成功，执行业务&lt;/span&gt;&lt;br/&gt;  List&amp;lt;TypeEntity&amp;gt; typeEntityListFromDb = getDataFromDB();&lt;br/&gt;  &lt;span&gt;// 3.解锁&lt;/span&gt;&lt;br/&gt;  redisTemplate.delete(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; typeEntityListFromDb;&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// 4.休眠一段时间&lt;/span&gt;&lt;br/&gt;  sleep(&lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;// 5.抢占失败，等待锁释放&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; getTypeEntityListByRedisDistributedLock();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个小问题：那为什么需要休眠一段时间？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为该程序存在递归调用，可能会导致栈空间溢出。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 青铜方案的缺陷&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;青铜之所以叫青铜，是因为它是最初级的，肯定会带来很多问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设想一种家庭场景&lt;/strong&gt;：晚上小空一个人开锁进入了房间，打开了电灯💡，然后突然&lt;code&gt;断电&lt;/code&gt;了，小空想开门出去，但是找不到门锁位置，那小明就进不去了，外面的人也进不来。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4388888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCzibWudjp1rq4A1o3adMEI0ibtGDsRwTjEQJKdK6tmVMlyicF24Ud8aiaiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从技术的角度看：setnx 占锁成功，业务代码出现异常或者服务器宕机，没有执行删除锁的逻辑，就造成了&lt;code&gt;死锁&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那如何规避这个风险呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置锁的&lt;code&gt;自动过期时间&lt;/code&gt;，过一段时间后，自动删除锁，这样其他线程就能获取到锁了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;四、白银方案&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 生活中的例子&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到的青铜方案会有死锁问题，那我们就用上面的规避风险的方案来设计下，也就是我们的白银方案。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42314814814814816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCCic0Z4jaqRJwiavWD7Ukib30EtY15O8UF9uK5RpM7BLicPPY9ibLanwvphA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是生活中的例子：小空开锁成功后，给这款智能锁设置了一个&lt;code&gt;沙漏倒计时⏳&lt;/code&gt;，沙漏完后，门锁自动打开。即使房间突然断电，过一段时间后，锁会自动打开，其他人就可以进来了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 技术原理图&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和青铜方案不同的地方在于，在占锁成功后，设置锁的过期时间，这两步是分步执行的。如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.393939393939394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCeLZgEhcM9QkFLdLZOlTlKxB7FhoHiab3Ys85zmuia7F9l5mzvqlbuTDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3 示例代码&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;清理 redis key 的代码如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 在 10s 以后，自动清理 lock&lt;/span&gt;&lt;br/&gt;redisTemplate.expire(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, TimeUnit.SECONDS);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 1.先抢占锁&lt;/span&gt;&lt;br/&gt;Boolean lock = redisTemplate.opsForValue().setIfAbsent(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;, &lt;span&gt;&quot;123&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(lock) {&lt;br/&gt;    &lt;span&gt;// 2.在 10s 以后，自动清理 lock&lt;/span&gt;&lt;br/&gt;    redisTemplate.expire(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, TimeUnit.SECONDS);&lt;br/&gt;    &lt;span&gt;// 3.抢占成功，执行业务&lt;/span&gt;&lt;br/&gt;    List&amp;lt;TypeEntity&amp;gt; typeEntityListFromDb = getDataFromDB();&lt;br/&gt;    &lt;span&gt;// 4.解锁&lt;/span&gt;&lt;br/&gt;    redisTemplate.delete(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; typeEntityListFromDb;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.4 白银方案的缺陷&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;白银方案看似解决了线程异常或服务器宕机造成的锁未释放的问题，但还是存在其他问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为占锁和设置过期时间是分两步执行的，所以如果在这两步之间发生了异常，则锁的过期时间根本就没有设置成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以和青铜方案有一样的问题：&lt;strong&gt;锁永远不能过期&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;五、黄金方案&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.1 原子指令&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的白银方案中，占锁和设置锁过期时间是分步两步执行的，这个时候，我们可以联想到什么：事务的原子性（Atom）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;原子性&lt;/strong&gt;：多条命令要么都成功执行，要么都不执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将两步放在一步中执行：占锁+设置锁过期时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 正好支持这种操作：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 设置某个 key 的值并设置多少毫秒或秒 过期。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; &amp;lt;key&amp;gt; &amp;lt;value&amp;gt; PX &amp;lt;多少毫秒&amp;gt; NX&lt;br/&gt;或&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; &amp;lt;key&amp;gt; &amp;lt;value&amp;gt; EX &amp;lt;多少秒&amp;gt; NX&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后可以通过如下命令查看 key 的变化&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ttl &amp;lt;key&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面演示下如何设置 key 并设置过期时间。注意：执行命令之前需要先删除 key，可以通过客户端或命令删除。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 设置 key=wukong，value=1111，过期时间=5000ms&lt;/span&gt;&lt;br/&gt;&lt;span&gt;set&lt;/span&gt; wukong 1111 PX 5000 NX&lt;br/&gt;&lt;span&gt;# 查看 key 的状态&lt;/span&gt;&lt;br/&gt;ttl wukong&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行结果如下图所示：每运行一次 ttl 命令，就可以看到 wukong 的过期时间就会减少。最后会变为 -2（已过期）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.604494382022472&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPC6W6ribv0GrOUr2eIbMRQ7sUbU2y1RFaG7IQndiaFPT7xXCaVZKJLiaKZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;890&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2 技术原理图&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;黄金方案和白银方案的不同之处：获取锁的时候，也需要设置锁的过期时间，这是一个原子操作，要么都成功执行，要么都不执行。如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2429378531073447&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCdblLIiaSCYehjzIJS9Gp55XCK4oXYTeckYVtOibgOM5SIoIsTG4qKrSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;708&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.3 示例代码&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置 &lt;code&gt;lock&lt;/code&gt; 的值等于 &lt;code&gt;123&lt;/code&gt;，过期时间为 10 秒。如果 &lt;code&gt;10&lt;/code&gt; 秒 以后，lock 还存在，则清理 lock。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setIfAbsent(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;, &lt;span&gt;&quot;123&quot;&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, TimeUnit.SECONDS);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.4 黄金方案的缺陷&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还是举生活中的例子来看下黄金方案的缺陷。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;5.4.1 用户 A 抢占锁&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPC1K0JW5eS1IF98g0aWlcyBkEcYUPEmy0gnj8P4Sh0YuzXIl60o4F00A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;用户 A 先抢占到了锁，并设置了这个锁 10 秒以后自动开锁，锁的编号为 &lt;code&gt;123&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;10 秒以后，A 还在执行任务，此时锁被自动打开了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;5.4.2 用户 B 抢占锁&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5148148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPChRkgmU6LQX4DbL0HMxia96n5jJI10ibhQUXhpYKIMTZ5REuSV4jrsicicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;用户 B 看到房间的锁打开了，于是抢占到了锁，设置锁的编号为 &lt;code&gt;123&lt;/code&gt;，并设置了过期时间 &lt;code&gt;10 秒&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因房间内只允许一个用户执行任务，所以用户 A 和 用户 B 执行任务&lt;code&gt;产生了冲突&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户 A 在 &lt;code&gt;15 s&lt;/code&gt; 后，完成了任务，此时 用户 B 还在执行任务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户 A 主动打开了编号为 &lt;code&gt;123&lt;/code&gt;的锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户 B 还在执行任务，发现锁已经被打开了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户 B 非常生气：&lt;strong&gt;我还没执行完任务呢，锁怎么开了？&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;5.4.3 用户 C 抢占锁&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4888888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCPXLQjLm5IUoJTEENwRicWpwvNO70F0e44tEegG0ctSK0jtibckD4AhoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;用户 B 的锁被 A 主动打开后，A 离开房间，B 还在执行任务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户 C 抢占到锁，C 开始执行任务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;因房间内只允许一个用户执行任务，所以用户 B 和 用户 C 执行任务产生了冲突。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的案例中我们可以知道，因为用户 A 处理任务所需要的时间&lt;strong&gt;大于&lt;/strong&gt;锁自动清理（开锁）的时间，所以在自动开锁后，又有其他用户抢占到了锁。当用户 A 完成任务后，会把其他用户抢占到的锁给主动打开。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这里为什么会打开别人的锁？&lt;/strong&gt;因为锁的编号都叫做 &lt;code&gt;“123”&lt;/code&gt;，用户 A 只认锁编号，看见编号为 &lt;code&gt;“123”&lt;/code&gt;的锁就开，结果把用户 B 的锁打开了，此时用户 B 还未执行完任务，当然生气了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;六、铂金方案&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6.1 生活中的例子&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的黄金方案的缺陷也很好解决，给每个锁设置&lt;strong&gt;不同的编号&lt;/strong&gt;不就好了～&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示，B 抢占的锁是蓝色的，和 A 抢占到绿色锁不一样。这样就不会被 A 打开了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做了个动图，方便理解：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.53&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCFp3KibbyiaDX33F09vYxgrCAsSDNlu27bp6FTiaQ8hoJyxeF8Y4DaRpWQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot;/&gt;&lt;figcaption&gt;动图演示&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;静态图更高清，可以看看：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4861111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPCypJNVNqkP6rWXtTrFWwVurrAATicgcNVUZib82kqzRokryeKdxtFdn9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6.2 技术原理图&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与黄金方案的不同之处：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;设置锁的过期时间时，还需要设置唯一编号。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主动删除锁的时候，需要判断锁的编号是否和设置的一致，如果一致，则认为是自己设置的锁，可以进行主动删除。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5436408977556109&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPC2ASpBXtSqU7PEORIRO8alyIeOQCpIKFhGh9FMj8flcC0ia9kFbjaq7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6.3 代码示例&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 1.生成唯一 id&lt;/span&gt;&lt;br/&gt;String uuid = UUID.randomUUID().toString();&lt;br/&gt;&lt;span&gt;// 2. 抢占锁&lt;/span&gt;&lt;br/&gt;Boolean lock = redisTemplate.opsForValue().setIfAbsent(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;, uuid, &lt;span&gt;10&lt;/span&gt;, TimeUnit.SECONDS);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(lock) {&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;抢占成功：&quot;&lt;/span&gt; + uuid);&lt;br/&gt;    &lt;span&gt;// 3.抢占成功，执行业务&lt;/span&gt;&lt;br/&gt;    List&amp;lt;TypeEntity&amp;gt; typeEntityListFromDb = getDataFromDB();&lt;br/&gt;    &lt;span&gt;// 4.获取当前锁的值&lt;/span&gt;&lt;br/&gt;    String lockValue = redisTemplate.opsForValue().get(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 5.如果锁的值和设置的值相等，则清理自己的锁&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(uuid.equals(lockValue)) {&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;清理锁：&quot;&lt;/span&gt; + lockValue);&lt;br/&gt;        redisTemplate.delete(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; typeEntityListFromDb;&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;抢占失败，等待锁释放&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 4.休眠一段时间&lt;/span&gt;&lt;br/&gt;    sleep(&lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 5.抢占失败，等待锁释放&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; getTypeEntityListByRedisDistributedLock();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;1.生成随机唯一 id，给锁加上唯一值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.抢占锁，并设置过期时间为 10 s，且锁具有随机唯一 id。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.抢占成功，执行业务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4.执行完业务后，获取当前锁的值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;5.如果锁的值和设置的值相等，则清理自己的锁。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6.4 铂金方案的缺陷&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的方案看似很完美，但还是存在问题：第 4 步和第 5 步并不是原子性的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.511002444987775&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPC6ic74ktD4f773wOGtPU9g44VAQiatpUicas0VA09A8icibibbyqEvdt2WVqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;818&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;时刻：0s。线程 A 抢占到了锁。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;时刻：9.5s。线程 A 向 Redis 查询当前 key 的值。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;时刻：10s。锁自动过期。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;时刻：11s。线程 B 抢占到锁。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;时刻：12s。线程 A 在查询途中耗时长，终于拿多锁的值。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;时刻：13s。线程 A 还是拿自己设置的锁的值和返回的值进行比较，值是相等的，清理锁，但是这个锁其实是线程 B 抢占的锁。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如何规避这个风险呢？钻石方案登场。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;七、钻石方案&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的线程 A 查询锁和删除锁的逻辑不是&lt;code&gt;原子性&lt;/code&gt;的，所以将查询锁和删除锁这两步作为原子指令操作就可以了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7.1 技术原理图&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示，红色圈出来的部分是钻石方案的不同之处。用脚本进行删除，达到原子操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.281767955801105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3a5lYCIhj7XqURmAduLGPC7FFoyj4fDEJdG5UYibsia5lQFLPdMN6YmJsOnIgoic24rEf16sm4zicxdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7.2 代码示例&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如何用脚本进行删除呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来看一下这段 Redis 专属脚本：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; redis.call(&lt;span&gt;&quot;get&quot;&lt;/span&gt;,KEYS[1]) == ARGV[1]&lt;br/&gt;&lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; redis.call(&lt;span&gt;&quot;del&quot;&lt;/span&gt;,KEYS[1])&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; 0&lt;br/&gt;end&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段脚本和铂金方案的获取key，删除key的方式很像。先获取 KEYS[1] 的 value，判断 KEYS[1] 的 value 是否和 ARGV[1] 的值相等，如果相等，则删除 KEYS[1]。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么这段脚本怎么在 Java 项目中执行呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分两步：先定义脚本；用 redisTemplate.execute 方法执行脚本。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 脚本解锁&lt;/span&gt;&lt;br/&gt;String script = &lt;span&gt;&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;&lt;/span&gt;;&lt;br/&gt;redisTemplate.execute(&lt;span&gt;new&lt;/span&gt; DefaultRedisScript&amp;lt;Long&amp;gt;(script, Long&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;), &lt;span&gt;Arrays&lt;/span&gt;.&lt;span&gt;asList&lt;/span&gt;(&quot;&lt;span&gt;lock&lt;/span&gt;&quot;), &lt;span&gt;uuid&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的代码中，KEYS[1] 对应&lt;code&gt;“lock”&lt;/code&gt;，ARGV[1] 对应 &lt;code&gt;“uuid”&lt;/code&gt;，含义就是如果 lock 的 value 等于 uuid 则删除 lock。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这段 Redis 脚本是由 Redis 内嵌的 Lua 环境执行的，所以又称作 Lua 脚本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那钻石方案是不是就完美了呢？有没有更好的方案呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下篇，我们再来介绍另外一种分布式锁的王者方案：Redisson。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;八、总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇通过本地锁的问题引申出分布式锁的问题。然后介绍了五种分布式锁的方案，由浅入深讲解了不同方案的改进之处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面几种方案的不断演进的过程中，知道了系统中哪些地方可能存在异常情况，以及该如何更好地进行处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举一反三，这种不断演进的思维模式也可以运用到其他技术中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面总结下上面五种方案的缺陷和改进之处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;青铜方案&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;缺陷：业务代码出现异常或者服务器宕机，没有执行主动删除锁的逻辑，就造成了死锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;改进：设置锁的自动过期时间，过一段时间后，自动删除锁，这样其他线程就能获取到锁了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;白银方案&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;缺陷：占锁和设置锁过期时间是分步两步执行的，不是原子操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;改进：占锁和设置锁过期时间保证原子操作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;黄金方案&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;缺陷：主动删除锁时，因锁的值都是相同的，将其他客户端占用的锁删除了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;改进：每次占用的锁，随机设为较大的值，主动删除锁时，比较锁的值和自己设置的值是否相等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;铂金方案&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;缺陷：获取锁、比较锁的值、删除锁，这三步是非原子性的。中途又可能锁自动过期了，又被其他客户端抢占了锁，导致删锁时把其他客户端占用的锁删了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;改进：使用 Lua 脚本进行获取锁、比较锁、删除锁的原子操作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;钻石方案&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;缺陷：非专业的分布式锁方案。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;改进：Redission 分布式锁。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;王者方案&lt;/strong&gt;，下篇见～&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述所有代码都基于 PassJava 开源项目，后端、前端、小程序都上传到同一个仓库里面了，大家可以通过 github 或 码云访问。地址如下：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;: https://github.com/Jackson0714/PassJava-Platform&lt;/p&gt;&lt;p&gt;&lt;strong&gt;码云&lt;/strong&gt;：https://gitee.com/jayh2018/PassJava-Platform&lt;/p&gt;&lt;p&gt;&lt;strong&gt;配套教程&lt;/strong&gt;：www.passjava.cn&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考资料：&lt;/p&gt;&lt;p&gt;http://redis.cn/commands/set.html&lt;/p&gt;&lt;p&gt;https://www.bilibili.com/video/BV1np4y1C7Yf&lt;/p&gt;&lt;p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关于我&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ 签约作者、蓝桥签约作者、阿里云专家博主、51CTO 红人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎加入悟空的私密星球，目前已经有 &lt;span&gt;140+&lt;/span&gt; 人加入。&lt;span&gt;星球最低价，优惠券用完后涨价。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.215625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ28aPfIU8Y1xSjHibxrQLLQCCibjKegzicic7mKDaUGU5S4KWibtfYriaTaCbibs68CzvZSlJen6gCLC1jSA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加入后立即解锁以下独家内容：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0727969348659003&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ28aPfIU8Y1xSjHibxrQLLQCjEJ299my0GD5v3Zdakbml6NWDicSanzGkwkAuFwt6hQWhE2vEfDncJQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1044&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;我是悟空，努力变强，变身超级赛亚人！&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>654fa4d119abbd186912b0993fde1976</guid>
<title>HuggingGPT 火了：一个 ChatGPT 控制所有 AI 模型，自动帮人完成 AI 任务</title>
<link>https://toutiao.io/k/cu4cja9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content              autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h5&gt;丰色 发自 凹非寺&lt;br/&gt;量子位 | 公众号 QbitAI&lt;/h5&gt;&lt;p&gt;最强组合：&lt;strong&gt;&lt;span&gt;HuggingFace+ChatGPT&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt; ——&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HuggingGPT&lt;/strong&gt;，它来了！&lt;/p&gt;&lt;p&gt;只要给定一个AI任务，例如“下面这张图片里有什么动物，每种有几只”。&lt;/p&gt;&lt;p&gt;它就能帮你自动分析需要哪些AI模型，然后&lt;strong&gt;直接去调用HuggingFace上的相应模型&lt;/strong&gt;，来帮你执行并完成。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;544&quot; data-ratio=&quot;0.4537037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTVHZvUSrRa4ZOkF2CxnVScFY3FKasibqT6LVrqoEQVXZKicp5zia5LQQ6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-width=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;整个过程，你要做的就只是&lt;strong&gt;用自然语言将你的需求输出&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;这项由浙大与微软亚研院的合作成果，一经发布就迅速爆火。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;1098&quot; data-ratio=&quot;1.1755888650963597&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynT5w9ueFFO2SbOibJGSD8VOkk6KknVI2BnPicUhsMn2mwAQicfo2vzsZgwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;934&quot; data-width=&quot;934&quot;/&gt;&lt;/p&gt;&lt;p&gt;英伟达AI研究科学家Jim Fan直呼：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这是我本周读到的最有意思的论文。它的思想非常接近“Everything App”&lt;span&gt;（万物皆App，被AI直接读取信息）&lt;/span&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;而一位网友则“直拍大腿”：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这不就是ChatGPT“调包侠”吗？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;66&quot; data-ratio=&quot;0.09880239520958084&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTnxy15CWC98X2Tt7NDOPgLUnlp7zbvH6kS1lXRmaL1icOfJI0eDJdfqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;668&quot; data-width=&quot;668&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;AI进化速度一日千里，给我们留口饭吃吧……&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;240&quot; data-ratio=&quot;0.22598870056497175&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTdJibY2QBuF0KUaOZKXGDibxAUOEfovegp5AmcuZtyvZG5Tg2OKibTcV4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1062&quot; data-width=&quot;1062&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以，具体怎么回事儿？&lt;/p&gt;&lt;h2&gt;HuggingGPT：你的AI模型“调包侠”&lt;/h2&gt;&lt;p&gt;其实，若说这个组合物只是“调包侠”，那格局小了。&lt;/p&gt;&lt;p&gt;它的真正用义，是AGI。&lt;/p&gt;&lt;p&gt;如作者所言，迈向AGI的关键一步是能够解决具有不同领域和模式的复杂AI任务。&lt;/p&gt;&lt;p&gt;我们目前的成果离此还有距离——大量模型只能出色地完成某一特定任务。&lt;/p&gt;&lt;p&gt;然而大语言模型LLM在语言理解、生成、交互和推理方面的表现，让作者想到：&lt;/p&gt;&lt;p&gt;可以将它们作为中间控制器，来管理现有的所有AI模型，通过“调动和组合每个人的力量”，来解决复杂的AI任务。&lt;/p&gt;&lt;p&gt;在这个系统中，&lt;strong&gt;语言是通用的接口&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;于是，HuggingGPT就诞生了。&lt;/p&gt;&lt;p&gt;它的工程流程分为四步：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;首先，任务规划。&lt;/strong&gt;ChatGPT将用户的需求解析为任务列表，并确定任务之间的执行顺序和资源依赖关系。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;其次，模型选择。&lt;/strong&gt;ChatGPT根据HuggingFace上托管的各专家模型的描述，为任务分配合适的模型。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;接着，任务执行。&lt;/strong&gt;混合端点&lt;span&gt;（包括本地推理和HuggingFace推理）&lt;/span&gt;上被选定的专家模型根据任务顺序和依赖关系执行分配的任务，并将执行信息和结果给到ChatGPT。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最后，输出结果。&lt;/strong&gt;由ChatGPT总结各模型的执行过程日志和推理结果，给出最终的输出。&lt;/p&gt;&lt;p&gt;如下图所示。&lt;/p&gt;&lt;p&gt;假定我们给出这样一个请求：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;请生成一个女孩正在看书的图片，她的姿势与example.jpg中的男孩相同。然后请用你的声音描述新图片。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可以看到HuggingGPT是如何将它拆解为6个子任务，并分别选定模型执行得到最终结果的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9981481481481481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTLrxMicG9qJF6a9STqPKb0Z9ib1NmJ0sjYk5bnUlOjwbQFMibl0wfyXuOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;具体效果怎么样？&lt;/p&gt;&lt;p&gt;作者采用gpt-3.5-turbo和text-davinci-003这俩&lt;strong&gt;可以通过OpenAI API公开访问&lt;/strong&gt;的变体，进行了实测。&lt;/p&gt;&lt;p&gt;如下图所示：&lt;/p&gt;&lt;p&gt;在任务之间存在资源依赖关系的情况下，HuggingGPT可以根据用户的抽象请求正确解析出具体任务，完成图片转换。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;1140&quot; data-ratio=&quot;1.0836501901140685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTmDZmWOghKvGkicfMziaTbPqFBFYFdHxm5zBGnIcywBLicASLJguTMx6Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot; data-width=&quot;1052&quot;/&gt;&lt;/p&gt;&lt;p&gt;在音频和视频任务中，它也展现了组织模型之间合作的能力，通过分别并行和串行执行两个模型的方式，完了一段“宇航员在太空行走”的视频和配音作品。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0763358778625953&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTI2vFn0cXsWeJIgH3DicQTX5ftY1OUehhGyldJKIA9k8aHsL9wYYTAvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1048&quot;/&gt;&lt;/p&gt;&lt;p&gt;此外，它还可以集成多个用户的输入资源执行简单的推理，比如在以下三张图片中，数出其中有多少匹斑马。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;904&quot; data-ratio=&quot;0.8544423440453687&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTVNhmD8jaEKouChaLzPJZ9s4L1uZwbroHtCVnvr9VKCZatvlJ0lnUCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot; data-width=&quot;1058&quot;/&gt;&lt;/p&gt;&lt;p&gt;一句话总结：HuggingGPT可以在各种形式的复杂任务上表现出良好的性能。&lt;/p&gt;&lt;h2&gt;项目已开源，名叫「贾维斯」&lt;/h2&gt;&lt;p&gt;目前，HuggingGPT的论文已经发布，项目则正在建设中，代码只开源了一部分，已揽获1.4k标星。&lt;/p&gt;&lt;p&gt;我们注意到，它的项目名称很有意思，不叫本名HuggingGPT，而是钢铁侠里的AI管家&lt;strong&gt;&lt;span&gt;贾维斯&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（JARVIS）&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://res.wx.qq.com/t/wx_fed/we-emoji/res/v1.3.10/assets/newemoji/Yellowdog.png&quot; data-w=&quot;128&quot;/&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;1114&quot; data-ratio=&quot;0.7777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTo8vXsnaciccT2QEibsYicXJPAWibHXE49cyyibBlhGlIyyqibC9DHP0mWmHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-width=&quot;1432&quot;/&gt;&lt;/p&gt;&lt;p&gt;有人发现它和3月份刚发布的&lt;strong&gt;&lt;span&gt;Visual ChatGPT&lt;/span&gt;&lt;/strong&gt;的思想非常像：后者HuggingGPT，主要是可调用的模型范围扩展到了更多，包括数量和类型。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;507&quot; data-ratio=&quot;0.7921875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTAsbicTS6paVGUibSzJyibIOrnGybiaxl3Xeuqu89ldTJle3b327pAeGSVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-width=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;不错，其实它们都有一个共同作者：微软亚研院。&lt;/p&gt;&lt;p&gt;具体而言，Visual ChatGPT的一作是MSRA高级研究员吴晨飞，通讯作者为MSRA首席研究员段楠。&lt;/p&gt;&lt;p&gt;HuggingGPT则包括两位共同一作：&lt;/p&gt;&lt;p&gt;Shen Yongliang，TA来自浙江大学，在MSRA实习期间完成此项工作；&lt;/p&gt;&lt;p&gt;Song Kaitao，MSRA研究员。&lt;/p&gt;&lt;p&gt;其通讯作者为浙大计算机系教授庄越挺。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;396&quot; data-ratio=&quot;0.36574074074074076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTwZeHgAaDdYY1k1wFslt5d9oTJqgEad6kGe1D1QiaW0HbI2RILam8Qmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-width=&quot;1082&quot;/&gt;&lt;/p&gt;&lt;p&gt;最后，对于这个强大新工具的诞生，网友们很是兴奋，有人表示：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;ChatGPT已成为人类创建的所有AI的总指挥官了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;170&quot; data-ratio=&quot;0.183585313174946&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTDdicjd6ydQUq4Po62qkOA3uFLkkNsOSSec8I2XTAtXXhlfheepOMuoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;926&quot; data-width=&quot;926&quot;/&gt;&lt;/p&gt;&lt;p&gt;也有人据此认为：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;AGI可能不是一个LLM，而是由一个“中间人”LLM连接的多个相互关联的模型。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;258&quot; data-ratio=&quot;0.27564102564102566&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynTm7bTqRLsyOia0AqpHlMxJBM5yNdwNDtqzuwTN1ppsarhgCSibSibdOMUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;936&quot; data-width=&quot;936&quot;/&gt;&lt;/p&gt;&lt;p&gt;那么，我们是否已经开启“半AGI”的时代了？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;92&quot; data-ratio=&quot;0.09829059829059829&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCTibT7LkVRop1N10cUbjynT1WOibMkeZgd8qzR9YEpgiaJsAap3Hr9dFwkIZDhjKN8sW3pA8AdNlN9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;936&quot; data-width=&quot;936&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;论文地址：&lt;br/&gt;&lt;/span&gt;&lt;span&gt;https://arxiv.org/abs/2303.17580&lt;/span&gt;&lt;br/&gt;&lt;span&gt;项目链接：&lt;br/&gt;&lt;/span&gt;&lt;span&gt;https://github.com/microsoft/JARVIS&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考链接：&lt;br/&gt;&lt;/span&gt;&lt;span&gt;https://twitter.com/DrJimFan/status/1642563455298473986&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;— &lt;strong&gt;完&lt;/strong&gt; —&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;「人工智能」、「智能汽车」微信社群邀你加入！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;欢迎关注人工智能、智能汽车的小伙伴们加入交流群，与AI从业者交流、切磋，不错过最新行业发展&amp;amp;技术进展。&lt;/p&gt;&lt;p&gt;PS. 加好友请务必备注您的姓名-公司-职位噢 ~&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YicUhk5aAGtBIYHY6XEtEedPhTUYAdKev9WH0ibWHOr4IYOvI1T6MNuV9yicoJffRAe0KhiaNwJXX4lhKJNaq8C01g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点这里&lt;span&gt;👇&lt;/span&gt;关注我，记得标星哦～&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MzIzNjc1NzUzMw==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YicUhk5aAGtCEFSVW5ubo08Zfv1qB5iapricibTBdETkBNtolJxnSUib6UXhjWWz3aib8vETY00P2lKR1uG3qLHicSoWg/0?wx_fmt=png&quot; data-nickname=&quot;量子位&quot; data-alias=&quot;QbitAI&quot; data-signature=&quot;追踪人工智能新趋势，报道科技行业新突破&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;一键三连「分享」、「点赞」和「在看」&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;科技前沿进展日日相见 ~ &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7142857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/g9RQicMD01M0tYoRQT2cMQRmPS5ZDyrrfzeksiay90KaDzlGBH61icqHxmgFKfvfXtVuwTHV740CDLAaXU1LIfZyoJEpYKcRIiaE/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;14&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8ed2d9578f662d4690bbead8c3b80bb7</guid>
<title>docker 使用过程中的一些技巧（4）</title>
<link>https://toutiao.io/k/hnhfaft</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content              autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;div data-md-url=&quot;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&amp;amp;action=edit&amp;amp;isNew=1&amp;amp;type=77&amp;amp;createType=0&amp;amp;token=284562238&amp;amp;lang=zh_CN&quot; markdown-here-wrapper-content-modified=&quot;true&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mp-common-profile&quot; data-from=&quot;0&quot; data-id=&quot;MzAwOTU4NzM5Ng==&quot; data-alias=&quot;yudadanwx&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/5Wib5Wh04ugwID68icb2oFcuc8rPmySWAHaWnQsQD8ax6PxocJ6nruWaMfxoarXh1eicga9ENlQrUPFTh8LFeEX7w/0?wx_fmt=png&quot; data-nickname=&quot;虞大胆的叽叽喳喳&quot; data-signature=&quot;《深入浅出HTTPS：从原理到实战》作者。&quot; data-weuitheme=&quot;light&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;p&gt;再分享一些docker使用过程中的心得体会。&lt;/p&gt;&lt;p&gt;1：docker tag 的妙用&lt;/p&gt;&lt;p&gt;Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE&lt;/p&gt;&lt;p&gt;以前没觉得有太大的作用，其实在构建一个同名镜像的时候，为避免原来的镜像被取消TAG，可以用tag命令重命名，这样新的镜像构建后再删除老的镜像。&lt;/p&gt;&lt;p&gt;2：镜像ID&lt;/p&gt;&lt;p&gt;这个和第一点有点类似，删除被多个引用的镜像时会报错，一般不要根据IMAGE ID删除，根据REPOSITORY和TAG删除：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ docker tag $run_image_previd  example:old

REPOSITORY    TAG                 IMAGE ID       CREATED      SIZE
example       v1-1679388649   2a9f35269c67   2 days ago   3.56GB
example      old             2a9f35269c67   2 days ago   3.56GB&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果执行下面操作：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ docker rmi 2a9f35269c67&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会提示 Error response from daemon: conflict: unable to delete 56bb5eff20cf (must be forced) - image is referenced in multiple repositories，所以我们应该先解绑：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ docker rmi $run_image_previd
$ docker rmi 2a9f35269c67&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3：避免构建镜像和启动容器有cache&lt;/p&gt;&lt;p&gt;前面文章也说过一些，再补充几点：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ docker-compose build --no-cache --force-rm&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;—no-cache：构建镜像的时候不使用cache&lt;br/&gt;—force-rm：不管构建是否成功，总是删除中间容器，这个以前文章也说过，构建镜像也会生成中间容器，默认构建失败中间容器不会删除&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ docker-compose up --force-recreate -d  &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;—force-recreate：就算镜像或配置文件没有修改也会重新生成容器&lt;/p&gt;&lt;p&gt;4：nginx的rewrite&lt;/p&gt;&lt;p&gt;这个和docker技术没有关系，当proxy代理的时候，默认将location的路径传递给upstream，如果不想传递呢？可以用rewrite先处理下，说实话没想到还能这么用，比如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;location /swagger {
    rewrite ^/swagger/(.*)$ /$1 break;
    proxy_pass http://localhost:3000/;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样访问/swagger的时候，传递的时候会去除这个路径，但它后面的参数还是透明代理。&lt;/p&gt;&lt;p title=&quot;MDH:PHA+PHNwYW4gaWQ9ImpzX3Bhc3Rld29yZF9zdGFydCI+PC9zcGFuPuWGjeWIhuS6q+S4gOS6m2Rv&amp;#10;Y2tlcuS9v+eUqOi/h+eoi+S4reeahOW/g+W+l+S9k+S8muOAgjwvcD48cD48YnI+PC9wPjxwPjHv&amp;#10;vJpkb2NrZXIgdGFnIOeahOWmmeeUqDwvcD48cD48YnI+PC9wPjxwPkNyZWF0ZSBhIHRhZyBUQVJH&amp;#10;RVRfSU1BR0UgdGhhdCByZWZlcnMgdG8gU09VUkNFX0lNQUdFPC9wPjxwPjxicj48L3A+PHA+5Lul&amp;#10;5YmN5rKh6KeJ5b6X5pyJ5aSq5aSn55qE5L2c55So77yM5YW25a6e5Zyo5p6E5bu65LiA5Liq5ZCM&amp;#10;5ZCN6ZWc5YOP55qE5pe25YCZ77yM5Li66YG/5YWN5Y6f5p2l55qE6ZWc5YOP6KKr5Y+W5raIVEFH&amp;#10;77yM5Y+v5Lul55SodGFn5ZG95Luk6YeN5ZG95ZCN77yM6L+Z5qC35paw55qE6ZWc5YOP5p6E5bu6&amp;#10;5ZCO5YaN5Yig6Zmk6ICB55qE6ZWc5YOP44CCPC9wPjxwPjxicj48L3A+PHA+Mu+8mumVnOWDj0lE&amp;#10;PC9wPjxwPjxicj48L3A+PHA+6L+Z5Liq5ZKM56ys5LiA54K55pyJ54K557G75Ly877yM5Yig6Zmk&amp;#10;6KKr5aSa5Liq5byV55So55qE6ZWc5YOP5pe25Lya5oql6ZSZ77yM5LiA6Iis5LiN6KaB5qC55o2u&amp;#10;SU1BR0UgSUTliKDpmaTvvIzmoLnmja5SRVBPU0lUT1JZ5ZKMVEFH5Yig6Zmk77yaPC9wPjxwPiZu&amp;#10;YnNwOzwvcD48cD5gYGA8L3A+PHA+JCBkb2NrZXIgdGFnICRydW5faW1hZ2VfcHJldmlkJm5ic3A7&amp;#10;IGV4YW1wbGU6b2xkPC9wPjxwPjxicj48L3A+PHA+UkVQT1NJVE9SWSZuYnNwOyAmbmJzcDsgVEFH&amp;#10;Jm5ic3A7ICZuYnNwOyAmbmJzcDsgJm5ic3A7ICZuYnNwOyAmbmJzcDsgJm5ic3A7ICZuYnNwOyAm&amp;#10;bmJzcDtJTUFHRSBJRCZuYnNwOyAmbmJzcDsgJm5ic3A7ICZuYnNwO0NSRUFURUQmbmJzcDsgJm5i&amp;#10;c3A7ICZuYnNwOyBTSVpFPC9wPjxwPmV4YW1wbGUmbmJzcDsgPHNwYW4gc3R5bGU9IndoaXRlLXNw&amp;#10;YWNlOnByZS13cmFwOyI+CTwvc3Bhbj4gdjEtMTY3OTM4ODY0OSZuYnNwOyAmbmJzcDsyYTlmMzUy&amp;#10;NjljNjcmbmJzcDsgJm5ic3A7MiBkYXlzIGFnbyZuYnNwOyAmbmJzcDszLjU2R0I8L3A+PHA+ZXhh&amp;#10;bXBsZSZuYnNwOyAmbmJzcDsgJm5ic3A7IG9sZCZuYnNwOyAmbmJzcDsgJm5ic3A7ICZuYnNwOyAm&amp;#10;bmJzcDsgJm5ic3A7ICZuYnNwOzJhOWYzNTI2OWM2NyZuYnNwOyAmbmJzcDsyIGRheXMgYWdvJm5i&amp;#10;c3A7ICZuYnNwOzMuNTZHQjwvcD48cD5gYGA8L3A+PHA+PGJyPjwvcD48cD7lpoLmnpzmiafooYzk&amp;#10;uIvpnaLmk43kvZzvvJo8L3A+PHA+PGJyPjwvcD48cD5gYGA8L3A+PHA+JCBkb2NrZXIgcm1pIDJh&amp;#10;OWYzNTI2OWM2NzwvcD48cD5gYGA8L3A+PHA+PGJyPjwvcD48cD7kvJrmj5DnpLogRXJyb3IgcmVz&amp;#10;cG9uc2UgZnJvbSBkYWVtb246IGNvbmZsaWN0OiB1bmFibGUgdG8gZGVsZXRlIDU2YmI1ZWZmMjBj&amp;#10;ZiAobXVzdCBiZSBmb3JjZWQpIC0gaW1hZ2UgaXMgcmVmZXJlbmNlZCBpbiBtdWx0aXBsZSByZXBv&amp;#10;c2l0b3JpZXPvvIzmiYDku6XmiJHku6zlupTor6XlhYjop6Pnu5HvvJo8L3A+PHA+PGJyPjwvcD48&amp;#10;cD5gYGA8L3A+PHA+JCBkb2NrZXIgcm1pICRydW5faW1hZ2VfcHJldmlkPC9wPjxwPiQgZG9ja2Vy&amp;#10;IHJtaSAyYTlmMzUyNjljNjc8L3A+PHA+YGBgPC9wPjxwPjxicj48L3A+PHA+M++8mumBv+WFjeae&amp;#10;hOW7uumVnOWDj+WSjOWQr+WKqOWuueWZqOaciWNhY2hlPC9wPjxwPjxicj48L3A+PHA+5YmN6Z2i&amp;#10;5paH56ug5Lmf6K+06L+H5LiA5Lqb77yM5YaN6KGl5YWF5Yeg54K577yaPC9wPjxwPjxicj48L3A+&amp;#10;PHA+YGBgPC9wPjxwPiQgZG9ja2VyLWNvbXBvc2UgYnVpbGQgLS1uby1jYWNoZSAtLWZvcmNlLXJt&amp;#10;PC9wPjxwPmBgYDwvcD48cD48YnI+PC9wPjxwPi0tbm8tY2FjaGXvvJrmnoTlu7rplZzlg4/nmoTm&amp;#10;l7blgJnkuI3kvb/nlKhjYWNoZTwvcD48cD4tLWZvcmNlLXJt77ya5LiN566h5p6E5bu65piv5ZCm&amp;#10;5oiQ5Yqf77yM5oC75piv5Yig6Zmk5Lit6Ze05a655Zmo77yM6L+Z5Liq5Lul5YmN5paH56ug5Lmf&amp;#10;6K+06L+H77yM5p6E5bu66ZWc5YOP5Lmf5Lya55Sf5oiQ5Lit6Ze05a655Zmo77yM6buY6K6k5p6E&amp;#10;5bu65aSx6LSl5Lit6Ze05a655Zmo5LiN5Lya5Yig6ZmkPC9wPjxwPjxicj48L3A+PHA+YGBgPC9w&amp;#10;PjxwPiQgZG9ja2VyLWNvbXBvc2UgdXAgLS1mb3JjZS1yZWNyZWF0ZSAtZCZuYnNwOyAjPC9wPjxw&amp;#10;PmBgYDwvcD48cD48YnI+PC9wPjxwPi0tZm9yY2UtcmVjcmVhdGXvvJrlsLHnrpfplZzlg4/miJbp&amp;#10;hY3nva7mlofku7bmsqHmnInkv67mlLnkuZ/kvJrph43mlrDnlJ/miJDlrrnlmag8L3A+PHA+PGJy&amp;#10;PjwvcD48cD4077yabmdpbnjnmoRyZXdyaXRlPC9wPjxwPjxicj48L3A+PHA+6L+Z5Liq5ZKMZG9j&amp;#10;a2Vy5oqA5pyv5rKh5pyJ5YWz57O777yM5b2TcHJveHnku6PnkIbnmoTml7blgJnvvIzpu5jorqTl&amp;#10;sIZsb2NhdGlvbueahOi3r+W+hOS8oOmAkue7mXVwc3RyZWFt77yM5aaC5p6c5LiN5oOz5Lyg6YCS&amp;#10;5ZGi77yf5Y+v5Lul55SocmV3cml0ZeWFiOWkhOeQhuS4i++8jOivtOWunuivneayoeaDs+WIsOi/&amp;#10;mOiDvei/meS5iOeUqO+8jOavlOWmgu+8mjwvcD48cD48YnI+PC9wPjxwPmBgYDwvcD48cD5sb2Nh&amp;#10;dGlvbiAvc3dhZ2dlciB7PC9wPjxwPjxzcGFuIHN0eWxlPSJ3aGl0ZS1zcGFjZTpwcmUtd3JhcDsi&amp;#10;Pgk8L3NwYW4+cmV3cml0ZSBeL3N3YWdnZXIvKC4qKSQgLyQxIGJyZWFrOzwvcD48cD48c3BhbiBz&amp;#10;dHlsZT0id2hpdGUtc3BhY2U6cHJlLXdyYXA7Ij4JPC9zcGFuPnByb3h5X3Bhc3MgaHR0cDovL2xv&amp;#10;Y2FsaG9zdDozMDAwLzs8L3A+PHA+fTwvcD48cD5gYGA8L3A+PHA+PGJyPjwvcD48cD7ov5nmoLfo&amp;#10;rr/pl64vc3dhZ2dlcueahOaXtuWAme+8jOS8oOmAkueahOaXtuWAmeS8muWOu+mZpOi/meS4qui3&amp;#10;r+W+hO+8jOS9huWug+WQjumdoueahOWPguaVsOi/mOaYr+mAj+aYjuS7o+eQhuOAgjxzcGFuIGNs&amp;#10;YXNzPSJqc19wYXN0ZXdvcmQiPjwvc3Bhbj48c3BhbiBpZD0ianNfcGFzdGV3b3JkX2VuZCI+PC9z&amp;#10;cGFuPjwvcD48cD48YnI+PC9wPg==&quot;/&gt;&lt;/div&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2a618f33679f4e66a36f6719cbad4e2f</guid>
<title>爬虫管理平台 Crawlab v0.6.1 专业版正式发布</title>
<link>https://toutiao.io/k/5tg30kk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content              autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;概览&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab v0.6.1 专业版正式发布，在社区版 v0.6.1 的基础上，集成了&lt;strong&gt;「可配置爬虫」&lt;/strong&gt;（画布）、&lt;strong&gt;「自动识别抓取规则」&lt;/strong&gt;（AI 支持）功能。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;可配置爬虫&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可配置爬虫在 Crawlab 里被称为&lt;strong&gt;「画布」&lt;/strong&gt;（Canvas），可以允许用户通过可视化界面配置爬虫的数据&lt;strong&gt;「抓取流程」&lt;/strong&gt;，如下图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5610859728506787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sczKD2TyOPj2S4FHUGS3xpXZ32wYHzCGdEt31p0fvT4WwenXFA155HC7GhHUha5cpGPuqTWsZCyAuYicJV9sib0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1768&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;画布&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还可以在上面&lt;strong&gt;「配置抓取规则」&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7151248164464024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sczKD2TyOPj2S4FHUGS3xpXZ32wYHzCGK750nByXNZHPzZrPmglM8kAMJUNkPibpXhp9BKoEiaTNPgziaQB7OHjzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1362&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;抓取规则&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还可以点击抓取项流程上的预览按钮（眼睛图标），查看配置抓取规则对应的数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7528223410576351&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sczKD2TyOPj2S4FHUGS3xpXZ32wYHzCGqO8qUxXtASFl5W9ItGTPCbToAkibjWqCn4bNp5hsYuT3NokO8wLibBeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1683&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;预览数据&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置完毕后，可以点击上方操作栏的&lt;strong&gt;「预览」&lt;/strong&gt;按钮查看对应的 Scrapy 爬虫代码。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7152974504249292&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sczKD2TyOPj2S4FHUGS3xpXZ32wYHzCGiaiciawOEBvEhYdJyKVxyQiaQIaH9wrJYW7icc0ObQD7Y9mueQqgmpQGOTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1412&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;预览爬虫代码&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，点击导出，可以将爬虫导出到已存在爬虫或者生成新爬虫。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4464856230031949&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sczKD2TyOPj2S4FHUGS3xpXZ32wYHzCGzUWRUXz5DKl710T0OhP1NR7CRhVFkTsNFia9ib3SqecUDEiaGo503LUEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1252&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;导出爬虫&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;自动识别抓取规则&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab v0.6.1 专业版集成了 AI 支持技术来自动识别抓取规则功能，该功能基于智能网页解析信息提取服务 &lt;span&gt;Webspot&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，目前可以识别列表页（List Page）以及分页（Pagination）以及提取相对应的字段提取 CSS 选择器。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37916666666666665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sczKD2TyOPj2S4FHUGS3xpXZ32wYHzCGyI3lh29eEXecicnudiazqMgFO15ds2zdwUkXE65SN54A50JA1Df4bAkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;AI 支持&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击 &lt;strong&gt;「AI 支持」&lt;/strong&gt; 按钮后，及可以在画布中生成对应的提取规则。下图为自动生成的爬虫画布。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5542372881355933&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sczKD2TyOPj2S4FHUGS3xpXZ32wYHzCGp8KZpRSPEiaKY4SMrjibPNibXICJ8nxrgdJGiajonia6Jd31m5W4p2XCWAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1180&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;自动生成爬虫画布&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;咨询购买&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如需要咨询购买 Crawlab v0.6.1 专业版，请查看官网 https://www.crawlab.cn/prices/ 或者微信联系 tikazyq1。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;Webspot: &lt;span&gt;https://github.com/crawlab-team/webspot&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b9ce77e309c0d95025819192dad87769</guid>
<title>VS 2022 开发隧道使用</title>
<link>https://toutiao.io/k/upimymv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content              autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h1&gt;概述&lt;/h1&gt;&lt;p&gt;首先使用开发隧道可以干嘛，引用官网的一句话叫做：可以在无法直接相互连接的计算机之间建立临时连接，创建一个 URL，使任何具有 Internet 连接的设备在 localhost 上运行时都可以连接到 ASP.NET Core 项目。&lt;/p&gt;&lt;p&gt;那么我们就可以在临时调试场景中，将当前的服务启动并生成一个外网的Url地址，让对方进行访问，不论是和第三方调试还是说和公司同事之间调试都是很方便的。&lt;/p&gt;&lt;h1&gt;前提条件&lt;/h1&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5604395604395604&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacd59IYr25avgxkVE8ibbCNEeIe1gn0IhNLx0QqCf9ic0T2drLQUwJXmBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1&gt;操作&lt;/h1&gt;&lt;h2&gt;创建隧道&lt;/h2&gt;&lt;p&gt;还以工具项目(https://gitee.com/AZRNG/my-example)进行举例，我们使用VS打开项目，然后再先创建隧道&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5210237659963437&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacvU2Ctia8QKlYT8MpaR1JcBK0aGGZ7gSWCkIwke9mNwckBaglgMWBd4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;547&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;点击创建隧道后就设置配置，注意先登录VS&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6813333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiaczL4dCbZ6A9ENY65o4Yz1pAicANciaj2sGReU5AtJZnpBmchTCrBvVWTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• 设置隧道的名称&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 隧道类型&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• Access：设置可以访问隧道的的身份验证，&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;点击确定后显示创建成功提示&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacw1f4F4kTBPozV6jX1pTaQTr4zom1pibrDanOEbUqJ8L64q5TNQ6Nnmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;使用隧道&lt;/h2&gt;&lt;p&gt;然后在启动项目的地方，选择使用隧道(默认会选中刚才创建的那个隧道)&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6346555323590815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacbxXzRZdxf1YPhiaNicJ3icA2a5IFvb0ySbNK0qABKNZ36S91g1sXZF2WA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;479&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;注意：一个项目或者解决方案可以有多个隧道，但一次只能有一个隧道处于活动(开启)状态。&lt;/p&gt;&lt;p&gt;如果不想开启隧道，在开发隧道里面选择无即可。&lt;/p&gt;&lt;p&gt;使用隧道后，我们启动项目，然后可以在输出窗口看到&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13320079522862824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacWibVeNA5VxdAvA767ibUB8qZicGCiawK2g8yBqLr3micvgbafpruGBHFqUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;503&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;后面这个地址就是新创建的URL，并且也会使用浏览器打开一个页面，该页面url为隧道的url而不是localhost URL，如图&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacbr6foTiaVicUkZtC0UaIroAIeLaBenLiaQCiaSK1vMgYrvj9no8UXyIIhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;选择继续后，我刚创建的这公共的隧道就可以使用了，只要项目继续在本地运行，这个url就可以被其他人在其他联网设备上任意访问了，通过swagger访问接口也可以正常使用&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5883495145631068&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacjzJtLjf6SYWdR7AqbxmUTiaVMIrE8r06LVIf2wKYOJibeiartFFQYBsyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;515&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;管理隧道&lt;/h2&gt;&lt;p&gt;在开发隧道下可以点击显示开发隧道窗口来管理隧道&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6425438596491229&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacoAFo2xkh4Dcu0yq0xlutLtzTuOMI2oMibpH5IWSUNg1b8yfTshONRcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;456&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在这个界面我们可以查看、添加和删除隧道等&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47043010752688175&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqJWIPOibmYz3zffD9ibPHjfiacWu0bzCfPabkCm3Bj730aQcqhYICr5H1O7rFv47RJktqBfaDby8s2Vg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;372&quot; title=&quot;null&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1&gt;参考资料&lt;/h1&gt;&lt;p&gt;VS2022中使用开发隧道：https://learn.microsoft.com/zh-cn/aspnet/core/test/dev-tunnels?view=aspnetcore-7.0&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>