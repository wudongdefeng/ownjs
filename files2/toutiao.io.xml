<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ece1030eab44b24de3f598679684cc7c</guid>
<title>快 50 岁了，怎么还在写代码？</title>
<link>https://toutiao.io/k/258iqho</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今年夏天这个暑假，姐姐家的小朋友由于暑期实习，借住在我家。小朋友是一位零零后，今年大三升大四，马上就面临着考公、考研、找工作等等人生重要的节点。实习工作不算太忙，晚上吃完饭后还能坐下来聊聊天。因此我得以能和年轻的一代进行深入的交流，探讨学习、职业、未来、人生等话题，借此我也得以了解到年轻人的一些想法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友的专业学的是计算机，既憧憬着未来，又对未来感到焦虑。本次的话题围绕着圈子中广泛流传的 35 岁危机（中年危机）展开。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：舅，您现在还在写代码吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：还在写代码啊，而且主要工作就是编程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：您差不多有 50 岁了吧，怎么还在写代码？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：我还没那么老，离 50 还差好几岁呢。你这话是不是包含两层意思？一层意思是都这么老了，还写代码，太丢人了。第二层意思是，年龄这么大，怎么还能写代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：我倒没想那么多，只是网络传闻程序员 35 岁就会下岗。对了，我正好问一问，如果您的领导比您还年轻，会不会觉得尴尬？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：这么说吧，编程就是一份工作，在谁的手下干活不都是干活。再说，中国人受“官本位”思想影响很深，觉得一个人没做管理就很失败。只要想到这个世界大部分的人都不是管理者，就可以很坦然的面对。再说，你做再大的官，仍然要受人管。即使你是公司的老板，一样还是需要满足用户需求，迎合用户。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：如果领导比我资历老，我心服口服，但如果领导比我年轻，我觉得有点难以接受。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：在你的同龄人中，或者比你年少的人当中，是不是有非常杰出的才俊？比如前段时间上热搜的华为天才少年，要是和他们比，那你确实会比较郁闷。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：这不能相提并论吧。首先他们只是特例，其次，他们离我比较远，感觉不明显。就像比尔.盖茨，年纪轻轻成为世界首富，但世上的人不会和自己过意不去，去和他比。但直属领导就不一样，每天都要面对。而且成为我的领导，应该不需要什么天赋吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：那你是认为应该拼资历啰。如果 IT 行业是一个拼资历的行业，就不会有那么多年轻人涌入。这个行业高速发展，不能用传统行业的思维来考虑问题。退一步说，如果职位都被资历深的人占据，年轻人得不到上升的机会，那年轻人也会抱怨吧。人不能这样，年轻时希望打破世界秩序，到年老时又拼命维护旧秩序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：也是，我之前看过一篇文章，讲到踏板效应：当拥挤的公交车在站台边停下时，车下的人会拼命的往车上挤，一边挤一边央求车上的人往里挪挪；而一旦挤上之后，就会试图阻止车下还在往上挤的人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：其实认识到这一点很重要，我当初选择 IT 行业，就是觉得它充满活力，充满无限可能，而这种可能也包含成为炮灰。虽然我最后也没能做出很好的成绩，但也能坦然接受这个结果。机遇、胆识、才能、毅力等等众多因素决定着一个人最终的成就，只要曾经努力过就行。再说，我也是凭借一技之长挣工资，不丢人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：我还是希望以后能成为管理者，面子上好看一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：哈哈，你这是没有受到社会的毒打，过十年再看吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：那网络上传说的 35 岁危机又是怎么回事？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：先问你一个问题，编写代码是不是脑力劳动？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：嗯，虽然程序员喜欢自黑码农或者搬砖的，但编写代码的确主要费脑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：你看电影中，是不是有很多白发苍苍的科学家、研究员和教授，他们都属于脑力劳动者，年龄大了，照样可以做科研。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：舅，您这是在偷换概念。那些科学家都是顶尖人才，属于金字塔的顶端，当然不愁饭碗。像我这样资质平平，以后可能就是一个普普通通的工程师。这个道理我懂，不管在哪个领域，能做到顶尖当然出路都很宽广，但我更关心的是普通人面临的困境。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：那些研究员也不是个个都是科学家啊！也有一些研究员只是一辈子做实验，并没有研究出什么成果。这样说吧，前段时间报道过一位日本老奶奶，58岁接触电脑，81岁自学编程，收到过苹果CEO蒂姆·库克的邀请参加WWDC大会。这虽然只是个案，但也说明，只要脑袋还在运转，写代码并非不可能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：感觉这个例子还是不太恰当，我现在的困惑就是，新技术层出不穷，就拿 python 来说吧，每年都会冒出新框架，现在都感觉学不过来，等到年龄大了，不是更跟不上了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：你为什么会认为学习能力和年龄有关呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：年龄大了，记忆力会退化，反应也会变慢，这可是有科学根据的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：这个我承认。但学习不仅仅靠记忆，反应慢可以多投入时间。如果你读过有关学习的研究，应该知道，学习过程中最重要将自己所学的知识串联起来运用到实际中，将自己所学的碎片知识系统的连接到一起，形成系统化的体系。这样所学的知识不会遗忘。随着年龄增长，掌握的知识越来越多，在学习新知识时就越容易和以往的知识发生联结。比如说，你开始学习 C 语言，是不是觉得很难。再学习 python 语言时，是不是觉得编程语言无非就是变量、条件判断、循环、函数等等。如果在学习 python 的时候，回忆起 C 语言是如何做的，是不是同时也巩固了 C 语言。这时你再转过头去复习一下 C 语言，会不会理解更深。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：有点道理，但计算机行业确实发展很快。您看，这里有个数据：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在18世纪时，知识更新周期为80～90年。19世纪到20世纪初，缩短为30年。上个世纪60～70年代，一般学科的知识更新周期为5～10年。而到了上个世纪80～90年代，许多学科的知识更新周期缩短为5年。而进入新世纪时，许多学科的知识更新周期已缩短至2～3年。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：不要听网上瞎掰活。我就问你，现实生活中，应用得最多的是不是经典物理，牛顿的三大运动定律在十七世纪就提出，距今已经有三四百年的历史。即使是像相对论、量子力学等大多数人都不懂的理论，也提出了一百多年了。我再问你，冯.诺依曼体系结构提出后，现在有变化吗？C 语言是哪一年发明的？C 语言仍然是使用最广泛的编程语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：但是，手机每年都会升级，操作系统每年也在更新，像 IOS 系统，都已经升级到 16 版本了。这说明，技术仍然迭代很快。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：确实，手机更新速度很快。但是，更新的只是工艺更精良、速度更快，操作系统也是越来越炫酷，但并没有什么革命性的进展，我们也不需要时刻掌握革命性的新知识。如果你做 app 开发，也是不断打磨产品，增加新的 feature，留给你去开创性地开发一款新软件的机会并不多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：话是这么说，要是被裁员了，怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我：这个话题比较大，等下次再聊吧。我想说的是，只要摆正心态，程序员这种职业，和以往的职业并没有什么两样，大胆做就是了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小朋友：嗯，先做做看吧。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>92f76dd0b2746548a01f5dac30f3a6d4</guid>
<title>项目上线一年，整理了一份SpringBoot性能优化方案！</title>
<link>https://toutiao.io/k/3ueuxa0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAApdEM5bfTMAAAAAstQy6ubaLX4KHWvLEZgBPE0qIES2F_UJz8zNPgMIvCZzBfvwmirOxm86HbPIbi&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=S7s6ianIic0ia4PicKJSfB8EjyjpQibPUAXolZPq5RXJLH39tyRBBBRuowz6k3DezOekt63TibgUSU5BCQUR9uc8b69GRXCbbiadicj6XYaPxz17icLicllWWDWvboYg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibC1DZqxOiabHIVdh4Z8FFc1wplL6cxa2eibTvl1xIOytt6icSUHvxROTLZwQzTSAkGQrQ&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM5nv7YHhmhvPsGGX04JCIgibK2x2Ru0TOY9HeZTGSIL1KQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08a1fc3d5c807ec30b07756771265bc6b6234fb9e05062ae69ab4@finder&quot; data-nickname=&quot;儒猿IT&quot; data-desc=&quot;出去面试被问到Seata，竟然一脸蒙圈？Seata是一个分布式事务框架，专门帮助我们解决分布式事务问题的。#Seata #分布式事务 #Java面试 @微信时刻 &quot; data-nonceid=&quot;10571939633984640713&quot; data-type=&quot;video&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h1 data-id=&quot;heading-0&quot;&gt;&lt;span&gt;文章来源：https://juejin.cn/post/7062548565800779789&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/3GHDOauYyUGbiaHXGx1ib5UxkKzSNtpMzY5tbbGdibG7icBSxlH783x1YTF0icAv8MWrmanB4u5qjyKfmYo1dDf7YbA/640?wx_fmt=gif&quot; data-w=&quot;100&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;前言&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.95&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/6guf7yARbV9VsEfFCU6bvzyN1lMw2XN1qNsNibhEoq5UbksibDoW6ccRGKDOWh4rGZr04bpQphQIlTPFkq52HK3Q/640?wx_fmt=gif&quot; data-w=&quot;60&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;SpringBoot已经成为Java届的No.1框架，每天都在蹂躏着数百万的程序员们。当服务的压力上升，对SpringBoot服务的优化就会被提上议程。&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;本文将详细讲解SpringBoot服务优化的一般思路，并附上若干篇辅助文章作为开胃菜。&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.95&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/621tyk2VKQTy2UmgOchQfN4JYde9MjAJJWsSBWrdWUe7ajC3AdLZK2LYVTicMW887Nk7iaoSq1tE4HqTKrwuTAKw/640?wx_fmt=gif&quot; data-w=&quot;60&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1.有监控才有方向&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在开始对SpringBoot服务进行性能优化之前，我们需要做一些准备，把SpringBoot服务的一些数据暴露出来。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，你的服务用到了缓存，就需要把缓存命中率这些数据进行收集；用到了数据库连接池，就需要把连接池的参数给暴露出来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们这里采用的监控工具是Prometheus，它是一个是时序数据库，能够存储我们的指标。SpringBoot可以非常方便的接入到Prometheus中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;创建一个SpringBoot项目后，首先，加入maven依赖。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.micrometer&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;micrometer-registry-prometheus&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.micrometer&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;micrometer-core&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;然后，我们需要在&lt;/span&gt;&lt;code&gt;&lt;span&gt;application.properties &lt;/span&gt;&lt;/code&gt;&lt;span&gt;配置文件中，开放相关的监控接口。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;management.endpoint.metrics.enabled=&lt;span&gt;true&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;management.endpoints.web.exposure.&lt;span&gt;include&lt;/span&gt;=*&lt;br mpa-from-tpl=&quot;t&quot;/&gt;management.endpoint.prometheus.enabled=&lt;span&gt;true&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;management.metrics.export.prometheus.enabled=&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;启动之后，我们就可以通过访问 &lt;/span&gt;&lt;code&gt;&lt;span&gt;http://localhost:8080/actuator/prometheus&lt;/span&gt;&lt;/code&gt;&lt;span&gt;来获取监控数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44061757719714967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbx7I0Qa9G88oMgUDYQAiaxoGM4FklA8FdgxJbdDW0RobP6Xgm68hMcFibw/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;842&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;想要监控业务数据也是比较简单的。你只需要注入一个MeterRegistry实例即可。下面是一段示例代码：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;MeterRegistry registry;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/test&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@ResponseBody&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; test() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    registry.counter(&lt;span&gt;&quot;test&quot;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&quot;from&quot;&lt;/span&gt;, &lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&quot;method&quot;&lt;/span&gt;, &lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    ).increment();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;ok&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;从监控连接中，我们可以找到刚刚添加的监控信息。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;test_total{&lt;span&gt;from&lt;/span&gt;=&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,method=&lt;span&gt;&quot;test&quot;&lt;/span&gt;,} &lt;span&gt;5.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;这里简单介绍一下流行的Prometheus监控体系，Prometheus使用拉的方式获取监控数据，这个暴露数据的过程可以交给功能更加齐全的telegraf组件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47177848775292863&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxBW5lEMwE5aS6ryfCsk6hdqG4Mic55icIeyZxbTmYW4dZibSdHIZI9QyOQ/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;939&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如图，我们通常使用Grafana进行监控数据的展示，使用AlertManager组件进行提前预警。这一部分的搭建工作不是我们的重点，感兴趣的同学可自行研究。下图便是一张典型的监控图，可以看到Redis的缓存命中率等情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxs39pep67A530IPeZib2Y6tZ7Eib2ib4MIg2QqoxaqasquKJY5KTRDr4ow/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-1&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2.Java生成火焰图&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;火焰图是用来分析程序运行瓶颈的工具。在纵向，表示的是调用栈的深度；横向表明的是消耗的时间。所以格子的宽度越大，越说明它可能是一个瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;火焰图也可以用来分析Java应用。可以从github上下载 async-profiler 的压缩包 进行相关操作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，我们把它解压到/root/目录。然后以javaagent的方式来启动Java应用。命令行如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;java -agentpath:/root/build/libasyncProfiler.&lt;span&gt;so&lt;/span&gt;=start,svg,&lt;span&gt;file&lt;/span&gt;=&lt;span&gt;profile&lt;/span&gt;.svg -jar spring-petclinic-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;.BUILD-SNAPSHOT.jar&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;运行一段时间后，停止进程，可以看到在当前目录下，生成了&lt;/span&gt;&lt;code&gt;&lt;span&gt;profile.svg&lt;/span&gt;&lt;/code&gt;&lt;span&gt;文件，这个文件是可以用浏览器打开的，一层层向下浏览，即可找到需要优化的目标。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3.Skywalking&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于一个web服务来说，最缓慢的地方就在于数据库操作。所以，使用本地缓存和分布式缓存优化，能够获得最大的性能提升。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于如何定位到复杂分布式环境中的问题，我这里想要分享另外一个工具：Skywalking。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Skywalking是使用探针技术（JavaAgent）来实现的。通过在Java的启动参数中，加入javaagent的Jar包，即可将性能数据和调用链数据封装、发送到Skywalking的服务器。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下载相应的安装包（如果使用ES存储，需要下载专用的安装包），配置好存储之后，即可一键启动。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;将agent的压缩包，解压到相应的目录。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;tar xvf skywalking-agent.tar.gz  -C /&lt;span&gt;opt&lt;/span&gt;/&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在业务启动参数中加入agent的包。比如，原来的启动命令是：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;java  -jar /opt/test-service/spring-boot-demo.jar  &lt;span&gt;--spring.profiles.active=dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;改造后的启动命令是：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;java -javaagen&lt;span&gt;t:&lt;/span&gt;/&lt;span&gt;opt&lt;/span&gt;/skywalking-agent/skywalking-agent.jar -Dskywalking.agent.service_name=the-demo-name  -jar /&lt;span&gt;opt&lt;/span&gt;/test-service/spring-boot-demo.ja  --spring.profiles.active=dev&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;访问一些服务的链接，打开Skywalking的UI，即可看到下图的界面。我们可以从图中找到响应比较慢QPS又比较高的的接口，进行专项优化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44907407407407407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbx0JOtGu8Ump2SrpTthLEeLCUenIamc4DIJszNwPq56KgH3KVSsKKy0Q/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-2&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4.优化思路&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对一个普通的Web服务来说，我们来看一下，要访问到具体的数据，都要经历哪些主要的环节。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如下图，在浏览器中输入相应的域名，需要通过DNS解析到具体的IP地址上。为了保证高可用，我们的服务一般都会部署多份，然后使用Nginx做反向代理和负载均衡。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Nginx根据资源的特性，会承担一部分动静分离的功能。其中，动态功能部分，会进入我们的SpringBoot服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.565947242206235&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxt90XGden7TIItoCvFPVP3vsMWXoEHakePibPABcND5VgbIJxdjaDQ6w/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;834&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SpringBoot默认使用内嵌的tomcat作为Web容器，使用典型的MVC模式，最终访问到我们的数据。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-3&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5.HTTP优化&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面我们举例来看一下，哪些动作能够加快网页的获取。为了描述方便，我们仅讨论HTTP1.1协议的。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.使用CDN加速文件获取&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比较大的文件，尽量使用CDN（Content Delivery Network）分发。甚至是一些常用的前端脚本、样式、图片等，都可以放到CDN上。CDN通常能够加快这些文件的获取，网页加载也更加迅速。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2.合理设置Cache-Control值&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;浏览器会判断HTTP头Cache-Control的内容，用来决定是否使用浏览器缓存，这在管理一些静态文件的时候，非常有用。相同作用的头信息还有Expires。Cache-Control表示多久之后过期，Expires则表示什么时候过期。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个参数可以在Nginx的配置文件中进行设置。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;location&lt;/span&gt; &lt;span&gt;~* ^.+\.(ico|gif|jpg|jpeg|png)$&lt;/span&gt; { &lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;# 缓存1年&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;add_header&lt;/span&gt; Cache-Control: &lt;span&gt;no&lt;/span&gt;-cache, max-age=&lt;span&gt;31536000&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.减少单页面请求域名的数量&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;减少每个页面请求的域名数量，尽量保证在4个之内。这是因为，浏览器每次访问后端的资源，都需要先查询一次DNS，然后找到DNS对应的IP地址，再进行真正的调用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;DNS有多层缓存，比如浏览器会缓存一份、本地主机会缓存、ISP服务商缓存等。从DNS到IP地址的转变，通常会花费&lt;/span&gt;&lt;code&gt;&lt;span&gt;20-120ms&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的时间。减少域名的数量，可加快资源的获取。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.开启gzip&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;开启gzip，可以先把内容压缩后，浏览器再进行解压。由于减少了传输的大小，会减少带宽的使用，提高传输效率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在nginx中可以很容易的开启。配置如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;gzip&lt;/span&gt; &lt;span&gt;on&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_min_length&lt;/span&gt; &lt;span&gt;1k&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_buffers&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;16k&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_comp_level&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_http_version&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;gzip_types&lt;/span&gt; text/plain application/javascript text/css;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;5.对资源进行压缩&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对JavaScript和CSS，甚至是HTML进行压缩。道理类似，现在流行的前后端分离模式，一般都是对这些资源进行压缩的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;6.使用keepalive&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于连接的创建和关闭，都需要耗费资源。用户访问我们的服务后，后续也会有更多的互动，所以保持长连接可以显著减少网络交互，提高性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;nginx默认开启了对客户端的keep avlide支持。你可以通过下面两个参数来调整它的行为。&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;http&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;keepalive_timeout&lt;/span&gt;  &lt;span&gt;120s&lt;/span&gt; &lt;span&gt;120s&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;keepalive_requests&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;nginx与后端upstream的长连接，需要手工开启，参考配置如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;location&lt;/span&gt; &lt;span&gt;~ /&lt;/span&gt;{ &lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;proxy_pass&lt;/span&gt; http://backend;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;proxy_http_version&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;proxy_set_header&lt;/span&gt; Connection &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-4&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6.Tomcat优化&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Tomcat本身的优化，也是非常重要的一环。可以直接参考下面的文章。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650523823&amp;amp;idx=1&amp;amp;sn=aa5f41974950e759d373505e9b7c32f6&amp;amp;chksm=8780cf6bb0f7467d0e1b4d2d957e3633726c11f30e185d9ed354f2f6ad2ff607357f555097ef&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;搞定tomcat重要参数调优！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;搞定tomcat重要参数调优！&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-5&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7.自定义Web容器&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你的项目并发量比较高，想要修改最大线程数、最大连接数等配置信息，可以通过自定义Web容器的方式，代码如下所示。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;(proxyBeanMethods = &lt;span&gt;false&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;WebServerFactoryCustomizer&lt;/span&gt;&amp;lt;&lt;span&gt;ConfigurableServletWebServerFactory&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  SpringApplication.run(PetClinicApplication.class, args);&lt;br mpa-from-tpl=&quot;t&quot;/&gt; }&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;customize&lt;/span&gt;&lt;span&gt;(ConfigurableServletWebServerFactory factory)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  TomcatServletWebServerFactory f = (TomcatServletWebServerFactory) factory;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        f.setProtocol(&lt;span&gt;&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  f.addConnectorCustomizers(c -&amp;gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   Http11NioProtocol protocol = (Http11NioProtocol) c.getProtocolHandler();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setMaxConnections(&lt;span&gt;200&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setMaxThreads(&lt;span&gt;200&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setSelectorTimeout(&lt;span&gt;3000&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setSessionTimeout(&lt;span&gt;3000&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   protocol.setConnectionTimeout(&lt;span&gt;3000&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  });&lt;br mpa-from-tpl=&quot;t&quot;/&gt; }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;注意上面的代码，我们设置了它的协议为&lt;/span&gt;&lt;span&gt;org.apache.coyote.http11.Http11Nio2Protocol&lt;/span&gt;&lt;span&gt;，意思就是开启了Nio2。这个参数在Tomcat8.0之后才有，开启之后会增加一部分性能。对比如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;默认。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;[root@localhost wrk2-master]# ./wrk -t2 -c100 -d30s -R2000 http://&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.57&lt;/span&gt;:&lt;span&gt;8080&lt;/span&gt;/owners?lastName=&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Running &lt;span&gt;30&lt;/span&gt;s test @ http://&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.57&lt;/span&gt;:&lt;span&gt;8080&lt;/span&gt;/owners?lastName=&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;2&lt;/span&gt; threads &lt;span&gt;and&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; connections&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread calibration: mean &lt;span&gt;lat&lt;/span&gt;.: &lt;span&gt;4588.131&lt;/span&gt;ms, rate sampling interva&lt;span&gt;l:&lt;/span&gt; &lt;span&gt;16277&lt;/span&gt;ms&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread calibration: mean &lt;span&gt;lat&lt;/span&gt;.: &lt;span&gt;4647.927&lt;/span&gt;ms, rate sampling interva&lt;span&gt;l:&lt;/span&gt; &lt;span&gt;16285&lt;/span&gt;ms&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread Stats   Avg      Stdev     Max   +/- Stdev&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Latency    &lt;span&gt;16.49&lt;/span&gt;s     &lt;span&gt;4.98&lt;/span&gt;s   &lt;span&gt;27.34&lt;/span&gt;s    &lt;span&gt;63.90&lt;/span&gt;%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Req/Sec   &lt;span&gt;106.50&lt;/span&gt;      &lt;span&gt;1.50&lt;/span&gt;   &lt;span&gt;108.00&lt;/span&gt;    &lt;span&gt;100.00&lt;/span&gt;%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;6471&lt;/span&gt; requests in &lt;span&gt;30.03&lt;/span&gt;s, &lt;span&gt;39.31&lt;/span&gt;MB &lt;span&gt;read&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Socket error&lt;span&gt;s:&lt;/span&gt; connect &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;read&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;write&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;, timeout &lt;span&gt;60&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Requests/sec:    &lt;span&gt;215.51&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Transfer/sec:      &lt;span&gt;1.31&lt;/span&gt;MB&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Nio2。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;[root@localhost wrk2-master]# ./wrk -t2 -c100 -d30s -R2000 http://&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.57&lt;/span&gt;:&lt;span&gt;8080&lt;/span&gt;/owners?lastName=&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Running &lt;span&gt;30&lt;/span&gt;s test @ http://&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.57&lt;/span&gt;:&lt;span&gt;8080&lt;/span&gt;/owners?lastName=&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;2&lt;/span&gt; threads &lt;span&gt;and&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; connections&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread calibration: mean &lt;span&gt;lat&lt;/span&gt;.: &lt;span&gt;4358.805&lt;/span&gt;ms, rate sampling interva&lt;span&gt;l:&lt;/span&gt; &lt;span&gt;15835&lt;/span&gt;ms&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread calibration: mean &lt;span&gt;lat&lt;/span&gt;.: &lt;span&gt;4622.087&lt;/span&gt;ms, rate sampling interva&lt;span&gt;l:&lt;/span&gt; &lt;span&gt;16293&lt;/span&gt;ms&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Thread Stats   Avg      Stdev     Max   +/- Stdev&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Latency    &lt;span&gt;17.47&lt;/span&gt;s     &lt;span&gt;4.98&lt;/span&gt;s   &lt;span&gt;26.90&lt;/span&gt;s    &lt;span&gt;57.69&lt;/span&gt;%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Req/Sec   &lt;span&gt;125.50&lt;/span&gt;      &lt;span&gt;2.50&lt;/span&gt;   &lt;span&gt;128.00&lt;/span&gt;    &lt;span&gt;100.00&lt;/span&gt;%&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;7469&lt;/span&gt; requests in &lt;span&gt;30.04&lt;/span&gt;s, &lt;span&gt;45.38&lt;/span&gt;MB &lt;span&gt;read&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  Socket error&lt;span&gt;s:&lt;/span&gt; connect &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;read&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;write&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;, timeout &lt;span&gt;4&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Requests/sec:    &lt;span&gt;248.64&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Transfer/sec:      &lt;span&gt;1.51&lt;/span&gt;MB&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;你甚至可以将tomcat替换成undertow。undertow也是一个Web容器，更加轻量级一些，占用的内容更少，启动的守护进程也更少，更改方式如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;exclusions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;exclusion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;exclusion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;/&lt;span&gt;exclusions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-undertow&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;h2 data-id=&quot;heading-6&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;8.各个层次的优化方向&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Controller层&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;controller层用于接收前端的查询参数，然后构造查询结果。现在很多项目都采用前后端分离的架构，所以controller层的方法，一般会使用@ResponseBody注解，把查询的结果，解析成JSON数据返回（兼顾效率和可读性）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于controller只是充当了一个类似功能组合和路由的角色，所以这部分对性能的影响就主要体现在数据集的大小上。如果结果集合非常大，JSON解析组件就要花费较多的时间进行解析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大结果集不仅会影响解析时间，还会造成内存浪费。假如结果集在解析成JSON之前，占用的内存是10MB，那么在解析过程中，有可能会使用20M或者更多的内存去做这个工作。我见过很多案例，由于返回对象的嵌套层次太深、引用了不该引用的对象（比如非常大的byte[]对象），造成了内存使用的飙升。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，对于一般的服务，保持结果集的精简，是非常有必要的，这也是DTO(data transfer object)存在的必要。如果你的项目，返回的结果结构比较复杂，对结果集进行一次转换是非常有必要的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，可以使用异步Servlet对Controller层进行优化。它的原理如下：Servlet 接收到请求之后，将请求转交给一个异步线程来执行业务处理，线程本身返回至容器，异步线程处理完业务以后，可以直接生成响应数据，或者将请求继续转发给其它 Servlet。&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Service层&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;service层用于处理具体的业务，大部分功能需求都是在这里完成的。service层一般是使用单例模式（prototype），很少会保存状态，而&lt;/span&gt;&lt;span&gt;且可以被controller&lt;/span&gt;&lt;span&gt;复用。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;service层的代码组织，对代码的可读性、性能影响都比较大。我们常说的设计模式，大多数都是针对于service层来说的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里要着重提到的一点，就是分布式事务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3979848866498741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxMI77Pr0fsmaPibnX8c2JuzYYvRU5yrOJNRYjicRGu2K6EIvKhIUlzLXg/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;794&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上图，四个操作分散在三个不同的资源中。要想达到一致性，需要三个不同的资源进行统一协调。它们底层的协议，以及实现方式，都是不一样的。那就无法通过Spring&lt;/span&gt;&lt;span&gt;提供的Transaction注解&lt;/span&gt;&lt;span&gt;来解决，需要借助外部的组件来完成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多人都体验过，加入了一些保证一致性的代码，一压测，性能掉的惊掉下巴。分布式事务是性能杀手，因为它要使用额外的步骤去保证一致性，常用的方法有：两阶段提交方案、TCC、本地消息表、MQ事务消息、分布式事务中间件等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4764309764309764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLZu4Fxst7ibSP5mLsqTKIsbxFtibciaiccaibOPJ3x6HTwvCSVWuROY3o7EUxCscGowyGtfk2ibsJ79Y9lA/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;594&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上图，分布式事务要在改造成本、性能、实效等方面进行综合考虑。有一个介于分布式事务和非事务之间的名词，叫&lt;/span&gt;&lt;span&gt;做&lt;strong&gt;柔性事务&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;柔性事务的理念是将业务逻辑和互斥操作，从资源层上移至业务层面。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于传统事务和柔性事务，我们来简单比较一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;ACID&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关系数据库, 最大的特点就是事务处理, 即满足ACID。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;原子性（Atomicity）：事务中的操作要么都做，要么都不做。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一致性（Consistency）：系统必须始终处在强一致状态下。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;隔离性（Isolation）：一个事务的执行不能被其他事务所干扰。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;持续性（Durability）：一个已提交的事务对数据库中数据的改变是永久性的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;BASE&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;BASE方法通过牺牲一致性和孤立性来提高可用性和系统性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;BASE为Basically &lt;/span&gt;&lt;span&gt;Available, Soft-state, Eventually consistent三者的缩写，其中BASE分别代表：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;互联网业务，推荐使用补偿事务，完成最终一致性。比如，通过一系列的定时任务，完成对数据的修复。具体可以参照下面的文章。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650525007&amp;amp;idx=1&amp;amp;sn=1dccfcb84f21fd9fe335a756a9c78c0f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;常用的 分布式事务 都有哪些？我该用哪个？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;常用的 分布式事务 都有哪些？我该用哪个？&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Dao层&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;经过合理的数据缓存，我们都会尽量避免请求穿透到Dao层。除非你对ORM本身提供的缓存特性特别的熟悉，否则，都推荐你使用更加通用的方式去缓存数据。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Dao层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，主要在于对ORM框架的使用上。比如，在JPA中，如果加了一对多或者多对多的映射关系，而又没有开启懒加载，级联查询的时候就容易造成深层次的检索，造成了内存开销大、执行缓慢的后果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在一些数据量比较大的业务中，多采用分库分表的方式。在这些分库分表组件中，很多简单的查询语句，都会被重新解析后分散到各个节点进行运算，最后进行结果合并。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举个例子，&lt;/span&gt;&lt;span&gt;select count(*) from a&lt;/span&gt;&lt;span&gt;这句简单的count语句，就可能将请求路由到十几张表中去运算，最后在协调节点进行统计，执行效率是可想而知的。目前，分库分表中间件，比较有代表性的是驱动层的ShardingJdbc和代理层的MyCat，它们都有这样的问题。这些组件提供给使用者的视图是一致的，但我们在编码的时候，一定要注意这些区别。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-10&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;End&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下面我们来总结一下。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们简单看了一下SpringBoot常见的优化思路。我们介绍了三个新的性能分析工具。一个是监控系统Prometheus，可以看到一些具体的指标大小；一个是火焰图，可以看到具体的代码热点；一个是Skywalking，可以分析分布式环境中的调用链。在对性能有疑惑的时候，我们都会采用类&lt;/span&gt;&lt;span&gt;似于&lt;strong&gt;神农氏尝百草&lt;/strong&gt;的&lt;/span&gt;&lt;span&gt;方式，综合各种测评工具的结果进行分析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SpringBoot自身的Web容器是Tomcat，那我们就可以通过对Tomcat的调优来获取性能提升。当然，对于服务上层的负载均衡Nginx，我们也提供了一系列的优化思路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，我们看了在经典的MVC架构下，Controller、Service、Dao的一些优化方向，并着重看了Service层的分布式事务问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里有一个具体的优化示例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650524679&amp;amp;idx=1&amp;amp;sn=8881766b35e1d65a65e520f3514f0ec9&amp;amp;chksm=8780cbc3b0f742d5721f10ec8eea9823ed8a7dbec4364846706e34df44b9e4518fed11b02906&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;5秒到1秒，记一次效果“非常”显著的性能优化&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;5秒到1秒，记一次效果“非常”显著的性能优化&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;SpringBoot作为一个广泛应用的服务框架，在性能优化方面已经做了很多工作，选用了很多高速组件。比如，数据库连接池默认使用hikaricp，Redis缓存框架默认使用lettuce，本地缓存提供caffeine等。对于一个普通的于数据库交&lt;/span&gt;&lt;span&gt;互的Web服务来说，缓存是最主要的优化手。但细节决定成败，你要是想对系统做极致的优化，还需要参考下面的这篇文章。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650522440&amp;amp;idx=1&amp;amp;sn=e06d3848bf84ec0da769a41b2ec59482&amp;amp;chksm=8780c48cb0f74d9a9cfcc6b69f36d1f197f1d3942e9864225ed4212d2130b6f7862c427eba26&amp;amp;token=1153507763&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;卓越性能 の 军火库（非广告）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;卓越性能 の 军火库（非广告）&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAApdEM5bfTMAAAAAstQy6ubaLX4KHWvLEZgBPE0qIES2F_UJz8zNPgMIvCZzBfvwmirOxm86HbPIbi&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=S7s6ianIic0ia4PicKJSfB8EjyjpQibPUAXolZPq5RXJLH39tyRBBBRuowz6k3DezOekt63TibgUSU5BCQUR9uc8b69GRXCbbiadicj6XYaPxz17icLicllWWDWvboYg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdVyO4mosLP70mcb1rSicud0YMJGqf9JgbF47ZVXZh4mm05IJxGRib12QUPgQ4os0iaDmM&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM5nv7YHhmhvPsGGX04JCIgibK2x2Ru0TOY9HeZTGSIL1KQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08a1fc3d5c807ec30b07756771265bc6b6234fb9e05062ae69ab4@finder&quot; data-nickname=&quot;儒猿IT&quot; data-desc=&quot;出去面试被问到Seata，竟然一脸蒙圈？Seata是一个分布式事务框架，专门帮助我们解决分布式事务问题的。#Seata #分布式事务 #Java面试 @微信时刻 &quot; data-nonceid=&quot;10571939633984640713&quot; data-type=&quot;video&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21428571428571427&quot; data-w=&quot;336&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/84QSpkgaj14GBzMnf1ibXkydLwCmhrWBooDwrdnlqYlsyB5PetG1T1oXxJ63G8TK58dqkDo7uzR7bKic50DxbTQQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6538461538461539&quot; data-w=&quot;52&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BXOuoE8lPAIR47zmQ1XOqSQszO2PjLgkgakpDZQSsUkLLnGszEu0eyGjvHNRqu6picb2kicC4lo95WZGiaxqibqW4A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;欢迎扫码加入儒猿技术交流群，每天晚上20:00都有Java面试、Redis、MySQL、RocketMQ、SpringCloudAlibaba、Java架构等技术答疑分享，更能跟小伙伴们一起交流技术&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;267&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;267&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLbPrUTW4zORxkXJU3pH9mPiawH9oZtZGKTkHyVL2wemkqNmPoJKDZlAt5ibgr2CibGkffw2ozqicds4gw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;396&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;41056&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;41056&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94152&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-autoskip=&quot;1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;另外推荐儒猿课堂的1元系列课程给您，欢迎加入一起学习~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;互联网Java工程师面试突击课&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295hjkFx86RFTZFibdBopicpMl5Scptaibp0pQAe5jUBMtXym9w4CncFBHsQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;SpringCloudAlibaba零基础入门到项目实战&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295NSLHaU5cHQTtyG2K5uK4iaA70v1g50BoQIRUVz4FBN1iahXdqc1M99Ww/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;亿级流量下的电商详情页系统实战项目&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Kafka消息中间件内核源码精讲&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;12个实战案例带你玩转Java并发编程&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295WWU9o0Pj51xAIa2qCs9xD2rdDIRLriaibePNSrWJVCknYn6b5lrF3CQQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Elasticsearch零基础入门到精通&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295QdxHC6HadPfaakPOo7DxxQpLH19lMZH0yAwRI3iajVXblNnwfMxBk9A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于Java手写分布式中间件系统实战&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295r0mR5hhVpAlXTAZzlVvSg1dxegAaZrIZ9ftePV5QQQg2ibIZbiaA6CCg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于ShardingSphere的分库分表实战课&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295hicEliaIKPfLpHqQAo4CdAorqyxd9HvqD8sADicO7wFHGJxNtRus6LlBA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7eab030f3585cfffe118538f8842b70e</guid>
<title>一段 20 行代码的 10 倍性能优化，yyds！</title>
<link>https://toutiao.io/k/li2abvz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、背景&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.1 业务背景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;支付宝卡包存放着用户的会员卡和优惠券。无论是卡券cell，还是卡券详情，都是通过静态模板配置加上动态可变数据，最终呈现给终端用户的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面【图1】展现了卡券数据在C端用户的展现形式，【图2】表示了C端数据组装过程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5648148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQwBwq8T2Gdlh4ibsfDgfw9quGTp82zcRZGzuVWhUd3SbWdDwSUiagbs2g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图1】卡券数据在C端展现形式&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5018518518518519&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQic8ico3QuOhbI5zYV0E2vaPGU5PNIjbYUfNXLzn2fPPrToJVMxh5icP2A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图2】C端数据组装过程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以【图2】为例，模板中有availableAmount 和voucherName 两个变量，这两个变量在动态变量数据有对应的值。用动态的值替换掉模板里面对应的这两个变量，最后拼装成“100元红包名称”。当这个红包被使用了一次，消费了30元后，动态数据里面availableAmount 的值就会变成70。用户再次进入到红包详情页时，展现数据重新组装后就会变成“70元红包名称”。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.2 问题发现&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近做项目过程中，把卡券组装渲染逻辑好好的梳理了一遍，其中仔细研读了【图3】这段模板变量替换逻辑。这是一段老代码，从卡包产品诞生之日起就存在，差不多有十年的时间了。其作用就是用动态数据替换掉模板里面的变量。这段代码逻辑咋一看，并没有什么问题，就是把模板里面两个$ 之间（包含）的变量，用动态数据进行替换。考虑到这是一段极为核心又高频的调用逻辑，于是看看有没有性能优化的空间。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42962962962962964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQIemNDIEr4kvqTXwcsBDsibRPTfx9dClybAgrLfMQibibBA8tqy6s5xKZA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图3】模板变量替换代码实现&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把替换逻辑厘清了之后，第一感觉就是这段代码有性能提升的空间。主要有两点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、每次while 循环进行了两次indexOf 操作&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、每次while 循环都进行了substring 操作&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是，就有了下面两个疑问：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、能够减少indexOf 和substring 操作吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、真的每次都要进行模板变量查找吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、性能优化&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;带着上面两个问题，逐步进行性能优化并测试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个优化过程一共迭代了5版，并最终取得了性能提升超过10倍的效果。下面分别来介绍下不同版本的实现和性能对比。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.1 性能优化V1&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一版去掉了indexOf 和substring 操作，转而使用另一种替换方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前的替换逻辑是从头到尾循环模板内容字符串，遇到$ 之间的变量就进行替换，过程中需要不断的进行indexOf 和substring 操作。新的实现方式是在进行变量替换之前，通过循环模板内容字符串，利用双指针把模板里面所有变量都提取出来，再对变量集合进行循环，依次替换掉模板内容里面的变量。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8259303721488596&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQIDbAt7qu7kJyVFpEUYUuVvAYdygdA50aEl3hj7ibZwuHwibyickz5hXDQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;833&quot;/&gt;&lt;figcaption&gt;【图4】性能优化V1代码实现&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.2 性能优化V2&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;静态模板配置一般情况下不会发生变更。也就意味着，同一个模板对应的变量都是固定不变的。可以将模板id和模板变量集合进行一对一的缓存，减少每次替换之前的变量提取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在决定使用缓存之前，要想好怎么实现缓存。有两点需要注意：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、用本地缓存代替TBase，减少大流量场景下对TBase的压力&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、怎么控制本地缓存的有效数量，并在有限的内存占用情况下最大化缓存效率&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以借助Google Guava库的缓存类来实现缓存逻辑，示例代码见【图5】&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10414657666345227&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQEmjP4QpWt46n4SfRpP9pmibz65yfL7VUQgyCk8iaMdQ3kEn1KXiaoFbtQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1037&quot;/&gt;&lt;figcaption&gt;【图5】缓存实现示例代码&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30833333333333335&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQGsiaWR5Ssicvu4pa8locibYk5qbE9kNdLmh3wW1zTIbM9xyjjzOuib3R2Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图6】性能优化V2代码实现&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.3 性能对比（1）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做完上面两步之后进行了性能测试，性能对比如【图7】所示。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44537037037037036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQcCv4cU3hDXIq0vicpDez9q86zU09HibPbxArNP1y2uoW6iblwQ99NPMrA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图7】V1、V2版性能对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过性能对比发现，V1版相对于原始版有性能提升，带缓存的V2版相对于不带缓存的V1版也有性能提升。但随着流量增大，性能优化效果逐步减弱。说明V1、V2版耗时优化的点，在整个模板变量替换耗时中占比并不高。也同时说明，整个模板变量替换逻辑当中，还存在其他更为耗时的点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回过头来再仔细看一遍变量替换逻辑，突然间意识到遗漏了一个”大问题“。就是这个String.replace 方法，该方法有两个耗时点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、每次replace 都会进行模板编译&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、replace 都是创建一个新的对象进行返回&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且每次replace 之后还要进行变量的重新赋值。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQ7bgMNBodWpfic6Hm1eiarsk6KhvAIzWDVqQBDEAictMoqCxiaMEyQ3fIkg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图8】String.replace 代码实现&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.4 性能优化V3&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在V2版基础上，去掉replace 方法，用StringBuilder 来实现。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8224076281287247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQ0tTYibkt6ODuUM4jPOEBdgrn5o7konibkQIG03cnEJQd8CWeXI9GAo2g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;839&quot;/&gt;&lt;figcaption&gt;【图9】性能优化V3代码实现&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;StringBuilder 实现过程中有一点要注意。V2版本中，提取变量返回的是一个Set 集合。返回集合中出现变量的顺序和模板中变量顺序会不一致，模板中有多个相同变量的情况下，也只会替换第一个出现的变量。所以要将变量提取返回的结果换成有序可重复的List ，才能保证逻辑的正确性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.5 性能优化V4&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;V3版优化之后，性能提升明显，证明String.replace 方法才是整个模板变量替换逻辑中最为耗时的点。于是在原方法上只用StringBuilder 来替换String.replace ，得到V4版。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5722222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQXR0DLtTJicwqicNcbsiaJl76v9W5NNlWjGMPCftCgAkxdEqpcV8RTX2Sw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图10】性能优化V4代码实现&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.6 性能对比（2）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5166666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQTvfs17iby7RD6PX6wYkYqetG2ibAQFq2Dtajv6ibJ0TEERn7VSJocAl6A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图11】V1、V2、V3、V4版性能对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过【图11】可以明显的发现，&lt;strong&gt;在进行StringBuilder 实现后，性能提升超过10倍，效果十分明显。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;V4版耗时实际上比V3版带缓存的还要少，说明V3版先提取变量再进行StringBuilder 组装的过程，相对来说还是会更耗时一点。但V4版的代码可读性是不如V3版的，可以把V3版和V4版相结合，剔除掉缓存依赖，产生一个代码可读性和性能最佳的V5版。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.7 性能优化V5&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先提取变量，去掉缓存依赖，用StringBuilder 替换掉String.replace ，增加代码可读性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6305555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJlJ5U7H2h9WvOKicVvP1IMQxb0vR2P9FO8ib9PftUOwslszrxib1cd1lwiazyzhOJ8iaMibP8DofA4VLnw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;【图12】V5版代码实现&amp;amp;100万次循环耗时对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;通过上面5个版本的性能优化，性能得到了超过10倍的提升。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;性能由高到低的顺序是V4 &amp;gt; V3 &amp;gt; V5 &amp;gt; V2 &amp;gt; V1 &amp;gt; 未被优化的原始版。其中V3、V4、V5版的性能显著优于V1和V2版，证明这段模板替换逻辑最为耗时的点为String.replace ，V3 &amp;gt; V5和V2 &amp;gt; V1表明，引入缓存对性能提升还是有一定帮助的。在代码可读性方面，V4是不如V3和V5的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个优化总结下来主要有两点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、String.replace 方法涉及到模板编译和新字符串生成，比较吃资源&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、StringBuilder 代替String.replace ，除了能够缩短调用耗时，在空间上也能够减少资源占用。因为StringBuilder.append 相对于String.replace 来说，能够减少中间大量String 对象的创建和销毁，能够减少GC的压力，从而降低CPU的负载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;性能优化显而易见的好处是能够节约机器资源。如果一个有2000台服务器的应用，整体性能提升了10%，理论上来说，就相当于节省了200台的机器。除了节省机器资源外，性能好的应用相对于性能差的应用，在应对流量突增时更不容易达到机器的性能瓶颈，在同样流量场景下进行机器扩容时，也只需要更少的机器，从而能够更快的完成扩容、应急操作。所以，性能好的应用相对于性能差的应用在稳定性方面也更胜一筹。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后再回到本次文章的主题：是什么让一段20行代码的性能提升了10倍？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的回答是：&lt;strong&gt;StringBuilder yyds！&lt;/strong&gt;&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;微信8.0将好友放开到了一万，小伙伴可以加我大号了，先到先得，再满就真没了&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;扫描下方二维码即可加我微信啦，&lt;code&gt;2022，抱团取暖，一起牛逼。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/CKvMdchsUwkjHdcguTLB1icPd70zzJXRbZjHrdqtVr3ympehiao20kR4ymmQHaMWr9ibKDgJaGsAPsZ82EhUF0Xsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;512&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4d3916a925e153eda6a10b79e0f32029</guid>
<title>MySQL 上亿大表优化实践</title>
<link>https://toutiao.io/k/8d5235l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247611420&amp;amp;idx=1&amp;amp;sn=9efd0411ecd0072eeb09295a102e55b8&amp;amp;chksm=ecab7ff2dbdcf6e46831c02e8e8e235d4cb1eaf4ee57611fa17b484b22e45f413e2abf6d7ea1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;腾讯出手了，你的羞羞聊天记录凉了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;👇推荐大家关注一个公众号👇&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkxMDI2NzUxNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/lcNAXHVur7Rdvv7BRw7e8Kdyu9iaBFGqR3yd9ibicwMPNdQJ7YDkGPsWG9dLialNaOSsCtpAK1CAhialIwsY2iazflaQ/0?wx_fmt=png&quot; data-nickname=&quot;Java架构师技术&quot; data-alias=&quot;java_architect_tech&quot; data-signature=&quot;专注分享 Java 核心技术、架构技术，不限于分享算法、高并发、多线程、JVM、Spring Boot、Maven、分布式、Spring Cloud +Docker+k8s、Dubbo、Zookeeper、Kafka等等。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点击上方 &quot;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247490920&amp;amp;idx=2&amp;amp;sn=84fa3d94375cac784eeb24472f885020&amp;amp;chksm=eca95686dbdedf90db774b5e1b09caaffbb95e72513a579a5c37c16325ccde7e1d75f0a4e736&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;编程技术圈&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;编程技术圈&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&quot;关注, &lt;span&gt;星标或置顶一起成长&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后台回复“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大礼包&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”有惊喜礼包！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;figure&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;每&lt;/strong&gt;&lt;strong&gt;日英文&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Man has to be crazy for once, whether it is for a person,a love story, a journey or a dream.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;人的一生要疯狂一次，无论是为一个人，一段情，一段旅途，或一个梦想。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;每日掏心话&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;人生就像蒲公英，看似自由，却往往身不由己。生活没有如果，只有结果，自己尽力了，努力了，就好。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;责编：乐乐 | 来&lt;/span&gt;&lt;span&gt;自：jia-xin&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接：www.cnblogs.com/YangJiaXin/p/10828244.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247489132&amp;amp;idx=1&amp;amp;sn=c15c4bf118abad5bea9afc287585f760&amp;amp;chksm=eca95d82dbded494d33755649ad9879e32a3fe8b287cb2ecadb173238aa4ac65df3b6cf16aa7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员小乐(ID:study_tech)第 918 次推文  图源：百度&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;编程技术圈(ID:study_tech)&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247489132&amp;amp;idx=1&amp;amp;sn=c15c4bf118abad5bea9afc287585f760&amp;amp;chksm=eca95d82dbded494d33755649ad9879e32a3fe8b287cb2ecadb173238aa4ac65df3b6cf16aa7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员小乐(ID:study_tech)第 918 次推文  图源：百度&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;第 171 &lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247489132&amp;amp;idx=1&amp;amp;sn=c15c4bf118abad5bea9afc287585f760&amp;amp;chksm=eca95d82dbded494d33755649ad9879e32a3fe8b287cb2ecadb173238aa4ac65df3b6cf16aa7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;程序员小乐(ID:study_tech)第 918 次推文  图源：百度&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;期推文&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;p&gt;&lt;span&gt;往日回顾：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI5ODI5NDkxMw==&amp;amp;mid=2247615615&amp;amp;idx=1&amp;amp;sn=c141c34d1e897a4da612d05ea869194e&amp;amp;chksm=ecab4f91dbdcc687b95add0176474b4fa591c17fad9ef76a1ee949ff012fa972cf38c84deaef&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;政府机构 5000 万台电脑将替换为国产 Linux&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;政府机构 5000 万台电脑将替换为国产 Linux&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;figure&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f8028b4fcba6fdffdceecadd411cf538</guid>
<title>欢迎加入读者圈子，一起交流！</title>
<link>https://toutiao.io/k/lrpbhk9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;欢迎加入读者圈子，一起交流！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;圈子剧透&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、600+圈子成员，以中高级程序员为主，更有架构师、CTO坐镇交流；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、1000+优质主题，数十G独家资料，每日分享，精挑细选；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、全年52期专属邮件周报，让你轻松掌握业界资讯、技术干货，提升认知水平；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、全年52本好书共读，让你花最少的时间，获取更好的知识；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心动不如行动，赶快加入吧！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>