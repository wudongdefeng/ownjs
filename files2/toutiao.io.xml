<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>7665c3dc5c94a12bef2bd5b1c4554cad</guid>
<title>史上最全的权限认证服务的权限模型大全</title>
<link>https://toutiao.io/k/6xzqc8e</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h3&gt;&lt;a id=&quot;_0&quot;/&gt;权限模型&lt;/h3&gt; 
&lt;p&gt;迄今为止最为普及的权限设计模型是RBAC模型,基于角色的访问控制（Role-Based Access Control)&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;RBAC0_4&quot;/&gt;RBAC0模型&lt;/h4&gt; 
&lt;p&gt;这是权限最基础也是最基础且核心的模型，它包括用户/角色/权限,其中用户和角色是多对多的关系,角色和权限也是多对多的关系。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/d92089138060471aa708044f385fd1f8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;用户是发起操作的主体,按类型分可分为2B和2C用户,可以是后台管理系统的用户,可以是OA系统的内部员工,也可以是面向C端的用户,比如阿里云的用户。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;角色起到了桥梁的作用,连接了用户和权限的关系,每个角色可以关联多个权限,同时一个用户关联多个角色,那么这个用户就有了多个角色的多个权限。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h5&gt;&lt;a id=&quot;_14&quot;/&gt;角色加入的原因&lt;/h5&gt; 
&lt;p&gt;有人会问了为什么用户不直接关联权限呢?在用户基数小的系统,比如20个人的小系统,管理员可以直接把用户和权限关联,工作量并不大,选择一个用户勾选下需要的权限就完事了。&lt;/p&gt; 
&lt;p&gt;但是在实际企业系统中,用户基数比较大,其中很多人的权限都是一样的,就是个普通访问权限,如果管理员给100人甚至更多授权,工作量巨大。&lt;/p&gt; 
&lt;p&gt;这就引入了&quot;角色(Role)&quot;概念,一个角色可以与多个用户关联,管理员只需要把该角色赋予用户,那么用户就有了该角色下的所有权限,这样设计既提升了效率,也有很大的拓展性。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_22&quot;/&gt;权限资源的类型&lt;/h5&gt; 
&lt;p&gt;权限是用户可以访问的资源,包括页面权限,操作权限,数据权限:&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;页面权限: 即用户登录系统可以看到的页面,由菜单来控制,菜单包括一级菜单和二级菜单,只要用户有一级和二级菜单的权限,那么用户就可以访问页面&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;操作权限: 即页面的功能按钮,包括查看,新增,修改,删除,审核等,用户点击删除按钮时,后台会校验用户角色下的所有权限是否包含该删除权限,如果是,就可以进行下一步操作,反之提示无权限。&lt;/p&gt; 
  &lt;ul&gt;&lt;li&gt;有的系统要求“可见即可操作”，意思是如果页面上能够看到操作按钮，那么用户就可以操作，要实现此需求，这里就需要前端来配合，前端开发把用户的权限信息缓存，在页面判断用户是否包含此权限，如果有，就显示该按钮；如果没有，就隐藏该按钮。某种程度上提升了用户体验，但是在实际场景可自行选择是否需要这样做。&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;数据权限: 数据权限就是用户在同一页面看到的数据是不同的。比如，全国有很多城市和分公司,比如杭州用户登录系统只能看到杭州的数据,上海用户只能看到上海的数据,解决方案一般是把数据和具体的组织架构关联起来&lt;/p&gt; 
  &lt;ul&gt;&lt;li&gt;举个例子，再给用户授权的时候，用户选择某个角色同时绑定组织如财务部或者合肥分公司，那么该用户就有了该角色下财务部或合肥分公司下的的数据权限。&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/749e835f95dd411477923c7c6c46ff6c.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;以上是RBAC的核心设计及模型分析,此模型也叫做RBAC0,而基于核心概念之上,RBAC还提供了扩展模式。包括RBAC1,RBAC2,RBAC3模型。下面介绍这三种类型&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;RBAC1_40&quot;/&gt;RBAC1模型&lt;/h4&gt; 
&lt;p&gt;此模型引入了角色继承(Hierarchical Role)概念,即角色具有上下级的关系,角色间的继承关系可分为一般继承关系和受限继承关系。一般继承关系仅要求角色继承关系是一个绝对偏序关系，允许角色间的多继承。而受限继承关系则进一步要求角色继承关系是一个树结构，实现角色间的单继承。这种设计可以给角色分组和分层，一定程度简化了权限管理工作。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/418047955ef607292e481843915988da.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;RBAC2_46&quot;/&gt;RBAC2模型&lt;/h4&gt; 
&lt;p&gt;基于核心模型的基础上，进行了角色的约束控制，RBAC2模型中添加了责任分离关系，其规定了权限被赋予角色时，或角色被赋予用户时，以及当用户在某一时刻激活一个角色时所应遵循的强制性规则。&lt;/p&gt; 
&lt;p&gt;责任分离包括静态责任分离和动态责任分离，主要包括以下约束:&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;互斥角色：同一用户只能分配到一组互斥角色集合中至多一个角色，支持责任分离的原则。&lt;/p&gt; 
  &lt;ul&gt;&lt;li&gt;互斥角色是指各自权限互相制约的两个角色，比如：财务部有会计和审核员两个角色，他们是互斥角色，那么用户不能同时拥有这两个角色，体现了职责分离原则。&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;基数约束: 一个角色被分配的用户数量受限；一个用户可拥有的角色数目受限；同样一个角色对应的访问权限数目也应受限，以控制高级权限在系统中的分配。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;先决条件角色: 即用户想获得某上级角色，必须先获得其下一级的角色。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;RBAC3_60&quot;/&gt;RBAC3模型&lt;/h4&gt; 
&lt;p&gt;即最全面的权限管理，它是基于RBAC0，将RBAC1和RBAC2进行了整合。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_64&quot;/&gt;用户组&lt;/h4&gt; 
&lt;p&gt;当平台用户基数增大，角色类型增多时，而且有一部分人具有相同的属性，比如财务部的所有员工，如果直接给用户分配角色，管理员的工作量就会很大，如果把相同属性的用户归类到某用户组，那么管理员直接给用户组分配角色，用户组里的每个用户即可拥有该角色，以后其他用户加入用户组后，即可自动获取用户组的所有角色，退出用户组，同时也撤销了用户组下的角色,无须管理员手动管理角色。&lt;/p&gt; 
&lt;p&gt;根据用户组是否有上下级关系，可以分为有上下级的用户组和普通用户组：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;具有上下级关系的用户组：最典型的例子就是部门和职位，可能多数人没有把部门职位和用户组关联起来吧。当然用户组是可以拓展的，部门和职位常用于内部的管理系统，如果是面向C端的系统，比如淘宝网的商家，商家自身也有一套组织架构，比如采购部,销售部,客服部,后勤部等,有些人拥有客服权限,有些人拥有上架权限等等,所以用户组是可以拓展的&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;普通用户组: 即没有上下级关系,和组织架构,职位都没有关系,也就是说可以跨部门,跨职位,举个例子,某电商后台管理系统,有拼团活动管理角色,我们可以设置一个拼团用户组,该组可以包括研发部的后台开发人员,运营部的运营人员,采购部的人员等等。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;_74&quot;/&gt;含有组织/职位/用户组的模型&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/4a42295b2cc675852236a843437eab42.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;根据系统的复杂度不同,其中的多对多关系和一对一关系可能会有变化,&lt;/p&gt; 
&lt;p&gt;在单系统且用户类型单一的情况下,用户和组织是一对一关系，组织和职位是一对多关系,用户和职位是一对一关系，组织和角色是一对一关系,职位和角色是一对一关系,用户和用户组是多对对关系,用户组和角色是一对一关系,当然这些关系也可以根据具体业务进行调整。模型设计并不是死的,如果小系统不需要用户组,这块是可以去掉的。&lt;/p&gt; 
&lt;p&gt;分布式系统且用户类型单一的情况下,到这里权限系统就会变得很复杂,这里就要引入了一个&quot;系统&quot;概念,此时系统架构是个分布式系统,权限系统独立出来,负责所有的系统的权限控制,其他业务系统比如商品中心,订单中心,用户中心,每个系统都有自己的角色和权限,那么权限系统就可以配置其他系统的角色和权限。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/ce7a4cd5a7068c7362314a87e62c8e00.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3f89b410410f0aa6270460130bb0b143</guid>
<title>从零开始设计一个基础服务（建议收藏）</title>
<link>https://toutiao.io/k/zc9d14v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;custom_select_card mp_profile_iframe&quot; data-weuitheme=&quot;light&quot; data-id=&quot;MzAwMTk4NjM1MA==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gcBzLSUNh2cgXUsuLIsvQYJE1lzZd74qpC3iciaM6gcYIfOVV0KjDDkeN4CTLTn4ETPtaHOAuTWSWA/0?wx_fmt=png&quot; data-nickname=&quot;JAVA日知录&quot; data-alias=&quot;javadaily&quot; data-signature=&quot;写代码的架构师，做架构的程序员！  实战、源码、数据库、架构...只要你来，你想了解的这里都有！&quot; data-from=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;因公众号更改推送规则，请点“在看”并加“星标”&lt;span&gt;第一时间获取精彩技术分享&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在架构设计中，要实现业务上的复用，一个比较可行的做法是，把各个基础业务封装成共享服务，供上层所有应用调用。所以今天，我就来和你聊一聊，如何
从头开始，落地这样一个典型的共享服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，落地一个微服务其实并不困难，但要实现一个能够高度复用的共享服务并不容易，在落地过程中，经常会有一系列的问题困扰着我们。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;我们事先对服务的边界没有进行很好的划分，结果在落地的过程中，大家反复争论具体功能的归属。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;由于对业务的了解不够深入，我们要么设计不足，导致同一个服务有很多版本；要么服务过度设计，实现了一堆永远用不上的功能。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;对于落地一个共享服务来说，服务边界的划分和功能的抽象设计是核心。&lt;/strong&gt; 服务边界确定了这个服务应该“做什么”，抽象设计确定了这个服务应该“怎么做”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我就以一个&lt;strong&gt;实际的订单服务例子&lt;/strong&gt;，为你详细讲解一下要如何重点解决这两个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样你可以通过具体的案例，去深入地理解如何落地共享服务，实现业务能力的复用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;订单业务架构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不同企业的订单业务是不一样的，所以这里我先介绍下这个订单的业务场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是个 O2O（Online To Offline，线上到线下）的交易业务，订单的来源有两个，一个是自有小程序或 App 过来的订单，还有一个是外卖平台过来的订单，然后这些线上的订单会同步到门店的收银系统进行接单和进一步处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5701754385964912&quot; data-type=&quot;png&quot; data-w=&quot;1368&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaLcOXHwpqgnU9gliafIaxT01lI3ZzQxUYpp7iblLppMDVUD6EVfo4vWr7LvNlU4ThOoWLmpxiaicTXaA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，订单服务是和 4 个应用直接打交道的：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;小程序服务端&lt;/strong&gt; 调用订单服务落地自有线上订单；&lt;strong&gt;外卖同步&lt;/strong&gt;程序接收三方外卖平台的订单，然后调用订单服务落地订单；&lt;strong&gt;POS 同步程序&lt;/strong&gt;通过订单服务拉取订单，并推送给商户内部的收银系统；最后还有一个&lt;strong&gt;订单管理后台&lt;/strong&gt; ，通过订单服务查询和修改订单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，接下来，我们就具体看下，如何从头开始落地这个订单服务。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;订单服务边界划分&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们要确定这个服务的边界，这是进行服务内部设计的前提。划分边界时，你需要对相关的业务场景有充分了解，并且在一定程度上，能够预测潜在的需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据业务场景的分析，这个订单服务需要负责三个方面的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;基本信息管理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是订单基本信息管理，主要提供订单基础信息的增删改查功能，包括下单用户、下单商品、收货人、收货地址、收货时间、堂食或外卖、订单状态、取餐码等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，你需要注意的是，这里有多个下单渠道，除了通用的订单信息，每个渠道还有特定的渠道相关信息，比如堂食的订单要有取餐码、外卖的订单要有收货人和收货地址等等，这个都需要在我们的数据模型里给出定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;订单优惠管理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是订单优惠管理功能，这对应的是订单的小票信息，从最开始的商品金额，到最后需要用户实际支付的金额，中间会有一系列的折扣和减免，这些都是属于订单信息的一部分。这些信息我们需要展示给用户看，如果后续要进行订单成本的分摊，也需要用到它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;订单生命周期管理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后是订单的生命周期管理功能，主要负责管理订单的状态变化。我们知道，从不同下单渠道过来的订单，它的状态变化过程是不一样的；不同行业的订单，它的状态变化过程也是不同的，所以&lt;strong&gt;订单服务的状态要做到通用&lt;/strong&gt;，能够支持各种可能的状态定义和状态转换过程。这个也是订单服务设计的难点，我在后面会重点介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，现在我们已经给出了订单服务的功能。&lt;strong&gt;为了更好地定义边界，在实践中，你还需要澄清哪些功能不属于服务，&lt;/strong&gt; 这样可以避免后续的很多争论。所以在这里，我会进一步给出订单服务不包括的功能，你在划分自己的服务边界时最好也能够明确给出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第一，作为基础服务，订单服务不主动调用其他服务。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说，你想了解订单的用户详情、商品详情等等，这应该由上层应用通过调用相应的服务来实现，然后和订单信息组装在一起，而不是在订单服务内部直接调用其他服务，否则会导致基础服务之间相互依赖，职责模糊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果说这个信息整合的场景非常通用，我们可以创建一个在基础服务之上的聚合服务来实现，把订单信息、用户信息、商品信息整合在一起。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第二，订单服务不负责和第三方系统的集成。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，订单需要在我们的订单服务和三方外卖平台，以及收银系统之间进行同步，这些同步功能都是针对第三方系统定制的，不具有通用性。而我们的订单服务作为基础服务，需要具备通用性，因此这些和外部系统对接的功能不会在订单服务的内部实现，而是由额外的同步程序实现。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;p&gt;小提示：这些同步程序可以主动调用订单服务，然后再和第三方对接，如果想实时获取订单信息的变化，同步程序可以订阅订单服务的消息通知，第一时间了解订单变化。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第三，订单服务不提供优惠计算或成本分摊逻辑。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;订单服务不负责具体的优惠计算，只提供优惠结果的存储和查询，用于还原订单的费用组成。优惠的具体计算过程一般由专门的促销系统负责，成本的分摊一般由后续的财务系统负责。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;最后，该服务不提供履单详情，不负责详细物流信息的存储。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如说，订单已经发送至上海、订单已经到达某某快递站等等这些信息，订单服务不负责提供这些详细信息，这些都是属于后续履单系统的职责。订单服务可以存储一些外部系统的单据号码，比如配送单号，这样能方便上层应用通过订单记录和配送系统进行关联，获取配送的详细信息。但订单服务只负责存储，不负责数据的进一步解释。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，你可以看到，通过从正反两个方面说明订单服务的职责，我们就得到了一个边界很清晰、职责很聚焦的订单服务边界，所有人对它的职责认识是一致的，尽可能地避免了后续的争论。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;订单服务内部设计&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好，确定了这个订单服务要做什么之后，接下来，我们要解决的就是服务内部怎么做的问题了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为共享服务，我们要保证订单服务功能上的通用性，就需要同时对内部数据模型和外部接口进行良好的抽象设计。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;订单状态通用化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于数据模型来说，订单要存储哪些信息，已经比较明确了，具体你可以看下这个图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9183055975794251&quot; data-type=&quot;png&quot; data-w=&quot;1322&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaLcOXHwpqgnU9gliafIaxT0AFSNeHuz31Qy0Ljj43EzsonYX3eSgr44Y5gxdJGSwoSHxPkKhCvIibg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但对于如何管理订单的状态，情况就比较复杂了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，如果针对一个具体的项目，无论它的订单状态有多么的复杂，我们都可以事先精确地定义出来。&lt;strong&gt;但不同的行业甚至不同的企业，他们对于订单状态管理都是不一样的，订单服务作为一个共享服务，它必须要满足不同项目的订单状态管理。&lt;/strong&gt; 所以对于如何解决这个问题，这里我有两个思路供你参考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一个是开放订单状态定义。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，订单服务事先不限定订单有哪些状态，每个项目都可以自己定义有哪些订单状态。服务的调用方可以在接口里传递任意的状态值；订单服务只负责保存状态数据，不负责解释具体的状态，也不负责任何的规则校验，它允许订单从一个状态转换为其他任意的状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的设计，在理论上可以满足各种状态的定义，满足各种状态之间的变化，但这样做其实有很大的问题。在这里，订单状态是完全由外部负责管理的，上层应用的负担会很重，不但要负责定义有哪些状态，而且还要维护状态的转换规则，一不小心，订单可能从状态 A 非法地变成状态 B，导致业务出问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;另外一个是应用和服务共同管理状态。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于订单状态管理，应用和服务各自承担一部分职责，我们看下具体如何实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道，无论订单的状态变化是如何的复杂，我们总是可以定义一个订单有哪些基本的状态，包括这些基本状态之间是如何变化的。比如，订单一开始都是用户下单后待支付，支付完成后变成一个有效的订单，然后由商家进行接单，制作完成后进行发货配送等等，订单最终的状态要么是完成，要么是取消。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这些订单的基本状态，我们称之为“主状态”，它们由订单服务负责定义&lt;/strong&gt;，包括这些主状态之间的转换规则，比如已完成的订单不能变为已取消的订单。主状态的数量是比较有限的，状态之间的变化关系也是比较明确的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个主状态，我们对大量现有的业务场景进行总结和抽象，是完全可以定义出来的。在这个订单服务例子里，我们定义了如下图所示的订单状态机，包括有哪些主状态，以及它们的转化关系。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5108225108225108&quot; data-type=&quot;png&quot; data-w=&quot;1386&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaLcOXHwpqgnU9gliafIaxT0TAyLcGu2lkoGS6icibplsJXjOSIKTYxk6AabnN3YAnib4NGDsJD3cOMtA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;订单除了“主状态”，还有“子状态”。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，一个订单处于配送中，实际情况可能是“仓库已发货”，“货已到配送站”，或者是“快递员正在送货中”等等，那么在这些情况中，订单的主状态都是“配送中”，它的子状态就是细化的这几种情况。&lt;strong&gt;子状态有哪些具体的取值，不同的项目是不一样的，这个就开放给各个应用来定义。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，订单服务数据模型里有&lt;strong&gt;两个字段&lt;/strong&gt;，其中的主状态由订单服务负责管理，包括主状态之间的变化规则；而子状态由上层应用来定义，管理子状态的变化规则，比如一个配送中的订单，它的子状态可以由“仓库已发货”，变为“快递员正在送货中”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，我们就可以总结下这两种订单状态的设计思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第一种方案，我们不对订单状态进行管理&lt;/strong&gt;，而是把订单的状态作为一个简单的属性存储，只支持订单状态简单的增删改查功能。我们知道，订单状态是订单业务规则的核心体现，这样的订单服务是没有灵魂的，也失去了大部分业务复用的价值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第二种方案，应用和服务共同管理订单的状态&lt;/strong&gt;，订单服务抓大放小，通过主状态管理把控住了订单的核心业务规则，同时把子状态开放给应用进行管理，为具体的业务场景提供了灵活性。通过主状态和子状态的结合，订单服务就满足了不同行业、不同企业的订单状态管理需求。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;订单服务接口定义&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说完了订单的状态管理，接下来，我们从调用方怎么使用服务的角度，来看下订单服务外部接口是如何设计的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;外部系统和服务的交互有&lt;strong&gt;两种方式&lt;/strong&gt;，包括同步的服务接口调用和异步的消息通知。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;首先是同步的服务接口调用。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便外部调用方，我们在服务接口命名时，一定要规范和统一，接口名字要能够望文生义，方便调用者快速找到所需要的接口。并且，我们还要提供接口具体的请求和响应样例帮助说明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的接口设计规范，我就不具体展开了，每个公司都要有明确的规范要求，这里我就说下常见的查询接口是如何设计的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个订单有很多字段，每次调用方要查询的信息可能都不相同，不同字段之间的组合方式有很多，我们不可能一一支持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那么，我们怎么设计查询接口，来满足各种场景需求呢?&lt;/strong&gt; 一般来说，我们可以根据返回字段数量的不同，提供三个不同粒度的查询接口来满足多样化的需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个是&lt;strong&gt;粗粒度接口&lt;/strong&gt;，只返回订单最基本的 7-8 个字段，比如订单编号、订单状态、订单金额、下单用户、下单时间等等；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个是&lt;strong&gt;中粒度接口&lt;/strong&gt;，返回订单比较常用的十几个字段；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三个是&lt;strong&gt;细粒度接口&lt;/strong&gt;，返回订单的详细信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，不同的查询需求，就可以根据要返回信息的详细程度，来选择合适的接口，通过这种方式，我们兼顾了要定义的接口数量和查询的性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;其次是异步的消息通知。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;订单服务除了提供同步的接口调用，还针对每次订单信息的变化，提供异步的消息通知，感兴趣的外部系统可以通过接收消息，第一时间感知订单的变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;按照消息详细程度的不同，订单消息可以分为“胖消息”和“瘦消息”。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顾名思义，&lt;strong&gt;胖消息&lt;/strong&gt;包含了尽可能多的字段，但传输效率低；&lt;strong&gt;瘦消息&lt;/strong&gt;只包含最基本的字段，&lt;strong&gt;传输效率高&lt;/strong&gt;。如果外部系统需要更多的信息，它们可以通过进一步调用订单服务的接口来获取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个订单服务的例子里，如果是订单状态的变化，我们只需提供订单号、变化前后的状态即可，因此主要以&lt;strong&gt;瘦消息&lt;/strong&gt;为主；如果是新订单的创建，由于订单的字段比较多，所以使用&lt;strong&gt;胖消息&lt;/strong&gt;，避免外部系统进一步调用订单服务接口。你在实践中，可以根据实际情况，在消息的数据量和消费者处理消息的复杂度之间做平衡。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们说了，订单服务不会主动调用外部系统的接口，这里的异步消息通知，就可以很好地保证外部系统及时感知订单的任何变化，同时避免订单服务和外部系统直接耦合。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要想打造一个可高度复用的共享服务，你需要掌握最核心的两点：清晰的边界划分、内部的抽象设计。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天，我通过一个实际的订单服务例子，帮助你理解如何清晰地定义服务的边界，以及如何通过抽象设计保证服务的通用性。你在实践中，一定要深入分析业务场景，识别真正的挑战在哪里，避免设计的简单化或过度复杂化。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e155e4b419fe7d83426522a8d504b5b0</guid>
<title>写给架构师的技术债“偿还”指南</title>
<link>https://toutiao.io/k/18b74di</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;428&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.74&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfOq6P66jOLm6sauBcFhckBBdQMnJb4MswXYyRqd3bTBTmw0FrXicVvTWTuKibesRvWa0GJuhoIVNPsQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;作者｜Kurt Bittner, Pierre Pureur&lt;/section&gt;&lt;section&gt;
译者｜马可薇&lt;/section&gt;&lt;section&gt;
策划｜丁晓昀&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;技术债务的类别&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;技术债务是软件开发中用于比喻短期决定促使长期成本增加的现象，其中成本的增加类似于随时间增长的应计利息。更确切地说，团队当前为某个决定付出的工作越多，后期就越可能需要更高的工作量来纠正这个决定。&lt;/section&gt;&lt;section&gt;这一术语在软件行业内获得了不少的关注，但技术债务不是百害无一利的，它有时也能快速解决产品上市的问题。这个概念最早是由 Ward Cunningham 提出的：&lt;/section&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;130&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;第一次交付的代码如同欠债一样，只要能通过重写还清，一点债务就能加速进程……但如果债务没有即时还清，那么就危险了。在问题代码上花费的每一分钟都会算作是债务的利息。地基不牢的实现所带来的债务负担甚至会让全部工程团队停滞不前，无论这种实现是否是面向对象的。【注 1】&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;有两个重要的点需要注意。首先，技术债务往往是软件交付过程中很有帮助的权宜之计。没有任何产品时完美的，无数软件项目都曾过于沉迷“打磨”短期内完全够用的代码而就此消失。第二点则是，在长期可支持性面前，这些权宜之计可能会需要重新考量。&lt;/p&gt;&lt;span/&gt;&lt;p&gt;不过，我们还需要对“技术债务”这一词有明确定义才能避免引起混淆。Kruchten、Nord 及 Ozkaya 在他们的《管理技术债务》一书中，对技术债务的概念及相应管理方法做了很好的概述，这是他们给出的定义：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;102&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;在软件密集型的系统中，技术债务由设计和实现结构组成，这些短期内的权宜之计构建的技术环境，可能让未来的变动更加昂贵或不可能。技术债务是一种或有负债，主要影响内部系统质量，但不限于可维护性和可进化性。【注 2】&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;这种定义深得我们喜爱，因为它更侧重于技术债务的影响，而非是其在金融债务方面的比喻，后者仅仅涵盖了部分问题所在。正如《实践中的持续架构》所言：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;130&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;对可维护性和可进化性的关注对技术债务的&lt;/section&gt;&lt;section&gt;对可维护性和可进化性的关注度是影响技术债务看法的关键。这就意味着，如果系统没有对进化的期望，那么对技术债务的关注也应当是最小化的。以旅行者号航天器为例，其软件的技术债务是非常有限的，因为它没有进化的需求，维护的机会也有限。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;感兴趣的读者可以参阅注 2 中的《管理技术债务》，以获取关于该主题的更多内容。也可以在《管理技术债务》、《技术债务》，《技术债务和利息的实证模型》的参考文献部分，以及 雷曼法，找到更多关于技术债务的实证研究。&lt;/p&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;什么是技术债务？&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;依据 Kruchten、Nord 及 Ozkaya 的定义，技术债务可以分为以下三大类。&lt;/section&gt;&lt;p&gt;此外，技术债务可以是无意为之，也可以是特意为之。许多业界人士认为潜在的缺陷是技术债务的一部分，而架构决策则几乎永远是在两个相互冲突的 QAR 之间权衡，因此后者是属于“有意为之”的分类。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;技术债务一词的不足&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;每个术语都有不足，“技术债务”也不例外。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;假设性。&lt;/strong&gt;一个“技术债务”问题可能永远都不需要解决。或许代码很丑，但如果能正常运行且没什么副作用或依赖性，那团队完全可以专注于其他事，比如为客户提供价值。认为其需要修复则是夸大了问题本身。如果可以将问题影响局部化，那这个问题大概就不需要修复。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;与拥有贷款人的债务不同，团队的技术债务没有限制。&lt;/strong&gt;贷款人会评估债务人的还款可能性，并为债务人违约时造成的后果寻求保障。习惯性滥用债务的人最终将再也无法拿到信贷的机会。&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;相比之下，软件团队的限制较少。自动或手动的架构、设计，以及代码审查之类都可以防止技术债务意外发生。但在复杂的系统中，审计无法找到的很多错误只会在运行的系统中出现。错误预算或许能让团队在解决缺陷之前不再新增更多功能，但它的前提条件是要能识别出错误，而技术债务就像是水下冰山，大部分都是看不见的。&lt;/p&gt;&lt;p&gt;但是在多数情况下，开发团队可以随便“发布”任何包含有意为之的技术债务，而不会有人要他们为自己不可持续的决定负责。事实上，如果他们在面向项目的资金模型组织中工作，那么他们要做的就是把项目发布到生产中去，让 IT 运维去头疼因此产生的问题，成功让自己甩锅。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;决策推迟的成本会随着时间的推移迅速增长。但决策推迟实际不存在。决定在未来采取不同方法不过是额外的工作成本，而如果需要返工的代码有大量依赖，重写代码的成本将会叠加式增长（见《寻找管理架构性技术债务的指标》）。技术债务所暗含的复利意味着返工的成本增加，但却掩盖了造成成本增加的依赖原因。通过封装和模块化等设计策略，团队可以减少甚至完全消除变化所带来的成本。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;只要没出大事，多数组织都会无视技术债务。&lt;/strong&gt;这就又让我们回到了第一个问题上，这些问题或许并不需要解决。而即使这些问题真的需要解决，商业利益相关者也大概不会重视。真正的问题在于“技术债务”这个词将重点仅仅放在了成本上，没有传达商业利益相关者会因为忽视技术债务而损失的东西。对于眼里只看得到一季度或一年的人来说，长远的可支持行没什么讨论的必要，也就可扩展性和防御破坏性安全漏洞有些许的说服力。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;技术债务很难用财务术语来量化。&lt;/strong&gt;就像 Kevlin Henney 在 2022 年 QCon Plus 的演讲中所述（可参见 Ben Linders 的 InfoQ 文章《技术债务可量化为金融负债：开发者眼中的不可能》），管理者对团队无法衡量其技术债务的金融价值感到迷惑，对于耳濡目染“你无法衡量的东西，你也无法管理”【注 4】的人来说，无法表达技术债务的财务影响让团队看起来很不明智。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;架构决策和技术债务&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;正如我们在前一篇文章中所述，软件架构是 QAR 驱动的决策，而这些决策可能对技术债务有积极或消极的影响，如图一所示。决策发生的时间决定了团队架构设计所要采取的方式。在项目之初，通常也是在确切定义 QAR 之前，便做出多数的架构决定，可能会导致前期架构不易发展，且随着对 QAR 更准确的定义，也需要大规模重构。与之相反，如果在敏捷架构中的每个阶段，逐步做出架构决策，可以更好地适应 QAR 的变化。&lt;/p&gt;&lt;p&gt;几乎所有的架构决策都是至少两个 QAR 之间的权衡。如安全性与可用性之间的抉择，无论怎么选都有可能增加技术债务，无论是优先考虑可用性但使系统更加脆弱，还是优先安全性但牺牲系统可用性。说到底，随着用户数量的增加，或者需要调整 QAR 的优先级才能让技术债务更可控，将来的某天我们总要面对这些问题。其他例子还有可扩展性和可修改性、可扩展性和上市时间。&lt;/p&gt;&lt;p&gt;这些决定通常被描述为“满足”，也就是“足够好”。虽然你还可以做得更好，但你选择在结果足够好时就停下来。正如《实践中的持续架构》中所言，“架构决策可以增加或削减技术债务”【注 5】。然而，具体增加或削减了多少，这是很难用财务甚至技术术语来量化的。&lt;/p&gt;&lt;p&gt;除非团队成员非常幸运或者知识极其渊博，否则无论是通过什么方法，他们所做的部分技术决策可能都需要根据反馈回路所带来的信息（见图一）在未来进行调整甚至彻底重做。对现有的架构决策进行调整或重做会产生额外工作量，并与其他积压的任务相竞争，后者常被期望能向利益相关者提供有用功能而被认为拥有更高优先级。因此，调整或重做架构决策相关的工作可能会被推迟，从而进一步增加系统的“技术债务”。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;414&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.7358053302433372&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfO3CE23Wch5icjUXEl6Z4qP5xibBpDbELe7RrTFOcY2kDSORea6hD6yEn2EF7FdiaJichpMaLXccBUJsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;863&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;质量属性、架构决策、技术债务与反馈循环&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;每当团队做出决策时，都要做好所有这个决策相关工作在未来都可能要返工的准备。因此，团队需要将决策视作是需要在相当短的时间内验证或需要的假设，以确保所作的工作在未来的某一时刻不会被删除。&lt;/p&gt;&lt;p&gt;因为所有工作至少在验证之前，都有可能产生额外的返工工作量，所以，团队可以尝试以下几点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;推迟决策到万不得已时再决定；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;尽快验证必须做出的决策，以限制潜在的成本风险；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过封装和抽象等设计技巧减少依赖关系的增长。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;了解并接收决策对技术债务的影响有助于团队更好地做出决策。但由于其很难通过财务术语量化，技术债务对评估决策成本没有帮助，且很难被用作是评估至少两个 QAR 之间权衡的精确评估工具。&lt;/p&gt;&lt;p&gt;让我们再回到安全性与可用性的例子。要想在短时间内部署一个 MVP，我们很难估算最小可用架构（MVA）在优先可用性而非安全性时所带来的财务影响。更好的方案是做出一系列最小化决策后，随着时间的推移，借助经验对其进行测试和发展。这些决策应当搭配一套最小架构实践加以补充，以帮助团队在发展产品的同时保持架构的可行性。&lt;/p&gt;&lt;p&gt;当然，架构工作中最重要的一部分就是沟通，即使我们无法将与决策相关的技术债务数量进行准确量化，还是可以利用这一比喻可以帮助团队沟通决策的长期影响。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;延迟维护：或许是更合适的用词？&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;技术债务在工程界有另一个说法：延迟维护。延迟维护是设计优秀的大桥断裂、设计优秀的大楼坍塌、设计优秀的飞机从空中坠落的原因。在物理学中，熵的增加是有代价的，而如果无法领先熵的增长将会产生灾难性后果。&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;分析物理学延迟维护成本的优势在于，我们能更清晰地看到维护被推迟时，成本是如何快速累加的：如果底层钢板没什么问题，那么密封图层就足够了。而一旦钢板开始锈蚀，在重新喷漆之前就必须先清理干净旧涂层和铁锈。如果钢板已经出现裂痕，那么就还需要加固，裂痕过于严重甚至还可能需要更换全部的结构。&lt;/p&gt;&lt;p&gt;对于软件来说，事情远没这么简单。错误不易被检查发现，再加上组件之间交互导致返工可能影响到全部代码库。即使是“简单”的组件替换也会非常困难，因为新组件可能有副作用，或者需要不同的参数数据，而调用它的代码可能无法访问这些数据。如果变动的是如调整算法等更深层次代码，那么成本将会是指数级地增加。&lt;/p&gt;&lt;p&gt;但就如“维护”一词也是有限制的。“维护”通常是指对磨损部件的简单维护，但软件不会随着使用而磨损。软件的变化可能由外部事件引起，如操作系统或框架的变化、供应商倒闭，或者基础设施软件的新版本，以及更具破坏性的，由客户行为、商业运作或组织战略变化等造成的影响。&lt;/p&gt;&lt;p&gt;每一种用词都有其局限性，有时我们必须抛弃这些术语，才能找到更好的模型来帮助我们做出决策。&lt;/p&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;结论&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;多数团队并不认为目前的决策在未来可能会被撤销或返工，但现实中事情总会发生变化，而我们需要不同的方式以面对这些变化。虽然团队无法预测未来，但他们可以通过实验，在变更所带来的影响变得无法接收之前检测出这种可能性。&lt;/p&gt;&lt;p&gt;技术债务是对未来变更工作量已知的一个例子，常发生于团队决定推迟必须要完成的工作量。债务一词意味着，处理这类变化所需的成本将会随着时间的推移呈指数上升，与复利类似。但矛盾的是，正如我们在本文中所述，技术债务很难用财务术语进行量化，这也限制了它在决策评估成本模型中的作用。&lt;/p&gt;&lt;p&gt;虽然技术债务有助于向利益相关者传达团队决策的技术影响，但更合适的方法是通过质量属性要求重塑讨论，让利益相关者将其看作是软件系统必备的能力，而非是需要完成的工作量。&lt;/p&gt;&lt;p&gt;最后，感谢 Thomas Betts、Murat Erder、John Klein、Philippe Kruchten 以及 Eoin Woods 为本文的初版审阅。&lt;/p&gt;&lt;section&gt;&lt;section&gt;
&lt;span&gt;尾注&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Ward Cunningham，《WyCash 投资组合管理系统》，ACM SIGPLAN OOPS Messenger4, no.2 (1992)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Philippe Kruchten, Rod Nord, and Ipek Ozkaya, 《管理技术债务：减少软件开发中的摩擦》(Addison-Wesley, 2019).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Murat Erder, Pierre Pureur, and Eoin Woods, 《实践中的持续架构》 (Addison-Wesley, 2021)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;这句话经常被认为是 Peter Drucker 和 W.Edwards Deming 说的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Murat Erder, Pierre Pureur, and Eoin Woods, 《实践中的持续架构》 (Addison-Wesley, 2021)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;原文链接&lt;/strong&gt;：&lt;/span&gt;&lt;span&gt;https://www.infoq.com/articles/technical-debt-tells-you/&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;em&gt;声明：本文为 InfoQ 翻译，未经许可禁止转载。&lt;/em&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;
活动推荐&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;202&lt;/span&gt;&lt;span&gt;3年第一季度，ArchSummit全球架构师峰会将落地北京海航万豪酒店。&lt;/span&gt;&lt;span&gt;来自百度、京东、华为、腾讯、斗鱼、中国信通院等企业与学术界的技术专家，将就数字化业务&lt;/span&gt;&lt;span&gt;架&lt;/span&gt;&lt;span&gt;构、&lt;/span&gt;&lt;span&gt;低代码实践、国产化替代方案、分布式架构等主题展开分享讨论。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>24970962ffcd8ec33c241994e58dfda5</guid>
<title>Java 运行包精简探索（GraalVM）</title>
<link>https://toutiao.io/k/wats6uq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;（给&lt;/span&gt;&lt;span&gt;ImportNew&lt;/span&gt;&lt;span&gt;加星标，提高Java技能）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在热心群友的提示下，入了 &lt;span&gt;GraalVM &lt;/span&gt;的坑。&lt;/span&gt;&lt;span&gt;本来以为花个三两天应该就能搞定，没想到这一搞就是一个周，终于取得了阶段性的胜利。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编注：此文为运行包精简主题的一篇，&lt;span&gt;其他精简方法请参见文末。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;背景如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;gt; 最近由于某些原因，需要做一个自带运行环境的程序。由于各种原因，选定了 Java 和 Python 作为备选语言。但是 Java 由于 JRE 的臃肿（100M+）以及 Spring Boot 的日渐臃肿（helloworld 15M），需要在这两方面进行 size 的缩减。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;环境&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.graalvm.org/downloads/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;环境准备&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://www.graalvm.org/docs/getting-started/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;export&lt;/span&gt; JAVA_HOME=&lt;span class=&quot;code-snippet__regexp&quot;&gt;/path/&lt;/span&gt;to/&amp;lt;graalvm&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;export&lt;/span&gt; PATH=&lt;span class=&quot;code-snippet__regexp&quot;&gt;/path/&lt;/span&gt;to/&amp;lt;graalvm&amp;gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/bin:$PATH&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;安装 &lt;/span&gt;native-image&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gu &lt;span class=&quot;code-snippet__keyword&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;native&lt;/span&gt;-image&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;安装 native-image 需要的组件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;apt-get &lt;span class=&quot;code-snippet__keyword&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;build&lt;/span&gt;-essential libz-dev zlib1g-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：这里有个其他文章都没有提到的坑。ld 需要更新到 2.26+，不然在构建过程中会报告莫名其妙的异常（这里我耗了大半天）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;apt-&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; install binutils&lt;span class=&quot;code-snippet__number&quot;&gt;-2.26&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;另一个坑&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;最开始我是在一台 aliyun 的机器上实验的，没有注意到内存问题，在实验过程中遇到异常中断。排查 syslog 发现是 OOMKiller。排查发现我的可用内存只有 4G。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;后改为在本机机器 VMware 里的 Ubuntu 操作，内存分配到 8G。经观察，native-image 打包过程中会用到 5.2G 左右的内存，所以这里要注意一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此，环境准备完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;打包&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;helloworld 的尝试就跳过了，网上一搜一堆。先了解一下打包命令。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7047308319738989&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoasxv2rY7cZ4iasc5n3YapDrbqhO1nknX9QQrLrvpM25oF4zMG6dNLhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1226&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.graalvm.org/uploads/quick-references/native-image-quick-reference-v2_A4.pdf&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;项目依赖&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoj9RgHmhRwsiaibIv9GvOBRb0EkNwceRgTqbjIqDDHd89HaTlT3TQetUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;421&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要用到了 solon、solon-api、h2、weed3、logback、slf4j、jlhttp 等包。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;首先，通过 Maven 把我的项目 solondemo 打包为可以运行的 jar，&lt;/span&gt;&lt;span&gt;确保通过。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-jar&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;solondemo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.jar&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以正常运行并访问。&lt;/span&gt;&lt;span&gt;然后把 solondemo.jar 上传到前面准备好的 GraalVM 环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，需要使用 &lt;span&gt;GraalVM&lt;/span&gt; 提供的配置工具，对想要打包的程序的一些静态分析无法分析到的信息进行采集。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你确认项目没有使用任何反射、代理等特性，可以省略这一步。执行&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;java -agentlib:&lt;span class=&quot;code-snippet__keyword&quot;&gt;native&lt;/span&gt;-image-agent=config-output-dir=./config/ -jar solondemo.jar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;执行后，最好能跑一跑 testcase，尽量保证代码覆盖率 100%，避免打包后遇到 classnotfound。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;执行完成后，终止执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;如果需要多次运行采集信息 可以使用如下命令再次执行，工具会自动合并采集结果而不是覆盖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;java -agentlib:&lt;span class=&quot;code-snippet__keyword&quot;&gt;native&lt;/span&gt;-image-agent=config-merge-dir=./config/ -jar solondemo.jar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;执行结束，config 下生成如下 5 个文件：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;jni-config&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;predefined-classes-config&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;proxy-config&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;reflect-config&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;resource-config&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;serialization-config&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;坑又来了&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据网上的 说法，可以通过指定 -H:ConfigurationFileDirectories=./config 的方式来使用前面生成的配置文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;但是，最后老是会把 -H:ConfigurationFileDirectories= 认为是指定的生成文件名，然而根据文档，-H:Name=xxx 才是指定输出文件名的参数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;注意&lt;/strong&gt;：这个问题是开始在 CentOS 上操作遇到的，最后我在 Ubuntu 上又尝试用这种方式指定配置文件的时候，它生效了，原因未知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我采用了另外一种配置方式。把这些文件打包到 jar 包的 META-INF/native-image 目录下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3759590792838874&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoqFssPmhbptPgglZ7VT6ToG1zSj3NoqyibW0UN1JMic2DtoKzJhb7IysQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;391&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;打包命令：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;native-image&lt;/span&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-jar&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;solondemo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.jar&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;--allow-incomplete-classpath&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-H&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:+ReportExceptionStackTraces&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;--enable-http&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个命令也是经过反复多次尝试最终得出的可用命令，尝试的过程就略去3W字了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：如果你的应用需要对外提供 HTTP 服务，必须加上配置 --enable-http。如果提供 HTTPS 服务，则必须加 --enable-https。否则哪怕运行起来了访问也永远是 500。打包成功，目录下生成 solondem 文件。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;执行运行：运行成功了，但是插件没加载。翻阅 solon 源码，发现插件加载的流程大致如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2462962962962962&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoUJneRFII6ibodqKppsl05JTickfHlFyiacGQaM8xPLAcw8LwLuIKIs5ZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;540&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过反复添加日志排查，发现：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;在 graalvm native-image 下运行，这里扫描到 META-INF/solon 这个目录的 type，不是 file/jar，而是 resource。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14695340501792115&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoJdsZv5sFFL7FTibiave9miayUvtJ6BFmbuc4YktfSial9T150uXic46Obhg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;558&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以到了这里自然就无法遍历目录下的文件了。于是我尝试让 resource 类型也走 file 的方式去扫描。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31140350877192985&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoxE2caguibNg2tIV5FCg9flBy2FMOpiay1d54YaZ7q0PSLSL0VICOicTIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;456&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;调研搜索后发现，GraalVM 内部资源管理自己实现了一套 FileSystem，URL 描述符定义为 resource，有一套自定义的 API（由于时间有限，暂未深入研究）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对本来是目录类型的 resource 使用 File 方式去处理，得到的结果是 file not exists！但是对于确定的文件，是可以正常读取的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是我考虑预处理，在 &lt;span&gt;GraalVM &lt;/span&gt;外面就先把能扫描到的文件清单提取出来，通过配置的方式，插件扫描的时候直接返回预置的文件清单。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;因为本地执行是可以正常扫描的，所以我在扫描结束的时候，增加一个输出：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08691756272401434&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoyfbhvpILOkoxKYxTjB6R9TnoyibCUHicyUohSvHfibKspgVkttSiaPly9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1116&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后在配置中添加：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoG2H1iaqCTkNf0yH1cEWbghXibcwT0hb3VwQNAib3TklonS6QqZZs9ppSA/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;835.6401384083046&quot; data-cropy1=&quot;30.519031141868513&quot; data-cropy2=&quot;75.57093425605537&quot; data-ratio=&quot;0.05389221556886228&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eZzl4LXykQykImJwSW619HicpT7iaAebOzmrIxUibIwuN1u2ZtaiaIyRIzpHeQmiaNNvdEvtkb0AxVXjsa99jWiaODWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;835&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;scan 流程做如下修改&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.441860465116279&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAou3bWicOgfxUge9wDSMicjibdHuxTeT9cIcdPDE2TJQQ26sPxrMicYBE7rQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;473&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;插件扫描成功并运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5030599755201959&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAokR0s9N9yBb4SlY6KqkpMOy3vCibqT5BMQQz7jkOAHwUa6ClaysKM7ibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;817&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扫描注解也有同样的问题，排查过程与配置文件扫描类似，解决方案已与配置文件扫描的解决方案合并，略去 3万字。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此，主框架已经可以 run 起来了，但是嵌入式数据库 h2 还在作妖。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;调研发现 Github 已经有人提过这个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/h2database/h2database/issues/2207&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是我尝试按照他们说的 使用 1.4.199 版本，却仍然各种异常。没办法，下载 h2 源码 加 log 排查吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8225806451612904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoAlB2KawpnqCO2sSrXh4pbkGP0uia5TLCDx68B1XI0dWKr9nlLvVkVEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;434&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，这里报空指针，那么唯一的可能就是 defaultProvider 为空。分析 defaultProvider 初始化过程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8519003931847968&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoMBiaPJ2jVMCZuiaSoFJ4RgHibGlU06aozSsTBQ38mhEexRniaNhErKpslQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;发现了 Class.forName，以及吃掉了异常：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.printStackTrace&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;打包，再来运行：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Caused&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.ClassNotFoundException&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.h2&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.store&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.fs&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.disk&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.FilePathDisk&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好嘛。native-image 的 agent 居然没有把这个扫出来。手动把这些添加到 reflect-config.json 里面，再打包运行。又报了个别的 class not found。再添加，再打包。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;........,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathDisk&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathMem&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }  ,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathMemLZF&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathNioMem&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathNioMemLZF&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathNioMapped&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathAsync&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathZip&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathRetryOnInterrupt&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathNio&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.store.fs.FilePathSplit&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.mvstore.db.MVTableEngine&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[{&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;allDeclaredFields&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;成了！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5598335067637877&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAo8fXCooFRKAYXkkKo6r6wQ8uyELE5CA6VOw73Yaib9mOGfXBicoZc65SA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;961&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;访问接口、增删改查、静态页面 、日志都 OK 了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.232421875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAovIJQ7lLJ1In01VW2zzljQ5EY7KboMpQomicXghM2KuzRBxLs7iaZkic6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;512&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1366120218579235&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoYC22ay9dZKXJZvFoSaYlBE55iacibEUC0xK7rQmAT9lXPIUVUdMAJfVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;549&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17353787152444872&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQzn9AZ8V5s3ibMLoxKCGnpAoqh74XSwdh5hxbDvFuPE1oicJTAqdPeQJGLcBqjb3mFqzb9NHdRxWluA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1043&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;幸福来得如此突然。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;最终可用的打包命令&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;native-image&lt;/span&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-jar&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;solondemo&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.jar&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;--allow-incomplete-classpath&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-H&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:+ReportExceptionStackTraces&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;--enable-http&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ld 需要升级到 2.26+&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;root@ubuntu&lt;span class=&quot;code-snippet__symbol&quot;&gt;:/home/hx/graalvm/demo3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;GNU ld (GNU Binutils &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; Ubuntu) &lt;span class=&quot;code-snippet__number&quot;&gt;2.26&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Copyright (C) &lt;span class=&quot;code-snippet__number&quot;&gt;2015&lt;/span&gt; Free Software Foundation, Inc.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;This program is free software; you may redistribute it under the terms of&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;the GNU General Public License version &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; (at your option) a later version.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;This program has absolutely no warranty.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其他注意事项&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-agentlib:native-image-agent 不一定能检查出所有的反射；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;GraalVM 有自己的文件系统实现，暂未找到遍历目录的方法；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第三方包不能运行时，大概率是由于反射没有检查到导致的 class not found；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;排查第三方包问题时，一定要注意被吃掉的 Exception；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;native-image 打包时需要 5G+ 内存。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;补充&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. native-image后序列化失败问题（比如 JSON.toJSONString(JavaBean)）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;fastjson1.2.68 版本下在程序启动时增加如下代码：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ParserConfig&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.getGlobalInstance&lt;/span&gt;()&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.setAsmEnable&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;SerializeConfig&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.getGlobalInstance&lt;/span&gt;()&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.setAsmEnable&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 反射方法报错&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需将反射类手动配置到 reflect-config.json 文件中，也可在编译打包成 jar 时添加配置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-agentlib:native-image-agent=config-output-dir=../META-INF/native-image&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后打包，然后 java -jar 或 java -cp 运行起来后，执行对应测试用例后，会自动将反射类信息生成到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;reflect-config.json 文件中（但真的不一定）。配置文件样例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.test.A&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;allDeclaredFields&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;allPublicFields&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;queryAllPublicMethods&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;methods&quot;&lt;/span&gt;:[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getA&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getD&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getF&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getI&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getQ&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getR&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getT&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getY&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getU&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }, &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            {&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;getV&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;parameterTypes&quot;&lt;/span&gt;:[] }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. GraalVM 有自己的文件系统实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;暂未找到遍历目录的方法（即上文说说的）.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你的程序中有涉及 ClassLoad.getResource(&quot;com.org&quot;) 这样的代码并打算对齐返回的结果以 File 或 jar 文件的方式扫描 com.org 下的所有类文件时会报错。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决方式如上文所说，手动配置需要扫描的类文件，然后读取该配置（替代 getResource 方式）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 控制 native 化后的二进制程序内存大小（配置参数不多说，一看就明白）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;样例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./solondemo -Xmx16m -Xms16m -XX:MaxDirectMemorySize=8m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上文提到的 solon scan 方法 支持预配置代码已提交到:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://gitee.com/noear/solon&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;文中提到的 solondemo 项目，已经提交到：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://gitee.com/mantouchong/solondemo&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;其他探索&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;h1&gt;&lt;span&gt;java运行包精简探索(一)：https://www.jianshu.com/p/f1da836fb4d6&lt;/span&gt;&lt;/h1&gt;&lt;/li&gt;&lt;li&gt;&lt;h1&gt;&lt;span&gt;java运行包精简探索(二)：https://www.jianshu.com/p/5e3b1913cf3b&lt;/span&gt;&lt;/h1&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;36&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;转自：馒头虫，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接：jianshu.com/p/f78a016b30fe&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651486454&amp;amp;idx=2&amp;amp;sn=07e3846b5a7ec5e7a786bf44ff7e1a29&amp;amp;chksm=bd2514898a529d9f0638bb1bef4b36c6a71b14b0a8129f02dd528c7d7b3a3565f7cf01012191&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一文了解GraalVM&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一文了解GraalVM&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651486454&amp;amp;idx=2&amp;amp;sn=07e3846b5a7ec5e7a786bf44ff7e1a29&amp;amp;chksm=bd2514898a529d9f0638bb1bef4b36c6a71b14b0a8129f02dd528c7d7b3a3565f7cf01012191&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一文了解GraalVM&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651478940&amp;amp;idx=1&amp;amp;sn=6634c9acf7260dd4a49fe7804b4eb8e5&amp;amp;chksm=bd2537e38a52bef557b04ee36fac0dbbc3e6a2cc61a0a46b1d32c42b7a391c2726c79efb0691&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;记一次 Spring Maven 打包的坑&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;记一次 Spring Maven 打包的坑&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651507085&amp;amp;idx=1&amp;amp;sn=ec5b8810775c5139b52cc5a59fb5d613&amp;amp;chksm=bd25a5f28a522ce4424b2490b947864674ff089781eaad2dd62584cb57233e9e00970b66cde1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;我司Spring Boot 项目打包 + Shell 脚本部署详细总结，太有用了!&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;我司Spring Boot 项目打包 + Shell 脚本部署详细总结，太有用了!&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>da2f45c7ce2c2f0519e23cf2ccbc5da2</guid>
<title>百亿级流量的系统架构该怎么设计，今天就来教会你</title>
<link>https://toutiao.io/k/sn7ah2g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-atom-one-dark&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;p align=&quot;center&quot;&gt;
 V-xin：ruyuan0330 获得600+页原创精品文章汇总PDF 
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;一、前情提示&lt;/li&gt;&lt;li&gt;二、清晰划分系统边界&lt;/li&gt;&lt;li&gt;三、引入消息中间件解耦&lt;/li&gt;&lt;li&gt;四、利用消息中间件削峰填谷&lt;/li&gt;&lt;li&gt;五、手动流量开关配合数据库运维&lt;/li&gt;&lt;li&gt;六、支持多系统同时订阅数据&lt;/li&gt;&lt;li&gt;七、系统解耦后的感受&lt;/li&gt;&lt;li&gt;八、下集预告&lt;/li&gt;&lt;/ul&gt; 
&lt;h1&gt;&lt;a id=&quot;_14&quot;/&gt;一、前情提示&lt;/h1&gt; 
&lt;p&gt;上一篇文章&lt;a href=&quot;https://blog.csdn.net/qq_42046105/article/details/128387819&quot;&gt;《第一次当架构师，我设计高并发架构发现了N个痛点。。。》&lt;/a&gt;，给大家初步讲述了一套大规模复杂系统中，两个核心子系统之间一旦耦合，会发生哪些令人崩溃的场景。如果还没看上篇文章的，建议先看一下。&lt;/p&gt; 
&lt;p&gt;这篇文章，咱们就给大家来说一说通过&lt;strong&gt;MQ消息中间件&lt;/strong&gt;的使用，如何重构系统之间的耦合，让系统具备高度的可扩展性。&lt;/p&gt; 
&lt;p&gt;首先来回看一下之前画的一张两个系统之间进行耦合的一个大图，从这个图里我们可以看到两个系统完全通过一套共享存储（数据库集群+缓存集群）进行了耦合。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/8390b4ac398742e0bda54d7b3391365c.png#pic_center&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a id=&quot;_31&quot;/&gt;二、清晰的划分系统边界&lt;/h1&gt; 
&lt;p&gt;只要有耦合，一旦要解决耦合，那么第一个要干的事儿就是先划分清楚系统之间的边界。&lt;/p&gt; 
&lt;p&gt;比如上面那两套系统都共享了一套存储集群，那么大家可以先思考一下，两个系统之间的边界应该如何划分？也就是说，中间那套缓存集群和数据库集群，到底应该是属于哪个系统？&lt;/p&gt; 
&lt;p&gt;首先我们看一下，缓存集群和数据库集群主要是给谁用的？&lt;/p&gt; 
&lt;p&gt;很明显就是给数据查询平台用的，说白了，那两套集群都是数据查询平台赖以生存的核心底层数据存储，这里存储的数据也都是属于数据查询平台的核心数据。&lt;/p&gt; 
&lt;p&gt;对于实时计算平台来说，他只不过是将自己计算后的结果写入到缓存集群和数据库集群罢了。&lt;/p&gt; 
&lt;p&gt;实时计算平台只要写入过后，后续就不会再管那些数据了，所以这两套集群明显是不属于实时计算平台的。&lt;/p&gt; 
&lt;p&gt;好，那么系统之间的边界就很清晰的划分清楚了，大家看一下如下的图。首先从系统整体架构的架构而言，两套系统之间的关系应该是下面这样子的。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/632bbd3e1a414402b1204b7d48aa7eb8.jpeg#pic_center&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a id=&quot;_52&quot;/&gt;三、引入消息中间件解耦&lt;/h1&gt; 
&lt;p&gt;只要划分清楚了系统之间的边界，接着下一步，就是引入消息中间件来进行解耦了。&lt;/p&gt; 
&lt;p&gt;如果大家对消息中间件的使用场景还不太熟悉的，可以参考之前的一篇文章：&lt;a href=&quot;https://blog.csdn.net/qq_42046105/article/details/128289715&quot;&gt;《做了几年开发，你知道自己的系统为什么要用消息中间件吗？》&lt;/a&gt;这篇文章里面，对消息中间件的各种使用场景都有说明。&lt;/p&gt; 
&lt;p&gt;我们只要引入一个消息中间件，然后让实时计算平台将计算好的数据按照预设的格式直接写入到消息中间件即可。&lt;/p&gt; 
&lt;p&gt;同时，数据查询平台需要增加一个数据接入服务，这个数据接入服务就是负责将消息中间件里的数据消费出来，然后落地写入到本地的缓存集群和数据库集群。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/d236bfcdfb88452f8b36350d70842a9d.jpeg#pic_center&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;如上图所示，此时两个系统之间已经不再直接基于共享数据存储进行耦合了，中间加入了MQ消息中间件。&lt;/p&gt; 
&lt;p&gt;这个消息中间件仅仅就是用于两个系统之间的数据交互和传输，职责简单，清晰明了。&lt;/p&gt; 
&lt;p&gt;这样做最大的好处，就是数据查询平台自身可以对涌入自身平台的数据按照自己的需求进行定制化的管控了，不会像之前那样的被动。&lt;/p&gt; 
&lt;p&gt;实际上在上述架构之下，涌入数据查询平台的所有数据，都需要经过数据接入服务那一关。在数据接入服务那里就可以随意根据自己的情况进行管理。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h1&gt;&lt;a id=&quot;_82&quot;/&gt;四、利用消息中间件削峰填谷&lt;/h1&gt; 
&lt;p&gt;还记得上一篇文章我们提到，这两个系统之间第一个大痛点，就是实时计算平台会高并发写入数据查询平台，之前不做任何管控的时候，导致各种意外发生。&lt;/p&gt; 
&lt;p&gt;举个例子，比如快速增长的写库压力导致数据查询平台必须优先cover住分库分表那块的架构，打破自己的架构演进节奏；&lt;/p&gt; 
&lt;p&gt;比如突然意外出现的热数据因为不做任何写入管控，一下子差点把数据库服务器击垮。&lt;/p&gt; 
&lt;p&gt;因此一旦用消息中间件在中间挡了一层之后，我们就可以进行削峰填谷了。&lt;/p&gt; 
&lt;p&gt;那什么叫做削峰填谷呢？其实很简单，我们先来看看，如果不做任何管控，实时计算平台写入数据库集群的写并发曲线图，大概如下面所示。&lt;/p&gt; 
&lt;p&gt;在高峰期，写入会有一个陡然上升的尖峰。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/16e9857b4e69448a9abb7565072336c1.jpeg#pic_center&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;就好比说，平时每秒写入并发就500，但是高峰期写入并发请求有5000，那么大家就会看到上面的那张图，在高峰期突然冒出来一个尖峰，一下子涌入并发5000请求，此时数据查询平台的数据库集群可能就会受不了。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;p&gt;&lt;strong&gt;但是，如果我们在数据接入服务里做一个限流控制呢？&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;也就是说，在数据接入服务里，根据当前数据查询平台的数据库集群能承载的并发上限，比如说就是最多承载每秒3000。&lt;/p&gt; 
&lt;p&gt;好！那么数据接入服务自己就控制好，每秒最多就往自己本地的数据库集群里写入最多每秒3000的请求压力。&lt;/p&gt; 
&lt;p&gt;此时就会出现削峰填谷的效果，大家看下面的图。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/3d66a90e2b384c2cb161ddfd12ca5997.jpeg#pic_center&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;因为在高峰期瞬时写入压力最大有5000/s，但是数据接入服务做了流量控制，最多就往本地数据库集群写入3000/s，那么每秒就会有2000条数据在消息中间件里做一个积压。&lt;/p&gt; 
&lt;p&gt;但是积压一会儿不要紧，最起码保证说在高峰期，这个向上的尖峰被削平了，这就是所谓的削峰。&lt;/p&gt; 
&lt;p&gt;然后在高峰期过了之后，本来每秒可能就100/s的写入压力，但是此时数据接入服务会持续不断的从消息中间件里取出来数据然后持续以最大3000/s的写入压力往本地数据库集群里写入。&lt;/p&gt; 
&lt;p&gt;那么在低峰期，大家看到还会持续一段时间是3000/s的写入速度往本地数据库里写。&lt;/p&gt; 
&lt;p&gt;原来的图里在低峰期是谷底，现在谷底被填平了，这就是所谓的填谷。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;p&gt;&lt;strong&gt;通过这套削峰填谷的机制，就可以保证数据查询平台完全能够以自己接受的了的速率，均匀的把MQ里的数据拿出来写入自己本地数据库集群中。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;这样子无论实时计算平台多高的并发请求压力过来，哪怕是那种异常的热数据，瞬间上万并发请求过来也无所谓了。&lt;/p&gt; 
&lt;p&gt;因为MQ中间件可以抗住瞬间高并发写入，但是数据查询平台永远都是稳定匀速的写入自己本地数据库。&lt;/p&gt; 
&lt;p&gt;这样的话，数据查询平台就不需要去过多的care实时计算平台带给自己的压力了，可以按照自己的节奏规划好整体架构的演进策略，按照自己的脚本去迭代架构。&lt;/p&gt; 
&lt;p&gt;说了那么多，老规矩！给大家来一张图，此时的架构图如下所示。&lt;/p&gt; 
&lt;p&gt;大伙儿可以直观的感受一下，在数据接入服务中多了一个限流的模块。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/3f3d0961922e49c9be8b553bca13bd6c.jpeg#pic_center&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a id=&quot;_154&quot;/&gt;五、手动流量开关配合数据库运维操作&lt;/h1&gt; 
&lt;p&gt;现在基于消息中间件将两个系统隔离开来之后，另外一个大的好处就是：数据查询平台做任何数据运维的操作，比如说DDL、分库分表扩容、数据迁移，等等诸如此类的操作，已经跟实时计算平台彻底无关了。&lt;/p&gt; 
&lt;p&gt;实时计算平台主要就是简单的往消息中间件写入，其他的就不用管了。&lt;/p&gt; 
&lt;p&gt;然后如果数据查询平台要做一些数据库运维的操作，此时就可以通过在数据接入服务中加入一个手动流量开关，临时将流量开关关闭一会儿。&lt;/p&gt; 
&lt;p&gt;比如选择一个下午大家都在工作或者午睡的时候，相对低峰的时期，半小时内关闭流量开关。&lt;/p&gt; 
&lt;p&gt;然后此时数据接入服务就不会继续往本地数据库写入数据了，此时写入操作就会停止，然后就在半小时内迅速完成数据库运维操作。&lt;/p&gt; 
&lt;p&gt;等相关操作完成之后，再次打开流量开关，继续从MQ里消费数据再快速写入到本地数据库内即可。&lt;/p&gt; 
&lt;p&gt;这样，就可以完全避免了同时写入数据，还同时进行数据库运维操作的窘境。否则在早期耦合的状态下，每次进行数据库运维操作，还得实时计算平台团队的同学配合一起进行各种复杂操作，才能避免线上出现故障，现在完全不需要人家的参与了，自己团队就可以搞定。&lt;/p&gt; 
&lt;p&gt;整个过程，我们还是用一张图，给大家呈现一下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/7f38cfc09ef441369d2b77852d39c21b.jpeg#pic_center&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a id=&quot;_179&quot;/&gt;六、支持多系统同时订阅数据&lt;/h1&gt; 
&lt;p&gt;引入消息中间件之后，还有另外一个好处，就是其他的一些系统也可以按照自己的需要去MQ里订阅实时计算平台计算好的数据。&lt;/p&gt; 
&lt;p&gt;举个例子，在这套平台里，还有数据质量监控系统，需要获取计算数据进行数据结果准确性和质量的监控。&lt;/p&gt; 
&lt;p&gt;另外，还有数据链路监控系统，同样需要将MQ里的数据作为数据计算链路中的一个核心点数据采集过来，进行数据全链路的监控和自动追踪。&lt;/p&gt; 
&lt;p&gt;如果没有引入MQ消息中间件概念的话，那么是不是就会导致实时计算平台除了将数据写入一份到数据库集群，还需要通过接口发送给数据质量监控系统？还需要发送给数据链路监控系统？这样简直是坑爹到不行，N个系统全部耦合在一起。&lt;/p&gt; 
&lt;p&gt;之前的文章&lt;a href=&quot;https://blog.csdn.net/qq_42046105/article/details/128289715&quot;&gt;《做了几年开发，你知道自己的系统为什么要用消息中间件吗？》&lt;/a&gt;就阐述了这种多系统订阅同一份数据，但是通过接口调用耦合在一起的窘境。&lt;/p&gt; 
&lt;p&gt;这样每次要是有一点变动，各个系统的负责人都在一起开会商讨，修改代码，修改接口，考虑各种调用细节，等等。&lt;/p&gt; 
&lt;p&gt;但是现在有了消息中间件，完全可以通过MQ支持的“&lt;strong&gt;Pub/Sub&lt;/strong&gt;”消息订阅模型，不同的系统都可以来订阅同一份数据，大家自己按需消费，按需处理，各个系统之间完全解耦。&lt;/p&gt; 
&lt;p&gt;整个系统的可扩展性瞬间提升了很多，因为各个系统各自迭代和演进架构，都不需要强依赖其他的系统了。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/f992aac3fbd24a3bb3569a73666ea20c.jpeg#pic_center&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;a id=&quot;_204&quot;/&gt;七、系统解耦后的感受&lt;/h1&gt; 
&lt;p&gt;云开雾散！各个团队的同学终于不用天天扯皮，今天说你的系统影响了我，明天是我的系统影响了你。&lt;/p&gt; 
&lt;p&gt;同时也压根儿不用去关注其他的系统，只要有一个总架构师把控好整体架构，各个team都按照这个分工协作来做即可。&lt;/p&gt; 
&lt;p&gt;消息中间件的引入，消除了系统的耦合性，大幅度提升了系统的可扩展性，各个team都可以快速的独立的迭代扩展自己的架构和系统。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PS：最重要的，不同team的同学，再也不用为了一些鸡毛蒜皮的事儿加班到深更半夜，导致他们的女朋友觉得他们要在一起了。。。&lt;/strong&gt;&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h1&gt;&lt;a id=&quot;_220&quot;/&gt;八、下集预告&lt;/h1&gt; 
&lt;p&gt;下一篇文章，是关于可扩展架构的最后一篇。我们把整体架构梳理完毕了之后，就可以来看一看具体到MQ消息中间件的层面，他是怎么通过“Pub/Sub”的订阅模型，让一份数据发布出去，然后让多个不同的系统来订阅同一份数据的。&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;
 V-xin：ruyuan0330 获得600+页原创精品文章汇总PDF 
&lt;/p&gt;
&lt;hr/&gt; 
&lt;p&gt;&lt;strong&gt;另外推荐儒猿课堂的1元系列课程给您，欢迎加入一起学习~&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tod.h5.xeknow.com/s/3o8O0w&quot;&gt;互联网Java工程师面试突击课（1元专享）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tod.h5.xeknow.com/s/1NRrqb&quot;&gt;SpringCloudAlibaba零基础入门到项目实战（1元专享）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tod.h5.xeknow.com/s/xItYJ&quot;&gt;亿级流量下的电商详情页系统实战项目（1元专享）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tod.h5.xeknow.com/s/1T0B9m&quot;&gt;Kafka消息中间件内核源码精讲（1元专享）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tod.h5.xeknow.com/s/2nTSHI&quot;&gt;12个实战案例带你玩转Java并发编程（1元专享）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tod.h5.xeknow.com/s/40xOVv&quot;&gt;Elasticsearch零基础入门到精通（1元专享）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tod.h5.xeknow.com/s/1MUj1A&quot;&gt;基于Java手写分布式中间件系统实战（1元专享）&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tod.h5.xeknow.com/s/3o6jC&quot;&gt;基于ShardingSphere的分库分表实战课（1元专享）&lt;/a&gt;&lt;/p&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>