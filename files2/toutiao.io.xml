<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>33162ad63f101deed841e5e92b90e764</guid>
<title>【设计模式】10分钟学懂UML类图</title>
<link>https://toutiao.io/k/wg4oeyc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;h2&gt;UML介绍&lt;/h2&gt;&lt;p&gt;自己刚刚参加工作时，刚进部门第一周leader让我熟悉一个模块的调用过程，那个模块包含几十个类、有上百个方法，类和类之间关系错综复杂，各种方法调来调去，我就画了一整张纸，密密麻麻，睡醒觉第二天就已经看不懂了，&lt;span&gt;简直裂开&lt;/span&gt;&lt;span&gt;，这种感觉记忆尤新，当时&lt;/span&gt;leader说”工具不对“，然后从那个时候才开始接触UML。&lt;/p&gt;&lt;p&gt;UML（Unified Modeling Language）是一种统一建模语言，是用来对软件密集系统进行可视化建模的一种语言。&lt;/p&gt;&lt;p&gt;UML图有很多种，主要包含以下几类：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8323232323232324&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;495&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKyn3D5MxmUMJKlicib7Diaf4bPzogterjvgdfSYqwT3D4bekolLx65wbqw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;但是对于初学者来说，我们不需要掌握所有的UML图，才能进行系统分析和设计工作，否则学习的成本太高了。根据二八原则，一般说来，在UML图中，只要掌握&lt;span&gt;类图&lt;/span&gt;、&lt;span&gt;用例图&lt;/span&gt;、&lt;span&gt;时序图&lt;/span&gt;的使用，就能完成80%的工作了。而对于程序员来说，使用最频繁的又是类图。因此，本文我们只介绍UML类图。&lt;/p&gt;&lt;h2&gt;抽象类、抽象类、接口和包的UML类图表示&lt;/h2&gt;&lt;h3&gt;类的UML类图表示&lt;/h3&gt;&lt;p&gt;UML类图中用矩形框表示一个具体类，矩形框分为三层：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;• 第一层：类名&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 第二层：成员变量&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• 第三层：成员方法&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;成员变量以及成员方法名&lt;span&gt;前&lt;/span&gt;的访问修饰符用对应符号来表示，成员变量以及成员方法名&lt;span&gt;后&lt;/span&gt;紧跟着&quot;:&quot;后面再跟着成员变量的类型或者方法的返回类型,举个例子。&lt;/p&gt;&lt;section&gt;下面是一个具体类的定义：&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String pubVar;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; String proVar;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String priVar;&lt;br/&gt;    String defaultVar;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String &lt;span&gt;pubFun&lt;/span&gt;(){&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;pubFun&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; String &lt;span&gt;proFun&lt;/span&gt;(){&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;proFun&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String &lt;span&gt;priFun&lt;/span&gt;()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;priFun&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    String &lt;span&gt;defaultFun&lt;/span&gt;(){&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;defaultFun&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面是该类对应的UML类图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3499308437067773&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;723&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKxicKfdEw8Nhdn1OFlJZia1rhcv9ufFjeNFguzXteuxH8mAghSdHSrGZw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;抽象类的UML类图表示&lt;/h3&gt;&lt;p&gt;抽象类在UML类图中同样用矩形框表示，不同的是抽象类的类名以及抽象方法的名字都用斜体字表示，其它和具体类没有任何差别。&lt;/p&gt;&lt;p&gt;下面是一个抽象类的定义：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;abstract&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String pubVar;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; String proVar;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String priVar;&lt;br/&gt;    String defaultVar;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; String &lt;span&gt;pubFun&lt;/span&gt;(){&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;pubFun&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; String &lt;span&gt;proFun&lt;/span&gt;(){&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;proFun&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String &lt;span&gt;priFun&lt;/span&gt;()&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;priFun&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    String &lt;span&gt;defaultFun&lt;/span&gt;(){&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;defaultFun&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    //抽象方法&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;abstract&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;abstractFun&lt;/span&gt;();&lt;br/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;其对应的UML类图如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3603305785123967&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;605&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKcRwYzUoPmvGyba68IoKANaFSiavXbibH4hBcMh2tB3O0PK2oQJ1xn7aw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;接口的UML类图表示&lt;/h3&gt;&lt;p&gt;接口在类图中也是用矩形框表示，但是与类的表示法不同的是，接口在类图中的第一层顶端会用&lt;span&gt; &amp;lt;&amp;lt;interface&lt;/span&gt;&lt;interface&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/interface&gt;&lt;interface&gt;标注这是一个接口，下面是接口的名字，第二层是方法。另外需要注意的是接口的方法前面没有访问修饰符&lt;/interface&gt;&lt;interface&gt;&lt;span&gt;默认就是public&lt;/span&gt;&lt;/interface&gt;&lt;interface&gt;访问权限。&lt;/interface&gt;&lt;/p&gt;&lt;p&gt;下面是一个接口的定义：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;interface&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt; &lt;span&gt;Shoes&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;void&lt;/span&gt; &lt;span&gt;abstractFun&lt;/span&gt;();&lt;br/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;其对应的UML类图如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.18816388467374812&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;659&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeK5OzzPtIib5RcuzXELGMRSzu8KJmGw2V460zEASFHvwpePUTUmXfpCNA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;包的UML类图表示&lt;/h3&gt;&lt;section&gt;类和接口一般都出现在包中，UML类图中包的表示形式如图：&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; graph;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2309941520467836&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;342&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKlgYwt0HAiadN6dGRbBKyrU4u6jysq8uyIQvFW3tzrhJiaDpiaEhayTdrg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;UML类图表示类之间关系&lt;/h2&gt;&lt;h3&gt;继承关系&lt;/h3&gt;&lt;p&gt;&lt;span&gt;继承关系&lt;/span&gt;也称为泛化关系，是指对象与对象之间的继承关系。如，&lt;/p&gt;&lt;p&gt;在UML类图中，继承关系是用&lt;span&gt;空心&lt;/span&gt;三角和&lt;span&gt;实线&lt;/span&gt;组成的箭头表示，从&lt;span&gt;子类指向父类&lt;/span&gt;。&lt;/p&gt;&lt;section&gt;下面的例子中，Son类继承了Parent类。&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Parent&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Son&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;extends&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt; &lt;span&gt;Parent&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;用UML类图表示如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4794520547945205&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKKQkvC7ribMFdCL39APRxq0zoNlSBicD9ibCPxyVlbO7zoicjZicASicCFbRw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;h3&gt;实现关系&lt;/h3&gt;&lt;p&gt;&lt;span&gt;实现关系&lt;/span&gt;是指接口及其实现类之间的关系。在UML类图中，实现关系用&lt;span&gt;空心三角&lt;/span&gt;和&lt;span&gt;虚线&lt;/span&gt;组成的箭头来表示，从&lt;span&gt;实现类指向接口&lt;/span&gt;，&lt;/p&gt;&lt;section&gt;下面的例子中，Dog类实现了了Animal类。&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;interface&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt; &lt;span&gt;Animal&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Dog&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;implements&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt; &lt;span&gt;Animal&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;用UML类图表示如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.44976076555023925&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKVUDGiczN8JbnS9UibKaELjausIgRVpxwbhvaWPkOX2pq0EyQCHjjNicnQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;聚合关系&lt;/h3&gt;&lt;p&gt;&lt;span&gt;聚合关系&lt;/span&gt;是一种特殊的关联关系，表示的是整体和部分的关系，整体与部分具有各自的生命周期,即使整体没有了，部分还能存在，典型的例子就是，公司部门与员工的关系，一个部门撤消了，员工还能存在。&lt;/p&gt;&lt;p&gt;在UML图中，聚合关系用空心菱形加实线箭头表示，&lt;span&gt;空心菱形&lt;/span&gt;在整体一方，&lt;span&gt;箭头&lt;/span&gt;指向部分一方。&lt;/p&gt;&lt;section&gt;如下所示&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Department&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;Employee employee&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Employee&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;其对应的UML类图如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46026986506746626&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKJMRZ6iaZGRRHcuPM7zFiaZDbSstaKXc1hdqF5iaSokunSOxNOE5DibcgMg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;组合关系&lt;/h3&gt;&lt;p&gt;和聚合关系类似，&lt;span&gt;组合关系&lt;/span&gt;表示的也是整体与部分的关系，但&lt;span&gt;不同于聚合关系&lt;/span&gt;的是:组合关系中，&lt;span&gt;整体与部分不可以分开&lt;/span&gt;，一旦整体对象不存在，部分对象也将不存在，部分对象与整体对象之间具有同生共死的关系。&lt;/p&gt;&lt;p&gt;组合关系和聚合关系不关概念很像，它们的UML类图表示也很像，&lt;span&gt;在UML图中，组合关系用&lt;/span&gt;&lt;span&gt;实心菱形&lt;/span&gt;&lt;span&gt;加实线箭头表示，实心菱形在整体一方，箭头指向部分一方。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;举个例子，比如人的头（Head）和嘴巴（Mouth），嘴巴是头的组成部分之一，一旦头没了，嘴巴也没了，因此头和嘴巴是组合关系，对应的java代码如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Mouth&lt;/span&gt;&lt;br/&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Head&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Mouth mouth;&lt;br/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;其UML类图表示如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4314868804664723&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;686&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKRwDlvLAQ0Vib8yfKaBduJPpZsDOfVVvklbCCID98LqJJVcgKx1pGKkw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在Java代码形式上，&lt;/span&gt;&lt;span&gt;聚合和组合&lt;/span&gt;&lt;span&gt;关系中的&lt;/span&gt;&lt;span&gt;部分对象是整体对象&lt;/span&gt;&lt;span&gt;的一个&lt;/span&gt;&lt;span&gt;成员变量&lt;/span&gt;&lt;span&gt;，仅从类代码本身是区分不了聚合和组合的。如果一定要区分，那么需要结合业务角度上来看，如果作为整体的对象必须要部分对象的参与，才能完成自己的职责，那么二者之间就是组合关系，否则就是聚合关系。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;依赖关系&lt;/h3&gt;&lt;p&gt;&lt;span&gt;依赖（Dependency）&lt;/span&gt;关系是一种弱关联关系。如果对象A用到对象B，但是和B的关系不是太明显的时候，就可以把这种关系看作是依赖关系。如：工人(Worker)要去拧螺丝，要依赖螺丝刀(Screwdriver)来帮助你完成拧螺丝的工作&lt;/p&gt;&lt;p&gt;依赖关系在Java中的具体代码表现形式为B为A的构造器或方法中的局部变量、方法或构造器的参数、方法的返回值，或者A调用B的静态方法。&lt;/p&gt;&lt;p&gt;在UML类图中，依赖关系用一个&lt;span&gt;带虚线的箭头&lt;/span&gt;表示，由&lt;span&gt;使用方指向被使用方&lt;/span&gt;，可以看下面的例子。&lt;/p&gt;&lt;section&gt;java代码：&lt;/section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Screwdriver&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Worker&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//Screwdriver对象作为Worker类方法的参数，构成依赖关系&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;screw&lt;/span&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;Screwdriver screwdriver&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span&gt;){&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;对应的UML类图表示如下：&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.47334410339256866&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKduVrLBl3QgEcImAdaqNlsB3z1zSeZORfthapwsx7QbTywNYW95mv0w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;经过上面的介绍，相信大家对UML类图已经有比较好的理解了，最后给大家介绍一个可以免费画UML类图的在线工具：&lt;/span&gt;&lt;span&gt;https://www.processon.com/，本文的所有例子都是在这上面画的。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;最后，在网上找到一张对于类图比较综合的例子（如有侵权，请联系我删除），它将我们前面介绍的内容都联系起来，如下图所示，大家可以对照着理解&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;&lt;span&gt;中&lt;/span&gt;&lt;span&gt;各个&lt;/span&gt;&lt;span&gt;类之间的关系：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.9933065595716197&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qxCPEjAQyqbKDicic1SHT4MeKrTicRsDreFibBJZxL1XS0MDDqzRZd0RxGqLh3EY0SjVrPNle8GfsUxRQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;747&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文源码地址：&lt;br/&gt;https://github.com/qinlizhong1/javaStudy/tree/master/DesignPattern/src/graph&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;本文示例代码环境：&lt;br/&gt;操作系统：macOs 12.1&lt;br/&gt;JDK版本：12.0.1&lt;br/&gt;maven版本: 3.8.4&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;span mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;— &lt;strong mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;完&lt;/strong&gt; —&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;30&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;&lt;span mp-original-font-size=&quot;14.079999923706055&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;&lt;section mp-original-font-size=&quot;14.079999923706055&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;&lt;span mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;&lt;strong mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;欢迎关注原创技术号↓&lt;/strong&gt;&lt;strong mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;27.19999885559082&quot;&gt;&lt;section&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg5NTEwNTk2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ldJ288bl0qyHbrgbic86ZUMAOA1zPJrQTNTA56XkLkl7T44eeoYqP6WNskSwUoJWT68Yzdz0sRyl2mGkuPLVFqQ/0?wx_fmt=png&quot; data-nickname=&quot;非科班大厂码农&quot; data-alias=&quot;&quot; data-signature=&quot;混迹于BAT的非科班程序员，以java为载体，介绍数据库、缓存、搜索引擎、设计模式、架构等技术栈，让我们从小白走向架构师~&quot; data-from=&quot;2&quot; has-insert-preloading=&quot;1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-id=&quot;us2339328&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section data-width=&quot;40%&quot; mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;section mp-original-font-size=&quot;16&quot; mp-original-line-height=&quot;25.600000381469727&quot;&gt;&lt;span&gt;&lt;strong data-style=&quot;box-sizing: border-box; color: rgb(0, 122, 170); font-size: 20px; letter-spacing: 0.54px; max-width: 100%; overflow-wrap: break-word;&quot; mp-original-font-size=&quot;20&quot; mp-original-line-height=&quot;32&quot;&gt;&lt;span mp-original-font-size=&quot;20&quot; mp-original-line-height=&quot;32&quot;&gt;如有帮助，辛苦点赞和在看&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c48176f51e1cf9929ed404b357b1aa51</guid>
<title>会员服务优雅上下线实践</title>
<link>https://toutiao.io/k/zu5b8jg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;span&gt;随着会员业务的快速发展，会员系统架构也不断演进迭代，拆分出了多个微服务，提升了系统的稳定性和扩展能力。在敏捷的开发模式下，业务迭代更加快速，那么势必会经常发布线上服务，在服务上线的过程中，我们发现接口成功率会出现一定程度的下降，对于敏感业务直接影响了用户的体验。为了解决这个问题，我们对微服务上下线流程进行了优化，本文将详细介绍方案的设计和实现。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;问题分析&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  异常情况分析  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;业务系统当前使用的是 Spring Boot 和 Spring Cloud 框架，服务发布流程如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.27992633517495397&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvviccML3hgIxfbvdAWudIMibcLxunOJGjicEecsvCicgdNsyAiamoJDXgnlSA1elOibQ5QaiamyBquzmzQRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1629&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;通过梳理服务流程发现，引起服务可用性降低、响应时间突增的原因有以下几点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;过早销毁对象：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;服务正在处理请求，但此时对象被销毁导致请求报错。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务未及时下线：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;调用方不能及时感知服务已在下线中，仍会发送请求过来，但此时对象可能已经被销毁导致请求报错。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;过早注册服务：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;服务未初始化完成就被注册到了注册中心，导致接口响应时间突增甚至超时。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  优化方向  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;基于上面的分析，可以通过以下方式解决相关的问题：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在上线过程中，当服务把依赖的资源都初始化完成后，才将实例注册到注册中心。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在下线过程中，服务调用方可以排除正在下线的实例，保证在一定的时间窗口内请求不会打到这个实例上。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;系统以集群方式提供服务，实例的上下线状态对业务无感知，由组件封装实例的状态转换，通过优雅上线、优雅下线组合来保证服务的无损发布。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  优雅上线  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.15558194774346792&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvviccML3hgIxfbvdAWudIMibc34KZwImIDzFjMVUDIVIeq5knO2BGBScupTpmzpXGnzIj9SN2pIpHyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1684&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过预热功能实现资源初始化，预热模块是可插拔的，可全使用或者仅使用其中一个模块：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;自定义预热：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;由业务方自行扩展实现预热逻辑。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;线上请求回放预热：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;配置预热接口，拉取线上请求对本地服务预热，当接口调用达到配置的预热次数后，再将服务注册到注册中心。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在原生Spring Cloud Netflix基础上，定制开发了服务注册组件 GracefulServiceRegistration 并抽象了预热组件 WarmUp。在 Spring 容器初始化过程中，会扫描所有 WarmUp 实现类并注入到容器中，启动完成后由 GracefulServiceRegistration 组件调用 WarmUp 接口所有实现类的预热方法进行服务预热，预热完成之后再进行服务注册。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5389773679798826&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvviccML3hgIxfbvdAWudIMibc6bKpXlLASBo3jsKWWftQqeib5Gy8LhOxUo06P5Tj2m2t8fxEGziaU8UA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1193&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图例说明：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;VClientAutoConfiguration：服务注册配置类，负责初始化GracefulServiceRegistration&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;GracefulServiceRegistration：服务注册类，触发服务预热逻辑执行&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;WarmUp:预热组件，由业务方自行扩展实现预热逻辑。框架默认实现:延迟5s(可配置)再执行服务注册、线上请求回放预热&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  优雅下线  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;优雅下线通过延迟下线和可靠负载功能组合实现，在下线过程中，服务实例需要先去取消注册并将自己标记为已下线，后续的接口请求都将获取到该实例的已下线标记。服务调用方根据下线标记把该实例从可用服务列表中剔除，保证在后续一定时间窗口内的请求都不会再打到这个实例上。具体交互流程见下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvviccML3hgIxfbvdAWudIMibcUHHoBencbG8ObZ00bUStPQZkxw8WB19WIf03zluohvbL2nDzSGsWyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上文提到在原生Spring Cloud Netflix基础上，定制开发了 GracefulServiceRegistration、WarmUp 等组件，在解决优雅下线问题时，我们又增加了调用插件 InvokePlugin。当 JVM 监听到 SIGTERM 信号时，下线钩子线程开始工作，先执行取消注册，然后通过 GracefulServiceRegistration 标记当前服务为下线中状态，并阻塞当前线程 5s（可配置）来保证当前正在处理的请求能够成功返回。如果此时收到调用方请求，InvokePlugin 会检查当前服务状态是否为下线中，如果是，直接返回下线标记。最后下线钩子线程被唤醒，再执行对象销毁逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6455379482902419&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvviccML3hgIxfbvdAWudIMibcicPWlkZ2c9nvPicHBh5rmhRjKNsu90wGaMU4uOZrrC5qSZWmW4yIHGWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1199&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图例说明：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;VClientAutoConfiguration：服务注册配置类，负责初始化 InvokePlugin、GracefulServiceRegistration 等组件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;GracefulServiceRegistration：服务注册类，负责延迟销毁对象、触发服务预热逻辑执行&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;InvokePlugin：请求调用插件类，负责执行请求时检查服务实例状态是否在下线中，如果在下线中，直接返回下线标记&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务框架使用Ribbon作为负载均衡策略，默认是轮询机制，BaseLoadBalancer 中维护了两个注册表集合：全量注册表 allServerList、可用注册表 upServerList，但是原生只使用了全量注册表，通过循环判断获取可用实例，这种方式可能会获取到不可用的实例，所以我们对逻辑进行了优化，新增一个路由规则，使用可用注册表保存可用服务实例，并增加任务剔除标记已下线的实例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;负载策略实现方式为，服务调用方接收到实例的下线标记时，将该实例加入失活队列，独立的任务线程处理失活队列，并维护可用注册表，且失活队列的另一个任务是在同步注册中心最新注册表的时候，不要把已排除的实例恢复到可用注册表中。通过重试 + 排除下线实例的方式，使业务得到更高的可用性。具体设计如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5537974683544303&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvviccML3hgIxfbvdAWudIMibceF1WibtreBaj1jOzO37aDYklo2Env46U7mTSbJklbIsymWflukDUEwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1896&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;成果与总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对接优雅上下线功能的服务在上线过程中，服务成功率可以提升到99.99%以上，有效解决了服务上线成功率的问题。对比数据见下图示例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.1962134251290878&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/unymlvueOvviccML3hgIxfbvdAWudIMibcL8hRLlFkTBmKpzeicAq4xHpzkDe8buKTv95C1PJGw3KicXYY4ScnLiadw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1162&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;无优雅上下线（并行1台滚动上线）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4298469387755102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvviccML3hgIxfbvdAWudIMibcUEEQpqP6ORlnvy2n1IXxWmqvwoibM50nD1fYPYlvff3z5npXaJ1mKEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1568&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;开启优雅上下线（并行1台滚动上线）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.48089887640449436&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvviccML3hgIxfbvdAWudIMibcfXgQxtseTGVzTcqpfCnZspGhPkeuuM2AiaTZ4IFHpp5xMUwhdg4HWEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2670&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100011924&quot; data-ratio=&quot;0.1787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/unymlvueOvueerUPUVMYMza5vavcoBFAwibibF9VfD46qrxQDAwKBxWBZwwfCmot67PMKBEQUSSI2Rm0XXUgnIBw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;也许你还想看&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjczMjM2NA==&amp;amp;mid=2247496499&amp;amp;idx=1&amp;amp;sn=8568b710c9e466a1d6cecd0378c4a87e&amp;amp;chksm=e9756f10de02e606b04f08ad3f466e3fcbc7d63480c015e834fd3f10d232d478ffe4b7791052&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;爱奇艺海外版HTTPS效率提升的探索和实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;爱奇艺海外版HTTPS效率提升的探索和实践&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjczMjM2NA==&amp;amp;mid=2247496365&amp;amp;idx=1&amp;amp;sn=061e7aface8e232545b9d88491d094ec&amp;amp;chksm=e9756e8ede02e798bba2061718870a12b9bdfdf64859a368e84e27ac994018e553ce777df89d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;爱奇艺短视频智能标签生成实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;爱奇艺短视频智能标签生成实践&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjczMjM2NA==&amp;amp;mid=2247496225&amp;amp;idx=1&amp;amp;sn=7288a5eabefe19fd67016eb2fc8fbcb4&amp;amp;chksm=e9756e02de02e714aa836d7d29a55d59fa3c457fcc06fede4a40138efa9ffd88d5056f3a0b33&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;左右互搏：GAN在爱奇艺短视频推荐冷启动中的实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;左右互搏：GAN在爱奇艺短视频推荐冷启动中的实践&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages __bg_gif wxw-img&quot; data-fileid=&quot;100011926&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/unymlvueOvuxdEeTYeJjvpHdMng1mqJfcnlzibBzbAcDdsvYiauaiabzjxJhzYFWOqJ7jn85w3lic3AFC7RgRIO7kQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;300&quot;/&gt;&lt;span&gt; 关注我们，更多精彩内容陪伴你！&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI0MjczMjM2NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/unymlvueOvs6iazANntAPX20co1QId85MuA24m1JmMdGvJMVwMfNibajUNUIb5hvY3I1Ieedsy8tdXxBibBRXOjkA/0?wx_fmt=png&quot; data-nickname=&quot;爱奇艺技术产品团队&quot; data-alias=&quot;iQIYI-TP&quot; data-signature=&quot;爱奇艺的技术产品团队&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3def248f2f63b79bb96b8364a34a4486</guid>
<title>研发过程中的文档管理与工具</title>
<link>https://toutiao.io/k/mdiqwn5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;写文档也是技术活&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;01：实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于多数开发同学来说，很多时候即讨厌没有研发文档，但是自己又不愿意常写文档，痛且倔强着；&lt;/p&gt;&lt;p&gt;程序员该不该写文档，与争论哪种编程语言最好一样，想撕的嘴不留情，该写的笔不停耕；&lt;/p&gt;&lt;p&gt;当自我的意识上去纠结一件事情要不要去做的时候，不妨停下来看一看，大的职场环境是如何选择的，纠结自然就没必要了；&lt;/p&gt;&lt;p&gt;对于写文档这件事情，并不需要去思考能带来哪些好处或者会占用多少时间，用心去写自然明白当中利弊；&lt;/p&gt;&lt;p&gt;最近两年听到不少搬砖的朋友说，公司已经把文档管理提升到资产层面，在重大版本推进过程中，预留文档输出的时间，这可不是一般的大聪明；&lt;/p&gt;&lt;p&gt;从工作的这几年实践经验来看，写文档原则上本着复杂的事项细写，简单的事项简写或者不写，卷可以但又不闲的慌；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;02：目录&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;互联网的产品，多少存在一定的虚拟属性，很多事情和想法也都具有明显的抽象感，如果缺乏文档的结构化描述，时间拉扯下很容易烟消云散；&lt;/p&gt;&lt;p&gt;这里罗列一份在研发管理和职场中，或多或少都会接触到的文档内容，虽然结构复杂，但随着时间的沉淀，其带来的价值远大于维护成本；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.3328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvC1pUKiaFoXG4ib9PPZVwpx79SV5ltYK13xlzIia0IYYY3hbKLDLRfI5xrv2Qu6NuAcNujXxlz7FmdiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;工作中涉及到的文档种类比较繁多，但就管理和沉淀的动作来说属于那种重要但不紧急的事情，这样说并不是指研发流程中动作的时序可以混乱；&lt;/p&gt;&lt;p&gt;顺着工作流程把该输出的文档做好，是比较正常的节奏，在特殊情况下也可以先解决事情，再后补文档；&lt;/p&gt;&lt;p&gt;从开发的角度来说，如果是常规状态下的版本推进，那么在版本结束时各种相关文档就可以上传指定目录了；&lt;/p&gt;&lt;p&gt;但是工作中不乏很多生产环境突发的棘手状况，此时团队自然优先解决，如果问题影响过大，在事后必然还要输出总结文档，即是经验更是教训；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;03：模板&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果是个人的文档，简明扼要即可；但是工作文档需要有规范和风格上的约束，通常情况下基于统一的模板库即可；&lt;/p&gt;&lt;p&gt;在研发流程中，通常会围绕项目的进度管理文档，在该文档中会统筹流程中的核心内容，涉及各个阶段的进度维护；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.3343283582089551&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvC1pUKiaFoXG4ib9PPZVwpx79lI8C7vNw3Go4yW3icYKaWvqvV7EUjxYFwPH6YgS5gHcgakRDuW1e8ng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1005&quot;/&gt;&lt;/p&gt;&lt;p&gt;基于项目进度管理的文档模板，在流程推进的过程中，不断补齐相关的核心内容，清晰准确的记录版本进度；&lt;/p&gt;&lt;p&gt;采用特定的模板写工作文档，本身就会起到规范的效果，在部门的日常管理中，需要阶段性的沉淀和维护各类文档的模板结构，而模板的内容可以根据具体需求来定，在使用的过程中也需要时常优化；&lt;/p&gt;&lt;p&gt;如果文档模板足够丰富，在一定程度上可以解决不想写文档的问题，在写文档这件事上之所以会劝退很多人，很大原因是缺少可用的文档模板；&lt;/p&gt;&lt;p&gt;当模板库中存在：项目进度、研发设计、测试用例、阶段总结、阶段规划等各种样例时，下载之后直接使用，编写核心内容即可，这样排斥写文档的情绪自然减少；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;04：内容&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;文档的内容是价值所在，对于团队的协作来说内容简明扼要即可，让阅读文档的人可以快速准确的理解事情的信息；&lt;/p&gt;&lt;p&gt;通常需要输出文档的事项都比较复杂，所以在内容上需要适当的排版，复杂的逻辑尽量使用图解来描述，这样内容条理和思路都会很清晰；&lt;/p&gt;&lt;p&gt;对于其他细节方面的把控，比如段落缩进、专业名词、空格等，通常本着：对内的文档尽量做好，对外的文档必须做好的原则；&lt;/p&gt;&lt;p&gt;文档内容是思考逻辑的呈现，在编写过程中也容易发现逻辑上的问题，再通过评审讨论和完善内容，这样事情围绕文档在后续的过程中不会过度偏离主线；&lt;/p&gt;&lt;p&gt;对于开发这个角色来说，写文档是避不开的事，在一个项目上待的时间久了，再看初期的代码，都觉得不是自己写的，更别说是复杂的业务逻辑了；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvC1pUKiaFoXG4ib9PPZVwpx79iaoibRT8HKwBNm6TkaIWT9ZFIUkltmq5qtLlTpz61WvfHsacKW5ATQPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;在研发文档中，最常用的图解就是逻辑时序，再适当的丰富相关的内容，在一份图中可以包括流程、逻辑、交互、数据管理等各个核心节点；&lt;/p&gt;&lt;p&gt;开发的设计文档基本是几张图就可以描述清楚的，通常涉及：业务流程图，逻辑时序图，数据结构图；&lt;/p&gt;&lt;p&gt;当复杂的业务呈现在文档和设计图上时，其实就是给事情预设好了航线，当然有时候中途被迫返航或变道也不少见；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;05：工具&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;工欲善其事，必先利其器，想快速做好一份文档，必须得有趁手好用的工具才行，在多年写文档的经验中，以下工具多少都试用过；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.3336745138178097&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvC1pUKiaFoXG4ib9PPZVwpx79YtkTzCz6DWCZMATP0011yL5blqjntPSMetpqzYgdpD3KQEoltH1gUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;/p&gt;&lt;p&gt;图中标红的工具，是个人在实践中觉得不错的工具，当下使用最多的是DrawIO和语雀文档，在免费的边界内足够日常使用；&lt;/p&gt;&lt;p&gt;由于工作中需要对接的事项比较多，很难统一协作的各方使用的文档工具，自然接触到的工具类型就很复杂，对于团队内部来说，通常使用办公软件集成的工具，以便于统一管理；&lt;/p&gt;&lt;p&gt;写文档的习惯已经持续了很多年，工具的变迁也经历了三次，从办公文档迁向Markdown，从线下迁移到线上，更换过一次文档工具；&lt;/p&gt;&lt;p&gt;时间在变，文档类产品也在不断的更新换代，如何寻找自己顺手的工具，本着一个基本的原则：免费的范畴内，支持在线管理，功能适当丰富即可；&lt;/p&gt;&lt;p&gt;最后分享一条写文档的理由：因为工作多而复杂，所以要写到文档中，这样便能安心的忘了它。&lt;/p&gt;&lt;p&gt;&lt;span&gt;END&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4Njg0MzYwNw==&quot; data-alias=&quot;cicada_smile&quot; data-from=&quot;0&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBj3abVSgCmvm7FIYw55ficInd2se9ia6KSic0ma25AUvrmUtXUwXibjhHmCc7DUawfXBI30QuHBjDnzw/0?wx_fmt=png&quot; data-nickname=&quot;知了一笑&quot; data-signature=&quot;积累、总结、用心记录。&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>76e8f392b76e566443203f43a023264a</guid>
<title>千万级乘客排队系统重构&amp;压测方案——总结篇</title>
<link>https://toutiao.io/k/qjesxr7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、 前言&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发布上篇文章&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU5NTg1ODg2MQ==&amp;amp;mid=2247484229&amp;amp;idx=1&amp;amp;sn=65019d4697f39ba76d1fd0f04f30cf2d&amp;amp;chksm=fe6ac787c91d4e916c64e05681c7f4b98403576ac7216853530623d9fe2e3fc8c5625673b80a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;线上真实排队系统重构案例分享——实战篇&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;线上真实排队系统重构案例分享——实战篇&lt;/a&gt;之后，一些朋友问我们重构进度咋样了，截至目前，我们乘客排队系统重构已经上线，并且灰度1个月了，目前已稳定运行，从目前结果来看，还是远超预期的。这篇文章主要讲一讲，乘客排队场景压测方案以及个人的一些总结。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、 如何评估一个排队系统性能&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于排队系统压测，也是和运维同学，测试同学碰撞了挺久，大家各执己见。因为之前，也没有对排队系统性能真正的评估，没有标准。我结合目前线上场景(目前排名前10城市)，分析如下:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;乘客排队形成排队时机高峰期，时间段(8:00~ 10:00 18:00~19:00 21:00~23:00)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;排队平均等待时间(出队时间-入队时间)
1min ~ 5min&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高峰期各大城市进入排队比例(排队订单量/当天订单总量) 10% ~ 38%&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此可知，排队性能评估指标——5分钟时间窗口支持最大排队数量(取极限值5min)。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、 压测目标&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前:  乘客排队开全国，10% ~ 38%订单进排队，我们按50%进排队计算，目前高峰期3万/QPM,  计算得:3万 * 5 * 0.5 = 7.5万&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目标: 按目前订单量翻5倍目标压测，即5分钟内，支持37.5万订单同时排队&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、压测步骤&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;序号&lt;/th&gt;&lt;th&gt;步骤&lt;/th&gt;&lt;th&gt;观测指标&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;01&lt;/td&gt;&lt;td&gt;下单后派单——历史流程&lt;/td&gt;&lt;td&gt;历史流程5min支持最大排队订单数量，接口QPS情况&lt;/td&gt;&lt;td&gt;关闭开关，订单排队5min取消&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;02&lt;/td&gt;&lt;td&gt;下单后派单——新流程&lt;/td&gt;&lt;td&gt;新流程5min支持最大排队订单数量，接口QPS情况&lt;/td&gt;&lt;td&gt;开启开关，订单排队5分钟取消&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;历史流程5min同时入队量到达10W订单时，接口出现大量超时异常，到达性能瓶颈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新流程情况如下—— 5min内入队50W订单排队，无异常，此时重要接口情况如下:&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;接口&lt;/th&gt;&lt;th&gt;目前QPS&lt;/th&gt;&lt;th&gt;压测目标&lt;/th&gt;&lt;th&gt;压测QPS&lt;/th&gt;&lt;th&gt;平均RT&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;入队&lt;/td&gt;&lt;td&gt;300&lt;/td&gt;&lt;td&gt;1500&lt;/td&gt;&lt;td&gt;3000&lt;/td&gt;&lt;td&gt;12ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;出队&lt;/td&gt;&lt;td&gt;300&lt;/td&gt;&lt;td&gt;1500&lt;/td&gt;&lt;td&gt;3000&lt;/td&gt;&lt;td&gt;40ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;是否在队列中&lt;/td&gt;&lt;td&gt;3000&lt;/td&gt;&lt;td&gt;15000&lt;/td&gt;&lt;td&gt;15000+&lt;/td&gt;&lt;td&gt;4ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;查询排队位置&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;8500&lt;/td&gt;&lt;td&gt;8ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五、乘客排队重构新老对比&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;5min同时排队订单数量&lt;/th&gt;&lt;th&gt;单蜂巢支持最大队列数&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;重构前&lt;/td&gt;&lt;td&gt;&amp;lt;10W&lt;/td&gt;&lt;td&gt;&amp;lt;1000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;重构后&lt;/td&gt;&lt;td&gt;&amp;gt;50W&lt;/td&gt;&lt;td&gt;无限制&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重构后查询接口平均RT整体降低65%，更新接口平均RT降低40%,且无性能瓶颈，后期可水平扩展。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;六 总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次重构开发人力只投入了2人(人力有限)，开发时间只用了7天，一共20多个接口改造，3个定时任务脚本，外加后台配置管理。在时间紧，任务重的前提下，依然有条不紊地进行，后面测试阶段测试反馈bug也很少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;截至目前，主导重构项目已经有6~7个了，重构做多了，也已经形成自己的套路和方法，方案已经很成熟了，很多细节上的坑可以避免。这里，也欢迎系统遇到瓶颈或者有重构需求，遇到困难的朋友一起交流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎关注&quot;浅谈架构&quot;公众号，不定期分享原创技术文章。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67WicS8obXBjC9RqxibSJcgOsnicwSlKjFSxuEECwjZjYS8Y9zpmCdyv6z4yeSicSQSDNz2XUzRppBjuGXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;file&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                  &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                    &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                  &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                  &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                &lt;/div&gt;
                                              
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b9e1bf5eb0a0d009f849ff395fbf6e6b</guid>
<title>Dapr 入门教程</title>
<link>https://toutiao.io/k/40y61qg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Dapr(Distributed Application Runtime)&lt;/code&gt; 是微软于 2019 年 10 月 16 日 &lt;span&gt;首次发布&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 的分布式程序运行时，到现在已经过去1年多，从最初的v0.1.0 到现在的 v1.0.0-rc2，加入了好多新的功能。支持的中间件越来越多，基本上主流的中间件(本地版和各云提供商的托管版)都可以被支持。Dapr 运行时也从原来的只支持单 Instance变成了v1.0.0-rc1以后的支持多 Instance（HA mode），让我们一起进入精彩的 Dapr 的世界。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47217675941080195&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z9BgVMEm7Yuic3LVbvQnj9bvibpSlOqTcKzMcXWvETEBGSGX8wmuiaZpTOib5mKBOMXicGvMqADfrk2ypD6Z2uWNAGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1222&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Dapr 是什么？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考 &lt;span&gt;Dapr 官方网站&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; ，&quot;An event-driven, portable runtime for building microservices on cloud and edge&quot;，或者复杂点说，&quot;Dapr is a portable, event-driven runtime that makes it easy for any developer to build resilient, stateless and stateful applications that run on the cloud and edge and embraces the diversity of languages and developer frameworks&quot;。翻译过来就是，&lt;code&gt;Dapr 是一个在云和边缘构建微服务用的事件驱动的，可移植的运行时&lt;/code&gt;。更复杂的来说，&quot;Dapr 是一个可移植的，事件驱动的运行时，使开发人员可以轻松创建在云和边缘上运行的有弹性，无状态和有状态的应用程序，支持语言和开发人员框架的多样性&quot;。听起来让人一头雾水，让我解释一下它到底是什么意思。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;分布式程序(Distributed Application)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;跟微服务是一个意思。大的系统分成彼此独立的小的模块，模块和模块之间通过API互相通信，这样每个模块可以用不同的语言开发，一个模块升级的时候不会影响到别的模块。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;云和边缘(cloud and edge)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;这里的云和边缘指的是 Dapr 的 App 可以跑在 AWS，Azure，GCP 等云服务器上，也可以跑在本地的服务器上。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;事件驱动(event-driven)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;可以理解成 Dapr 在没有监听（Listening）到请求到来的时候会一直处于待机的状态，什么也不做，只有监听到请求事件来了才开始处理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;可移植(portable)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;就是说写的程序和运行的环境，用的中间件无关。比如说原来跑在 AWS 上，现在想跑在 Azure 上，Nosql 数据库原来用 DynamoDB，现在想用 CosmosDB，消息中间件原来用 SNS/SQS，现在想用 Service Bus，没问题，只要在 Dapr 设定这边做一下切换，程序无需改动。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;运行时(runtime)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;运行时指的是 Dapr 的运行环境。Dapr 的 Control Plane（不知道怎么翻译，直接用英文，就是 Dapr 管理用的模块）会单独启动，同时你的程序在启动的时候 Dapr 会在你的程序上挂一个 Sidecar（所谓的边车模式），你的程序就可以通过 Sidecar 和 Dapr 的 Control Plane 联系上。所有挂有 Dapr Sidecar 的各个微服务之间就可以互相调用了，也可以通过 Dapr 调用各种中间件。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;有弹性(resilient)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;指的是可以从故障中自动恢复的能力，比如说超时、重试等。不会卡住或陷入一种死循环。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;无状态和有状态(stateless and stateful)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;无状态指的是一个微服务经过计算得到结果，返回给调用者以后这个值在微服务这边是不保存的（DB，内存等）。有状态指的是在微服务这边要把这个结果保存起来。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;支持语言的多样性(the diversity of languages)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;指的是 Dapr 有各种语言的 SDK，比如 java，python，go，.net 等都支持。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;开发人员框架(developer frameworks)指的是什么？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;指的是 Dapr 跟框架无关，你可以把各种语言的各种框架（比如 java 的 spring boot 框架）和 Dapr(API 或者 SDK)混合使用。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;说了这么多，Dapr 到底是个什么东西？&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我的理解是 Dapr 就是一个代理。什么意思呢，就是说它把不同组件的接口隐藏了起来，给你提供一个统一的接口让你来通信。这样做的好处不言而喻，不管你的组件怎么变，平台怎么变，我 Dapr 这边只要接口是不变的，你程序就不用变。所以它是 Makes it easy for any developer。从程序来看我只是把数据交给 Dapr 就可以了，由 Dapr 来处理，这块的逻辑不写在我的程序逻辑里。所以通过 Dapr 可以做到平台无关，中间件无关。打个比方，如果你不用 Dapr，而是用 springboot redis 库来实现的 Message Queue，忽然有一天让你不用 redis 而是 RebbitMQ，你怎么办，是不是只能用 springboot rebbitmq 重写程序。不同于工作在网络层的 Service Mesh(如 Istio 和 Linkerd)，Dapr 算是一个 App Mesh，工作于 APP 层，专注于提供构建模块(Building blocks)，使开发人员更容易构建微服务。可以说 Dapr 以开发人员为中心，而 Service Mesh 则以基础架构为中心。两者可以共存。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Dapr 能为我做什么？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dapr 提供如下的 Building blocks:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Service-to-service invocation，服务间调用，指的是一个微服务可以通过 Dapr 调用另一个微服务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;State management，状态管理，指的是一个微服务通过 Dapr 把状态数据保存到某个地方（PostgreSQL，Redis，DynamoDB 等等）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Publish and subscribe，就是所谓的消息总线（Message Bus），或者说发布者/订阅者模式。一个微服务把消息通过 Dapr 发布（Publish）给某个 Topic，所有订阅（Subscribe）这个 Topic 的微服务都能通过 Dapr 收到这个消息。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40861244019138754&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z9BgVMEm7Yuic3LVbvQnj9bvibpSlOqTcK9hbrn9Un74avyTxLBbx98Tdpq0RR5KnEDJmwCxBscrPXJFp96YFTzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2090&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Resource bindings，就是所谓的消息队列（Message Queue，或者叫消息代理，Message Broker），分为两种绑定，一种是输出绑定（Output Binding），一种是输入绑定（Input Binding）。出和入是看数据的流向，输出绑定就是作为 Producer 的 App 把消息通过 Dapr 传给消息队列，输入绑定就是作为 Consumer 的 App 通过 Dapr 从消息队列里得到消息。补充一点，这里的消息队列和 Pub/Sub 里的消息总线有什么区别呢？可以这样理解:一个消息进入消息总线的话，所有订阅者都能得到这个消息。而一个消息进入消息队列的话，由 Consumer 来取，一次只有一个人能得到。此外，消息总线是不要求处理顺序的，两个消息进入消息总线，谁先被拿到顺序是不一定的，而消息队列可以保证是先入先出的。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37139561707035756&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z9BgVMEm7Yuic3LVbvQnj9bvibpSlOqTcKzLGBs9hibdjQDiakeLnjzVmQewZYEhaQzib9kX6GM2zo2nhDlCvVqumog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1734&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;5&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Actors，实现了 &lt;span&gt;Actor Model&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Observability， 可观测性，就是 Dapr 提供了模板让你方便地进行观测，比如说用 Prometheus+Grafana 来看系统的 Metrics，用 Zipkin 来进行分布链路追踪，用 Elasticsearch+Fluentd+Kibana（俗称 EFK）来对日志进行检索。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Secrets，就是密钥，指的是一个微服务通过 Dapr 从 Secret Store 取得密钥。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;安装 Dapr&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;安装 CLI&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在安装 Dapr runtime 之前需要先安装 Dapr 的 CLI。有两个原因，第一，如果你以后不是用 Helm 来安装 Dapr 的话，需要用 Dapr CLI 来执行 dapr init。第二，即使你不用 Dapr CLI，而是用 Helm 来安装，以后查看 Dapr 系统状态的时候还是要用到 Dapr CLI，比如查看 Runtime 的状态（&lt;code&gt;dapr status -k&lt;/code&gt;）、查看 Components 状态（&lt;code&gt;dapr components -k&lt;/code&gt;）、查看 Configurations 状态（&lt;code&gt;dapr configurations -k&lt;/code&gt;），甚至启动 Dashboard 的时候还是要执行（&lt;code&gt;dapr dashboard -k&lt;/code&gt;）。你可以在很多 OS 上安装 Dapr CLI，比如 Windows，Linux，Mac OS，我用的是 Windows10 系统，可以选择在 Windows 上直接装，也可以在 WSL(Windows Subsystem for Linux)上装，这里选择在 WSL 上安装（没有 WSL 的话在 windows 商店里选一个免费的 Linux 装上。我选的是 Ubuntu）。参考官方文档 &lt;span&gt;How-To: Install Dapr CLI&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; ，在Ubuntu里执行:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ wget -q https:&lt;span&gt;//raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Your&lt;/span&gt; system &lt;span&gt;is&lt;/span&gt; linux_amd64&lt;br/&gt;&lt;span&gt;Installing&lt;/span&gt; &lt;span&gt;Dapr&lt;/span&gt; &lt;span&gt;CLI&lt;/span&gt;...&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Getting&lt;/span&gt; the latest &lt;span&gt;Dapr&lt;/span&gt; &lt;span&gt;CLI&lt;/span&gt;...&lt;br/&gt;&lt;span&gt;Installing&lt;/span&gt; v0.&lt;span&gt;11.0&lt;/span&gt; &lt;span&gt;Dapr&lt;/span&gt; &lt;span&gt;CLI&lt;/span&gt;...&lt;br/&gt;&lt;span&gt;Downloading&lt;/span&gt; https:&lt;span&gt;//github.com/dapr/cli/releases/download/v0.11.0/dapr_linux_amd64.tar.gz ...&lt;/span&gt;&lt;br/&gt;[sudo] password &lt;span&gt;for&lt;/span&gt; ubuntu:&lt;br/&gt;dapr installed into /usr/local/bin successfully.&lt;br/&gt;&lt;span&gt;CLI&lt;/span&gt; version: &lt;span&gt;0.11&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Runtime&lt;/span&gt; version: n/a&lt;br/&gt;&lt;br/&gt;&lt;span&gt;To&lt;/span&gt; &lt;span&gt;get&lt;/span&gt; started with &lt;span&gt;Dapr&lt;/span&gt;, please visit https:&lt;span&gt;//docs.dapr.io/getting-started/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装完成。看看版本号:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; &lt;span&gt;dapr&lt;/span&gt; &lt;span&gt;--version&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CLI version:&lt;/span&gt; &lt;span&gt;0.11&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Runtime version:&lt;/span&gt; &lt;span&gt;n/a&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CLI 是 0.11.0 版的，Runtime 因为还没装，所以显示 n/a。因为接下来要安装 1.0.0-rc.2 的 Runtime，1.x 相对于 0.x 版有了重大的改进(比如多 Instance 模式)，为了版本的统一性(低版本的 CLI 操作高版本的 Runtime 可能会出问题)，把 CLI 升级到 v1.0.0-rc.2 版的吧。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;curl -LO https://github.com/dapr/cli/releases/download/v1.0.0-rc.2/dapr_linux_amd64.tar.gz&lt;br/&gt;tar -xzf dapr_linux_amd64.tar.gz&lt;br/&gt;sudo cp dapr /usr/&lt;span&gt;local&lt;/span&gt;/bin/dapr&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再看一下版本:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; &lt;span&gt;dapr&lt;/span&gt; &lt;span&gt;--version&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CLI version:&lt;/span&gt; &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Runtime version:&lt;/span&gt; &lt;span&gt;n/a&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CLI 安装完毕。接下来安装 Runtime。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;安装 Runtime&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有两种选择，一个是 Standalone mode，一个是 Kubernetes mode。我们两个都试一下。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安装 Docker Engine&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dapr Runtime 安装的前提条件是要先安装 Docker。不然安装 Dapr 的时候会报&quot;could not connect to Docker. Docker may not be installed or running&quot;的错。这里参考 Docker 的官方文档 &lt;span&gt;Install Docker Engine on Ubuntu&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt; 来安装Docker Engine。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ sudo apt-get update&lt;br/&gt;$ sudo apt-get install \&lt;br/&gt;    apt-transport-https \&lt;br/&gt;    ca-certificates \&lt;br/&gt;    curl \&lt;br/&gt;    gnupg-agent \&lt;br/&gt;    software-properties-common&lt;br/&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;br/&gt;$ sudo apt-key fingerprint 0EBFCD88&lt;br/&gt;$ sudo add-apt-repository \&lt;br/&gt;   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \&lt;br/&gt;   $(lsb_release -cs) \&lt;br/&gt;   stable&quot;&lt;br/&gt;$ sudo apt-get update&lt;br/&gt;$ sudo apt-get install docker-ce docker-ce-cli containerd.io&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装完成。把 docker 的 service 启动:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ sudo service docker start&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看看 service 是否启动:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ service docker &lt;span&gt;status&lt;/span&gt;&lt;br/&gt; * Docker is &lt;span&gt;running&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，Docker Engine 安装完成。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安装 Standalone 版的 Runtime&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 dapr init 来安装单机版，可以指定版本号。目前最新的是 1.0.0-rc.2。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ dapr init &lt;span&gt;--runtime-version=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;⌛  Making the jump &lt;span&gt;to&lt;/span&gt; hyperspace...&lt;br/&gt;←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑↗  Downloading binaries &lt;span&gt;and&lt;/span&gt; setting up components...&lt;br/&gt;Dapr runtime installed &lt;span&gt;to&lt;/span&gt; /root/.dapr/bin, you may run the following &lt;span&gt;to&lt;/span&gt; add it &lt;span&gt;to&lt;/span&gt; your path &lt;span&gt;if&lt;/span&gt; you want &lt;span&gt;to&lt;/span&gt; run daprd directly:&lt;br/&gt;    export PATH=$PATH:/root/.dapr/bin&lt;br/&gt;→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←↑→↓←✅  Downloaded binaries &lt;span&gt;and&lt;/span&gt; completed components set up.&lt;br/&gt;ℹ️  daprd binary has been installed &lt;span&gt;to&lt;/span&gt; /root/.dapr/bin.&lt;br/&gt;ℹ️  dapr_placement container &lt;span&gt;is&lt;/span&gt; running.&lt;br/&gt;ℹ️  dapr_redis container &lt;span&gt;is&lt;/span&gt; running.&lt;br/&gt;ℹ️  dapr_zipkin container &lt;span&gt;is&lt;/span&gt; running.&lt;br/&gt;ℹ️  &lt;span&gt;Use&lt;/span&gt; `docker ps` &lt;span&gt;to&lt;/span&gt; check running containers.&lt;br/&gt;✅  Success! Dapr &lt;span&gt;is&lt;/span&gt; up &lt;span&gt;and&lt;/span&gt; running. &lt;span&gt;To&lt;/span&gt; get started, go here: https://aka.ms/dapr-getting-started&lt;br/&gt;export PATH=$PATH:/root/.dapr/bin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完成。看看都装了什么东西。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ docker ps&lt;br/&gt;CONTAINER ID   IMAGE               COMMAND                  CREATED         STATUS                   PORTS                              NAMES&lt;br/&gt;293b479ed26c   openzipkin/zipkin   &lt;span&gt;&quot;start-zipkin&quot;&lt;/span&gt;           5 minutes ago   Up 4 minutes (healthy)   9410/tcp, 0.0.0.0:9411-&amp;gt;9411/tcp   dapr_zipkin&lt;br/&gt;a07696221fd2   daprio/dapr         &lt;span&gt;&quot;./placement&quot;&lt;/span&gt;            5 minutes ago   Up 4 minutes             0.0.0.0:50005-&amp;gt;50005/tcp           dapr_placement&lt;br/&gt;c475c415332b   redis               &lt;span&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   6 minutes ago   Up 6 minutes             0.0.0.0:6379-&amp;gt;6379/tcp             dapr_redis&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跑起来三个 Container。一个 dapr_zipkin，一个 dapr_placement，一个 dapr_redis。看看版本号:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; &lt;span&gt;dapr&lt;/span&gt; &lt;span&gt;--version&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CLI version:&lt;/span&gt; &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Runtime version:&lt;/span&gt; &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;-rc.2&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此单机版的 Dapr Runtime 安装完成。dapr list 一下看看，什么也没有。因为我们还没有启动 App。&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1659098114683&quot; data-category_id_list=&quot;1|16|17|2|21|24|28|29|31|35|36|37|39|41|42|43|46|47|48|5|50|51|55|56|57|58|59|6|60|61|62|63|64|65|66|7|8&quot; data-id=&quot;1659098114683&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安装 Kubernetes 版的 Runtime&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装之前需要先有 Kubernetes 环境，minikube，AWS 托管的 EKS，Azure 托管的 AKS，GCP 托管的 GKE 等等。这里选择在本地安装 minikube。参考 &lt;span&gt;官方文档&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; sudo install minikube-linux-amd64 /usr/&lt;span&gt;local&lt;/span&gt;/bin/minikube&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看看版本:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; &lt;span&gt;minikube&lt;/span&gt; &lt;span&gt;version&lt;/span&gt;&lt;br/&gt;&lt;span&gt;minikube version:&lt;/span&gt; &lt;span&gt;v1.16.0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;commit:&lt;/span&gt; &lt;span&gt;9f1e482427589ff8451c4723b6ba53bb9742fbb1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先执行&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ sudo usermod -aG docker $USER &amp;amp;&amp;amp; newgrp docker&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不然 minikube 启动的时候会报错。然后启动 minikube 环境:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ minikube start&lt;br/&gt;😄  minikube v1.&lt;span&gt;16.0&lt;/span&gt; on Ubuntu &lt;span&gt;20.04&lt;/span&gt;&lt;br/&gt;✨  Automatically selected the docker driver&lt;br/&gt;👍  Starting control plane node minikube in cluster minikube&lt;br/&gt;🚜  Pulling base image ...&lt;br/&gt;💾  Downloading Kubernetes v1.&lt;span&gt;20.0&lt;/span&gt; preload ...&lt;br/&gt;    &amp;gt; preloaded-images-k8s-v8-v1....: &lt;span&gt;491.00&lt;/span&gt; MiB / &lt;span&gt;491.00&lt;/span&gt; MiB  &lt;span&gt;100.00&lt;/span&gt;&lt;span&gt;% 2.56 MiB&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;🔥  Creating docker container (CPUs=&lt;span&gt;2&lt;/span&gt;, Memory=&lt;span&gt;3100&lt;/span&gt;MB) ...&lt;br/&gt;🐳  Preparing Kubernetes v1.&lt;span&gt;20.0&lt;/span&gt; on Docker &lt;span&gt;20.10&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt; ...&lt;br/&gt;    ▪ Generating certificates &lt;span&gt;and&lt;/span&gt; keys ...&lt;br/&gt;    ▪ Booting up control plane ...&lt;br/&gt;    ▪ Configuring RBAC rules ...&lt;br/&gt;🔎  Verifying Kubernetes components...&lt;br/&gt;🌟  Enabled addons: storage-provisioner, default-storageclass&lt;br/&gt;💡  kubectl &lt;span&gt;not&lt;/span&gt; found. If you need it, &lt;span&gt;try&lt;/span&gt;: &#x27;minikube kubectl -- get pods -A&#x27;&lt;br/&gt;🏄  Done! kubectl is now configured to use &lt;span&gt;&quot;minikube&quot;&lt;/span&gt; cluster &lt;span&gt;and&lt;/span&gt; &lt;span&gt;&quot;default&quot;&lt;/span&gt; namespace by default&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看看 docker ps 的结果:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ docker ps&lt;br/&gt;CONTAINER ID   IMAGE                                           COMMAND                  CREATED          STATUS                    PORTS                                                                                                      NAMES&lt;br/&gt;cc47e6e56d32   gcr.io/k8s-minikube/kicbase:v0.0.15-snapshot4   &lt;span&gt;&quot;/usr/local/bin/entr…&quot;&lt;/span&gt;   4 minutes ago    Up 4 minutes              127.0.0.1:49156-&amp;gt;22/tcp, 127.0.0.1:49155-&amp;gt;2376/tcp, 127.0.0.1:49154-&amp;gt;5000/tcp, 127.0.0.1:49153-&amp;gt;8443/tcp   minikube&lt;br/&gt;fedf3508c0f4   daprio/dapr:1.0.0-rc.2                          &lt;span&gt;&quot;./placement&quot;&lt;/span&gt;            43 minutes ago   Up 43 minutes             0.0.0.0:50005-&amp;gt;50005/tcp                                                                                   dapr_placement&lt;br/&gt;c52f4a72abc4   redis                                           &lt;span&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   44 minutes ago   Up 44 minutes             0.0.0.0:6379-&amp;gt;6379/tcp                                                                                     dapr_redis&lt;br/&gt;af7b8dd7dcf3   openzipkin/zipkin                               &lt;span&gt;&quot;start-zipkin&quot;&lt;/span&gt;           44 minutes ago   Up 44 minutes (healthy)   9410/tcp, 0.0.0.0:9411-&amp;gt;9411/tcp                                                                           dapr_zipkin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多了个 minikube 的 Container。接下来安装 kubectl:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl -LO &lt;span&gt;&quot;https://storage.googleapis.com/kubernetes-release/release/&lt;span&gt;$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)&lt;/span&gt;/bin/linux/amd64/kubectl&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; chmod +x ./kubectl&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; sudo mv ./kubectl /usr/&lt;span&gt;local&lt;/span&gt;/bin/kubectl&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看看版本:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl version --client&lt;br/&gt;Client Version: version.Info{Major:&quot;1&quot;, Minor:&quot;20&quot;, GitVersion:&quot;v1.20.1&quot;, GitCommit:&quot;c4d752765b3bbac2237bf87cf0b1c2e307844666&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-12-18T12:09:25Z&quot;, GoVersion:&quot;go1.15.5&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装 Dapr Runtime 可以用 Dapr CLI 也可以用 Helm。我们选择用 Helm 来安装:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; sudo apt-get install apt-transport-https --yes&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;deb https://baltocdn.com/helm/stable/debian/ all main&quot;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; sudo apt-get update&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; sudo apt-get install helm&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看下版本:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ helm version&lt;br/&gt;version.BuildInfo{&lt;span&gt;Version:&lt;/span&gt;&lt;span&gt;&quot;v3.4.2&quot;&lt;/span&gt;, &lt;span&gt;GitCommit:&lt;/span&gt;&lt;span&gt;&quot;23dd3af5e19a02d4f4baa5b2f242645a1a3af629&quot;&lt;/span&gt;, &lt;span&gt;GitTreeState:&lt;/span&gt;&lt;span&gt;&quot;clean&quot;&lt;/span&gt;, &lt;span&gt;GoVersion:&lt;/span&gt;&lt;span&gt;&quot;go1.14.13&quot;&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;终于可以安装 Dapr 了。这里指定目前最新的版本号 1.0.0-rc.2。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; helm repo add dapr https://dapr.github.io/helm-charts/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; helm repo update&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; kubectl create namespace dapr-system&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; helm install dapr dapr/dapr --version 1.0.0-rc.2 --namespace dapr-system&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看下版本号:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ dapr status -k&lt;br/&gt;  NAME                   NAMESPACE    HEALTHY  STATUS   REPLICAS  VERSION     AGE  CREATED&lt;br/&gt;  dapr-dashboard         dapr-system  True     Running  1         0.5.0       1m   2020-12-26 02:22.08&lt;br/&gt;  dapr-sidecar-injector  dapr-system  True     Running  1         1.0.0-rc.2  1m   2020-12-26 02:22.08&lt;br/&gt;  dapr-sentry            dapr-system  True     Running  1         1.0.0-rc.2  1m   2020-12-26 02:22.08&lt;br/&gt;  dapr-operator          dapr-system  True     Running  1         1.0.0-rc.2  1m   2020-12-26 02:22.08&lt;br/&gt;  dapr-placement-server  dapr-system  True     Running  1         1.0.0-rc.2  1m   2020-12-26 02:22.08&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看看启动了什么 Pod:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl get pods -n dapr-system&lt;br/&gt;NAME                                     READY   STATUS    RESTARTS   AGE&lt;br/&gt;dapr-dashboard-6f749469dd-z7hzx          1/1     Running   0          3m45s&lt;br/&gt;dapr-operator-699cd79686-nndhd           1/1     Running   0          3m45s&lt;br/&gt;dapr-placement-server-0                  1/1     Running   0          3m45s&lt;br/&gt;dapr-sentry-7c4fb54fb7-xsx5q             1/1     Running   0          3m45s&lt;br/&gt;dapr-sidecar-injector-6bdbc588fc-tzpm4   1/1     Running   0          3m45s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动了 5 个 Pod：&lt;code&gt;dapr-dashboard&lt;/code&gt;、&lt;code&gt;dapr-operator&lt;/code&gt;、&lt;code&gt;dapr-placement&lt;/code&gt;、&lt;code&gt;dapr-sentry&lt;/code&gt;、&lt;code&gt;dapr-sidecar-injector&lt;/code&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;dapr-dashboard&lt;/code&gt; 负责显示 Dapr Dashboard&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;dapr-operator&lt;/code&gt; 负责管理 Dapr Component 的更新和 Kubernetes Service Endpoint（State stores，pub/sub 等）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;dapr-sidecar-injector&lt;/code&gt; 负责将 Dapr 的 sidecar 注入带 Dapr 注释的 Pod（如果 App 的 Deploy 里有 &lt;code&gt;dapr.io/app-id&lt;/code&gt;、&lt;code&gt;dapr.io/app-port&lt;/code&gt; 之类的 annotation，就会被注入 Dapr sidecar。这时你会发现 Pod 里有两个 Container）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;dapr-placement&lt;/code&gt; 用于 Actor，创建将 Actor 实例映射到 Pod 的映射表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;dapr-sentry&lt;/code&gt; 负责管理服务之间的 mTLS 并充当证书颁发机构。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把 Dapr Dashboard 起来看看:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ dapr dashboard -k&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果和 &lt;code&gt;kubectl port-forward svc/dapr-dashboard 8080:8080 -n dapr-system&lt;/code&gt; 是一样的。在浏览器里输入 &lt;code&gt;http://localhost:8080&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;恭喜，Dapr Runtime 终于安装完成了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们来部署一个 Dapr 的微服务的例子。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Dapr 程序的部署(Standalone 模式)&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面 Dapr 的运行时环境已经安装完成。今天我们在 Standalone 模式部署第一个 Dapr 程序。程序来自 Dapr 官方的 quickstarts 教程里的 &lt;span&gt;Hello World&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt; ，我们用目前的最新版本v1.0.0-rc.2。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; git &lt;span&gt;clone&lt;/span&gt; -b v1.0.0-rc.2 https://github.com/dapr/quickstarts.git&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; quickstarts&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hello-world 下面是 Standalone 版的，进去看看。程序很简单，一个 Node 的程序，提供 3 个 Endpoint(在 StateStore 里保存，取得，删除发过来的 OrderId)。还有一个 Python 的程序，每秒发 1 个 HTTP Request 给 Node 程序。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5089662447257384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z9BgVMEm7Yuic3LVbvQnj9bvibpSlOqTcKq1QR6t9bNicqNk1WLs31DibkNpMmVpW6rqZIV8P1DXa74Xj49JBK73og/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1896&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面开始部署。Standalone 模式下首先要先安装 Node 和 Python 的运行环境。不然 dapr run 的时候会报错。Node 的运行环境:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ sudo apt update&lt;br/&gt;$ sudo apt install nodejs&lt;br/&gt;$ sudo apt install npm&lt;br/&gt;$ sudo npm install&lt;br/&gt;$ npm list&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;里面有 express 和 body-parser 的话就可以用 Dapr 启动 node 的程序了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ dapr run &lt;span&gt;--app-id nodeapp --app-port 3000 --dapr-http-port 3500 node app.js&lt;/span&gt;&lt;br/&gt;ℹ️  &lt;span&gt;Starting&lt;/span&gt; &lt;span&gt;Dapr&lt;/span&gt; with id nodeapp. &lt;span&gt;HTTP&lt;/span&gt; &lt;span&gt;Port&lt;/span&gt;: &lt;span&gt;3500.&lt;/span&gt; gRPC &lt;span&gt;Port&lt;/span&gt;: &lt;span&gt;43509&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] starting &lt;span&gt;Dapr&lt;/span&gt; &lt;span&gt;Runtime&lt;/span&gt; &lt;span&gt;-- version 1.0.0-rc.2 -- commit 196483d  app_id=nodeapp instance=PC57-064 scope=dapr.runtime type=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] log level set to: info                        app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] metrics server started on :&lt;span&gt;37057&lt;/span&gt;/             app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.metrics &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] standalone mode configured                    app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] app id: nodeapp                               app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] mTLS is disabled. &lt;span&gt;Skipping&lt;/span&gt; certificate request and tls validation  app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] local service entry announced: nodeapp -&amp;gt; &lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.183&lt;/span&gt;&lt;span&gt;.23&lt;/span&gt;:&lt;span&gt;44399&lt;/span&gt;  app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.contrib &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] &lt;span&gt;Initialized&lt;/span&gt; name resolution to standalone     app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] component loaded. name: pubsub, &lt;span&gt;&lt;span&gt;type&lt;/span&gt;: pubsub.redis  app_id=nodeapp instance=&lt;span&gt;PC57&lt;/span&gt;-064 scope=dapr.runtime &lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] waiting for all outstanding components to be processed  app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] component loaded. name: statestore, &lt;span&gt;&lt;span&gt;type&lt;/span&gt;: state.redis  app_id=nodeapp instance=&lt;span&gt;PC57&lt;/span&gt;-064 scope=dapr.runtime &lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] all outstanding components processed          app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled gRPC tracing middleware               app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.grpc.api &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled gRPC metrics middleware               app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.grpc.api &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] &lt;span&gt;API&lt;/span&gt; gRPC server is running on port &lt;span&gt;43509&lt;/span&gt;      app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled metrics http middleware               app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.http &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled tracing http middleware               app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.http &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] http server is running on port &lt;span&gt;3500&lt;/span&gt;           app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled gRPC tracing middleware               app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.grpc.internal &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled gRPC metrics middleware               app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.grpc.internal &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] internal gRPC server is running on port &lt;span&gt;44399&lt;/span&gt;  app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] application host: &lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;. application protocol: http. waiting on port &lt;span&gt;3000.&lt;/span&gt;  &lt;span&gt;This&lt;/span&gt; will block until the app is listening on that port.  app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;== &lt;span&gt;APP&lt;/span&gt; == &lt;span&gt;Node&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; listening on port &lt;span&gt;3000&lt;/span&gt;!&lt;br/&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] application discovered on port &lt;span&gt;3000&lt;/span&gt;           app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] application configuration loaded              app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] actor runtime started. actor idle timeout: &lt;span&gt;1&lt;/span&gt;h0m0s. actor scan interval: &lt;span&gt;30&lt;/span&gt;s  app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.actor &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] dapr initialized. &lt;span&gt;Status&lt;/span&gt;: &lt;span&gt;Running&lt;/span&gt;. &lt;span&gt;Init&lt;/span&gt; &lt;span&gt;Elapsed&lt;/span&gt; &lt;span&gt;418.37829999999997&lt;/span&gt;ms  app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] placement tables updated, version: &lt;span&gt;0&lt;/span&gt;          app_id=nodeapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.actor.internal.placement &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;ℹ️  &lt;span&gt;Updating&lt;/span&gt; metadata for app command: node app.js&lt;br/&gt;✅  &lt;span&gt;You&#x27;re&lt;/span&gt; up and running! &lt;span&gt;Both&lt;/span&gt; &lt;span&gt;Dapr&lt;/span&gt; and your app logs will appear here.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;log 显示 Node 程序已经跑起来了。APP 自己的 HTTP Endpoint 端口是 3000，Dapr(Sidecar)的 HTTP 端口是 3500。现在再开另一个窗口，用 Dapr CLI 执行:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ dapr invoke --app-id nodeapp --method neworder --data &#x27;{&quot;data&quot;: { &quot;orderId&quot;: &quot;42&quot; } }&#x27;&lt;br/&gt;✅  App invoked successfully&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成功了。再看看原来的窗口，多了下面两条:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;== APP == Got a new order! Order ID: 42&lt;br/&gt;&lt;br/&gt;== APP == Successfully persisted state.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显示持久化成功。用 Node 程序的 GET API 确认一下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ curl http://localhost:3000/order&lt;br/&gt;{&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;:42}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 Dapr 的 API 确认一下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ curl http://localhost:3500/v1.0/invoke/nodeapp/method/order&lt;br/&gt;{&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;:&lt;span&gt;&quot;42&quot;&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看看数据存在了哪里。用 docker ps 看看 redis 跑在哪个 Container 里:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ docker ps&lt;br/&gt;CONTAINER ID   IMAGE               COMMAND                  CREATED          STATUS                    PORTS                              NAMES&lt;br/&gt;a51c086c8bbe   daprio/dapr         &lt;span&gt;&quot;./placement&quot;&lt;/span&gt;            31 minutes ago   Up 31 minutes             0.0.0.0:50005-&amp;gt;50005/tcp           dapr_placement&lt;br/&gt;fdca40421094   redis               &lt;span&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   31 minutes ago   Up 31 minutes             0.0.0.0:6379-&amp;gt;6379/tcp             dapr_redis&lt;br/&gt;9dc60b00db4d   openzipkin/zipkin   &lt;span&gt;&quot;start-zipkin&quot;&lt;/span&gt;           31 minutes ago   Up 31 minutes (healthy)   9410/tcp, 0.0.0.0:9411-&amp;gt;9411/tcp   dapr_zipkin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Container 名是 dapr_redis。进去看看:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;exec&lt;/span&gt; -it dapr_redis redis-cli&lt;/span&gt;&lt;br/&gt;127.0.0.1:6379&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看看有什么 Key:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; keys *&lt;br/&gt;&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;nodeapp||order&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; type nodeapp&lt;span&gt;||&lt;/span&gt;order&lt;br/&gt;hash&lt;br/&gt;&lt;span&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; hgetall nodeapp&lt;span&gt;||&lt;/span&gt;order&lt;br/&gt;&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;data&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;{\&quot;orderId\&quot;:\&quot;42\&quot;}&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;version&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;) &lt;span&gt;&quot;3&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，刚才的 orderId(42)找到了。除了用 Dapr CLI 保存 OrderId，我们还可以用 Dapr 的 API。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl -XPOST -d @sample.json -H &lt;span&gt;&quot;Content-Type:application/json&quot;&lt;/span&gt; http://localhost:3500/v1.0/invoke/nodeapp/method/neworder&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 sample.json 的内容如下。调用 Dapr 的 invoke API 可以起到 Dapr CLI(dapr invoke)一样的效果。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;span&gt;&quot;data&quot;&lt;/span&gt;:{&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;:&lt;span&gt;&quot;42&quot;&lt;/span&gt;}}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然我们也可以用 Node 程序自己的 Endpoint，这样不通过 Dapr Sidecar。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ curl -XPOST -d @sample.json -H &lt;span&gt;&quot;Content-Type:application/json&quot;&lt;/span&gt; &lt;span&gt;http:&lt;/span&gt;/&lt;span&gt;/localhost:3000/neworder&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你也许会问，为什么 Redis 直接就能用了呢？答案就是 Dapr Runtime 安装的时候，自动就跑起来了 Redis 的服务用的 Docker Container(配置文件在~/.dapr/components/下面的 statestore.yaml 和 pubsub.yaml)，所以基于 Redis 的 statestore 和 pubsub 是开箱即用的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK。接下来部署 Python 的程序。Python 也得先装运行环境:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ sudo apt install python3-pip&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 Dapr CLI 启动 Python 程序:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ dapr run &lt;span&gt;--app-id pythonapp --dapr-http-port 3501 python3 app.py&lt;/span&gt;&lt;br/&gt;ℹ️  &lt;span&gt;Starting&lt;/span&gt; &lt;span&gt;Dapr&lt;/span&gt; with id pythonapp. &lt;span&gt;HTTP&lt;/span&gt; &lt;span&gt;Port&lt;/span&gt;: &lt;span&gt;3501.&lt;/span&gt; gRPC &lt;span&gt;Port&lt;/span&gt;: &lt;span&gt;34093&lt;/span&gt;&lt;br/&gt;ℹ️  &lt;span&gt;Checking&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;Dapr&lt;/span&gt; sidecar is listening on &lt;span&gt;HTTP&lt;/span&gt; port &lt;span&gt;3501&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] starting &lt;span&gt;Dapr&lt;/span&gt; &lt;span&gt;Runtime&lt;/span&gt; &lt;span&gt;-- version 1.0.0-rc.2 -- commit 196483d  app_id=pythonapp instance=PC57-064 scope=dapr.runtime type=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] log level set to: info                        app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] metrics server started on :&lt;span&gt;37435&lt;/span&gt;/             app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.metrics &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] standalone mode configured                    app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] app id: pythonapp                             app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] mTLS is disabled. &lt;span&gt;Skipping&lt;/span&gt; certificate request and tls validation  app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] local service entry announced: pythonapp -&amp;gt; &lt;span&gt;172.17&lt;/span&gt;&lt;span&gt;.183&lt;/span&gt;&lt;span&gt;.23&lt;/span&gt;:&lt;span&gt;44129&lt;/span&gt;  app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.contrib &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] &lt;span&gt;Initialized&lt;/span&gt; name resolution to standalone     app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] component loaded. name: pubsub, &lt;span&gt;&lt;span&gt;type&lt;/span&gt;: pubsub.redis  app_id=pythonapp instance=&lt;span&gt;PC57&lt;/span&gt;-064 scope=dapr.runtime &lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] waiting for all outstanding components to be processed  app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] component loaded. name: statestore, &lt;span&gt;&lt;span&gt;type&lt;/span&gt;: state.redis  app_id=pythonapp instance=&lt;span&gt;PC57&lt;/span&gt;-064 scope=dapr.runtime &lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] all outstanding components processed          app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled gRPC tracing middleware               app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.grpc.api &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled gRPC metrics middleware               app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.grpc.api &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] &lt;span&gt;API&lt;/span&gt; gRPC server is running on port &lt;span&gt;34093&lt;/span&gt;      app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled metrics http middleware               app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.http &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled tracing http middleware               app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.http &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] http server is running on port &lt;span&gt;3501&lt;/span&gt;           app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled gRPC tracing middleware               app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.grpc.internal &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] enabled gRPC metrics middleware               app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.grpc.internal &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] internal gRPC server is running on port &lt;span&gt;44129&lt;/span&gt;  app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] actor runtime started. actor idle timeout: &lt;span&gt;1&lt;/span&gt;h0m0s. actor scan interval: &lt;span&gt;30&lt;/span&gt;s  app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.actor &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;WARN&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] failed to read from bindings: app channel not initialized   app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] dapr initialized. &lt;span&gt;Status&lt;/span&gt;: &lt;span&gt;Running&lt;/span&gt;. &lt;span&gt;Init&lt;/span&gt; &lt;span&gt;Elapsed&lt;/span&gt; &lt;span&gt;4.716900000000001&lt;/span&gt;ms  app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INFO&lt;/span&gt;[&lt;span&gt;0000&lt;/span&gt;] placement tables updated, version: &lt;span&gt;0&lt;/span&gt;          app_id=pythonapp &lt;span&gt;instance&lt;/span&gt;=&lt;span&gt;PC57&lt;/span&gt;&lt;span&gt;-064&lt;/span&gt; scope=dapr.runtime.actor.internal.placement &lt;span&gt;&lt;span&gt;type&lt;/span&gt;=log ver=1.0.0-rc.2&lt;/span&gt;&lt;br/&gt;ℹ️  &lt;span&gt;Checking&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;Dapr&lt;/span&gt; sidecar is listening on &lt;span&gt;GRPC&lt;/span&gt; port &lt;span&gt;34093&lt;/span&gt;&lt;br/&gt;ℹ️  &lt;span&gt;Dapr&lt;/span&gt; sidecar is up and running.&lt;br/&gt;ℹ️  &lt;span&gt;Updating&lt;/span&gt; metadata for app command: python3 app.py&lt;br/&gt;✅  &lt;span&gt;You&#x27;re&lt;/span&gt; up and running! &lt;span&gt;Both&lt;/span&gt; &lt;span&gt;Dapr&lt;/span&gt; and your app logs will appear here.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动成功了。因为 Python 自己不提供服务，所以--app-port 不用指定。--dapr-http-port 是 3501，这是自己的 Sidecar 用的端口，不能跟别人的重了。再看看刚才 Node 的窗口，不停的有新的 Request 过来，就是 Python 程序来的每隔一秒的 Request。最后看一下 dapr list 的结果:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; &lt;span&gt;dapr&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;APP&lt;/span&gt; &lt;span&gt;ID&lt;/span&gt;     &lt;span&gt;HTTP&lt;/span&gt; &lt;span&gt;PORT&lt;/span&gt;  &lt;span&gt;GRPC&lt;/span&gt; &lt;span&gt;PORT&lt;/span&gt;  &lt;span&gt;APP&lt;/span&gt; &lt;span&gt;PORT&lt;/span&gt;  &lt;span&gt;COMMAND&lt;/span&gt;         &lt;span&gt;AGE&lt;/span&gt;  &lt;span&gt;CREATED&lt;/span&gt;              &lt;span&gt;PID&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;nodeapp&lt;/span&gt;    &lt;span&gt;3500&lt;/span&gt;       &lt;span&gt;35485&lt;/span&gt;      &lt;span&gt;3000&lt;/span&gt;      &lt;span&gt;node&lt;/span&gt; &lt;span&gt;app.js&lt;/span&gt;     &lt;span&gt;41m&lt;/span&gt;  &lt;span&gt;2020&lt;/span&gt;&lt;span&gt;-12&lt;/span&gt;&lt;span&gt;-27&lt;/span&gt; &lt;span&gt;00&lt;/span&gt;&lt;span&gt;:54.54&lt;/span&gt;  &lt;span&gt;18395&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;pythonapp&lt;/span&gt;  &lt;span&gt;40175&lt;/span&gt;      &lt;span&gt;33349&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt;         &lt;span&gt;python3&lt;/span&gt; &lt;span&gt;app.py&lt;/span&gt;  &lt;span&gt;1m&lt;/span&gt;   &lt;span&gt;2020&lt;/span&gt;&lt;span&gt;-12&lt;/span&gt;&lt;span&gt;-27&lt;/span&gt; &lt;span&gt;01&lt;/span&gt;&lt;span&gt;:36.27&lt;/span&gt;  &lt;span&gt;31185&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要结束这两个 APP，在各自窗口里 Ctrl+c 就可以。如果在别的窗口，可以用 Dapr CLI 的命令:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ dapr stop &lt;span&gt;--app-id nodeapp&lt;/span&gt;&lt;br/&gt;$ dapr stop &lt;span&gt;--app-id pythonapp&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此在 Standalone 模式下的第一个 Dapr 程序部署成功！下一篇讲讲在 Kubernetes 模式下部署的方法。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Dapr 程序的部署(Kubernetes 模式)&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一篇我们在 Standalone 模式部署了第一个 Dapr 程序。这一次我们换成在 Kubernetes 模式下部署同样的程序。程序来自 Dapr 官方的 &lt;code&gt;quickstarts&lt;/code&gt; 教程里的 &lt;span&gt;Hello Kubernetes&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt; ，我们用目前的最新版本v1.0.0-rc.2。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; git &lt;span&gt;clone&lt;/span&gt; -b v1.0.0-rc.2 https://github.com/dapr/quickstarts.git&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; quickstarts/hello-kubernetes&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;里面包括一个 Python 的程序，每秒发 1 个 HTTP Request 给 Node 程序。一个 Node 程序，用来在 StateStore 里保存发过来的 OrderId。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4578183772165502&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z9BgVMEm7Yuic3LVbvQnj9bvibpSlOqTcKmK9RAGniakibSJEoYibIibMsEolqhx3K9rFVNcBswq1hw4ic3w4ic8DhGZzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1861&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先要先部署 Redis。跟 Standalone 模式不同，Kubernetes 模式的 Dapr Runtime 安装的时候不会自动安装 Redis,需要手动安装。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ helm repo add bitnami https://charts.bitnami.com/bitnami&lt;br/&gt;$ helm repo &lt;span&gt;update&lt;/span&gt;&lt;br/&gt;$ helm &lt;span&gt;install&lt;/span&gt; redis bitnami/redis&lt;br/&gt;&lt;br/&gt;&lt;span&gt;NAME&lt;/span&gt;: redis&lt;br/&gt;&lt;span&gt;LAST&lt;/span&gt; DEPLOYED: Sun Jan  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;17&lt;/span&gt; &lt;span&gt;2021&lt;/span&gt;&lt;br/&gt;NAMESPACE: &lt;span&gt;default&lt;/span&gt;&lt;br/&gt;&lt;span&gt;STATUS&lt;/span&gt;: deployed&lt;br/&gt;REVISION: &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;TEST&lt;/span&gt; SUITE: &lt;span&gt;None&lt;/span&gt;&lt;br/&gt;NOTES:&lt;br/&gt;** Please be patient &lt;span&gt;while&lt;/span&gt; the chart &lt;span&gt;is&lt;/span&gt; being deployed **&lt;br/&gt;Redis can be &lt;span&gt;accessed&lt;/span&gt; via port &lt;span&gt;6379&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; the &lt;span&gt;following&lt;/span&gt; DNS &lt;span&gt;names&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;within&lt;/span&gt; your cluster:&lt;br/&gt;&lt;br/&gt;redis-master.default.svc.cluster.local &lt;span&gt;for&lt;/span&gt; &lt;span&gt;read&lt;/span&gt;/write &lt;span&gt;operations&lt;/span&gt;&lt;br/&gt;redis-slave.default.svc.cluster.local &lt;span&gt;for&lt;/span&gt; &lt;span&gt;read&lt;/span&gt;-&lt;span&gt;only&lt;/span&gt; &lt;span&gt;operations&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;To&lt;/span&gt; &lt;span&gt;get&lt;/span&gt; your &lt;span&gt;password&lt;/span&gt; run:&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;export&lt;/span&gt; REDIS_PASSWORD=$(kubectl &lt;span&gt;get&lt;/span&gt; secret &lt;span&gt;--namespace default redis -o jsonpath=&quot;{.data.redis-password}&quot; | base64 --decode)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;To&lt;/span&gt; &lt;span&gt;connect&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; your Redis &lt;span&gt;server&lt;/span&gt;:&lt;br/&gt;&lt;br/&gt;&lt;span&gt;1.&lt;/span&gt; Run a Redis pod that you can &lt;span&gt;use&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; a &lt;span&gt;client&lt;/span&gt;:&lt;br/&gt;   kubectl run &lt;span&gt;--namespace default redis-client --rm --tty -i --restart=&#x27;Never&#x27; \&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;--env REDIS_PASSWORD=$REDIS_PASSWORD \&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;--image docker.io/bitnami/redis:6.0.9-debian-10-r38 -- bash&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;2.&lt;/span&gt; &lt;span&gt;Connect&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; the Redis CLI:&lt;br/&gt;   redis-cli -h redis-&lt;span&gt;master&lt;/span&gt; -a $REDIS_PASSWORD&lt;br/&gt;   redis-cli -h redis-&lt;span&gt;slave&lt;/span&gt; -a $REDIS_PASSWORD&lt;br/&gt;&lt;br/&gt;&lt;span&gt;To&lt;/span&gt; &lt;span&gt;connect&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; your &lt;span&gt;database&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; outside the cluster &lt;span&gt;execute&lt;/span&gt; the &lt;span&gt;following&lt;/span&gt; commands:&lt;br/&gt;&lt;br/&gt;    kubectl port-forward &lt;span&gt;--namespace default svc/redis-master 6379:6379 &amp;amp;&lt;/span&gt;&lt;br/&gt;    redis-cli -h &lt;span&gt;127.0&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; -a $REDIS_PASSWORD&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装完成。看一下 Pod 里多了什么:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl get pods&lt;br/&gt;NAME             READY   STATUS    RESTARTS   AGE&lt;br/&gt;redis-master-0   1/1     Running   0          2m5s&lt;br/&gt;redis-slave-0    1/1     Running   0          2m5s&lt;br/&gt;redis-slave-1    1/1     Running   0          1m7s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来部署 Statestore。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; quickstarts/hello-kubernetes/deploy&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; kubectl apply -f redis.yaml&lt;/span&gt;&lt;br/&gt;component.dapr.io/statestore created&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis.yaml 的内容如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;dapr.io/v1alpha1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;statestore&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;type:&lt;/span&gt; &lt;span&gt;state.redis&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# These settings will work out of the box if you use `helm install&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# bitnami/redis`.  If you have your own setup, replace&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# `redis-master:6379` with your own Redis master address, and the&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# Redis password with your own Secret&#x27;s name. For more information,&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# see https://docs.dapr.io/operations/components/component-secrets .&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;redisHost&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;value:&lt;/span&gt; &lt;span&gt;redis-master:6379&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;redisPassword&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;secretKeyRef:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;redis&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;key:&lt;/span&gt; &lt;span&gt;redis-password&lt;/span&gt;&lt;br/&gt;&lt;span&gt;auth:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;secretStore:&lt;/span&gt; &lt;span&gt;kubernetes&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;意思是部署一个名字叫 statestore 的 Component，类型为 state.redis。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 dapr cli 看一下 components:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ dapr components -k&lt;br/&gt;  NAME        TYPE         VERSION  SCOPES  CREATED              AGE&lt;br/&gt;  statestore  state.redis                   2021-01-03 12:50.41  58s&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来部署 Node 的 APP。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl apply -f node.yaml&lt;br/&gt;service/nodeapp created&lt;br/&gt;deployment.apps/nodeapp created&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 node.yaml 的内容如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;nodeapp&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;selector:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;protocol:&lt;/span&gt; &lt;span&gt;TCP&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;80&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;targetPort:&lt;/span&gt; &lt;span&gt;3000&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;type:&lt;/span&gt; &lt;span&gt;LoadBalancer&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;---&lt;/span&gt;&lt;br/&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;apps/v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Deployment&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;nodeapp&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;replicas:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;selector:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;matchLabels:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;template:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;annotations:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;dapr.io/enabled:&lt;/span&gt; &lt;span&gt;&quot;true&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;dapr.io/app-id:&lt;/span&gt; &lt;span&gt;&quot;nodeapp&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;dapr.io/app-port:&lt;/span&gt; &lt;span&gt;&quot;3000&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;containers:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;dapriosamples/hello-k8s-node:latest&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;containerPort:&lt;/span&gt; &lt;span&gt;3000&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;imagePullPolicy:&lt;/span&gt; &lt;span&gt;Always&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看一下 service:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl get svc&lt;br/&gt;NAME             TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                               AGE&lt;br/&gt;kubernetes       ClusterIP      10.96.0.1        &amp;lt;none&amp;gt;        443/TCP                               83m&lt;br/&gt;nodeapp          LoadBalancer   10.96.83.185     &amp;lt;pending&amp;gt;     80:31324/TCP                          49m&lt;br/&gt;nodeapp-dapr     ClusterIP      None             &amp;lt;none&amp;gt;        80/TCP,50001/TCP,50002/TCP,9090/TCP   49m&lt;br/&gt;redis-headless   ClusterIP      None             &amp;lt;none&amp;gt;        6379/TCP                              60m&lt;br/&gt;redis-master     ClusterIP      10.109.27.202    &amp;lt;none&amp;gt;        6379/TCP                              60m&lt;br/&gt;redis-slave      ClusterIP      10.103.201.158   &amp;lt;none&amp;gt;        6379/TCP                              60m&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动了一个 nodeap 的 service 和一个 nodeapp-dapr(就是 sidecar)的 service。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为是运行在 minikube 上，所以 nodeapp 的 service 没有 &lt;code&gt;EXTERNAL IP&lt;/code&gt;(显示为 pending)。看一下 pod:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl get pods&lt;br/&gt;NAME                       READY   STATUS    RESTARTS   AGE&lt;br/&gt;nodeapp-5d5dc88584-kqr2v   2/2     Running   0          13m&lt;br/&gt;redis-master-0             1/1     Running   0          142m&lt;br/&gt;redis-slave-0              1/1     Running   0          142m&lt;br/&gt;redis-slave-1              1/1     Running   0          141m&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看一下 nodeapp 的 log:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt; &lt;span&gt;kubectl&lt;/span&gt; &lt;span&gt;logs&lt;/span&gt; &lt;span&gt;nodeapp-5d5dc88584-kqr2v&lt;/span&gt; &lt;span&gt;-c&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Node&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;listening&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; &lt;span&gt;port&lt;/span&gt; &lt;span&gt;3000&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;br/&gt;&lt;span&gt;DAPR_HTTP_PORT:&lt;/span&gt; &lt;span&gt;3500&lt;/span&gt;&lt;br/&gt;&lt;span&gt;DAPR_GRPC_PORT:&lt;/span&gt; &lt;span&gt;50001&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面部署 python 的 APP:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl apply -f python.yaml&lt;br/&gt;deployment.apps/pythonapp created&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;python.yaml 的内容如下:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;apps/v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Deployment&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;pythonapp&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;python&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;replicas:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;selector:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;matchLabels:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;python&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;template:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;python&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;annotations:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;dapr.io/enabled:&lt;/span&gt; &lt;span&gt;&quot;true&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;dapr.io/app-id:&lt;/span&gt; &lt;span&gt;&quot;pythonapp&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;containers:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;python&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;dapriosamples/hello-k8s-python:latest&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看一下 pod 里多了什么:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl get pods&lt;br/&gt;NAME                       READY   STATUS    RESTARTS   AGE&lt;br/&gt;nodeapp-5d5dc88584-kqr2v   2/2     Running   0          16m&lt;br/&gt;pythonapp-fcb4f49b-n6ltf   2/2     Running   0          49s&lt;br/&gt;redis-master-0             1/1     Running   0          145m&lt;br/&gt;redis-slave-0              1/1     Running   0          145m&lt;br/&gt;redis-slave-1              1/1     Running   0          144m&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看一下 nodeapp 的 log:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl logs nodeapp-5d5dc88584-kqr2v -c node&lt;br/&gt;Node App listening on port 3000!&lt;br/&gt;DAPR_HTTP_PORT: 3500&lt;br/&gt;DAPR_GRPC_PORT: 50001&lt;br/&gt;Got a new order! Order ID: 5&lt;br/&gt;Successfully persisted state.&lt;br/&gt;Got a new order! Order ID: 6&lt;br/&gt;Successfully persisted state.&lt;br/&gt;Got a new order! Order ID: 7&lt;br/&gt;Successfully persisted state.&lt;br/&gt;Got a new order! Order ID: 8&lt;br/&gt;Successfully persisted state.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 kubernetes 的端口映射查看最新的 orderid:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl port-forward nodeapp-&lt;span&gt;5&lt;/span&gt;d5dc88584-kqr2v &lt;span&gt;8080&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把 pod 里的 nodeapp 的 http 端口 3000 映射到 localhost 的 8080。另开一个窗口，执行:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl http://localhost:8080/order&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ kubectl port-forward nodeapp-&lt;span&gt;5&lt;/span&gt;d5dc88584-kqr2v &lt;span&gt;8080&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;3500&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把 pod 里的 dapr sidecar 的 http 端口 3500 映射到 localhost 的 8080。另开一个窗口，执行:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl http://127.0.0.1:8080/v1.0/invoke/nodeapp/method/order/&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想在 redis 里查看最新的 orderid，执行下面的命令:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ &lt;span&gt;export&lt;/span&gt; REDIS_PASSWORD=$(kubectl get secret --namespace default redis -o jsonpath=&lt;span&gt;&quot;{.data.redis-password}&quot;&lt;/span&gt; | base64 --decode)&lt;br/&gt;$ kubectl run --namespace default redis-client --rm --tty -i --restart=&lt;span&gt;&#x27;Never&#x27;&lt;/span&gt; \&lt;br/&gt;     --env REDIS_PASSWORD=&lt;span&gt;$REDIS_PASSWORD&lt;/span&gt; \&lt;br/&gt;    --image docker.io/bitnami/redis:6.0.9-debian-10-r38 -- bash&lt;br/&gt;If you don&lt;span&gt;&#x27;t see a command prompt, try pressing enter.&lt;br/&gt;I have no name!@redis-client:/$ redis-cli -h redis-master -a $REDIS_PASSWORD&lt;br/&gt;Warning: Using a password with &#x27;&lt;/span&gt;-a&lt;span&gt;&#x27; or &#x27;&lt;/span&gt;-u&lt;span&gt;&#x27; option on the command line interface may not be safe.&lt;br/&gt;redis-master:6379&amp;gt; hgetall nodeapp||order&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原文链接：&lt;span&gt;https://www.cnblogs.com/thrillcattle/category/1906168.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Dapr首次发布: &lt;em&gt;https://cloudblogs.microsoft.com/opensource/2019/10/16/announcing-dapr-open-source-project-build-microservice-applications/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Dapr 官方网站: &lt;em&gt;https://dapr.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Actor Model: &lt;em&gt;https://zh.wikipedia.org/wiki/演员模型&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;How-To: Install Dapr CLI: &lt;em&gt;https://docs.dapr.io/getting-started/install-dapr-cli/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Install Docker Engine on Ubuntu: &lt;em&gt;https://docs.docker.com/engine/install/ubuntu/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;minikube官方文档: &lt;em&gt;https://minikube.sigs.k8s.io/docs/start/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;Hello World: &lt;em&gt;https://github.com/dapr/quickstarts/tree/v1.0.0-rc.2/hello-world&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;Hello Kubernetes: &lt;em&gt;https://github.com/dapr/quickstarts/tree/v1.0.0-rc.2/hello-kubernetes&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>