<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>d9f1939be6e8e4fae7a41a835c2312aa</guid>
<title>从一次 CPU 打满到 ReDos 攻击和防范</title>
<link>https://toutiao.io/k/rpzjoor</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：京东物流 刘海茂&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;近期碰到一起值班报警事件，web 应用服务器 CPU 消耗打到 99%，排查后发现是因为 ReDoS 导致了服务器发生了资源被耗尽、访问系统缓慢的问题，通过排查过程从而分享下 ReDos 攻击的原理、常见场景以及防范和解决方案，如果有错误欢迎指正。&lt;/p&gt;

&lt;h1&gt;背景&lt;/h1&gt;

&lt;p&gt;值班的时候突然报警，web 应用服务器 CPU 消耗打到 99%，同时现场反馈系统访问缓慢&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ba62d2fbe2042a2923716ad9c6bba12%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;登录泰山平台，查看 ump 监控发现系统消耗 CPU 消耗突然被打满&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/735e695d3a84457197cb8a3fdbe65136%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;通过 java 自带的 dump 工具，下载 jstock 文件，发现有大量相同任务线程在运行，具体的堆栈信息如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4c84d91e0034e01984cbea6586d7a59%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;仔细查看这些线程的执行代码，发现都调用了 UrlUtil.extractDomain 这个方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea42ce94889d44309623e08e4cd84086%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;根据堆栈信息查看业务代码，发现是 joybuy 登录拦截器用正则表达式匹配访问 url 解析主域的方法出现了阻塞，至此，可以判断是因为 ReDoS 导致了服务器发生了资源被耗尽、访问系统缓慢的问题，那么，什么是 ReDoS 呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4db5d6b33e1d4b32ab7e80ddaeabc274%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;ReDos 简介&lt;/h1&gt;

&lt;p&gt;ReDoS 攻击（正则表达式拒绝服务攻击 (Regular Expression Denial of Service)），攻击者可构造特殊的字符串，导致正则表达式运行会消耗大量的内存和 cpu 导致服务器资源被耗尽。无法继续响应，那为何不确定的正则表达式会导致 redos 攻击呢？这得从正则表达式的实现原理说起&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目前实现正则表达式引擎的方式有两种&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;DFA 自动机&lt;/strong&gt;（Deterministic Finite Automaton，确定有限状态自动机）&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;NFA 自动机&lt;/strong&gt;（Nondeterministic Finite Automaton，非确定有限状态自动机）&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;  DFA 自动机的构造代价远大于 NFA 自动机，但 DFA 自动机的执行效率高于 NFA 自动机&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;  假设一个字符串的长度为 n，如果采用 DFA 自动机作为正则表达式引擎，则匹配的时间复杂度为 O (n)&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;  如果采用 NFA 自动机作为正则表达式引擎，NFA 自动机在匹配过程中存在大量的分支和回溯，假设 NFA 的状态数为 s，&lt;/li&gt;
&lt;/ul&gt;







&lt;ul&gt;
&lt;li&gt;  NFA 自动机的优势是支持更多高级功能，但都是基于&lt;em&gt;子表达式独立进行匹配&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;  因此在编程语言里，使用的正则表达式库都是基于 NFA 自动机实现的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NFA 的特性：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一个有限的状态集合 S&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个输入符号集合 sigma，空字符 epsilon 不属于 Sigma&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态迁移函数 F，对于特定的输入字符和状态，输出对应的变更状态集合&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;4.s0 为初始状态&lt;/p&gt;

&lt;p&gt;5.S 子集为结束状态集&lt;/p&gt;

&lt;h1&gt;说明&lt;/h1&gt;

&lt;p&gt;定义一个正则表达式 ^(a+)+$ 来对字符串 aaaaX 匹配。使用 NFA 的正则引擎，必须经历 2^4=16 次尝试失败后才能否定这个匹配。&lt;/p&gt;

&lt;p&gt;同理字符串为 aaaaaaaaaaX 就要经历 2^10=1024 次尝试。如果我们继续增加 a 的个数为 20 个、30 个或者更多，那么这里的匹配会变成指数增长&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7c923b661db4a63822122b1878a882d%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;常见 ReDoS 场景&lt;/h1&gt;

&lt;p&gt;以 java 为例，有以下几种常见的 ReDoS 场景：&lt;/p&gt;

&lt;p&gt;1、使用 javax.validation.constraints.Pattern 验证入参是否合理的场景&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 客户备注
 * */
@ExcelProperty(index = 14)
@Length(min = 11 , max = 11, message = &quot;VAT号必须为11位&quot;)
@Pattern(regexp = &quot;^(GB)\d{9}&quot;, message = &quot;VAT号必须以GB开头，9位数字结尾&quot;)
private String vatNumber;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、使用 String.matches 进行业务数据验证的场景&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//发票日期格式yyyy-MM-dd
String regExp = &quot;^[1-9]\d{3}-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|3[0-1])$&quot;;
if (StringUtils.isNotBlank(outstockDto.getInvoiceDate()) &amp;amp;&amp;amp; !outstockDto.getInvoiceDate().matches(regExp)){
    totalMsg.add(new ErrorMsgDTO(ResultCodeEnum.OUTSTOCK_INVOICE_DATE_FORMAT_ERROR.getCode()));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3、使用 String.replaceAll 做参数替换的场景&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private String getParamName(String str) {
    if (PATTERN_START_END.matcher(str).matches()) {
        String newStr = str.replaceAll(&quot;#\{&quot;, &quot;&quot;).replaceAll(&quot;\}&quot;, &quot;&quot;);
        if (StringUtils.isEmpty(newStr)) {
            return &quot;&quot;;
        } else if (newStr.contains(&quot;.&quot;)) {
            return StringUtils.substringAfterLast(newStr, &quot;.&quot;);
        }
        return newStr;
    }
    return null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4、配置文件匹配参数的场景&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# joybuy登录主域
joybuy.login.domain = .*fop.joybuy.com$
# 欧美B账号登录主域
pulsar.login.domain = .*ifop.jd.com$
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;ReDoS 检测&lt;/h1&gt;

&lt;p&gt;1、RegexStaticAnalysis 工具&lt;/p&gt;

&lt;p&gt;测试方式如下：&lt;/p&gt;

&lt;p&gt;使用 maven package 打包后执行本地运行，输入需要测试的正则表达式&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c3774ebf4444acb9c646fa282406481%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、在线测试地址：&lt;a href=&quot;https://regex101.com/&quot;&gt;https://regex101.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;测试方式：&lt;/p&gt;

&lt;p&gt;直接在输入框输入正则表达式和需要测试的字符串，既可以看到对饮匹配的步数和结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baee7d8f1713400e9cb743b3962995a8%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在 dubugger 模式下可以查看匹配的详细过程和步数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3ed62f140814550a1cf4cc40e4770d5%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;防范手段&lt;/h1&gt;

&lt;p&gt;防范手段只是为了降低风险而不能百分百消除 ReDoS 这种威胁。当然为了避免这种威胁的最好手段是尽量减少正则在业务中的使用场景或者多做测试，增加服务器的性能监控等&lt;/p&gt;



















&lt;h1&gt;解决方法&lt;/h1&gt;

&lt;p&gt;了解了 ReDoS 的原理和防范，针对本次 CPU 的报警代码进行了优化，采用判断请求路径和分割字符串的方式获取访问的域，避免使用正则表达式导致的 ReDoS 问题&lt;/p&gt;

&lt;p&gt;实际修复代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static String extractDomain(String url) {
    if(StringUtils.isBlank(url)) {
        return &quot;&quot;;
    }
    int index = 0;
    if(url.startsWith(HTTP)) {
        index = HTTP.length();
    } else if(url.startsWith(HTTPS)) {
        index = HTTPS.length();
    } else {
        return &quot;&quot;;
    }
    String safeUrl = url.substring(index);
    index = safeUrl.indexOf(&#x27;/&#x27;);
    if(index &amp;gt; 0) {
        safeUrl = safeUrl.substring(0, index);
    }
    String[] array = safeUrl.split(&quot;\.&quot;);
    if(array.length &amp;lt; 2) {
        return &quot;&quot;;
    }
    String part1 = array[array.length - 2];
    String part2 = array[array.length - 1];


    if(StringUtils.isNotBlank(part1) &amp;amp;&amp;amp; StringUtils.isNotBlank(part2)) {
        if(!isIn(part2, DOMAINS)) {
            return &quot;&quot;;
        }
        return part1 + &#x27;.&#x27; + part2;
    }
    return &quot;&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a2073ad78ed7131542791ff95ba8a331</guid>
<title>Prometheus 服务发现原理</title>
<link>https://toutiao.io/k/chn0mxm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;服务发现&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;概述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1jtwUyicvG4OLMpB0y7ph2zt3ib7VVZl7AL2j1U56QrUC192algoGibtQzfrFCoY2kEdrYlnnn6oZtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图，Prometheus核心功能包括服务发现、数据采集和数据存储。服务发现模块专门负责发现需要监控的目标采集点(&lt;code&gt;target&lt;/code&gt;)信息，数据采集模块从服务发现模块订阅该信息，获取到&lt;code&gt;target&lt;/code&gt;信息后，其中就包含协议(&lt;code&gt;scheme&lt;/code&gt;)、主机地址:端口(&lt;code&gt;instance&lt;/code&gt;)、请求路径(&lt;code&gt;metrics_path&lt;/code&gt;)、请求参数(&lt;code&gt;params&lt;/code&gt;)等；然后数据采集模块就可以基于这些信息构建出一个完整的&lt;code&gt;Http Request&lt;/code&gt;请求，定时通过&lt;code&gt;pull http&lt;/code&gt;协议不断的去目标采集点(&lt;code&gt;target&lt;/code&gt;)拉取监控样本数据(&lt;code&gt;sample&lt;/code&gt;)；最后，将采集到监控样本数据交由&lt;code&gt;TSDB&lt;/code&gt;模块进行数据存储。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为什么需要服务发现模块？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似于微服务通过引入注册中心组件解决众多微服务间错综复杂的依赖调用。无论是服务主动停止，意外挂掉，还是因为流量增加对服务实现进行扩容，这些服务数据或状态上的动态变化，通过注册中心屏蔽服务状态变更造成的影响，简化了调用方处理逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同理，&lt;code&gt;Prometheus&lt;/code&gt;最开始设计是一个面向云原生应用程序的，云原生、容器场景下按需的资源使用方式对于监控系统而言就意味着没有了一个固定的监控目标，所有的监控对象(基础设施、应用、服务)都在动态的变化。&lt;code&gt;Prometheus&lt;/code&gt;解决方案就是引入一个中间的代理人，这个代理人掌握着当前所有监控目标的访问信息，&lt;code&gt;Prometheus&lt;/code&gt;只需要向这个代理人询问有哪些监控目标即可，这种模式被称为服务发现(&lt;code&gt;service discovery&lt;/code&gt;)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前，&lt;code&gt;Prometheus&lt;/code&gt;支持的服务发现协议是非常丰富的，最新版本(&lt;code&gt;2.41&lt;/code&gt;)已支持接近三十种服务发现协议：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;azure_sd_config&amp;gt;&lt;br/&gt;&amp;lt;consul_sd_config&amp;gt;&lt;br/&gt;&amp;lt;digitalocean_sd_config&amp;gt;&lt;br/&gt;&amp;lt;docker_sd_config&amp;gt;&lt;br/&gt;&amp;lt;dockerswarm_sd_config&amp;gt;&lt;br/&gt;&amp;lt;dns_sd_config&amp;gt;&lt;br/&gt;&amp;lt;ec2_sd_config&amp;gt;&lt;br/&gt;&amp;lt;openstack_sd_config&amp;gt;&lt;br/&gt;&amp;lt;ovhcloud_sd_config&amp;gt;&lt;br/&gt;&amp;lt;puppetdb_sd_config&amp;gt;&lt;br/&gt;&amp;lt;file_sd_config&amp;gt;&lt;br/&gt;&amp;lt;gce_sd_config&amp;gt;&lt;br/&gt;&amp;lt;hetzner_sd_config&amp;gt;&lt;br/&gt;&amp;lt;http_sd_config&amp;gt;&lt;br/&gt;&amp;lt;ionos_sd_config&amp;gt;&lt;br/&gt;&amp;lt;kubernetes_sd_config&amp;gt;&lt;br/&gt;&amp;lt;kuma_sd_config&amp;gt;&lt;br/&gt;&amp;lt;lightsail_sd_config&amp;gt;&lt;br/&gt;&amp;lt;linode_sd_config&amp;gt;&lt;br/&gt;&amp;lt;marathon_sd_config&amp;gt;&lt;br/&gt;&amp;lt;nerve_sd_config&amp;gt;&lt;br/&gt;&amp;lt;nomad_sd_config&amp;gt;&lt;br/&gt;&amp;lt;serverset_sd_config&amp;gt;&lt;br/&gt;&amp;lt;triton_sd_config&amp;gt;&lt;br/&gt;&amp;lt;eureka_sd_config&amp;gt;&lt;br/&gt;&amp;lt;scaleway_sd_config&amp;gt;&lt;br/&gt;&amp;lt;uyuni_sd_config&amp;gt;&lt;br/&gt;&amp;lt;vultr_sd_config&amp;gt;&lt;br/&gt;&amp;lt;static_config&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;服务发现配置解析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、&lt;code&gt;Prometheus&lt;/code&gt;服务启动加载&lt;code&gt;prometheus.yml&lt;/code&gt;配置文件会被解析&lt;code&gt;Config&lt;/code&gt;结构体：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.40078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1jtwUyicvG4OLMpB0y7ph2zeayNic0EVCq7M84xibicEmrmC5sMg125JuXwusl9H3KGsFkS7QibKib0oYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Config&lt;/code&gt;结构体是配置类的最顶层结构，内部包含6个字段分别对应&lt;code&gt;prometheus&lt;/code&gt;配置的6大组成部分。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、其中数据采集配置部分&lt;code&gt;ScrapeConfigs&lt;/code&gt;对应的是一个&lt;code&gt;*ScrapeConfig类型&lt;/code&gt;切片，一个&lt;code&gt;ScrapeConfig&lt;/code&gt;对应的是&lt;code&gt;scrape_configs&lt;/code&gt;配置下的一个&lt;code&gt;job&lt;/code&gt;抓取任务，服务发现协议配置对应其中&lt;code&gt;ServiceDiscoveryConfigs&lt;/code&gt;字段：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1jtwUyicvG4OLMpB0y7ph2z7IIZj4UGUZdQQbtUicOuKLcUGYOxdk89Niaqq5H5xUkljkjKMMrBdtKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、&lt;code&gt;discovery.Configs&lt;/code&gt;对应的是&lt;code&gt;Config&lt;/code&gt;切片：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Configs []Config&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，一个&lt;code&gt;job&lt;/code&gt;抓取任务下可以配置多个服务发现协议，如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;job_name:&lt;/span&gt; &lt;span&gt;&#x27;prometheus&#x27;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;metrics_path:&lt;/span&gt; &lt;span&gt;/metrics&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;static_configs:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;targets:&lt;/span&gt; &lt;span&gt;[&#x27;124.222.45.207:9090&#x27;]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;file_sd_configs:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;files:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;targets/t1.json&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;targets/t2.json&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;refresh_interval:&lt;/span&gt; &lt;span&gt;5m&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、&lt;code&gt;Config&lt;/code&gt;是一个接口：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2396109637488948&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1jtwUyicvG4OLMpB0y7ph2zkSwQXAHQYwrktvmOLZ4Or7DzibpJs7mrKHjWadHqhU2QofhAzYqgRVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1131&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Config&lt;/code&gt;是一个接口的定义，每种服务发现协议都会存在一个对应&lt;code&gt;Config&lt;/code&gt;接口的实现（见下图）。该接口主要定义两个方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;、Name() &lt;span&gt;string&lt;/span&gt;：定义服务发现协议类型，如eureka、kubernetes等等；&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;、NewDiscoverer(DiscovererOptions) (Discoverer, error)：返回一个Discoverer类型变量，该类型也是一个接口，其只定义了一个方法Run方法，即Discoverer是对应的服务发现协议具体运行逻辑封装，通过Run方法提供统一的运行入口。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.51796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1jtwUyicvG4OLMpB0y7ph2zT5SI7QHPmCyFJItHohmFAm5B1Libz1nb1ZAP8xT8COzMkmzoLOTUicibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;服务发现核心原理&lt;/span&gt;&lt;span/&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.63671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1jtwUyicvG4OLMpB0y7ph2z7cF3eBSTOfzNicRdLI78lz0PKtE75mJia4OleTDLNsBmsHRa2QribK4rA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Prometheus&lt;/code&gt;服务发现核心逻辑的入口主要关注&lt;code&gt;Manager&lt;/code&gt;结构体的&lt;code&gt;ApplyConfig&lt;/code&gt;方法：基于服务发现的配置使其生效；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;ApplyConfig&lt;/code&gt;方法包括四个主要步骤：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; provider &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; name   &lt;span&gt;string&lt;/span&gt;&lt;br/&gt; d      Discoverer&lt;br/&gt; subs   []&lt;span&gt;string&lt;/span&gt;&lt;br/&gt; config &lt;span&gt;interface&lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;一个job下一个服务发现协议对应一个Discoverer。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;provider&lt;/code&gt;还有额外三个字段：&lt;/p&gt;&lt;p&gt;1、&lt;code&gt;name&lt;/code&gt;：&lt;code&gt;provider&lt;/code&gt;名称，格式：&lt;code&gt;fmt.Sprintf(&quot;%s/%d&quot;, typ, len(m.providers))&lt;/code&gt;；&lt;/p&gt;&lt;p&gt;2、&lt;code&gt;subs&lt;/code&gt;：&lt;code&gt;string&lt;/code&gt;切片，存放&lt;code&gt;job&lt;/code&gt;名称，因为可能不同&lt;code&gt;job&lt;/code&gt;下存在一致的服务发现配置，就只会生成一个&lt;code&gt;provider&lt;/code&gt;，然后&lt;code&gt;subs&lt;/code&gt;存放&lt;code&gt;job&lt;/code&gt;列表；&lt;/p&gt;&lt;p&gt;3、&lt;code&gt;config&lt;/code&gt;：服务发现配置&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;启动&lt;code&gt;Discoverer&lt;/code&gt;接口&lt;code&gt;Run&lt;/code&gt;方法，让服务发现逻辑运行；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;协程中运行&lt;code&gt;updater&lt;/code&gt;方法；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Discoverer&lt;/code&gt;接口&lt;code&gt;Run&lt;/code&gt;方法主要基于具体服务发现协议发现&lt;code&gt;target&lt;/code&gt;，然后通过通道传递给&lt;code&gt;updater&lt;/code&gt;处理逻辑，将其解析处理放入到&lt;code&gt;Manager&lt;/code&gt;结构体中&lt;code&gt;targets&lt;/code&gt;字段中，并向&lt;code&gt;triggerSend&lt;/code&gt;通道发送信号，表示当前&lt;code&gt;targets&lt;/code&gt;发生变更；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Manager&lt;/code&gt;结构体&lt;code&gt;sender&lt;/code&gt;方法每5秒监听&lt;code&gt;triggerSend&lt;/code&gt;通道信号，并将&lt;code&gt;Manager&lt;/code&gt;结构体中&lt;code&gt;targets&lt;/code&gt;字段处理后放入到&lt;code&gt;syncCh&lt;/code&gt;通道中；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据采集模块(&lt;code&gt;scrape&lt;/code&gt;)监听&lt;code&gt;syncCh&lt;/code&gt;通道，就可以获取到服务发现生成的&lt;code&gt;targets&lt;/code&gt;信息，然后&lt;code&gt;reload&lt;/code&gt;将&lt;code&gt;target&lt;/code&gt;纳入监控开始抓取监控指标。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;启动&lt;code&gt;provider&lt;/code&gt;：遍历&lt;code&gt;Manager&lt;/code&gt;结构体中&lt;code&gt;providers&lt;/code&gt;切片，启动每个&lt;code&gt;provider&lt;/code&gt;，该步骤主要是启动两个协程：&lt;/p&gt;&lt;blockquote&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;&lt;code&gt;Manager&lt;/code&gt;结构体&lt;code&gt;sender&lt;/code&gt;方法是在&lt;code&gt;Prometheus&lt;/code&gt;启动时&lt;code&gt;discoveryManagerScrape.Run()&lt;/code&gt;方法中启动。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;取消服务发现：配置变更也会调用&lt;code&gt;ApplyConfig&lt;/code&gt;方法，这时就要把基于之前配置运行的服务发现服务取消，然后基于当前配置重新生成；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;清空：主要清空&lt;code&gt;discoverCancel&lt;/code&gt;、&lt;code&gt;targets&lt;/code&gt;和&lt;code&gt;providers&lt;/code&gt;几个容器元素，因为要基于当前配置重新生成；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注册&lt;code&gt;provider&lt;/code&gt;：&lt;code&gt;provider&lt;/code&gt;是对&lt;code&gt;Discoverer&lt;/code&gt;的封装，不同服务发现协议都会实现&lt;code&gt;Config&lt;/code&gt;接口，其中&lt;code&gt;NewDiscoverer&lt;/code&gt;方法就是创建&lt;code&gt;Discoverer&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「Prometheus服务发现核心就是三个协程之间协作：」&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「协程1：」&lt;/strong&gt;负责运行&lt;code&gt;Discoverer&lt;/code&gt;接口&lt;code&gt;Run&lt;/code&gt;方法，基于协议发现采集点；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「协程2：」&lt;/strong&gt;负责将协程1发现的采集点信息更新到&lt;code&gt;Manager&lt;/code&gt;结构体中&lt;code&gt;targets&lt;/code&gt;字段的&lt;code&gt;map&lt;/code&gt;中；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「协程3：」&lt;/strong&gt;负责将&lt;code&gt;Manager&lt;/code&gt;结构体中&lt;code&gt;targets&lt;/code&gt;字段的数据通过通道发送给&lt;code&gt;scrape&lt;/code&gt;模块；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;scrape模块获取到采集点如何进行数据采集后续scrape模块分析。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;监控指标&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Prometheus&lt;/code&gt;服务发现通用指标主要有如下5个，都定义在&lt;code&gt;discovery/manager.go&lt;/code&gt;中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;prometheus_sd_discovered_targets&lt;br/&gt;prometheus_sd_failed_configs&lt;br/&gt;prometheus_sd_received_updates_total&lt;br/&gt;prometheus_sd_updates_delayed_total&lt;br/&gt;prometheus_sd_updates_total&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「1、采集点数量指标」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务发现主要基于协议发现采集目标，&lt;code&gt;prometheus_sd_discovered_targets&lt;/code&gt;指标反馈各个&lt;code&gt;job&lt;/code&gt;发现的采集目标数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;prometheus_sd_discovered_targets：gauge类型，当前发现的目标数&lt;br/&gt;config:job名称&lt;br/&gt;name：取值scrape和notify，区分指标抓取服务发现还是告警通知服务发现&lt;br/&gt;示例：prometheus_sd_discovered_targets{config=&lt;span&gt;&quot;auth_es1&quot;&lt;/span&gt;, name=&lt;span&gt;&quot;scrape&quot;&lt;/span&gt;}  12&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这里基于协议发现的目标数，还未进入采集模块，并不能区分是在线还是离线。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「2、服务发现协议异常错误指标」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务发现会给每个发现配置项生成一个&lt;code&gt;provider&lt;/code&gt;，并为每个&lt;code&gt;provider&lt;/code&gt;使用协程运行，如果基于配置项生成&lt;code&gt;provider&lt;/code&gt;错误就可以通过&lt;code&gt;prometheus_sd_failed_configs&lt;/code&gt;指标反馈：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;prometheus_sd_failed_configs：gauge类型，当前无法加载的服务发现配置数&lt;br/&gt;配置数：一个job可能存在多个服务发现协议配置，对应配置项则是多个&lt;br/&gt;示例：&lt;br/&gt;prometheus_sd_failed_configs{name=&lt;span&gt;&quot;scrape&quot;&lt;/span&gt;}  10&lt;br/&gt;prometheus_sd_failed_configs{name=&lt;span&gt;&quot;notify&quot;&lt;/span&gt;} 5&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个&lt;code&gt;job&lt;/code&gt;可能对应多个服务发现配置项，如下：这个&lt;code&gt;job&lt;/code&gt;下配置了&lt;code&gt;static_configs&lt;/code&gt;和&lt;code&gt;file_sd_configs&lt;/code&gt;两个服务发现协议配置，则对应两个服务发现配置项，注册两个&lt;code&gt;provider&lt;/code&gt;，每个&lt;code&gt;provider&lt;/code&gt;在独立协程中运行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;scrape_configs:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# The job name is added as a label `job=` to any timeseries scraped from this config.&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;job_name:&lt;/span&gt; &lt;span&gt;&#x27;test&#x27;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;static_configs:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;targets:&lt;/span&gt; &lt;span&gt;[&#x27;localhost:9090&#x27;]&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;file_sd_configs:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;refresh_interval:&lt;/span&gt; &lt;span&gt;5m&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;files:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;targets/manual.*.json&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「3、协程交互指标」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务发现主要涉及3类协程：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Discoverer协程&lt;/code&gt;(多个)：封装&lt;code&gt;provider&lt;/code&gt;，基于协议发现采集点，这里可能会存在多个，一个&lt;code&gt;provider&lt;/code&gt;对应一个&lt;code&gt;Discoverer协程&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;updater协程&lt;/code&gt;(1个)：&lt;code&gt;Discoverer协程&lt;/code&gt;发现采集点，通过&lt;code&gt;channel通道&lt;/code&gt;通知到&lt;code&gt;updater协程&lt;/code&gt;，&lt;code&gt;updater协程&lt;/code&gt;将采集点更新到&lt;code&gt;Manager结构体&lt;/code&gt;中&lt;code&gt;targets字段&lt;/code&gt;中，然后向&lt;code&gt;Manager结构体&lt;/code&gt;中&lt;code&gt;triggerSend通道&lt;/code&gt;写入数据，告诉&lt;code&gt;sender&lt;/code&gt;协程&lt;code&gt;targets&lt;/code&gt;有更新；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;sender协程&lt;/code&gt;(1个)：&lt;code&gt;sender协程&lt;/code&gt;每5秒检测&lt;code&gt;triggerSend&lt;/code&gt;通道数据，检测到更新则将&lt;code&gt;Manager&lt;/code&gt;结构体&lt;code&gt;targets&lt;/code&gt;数据处理封装写入到&lt;code&gt;Manager&lt;/code&gt;结构体&lt;code&gt;syncCh&lt;/code&gt;通道中，&lt;code&gt;scrape&lt;/code&gt;模块监测该通道，即完成将&lt;code&gt;服务发现模块&lt;/code&gt;和&lt;code&gt;scrape模块&lt;/code&gt;交互。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这其中涉及三个指标：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;prometheus_sd_received_updates_total&lt;br/&gt;prometheus_sd_updates_delayed_total&lt;br/&gt;prometheus_sd_updates_total&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>114195ddd3f824377dc69b0bba53a96d</guid>
<title>Go 在信创这一块会输给 Java，想不通。。。</title>
<link>https://toutiao.io/k/zxonbvt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是投稿的网友草莓。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 语言已经开源 10+ 年，从高的关注度，再到云原生时代引爆学习 Go 的浪潮，再到现在的数年后。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其搜索热度和 TIOBE 排名基本维持如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7439165701042874&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jund4TOYhNBWo4zNT6Rt30zibzkR6cTDmFfc7TicMLZTgpX0MVUr9KNGBORrHClqfvfuDNBlzxicbmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1726&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最新的排名第是第 11 名。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以往我在网上常常看到大家讨论的 Go vs Java，大家基本都是从技术的角度分析，对比两者的各类成本、特性，孰强孰弱。技术角度上决定如何选型、语言的优劣势等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章会抛开单纯技术层面来看，直接讲重点内容（短文）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;企业的一些要求&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近几年接触各类国央企的业务多了后，在国内发现了一个影响 Go 语言发展的致命问题或现象。&lt;span&gt;好家伙，人家的预招标、招标书上，就会直接要求需要 Java 语言开发、要能够支持云原生环境等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原因一：信创，对于这类的替换原则（分级分类逐步推进应替尽替），将会导致这家企业非 Java 语言的投标可能不能入选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原因二：Java 群体过于庞大，很多有年代的企业系统早期建设、外包都采取了 Java 体系来开发。成熟、便宜、好招人等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看完你会想这就是非 Java 别来，咱们 Go 能不能行？怎么 Java 就没问题了？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;不能用 Go，因为 Google&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是用 Go 语言写的，尴尬的情况就会出现。如果甲方有明确要求，一旦你向甲方解释，并给出对应的语言清单。就会出现一个新的问题：Go 语言是？背景？归属？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或是去搜索。就会发现以下的情况：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2541766109785203&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jund4TOYhNBWo4zNT6Rt30QsWDoLAdR5QpBLnMC6ezEXUtib3iaDCSCmZpG7C6ibyQ3szpDw8JQuOyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1676&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;又或是：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6237424547283702&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jund4TOYhNBWo4zNT6Rt30cGb9pC4KMPISmaryhlCOfE5jLMgNnAicrwAIorhEUq6AndwkHGUxytw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会出现以下类似的言论：Go 语言是 Google 开发的，如果一旦 ZM 全面脱钩，GitHub 会被封，这门语言也很容易就会被禁止使用。&lt;span&gt;这将会使得 Go 语言在部分国央企私有化的招投标上，直接无法与 Java 系的其他供应商竞争。&lt;/span&gt;&lt;span&gt;Go 就被卡脖子了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尤其是现在行情不好时，&lt;span&gt;企业&lt;/span&gt;&lt;span&gt;本身也会受到较大的冲击。对此陷入沉思，抱有较大的挣扎，会思考要不要换。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;思考&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 语言的核心开发团队，大多仍在 Google。Google 为他们提供了工作、薪酬、资源。让这门语言在孵化、成长期不需要遇到太多的生存问题。短时间内，Go 语言不大可能自己开创基金会，因为已经有了金主爸爸。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而我们在国内的进一步应用中，很多会考虑到企业内部的国产化、自主可控、技术体系建设等问题。在 Go 语言试图和 Java 语言分蛋糕时，仍然是会处于相对劣势的一个大坑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;落到现实处，如果利润够大， 这些应用的 Go 开发整体都会被迫转成 Java 开发，届时，你跟不跟？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个值得深思的问题。&lt;span&gt;毕竟今天是 Java，明天可能就是 PHP、C#、C++...讲道理，为什么 Java 就符合要求了？&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;推荐阅读&lt;/h4&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关注和加煎鱼微信，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一手消息和知识，拉你进技术交流群&lt;span&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9988738738738738&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4jVkzHVvaqjo3O0BIqDRJKkEyib7SJsryxHBFGsvek0FkdiczfJP6AdbWnK25DvlX3dY8wRObPbVJQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07106598984771574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/486RHs1WbcgGib6o96dHbvGUGGwPicd8wusUGH1cXR29tM4bO0lNzialzkQhvU6m5ZUdaKibmcF2OQayjMe9Bia6iaXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是煎鱼，&lt;span&gt;出版过 Go 畅销书《Go 语言编程之旅》，再到获得 GOP（Go 领域最有观点专家）荣誉，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247483854&amp;amp;idx=1&amp;amp;sn=ec422fbf4d846975f2930ddeb5e81373&amp;amp;chksm=f9041493ce739d85a4b987eece14da627206cdad798f645cc770868312e4a22b6df24804f186&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的出书之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的出书之路&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;日常分享高质量文章，输出 Go 面试、工作经验、架构设计，&lt;span&gt;加微信拉读者交流群，和大家交流！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b2a02b4c06759ff9e32a6ae7b069363d</guid>
<title>用 Three.js 构建三维世界的房子</title>
<link>https://toutiao.io/k/tc75ecp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;文章篇幅会比较长，请耐心看完，但是一定会收货满满。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近在学习Three.js，无奈不知道从哪里下手，查阅大部分资料都是先介绍渲染器（Renderer）、场景（Scene）、照相机（Camera），其实这些概念确实需要了解，如果不给你立体模型，你始终是无法理解的。网上看了一个大佬（神说要有光）的教程，感觉算是一只脚已经入了门，接下来我们通过这篇文章，从造物主的视角开始创建一个房子。我们先看下最终效果。 &lt;/p&gt;&lt;section/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1 创造世界&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很好理解，就是我们现在看到的世界，用Three.js做出来。效果如下&lt;/p&gt;&lt;section/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;首先对Three.js还是要了解其一些概念的，这样才能看的更明白。新建一个项目，引入Three.js，网上不好js找没关系，我会在最后提供本篇文章的完整demo。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建场景&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;const&lt;/span&gt; scene = &lt;span&gt;new&lt;/span&gt; THREE.Scene();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建透视相机&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 获取窗口文档区域的宽度&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; width = &lt;span&gt;window&lt;/span&gt;.innerWidth;&lt;br/&gt;&lt;span&gt;// 获取窗口文档区域的高度&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; height = &lt;span&gt;window&lt;/span&gt;.innerHeight;&lt;br/&gt;&lt;span&gt;// 创建透视相机&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; camera = &lt;span&gt;new&lt;/span&gt; THREE.PerspectiveCamera(&lt;span&gt;45&lt;/span&gt;, &lt;span&gt;window&lt;/span&gt;.innerWidth / &lt;span&gt;window&lt;/span&gt;.innerHeight, &lt;span&gt;0.1&lt;/span&gt;, &lt;span&gt;10000&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;// 相机位置&lt;/span&gt;&lt;br/&gt;camera.position.set(&lt;span&gt;500&lt;/span&gt;, &lt;span&gt;60&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;// 相机焦点方向&lt;/span&gt;&lt;br/&gt;camera.lookAt(scene.position);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建渲染器&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 创建WebGL渲染&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; renderer = &lt;span&gt;new&lt;/span&gt; THREE.WebGLRenderer();&lt;br/&gt;&lt;span&gt;// 设置canvas的大小&lt;/span&gt;&lt;br/&gt;renderer.setSize(width, height);&lt;br/&gt;&lt;span&gt;//设置背景颜色&lt;/span&gt;&lt;br/&gt;renderer.setClearColor(&lt;span&gt;0xcce0ff&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;// 添加到body&lt;/span&gt;&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.body.appendChild(renderer.domElement);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;渲染相机和场景&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; renderer.render(scene, camera);&lt;br/&gt; requestAnimationFrame(render)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;场景贴图&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; urls = [&lt;br/&gt;     &lt;span&gt;&#x27;./img/skyBox6/posx.jpg&#x27;&lt;/span&gt;,&lt;br/&gt;     &lt;span&gt;&#x27;./img/skyBox6/negx.jpg&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;./img/skyBox6/posy.jpg&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;./img/skyBox6/negy.jpg&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;./img/skyBox6/posz.jpg&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;./img/skyBox6/negz.jpg&#x27;&lt;/span&gt;&lt;br/&gt;];&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; cubeTexture = &lt;span&gt;new&lt;/span&gt; THREE.CubeTextureLoader().load(urls);&lt;br/&gt;scene.background = cubeTexture;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终我们会看到上面的一个旋转的世界。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2 创建一个地面&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的步骤只是创建了全景的世界，但是我们需要有个地面来放置我们之后要创建的房子，因此，这个地面要比较大。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便，我们新建一个方法来创建，后面只需要调用这个方法即可&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createGrass&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// 创建一个平面缓冲几何体&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; geometry = &lt;span&gt;new&lt;/span&gt; THREE.PlaneGeometry(&lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;10000&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;// 加载草地图片&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; texture = &lt;span&gt;new&lt;/span&gt; THREE.TextureLoader().load(&lt;span&gt;&quot;img/grass.jpg&quot;&lt;/span&gt;);&lt;br/&gt;  texture.wrapS = THREE.RepeatWrapping;&lt;br/&gt;  texture.wrapT = THREE.RepeatWrapping;&lt;br/&gt;  &lt;span&gt;// 纹理对象阵列&lt;/span&gt;&lt;br/&gt;  texture.repeat.set(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;// 基础网格材质&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; grassMaterial = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;map&lt;/span&gt;: texture });&lt;br/&gt;  &lt;span&gt;// 网格&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; grass = &lt;span&gt;new&lt;/span&gt; THREE.Mesh(geometry, grassMaterial);&lt;br/&gt;  &lt;span&gt;// 旋转&lt;/span&gt;&lt;br/&gt;  grass.rotation.x = &lt;span&gt;-0.5&lt;/span&gt; * &lt;span&gt;Math&lt;/span&gt;.PI;&lt;br/&gt;  &lt;span&gt;// 添加到场景&lt;/span&gt;&lt;br/&gt;  scene.add(grass);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHQ1vC5lJjOIhILYicZdib4QAlfzPR39qeNKtZI80JdxUxlpJmKHcLg8paBV3r8icBl559LDwmf4rGSWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3 建房子&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先说说现实中如何新建房子&lt;br/&gt;1 选一个地方当作地基&lt;br/&gt;2 垒墙（墙面）&lt;br/&gt;3 封顶（房顶）&lt;br/&gt;其实用Threejs也是一样&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建地基（地板）&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 创建地板方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createFloor&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 创建一个平面缓冲几何体&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; geometry = &lt;span&gt;new&lt;/span&gt; THREE.PlaneGeometry(&lt;span&gt;200&lt;/span&gt;, &lt;span&gt;300&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 加载地板图片&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; texture = &lt;span&gt;new&lt;/span&gt; THREE.TextureLoader().load(&lt;span&gt;&#x27;img/wood.jpg&#x27;&lt;/span&gt;);&lt;br/&gt;    texture.wrapS = THREE.RepeatWrapping;&lt;br/&gt;    texture.wrapT = THREE.RepeatWrapping;&lt;br/&gt;    &lt;span&gt;// 纹理对象阵列&lt;/span&gt;&lt;br/&gt;    texture.repeat.set(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 基础网格材质&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; material = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;map&lt;/span&gt;: texture });&lt;br/&gt;    &lt;span&gt;// 网格&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; floor = &lt;span&gt;new&lt;/span&gt; THREE.Mesh(geometry, material);&lt;br/&gt;&lt;br/&gt;    floor.rotation.x = &lt;span&gt;-0.5&lt;/span&gt; * &lt;span&gt;Math&lt;/span&gt;.PI;&lt;br/&gt;    floor.position.y = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;    floor.position.z = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 地板添加到房间&lt;/span&gt;&lt;br/&gt;    house.add(floor);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHQ1vC5lJjOIhILYicZdib4QAldhVPe1TVnIXqQADDFdHbrXoVe1y1HknQggdEKzdveibDy8Fmvqic9hjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建侧墙&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 创建测墙方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createSideWall&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 创建形状&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; shape = &lt;span&gt;new&lt;/span&gt; THREE.Shape();&lt;br/&gt;    shape.moveTo(&lt;span&gt;-100&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;-100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;-100&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 挤压缓冲几何体&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; extrudeGeometry = &lt;span&gt;new&lt;/span&gt; THREE.ExtrudeGeometry(shape, {&lt;br/&gt;        &lt;span&gt;depth&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;// 加载墙面图片&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; texture = &lt;span&gt;new&lt;/span&gt; THREE.TextureLoader().load(&lt;span&gt;&#x27;./img/wall.jpg&#x27;&lt;/span&gt;);&lt;br/&gt;    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;&lt;br/&gt;    texture.repeat.set(&lt;span&gt;0.01&lt;/span&gt;, &lt;span&gt;0.005&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 基础网格材质&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; material = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;map&lt;/span&gt;: texture });&lt;br/&gt;    &lt;span&gt;// 网格&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; sideWall = &lt;span&gt;new&lt;/span&gt; THREE.Mesh(extrudeGeometry, material);&lt;br/&gt;    &lt;span&gt;// 增加墙面&lt;/span&gt;&lt;br/&gt;    house.add(sideWall);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; sideWall;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;侧墙有两个是一样的，只不过是位置（坐标）不一样，我们只需要挪下位置即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 创建侧墙&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; sideWall2 = createSideWall();&lt;br/&gt;&lt;span&gt;// 侧墙向z轴移动&lt;/span&gt;&lt;br/&gt;sideWall2.position.z = &lt;span&gt;295&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHQ1vC5lJjOIhILYicZdib4QAljnn4ZtS7OM21d1JdZf7f4ssNzXBNOJLrZIflmqaaJg5eiasSpFZj8ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建前面的墙&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为前面的墙上有门和窗户，因此我们单独创建&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 前面墙的方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createFrontWall&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 创建形状&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; shape = &lt;span&gt;new&lt;/span&gt; THREE.Shape();&lt;br/&gt;    shape.moveTo(&lt;span&gt;-150&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;150&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;150&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;-150&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;-150&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 创建窗户&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;window&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; THREE.Path();&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.moveTo(&lt;span&gt;30&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.lineTo(&lt;span&gt;80&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.lineTo(&lt;span&gt;80&lt;/span&gt;, &lt;span&gt;80&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.lineTo(&lt;span&gt;30&lt;/span&gt;, &lt;span&gt;80&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.lineTo(&lt;span&gt;30&lt;/span&gt;, &lt;span&gt;30&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 形状上的孔洞&lt;/span&gt;&lt;br/&gt;    shape.holes.push(&lt;span&gt;window&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 创建门&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; door = &lt;span&gt;new&lt;/span&gt; THREE.Path();&lt;br/&gt;    door.moveTo(&lt;span&gt;-30&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;    door.lineTo(&lt;span&gt;-30&lt;/span&gt;, &lt;span&gt;80&lt;/span&gt;)&lt;br/&gt;    door.lineTo(&lt;span&gt;-80&lt;/span&gt;, &lt;span&gt;80&lt;/span&gt;)&lt;br/&gt;    door.lineTo(&lt;span&gt;-80&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    door.lineTo(&lt;span&gt;-30&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 形状上的孔洞&lt;/span&gt;&lt;br/&gt;    shape.holes.push(door);&lt;br/&gt;    &lt;span&gt;// 挤压缓冲几何体&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; extrudeGeometry = &lt;span&gt;new&lt;/span&gt; THREE.ExtrudeGeometry(shape, {&lt;br/&gt;        &lt;span&gt;depth&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;    })&lt;br/&gt;    &lt;span&gt;// 贴图&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; texture = &lt;span&gt;new&lt;/span&gt; THREE.TextureLoader().load(&lt;span&gt;&#x27;./img/wall.jpg&#x27;&lt;/span&gt;);&lt;br/&gt;    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;&lt;br/&gt;    texture.repeat.set(&lt;span&gt;0.01&lt;/span&gt;, &lt;span&gt;0.005&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 基础网格材质&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; material = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;map&lt;/span&gt;: texture });&lt;br/&gt;    &lt;span&gt;// 网格&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; frontWall = &lt;span&gt;new&lt;/span&gt; THREE.Mesh(extrudeGeometry, material);&lt;br/&gt;&lt;br/&gt;    frontWall.position.z = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;    frontWall.position.x = &lt;span&gt;95&lt;/span&gt;;&lt;br/&gt;    frontWall.rotation.y = &lt;span&gt;Math&lt;/span&gt;.PI * &lt;span&gt;0.5&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 前墙添加到房间&lt;/span&gt;&lt;br/&gt;    house.add(frontWall);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHQ1vC5lJjOIhILYicZdib4QAlBXfdo4nF0wBmzcgvdd11ibibCNPtCdafwtJibzUQyMkIjLQ6Kc8xJUia0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样门和窗户就有了，我们还需要加点装饰&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 窗户修饰&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createWindow&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; shape = &lt;span&gt;new&lt;/span&gt; THREE.Shape();&lt;br/&gt;    shape.moveTo(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;)&lt;br/&gt;    shape.lineTo(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;)&lt;br/&gt;    shape.lineTo(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; hole = &lt;span&gt;new&lt;/span&gt; THREE.Path();&lt;br/&gt;    hole.moveTo(&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;)&lt;br/&gt;    hole.lineTo(&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;45&lt;/span&gt;)&lt;br/&gt;    hole.lineTo(&lt;span&gt;45&lt;/span&gt;, &lt;span&gt;45&lt;/span&gt;)&lt;br/&gt;    hole.lineTo(&lt;span&gt;45&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;    hole.lineTo(&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;    shape.holes.push(hole);&lt;br/&gt;    &lt;span&gt;// 挤压缓冲几何体&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; extrudeGeometry = &lt;span&gt;new&lt;/span&gt; THREE.ExtrudeGeometry(shape, {&lt;br/&gt;        &lt;span&gt;depth&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;// 基础网格材质&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; extrudeMaterial = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;color&lt;/span&gt;: &lt;span&gt;&#x27;silver&#x27;&lt;/span&gt; });&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;window&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; THREE.Mesh(extrudeGeometry, extrudeMaterial);&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.rotation.y = &lt;span&gt;Math&lt;/span&gt;.PI / &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.position.y = &lt;span&gt;30&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.position.x = &lt;span&gt;95&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.position.z = &lt;span&gt;120&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    house.add(&lt;span&gt;window&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;window&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 门修饰&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createDoor&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; shape = &lt;span&gt;new&lt;/span&gt; THREE.Shape();&lt;br/&gt;    shape.moveTo(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;80&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;80&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    shape.lineTo(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; hole = &lt;span&gt;new&lt;/span&gt; THREE.Path();&lt;br/&gt;    hole.moveTo(&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;    hole.lineTo(&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;75&lt;/span&gt;);&lt;br/&gt;    hole.lineTo(&lt;span&gt;45&lt;/span&gt;, &lt;span&gt;75&lt;/span&gt;);&lt;br/&gt;    hole.lineTo(&lt;span&gt;45&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;    hole.lineTo(&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;    shape.holes.push(hole);&lt;br/&gt;    &lt;span&gt;// 挤压缓冲几何体&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; extrudeGeometry = &lt;span&gt;new&lt;/span&gt; THREE.ExtrudeGeometry(shape, {&lt;br/&gt;        &lt;span&gt;depth&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;// 基础网格材质&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; material = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;color&lt;/span&gt;: &lt;span&gt;&#x27;silver&#x27;&lt;/span&gt; });&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; door = &lt;span&gt;new&lt;/span&gt; THREE.Mesh(extrudeGeometry, material);&lt;br/&gt;&lt;br/&gt;    door.rotation.y = &lt;span&gt;Math&lt;/span&gt;.PI / &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;    door.position.y = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    door.position.x = &lt;span&gt;95&lt;/span&gt;;&lt;br/&gt;    door.position.z = &lt;span&gt;230&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    house.add(door);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHQ1vC5lJjOIhILYicZdib4QAlsFVKU1o9eRGvUC6Tibmg30WmBTibNXYBGh25icEerySLe1GPxBuzlZB3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;创建后墙&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 创建后墙方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createBackWall&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 创建形状&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; shape = &lt;span&gt;new&lt;/span&gt; THREE.Shape();&lt;br/&gt;    shape.moveTo(&lt;span&gt;-150&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;    shape.lineTo(&lt;span&gt;150&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;    shape.lineTo(&lt;span&gt;150&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;)&lt;br/&gt;    shape.lineTo(&lt;span&gt;-150&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 挤压缓冲几何体&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; extrudeGeometry = &lt;span&gt;new&lt;/span&gt; THREE.ExtrudeGeometry(shape)&lt;br/&gt;    &lt;span&gt;// 贴图&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; texture = &lt;span&gt;new&lt;/span&gt; THREE.TextureLoader().load(&lt;span&gt;&#x27;./img/wall.jpg&#x27;&lt;/span&gt;);&lt;br/&gt;    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;&lt;br/&gt;    texture.repeat.set(&lt;span&gt;0.01&lt;/span&gt;, &lt;span&gt;0.005&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 基础网格材质&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; material = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;map&lt;/span&gt;: texture });&lt;br/&gt;    &lt;span&gt;// 网格&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; backWall = &lt;span&gt;new&lt;/span&gt; THREE.Mesh(extrudeGeometry, material);&lt;br/&gt;&lt;br/&gt;    backWall.position.z = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;    backWall.position.x = &lt;span&gt;-100&lt;/span&gt;;&lt;br/&gt;    backWall.rotation.y = &lt;span&gt;Math&lt;/span&gt;.PI * &lt;span&gt;0.5&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 后墙添加到房间中&lt;/span&gt;&lt;br/&gt;    house.add(backWall);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHQ1vC5lJjOIhILYicZdib4QAl95lhAt0XxVzle8UicbpwIJPhlHVguavibPkmXhcNgIlq4woHLQEQbjRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;屋顶&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 创建屋顶方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createRoof&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 立方缓冲几何体&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; geometry = &lt;span&gt;new&lt;/span&gt; THREE.BoxGeometry(&lt;span&gt;120&lt;/span&gt;, &lt;span&gt;320&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; texture = &lt;span&gt;new&lt;/span&gt; THREE.TextureLoader().load(&lt;span&gt;&#x27;./img/tile.jpg&#x27;&lt;/span&gt;);&lt;br/&gt;    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;&lt;br/&gt;    texture.repeat.set(&lt;span&gt;5&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;    texture.rotation = &lt;span&gt;Math&lt;/span&gt;.PI / &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 基础网格材质 - 瓦片&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; textureMaterial = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;map&lt;/span&gt;: texture });&lt;br/&gt;    &lt;span&gt;// 基础网格材质 - 其他&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; colorMaterial = &lt;span&gt;new&lt;/span&gt; THREE.MeshBasicMaterial({ &lt;span&gt;color&lt;/span&gt;: &lt;span&gt;&#x27;grey&#x27;&lt;/span&gt; });&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; materials = [&lt;br/&gt;        colorMaterial,&lt;br/&gt;        colorMaterial,&lt;br/&gt;        colorMaterial,&lt;br/&gt;        colorMaterial,&lt;br/&gt;        colorMaterial,&lt;br/&gt;        textureMaterial&lt;br/&gt;    ];&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; roof = &lt;span&gt;new&lt;/span&gt; THREE.Mesh(geometry, materials);&lt;br/&gt;&lt;br/&gt;    house.add(roof);&lt;br/&gt;&lt;br/&gt;    roof.rotation.x = &lt;span&gt;Math&lt;/span&gt;.PI / &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;    roof.rotation.y = - &lt;span&gt;Math&lt;/span&gt;.PI / &lt;span&gt;4&lt;/span&gt; * &lt;span&gt;0.6&lt;/span&gt;;&lt;br/&gt;    roof.position.y = &lt;span&gt;125&lt;/span&gt;;&lt;br/&gt;    roof.position.x = &lt;span&gt;50&lt;/span&gt;;&lt;br/&gt;    roof.position.z = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; roof;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHQ1vC5lJjOIhILYicZdib4QAl18MkU6l119ogvapsbT7YSDtMId8pTVtm6MKianWVyQR7O2Vq01eN74w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;屋顶也是有两个，只不过是空间上不一样，我们稍微调整下位置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; roof2 = createRoof();&lt;br/&gt;roof2.rotation.x = &lt;span&gt;Math&lt;/span&gt;.PI / &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;roof2.rotation.y = (&lt;span&gt;Math&lt;/span&gt;.PI / &lt;span&gt;4&lt;/span&gt;) * &lt;span&gt;0.6&lt;/span&gt;;&lt;br/&gt;roof2.position.y = &lt;span&gt;125&lt;/span&gt;;&lt;br/&gt;roof2.position.x = &lt;span&gt;-50&lt;/span&gt;;&lt;br/&gt;roof2.position.z = &lt;span&gt;150&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Ldv96ZtlFHQ1vC5lJjOIhILYicZdib4QAlZibFgEcUzuETrLZEyVBSw5byGFM7MDEkNHbpHu884lcD8BvRIm1aMMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;克隆&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个房子太单调，我们克隆几个&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// clone&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; house1 = house.clone();&lt;br/&gt;house1.position.set(&lt;span&gt;300&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;scene.add(house1);&lt;br/&gt;&lt;span&gt;// clone2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; house2 = house.clone();&lt;br/&gt;house2.position.set(&lt;span&gt;-300&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;scene.add(house2);&lt;br/&gt;&lt;span&gt;// clone3&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; house3 = house.clone();&lt;br/&gt;house3.position.set(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;-350&lt;/span&gt;);&lt;br/&gt;scene.add(house3);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// clone4&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; house4 = house.clone();&lt;br/&gt;house4.position.set(&lt;span&gt;300&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;-350&lt;/span&gt;);&lt;br/&gt;scene.add(house4);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// clone5&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; house5 = house.clone();&lt;br/&gt;house5.position.set(&lt;span&gt;-300&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;-350&lt;/span&gt;);&lt;br/&gt;scene.add(house5);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5ccc0b8ec884932b746171494770ae3b</guid>
<title>String 底层实现之 COW</title>
<link>https://toutiao.io/k/806gq63</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0MzI4OTI1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/p3sYCQXkuHhKgtwWvzaYZodgfpphdA6WWKEMXTn6ImCCCuEzlPKicNBcpzBUyjK1XicWwqIwusqLGpwyyOc87JPQ/0?wx_fmt=png&quot; data-nickname=&quot;高性能架构探索&quot; data-alias=&quot;gxnjgts&quot; data-signature=&quot;专注于分享干货，硬货，欢迎关注😄&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;你好，我是雨乐！&lt;/p&gt;&lt;p&gt;在开始正文之前，先看一段代码，如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;s&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;str&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; s1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const_cast&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;*&amp;gt;(&lt;/span&gt;&lt;span&gt;s1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;br/&gt;&lt;span&gt; p&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&#x27;\0&#x27;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;cout &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; s &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;endl&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;cout &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; s1 &lt;/span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span&gt; std&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;endl&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可能会有部分人认为上面代码的输出结果是：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;st&lt;/span&gt;&lt;br/&gt;&lt;span&gt;st&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也有部分人认为上述代码输出结果是:&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;str&lt;/span&gt;&lt;br/&gt;&lt;span&gt;st&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实，上述两种结果都是正确的，第一种正确的前提是基于gcc5.1之前的版本，第二种正确的前提是基于gcc5.1（包含）以后的版本。&lt;/p&gt;&lt;p&gt;而第一种之所以正确，这是基于std::string的另外一个特性：COW(Copy On Write)。&lt;/p&gt;&lt;h2&gt;COW&lt;/h2&gt;&lt;p&gt;COW是Copy On Write的缩写，是一种很常见且很重要的优化方式。核心思想是对多个实体的资源请求进行延时处理，如果不存在资源更改行为，则多个实体共享该块资源，直到有实体需要对资源进行修改时，才真正为该实体分配私有的资源。&lt;/p&gt;&lt;p&gt;COW技术的一个经典应用在于Linux内核在进程fork时对进程地址空间的处理。由于fork产生的子进程需要一份和父进程内容相同但完全独立的地址空间，一种做法是将父进程的地址空间完全复制一份，另一种做法是将父进程地址空间中的页面标记为&lt;strong&gt;共享的&lt;/strong&gt;（引用计数+1），使子进程与父进程共享地址空间，但当有一方需要对内存中某个页面进行修改时，重新分配一个新的页面（拷贝原内容），并使修改进程的虚拟地址重定向到新的页面上。&lt;/p&gt;&lt;p&gt;COW技术有哪些优点呢?&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 减少了分配（和复制）大量资源带来的瞬间延迟（注意仅仅是latency，但实际上该延迟被分摊到后续的操作中，其累积耗时很可能比一次统一处理的延迟要高，造成throughput下降是有可能的）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 另一方面减少不必要的资源分配。（例如在fork的例子中，并不是所有的页面都需要复制，比如父进程的代码段(.code)和只读数据(.rodata)段，由于不允许修改，根本就无需复制。而如果fork后面紧跟exec的话，之前的地址空间都会废弃，花大力气的分配和复制只是徒劳无功。）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;COW的思想在资源管理上被广泛使用，本文中分析的string中也用到了~~。&lt;/p&gt;&lt;h2&gt;实现&lt;/h2&gt;&lt;p&gt;为了分析COW在string中的实现机制，我们对上述代码进行分析。下面源码版本为4.6.0(在线地址为:&lt;span&gt;string源码&lt;/span&gt;)。&lt;/p&gt;&lt;p&gt;在上节内容中，我们提到一般实现COW的策略，都用了引用计数，std::string也不例外，使用如下结构：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Rep_base&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     size_type       _M_length&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     size_type       _M_capacity&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_Atomic_word&lt;/span&gt;&lt;span&gt;        _M_refcount&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Rep_base&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;// Types:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;typedef&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt; rebind&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;other &lt;/span&gt;&lt;span&gt;_Raw_bytes_alloc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_is_leaked&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_is_shared&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_set_leaked&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_set_sharable&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_set_length_and_sharable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;size_type __n&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;ifndef&lt;/span&gt;&lt;/span&gt;&lt;span&gt; _GLIBCXX_FULLY_DYNAMIC_STRING&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__builtin_expect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;_S_empty_rep&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_set_sharable&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;// One reference.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_length &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; __n&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           traits_type&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;assign&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refdata&lt;/span&gt;&lt;span&gt;()[&lt;/span&gt;&lt;span&gt;__n&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt; _S_terminal&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;// grrr. (per 21.3.4)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;// You cannot leave those LWG people alone for a second.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_refdata&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;reinterpret_cast&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&amp;gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_grab&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __alloc1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __alloc2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(!&lt;/span&gt;&lt;span&gt;_M_is_leaked&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; __alloc1 &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; __alloc2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;               &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; _M_refcopy&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; _M_clone&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__alloc1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;// Create &amp;amp; Destroy&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _S_create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;size_type&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; size_type&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_dispose&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;ifndef&lt;/span&gt;&lt;/span&gt;&lt;span&gt; _GLIBCXX_FULLY_DYNAMIC_STRING&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__builtin_expect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;_S_empty_rep&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;// Be race-detector-friendly.  For more info see bits/c++config.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__gnu_cxx&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;__exchange_and_add_dispatch&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                              &lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           _M_destroy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__a&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;// XXX MT&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_destroy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_refcopy&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;ifndef&lt;/span&gt;&lt;/span&gt;&lt;span&gt; _GLIBCXX_FULLY_DYNAMIC_STRING&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__builtin_expect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;_S_empty_rep&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;             __gnu_cxx&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;__atomic_add_dispatch&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _M_refdata&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;// XXX MT&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_clone&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;,&lt;/span&gt;&lt;span&gt; size_type __res &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述结构中，有一个变量&lt;code&gt;_M_refcount&lt;/code&gt;，用来记录当前引用该string的对象个数。在string的COW实现中，当新建一个string或者为其分配内存时，会额外创建一个_Rep_base对象用来存放引用对象的个数，当发生拷贝或者赋值的时候，这个引用计数就会+1。而在内容修改时，string类为查看这个引用计数是否为0，如果不为零，表示有人在共享这块内存，那么自己需要先做一份拷贝，然后把引用计数-1，再把数据拷贝过来。_Rep的各种成员函数，则是用来对引用计数进行操作。&lt;/p&gt;&lt;h3&gt;构造函数&lt;/h3&gt;&lt;p&gt;在代码&lt;code&gt;std::string s(&quot;str&quot;);&lt;/code&gt;构建一个string对象，我们看下其具体实现，代码如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     basic_string&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;::&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;basic_string&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; _M_dataplus&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_S_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; __s &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; traits_type&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;length&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__s&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                    __s &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; npos&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在该实现中，调用了_M_dataplus()函数，其实际上是某个对象的构造函数，有两个参数，一个为_S_construct生成的char*指针，另一个则为分配器。&lt;/p&gt;&lt;p&gt;_M_dataplus的定义如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __dat&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__a&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; _M_p&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__dat&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; _M_p&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;// The actual data.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span&gt;mutable&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt;  _M_dataplus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;_M_dataplus中有个成员变量_M_p指向实际的字符串地址，而该地址是由_S_construct生成，代码如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_InIterator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       basic_string&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;::&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       _S_construct&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_InIterator&lt;/span&gt;&lt;span&gt; __beg&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_InIterator&lt;/span&gt;&lt;span&gt; __end&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            input_iterator_tag&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;ifndef&lt;/span&gt;&lt;/span&gt;&lt;span&gt; _GLIBCXX_FULLY_DYNAMIC_STRING&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__beg &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; __end &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; __a &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _S_empty_rep&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;_M_refdata&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;// Avoid reallocation for common case.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt; __buf&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     size_type __len &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__beg &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; __end &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; __len &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__buf&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         __buf&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;__len&lt;/span&gt;&lt;span&gt;++]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;__beg&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;__beg&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __r &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;_S_create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__len&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;size_type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;// 创建Rep*对象，即包含有引用计数的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_copy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__r&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refdata&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; __buf&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __len&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     __try&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__beg &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; __end&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__len &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; __r&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_capacity&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;             &lt;/span&gt;&lt;span&gt;// Allocate more space.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;             &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __another &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;_S_create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__len &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __len&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;             _M_copy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__another&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refdata&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; __r&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refdata&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; __len&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;             __r&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_destroy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__a&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;             __r &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; __another&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         __r&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refdata&lt;/span&gt;&lt;span&gt;()[&lt;/span&gt;&lt;span&gt;__len&lt;/span&gt;&lt;span&gt;++]&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;__beg&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;__beg&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     __catch&lt;/span&gt;&lt;span&gt;(...)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         __r&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_destroy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__a&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;         __throw_exception_again&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     __r&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_set_length_and_sharable&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__len&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __r&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refdata&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码还是比较简单易理解的，无非就是将字符串拷贝到内存，生成COW所需要的对象~~&lt;/p&gt;&lt;p&gt;这块需要注意的是，在string定义中，&lt;strong&gt;并没有一个单独的_Rep对象，即并没有为了实现COW的引用计数功能而单独定义一个对象&lt;/strong&gt;，而是&lt;strong&gt;为了节省内存，该_Rep对象均是通过指针偏移来实现&lt;/strong&gt;。在前面内容中，有提到，_M_dataplus._M_p用来指向真正的存储数据的地址。&lt;/p&gt;&lt;p&gt;下面是string的数据成员：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;basic_string&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// **********&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; size_type    npos &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static_cast&lt;/span&gt;&lt;span&gt;&amp;lt;size_type&amp;gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;mutable&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt;  _M_dataplus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面继续分析_S_construct代码，在该函数中，比较重要的一行&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __r &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;_S_create&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__len&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;size_type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该行中主要负责分配内存，由分配器__a进行分配（string中的分配方式与vector类似，都采用了预分配方式，以提升性能），其如图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6265060240963856&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p3sYCQXkuHj2uv1XkUtr9JZnbicsiaagOzBxViasF6VPiciacKEr9icaicFb1klxOicZDWBia9ZQDia9yG9QWObOGzJwj9vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;/p&gt;&lt;p&gt;这块设计非常巧妙，在_Rep::_S_create源码实现中，通过分配器分配一块内存，然后通过&lt;code&gt;placement new&lt;/code&gt;构建_Rep对象，如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __place &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Raw_bytes_alloc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__alloc&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;allocate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__size&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;__p &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__place&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       __p&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_capacity &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; __capacity&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么有个疑问，string如何获取到存储实际数据的指针，以及又如何对引用计数进行操作的呢？&lt;/p&gt;&lt;p&gt;相信我们经常都会用到string::c_str()操作，这个函数的作用就是返回实际的存储数据的地址，实现如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;&lt;span&gt;c_str&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _M_data&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       _M_data&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  _M_dataplus&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;_M_p&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过如上代码，进一步证明_M_dataplus._M_p指向实际存储数据的地址。而_M_p则是在构造函数_M_dataplus（）中由_S_construct()生成，在_S_construct函数的最后一行为&lt;code&gt;return __r-&amp;gt;_M_refdata();&lt;/code&gt;，其返回的是实际存储数据地址，但__r类型为_Rep，又是如何返回的呢，不妨看下函数实现：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_refdata&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;reinterpret_cast&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&amp;gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结合上图，通过this + 1，移动指针，自然就到了可存储数据部分。那么string又是如何进行引用计数操作的呢？通过_M_dataplus._M_p指针反向操作，自然可以得到_Rep对象。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       _M_rep&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;((&lt;/span&gt;&lt;span&gt;reinterpret_cast&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;_Rep&lt;/span&gt;&lt;span&gt;*&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_M_data&lt;/span&gt;&lt;span&gt;()))[&lt;/span&gt;&lt;span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;拷贝构造&lt;/h3&gt;&lt;p&gt;在本文例子中，同样一块代码，在不同版本中的运行结果不一致，其根源就在于&lt;code&gt;std::string s1 = s;&lt;/code&gt;，这句代码调用了拷贝构造函数，所以，不妨从其构造函数入手，来研究其实现😁。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;typename&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     basic_string&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Traits&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;gt;::&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;basic_string&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; basic_string&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __str&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; _M_dataplus&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__str&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;_M_rep&lt;/span&gt;&lt;span&gt;()-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_grab&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__str&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get_allocator&lt;/span&gt;&lt;span&gt;()),&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                       __str&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get_allocator&lt;/span&gt;&lt;span&gt;()),&lt;/span&gt;&lt;br/&gt;&lt;span&gt;           __str&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get_allocator&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显然，该函数实现简单，只调用了&lt;code&gt;_M_dataplus&lt;/code&gt;函数，其定义如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; __dat&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__a&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; _M_p&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__dat&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; _M_p&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;// The actual data.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;mutable&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc_hider&lt;/span&gt;&lt;span&gt;  _M_dataplus&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过上述定义，可以看出，&lt;code&gt;_M_dataplus&lt;/code&gt;是一个对象，在其构造函数中有两个参数，一个为char&lt;span&gt;类型的实际数据，另外一个为分配器(分配器不在本文讨论范围内)，所以重点就在于char&lt;/span&gt;数据了，通过函数调用发现，char&lt;span&gt;是通过&lt;/span&gt;*_M_grab**来获取的。也就是说，&lt;code&gt;string的拷贝构造函数仅仅对_M_dataplus对象进行构造，看来重点在```__str._M_rep()-&amp;gt;_M_grab&lt;/code&gt;这块了，源码如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_grab&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __alloc1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;_Alloc&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt; __alloc2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(!&lt;/span&gt;&lt;span&gt;_M_is_leaked&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; __alloc1 &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; __alloc2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;               &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; _M_refcopy&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; _M_clone&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__alloc1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在_M_grab函数中，如果字符串可共享，进行引用拷贝(即引用计数+1，返回源数据地址)，否则进行深度拷贝。那么判断字符串共享的条件是什么？显然**!M_is_leaked() &amp;amp;&amp;amp; __alloc1 == __alloc2**，正常情况下，字符串都可被共享(使用不同分配器这种情况忽略哈)，只有个别情况下不可共享，比如这个字符串正在被写入时就不可被共享(比如调用了insert函数等)。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;引用拷贝&lt;/strong&gt;是通过_M_refcopy()函数来实现的，其定义如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;_CharT&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     _M_refcopy&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;ifndef&lt;/span&gt;&lt;/span&gt;&lt;span&gt; _GLIBCXX_FULLY_DYNAMIC_STRING&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;__builtin_expect&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;_S_empty_rep&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;             __gnu_cxx&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;__atomic_add_dispatch&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;_M_refcount&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _M_refdata&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;// XXX MT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在引用拷贝的方法实现_M_refcopy中，对字符串的引用计数+1，然后直接返回源字符串的字符串地址。&lt;/p&gt;&lt;p&gt;必须说明的该函数只有在basic_string的copy ctor和assignment中才可能被调用，也就是说只有在新的字符串按copy或者赋值创建的时候才考虑使用引用计数。进行refcopy或者clone的关键标识是：首先没有内存泄漏标志（关于这个标志主要是禁止string再次被共享），然后就是两个string对象的分配相同。&lt;/p&gt;&lt;h2&gt;结语&lt;/h2&gt;&lt;p&gt;COW的核心思想就是&lt;strong&gt;lazy-copy&lt;/strong&gt;，是一种常见的优化手段，通常发生在拷贝、赋值等操作上，但是如果使用不当，则会导致预期之外的结果，虽然COW在gcc的高版本实现中已经去掉了，但是，因为种种原因，仍然有许多开发人员使用的老版本gcc，那么这个优化导致的问题就不得不引起关注，正所谓&lt;code&gt;知己知彼，方能百战不殆&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;好了，今天的文章就到这，我们下期见！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果对本文有疑问可以加笔者&lt;span&gt;&lt;strong&gt;微信&lt;/strong&gt;&lt;/span&gt;直接交流，笔者也建了C/C++相关的技术群，有兴趣的可以联系笔者加群。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p3sYCQXkuHiaA3xxTGkIcH0JjQo83fJ8JZPMOM7IrSb3r6zGUQGsP6fMsBhGXeoMw43aL9OEACnPAHdSKmuDljQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90215&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot; data-width=&quot;100%&quot;&gt;&lt;strong&gt;往期&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;精彩&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;回顾&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-bdless=&quot;spin&quot; data-bdlessp=&quot;280&quot; data-bdopacity=&quot;50%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247489003&amp;amp;idx=1&amp;amp;sn=14d7cdd4bdca41cc260763328649c8b4&amp;amp;chksm=c337732cf440fa3a5ee529957c7ac81680ff5d4d3ecf38865af13dcf3b3e96b68fbd9a6719e4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C语言不支持重载，多种main()如何实现的呢？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;C语言不支持重载，多种main()如何实现的呢？&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488842&amp;amp;idx=1&amp;amp;sn=d39efe4a60dfc2a2146bbdfa37442e71&amp;amp;chksm=c337738df440fa9bd4000d097c76ef530b13f0d4c53ee45a03a0a033ea57b7b0b3f436af1e4a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;惯用法之CRTP&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;惯用法之CRTP&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488826&amp;amp;idx=1&amp;amp;sn=5ec3f6e6959b51de02b850aeee609f34&amp;amp;chksm=c33773fdf440faebd97a0184c3e30ce77b3ce306d7d6dea9967ece6bef41e9f6d9d9030b2a62&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;聊聊内存模型与内存序&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;聊聊内存模型与内存序&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488441&amp;amp;idx=1&amp;amp;sn=f75be00bcd12934c2e7331956707a429&amp;amp;chksm=c337757ef440fc6816fdef3c144361a0e21ebe24da6ea497d8122ca04c81c7dcc40445ae3f1a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;vector初始化与否导致的巨大性能差异&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;vector初始化与否导致的巨大性能差异&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488372&amp;amp;idx=1&amp;amp;sn=f3acc2893cbafc99c21203f4db0e24ee&amp;amp;chksm=c33775b3f440fca5410edde4ce29f1cbeec7c1734357e54c02bbe549ed3f435a4243f7e8d297&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;问题解决了，我却不知道原因&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;问题解决了，我却不知道原因&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488290&amp;amp;idx=1&amp;amp;sn=c4d2416b3ee3968303379a8cef66105d&amp;amp;chksm=c33775e5f440fcf30a3a8bef429eb199577f71a15d688ddf729ed1edbb94d119d58c470195f1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;揭开lambda的神秘面纱&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;揭开lambda的神秘面纱&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488149&amp;amp;idx=1&amp;amp;sn=4b7718a8798245b3a50e1fc9aebf5dee&amp;amp;chksm=c3377452f440fd44d13a4a99d3e16a2d06de0539b9f8365b7346de9c8037ea91b59f46df934f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;多态实现-虚函数、函数指针以及变体&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;多态实现-虚函数、函数指针以及变体&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247488000&amp;amp;idx=1&amp;amp;sn=156cad69e290f1e898cded46cd4cedc9&amp;amp;chksm=c33774c7f440fdd1e7db21f175029adcf622fe53f1968bb8acefa027bf95f01d5e2c2bb3d7a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【Modern C++】深入理解移动语义&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;【Modern C++】深入理解移动语义&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247487751&amp;amp;idx=1&amp;amp;sn=3da21227cb1a4c80e36f91dc823529af&amp;amp;chksm=c33777c0f440fed6f9ebaa7f206f1e423f68c09a809a4d30033f34bd123ccf45d9e42655e199&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【Modern C++】深入理解左值、右值&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;【Modern C++】深入理解左值、右值&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247487474&amp;amp;idx=1&amp;amp;sn=e29d0178bfd4139313c44139e1cb3899&amp;amp;chksm=c3376935f440e023b96e9f8feeb34e4e22fbb74f00ca345a2b867edfd4c088bc595821fe878e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;智能指针-使用、避坑和实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;智能指针-使用、避坑和实现&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247487009&amp;amp;idx=1&amp;amp;sn=a812d27b9d65369ce2f38375b4a4ee96&amp;amp;chksm=c33768e6f440e1f015252fecf354f9f3712f59fc04b47b03401486c86fe51875428503ee9819&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;内存泄漏-原因、避免以及定位&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;内存泄漏-原因、避免以及定位&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247486816&amp;amp;idx=1&amp;amp;sn=a6dfc1361ce15ce5ad1c7d7734f9c939&amp;amp;chksm=c3376ba7f440e2b18267c303c35572ab089fb97d3b2fe0adb58009637d6631020bb52bd9a28c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;GDB调试-从入门实践到原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;GDB调试-从入门实践到原理&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247486357&amp;amp;idx=1&amp;amp;sn=3e7b88218f4416980b20add7575baa9a&amp;amp;chksm=c3376d52f440e444d28a01ef930ddfb92b5d30f26e7284012f08624ca1599e7efac1da3fb17c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【线上问题】P1级公司故障，年终奖不保&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;【线上问题】P1级公司故障，年终奖不保&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247486254&amp;amp;idx=1&amp;amp;sn=ebce58aa6b547af2a818faa5a6412e89&amp;amp;chksm=c3376de9f440e4ffea267926b7ce09ac439ab33a1da9dc6b4d631c971053f628cf91202d0f53&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【性能优化】高效内存池的设计与实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;【性能优化】高效内存池的设计与实现&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzk0MzI4OTI1Ng==&amp;amp;mid=2247485953&amp;amp;idx=1&amp;amp;sn=f8cd484607ab07f15247ecde773d2e1c&amp;amp;chksm=c3376cc6f440e5d047f7e648c951fd583df82ab4e3dab5767baeddef9fe7c1270f05b039d8c4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2万字|30张图带你领略glibc内存管理精髓&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;2万字|30张图带你领略glibc内存管理精髓&lt;/a&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是雨乐，从业十二年有余，历经过传统行业网络研发、互联网推荐引擎研发，目前在广告行业从业8年。目前任职某互联网公司高级技术专家一职，负责广告引擎的架构和研发。&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本公众号专注于架构、技术、线上bug分析等干货，欢迎关注。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0MzI4OTI1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/p3sYCQXkuHhKgtwWvzaYZodgfpphdA6WWKEMXTn6ImCCCuEzlPKicNBcpzBUyjK1XicWwqIwusqLGpwyyOc87JPQ/0?wx_fmt=png&quot; data-nickname=&quot;高性能架构探索&quot; data-alias=&quot;gxnjgts&quot; data-signature=&quot;专注于分享干货，硬货，欢迎关注😄&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>