<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a5e8822a3cc3f15ee5d549b5eacfcb1b</guid>
<title>软件架构生态化-多角色交付的探索实践</title>
<link>https://toutiao.io/k/zfspec2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：京东零售 李春丽&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为一个技术架构师，不仅仅要紧跟行业技术趋势，还要结合研发团队现状及痛点，探索新的交付方案。在日常中，你是否遇到如下问题 “ 业务需求排期长研发是瓶颈；非研发角色感受不到研发技改提效的变化；引入ISV 团队又担心质量和安全，培训周期长“等等，基于此我们探索了一种新的技术体系及交付方案来解决如上问题。&lt;/p&gt;

&lt;h1&gt;背景&lt;/h1&gt;

&lt;p&gt;嗨，大家都知道软件研发需要许多角色共同协作，包括客户、产品经理、研发工程师、测试人员、实施运营团队等等。在这众多角色中，研发工程师的人数占比最高，但是研发资源毕竟有限，随着需求量不断增加，在项目中还会听到如下吐槽：&lt;/p&gt;

&lt;p&gt;1、研发团队排期瓶颈，非研发角色感受不到研发技改提效的变化。&lt;/p&gt;

&lt;p&gt;2、引入ISV 团队又担心质量和安全问题，而且培训成本高、周期长，在核心复杂系统中，不敢也无法短时间大规模引入。&lt;/p&gt;

&lt;p&gt;不过，如果有一种方法能够实现生态化交付和全民开发的愿景，那就可以解决上述问题了！这种方法可以让所有角色，无论是技术还是非技术的，以安全、更简单的方式参与进来。&lt;/p&gt;

&lt;p&gt;这样一来，就可以在不增加团队人数的情况下，提高团队的吞吐量，实现更高效的需求交付，是不是很奇妙呢？&lt;/p&gt;

&lt;h1&gt;挑战&lt;/h1&gt;

&lt;p&gt;为了达到生态化交付和全民开发的愿景，我们需要解决如下几个问题？&lt;/p&gt;

&lt;p&gt;1、如何让非技术角色实现研发的交付？&lt;/p&gt;

&lt;p&gt;2、如何让全民开发者完整实现一个需求闭环，而非仅仅实现其中一部分需求？&lt;/p&gt;

&lt;p&gt;3、如何解决交付中核心系统安全问题？&lt;/p&gt;

&lt;p&gt;我们带这几个问题看下解决方案。在讲技术方案之前，我们先站在客户角度，从整体看一下，一个系统的需求都来自哪里？而我们都知道比起从0-1新做一个系统，二次扩展类需求更加复杂，我们今天就以二次扩展类需求入手和大家一起分享下，在京东智能供应链Y做的一些实践。&lt;/p&gt;

&lt;h1&gt;方案&lt;/h1&gt;

&lt;h2&gt;&lt;strong&gt;设计思路&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-c96e8a2793afff76acfd7812e81605fd801.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如上图就是任意一个系统中二次扩展类需求分类的最大集合，主要有8类：API类、参数类、模版类，界面类、流程类、规则类及数据库类。&lt;/p&gt;

&lt;p&gt;1、API类：主要是新增API和在原有API的扩展，例如，原有API上新增一些属性。&lt;/p&gt;

&lt;p&gt;2、模版类：主要是新增一个模版。例如，制作一类新的合同模版或问卷调研，各部门填报填写。&lt;/p&gt;

&lt;p&gt;3、参数类：主要是新增KV类的参数。例如，新增“是否包括自营商品“参数，并让这些参数在某些逻辑中起到作用。&lt;/p&gt;

&lt;p&gt;4、UI类：主要是新增菜单、按钮、布局、图表、校验规则等。例如新增一个外呼按钮，并调用外呼系统 接口。&lt;/p&gt;

&lt;p&gt;5、流程类：在原有流程节点中新增新的节点。&lt;/p&gt;

&lt;p&gt;6、规则类：在原有的规则前、后等，新增新的规则。&lt;/p&gt;

&lt;p&gt;7、数据库类：在原有表中增加新的属性，或者新增一个子表。&lt;/p&gt;

&lt;p&gt;8、最后还有一类其他：无法划分为某一类，需要复杂的逻辑处理实现。例如 数据重新聚合与逻辑运算&lt;/p&gt;

&lt;p&gt;我们就基于这些研发的需求类型，设计一套技术体系，实现生态化交付和全民开发的愿景。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;技术方案&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5a92c1cb103ef2f7a40bb291b08a025db2e.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们把软件系统分成三层，建立完整的全链路扩展技术体系，在把这些能力通过零低代码手段把他们进行打通、包装和开放，就可以实现屏蔽源代码的情况下，对系统进行安全、简单、闭环的二次增强，进而达到全民开发的目标。具体包括：&lt;/p&gt;

&lt;p&gt;1、界面层：该层扩展主要手段就是零低代码技术。&lt;/p&gt;

&lt;p&gt;2、接口层：该层扩展主要手段就是依靠不同模型之前的映射来解决，而模型的扩展就可以依靠对象扩展来解决。&lt;/p&gt;

&lt;p&gt;3、服务层：该层扩展主要依靠流程、规则引擎来实现，这个业界有很多开源工具，例如activity和drools等。另外还有很多场景是复杂的逻辑变更，这个可以依靠插件、事件驱动模式来实现。&lt;/p&gt;

&lt;p&gt;4、模型层：该层扩展主要手段就是依靠元数据驱动，通过依赖元数据对象，而非底层物理数据库。&lt;/p&gt;

&lt;p&gt;以上能力，在通过最后零代码技术的加持和封装，实现可视化配置，形成一个工作空间，在对工作空间进行分角色授权，让不同角色以熟悉的语言进行操作，这样就可以实现生态化交付和全民开发的愿景。&lt;/p&gt;

&lt;p&gt;所以说扩展的技术体系不是一个单一的解决方案，它需要零低代码、插件、业务事件、元数据驱动、流程规则引擎等技术共同协作才可以。而难点是这几个技术需要互相搭配好，实现扩展的互认，例如我们在对象模型扩展中增加了一个属性，这个属性需要在界面展示、需要在接口中透传、需要在规则中校验，这就需要做好顶层架构设计。&lt;/p&gt;

&lt;p&gt;我们通过几个案例来描述，它需要和可以实现哪些能力？&lt;/p&gt;

&lt;h1&gt;案例&lt;/h1&gt;

&lt;h2&gt;案例1：让非技术参与进来，体会技术提效的变化&lt;/h2&gt;

&lt;p&gt;需求描述：基于业务变化，一个核心系统，需新增 “渠道类型” 这个属性，改动涉及：&lt;/p&gt;

&lt;p&gt;1、数据模型变化（技术上：数据库字段变化）&lt;/p&gt;

&lt;p&gt;2、后端服务及规则变化（技术上：接口变化、对象变化、判断规则变化等）、&lt;/p&gt;

&lt;p&gt;3、展现界面变化（技术上：UI 界面增加带数据权限的查询条件、表格新列及图表增加等），&lt;/p&gt;

&lt;p&gt;也就是需要软件不同层次的进行变化。通常，这些特别技术的需求变更，只能技术排期做，但是通过这种新方式。产品经理/客户就可以在无需等待，7 分钟内，全程零代码的模式下完成。&lt;/p&gt;

&lt;p&gt;1、在对象扩展中，增加新的属性。&lt;/p&gt;

&lt;p&gt;2、在规则引擎中，基于新的属性，编排增加新的校验。&lt;/p&gt;

&lt;p&gt;3、在界面扩展中，把在对象扩展中的新列拖拽出来，展示为查询条件，并制作一个新的饼状图展示到界面。&lt;/p&gt;

&lt;p&gt;通过这个案例，也就是说我们可以把黑盒的研发工作，安全、高效的交付给其非研发角色自助完成，提升交付效率，减低沟通成本。另外还有一点值得一提，这种方式也让非技术人员，可以直观的感受到技术提效的变化。&lt;/p&gt;

&lt;h2&gt;案例2：不触及代码情况下，实现安全一站式开发&lt;/h2&gt;

&lt;p&gt;需求描述：基于业务变化，一个核心系统，需要与客服系统集成，实现对某类特殊业务的客服外呼，改动涉及：&lt;/p&gt;

&lt;p&gt;1、新增一个外呼按钮&lt;/p&gt;

&lt;p&gt;2、新增前端规则校验，只有履约数据滞留2天的才需要进行客服介入。&lt;/p&gt;

&lt;p&gt;3、调用外呼接口，组装数据增加复杂逻辑并传递。&lt;/p&gt;

&lt;p&gt;4、发送邮件通知相关角色。&lt;/p&gt;

&lt;p&gt;同样，这些也是特别技术的需求变更，原来只能原厂技术开发来排期做，但是通过这种新方式。客户IT或ISV，就可以在不触及代码的情况下，通过统一平台一站式完成需求的变更。&lt;/p&gt;

&lt;p&gt;1、在界面层中，通过零低代码手段完成按钮新增。&lt;/p&gt;

&lt;p&gt;2、在界面层中，通过零低代码手段完成规则校验的新增。&lt;/p&gt;

&lt;p&gt;3、在服务层中，通过插件方式，实现代码逻辑处理，并调用外呼接口。&lt;/p&gt;

&lt;p&gt;4、在服务层中，通过事件订阅方式，监听外呼状态，配置邮件模版，实现邮件自动发送。&lt;/p&gt;

&lt;p&gt;通过这个案例，我们可以看出来，业务需求具有多变性，不能仅仅依靠一种手段完成扩展，需要多种方式进行搭配，才能实现大幅度提效。&lt;/p&gt;

&lt;h1&gt;结束&lt;/h1&gt;

&lt;p&gt;其实零低代码、插件、业务事件、元数据驱动、流程规则引擎等技术在行业中并不是一个新事物，而这些技术可以互相搭配，实现完美集成和互认，让用户在一个平台针对不同业务的场景使用合适的技术，完成需求的自助化，是个难点。它不仅仅需要平台技术，还需要对业务系统需要合理的抽象、抽取。&lt;/p&gt;

&lt;p&gt;最后，我们在回过头看看最开始的技术挑战。是不是都解决了呢？&lt;/p&gt;

&lt;p&gt;1、如何让非技术角色实现研发的交付？答：通过零低代码模式进行封装和开放。&lt;/p&gt;

&lt;p&gt;2、如何让全民开发者完整实现一个需求闭环，而非仅仅实现其中一部分需求？答：需要全链路开放和打通，并不仅局限一种技术手段。&lt;/p&gt;

&lt;p&gt;3、如何解决交付中核心系统安全问题？答：屏蔽源代码的完整扩展体系。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>91cf401c25c78c2253051e603a91c09f</guid>
<title>MySQL 中，join 语句怎么优化？</title>
<link>https://toutiao.io/k/0ra06u0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;在mysql中，join 主要有Nested Loop、Hash Join、Merge Join这三种方式，我们今天来看一下最普遍Nested Loop循环连接方式，主要包括三种：&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Simple Nested-Loop Join：简单嵌套循环连接&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Block Nested-Loop Join：缓存块嵌套循环连接&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Index Nested-Loop Join：索引嵌套循环连接&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Simple Nested-Loop Join&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看一下当进行 join 操作时，mysql是如何工作的。常见的 join 方式有哪些？&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.554531490015361&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OQmPiaEUnhd6j6yEia3zBgp5uYRKyV3ibOz5ZDJBxpaFXTlDQ0nFya5RBrmCYU3UBWOFDPT9Dr2htL7BXy9F2gdibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;651&quot;/&gt;如图，当我们进行连接操作时，左边的表是&lt;strong&gt;「驱动表」&lt;/strong&gt;，右边的表是&lt;strong&gt;「被驱动表」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Simple Nested-Loop Join 这种连接操作是从驱动表中取出一条记录然后逐条匹配被驱动表的记录，如果条件匹配则将结果返回。然后接着取驱动表的下一条记录进行匹配，直到驱动表的数据全都匹配完毕&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「因为每次从驱动表取数据比较耗时，所以MySQL并没有采用这种算法来进行连接操作」&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Block Nested-Loop Join&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.554531490015361&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OQmPiaEUnhd6j6yEia3zBgp5uYRKyV3ibOzuo8BYV5NuEqpz7gFbFI5DgjnzbV0HbPrPM7mIugiaLNwF9qOxQMGpMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;651&quot;/&gt;既然每次从驱动表取数据比较耗时，那我们每次从驱动表取一批数据放到内存中，然后对这一批数据进行匹配操作。这批数据匹配完毕，再从驱动表中取一批数据放到内存中，直到驱动表的数据全都匹配完毕&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;批量取数据能减少很多IO操作，因此执行效率比较高，这种连接操作也被MySQL采用&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对了，这块内存在MySQ中有一个专有的名词，叫做 join buffer，我们可以执行如下语句查看 join buffer 的大小&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;show&lt;/span&gt; &lt;span&gt;variables&lt;/span&gt; &lt;span&gt;like&lt;/span&gt; &lt;span&gt;&#x27;%join_buffer%&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3567251461988304&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OQmPiaEUnhd6j6yEia3zBgp5uYRKyV3ibOzEA0INQb6UwmvVvtDd4F3QNFapQvIiciazyOXnE72dWrYMTbNhQ9zGE7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;342&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把我们之前用的 single_table 表搬出来，基于 single_table 表创建2个表，每个表插入1w条随机记录&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; single_table (&lt;br/&gt;    &lt;span&gt;id&lt;/span&gt; &lt;span&gt;INT&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;br/&gt;    key1 &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;),&lt;br/&gt;    key2 &lt;span&gt;INT&lt;/span&gt;,&lt;br/&gt;    key3 &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;),&lt;br/&gt;    key_part1 &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;),&lt;br/&gt;    key_part2 &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;),&lt;br/&gt;    key_part3 &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;),&lt;br/&gt;    common_field &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;),&lt;br/&gt;    PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;id&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;KEY&lt;/span&gt; idx_key1 (key1),&lt;br/&gt;    &lt;span&gt;UNIQUE&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt; idx_key2 (key2),&lt;br/&gt;    &lt;span&gt;KEY&lt;/span&gt; idx_key3 (key3),&lt;br/&gt;    &lt;span&gt;KEY&lt;/span&gt; idx_key_part(key_part1, key_part2, key_part3)&lt;br/&gt;) &lt;span&gt;Engine&lt;/span&gt;=&lt;span&gt;InnoDB&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt;=utf8;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; t1 &lt;span&gt;like&lt;/span&gt; single_table;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; t2 &lt;span&gt;like&lt;/span&gt; single_table;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果直接使用 join 语句，MySQL优化器可能会选择表 t1 或者 t2 作为驱动表，这样会影响我们分析sql语句的过程，所以我们用 straight_join 让mysql使用固定的连接方式执行查询&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; t1 &lt;span&gt;straight_join&lt;/span&gt; t2 &lt;span&gt;on&lt;/span&gt; (t1.common_field = t2.common_field)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行时间为0.035s&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19117647058823528&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OQmPiaEUnhd6j6yEia3zBgp5uYRKyV3ibOzhDY3CpZzj8U8maj4rIhkCzYDcXmkInPs0bugolYssE4uShrx6UJefg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;272&quot;/&gt;执行计划如下&lt;img data-ratio=&quot;0.07037037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OQmPiaEUnhd6j6yEia3zBgp5uYRKyV3ibOzqOHUpa5KPeq7iaIzRE1DcibAHYlviaHN0N1RuMShAOF8kT7Y4RC5s5BbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;在Extra列中看到了 Using join buffer ，说明连接操作是基于 &lt;strong&gt;「Block Nested-Loop Join」&lt;/strong&gt; 算法&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Index Nested-Loop Join&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了 &lt;strong&gt;「Block Nested-Loop Join」&lt;/strong&gt; 算法之后，可以看到驱动表的每条记录会把被驱动表的所有记录都匹配一遍，非常耗时，能不能提高一下被驱动表匹配的效率呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;估计这种算法你也想到了，就是给被驱动表连接的列加上索引，这样匹配的过程就非常快，如图所示&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5077355836849508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OQmPiaEUnhd6j6yEia3zBgp5uYRKyV3ibOz3mGLWRBEuESlqB044llTXtJkUIKpsdPZkGkAhAh3BWvW6NIIQmGtKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot;/&gt;我们来看一下基于索引列进行连接执行查询有多快？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; t1 &lt;span&gt;straight_join&lt;/span&gt; t2 &lt;span&gt;on&lt;/span&gt; (t1.id = t2.id)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行时间为0.001秒，可以看到比基于普通的列进行连接快了不止一个档次&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OQmPiaEUnhd6j6yEia3zBgp5uYRKyV3ibOzsxxJaQHSNxzBospJdhwEoIYNU41eWIf8YwQoeX7D5IYdJN8Q1jB90g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;执行计划如下&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08981481481481482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OQmPiaEUnhd6j6yEia3zBgp5uYRKyV3ibOzdZpC9c3po35D1N17rHZlK36fua5icUbVAUxJhicCgYqjRWETJMzPeCzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;strong&gt;「驱动表的记录并不是所有列都会被放到 join buffer，只有查询列表中的列和过滤条件中的列才会被放入 join buffer，因此我们不要把 * 作为查询列表，只需要把我们关心的列放到查询列表就好了，这样可以在 join buffer 中放置更多的记录」&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何选择驱动表？&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;知道了 join 的具体实现，我们来聊一个常见的问题，即如何选择驱动表？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「如果是 Block Nested-Loop Join 算法：」&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当 join buffer 足够大时，谁做驱动表没有影响&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当 join buffer 不够大时，应该选择小表做驱动表（小表数据量少，放入 join buffer 的次数少，减少表的扫描次数）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「如果是 Index Nested-Loop Join 算法」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设驱动表的行数是M，因此需要扫描驱动表M行&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;被驱动表的行数是N，每次在被驱动表查一行数据，要先搜索索引a，再搜索主键索引。每次搜索一颗树近似复杂度是以2为底N的对数，所以在被驱动表上查一行的时间复杂度是&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;2*log2^N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -846 3882.4 1051&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(722.2, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1444.4, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1742.4, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2227.4, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(2704.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(500, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;驱动表的每一行数据都要到被驱动表上搜索一次，整个执行过程近似复杂度为&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;M + M*2*log2^N&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -846 8151.2 1051&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1273.2, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2273.4, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3546.7, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(4268.9, 0)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4991.1, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5713.3, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6011.3, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6496.3, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(6973.3, 0)&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(500, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「显然M对扫描行数影响更大，因此应该让小表做驱动表。当然这个结论的前提是可以使用被驱动表的索引」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「总而言之，我们让小表做驱动表即可」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「当 join 语句执行的比较慢时，我们可以通过如下方法来进行优化」&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;进行连接操作时，能使用被驱动表的索引&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;小表做驱动表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增大 join buffer 的大小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不要用 * 作为查询列表，只返回需要的列&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;公众号后台回复&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&quot;356&quot;---&lt;/span&gt;&lt;span&gt;领&lt;/span&gt;&lt;span&gt;取100余本后端书籍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&quot;面试&quot;---领取大厂面试资料&lt;/p&gt;&lt;p&gt;&quot;导图&quot;---&lt;span&gt;领&lt;/span&gt;取24张Java后端学习笔记导图&lt;/p&gt;&lt;p&gt;&quot;架构&quot;---&lt;span&gt;领&lt;/span&gt;取29本java架构师电子书籍&lt;/p&gt;&lt;p&gt;&quot;并发&quot;---&lt;span&gt;领&lt;/span&gt;取高并发常问面试题汇总&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile data-index=&quot;0&quot; data-id=&quot;MzIwMTgzOTQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicbnQMY3O39lQic6aWFibIibG3nSvCe4npSAicia5P7DfBRFKzZWftbw6Cw9ez7iagtVvBeK0WeN8ibEWyWHw/0?wx_fmt=png&quot; data-nickname=&quot;码农参上&quot; data-alias=&quot;CODER_SANJYOU&quot; data-signature=&quot;专注后端技术分享，有趣、深入、直接，与你聊聊技术。&quot; data-origin_num=&quot;109&quot; data-is_biz_ban=&quot;0&quot; data-isban=&quot;0&quot; class=&quot;js_wx_tap_highlight&quot; data-from=&quot;2&quot; has-insert-preloading=&quot;1&quot; data-weui-theme=&quot;light&quot; data-biz_account_status=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;关注公众号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有趣、深入、直接&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与你聊聊技术&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;觉得有用，&lt;/strong&gt;来个四连吧~&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0dbc1c6bb0a46abb13e14a9a8c0d4e13</guid>
<title>九个超级好用的 Javascript 技巧</title>
<link>https://toutiao.io/k/7tnhqad</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;38216&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg2ODQ1OTExOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73z8ujxEen5FiczfdZIN3MFVZT3Nol4FGiahOFuyINzQMHficQlA9fuPaAL9esXmVX3RmJEEu0iaNPaGRGA/0?wx_fmt=png&quot; data-nickname=&quot;字节前端 ByteFE&quot; data-alias=&quot;ByteFE&quot; data-signature=&quot;技术前沿&amp;amp;文章分享&amp;amp;实践干货 尽在字节跳动前端团队&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;25490&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7088607594936709&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Ljib4So7yuWgdsiawsibl2cqTm0PmXstpmMxMicIDIxQ2FMWwdj8BPCO5nMyWYdZZANdGStH09PtSBPXmjTdibMCbgQ/640?wx_fmt=gif&quot; data-w=&quot;79&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;点击上方关注 · 文末有彩蛋 &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7088607594936709&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Ljib4So7yuWgdsiawsibl2cqTm0PmXstpmMxMicIDIxQ2FMWwdj8BPCO5nMyWYdZZANdGStH09PtSBPXmjTdibMCbgQ/640?wx_fmt=gif&quot; data-w=&quot;79&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际的开发工作过程中，积累了一些常见又超级好用的 Javascript 技巧和代码片段，包括整理的其他大神的 JS 使用技巧，今天筛选了 9 个，以供大家参考。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、动态加载 JS 文件&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一些特殊的场景下，特别是一些库和框架的开发中，我们有时会去动态的加载 JS 文件并执行，下面是利用 Promise 进行了简单的封装。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;loadJS&lt;/span&gt;(&lt;span&gt;files, done&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// 获取head标签&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; head = &lt;span&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span&gt;&#x27;head&#x27;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;  &lt;span&gt;Promise&lt;/span&gt;.all(files.map(&lt;span&gt;&lt;span&gt;file&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;&lt;span&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;// 创建script标签并添加到head&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;const&lt;/span&gt; s = &lt;span&gt;document&lt;/span&gt;.createElement(&lt;span&gt;&#x27;script&#x27;&lt;/span&gt;);&lt;br/&gt;      s.type = &lt;span&gt;&quot;text/javascript&quot;&lt;/span&gt;;&lt;br/&gt;      s.async = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;      s.src = file;&lt;br/&gt;      &lt;span&gt;// 监听load事件，如果加载完成则resolve&lt;/span&gt;&lt;br/&gt;      s.addEventListener(&lt;span&gt;&#x27;load&#x27;&lt;/span&gt;, (e) =&amp;gt; resolve(), &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;      head.appendChild(s);&lt;br/&gt;    });&lt;br/&gt;  })).then(done);  &lt;span&gt;// 所有均完成，执行用户的回调事件&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;loadJS([&lt;span&gt;&quot;test1.js&quot;&lt;/span&gt;, &lt;span&gt;&quot;test2.js&quot;&lt;/span&gt;], () =&amp;gt; {&lt;br/&gt;  &lt;span&gt;// 用户的回调逻辑&lt;/span&gt;&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码核心有两点，一是利用 Promise 处理异步的逻辑，而是利用 script 标签进行 js 的加载并执行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、实现模板引擎&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面示例用了极少的代码实现了动态的模板渲染引擎，不仅支持普通的动态变量的替换，还支持包含 for 循环，if 判断等的动态的 JS 语法逻辑，具体实现逻辑在笔者另外一篇文章《面试官问：你能手写一个模版引擎吗？》（&lt;span&gt;&lt;em&gt;&lt;span&gt;https://juejin.cn/post/7207697872706486328&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;）做了非常详详尽的说明，感兴趣的小伙伴可自行阅读。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 这是包含了js代码的动态模板&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; template =&lt;br/&gt;&lt;span&gt;&#x27;My avorite sports:&#x27;&lt;/span&gt; +&lt;br/&gt;&lt;span&gt;&#x27;&amp;lt;%if(this.showSports) {%&amp;gt;&#x27;&lt;/span&gt; +&lt;br/&gt;    &lt;span&gt;&#x27;&amp;lt;% for(var index in this.sports) {   %&amp;gt;&#x27;&lt;/span&gt; +&lt;br/&gt;    &lt;span&gt;&#x27;&amp;lt;a&amp;gt;&amp;lt;%this.sports[index]%&amp;gt;&amp;lt;/a&amp;gt;&#x27;&lt;/span&gt; +&lt;br/&gt;    &lt;span&gt;&#x27;&amp;lt;%}%&amp;gt;&#x27;&lt;/span&gt; +&lt;br/&gt;&lt;span&gt;&#x27;&amp;lt;%} else {%&amp;gt;&#x27;&lt;/span&gt; +&lt;br/&gt;    &lt;span&gt;&#x27;&amp;lt;p&amp;gt;none&amp;lt;/p&amp;gt;&#x27;&lt;/span&gt; +&lt;br/&gt;&lt;span&gt;&#x27;&amp;lt;%}%&amp;gt;&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;// 这是我们要拼接的函数字符串&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; code = &lt;span&gt;`with(obj) {&lt;br/&gt;  var r=[];&lt;br/&gt;  r.push(&quot;My avorite sports:&quot;);&lt;br/&gt;  if(this.showSports) {&lt;br/&gt;    for(var index in this.sports) {&lt;br/&gt;      r.push(&quot;&amp;lt;a&amp;gt;&quot;);&lt;br/&gt;      r.push(this.sports[index]);&lt;br/&gt;      r.push(&quot;&amp;lt;/a&amp;gt;&quot;);&lt;br/&gt;    }&lt;br/&gt;  } else {&lt;br/&gt;    r.push(&quot;&amp;lt;span&amp;gt;none&amp;lt;/span&amp;gt;&quot;);&lt;br/&gt;  }&lt;br/&gt;  return r.join(&quot;&quot;);&lt;br/&gt;}`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 动态渲染的数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; options = {&lt;br/&gt;  &lt;span&gt;sports&lt;/span&gt;: [&lt;span&gt;&quot;swimming&quot;&lt;/span&gt;, &lt;span&gt;&quot;basketball&quot;&lt;/span&gt;, &lt;span&gt;&quot;football&quot;&lt;/span&gt;],&lt;br/&gt;  &lt;span&gt;showSports&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 构建可行的函数并传入参数，改变函数执行时this的指向&lt;/span&gt;&lt;br/&gt;result = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;span&gt;&quot;obj&quot;&lt;/span&gt;, code).apply(options, [options]);&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(result);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、利用 reduce 进行数据结构的转换&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候前端需要对后端传来的数据进行转换，以适配前端的业务逻辑，或者对组件的数据格式进行转换再传给后端进行处理，而 reduce 是一个非常强大的工具。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; arr = [&lt;br/&gt;    { &lt;span&gt;classId&lt;/span&gt;: &lt;span&gt;&quot;1&quot;&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&quot;张三&quot;&lt;/span&gt;, &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;16&lt;/span&gt; },&lt;br/&gt;    { &lt;span&gt;classId&lt;/span&gt;: &lt;span&gt;&quot;1&quot;&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&quot;李四&quot;&lt;/span&gt;, &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;15&lt;/span&gt; },&lt;br/&gt;    { &lt;span&gt;classId&lt;/span&gt;: &lt;span&gt;&quot;2&quot;&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&quot;王五&quot;&lt;/span&gt;, &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;16&lt;/span&gt; },&lt;br/&gt;    { &lt;span&gt;classId&lt;/span&gt;: &lt;span&gt;&quot;3&quot;&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&quot;赵六&quot;&lt;/span&gt;, &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;15&lt;/span&gt; },&lt;br/&gt;    { &lt;span&gt;classId&lt;/span&gt;: &lt;span&gt;&quot;2&quot;&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&quot;孔七&quot;&lt;/span&gt;, &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;16&lt;/span&gt; }&lt;br/&gt;];&lt;br/&gt;&lt;br/&gt;groupArrayByKey(arr, &lt;span&gt;&quot;classId&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;groupArrayByKey&lt;/span&gt;(&lt;span&gt;arr = [], key&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; arr.reduce(&lt;span&gt;(&lt;span&gt;t, v&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (!t[v[key]] &amp;amp;&amp;amp; (t[v[key]] = []), t[v[key]].push(v), t), {})&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多很复杂的逻辑如果用 reduce 去处理，都非常的简洁。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、添加默认值&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候一个方法需要用户传入一个参数，通常情况下我们有两种处理方式，如果用户不传，我们通常会给一个默认值，亦或是用户必须要传一个参数，不传直接抛错。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; value *&lt;span&gt;2&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 不传的话给一个默认值0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;(&lt;span&gt;value = &lt;span&gt;0&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; value * &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 用户必须要传一个参数，不传参数就抛出一个错误&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; required = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Error&lt;/span&gt;(&lt;span&gt;&quot;This function requires one parameter.&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;(&lt;span&gt;value = required(&lt;/span&gt;)) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; value * &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;double(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;// 6&lt;/span&gt;&lt;br/&gt;double() &lt;span&gt;// throw Error&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;listen 方法用来创建一个 NodeJS 的原生 http 服务并监听端口，在服务的回调函数中创建 context，然后调用用户注册的回调函数并传递生成的 context。下面我们以前看下 createContext 和 handleRequest 的实现。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、函数只执行一次&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些情况下我们有一些特殊的场景，某一个函数只允许执行一次，或者绑定的某一个方法只允许执行一次。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;once&lt;/span&gt; (&lt;span&gt;fn&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// 利用闭包判断函数是否执行过&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; called = &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!called) {&lt;br/&gt;      called = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      fn.apply(&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;arguments&lt;/span&gt;)&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6、实现 Curring&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JavaScript 的柯里化是指将接受多个参数的函数转换为一系列只接受一个参数的函数的过程。这样可以更加灵活地使用函数，减少重复代码，并增加代码的可读性。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;curry&lt;/span&gt;(&lt;span&gt;fn&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;curried&lt;/span&gt;(&lt;span&gt;...args&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (args.length &amp;gt;= fn.length) {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; fn.apply(&lt;span&gt;this&lt;/span&gt;, args);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;...args2&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; curried.apply(&lt;span&gt;this&lt;/span&gt;, args.concat(args2));&lt;br/&gt;      };&lt;br/&gt;    }&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x + y;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; curriedAdd = curry(add);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(curriedAdd(&lt;span&gt;1&lt;/span&gt;)(&lt;span&gt;2&lt;/span&gt;)); &lt;span&gt;// 输出 3&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(curriedAdd(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)); &lt;span&gt;// 输出 3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过柯里化，我们可以将一些常见的功能模块化，例如验证、缓存等等。这样可以提高代码的可维护性和可读性，减少出错的机会。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7、实现单例模式&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JavaScript 的单例模式是一种常用的设计模式，它可以确保一个类只有一个实例，并提供对该实例的全局访问点，在 JS 中有广泛的应用场景，如购物车，缓存对象，全局的状态管理等等。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; cache;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getInstance&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (cache) &lt;span&gt;return&lt;/span&gt; cache;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; cache = &lt;span&gt;new&lt;/span&gt; A();&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; x = getInstance();&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; y = getInstance();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(x === y); &lt;span&gt;// true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8、实现 CommonJs 规范&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CommonJS 规范的核心思想是将每个文件都看作一个模块，每个模块都有自己的作用域，其中的变量、函数和对象都是私有的，不能被外部访问。要访问模块中的数据，必须通过导出（exports）和导入（require）的方式。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// id：完整的文件名&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; path = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;path&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; fs = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;fs&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Module&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 用来唯一标识模块&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.id = id;&lt;br/&gt;    &lt;span&gt;// 用来导出模块的属性和方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.exports = {};&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;myRequire&lt;/span&gt;(&lt;span&gt;filePath&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 直接调用Module的静态方法进行文件的加载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; Module._load(filePath);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;Module._cache = {};&lt;br/&gt;Module._load = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;filePath&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 首先通过用户传入的filePath寻址文件的绝对路径&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 因为再CommnJS中，模块的唯一标识是文件的绝对路径&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; realPath = Module._resoleveFilename(filePath);&lt;br/&gt;    &lt;span&gt;// 缓存优先，如果缓存中存在即直接返回模块的exports属性&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; cacheModule = Module._cache[realPath];&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(cacheModule) &lt;span&gt;return&lt;/span&gt; cacheModule.exports;&lt;br/&gt;    &lt;span&gt;// 如果第一次加载，需要new一个模块，参数是文件的绝对路径&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;module&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Module(realPath);&lt;br/&gt;    &lt;span&gt;// 调用模块的load方法去编译模块&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;module&lt;/span&gt;.load(realPath);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;module&lt;/span&gt;.exports;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// node文件暂不讨论&lt;/span&gt;&lt;br/&gt;Module._extensions = {&lt;br/&gt;   &lt;span&gt;// 对js文件处理&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;.js&quot;&lt;/span&gt;: handleJS,&lt;br/&gt;  &lt;span&gt;// 对json文件处理&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;.json&quot;&lt;/span&gt;: handleJSON&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;handleJSON&lt;/span&gt;(&lt;span&gt;module&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;// 如果是json文件，直接用fs.readFileSync进行读取，&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// 然后用JSON.parse进行转化，直接返回即可&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; json = fs.readFileSync(&lt;span&gt;module&lt;/span&gt;.id, &lt;span&gt;&#x27;utf-8&#x27;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;module&lt;/span&gt;.exports = &lt;span&gt;JSON&lt;/span&gt;.parse(json)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;handleJS&lt;/span&gt;(&lt;span&gt;module&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; js = fs.readFileSync(&lt;span&gt;module&lt;/span&gt;.id, &lt;span&gt;&#x27;utf-8&#x27;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; fn = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;(&lt;span&gt;&#x27;exports&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;myRequire&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;module&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;__filename&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;__dirname&#x27;&lt;/span&gt;, js)&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; exports = &lt;span&gt;module&lt;/span&gt;.exports;&lt;br/&gt;  &lt;span&gt;// 组装后的函数直接执行即可&lt;/span&gt;&lt;br/&gt;  fn.call(exports, exports, myRequire, &lt;span&gt;module&lt;/span&gt;,&lt;span&gt;module&lt;/span&gt;.id,path.dirname(&lt;span&gt;module&lt;/span&gt;.id))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;Module._resolveFilename = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;filePath&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// 拼接绝对路径，然后去查找，存在即返回&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; absPath = path.resolve(__dirname, filePath);&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; exists = fs.existsSync(absPath);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (exists) &lt;span&gt;return&lt;/span&gt; absPath;&lt;br/&gt;  &lt;span&gt;// 如果不存在，依次拼接.js,.json,.node进行尝试&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; keys = &lt;span&gt;Object&lt;/span&gt;.keys(Module._extensions);&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; keys.length; i++) {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; currentPath = absPath + keys[i];&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (fs.existsSync(currentPath)) &lt;span&gt;return&lt;/span&gt; currentPath;&lt;br/&gt;  }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;Module.prototype.load = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;realPath&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// 获取文件扩展名，交由相对应的方法进行处理&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; extname = path.extname(realPath)&lt;br/&gt;  Module._extensions[extname](&lt;span&gt;this&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面对 CommonJs 规范进行了简单的实现，核心解决了作用域的隔离，并提供了 Myrequire 方法进行方法和属性的加载，对于上面的实现，笔者专门有一篇文章《38 行代码带你实现 CommonJS 规范》（&lt;em&gt;&lt;span&gt;https://juejin.cn/post/7212503883263787064&lt;/span&gt;&lt;/em&gt;）进行了详细的说明，感兴趣的小伙伴可自行阅读。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9、递归获取对象属性&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果让我挑选一个用的最广泛的设计模式，我会选观察者模式，如果让我挑一个我所遇到的最多的算法思维，那肯定是递归，递归通过将原始问题分割为结构相同的子问题，然后依次解决这些子问题，组合子问题的结果最终获得原问题的答案。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; user = {&lt;br/&gt;  &lt;span&gt;info&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&quot;张三&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;address&lt;/span&gt;: { &lt;span&gt;home&lt;/span&gt;: &lt;span&gt;&quot;Shaanxi&quot;&lt;/span&gt;, &lt;span&gt;company&lt;/span&gt;: &lt;span&gt;&quot;Xian&quot;&lt;/span&gt; },&lt;br/&gt;  },&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// obj是获取属性的对象，path是路径，fallback是默认值&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;(&lt;span&gt;obj, path, fallback&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; parts = path.split(&lt;span&gt;&quot;.&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; key = parts.shift();&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; obj[key] !== &lt;span&gt;&quot;undefined&quot;&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; parts.length &amp;gt; &lt;span&gt;0&lt;/span&gt; ?&lt;br/&gt;      &lt;span&gt;get&lt;/span&gt;(obj[key], parts.join(&quot;.&quot;), fallback) :&lt;br/&gt;      obj[key];&lt;br/&gt;  }&lt;br/&gt;  // 如果没有找到key返回fallback&lt;br/&gt;  return fallback;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;console.log(&lt;span&gt;get&lt;/span&gt;(user, &quot;info.name&quot;)); // 张三&lt;br/&gt;console.log(&lt;span&gt;get&lt;/span&gt;(user, &quot;info.address.home&quot;)); // Shaanxi&lt;br/&gt;console.log(&lt;span&gt;get&lt;/span&gt;(user, &quot;info.address.company&quot;)); // Xian&lt;br/&gt;console.log(&lt;span&gt;get&lt;/span&gt;(user, &quot;info.address.abc&quot;, &quot;fallback&quot;)); // fallback&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面挑选了 9 个笔者认为比较有用的 JS 技巧，希望对大家有所帮助。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4272aba091d6f95beaed6b22eae4d82b</guid>
<title>剖析多利熊业务如何基于分布式架构实践稳定性建设</title>
<link>https://toutiao.io/k/ej7l0st</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content &amp;#10;                       autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;90&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.15627906976744185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/5p8giadRibbOichNxgNgW2xyHYqnHnww2mnGT5PC84tpKOThGv2k88zXbdh8DTfA38RniadrhC3y4JagKaIEPTNPlQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1075&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作者 | 百度小程序团队&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;导读 &lt;/section&gt;&lt;section&gt;&lt;span&gt;introduction&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;多利熊稳定性建设，是指为了确保系统或服务，在生产环境中的稳定性而采取的一系列措施和优化。这包括但不限于监控、预警、容错、自动化、规范、质量等方面的优化。通过稳定性建设，可以提高系统的可靠性和可用性，从而为用户提供更好的使用体验和服务质量。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;全文4159字，预计阅读时间11分钟。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;GEEK TALK&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;业务介绍&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;多利熊是百度旗下的本地生活服务平台，是针对本地生活行业的SaaS解决方案，利用中心化+去中心化分销渠道，帮助商家在百度内外广泛获客及持续经营，帮助用户发现所在地的商户，并给用户提供特色又优惠的吃喝玩乐商品服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多利熊生活服务平台，包含以下三个主要产品形态：&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;多利熊商家平台&lt;/strong&gt;：主要是面向商家提供服务，是商家管理门店、核销订单、处理售后、资金提现的经营平台；包括PC后台、小程序、APP双端（多利熊掌柜）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;多利熊运营平台&lt;/strong&gt;：面向内部运转，用于商户审核、商品审核、套餐撰文等事务管理；包括PC后台、APP双端（熊管家）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;多利熊用户平台&lt;/strong&gt;：面向C端用户和达人，提供多利熊百度小程序、多利熊微信小程序、多利熊APP等&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;多利熊业务挑战，随着技术角色分工越来越细、技术专业化程度越来越深，分布式系统的架构特性为其稳定性建设中的架构设计、组织设计等带来了新的挑战。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;随着模块微服务(用户、商品、订单、商家、券码、支付...)数量激增，如何保障架构健壮可拓展。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;依赖内部服务多，调用链路长，如何保障服务性能以及稳定性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;依赖外部服务多(交易、营销、三方Saas...)，如何保证数据最终一致性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;迭代周期短，节奏快，如何平衡开发重构节奏，保障架构良性迭代。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;GEEK TALK&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;建设理念&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;多利熊业务复杂性，&lt;/span&gt;&lt;span&gt;对产品整体的稳定性质量建设，带来了巨大的挑战，实际建设过程中主要&lt;/span&gt;&lt;span&gt;从技术规范、业务规范、微服务三个方面落地实践，具体如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;161&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.27870370370370373&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9yaytJI6Q5opuukic4wUPwwc2pxudtH0Su17xe8wb8omMGO2zZrdm7YrAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多利熊稳定性建设，示意图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;342&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.6083333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9ya45nnFWntdiaAZsjHFia9iaL4e2q496jXg1E5qlBicVosor5Hpjg7KHEB7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;GEEK TALK&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;实施过程&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从开发到上线，如何保证稳定性？以多利熊业务稳定性建设落地实践介绍，主要从以下几个阶段：方案设计、技术评审、开发、CR、提测、上线、问题处理、Case沉淀 实施落地，具体内容如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;171&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2953703703703704&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9yapsbIiarjZES4bp0ic5kF2QgvNGpjvJaCicHVQqRTLFK0TNW8of7EqgiaPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.1 方案设计&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;方案设计旨在梳理需求背景，了解业务，确保需求合理性，可行性。方案设计带来的好处：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;梳理需求背景，了解业务，确定需要做的事情，确保需求合理性，可行性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;跨团队、跨部门需求，需要达成一致性认知，对齐需求上下文。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;详设可以有效纰漏潜在的风险；评估开发工作量，保证项目进度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;沉淀开发文档，保证项目开发文档详细准确，保证产品的项目开发文档的持续性，技术方案良构。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;方案设计要包含内容如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;54&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.09351851851851851&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9ya9BYmCbgibcCiaATUnCUicJ9MyREMSbddVU9nvVZwfBWcibHwSImztTOBXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;方案版本&lt;/strong&gt;：版本号、编写时间、变更内容、修改人等信息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;开发文档&lt;/strong&gt;：需求文档、需求 icafe(feature) 地址、prd地址、依赖文档地址、需求负责人，便于后续查询&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;项目背景&lt;/strong&gt;：对项目功能进列举说明，项目背景梳理明白为什么我们要做这个项目、要实现什么功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;技术方案&lt;/strong&gt;：技术架构、流程设计、模块交互、功能设计，需要将产品需求转变为技术实现的过程表达清楚&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;接口设计&lt;/strong&gt;：提供的接口命名、参数定义(类型 大小限制 长度限制 是否必填 备注...)、响应结果、接口信息(描述信息 创建人 负责人...)等协议信息，解决前后端接口文档与实际情况不一致，随着时间推移，版本迭代，接口文档往往很容易就跟不上代码了等问题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;存储设计&lt;/strong&gt;：涉及库表、字段变更，必须考虑是否涉及上下游同步、数据兼容、表情符号、字段长度等&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：数据兼容，新增字段或者上线前后修改逻辑不一致等；接口兼容，考虑接口升级，是否兼容；上线顺序兼容，考虑前后端上线顺序以及依赖关系，等其他需要考虑的兼容场景&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;监控告警&lt;/strong&gt;：执行失败、异常场景监控告警。异常分支逻辑、运行时异常逻辑、关键路径逻辑「支付、注册等」&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;上线&lt;/strong&gt;：上线前输出上线文档，包括资源、配置、授权、上下游依赖、上线顺序等等&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.2 技术评审&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;目的：技术文档沉淀以及技术文档持续性，同时保证技术方案良构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目标：组件技术方案评审小组，输出技术方案评审标准(方案设计、评审内容、方案回顾)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术评审主要职责：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;指定评审内容，收集技术方案文档，指定参与评审人员(值班)，发起评审会邀&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;输出准入规则，主要从竞品调研、架构、接口协议、性能、库表、核心流程可用性等方面，输出准入规约&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;方案周期回顾，定期组织技术方案 Review(值班)，进行技术方案合理性分析回顾，保障架构良构&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.3 编码现约&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;编码规范愿景是提效，保证代码质量，提升团队的协作效率，降低沟通成本。开发规约主要包含，编码规约、安全规约、Mysql规约、日志规约、异常规约等。开发规约目标：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保证代码质量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开发提效&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提升团队的协作效率&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;降低沟通成本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提升线上服务稳定性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保障项目健康快速迭代&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.4 &lt;/strong&gt;&lt;strong&gt;CodeReview&lt;/strong&gt;&lt;strong/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Code Review在保障代码质量准入重要一环，CR 的主要职责如下：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提前发现由于业务理解偏差、逻辑错误等带来的质量隐患，从而减少线上问题和异常case&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;编码风格的统一规范、设计的合理性、代码的健壮性等多方面&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CR标准指导，从硬编码、嵌套层级、日志、常量、方法定义、SQL使用、配置文件等方面对评审的标准进行了总结沉淀&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;基于多利熊业务，我们也逐步落实和完善了一套CR流程实践，流程如下：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;234&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.40555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9ya8SUTnOC8y9X2A1LmGB1mevqbz5ialY5ezF0uJ2Xfy96y5NFpLnBgyMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.5 操作上线&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上线内容，需要周知模块负责人，通过上线方案评审，完成上线内容登记，上线通告后，进行上线操作。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;247&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.42777777777777776&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9yayoR7cdQvsFOOkPYQEQKAUNx4jHhwLueBr3dnu0pZfic7xNibTAa8ZJ5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.6 问题处理&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题处理原则：先通告，止损，再排查问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，线上问题优先跟进处理，最短时间上线修复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题上线原则&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：线上 bugfix 分支，不与业务上线混合上线，应独立上线，避免回滚风险：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;【问题通报】问题描述&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题描述】x年x月x日，因xx原因导致xx问题现象&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【当前进展】xxx &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题影响】待统计&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问题原因】待确定&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;GEEK TALK&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;实战&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;基于多利熊业务，我们也逐步落实和完善了一套稳定性建设流程实践闭环。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.1 稳定性闭环&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;稳定性建设各个环节交互如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;151&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2611111111111111&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9ya2zhicND4M8QGJ1cKVGbHibiaurdRAZVyhGNrQIj7icS288o8nINibmDFj9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.2 &lt;/strong&gt;&lt;strong&gt;最终一致性&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;多利熊业务内外部依赖服务较多，为了保障性能以及服务稳定性，最终采用方案如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多利熊业务业务调用，最终一致性实现流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;274&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.47314814814814815&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9yaVMiaPHyMq03e5ap2n5eoYmLib7cNuhlIib97iaibrMJjxUOFAyxnpXicXTvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.3&lt;/strong&gt;&lt;strong&gt;重试幂等&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;幂等介绍：多次调用不会改变业务状态，多次调用获得相同结果，对于请求的某一个资源应该具有同样的副作用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于 Http 请求，会有三个状态：成功，失败，或者超时。成功、失败是明确业务是很好处理的，超时是未知的，超时可能是网络传输丢包，也可能是请求超时，还有可能是返回结果超时。这时候我们是否可以重试呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;幂等和防重&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;防重&lt;/strong&gt;，主要为了避免产生重复数据或者脏数据，对返回没有太多要求。主要有，前端重复点击，网络重试等等&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;幂等&lt;/strong&gt;，比防重要求更加严苛，除了避免产生重复数据或者脏数据，还要求每次返回一样的结果&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;常见幂等问题场景&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;前端重复提交，多次点击，服务端收到多次请求&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;超时重试，调用下游服务或者依赖外部服务处理超时，或者因为网络原因导致超时&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息重复消费，使用消息中间件 pulsar、mq 等，重复消息发送，或者 ack 异常重复消费&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高并发，唯一 ID 生成碰撞，重复写入，边界控制等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;多利熊业务幂等设计实现，设计幂等都需要一个 全局唯一的ID，标记独一无二。通常使用 UUID 或者 雪花算法生成全局唯一 ID，多利熊采用的 防重表方式 实现幂等，流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;856&quot; data-backw=&quot;578&quot; data-ratio=&quot;1.4805555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9yaG7u79h1O3K7TpLJj5WaI2wibjxwloTNmPDakyJZ5kRc6GJeO3pAArUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.4 &lt;/strong&gt;&lt;strong&gt;监控警告&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;多利熊业务部署采用 k8s以及云原生prome监控，本节主要介绍，多利熊涉及监控告警技术选型，以及监控告警处理流程实践。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Trace 和 天眼（一站式日志服务平台）区别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;天眼&lt;/strong&gt;，应用于分布式服务的具有日志采集、加工、存储、检索、告警等功能的一站式日志服务平台，为业务团队提供低延迟, 高性能, 高可用的日志服务, 提升业务排障效率与能力&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Trace&lt;/strong&gt;，基于日志处理的全链路一站式查询分析协议，特别对于链路较长业务，可以快速定位到那个业务出现了问题。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;监控告警处理流程如图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;284&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.49074074074074076&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9yaWbpu5TN80qiaWVhrdqKo4LKBCV9ncaicUXh1ZbnkibwuHrVu5MMEcjicLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多利熊业务监控选型，Trace，天眼，Actuator，Prometheus、Grafana，整体实现效果如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;142&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.24537037037037038&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9ya01HxkUdHNsuFfsUZpAYVib2I0WAibialx0JibEt24ds4t7S3u8CDasDyYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;185&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.32037037037037036&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9yaibvwzJlKlNbC8D2JklOarknIH9zHNdDia68XFWv2ZcJ7k7V8icsGUeQJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;110&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.19074074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9ya53LBQ8voZfIX8uX2rticP9Zn84DKTicXquqlnk0Te01oK0H6iaRz6rYlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;128&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.2222222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9ya5010Ih6suYtXYzPnvK488TdysALlzToCBvq4EOBb57UGuxyH0brgmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;92&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.15925925925925927&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOicYPu3JmicQYRCwvU22Zr9ya75wxn1iaicEAcQ0TOUzHy4hpByUVQ5vl4cHLibScQ8PLBYmKX4qRGniapQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;4.5 其他&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;业务成长，周期邀请产品、运营分享业务知识，以及产品交流，生活服务研发做到『快』、『懂业务』和『正影响』。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术成长，架构师周期分享前言技术，技术培训，定期分析讨论架构，基础服务研发做到『及时性』、『专业性』、『稳定性』和『安全性』。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;GEEK TALK&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;规划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;自动化缩容&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于个性能指标或者Prometheus自定义指标来进行扩缩容，满足秒杀、大促等场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务智能化容错&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;核心业务流程(下单、支付、核销...)降级处理，依赖服务资源(Redis、MQ...)降级处理，保障用户体验。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; END&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg5MjU0NTI5OQ==&amp;amp;mid=2247543414&amp;amp;idx=1&amp;amp;sn=e3e40b66c15109b706ac97ca28df21e7&amp;amp;chksm=c03e1a0af749931c2d1b643d35ebb6780a4b33f143b314277b93317c297334744352bee1868a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Diffie-Hellman密钥协商算法探究&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;229&quot; data-backw=&quot;318&quot; data-ratio=&quot;0.7212962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbO9x9T3iaxknhz6B4v4PPxvGEAlXibefUzgTftSnnT6QficHvz0w4T1CtHpDD8ZDU7NiaAjkHFssZN9IYA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-bgcolor-16400839961158=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16400839961158=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16400839961158=&quot;rgb(118, 169, 250)&quot; data-darkmode-original-color-16400839961158=&quot;#fff|rgb(62, 62, 62)|rgb(120, 172, 254)&quot; data-style=&quot;outline: 0px; color: rgb(120, 172, 254); letter-spacing: 0.544px; caret-color: rgb(63, 63, 63); font-size: 15px; white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif; font-weight: bolder;&quot; data-darkmode-bgcolor-16447677597489=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16447677597489=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16447677597489=&quot;rgb(118, 169, 250)&quot; data-darkmode-original-color-16447677597489=&quot;#fff|rgb(62, 62, 62)|rgb(120, 172, 254)&quot;&gt;一键三连，好运连连，bug不见&lt;/span&gt;&lt;span data-darkmode-bgcolor-16400839961158=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16400839961158=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16400839961158=&quot;rgb(0, 179, 139)&quot; data-darkmode-original-color-16400839961158=&quot;#fff|rgb(62, 62, 62)|rgb(0, 179, 139)&quot; data-darkmode-bgcolor-16447677597489=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16447677597489=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16447677597489=&quot;rgb(0, 179, 139)&quot; data-darkmode-original-color-16447677597489=&quot;#fff|rgb(62, 62, 62)|rgb(0, 179, 139)&quot;&gt;👇&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3fcb27b7800c681c9c9c1861dd89b268</guid>
<title>Go 的一些有趣数据：中国最多人用、开发者年轻；PHP 明显下滑的趋势</title>
<link>https://toutiao.io/k/usgqd52</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content &amp;#10;                       autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近看到 JetBrains 家的《 2021~2022 开发者生态系统现状》，Go 有些数据还挺有趣的，分享给大家。这样可以对整体的开发者生态有一定的了解。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4388888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4hYrTzB0HjCJ1cMe1sZxow2k94ib3fj8GYmCU7iaXaibxZK9sGicviamVQBibR01H80gkxRqKojGTcL8XbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;当前的趋势&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6731481481481482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4hYrTzB0HjCJ1cMe1sZxow2v0HevpEb9en8KicZwY3uF5APUslGO0vtQcB57rkBe1DMhpJoGict2FFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我总结和梳理了十条，如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;用 Go 最多的 TOP3：中国、日本、俄罗斯联邦。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用 Go 开发的软件类型 TOP5：网站、实用工具、IT 基础架构、系统软件、库/框架。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 的编程群体比较年轻：21-29 岁占了 50%，30-39 岁占了 31%。18-20 占了 5%。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 在新语言中较受欢迎：如果选用新编程语言，大家会选择 Go 或 Rust 的人更多一些。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 主要被用于的领域 TOP3：Web（后端）、服务器/基础软件、云。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 在世界上的使用情况：2021~2022 年间，小幅上升(17% 到 19%）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最受欢迎和最不受欢迎的语言：JavaScript 和 Java 均名列前茅。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最受欢迎的五种编程语言：Python、Java、JavaScript、C# 和 Kotlin。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在使用趋势上呈下降趋势的有：PHP、Ruby、Objective-C 和 Scala 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;世界上使用最广泛的编程语言 TOP3：JavaScript、Python、Java。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;有趣的现象&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7027777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4hYrTzB0HjCJ1cMe1sZxow2hj8EVuenbQY9gYGLjQavlSFG0SXZOS0gPHo1qw9Cu8aeuOKdia9iauIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比较有趣的几个现象：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;日本使用 Go 是第二多的？莫非都是我们跑去写的吗。挺神奇的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 在大学生中的使用比例上暂时不太多，18-20 岁只有 5%，这块官方主要调研的就是大学生群体。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自 2020 年起，Java 的使用人群比例有所下滑，感觉是天花板到顶了，转平滑稳定增长了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;世界上最好的语言 PHP 有明显下降的趋势，如果你还年轻。建议尽快上手第二门编程语言。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.55&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4hYrTzB0HjCJ1cMe1sZxow2sfxUDkPuhj6j6Vu8RttMibia6TIIWjBCxQbXaZbbXljdIVBCs4gg9OjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整体上 Go 的很多现象我们这会被放大。因为我们是目前世界上使用 Go 最大的群体，Go 相对 PHP 的潜力是更大的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在榜三的 Java 和 JavaScript，过去了那么多年。依然是一门让人又爱又 ”恨“ 的编程语言。使用人群之多，问题也不少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想到 JavaScript 十天就设计出来了，目的是为了不写 Java。不禁让我想到，写一个 GoScript 会不会也有奇怪的前景。😂&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;推荐阅读&lt;span/&gt;&lt;/h4&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注和加煎鱼微信，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一手消息和知识，拉你进技术交流群&lt;span&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9988738738738738&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4jVkzHVvaqjo3O0BIqDRJKkEyib7SJsryxHBFGsvek0FkdiczfJP6AdbWnK25DvlX3dY8wRObPbVJQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07106598984771574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/486RHs1WbcgGib6o96dHbvGUGGwPicd8wusUGH1cXR29tM4bO0lNzialzkQhvU6m5ZUdaKibmcF2OQayjMe9Bia6iaXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是煎鱼，&lt;span&gt;出版过 Go 畅销书《Go 语言编程之旅》，再到获得 GOP（Go 领域最有观点专家）荣誉，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247483854&amp;amp;idx=1&amp;amp;sn=ec422fbf4d846975f2930ddeb5e81373&amp;amp;chksm=f9041493ce739d85a4b987eece14da627206cdad798f645cc770868312e4a22b6df24804f186&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的出书之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的出书之路&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;日常分享高质量文章，输出 Go 面试、工作经验、架构设计，&lt;span&gt;加微信拉读者交流群，和大家交流！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>