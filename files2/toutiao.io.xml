<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bb8f723d338ad63312c51450ac7eba0e</guid>
<title>连流量染色都没有，你说要搞微服务？</title>
<link>https://toutiao.io/k/9k1wfc7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;strong&gt;&lt;span&gt;一、序言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在当下盛行的微服务架构下，服务数量多导致的依赖问题经常会成为开发过程中的绊脚石。也经常会在各种技术交流会上听到类似的话题，大家都在积极的讨论这种问题如何去解决。于是决定给大家介绍下流量染色的原理以及能解决微服务架构下开发过程中的哪些问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;二、流量染色的概念&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;流量染色说白了就是为对请求的流量打上标签进行染色，然后这个请求在整个链路中都会携带这个标签信息，可以通过标签进行流量的调度等功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于流量染色可以实现很多功能，比如灰度逻辑，蓝绿部署，泳道隔离等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里简单讲下流量染色跟微服务的关系，免得大家觉得这是一篇标题党的文章。试想一下，如果是一个单体应用，还能有流量染色的应用场景吗？请求的大致流程就是App -&amp;gt; 负载均衡 -&amp;gt; 应用，整个链路就很简单，流量染色在这个场景下完全无用武之地。只有在服务数量众多的情况下，一个业务功能涉及到N个服务，才需要对流量进行染色控制来解决我们开发，测试等过程中遇到的问题。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;三、基于流量染色的应用&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;测试环境多套部署的痛点，只需增量部署&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，我们的测试环境除了经常用的T环境，还有很多MF环境。而MF环境基本上是在独立的需求中会用到，正常的版本迭代都是走T环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样就会导致一个问题，很多功能是在T环境进行测试的，当有独立需求需要在MF环境中测试时，就需要部署对应的服务，部署过程中经常会碰到各种配置的缺失或者错误的情况，导致应用无法启动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有一个需求需要在MF环境测试，服务也部署好了，联调的时候却发现依赖的下游服务都没有部署。但这些服务在这个需求是没有改动的，依赖的接口也是已经上线了的功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果没有在对应的环境部署，整个链路就无法调通。所以这个时候又要去找对应的下游，让下游去部署这些服务，下游部署的时候可能也会出现各环境配置不同的问题，导致整个联调前期的耗时较长，影响项目进度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如说当前在开发一个需求，然后会在要改动的应用中配置一个版本，这个版本信息会存储在注册中心的元数据里面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后就去创建一个属于这个需求的泳道（独立环境）进行部署，只需要部署这个需求改动的应用即可。这个应用依赖的下游应用不需要部署，在当前环境找不到对应的服务提供者就去路由到稳定环境，如果稳定环境中也没有就报错。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.3873626373626373&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74DHZeCeXJcZ0liasicgy6y03dQwUdmiackV9qfEQxKkubibiafjI5A9Oxm0sMue3TFP7Ik2ppPyAibx9nPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;研发本地启动随意注册问题&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;研发有的时候会在本地启动服务，主要是用来调试某个问题，好处就是能够快速复现测试环境的问题，及时发现问题代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于本地启动的服务也会注册到注册中心里面，这样测试环境的请求就有可能会路由到研发本地启动的这个服务上，研发本地的这个服务代码有可能不是最新的，导致调用异常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个问题目前常用的解决方案是通过在本地启动时屏蔽掉服务的注册功能，也就是不注册上去，这样就不会被正常的测试请求路由到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果有了流量染色的功能，研发本地启动服务的时候指定一个属于自己的版本号，只要不跟正常测试的版本一致即可。正常测试的请求就不会路由到研发注册的这个实例上。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;应用级别的灰度&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对接口级别的灰度，目前都是在应用内进行灰度控制。但是应用级别的，目前没有特别好的方式来控制灰度。比如有一个技改需求，需要将Redis的Client从Lettuce换成Jedis，这种场景的灰度就是应用级别的，目前的做法就是发布一个节点，然后结束发布流程，具体能被灰度到的量是由服务实例的总数量来决定的，没办法灵活控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果有流量染色，可以新发一个节点，这个节点的版本升级一下，比如之前的版本是V1，那么新发的就是V2版本。首先V1版本肯定是承载生产所有流量的，可以通过网关进行控制让流量按某种方式转发到V2版本，比如用户白名单，地区，用户比例等等。有问题也可以随时将流量切回V1，非常方便。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8143322475570033&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74DHZeCeXJcZ0liasicgy6y03dNq8TiaemWUjdpg44BJW7OWREHL2WVvtGkEqHCnBLk6rXkiaf6Ds6Wqlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1228&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;服务的优雅下线&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务要想无损进行优雅下线，还是需要做很多工作的，比如目前发布时会先将要发布的服务从注册中心注销掉，但是应用内部还是会有服务实例信息的缓存，需要等到一定的时间缓存完成清除后，对应的目标实例才不会被请求到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果基于染色去实现的话，将需要下线的实例信息（IP:PORT）通过配置中心推送给网关进行染色处理，染色信息跟随着请求贯穿整个链路，应用内的负载均衡组件，MQ等中间件会对要下线的目标实例信息进行过滤，这样就不会有流量到要下线的实例上去。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;生产环境发布提速&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，主流的发布都是滚动部署，滚动发布的好处是成本低，不用额外增加部署的资源，一个萝卜一个坑，慢慢替换就是。不好的点在于发布时间长，全链路依赖太严重，如果发布之前依赖关系错乱了，那就是一个线上故障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要解决这个发布速度的问题，可以基于流量染色来实现蓝绿部署。也就是在发布的时候重新部署一个V2的版本，这个V2版本的实例数量跟V1保持一致，由于这个V2版本是没有流量的，所以不存在依赖关系，大家可以同时发布，等到全部发完之后，就可以通过网关进行流量分发了，先分发一点点流量到V2版本进行验证，如果没有问题就可以慢慢放大流量，然后将V1版本的容器释放掉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.158139534883721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74DHZeCeXJcZ0liasicgy6y03d5xIES5Rh8q2DDMYq6iaw0vhScdAYOCYnUEJkuia0PvzYGvicmlmBQAZdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;发布速度确实提升了，可是问题在于蓝绿部署的成本太高了，资源成本要翻倍，虽然发布后老的资源就回收了，但是你总的资源池还是得容纳下这2个版本并行才行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;那有没有折中的方式，既能提高发布&lt;/strong&gt;&lt;strong&gt;效率&lt;/strong&gt;&lt;strong&gt;又能不增加资源成本呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以在发布的时候采用替换的形式，先发布一半的实例，这一半的实例就是我们的V2版本，发布时是没有流量的，所以还是可以并行的去发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;发布完成后，开始放量到V2版本，然后验证。验证之后就可以发布另一半的实例了，这样的方式总的资源是没有变化的，但是有一个比较&lt;strong&gt;严重的问题就是直接停掉了一半的实例，剩下的实例能不能支撑当前的流量，因为交易内的应用都是面向C端用户的，流量很有可能在短时间内达到很高的量。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;全链路压测&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全链路压测对于电商业务来说必不可少，每年有N次大促，都需要提前进行压测来确保大促的稳定。其中全链路压测最核心的一点就是流量的区分，需要区分流量是正常的用户请求还是压测平台的压测流量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只有区分了流量，才能将压测流量进行对应的路由，比如数据库，Redis等流量需要路由到影子库中。基于流量染色就很容易给流量打标，从而区分流量的类型。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;四、流量染色的实现&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;应用要有版本的概念&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个应用都需要有版本的概念，其实就跟每次迭代绑定即可。只不过是要将这个版本信息放入项目中的配置文件里面，项目启动的时候会将这个版本信息跟自身的实例信息一起注册到注册中心里面，这些信息一般称之为元数据（Metadata）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有了Metadata，在控制流量路由的时候才可以根据染色的信息进行对应的匹配，比如某个请求指定了对订单的调用要走V2版本，那么在路由的时候怎么匹配出V2版本的实例信息呢？就需要依赖Metadata。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;染色信息全链路透传&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;染色信息全链路透传这个很关键，如果不能全链路透传就没办法在所有节点进行流量的路由控制。这个染色信息的透传其实跟分布式链路跟踪是一样的原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前主流支持分布式链路跟踪的有Skywalking，Jaeger等等，基本上都借鉴了Google Dapper的思想。每次请求都会在入口处生成一个唯一的TraceId，通过这个TraceId就可以将整个链路关联起来，这个TraceId就需要在整个链路中进行传递，流量染色的信息也是一样需要全链路传递。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传递的手段一般分为两种，一种是在独立的Agent包中进行传递，一种是在基础框架中进行埋点传递。如果内网之间采用Http进行接口的调用，那么就在请求头中将信息进行传递。如果是用RPC的方式，则可以用RpcContext进行传递。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;信息传递到了应用中，在这个应用中还会继续调用其他下游的接口，这个时候要继续透传，一般都是将信息放入到ThreadLocal中，然后在发起接口调用的时候继续透传。这里需要注意的就是用ThreadLocal要防止出现线程池切换的场景，否则ThreadLocal中的信息会丢失。当然也有一些手段来解决ThreadLocal异步场景下的信息传递问题，比如使用transmittable-thread-local。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;流量路由控制&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当流量有了标签信息，剩下的工作就是要根据标签信息将请求路由到正确的实例上。如果内部框架是Spring Cloud体系，可以通过Ribbon去控制路由。如果是Dubbo体系，可以通过继承Dubbo的AbstractRouter重新制定路由逻辑。如果是内部自研的RPC框架，肯定留有对应的扩展去控制路由。&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;五、总结&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;流量染色总体来说还是非常有用的，但这也是一个大的技术改造。除了在基础框架层面要打通染色信息的传递，更为重要的是各业务方的配合，当然如果是Agent方式的接入就更好了，不然每个业务方还要去升级包，确实有点烦。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;-------------  END  &lt;span&gt;-------------&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;扫描下方二维码，加入技术群。暗号：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;加群&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2952127659574468&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WRLYshvT39wMDYmxnbPFQOqE8cEtc1e0zltF6bricK2SHuxScc5MVGb1ONueJMet42wpSNQ6co2vgS9SsxqeVpA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;752&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3dc145c4eba8937ce5972f3dd0c18541</guid>
<title>BFF避坑指南</title>
<link>https://toutiao.io/k/cra0qqz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot; itemprop=&quot;articleBody&quot;&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/08/1.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/use-graphql-build-bff-in-microservices/&quot;&gt;BFF&lt;/a&gt; —— Backends for frontends（服务于前端的后端），是为了让后端API满足不同的前端使用场景，而演进出来的一种模式。BFF在改善前端用户体验上起到了非常大的作用，但因为介于前端和后端之间，在落地实施过程中很容易踩坑，在这篇文章中，我们看看在实施BFF的过程中可能遇到哪些“坑”。为了帮助快速理解后面讲到的问题，我们先来简单回顾下BFF的由来和应用场景。&lt;/p&gt;
&lt;h3&gt;BFF的由来&lt;/h3&gt;
&lt;p&gt;随着移动设备的快速发展以及产品对用户交互体验的关注度增强，前后端分离的架构模式也逐渐被大多数企业所采用。在这种模式下，统一的后端API很难满足在不同场景下对用户体验的不同需求。&lt;/p&gt;
&lt;p&gt;BFF模式应运而生，一方面BFF隔离了前端UI展示对后端API的需求，企业可以专注在后端构建核心业务能力，另一方面，BFF根据已有的后端API，快速满足前端在UI展示上的需求，来不断提升用户体验；&lt;/p&gt;
&lt;p&gt;从知识管理的角度，BFF模式让知识边界定义得更清晰，后端专注于构建业务能力，不需要考虑前端各种场景适配的问题；而前端更关注用户体验，可以随时独立发布更新。&lt;/p&gt;
&lt;h3&gt;BFF的应用场景&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/08/2-1.png&quot; alt=&quot;BFF应用场景（图片来自BFF@SoundCloud）&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;面向前端&lt;/h4&gt;
&lt;p&gt;BFF为前端而生，随着前端技术（iOS、Android、小程序、Web等）的不断发展，不同前端对后端要求有很大差异，后端服务很难提供满足多个前端的统一接口，BFF则可以针对前端的特定需求，作出适配：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对前端UI展示逻辑的不同，对后端API返回的数据进行裁剪和重新组织，提供面向前端的定制化格式的数据。&lt;/li&gt;
&lt;li&gt;根据前端业务需求，对后端多个API返回的数据进行聚合。&lt;/li&gt;
&lt;li&gt;对一些特定场景的数据进行缓存，提高性能，进而提升用户体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;面向后端&lt;/h4&gt;
&lt;p&gt;BFF隔离了前端UI展示对后端API的定制化需求，可以很好地支持后端服务的演进：&lt;/p&gt;

&lt;h3&gt;BFF实践的三大问题&lt;/h3&gt;
&lt;p&gt;BFF模式在前后端分离的架构模式下的确有很多好处，完美隔离了前后端，貌似从此以后前端干前端的，后端干后端的，大大降低前后端之间的冲突和依赖。然而事实并非如此，在实施BFF的过程中，大家仍然会遇到各种问题，我总结了实施落地BFF三大常见问题如下：&lt;/p&gt;
&lt;h4&gt;问题一：重复代码&lt;/h4&gt;
&lt;p&gt;通常情况下我们会为每个不同的前端构建一个BFF，还可能会为一些特定的场景建立BFF（如对第三方系统提供API），不可避免地，多个BFF之间会出现大量的重复代码，比如可能会存在相同的数据转换逻辑，相同的API数据聚合逻辑等等。&lt;/p&gt;
&lt;p&gt;重复代码通常被认为是一种坏味道，但在BFF这个场景下，这些重复的代码是为了某一个特定的前端服务的，因此处理这个重复要相对谨慎，如果一味粗暴地去掉这些重复，很有可能引发某一个前端需求变化会影响到其他前端应用的情况。&lt;/p&gt;
&lt;p&gt;如果确实有些代码重复且相对稳定，可以尝试采取下面的方法来消除重复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享库，将重复的代码抽取出来放到共享库中，不同的BFF通过依赖共享库来达到代码复用，但要考虑哪些代码能够抽取到共享库中，可以参考我之前的文章《&lt;a href=&quot;https://maguangguang.xyz/2020/how-to-deal-with-shared-library&quot;&gt;消灭微服务的坏味道 之 共享库&lt;/a&gt;》。&lt;/li&gt;
&lt;li&gt;将重复的代码放到后端服务中，这种方法适用于重复的代码实际承载了真实的业务逻辑，而不只是在做简单的数据聚合和数据格式转换，那么应该把这些重复的代码下沉到指定的后端服务中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;问题二：滑向ESB（Enterprise Service Bus，企业服务总线）&lt;/h4&gt;
&lt;p&gt;除了大量的重复代码，在微服务架构下，另外一个问题通常会出现在业务演进过程中。当新的业务需求产生时，具体要在哪个后端服务中实现有时候不是一个很容易回答的问题，特别是不同的服务有不同的团队归属时，如果每个服务的归属团队都认为新的业务需求不是自己服务的业务范畴，最可能的结果就是让BFF负责帮忙组合各个服务的功能，完成这个新的业务需求。渐渐地，BFF朝着&lt;a href=&quot;https://en.wikipedia.org/wiki/Enterprise_service_bus&quot;&gt;ESB&lt;/a&gt;的方向发展，变成了集成各个微服务，对外提供新能力的中间件。&lt;/p&gt;
&lt;p&gt;这种趋势某种程度上违背了BFF设计的初衷，BFF为了适配前端而生，更关注解决前端的用户体验问题，而真实的业务能力应该由后端服务来承接，而不是BFF。&lt;/p&gt;
&lt;p&gt;要解决这个问题，首先要清晰地定义每个服务的业务职责，为了避免服务过多很难划分清晰边界，最开始服务尽量不要拆得太小；另外要建立规则来处理新的需求，哪些需求属于BFF的范畴，哪些属于业务能力，业务能力应该下沉到后端服务中，如果现有服务无法承载这种能力，可以考虑新增服务，而不是写在BFF中。&lt;/p&gt;
&lt;h4&gt;问题三：性能问题&lt;/h4&gt;
&lt;p&gt;第三个比较常见的问题就是性能问题，相信你一定遇到过下面的场景，既然有了BFF，前端的设计开始放飞自我，可以把想展示的信息一股脑都放在一起展示，极端情况下BFF可以获取到任意服务的数据进行组合，我曾见过在一个BFF接口中调用了后端服务几十次来拼凑前端需要的数据，可想而知这个接口的性能一定很差。&lt;/p&gt;
&lt;p&gt;为了解决这种情况带来的性能问题，通常会采用并发获取数据然后拼装的方式，这明显增加了代码实现和维护的复杂度，往往会引发新的问题。&lt;/p&gt;
&lt;p&gt;因此，在实际开发过程中要非常警惕这种问题的发生，如果一个BFF接口调用了3个以上接口，那就要警惕了，需要分析下后端服务拆分得合不合理，前端UI展示的数据是否有必要放在一起，否则性能问题会逐渐成为一个不可避免的问题。&lt;/p&gt;
&lt;h3&gt;小结&lt;/h3&gt;
&lt;p&gt;架构设计是通过合理的组件拆分以及定义组件之间的关系，将系统整体的复杂性分散到不同的组件中，在更低的维度上解决问题，分而治之。BFF在前后端分离的架构模式下隔离了前端和后端的关注点，特别是在多个前端或第三方的情况下，BFF都是非常好的选择。然而，在实施过程中，仍然要时刻警惕，明确BFF设计的初衷，避免因引入BFF而带来了更多的问题。&lt;/p&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;

&amp;#13;
&lt;/div&gt;&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f45daef016825ef1f5594b836d5e215d</guid>
<title>不超过百行的SQL文件提取器</title>
<link>https://toutiao.io/k/59s3dpn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;数据是互联网的灵魂、没有数据互联网就是一个无用的空壳子，像人工智能、大数据、智能算法等。都是需要基础数据来验证模型是否是可用的，来进行调参矫正算法的可用性、帮助算法的落地，对算法起到最关键的作用。所以数据的获取以及对数据的处理就是非常重要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常的数据格式是txt、sql、excel以及word，其中最重要的还是SQL中的数据、SQL数据包括MySQL、SQLServer、SQLite、Oracle等，导出的数据格式。&lt;/span&gt;&lt;span&gt;常用的数据处理语言是Python、因为Python是个胶水语言，没有Python搞不定的事。&lt;/span&gt;&lt;span&gt;Python比较适合做些快速、时间紧、参与人员较少，切性能要求不高的项目，而且Python成熟的库很多、这也是它&lt;/span&gt;&lt;span&gt;被称为&lt;/span&gt;&lt;span&gt;胶水语言的原因&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;技术要求需要懂得python3的基础语法以及对正则表达式有基础了解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;实现步骤&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;读取SQL文件中的数据、去除多余的内容并提取需要的数据、追加到集合中；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;第一步：读取area.sql文件，去除多余内容提取需要添加的数据&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;第二步：定义转换后的文件地址，写入文件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;opens = open(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;./data/area.sql&quot;&lt;/span&gt;, encoding=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;codeline = opens.readlines()  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonList = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; codeline:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; re.match(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;INSERT&quot;&lt;/span&gt;, line):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jsonList.append(re.findall(re.compile(&lt;span class=&quot;code-snippet__string&quot;&gt;r&#x27;[(](.*?)[)]&#x27;&lt;/span&gt;, re.S), line))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;2.将集合中的数据转成json格式；&lt;/p&gt;&lt;p&gt;3. 定义转换后的文件地址并写入文件中&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonArray = json.dumps(jsonList)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonOpen = open(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;./data/areaToJson.txt&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;w&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonOpen.writelines(str(jsonArray))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;opens.close()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonOpen.close()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所有代码：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;第一步：读取area.sql文件，去除多余内容提取需要添加的数据&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;第二步：定义转换后的文件地址，写入文件&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;opens = open(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;./data/area.sql&quot;&lt;/span&gt;, encoding=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;codeline = opens.readlines()  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonList = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; codeline:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; re.match(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;INSERT&quot;&lt;/span&gt;, line):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        jsonList.append(re.findall(re.compile(&lt;span class=&quot;code-snippet__string&quot;&gt;r&#x27;[(](.*?)[)]&#x27;&lt;/span&gt;, re.S), line))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonArray = json.dumps(jsonList)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonOpen = open(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;./data/areaToJson.txt&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;w&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonOpen.writelines(str(jsonArray))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;opens.close()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jsonOpen.close()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;实现的结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.45085995085995084&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceF2GPUXN9NIZicfsm92DXnUKtvOSkIkjia4U2BtiaHUKQeI1tu3YEmfD3WicsnOEjvJGvetooYL1hmvtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1628&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;细微思路的发现、并将该思维实现产品中逐渐放大化，最终实现体系走向产品运营。&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c03f73479a2424bd072a0c9bff1c441f</guid>
<title>业务交互网关洪峰应对之道</title>
<link>https://toutiao.io/k/nxzl7n5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.16645489199491742&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjmicyTsxu1HzT5HJX9ckCBxHX9LkC86WPaOicibXyHA8h7aYx4iam3DSWFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4722&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在日常工作中相信大家都会遇到数据洪峰这样的场景，例如电商平台搞活动时，大量的请求集中在一小段时间内，此时对系统造成的压力远超平常，如果不事先做好相应的防范措施，系统将极有可能崩溃、不可用。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;业务背景&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;我们的应用系统每天都会产生大量的业务数据（可以简单理解为商品、订单等），有很多与我们合作的&lt;strong&gt;外部平台&lt;/strong&gt;需要&lt;strong&gt;订阅&lt;/strong&gt;这些数据，此时我们内部存在一个&lt;strong&gt;数据推送平台&lt;/strong&gt;负责将我们系统内部数据推送至外部合作伙伴，数据链路如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2610789980732177&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjezHsCKBnBbniczFwHsJYyA2b4mPKfGT5LW65w8liceDhZp5vu1I1f8ibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1038&quot;/&gt;&lt;/figure&gt;&lt;p&gt;内部业务系统投递&lt;strong&gt;不同类型的业务数据&lt;/strong&gt;至 &lt;code&gt;MQ&lt;/code&gt;，&lt;strong&gt;数据推送平台&lt;/strong&gt;通过消费 &lt;code&gt;MQ&lt;/code&gt; 消息，进行一系列处理后采用&lt;strong&gt;异步&lt;/strong&gt;的方式将数据推送至不同的合作伙伴 。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;技术背景&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;方案选择&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;一般应对高并发场景常见的三板斧就是&lt;code&gt;缓存&lt;/code&gt;、&lt;code&gt;熔断（降级）&lt;/code&gt;、&lt;code&gt;限流&lt;/code&gt;：&lt;/p&gt;&lt;p&gt;&lt;code&gt;缓存&lt;/code&gt; 常用于高 &lt;code&gt;QPS&lt;/code&gt; 的业务场景，显然不太适用这种数据推送的情况。&lt;/p&gt;&lt;p&gt;&lt;code&gt;熔断（降级）&lt;/code&gt;一般应用于调用下游服务失败，防止雪崩效应的场景。&lt;strong&gt;数据推送平台&lt;/strong&gt;相对独立，不存在内部服务调用的情况；但是&lt;strong&gt;外部的合作伙伴&lt;/strong&gt;确实存在服务可用性的问题，经常出现各种情况导致数据推送异常，因此是可以针对出现异常的外部合作伙伴采用 &lt;code&gt;熔断（降级）&lt;/code&gt;的处理。&lt;/p&gt;&lt;p&gt;&lt;code&gt;限流&lt;/code&gt; 就是当高并发或者瞬时高并发时，为了保证系统的稳定性、可用性，系统以牺牲部分请求为代价或者延迟处理请求为代价，保证系统整体服务可用，该种方案与我们的业务场景极为契合。&lt;/p&gt;&lt;p&gt;&lt;code&gt;熔断（降级）&lt;/code&gt; 确实可以解决部分外部平台偶发性不可用导致我们的系统资源被占用问题，但无法解决我们数据洪峰场景带来的根本性问题：&lt;strong&gt;系统资源的有限性&lt;/strong&gt;，因此数据推送平台选择了&lt;strong&gt;限流&lt;/strong&gt;来应对数据洪峰的场景。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;方案应用&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt; &lt;p&gt;限流的具体方案有很多，常见的有 &lt;code&gt;令牌桶方式&lt;/code&gt;、&lt;code&gt;漏桶方式&lt;/code&gt;、&lt;code&gt;计数器方式&lt;/code&gt;，其中 &lt;code&gt;计数器方式&lt;/code&gt; 按照实现方式又可以细分为 &lt;code&gt;AtomicInteger&lt;/code&gt;、&lt;code&gt;Semaphore&lt;/code&gt;、&lt;code&gt;线程池&lt;/code&gt; 等，本次我们选择计数器的方式。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;在数据推送时，如果采用同步推送的方式，推送效率将会因 &lt;code&gt;MQ&lt;/code&gt; 消费者线程数量（默认设置20）受到极大的限制，如果采用线程池的方式而线程池的大小也不便设置（因为每个消息体的大小差异极大，从 &lt;code&gt;1K&lt;/code&gt; 到 &lt;code&gt;5M&lt;/code&gt; 不等）。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;结合上诉因素，同时与&lt;strong&gt;外部合作伙伴&lt;/strong&gt;对接时绝大部分场景都是采用 &lt;code&gt;HTTP&lt;/code&gt; 的传输协议，最终推送时采用 &lt;code&gt;Apache&lt;/code&gt; 的 &lt;code&gt;HttpAsyncClient&lt;/code&gt; （内部基于 &lt;code&gt;Reactor&lt;/code&gt; 模型）&lt;strong&gt;异步模式&lt;/strong&gt; 执行网络请求，&lt;code&gt;Callback&lt;/code&gt; 回调的方式来获取推送结果。&lt;strong&gt;将业务数据类型作为限流维度，根据在当前应用实例中正在推送的数量进行限流。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;例如手机相关的商品数据业务类型为 &lt;strong&gt;PRODUCT_PHONE，&lt;/strong&gt;默认每种业务类型的 &lt;strong&gt;限流数设为 50&lt;/strong&gt;，当 &lt;strong&gt;单台应用实例内存中&lt;/strong&gt; 该种业务类型&lt;strong&gt;正在推送&lt;/strong&gt;的数据量达到 &lt;strong&gt;50&lt;/strong&gt; 后，该业务类型的数据从第 &lt;strong&gt;51&lt;/strong&gt; 条开始都将会被拒绝，直到&lt;strong&gt;正在推送&lt;/strong&gt;的数据量降至 &lt;strong&gt;50&lt;/strong&gt; 以下。针对被拒绝的消息返给 &lt;code&gt;MQ&lt;/code&gt; 稍后消费的状态， &lt;code&gt;MQ&lt;/code&gt; 将会间歇性消费重试。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;伪代码如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt; &lt;span&gt;//该业务类型在当前节点的流量&lt;/span&gt;&lt;br/&gt; Integer flowCount = BizFlowLimitUtil.get(data.getBizType());&lt;br/&gt; &lt;span&gt;//该种业务类型对应的限流&lt;/span&gt;&lt;br/&gt; Integer overload = BizFlowLimitUtil.getOverloadOrDefault(data.getBizType(), &lt;span&gt;this&lt;/span&gt;.defaultLimit);&lt;br/&gt; &lt;br/&gt; &lt;span&gt;if&lt;/span&gt; (flowCount &amp;gt;= overload) {&lt;br/&gt;       &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; OverloadException(&lt;span&gt;&quot;业务类型:&quot;&lt;/span&gt; + data.getBizType() + &lt;span&gt;&quot;负载过高，阈值:&quot;&lt;/span&gt; + overload + &lt;span&gt;&quot;，当前负载值:&quot;&lt;/span&gt; + flowCount);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;数据推送平台内增加了业务限流的一环：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26204238921001927&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjUibqegMCl26Y47XkeEKY9paqsENchmGG2aB5srgNgkL63kVgicTn9pzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1038&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;可能存在的问题&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;按照上述的方案，系统应对数据洪峰的 &lt;strong&gt;所需最大资源 = 业务类型种数 * 限流数&lt;/strong&gt;，而随着业务的扩张，&lt;strong&gt;业务类型种数&lt;/strong&gt;也在不断的增加，&lt;strong&gt;所需最大资源&lt;/strong&gt;也会不断的增加，然而服务实例的资源始终是有限。在该种情况下，只根据业务数据类型的数据量来进行限流，效果将会逐渐变得不理想，极端场景下甚至可能出现服务崩溃的情况。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;压力测试&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;当然以上方案存在的问题只是我们的一个设想，我们进行压测来观察推送系统的整体情况。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;资源配置&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;应用实例数量：1&lt;/p&gt;&lt;p&gt;实例配置：1核2G&lt;/p&gt;&lt;p&gt;jvm参数：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;-Xmx1g -Xms1g -Xmn512m -XX:SurvivorRatio=10 -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSMaxAbortablePrecleanTime=5000 -XX:+CMSClassUnloadingEnabled -XX:CMSInitiatingOccupancyFraction=80 -XX:+UseCMSInitiatingOccupancyOnly -XX:+ExplicitGCInvokesConcurrent -XX:ParallelGCThreads=2 -Xloggc:/opt/modules/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/modules/java.hpro&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;数据指标及工具选择&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在压测时我们通常会关注 &lt;code&gt;cpu&lt;/code&gt;、&lt;code&gt;内存&lt;/code&gt;、&lt;code&gt;网络io&lt;/code&gt;、&lt;code&gt;数据库&lt;/code&gt; 等多项数据指标，在不考虑 &lt;code&gt;网络io&lt;/code&gt;、&lt;code&gt;数据库&lt;/code&gt;等外部中间件因素的情况下，&lt;code&gt;cpu&lt;/code&gt;、&lt;code&gt;内存&lt;/code&gt; 是我们观察系统稳定性最为直观的数据指标。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Arthas&lt;/code&gt; 是 &lt;code&gt;Alibaba&lt;/code&gt; 开源的 &lt;code&gt;JAVA&lt;/code&gt; 诊断工具，具体使用可阅读官方文档：https://arthas.aliyun.com/doc/。我们使用 &lt;code&gt;Arthas&lt;/code&gt; 来对服务进行观测，登录服务器打开控制台，使用如下命令安装并启动 &lt;code&gt;Arthas&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;curl -O https://arthas.aliyun.com/arthas-boot.jar&lt;br/&gt;java -jar arthas-boot.jar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Arthas&lt;/code&gt; 提供了 &lt;code&gt;dashboard&lt;/code&gt; 命令，可以查看服务 &lt;code&gt;JVM&lt;/code&gt; 的实时运行状态，如不指定刷新间隔时间，默认 &lt;strong&gt;5s&lt;/strong&gt; 刷新一次。在启动 &lt;code&gt;Arthas&lt;/code&gt;后的控制台键入 &lt;code&gt;dashboard&lt;/code&gt; 出现如下画面：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39954725523486134&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjzpKDRJDI9StkhcoFtLlJtIJoeHPd6HYhYiafGd0YgNd2gl8icoibqYZrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1767&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上半部分主要是当前服务 &lt;code&gt;JVM&lt;/code&gt; 中的线程情况，可以看到各线程对 &lt;code&gt;cpu&lt;/code&gt; 的使用率极低，基本处于闲置状态。&lt;/p&gt;&lt;p&gt;下半部分 &lt;strong&gt;Memory&lt;/strong&gt;框中的信息，我们主要关心以下几项数据指标：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;heap（堆大小）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;par_eden_space（伊甸区大小）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;par_survivor_space（S区大小）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;cms_old_gen（老年代大小）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gc.parnew.count（young gc总次数）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gc.parnew.time（young gc总耗时）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gc.concurrentmarksweep.count（full gc总次数）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gc.concurrentmarksweep.time（full gc总耗时）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;各列代表的意思也很清楚，分别是已使用、总大小、最大值、已使用百分比。光看名词可能一时想不起 &lt;code&gt;JVM&lt;/code&gt; 内部的划分 ，来一张图帮助大家回忆下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5358649789029536&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjfe0vYnjKicy0Sx4STl1MQAzLkXPr6NlZJK50GiaCy47bMjy2U3vxWZCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;5s&lt;/strong&gt; 后 &lt;code&gt;Arthas&lt;/code&gt; 控制台输出如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40250855188141393&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYj8fYJFa7FsceXH5IZ35t4UddAKuDLFagO7KUSq5DZBxnFjkPv7hKWhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p&gt;结合&lt;span&gt; &lt;/span&gt;&lt;strong&gt;5s&lt;/strong&gt;前的数据，我们主要关注以下指标：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;线程情况：线程cpu使用率并没有明显变化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;heap（堆大小）：&lt;strong&gt;堆使用大小增加 3m&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;par_eden_space（伊甸区大小）：&lt;strong&gt;年轻代中的伊甸区只增加 3m，按照伊甸区 426m、s区 42m 的大小，大约需要780秒（约13分钟）才会触发一次 young gc&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;par_survivor_space（S区大小）：无变化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;cms_old_gen（老年代大小）：无变化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;gc.parnew.count（young gc总次数）：无变化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;gc.parnew.time（young gc总耗时）：无变化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;gc.concurrentmarksweep.count（full gc总次数）：无变化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;gc.concurrentmarksweep.time(full gc总耗时)：无变化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这是服务无流量基本处于闲置状态时一个情况，接下来模拟积压大量&lt;strong&gt;不同业务类型数据&lt;/strong&gt;进行推送时的场景，数据由测试同学提前通过自动化脚本投递到 &lt;code&gt;MQ&lt;/code&gt; 当中。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;积压5000条数据&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;Arthas&lt;/code&gt; 命令 &lt;code&gt;dashboard -i 1000&lt;/code&gt; ，按照 &lt;strong&gt;1s&lt;/strong&gt; 的间隔输出：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40675990675990675&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjPv76PMsrwnUHOlMaZagSedSjUibK9fzpsNs1pKLIea8KhIM4rYfCic8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1716&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;1s&lt;/strong&gt; 后：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.39306698002350177&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjqBiaguiaFuvau274FD8p0qQM1cMFDPz9ewjjSxd8hyibNe0vDFSiceceBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1702&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对比两次数据发现：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;线程情况：&lt;code&gt;MQ&lt;/code&gt; 默认的20个消费者线程都处于活跃状态占用cpu资源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;heap（堆大小）：&lt;strong&gt;已使用大小从 293m 上升至 478m&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;par_eden_space（伊甸区大小）：&lt;strong&gt;发生 young gc 之前伊甸区使用 23m，伊甸区总大小为 426m，发生 young gc 之后伊甸区使用了 211m，这说明在 1s 之内至少增加了（426-23）+211 = 614m 大小的对象&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;par_survivor_space（S区大小）：&lt;strong&gt;young gc 之前S区大小为 31m，young gc 之后S区大小为 29m&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;cms_old_gen（老年代大小）：无变化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gc.parnew.count（young gc总次数）：&lt;strong&gt;发生了 1 次 young gc&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gc.parnew.time（young gc总耗时）：&lt;strong&gt;时间增加了（9018-8992）= 26 毫秒，为一次 young gc 的时长&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gc.concurrentmarksweep.count（full gc总次数）：无变化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gc.concurrentmarksweep.time(full gc总耗时)：无变化&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;按照 &lt;strong&gt;1s&lt;/strong&gt; 的间隔发现发生了 &lt;strong&gt;young gc&lt;/strong&gt;，而老年代的数据没有变化，可能是时间间隔较短导致的，我们按照 &lt;strong&gt;5s&lt;/strong&gt; 的间隔来观察下，键入 &lt;code&gt;dashboard -i 5000&lt;/code&gt; 输出如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41196777905638665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjlZrBlHvaw3bJG4N7s6wRSADDSAwusgS8Dozahkbibd76ZSxnvtzb5Tg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1738&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;5s&lt;/strong&gt; 后：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4089603676048248&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjNK6zicofX64Fdq4Eu88poyd6ia8iadBrsruoGY8WF4SQE08Uz2g38zt4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1741&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对比两次数据，关键信息如下：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;5s 之内发生了 7 次 young gc&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;老年代由 233m 增长至 265m，增长了 32m 左右，按照老年代 512m 的大小，大约 80s 就会发生一次 full gc&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;积压1W条数据&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;按照 &lt;strong&gt;1s&lt;/strong&gt; 的时间间隔开始：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4069239500567537&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjEWq5FZ6lYdwq6M9a38Mico2vic3QdicRauA0SlSibDSTV3yh3vdszQiaw5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1762&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;1s&lt;/strong&gt; 后：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41233580810965165&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjKKTvRPUN1GURtibSugQM1ZYTEw57qzDOrGLRicfDs8gicXQgznB0qQiaeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1751&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对比两次数据得知：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;1s 之内发生了两次 young gc&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;同时老年代从 304m 增长至 314m，1s 增长了 10m，老年代大小为 512m，按照这个速率，大约 50s 就会触发一次 full gc&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;由于采用&lt;strong&gt;异步&lt;/strong&gt;的方式进行数据推送，此时推送平台的下游还未将数据推送完成，而上游还在不断的从&lt;code&gt;MQ&lt;/code&gt;中消费消息，继续观察：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4011363636363636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjGXjM6LEpUUkIdicD5kIHcicAgAvBDBgF9tqfaRLUMhFmvh1FkI9DmFnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1760&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;1s&lt;/strong&gt; 后：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4141298104537622&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjbAxfCP0ghmzpYYPdsic4zJxaZQpQ28QWVEVM4vcRIxEZ7icPVgMl54kg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1741&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对比两次数据发现：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;GC 线程的 cpu 使用率居高不下&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;1s 内发生了一次 full gc&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一秒前老年代已使用大小为 418m，总大小为 512m，1s 后发现触发了一次 full gc&lt;/strong&gt;，按照上面的数据分析出老年代以每 &lt;strong&gt;10m/s&lt;/strong&gt; 的速度增长，显然老年代的剩余空间是足够的，为什么还会提前出现 &lt;strong&gt;full gc&lt;/strong&gt; 这种情况呢？&lt;/p&gt;&lt;p&gt;首先我们回顾一下 &lt;strong&gt;full gc&lt;/strong&gt;发生的时机：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一种情况：&lt;/strong&gt;老年代可用内存小于年轻代全部对象大小，同时没有开启空间担保参数（&lt;code&gt;-XX:-HandlePromotionFailure&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;从 &lt;code&gt;JDK6&lt;/code&gt; 之后，&lt;code&gt;HandlePromotionFailure&lt;/code&gt; 参数不会再影响到虚拟机的空间分配担保策略，我们使用的都是 &lt;code&gt;JDK8&lt;/code&gt;，所以第一种情况不满足。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二种情况：&lt;/strong&gt;老年代可用内存小于年轻代全部对象大小，开启了空间担保参数，但是可用内存小于历次年轻代GC后进入老年代的平均对象大小。&lt;/p&gt;&lt;p&gt;根据之前的分析，每秒进入老年代的对象大小大约为 &lt;strong&gt;10m&lt;/strong&gt;，而目前老年代剩余大小约为（&lt;strong&gt;512-418）= 94m&lt;/strong&gt;，所以第二种情况也不满足。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三种情况：&lt;/strong&gt;年轻代 &lt;strong&gt;young gc&lt;/strong&gt; 后存活对象大于s区，就会进入老年代，但是老年代内存不足。&lt;/p&gt;&lt;p&gt;同第二种情况，第三种情况也不太满足。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第四种情况：&lt;/strong&gt;设置了参数 &lt;code&gt;-XX:CMSInitiatingOccupancyFaction&lt;/code&gt;，老年代可用内存大于历次年轻代GC后进入老年代的对象的平均大小，但是老年代已使用内存超过该参数指定的比例，自动触发&lt;strong&gt;full gc&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;查看服务实例的资源配置信息，发现 &lt;code&gt;JVM&lt;/code&gt; 启动参数中加了该参数： &lt;code&gt;-XX:CMSInitiatingOccupancyFraction=80&lt;/code&gt;，&lt;strong&gt;该参数表示老年代在达到 512 * 80% = 409M&lt;/strong&gt; 大小时就会触发一次 &lt;strong&gt;full gc&lt;/strong&gt;。该参数主要是为了解决 &lt;strong&gt;CMF（Concurrent Mode Failure）&lt;/strong&gt;问题，不过该参数在某些情况也会导致 &lt;strong&gt;full gc&lt;/strong&gt; 更加频繁。看来就是该参数就是老年代空间未满却提前出现了 &lt;strong&gt;full gc&lt;/strong&gt;的原因。&lt;/p&gt;&lt;p&gt;现在我们知道了提前触发了 &lt;strong&gt;full gc&lt;/strong&gt; 的原因是由于 &lt;code&gt;CMSInitiatingOccupancyFraction&lt;/code&gt; 参数的配置，正常情况下设为 &lt;strong&gt;80%&lt;/strong&gt; 也不会有什么问题，但是有没有这种极端情况呢：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;发生 full gc 后老年代的空间并没有回收多少，老年代已使用空间大小一直在 &lt;code&gt;CMSInitiatingOccupancyFraction&lt;/code&gt; 设定的阈值之上，导致不停的 full gc ？&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;积压2W条数据&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;按照 &lt;strong&gt;5s&lt;/strong&gt; 的时间间隔开始：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40812821980538067&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjMtDbk7D3DSyyibmlJRjicaicJP5O8UvJ6c8By7uZwyeyOeaMM64BynMpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1747&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;5s&lt;/strong&gt; 后：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4120343839541547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjeHyxibZcTLFUpP1ichLRWA4pat2PYjkFb2Dx2O47s0pMljwmjrXlPYbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1745&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对比两次数据发现：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;线程情况：&lt;strong&gt;cms 垃圾回收线程 cpu 占用率极高&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;老年代：&lt;strong&gt;已使用 511m（总大小 512m）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;full gc次数：&lt;strong&gt;5s 内发生了 3 次 full gc&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;full gc总耗时：&lt;strong&gt;总耗时由 15131ms 增加至 14742ms&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;5s &lt;strong&gt;内发生了 &lt;strong&gt;3&lt;/strong&gt; 次 &lt;strong&gt;full gc&lt;/strong&gt;，老年代始终处于&lt;/strong&gt;已使用 511m（总大小512m）&lt;/strong&gt;的情况,每次的 &lt;strong&gt;full gc&lt;/strong&gt; 平均耗时 &lt;strong&gt;（81942-79740）/ 3 = 734 ms&lt;/strong&gt;，相当于 &lt;strong&gt;5s 内有 2.2s 的时间都在 full gc&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;此时查看日志发现数据推送时发生大量的&lt;strong&gt;socket 连接超时&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3091286307053942&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYj6KcXEeBdFb5RGcFoHmObNV7rLL1ee2PE3U6hf4UfNOjhYDHbdLia2WA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;964&quot;/&gt;&lt;/figure&gt;&lt;p&gt;再查看下当时的 &lt;strong&gt;gc &lt;strong&gt;日志，发现两次 &lt;strong&gt;full gc&lt;/strong&gt; 之间只差了&lt;/strong&gt;1.4s&lt;/strong&gt; 左右，从 &lt;strong&gt;524287k &lt;strong&gt;回收至 &lt;strong&gt;524275k&lt;/strong&gt;，&lt;/strong&gt;只回收了 12k 的内存空间，却花费了 0.71s&lt;/strong&gt;，&lt;strong&gt;系统有一半的时间都在进行 full gc！&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49178470254957507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjBzyicabHHofxBEQSBw5RaiaWNPc02Dflxich1NZ9fAJzCySrz61S1fX5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1765&quot;/&gt;&lt;/figure&gt;&lt;p&gt;使用监控大盘 &lt;code&gt;grafana&lt;/code&gt; 查看下当时的 &lt;strong&gt;cpu&lt;/strong&gt;、&lt;strong&gt;网络io&lt;/strong&gt; 情况，可以看到由于 &lt;strong&gt;full gc&lt;/strong&gt; 频繁引发 &lt;strong&gt;Stop the World&lt;/strong&gt;、 &lt;strong&gt;cpu 负载过高&lt;/strong&gt;等问题，网络请求相关的线程得不到有效的调度，导致 &lt;strong&gt;网络 io 吞吐下降&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8161434977578476&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYj0RiaHQMkwdyDqUnfrhGC63v6HBM3gibQJqWgZVfGNQj2UDibD6iautqicBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;892&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;优化方案&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;问题分析&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;通过上面的测试可以发现系统存在的问题主要是：由于下游消费速率（执行网络请求进行数据推送）跟不上上游的投递速率（mq消费），导致 &lt;code&gt;jvm&lt;/code&gt; 堆内存逐渐被打满，系统频繁 &lt;strong&gt;full gc&lt;/strong&gt; 造成服务不可用，直至产生 &lt;strong&gt;OOM&lt;/strong&gt;程序崩溃。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;优化思路&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在该场景中系统的主要瓶颈在于 &lt;code&gt;jvm&lt;/code&gt; 堆内存大小上面，避免系统频繁 &lt;strong&gt;full gc&lt;/strong&gt; 即可达到提升系统稳定性的目的，可以从以下两方面着手。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;JVM参数优化&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;原来的 &lt;code&gt;jvm&lt;/code&gt; 参数为：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;-Xmx1g -Xms1g -Xmn512m -XX:SurvivorRatio=10 -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSMaxAbortablePrecleanTime=5000 -XX:+CMSClassUnloadingEnabled -XX:CMSInitiatingOccupancyFraction=80 -XX:+UseCMSInitiatingOccupancyOnly -XX:+ExplicitGCInvokesConcurrent -XX:ParallelGCThreads=2 -Xloggc:/opt/modules/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/modules/java.hpro&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调整点如下：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;实例总内存为2G，实例上除了我们的服务之外也没有安装其他比较占用内存的服务，原来给 &lt;code&gt;jvm&lt;/code&gt; 的堆大小只分配了1G，有点浪费，所以调整&lt;code&gt;jvm&lt;/code&gt; 的堆大小为1.5G：&lt;code&gt;-Xmx1536M -Xms1536M&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;之前年轻代大小设为 &lt;strong&gt;512M&lt;/strong&gt; 在数据推送平台这种业务场景并不太恰当。在晚上业务低峰期，通过 &lt;code&gt;jmap &lt;/code&gt;命令触发 &lt;strong&gt;full gc&lt;/strong&gt; 后观察老年代发现常驻对象约 &lt;strong&gt;150M&lt;/strong&gt; 左右，考虑浮动垃圾等，老年代分配 &lt;strong&gt;521M&lt;/strong&gt;，再考虑到元空间以及线程栈所需的资源，所以年轻代调整为 &lt;strong&gt;1G&lt;/strong&gt; 大小：&lt;code&gt;-Xmn1024M&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;年轻代中的伊甸区和s区的比例由 &lt;strong&gt;10:1:1&lt;/strong&gt; 调整为 &lt;strong&gt;8:1:1&lt;/strong&gt;，避免 &lt;strong&gt;young gc&lt;/strong&gt; 后存活对象过多s区空间不足导致直接进入老年代： &lt;code&gt;-XX:SurvivorRatio=8&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;元空间大小一般分配 &lt;strong&gt;256m&lt;/strong&gt;：&lt;code&gt;-XX:MaxMetaspaceSize=256M -XX:MetaspaceSize=256M&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线程栈一般设为&lt;strong&gt;1m&lt;/strong&gt;：&lt;code&gt;-Xss1M&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;针对年轻代使用 ParNew 垃圾收集器：&lt;code&gt;-XX:+UseParNewGC&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最终优化后的 &lt;code&gt;jvm&lt;/code&gt; 参数为：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;-Xmx1536M -Xms1536M -Xmn1024M -Xss1M -XX:MaxMetaspaceSize=256M -XX:MetaspaceSize=256M -XX:SurvivorRatio=8&lt;br/&gt; -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSMaxAbortablePrecleanTime=5000 -XX:+CMSClassUnloadingEnabled -XX:CMSInitiatingOccupancyFraction=80 -XX:+UseCMSInitiatingOccupancyOnly -XX:+ExplicitGCInvokesConcurrent -Xloggc:/opt/modules/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/modules/java.hprof&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;JVM资源限流&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;通过压测发现老年代的空间使用率过高（超过 &lt;code&gt;-XX:CMSInitiatingOccupancyFraction&lt;/code&gt; 参数值）导致频繁发生 &lt;strong&gt;full gc&lt;/strong&gt; ，那么是否可以尝试基于 &lt;code&gt;jvm&lt;/code&gt; &lt;strong&gt;堆内存使用率来对上游进行限流控制&lt;/strong&gt;，起到一个类似背压的效果。我们添加一个&lt;strong&gt;JVM资源限流器&lt;/strong&gt;，限流核心逻辑为：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;设定一个 &lt;code&gt;jvm&lt;/code&gt; 堆内存的使用率，当超过这个阈值后对当前的消费线程进行阻塞或直接拒绝消费，直到使用率低于阈值后再进行放行&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;伪代码如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ResourceLimitHandler&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * jvm堆限流阈值&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer threshold = &lt;span&gt;70&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 单次睡眠时间(毫秒)&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer sleepTime = &lt;span&gt;1000&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 最大阻塞时间(毫秒)&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer maxBlockTime = &lt;span&gt;15000&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;process&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; startTime = System.currentTimeMillis();&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;double&lt;/span&gt; percent = &lt;span&gt;this&lt;/span&gt;.getHeapUsedPercent();&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;//jvm heap使用率超过阈值，进入限流逻辑&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (percent &amp;gt;= &lt;span&gt;this&lt;/span&gt;.threshold ) {&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;//资源使用过高,但超过最大阻塞时间，采用放行策略&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.maxBlockTime &amp;gt;= &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; (System.currentTimeMillis() - startTime) &amp;gt; &lt;span&gt;this&lt;/span&gt;.maxBlockTime) {&lt;br/&gt; &lt;br/&gt;                &lt;span&gt;//兜底，防止因为限流导致年轻代无新对象产生，达不到 young gc 触发条件的极端情况，所以手动触发一次 full gc&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;synchronized&lt;/span&gt; (ResourceLimitHandler&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; ((percent = &lt;span&gt;this&lt;/span&gt;.getHeapUsedPercent()) &amp;gt;= &lt;span&gt;this&lt;/span&gt;.threshold) {&lt;br/&gt;                        System.gc();&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt; &lt;br/&gt;                &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt; &lt;br/&gt;            TimeUnit.MILLISECONDS.sleep(&lt;span&gt;this&lt;/span&gt;.sleepTime);&lt;br/&gt; &lt;br/&gt;            percent = &lt;span&gt;this&lt;/span&gt;.getHeapUsedPercent();&lt;br/&gt;        }&lt;br/&gt; &lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 计算堆的使用百分比&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; &lt;span&gt;getHeapUsedPercent&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; max = &lt;span&gt;this&lt;/span&gt;.getHeapMax();&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; used = &lt;span&gt;this&lt;/span&gt;.getHeapUsed();&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;double&lt;/span&gt; percent = NumberUtil.div(used, max) * &lt;span&gt;100&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; percent;&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 可用堆最大值&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; &lt;span&gt;getHeapMax&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;        MemoryUsage memoryUsage = &lt;span&gt;this&lt;/span&gt;.memoryMXBean.getHeapMemoryUsage();&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; memoryUsage.getMax();&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 已使用堆大小&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; &lt;span&gt;getHeapUsed&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;        MemoryUsage memoryUsage = &lt;span&gt;this&lt;/span&gt;.memoryMXBean.getHeapMemoryUsage();&lt;br/&gt; &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; memoryUsage.getUsed();&lt;br/&gt;    }&lt;br/&gt; &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码还是比较简单的，其中的&lt;code&gt;jvm&lt;/code&gt; 堆内存阈值的设置比较关键，该值的设置给出以下参考&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最大阈值&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;由于 &lt;code&gt;-XX:CMSInitiatingOccupancyFraction&lt;/code&gt; 参数而触发 &lt;strong&gt;full gc&lt;/strong&gt; 的临界情况为：年轻代可用空间被全部使用，同时老年代空间使用率达到 &lt;code&gt;-XX:CMSInitiatingOccupancyFraction&lt;/code&gt; 所设置的比例，所以得出如下计算公式：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;mjx-container jax=&quot;SVG&quot; display=&quot;true&quot; role=&quot;presentation&quot; data-formula=&quot;最大阈值百分比=（年轻代可使用大小 + 老年代大小 *  CMSInitiatingOccupancyFraction 参数值）/ 堆大小&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 46024.1 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;最&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;大&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;阈&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(2803.9, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;值&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(3738.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;百&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(4673.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;分&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(5607.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;比&lt;/text&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; transform=&quot;translate(6542.3, 0)&quot;/&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(7320.3, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;（&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(8255, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;年&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(9189.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;轻&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(10124.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;代&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(11058.8, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;可&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(11993.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;使&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(12928.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;用&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(13862.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;大&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(14797.3, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;小&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(16009.7, 0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(17065.5, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;老&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;年&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;代&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(2803.9, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;大&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(3738.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;小&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(22016.4, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(22516.4, 0)&quot;&gt;&lt;path data-c=&quot;43&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(23276.4, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(24327.4, 0)&quot;&gt;&lt;path data-c=&quot;53&quot; d=&quot;M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(24972.4, 0)&quot;&gt;&lt;path data-c=&quot;49&quot; d=&quot;M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(25476.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(26076.4, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(26421.4, 0)&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(26782.4, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(27127.4, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(27656.4, 0)&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(28017.4, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(28362.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(28962.4, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(29439.4, 0)&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(30202.4, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(30635.4, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(31068.4, 0)&quot;&gt;&lt;path data-c=&quot;75&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(31640.4, 0)&quot;&gt;&lt;path data-c=&quot;70&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(32143.4, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(32672.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(33272.4, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(33705.4, 0)&quot;&gt;&lt;path data-c=&quot;79&quot; d=&quot;M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(34195.4, 0)&quot;&gt;&lt;path data-c=&quot;46&quot; d=&quot;M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(34944.4, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(35395.4, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(35924.4, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(36357.4, 0)&quot;&gt;&lt;path data-c=&quot;74&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(36718.4, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(37063.4, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(37548.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(38426.2, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;参&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;数&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;值&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(2803.9, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;）&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(42442.4, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2F&quot; d=&quot;M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(43220.2, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;堆&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;大&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;小&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml role=&quot;presentation&quot; unselectable=&quot;on&quot; display=&quot;block&quot;&gt;&lt;mo/&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;年轻代可使用大小&lt;/strong&gt;：&lt;/em&gt;伊甸区大小+单个s区的大小（因为两个s区轮流替换，始终只有一个在存放对象）&lt;/p&gt;&lt;p&gt;代入优化的 &lt;code&gt;jvm&lt;/code&gt; 参数得出&lt;strong&gt;最大阈值百分比&lt;/strong&gt; = （ 1024 * 0.9 + 512*0.8 ）/ 1536 = 87%&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最小阈值&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;阈值设置过低会影响正常的业务处理，至少要保证能够触发 &lt;strong&gt;young gc&lt;/strong&gt; ，而实际触发 &lt;strong&gt;young gc&lt;/strong&gt; 的情况有很多，这里不做进一步讨论，暂时只考虑最常见的由于年轻代空间不足以放下新对象的场景，所以得出：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;mjx-container jax=&quot;SVG&quot; display=&quot;true&quot; role=&quot;presentation&quot; data-formula=&quot;最小阈值百分比 = 年轻代可使用大小 / 堆大小&amp;#10;&quot; data-formula-type=&quot;block-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 18656.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;最&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;小&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;阈&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(2803.9, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;值&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(3738.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;百&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(4673.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;分&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(5607.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;比&lt;/text&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; transform=&quot;translate(6542.3, 0)&quot;/&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(7320.3, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;年&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(8255, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;轻&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(9189.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;代&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(10124.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;可&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(11058.8, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;使&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(11993.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;用&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(12928.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;大&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(13862.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;小&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(15075.1, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2F&quot; d=&quot;M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(15852.9, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;堆&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;大&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;小&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span/&gt;&lt;/mjx-container&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;代入优化后的 &lt;code&gt;jvm&lt;/code&gt; 参数得出&lt;strong&gt;最小阈值百分比&lt;/strong&gt; = （1024 * 0.9）/ 1536 = 60%&lt;/p&gt;&lt;h2&gt;&lt;span&gt;方案验证&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;实践出真章，我们按照之前的方式再次测试&lt;/p&gt;&lt;h3&gt;&lt;span&gt;资源配置&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;应用实例数量：2&lt;/p&gt;&lt;p&gt;实例配置：2核4G&lt;/p&gt;&lt;p&gt;数据量：&lt;code&gt;MQ&lt;/code&gt; 中积压5w条数据&lt;/p&gt;&lt;p&gt;说明：测试过程中的数据这里不再做展示，只取所有数据最终推送完成后的结果。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;优化前&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;优化前推送完成后 &lt;code&gt;Arthas&lt;/code&gt; 仪表盘：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47728547392035897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYj8WQcreyOicmLG5nazoaR2w8nbQSkmZqBGv56rPGiaBweMluq3DjO3g4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1783&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;Grafana&lt;/code&gt;监控大盘：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5407458563535912&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjbuSdqb45AicRnLHjKXHKJibyIbxHO88iavjaQfaTbDwNQzzZSkdgymxicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1448&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;优化后&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在对 &lt;strong&gt;jvm 参数进行优化&lt;/strong&gt;以及&lt;strong&gt;添加资源限流器&lt;/strong&gt;后，推送完成后 &lt;code&gt;Arthas&lt;/code&gt; 仪表盘：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.490836197021764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYjWVAvqkgL6k4SsGoxpNdO0WHtsy13lzPf5SicE3icUC1RCKwJRbRRnvBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1746&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;Grafana&lt;/code&gt;监控大盘：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5305985205110961&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pwiclhpvXfCjicdpXGSwDEgLF0CtKQqnYj8E7vb1nZV4Dmsvwt51KNW2Ozt06Ca5gPwY4SL4uRmVg6kUut1naudg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1487&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;结果比对&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;数据推送总耗时&lt;/th&gt;&lt;th&gt;full gc 次数&lt;/th&gt;&lt;th&gt;full gc总耗时&lt;/th&gt;&lt;th&gt;单次full gc 平均耗时&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;优化前&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;约35分钟&lt;/td&gt;&lt;td&gt;312&lt;/td&gt;&lt;td&gt;309232&lt;/td&gt;&lt;td&gt;991ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;优化后&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;约18分钟&lt;/td&gt;&lt;td&gt;104&lt;/td&gt;&lt;td&gt;45387&lt;/td&gt;&lt;td&gt;436ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p&gt;优化前后进行比对，可以发现优化后无论是&lt;strong&gt;数据推送总耗时&lt;/strong&gt;还是 &lt;strong&gt;full gc 的次数&lt;/strong&gt;或是&lt;strong&gt;full gc 平均耗时&lt;/strong&gt;都有了很大的减少，整体效能近乎提升了一倍。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;基于数据推送平台的业务场景、技术背景，我们推测在数据洪峰场景下单纯的从&lt;strong&gt;任务并发数&lt;/strong&gt;进行流控，可能会达不到保障系统稳定性的目的，并通过压测验证了我们这一猜想。通过分析发现系统的瓶颈主要是 &lt;code&gt;jvm&lt;/code&gt;堆内存资源有限，由于下游消费速率（执行网络请求进行数据推送）不及上游的投递速率（消费 &lt;code&gt;MQ&lt;/code&gt; 消息、组装推送任务），&lt;code&gt;jvm&lt;/code&gt; 中堆积的对象不断增长并且无法被回收，造成频繁 &lt;strong&gt;full gc&lt;/strong&gt;，导致系统不可用。&lt;/p&gt;&lt;p&gt;通常我们系统中主流的限流方式都是&lt;strong&gt;基于并发数&lt;/strong&gt;来处理，需要测试同学进行压测，综合考虑网络 IO、数据库等外部中间件的情况下得出一个相对合理的数值，在日常工作中不同环境下的服务实例配置都略有不同，&lt;strong&gt;承载的并发数&lt;/strong&gt;也会存在一定的差异。如果&lt;strong&gt;限流并发数&lt;/strong&gt;设置的过高，将会存在高并发场景下服务崩溃的风险，此时如果&lt;strong&gt;辅以系统资源级别的限流&lt;/strong&gt;，可以保证服务不会被暴增的流量瞬间打崩。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;方案适用场景：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;系统级别的全局限流，防止服务崩溃，例如运用在 &lt;code&gt;Spring MCV&lt;/code&gt; 过滤器、&lt;code&gt;dubbo&lt;/code&gt; 过滤器等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;需要设置一个缓存队列，而队列中的每个任务中的&lt;strong&gt;数据对象大小差异极大&lt;/strong&gt;，&lt;strong&gt;队列的大小难以设置&lt;/strong&gt;，单纯使用&lt;strong&gt;无界队列&lt;/strong&gt;又存在 &lt;strong&gt;OOM&lt;/strong&gt; 的风险，此时可配合该方案对&lt;strong&gt;无界队列&lt;/strong&gt;进行限制。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;方案不足：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;此次基于&lt;code&gt;jvm&lt;/code&gt; 堆内存限流的方案因为依赖于 &lt;code&gt;CMSInitiatingOccupancyFraction&lt;/code&gt; 参数对 &lt;strong&gt;full gc&lt;/strong&gt; 引发的作用，所以仅适用于老年代使用 &lt;code&gt;CMS&lt;/code&gt;垃圾回收器的服务，而大部分 &lt;strong&gt;16G &lt;/strong&gt;内存以上的服务都使用 &lt;strong&gt;G1&lt;/strong&gt; 垃圾回收器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;jvm&lt;/code&gt; 堆使用率阈值的具体值依赖 &lt;code&gt;jvm&lt;/code&gt; 相关参数设置，需要使用者对 &lt;code&gt;jvm&lt;/code&gt; 的内部机制有一定的了解。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不建议作为唯一的限流处理逻辑，因为实际场景中服务的承载能力还与网络 io、数据库等其他因素有关。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;该方案的稳定性、可靠性需要更多的案例验证。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;结语：&lt;/strong&gt;每种方案都有各自的优缺点、局限性，根据 &lt;code&gt;jvm&lt;/code&gt; 堆内存使用率进行限流，并不适用所有的业务场景，只是作为一个新的限流方案供大家参考扩展思路，起到一个抛砖引玉的作用，文中如有不对之处还请指正。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;招贤纳士&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;政采云技术团队（Zero），一个富有激情、创造力和执行力的团队，Base 在风景如画的杭州。团队现有300多名研发小伙伴，既有来自阿里、华为、网易的“老”兵，也有来自浙大、中科大、杭电等校的新人。团队在日常业务开发之外，还分别在云原生、区块链、人工智能、低代码平台、中间件、大数据、物料体系、工程平台、性能体验、可视化等领域进行技术探索和实践，推动并落地了一系列的内部技术产品，持续探索技术的新边界。此外，团队还纷纷投身社区建设，目前已经是 google flutter、scikit-learn、Apache Dubbo、Apache Rocketmq、Apache Pulsar、CNCF Dapr、Apache DolphinScheduler、alibaba Seata 等众多优秀开源社区的贡献者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想改变一直被事折腾，希望开始折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊……如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的技术团队的成长过程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 zcy-tc@cai-inc.com&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ae46b52bf56f15c88d22ba1ff53f94a2</guid>
<title>Java基础 | Stream流原理与用法总结</title>
<link>https://toutiao.io/k/bz1xc1u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;Stream简化元素计算；&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;一、接口设计&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;从Java1.8开始提出了Stream流的概念，侧重对于源数据计算能力的封装，并且支持序列与并行两种操作方式；依旧先看核心接口的设计:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.42668863261943984&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBT6EJpUPImbZJsvE51RzvbxLIeZeNVicDibVSJYeI0MCRsEn9NZxZiaJ16hu72RwXLFOT9u0jYlvsicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1214&quot;/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;BaseStream：基础接口，声明了流管理的核心方法；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Stream：核心接口，声明了流操作的核心方法，其他接口为指定类型的适配；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;基础案例：通过指定元素的值，返回一个序列流，元素的内容是字符串，并转换为Long类型，最终计算求和结果并返回；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;System.out.println(&lt;span&gt;&quot;sum1=&quot;&lt;/span&gt;+IntStream.of(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;).sum());&lt;br/&gt;System.out.println(&lt;span&gt;&quot;sum2=&quot;&lt;/span&gt;+Stream.of(&lt;span&gt;&quot;1&quot;&lt;/span&gt;, &lt;span&gt;&quot;2&quot;&lt;/span&gt;, &lt;span&gt;&quot;3&quot;&lt;/span&gt;).mapToLong(Long::parseLong).sum());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;整个Stream处理过程上看可以分为三段：创建流、中间操作、最终操作，即多个元素值通过流计算最终获取到求和的结果；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、创建操作&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;除了Stream提供的创建方法之外，在Java1.8中，很多容器类的方法都进行的扩展，提供了集合元素转流的能力；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Stream&amp;lt;Integer&amp;gt; intStream = Stream.of(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; getList = Arrays.asList(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;,&lt;span&gt;&quot;copy&quot;&lt;/span&gt;) ;&lt;br/&gt;Stream&amp;lt;String&amp;gt; strStream = getList.stream() ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Double[] getArray = &lt;span&gt;new&lt;/span&gt; Double[]{&lt;span&gt;1.1&lt;/span&gt;,&lt;span&gt;2.2&lt;/span&gt;};&lt;br/&gt;Stream&amp;lt;Double&amp;gt; douStream = Arrays.stream(getArray) ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述方式创建的Stream流默认都是串行序列，可以通过&lt;code&gt;Stream.isParallel&lt;/code&gt;进行判断；执行&lt;code&gt;Stream.parallel&lt;/code&gt;方法可以转为并行流；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、中间操作&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;通常对于Stream的中间操作，可以视为是源的查询，并且是懒惰式的设计，对于源数据进行的计算只有在需要时才会被执行，与数据库中视图的原理相似；&lt;/p&gt;&lt;p&gt;Stream流的强大之处便是在于提供了丰富的中间操作，相比集合或数组这类容器，极大的简化源数据的计算复杂度，案例中使用的数据结构如下；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TesStream&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt;  &lt;/span&gt;{&lt;br/&gt;        List&amp;lt;User&amp;gt; userList = getUserList () ;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span&gt;getUserList&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        List&amp;lt;User&amp;gt; userList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;() ;&lt;br/&gt;        userList.add(&lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;张三&quot;&lt;/span&gt;,&lt;span&gt;&quot;上海&quot;&lt;/span&gt;)) ;&lt;br/&gt;        userList.add(&lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;李四&quot;&lt;/span&gt;,&lt;span&gt;&quot;北京&quot;&lt;/span&gt;)) ;&lt;br/&gt;        userList.add(&lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;&quot;王五&quot;&lt;/span&gt;,&lt;span&gt;&quot;北京&quot;&lt;/span&gt;)) ;&lt;br/&gt;        userList.add(&lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;&quot;顺六&quot;&lt;/span&gt;,&lt;span&gt;&quot;上海,杭州&quot;&lt;/span&gt;)) ;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; userList ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;userList.stream().filter(user -&amp;gt; user.getId()&amp;gt;&lt;span&gt;1&lt;/span&gt;).forEach(System.out::println);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;map：将现有的元素转换映射到对应的结果，输出用户所在城市；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;userList.stream().map(user -&amp;gt; user.getName()+&lt;span&gt;&quot; 在 &quot;&lt;/span&gt;+user.getCity()).forEach(System.out::println);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;peek：对元素进行遍历处理，每个用户ID加1输出；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;userList.stream().peek(user -&amp;gt; user.setId(user.getId()+&lt;span&gt;1&lt;/span&gt;)).forEach(System.out::println);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;flatMap：数据拆分一对多映射，用户所在多个城市；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;userList.stream().flatMap(user -&amp;gt; Arrays.stream(user.getCity().split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;))).forEach(System.out::println);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;sorted：指定属性排序，根据用户ID倒序输出；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;userList.stream().sorted(Comparator.comparingInt(User::getId).reversed()).forEach(System.out::println);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;userList.stream().map(User::getCity).distinct().forEach(System.out::println);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;skip &amp;amp; limit：截取，过滤后的数据跳过，截取第一条；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;userList.stream().filter(user -&amp;gt; user.getId()&amp;gt;&lt;span&gt;1&lt;/span&gt;).skip(&lt;span&gt;1&lt;/span&gt;).limit(&lt;span&gt;1&lt;/span&gt;).forEach(System.out::println);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相比于集合与数组在Java1.8之前的处理逻辑，通过Stream流的方法简化对数据改、查、过滤、排序等一系列操作，上面对于最终方法只涉及了foreach遍历；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、最终操作&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;Stream流执行完最终操作之后，无法再执行其他动作，否则会报状态异常，提示该流已经被执行操作或者被关闭，想要再次执行操作必须重新创建Stream流；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;int&lt;/span&gt; min = userList.stream().min(Comparator.comparingInt(User::getId)).get().getId();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;int&lt;/span&gt; max = userList.stream().max(Comparator.comparingInt(User::getId)).get().getId();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;int&lt;/span&gt; sum = userList.stream().mapToInt(User::getId).sum() ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;long&lt;/span&gt; count = userList.stream().filter(user -&amp;gt; user.getId()&amp;lt;&lt;span&gt;2&lt;/span&gt;).count();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;userList.stream().filter(user -&amp;gt; &lt;span&gt;&quot;北京&quot;&lt;/span&gt;.equals(user.getCity())).forEach(System.out::println);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;findAny：查找符合条件的任意一个元素，获取一个北京用户；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;User getUser = userList.stream().filter(user -&amp;gt; &lt;span&gt;&quot;北京&quot;&lt;/span&gt;.equals(user.getCity())).findAny().get();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;User getUser = userList.stream().filter(user -&amp;gt; &lt;span&gt;&quot;北京&quot;&lt;/span&gt;.equals(user.getCity())).findFirst().get();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;anyMatch：匹配判断，判断是否存在深圳的用户；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;boolean matchFlag = userList.stream().anyMatch(user -&amp;gt; &lt;span&gt;&quot;深圳&quot;&lt;/span&gt;.equals(user.getCity()));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;allMatch：全部匹配，判断所有用户的城市不为空；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;boolean matchFlag = userList.stream().allMatch(user -&amp;gt; StrUtil.isNotEmpty(user.getCity()));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;noneMatch：全不匹配，判断没有用户的城市为空；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;boolean matchFlag = userList.stream().noneMatch(user -&amp;gt; StrUtil.isEmpty(user.getCity()));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里只是演示一些简单的最终方法，主要涉及Stream流的一些统计和判断相关的能力，在一些实际的业务应用中，显然这些功能还远远不够；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、Collect收集&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;Collector：结果收集策略的核心接口，具备将指定元素累加存放到结果容器中的能力；并在Collectors工具中提供了Collector接口的实现类；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;List&amp;lt;Integer&amp;gt; idList = userList.stream().map(User::getId).collect(Collectors.toList()) ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;toMap：将用户ID和Name以Key-Value形式存放到Map集合中；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;Map&amp;lt;Integer,String&amp;gt; userMap = userList.stream().collect(Collectors.toMap(User::getId,User::getName));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Set&amp;lt;String&amp;gt; citySet = userList.stream().map(User::getCity).collect(Collectors.toSet());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;long&lt;/span&gt; count = userList.stream().filter(user -&amp;gt; user.getId()&amp;gt;&lt;span&gt;1&lt;/span&gt;).collect(Collectors.counting());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Integer sumInt = userList.stream().filter(user -&amp;gt; user.getId()&amp;gt;&lt;span&gt;2&lt;/span&gt;).collect(Collectors.summingInt(User::getId)) ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;User maxId = userList.stream().collect(Collectors.minBy(Comparator.comparingInt(User::getId))).get() ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;joining：将用户所在城市，以指定分隔符链接成字符串；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;String joinCity = userList.stream().map(User::getCity).collect(Collectors.joining(&lt;span&gt;&quot;||&quot;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;groupingBy：按条件分组，以城市对用户进行分组；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;Map&amp;lt;String,List&amp;lt;User&amp;gt;&amp;gt; groupCity = userList.stream().collect(Collectors.groupingBy(User::getCity));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在代码工程中会涉及到诸多的集合数据计算的逻辑，尤其在微服务场景中，VO数据模型需要对多个服务的数据进行组装，通过Collector可以极大精简组装过程；&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;&lt;span&gt;&lt;strong&gt;End&lt;/strong&gt;&lt;/span&gt;&lt;/center&gt;&lt;center&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4Njg0MzYwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBj3abVSgCmvm7FIYw55ficInd2se9ia6KSic0ma25AUvrmUtXUwXibjhHmCc7DUawfXBI30QuHBjDnzw/0?wx_fmt=png&quot; data-nickname=&quot;知了一笑&quot; data-alias=&quot;cicada_smile&quot; data-signature=&quot;积累、总结、用心记录。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;strong/&gt;&lt;/center&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>