<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2ae159c30eaca401ae87bdffc4f1f244</guid>
<title>2 分钟就能抓取任何网站的数据是怎么做到的？？ #Browse AI</title>
<link>https://toutiao.io/k/js5rxl7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;无界社区mixlab&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;mix-lab&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;跨学科探索实验，让每个人无限可能。 def mixlab（人工智能，设计）： ... return 无限可能&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b9657729bf483f850ad85af1f771cd89</guid>
<title>【分布式技术专题】「OSS中间件系列」Minio的文件服务的存储模型及整合Java客户端访问的实战指南_洛神灬殇的博客-CSDN博客</title>
<link>https://toutiao.io/k/9h64td9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h3&gt;&lt;a id=&quot;Minio_0&quot;/&gt;Minio的元数据&lt;/h3&gt; 
&lt;h4&gt;&lt;a id=&quot;_2&quot;/&gt;数据存储&lt;/h4&gt; 
&lt;p&gt;MinIO对象存储系统没有元数据数据库，所有的操作都是对象级别的粒度的，这种做法的优势是:&lt;/p&gt; 
 
&lt;h4&gt;&lt;a id=&quot;_10&quot;/&gt;数据管理&lt;/h4&gt; 
&lt;p&gt;元数据与数据一起存放在磁盘上：数据部分纠删分片以后存储在磁盘上，元数据以明文形式存放在元数据文件里（xl.json）。假定对象名字为obj-with-metadata, 它所在的桶的名字是bucket_name, disk是该对象所在纠删组的任一个磁盘的路径，如下目录：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;disk/bucket_name/obj-with-metadata 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;记录了这个对象在此磁盘上的信息。其中的内容如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/eb95e5c067b7662b8d4cb297e90d76cf.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;xljson_22&quot;/&gt;xl.json&lt;/h5&gt; 
&lt;p&gt;xl.json即是此对象的元数据文件。对象的元数据文件xl.json的内容是如下这种形式的json字符串：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/eb73305c8457baded9585f504af33f36.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_28&quot;/&gt;字段说明&lt;/h5&gt; 
&lt;h6&gt;&lt;a id=&quot;format_30&quot;/&gt;format字段&lt;/h6&gt; 
&lt;p&gt;该字段指明了这个对象的格式是xl，MinIO内部存储数据主要有两种数据格式:xl与fs。使用如下命令启动的MinIO使用的存储格式是fs:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/0d68415d4a149a4eaec6e64f5c3281a5.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;这种模式主要用于测试， 对象存储很多API都是并没有真正实现的桩函数。在生产环境所用的部署方式（本地分布式集群部署、联盟模式部署、云网关模式部署）中，存储格式都是xl。&lt;/p&gt; 
&lt;p&gt;part.1 ：对象的第一个数据分片&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;stat_40&quot;/&gt;stat字段&lt;/h6&gt; 
&lt;p&gt;记录了此对象的状态，包括大小与修改时间，如下图：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/27c5fc05cebd2ee0d5e4fc8a167440c1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;erasure_46&quot;/&gt;erasure字段&lt;/h6&gt; 
&lt;p&gt;这个字段记录此对象与纠删码有关的信息，如下图：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/ef21dfb1c2df31121aab978017374f91.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;其中的algorithm指明了此对象采用的是Klaus Post实现的纠删码，生成矩阵是范德蒙矩阵。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;data，parity指明了纠删组中数据盘、校验盘的个数。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;blockSize 指明了对象被分块的大小，默认是5M（请参见上一节“数据分布与均衡”）。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;index指明了当前磁盘在纠删组中的序号。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;distribution:每个纠删组的数据盘、校验盘的个数是固定的，但是不同的对象的分片写入这个纠删组的不同磁盘的顺序是不同的。这里记录了分布顺序。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;checksum:它下面的字段个数跟此对象的分片数量有关。在旧版本的MinIO对象存储系统，每一个分片经过hash函数计算出的checksum会记录在元数据文件的这个位置。最新版的MinIO会把checksum直接计入分片文件（即part.1等文件）的前32个字节。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;此字段之下algorithm的值是”highwayhash256S”表明checksum值是写入分片文件的。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a id=&quot;MinioJava_66&quot;/&gt;Minio的整合Java客户端&lt;/h3&gt; 
&lt;p&gt;文件服务器在用minio，没有独立成微服务也没有抽取starter，所以简单测试一下集成和抽取starter，创建springboot项目集成minio把文件上传成功&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;Mavenpom_70&quot;/&gt;Maven环境的pom依赖&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.minio&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;minio&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;6.0.11&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;springyml_80&quot;/&gt;spring的yml配置:&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;minio:
  endpoint: http://192.168.8.50:9000
  accessKey: admin
  secretKey: 123123123
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_MinioProperties__89&quot;/&gt;配置类 MinioProperties :&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;minio&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioProperties&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; endpoint&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; accessKey&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; secretKey&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_MinioUtil_104&quot;/&gt;工具类 MinioUtil&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;cn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hutool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StrUtil&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BaseResultEnum&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exception&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BusinessException&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MinioClient&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;lombok&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AllArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;lombok&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SneakyThrows&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stereotype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;web&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multipart&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MultipartFile&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioUtil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioClient&lt;/span&gt; minioClient&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioProperties&lt;/span&gt; minioProperties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;putFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; bucketName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MultipartFile&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;putFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bucketName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;putFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; bucketName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; folder&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MultipartFile&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; originalFilename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOriginalFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StrUtil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;folder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            originalFilename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; folder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originalFilename&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;InputStream&lt;/span&gt; in &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; contentType&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            minioClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;putObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bucketName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;originalFilename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; contentType&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BusinessException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BaseResultEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SYSTEM_EXCEPTION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;文件上传失败&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; minioProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEndpoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bucketName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originalFilename&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createBucket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; bucketName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            minioClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeBucket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bucketName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BusinessException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BaseResultEnum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SYSTEM_EXCEPTION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;创建bucket失败&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@SneakyThrows&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getBucketPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; bucketName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; minioClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBucketPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bucketName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_176&quot;/&gt;装配类:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MinioClient&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;errors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InvalidEndpointException&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;errors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InvalidPortException&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;lombok&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AllArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;boot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;autoconfigure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;condition&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConditionalOnBean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;boot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;properties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EnableConfigurationProperties&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bean&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Configuration&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MinioProperties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioAutoConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioProperties&lt;/span&gt; minioProperties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioClient&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minioClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InvalidPortException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InvalidEndpointException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;MinioClient&lt;/span&gt;  client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minioProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEndpoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;minioProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAccessKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;minioProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSecretKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;  client&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ConditionalOnBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MinioClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioUtil&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minioUtil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MinioClient&lt;/span&gt; minioClient&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MinioProperties&lt;/span&gt; minioProperties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioUtil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minioClient&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;minioProperties&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;a id=&quot;springfactories_208&quot;/&gt;spring.factories配置文件&lt;/h5&gt; 
&lt;p&gt;去掉主入口函数，去掉application.properties配置文件（新建一个测试用的springboot项目，把配置文件拿过去）&lt;br/&gt; 剩下最重要的一步：在resources下创建META-INF/spring.factories文件，配置文件中加入需要自动装配的类&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
  com.*(你的路径).MinioAutoConfiguration
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;demo_218&quot;/&gt;demo:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;web&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Result&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;team&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MinioUtil&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;swagger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Api&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;swagger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiOperation&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;swagger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiParam&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;beans&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;factory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Autowired&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;web&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bind&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PutMapping&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;web&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bind&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RequestMapping&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;web&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bind&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RestController&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;web&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multipart&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MultipartFile&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;uploadFile&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;文件上传&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;uploadFile&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UploadFileController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MinioUtil&lt;/span&gt; minioUtil&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ApiOperation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;通用文件上传&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@PutMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/upload&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uploadFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@ApiParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;存储桶名称&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; bucketName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@ApiParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;文件&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MultipartFile&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
           url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  minioUtil&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;putFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bucketName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;打包安装到maven仓库，本地测试用的同一仓库地址的话可以直接maven install，新建一个springboot项目，填入application.properties，pom中增加starter的依赖。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.jxwy&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;minio-starter&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;OSS_264&quot;/&gt;其他OSS服务对比&lt;/h3&gt; 
&lt;h4&gt;&lt;a id=&quot;_266&quot;/&gt;厂商支持&lt;/h4&gt; 
&lt;p&gt;国内使用Ceph的厂商、基于Ceph进行自研的存储厂商都比较多，在使用过程中遇到的问题（有些时候，甚至需要修改、增强乃至重新实现Ceph本身的功能），可以向相关厂商寻求支持。国际方面，Ceph早已被红帽收购，而红帽近期又被IBM收购。&lt;/p&gt; 
&lt;p&gt;MinIO开发与支持的厂商只有MinIO公司。由于架构比较先进，语言高级，MinIO本身的程序比较容易读懂、修改。招聘Golang程序员来 维护MinIO所花费的成本，显然低于招聘c++程序员来维护Ceph。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;SDK_272&quot;/&gt;多语言客户端SDK&lt;/h4&gt; 
&lt;p&gt;二者均有常见编程语言的客户端，比如：python, java等。MinIO对象存储软件的开发SDK另外支持纯函数式的语言Haskell。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_276&quot;/&gt;技术文档&lt;/h4&gt; 
&lt;p&gt;内部实现的文档MinIO基本不存在。想要了解内部实现乃至参与开发的技术人员，只能到如下社区：http://minio.slack.com/ ，与MinIO的开发人员直接交流，或者自己阅读代码。Ceph的各种实现文档、算法说明文档非常丰富。这方面Ceph要比MinIO成熟很多。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;CephMinIO_280&quot;/&gt;Ceph和MinIO的对比&lt;/h3&gt; 
&lt;p&gt;开源对象存储软件以MinIO,Ceph为典型代表。为帮助相关人员在选择对象存储系统之时选择合适的产品，此处对二者的特点、特性做一定讨论。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;MinIO_284&quot;/&gt;MinIO优势&lt;/h4&gt; 
&lt;h5&gt;&lt;a id=&quot;_286&quot;/&gt;部署极其简单&lt;/h5&gt; 
&lt;p&gt;MinIO系统的服务程序仅有minio一个可执行文件，基本不依赖其它共享库或者rpm/apt包。minio的配置项很少（大部分都是内核之类系统级的设置），甚至不配置也可以正常运行起来。百度、google、bing等搜索引擎上基本没有关于MinIO部署问题的网页，可见在实践中，很少有使用者遇到这方面的问题。&lt;/p&gt; 
&lt;p&gt;相比之下，Ceph系统的模块，相关的rpm、apt包众多，配置项非常多，难以部署，难调优。某些Linux发行版的Ceph安装包甚至有bug，需要使用者手动改动Ceph的python脚本，才能安装完毕。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_292&quot;/&gt;二次开发容易&lt;/h5&gt; 
&lt;p&gt;MinIO对象存储系统除了极少数代码使用汇编实现以外，全部使用Golang语言实现。Ceph系统是使用业界闻名的难学难用的c++语言编写的。Golang语言由于产生较晚，吸收了很多语言尤其是c++的教训，语言特性比较现代化。&lt;/p&gt; 
&lt;p&gt;相对而言，MinIO系统的维护、二次开发比较容易。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_298&quot;/&gt;网管模式支持多种其他存储&lt;/h5&gt; 
&lt;p&gt;通过网关模式，MinIO对象存储后端，可以对接各种现有的常见其它存储类型，比如的NAS系统，微软Azure Blob 存储、Google 云存储、HDFS、阿里巴巴OSS、亚马逊S3等，非常有利于企业复用现有资源，有利于企业低成本（硬件成本约等于零，部署MinIO对象存储软件即可）地从现有系统平滑升级到对象存储。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;Ceph_302&quot;/&gt;Ceph优势&lt;/h4&gt; 
&lt;p&gt;数据冗余策略更加丰富，Ceph同时支持副本、纠删码，而MinIO只支持纠删码。对于个别的对于数据可靠性要求极高的单位，Ceph对象存储更加合适。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_306&quot;/&gt;参考硬件&lt;/h3&gt; 
&lt;p&gt;MinIO是符合软件定义存储SDS理念的，兼容主流X86服务器以及ARM/飞腾平台，同时也可以移植到诸如申威（Alpha架构）和龙芯（Mips架构）等硬件平台。&lt;/p&gt; 
&lt;p&gt;下面这些符合工业标准的、广泛采用的服务器是经过MinIO inc.优化测试过的、MinIO对象存储软件表现优异的服务器：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/0455236990b67243d17edbc294320b4f.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_314&quot;/&gt;结论&lt;/h4&gt; 
&lt;p&gt;由以上讨论，可见作为对象存储软件来说，MinIO， Ceph都非常优秀，各自有各自的优势。准备使用对象存储软件的用户，应该根据自己单位的需求、技术储备等实际情况，选择适当的软件。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_318&quot;/&gt;参考资料&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;https://hao123.blog.csdn.net/article/details/109065199?spm=1001.2101.3001.6650.1&amp;amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.opensearchhbase&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.opensearchhbase&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/krishnasrinivas/wikinotes/wiki/minio-scaling&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/Welcome.html&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;Klaus Post官网：https://klauspost.com/&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/klauspost/reedsolomon&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://developer.ibm.com/articles/cl-cloudstorage/&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/minio/dsync&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/minio/dsync/pull/22#issue-176751755&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/minio/minio/blob/master/cmd/xl-sets.go&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://min.io/resources/docs/MinIO-throughput-benchmarks-on-NVMe-SSD.pdf&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/minio/minio/blob/master/cmd/admin-heal-ops.go&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/klauspost/reedsolomon/blob/master/options.go&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/minio/dsync&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://min.io/resources/docs/CPG-MinIO-implementation-guide.pdf&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://github.com/minio/minio/issues/7986&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://docs.min.io/docs/minio-bucket-notification-guide.html&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;https://www.it610.com/article/1281191501832929280.htm&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>570bf957927ac4666abcc570e5af8782</guid>
<title>最近 Github 上爆火的 Chrome 生产力神器 Omni 是什么鬼？ - 知乎</title>
<link>https://toutiao.io/k/4v4d7xk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-1g0fqss&quot; options=&quot;[object Object]&quot;&gt;&lt;figure data-first-child=&quot;&quot; data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1acf1a3e952f0a7f939cd1ad4cdf613a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;450&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-1acf1a3e952f0a7f939cd1ad4cdf613a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;450&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-1acf1a3e952f0a7f939cd1ad4cdf613a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1acf1a3e952f0a7f939cd1ad4cdf613a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a7d3635beceb89524f1846787f373884_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2742&quot; data-rawheight=&quot;1524&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-a7d3635beceb89524f1846787f373884_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2742&quot; data-rawheight=&quot;1524&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-a7d3635beceb89524f1846787f373884_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a7d3635beceb89524f1846787f373884_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;K9a1LipF&quot;&gt;Omni 是一个浏览器插件，它让你能够想使用 Mac 电脑一样使用你的浏览器，最近 Omni 接连登上 Github 趋势榜与 ProductHunt 榜首，成为大受各种程序员、产品设计师的追捧的生产力工具！&lt;/p&gt;&lt;blockquote data-pid=&quot;-M6VvLSh&quot;&gt;&lt;b&gt;ProductHunt[1]&lt;/b&gt; 是国外非常专业的产品发掘网站：&lt;br/&gt; &lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-cbe5fad595262eb597199d01ec492bad_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2218&quot; data-rawheight=&quot;1532&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-cbe5fad595262eb597199d01ec492bad_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2218&quot; data-rawheight=&quot;1532&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-cbe5fad595262eb597199d01ec492bad_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-cbe5fad595262eb597199d01ec492bad_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;2x7nFB7L&quot;&gt;有意思的是，Omni 的作者是一位非常漂亮的来自英国小姐姐：Alyssa X，小姐姐经常玩 &lt;b&gt;Twitter[2]&lt;/b&gt;，同时也是一位设计师、开发者和创业者，创立了 getsonuum 公司。小姐姐还开发了一个周刊，你可以订阅她的进展动态哦~ &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//newsletter.alyssax.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;newsletter.alyssax.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-71153b51dbabef14ed0733845eaca77c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1496&quot; data-rawheight=&quot;848&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-71153b51dbabef14ed0733845eaca77c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1496&quot; data-rawheight=&quot;848&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-71153b51dbabef14ed0733845eaca77c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-71153b51dbabef14ed0733845eaca77c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;nNoarda8&quot;&gt;你一定很好奇，到底是一个什么样的工具能够受到这么多的欢迎？接下来我们就来看一看这个神奇的工具到底有怎么样的魔力吧！&lt;/p&gt;&lt;h2&gt;&lt;b&gt;特点速览&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;DVqrS84S&quot;&gt;Omni 之所以受欢迎主要是因为它解决了我们使用浏览器的一些很痛的问题，举个例子，如如何管理你的浏览器书签、Tab 栏、浏览器浏览历史，浏览器虽然有这些功能，但是都非常的基础。&lt;/p&gt;&lt;p data-pid=&quot;dArtvGOS&quot;&gt;一个最尴尬的场景就是，我开了几十个 Tab 页，然后我想找到我之前打开的一个 Tab 页，我记得这个页面的大致信息，但是现在浏览器不支持 Tab 页的搜索，导致我打开找到和打开这个 Tab 页很困难。&lt;/p&gt;&lt;p data-pid=&quot;50oAVUcc&quot;&gt;你能想象在下面的众多 Tab 页中找出你想要的页面吗？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bea553c3cc3b51da33b60afc825952af_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1866&quot; data-rawheight=&quot;154&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-bea553c3cc3b51da33b60afc825952af_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1866&quot; data-rawheight=&quot;154&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-bea553c3cc3b51da33b60afc825952af_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-bea553c3cc3b51da33b60afc825952af_b.png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-pid=&quot;eZyBsjer&quot;&gt; PS：最新版的 Chrome 已经实现了 Tab 页的搜索。&lt;br/&gt; &lt;br/&gt; &lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-351b8a11d4ae856463555d6c5d2228a5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;1728&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-351b8a11d4ae856463555d6c5d2228a5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;1728&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-351b8a11d4ae856463555d6c5d2228a5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-351b8a11d4ae856463555d6c5d2228a5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;1M_STHzh&quot;&gt;但是 Omni 却在浏览器中实现了类似 Mac 的的 &quot;聚焦搜索&quot; 一样的功能, 通过快捷键 Command/Ctrl + Shift + K 就能呼出一个类似这样的菜单：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5ec4291529ed41d79459be103162ab54_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2202&quot; data-rawheight=&quot;2240&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-5ec4291529ed41d79459be103162ab54_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2202&quot; data-rawheight=&quot;2240&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-5ec4291529ed41d79459be103162ab54_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5ec4291529ed41d79459be103162ab54_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;BX3ka_1i&quot;&gt;然后你可以在里面搜索你想要的任何内容，它会聚合你的 Tabs 页、书签与历史记录，只要输出对应的关键词，你就可以直接找到你想要的内容！很方便对吧！比如我搜索某个 Tab：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0f89d5c1ffacfe4642aa385cb731d217_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1618&quot; data-rawheight=&quot;576&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-0f89d5c1ffacfe4642aa385cb731d217_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1618&quot; data-rawheight=&quot;576&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-0f89d5c1ffacfe4642aa385cb731d217_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0f89d5c1ffacfe4642aa385cb731d217_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;功能特性&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;-70lKPGm&quot;&gt;除此之外，Omni 还支持什么功能了，让我们来盘一盘：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;5glyJU7c&quot;&gt;  切换、打开、关闭和搜索标签&lt;/li&gt;&lt;li data-pid=&quot;waoChHdw&quot;&gt;  浏览和管理您的书签&lt;/li&gt;&lt;li data-pid=&quot;ZiCaQcsQ&quot;&gt;  搜索您的浏览历史&lt;/li&gt;&lt;li data-pid=&quot;PWY29rB6&quot;&gt;⚡️ 50 多项提高您的工作效率的行动&lt;/li&gt;&lt;li data-pid=&quot;bakdxIHT&quot;&gt;  用于过滤和执行更多操作的特殊命令&lt;/li&gt;&lt;li data-pid=&quot;xdNdttrI&quot;&gt;  与 Notion、Figma、Docs、Asana 的集成......&lt;/li&gt;&lt;li data-pid=&quot;P9t1td7I&quot;&gt;⌨️ 静音、固定、书签等操作的快捷方式...&lt;/li&gt;&lt;li data-pid=&quot;zcgdz8c5&quot;&gt;⚙️ 高级设置可帮助解决浏览问题&lt;/li&gt;&lt;li data-pid=&quot;3SHhxIUe&quot;&gt; 黑暗模式&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;NwTj9Lup&quot;&gt;还有很多很多其他功能等待你去发掘，而且这些都无需注册账号登录就可以免费使用，如果你迫不及待想要试用 Omni 的功能，可以访问对应的网站开始下载：&lt;/p&gt;&lt;p data-pid=&quot;bgHx3oHs&quot;&gt;Omni 这么多功能，那么主要功能如何使用呢？或者对于你日程工作有什么可以提高生产力的东西呢？接下来就让我们一一来看一下。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;  切换、打开、关闭和搜索标签&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li data-pid=&quot;r-7DzuWJ&quot;&gt;搜索：当你通过快捷键激活搜索栏之后，你可以输入内容，之后会聚合展示 Tab 页、书签与历史记录&lt;/li&gt;&lt;li data-pid=&quot;0b-JOLD8&quot;&gt;切换：搜索到内容之后，通过键盘上下键导航，然后回车，可以切换到此 Tab 页&lt;/li&gt;&lt;li data-pid=&quot;GQqUjt-Z&quot;&gt;打开：如果内容是现在 Tab 页、书签和历史记录里都没有的，那么你对记录回车可以切换到 Google 直接进行搜索，或者键入 &lt;code&gt;New Tab&lt;/code&gt; 也可以打开一个新的 Tab 页&lt;/li&gt;&lt;li data-pid=&quot;ICCLLtl5&quot;&gt;关闭：搜索 Close 会展示出关闭当前 Tab 页的命令，回车即可关闭&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-163829ec74137fd48877ef13a0ca0728_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-163829ec74137fd48877ef13a0ca0728_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-163829ec74137fd48877ef13a0ca0728_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-163829ec74137fd48877ef13a0ca0728_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-163829ec74137fd48877ef13a0ca0728_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-163829ec74137fd48877ef13a0ca0728_b.gif&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;  浏览和管理您的书签&lt;/b&gt;&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-61bae339251b4eb0e48f761187dda09e_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic3.zhimg.com/v2-61bae339251b4eb0e48f761187dda09e_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-61bae339251b4eb0e48f761187dda09e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic3.zhimg.com/v2-61bae339251b4eb0e48f761187dda09e_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-61bae339251b4eb0e48f761187dda09e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-61bae339251b4eb0e48f761187dda09e_b.gif&quot;/&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li data-pid=&quot;i4W-ncjK&quot;&gt;浏览：输入 &lt;code&gt;B&lt;/code&gt; 开头的字母，你就可以查看所有的书签，然后滑动浏览&lt;/li&gt;&lt;li data-pid=&quot;3EuuQSE4&quot;&gt;管理：通过输入 Bookmark，你可以通过键盘上下键导航来将此页面创建为书签&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;  搜索您的浏览历史&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;1x90eAww&quot;&gt;通过键入 &lt;code&gt;/history&lt;/code&gt; ，会自动切换到搜索你的浏览历史记录：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-82699a2a9309b250a7866b54c1986dd8_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-82699a2a9309b250a7866b54c1986dd8_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-82699a2a9309b250a7866b54c1986dd8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-82699a2a9309b250a7866b54c1986dd8_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-82699a2a9309b250a7866b54c1986dd8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-82699a2a9309b250a7866b54c1986dd8_b.gif&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;⚡️ 50 多项提高您的工作效率的行动&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;L0zFVhd6&quot;&gt;这一项值得挖掘，我帮你看了看大概是如下内容，当你没有搜索任何内容时，滚动鼠标就可以查看这些功能列表：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;5lOAivFl&quot;&gt;开启网页全屏&lt;/li&gt;&lt;li data-pid=&quot;FLOAFVKc&quot;&gt;将当前页面静音&lt;/li&gt;&lt;li data-pid=&quot;ZUMRjY-S&quot;&gt;刷新当前页面&lt;/li&gt;&lt;li data-pid=&quot;Vv6RlRYW&quot;&gt;建立一封新邮件&lt;/li&gt;&lt;li data-pid=&quot;pA8m4elr&quot;&gt;建立一篇新 Notion 文档（很贴心有木有）&lt;/li&gt;&lt;li data-pid=&quot;ZcN_lE5W&quot;&gt;建立一篇新的 Google 表单&lt;/li&gt;&lt;li data-pid=&quot;SFwEw1Nx&quot;&gt;建立一篇新的 Medium 故事&lt;/li&gt;&lt;li data-pid=&quot;X8lnTLU3&quot;&gt;建立一个新的 Github 仓库（打工人爱了有木有）&lt;/li&gt;&lt;li data-pid=&quot;r1oM9vDH&quot;&gt;建立一篇新的 PPT&lt;/li&gt;&lt;li data-pid=&quot;RBSunP3n&quot;&gt;创建一个新的 Figma 页面&lt;/li&gt;&lt;li data-pid=&quot;IZ4GTQOz&quot;&gt;发布一个 ProductHunt 产品&lt;/li&gt;&lt;li data-pid=&quot;pi64_0Wl&quot;&gt;发布一条 Tweet&lt;/li&gt;&lt;li data-pid=&quot;ppxoUYam&quot;&gt;发起一个新的会议&lt;/li&gt;&lt;li data-pid=&quot;HQegLFWf&quot;&gt;管理你的插件&lt;/li&gt;&lt;li data-pid=&quot;X78N__gR&quot;&gt;浏览器设置&lt;/li&gt;&lt;li data-pid=&quot;Pa_XCN7Q&quot;&gt;....&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;TYcMzeHH&quot;&gt;只有你想不到，没有它做不到，通过键入对应的命令就可以快捷的在一处管理你几乎所有的工作需求。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9c38311e67352adfe516e7ca7981a588_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-9c38311e67352adfe516e7ca7981a588_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-9c38311e67352adfe516e7ca7981a588_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-9c38311e67352adfe516e7ca7981a588_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-9c38311e67352adfe516e7ca7981a588_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-9c38311e67352adfe516e7ca7981a588_b.gif&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;  用于过滤和执行更多操作的特殊命令&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;xFrzNr5O&quot;&gt;通过输入如下文字就可以激活这些命令：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;_M5CQjb6&quot;&gt;&lt;b&gt;/tabs&lt;/b&gt; ：就可以搜索你的 Tab 页&lt;/li&gt;&lt;li data-pid=&quot;AV7hRqlV&quot;&gt;&lt;b&gt;/bookmarks&lt;/b&gt; ：就可以搜索你所有的书签&lt;/li&gt;&lt;li data-pid=&quot;IzUI-EHm&quot;&gt;&lt;b&gt;/history&lt;/b&gt; ：搜索你的历史记录&lt;/li&gt;&lt;li data-pid=&quot;QpJoGxhn&quot;&gt;&lt;b&gt;/actions&lt;/b&gt; ：搜索所有可用的 “动作”&lt;/li&gt;&lt;li data-pid=&quot;QehpR_Kn&quot;&gt;&lt;b&gt;/remove&lt;/b&gt; ：删除书签或者关闭某个 Tab&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0d11151f311eb040a490e079f50aeeed_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-0d11151f311eb040a490e079f50aeeed_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-0d11151f311eb040a490e079f50aeeed_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-0d11151f311eb040a490e079f50aeeed_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-0d11151f311eb040a490e079f50aeeed_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-0d11151f311eb040a490e079f50aeeed_b.gif&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;  与 Notion、Figma、Docs、Asana 的集成......&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;mPzz1Rc3&quot;&gt;这个也是我们前面看到的，你可以方便的在 Omni 里面打开如下内容：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;4VldTSSA&quot;&gt;创建一篇新的 Notion 文档&lt;/li&gt;&lt;li data-pid=&quot;we--EI7W&quot;&gt;创建一个新的 Figma 设计文件&lt;/li&gt;&lt;li data-pid=&quot;iEQQEWcH&quot;&gt;创建一篇新的 Google Docs，如 PPT&lt;/li&gt;&lt;li data-pid=&quot;BWcvpGJ4&quot;&gt;创建一个新的 Asana 任务&lt;/li&gt;&lt;li data-pid=&quot;ZFd_cKZr&quot;&gt;等等 ...&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d69efe02a1ddc7aa9757ff5920094438_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-d69efe02a1ddc7aa9757ff5920094438_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-d69efe02a1ddc7aa9757ff5920094438_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-d69efe02a1ddc7aa9757ff5920094438_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-d69efe02a1ddc7aa9757ff5920094438_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d69efe02a1ddc7aa9757ff5920094438_b.gif&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;⌨️ 静音、固定、书签等操作的快捷方式...&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;XbpBo8oA&quot;&gt;想要静音当前 Tab 不知道怎么去设置？想要方便的固定此网页觉得麻烦？&lt;/p&gt;&lt;p data-pid=&quot;zB-qhWrV&quot;&gt;Omni 都可以帮到你！&lt;/p&gt;&lt;p data-pid=&quot;1XVmu-ZH&quot;&gt;静音：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d94b512a35a4487bd431d0967a370c1a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1398&quot; data-rawheight=&quot;348&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-d94b512a35a4487bd431d0967a370c1a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1398&quot; data-rawheight=&quot;348&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-d94b512a35a4487bd431d0967a370c1a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-d94b512a35a4487bd431d0967a370c1a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;3Krjc8rO&quot;&gt;固定：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f352a9f4657d0ad14791d9b116f93d2f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1394&quot; data-rawheight=&quot;462&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-f352a9f4657d0ad14791d9b116f93d2f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1394&quot; data-rawheight=&quot;462&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-f352a9f4657d0ad14791d9b116f93d2f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f352a9f4657d0ad14791d9b116f93d2f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;LiAkTViK&quot;&gt;处理书签：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eefe944c076ee93457c823c4014dba58_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1398&quot; data-rawheight=&quot;584&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-eefe944c076ee93457c823c4014dba58_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1398&quot; data-rawheight=&quot;584&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-eefe944c076ee93457c823c4014dba58_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-eefe944c076ee93457c823c4014dba58_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;⚙️ 高级设置可帮助解决浏览问题&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;3vKXkUqM&quot;&gt;其实高级设置就是你一系列你可能用了，但是没啥感觉的功能，如：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;LUi3vNYj&quot;&gt;滚动到页面底部、顶部&lt;/li&gt;&lt;li data-pid=&quot;tCXUpw9n&quot;&gt;重新加载页面&lt;/li&gt;&lt;li data-pid=&quot;igRHUw6T&quot;&gt;打印页面&lt;/li&gt;&lt;li data-pid=&quot;WmgKtwNJ&quot;&gt;录屏&lt;/li&gt;&lt;li data-pid=&quot;68N9-CDm&quot;&gt;打开下载页面&lt;/li&gt;&lt;li data-pid=&quot;FDF_BEBj&quot;&gt;打开浏览器设置&lt;/li&gt;&lt;li data-pid=&quot;uyKUxxFG&quot;&gt;返回上一页&lt;/li&gt;&lt;li data-pid=&quot;RAH-twMM&quot;&gt;去下一页&lt;/li&gt;&lt;li data-pid=&quot;z46v6Ghj&quot;&gt;复制一份当前页面&lt;/li&gt;&lt;li data-pid=&quot;NpN9ENce&quot;&gt;关闭浏览器&lt;/li&gt;&lt;li data-pid=&quot;hPCn6wKz&quot;&gt;清除浏览历史&lt;/li&gt;&lt;li data-pid=&quot;BgSmWkDk&quot;&gt;清除 Cookie&lt;/li&gt;&lt;li data-pid=&quot;pLbXcJAL&quot;&gt;清除缓存&lt;/li&gt;&lt;li data-pid=&quot;8tUrIJJB&quot;&gt;清空密码&lt;/li&gt;&lt;li data-pid=&quot;tGJ27FS9&quot;&gt;等等&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3d92e5a8cfb78091422b87cf33e3fa49_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-3d92e5a8cfb78091422b87cf33e3fa49_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-3d92e5a8cfb78091422b87cf33e3fa49_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;897&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-3d92e5a8cfb78091422b87cf33e3fa49_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-3d92e5a8cfb78091422b87cf33e3fa49_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3d92e5a8cfb78091422b87cf33e3fa49_b.gif&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt; 黑暗模式&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;vQ4AFguw&quot;&gt;黑暗模式是跟随系统的，如果你系统设置从亮色模式切换到黑暗模式，那么当你重启浏览器之后，再打开 Omni 就会显示黑暗模式的搜索窗口！&lt;/p&gt;&lt;p data-pid=&quot;AeHILSnQ&quot;&gt;这是亮色模式：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2d648610f5f14c4761d4302a109fce6c_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1458&quot; data-rawheight=&quot;206&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-2d648610f5f14c4761d4302a109fce6c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1458&quot; data-rawheight=&quot;206&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-2d648610f5f14c4761d4302a109fce6c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-2d648610f5f14c4761d4302a109fce6c_b.png&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;ykrwZNfP&quot;&gt;这是黑暗模式：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-759fad1249bc56ec15ca7049b0821fa2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1336&quot; data-rawheight=&quot;548&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-759fad1249bc56ec15ca7049b0821fa2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1336&quot; data-rawheight=&quot;548&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-759fad1249bc56ec15ca7049b0821fa2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-759fad1249bc56ec15ca7049b0821fa2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;小结&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;PKsj9IlT&quot;&gt;当然还有更多便利的内容你可以亲身体验之后才能感觉到，当然你可以&lt;b&gt;给作者提新的功能需求或者 Bug 哦[5]&lt;/b&gt;~&lt;/p&gt;&lt;h3&gt;&lt;b&gt;参考资料&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;fugNv6xb&quot;&gt;[1] &lt;/p&gt;&lt;p data-pid=&quot;UvsdkHP2&quot;&gt;&lt;b&gt;ProductHunt: &lt;i&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.producthunt.com/posts/omni-3%3Futm_source%3Dbadge-top-post-badge%26utm_medium%3Dbadge%26utm_souce%3Dbadge-omni-3&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;producthunt.com/posts/o&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;mni-3?utm_source=badge-top-post-badge&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-omni-3&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;wTy69Tus&quot;&gt;[2] &lt;/p&gt;&lt;p data-pid=&quot;joTxZqqk&quot;&gt;&lt;b&gt;Twitter: &lt;i&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//twitter.com/alyssaxuu&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;twitter.com/alyssaxuu&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;MnV8kjEJ&quot;&gt;[3] &lt;/p&gt;&lt;p data-pid=&quot;HwLeaTkY&quot;&gt;&lt;b&gt;Chrome 插件地址: &lt;i&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/omni-bookmark-history-tab/mapjgeachilmcbbokkgcbgpbakaaeehi%3Fhl%3Den%26authuser%3D0&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;chrome.google.com/webst&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ore/detail/omni-bookmark-history-tab/mapjgeachilmcbbokkgcbgpbakaaeehi?hl=en&amp;amp;authuser=0&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;vvAdH23L&quot;&gt;[4] &lt;/p&gt;&lt;p data-pid=&quot;2CIgke4H&quot;&gt;&lt;b&gt;Firefox 的插件地址: &lt;i&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//addons.mozilla.org/en-GB/firefox/addon/omnisearch/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;addons.mozilla.org/en-G&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;B/firefox/addon/omnisearch/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;JRPki9LT&quot;&gt;[5] &lt;/p&gt;&lt;p data-pid=&quot;deJLOGiW&quot;&gt;&lt;b&gt;给作者提新的功能需求或者 Bug 哦: &lt;i&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/alyssaxuu/omni/issues/new&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/alyssaxuu/om&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ni/issues/new&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d3fdbc5ab2dbe103201027b33fcbe4d1</guid>
<title>2 万字详解，彻底讲透 Elasticsearch</title>
<link>https://toutiao.io/k/vn4zmae</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;由于近期在公司内部做了一次 Elasticsearch 的分享，所以本篇主要是做一个总结，希望通过这篇文章能让读者大致了解 Elasticsearch 是做什么的以及它的使用和基本原理。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;生活中的数据&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搜索引擎是对数据的检索，所以我们先从生活中的数据说起。我们生活中的数据总体分为两种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;结构化数据：&lt;/strong&gt; 也称作行数据，是由二维表结构来逻辑表达和实现的数据，严格地遵循数据格式与长度规范，主要通过关系型数据库进行存储和管理。指具有固定格式或有限长度的数据，如数据库，元数据等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;非结构化数据：&lt;/strong&gt; 又可称为全文数据，不定长或无固定格式，不适于由数据库二维表来表现，包括所有格式的办公文档、XML、HTML、Word 文档，邮件，各类报表、图片和咅频、视频信息等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：如果要更细致的区分的话，XML、HTML 可划分为半结构化数据。因为它们也具有自己特定的标签格式，所以既可以根据需要按结构化数据来处理，也可抽取出纯文本按非结构化数据来处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据两种数据分类，搜索也相应的分为两种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于结构化数据，因为它们具有特定的结构，所以我们一般都是可以通过关系型数据库（MySQL，Oracle 等）的二维表（Table）的方式存储和搜索，也可以建立索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于非结构化数据，也即对全文数据的搜索主要有两种方法：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;顺序扫描：&lt;/strong&gt; 通过文字名称也可了解到它的大概搜索方式，即按照顺序扫描的方式查询特定的关键字。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如给你一张报纸，让你找到该报纸中“平安”的文字在哪些地方出现过。你肯定需要从头到尾把报纸阅读扫描一遍然后标记出关键字在哪些版块出现过以及它的出现位置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式无疑是最耗时的最低效的，如果报纸排版字体小，而且版块较多甚至有多份报纸，等你扫描完你的眼睛也差不多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;全文搜索：&lt;/strong&gt; 对非结构化数据顺序扫描很慢，我们是否可以进行优化？把我们的非结构化数据想办法弄得有一定结构不就行了吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式就构成了全文检索的基本思路。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之为索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式的主要工作量在前期索引的创建，但是对于后期搜索却是快速高效的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先说说 Lucene&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过对生活中数据的类型作了一个简短了解之后，我们知道关系型数据库的 SQL 检索是处理不了这种非结构化数据的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种非结构化数据的处理需要依赖全文搜索，而目前市场上开放源代码的最好全文检索引擎工具包就属于 Apache 的 Lucene了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是 Lucene 只是一个工具包，它不是一个完整的全文检索引擎。Lucene 的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前以 Lucene 为基础建立的开源可用全文搜索引擎主要是 Solr 和 Elasticsearch。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Solr 和 Elasticsearch 都是比较成熟的全文搜索引擎，能完成的功能和性能也基本一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是 ES 本身就具有分布式的特性和易安装使用的特点，而 Solr 的分布式需要借助第三方来实现，例如通过使用 ZooKeeper 来达到分布式协调管理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不管是 Solr 还是 Elasticsearch 底层都是依赖于 Lucene，而 Lucene 能实现全文搜索主要是因为它实现了倒排索引的查询结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何理解倒排索引呢？ 假如现有三份数据文档，文档的内容如下分别是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Java is the best programming language.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PHP is the best programming language.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Javascript is the best programming language.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了创建倒排索引，我们通过分词器将每个文档的内容域拆分成单独的词（我们称它为词条或 Term），创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Term          Doc_1    Doc_2   Doc_3  &lt;br/&gt;-------------------------------------  &lt;br/&gt;Java        |   X   |        |  &lt;br/&gt;is          |   X   |   X    |   X  &lt;br/&gt;the         |   X   |   X    |   X  &lt;br/&gt;best        |   X   |   X    |   X  &lt;br/&gt;programming |   x   |   X    |   X  &lt;br/&gt;language    |   X   |   X    |   X  &lt;br/&gt;PHP         |       |   X    |  &lt;br/&gt;Javascript  |       |        |   X  &lt;br/&gt;-------------------------------------  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种结构由文档中所有不重复词的列表构成，对于其中每个词都有一个文档列表与之关联。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种由属性值来确定记录的位置的结构就是倒排索引。带有倒排索引的文件我们称为倒排文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将上面的内容转换为图的形式来说明倒排索引的结构信息，如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6990740740740741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hVH3IUycaXbZib5Koq8WmfkoicqcEKGkEaJgoRj9ScrmHQvNN4yp6CXKPvg114OpDian2PSqQibM9MuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中主要有如下几个核心术语需要理解：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;词条（Term）：&lt;/strong&gt; 索引里面最小的存储和查询单元，对于英文来说是一个单词，对于中文来说一般指分词后的一个词。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;词典（Term Dictionary）：&lt;/strong&gt; 或字典，是词条 Term 的集合。搜索引擎的通常索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向“倒排列表”的指针。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;倒排表（Post list）：&lt;/strong&gt; 一个文档通常由多个词组成，倒排表记录的是某个词在哪些文档里出现过以及出现的位置。每条记录称为一个倒排项（Posting）。倒排表记录的不单是文档编号，还存储了词频等信息。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;倒排文件（Inverted File）：&lt;/strong&gt; 所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件被称之为倒排文件，倒排文件是存储倒排索引的物理文件。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上图我们可以了解到倒排索引主要由两个部分组成：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;词典和倒排表是 Lucene 中很重要的两种数据结构，是实现快速检索的重要基石。词典和倒排文件是分两部分存储的，词典在内存中而倒排文件存储在磁盘上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ES 核心概念&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一些基础知识的铺垫之后我们正式进入今天的主角 Elasticsearch 的介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES 是使用 Java 编写的一种开源搜索引擎，它在内部使用 Lucene 做索引与搜索，通过对 Lucene 的封装，隐藏了 Lucene 的复杂性，取而代之的提供一套简单一致的 RESTful API。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而，Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它可以被下面这样准确的形容：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一个分布式的实时文档存储，每个字段可以被索引与搜索。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个分布式实时分析搜索引擎。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官网对 Elasticsearch 的介绍是 Elasticsearch 是一个分布式、可扩展、近实时的搜索与数据分析引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通过一些核心概念来看下 Elasticsearch 是如何做到分布式，可扩展和近实时搜索的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;集群（Cluster）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES 的集群搭建很简单，不需要依赖第三方协调管理组件，自身内部就实现了集群的管理功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES 集群由一个或多个 Elasticsearch 节点组成，每个节点配置相同的 cluster.name 即可加入集群，默认值为 “elasticsearch”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确保不同的环境中使用不同的集群名称，否则最终会导致节点加入错误的集群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个 Elasticsearch 服务启动实例就是一个节点（Node）。节点通过 node.name 来设置节点名称，如果不设置则在启动时给节点分配一个随机通用唯一标识符作为名称。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;①发现机制&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么有一个问题，ES 内部是如何通过一个相同的设置 cluster.name 就能将不同的节点连接到同一个集群的？答案是 Zen Discovery。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Zen Discovery 是 Elasticsearch 的内置默认发现模块（发现模块的职责是发现集群中的节点以及选举 Master 节点）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它提供单播和基于文件的发现，并且可以扩展为通过插件支持云环境和其他形式的发现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Zen Discovery 与其他模块集成，例如，节点之间的所有通信都使用 Transport 模块完成。节点使用发现机制通过 Ping 的方式查找其他节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Elasticsearch 默认被配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果集群的节点运行在不同的机器上，使用单播，你可以为 Elasticsearch 提供一些它应该去尝试连接的节点列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个节点联系到单播列表中的成员时，它就会得到整个集群所有节点的状态，然后它会联系 Master 节点，并加入集群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这意味着单播列表不需要包含集群中的所有节点， 它只是需要足够的节点，当一个新节点联系上其中一个并且说上话就可以了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你使用 Master 候选节点作为单播列表，你只要列出三个就可以了。这个配置在 elasticsearch.yml 文件中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;discovery.zen.ping.unicast.hosts: [&lt;span&gt;&quot;host1&quot;&lt;/span&gt;, &lt;span&gt;&quot;host2:port&quot;&lt;/span&gt;]  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;节点启动后先 Ping ，如果 &lt;code&gt;discovery.zen.ping.unicast.hosts&lt;/code&gt; 有设置，则 Ping 设置中的 Host ，否则尝试 ping localhost 的几个端口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Elasticsearch 支持同一个主机启动多个节点，Ping 的 Response 会包含该节点的基本信息以及该节点认为的 Master 节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选举开始，先从各节点认为的 Master 中选，规则很简单，按照 ID 的字典序排序，取第一个。如果各节点都没有认为的 Master ，则从所有节点中选择，规则同上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有个限制条件就是 &lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt; ，如果节点数达不到最小值的限制，则循环上述过程，直到节点数足够可以开始选举。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后选举结果是肯定能选举出一个 Master ，如果只有一个 Local 节点那就选出的是自己。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果当前节点是 Master ，则开始等待节点数达到 &lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt;，然后提供服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果当前节点不是 Master ，则尝试加入 Master 。Elasticsearch 将以上服务发现以及选主的流程叫做 Zen Discovery 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于它支持任意数目的集群（ 1- N ），所以不能像 Zookeeper 那样限制节点必须是奇数，也就无法用投票的机制来选主，而是通过一个规则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要所有的节点都遵循同样的规则，得到的信息都是对等的，选出来的主节点肯定是一致的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但分布式系统的问题就出在信息不对等的情况，这时候很容易出现脑裂（Split-Brain）的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数解决方案就是设置一个 Quorum 值，要求可用节点必须大于 Quorum（一般是超过半数节点），才能对外提供服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 Elasticsearch 中，这个 Quorum 的配置就是 &lt;code&gt;discovery.zen.minimum_master_nodes&lt;/code&gt; 。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;②节点的角色&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个节点既可以是候选主节点也可以是数据节点，通过在配置文件 ../config/elasticsearch.yml 中设置即可，默认都为 true。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;node.master: &lt;span&gt;true&lt;/span&gt;  //是否候选主节点  &lt;br/&gt;node.data: &lt;span&gt;true&lt;/span&gt;    //是否数据节点  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据节点负责数据的存储和相关的操作，例如对数据进行增、删、改、查和聚合等操作，所以数据节点（Data 节点）对机器配置要求比较高，对 CPU、内存和 I/O 的消耗很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常随着集群的扩大，需要增加更多的数据节点来提高性能和可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;候选主节点可以被选举为主节点（Master 节点），集群中只有候选主节点才有选举权和被选举权，其他节点不参与选举的工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点负责创建索引、删除索引、跟踪哪些节点是群集的一部分，并决定哪些分片分配给相关的节点、追踪集群中节点的状态等，稳定的主节点对集群的健康是非常重要的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5540865384615384&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PxMzT0Oibf4hVH3IUycaXbZib5Koq8Wmfk8BIXEgrg82MS7obopk8ia7SNBJYea2lKrQpiaUy4jibHJZqibamAV38FwA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;832&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个节点既可以是候选主节点也可以是数据节点，但是由于数据节点对 CPU、内存核 I/O 消耗都很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以如果某个节点既是数据节点又是主节点，那么可能会对主节点产生影响从而对整个集群的状态产生影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此为了提高集群的健康性，我们应该对 Elasticsearch 集群中的节点做好角色上的划分和隔离。可以使用几个配置较低的机器群作为候选主节点群。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点和其他节点之间通过 Ping 的方式互检查，主节点负责 Ping 所有其他节点，判断是否有节点已经挂掉。其他节点也通过 Ping 的方式判断主节点是否处于可用状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然对节点做了角色区分，但是用户的请求可以发往任何一个节点，并由该节点负责分发请求、收集结果等操作，而不需要主节点转发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种节点可称之为协调节点，协调节点是不需要指定和配置的，集群中的任何节点都可以充当协调节点的角色。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;③脑裂现象&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时如果由于网络或其他原因导致集群中选举出多个 Master 节点，使得数据更新时出现不一致，这种现象称之为脑裂，即集群中不同的节点对于 Master 的选择出现了分歧，出现了多个 Master 竞争。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“脑裂”问题可能有以下几个原因造成：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;网络问题：&lt;/strong&gt; 集群间的网络延迟导致一些节点访问不到 Master，认为 Master 挂掉了从而选举出新的 Master，并对 Master 上的分片和副本标红，分配新的主分片。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;节点负载：&lt;/strong&gt; 主节点的角色既为 Master 又为 Data，访问量较大时可能会导致 ES 停止响应（假死状态）造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;内存回收：&lt;/strong&gt; 主节点的角色既为 Master 又为 Data，当 Data 节点上的 ES 进程占用的内存较大，引发 JVM 的大规模内存回收，造成 ES 进程失去响应。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了避免脑裂现象的发生，我们可以从原因着手通过以下几个方面来做出优化措施：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;适当调大响应时间，减少误判。&lt;/strong&gt; 通过参数 discovery.zen.ping_timeout 设置节点状态的响应时间，默认为 3s，可以适当调大。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 Master 在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数（如 6s，&lt;code&gt;discovery.zen.ping_timeout:6&lt;/code&gt;），可适当减少误判。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;选举触发。&lt;/strong&gt; 我们需要在候选集群中的节点的配置文件中设置参数 &lt;code&gt;discovery.zen.munimum_master_nodes&lt;/code&gt; 的值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个参数表示在选举主节点时需要参与选举的候选主节点的节点数，默认值是 1，官方建议取值(&lt;code&gt;master_eligibel_nodes2)+1&lt;/code&gt;，其中 &lt;code&gt;master_eligibel_nodes&lt;/code&gt; 为候选主节点的个数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样做既能防止脑裂现象的发生，也能最大限度地提升集群的高可用性，因为只要不少于 &lt;code&gt;discovery.zen.munimum_master_nodes&lt;/code&gt; 个候选节点存活，选举工作就能正常进行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当小于这个值的时候，无法触发选举行为，集群无法使用，不会造成分片混乱的情况。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;角色分离。&lt;/strong&gt; 即是上面我们提到的候选主节点和数据节点进行角色分离，这样可以减轻主节点的负担，防止主节点的假死状态发生，减少对主节点“已死”的误判。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;分片（Shards）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES 支持 PB 级全文搜索，当索引上的数据量太大的时候，ES 通过水平拆分的方式将一个索引上的数据拆分出来分配到不同的数据块上，拆分出来的数据库块称之为一个分片。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类似于 MySQL 的分库分表，只不过 MySQL 分库分表需要借助第三方组件而 ES 内部自身实现了此功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一个多分片的索引中写入数据时，通过路由来确定具体写入哪一个分片中，所以在创建索引的时候需要指定分片的数量，并且分片的数量一旦确定就不能修改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分片的数量和下面介绍的副本数量都是可以通过创建索引时的 Settings 来配置，ES 默认为一个索引创建 5 个主分片, 并分别为每个分片创建一个副本。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;PUT /myIndex  &lt;br/&gt;{  &lt;br/&gt;   &lt;span&gt;&quot;settings&quot;&lt;/span&gt; : {  &lt;br/&gt;      &lt;span&gt;&quot;number_of_shards&quot;&lt;/span&gt; : 5,  &lt;br/&gt;      &lt;span&gt;&quot;number_of_replicas&quot;&lt;/span&gt; : 1  &lt;br/&gt;   }  &lt;br/&gt;}  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES 通过分片的功能使得索引在规模上和性能上都得到提升，每个分片都是 Lucene 中的一个索引文件，每个分片必须有一个主分片和零到多个副本。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;副本（Replicas）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;副本就是对分片的 Copy，每个主分片都有一个或多个副本分片，当主分片异常时，副本可以提供数据的查询等操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主分片和对应的副本分片是不会在同一个节点上的，所以副本分片数的最大值是 N-1（其中 N 为节点数）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对文档的新建、索引和删除请求都是写操作，必须在主分片上面完成之后才能被复制到相关的副本分片。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES 为了提高写入的能力这个过程是并发写的，同时为了解决并发写的过程中数据冲突的问题，ES 通过乐观锁的方式控制，每个文档都有一个&lt;code&gt; _version&lt;/code&gt; （版本）号，当文档被修改时版本号递增。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一旦所有的副本分片都报告写成功才会向协调节点报告成功，协调节点向客户端报告成功。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2644230769230769&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hVH3IUycaXbZib5Koq8Wmfkiaafg9Y8aHhpYPXOMibwUfg1WjZlcS1dTxBoIM60zMaaz6VdaMyOJvmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上图可以看出为了达到高可用，Master 节点会避免将主分片和副本分片放在同一个节点上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设这时节点 Node1 服务宕机了或者网络不可用了，那么主节点上主分片 S0 也就不可用了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幸运的是还存在另外两个节点能正常工作，这时 ES 会重新选举新的主节点，而且这两个节点上存在我们所需要的 S0 的所有数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们会将 S0 的副本分片提升为主分片，这个提升主分片的过程是瞬间发生的。此时集群的状态将会为  Yellow。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么我们集群状态是 Yellow 而不是 Green 呢？虽然我们拥有所有的 2 个主分片，但是同时设置了每个主分片需要对应两份副本分片，而此时只存在一份副本分片。所以集群不能为 Green 的状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们同样关闭了 Node2 ，我们的程序依然可以保持在不丢失任何数据的情况下运行，因为 Node3 为每一个分片都保留着一份副本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们重新启动 Node1 ，集群可以将缺失的副本分片再次进行分配，那么集群的状态又将恢复到原来的正常状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 Node1 依然拥有着之前的分片，它将尝试去重用它们，只不过这时 Node1 节点上的分片不再是主分片而是副本分片了，如果期间有更改的数据只需要从主分片上复制修改的数据文件即可。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结：&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;将数据分片是为了提高可处理数据的容量和易于进行水平扩展，为分片做副本是为了提高集群的稳定性和提高并发量。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;副本是乘法，越多消耗越大，但也越保险。分片是除法，分片越多，单分片数据就越少也越分散。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;副本越多，集群的可用性就越高，但是由于每个分片都相当于一个 Lucene 的索引文件，会占用一定的文件句柄、内存及 CPU。并且分片间的数据同步也会占用一定的网络带宽，所以索引的分片数和副本数也不是越多越好。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;映射（Mapping）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;映射是用于定义 ES 对索引中字段的存储类型、分词方式和是否存储等信息，就像数据库中的 Schema ，描述了文档可能具有的字段或属性、每个字段的数据类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只不过关系型数据库建表时必须指定字段类型，而 ES 对于字段类型可以不指定然后动态对字段类型猜测，也可以在创建索引时具体指定字段的类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对字段类型根据数据格式自动识别的映射称之为动态映射（Dynamic Mapping），我们创建索引时具体定义字段类型的映射称之为静态映射或显示映射（Explicit Mapping）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在讲解动态映射和静态映射的使用前，我们先来了解下 ES 中的数据有哪些字段类型？之后我们再讲解为什么我们创建索引时需要建立静态映射而不使用动态映射。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES（v6.8）中字段数据类型主要有以下几类：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2869047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hVH3IUycaXbZib5Koq8Wmfk3NdtphiaU1KgG0ibp9YcMkZwia7TRUmibicveyQ6bHicmHwibYlf91cMB6mQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;840&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Text 用于索引全文值的字段，例如电子邮件正文或产品说明。这些字段是被分词的，它们通过分词器传递 ，以在被索引之前将字符串转换为单个术语的列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析过程允许 Elasticsearch 搜索单个单词中每个完整的文本字段。文本字段不用于排序，很少用于聚合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Keyword 用于索引结构化内容的字段，例如电子邮件地址，主机名，状态代码，邮政编码或标签。它们通常用于过滤，排序，和聚合。Keyword 字段只能按其确切值进行搜索。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过对字段类型的了解我们知道有些字段需要明确定义的，例如某个字段是 Text 类型还是 Keyword 类型差别是很大的，时间字段也许我们需要指定它的时间格式，还有一些字段我们需要指定特定的分词器等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果采用动态映射是不能精确做到这些的，自动识别常常会与我们期望的有些差异。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以创建索引的时候一个完整的格式应该是指定分片和副本数以及 Mapping 的定义，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;PUT my_index   &lt;br/&gt;{  &lt;br/&gt;   &lt;span&gt;&quot;settings&quot;&lt;/span&gt; : {  &lt;br/&gt;      &lt;span&gt;&quot;number_of_shards&quot;&lt;/span&gt; : 5,  &lt;br/&gt;      &lt;span&gt;&quot;number_of_replicas&quot;&lt;/span&gt; : 1  &lt;br/&gt;   }  &lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {  &lt;br/&gt;    &lt;span&gt;&quot;_doc&quot;&lt;/span&gt;: {   &lt;br/&gt;      &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {   &lt;br/&gt;        &lt;span&gt;&quot;title&quot;&lt;/span&gt;:    { &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;  },   &lt;br/&gt;        &lt;span&gt;&quot;name&quot;&lt;/span&gt;:     { &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;  },   &lt;br/&gt;        &lt;span&gt;&quot;age&quot;&lt;/span&gt;:      { &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;integer&quot;&lt;/span&gt; },    &lt;br/&gt;        &lt;span&gt;&quot;created&quot;&lt;/span&gt;:  {  &lt;br/&gt;          &lt;span&gt;&quot;type&quot;&lt;/span&gt;:   &lt;span&gt;&quot;date&quot;&lt;/span&gt;,   &lt;br/&gt;          &lt;span&gt;&quot;format&quot;&lt;/span&gt;: &lt;span&gt;&quot;strict_date_optional_time||epoch_millis&quot;&lt;/span&gt;  &lt;br/&gt;        }  &lt;br/&gt;      }  &lt;br/&gt;    }  &lt;br/&gt;  }  &lt;br/&gt;}  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;ES 的基本使用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在决定使用 Elasticsearch 的时候首先要考虑的是版本问题，Elasticsearch （排除 0.x 和 1.x）目前有如下常用的稳定的主版本：2.x，5.x，6.x，7.x（current）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可能会发现没有 3.x 和 4.x，ES 从 2.4.6 直接跳到了 5.0.0。其实是为了 ELK（ElasticSearch，Logstash，Kibana）技术栈的版本统一，免的给用户带来混乱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Elasticsearch 是 2.x （2.x 的最后一版 2.4.6 的发布时间是 July 25, 2017） 的情况下，Kibana 已经是 4.x（Kibana 4.6.5 的发布时间是 July 25, 2017）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么在 Kibana 的下一主版本肯定是 5.x 了，所以 Elasticsearch 直接将自己的主版本发布为 5.0.0 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;统一之后，我们选版本就不会犹豫困惑了，我们选定 Elasticsearch 的版本后再选择相同版本的 Kibana 就行了，不用担忧版本不兼容的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Elasticsearch 是使用 Java 构建，所以除了注意 ELK 技术的版本统一，我们在选择 Elasticsearch 的版本的时候还需要注意 JDK 的版本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为每个大版本所依赖的 JDK 版本也不同，目前 7.2 版本已经可以支持 JDK11。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;安装使用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2857142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hVH3IUycaXbZib5Koq8WmfkG48w0JJoFBickdfoMcfia1LvNbMvibiaK7sJIT5p3IJ9QzykLM7xrubu8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;①下载和解压 Elasticsearch，无需安装解压后即可用，解压后目录如上图：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;bin&lt;/code&gt;：二进制系统指令目录，包含启动命令和安装插件命令等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;config&lt;/code&gt;：配置文件目录。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;data&lt;/code&gt;：数据存储目录。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;lib&lt;/code&gt;：依赖包目录。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;logs&lt;/code&gt;：日志文件目录。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;modules&lt;/code&gt;：模块库，例如 x-pack 的模块。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;plugins&lt;/code&gt;：插件目录。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;②安装目录下运行 &lt;code&gt;bin/elasticsearch&lt;/code&gt; 来启动 ES。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③默认在 9200 端口运行，请求 curl http://localhost:9200/ 或者浏览器输入 http://localhost:9200，得到一个 JSON 对象，其中包含当前节点、集群、版本等信息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{  &lt;br/&gt;  &lt;span&gt;&quot;name&quot;&lt;/span&gt; : &lt;span&gt;&quot;U7fp3O9&quot;&lt;/span&gt;,  &lt;br/&gt;  &lt;span&gt;&quot;cluster_name&quot;&lt;/span&gt; : &lt;span&gt;&quot;elasticsearch&quot;&lt;/span&gt;,  &lt;br/&gt;  &lt;span&gt;&quot;cluster_uuid&quot;&lt;/span&gt; : &lt;span&gt;&quot;-Rj8jGQvRIelGd9ckicUOA&quot;&lt;/span&gt;,  &lt;br/&gt;  &lt;span&gt;&quot;version&quot;&lt;/span&gt; : {  &lt;br/&gt;    &lt;span&gt;&quot;number&quot;&lt;/span&gt; : &lt;span&gt;&quot;6.8.1&quot;&lt;/span&gt;,  &lt;br/&gt;    &lt;span&gt;&quot;build_flavor&quot;&lt;/span&gt; : &lt;span&gt;&quot;default&quot;&lt;/span&gt;,  &lt;br/&gt;    &lt;span&gt;&quot;build_type&quot;&lt;/span&gt; : &lt;span&gt;&quot;zip&quot;&lt;/span&gt;,  &lt;br/&gt;    &lt;span&gt;&quot;build_hash&quot;&lt;/span&gt; : &lt;span&gt;&quot;1fad4e1&quot;&lt;/span&gt;,  &lt;br/&gt;    &lt;span&gt;&quot;build_date&quot;&lt;/span&gt; : &lt;span&gt;&quot;2019-06-18T13:16:52.517138Z&quot;&lt;/span&gt;,  &lt;br/&gt;    &lt;span&gt;&quot;build_snapshot&quot;&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;,  &lt;br/&gt;    &lt;span&gt;&quot;lucene_version&quot;&lt;/span&gt; : &lt;span&gt;&quot;7.7.0&quot;&lt;/span&gt;,  &lt;br/&gt;    &lt;span&gt;&quot;minimum_wire_compatibility_version&quot;&lt;/span&gt; : &lt;span&gt;&quot;5.6.0&quot;&lt;/span&gt;,  &lt;br/&gt;    &lt;span&gt;&quot;minimum_index_compatibility_version&quot;&lt;/span&gt; : &lt;span&gt;&quot;5.0.0&quot;&lt;/span&gt;  &lt;br/&gt;  },  &lt;br/&gt;  &lt;span&gt;&quot;tagline&quot;&lt;/span&gt; : &lt;span&gt;&quot;You Know, for Search&quot;&lt;/span&gt;  &lt;br/&gt;}  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;集群健康状态&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要检查群集运行状况，我们可以在 Kibana 控制台中运行以下命令 GET /_cluster/health，得到如下信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{  &lt;br/&gt;  &lt;span&gt;&quot;cluster_name&quot;&lt;/span&gt; : &lt;span&gt;&quot;wujiajian&quot;&lt;/span&gt;,  &lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt; : &lt;span&gt;&quot;yellow&quot;&lt;/span&gt;,  &lt;br/&gt;  &lt;span&gt;&quot;timed_out&quot;&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;,  &lt;br/&gt;  &lt;span&gt;&quot;number_of_nodes&quot;&lt;/span&gt; : 1,  &lt;br/&gt;  &lt;span&gt;&quot;number_of_data_nodes&quot;&lt;/span&gt; : 1,  &lt;br/&gt;  &lt;span&gt;&quot;active_primary_shards&quot;&lt;/span&gt; : 9,  &lt;br/&gt;  &lt;span&gt;&quot;active_shards&quot;&lt;/span&gt; : 9,  &lt;br/&gt;  &lt;span&gt;&quot;relocating_shards&quot;&lt;/span&gt; : 0,  &lt;br/&gt;  &lt;span&gt;&quot;initializing_shards&quot;&lt;/span&gt; : 0,  &lt;br/&gt;  &lt;span&gt;&quot;unassigned_shards&quot;&lt;/span&gt; : 5,  &lt;br/&gt;  &lt;span&gt;&quot;delayed_unassigned_shards&quot;&lt;/span&gt; : 0,  &lt;br/&gt;  &lt;span&gt;&quot;number_of_pending_tasks&quot;&lt;/span&gt; : 0,  &lt;br/&gt;  &lt;span&gt;&quot;number_of_in_flight_fetch&quot;&lt;/span&gt; : 0,  &lt;br/&gt;  &lt;span&gt;&quot;task_max_waiting_in_queue_millis&quot;&lt;/span&gt; : 0,  &lt;br/&gt;  &lt;span&gt;&quot;active_shards_percent_as_number&quot;&lt;/span&gt; : 64.28571428571429  &lt;br/&gt;}  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群状态通过 绿，黄，红 来标识：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;绿色：集群健康完好，一切功能齐全正常，所有分片和副本都可以正常工作。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;黄色：预警状态，所有主分片功能正常，但至少有一个副本是不能正常工作的。此时集群是可以正常工作的，但是高可用性在某种程度上会受影响。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;红色：集群不可正常使用。某个或某些分片及其副本异常不可用，这时集群的查询操作还能执行，但是返回的结果会不准确。对于分配到这个分片的写入请求将会报错，最终会导致数据的丢失。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当集群状态为红色时，它将会继续从可用的分片提供搜索请求服务，但是你需要尽快修复那些未分配的分片。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;ES 机制原理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES 的基本概念和基本操作介绍完了之后，我们可能还有很多疑惑：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;它们内部是如何运行的？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;主分片和副本分片是如何同步的？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;创建索引的流程是什么样的？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;ES 如何将索引数据分配到不同的分片上的？以及这些索引数据是如何存储的？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;为什么说 ES 是近实时搜索引擎而文档的 CRUD (创建-读取-更新-删除) 操作是实时的？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;以及 Elasticsearch 是怎样保证更新被持久化在断电时也不丢失数据？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;还有为什么删除文档不会立刻释放空间？&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;带着这些疑问我们进入接下来的内容。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;写索引原理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图描述了 3 个节点的集群，共拥有 12 个分片，其中有 4 个主分片（S0、S1、S2、S3）和 8 个副本分片（R0、R1、R2、R3），每个主分片对应两个副本分片，节点 1 是主节点（Master 节点）负责整个集群的状态。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4359903381642512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hVH3IUycaXbZib5Koq8WmfkWlicAKhpDrg6zPH4k9Ozy6jRovxHNt4lMTnO6wCTujV93SSb5YdqAOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写索引是只能写在主分片上，然后同步到副本分片。这里有四个主分片，一条数据 ES 是根据什么规则写到特定分片上的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这条索引数据为什么被写到 S0 上而不写到 S1 或 S2 上？那条数据为什么又被写到 S3 上而不写到 S0 上了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先这肯定不会是随机的，否则将来要获取文档的时候我们就不知道从何处寻找了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，这个过程是根据下面这个公式决定的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;shard = &lt;span&gt;hash&lt;/span&gt;(routing) % number_of_primary_shards  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Routing 是一个可变值，默认是文档的&lt;code&gt; _id&lt;/code&gt; ，也可以设置成一个自定义的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Routing 通过 Hash 函数生成一个数字，然后这个数字再除以 &lt;code&gt;number_of_primary_shards&lt;/code&gt; （主分片的数量）后得到余数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个在 0 到 &lt;code&gt;number_of_primary_shards-1&lt;/code&gt; 之间的余数，就是我们所寻求的文档所在分片的位置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就解释了为什么我们要在创建索引的时候就确定好主分片的数量并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于在 ES 集群中每个节点通过上面的计算公式都知道集群中的文档的存放位置，所以每个节点都有处理读写请求的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一个写请求被发送到某个节点后，该节点即为前面说过的协调节点，协调节点会根据路由公式计算出需要写到哪个分片上，再将请求转发到该分片的主分片节点上。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49095295536791317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PxMzT0Oibf4hVH3IUycaXbZib5Koq8WmfkmiaSuhyENf0Wh7zLLYricHmk7vlE9XBCdFX5mEN73oFFyfvmcic2raEWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;829&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如此时数据通过路由计算公式取余后得到的值是 &lt;code&gt;shard=hash(routing)%4=0&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;则具体流程如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;客户端向 ES1 节点（协调节点）发送写请求，通过路由计算公式得到值为 0，则当前数据应被写到主分片 S0 上。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;ES1 节点将请求转发到 S0 主分片所在的节点 ES3，ES3 接受请求并写入到磁盘。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;并发将数据复制到两个副本分片 R0 上，其中通过乐观并发控制数据的冲突。一旦所有的副本分片都报告成功，则节点 ES3 将向协调节点报告成功，协调节点向客户端报告成功。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;存储原理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面介绍了在 ES 内部索引的写处理流程，这个流程是在 ES 的内存中执行的，数据被分配到特定的分片和副本上之后，最终是存储到磁盘上的，这样在断电的时候就不会丢失数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的存储路径可在配置文件 &lt;code&gt;../config/elasticsearch.yml &lt;/code&gt;中进行设置，默认存储在安装目录的 Data 文件夹下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议不要使用默认值，因为若 ES 进行了升级，则有可能导致数据全部丢失：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;path.data: /path/to/data  //索引数据  &lt;br/&gt;path.logs: /path/to/logs  //日志记录  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;①分段存储&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;索引文档以段的形式存储在磁盘上，何为段？索引文件被拆分为多个子文件，则每个子文件叫作段，每一个段本身都是一个倒排索引，并且段具有不变性，一旦索引的数据被写入硬盘，就不可再修改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在底层采用了分段的存储模式，使它在读写时几乎完全避免了锁的出现，大大提升了读写性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;段被写入到磁盘后会生成一个提交点，提交点是一个用来记录所有提交后段信息的文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个段一旦拥有了提交点，就说明这个段只有读的权限，失去了写的权限。相反，当段在内存中时，就只有写的权限，而不具备读数据的权限，意味着不能被检索。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;段的概念提出主要是因为：在早期全文检索中为整个文档集合建立了一个很大的倒排索引，并将其写入磁盘中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果索引有更新，就需要重新全量创建一个索引来替换原来的索引。这种方式在数据量很大时效率很低，并且由于创建一次索引的成本很高，所以对数据的更新不能过于频繁，也就不能保证时效性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;索引文件分段存储并且不可修改，那么新增、更新和删除如何处理呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;新增，新增很好处理，由于数据是新的，所以只需要对当前文档新增一个段就可以了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;删除，由于不可修改，所以对于删除操作，不会把文档从旧的段中移除而是通过新增一个 .del 文件，文件中会列出这些被删除文档的段信息。这个被标记删除的文档仍然可以被查询匹配到， 但它会在最终结果被返回前从结果集中移除。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;更新，不能修改旧的段来进行反映文档的更新，其实更新相当于是删除和新增这两个动作组成。会将旧的文档在 .del 文件中标记删除，然后文档的新版本被索引到一个新的段中。可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就会被移除。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;段被设定为不可修改具有一定的优势也有一定的缺点，优势主要表现在：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;其它缓存(像 Filter 缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;写入单个大的倒排索引允许数据被压缩，减少磁盘 I/O 和需要被缓存到内存的索引的使用量。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;段的不变性的缺点如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;当对旧数据进行删除时，旧数据不会马上被删除，而是在 .del 文件中被标记为删除。而旧数据只能等到段更新时才能被移除，这样会造成大量的空间浪费。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;若有一条数据频繁的更新，每次更新都是新增新的标记旧的，则会有大量的空间浪费。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;每次新增数据时都需要新增一个段来存储数据。当段的数量太多时，对服务器的资源例如文件句柄的消耗会非常大。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在查询的结果中包含所有的结果集，需要排除被标记删除的旧数据，这增加了查询的负担。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;②延迟写策略&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;介绍完了存储的形式，那么索引写入到磁盘的过程是怎样的？是否是直接调 Fsync 物理性地写入磁盘？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是显而易见的，如果是直接写入到磁盘上，磁盘的 I/O 消耗上会严重影响性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么当写数据量大的时候会造成 ES 停顿卡死，查询也无法做到快速响应。如果真是这样 ES 也就不会称之为近实时全文搜索引擎了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了提升写的性能，ES 并没有每新增一条数据就增加一个段到磁盘上，而是采用延迟写的策略。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每当有新增的数据时，就将其先写入到内存中，在内存和磁盘之间是文件系统缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当达到默认的时间（1 秒钟）或者内存的数据达到一定量时，会触发一次刷新（Refresh），将内存中的数据生成到一个新的段上并缓存到文件缓存系统 上，稍后再被刷新到磁盘中并生成提交点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的内存使用的是 ES 的 JVM 内存，而文件缓存系统使用的是操作系统的内存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新的数据会继续的被写入内存，但内存中的数据并不是以段的形式存储的，因此不能提供检索功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由内存刷新到文件缓存系统的时候会生成新的段，并将段打开以供搜索使用，而不需要等到被刷新到磁盘。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做 Refresh （即内存刷新到文件缓存系统）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch 是近实时搜索，因为文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们也可以手动触发 Refresh，&lt;code&gt;POST /_refresh&lt;/code&gt; 刷新所有索引，&lt;code&gt;POST /nba/_refresh&lt;/code&gt; 刷新指定的索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Tips：尽管刷新是比提交轻量很多的操作，它还是会有性能开销。当写测试的时候， 手动刷新很有用，但是不要在生产&amp;gt;环境下每次索引一个文档都去手动刷新。而且并不是所有的情况都需要每秒刷新。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能你正在使用 Elasticsearch 索引大量的日志文件， 你可能想优化索引速度而不是&amp;gt;近实时搜索。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时可以在创建索引时在 Settings 中通过调大 &lt;code&gt;refresh_interval = &quot;30s&quot; &lt;/code&gt;的值 ， 降低每个索引的刷新频率，设值时需要注意后面带上时间单位，否则默认是毫秒。当 &lt;code&gt;refresh_interval=-1&lt;/code&gt; 时表示关闭索引的自动刷新。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然通过延时写的策略可以减少数据往磁盘上写的次数提升了整体的写入能力，但是我们知道文件缓存系统也是内存空间，属于操作系统的内存，只要是内存都存在断电或异常情况下丢失数据的危险。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了避免丢失数据，Elasticsearch 添加了事务日志（Translog），事务日志记录了所有还没有持久化到磁盘的数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9651442307692307&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PxMzT0Oibf4hVH3IUycaXbZib5Koq8WmfkfxSeppzJUiaKZaBq1kibIOG7jWUibicfaxCuTIu0LxbOj1eFAKVia9cLf7Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;832&quot;/&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;添加了事务日志后整个写索引的流程如上图所示：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;一个新文档被索引之后，先被写入到内存中，但是为了防止数据的丢失，会追加一份数据到事务日志中。&lt;/p&gt;&lt;p&gt;不断有新的文档被写入到内存，同时也都会记录到事务日志中。这时新数据还不能被检索和查询。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;当达到默认的刷新时间或内存中的数据达到一定量后，会触发一次  Refresh，将内存中的数据以一个新段形式刷新到文件缓存系统中并清空内存。这时虽然新段未被提交到磁盘，但是可以提供文档的检索功能且不能被修改。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;随着新文档索引不断被写入，当日志数据大小超过 512M 或者时间超过 30 分钟时，会触发一次 Flush。&lt;/p&gt;&lt;p&gt;内存中的数据被写入到一个新段同时被写入到文件缓存系统，文件系统缓存中数据通过 Fsync 刷新到磁盘中，生成提交点，日志文件被删除，创建一个空的新日志。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这种方式当断电或需要重启时，ES 不仅要根据提交点去加载已经持久化过的段，还需要工具 Translog 里的记录，把未持久化的数据重新持久化到磁盘上，避免了数据丢失的可能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;③段合并&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于自动刷新流程每秒会创建一个新的段 ，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一个段都会消耗文件句柄、内存和 CPU 运行周期。更重要的是，每个搜索请求都必须轮流检查每个段然后合并查询结果，所以段越多，搜索也就越慢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Elasticsearch 通过在后台定期进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档不会被拷贝到新的大段中。合并的过程中不会中断索引和搜索。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3786057692307692&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4hVH3IUycaXbZib5Koq8Wmfk3uxjyCldDSHCClz99fmLvwBuzL5rWJyFiaHMqdLJApxQx98mB1R8HOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;段合并在进行索引和搜索时会自动进行，合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中，这些段既可以是未提交的也可以是已提交的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;合并结束后老的段会被删除，新的段被 Flush 到磁盘，同时写入一个包含新段且排除旧的和较小的段的新提交点，新的段被打开可以用来搜索。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;段合并的计算量庞大， 而且还要吃掉大量磁盘 I/O，段合并会拖累写入速率，如果任其发展会影响搜索性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Elasticsearch 在默认情况下会对合并流程进行资源限制，所以搜索仍然有足够的资源很好地执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;性能优化&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;存储设备&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;磁盘在现代服务器上通常都是瓶颈。Elasticsearch 重度使用磁盘，你的磁盘能处理的吞吐量越大，你的节点就越稳定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有一些优化磁盘 I/O 的技巧：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用 SSD。就像其他地方提过的， 他们比机械磁盘优秀多了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用 RAID 0。条带化 RAID 会提高磁盘 I/O，代价显然就是当一块硬盘故障时整个就故障了。不要使用镜像或者奇偶校验 RAID 因为副本已经提供了这个功能。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;另外，使用多块硬盘，并允许 Elasticsearch 通过多个 path.data 目录配置把数据条带化分配到它们上面。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;不要使用远程挂载的存储，比如 NFS 或者 SMB/CIFS。这个引入的延迟对性能来说完全是背道而驰的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果你用的是 EC2，当心 EBS。即便是基于 SSD 的 EBS，通常也比本地实例的存储要慢。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;内部索引优化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5151148730350665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PxMzT0Oibf4hVH3IUycaXbZib5Koq8Wmfkw2IKK8nHdbOygjIjPVgshUARdvTFhJ9XVysU3nh2lsFZFFibicdn7Lfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;827&quot;/&gt;&lt;figcaption&gt;图片&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Elasticsearch 为了能快速找到某个 Term，先将所有的 Term 排个序，然后根据二分法查找 Term，时间复杂度为 logN，就像通过字典查找一样，这就是 Term Dictionary。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在再看起来，似乎和传统数据库通过 B-Tree 的方式类似。但是如果 Term 太多，Term Dictionary 也会很大，放内存不现实，于是有了 Term Index。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就像字典里的索引页一样，A 开头的有哪些 Term，分别在哪页，可以理解 Term Index是一棵树。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这棵树不会包含所有的 Term，它包含的是 Term 的一些前缀。通过 Term Index 可以快速地定位到 Term Dictionary 的某个 Offset，然后从这个位置再往后顺序查找。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在内存中用 FST 方式压缩 Term Index，FST 以字节的方式存储所有的 Term，这种压缩方式可以有效的缩减存储空间，使得 Term Index 足以放进内存，但这种方式也会导致查找时需要更多的 CPU 资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于存储在磁盘上的倒排表同样也采用了压缩技术减少存储所占用的空间。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;调整配置参数&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调整配置参数建议如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;给每个文档指定有序的具有压缩良好的序列模式 ID，避免随机的 UUID-4 这样的 ID，这样的 ID 压缩比很低，会明显拖慢 Lucene。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;对于那些不需要聚合和排序的索引字段禁用 Doc values。Doc Values 是有序的基于 &lt;code&gt;document=&amp;gt;field value&lt;/code&gt; 的映射列表。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;不需要做模糊检索的字段使用 Keyword 类型代替 Text 类型，这样可以避免在建立索引前对这些文本进行分词。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果你的搜索结果不需要近实时的准确度，考虑把每个索引的 &lt;code&gt;index.refresh_interval&lt;/code&gt; 改到 30s 。&lt;/p&gt;&lt;p&gt;如果你是在做大批量导入，导入期间你可以通过设置这个值为 -1 关掉刷新，还可以通过设置 &lt;code&gt;index.number_of_replicas: 0&lt;/code&gt; 关闭副本。别忘记在完工的时候重新开启它。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;避免深度分页查询建议使用 Scroll 进行分页查询。普通分页查询时，会创建一个 &lt;code&gt;from+size&lt;/code&gt; 的空优先队列，每个分片会返回 &lt;code&gt;from+size&lt;/code&gt; 条数据，默认只包含文档 ID 和得分 Score 给协调节点。&lt;/p&gt;&lt;p&gt;如果有 N 个分片，则协调节点再对（from+size）×n 条数据进行二次排序，然后选择需要被取回的文档。当 from 很大时，排序过程会变得很沉重，占用 CPU 资源严重。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;减少映射字段，只提供需要检索，聚合或排序的字段。其他字段可存在其他存储设备上，例如 Hbase，在 ES 中得到结果后再去 Hbase 查询这些字段。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;创建索引和查询时指定路由 Routing 值，这样可以精确到具体的分片查询，提升查询效率。路由的选择需要注意数据的分布均衡。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;JVM 调优&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JVM 调优建议如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;确保堆内存最小值（ Xms ）与最大值（ Xmx ）的大小是相同的，防止程序在运行时改变堆内存大小。Elasticsearch 默认安装后设置的堆内存是 1GB。可通过&lt;code&gt; ../config/jvm.option&lt;/code&gt; 文件进行配置，但是最好不要超过物理内存的50%和超过 32GB。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;GC 默认采用 CMS 的方式，并发但是有 STW 的问题，可以考虑使用 G1 收集器。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;ES 非常依赖文件系统缓存（Filesystem Cache），快速搜索。一般来说，应该至少确保物理上有一半的可用内存分配到文件系统缓存。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;来源：cnblogs.com/jajian/p/11223992.html&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;推&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;荐&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;阅&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;读 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/em&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&amp;amp;mid=2247491335&amp;amp;idx=1&amp;amp;sn=d545ef4911b4efcc4f31a0dc67fd20c2&amp;amp;chksm=ce0da884f97a21921d29ec9f41fe72c61a17ba592093c3ef3e4c803eb769e8ea6d980fa9a898&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Tomcat 在 Spring Boot 中是如何启动的&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;2. &lt;/em&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&amp;amp;mid=2247491335&amp;amp;idx=2&amp;amp;sn=6995ba48d0ca223ef67def657f6628b6&amp;amp;chksm=ce0da884f97a219244c31d808b40c5c098d559360156184827d7e36281510461b0276c26a471&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;别乱提交代码了&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;3.&lt;/span&gt;&lt;/em&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&amp;amp;mid=2247491324&amp;amp;idx=2&amp;amp;sn=0609a429071c9ff699c11dad19be1b78&amp;amp;chksm=ce0da97ff97a20698d70c73bbfb05bd550cdbc2551f26503d65bacf48b13eaee057876786cad&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;一场近乎完美基于 Dubbo 的微服务改造实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;4.&lt;/span&gt;&lt;/em&gt; &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&amp;amp;mid=2247491002&amp;amp;idx=1&amp;amp;sn=5aa3efc6b40a487a7ed64ae5b6e04ac4&amp;amp;chksm=ce0daa39f97a232f7edaaa3ae3dac94ea151fef4d5f3a9a23174244f30ff5a391ef5e3fddd25&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;11&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;什么是一致性 Hash 算法？&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;5.&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;  &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&amp;amp;mid=2247489626&amp;amp;idx=1&amp;amp;sn=4ea4286eaac7ed1fac9cbc2f2f3c630d&amp;amp;chksm=ce0dafd9f97a26cf9ea557c2122997beb7262c892effadebba1327ab3a25e65cd054e76d9a4c&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;团队开发中 Git 最佳实践&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/oTKHc6F8tsiaGusjfH9icriaLbtjRXyLk17akPicTDo35fb7fkdhLiaYo7uziaXBbUbzFGVsiaFuKXynZjHV6h0PvicAEQ/640?wx_fmt=jpeg&quot; data-cropx1=&quot;9.07563025210084&quot; data-cropx2=&quot;1080&quot; data-cropy1=&quot;96.80672268907563&quot; data-cropy2=&quot;837.9831932773109&quot; data-ratio=&quot;0.6928104575163399&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1071&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/oTKHc6F8tshiaET2eS0ScgEs9z9zu7iaODZ4bbLfEI06d7dNQicSjTxb1FYcZQUVrolibWDN5Yib1ibQvz6qBicD8bIyw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;喜&lt;/span&gt;&lt;span&gt;欢&lt;/span&gt;&lt;span&gt;文&lt;/span&gt;&lt;span&gt;章&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;点&lt;/span&gt;&lt;span&gt;个&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;在看 &lt;/span&gt;&lt;/span&gt;&lt;img data-ratio=&quot;1.1219512&quot; data-type=&quot;jpeg&quot; data-w=&quot;82&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/C1uDMDqjn19wtuQpK3jmJW3bFGWI8Yz6FR17tl1MF8VfqYxPx990kv2J74Lvqwib26KayHdOXd6ebzrqYibbTjww/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1bb18c5803d454dfcfc16050490d6bdd</guid>
<title>腾讯内部数据治理实践 - 知乎</title>
<link>https://toutiao.io/k/q2uqm1e</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-1g0fqss&quot; options=&quot;[object Object]&quot;&gt;&lt;p data-first-child=&quot;&quot; data-pid=&quot;2a60pY7i&quot;&gt;&lt;b&gt;​导读：&lt;/b&gt;本文主要介绍目前腾讯数据治理的所在阶段和实践经验，以及基于目前的经验所沉淀的数据治理平台：WeData。&lt;/p&gt;&lt;p data-pid=&quot;d5XeyAGW&quot;&gt;&lt;b&gt;今天的介绍会围绕下面三方面展开：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;vKJC6TTa&quot;&gt;数据治理挑战&lt;/li&gt;&lt;li data-pid=&quot;ME-CWpXw&quot;&gt;腾讯内部数据治理实践&lt;/li&gt;&lt;li data-pid=&quot;RrzypYw9&quot;&gt;WeData 数据治理平台能力&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;p data-pid=&quot;zzx0qQXt&quot;&gt;分享嘉宾｜王浩仙 腾讯云 技术产品&lt;/p&gt;&lt;p data-pid=&quot;E9onCxdd&quot;&gt;编辑整理｜聚变 腾讯&lt;/p&gt;&lt;p data-pid=&quot;x-V5zUp9&quot;&gt;出品社区｜DataFun&lt;/p&gt;&lt;hr/&gt;&lt;h2 id=&quot;h_600539032_0&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;01/数据治理挑战&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;Fb89Qtui&quot;&gt;首先和大家分享腾讯在数据治理上所面临的挑战。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_1&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;1. 数据治理的挑战&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-84df2842e0a9f096108a75d74da37235_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-84df2842e0a9f096108a75d74da37235_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-84df2842e0a9f096108a75d74da37235_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-84df2842e0a9f096108a75d74da37235_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;OYZY94Ht&quot;&gt;在数据治理的过程中会遇到很多问题，我们简单分成三类：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;9ktOomM6&quot;&gt;管理类挑战：数据信息分散在不同的业务部门的业务库中，数据上报也分散在不同的位置，难以对这些分散的数据进行统一的管理。随着数据量的不断增大，如何投入更少的人力去进行数据信息的维护也是一大难题。&lt;/li&gt;&lt;li data-pid=&quot;XWn7-rgR&quot;&gt;技术类挑战：我们的数据工程师在收集到数据后，数据的质量该怎么保证？如果数据本身质量不过关，可能带来负面的业务效果。&lt;/li&gt;&lt;li data-pid=&quot;Gy0R3sb_&quot;&gt;业务类挑战：在所有的数据上报之后，底层的业务元信息缺失，无法进行统一的审计或者度量。&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_2&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;2. 数据治理“马斯洛的需求层次理论”&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6ed3ee614f04b2c1a392197166713402_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-6ed3ee614f04b2c1a392197166713402_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-6ed3ee614f04b2c1a392197166713402_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6ed3ee614f04b2c1a392197166713402_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;iqaG0ZiZ&quot;&gt;数据治理对于不同企业，或者是一个企业在不同的发展阶段，所面临的问题是不一样的，这里进行了一个简单分类：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;EWkVfOoN&quot;&gt;时效性：数据采集上来后，我们会关注数据产出的及时性，因为如果数据发生的时效性没有达标的话，对当前的业务判断来讲价值就会降低。&lt;/li&gt;&lt;li data-pid=&quot;MBnPfF2L&quot;&gt;质量性：在数据已经有了一些闭环应用的基础上，还需要有准确性，完整性，有效性，如此才能保证在数据应用上能达成期望的效果。&lt;/li&gt;&lt;li data-pid=&quot;9a17RHpN&quot;&gt;可用性：如果数据是不可用的，则数据对我们的价值就降低。&lt;/li&gt;&lt;li data-pid=&quot;w44jjWxX&quot;&gt;安全性：在数据量很大之后，我们会更多地去关注数据共享或者数据应用，在这个过程中，我们的数据安全如何保障。&lt;/li&gt;&lt;li data-pid=&quot;OGEtS2Lf&quot;&gt;成本：解决问题过程中可能耗费大量人力、物力以及计算资源，我们是否能在解决问题的同时降低成本。&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;p1JD-_BK&quot;&gt;--&lt;/p&gt;&lt;h2 id=&quot;h_600539032_3&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;02/腾讯内部数据治理实践&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_4&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;1. 腾讯内部业务现状&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3a9917421d6507369ff04b519b2ef17b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-3a9917421d6507369ff04b519b2ef17b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-3a9917421d6507369ff04b519b2ef17b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-3a9917421d6507369ff04b519b2ef17b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;PwN4EJgj&quot;&gt;接下来介绍腾讯内部的业务现状，腾讯分很多的 BG，包括企业、娱乐、云方向、内容方向。这些涉及数万业务线，数百个产品线，达到 EB 级的数据存储量，拥有数千的数据分析师。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_5&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;2. 腾讯数据治理三阶段&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-670a728a020032c15f9485089997df8f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-670a728a020032c15f9485089997df8f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-670a728a020032c15f9485089997df8f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-670a728a020032c15f9485089997df8f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;MA1BSO4g&quot;&gt;每条业务线虽然不同，但也会有一些共性的地方。从大的方向上我们会分为三个阶段：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;_fw5jp2a&quot;&gt;&lt;b&gt;第一阶段：数据资产化&lt;/b&gt;，把数据这个物料变成一个有价值的资产，这才是我们所有的人做数据的一个最核心的目标。把这个目标达成了之后，才能把数据真正利用起来。&lt;/li&gt;&lt;li data-pid=&quot;6EeAJNzv&quot;&gt;&lt;b&gt;第二阶段：降本增效&lt;/b&gt;，如何把之前我们在做数据资产化过程中消耗的一些资源降下来，把整个投入降低，但是还能保持或者提高数据资产化的效果。&lt;/li&gt;&lt;li data-pid=&quot;iY57wvn_&quot;&gt;&lt;b&gt;第三阶段&lt;/b&gt;：在前两个阶段都完成之后，会发现可以抽象出来一些通用的东西，把我们内部的经验理念孵化出来，去解决更多的问题，这是&lt;b&gt;数据治理平台化产品化的阶段&lt;/b&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_6&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;3. 腾讯内部实践：腾讯新闻数据资产化&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-528ebaebd30e8395db62e13c27113a64_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-528ebaebd30e8395db62e13c27113a64_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-528ebaebd30e8395db62e13c27113a64_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-528ebaebd30e8395db62e13c27113a64_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;h4OCI_6A&quot;&gt;数据资产化阶段的实践，以腾讯新闻为例，在做数据治理这件事情的时候，最开始我们面临着两大问题：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;vuEo6EpG&quot;&gt;缺少统一数据规范：各业务数据埋点规范、上报规范、数仓规范、指标规范各异。&lt;/li&gt;&lt;li data-pid=&quot;UACjtYy_&quot;&gt;数据质量难以保障：业务数据仓库庞大，缺乏数据分层及数据模型，数据复用度仅 15%， 存在大量年久失修的数据。&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;7u8k9jmM&quot;&gt;针对这两大问题，我们进行了统一的数据资产化，包括统一埋点模型，升级数仓模型，构建指标模型。完成数据生产链路的规范化建设，从埋点到数仓到指标等，梳理完成了适合新闻的管理流程，并在大改版过程中快速应用。完成了 250 个模型设计或重构，52 个维表的设计以及 270 个应用表的开发。在数据资产完整性和分层规范达到 95%、复用度达到 73% 以上，跨层引用占比小于 5%。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_7&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;4. 腾讯内部实践：PGC（平台与内容事业群）数据成本治理&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7167584a3523c32b314cf2089d791de4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-7167584a3523c32b314cf2089d791de4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-7167584a3523c32b314cf2089d791de4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7167584a3523c32b314cf2089d791de4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;UOQtoM7S&quot;&gt;数据成本的治理，我们以腾讯内部 PGC（平台与内容事业群）业务线为例。在做成本治理的时候，我们要去定义成本的范围，包括：数据采集平台，数据生成平台，数据分析平台，数据应用平台。我们通过两个方面进行了优化，一方面从资源用量上降低业务不合理使用，另一方面从资源单价上提升数据平台的效能。截止到今年，在月成本同比增加 30%+ 的情况下，业务单位用户/内容消费的大数据成本下降，业务大数据成本绝对值下降至少 10%。强化了大数据成本治理理论，沉淀了方法论、流程和平台能力。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_8&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;5. 腾讯内部实践：治理平台化推动业务治理落地&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4396a057d6619f4702f94e1bf4109d55_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-4396a057d6619f4702f94e1bf4109d55_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-4396a057d6619f4702f94e1bf4109d55_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-4396a057d6619f4702f94e1bf4109d55_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;c-pTud2U&quot;&gt;海量数据给业务带来了巨大价值，同时也带来巨大的成本及负担。业务团队大数据成本盘点困难、治理执行门槛成本双高、治理效果不能有效量化，都是业务在推进资产治理的痛点。&lt;b&gt;我们把推动治理平台化分为了 4 个阶段：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;1aB5nLRV&quot;&gt;现状概览：洞察全域数仓及大数据成本，呈现最真实的业务资产情况。&lt;/li&gt;&lt;li data-pid=&quot;ibCtwUIG&quot;&gt;资产明细：全方位治理项洞察，基于资产分规范，对当前业务的待治理项进行明细展示。&lt;/li&gt;&lt;li data-pid=&quot;0KBHb4Ip&quot;&gt;治理方案：平台内置治理方案结合业务定制化治理方案。&lt;/li&gt;&lt;li data-pid=&quot;38EThMPq&quot;&gt;治理执行：一站式治理执行，针对洞察出的治理项进行治理动作。&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;7RAiqpNu&quot;&gt;&lt;b&gt;构建了一套属于我们自己的资产价值评分体系，包括：规范性、安全性、数据质量、数据成本、数据应用情况&lt;/b&gt;。将评分给到数据治理的实施人，帮助制定治理方案和复盘治理效果。&lt;/p&gt;&lt;p data-pid=&quot;c9U2bMxd&quot;&gt;--&lt;/p&gt;&lt;h2 id=&quot;h_600539032_9&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;03/WeData 数据治理平台能力&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_10&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;1. 腾讯内部大数据能力的对外商业化输出——WeData&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-dec33a518a2af49cee71998801fc743c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-dec33a518a2af49cee71998801fc743c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-dec33a518a2af49cee71998801fc743c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-dec33a518a2af49cee71998801fc743c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;Tiu2ZO79&quot;&gt;这是 WeData 数据开发治理平台的架构图，要形成一个闭环，与数据的生产生联动，因为数据治理不仅要处理存量数据，还要处理未来增量的数据。平台主要分成两大部分，左边是敏捷数据生产，包括：数据建模、数据集成、数据开发、数据服务。右边是高效数据治理，包括：资产治理，数据质量，数据安全，元数据资产。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_11&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;2. WeData 数据治理服务&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-77d86a7c52effd4ce1914a3163d17697_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-77d86a7c52effd4ce1914a3163d17697_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-77d86a7c52effd4ce1914a3163d17697_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-77d86a7c52effd4ce1914a3163d17697_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;5yCHD4fn&quot;&gt;首先我们看图的中心部分，分为上下两层，上面是数据流通与存储的过程，下面是加工生产的过程，包括数据汇聚，数据开发与运维（基础管理，库表构建，脚本开发，脚本编排）和数据服务（在数据上生成 API）。&lt;/p&gt;&lt;p data-pid=&quot;8b827rin&quot;&gt;&lt;b&gt;从图的左边看，首先要做的是数据建模&lt;/b&gt;，涉及到治理部分的能力，就包括最开始的数仓的规划，数仓定义和规范标准，模型定义和指标定义。前期定义之后，在接下来的数据生产的过程中，才能验证数据是否符合这个标准，如果前期没有定义，也可以在后期其他模块逐步地去发现完善它。&lt;/p&gt;&lt;p data-pid=&quot;rABpErdh&quot;&gt;&lt;b&gt;图的下方，主要是数据质量和数据安全部分&lt;/b&gt;。数据质量包括：事前的质量监控；事中的质量监测（如果不达标，我们会阻断流程，避免污染下游的数据）；事后的质量分析报告。数据安全也是包含三个部分，事前访问控制、事中脱敏加密，事后访问审计。数据的质量与安全的治理，贯穿数据的全生命周期。&lt;/p&gt;&lt;p data-pid=&quot;5_SqHwyE&quot;&gt;&lt;b&gt;图的右边是元数据资产，可以分成三个部分，首先发现元数据，采集元数据&lt;/b&gt;。接着，元数据采集上来之后，我作为数据的生产方，要具备管理好数据的能力，包括两层，第一层就是基本的技术元数据：库表，字段等。此外，还要从业务的角度去理解，所以需要大量的业务元数据的信息，与技术元信息进行关联。形成关联关系之后，数据使用者才能真正理解数据的业务含义。第三部分就是数据目录，通过数据目录 让所有使用数据的人能快速的定位到目标数据。通过血缘关系，帮助排查数据的来源和去向。数据变更记录了数据源的每次变化以及对下游的影响。数据温度则体现了数据使用的具体情况。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_12&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;3. WeData数据治理——规范工具&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e4d8b104c115c837dcdbf1b8a0ee1d36_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-e4d8b104c115c837dcdbf1b8a0ee1d36_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-e4d8b104c115c837dcdbf1b8a0ee1d36_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-e4d8b104c115c837dcdbf1b8a0ee1d36_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;S8cHXUiu&quot;&gt;规范化工具可以分成三个部分，第一个部分就是数据管理，包括指标的管理，维度管理和元数据管理。第二部分是数仓规划，包括数仓定义，数据分层，业务分类，定义主题域业务过程。这一套规范定义完成了之后，还需要进行物化。物化指的是我们在生产数据的时候，将逻辑模型和真实的物理关联起来。此外，因为对接了很多不同行业的客户，我们也形成了不同行业的行业模板，可以在行业模板的基础上，完成企业体系标准的构建。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_13&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;4. WeData数据治理——质量工具&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ea796fc729d5e8d537ccb413ddc34756_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-ea796fc729d5e8d537ccb413ddc34756_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-ea796fc729d5e8d537ccb413ddc34756_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-ea796fc729d5e8d537ccb413ddc34756_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;X0utXBJb&quot;&gt;&lt;b&gt;质量工具要完成的过程分成 4 步：&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;MSmTunaw&quot;&gt;&lt;b&gt;第一步，定义规则，确定数据质量衡量的标准是什么，形成质量规则库&lt;/b&gt;。规则又分成两部分，首先会有一些基础的规则，包括基础的空表的检测，数据行数检测，准确性或者唯一性的检测，在常规模板里面包括了均值的比较，波动率等指标；同时还可以通过自定义 SQL 的方式来完成具有业务特性的规则校验。&lt;/p&gt;&lt;p data-pid=&quot;0ilA8rcd&quot;&gt;&lt;b&gt;第二步，规则确定好后，需要把这个规则和我们的数据本身进行关联，去达到一个质量监控的效果&lt;/b&gt;。一般来说有两种形态，第一种形态就是事中在 ETL 的流程中进行监控，挂载到开发任务上去。当数据生产之后，去检查这个数据是否符合我们的质量规则，如果不符合可以进行阻断式的操作。第二种形态是离线周期性的检测，例如检测各分区的数据质量情况。&lt;/p&gt;&lt;p data-pid=&quot;4rMvQqJb&quot;&gt;&lt;b&gt;第三步，当发现数据问题之后，会进行一次数据问题的运维。&lt;/b&gt;一般情况下，数据都是会上下波动的，但如果波动超过了一定范围，则会发出报警。例如，一张表每天都应该有 1000 行，但是今天只有 500 行，可能这个数据的产出就有问题了，或者是其他一个业务导致的，这个时候会产生数据质量的告警，通知到相关的责任人，告警也不是处理的终点，我们会有质量报警的工单体系，当告警通知到责任人后，如果他觉得这个问题需要别人来参与的话，可以进行转单，直到这个的数据流程单被处理结束，最终形成一个问题记录进行归档，如果被认为是典型问题的话，还可以进行记录，在后面有其他人遇到类似问题的时候，可以借鉴处理。&lt;/p&gt;&lt;p data-pid=&quot;ZGtgnPPE&quot;&gt;&lt;b&gt;第四步，有定期的质量报告的分析，针对哪些表经常会被阻塞，哪些任务经常会发生告警，把这种经常性出现问题的表找出来。&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_14&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;5. WeData 数据治理——安全工具&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7c2818aa3e0f926573cdd3961c5eeb46_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-7c2818aa3e0f926573cdd3961c5eeb46_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-7c2818aa3e0f926573cdd3961c5eeb46_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-7c2818aa3e0f926573cdd3961c5eeb46_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;ila4hLgG&quot;&gt;数据安全工具从三个方面进行治理：&lt;/p&gt;&lt;p data-pid=&quot;pARedKXG&quot;&gt;从安全的角度进行数据的分类分级，确定数据是内部数据，还是敏感数据，还是机密性数据，这时就需要分级及分类的定义。此外需要提供规则识别的能力，通过这样的规则确定什么样的数据才是机密的数据 or 敏感的数据。比如在当前疫情反复的情况下，很可能会采集到很多姓名、性别、身份证这样的机密信息。我们可以做一个任务去管理数据扫描，扫描完之后把数据的分类进行打标，因为数据安全的分类、分级本质上也是定义在元数据上面的一种信息，扫描识别之后会存在底层元数据信息里面，让数据使用者知道谨慎地使用这些数据。&lt;/p&gt;&lt;p data-pid=&quot;sl2K4MKP&quot;&gt;包括两种形式：第一种是常规的静态脱敏，可以把数据进行一个脱敏任务，到目标端形成一个脱敏后的数据。例如对身份证号码手机号登录，会进行打码处理，然后才能对外的输出。第二种是动态脱敏，跟平台工具紧密相关，比如数据集成的过程中，可以进行数据的加密，在数据查询时能够检索到。之后在数据分享时，就产生水印，水印支持溯源，进行一系列的隐私保护。&lt;/p&gt;&lt;p data-pid=&quot;24tXBEDP&quot;&gt;数据已经发出去之后，是我们的安全审计，哪些人访问、导出、下载过，尤其针对敏感数据。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_15&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;6. WeData 数据治理——元数据资产管理工具&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-675f0d1f7ff1c3133180e59a8ed6df5b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-675f0d1f7ff1c3133180e59a8ed6df5b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-675f0d1f7ff1c3133180e59a8ed6df5b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-675f0d1f7ff1c3133180e59a8ed6df5b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;xcYzsSxq&quot;&gt;数据可用性治理包含三个步骤：&lt;/p&gt;&lt;p data-pid=&quot;E9M2vs6r&quot;&gt;&lt;b&gt;第一步，提高数据搜索能力&lt;/b&gt;。如何能快速的去定位到想要的数据，包括全域内大搜的能力，因为作为一个业务方要去使用某个数据时，要知道企业内部是否有这个数据，如果没有那么谁可以去生产这部分的数据，如果有的话该找谁去申请以及如何去用这个数据，所以要在企业的范围内有一个全局的快捷的数据定位能力。&lt;/p&gt;&lt;p data-pid=&quot;IWQr7nRt&quot;&gt;&lt;b&gt;第二步，提高数据理解能力&lt;/b&gt;。找到数据后，业务方不是特别清楚数据的具体情况，但是我可以根据其他用户的使用情况（比方这份数据的热度和打份情况），把数据作为一个商品，快速的给到想要使用这些数据的人。将技术元信息和业务元信息全部呈现给用户，让他知道这个数据的全貌。&lt;/p&gt;&lt;p data-pid=&quot;OKZVmQeG&quot;&gt;&lt;b&gt;第三步，提高数据应用能力，查到数据后如何去应用&lt;/b&gt;。从数据使用者的角度，需要以何种形态去呈现，让数据使用者能够更好地使用数据。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_600539032_16&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;7. WeData 数据治理——治理实践落地&lt;/b&gt;&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-22be20f20ffb3c09dbf08ead892c2d28_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-22be20f20ffb3c09dbf08ead892c2d28_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-22be20f20ffb3c09dbf08ead892c2d28_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-22be20f20ffb3c09dbf08ead892c2d28_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;ZoT6ObXJ&quot;&gt;在前面这几部分，包括规范、质量、安全以及可用性的基础上，我们对数据进行了深度的治理。治理达成的效果就是降本增效，降低不需要的那些数据的成本，提高数据的使用率。&lt;/p&gt;&lt;p data-pid=&quot;KqCKik2R&quot;&gt;在资产治理模块对资产进行打分，形成企业级的评级体系。让组织治理者根据质量分进行治理的落地，去掉那些不常用的、冷的数据、数据孤岛的数据、重复的数据，再把有效的数据更好地利用起来。&lt;/p&gt;&lt;p data-pid=&quot;YYUT8DKq&quot;&gt;--&lt;/p&gt;&lt;h2 id=&quot;h_600539032_17&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;04/问答环节&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;s93mDoPm&quot;&gt;&lt;b&gt;Q1：元数据打了安全标签之后，怎么向下游的模型或者任务进行传递？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;xwhQmCDm&quot;&gt;A1：Wedata 在做元数据安全打标的时候都是相互独立的，不会根据血缘关系进行传递，因为上下游可能是不同的业务线，对敏感性的定义不同。&lt;/p&gt;&lt;p data-pid=&quot;PJYkugJH&quot;&gt;&lt;b&gt;Q2：请问业务元数据该如何采集梳理，业务的元数据具体包括哪些内容？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;oI79VqnQ&quot;&gt;A2：按照我们资产资产治理的理论，业务元数据分为 5 类，第一类是规范性元数据，属于哪个分层哪个主题域业务域；第二类是质量元数据；第三类是安全元数据；第四类是成本元数据；第五类是应用元数据，包括使用上的温度。一般从这个 5 个维度去了解业务元信息。&lt;/p&gt;&lt;p data-pid=&quot;sVdAYrpO&quot;&gt;&lt;b&gt;Q3：请问 tbds 和 wedata 的关系是什么？&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;fu9ld8Bv&quot;&gt;A3：tbds 指的是我们底层的数据处理引擎，腾讯大数据产品主要分为两部分，共有云部分是 emr 和 cdw 数据仓库等产品，私有云上底层引擎体系管叫 tbds。其中，wedata 是指的数据治理工具。&lt;/p&gt;&lt;p data-pid=&quot;XHEqfSt9&quot;&gt;&lt;b&gt;今天的分享就到这里，谢谢大家。&lt;/b&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2 id=&quot;h_600539032_18&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;分享嘉宾&lt;/b&gt;&lt;/h2&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-db75fe4e206d7ba689e93a794bb5f11c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1076&quot; data-rawheight=&quot;1076&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-db75fe4e206d7ba689e93a794bb5f11c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1076&quot; data-rawheight=&quot;1076&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-db75fe4e206d7ba689e93a794bb5f11c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-db75fe4e206d7ba689e93a794bb5f11c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;Amyqlies&quot;&gt;&lt;b&gt;王浩仙｜腾讯云大数据平台产品中心 技术产品&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;zpFZx3Po&quot;&gt;从事大数据产品领域7年，曾就职于金山、阿里，目前作为腾讯云大数据平台产品中心数据治理产品负责人。&lt;/p&gt;&lt;hr/&gt;&lt;h2 id=&quot;h_600539032_19&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;《数据智能知识地图》下载&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;-glKpwBK&quot;&gt;上下滑动⬆️⬇️，查看《数据智能知识地图》数据治理板块（点击可看大图），关注公众号“大话数智”，下载完整版知识地图&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2a446ef558b1530d35fc222f841d7ff4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;9488&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-2a446ef558b1530d35fc222f841d7ff4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;9488&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-2a446ef558b1530d35fc222f841d7ff4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-2a446ef558b1530d35fc222f841d7ff4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;hr/&gt;&lt;h2 id=&quot;h_600539032_20&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;DataFun新媒体矩阵&lt;/b&gt;&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-62ab37606322dfda1443d9153bdb7536_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;493&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-62ab37606322dfda1443d9153bdb7536_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;493&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-62ab37606322dfda1443d9153bdb7536_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-62ab37606322dfda1443d9153bdb7536_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;hr/&gt;&lt;h2 id=&quot;h_600539032_21&quot; data-into-catalog-status=&quot;&quot;&gt;&lt;b&gt;关于DataFun&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;AqN2dQNC&quot;&gt;专注于大数据、人工智能技术应用的分享与交流。发起于2017年，在北京、上海、深圳、杭州等城市举办超过100+线下和100+线上沙龙、论坛及峰会，已邀请超过2000位专家和学者参与分享。其公众号 DataFunTalk 累计生产原创文章900+，百万+阅读，近16万精准粉丝。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>