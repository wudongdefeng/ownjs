<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e9f6ecb170b218db4fdc0290a595efda</guid>
<title>2023 年了，做 SEO 还有必要吗？</title>
<link>https://toutiao.io/k/sxy29b7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;作者：京东科技 吴磊&lt;/p&gt;

&lt;h1&gt;搜索引擎工作原理&lt;/h1&gt;

&lt;p&gt;在搜索引擎网站的后台会有一个非常庞大的数据库，里面存储了海量的关键词，而每个关键词又对应着很多网址，这些网址是被称之为“搜索引擎蜘蛛”或“网络爬虫”程序从茫茫的互联网上一点一点下载收集而来的。随着各种各样网站的出现，这些勤劳的“蜘蛛”每天在互联网上爬行，从一个链接到另一个链接，下载其中的内容，进行分析提炼，找到其中的关键词，如果“蜘蛛”认为关键词在数据库中没有而对用户是有用的便存入后台的数据库中。反之，如果“蜘蛛”认为是垃圾信息或重复信息，就舍弃不要，继续爬行，寻找最新的、有用的信息保存起来提供用户搜索。当用户搜索时，就能检索出与关键字相关的网址显示给访客。&lt;/p&gt;

&lt;p&gt;一个关键词对用多个网址，因此就出现了排序的问题，相应的当与关键词最吻合的网址就会排在前面了。在“蜘蛛”抓取网页内容，提炼关键词的这个过程中，就存在一个问题：“蜘蛛”能否看懂。如果网站内容是flash和js等，那么它是看不懂的，会犯迷糊，即使关键字再贴切也没用。相应的，如果网站内容可以被搜索引擎能识别，那么搜索引擎就会提高该网站的权重，增加对该网站的友好度。这样一个过程我们称之为SEO。&lt;/p&gt;

&lt;h1&gt;SEO简介&lt;/h1&gt;

&lt;p&gt;SEO(Search Engine Optimization)，即搜索引擎优化。SEO是随着搜索引擎的出现而来的，两者是相互促进，互利共生的关系。SEO的存在就是为了提升网页在搜索引擎自然搜索结果中的收录数量以及排序位置而做的优化行为。而优化的目的就是为了提升网站在搜索引擎中的权重，增加对搜索引擎的友好度，使得用户在访问网站时能排在前面。&lt;/p&gt;

&lt;p&gt;分类：白帽SEO和黑帽SEO。白帽SEO，起到了改良和规范网站设计的作用，使网站对搜索引擎和用户更加友好，并且网站也能从搜索引擎中获取合理的流量，这是搜索引擎鼓励和支持的。黑帽SEO，利用和放大搜索引擎政策缺陷来获取更多用户的访问量，这类行为大多是欺骗搜索引擎，一般搜索引擎公司是不支持与鼓励的。&lt;/p&gt;

&lt;h1&gt;SEO能做什么呢？&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对网站的标题、关键字、描述精心设置，反映网站的定位，让搜索引擎明白网站是做什么的；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网站内容优化：内容与关键字的对应，增加关键字的密度；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在网站上合理设置Robots.txt文件；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成针对搜索引擎友好的网站地图；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加外部链接，到各个网站上宣传。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;SEO与SEM的区别&lt;/h1&gt;

&lt;h2&gt;名词解释：&lt;/h2&gt;

&lt;p&gt;SEM，即搜索引擎营销（Search Engine Marketing）&lt;/p&gt;

&lt;p&gt;SEO，即搜索引擎优化（Search Engine Optimization）&lt;/p&gt;

&lt;h2&gt;SEM和SEO有什么区别？&lt;/h2&gt;

&lt;p&gt;SEM一般指竞价推广，在搜索引擎后台账户投钱，使广告获取相关的排名，一般搜索页面上会展现“广告”两个词，SEO（Search Engine Optimization，即搜索引擎优化）是一种技术手段，对网站进行有针对性的优化，提高网站在搜索引擎中的自然排名，吸引更多的用户访问网站，提高网站的访问量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-18e92e968b447133c12094b96b7bb3866de.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;SEM：见效快，只要开始投放，效果立马可见，反之亦然。&lt;/p&gt;

&lt;p&gt;SEO：是一个长期优化，逐步完善的过程，见效慢。如果停止SEO优化，效果也可以持续半年左右&lt;/p&gt;

&lt;h1&gt;搜索引擎部分&lt;/h1&gt;

&lt;h2&gt;百度、360、搜狗、谷歌搜索引擎&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5be504486958bc1a714df6f2d2561fa0380.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-1fce028bfc01c400211a062b47ae0c4d820.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;常见的搜索引擎有百度、360、搜狗、谷歌等。它们的功能都是从互联网上搜集信息，在对信息进行组织整理，为用户提供搜索服务的。&lt;/p&gt;

&lt;h2&gt;百度&lt;/h2&gt;

&lt;p&gt;百度，全球最大的中文搜索引擎、最大的中文网站。于1999年年底成立于美国硅谷，2000年百度公司回国发展。目前收录中文网页已超过12亿个，这些网页的数量每天以千方级的速度在增长；同时，百度在中国各地分布的服务器，能直接从最近的服务器上把所搜索的信息远返回给当地用户，使用户享受极快的搜索传输速度。目前，中国所有提供搜索引擎的门户网站中，80%以上都由百度提供搜索引擎技术支持。&lt;/p&gt;

&lt;h2&gt;360&lt;/h2&gt;

&lt;p&gt;360搜索，属于全文搜索引擎，是奇虎360公司开发的基于机器学习技术的第三代搜索引擎，具备“自学习、自进化”能力和发现用户最需要的搜索结果。360搜索主要包括新闻搜素、网页搜索、weibo搜索、视频搜索、MP3搜索、图片搜索、地图搜索、问答搜索、购物搜索。通过互联网信息的及时获取和主动呈现，为广大用户提供实用和便利的搜索服务。&lt;/p&gt;

&lt;h2&gt;搜狗&lt;/h2&gt;

&lt;p&gt;搜狗搜索是中国领先的中文搜索引擎，致力于中文互联网信息的深度挖掘，帮助中国上亿网民加快信息获取速度，为用户创造价值。2013年9月，腾讯控股入股搜狗，搜搜和搜狗整合。2016年5月19日，搜狗与微软必应合作推出英文和学术搜索。&lt;/p&gt;

&lt;h2&gt;谷歌&lt;/h2&gt;

&lt;p&gt;谷歌是一个功能强大、网络信息资源非常丰富的搜索引擎，它由斯坦福大学博士生LaryPage 和Sergcy Brin 于1998年9月创立。1999年下半年，谷歌网站“Google”正式启用。2010年3月23日，宣布关闭在中国大陆市场搜索服务。虽然谷歌退出了中国市场，但是谷歌在中国搜索引擎市场上还是有一定的影响力。&lt;/p&gt;

&lt;h2&gt;不同搜索引擎的SEO差异性&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-b26d1777d2658b11b243accaf8387ba4e2c.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;1、对新站排名&lt;/h3&gt;

&lt;p&gt;百度对新站排名不够友好，如果关键词竞争激烈，那么新站短时间内很难获得理想排名，360对新站排名是最不好的，很不待见。谷歌和搜狗，这两个搜索引擎对于新站的态度大致相同，基本上没有新站和老站的区别，只要保持内容不断更新，就可以在短时间内获得稳定而且很高的排名。&lt;/p&gt;

&lt;p&gt;因此，新站想要在百度中获得好的排名，还需要SEO人员打好基础，同时选择竞争度不是很高的词去优化，效果很快就出来了。&lt;/p&gt;

&lt;h3&gt;2、对内容的收录&lt;/h3&gt;

&lt;p&gt;百度对于内容的收录要求比较高，很多新网站要被百度收录是个难题。有时需要比较长的考核期。而一旦被收录，比较容易获得排名和流量。相对而言，360对于内容的收录会宽些。而搜狗基本上处于百度和360之间，不过搜狗的时效性没有百度的高。谷歌很容易收录网站和新页面，但是谷歌有沙盒效应，收录门槛很低，获得比较好的排名比较难。&lt;/p&gt;

&lt;p&gt;无论针对哪一种搜索引擎，想要获得好的排名，内容质量是根本。因此，SEO人员在优化网站时，应该注重内容质量的提升。&lt;/p&gt;

&lt;h3&gt;3、首页优势&lt;/h3&gt;

&lt;p&gt;百度有比较大的首页优势，而谷歌对所有页面一视同仁，不管是首页还是内页。在搜索结果页面上，谷歌较多返回网站内内页，而要想在百度获得较好的排名，经常需要靠首页。360对于每一个页面（新站除外）的展现机会基本是一样的。&lt;/p&gt;

&lt;h3&gt;4、对外链的重视度&lt;/h3&gt;

&lt;p&gt;谷歌特别重视外链，对网页上的元素没那么敏感。我们经常可以看到排在第一页的页面，其外链的数量是远远超过排在后面的页面。谷歌对于关键词在页面上的出现次数、位置，看不出明显的、有规律的偏好。360搜索引擎对外链同样很重视。&lt;/p&gt;

&lt;h1&gt;站内搜索部分&lt;/h1&gt;

&lt;h2&gt;今日头条SEO如何做？&lt;/h2&gt;

&lt;h3&gt;今日头条搜索的背景&lt;/h3&gt;

&lt;p&gt;头条搜索是今日头条孵化出来的一个搜索产品&lt;/p&gt;

&lt;p&gt;2019年8月，今日头条宣布头条搜索正式上线，当时上线的是站内搜索。&lt;/p&gt;

&lt;p&gt;2020年2月，今日头条打造出了头条搜索，当时上线的是全网搜索。其搜索是在今日头条app的顶部有头条搜索框，这就是头条搜索的开端（在今日头条app中，搜索关键词，搜索结果包含&lt;strong&gt;头条号，网站，媒体号&lt;/strong&gt;等内容）&lt;/p&gt;

&lt;p&gt;2021年4月，头条搜索电脑版正式上线啦！你可以在电脑上通过浏览器进行访问，能够搜索出全网你所需要的内容，并且承诺搜索结果完全无广告，搜索结果清晰准确，做更干净、更精准、更便捷的全网搜索。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-2beb4a818ead0e7c65fd3e00b536a09b2d1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;今日头条搜索包含的内容有：&lt;/h3&gt;

&lt;p&gt;•&lt;strong&gt;头条站内&lt;/strong&gt;指比如头条号的内容。头条号、资讯、官网、西瓜视频、微头条、悟空问答、头条百科、下拉框、图片、地图、话题、音乐、直播等&lt;/p&gt;

&lt;p&gt;•&lt;strong&gt;头条站外&lt;/strong&gt;指的站外独立网站，其它平台内容等。头条站外内容来源“抓取”采集例如百度、360等&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-4a2118cc5c07e2bb3745885ca248c8c6f01.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;今日头条SEO如何做？&lt;/h3&gt;

&lt;p&gt;今日头条seo，可以理解为它会让你的内容，在头条搜索结果中排名靠前。这和百度搜索引擎优化(百度SEO)是一个意思。&lt;/p&gt;

&lt;p&gt;今日头条的搜索与百度搜索是有所不同的：&lt;/p&gt;

&lt;p&gt;•头条搜索对内容质量、内容价值有严格的把控，主要以资讯内容展示给用户。&lt;/p&gt;

&lt;p&gt;•便捷。用户能够在今日头条app上边看内容边搜索，一个app都能操作完成。&lt;/p&gt;

&lt;p&gt;如何做呢？大概有4点：&lt;/p&gt;

&lt;p&gt;•头条综合搜索：优化头条综合搜索结果的网站、文章排名，使其排名靠前或下沉。&lt;/p&gt;

&lt;p&gt;•头条资讯搜索：优化头条资讯搜索结果的文章排名，使其排名靠前或下沉。&lt;/p&gt;

&lt;p&gt;•头条视频搜索：优化头条视频搜索结果的视频排名，使其排名靠前或下沉。&lt;/p&gt;

&lt;p&gt;•头条下拉框：优化头条搜索下拉框中的联想词，植入指定联想词或下沉。&lt;/p&gt;

&lt;h3&gt;头条SEO优化能做什么事情？&lt;/h3&gt;

&lt;p&gt;•品牌宣发优化：品牌的宣传方案中，融入seo优化，将会让品牌在今日头条某个领域脱颖而出，通过在头条搜索中靠前的排名，势必会提高宣发文章的展现量、曝光量、阅读量、点 赞、评 论、粉丝等。&lt;/p&gt;

&lt;p&gt;•品牌营销：在企业做全网营销的布局，seo优化是不可或缺的。&lt;/p&gt;

&lt;p&gt;有3点可以证实：&lt;/p&gt;

&lt;p&gt;第一：省钱。在互联网做营销，会选择广告投放，信息流投放，短视频投放，购买广告位，每天投放广告的费用至少要大几千元，而SEO优化，每天只要几百元。&lt;/p&gt;

&lt;p&gt;第二：易被发现。前面讲到头条seo是将网站、文章的排名前移。想象下，你的网站、你发的文章排到了头条搜索首页内，用户会不会第一时间发现你的内容。&lt;/p&gt;

&lt;p&gt;第三：转化过程直接。Seo优化的一个特大优势，是关键词策略。部署精准关键词，准确挖掘潜在用户，会将全网营销的效果在提高一个台阶。&lt;/p&gt;

&lt;p&gt;•口碑维护：不管是做口碑建设还是口碑维护，seo优化无疑是一个非常好用的工具。帮助品牌口碑建设快、稳定品牌销售量。&lt;/p&gt;

&lt;p&gt;•舆情下沉：在头条搜索中，降低品牌舆情热度，减少品牌舆情被用户搜索到。&lt;/p&gt;

&lt;p&gt;•品牌推广：通常方式是软文发布配合seo优化，将软文推向头条搜索靠前的位置，使其品牌获得高曝光。&lt;/p&gt;

&lt;p&gt;•关键词排名：将头条流量通过关键词排名方式，引流到品牌网站上，这对网站基础有一定的要求，如果你的网站基础差，你又想做关键词排名，找个seo顾问让你事半功倍。&lt;/p&gt;

&lt;p&gt;•品牌引流：通常会用到头条下拉框的方法，中小企业必用的一个引流方法，非常实用。简单说下原理，就是在流量大的词中，植入你的品牌。&lt;/p&gt;

&lt;h3&gt;SEO优化的方法：&lt;/h3&gt;

&lt;h4&gt;头条搜索站外-网点优化&lt;/h4&gt;

&lt;p&gt;1.查网站收录排名&lt;/p&gt;

&lt;p&gt;可以直接去5118用域名搜索网站综合排名，如果网站有头条搜索的排名显示，那么说明网站已经有收录，再去查看头条搜索里面查看有排名的关键词是哪些。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-5e3da04c67a823d80b8df31747fc64d0f47.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;没有被头条搜索收录的网站也不用着急，可以前往头条搜索站长平台进行网站提交。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-b6be9dc6c1a05e61802e3bd5f4b067e2d38.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2.网站内容持续更新&lt;/p&gt;

&lt;p&gt;前端SEO优化在下一章详细讲解（见第8条）&lt;/p&gt;

&lt;p&gt;3.使用运营工具优化&lt;/p&gt;

&lt;p&gt;网上有很多运营工具，略过。参考资料：&lt;a href=&quot;https://www.toutiao.com/article/7121980236283232808/&quot;&gt;https://www.toutiao.com/article/7121980236283232808/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;头条搜索站内-头条号优化&lt;/h4&gt;

&lt;p&gt;1.查文章排名&lt;/p&gt;

&lt;p&gt;根据文章标题提取主词或核心关键词，到头条搜索引擎进行搜索，找到自己头条号相对应的文章进行查看，因目前没有更好的途径去查站内排名的软件工具。&lt;/p&gt;

&lt;p&gt;2.文章内容优化&lt;/p&gt;

&lt;p&gt;a、发布文章前，关键词尽量靠左，也就是靠前;其实这也是百度搜索引擎优化的一个相似点。靠左的展现的关键词，说明重要性越高。&lt;/p&gt;

&lt;p&gt;b、发布文章后，点赞、评论、转发、收藏、阅读(总结为一个因素)等都会影响到文章排名;&lt;/p&gt;

&lt;p&gt;c、还有一个因素，文章的发布时间，在以上因素不考虑情况下，最新发布时间会比几天、几个月前的都会有优势，不过就实际结果来看，影响因素很小。&lt;/p&gt;

&lt;p&gt;3.关键词设置&lt;/p&gt;

&lt;p&gt;可以根据你平时做网站优化的时候，整理头条词库，根据头条的搜索的下拉框或者是5118【头条内参】工具，来进行整理关键词库。然后输出有效的高质量内容。&lt;/p&gt;

&lt;h2&gt;WX公众号SEO&lt;/h2&gt;

&lt;h3&gt;WX公众号SEO是什么&lt;/h3&gt;

&lt;p&gt;所谓公众号SEO是指基于公众号平台在WX搜一搜做的关键词排名，跟网站SEO其实属于同一性质的概念。从表现形式来说，就是当你在WX搜一搜搜某个关键词的时候，搜索结果页里的公众号落地页。&lt;/p&gt;

&lt;h3&gt;为什么要做WX公众号的SEO&lt;/h3&gt;

&lt;p&gt;1、权重高&lt;/p&gt;

&lt;p&gt;WX公众号较其他平台权重高，比较容易获得排名。是一个承载优质内容的不错平台选择。就好比站在巨人的肩上更容易成功。&lt;/p&gt;

&lt;p&gt;2、WX自家的产品，具有排名优势&lt;/p&gt;

&lt;p&gt;不管是百度，还是WX，在用户搜索的时候，平台都会优先将自己的产品做一个排名展现，除非一些特别优质的内容会挤掉自己的产品，一般平台自己的产品具有先天的优势，一方面平台希望完成流量的闭环，另一方面平台自己的产品内容上已经做了一个优化，确保用户看到时不会影响用户体验。&lt;/p&gt;

&lt;p&gt;3、便于粉丝沉淀&lt;/p&gt;

&lt;p&gt;当我们的WX公众号获得排名、流量的时候，只要在落地页里加上关注公众号的引导环节，即可完成粉丝的积累，从而为以后的粉丝运营做准备。&lt;/p&gt;

&lt;p&gt;4、便于转化变现&lt;/p&gt;

&lt;p&gt;都知道WX是一个完整的生态，从流量获取到营销变现，WX已经为我们打造了一个全链条服务支持的平台，说的具体一点，搜索落地页只要加上相关商品的链接，即可完成营销转化的闭环。&lt;/p&gt;

&lt;p&gt;5、为以后的私域运营做准备&lt;/p&gt;

&lt;p&gt;WX公众号排名为我们获取了流量，我们需要做的就是将这些流量留住。具体如何操作呢?可以在搜索落地页里设计一个钩子，让用户加你的WX，或者加群。但一定要想好用户为什么要加你。可以是送资料，可以是参与活动，给用户一个加你的理由。这样公域里的流量就变成你私域里面的了。&lt;/p&gt;

&lt;h1&gt;短视频SEO怎么做？&lt;/h1&gt;

&lt;h2&gt;短视频的搜索&lt;/h2&gt;

&lt;p&gt;1、内容搜索检索视频内容，系统会对标题，视频字幕等具体内容进行搜索，筛选出符合用户需求的优质视频&lt;/p&gt;

&lt;p&gt;2、内容审核完成后，视频推荐会根据视频数据进行排序，较好的视频会优先排名显示，所以我们经常会发现，搜索后排名靠前的视频点赞，播放量、评论、转发等一般会比较高得&lt;/p&gt;

&lt;h2&gt;短视频排名规则&lt;/h2&gt;

&lt;p&gt;1、视频一定是与行业相关的，用户搜索行业词，会优先显示。&lt;/p&gt;

&lt;p&gt;2、优质视频好的内容，平台推荐会第一选择。所以要制作优秀的视频内容。&lt;/p&gt;

&lt;p&gt;3、账号名称，简介，背景头像也要与行业相关&lt;/p&gt;

&lt;p&gt;4、话题，标题，可以选择相关话题。&lt;/p&gt;

&lt;h2&gt;如何做好短视频SEO优化？&lt;/h2&gt;

&lt;p&gt;1、视频内容与目标用户搜索高度匹配&lt;/p&gt;

&lt;p&gt;2、保证视频要素齐全，包括视频的标题、字幕、声音画面等。&lt;/p&gt;

&lt;p&gt;3、根据视频内容和关键词参与相关话题，予以排名&lt;/p&gt;

&lt;p&gt;4、布局关键词：账号名称、视频封面、视频标题&lt;/p&gt;

&lt;h1&gt;前端SEO规范&lt;/h1&gt;

&lt;h2&gt;网站结构布局优化：&lt;/h2&gt;

&lt;p&gt;•控制首页链接数量&lt;/p&gt;

&lt;p&gt;•扁平化的目录层次&lt;/p&gt;

&lt;p&gt;•导航优化&lt;/p&gt;

&lt;p&gt;•网站的结构布局&lt;/p&gt;

&lt;p&gt;•版权信息和友情链接&lt;/p&gt;

&lt;p&gt;•利用布局，把重要内容HTML代码放在最前&lt;/p&gt;

&lt;p&gt;•控制页面的大小，减少http请求，提高网站的加载速度&lt;/p&gt;

&lt;h2&gt;网页代码优化&lt;/h2&gt;

&lt;p&gt;突出重要内容——合理的设计title、description和keywords&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-419846ae93d0d88a432b540c7f954cfe157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;标题：只强调重点即可，尽量把重要的关键词放在前面，关键词不要重复出现，尽量做到每个页面的&lt;/p&gt;&lt;title&gt;标题中不要设置相同的内容。

&lt;p&gt;标签：关键词，列举出几个页面的重要关键字即可，切记过分堆砌。&lt;/p&gt;

&lt;p&gt;标签：网页描述，需要高度概括网页内容，切记不能太长，过分堆砌关键词，每个页面也要有所不同。&lt;/p&gt;

&lt;h3&gt;语义化书写HTML代码，符合W3C标准&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-d03e3b8a430a68c2fa16741c68ad4cef4be.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;尽量让代码语义化，在适当的位置使用适当的标签，用正确的标签做正确的事。让阅读源码者和“蜘蛛”都一目了然。比如：h1-h6 是用于标题类的，&lt;/p&gt;

&lt;p&gt;标签是用来设置页面主导航，列表形式的代码使用ul或ol，重要的文字使用strong等。&lt;/p&gt;

&lt;h3&gt;标签&lt;/h3&gt;

&lt;p&gt;页内链接，要加 “title” 属性加以说明，让访客和 “蜘蛛” 知道。而外部链接，链接到其他网站的，则需要加上 el=&quot;nofollow&quot; 属性, 告诉 “蜘蛛” 不要爬，因为一旦“蜘蛛”爬了外部链接之后，就不会再回来了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;https://www.jd.cn&quot; title=&quot;京东&quot; class=&quot;logo&quot;&amp;gt;&amp;lt;/a&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;正文标题要用标签&lt;/h3&gt;

&lt;p&gt;h1标签自带权重“蜘蛛” 认为它最重要，一个页面有且最多只能有一个h1标签，放在该页面最重要的标题上面，如首页的logo上可以加h1标签。副标题用h2标签, 而其它地方不应该随便乱用 h 标题标签。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-481bbf5b48928cfbe843fc1c31a6d04decf.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-e4eb2c56d736cb05e71522985043f117bd1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;mg标签应使用 &quot;alt&quot; 属性加以说明&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&quot;logo.jpg&quot; width=&quot;300&quot; height=&quot;200&quot; alt=&quot;京东logo&quot;  /&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;表格应该使用caption表格标题标签&lt;/h3&gt;

&lt;p&gt;caption 元素定义表格标题。caption 标签必须紧随 table 标签之后，您只能对每个表格定义一&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table border=&#x27;1&#x27;&amp;gt;
    &amp;lt;caption&amp;gt;表格标题&amp;lt;/caption&amp;gt;
    &amp;lt;tbody&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;apple&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;100&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;banana&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;200&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;br标签：只用于文本内容的换行&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt; 
    第一行文字内容&amp;lt;br/&amp;gt;
    第二行文字内容&amp;lt;br/&amp;gt;
    第三行文字内容
&amp;lt;/p&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;strong、em标签&lt;/h3&gt;

&lt;p&gt;需要强调时使用。strong标签在搜索引擎中能够得到高度的重视，它能突出关键词，表现重要的内容，em标签强调效果仅次于strong标签；b、i标签：只是用于显示效果时使用，在SEO中不会起任何效果。&lt;/p&gt;

&lt;h3&gt;文本缩进不要使用特殊符号&lt;/h3&gt;

&lt;p&gt;应当使用CSS进行设置。版权符号不要使用特殊符号 © 可以直接使用输入法打出版权符号©。&lt;/p&gt;

&lt;h3&gt;重要内容不要用JS输出&lt;/h3&gt;

&lt;h3&gt;尽量少使用iframe框架,因为“蜘蛛”一般不会读取其中的内容&lt;/h3&gt;

&lt;h3&gt;谨慎使用 display：none&lt;/h3&gt;

&lt;h2&gt;前端网站性能优化&lt;/h2&gt;

&lt;p&gt;（1）减少http请求数量&lt;/p&gt;

&lt;p&gt;（2）控制资源文件加载优先级&lt;/p&gt;

&lt;p&gt;（3）尽量外链CSS和JS&lt;/p&gt;

&lt;p&gt;（4）利用浏览器缓存&lt;/p&gt;

&lt;p&gt;（5）减少重排（Reflow）&lt;/p&gt;

&lt;p&gt;（6）减少 DOM 操作&lt;/p&gt;

&lt;p&gt;（7）图标使用IconFont替换&lt;/p&gt;

&lt;p&gt;（8）不使用CSS表达式，会影响效率&lt;/p&gt;

&lt;p&gt;（9）使用CDN网络缓存，加快用户访问速度，减轻服务器压力&lt;/p&gt;

&lt;p&gt;（10）启用GZIP压缩，浏览速度变快，搜索引擎的蜘蛛抓取信息量也会增大&lt;/p&gt;

&lt;p&gt;（11）伪静态设置&lt;/p&gt;

&lt;h1&gt;总结&lt;/h1&gt;

&lt;p&gt;毫无疑问，搜索依然还是市场的核心“刚需”，当然搜索不仅仅局限于百度这个平台，在WX、头条等平台，会发现SEO相关知识也能应用得上。&lt;/p&gt;

&lt;p&gt;在传统的搜索引擎（百度、360、搜狗等）还是以PC端SEO为主，效果比较好&lt;/p&gt;

&lt;p&gt;在移动互联网时代，近几年出现的站内搜索（今日头条、WX等）以移动端页面和短视频的SEO为主&lt;/p&gt;
&lt;/title&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>573276a2d8e765ff006cdbdb50765bb7</guid>
<title>深入浅出玩转监控宝（三）：网站监控之分析监控结果</title>
<link>https://toutiao.io/k/cy9v2g2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;上篇：&lt;strong&gt;&lt;a href=&quot;http://bbs.aiops.cloudwise.com/d/765&quot;&gt;深入浅出玩转监控宝（二）｜网站监控之管理网站监控任务&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前面介绍了使用监控宝做网站监控时如何管理监控任务，本篇将详细介绍如何分析监控结果，在&lt;strong&gt;网站监控&amp;gt;任务管理&lt;/strong&gt;页面，您能够查看创建的监控任务，通过以下几种方式筛选监控任务：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  按监控类型筛选：在&lt;strong&gt;按类型查看&lt;/strong&gt;中，选择网站监控类型，查看对应监控类型的监控任务列表。此处的类型与创建网站监控任务时的类型保持一致。&lt;/li&gt;
&lt;li&gt;  按监控任务分组筛选：在&lt;strong&gt;监控任务分组&lt;/strong&gt;中，选择监控任务分组查看对应的监控任务列表。创建监控任务分组后，您可以将监控任务手动添加到对应的分组中。&lt;/li&gt;
&lt;li&gt;  按任务状态筛选：在&lt;strong&gt;任务状态&lt;/strong&gt;中，选择任务的状态（开启/已暂停/全部），单击&lt;strong&gt;查询&lt;/strong&gt;进行筛选。&lt;/li&gt;
&lt;li&gt;  按照任务类型分组：在&lt;strong&gt;综合&lt;/strong&gt;或者&lt;strong&gt;最后状态&lt;/strong&gt;列表中，可以通过&lt;strong&gt;全部、外网、内网、开启MTR的任务&lt;/strong&gt;页签来查看不同的任务分组。&lt;/li&gt;
&lt;li&gt;  搜索监控任务：在搜索栏中输入关键词，在当前监控列表中搜索符合条件的监控任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;查看监控任务列表&lt;/h2&gt;

&lt;p&gt;在&lt;strong&gt;监控任务&lt;/strong&gt;列表中查看监控任务的健康状态，为便于及时发现有问题的监控任务，不同颜色代表不同的状态：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状态类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;任务&lt;/td&gt;
&lt;td&gt;绿色：代表当前监控任务为正常状态，运行良好。黄色：代表当前监控任务为异常状态，运行缓慢或部分监测点不可用。红色：代表当前监控任务为故障状态，所有监测点都不可用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用率&lt;/td&gt;
&lt;td&gt;绿色：可用率为100%。橙色：可用率区间为（95%,100%）。红色：可用率区间为[0%,95%]。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;响应时间&lt;/td&gt;
&lt;td&gt;绿色：响应时间区间为[0ms,200ms]。蓝色：响应时间区间为(200ms,1000ms)。橙色：响应时间区间为(1000ms,2000ms]。红色：响应时间大于2000ms。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;监控项目的结果分析包括以下内容：&lt;/p&gt;

&lt;h4&gt;查看监控任务的综合状态&lt;/h4&gt;

&lt;p&gt;在&lt;strong&gt;综合&lt;/strong&gt;列表中，您可以按照时间查看监控任务在不同时间段内的平均可用率和平均响应时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f55fb5dfbe5a417099e82761769f061a%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在&lt;strong&gt;监控任务&lt;/strong&gt;列表右上角的&lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;范围&lt;/strong&gt;中选择或自定义时间范围：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  今天：查看当天（00:00到当前时间前一个整点）的数据。例如当前时间为09:58，则您能查看今天00:00到09:00的数据。根据监控任务的监测频率，当您刷新页面时，今天的监控数据会随时发生变化。&lt;/li&gt;
&lt;li&gt;  昨天：查看昨天（00:00到24:00）的数据。&lt;/li&gt;
&lt;li&gt;  最近一周：查看最近七天（当天和前六天）的数据。&lt;/li&gt;
&lt;li&gt;  自定义：查看选择的起止日期范围内的数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;查看监控任务的最后状态&lt;/h4&gt;

&lt;p&gt;在&lt;strong&gt;最后状态&lt;/strong&gt;列表中，您可以查看每个监控任务的最后一次修改时间、最后状态、最后响应时间和最后检查时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b1f372b167d4444904887ef79171ac6%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后状态是动态的，根据监控任务的监测频率，当您刷新页面时，最后状态的数据会随时发生变化。&lt;/p&gt;

&lt;p&gt;例如，监控任务的监控频率为2分钟，当前显示的最后检查时间为“06-05 14:36:29”，则3分钟后刷新页面，您看到的最后检查时间为“06-05 14:38:30”。&lt;/p&gt;

&lt;h4&gt;查看综合/最后状态的分组任务&lt;/h4&gt;

&lt;p&gt;在&lt;strong&gt;综合&lt;/strong&gt;或者&lt;strong&gt;最后状态&lt;/strong&gt;列表中，可以通过&lt;strong&gt;全部、外网、内网、开启MTR的任务&lt;/strong&gt;页签来查看不同的任务分组。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc36ef64ff5a46e2bfcb4016bd3e7528%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;查看监控结果详情&lt;/h4&gt;

&lt;p&gt;在&lt;strong&gt;监控任务&lt;/strong&gt;列表中，单击&lt;strong&gt;监控任务名称&lt;/strong&gt;查看监控结果详情，包括当前监控任务的运行状态、监控频率、监控类型、URL以及概览分析、可用率统计分析、响应时间统计分析、历史快照、告警消息等。&lt;/p&gt;



&lt;h3&gt;查看外网任务的监控结果&lt;/h3&gt;

&lt;h4&gt;查看外网监控概览&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;监控概览&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;默认情况下，在&lt;strong&gt;监控概览&lt;/strong&gt;页面可快速查看最近一段时间触发告警的监控任务（出现故障、异常的5个监控任务），包括最近1小时、2小时、3小时、6小时和12小时。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果没有故障和异常监控任务或数量少于5个，您将看到运行正常但响应时间较大的监控任务。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;设置概览页展示项目&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;若在&lt;strong&gt;监控任务&lt;/strong&gt;列表中选择了首页概览展示的监控任务，将优先展示这些监控任务。操作如下：&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;网站监控&amp;gt;任务管理&lt;/strong&gt;页面的&lt;strong&gt;监控任务&lt;/strong&gt;列表，选中目标任务，单击&lt;strong&gt;操作&lt;/strong&gt;列的&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9b05fda1d974f0b81b7d68cbdc5ccb6%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;，所选监控任务的数据将在&lt;strong&gt;监控概览&lt;/strong&gt;中展示。至多可选择12个项目。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;切换平均响应&lt;/strong&gt; &lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;类别&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;根据监控任务的监测频率，当您刷新页面时，或切换响应时间类别，监控数据会随时发生变化。响应时间类别选项如下：&lt;/li&gt;
&lt;li&gt;平均响应时间（全部）：包含任务故障时的响应时间。默认选项。&lt;/li&gt;
&lt;li&gt;平均响应时间（可用）：任务正常状态下的响应时间，不包含任务故障时的响应时间。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b46ec68f67504a3fb325366a636d76bc%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;您可以查看监控任务的概览信息，包括平均响应时间地图、故障异常信息及平均响应时间和平均可用率的变化趋势；单击监控任务名称可查看详细监控结果。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看平均响应&lt;/strong&gt; &lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;地图&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  如果监控任务中设置了海外监测点，您看到的是平均响应时间世界地图；如果只设置了国内监测点，则您看到的是中国地图。&lt;/li&gt;
&lt;li&gt;  通过地图，您可以直观地掌握监控任务在各监测点的平均响应时间，不同颜色代表响应的快慢，具体可参考图例。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看故障异常信息&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在故障异常信息中查看出现故障或异常的时间、恢复时间、故障异常信息、故障异常监测点等信息；单击监测点查看对应的检查快照；单击&lt;strong&gt;历史快照&lt;/strong&gt;，进入&lt;strong&gt;历史快照&lt;/strong&gt;页面，查看该监控任务更多监测点的检查快照。&lt;/li&gt;
&lt;li&gt;  如果监控任务没有出现故障异常，您将看到平均响应时间最慢的8个监测点和平均故障率最高的8个监测点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b082ca5d23ed41b0a5c0cadadba48c6f%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;分析外网任务的概要信息&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;目标监控任务名称&amp;gt;概览&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看监控点概况&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在&lt;strong&gt;监控任务&lt;/strong&gt;的&lt;strong&gt;概览&lt;/strong&gt;页面，单击&lt;strong&gt;基本信息&lt;/strong&gt;页签查看平均响应时间地图、响应时间最慢的15个监测点、故障率最高的15个监测点、平均响应时间及平均可用率的变化趋势、故障异常信息。&lt;/li&gt;
&lt;li&gt;  在时间筛选栏中选择或自定义时间范围：&lt;/li&gt;
&lt;li&gt;  今天：查看当天（00:00到当前时间前一个整点）的数据。例如当前时间为10:37，则您能查看今天00:00到10:00的数据。根据监控任务的监测频率，当您刷新页面时，今天的监控数据会随时发生变化。&lt;/li&gt;
&lt;li&gt;  昨天：查看昨天（00:00到24:00）的数据。&lt;/li&gt;
&lt;li&gt;  最近一周：查看最近七天（当天和前六天）的数据。&lt;/li&gt;
&lt;li&gt;  自定义：查看选择的起止日期范围内的数据。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9d0bd4798bc4ac7ad90076f775edc60%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;单击地图中的图例隐藏对应颜色的区域，如平均响应时间在全国3000ms以上的区域。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7cfdb2286ae47648813471d1f2a08ca%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在世界地图中单击中国区域进入中国地图查看国内各地区的统计数据；在中国地图中单击一个省市区域（如山东省），查看对应区域的统计数据。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23020fb86ead4a9096e66fd5811f018d%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分析监测点详情&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在&lt;strong&gt;监控任务&lt;/strong&gt;的&lt;strong&gt;概览&lt;/strong&gt;页面，单击&lt;strong&gt;监测点数据&lt;/strong&gt;页签查看：&lt;/li&gt;
&lt;li&gt;  不同运营商网络中的监测点数据表现对比图。&lt;/li&gt;
&lt;li&gt;  所有监测点最后一次的检查结果。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4925133c3242418db33253b321e1ecd0%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;分析可用率&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;目标监控任务名称&amp;gt;可用率统计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可用率统计&lt;/strong&gt;页面展示可用率统计结果概况和监测点可用率分析。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看可用率统计结果概况&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;    在&lt;strong&gt;监控任务&lt;/strong&gt;的&lt;strong&gt;可用率统计&lt;/strong&gt;页面，查看&lt;strong&gt;基本信息&lt;/strong&gt;，包括平均可用率地图、平均可用率最低的10个地区、各运营商可用率、可用率（最低的5个监测点）变化趋势、故障时间最长的5个监测点、故障次数最多的5个监测点。&lt;/li&gt;
&lt;li&gt;    在&lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;筛选栏&lt;/strong&gt;中选择时间范围，包括今天、昨天、最近一周或自定义时间范围。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/489d9d24554b4aec91b2ce4e74fbe062%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在地图左下方的图例中，可拖动红色或蓝色滑块选择地图中显示的地区。从红色到蓝色，可用率逐渐增高。&lt;/p&gt;

&lt;p&gt;在世界地图中单击中国区域进入中国地图查看国内各地区的统计数据；在中国地图中单击一个省市区域（如山东省），查看对应区域的统计数据。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd6e8c09b28d4634bbf574b52a193820%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h4&gt;分析丢包率&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;目标监控任务名称&amp;gt;丢包率统计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;strong&gt;监控任务&lt;/strong&gt;的&lt;strong&gt;丢包率统计&lt;/strong&gt;页面，查看Ping类型监控任务的丢包率统计。默认展示当日数据统计结果。若需切换展示数据的时间范围，可在&lt;strong&gt;时间筛选&lt;/strong&gt;栏中选择展示昨天、最近一周的数据统计结果，或者自定义时间范围。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;丢包率统计&lt;/strong&gt;页面可展示丢包率概况与监测点详细统计数据。&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68ea11f8006b49ff8c0ac306bcb9a156%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa52a9bdbb3e46acaabf774b8e0badef%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在&lt;strong&gt;监测点数据&lt;/strong&gt;页签下可查看监测点详细统计数据。页面展示信息如下：

&lt;ul&gt;
&lt;li&gt;  监测点丢包率列表&lt;/li&gt;
&lt;li&gt;  丢包率最高的5个监测点的丢包率变化趋势&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;分析响应时间&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;目标监控任务名称&amp;gt;响应&lt;/strong&gt; &lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;统计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;响应时间统计页面展示响应时间统计结果概况和监测点响应时间的详细分析。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;响应&lt;/strong&gt; &lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;统计结果概况&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   在&lt;strong&gt;监控任务&lt;/strong&gt;的&lt;strong&gt;响应&lt;/strong&gt; &lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;统计&lt;/strong&gt;页面，查看&lt;strong&gt;基本信息&lt;/strong&gt;，包括平均响应时间地图、平均响应时间最长的10个地区、各运营商平均响应时间、平均响应时间（最长的5个监测点）变化趋势、响应最快的5个监测点、响应最慢的5个监测点。&lt;/li&gt;
&lt;li&gt;   在&lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;筛选&lt;/strong&gt;栏中选择时间范围，包括今天、昨天、最近一周或自定义时间范围。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3246c25c9d2401ebee91c112dc6ecc7%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;单击地图中的图例隐藏对应颜色的区域，如平均响应时间在1000ms以下的区域。&lt;/p&gt;

&lt;p&gt;在世界地图中单击中国区域进入中国地图查看国内各地区的统计数据；在中国地图中单击一个省市区域（如山东省），查看对应区域的统计数据。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2141aa9dfe1e44b0a973dd91a35c8523%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分析监测点响应&lt;/strong&gt; &lt;strong&gt;时间&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   此外，您还能在&lt;strong&gt;监测点数据&lt;/strong&gt;页面查看监测点维度的响应时间分析，包括最大响应时间、平均响应时间、最小响应时间、响应时间（最慢的5个监测点）变化趋势、平均响应时间详细统计、各时段响应时间和响应时间分布。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5efe1f833ef840d092564fdc41664f74%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;您可以通过地区和运营商来筛选监测点，同时可通过模糊搜索来查找监测点。&lt;/p&gt;

&lt;p&gt;单击&lt;strong&gt;监测点&lt;/strong&gt;能够查看具体每个监测点的最快响应时间、平均响应时间、最慢响应时间、响应时间（最小、平均、最大）变化趋势、平均响应时间详细统计、各时段响应时间和响应时间分布。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b12fa65042ee43eca734a8295b491418%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在HTTP/HTTPS类型监测点的平均响应时间详细统计图中查看DNS域名解析、建立连接、SSL握手、首字节和下载内容的时间变化趋势。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe361b25df6641ee9c2dccab6edd5943%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;分析TraceRoute跳数&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;TraceRoute监控任务名称&amp;gt;跳数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;strong&gt;TraceRoute监控任务&lt;/strong&gt;的&lt;strong&gt;跳数统计&lt;/strong&gt;页面查看每个监测点的TraceRoute跳数分析，您可以通过地区和运营商来筛选监测点，同时可通过模糊搜索来查找监测点。&lt;/p&gt;

&lt;p&gt;在时间筛选栏中选择时间范围，包括今天、昨天、最近一周或自定义时间范围。&lt;/p&gt;

&lt;p&gt;单击&lt;strong&gt;监测点&lt;/strong&gt;查看对应的TraceRoute跳数分析，包括总跳数变化趋势、无响应跳数变化趋势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2b27069c03848b7a3b0d3c1d4c0403e%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;分析MTR报告&lt;/h4&gt;

&lt;p&gt;对于出现网络问题的HTTP/HTTPS（IPv4）、TCP、Ping类型监控任务，可在任务详情的&lt;strong&gt;MTR报告&lt;/strong&gt;中查看MTR命令诊断结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;目标监控任务名称&amp;gt;MTR报告&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参考以下步骤查看MTR报告：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在目标监测点的&lt;strong&gt;MTR报告&lt;/strong&gt;列表，选择发生网络错误时间，单击&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46b7ae2f3d8448eb840c4ffe3a1f6912%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;查看该检测时间的监测点数据。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单击&lt;strong&gt;展开&lt;/strong&gt;查看该监测点的MTR命令执行结果。报告中表格每列说明如下：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;列名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;访问主的IP地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Loss100%&lt;/td&gt;
&lt;td&gt;丢包率，单位100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Snt&lt;/td&gt;
&lt;td&gt;发送包的数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Last&lt;/td&gt;
&lt;td&gt;最后一个包的延迟。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sAvg&lt;/td&gt;
&lt;td&gt;所有包的平均延迟。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Best&lt;/td&gt;
&lt;td&gt;延时最小的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wrst&lt;/td&gt;
&lt;td&gt;延时最大的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StDev&lt;/td&gt;
&lt;td&gt;标准偏差。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;查看内网任务的监控结果&lt;/h3&gt;

&lt;h5&gt;分析概要信息&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;内网目标监控任务名称&amp;gt;概览&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在监控任务的&lt;strong&gt;概览&lt;/strong&gt;页面，查看整体平均可用率、整体平均响应时间、平均可用率变化趋势、平均响应时间变化趋势、丢包率趋势以及采集器状态等信息。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;筛选&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在时间筛选栏中选择或自定义时间范围：&lt;/li&gt;
&lt;li&gt;  今天：查看当天（00:00到当前时间前一个整点）的数据。例如当前时间为10:37，则您能查看今天00:00到10:00的数据。根据监控任务的监测频率，当您刷新页面时，今天的监控数据会随时发生变化。&lt;/li&gt;
&lt;li&gt;  昨天：查看昨天（00:00到24:00）的数据。&lt;/li&gt;
&lt;li&gt;  最近一周：查看最近七天（当天和前六天）的数据。&lt;/li&gt;
&lt;li&gt;  自定义：查看选择的起止日期范围内的数据。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;采集器状态（最后一次）&lt;/strong&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;分析可用率&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;内网目标监控任务名称&amp;gt;可用率统计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;strong&gt;可用率统计&lt;/strong&gt;页面，您可以查看采集器维度的可用率分析，包括平均可用率、故障总时长、故障总次数、可用率最低的5个采集器的可用率变化趋势、失败原因占比和故障时间统计。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/711abc4951a9496eaec489bdd8fffb1f%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在时间筛选栏中选择时间范围，包括今天、昨天、最近一周或自定义时间范围。&lt;/li&gt;
&lt;li&gt;  您可以按可用率、故障时长或故障次数来排序，同时可通过模糊搜索来查找采集器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d08b58fcb0741678a515a1fa3c59149%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  单击采集器能够查看具体每个采集器的平均可用率、故障总时长、故障总次数、可用率变化趋势、失败原因占比和故障时间统计。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8e1922b08a94946832e36d36e0398b0%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在故障时间统计列表中，单击故障时间查看对应的历史快照。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fa0619db07d4beaa06c75f006763ab2%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;分析丢包率&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;内网目标监控任务名称&amp;gt;丢包率统计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在监控任务的&lt;strong&gt;丢包率统计&lt;/strong&gt;页面，查看Ping类型监控任务的丢包率统计。默认展示当日数据统计结果。若需切换展示数据的时间范围，可在&lt;strong&gt;时间筛选&lt;/strong&gt;栏中选择展示昨天、最近一周的数据统计结果，或者自定义时间范围。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;丢包率统计&lt;/strong&gt;页面可展示丢包率概况与监测点详细统计数据。&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a7d90fb05e2477bb962ae09bfdb7cb5%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4ad8466d0d647c3ab7c81e969a47e94%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在&lt;strong&gt;监测点数据&lt;/strong&gt;选项卡下可查看监测点详细统计数据。页面展示信息如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  监测点丢包率列表&lt;/li&gt;
&lt;li&gt;  TOP5丢包率最高监测点的丢包率变化趋势&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;分析响应时间&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;内网目标监控任务名称&amp;gt;响应&lt;/strong&gt; &lt;strong&gt;时间&lt;/strong&gt; &lt;strong&gt;统计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在响应时间统计页面，您可以查看采集器维度的响应时间分析，包括最快响应时间、平均响应时间、最慢响应时间、响应最慢的5个采集器的响应时间变化趋势、平均响应时间详细统计、各时段响应时间和响应时间分布。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a68fe14b7a8486cac16075b258962ce%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在时间筛选栏中选择时间范围，包括今天、昨天、最近一周或自定义时间范围。&lt;/li&gt;
&lt;li&gt;  您可以通过模糊搜索来查找采集器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c321322790e40e1ae4171a4c30260dd%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  单击采集器能够查看具体每个采集器的最快响应时间、平均响应时间、最慢响应时间、响应时间（最慢、平均、最快）变化趋势、平均响应时间详细统计、各时段响应时间和响应时间分布。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73a0c55fde2a4662ae2303476c162297%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在平均响应时间详细统计图中查看DNS域名解析、建立连接、首字节和下载内容的时间变化趋势。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;分析外网任务历史快照&lt;/h3&gt;

&lt;p&gt;在监控任务的&lt;strong&gt;历史快照&lt;/strong&gt;页面，按照监测频率您能够查看每一次的检查结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;目标监控任务名称&amp;gt;历史快照&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;strong&gt;历史快照&lt;/strong&gt;列表，展示的指标包括检查时间、结果、状态等。不同类型的监控任务的快照列表展示的指标略有不同。&lt;/p&gt;

&lt;p&gt;在时间筛选栏中选择时间范围，包括今天、昨天、最近一周或自定义时间范围。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a937ddcc1dd4355bbc3e1e0e90ec67d%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;您可以通过地区和运营商来筛选监测点，同时可通过模糊搜索来查找监测点。单击监测点能够查看具体每个监测点的历史快照列表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48aa919d9b7449c89153af80a9d11182%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;您可以按检查时间、使用情况和响应时间等排序历史快照；也可通过使用情况（即是否可用）来筛选历史快照。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt; 监控任务的单次监测产生告警时，所有监测点的历史快照才被记录。建议从告警消息快速进入查看历史快照。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;外网监控任务名称&amp;gt;告警消息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;strong&gt;告警消息&lt;/strong&gt;列表，单击&lt;strong&gt;查看历史快照&lt;/strong&gt;的&lt;strong&gt;查看&lt;/strong&gt;，页面跳转至当前检查时间记录的所有监测点历史快照页，单击监测点名称对应的&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0e6cb3af31c4e3f92f4b220053f0f52%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;，您可以按照监测点的检查结果（可用/不可用）查看。&lt;/p&gt;



&lt;h5&gt;HTTP/ HTTPS检查快照&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检查结果为可用时，您能查看如下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  概览：包括检查时间、检查结果、响应时间、监测点状态、响应服务器IP、下载字节数和下载速度。&lt;/li&gt;
&lt;li&gt;  响应时间报告：查看DNS域名解析时间、建立连接时间、SSL握手、首字节和总响应时间。&lt;/li&gt;
&lt;li&gt;  HTTP响应时间详情图：查看DNS域名解析时间、建立连接时间、SSL握手时间、首字节时间、内容下载时间的分布占比图。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0918a247f34545378690429d551c8872%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  HTTP响应头信息：查看HTTP响应头信息，例如Server、Date、Connection等，每个监控任务的HTTP响应头信息会略有不同。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4331046f1c04bf88357fec4271fc869%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  检查结果为不可用时，显示概览信息。如果当前的监控任务开启了ssl证书认证，会显示&lt;strong&gt;建立连接过程&lt;/strong&gt;，显示系统记录的证书下载、认证及连接建立过程的快照信息，方便客户快速准确定位故障问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1e0e53d790d4ea6aa0505359eaf4dc8%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebSocket检查快照&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1628de35f1a41a0997875e82618055e%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;您能查看如下信息：&lt;/p&gt;

&lt;p&gt;概览：包括检查时间、检查结果、响应时间、WebSocket探测状态、响应主机、响应头信息。&lt;/p&gt;

&lt;p&gt;消息内容：消息接收成功时，消息内容返回匹配接收内容，最大返回3条。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：匹配接收内容在创建WebSocket监控任务的高级设置中自定义。&lt;/p&gt;

&lt;p&gt;消息接收失败时，消息内容返回“消息接收失败”。&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e162420afd3473ea98191fdeb87cf1b%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;Ping检查快照&lt;/h5&gt;



&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acf33fb26c5143e18f5adf0308cc50ff%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;DNS检查快照&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检查结果为可用时，您能查看如下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  概览：包括检查时间、检查结果、响应时间、监测点状态和DNS解析服务器。&lt;/li&gt;
&lt;li&gt;  DNS结果快照：查看DNS解析记录，包括主机记录、记录类型、记录值和TTL。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查结果为不可用时，只能查看概览信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/916f9be03520475bbb146eb5f9c2bed2%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;TraceRoute检查快照&lt;/h5&gt;

&lt;p&gt;在TraceRoute检查快照中，您能查看如下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  概览：包括检查时间、检查结果、响应时间和监测点状态。&lt;/li&gt;
&lt;li&gt;  TraceRoute快照：查看TraceRoute返回结果，包括最大跳数、数据包大小和跳转路径。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bb4b820f57e4e42a36504093af3e54c%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;FTP检查快照&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检查结果为可用时，您能查看如下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  概览：包括检查时间、检查结果、响应时间和监测点状态。&lt;/li&gt;
&lt;li&gt;  FTP结果快照：查看返回的FTP报文。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查结果为不可用时，只能查看概览信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f52d6bbd2a64fbeaec41101cce8f869%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;TCP检查快照&lt;/h5&gt;

&lt;p&gt;在TCP检查快照中，您能查看检查时间、检查结果、响应时间、监测点状态和主机IP。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be68f6147a26488f98c72ec43420c2b6%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;UDP检查快照&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检查结果为可用时，您能查看如下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  概览：包括检查时间、检查结果、响应时间、监测点状态和主机IP。&lt;/li&gt;
&lt;li&gt;  UDP结果快照：查看返回的UDP报文。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查结果为不可用时，只能查看概览信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af44acaf5acb49e59d0bc21797cadca5%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;分析内网任务历史快照&lt;/h3&gt;

&lt;h5&gt;HTTP/ HTTPS检查快照&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;内网&lt;/strong&gt; &lt;strong&gt;HTTP&lt;/strong&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;strong&gt;HTTPS&lt;/strong&gt; &lt;strong&gt;监控任务名称&amp;gt;历史快照&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检查结果为可用时，您能查看如下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  概览：包括检查时间、检查结果、响应时间、监测点状态、响应服务器IP、下载字节数和下载速度。&lt;/li&gt;
&lt;li&gt;  响应时间报告：查看DNS域名解析时间、建立连接时间、SSL握手、首字节和总响应时间。&lt;/li&gt;
&lt;li&gt;  HTTP响应时间详情图：查看DNS域名解析时间、建立连接时间、SSL握手时间、首字节时间、内容下载时间的分布占比图。&lt;/li&gt;
&lt;li&gt;  HTTP响应头信息：查看HTTP响应头信息，例如Server、Date、Connection等，每个监控任务的HTTP响应头信息会略有不同。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c57da0de47a4d4faf6c2b9f30ed5ae9%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/553315464ad749bda4b4246a1d464cf8%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  检查结果为不可用时，显示概览信息。如果当前的监控任务开启了ssl证书认证，会显示&lt;strong&gt;建立连接过程&lt;/strong&gt;，显示系统记录的证书下载、认证及连接建立过程的快照信息，方便客户快速准确定位故障问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26c34e3b67be4025ba4bd911c667d0cf%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;Ping检查快照&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;内网&lt;/strong&gt; &lt;strong&gt;Ping&lt;/strong&gt; &lt;strong&gt;监控任务名称&amp;gt;历史快照&lt;/strong&gt;&lt;/p&gt;



&lt;h5&gt;&lt;strong&gt;TraceRoute检查快照&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;内网TraceRoute监控任务名称&amp;gt;历史快照&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在TraceRoute检查快照中，您能查看如下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  概览：包括检查时间、检查结果、响应时间和监测点状态。&lt;/li&gt;
&lt;li&gt;  TraceRoute快照：查看TraceRoute返回结果，包括最大跳数、数据包大小和跳转路径。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/045401e485a94e578485f1843db52372%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;TCP检查快照&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;内网&lt;/strong&gt; &lt;strong&gt;TCP&lt;/strong&gt; &lt;strong&gt;监控任务名称&amp;gt;历史快照&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在TCP检查快照中，您能查看检查时间、检查结果、响应时间、监测点状态和主机IP。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb17108f99a643588901b04b0343a8ec%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h5&gt;查看告警消息&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;配置入口：网站监控&amp;gt;任务管理&amp;gt;目标监控任务名称&amp;gt;告警消息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在监控任务的&lt;strong&gt;告警消息&lt;/strong&gt;页面，查看告警消息列表，包括消息类型、监控任务状态、检查时间、监控任务名称、所在域/服务器、消息内容等。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  在时间筛选栏中可以自定义时间范围，查看指定范围内的告警消息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c70354bcab064a08ab5c7340719305de%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;小结&lt;/h2&gt;

&lt;p&gt;本章节详细地描述了使用监控宝监控网站时该如何分析监控结果，其中包含查看外网任务的监控结果、查看内网任务的监控结果，以及分析内外网任务的监控结果。下章节将进一步推出利用监控宝监控网站时如何分析数据报表。监控宝作为云智慧推出的新一代用户体验监控工具，拥有全球分布式监测点，目前已经实现了对企业网站的分布式监控。同时，监控宝向用户提供了 IT 性能监控（IT Performance Monitoring）的 SaaS 产品服务。&lt;/p&gt;

&lt;p&gt;申请试用：&lt;strong&gt;&lt;a href=&quot;https://www.cloudwise.com/cn/page/register/index.html?source=Jkb&quot;&gt;点击马上申请监控宝免费试用&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上篇：&lt;strong&gt;&lt;a href=&quot;http://bbs.aiops.cloudwise.com/d/765&quot;&gt;深入浅出玩转监控宝（二）｜网站监控之管理网站监控任务&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2843c840d813ee8bf5ae1beac20942e2</guid>
<title>2 个月内如何在千人团队落地压测平台？</title>
<link>https://toutiao.io/k/1ymkj8c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;老张的求知思考世界&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;For-Think&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;专注互联网领域相关技术实践和思考，也分享职场成长、读书杂谈等内容。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>397d76465b804ca968d10d98669fe3ea</guid>
<title>电商并发减库存设计，如何做到不超卖</title>
<link>https://toutiao.io/k/k06ib6l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;hello，大家好，我是张张，「架构精进之路」公号作者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;随着中国消费认知的不断升级，网购走进千家万户，越来越被人们所接受。淘宝、唯品会、考拉、京东、拼多多等逐渐成为我们生活的重要组成部分。&lt;/p&gt;&lt;p&gt;除了常规的购物下单外，这些电商平台还经常搞一些双十一活动，秒杀、大促、限时购，各种营销玩法，层出不穷！&lt;strong&gt;今天就来跟大家聊一聊电商技术里的库存扣减。&lt;/strong&gt;&lt;/p&gt;&lt;h1 data-id=&quot;heading-0&quot;&gt;&lt;strong&gt;&lt;span&gt;1、并发减库存&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;秒杀的场景有很多，比如：抢购、抢票、抢红包等等。总之，就是在极短时间内有大量的请求。&lt;/p&gt;&lt;p&gt;我们都知道，这种系统设计的大方向就是限流，即通过层层过滤，最终只让相对较少的请求进入到核心业务处理层。&lt;/p&gt;&lt;p&gt;这里不谈秒杀设计，不谈使用队列等使请求串行化，就谈下怎么用锁来保证数据正确，就是已经到减库存那一步了，在这一步中如果保证不超卖。&lt;/p&gt;&lt;p&gt;用队列的话，可以是Java自动的队列，也可以用Redis的LPUSH RPOP&lt;/p&gt;&lt;p&gt;重点是扣减库存&lt;/p&gt;&lt;p&gt;我理解，主要的方式是加锁。加锁有两个层面：一个是程序层面，另一个是数据库层面。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5461346633416458&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zrEicMPdIH3GKZc035sMF3xnC5F9oqJHreerQVH5fgoZiabrfIlnlkWA0A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;802&quot;/&gt;&lt;/p&gt;&lt;h1 data-id=&quot;heading-1&quot;&gt;&lt;strong&gt;&lt;span&gt;2、分布式锁&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;这种场景下应该很少有人用Java自带的锁（比如：synchronized、Lock）吧，因为它们只在同一个JVM内有效，如果你的应用部署了多台的话，应该用分布式锁。&lt;/p&gt;&lt;p&gt;关于Redis分布式锁，可以看我之前的一篇《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDg5MDkzOA==&amp;amp;mid=2448764864&amp;amp;idx=2&amp;amp;sn=7bdabb0e38fa2c9a7ba8b5afc4c04d24&amp;amp;chksm=8b346b15bc43e203bf5709eafd54539f411313dad0ee3a43799f3f80454ed1e9a28f6c2d5b6f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一文搞懂分布式锁的原理与实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一文搞懂分布式锁的原理与实现&lt;/a&gt;》&lt;/p&gt;&lt;p&gt;其实，这里加分布式锁就是将多线程请求转成单线程请求，因为每次只有一个线程获得锁并执行，其余都被阻塞了。&lt;/p&gt;&lt;p&gt;这里有一点需要注意，就是当你应用了事务的话可能会存在问题，请看下面的代码&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9403202328966521&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zr603GnP6jkavmtafA4C35tuhMZzpRa0jT4kaVVNLOMHU1LloicNuzdvw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1374&quot;/&gt;&lt;/p&gt;&lt;p&gt;可能有人会这样写，第一眼看起来挺好的，没问题啊，但仔细实践证明是有问题的。&lt;/p&gt;&lt;p&gt;我们知道，mysql默认的事务隔离级别是&lt;strong&gt;REPEATABLE-READ&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;关于事务隔离级别这块儿，可参考《mysql事务隔离级别》&lt;/p&gt;&lt;p&gt;在这种隔离级别下，同一个事务中多次读取，返回的数据是一样的&lt;/p&gt;&lt;p&gt;同时，Spring声明式事务默认的传播特性REQUIRED&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4224464060529634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zrgwViasUcyB5sdcia1u4sFpqqGtEQaibQmewpyPYJr4A11tqicMaAIteZKA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;793&quot;/&gt;&lt;/p&gt;&lt;p&gt;Spring声明式事务是Spring AOP最好的例子，Spring是通过AOP代理的方式来实现事务的，也就是说在调用reduceStock()方法的之前就已经开启了事务。&lt;/p&gt;&lt;p&gt;那么，在并发情况下可能会存在这样的情况，假设线程T1和T2都执行到这里，于是它们都开启了事务S1和S2，T1先执行，T2后执行，&lt;/p&gt;&lt;p&gt;由于T2执行的时候事务已经创建了，根据隔离级别，这个时候事务S2读取不到S1已提交的数据，于是就会出现T1和T2读取到的值是一样的，即T2读取的是T1更新前的库存数据。&lt;/p&gt;&lt;p&gt;关于这一点，大家可以自己写个代码测试一下，下面是一段参考：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.050381679389313&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zr20wCCUYibYSGJsA6A4zWftWo3s3wF0L9YwHLvryPsAl2gS996XXDl3A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1310&quot;/&gt;&lt;/p&gt;&lt;p&gt;鉴于这种情况呢，可以将库存放到Redis中，我们直接读写Redis，这样可以避免受数据库事务的影响，当然这也会带来新的问题，不再讨论。&lt;/p&gt;&lt;h1 data-id=&quot;heading-2&quot;&gt;&lt;span&gt;&lt;strong&gt;3、数据库乐观锁&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-id=&quot;heading-3&quot;&gt;CAS（compare and swap）比较并交换&lt;/h1&gt;&lt;p&gt;在Java中，一个线程想修改某个变量的值，那么第一步是将变量的值从主内存中读取到自己工作内存中，然后修改，最后写回主内存。这个过程可以归结为：读取——修改——写入，在写回内存的时候可能当前内存中那个值已经发生了变化，这个时候如果继续写则会覆盖别人的数据，只有当内存中的那个值和它修改之前读到的那个值一样，才可以写入。这个跟数据库是一样的。Java中通过Unsafe中compareAndSwapObject这样的方法类实现的，它直接调用CPU指令。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27262813522355506&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zrA19vUzJ5US3EiccvnYzByhzNjUaYucEMdiaukqPnSq1cdYw14W9OAeoQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;917&quot;/&gt;&lt;/p&gt;&lt;p&gt;数据库中也有CAS，乐观锁就是一种CAS。&lt;/p&gt;&lt;h1 data-id=&quot;heading-4&quot;&gt;&lt;strong&gt;经典的乐观锁实现：&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。&lt;/p&gt;&lt;p&gt;更新的时候带上版本号，只有当前版本号与更新之前查询时的版本一致，才会更新&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.03402854006586169&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zrxI8G2PP7dlmFHOuQGBZK1zGvtSWEtYmhqiaSlvgWIfmfM8wWzSrCoxw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;911&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6381578947368421&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zrBBGiaNzFMuAToDFpTX37d8NcXYvdR0MdGEWH9TFqUI5rrzw90qibzyibw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;608&quot;/&gt;&lt;/p&gt;&lt;h1 data-id=&quot;heading-5&quot;&gt;&lt;span&gt;&lt;strong&gt;4、ABA问题&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;这里顺便多提一句，CAS中的ABA问题&lt;/p&gt;&lt;p&gt;假设，原先的值是A，线程-1读取到的值是A，想把它改成D，但是在此期间，有可能其他线程已经多次修改过这个值，只不过最后当线程-1准备将A改成D的时候，它发现恰好还是A，以为没有人改过，其实这时候的A已经不是原来的A了。&lt;/p&gt;&lt;p&gt;也就是说，尽管修改之前做了比较，当然，仍然会出现如下情况：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.32978723404255317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zrcDQFh1k366uzTIFsD9ghalPcH2xcVylqNDeXJpicaw6uJBx5Tozibvjw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;940&quot;/&gt;&lt;/p&gt;&lt;h1 data-id=&quot;heading-6&quot;&gt;&lt;strong&gt;产生原因&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;ABA问题导致的原因，是CAS过程中只简单进行了“值”的校验，有些情况下，“值”虽然相同，却已经不是原来的数据了。&lt;/p&gt;&lt;h1 data-id=&quot;heading-7&quot;&gt;&lt;strong&gt;优化方向&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;CAS不能只比对“值”，还必须确保的是原来的数据，才能修改成功。&lt;/p&gt;&lt;h1 data-id=&quot;heading-8&quot;&gt;&lt;span&gt;&lt;strong&gt;5、常见实践&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;“版本号”的比对，一个数据一个版本，版本变化，即使值相同，也不应该修改成功。&lt;/p&gt;&lt;p&gt;不仅要关注值，还要关注是不是原来的对象&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3393939393939394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zrp2CmrZzfOjpV2sRAcbdWtOa2j1Bicct67IJYxJoVhfF5IOF9kalJTxA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;660&quot;/&gt;&lt;/p&gt;&lt;p&gt;基于“值”的CAS乐观锁，可能导致ABA问题。CAS乐观锁，必须保证修改时的“此数据”就是“彼数据”，应该由“值”比对，优化为“版本号”比对。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1310344827586207&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Z2bVaFK6CgQmWMjbNVeA7IUKT2wIL8zrzhrm1qUr8RbQQR3QyLmRhUyI3LZQVHRnpD8z7I8a8Eh8fs0JjOlTmw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1015&quot;/&gt;&lt;/p&gt;&lt;p&gt;参考：&lt;/p&gt;&lt;p&gt;https://www.cnblogs.com/cjsblog/p/9135118.html&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;往期热文推荐：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家，InfoQ写作社区签约作者。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; has-insert-preloading=&quot;1&quot; data-index=&quot;1&quot; data-origin_num=&quot;112&quot; data-isban=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关注公众号，免费领学习资料&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;28&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;28&quot;&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;如果您觉得还不错，欢迎关注和转发~     &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5163398692810458&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqsCPbyzicCBx6Zm9sNJCWibo6VzGRYbxrSfjJaaGibSRuyZFQmr3KcX07sw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;306&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c29d6f335fe56c55c5d1752f794c67c7</guid>
<title>一文吃透 Go 内置 RPC 原理</title>
<link>https://toutiao.io/k/awegpgi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hello 大家好呀，我是小楼，这是系列文《Go底层原理剖析》的第三篇，依旧分析 Http 模块。我们今天来看 Go内置的 RPC。说起 RPC 大家想到的一般是框架，Go 作为编程语言竟然还内置了 RPC，着实让我有些吃鲸。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0458715596330275&quot; data-type=&quot;png&quot; data-w=&quot;109&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0RZuBqZzv9a7aTtGib4WM5ibGPwoqENRZnmJQfwTDTWs5NVqHeIB4F5JIg3XAJMk40cX8CdTZYbR3nw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;从一个 Demo 入手&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了快速进入状态，我们先搞一个 Demo，当然这个 Demo 是参考 Go 源码 &lt;code&gt;src/net/rpc/server.go&lt;/code&gt;，做了一丢丢的修改。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; common&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Args &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; A, B &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Quotient &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; Quo, Rem &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Arith &lt;span&gt;struct&lt;/span&gt;{}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(t *Arith)&lt;/span&gt; &lt;span&gt;Multiply&lt;/span&gt;&lt;span&gt;(args *common.Args, reply *&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; *reply = args.A * args.B&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(t *Arith)&lt;/span&gt; &lt;span&gt;Divide&lt;/span&gt;&lt;span&gt;(args *common.Args, quo *common.Quotient)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; args.B == &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; errors.New(&lt;span&gt;&quot;divide by zero&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt; quo.Quo = args.A / args.B&lt;br/&gt; quo.Rem = args.A % args.B&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; arith := &lt;span&gt;new&lt;/span&gt;(Arith)&lt;br/&gt; rpc.Register(arith)&lt;br/&gt; rpc.HandleHTTP()&lt;br/&gt; l, e := net.Listen(&lt;span&gt;&quot;tcp&quot;&lt;/span&gt;, &lt;span&gt;&quot;:9876&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; e != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(e)&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;go&lt;/span&gt; http.Serve(l, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;br/&gt; wg.Add(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt; wg.Wait()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; client, err := rpc.DialHTTP(&lt;span&gt;&quot;tcp&quot;&lt;/span&gt;, &lt;span&gt;&quot;127.0.0.1:9876&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; args := common.Args{A: &lt;span&gt;7&lt;/span&gt;, B: &lt;span&gt;8&lt;/span&gt;}&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; reply &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 同步调用&lt;/span&gt;&lt;br/&gt; err = client.Call(&lt;span&gt;&quot;Arith.Multiply&quot;&lt;/span&gt;, &amp;amp;args, &amp;amp;reply)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt; }&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;Call Arith: %d * %d = %d\n&quot;&lt;/span&gt;, args.A, args.B, reply)&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// 异步调用&lt;/span&gt;&lt;br/&gt; quotient := &lt;span&gt;new&lt;/span&gt;(common.Quotient)&lt;br/&gt; divCall := client.Go(&lt;span&gt;&quot;Arith.Divide&quot;&lt;/span&gt;, args, quotient, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt; replyCall := &amp;lt;-divCall.Done&lt;br/&gt;&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;Go Divide: %d divide %d = %+v %+v\n&quot;&lt;/span&gt;, args.A, args.B, replyCall.Reply, quotient)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不出意外，RPC 调用成功&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15384615384615385&quot; data-type=&quot;png&quot; data-w=&quot;468&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0RZuBqZzv9a7aTtGib4WM5ibGLAnymRq4BVaNUicPAxXQtJtsRGkFQfbeNBT5gSQFkQyAib4vL4eoy6wg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;这 RPC 吗&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在剖析原理之前，我们先想想什么是 RPC？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RPC 是 Remote Procedure Call 的缩写，一般翻译为远程过程调用，不过我觉得这个翻译有点难懂，啥叫过程？如果查一下 Procedure，就能发现它就是应用程序的意思。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5356576862123613&quot; data-type=&quot;png&quot; data-w=&quot;1262&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0RZuBqZzv9a7aTtGib4WM5ibGtVp7ZQKVd9Fr9oUdtkiaViamUR1xDWOE0rATnibTWM2uH0Q4dVC7kEokQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以翻译过来应该是调用远程程序，说人话就是调用的方法不在本地，不能通过内存寻址找到，只能通过远程通信来调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说 RPC 框架存在的意义是让你&lt;strong&gt;调用远程方法像调用本地方法一样方便&lt;/strong&gt;，也就是将复杂的编解码、通信过程都封装起来，让代码写起来更简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到这里其实我想吐槽一下，网上经常有文章说，既然有 Http，为什么还要有 RPC？如果你理解 RPC，我相信你不会问出这样的问题，他们是两个维度的东西，RPC 关注的是远程调用的封装，Http 是一种协议，RPC 没有规定通信协议，RPC 也可以使用 Http，这不矛盾。这种问法就好像在问既然有了苹果手机，为什么还要有中国移动？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扯远了，我们回头看一下上述的例子是否符合我们对 RPC 的定义。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先是远程调用，我们是开了一个 Server，监听了9876端口，然后 Client 与之通信，将这两个程序部署在两台机器上，只要网络是通的，照样可以正常工作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其次它符合&lt;strong&gt;调用远程方法像调用本地方法一样方便&lt;/strong&gt;，代码中没有处理编解码，也没有处理通信，只不过方法名以参数的形式传入，和一般的 RPC 稍有不同，倒是很像 Dubbo 的泛化调用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上两点，这很 RPC。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我将用两段内容分别剖析 Go 内置的 RPC Server 与 Client 的原理，来看看 Go 是如何实现一个 RPC 的。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;RPC Server 原理&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;注册服务&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的服务指的是一个具有公开方法的对象，比如上面 Demo 中的 &lt;code&gt;Arith&lt;/code&gt;，只需要调用 Register 就能注册&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;rpc.Register(arith)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注册完成了以下动作：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;利用反射获取这个对象的类型、类名、值、以及公开方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将其包装为 service 对象，并存在 server 的 serviceMap 中，serviceMap 的 key 默认为类名，比如这里是Arith，也可以调用另一个注册方法 &lt;code&gt;RegisterName&lt;/code&gt; 来自定义名称&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;注册 Http Handle&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里你可能会问，为啥 RPC 要注册 Http Handle。没错，Go 内置的 RPC 通信是基于 Http 协议的，所以需要注册。只需要一行代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;rpc.HandleHTTP()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它调用的是 Http 的 Handle 方法，也就是 HandleFunc 的底层实现，这块如果不清楚，可以看我之前的文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5NjE2MDQwNg==&amp;amp;mid=2247488101&amp;amp;idx=1&amp;amp;sn=ba4888e87883db7c19e7b92dcc06f966&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;《一文读懂 Go Http Server 原理》&lt;/a&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它注册了两个特殊的 Path：&lt;code&gt;/_goRPC_&lt;/code&gt; 和 &lt;code&gt;/debug/rpc&lt;/code&gt;，其中有一个是 Debug 专用，当然也可以自定义。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;逻辑处理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注册时传入了 RPC 的 server 对象，这个对象必须实现 Handler 的 ServeHTTP 接口，也就是 RPC 的处理逻辑入口在这个 ServeHTTP 中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Handler &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; ServeHTTP(ResponseWriter, *Request)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看 RPC Server 是如何实现这个接口的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// ServeHTTP implements an http.Handler that answers RPC requests.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(server *Server)&lt;/span&gt; &lt;span&gt;ServeHTTP&lt;/span&gt;&lt;span&gt;(w http.ResponseWriter, req *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// ①&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; req.Method != &lt;span&gt;&quot;CONNECT&quot;&lt;/span&gt; {&lt;br/&gt;  w.Header().Set(&lt;span&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span&gt;&quot;text/plain; charset=utf-8&quot;&lt;/span&gt;)&lt;br/&gt;  w.WriteHeader(http.StatusMethodNotAllowed)&lt;br/&gt;  io.WriteString(w, &lt;span&gt;&quot;405 must CONNECT\n&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;  &lt;span&gt;// ②&lt;/span&gt;&lt;br/&gt; conn, _, err := w.(http.Hijacker).Hijack()&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  log.Print(&lt;span&gt;&quot;rpc hijacking &quot;&lt;/span&gt;, req.RemoteAddr, &lt;span&gt;&quot;: &quot;&lt;/span&gt;, err.Error())&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;  &lt;span&gt;// ③&lt;/span&gt;&lt;br/&gt; io.WriteString(conn, &lt;span&gt;&quot;HTTP/1.0 &quot;&lt;/span&gt;+connected+&lt;span&gt;&quot;\n\n&quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;// ④&lt;/span&gt;&lt;br/&gt; server.ServeConn(conn)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我对这段代码标了号，逐一看：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;①：限制了请求的 Method 必须是 CONNECT，如果不是则直接返回错误，这么做是为什么？看下 Method 字段的注释就恍然大悟：Go 的 Http Client 是发不出 CONNECT 的请求，也就是 RPC 的 Server 是没办法通过 Go 的 Http Client 访问，限制必须得使用 RPC Client&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Request &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// Method specifies the HTTP method (GET, POST, PUT, etc.).&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// For client requests, an empty string means GET.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;//&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// Go&#x27;s HTTP client does not support sending a request with&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// the CONNECT method. See the documentation on Transport for&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// details.&lt;/span&gt;&lt;br/&gt; Method &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;440&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0RZuBqZzv9a7aTtGib4WM5ibGwfuRqUC2X4We4b8OHYicAVzy7GK2RibCl9b8FlU5U4kd63X5yQSsqK6A/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;②：Hijack 是劫持 Http 的连接，劫持后需要手动处理连接的关闭，这个操作是为了复用连接&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;③：先写一行响应：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&quot;HTTP/1.0 200 Connected to Go RPC \n\n&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;④：开始真正的处理，这里段比较长，大致做了如下几点事情：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;读出请求，包括要调用的service，参数等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过反射异步地调用对应的方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将执行结果编码写回连接&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;准备好数据、编解码器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在一个大循环里处理每一个请求，处理流程是：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到这里，代码中有个对象池的设计挺巧妙，这里展开说说。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;other&quot; data-w=&quot;224&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz/xacdaKuBM0RZuBqZzv9a7aTtGib4WM5ibGqY13oIjWGHuNkhr1vUYRbwMzMah5ico065wvHkm1Rvsfk7q6j7S9KQg/640?wx_fmt=other&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在高并发下，Server 端的 Request 对象和 Response 对象会频繁地创建，这里用了队列来实现了对象池。以 Request 对象池做个介绍，在 Server 对象中有一个 Request 指针，Request 中有个 next 指针&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Server &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; ...&lt;br/&gt; freeReq    *Request&lt;br/&gt; ..&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Request &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; ServiceMethod &lt;span&gt;string&lt;/span&gt; &lt;br/&gt; Seq           &lt;span&gt;uint64&lt;/span&gt;&lt;br/&gt; next          *Request&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在读取请求时需要这个对象，如果池中没有对象，则 new 一个出来，有的话就拿到，并将 Server 中的指针指向 next：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(server *Server)&lt;/span&gt; &lt;span&gt;getRequest&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; *&lt;span&gt;Request&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; server.reqLock.Lock()&lt;br/&gt; req := server.freeReq&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; req == &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  req = &lt;span&gt;new&lt;/span&gt;(Request)&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  server.freeReq = req.next&lt;br/&gt;  *req = Request{}&lt;br/&gt; }&lt;br/&gt; server.reqLock.Unlock()&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; req&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求处理完成时，释放这个对象，插入到链表的头部&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(server *Server)&lt;/span&gt; &lt;span&gt;freeRequest&lt;/span&gt;&lt;span&gt;(req *Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; server.reqLock.Lock()&lt;br/&gt; req.next = server.freeReq&lt;br/&gt; server.freeReq = req&lt;br/&gt; server.reqLock.Unlock()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画个图整体感受下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;gif&quot; data-w=&quot;720&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/xacdaKuBM0RZuBqZzv9a7aTtGib4WM5ibGhNqqImicOQdGeT94XXUee0A1KOmartfuErSg8jok5G8bUpQqM1FqW5Q/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到正题，Client 和 Server 之间只有一条连接，如果是异步执行，怎么保证返回的数据是正确的呢？这里先不说，如果一次性说完了，下一节的 Client 就没啥可说的了，你说是吧？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;440&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0RZuBqZzv9a7aTtGib4WM5ibGeTQhAfZr3grlicACdNKX8PjlsCibJ1J60fFJ7AmA4zYJeuib4AiciaeqQ0g/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;RPC Client 原理&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Client 使用第一步是 New 一个 Client 对象，在这一步，它偷偷起了一个协程，干什么呢？用来读取 Server 端的返回，这也是 Go 惯用的伎俩。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一次 Client 的调用都被封装为一个 Call 对象，包含了调用的方法、参数、响应、错误、是否完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时 Client 对象有一个 pending map，key 为请求的递增序号，当 Client 发起调用时，将序号自增，并把当前的 Call 对象放到 pending map 中，然后再向连接写入请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写入的请求先后分别为 Request 和参数，可以理解为 header 和 body，其中 Request 就包含了 Client 的请求自增序号。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Server 端响应时把这个序号带回去，Client 接收响应时读出返回数据，再去 pending map 里找到对应的请求，通知给对应的阻塞协程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这不就能把请求和响应串到一起了吗？这一招很多 RPC 框架也是这么玩的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;gif&quot; data-w=&quot;720&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/xacdaKuBM0RZuBqZzv9a7aTtGib4WM5ibGUoABFP4C2icn0XBXZb3nA8dib0XBibQdZWu2LqwK8lsaNIbqJtAqeELdw/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Client 、Server 流程都走完，但我们忽略了编解码细节，Go RPC 默认使用 gob 编解码器，这里也稍微介绍下 gob。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;gob 编解码&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gob 是 Go 实现的一个 Go 亲和的协议，可以简单理解这个协议只能在 Go 中用。Go Client RPC 对编解码接口的定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; ClientCodec &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; WriteRequest(*Request, &lt;span&gt;interface&lt;/span&gt;{}) error&lt;br/&gt; ReadResponseHeader(*Response) error&lt;br/&gt; ReadResponseBody(&lt;span&gt;interface&lt;/span&gt;{}) error&lt;br/&gt;&lt;br/&gt; Close() error&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同理，Server 端也有一个定义：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; ServerCodec &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; ReadRequestHeader(*Request) error&lt;br/&gt; ReadRequestBody(&lt;span&gt;interface&lt;/span&gt;{}) error&lt;br/&gt; WriteResponse(*Response, &lt;span&gt;interface&lt;/span&gt;{}) error&lt;br/&gt;  &lt;br/&gt; Close() error&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;gob 是其一个实现，这里只看 Client：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *gobClientCodec)&lt;/span&gt; &lt;span&gt;WriteRequest&lt;/span&gt;&lt;span&gt;(r *Request, body &lt;span&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span&gt;(err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err = c.enc.Encode(r); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err = c.enc.Encode(body); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; c.encBuf.Flush()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *gobClientCodec)&lt;/span&gt; &lt;span&gt;ReadResponseHeader&lt;/span&gt;&lt;span&gt;(r *Response)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; c.dec.Decode(r)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *gobClientCodec)&lt;/span&gt; &lt;span&gt;ReadResponseBody&lt;/span&gt;&lt;span&gt;(body &lt;span&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; c.dec.Decode(body)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;追踪到底层就是 Encoder 的 EncodeValue 和 DecodeValue 方法，Encode 的细节我不打算写，因为我也不想看这一块，最终结果就是把结构体编码成了二进制数据，调用 writeMessage。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文介绍了 Go 内置的 RPC Client 和 Server 端原理，能窥探出一点点 RPC 的设计，如果让你实现一个 RPC 是不是有些可以参考呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本来草稿中贴了很多代码，但我觉得那样解读很难读下去，于是就删了又删。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过还有一点是我想写但没有写出来的，本文只讲了 Go 内置 RPC 是什么，怎么实现的，至于它的优缺点，能不能在生产中使用，倒是没有讲，下次写一篇文章专门讲一下，有兴趣可以持续关注，我们下期再见，欢迎转发、收藏、点赞。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;往期回顾&lt;/span&gt;&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;搜索关注微信公众号&quot;捉虫大师&quot;，后端技术分享，架构设计、性能优化、源码阅读、问题排查、踩坑实践&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进技术交流群加微信 MrRoshi&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>