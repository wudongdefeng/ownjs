<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>aeee774544196a08a5c7ef0386ca49b4</guid>
<title>20 图 ｜6 千字｜缓存实战（上篇）</title>
<link>https://toutiao.io/k/4uqm3n6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先说个小事情，今天试了下做动图，就一张动图都花了我 &lt;span&gt;1 个小时&lt;/span&gt;，还做得很难看。。在线求个做动图的好软件～&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9hxbHXH2x3B4AWCibRIcw24OicKnrNhnrMe6B9OW6WtliabudRWqiblwibjw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;360&quot;/&gt;本文主要内容如下：&lt;img data-ratio=&quot;0.6103896103896104&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9lBdbOexGuBEpobCpjptCY6yPLZfJem2hQeZCJ7vITTkxcdvgOZyI8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一篇讲到如何做性能调优的方式：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjI0ODk0NA==&amp;amp;mid=2451952448&amp;amp;idx=1&amp;amp;sn=4351e18bf793ed42a55db20b38de89f6&amp;amp;chksm=8d1c2adfba6ba3c96d5018d8266de3f6eec2b7abd89e073cd3fbf0c4a122baa84c69dd1f6cc0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《48 张图 | 手摸手教你微服务的性能监控、压测和调优》&lt;/a&gt;，比如给表加索引、动静分离、减少不必要的日志打印。但有一个很强大的优化方式没有提到，那就是加缓存，比如查询小程序的广告位配置，因为没什么人会去频繁的改，将广告位配置丢到缓存里面再适合不过了。那我们就给开源 Spring Cloud 实战项目 PassJava 加下缓存来提升下性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我把&lt;code&gt;后端&lt;/code&gt;、&lt;code&gt;前端&lt;/code&gt;、&lt;code&gt;小程序&lt;/code&gt;都上传到同一个仓库里面了，大家可以通过 &lt;code&gt;Github&lt;/code&gt; 或 &lt;code&gt;码云&lt;/code&gt;访问。地址如下：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;: https://github.com/Jackson0714/PassJava-Platform&lt;/p&gt;&lt;p&gt;&lt;strong&gt;码云&lt;/strong&gt;：https://gitee.com/jayh2018/PassJava-Platform&lt;/p&gt;&lt;p&gt;&lt;strong&gt;配套教程&lt;/strong&gt;：www.passjava.cn&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实战之前，我们先来看下使用缓存的原理和问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、缓存&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1 为什么要用缓存&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;20 年前常见的系统就是单机的，比如 ERP 系统，对性能要求不高，使用缓存的并不常见，但现如今，已经步入到互联网时代，高并发、高可用、高性能总是被提起，而缓存在这“三高”中立下&lt;strong&gt;汗马功劳&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通过会将部分数据放入缓存中，来提高访问速度，然后数据库承担存储的工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那么哪些数据适合放入缓存中呢？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;即时性。例如查询最新的物流状态信息。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;数据一致性要求不高。例如门店信息，修改后，数据库中已经改了，5 分钟后缓存中才是最新的，但不影响功能使用。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;访问量大且更新频率不高。比如首页的广告信息，访问量，但是不会经常变化。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们想要查询数据时，使用缓存的流程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8650793650793651&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk97XpicL7aHZPjksHr9VmL0DOjewnsTJ2a9WMjDibBsww5ryAE0Lw3sNiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;630&quot;/&gt;&lt;figcaption&gt;读模式缓存使用流程&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2  本地缓存&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如现在有一个需求：前端小程序需要查询题目的类型，而题目类型放在小程序的首页在，访问量是非常高的，但是又不是经常变化的数据，所以可以将题目类型数据放到缓存中。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4921135646687697&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9Xczd7ic4ZXNOqhichPQtIfm9am9dQSjM5SftbRbyhy0hgojUgeupDhtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;317&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最简单的使用缓存的方式是使用本地缓存，也就是在内存中缓存数据，可以用 HashMap、数组等数据结构来缓存数据。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.1 不使用缓存&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来看下不使用缓存的情况：前端的请求先经过网关，然后请求到题目微服务，然后查询数据库，返回查询结果。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.268361581920904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9BJj5C9u71YiaOaIyhqiahbQddAaPwXWEEEqYUH6YiaN6icYDV976nrBM7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;708&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看下核心代码是怎么样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先自定义一个 Rest API 用来查询题目类型列表，数据是从数据库查询出来后直接返回给前端。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/list&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; R &lt;span&gt;list&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 从数据库中查询数据&lt;/span&gt;&lt;br/&gt;    typeEntityList = ITypeService.list(); &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; R.ok().put(&lt;span&gt;&quot;typeEntityList&quot;&lt;/span&gt;, typeEntityList);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.2 使用缓存&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来看下使用缓存的情况：前端先经过网关，然后到题目微服务，先判断缓存中有没有数据，如果没有，则查询数据库再更新缓存，最后返回查询到的结果。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4582743988684583&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk95xwIiclKA3DFBNNG3Puao4ic2SicgQEI0O2cyUxZtGdslU5mX5hIL6suQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;707&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们现在创建一个 HashMap 来缓存题目的类型列表：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; cache = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先获取缓存的类型列表&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;List&amp;lt;TypeEntity&amp;gt; typeEntityListCache = (List&amp;lt;TypeEntity&amp;gt;) cache.get(&lt;span&gt;&quot;typeEntityList&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果缓存中没有，则先从数据库中获取。当然，第一次查询缓存时，肯定是没有这个数据的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 如果缓存中没有数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (typeEntityListCache == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;  System.out.println(&lt;span&gt;&quot;The cache is empty&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;// 从数据库中查询数据&lt;/span&gt;&lt;br/&gt;  List&amp;lt;TypeEntity&amp;gt; typeEntityList = ITypeService.list();&lt;br/&gt;  &lt;span&gt;// 将数据放入缓存中&lt;/span&gt;&lt;br/&gt;  typeEntityListCache = typeEntityList;&lt;br/&gt;  cache.put(&lt;span&gt;&quot;typeEntityList&quot;&lt;/span&gt;, typeEntityList);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; R.ok().put(&lt;span&gt;&quot;typeEntityList&quot;&lt;/span&gt;, typeEntityListCache);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们用 Postman 工具来看下查询结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;请求URL：https://github.com/Jackson0714/PassJava-Platform&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6009036144578314&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9D843rQtJ4W47f50odhTFbKHlW1YM8EPcAmGQic7bJl9JkpXTYLUOI7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回了题目类型列表，共 14 条数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以后再次查询时，因为缓存中已经有该数据了，所以直接走缓存，不会再从数据库中查询数据了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的例子中我们可以知道本地缓存有哪些优点呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;减少和数据库的交互，降低因磁盘 I/O 引起的性能问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免数据库的死锁问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加速相应速度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，本地缓存也存在一些问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;占用本地内存资源。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;机器宕机重启后，缓存丢失。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可能会存在数据库数据和缓存数据不一致的问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同一台机器中的多个微服务缓存的数据不一致。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0800821355236139&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9JpKy1tynm0eTJ7RvWkTcXhciavtjloCspPnYQkQVibtyibOe9nQClicQKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;487&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1931818181818181&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk90cBTpgicoS4hFQicEPv2LyhShwDXlAeuGZgnia70vIZ3xRHRmicbnGcMoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;440&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于本地缓存的问题，我们引入了分布式缓存 &lt;code&gt;Redis&lt;/code&gt; 来解决。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、缓存 Redis&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 Docker 安装 Redis&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先需要安装 Redis，我是通过 Docker 来安装 Redis。另外我在 ubuntu 和 Mac M1 上都装过 docker 版的 Redis，大家可以参照这两篇来安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjI0ODk0NA==&amp;amp;mid=2451943021&amp;amp;idx=4&amp;amp;sn=d372944f4d7275217e24af16b4014939&amp;amp;chksm=8d1c57f2ba6bdee43537bf0bd44b0f314053b6562065feae2dbd6dc04a1304ed8c393342f557&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《Ubuntu 上到 Docker 安装redis》&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjI0ODk0NA==&amp;amp;mid=2451954169&amp;amp;idx=1&amp;amp;sn=950ef7a2ca1faafd29783c2872e41095&amp;amp;chksm=8d1c2066ba6ba97059874423f7507603306a381fce2e200008ad14f6b775364495c01b56fc84&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《M1 和 Docker 谈了个恋爱...》&lt;/a&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 引入 Redis 组件&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我用的是 passjava-question 微服务，所以是在 passjava-question 模块下的配置文件 pom.xml 中引入 redis 组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件路径：/passjava-question/pom.xml&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3 测试 Redis&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以写一个测试方法来测试引入的 redis 是否能存数据，以及能否查出存的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都是使用 &lt;code&gt;StringRedisTemplate&lt;/code&gt; 库来操作 Redis，所以可以自动装载下 &lt;code&gt;StringRedisTemplate&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;StringRedisTemplate stringRedisTemplate;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在测试方法中，测试存储方法：ops.set()，以及 查询方法：ops.get()&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;TestStringRedisTemplate&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 初始化 redis 组件&lt;/span&gt;&lt;br/&gt;    ValueOperations&amp;lt;String, String&amp;gt; ops = stringRedisTemplate.opsForValue();&lt;br/&gt;    &lt;span&gt;// 存储数据&lt;/span&gt;&lt;br/&gt;    ops.set(&lt;span&gt;&quot;悟空&quot;&lt;/span&gt;, &lt;span&gt;&quot;悟空聊架构_&quot;&lt;/span&gt; + UUID.randomUUID().toString());&lt;br/&gt;    &lt;span&gt;// 查询数据&lt;/span&gt;&lt;br/&gt;    String wukong = ops.get(&lt;span&gt;&quot;悟空&quot;&lt;/span&gt;);&lt;br/&gt;    System.out.println(wukong);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;set 方法的第一个参数是 key，比如示例中的 “悟空”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;get 方法的参数也是 key。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后打印出了 redis 中 key = “&lt;span&gt;悟空&lt;/span&gt;” 的缓存的值：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23170731707317074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9KxgxWZ7LjugeDkmicTPAMpo2NiaW8ia3pYVGzAPpFd0AWjOMuQPCg6qdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;574&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外也可以通过客户端工具来查看，如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.40028490028490027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9OU8In9Qf17NibnaIwvibmR1jgKDyZWV0Houqic2GEPSZYxDjagZk9S5fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我下载的是这个软件：Redis Desktop Manager windows，Mac M1 上正常使用。下载地址：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;http://www.pc6.com/softview/SoftView_450180.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4 用  Redis 改造业务逻辑&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 redis 替换 hashmap 也不难，把用到 hashmap 的地方都用 redis 改下。另外需要注意的是：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从数据库中查询到的数据先要&lt;code&gt;序列化&lt;/code&gt;成 JSON 字符串后再存入到 Redis 中，从 Redis 中查询数据时，也需要将 JSON 字符串&lt;code&gt;反序列化&lt;/code&gt;为对象实例。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;TypeEntity&amp;gt; &lt;span&gt;getTypeEntityList&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// 1.初始化 redis 组件&lt;/span&gt;&lt;br/&gt;  ValueOperations&amp;lt;String, String&amp;gt; ops = stringRedisTemplate.opsForValue();&lt;br/&gt;  &lt;span&gt;// 2.从缓存中查询数据&lt;/span&gt;&lt;br/&gt;  String typeEntityListCache = ops.get(&lt;span&gt;&quot;typeEntityList&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;// 3.如果缓存中没有数据&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(typeEntityListCache)) {&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;The cache is empty&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// 4.从数据库中查询数据&lt;/span&gt;&lt;br/&gt;    List&amp;lt;TypeEntity&amp;gt; typeEntityListFromDb = &lt;span&gt;this&lt;/span&gt;.list();&lt;br/&gt;    &lt;span&gt;// 5.将从数据库中查询出的数据序列化 JSON 字符串&lt;/span&gt;&lt;br/&gt;    typeEntityListCache = JSON.toJSONString(typeEntityListFromDb);&lt;br/&gt;    &lt;span&gt;// 6.将序列化后的数据存入缓存中&lt;/span&gt;&lt;br/&gt;    ops.set(&lt;span&gt;&quot;typeEntityList&quot;&lt;/span&gt;, typeEntityListCache);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; typeEntityListFromDb;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;// 7.如果缓存中有数据，则从缓存中拿出来，并反序列化为实例对象&lt;/span&gt;&lt;br/&gt;  List&amp;lt;TypeEntity&amp;gt; typeEntityList = JSON.parseObject(typeEntityListCache, &lt;span&gt;new&lt;/span&gt; TypeReference&amp;lt;List&amp;lt;TypeEntity&amp;gt;&amp;gt;(){});&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; typeEntityList;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个流程如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;1.初始化 redis 组件。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;2.从缓存中查询数据。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;3.如果缓存中没有数据，执行步骤 4、5、6。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;4.从数据库中查询数据。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;5.将从数据库中查询出的数据转化为 JSON 字符串。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;6.将序列化后的数据存入缓存中，并返回数据库中查询到的数据。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;7.如果缓存中有数据，则从缓存中拿出来，并反序列化为实例对象。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.5 测试业务逻辑&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还是用 postman 工具进行测试：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6794682422451994&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9eMEl1PKDKJbw8MXSE2YctvfQVE2LoHvoOHWaBCObZA8THcicSNshNeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;677&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过多次测试，第一次请求会稍微慢点，后面几次速度非常快。说明使用缓存后性能有提升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外我们用 Redis 客户端看下结果：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis key = typeEntityList，Redis value 是一个 JSON 字符串，里面的内容是题目分类列表。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.46786632390745503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9c0m1LvBic4VmFgWZ1xVqfRogB6OpW7l4aRQbBCK7LJwic2R3BWHorNbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;778&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、缓存穿透、雪崩、击穿&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高并发下使用缓存会带来的几个问题：缓存穿透、雪崩、击穿。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 缓存穿透&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1.1 缓存穿透的概念&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存穿透指一个一定不存在的数据，由于缓存未命中这条数据，就会去查询数据库，数据库也没有这条数据，所以返回结果是 &lt;code&gt;null&lt;/code&gt;。如果每次查询都走数据库，则缓存就失去了意义，就像穿透了缓存一样。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8795180722891566&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9Aibu2yMhQEpVdhhLVAvzURIFSXoaY4Juic2LbsfO1ylmeLZzEoktrW7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1.2 带来的风险&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用不存在的数据进行攻击，数据库压力增大，最终导致系统崩溃。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1.3 解决方案&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对结果 &lt;code&gt;null&lt;/code&gt; 进行缓存，并加入短暂的过期时间。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2 缓存雪崩&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9hxbHXH2x3B4AWCibRIcw24OicKnrNhnrMe6B9OW6WtliabudRWqiblwibjw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;360&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.1 缓存雪崩的概念&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存雪崩是指我们缓存多条数据时，采用了相同的过期时间，比如 00:00:00 过期，如果这个时刻缓存同时失效，而有大量请求进来了，因未缓存数据，所以都去查询数据库了，数据库压力增大，最终就会导致雪崩。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.875748502994012&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk90v2lr9RqITxorEribrwcs2BpzbSleEIVAYlVzBW3agEz8iaWt7ia5ntQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;668&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.2 带来的风险&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尝试找到大量 key 同时过期的时间，在某时刻进行大量攻击，数据库压力增大，最终导致系统崩溃。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.3 解决方案&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在原有的实效时间基础上增加一个碎挤汁，比如 1-5 分钟随机，降低缓存的过期时间的重复率，避免发生缓存集体实效。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3 缓存击穿&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3.1 缓存击穿的概念&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;某个 key 设置了过期时间，但在正好失效的时候，有大量请求进来了，导致请求都到数据库查询了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8819969742813918&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9OPU3Rz080AtJ9gIt4MicHmdC9G8yQ3LxqWn6lxWibKlE96qYMF4AuVaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;661&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3.2 解决方案&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大量并发时，只让一个请求可以获取到查询数据库的锁，其他请求需要等待，查到以后释放锁，其他请求获取到锁后，先查缓存，缓存中有数据，就不用查数据库。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、加锁解决缓存击穿&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么处理缓存穿透、雪崩、击穿的问题呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对空结果进行缓存，用来解决缓存穿透问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设置过期时间，且加上随机值进行过期偏移，用来解决缓存雪崩问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加锁，解决缓存击穿问题。另外需要注意，加锁对性能会带来影响。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们来看下用代码演示如何解决缓存击穿问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要用 synchronized 来进行加锁。当然这是本地锁的方式，分布式锁我们会在下篇讲到。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;TypeEntity&amp;gt; &lt;span&gt;getTypeEntityListByLock&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;// 1.从缓存中查询数据&lt;/span&gt;&lt;br/&gt;    String typeEntityListCache = stringRedisTemplate.opsForValue().get(&lt;span&gt;&quot;typeEntityList&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!StringUtils.isEmpty(typeEntityListCache)) {&lt;br/&gt;      &lt;span&gt;// 2.如果缓存中有数据，则从缓存中拿出来，并反序列化为实例对象，并返回结果&lt;/span&gt;&lt;br/&gt;      List&amp;lt;TypeEntity&amp;gt; typeEntityList = JSON.parseObject(typeEntityListCache, &lt;span&gt;new&lt;/span&gt; TypeReference&amp;lt;List&amp;lt;TypeEntity&amp;gt;&amp;gt;(){});&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; typeEntityList;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 3.如果缓存中没有数据，从数据库中查询数据&lt;/span&gt;&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;The cache is empty&quot;&lt;/span&gt;);&lt;br/&gt;    List&amp;lt;TypeEntity&amp;gt; typeEntityListFromDb = &lt;span&gt;this&lt;/span&gt;.list();&lt;br/&gt;    &lt;span&gt;// 4.将从数据库中查询出的数据序列化 JSON 字符串&lt;/span&gt;&lt;br/&gt;    typeEntityListCache = JSON.toJSONString(typeEntityListFromDb);&lt;br/&gt;    &lt;span&gt;// 5.将序列化后的数据存入缓存中，并返回数据库查询结果&lt;/span&gt;&lt;br/&gt;    stringRedisTemplate.opsForValue().set(&lt;span&gt;&quot;typeEntityList&quot;&lt;/span&gt;, typeEntityListCache, &lt;span&gt;1&lt;/span&gt;, TimeUnit.DAYS);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; typeEntityListFromDb;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;1.从缓存中查询数据。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;2.如果缓存中有数据，则从缓存中拿出来，并反序列化为实例对象，并返回结果。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;3.如果缓存中没有数据，从数据库中查询数据。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;4.将从数据库中查询出的数据序列化 JSON 字符串。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;5.将序列化后的数据存入缓存中，并返回数据库查询结果。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五、本地锁的问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本地锁只能锁定当前服务的线程，如下图所示，部署了多个题目微服务，每个微服务用本地锁进行加锁。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4048582995951417&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9OPowicfDr5sbQwA9WbRqD9vuClXPyGOgHRCHrmRoY2pJkhicJZibRibUXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;741&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本地锁在一般情况下没什么问题，但是在某些情况下就会出问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如在&lt;/span&gt;&lt;span&gt;高并发情况下&lt;/span&gt;用来锁&lt;span&gt;库存&lt;/span&gt;就有问题了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;1.比如当前总库存为 100，被缓存在 Redis 中。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;2.库存微服务 A 用本地锁扣减库存 1 之后，总库存为 99。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;3.库存微服务 B 用本地锁扣减库存 1 之后，总库存为 99。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;4.那库存扣减了 2 次后，还是 99，&lt;strong&gt;就超卖了 1 个&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如何解决本地加锁的问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存实战（中篇）：实战分布式锁。我们下篇见！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.352112676056338&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3fX1LcLILYlWibxyyicmlLk9telicoPHa1C71wrUX5joGW3BsfqHZZdrdd06YDYnLY4nxnXtlMk5GtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;142&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a8314071672531daeb9c7ab8e7b58e89</guid>
<title>读者推荐的 6 个 GitHub 项目！</title>
<link>https://toutiao.io/k/5zipv5q</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;本文盘点近一个月粉丝推荐的 6 个开源项目，如果你在逛 GitHub 的时候发现了宝藏开源项目。欢迎来公众号逛逛 GitHub 留言，你推荐的优质开源项目会放到优质开源项目专栏。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9653679653679653&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxXkAKXNUjmNWq8W4bUkia0deYjRTOTjvVaPzVwS24Gv6ibkWXVNZrY5wDRQmrkRpHZbVt7UrlrlzcQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;462&quot;/&gt;&lt;/p&gt;&lt;p&gt;当然，如果你是优秀的开发者，自己维护了一些开源项目，同样可以告诉来逛逛 GitHub 投稿，投稿方式扫上方二维码，或者你可以关注公众号逛逛 GitHub，关注后点击底部的菜单栏也有投稿入口。&lt;span/&gt;&lt;/p&gt;&lt;p&gt;本期推荐开源项目目录：&lt;/p&gt;&lt;p&gt;1. 低代码可视化平台&lt;/p&gt;&lt;p&gt;2. 云原生多云应用管理平台&lt;/p&gt;&lt;p&gt;3. 开源分布式存储系统&lt;/p&gt;&lt;p&gt;4. 一站式微服务解决方案&lt;/p&gt;&lt;p&gt;5. 简易版 ElasticSearch 客户端&lt;/p&gt;&lt;p&gt;6. 词库生成&lt;/p&gt;&lt;hr/&gt;&lt;h1&gt;01&lt;/h1&gt;&lt;p&gt;&lt;span&gt;低代码可视化平台&lt;/span&gt;&lt;/p&gt;&lt;p&gt;开源项目 openDataV 由开发者 @AnsGoo 开源，这是一个基于 Vue.js 的前端低代码平台，通过可视化拖拽生成大屏数据展示网站。逛逛GitHub 历史盘点过多个可视化平台，可以参考文章：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247513708&amp;amp;idx=1&amp;amp;sn=95afd6dac175f0874dadcaf3e23d4f46&amp;amp;chksm=f9a265a5ced5ecb326049427ec4dfea372d4cb30234c021c25a0f12cb0ffeaf427a8a9b197ee&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;可视化项目推荐一&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;可视化项目推荐一&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247501143&amp;amp;idx=1&amp;amp;sn=7899a9db2fad691a259cc7571cb390f1&amp;amp;chksm=f9a2169eced59f88850ff3b3e36279a245e7d6ff15eb170101231083f19d4eb78603de5cf9b9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;可视化项目推荐二&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;可视化项目推荐二&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498492&amp;amp;idx=2&amp;amp;sn=823ff5005f42a2ad94349301448d578c&amp;amp;chksm=f9a22935ced5a0235e47ea7eba9fa56d89ad5e4088453c46104e29ce84a5288fa1e3e40849f7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;可视化项目推荐三&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;可视化项目推荐三&lt;/a&gt;&lt;/p&gt;&lt;p&gt;和很多低代码平台一样，左中右分别对应组件、画布、属性。通过拖拉拽的交互，将组建拖动到画布区域，并且可以调节各种图表的属性，比如颜色、字体大小等等。&lt;/p&gt;&lt;p&gt;&lt;span&gt;编程语言：JavaScript、HTML、CSS&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5453703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0wMo9xCRERianyXwwAHMFZzxApFjr511moUqWKLdTeaYDj01icCEVb9b2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;据开发者描述，openDataV 项目的特殊功能和技术点如下。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5203703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0w5zYXDJDw5n37mnpS8Er2c8ZRaDLGSagNib4icptDr9biaFYeCSGm8UW6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/AnsGoo/openDataV&lt;/p&gt;&lt;h1&gt;02&lt;/h1&gt;&lt;p&gt;&lt;span&gt;云原生多云应用管理平台&lt;/span&gt;&lt;/p&gt;&lt;section&gt;开源项目由开发者 @rainbond 开源，编程语言 Golang，据开发者介绍：&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;164&quot; data-source-title=&quot;https://www.rainbond.com/docs/quick-start/quick-install&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;Rainbond 是一个云原生多云应用管理平台，使用简单，不需要懂容器、Kubernetes 和底层复杂技术，支持管理多个 Kubernetes 集群，和管理企业应用全生命周期。主要功能包括应用开发环境、应用市场、微服务架构、应用交付、应用运维、应用级多云管理等。使用简单应用一键交付云原生转型
Rainbond 的功能和架构。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A164%2C%22text%22%3A%22Rainbond%20%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BA%91%E5%8E%9F%E7%94%9F%E5%A4%9A%E4%BA%91%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E6%87%82%E5%AE%B9%E5%99%A8%E3%80%81Kubernetes%20%E5%92%8C%E5%BA%95%E5%B1%82%E5%A4%8D%E6%9D%82%E6%8A%80%E6%9C%AF%EF%BC%8C%E6%94%AF%E6%8C%81%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%20Kubernetes%20%E9%9B%86%E7%BE%A4%EF%BC%8C%E5%92%8C%E7%AE%A1%E7%90%86%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%85%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%82%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD%E5%8C%85%E6%8B%AC%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E3%80%81%E5%BA%94%E7%94%A8%E5%B8%82%E5%9C%BA%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81%E5%BA%94%E7%94%A8%E4%BA%A4%E4%BB%98%E3%80%81%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4%E3%80%81%E5%BA%94%E7%94%A8%E7%BA%A7%E5%A4%9A%E4%BA%91%E7%AE%A1%E7%90%86%E7%AD%89%E3%80%82%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%E4%B8%80%E9%94%AE%E4%BA%A4%E4%BB%98%E4%BA%91%E5%8E%9F%E7%94%9F%E8%BD%AC%E5%9E%8B%5CnRainbond%20%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E6%9E%B6%E6%9E%84%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22https%3A%2F%2Fwww.rainbond.com%2Fdocs%2Fquick-start%2Fquick-install%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;https://www.rainbond.com/docs/quick-start/quick-install&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;该开源项目提供了详细的文档和教程，感兴趣的可以访问如下链接查看。&lt;/p&gt;&lt;p&gt;入门教程：https://www.rainbond.com/docs/quick-start/quick-install&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0wLHDOdNicJKiafgCOyf8PUyNREA9qbpE2AwgsPlu1tLsYRWQ48PI06TBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4546296296296296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0w38J3ZkCfzAib8C4IpN9BWvxODZgIia9CpC20BsrTt2eeaNPZnwicOOJyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/goodrain/rainbond&lt;/p&gt;&lt;h1&gt;03&lt;/h1&gt;&lt;p&gt;&lt;span&gt;开源分布式存储系统&lt;/span&gt;&lt;/p&gt;&lt;section&gt;Curve 是网易官宣的第一个进入 CNCF Sandbox 的分布式存储项目。是一款对标国外开源存储 Ceph ，主打高性能、易运维、云原生的开源分布式存储系统，投稿读者介绍：&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;189&quot; data-source-title=&quot;https://github.com/opencurve/curve&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;可应用于主流的云原生基础设施平台：对接 OpenStack 平台为云主机提供高性能块存储服务；对接 Kubernetes 为其提供 RWO、RWX 等类型的持久化存储卷；对接 PolarFS 作为云原生数据库的高性能存储底座，完美支持云原生数据库的存算分离架构；Curve 也可作为云存储中间件使用 S3 兼容的对象存储作为数据存储引擎，为公有云用户提供高性价比的共享文件存储。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3E%E5%8F%AF%E5%BA%94%E7%94%A8%E4%BA%8E%E4%B8%BB%E6%B5%81%E7%9A%84%E4%BA%91%E5%8E%9F%E7%94%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%B9%B3%E5%8F%B0%EF%BC%9A%E5%AF%B9%E6%8E%A5%26nbsp%3BOpenStack%26nbsp%3B%E5%B9%B3%E5%8F%B0%E4%B8%BA%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%8F%90%E4%BE%9B%E9%AB%98%E6%80%A7%E8%83%BD%E5%9D%97%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%EF%BC%9B%E5%AF%B9%E6%8E%A5%26nbsp%3BKubernetes%26nbsp%3B%E4%B8%BA%E5%85%B6%E6%8F%90%E4%BE%9B%26nbsp%3BRWO%E3%80%81RWX%26nbsp%3B%E7%AD%89%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8D%B7%EF%BC%9B%E5%AF%B9%E6%8E%A5%26nbsp%3BPolarFS%26nbsp%3B%E4%BD%9C%E4%B8%BA%E4%BA%91%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%AD%98%E5%82%A8%E5%BA%95%E5%BA%A7%EF%BC%8C%E5%AE%8C%E7%BE%8E%E6%94%AF%E6%8C%81%E4%BA%91%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%98%E7%AE%97%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84%EF%BC%9BCurve%26nbsp%3B%E4%B9%9F%E5%8F%AF%E4%BD%9C%E4%B8%BA%E4%BA%91%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BD%BF%E7%94%A8%26nbsp%3BS3%26nbsp%3B%E5%85%BC%E5%AE%B9%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%EF%BC%8C%E4%B8%BA%E5%85%AC%E6%9C%89%E4%BA%91%E7%94%A8%E6%88%B7%E6%8F%90%E4%BE%9B%E9%AB%98%E6%80%A7%E4%BB%B7%E6%AF%94%E7%9A%84%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E3%80%82%3C%2Fp%3E%22%2C%22digestLen%22%3A189%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22https%3A%2F%2Fgithub.com%2Fopencurve%2Fcurve%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;https://github.com/opencurve/curve&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;编程语言：C++&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5944444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0wjB1ukd8t7maHC8oD8pVOB9N0UKOv9iawfo23HhkU6Bibz18XBxWfneLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/opencurve/curve&lt;/p&gt;&lt;h1&gt;04&lt;/h1&gt;&lt;p&gt;&lt;span&gt;一站式微服务解决方案&lt;/span&gt;&lt;/p&gt;&lt;section&gt;本开源项目由腾讯公司的工程师开源，至今已经 2.3k 的 Star。开发者介绍：&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;186&quot; data-source-title=&quot;Tencent 开发者&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;Spring Cloud Tencent 是腾讯开源的一站式微服务解决方案，它实现了Spring Cloud 标准微服务 SPI，开发者可以基于 Spring Cloud Tencent 快速开发 Spring Cloud 云原生分布式应用。Spring Cloud Tencent 的核心依托腾讯开源的一站式服务发现与治理平台 Polaris，实现各种分布式微服务场景。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3ESpring%26nbsp%3BCloud%26nbsp%3BTencent%26nbsp%3B%E6%98%AF%E8%85%BE%E8%AE%AF%E5%BC%80%E6%BA%90%E7%9A%84%E4%B8%80%E7%AB%99%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8C%E5%AE%83%E5%AE%9E%E7%8E%B0%E4%BA%86Spring%26nbsp%3BCloud%26nbsp%3B%E6%A0%87%E5%87%86%E5%BE%AE%E6%9C%8D%E5%8A%A1%26nbsp%3BSPI%EF%BC%8C%E5%BC%80%E5%8F%91%E8%80%85%E5%8F%AF%E4%BB%A5%E5%9F%BA%E4%BA%8E%26nbsp%3BSpring%26nbsp%3BCloud%26nbsp%3BTencent%26nbsp%3B%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%26nbsp%3BSpring%26nbsp%3BCloud%26nbsp%3B%E4%BA%91%E5%8E%9F%E7%94%9F%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E3%80%82Spring%26nbsp%3BCloud%26nbsp%3BTencent%26nbsp%3B%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BE%9D%E6%89%98%E8%85%BE%E8%AE%AF%E5%BC%80%E6%BA%90%E7%9A%84%E4%B8%80%E7%AB%99%E5%BC%8F%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E6%B2%BB%E7%90%86%E5%B9%B3%E5%8F%B0%26nbsp%3BPolaris%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%90%84%E7%A7%8D%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9C%BA%E6%99%AF%E3%80%82%3C%2Fp%3E%22%2C%22digestLen%22%3A186%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22Tencent%20%E5%BC%80%E5%8F%91%E8%80%85%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;Tencent 开发者&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49537037037037035&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0whCUrudkQIO2xfbTysr4siaiaceqnBl1WWyQO1ianxbeDREG6VgoWp4icmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/Tencent/spring-cloud-tencent&lt;/p&gt;&lt;h1&gt;05&lt;/h1&gt;&lt;p&gt;&lt;span&gt;简易版 ElasticSearch 客户端&lt;/span&gt;&lt;/p&gt;&lt;section&gt;本开源项目由 @2316367743 开发者开源，是一个简易版的 ElasticSearch 查询客户端，据开发者介绍：&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;195&quot; data-source-title=&quot;https://github.com/q2316367743/es-client&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;elasticsearch 的客户端比较出名的就是 elasticsearch head 和 Kibana，但是 elasticsearch head 已经停止更新，且样式老旧，功能不全；而 Kibana 虽功能全面，但是启动麻烦，大部分功能用不上，很不灵活，所以采用 vite2 + vue3 + ts + element-plus 进行开发了一个 elasticsearch 的客户端&lt;/span&gt;。&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3Eelasticsearch%26nbsp%3B%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%AF%94%E8%BE%83%E5%87%BA%E5%90%8D%E7%9A%84%E5%B0%B1%E6%98%AF%26nbsp%3Belasticsearch%26nbsp%3Bhead%26nbsp%3B%E5%92%8C%26nbsp%3BKibana%EF%BC%8C%E4%BD%86%E6%98%AF%26nbsp%3Belasticsearch%26nbsp%3Bhead%26nbsp%3B%E5%B7%B2%E7%BB%8F%E5%81%9C%E6%AD%A2%E6%9B%B4%E6%96%B0%EF%BC%8C%E4%B8%94%E6%A0%B7%E5%BC%8F%E8%80%81%E6%97%A7%EF%BC%8C%E5%8A%9F%E8%83%BD%E4%B8%8D%E5%85%A8%EF%BC%9B%E8%80%8C%26nbsp%3BKibana%26nbsp%3B%E8%99%BD%E5%8A%9F%E8%83%BD%E5%85%A8%E9%9D%A2%EF%BC%8C%E4%BD%86%E6%98%AF%E5%90%AF%E5%8A%A8%E9%BA%BB%E7%83%A6%EF%BC%8C%E5%A4%A7%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E7%94%A8%E4%B8%8D%E4%B8%8A%EF%BC%8C%E5%BE%88%E4%B8%8D%E7%81%B5%E6%B4%BB%EF%BC%8C%E6%89%80%E4%BB%A5%E9%87%87%E7%94%A8%26nbsp%3Bvite2%26nbsp%3B%2B%26nbsp%3Bvue3%26nbsp%3B%2B%26nbsp%3Bts%26nbsp%3B%2B%26nbsp%3Belement-plus%26nbsp%3B%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E4%B8%AA%26nbsp%3Belasticsearch%26nbsp%3B%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%82%3C%2Fp%3E%22%2C%22digestLen%22%3A195%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22https%3A%2F%2Fgithub.com%2Fq2316367743%2Fes-client%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;https://github.com/q2316367743/es-client&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0wa2wQkVHRoOK8ThefQJTGtkxeenjM7MTm1psI82TfFcTORcDNYpibxMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0wZ1ticXibWFImPqUMeeALqHAicZnCAiaic7Y9AIA7K6ia3PdRTyeDOawJ843g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/q2316367743/es-client&lt;/p&gt;&lt;h1&gt;06&lt;/h1&gt;&lt;p&gt;&lt;span&gt;词库生成&lt;/span&gt;&lt;/p&gt;&lt;p&gt;该开源项目由开发者 @tangshimin 开源，使用编程语言 Kotlin 开发，具开发者介绍：&lt;/p&gt;&lt;p&gt;这个开源项目可以用 MKV 视频或字幕生成词库（单词本），让每个单词都有具体的语境，然后通过语境记忆单词，句子，字幕。&lt;/p&gt;&lt;p&gt;如下图所示，你选择一个 MKV 文件后，就能将该视频的中的字幕生成一个词库，还能够标注出这些词汇属于六级还是牛津等等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6805555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxLvm4pcNz6JPHCX2TkZc0wf5VJiakictkTLQlCxLOJaWZMH9ej30U00jyG84Cm56hKHwqVHTd9Y4icg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;开源地址：https://github.com/tangshimin/typing-learner&lt;/p&gt;&lt;section&gt;&lt;span&gt;历史盘点&lt;/span&gt;&lt;/section&gt;&lt;section&gt;逛逛 GitHub 每天推荐一个好玩有趣的开源项目。历史推荐的开源项目已经收录到 GitHub 项目，欢迎 Star：&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;/github.com/&lt;/span&gt;Wechat-ggGitHub/Awesome-GitHub-Repo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8091503267973856&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruzicgHPfCeAsrkT2JZwiaOF05zRiaXr2dUukXKGk8CJwfrXALKJ5l0fLpV2abibCYKb7d8B7vNp2u3iccg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1530&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;hr/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;1. &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498662&amp;amp;idx=1&amp;amp;sn=0087c4f3b79ba3420e917e9b42d45eda&amp;amp;chksm=f9a2286fced5a1794eb9a73d0be7c2e16eaceabf3a0420647c40cb4202bd116d9a15dd57c008&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;GitHub 上有什么好玩的项目？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;em&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/em&gt;&lt;span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247507541&amp;amp;idx=1&amp;amp;sn=79edebda20ac94221aa641090fc9878e&amp;amp;chksm=f9a20d9cced5848a5ba699a819f52907f537e557c10c7bb24bf87b2e0212feecfb06419b2feb&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;推荐一款高颜值网易云播放器&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;推荐一款高颜值网易云播放器&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;3. &lt;/span&gt;&lt;/em&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247500031&amp;amp;idx=1&amp;amp;sn=b4349fc85264c255bf9a22e1f25b035a&amp;amp;chksm=f9a21336ced59a20518444a3e2bddb584f6d02266e831546ee5c00935d01d5bd61ed86ab606f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;基于 Spring Boot 的百度云高仿项目&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;4. &lt;/span&gt;&lt;/em&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&amp;amp;mid=2247498464&amp;amp;idx=1&amp;amp;sn=4f85123d6ca67578ca7bad8f7dc71453&amp;amp;chksm=f9a22929ced5a03ffded2c41fd257d3eb96be02195de3ca66a083177bf5f73e2f418728f7f06&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;盘点百度 4 个牛逼哄哄的开源项目&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;172&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;172&quot; data-ratio=&quot;1.005449591280654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruxW7LMX2Iz5DfjRIbFTS7UROhxibBmicicT0HpjIh1yniaJJibSnLFuicMHRx5NEdiaOh2OOACfr6MvR38ibQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;734&quot;/&gt;&lt;/section&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aba291401f6775f0f07eaeb452dc561f</guid>
<title>面试官：单核 CPU 支持 Java 多线程吗 ？我又懵逼了 ！！！</title>
<link>https://toutiao.io/k/9lqqf2o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点击&lt;strong&gt;&lt;span&gt;关注&lt;/span&gt;&lt;/strong&gt;公众号：&lt;/span&gt;&lt;/strong&gt;互联网架构师，后台回复&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot; 2T&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;2T&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;获取&lt;/span&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2TB&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2TB&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;学习资源！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上一篇：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247523205&amp;amp;idx=1&amp;amp;sn=89b261f829ce6c3487ce8b2ccf3ed06b&amp;amp;chksm=ea5f56e3dd28dff5238989d3e07d775d34c04a4e80a166059e92e84379274819203d72d1dc1d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Alibaba开源内网高并发编程手册.pdf&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;Alibaba开源内网高并发编程手册.pdf&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于现在大多计算机都是多核CPU，多线程往往会比单线程更快，更能够提高并发，但提高并发并不意味着启动更多的线程来执行。更多的线程意味着线程创建销毁开销加大、上下文非常频繁，你的程序反而不能支持更高的TPS。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;时间片&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多任务系统往往需要同时执行多道作业。作业数往往大于机器的CPU数，然而一颗CPU同时只能执行一项任务，如何让用户感觉这些任务正在同时进行呢? 操作系统的设计者 巧妙地利用了时间片轮转的方式&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间片是CPU分配给各个任务（线程）的时间！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;“&lt;span&gt;思考：单核CPU为何&lt;/span&gt;&lt;span&gt;也支持多线程呢？&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线程上下文是指某一时间点 CPU 寄存器和程序计数器的内容，CPU通过时间片分配算法来循环执行任务（线程），因为时间片非常短，所以CPU通过不停地切换线程执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换言之，单CPU这么频繁，多核CPU一定程度上可以减少上下文切换。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;超线程&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现代CPU除了处理器核心之外还包括寄存器、L1L2缓存这些存储设备、浮点运算单元、整数运算单元等一些辅助运算设备以及内部总线等。一个多核的CPU也就是一个CPU上有多个处理器核心，就意味着程序的不同线程需要经常在CPU之间的外部总线上通信，同时还要处理不同CPU之间不同缓存导致数据不一致的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;超线程这个概念是Intel提出的，简单来说是在一个CPU上真正的并发两个线程，由于CPU都是分时的（如果两个线程A和B，A正在使用处理器核心，B正在使用缓存或者其他设备，那AB两个线程就可以并发执行，但是如果AB都在访问同一个设备，那就只能等前一个线程执行完后一个线程才能执行）。实现这种并发的原理是 在CPU里加了一个协调辅助核心，根据Intel提供的数据，这样一个设备会使得设备面积增大5%，但是性能提高15%~30%。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上下文切换&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;线程切换，同一进程中的两个线程之间的切换&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进程切换，两个进程之间的切换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模式切换，在给定线程中，用户模式和内核模式的切换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;地址空间切换，将虚拟内存切换到物理内存&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CPU切换前把当前任务的状态保存下来，以便下次切换回这个任务时可以再次加载这个任务的状态，然后加载下一任务的状态并执行。任务的状态保存及再加载, 这段过程就叫做上下文切换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个线程都有一个程序计数器（记录要执行的下一条指令），一组寄存器（保存当前线程的工作变量），堆栈（记录执行历史，其中每一帧保存了一个已经调用但未返回的过程）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;寄存器 是 CPU 内部的数量较少但是速度很快的内存（与之对应的是 CPU 外部相对较慢的 RAM 主内存）。寄存器通过对常用值（通常是运算的中间值）的快速访问来提高计算机程序运行的速度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序计数器是一个专用的寄存器，用于表明指令序列中 CPU 正在执行的位置，存的值为正在执行的指令的位置或者下一个将要被执行的指令的位置。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;挂起当前任务（线程/进程），将这个任务在 CPU 中的状态（上下文）存储于内存中的某处&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;恢复一个任务（线程/进程），在内存中检索下一个任务的上下文并将其在 CPU 的寄存器中恢复&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;跳转到程序计数器所指向的位置（即跳转到任务被中断时的代码行），以恢复该进程在程序中]&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2397094430992736&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3kMZppQa5zDnKWJBboXZHyA1lYU1OACZQRF3ibzAPmWicp67ictywmPPTVpTjEaj1FqhKTgGSKKkPsKxtXg4ia3NKg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;826&quot;/&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;线程上下文切换会有什么问题呢？&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上下文切换会导致额外的开销，常常表现为高并发执行时速度会慢串行，因此减少上下文切换次数便可以提高多线程程序的运行效率。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;直接消耗：指的是CPU寄存器需要保存和加载, 系统调度器的代码需要执行, TLB实例需要重新加载, CPU 的pipeline需要刷掉&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;间接消耗：指的是多核的cache之间得共享数据, 间接消耗对于程序的影响要看线程工作区操作数据的大小&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;切换查看&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux系统下可以使用vmstat命令来查看上下文切换的次数， 其中cs列就是指上下文切换的数目（一般情况下, 空闲系统的上下文切换每秒大概在1500以下）&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1972049689440994&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3kMZppQa5zDnKWJBboXZHyA1lYU1OACZ4icMLHYBuWD1yqXpXBWRC5rIoaKE6McgweVATeibibwToalIPWCSibG08w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;线程调度&lt;/span&gt;&lt;/h2&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;抢占式调度&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指的是每条线程执行的时间、线程的切换都由系统控制，系统控制指的是在系统某种运行机制下，可能每条线程都分同样的执行时间片，也可能是某些线程执行的时间片较长，甚至某些线程得不到执行的时间片。在这种机制下，一个线程的堵塞不会导致整个进程堵塞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;java使用的线程调使用抢占式调度，Java中线程会按优先级分配CPU时间片运行，且优先级越高越优先执行，但优先级高并不代表能独自占用执行时间片，可能是优先级高得到越多的执行时间片，反之，优先级低的分到的执行时间少但不会分配不到执行时间。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4982935153583619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3kMZppQa5zDnKWJBboXZHyA1lYU1OACZft2my3YGKHuJoa3qNZhibOOKNXnWDNA3GklB6NbIQ0Kz8LP27g19eKg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;293&quot;/&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;协同式调度&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指某一线程执行完后主动通知系统切换到另一线程上执行，这种模式就像接力赛一样，一个人跑完自己的路程就把接力棒交接给下一个人，下个人继续往下跑。线程的执行时间由线程本身控制，线程切换可以预知，不存在多线程同步问题，但它有一个致命弱点：如果一个线程编写有问题，运行到一半就一直堵塞，那么可能导致整个系统崩溃。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.6488549618320612&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3kMZppQa5zDnKWJBboXZHyA1lYU1OACZQSx1nY7lmuWYy6p4leOIP6BMM8Kj8rqkWtYNGfngTyxrYpWSiaFzKJQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;262&quot;/&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;线程让出cpu的情况&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当前运行线程主动放弃CPU，JVM暂时放弃CPU操作（基于时间片轮转调度的JVM操作系统不会让线程永久放弃CPU，或者说放弃本次时间片的执行权），例如调用&lt;code&gt;yield()&lt;/code&gt;方法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当前运行线程因为某些原因进入阻塞状态，例如阻塞在I/O上&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当前运行线程结束，即运行完&lt;code&gt;run()&lt;/code&gt;方法里面的任务&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;引起线程上下文切换的因素&lt;/span&gt;&lt;/h2&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;因此优化手段有：&lt;/h5&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;无锁并发编程，多线程处理数据时，可以用一些办法来避免使用锁，如将数据的ID按照Hash取模分段，不同的线程处理不同段的数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CAS算法，Java的Atomic包使用CAS算法来更新数据，而不需要加锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用最少线程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;协程，单线程里实现多任务的调度，并在单线程里维持多个任务间的切换&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;合理设置线程数目既可以最大化利用CPU，又可以减少线程切换的开销。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;高并发，低耗时的情况，建议少线程。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;低并发，高耗时的情况：建议多线程。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高并发高耗时，要分析任务类型、增加排队、加大线程数&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;p&gt;&lt;span&gt;来源：blog.csdn.net/alex_xfboy/&lt;/span&gt;&lt;span&gt;article/details/90722654&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;-End-&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template-id=&quot;527&quot; data-mpa-category=&quot;image&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template-id=&quot;1357582&quot; data-mpa-category=&quot;image&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;最后，关注公众号互联网架构师，在后台回复：2T，可以获取我整理的 Java 系列面试题和答案，非常齐全&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1423611111111112&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRI2cbvKcYHPMKYlo4ibO3ZXG4kRnuC195QBJzMR0VLd7p08kYInDEEiasufnLsY7LhFwPIml2fPergw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;288&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;正文结束&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;推荐阅读 ↓↓↓&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;1.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247529588&amp;amp;idx=1&amp;amp;sn=9adea3eb1f5116dddf21513bfa0bedec&amp;amp;chksm=ea5fb912dd28300494cd8252da922f1fc6cf5a884436fd0534e25db5e910cd46567477a6fc05&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;求求你别在用SpringMVC了，太Low了！Spring又官宣了一个更牛逼的替代框架！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;求求你别在用SpringMVC了，太Low了！Spring又官宣了一个更牛逼的替代框架！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488035&amp;amp;idx=1&amp;amp;sn=5300893903094128bdc20ce2a5717a50&amp;amp;chksm=ea5cdf45dd2b56531ac0c3a8fb8b56b06bc546785f8772a4d02e2ca87c4e30f25b24bf21f784&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;从零开始搭建创业公司后台技术栈&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;3&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488928&amp;amp;idx=1&amp;amp;sn=4c56dd675e1b32a73b698df3d5e8609f&amp;amp;chksm=ea5cd8c6dd2b51d05e6d6d715418241f471ccb3002719263b2d0e092763f68f3691249970a08&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;程序员一般可以从什么平台接私活？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;4&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247530269&amp;amp;idx=1&amp;amp;sn=9f4f45fe6e961b139fb0f4448b339ca4&amp;amp;chksm=ea5fba7bdd28336d2a1a4b0234c6a1a4375668213c49b3579352a0bff57af09661cd66d4d094&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Spring Boot+Redis+拦截器+自定义Annotation实现接口自动幂等&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Spring Boot+Redis+拦截器+自定义Annotation实现接口自动幂等&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;5.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247513283&amp;amp;idx=1&amp;amp;sn=3b3d8e893a1241cf5af2150370ae9d71&amp;amp;chksm=ea5f79a5dd28f0b3a7603b1fbdb306f77ac64223bd05c4b7f0dc0469f77a68359810c5de2a01&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;为什么国内 996 干不过国外的 955呢？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;为什么国内 996 干不过国外的 955呢？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;6&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247528236&amp;amp;idx=1&amp;amp;sn=c675d5d3aede21b4b7ebbba21eadf96c&amp;amp;chksm=ea5fa24add282b5cfb13757cd534ec600fb910f9dcb7f3ee3dea5e7929e0fbbd22381625ff20&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;中国的铁路订票系统在世界上属于什么水平？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;中国的铁路订票系统在世界上属于什么水平？&lt;/a&gt;                        &lt;/span&gt;&lt;/p&gt;&lt;p&gt;7&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488564&amp;amp;idx=1&amp;amp;sn=256862239b12a1313919ee3ea6ff0d1c&amp;amp;chksm=ea5cd952dd2b50443feec88eb893233d2f6cf33f89e2ce72192c98035fd26cb0eb797a86f8f0&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;15张图看懂瞎忙和高效的区别！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100030073&quot; data-ratio=&quot;0.1328125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/3GQek52mKtWDXtSkfViaQ2FZ2ZfSyjBcSkArjQVCMH4a7uxg6Vkibiaiciaiae2uxvzia7yib04tleLiaqcFVGUf2vcMf4A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0701138292d6df44b011e6cd5ab82c57</guid>
<title>语雀桌面端技术架构实践</title>
<link>https://toutiao.io/k/481hlbi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;🙋🏻‍♀️ 编者按：本文作者是蚂蚁集团前端工程师维骏，介绍了语雀在做桌面端时的一些技术架构思考和实践，同时分享沉淀的一些通用桌面应用解决方案和经验，欢迎一起交流～&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;313&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.5616045845272206&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOKfL5r51XChkmiaHSaWM8iacuwfggURMSqfg5CbyhLn4UiaOW7ibrpibWVoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2094&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;语雀桌面端作为语雀为用户提供的生产力工具，上线两年多来一直保持高频的迭代和健康的业务增长。&lt;strong&gt;本次主要介绍我们在做桌面端时的一些技术架构思考和实践，同时也将分享我们沉淀的一些通用桌面应用解决方案和经验。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;304&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.5616698292220114&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOlicaBvvVD32mCcg0gs2bULTgLr6PPibnUSKYc8OFFic1ue5iczEDf8p6Zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2108&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文章会分为四部分，首先会简单介绍语雀桌面端，然后介绍当前语雀桌面端的应用架构以及关键点，之后介绍架构中的几个架构重点项，最后再进行总结。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;语&lt;span&gt;雀桌面端介绍&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;语雀是孵化自蚂蚁体验技术部的一款笔记与文档知识库工具。我们在两年前，针对语雀用户特点，以及后续发展策略，旨在为创作者提供更好的创作体验，推出语雀桌面客户端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5628140703517588&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOPI7EMvXgDohBXTwX59K2N4WDEDzicJl6xPVkibbflBz5v7hLdTb9pbyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1990&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相较于现有浏览器提供的产品服务而言，我们提供的桌面端产品主要考虑以下几点：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.560418648905804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOTqrVVopttjAeXAGeRMdOiaSkrV6msquwVnmiblbTME3fibze4uoOvHf9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2102&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;无干扰&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给用户一个沉浸式的创作体验，而不像浏览器有其他窗口、tab 进行干扰，以及用完即走的用户心智。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系统级常驻&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开速度更快，可以一键启动或者利用各类快捷工具唤起。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;集成更多操作系统能力&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提升创作效率的多窗口、系统菜单和快捷键、对文件读写、与系统软件集成等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;离线&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;期望能在离线或弱网的情况下，无障碍地进行创作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.561787072243346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmORHZj3JlKGOW089Y38J72qTpMAb2C7bOpiaBSnxlTwHSxNOeh5Uu2q0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;桌面端架构概览&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;313&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.5616698292220114&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOfowEwVVUYePOHxXdFtxr3SudFeyes8Ij09ibmjfQu0uW9nB69rpBUkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2108&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;研发侧主要分为左边三层，最底层是语雀的基础设施，依赖了语雀后台提供或封装的大量云服务，以及底层依赖的安全能力和存储模块。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中间一层是比较偏应用架构的一些能力封装，上面是代码层面用的的辅助能力，还有主进程的模块，然后有给应用提供的一些管理能力和一些跟 UI 相关的功能模块，最上层就是基于底层架构搭建的业务应用。包括桌面端应用比较核心的几个模块，以及一些由子应用方式承接的业务模块（后面也会详细介绍子应用这个概念） &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时最右侧也有很多辅助研发的依赖能力，来完成语雀桌面端的发布、质量和稳定性管理。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构概览 - 关键点&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比较普通 web 应用来说，我们觉得桌面端有以下几个能力比较重要：包括安全、软件升级、以及桌面端通用的的基础能力：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;305&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.5627376425855514&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOMicqBYUr4UTF8nrJkUnZhDZLrc1WRwlbTBvS9cAI2GwbxXAcTQ1kFbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构概览 - 安全&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安全是一个生产力工具软件的生命线，特别是语雀作为一款知识管理工具，对于安全是非常看重。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;314&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.5626794258373206&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmO8a1ucw9FaVaPF8zNQotGloXErOKzBRk7mc8YHXVzXIfz8ZsAHkv16g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2090&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;基础安全&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;下载安装包时，需要有安全管理机制，避免下载过程中被恶意替换；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;升级到最新的 Electron 版本（语雀目前紧跟官方大版本，同时也会参考微软的头部应用 (vscode)，避免有没考虑到的场景；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同时用户离线下载到本地的文件，包括图片，附件等，也需要经过加密。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;启动安全&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;杀毒软件：&lt;/strong&gt;启动安全主要是在启动软件时的一些安全问题，例如二进制模块是否有加签名，避免被杀毒软件查杀导致无法启动，也可以联系安全厂商加白名单，同时还能提升启动速度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;禁止调试：&lt;/strong&gt;因为软件代码都会下载到客户端，可以禁止软件在客户端浏览器进行调试。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据库密钥管理：&lt;/strong&gt;本地数据库文件需要保证即使被恶意拿到，也要保证无法查看到里面的内容。我们通过生成内存安全级别的方案，确保其他非当前电脑的语雀软件即使拿到数据库文件后也无法打开。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;应用安全&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;渲染容器设置白名单来控制不被引入恶意页面；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;渲染进程关闭 Node 功能以及开启隔离模式，避免渲染进程权限过高；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Electron 本身是 web 开发模式，所以 web 中遇到的安全问题，在 Electron 同样会遇到，可以统一处理；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构概览 - 软件升级&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端软件相比较于 web 来说，还有一个非常大的区别就是有功能更新时，有一个升级过程，不像 web 直接刷新页面即可。语雀桌面端作为迭代迅速的产品，对于升级这块也是踩了不少坑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;305&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.561787072243346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOKbnU8fkSmt6TLiaBvPPq7kojem6qUkvtwh5ryy1l1icw6w6Aic4ZRCfyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;语雀桌面端由两大部分组成：&lt;/span&gt;&lt;span&gt;包括 Electron 和 Node.js 等基础模块的软件包 + 以及自己的业务代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Mac OS：&lt;/strong&gt;Mac 下的升级流程比较简单，软件下载完成后，利用 &lt;code&gt;hdiutil&lt;/code&gt;来模拟用户手动安装流程，用户重启即可完成安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Windows：&lt;/strong&gt;Windows 下因为环境特殊性，需要下载安装包后，通过主进程自动打开安装界面，引导用户进行手动一步一步安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这种方案很好地满足了我们早期的功能迭代，但是随着用户量上涨，也遇到了很多问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;314&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.5620853080568721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOyqmsvpjEAvtq1xv5haxorm2FpeicPIn00LMdl77y8sVsQVr0U9IvNrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2110&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;每次升级带宽消耗巨大：&lt;/strong&gt;对于每次安装每个 UV 都有近 100M 的下载，每次推送版本时，都会遇到 OSS 流量告警，这背后都对应着成本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;安装体验差：&lt;/strong&gt;Windows 下因为每次升级几乎都是一次新的安装流程，所以体验也是比较差的，经常收到用户吐槽。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们就调研了一种增量更新的方案，一个 Electron 程序包括 Electron 核心包以及业务代码，其实每次变更的仅仅是业务代码，所以理论上每次更新只需要增量更新业务代码即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;305&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.5627376425855514&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOa3VicicwYABmibpRwG2SyBskeeTczbeltmLzpWC7mHR7G0vRAMmHCeFMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Mac 下增量直接下载到增量代码后，替换掉即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Windows 下比较复杂，我们主要遇到两个问题：、&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;文件占用问题：&lt;/strong&gt;由于 Windows 系统特性，如果某个文件在使用，会无法删除。所以说如果要替换，肯定关闭程序，然后进行删除操作后再启动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们写了一个  .exe 可执行文件来做关闭程序、更新文件、启动语雀。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;UAB 权限控制：&lt;/strong&gt;文件写入另一个问题是 C 盘文件一般是需要授权才可以操作的。我们软件启动没办法拿到这么高权限。不过还在 Windows 7 及以后新增了一个 PowerShell 功能，通过这个功能执行，能引导用户授权，拿到更高级的权限。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然过程中还碰到不少细节问题，比如替换过程中路径中英文问题、用户自定义过环境变量位置问题等等&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构概览 - 基础能力沉淀&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外我们在做软件的过程中，也沉淀了一些与业务无耦合的组件：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;304&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.5601895734597157&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOf5dVa1oqsxVjKD0wFWYFPZsqJIG1sokgHxEF97ONCiczlAO9WFZMEKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2110&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;多窗口管理：&lt;/strong&gt;当给用户提供提供更方便的多窗口编辑能力时，如何去管理这些窗口打开，关闭，性能监控等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Webview：&lt;/strong&gt;不同编辑器以及子应用都是通过 Webview 来承载的，需要有一个通用的模块来维护系统中用到的各个 webview 的生命周期等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;离线在线：&lt;/strong&gt;电脑离线和在线状态获取，虽然浏览器有提供这个状态的获取和事件监听，但是 Windows 下不太准确。我们封装了一个比较通用的模块。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;桌面端架构重点&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从架构上来说，相较于用了多酷炫的技术，更重要的是研发交付效率高不高，性能怎么样，稳定性高不高。我们认为以下三点是架构好坏评判的重要标准。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;303&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.5592417061611374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOuFToicgzyI7wTBgwSZEBJmuJ8w3xuGQsj2jCoCRNKVpOPg4f6UFuYZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2110&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构重点 - 交付效率&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从桌面端功能上来说，包括编辑器在内，有超过 60% 的功能模块都是与 web 一致的，所以开始是用到了同构的方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;305&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOiay4PQJXoWElGEEdcv9z4kmyURl8bLsvnYMdDoqtCuicnCL5ygcnwqibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2100&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同构过程中的一些经验：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;通用代码移动到 Common 目录：&lt;/strong&gt;语雀代码仓库是 &lt;code&gt;monorepo&lt;/code&gt;模式，如果没有很清晰的目录划分，很容易造成跨端兼容问题。有了这个约定以后，业务研发同学就会注意到这个会用在移动端或者桌面端&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;通过 webpack alias 适配多端：&lt;/strong&gt;这个方式比较常见，比如各端有不同的网络请求库，在组件层面使用 adapter/request。webpack 在构建时，adapter 映射到不同的端实现。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;定义多端代码研发规范：&lt;/strong&gt;梳理出不同端的一些差异点，在研发时避免采坑。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构重点 - 交付效率（同构问题）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;305&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.5622032288698955&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOT64eHgFmEflH0AUbk7zMhdY3iccp6Vkk8RD7YPrXxHzbo5lW2JGMKwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2106&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然同构模式可以解决我们当时遇到的一些问题，但是随着业务规模和功能增加，陆续有些问题暴露出来：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;迁移到 Common 目录，各种依赖问题：&lt;/strong&gt;很多功能在桌面端之前已经上线，有些复杂组件迁移到 Common 下本身也需要耗费不少时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺少动态化能力，迭代滞后（web 与桌面端功能不一致）：&lt;/strong&gt;组件在 web 发布上线后，桌面端需要发布才支持，所以经常会碰到 web 和桌面端不一致的吐槽。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;容易出现多端兼容问题（环境依赖等）：&lt;/strong&gt;虽然我们定义了一些规范，但很难彻底避免出现环境依赖问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺少独立沙箱，容易影响主应用(内存泄漏、样式)：&lt;/strong&gt;web 可能用完即走，可以刷新等，不太容易遇到问题，但是桌面端因为是常驻的，如果有些内存泄漏或者样式污染问题，就直接影响到整体可用性。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构重点 - 交付效率（子应用）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑到上述原因，我们将代码复用架构升级成子应用模式，利用桌面端容器，嵌套一个 html 在线或者离线页面。简单来说，子应用模式可以理解为支付宝九宫格进去的各个小程序模块。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;314&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.561787072243346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOicxSibb3gWiaucqxDicmia4n4jiaxEOBpdpQYibrjcJXqOkdr96Infs4yZvZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;快速迭代：&lt;/strong&gt;提供独立的发布迭代能力，所以无需跟随桌面端整体发布。而且直接由业务同学跟进整个交付流程，无需桌面端同学参与，提升交付效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;具备端相关能力：&lt;/strong&gt;每个子应用默认就能使用桌面端提供的 JSBridge 能力，天然能做到跟桌面端模块一样的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;独立沙箱：&lt;/strong&gt;独立于桌面端主窗口，利用桌面端的容器来完成渲染，所以能完全做到进程级别隔离，相互之间的内存开销一目了然，更好得做到管控，保证整体应用稳定性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;加载初始化：&lt;/strong&gt;除了上述的一些优势，也会到来一些问题，比如加载速度慢等，我们通过 webview 预热、缓存等方式，一定程度上解决了这个问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构重点 - 性能&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;性能是一个桌面端软件必须要面对的问题，是需要持续在不同角度进行优化的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;313&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.560303893637227&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOX3miba1SythG1bCtNeRBHpO16XGnOt9mh75RLHibolJRhcjR6bibWsyXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2106&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主要包括这几个方面：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;启动速度优化：&lt;/strong&gt;&lt;span&gt;启动速度是用户第一映像，我们主要是将主进程代码进行缓存，尽早展示 loading 避免白屏，主窗口和渲染进程的部分任务同时执行，达到并发效果。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;主进程优化：&lt;/strong&gt;&lt;span&gt;主进程和渲染进程执行是同步的，如果主进程做了太多任务，会导致用户使用起来卡顿，甚至闪退。&lt;/span&gt;&lt;span&gt;所以尽量减少主进程所做的事情。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;Web 优化：&lt;/strong&gt;&lt;span&gt;同时，之前很多在 web 上做的优化，一样可以拿过来使用。&lt;/span&gt;&lt;span&gt;例如懒加载，合并模块等（组合多个模块本身也有开销）&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Webview 优化：&lt;/strong&gt;&lt;span&gt;例如预热 webview、并进行一些性能管控措施，避免失控。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构重点 - 性能（持续性任务）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;性能优化其实不是说做完哪些事情就可以彻底解决，而是一个长期过程。可能我们后续新增功能时，代码里有某一个内存泄漏问题，就很容易导致性能拉胯下来。所以我们也建立了一些持续性的机制：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;305&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.5631528964862298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOR2y4Ttfohg4m3mxo9y1erPYGCt4MC2yelUNJMlzsGd9LXu8nIXx8Qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2106&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要包括：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;日常观测：&lt;/strong&gt;在开发模式下，建立观测性能指标能力，做到心中有数；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;自动化任务：&lt;/strong&gt;日常也会有自动化任务，模拟真实用户长时间使用，及时发现内存泄漏等问题；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;性能大盘：&lt;/strong&gt;对于线上性能水位，能有一个全盘的感知能力，灰度发布过程中可重点关注。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;架构重点 - 稳定性&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比较于 web 而言，桌面端的稳定性也是要求更高的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;314&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.562618595825427&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOoFFsv15aicibgDe439nuZibhUQNk3O37nHNxRgfictoygRV8QL2EhCYCMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2108&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从研发流程上看，我们主要有两块事情：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;单测、集成测试：&lt;/strong&gt;利用代码测试来辅助整体稳定性&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;UIA：&lt;/strong&gt;通过模拟用户行为的 UIA 自动化测试回归来提升稳定性，及时发现异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;339&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.6262626262626263&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOWwZk1J1fGhg6khkWNpKdJppZQs1JtlV7xUTp6mGRRQqjLZ9PTz5KCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3762&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;392&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.724112426035503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOjhkibicrq9LWU0aGrwklG5bHv39ykQSpwrjAHtZvs9ORiaUByoBGDBaqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2704&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注：UIA 是语雀工程师自研的自动化方案，详见 ：Macaca MacOS（https://github.com/macacajs/macaca-macos）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;305&quot; data-backw=&quot;542&quot; data-ratio=&quot;0.561787072243346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOibia3MnDiaOXaDaV42ox36jYSzq7Zvzz2eqOHJzibFEXF9v7DhknzPwhpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外建立了稳定性大盘和实时告警，来感知到线上性能情况。为了保证每次发布的稳定性，减少回归成本，我们利用每周一次预览版发布的敏捷研发模式，来分解大版本发布带来的集成风险。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;总结&lt;/h1&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;314&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.5616698292220114&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKHXdeaIvEMKHlCySvKXVRmOmO0svtCicE3yXhwPKR8OwkiaJqMLmbr7Km53z1xoiav08knibrw6pZwHnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2108&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;针对当前的业务体量和团队经验，选择合适的技术架构；&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;现在肯定有比 Electron 更新的桌面端架构，比如 flutter、tauri 等，要综合看比如团队积累以及稳定性，是否有成熟的商业化产品等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;性能和稳定性优化是持续性的过程，先建立度量和感知；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;交付效率和交付质量最容易被忽视，但却是架构方案的重要考量；&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;架构好坏的评判标准一定是由业务效果决定的，交付效率和交付质量是衡量业务效果的手段之一。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2OTYyODU0NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/M7OtEw9eDKG4jX2R3CQUS31Q65Rc9LVibaxJrgqkMmBSU7jUmYjNT4q0Q3gUVqpQf8Zepp6Ilo6X6qrffiawJoeQ/0?wx_fmt=png&quot; data-nickname=&quot;支付宝体验科技&quot; data-alias=&quot;antf2e&quot; data-signature=&quot;探索极致用户体验和最佳工程实践。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有点意思，那就点个关注呗 💁🏼‍♀️&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;👇🏾&lt;/span&gt;&lt;span&gt;点击「阅读原文」，在评论区与我们互动噢&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>56f25b5ff92d77d613ffb2993869f8cf</guid>
<title>提速还能不掉点！深度解析 MegEngine 4 bits 量化开源实现</title>
<link>https://toutiao.io/k/rp8a45f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-yvdm7v&quot; options=&quot;[object Object]&quot;&gt;&lt;blockquote data-first-child=&quot;&quot; data-pid=&quot;O5laUy03&quot;&gt; 作者：周瑞亮 | 旷视 MegEngine 架构师&lt;/blockquote&gt;&lt;p data-pid=&quot;ELgD8kKC&quot;&gt;随着深度学习的发展，其应用场景也越发的广泛与多样。这些多样化的场景往往会对实际的部署提出更加“定制化”的限制。例如，自动驾驶汽车对人体识别的精度要求肯定比图像识别动物分类的精度要求更加严苛，因为二者的应用场景和错误预测带来的后果截然不同。这些“定制化”带来的差异，对于实际部署的模型在精度、速度、空间占用上有更具体的要求。在很多场景中由于部署的设备算力不强、内存较小，导致对于模型的速度和空间占用具有严格要求，而经过量化的模型具有速度快、空间占用小的特性，恰恰能满足这种需求。&lt;/p&gt;&lt;p data-pid=&quot;B3MSbN4n&quot;&gt;因此量化模型被广泛使用在推理侧，量化也成为了一个重要且非常活跃的研究领域。近期，&lt;b&gt;MegEngine 开源了 4 bits 的量化的相关内容，通过 MegEngine 4 bits 量化实现的 ResNet-50 模型在 ImageNet 数据集上的精度表现与 8 bits 量化模型相差无几，并且速度是 TensorRT-v7 8 bits ResNet-50 模型的推理速度的 1.3 倍&lt;/b&gt;。这次实践为 MegEngine 积累了 4 bits 量化的相关经验。同时，MegEngine 决定将 4 bits 量化的相关代码开源，为大家提供可参考的完整方案，推动在更低比特推理领域的探索与发展。&lt;/p&gt;&lt;h2 id=&quot;h_565121111_0&quot; data-into-catalog-status=&quot;&quot;&gt;背景&lt;/h2&gt;&lt;p data-pid=&quot;qP92vhOj&quot;&gt; 深度学习领域的模型量化是将输入从连续或其他较大的值集约束到离散集的过程。量化具有以下两点优势：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;yQxQTN_Q&quot;&gt; 在存储空间上，相较于 FLOAT 的 32 bits 的大小，量化值占用的空间更小。&lt;/li&gt;&lt;li data-pid=&quot;o_rFa3fQ&quot;&gt; 在性能上，各类计算设备对量化值的计算能力要高于 FLOAT 的计算能力。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;sZJFX2Gb&quot;&gt;本文中提到的 n bits 量化，就是将 FP32 的数据约束到 n bits 表示的整型数据的过程。量化依据数据的映射特征可以分为线性量化和非线性量化，MegEngine 中采用的是线性量化，使用的量化公式和反量化公式如下：&lt;/p&gt;&lt;p data-pid=&quot;vMWt-WVo&quot;&gt;&lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot; Q(r) =Int(r/S)+Z&quot;&gt; Q(r) =Int(r/S)+Z&lt;/span&gt;     [1]&lt;/p&gt;&lt;p data-pid=&quot;ATngvZH6&quot;&gt;&lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;r‘=S(Q(r) -Z)   &quot;&gt;r‘=S(Q(r) -Z)   &lt;/span&gt;              [2]&lt;/p&gt;&lt;p data-pid=&quot;Tax6yIrO&quot;&gt;其中，Q 是量化方法，r 是真实获取的输入 FLOAT 值，S 是 FLOAT 类型的缩放因子，Z 是 INT 类型“零点”。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5be381aa36d884391f11aac20cc09727_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;448&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-5be381aa36d884391f11aac20cc09727_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;448&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-5be381aa36d884391f11aac20cc09727_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-5be381aa36d884391f11aac20cc09727_b.jpg&quot;/&gt;&lt;figcaption&gt;图 1 ：4 bits 非对称线性量化&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-293a55bfacf8bb39863408e98dc22e7e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;448&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-293a55bfacf8bb39863408e98dc22e7e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;448&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-293a55bfacf8bb39863408e98dc22e7e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-293a55bfacf8bb39863408e98dc22e7e_b.jpg&quot;/&gt;&lt;figcaption&gt;图 2：4 bits 对称线性量化&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;5bLk5DvE&quot;&gt;如图 1 所示，MegEngine 用数据类型 UINT4 表示 4 bits 的非对称线性量化，量化值的取值范围为[0,15]；当 Z 取 0 时即为对称线性量化，此时 4bits 量化值的取值范围为[-8, 7]，在 MegEngine 中用数据类型 INT4 表示，如图 2 所示。&lt;/p&gt;&lt;p data-pid=&quot;bRGMaPYX&quot;&gt;目前 8 bits 量化模型在一些场景下被业界广泛运用，我们想去了解 4 bits 量化模型的落地的可能性。这要解决两个问题：一方面，4 bits 量化模型的精度要如何保证；另一方面，4 bits 量化模型的速度能提升多少。要解答这两个问题，需要算法研究员和工程开发人员的通力协作进行验证。整件事情投入高，收益不明确。我们想找到开源代码，快速从原理层面对这两个问题有个判断，但经过调研发现目前并没有 4 bits 量化相关开源内容可供研究参考。所以，MegEngine 决定开发 4 bits 量化并解答这两方面的问题。&lt;/p&gt;&lt;h2 id=&quot;h_565121111_1&quot; data-into-catalog-status=&quot;&quot;&gt;缓解精度下降&lt;/h2&gt;&lt;p data-pid=&quot;mISw1XOt&quot;&gt;保证 4 bits 量化模型的精度是重中之重，如果模型精度无法满足需求，则 4 bits 量化的开发将毫无意义。为了避免精度的大幅下降，MegEngine 采取的举措是输入和输出采用非对称量化 UINT4，weights 采用对称量化 INT4，bias 采用 FP32。接下来，从计算公式的推演上，来看这么设计的合理性：&lt;/p&gt;&lt;p data-pid=&quot;qVS0RsCX&quot;&gt;FP32 原始计算一次卷积输出结果的公式：&lt;/p&gt;&lt;p data-pid=&quot;RM1Tz9pq&quot;&gt;&lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot; W_{i}) + bias &quot;&gt; O = \sum_{i=0}^{Wn}(I_{i}\times W_{i}) + bias &lt;/span&gt; &lt;/p&gt;&lt;p data-pid=&quot;tUTew4ur&quot;&gt;结合公式 [1]、[2] 推导的 4 bits 量化的公式：&lt;/p&gt;&lt;p data-pid=&quot;AyM0vMmc&quot;&gt;&lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot; Q(O) = \frac{\sum_{i=0}^{Wn}((Q(I_{i}) - Z_{I})\times S_{I}\times (Q(W_{i}) - Z_{W})\times S_{W})}{S_{O}}+Z_{O} + bias&quot;&gt; Q(O) = \frac{\sum_{i=0}^{Wn}((Q(I_{i}) - Z_{I})\times S_{I}\times (Q(W_{i}) - Z_{W})\times S_{W})}{S_{O}}+Z_{O} + bias&lt;/span&gt; &lt;/p&gt;&lt;p data-pid=&quot;Hc-OCIde&quot;&gt;优化之后的公式：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1f377b9f79f6469508c73fe12afae891_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3933&quot; data-rawheight=&quot;303&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-1f377b9f79f6469508c73fe12afae891_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3933&quot; data-rawheight=&quot;303&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-1f377b9f79f6469508c73fe12afae891_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-1f377b9f79f6469508c73fe12afae891_b.png&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;DaY1gVkU&quot;&gt;在上述公式中， &lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;\mathbf{Z}_I&quot;&gt;\mathbf{Z}_I&lt;/span&gt; 、 &lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;\mathbf{Z}_W&quot;&gt;\mathbf{Z}_W&lt;/span&gt; 是否等于 0，表明输入/输出和 weights 采用 INT4 还是 UINT4。 并且在该公式中，除了 &lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;Q(\mathbf{I}_i)&quot;&gt;Q(\mathbf{I}_i)&lt;/span&gt;的值需要推理时确定，其余值均可在推理前获得。 所以，依据数据的计算特性，将这个公式分为了三个部分，分别用三种颜色表示：&lt;/p&gt;&lt;ol&gt;&lt;li data-pid=&quot;7EkRaVvv&quot;&gt;黑色表示无论输入/输出以及 weights 数据类型如何选择，一定有的计算量。因为无法避免，所以不用考虑这部分的数据特性。&lt;/li&gt;&lt;li data-pid=&quot;I1hZR5ia&quot;&gt;蓝色表示可以在推理前计算好的数据&lt;/li&gt;&lt;li data-pid=&quot;1nn_96Np&quot;&gt;红色表示必须在推理时才能计算的数据。&lt;/li&gt;&lt;/ol&gt;&lt;p data-pid=&quot;OtQctUx-&quot;&gt;推理前可以计算好的这部分数据可以提前计算并融合进 bias 中加入后续计算，所以 bias 必须用 FP32 数据类型表示，否则精度会大大降低。&lt;/p&gt;&lt;p data-pid=&quot;R0QGxR9O&quot;&gt;至于输入/输出以及 weights 的数据类型选择，结合上述公式可以推导得出：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;snbjd275&quot;&gt;全用 INT4 时，即&lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;\mathbf{Z}_I&quot;&gt;\mathbf{Z}_I&lt;/span&gt;、 &lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;\mathbf{Z}_W&quot;&gt;\mathbf{Z}_W&lt;/span&gt; 均等于 0， 计算量最小，只有黑色部分公式。&lt;/li&gt;&lt;li data-pid=&quot;y2iZwb4i&quot;&gt;输入/输出用 UINT4，weights 用 INT4，即  &lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;\mathbf{Z}_I&quot;&gt;\mathbf{Z}_I&lt;/span&gt; 不等于 0， &lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;\mathbf{Z}_W&quot;&gt;\mathbf{Z}_W&lt;/span&gt; 等于 0 时，会增加蓝色公式部分的计算量，但是这个部分是可以提前运算好的，对整体计算时间影响不大。&lt;/li&gt;&lt;li data-pid=&quot;w1lw-_-8&quot;&gt;weights 用 UINT4，即  &lt;span class=&quot;ztext-math&quot; data-eeimg=&quot;1&quot; data-tex=&quot;\mathbf{Z}_W&quot;&gt;\mathbf{Z}_W&lt;/span&gt; 不等于 0 时， 会增加红色公式部分的计算量，会对整体的计算时间带来较大影响。&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;-5iOrn_X&quot;&gt;由于 ResNet-50 模型 conv_relu 算子中的 relu 操作，输入/输出层的数据比较符合非对称的特性，采用非对称量化能更好地保留数据信息减少精度损失，所以输入/输出应该选择 UINT4，排除了上面三种方案中的第一种。第三种方案计算量会大很多，但是对精度的收益并不明显。所以，最终选择输入和输出采用非对称量化 UINT4，weights  采用对称量化INT4的方案。&lt;/p&gt;&lt;h2 id=&quot;h_565121111_2&quot; data-into-catalog-status=&quot;&quot;&gt;提升模型性能&lt;/h2&gt;&lt;p data-pid=&quot;-RLb-xZS&quot;&gt;提升模型性能并非一个简单的“因为计算设备的 4 bits 算力大于 8 bits 算力，所以易知......”的推导，计算设备 4 bits 算力大于 8 bits 算力是已知的，但是需要一些方法将这部分的算力“兑现”，算力需要合适的算子释放出来，其次，4 bits 量化所追求的也并非在某个算子的性能上超过 8 bits 量化，而是在模型层次超越 8 bits 量化。考虑到ResNet-50 模型以及卷积算子非常具有代表性，我们最终决定用 ResNet-50 模型作为基准测试模型。经过对模型的分析，发现 ResNet-50 模型的性能瓶颈主要集中在两个方面：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;4vaTBcoz&quot;&gt;小算子比如 relu、add 较多，这些细琐算子带来的启动以及带宽上的开销较大。&lt;/li&gt;&lt;li data-pid=&quot;aWMQs-sr&quot;&gt;conv 计算非常多，占用了全图 80% 以上的运算时间。&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;Nbrovnaz&quot;&gt;为解决这两方面的瓶颈，MegEngine 做了以下两个方面的优化工作：图层次的算子融合以及算子层次的优化。&lt;/p&gt;&lt;h3 id=&quot;h_565121111_3&quot; data-into-catalog-status=&quot;&quot;&gt;算子融合优化&lt;/h3&gt;&lt;p data-pid=&quot;coWkt0Nm&quot;&gt;MegEngine 通过对计算图进行扫描匹配，并将匹配到的图结构替换为优化后的图结构。ResNet-50  模型所用的两种 pass 转换如下图所示:&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-08912cfb616a5fcc7dde7ada9c494ccc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;463&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-08912cfb616a5fcc7dde7ada9c494ccc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;463&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-08912cfb616a5fcc7dde7ada9c494ccc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-08912cfb616a5fcc7dde7ada9c494ccc_b.jpg&quot;/&gt;&lt;figcaption&gt;图 3：两种 Pass 优化方法&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;cw_WsxFj&quot;&gt;图 3 中的大方块表示图中各种算子，小方块表示这些算子的读/写数据操作以及启动开销。从图中可以看到经过算子融合的优化可以有效减少算子的读/写数据的操作以及启动开销。&lt;/p&gt;&lt;p data-pid=&quot;IG48yJHM&quot;&gt;将这两个 pass 应用于原始的 ResNet-50 的结构，就可以得到优化后的图。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8fcd50acca75a19f913af51e4e7371c8_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1422&quot; data-rawheight=&quot;768&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-8fcd50acca75a19f913af51e4e7371c8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1422&quot; data-rawheight=&quot;768&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-8fcd50acca75a19f913af51e4e7371c8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-8fcd50acca75a19f913af51e4e7371c8_b.jpg&quot;/&gt;&lt;figcaption&gt;图 4：Pass 优化在 ResNet-50 模型中的应用&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;hOJvZjgI&quot;&gt;从图 4 可以看到，通过对 ResNet-50 模型的网络结构的优化，add 和 relu 这些计算强度较小的算子已经被 conv 这种计算强度大的算子所吸收，减少了小算子带来的启动以及读写上的开销。&lt;/p&gt;&lt;h3 id=&quot;h_565121111_4&quot; data-into-catalog-status=&quot;&quot;&gt;conv 算子优化&lt;/h3&gt;&lt;p data-pid=&quot;5zHS1cTk&quot;&gt;经过算子融合优化后，可以看到 ResNet-50 模型调用的算子主要是各种 conv fuse 的算子，如 Conv_Relu、Conv_Add_Relu，这些算子的主体部分都是 conv，所以主要的优化也都落实在了 conv 算子优化上。&lt;/p&gt;&lt;p data-pid=&quot;-QDiUt23&quot;&gt;conv 采用 implicit gemm 算法并通过 mma 指令调度 tensor core 进行计算加速。 顾名思义，implicit gemm就是将 conv 运算转换为矩阵乘的一种算法，是对 img2col 的算法的改进，传统的 img2col 算法如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-39498848e54e6456b684b45cad8bc2b7_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1142&quot; data-rawheight=&quot;840&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-39498848e54e6456b684b45cad8bc2b7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1142&quot; data-rawheight=&quot;840&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-39498848e54e6456b684b45cad8bc2b7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-39498848e54e6456b684b45cad8bc2b7_b.jpg&quot;/&gt;&lt;figcaption&gt; 图 5：img2col 示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;4uIw3I-d&quot;&gt;从图 5 中可以看到，img2col 是将输入 shape 为（N,IC,IH,IW），卷积核 shape 为（OC,IC,FH,FW）的卷积运算变为 shape 分别为（OC，ICFHFW）和（ICFHFW，NOHOW）的两个矩阵的乘法运算。implict geem 的整体运算逻辑与 img2col 相同，其区别在于 img2col 会“显式”地完成图 6 中数据的卷积排布到矩阵排布的转换，需要额外开辟一块矩阵大小的空间用以存储转换后的矩阵，implict gemm 的转换则是“隐式”的，没有这部分空间开销，在 implicit gemm 算法中并没有开辟额外的空间存储卷积核矩阵（OCxICFHFW）和输入矩阵（ICFHFWxNOHOW），而是在分块后，每个 block 会按照上图中的对应逻辑，在 global memory 到 shared memory 的加载过程中完成从数据的原始卷积排布到 block 所需的矩阵分块排布的转换。&lt;/p&gt;&lt;p data-pid=&quot;rVNcT9Q6&quot;&gt;针对 4 bits 的 implict gemm 的优化主要参照 cutlass 的优化方案，并在此基础上加入了 output 重排的优化。由于篇幅问题，本节仅讲解 output 重排的优化，想要了解更多技术细节，建议参考阅读&lt;a href=&quot;https://zhuanlan.zhihu.com/p/372973726&quot; class=&quot;internal&quot;&gt;之前的文章&lt;/a&gt;以及开源代码。 &lt;/p&gt;&lt;p data-pid=&quot;MSSr4XKd&quot;&gt;先分析 output 目前的排布情况，implict geem 的计算最终都落实在了 mma 指令上，而 mma 指令输出的排布与 warp 中 32 个线程的关系如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ff64c3e47f1120a635e6ce8f7d024725_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;680&quot; data-rawheight=&quot;282&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-ff64c3e47f1120a635e6ce8f7d024725_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;680&quot; data-rawheight=&quot;282&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-ff64c3e47f1120a635e6ce8f7d024725_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-ff64c3e47f1120a635e6ce8f7d024725_b.jpg&quot;/&gt;&lt;figcaption&gt;图 6：mma 输出排布示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;NXzk7wbw&quot;&gt;如图 6 中所示，在一次 mma 指令运算中，一个 warp 的 32 个线程负责 64 个运算结果，且这些结果都存储在寄存器上。每个线程负责 8x8 的结果矩阵同一行内连续的两个运算结果，每四个线程负责同一行的 8 个运算结果。&lt;/p&gt;&lt;p data-pid=&quot;35fywfsq&quot;&gt;结合 implict geem 的结果矩阵 OCxNOHOW（由 OCxICFHFW 和 ICFHFWxNOHOW 乘积得到），在MegEngine 4 bits 量化的卷积算子设计中，一个 warp 的 32 个线程和输出的排布关系如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c7f9d5ea417aedae5e3955358ff2a4f4_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;620&quot; data-rawheight=&quot;441&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-c7f9d5ea417aedae5e3955358ff2a4f4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;620&quot; data-rawheight=&quot;441&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-c7f9d5ea417aedae5e3955358ff2a4f4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c7f9d5ea417aedae5e3955358ff2a4f4_b.jpg&quot;/&gt;&lt;figcaption&gt;图 7：warp 输出排布示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;oFaPrli5&quot;&gt;一个 warp 负责 64x64 大小的输出矩阵，该矩阵由 8x8 个 mma 的 8x8 输出矩阵组成，输出和线程的排布关系如图所示，黄色部分表示线程 0 所拥有的数据。图 7 中的所有数据都在寄存器上，算子的最后一步操作，也就是将这些数据写回到 global memory 上并按照 NCHW64 的方式进行排布。&lt;/p&gt;&lt;p data-pid=&quot;lyTKLVCg&quot;&gt;一眼看上去，这些数据的排布都是间隔开的，虽然横坐标上的数据连续，但对于写回到 global memory 并按照 NCHW64 排布而言，并没有什么帮助。直接的写回方式是将这些寄存器上的数据进行压缩，先将 8 个32 bits的数据转换为 8 个4 bits 的数据，再将这 8 个 4 bits 的数据放到一个 32 bits 大小的空间，然后写回到 global memory，这种处理方式将面临几个问题：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;uOfCRwa8&quot;&gt;每个线程中的数据都不连续，增大了数据处理难度，这些额外的处理计算可能会导致性能下降。&lt;/li&gt;&lt;li data-pid=&quot;wkmVm2dz&quot;&gt;需要在纵向的 8 个线程间交换数据，会有同步的开销。&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;RSPZ9F-s&quot;&gt;这无疑是一个开销比较大的处理方式，为了解决写回数据带来的性能问题，MegEngine 采用了以下处理方式：&lt;/p&gt;&lt;p data-pid=&quot;CTJB-QEO&quot;&gt;注意到 NCHW64 的排布方式，每 64 个 OC 是连续的，尝试将矩阵旋转一下，想象这是一个 NOHOWxOC 的矩阵，那么 T0、T1、T2、T3 四个线程所负责的数据在 OC 维度上是连续的，它们对于的 OC 维度分别是 T0{0,1; 8,9;16,17;24,25;32,33;40,41;48,49;56,57}、T1{2,3;10,11;18,19;26,27;34,35;42,43;50,51;58,59}......可以看到，现在是四个线程负责 64 个连续的输出，那么只要这四个线程交换数据再压缩、写回即可。 相比于之前 8 个线程间数据交换和写回，现在的处理方式更加简单，内部偏移计算与同步开销会更少。所以实现output转置是一种切实可行的优化方法。这也体现了 NCHW64 的排布方式使得 4 bits 类型的数据在传输过程能被连续访存，充分利用硬件资源的特点。&lt;/p&gt;&lt;p data-pid=&quot;j4zI-zBJ&quot;&gt;但是线程间交换数据的开销在output转置处理中依然没有被彻底解决。如果可以得到T0{0,1;2,3;4,5;6,7;8,9;10,11;12,13;14,15}、T1{16,17;18,19;20,21;22,23;24,25;26,27;28,29;30,31}......这样的输出OC 维度和线程对应关系。那么就只需要在线程内部进行数据打包和写回，并且 16 个4 bits 的数据正好占用 2 个32 bits 大小的空间，非常规整。要实现这个效果也是非常简单的：对于 AxB=C 的矩阵乘法，要实现 C 矩阵的列顺序变换，只需要对 B 矩阵进行对应的列顺序变换即可，如下图所示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a8d591584b4dd23c484a260ff84d637a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1174&quot; data-rawheight=&quot;488&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-a8d591584b4dd23c484a260ff84d637a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1174&quot; data-rawheight=&quot;488&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-a8d591584b4dd23c484a260ff84d637a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-a8d591584b4dd23c484a260ff84d637a_b.jpg&quot;/&gt;&lt;figcaption&gt;图 8：矩阵乘积的列变换&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-pid=&quot;-xptdgty&quot;&gt;从图  可以看出，将乘积矩阵 AxB=C 中的 B 矩阵的第1列和第5列进行对调，结果矩阵 C 对应的列的运算结果也会发生同步的对调。利用这一特点，可以在 conv 算子运算前，将 weights 的列进行重排序，使得最终输出OC 维度在对应的相同线程中保持连续，T0{0,1;2,3;4,5;6,7;8,9;10,11;12,13;14,15}...&lt;/p&gt;&lt;p data-pid=&quot;GStxj8hw&quot;&gt;所以总结一下 output 重排的策略，其实就两点：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;EqSSeHRe&quot;&gt;将 OCxICFHFW 和 ICFHFWxNOHOW 的矩阵乘，变为 NOHOWxICFHFW 和 ICFHFWxOC 的矩阵乘，实现output 结果的转置，确保在 OC 维度上的数据连续，配合 NCHW64 的排布方式，便于将数据从寄存器上写回到 global memory 上。&lt;/li&gt;&lt;li data-pid=&quot;r2AT1I06&quot;&gt;通过对 ICFHFWxOC 矩阵的 OC 进行重新排序，实现 output 矩阵 NOHOWxOC 的 OC 维度和线程的对应关系更加合理，确保线程内部的数据连续性，避免线程间数据交换的开销。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;h_565121111_5&quot; data-into-catalog-status=&quot;&quot;&gt;总结&amp;amp;展望&lt;/h2&gt;&lt;p data-pid=&quot;X5iIY6uq&quot;&gt;本次开源提供了和 TensorRT(TRT) ResNet-50 8 bits 量化模型在 ImageNet 数据集上速度以及精度对比结果：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-270f8f5212f8e596ebbffda97404df20_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1410&quot; data-rawheight=&quot;832&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-270f8f5212f8e596ebbffda97404df20_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1410&quot; data-rawheight=&quot;832&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-270f8f5212f8e596ebbffda97404df20_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-270f8f5212f8e596ebbffda97404df20_b.jpg&quot;/&gt;&lt;figcaption&gt;图 9：速度对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a90451f87fb36e25f0fc82a8ff56a5ee_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1485&quot; data-rawheight=&quot;916&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-a90451f87fb36e25f0fc82a8ff56a5ee_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1485&quot; data-rawheight=&quot;916&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-a90451f87fb36e25f0fc82a8ff56a5ee_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-a90451f87fb36e25f0fc82a8ff56a5ee_b.jpg&quot;/&gt;&lt;figcaption&gt;图 10：精度对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;A_2CGdOG&quot;&gt;通过在 ResNet50 上的测试可以看到，MegEngine 的 INT4 方案可以比 fp32 推理速度提升 5.65 倍至多，相比于现在业内较为常用的 INT8 方案也仍然可以提升 1.3 倍的速度。在速度大幅提升的同时，uint4*int4 的方案尽可能的保证了精度，精度下降能够控制在 top1 -0.3% 左右。&lt;/p&gt;&lt;p data-pid=&quot;MjobTB5d&quot;&gt;在速度和精度两方面的努力，让 INT4 的方案能够在实际的业务场景中带来显著的优势，而不只是停留在论文上。该 INT4 方案在旷视的产品上已经获得了使用，同时也欢迎大家自行测试验证该方案的效果，测试所需的各类信息都在这里：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//github.com/MegEngine/examples/tree/main/int4_resnet50_test&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-text=&quot;https://github.com/MegEngine/examples/tree/main/int4_resnet50_test&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;h_565121111_6&quot; data-into-catalog-status=&quot;&quot;&gt;P.S. 做个广告&lt;/h2&gt;&lt;p data-pid=&quot;1FRbJqDg&quot;&gt;前几天英伟达芯片禁运的消息沸沸扬扬，MegEngine 本次开源的 4 bits 量化方案在英伟达 CUDA 上 work 了，是想向大家证明，深度学习框架支持 4 bits 量化这条路是走得通的，所以特意提供了大量的代码和细节供大家参考。&lt;/p&gt;&lt;p data-pid=&quot;q54Tc_II&quot;&gt;我们看到，业内目前有几家端上芯片公司已经在做 4 bits量化了，并且实际的速度也快的飞起！我们希望 MegEngine 能推动芯片产业向更低比特推理的方向发展，MegEngine 愿意继续与各类企业深度合作，不管是训练芯片还是推理芯片都欢迎来合作交流！&lt;/p&gt;&lt;h2 id=&quot;h_565121111_7&quot; data-into-catalog-status=&quot;&quot;&gt;附&lt;/h2&gt;&lt;p data-pid=&quot;aEnWoh8I&quot;&gt;GitHub：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/MegEngine&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MegEngine 旷视天元&lt;/a&gt; （欢迎 star~&lt;/p&gt;&lt;p data-pid=&quot;l4wkbVhC&quot;&gt;Gitee：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitee.com/MegEngine/MegEngine&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MegEngine/MegEngine&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;mQdfRgAF&quot;&gt;MegEngine 官网：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.megengine.org.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MegEngine-深度学习，简单开发&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;H9IUwogi&quot;&gt;欢迎加入 MegEngine 技术交流 QQ 群：1029741705&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>