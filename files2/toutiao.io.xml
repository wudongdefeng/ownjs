<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1a25341afebd2cdaff9a9647dc69fd17</guid>
<title>认知篇：CQRS 架构模式的本质</title>
<link>https://toutiao.io/k/7x40gqk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;strong&gt;作者：京东科技 倪新明&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CQRS只是一种非常简单的模式（pattern），CQRS本身并不是一种架构风格，和最终一致性/消息/读写分离/事件溯源/DDD等没有必然的联系，它最大优势是给我们带来更多的架构属性选择&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;strong&gt;1 CQRS 本质&lt;/strong&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;strong&gt;1.1 CQS：命令和查询分离&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;命令和查询分离，Command and Query Segregation，其核心思想是在任何一个对象的方法可以划分为两类&lt;/p&gt;

&lt;p&gt;•查询：获取数据，返回查询数据，但不改变数据状态&lt;/p&gt;

&lt;p&gt;•命令：改变数据状态，不返回任何数据&lt;/p&gt;

&lt;p&gt;基于CQS的思想，任何一个方法都可以拆分为命令和查询两部分：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private int origin = 0;
private int add(int value)
{
    origin += value;
    return origin;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述方法既改变了数据，又返回了数据状态，如果按照CQS的思想，则该方法可以拆成Command和Query两部分，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void add(int value)
{
    origin += value;
}
private int queryValue()
{
    return origin;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是否严格遵循上述约定存在争议，对于命令侧是否返回数据实际业务诉求中并不一定能够完全统一。比如：&lt;/p&gt;

&lt;p&gt;•&quot;&lt;strong&gt;出栈&lt;/strong&gt;&quot; 操作同时改变栈状态和返回数据&lt;/p&gt;

&lt;p&gt;•某些业务场景下可能会有返回业务主键的诉求，比如下单操作返回订单号&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;1.2 CQRS：命令和查询职责分离&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Command and Query &lt;strong&gt;Responsibility&lt;/strong&gt; Segregation，即命令查询职责分离，由Greg Young提出 。CQRS在CQS基础之上，&lt;strong&gt;将分离的级别从代码方法级别扩展到对象级别&lt;/strong&gt;。CQRS 模式的应用非常简单，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-08-21-19-17ag9Dd17aYM17Apwq9.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;假设我们的服务为 OrderService，在非CQRS模式下同时包含了查询和更新服务接口：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class OrderService {
   //  根据id查询订单
    Order getOrder(OrderId)
    // 查询已支付订单
    List&amp;lt;Order&amp;gt; getPayedOrders()
    // 下单
    void placeOrder(Order)
    // 取消订单
    void cancelOrder(OrderId) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;应用CQRS模式之后的OrderService被拆分成了两个接口，分别承担查询和写职责：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
命令侧服务
*/
public class OrderService {
    void placeOrder(PlaceOrderCommand command)
    void cancelOrder(CancelOrderCommand command)
}
/**
 查询服务
*/
public class OrderQueryService{
    Order GetOrder(OrderId)
    List&amp;lt;Order&amp;gt; getPayedOrders()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;以上这种简单的分离就是CQRS模式的全部了，是不是非常简单？确实，单纯的看，CQRS的确就是这么简单。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CQRS最大优势就是&lt;strong&gt;基于这种职责分离能带给我们更多的架构属性选择&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;•“查询” 和 “命令” 两侧进行独立部署以获取更好的伸缩性&lt;/p&gt;

&lt;p&gt;•“查询” 和 “命令” 两侧独立架构设计&lt;/p&gt;

&lt;p&gt;•“查询” 和 “命令”两侧进行独立数据模型设计&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基于CQRS，我们可以衍生出更多的架构属性，结合实际的业务场景，进行差异化的架构设计。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;团队引入CQRS模式之后，往往不仅仅是简单的在类的职责层面对读写进行分离，一般会采用更为复杂的应用架构风格，如下是典型的CQRS架构风格：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-08-21-19-18am0Ih718ZX80NWXB.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;•命令侧：命令侧引入命令总线以支持对不同命令的灵活路由；突出领域模型的应用&lt;/p&gt;

&lt;p&gt;•查询侧：引入查询总线对查询请求进行路由；请求链路一般直接连接到存储层，实现不同的定制化查询需求&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;2 CQRS迷思&lt;/strong&gt;&lt;/h2&gt;

&lt;h3&gt;&lt;strong&gt;2.1 数据模型是否要分离&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;CQRS强调命令和查询的职责分离，但在底层的数据模型层面，CQRS并没有进行强制限定，即&lt;strong&gt;采用CQRS模式并没有要求必须要进行数据模型的分离&lt;/strong&gt;。是否要进行模型分离开发人员需要具体情况具体分析。&lt;/p&gt;

&lt;p&gt;•分离模型：查询侧和写侧模型不互相干扰，各自在应用层的实现复杂度比较低。但由于模型的分离，命令侧和查询侧的数据一致性需要纳入考虑范围&lt;/p&gt;

&lt;p&gt;•不分离：不需要考虑数据一致性问题，但由于查询侧和写侧对模型的诉求可能不一致，模型的设计往往需要折衷考虑。&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;2.2 CQRS 和 消息模式&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CQRS和消息模式没有必然联系，落地CQRS 并不一定需要使用消息模式&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-08-21-19-20SEBb7n7zWULZhTM.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果我们采用了CQRS模式，但是命令和查询两侧底层所依赖的数据模型并未分离，而是基于共享的数据存储和数据模型，命令和查询之间不需要额外的交互，命令侧的数据更新对查询侧实时可见。在这种架构模式下，两侧基于共享的数据已经天然的集成在一起，不需要额外机制进行通信，自然也无需引入消息了。如果我们采用CQRS模式，并且命令和查询两侧进行了数据模型的分离，二者各自依赖独立的数据模型。同时，数据存储也分开部署。命令侧负责数据的更新，而查询侧只负责数据的查询，如何将数据的更新及时同步到查询侧是需要解决的问题。在这种架构模式下，使用消息模式作为两侧的通信机制是个不错的选择，当然，这并不是唯一的选项。&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;2.3 CQRS 和 ES（Event Sourcing, 事件溯源)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;ES 并不是一个新的概念，在最早的金融系统中就已经应用。要了解ES，我们需要先看看传统的数据存储。在传统应用中，数据库例如MySQL（假设存储介质是数据库，）中存储的始终是数据的最新的状态。例如我们对某条用户的信息进行了多次的修改或编辑，然后保存将数据存储到数据库中。无论何时，数据库中都会记录最后的、最新的用户状态。我们只要根据id或其他信息查询数据库中相应的记录就能获取该用户的最新信息。这是应用中典型的数据存储特点。&lt;/p&gt;

&lt;p&gt;当然，我们可以基于特定的数据模型设计以保存数据的更改记录。&lt;/p&gt;

&lt;p&gt;这种数据存储模式的特点是简单，不需要额外的维护复杂的设计，我们能够非常容易的获取最新的用户信息。但是不幸的是，我们丢失了历史信息，包括用户的意图信息。而这些信息则有助于我们进行数据回滚、用户行为分析以及开发过程中的调试等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-08-21-19-28jzAfoGmpPoCC28Q11.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在ES模式下，数据库中存储的不在是数据最新状态，而是数据的变更记录，更官方的说法是 “事件（Event）”。数据库中存储的数据变化的事件流。我们基于事件流可以对最新状态进行重建，同时也可以便捷的重现任何历史节点数据。ES需要解决大量事件的存储和高效的实例重建问题，后续单独的文章再介绍ES。&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;2.4 CQRS 和 Eventual Consistency（最终一致性）&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;最终一致性也常常在服务之间引入，最终一致性的目的是为了提高扩展性和可用性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CQRS和最终一致性同样没有必然的联系&lt;/strong&gt;。往往采用CQRS后，查询和命令两侧会采用独立的数据模型，在这种架构模式下，命令侧的数据变化后及时同步到查询侧，两侧数据并非实时，在一定的延时后两侧数据最终达成一致。&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;3 结语&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;CQRS的最大优势在于&lt;strong&gt;通过将命令和查询的职责分离，为架构师提供了更多的架构属性选择&lt;/strong&gt;，我们可以在查询侧和命令侧进行独立的架构设计。对象级别的职责分离就是CQRS的全部了，但在实践中涌现出了很多更为灵活也更为复杂的架构风格，比如总线的引入、数据模型的分离、一致性报这个策略、事件溯源等等。额外的组件或技术的引入必然导致复杂性和成本上升，这些选型的采纳需要团队的权衡。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e751c0c908ba24b5df44a18af7f60398</guid>
<title>写个简易版秒杀系统练练手</title>
<link>https://toutiao.io/k/wx34lhr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不写文章还有点不自在，完了😂&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天来分享下这段时间学习的一个秒杀项目，黑马点评。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好久没跟着学这些，感觉非常非常好玩，又想捣鼓点项目玩玩了 哈哈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我也简单搭建了一个，用到了这些技术。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;Springboot2 + Redis7 + Lua + Redisson + MySQL8 + RabbitMQ3.9 + MybatisPlus + Hutool&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 &lt;strong&gt;Redis&lt;/strong&gt; 和 &lt;strong&gt;MySQL&lt;/strong&gt; 都是之前搭建在云端的 &lt;strong&gt;K8S&lt;/strong&gt; 上的 主从 结构，用 &lt;strong&gt;Traefik&lt;/strong&gt; 做总网关。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt; 则是之前在本地虚拟机上用 docker 搭建的 ，还有 &lt;strong&gt;Prometheus&lt;/strong&gt; +  &lt;strong&gt;Grafana&lt;/strong&gt; 监控。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;思路&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6524271844660194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskMBxAFPnMqs9RaTPibpTiaO8m6Eyls2quJ2tzqI3Oq4099ImC7AuanZvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;隐藏秒杀地址&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个就是实现一个用户一个地址，给脚本工具加点难度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据需要生成这个 path，比如用 md5 混淆下 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后放到  Redis 中  key ：秒杀活动ID+’path‘ + 秒杀商品ID+用户ID ,   value ：path&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22022160664819945&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskNo46vwPyWGHN7oJunyundPUsrtqs7icsiaeica0fbk1oCoD2NN6OWPdPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;722&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真实的秒杀地址如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10094637223974763&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskl49EY96iafRnjwALiciannuSaNUqmTp2icic54cLfwzShow1sviceFeeVoKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;317&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;lua 脚本预扣库存&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 lua 脚本来保证这个操作的原子性，判断 库存key 存不存在，数量够不够，够的话执行扣减操作&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6043276661514683&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskXeXrYEAU1YnpObAGGln4icJDGjLjXA6K8jSk28u7WDBpN5ec4ibicSGgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;647&quot;/&gt;&lt;figcaption&gt;bug&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我这样写的脚本是有问题的，没有进行 &lt;strong&gt;重复订单校验&lt;/strong&gt; ， 以及 set 这个 订单信息 到 redis 中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这 3 步操作应该是原子性的，&lt;strong&gt;校验，扣减，设置&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以即便 lua 脚本能保证操作的原子性，但是并发情况下会出现 &lt;strong&gt;少卖&lt;/strong&gt; 的情况。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18181818181818182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskYk2zv65WXbSxGqJrKC00b8QvY37b4HSiaevz9VxONxD3zUg38PjWy2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;242&quot;/&gt;&lt;figcaption&gt;模拟同个用户 50 个并发，&lt;span&gt;100个库存&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5172413793103449&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskwxkt9zXmvUejrPtiaWjJFZt5YbibE5tZJEiaHd5Ytr8DGGOlzI69d8Viaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;406&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0268006700167505&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskkxXmop4LfGmKf3Bw2uALcHJYQKMZgNmKxhwGSKsOx2MUpibZLfSibD5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;597&quot;/&gt;&lt;figcaption&gt;改正版&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;改正后也就正常了，之前我是老想着 订单ID 的生成要从  &lt;strong&gt;分布式ID&lt;/strong&gt; 中获取，想尽量较少这个 网络请求 的，一不小心就疏忽了。（&lt;strong&gt;以后得先把 核心思路 写下，再思考优化，不能边写边想优化了&lt;/strong&gt;🐷）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;分布式ID&lt;/strong&gt; ，我之前研究这个 &lt;strong&gt;美团Leaf&lt;/strong&gt; 也是想简单搭建一个，奈何总喜欢偷懒🐷，这里我是用  &lt;strong&gt;Hutool&lt;/strong&gt; 的 &lt;strong&gt;雪花算法&lt;/strong&gt; 简单生成的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1498371335504886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskdGFmhDlFRE68ASB5pn52q0lic6JB6hZPpicz2siaqYheoD2fXbhENicCZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;614&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;保存订单信息到 Redis&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出 &lt;strong&gt;大bug&lt;/strong&gt; 之前，我以为这里只是做 &lt;strong&gt;重复订单校验&lt;/strong&gt; 的，没想到，还有这种情况 👇&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;MQ 挂了&lt;/strong&gt;，消息还没发送出去，甚至一开始就&lt;strong&gt;没连接上&lt;/strong&gt;的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 我这个本机和虚拟机 休眠后得重启下 &lt;strong&gt;虚拟网络vm8&lt;/strong&gt;，不然连不上去。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13386524822695037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskmzmRDJ7QBuwHibHdibQrfVCcgaIQ8P9lpTwfKfNPyjicnfW7VuBIClC2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1128&quot;/&gt;&lt;figcaption&gt;意料之外~&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，这里得写个小脚本，将 订单信息 发送到 MQ 中，在紧急情况下能快速补救。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分布式锁&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前用 jvm 级别的锁其实就足够了，但后面上集群还得改代码，干脆一鼓作气。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6447688564476886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskWib8Waic1px4jn2QpqknibN7zVLhYNXzWp4Vwen2rTzmJT4VRUcwJ2wIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;411&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;锁的粒度，不能太大，主要防止用户重复下单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一版 错误的 lua 脚本中，就会出现 &lt;strong&gt;重复下单&lt;/strong&gt; 的情况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集群模式下，多个消费者的情况，此时谁先拿到分布式锁，谁就可以消费这个订单，&lt;strong&gt;避免重复下单&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5778443113772455&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskE8xibs6gjdtMPbAnfXTWfhvRRC1OibZL8L5pXulqiaBakLicic4LCgET5vg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;334&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过分布式锁，保证这个订单只有一个消费者消费，即便在多个消费者模式下，也不会出现 &lt;strong&gt;重复下单&lt;/strong&gt; 的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时，也可以防止使用 Redis 出现意外，就像上面 &lt;strong&gt;错误使用 lua 脚本的案例&lt;/strong&gt;，以及 可能存在的 key 过期等问题导致的重复下单问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这还不是 &lt;strong&gt;兜底方案&lt;/strong&gt; ，万一这个 &lt;strong&gt;分布式锁&lt;/strong&gt; 也出现意外了呢，所以保险起见，还需要给 订单表 建立 &lt;strong&gt;唯一索引&lt;/strong&gt;（用户id+商品id)，靠数据库本身保证了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里如果不用分布式锁，那就得从数据库层面去保证了，得用 select …… for update 开启 &lt;strong&gt;悲观锁&lt;/strong&gt;，那效率会进一步降低的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意，这里也是 &lt;strong&gt;缓存击穿&lt;/strong&gt; 的常见解决思路，分布式锁，双重检查锁模式。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;事务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我这里是简易版的，没有涉及到 分库分表，所以也谈不上这个 分布式事务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我用的 &lt;strong&gt;编程式事务&lt;/strong&gt; ，毕竟 扣减库存和保存订单 要在一个事务里，用注解的话还得考虑这个&lt;strong&gt;失效&lt;/strong&gt;的场景，获取这个代理对象去执行，没有这个 &lt;strong&gt;编程式事务&lt;/strong&gt; 来得方便。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5637755102040817&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskTYowORKMd8NuEYZY4mCZe16OWbha0dY1jibY7uvGn5um8aGsIXZ6a6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;784&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设 订单在订单库中，商品在商品库中，那这种情况下，是不是还得考虑这个 &lt;strong&gt;分布式事务&lt;/strong&gt; 呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我可能还是不会选择这个 &lt;strong&gt;分布式事务&lt;/strong&gt; ，我会直接往 商品库 中 建立一个 &lt;strong&gt;秒杀订单表&lt;/strong&gt;  或者在 &lt;strong&gt;订单库&lt;/strong&gt; 中建立这个 秒杀商品库存表，甚至专门弄一个 &lt;strong&gt;秒杀库&lt;/strong&gt; ， &lt;strong&gt;冗余&lt;/strong&gt; 一下，事后如果需要同步到相应的 库表 中，再进行相关的操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那假如还有个积分系统呢 ?&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 支付回调后，更新订单状态的同时，还要更新这个用户积分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这我还是会选择 MQ ，通过 MQ 的可靠性 来达到这个 &lt;strong&gt;最终一致性&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4631268436578171&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskN64tFNB9YyWfym5jLWXbjUTm43koQ8pO6uMM5jHORe0ouCoWibY0j8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;339&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先发送消息到积分系统，更新订单信息单独在事务中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是分布式事务中常见的一种解决方案 &lt;strong&gt;基于MQ可靠性消息的最终一致性方案&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时间可以学习下 Seata&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4850863422291994&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWsktEoicMUQjJicwB42V9w7b6fvEXnQMIFP6aUibjUnNmAHFFoQwyhYoicr8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;重试机制&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图将 MySQL 和 MQ 的操作放一起，还得小心这个 MQ 的异常，导致这个 &lt;strong&gt;事务回滚&lt;/strong&gt;，但是 ACK 还是正常发出去的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我最后还将异常抛出去，是为了触发这个 &lt;strong&gt;重试机制&lt;/strong&gt; ，配置文件中 开启 RabbitMQ 消费者重试机制即可。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;ACK 前发生异常，事务回滚，触发重试机制。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;ACK 中发生异常，捕获，丢弃异常，提交事务。再次消费时，发现是重复订单。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;ACK 后还有异常，未捕获，事务回滚，但消息已经被 ACK，触发了重试机制，在重试期间没有异常，则正常处理。如果重试后还有异常，则会出现 消息丢失 的情况，这又得 &lt;strong&gt;紧急处理&lt;/strong&gt; 了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;防止超卖&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有两个扣减动作&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 预扣库存，这里得在 &lt;strong&gt;lua 脚本&lt;/strong&gt;中操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4107142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskzbicBZuiaE1zTAZMk8Qzo5msQK0Zf6auoib12qKkPWAbGCwf8icYC3batA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;448&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL 扣减库存，这里核心就是 &lt;strong&gt;乐观锁的方式&lt;/strong&gt;  a=a-1 where a &amp;gt; 0;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1458966565349544&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWsk7vFSbQFljG9uFm6ialibjdoqUKvxLecR4Unp1YV0YOXxlzeyl0fWPgKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;658&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里再简短啰嗦下&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存穿透&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;针对不存在的 key ，可以用 &lt;strong&gt;布隆过滤器&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存击穿&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;key 刚好过期，或者 &lt;strong&gt;商品成了爆款&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 &lt;strong&gt;分布式锁&lt;/strong&gt; ， &lt;strong&gt;双重检查锁模式&lt;/strong&gt; 能解决上面这两种情况，锁的粒度也是这个 商品。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对  key 刚好过期 的情况，我了解到一种新的处理思路：&lt;strong&gt;逻辑过期&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不在 Redis 中判断是否过期，在 代码 中进行判断，过期的话获取锁，开线程去更新，但实现起来比较复杂。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缓存雪崩&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;大量 key  同时过期，可以 &lt;strong&gt;给不同的Key的TTL添加随机值&lt;/strong&gt; ，&lt;strong&gt;给业务添加多级缓存&lt;/strong&gt;  ，&lt;strong&gt;降级限流策略安排上&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，这个简易秒杀系统就介绍完了，至于 限流，用户鉴权，标记 ，订单支付，超时处理，消息的顺序性 …… 再到大一点的 集群，缓存一致性 等等东西，得抽空再完善下了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搭建过程中，最有意思的是，一直防着 &lt;strong&gt;超卖&lt;/strong&gt;，结果还出现了 &lt;strong&gt;少卖&lt;/strong&gt; 的场景😂&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以这 Redis 预扣库存 也得谨慎呀，&lt;strong&gt;lua脚本&lt;/strong&gt; 三合一疗程：查，扣，存 😂&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL 也一样，&lt;strong&gt;分布式锁&lt;/strong&gt;，&lt;strong&gt;事务&lt;/strong&gt; ，查，扣，存&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.978021978021978&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskW2aXqQMxyUTmHfjaXDaWsyZzya59OY5rZBCp93KdEAl0ZbzicutSsKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;182&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望到时能把笔记中的技术都过一遍。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3000898472596586&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskWIkxoIYcOFoQic4VicpPg1AoNB02Ie7jsFtEd3WZCwrWice2Qf6uo7U6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1113&quot;/&gt;&lt;figcaption&gt;学习笔记&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是我用 JMeter 测试的一些数据情况👇&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;JMeter&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里两个 http 请求分别模拟，&lt;strong&gt;获取秒杀地址&lt;/strong&gt;，&lt;strong&gt;开始秒杀&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34615384615384615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskVqqDDCudY3JqLykP6PXas3XqymDLQPnurW8mOicj7DX3UWicSuE7Hjdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;figcaption&gt;jmeter 500 个并发，100 件库存&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;报告一&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个 平均响应 是 326 ms ， 50 % 的请求是 245 ms，99% 是 1342 ms ，最小是 21 ms，最大是 1359 ms ，吞吐量是 605/s 。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2655007949125596&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskgA7jV5tGicU9Ntpb4MKlEXaaQMicCZ6C5oibrbZicIj3JC0nMFflPzfiaUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1258&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个成绩。。一言难尽，这还是用了 &lt;strong&gt;MQ 异步下单&lt;/strong&gt; ，还有 &lt;strong&gt;内存标记&lt;/strong&gt;，&lt;strong&gt;Redis 预扣库存&lt;/strong&gt; 的结果，而且是 &lt;strong&gt;预热了 JVM&lt;/strong&gt; 的情况😱&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这最大的开销应该是网络问题，要访问 云服务器 K8S 中的 Redis 以及 本地虚拟机上的 MQ。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者是我的老伙计性能问题，又得跑项目，还得测试，这 CPU ，内存，网卡 估计也忙坏了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单分析下 👇&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;获取秒杀地址&lt;/strong&gt; ， 这里就访问一次 Redis  ，执行 Set 命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;开始秒杀&lt;/strong&gt; 中，涉及的网路操作有&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;校验地址&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是否重复下单&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;预扣库存 lua 脚本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送订单信息到  MQ（虚拟机上）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面把项目搭建到云服务器上再来测下。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;报告二&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里看到 第一个请求 的 RT 都比第二个请求的 小。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3439922480620155&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskLeYR8tYB2dFibaBL77Q8icwuH3FpQ67t8mng1BBcjWmfbDw4KBNKTefQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1032&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Redis&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2700096432015429&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWsk61cxk0wjPUqTOrbuMXP7ylMibT1EPm74RxZ8EKhRHpgG3RPicfGg5kiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1037&quot;/&gt;&lt;figcaption&gt;Redis 内存使用情况（测试前）&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2632084534101825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWsk68X2WxyVI2WTqLkScZPUhwOJBVwKPhFjvhibbYAZfXlG17mxjaDYib5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1041&quot;/&gt;&lt;figcaption&gt;Redis 内存使用情况（使用后）&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，内存多了 0.1M 左右，这是多了 601 个 key&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18232044198895028&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskIgm4OdpVF47NxDbjGfibNOZW2Cbt9tw71dpA4BntiaztMT1Jq0DUCBWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;181&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于怎么多了 32 条 client connection ， 只能做个简单的推测先了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目中使用了这个 redisson 做分布式锁，占用了 25 条&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10140845070422536&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskyroo5ayrsNQewWJAnNNKPdrz8ZuWib7457vZ257f4r4oS0eemv3bPwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;710&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单看下源码&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6103336921420882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskm0S5sCPCejHBFxSuTJRpr2ic4QYgMXibicJlkRJzg918oXib9FuVYzJMUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;929&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿到服务器上的所有连接，排掉之前的 5 条，刚好剩下 32 条。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskZYehc4DRRHHgaZKuawVIOcQib5ge4KcicjGNaTiaYTAeleX0dVcZiav3rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1045&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里看到使用 resp3 的有 7 条，刚好符合，应该是 RedisTemplate 相关创建的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里简单看下源码，  Redis 6 开始默认使用 RESP3 的协议的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49630314232902034&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskeZSLvvWxAJOL4P5A13KGFOC2UqJ1usicpDicTeBbJjrRqwEsugmib7ibLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1082&quot;/&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RabbitMQ&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是从 Prometheus +  Grafana 监控截取的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2212863705972435&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskdhQPkUyfXicIep5Wrwj6S8ibPMqVcBblcBD30nE8ibafFROiaaMeHgF6pA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;figcaption&gt;RabbitMQ 使用情况（测试前）&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34782608695652173&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWsk4eE9ub4TKictnA6DS66u9wCCK1PaZsAu4uUFHzm1LhdfiawRc5a8Pv6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1288&quot;/&gt;&lt;figcaption&gt;RabbitMQ 使用情况（测试中）&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里 发送端和消费端 在一个应用上，共用一条 connection， 发送端创建了 24 个 channel ， 消费端 2 个。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49224806201550386&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskIpWhJvYKPkibsUbD8ia8dv8NWofBUxJicRQRZlILQZHzXWMbvyYKUicxCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1290&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.026993865030674847&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWsklyjOicDcv04Fk54fXSxHqicmzSg9GibcQQf4WUIqsMC3vlIxlesXoVDWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;815&quot;/&gt;&lt;figcaption&gt;发送端第一条 MQ 数据&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.02074688796680498&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskokXjtgIEq5kzXj1PMiaLCkB37tjicdxpgB0IibUFS3FdXORboBm74LO9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;964&quot;/&gt;&lt;figcaption&gt;发送端第一条 MQ 数据被 ACK&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这个监控图可以看到，消费端开始消费的时间点大概是 16:47:00&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而生产者发送第一条消息和被confirm 的时间大概是 16:46:30 ；这个有误差是因为这个监控自动刷新的频率是 15s ，目前是最小的了（可能是我挑的模板问题，或者是这并发太小😂）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47109375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWsk9RBu6pY47pYtjRVnH8Kw1WJWcYUZBa793C8Nwp9fUFVB8KTMnu6Hqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;消费者消费能力，大概每秒 2 个 ack&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3581973581973582&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskasom826P36euFrCB1RWD6eggpicnVgocsgvChicxRibnia6f2gr1GV5jkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1287&quot;/&gt;&lt;figcaption&gt;channel&lt;/figcaption&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;K8S&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;minikube 节点，上面运行了 Redis 主从 , MySQL  主从。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3507853403141361&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWsk7XJkDqLicckibLKxSnOWkrplrriaOzwPTgpZgozyketJvDTX3QBEeCxzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1146&quot;/&gt;&lt;figcaption&gt;K8S的情况（测试前）&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34748010610079577&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYFCrXCDGjoT0qRjZILCaWskSy7vtIR7oJ1bOVSXda3UESCLmviaWE6CprAA2eC54JuMyBicflrUib9lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1131&quot;/&gt;&lt;figcaption&gt;K8S的情况（测试后）&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本没变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面再把 MQ 和 镜像仓库搭建一下，然后再把项目丢上去跑跑看看 ，到时再看看这个测试报告。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;over！🐷&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>89c28660e7044d2eedf42a7bd0e41c67</guid>
<title>记一次使用 spring javaconfig 踩到的坑</title>
<link>https://toutiao.io/k/gbrmjgt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yicuibYlvPgkrmjgxWuEElf7B5MONU9fk4E9ZtpA2e3Rr6sh6HKN9Y04ZzUZEwXLibMfOtbnYvmuiajaazEZiaNxKeQ/640?wx_fmt=png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cz8RAibn0WasK0WJWkkUWuWuOp1K03k5vIrACgnOR18cvfGfRicwxNLlSOuHPzNCkxBHoNEvGXDot2LllicM0Sibibw/640?wx_fmt=png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;span data-mid=&quot;&quot;&gt;蓝字&lt;/span&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrzbA5jTibCrh3749Yd0feA1ztCD48dibOicOK4CQqyZo2Ux07zIdSb070pfBbBJcG3a0w0KRKI8iaaicVRDhjXaMVA/640?wx_fmt=png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/u1f6iaiam5gpSRDHFrUx7fy0tc0h8vfDa7FTQL6Z7nFs6N0K0fiaYsD7IKzJochowfCBg6kxxjquqz1Vs1hgvfbtA/640?wx_fmt=png&quot; data-w=&quot;12&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了简化开发，我部门经常会封装一些通用的类库给业务研发使用，因为业务方的根包路径很经常和我们部门项目的根包是不一样的，因此我们会让业务方在使用我们封装的包时，扫描一下我们的根包，形如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;ComponentScan&lt;/span&gt;(&lt;span&gt;basePackages&lt;/span&gt; = {&quot;&lt;span&gt;com&lt;/span&gt;&lt;span&gt;.aaa&lt;/span&gt;&quot;,&quot;&lt;span&gt;com&lt;/span&gt;&lt;span&gt;.bbb&lt;/span&gt;&quot;})&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过这样就导致了业务方想使用我们的类库，就必须知道我们的根包。这其实是一种间接的耦合。后面我们就全面使用springboot的自动装配，让业务方无需知道我们的根包，也可以使用我们的类库。然而在我们封装的过程中，也遇到一些坑。本文就来复盘一次我们使用spring javaconfig踩到的坑。本文主要是demo示例演示&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;demo示例&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;假设我们封装了一个类库DemoService。示例如下&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DemoService&lt;/span&gt; {&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; DemoProperties demoProperties;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; String version;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;DemoService&lt;/span&gt;&lt;span&gt;(DemoProperties demoProperties)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;this&lt;/span&gt;.demoProperties = demoProperties;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;print&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;version:&quot;&lt;/span&gt; + version + &lt;span&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&quot;&lt;/span&gt; + demoProperties;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getVersion&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; version;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setVersion&lt;/span&gt;&lt;span&gt;(String version)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;this&lt;/span&gt;.version = version;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DemoProperties 类如下&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span&gt;&quot;demo.hello&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DemoProperties {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; getName() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; name;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setName(&lt;span&gt;String&lt;/span&gt; name) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;this&lt;/span&gt;.name = name;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; toString() {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;DemoProperties{&quot;&lt;/span&gt; +&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&quot;name=&#x27;&quot;&lt;/span&gt; + name + &lt;span&gt;&#x27;\&#x27;&#x27;&lt;/span&gt; +&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有个针对DemoService的扩展后置处理器&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DemoBeanFactoryPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryPostProcessor&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanFactory&lt;/span&gt;&lt;span&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        BeanDefinition helloService = beanFactory.getBeanDefinition(&lt;span&gt;&quot;demoService&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        helloService.getPropertyValues().add(&lt;span&gt;&quot;version&quot;&lt;/span&gt;,&lt;span&gt;&quot;V1&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; demoService demoBeanFactoryPostProcessor&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;javaconfig配置如下&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(DemoProperties.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;public class DemoConfig implements InitializingBean {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    private DemoProperties demoProperties;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public DemoService demoService(){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;DemoService&lt;/span&gt;(demoProperties);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    @&lt;span&gt;PostConstruct&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;(){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.out&lt;/span&gt;&lt;span&gt;.println&lt;/span&gt;(&lt;span&gt;&quot;模拟业务初始化。。。&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    @&lt;span&gt;Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    @&lt;span&gt;ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;DemoBeanFactoryPostProcessor&lt;/span&gt; &lt;span&gt;demoBeanFactoryPostProcessor&lt;/span&gt;(){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;DemoBeanFactoryPostProcessor&lt;/span&gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    @&lt;span&gt;Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;() &lt;span&gt;throws&lt;/span&gt; &lt;span&gt;Exception&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.out&lt;/span&gt;&lt;span&gt;.println&lt;/span&gt;(&lt;span&gt;&quot;xxxxxxxx:&quot;&lt;/span&gt; + demoProperties);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;配置的application.properties如下&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;server.port=8086&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;demo.hello.name=zhangsan&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启动类如下&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DemoLoaderApplication&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationRunner&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;private&lt;/span&gt; DemoService demoService;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    SpringApplication.run(DemoLoaderApplication.class, args);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;(ApplicationArguments args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    System.out.println(demoService.print());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;以上就是完整的示例demo，看完示例demo，可以回答如下问题&lt;/p&gt;&lt;p&gt;1、javaconfig中的&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;PostConstruct&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;(&lt;span/&gt;)&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;模拟业务初始化。。。&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;是否会执行？&lt;/p&gt;&lt;p&gt;2、javaconfig中的&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;xxxxxxxx:&quot;&lt;/span&gt; + demoProperties);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;是否会执行，如果会执行，demoProperties是否有值？&lt;/p&gt;&lt;p&gt;3、启动类中的&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;@&lt;span&gt;Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  public void run(ApplicationArguments args) throws Exception {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;System&lt;/span&gt;&lt;span&gt;.out&lt;/span&gt;&lt;span&gt;.println&lt;/span&gt;(&lt;span&gt;demoService&lt;/span&gt;&lt;span&gt;.print&lt;/span&gt;());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;打印的值是多少？&lt;/p&gt;&lt;p&gt;demoService的print方法如下&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;print&lt;/span&gt;(){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;version:&quot;&lt;/span&gt; + version + &lt;span&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&quot;&lt;/span&gt; + demoProperties;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们可以看下输出的结果&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6648501362397821&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxJSBicFEjBibbF3vnwwHibT9iae16Asl1SWgsetEBsKQs2C8TgrTicB6MG22hiaoPVsQBeSbhJgbjjk1rrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;734&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;由输出的信息，我们可以发现@PostConstruct没生效、afterPropertiesSet方法生效，由afterPropertiesSet打印的内容，我们可以得出DemoProperties 依赖注入失效，即 @Autowired失效，由print（）方法我们可以得出DemoBeanFactoryPostProcessor生效了&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;排坑&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;答案就在我截图圈红的地方&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.608274647887324&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxJSBicFEjBibbF3vnwwHibT9iael1z9HOVC84sIhQ9Zs45r4UXAhfoGaKMQCoY21DDDGibuAXicRgac3b0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1136&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38083333333333336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxJSBicFEjBibbF3vnwwHibT9iaeNu4oHribRCYM1aiabhGwBFdWiaq0mcXcJEx4MI3cxfvEtuxjwLrp3z5sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;@PostConstruct和@Autowired失效的原因是spring在进行ioc时，会先调用bean工厂的后置处理器进行beanFactory增强，spring会根据bean工厂的beanName去取beanFactory后置增强器，如果beanFactory后置增强器的bean此时还不存在，spring就会走doCreateBean进行创建，在创建的时候，会判断是否需要使用工厂方法进行实例化，我们使用@Bean时，它采用就是工厂方法。在通过工厂实例方法创建beanFactory后置增强器时，他会调用&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;org&lt;/span&gt;&lt;span&gt;.springframework&lt;/span&gt;&lt;span&gt;.beans&lt;/span&gt;&lt;span&gt;.factory&lt;/span&gt;&lt;span&gt;.support&lt;/span&gt;&lt;span&gt;.SimpleInstantiationStrategy&lt;/span&gt;&lt;span&gt;#instantiate&lt;/span&gt;(&lt;span&gt;org&lt;/span&gt;&lt;span&gt;.springframework&lt;/span&gt;&lt;span&gt;.beans&lt;/span&gt;&lt;span&gt;.factory&lt;/span&gt;&lt;span&gt;.support&lt;/span&gt;&lt;span&gt;.RootBeanDefinition&lt;/span&gt;, &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.String&lt;/span&gt;, &lt;span&gt;org&lt;/span&gt;&lt;span&gt;.springframework&lt;/span&gt;&lt;span&gt;.beans&lt;/span&gt;&lt;span&gt;.factory&lt;/span&gt;&lt;span&gt;.BeanFactory&lt;/span&gt;, &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.Object&lt;/span&gt;, &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.reflect&lt;/span&gt;&lt;span&gt;.Method&lt;/span&gt;, &lt;span&gt;java&lt;/span&gt;&lt;span&gt;.lang&lt;/span&gt;&lt;span&gt;.Object&lt;/span&gt;...)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46662125340599453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxJSBicFEjBibbF3vnwwHibT9iaeOBK9QYEUo2GT3S2YyoQOKRKO9aicJiaGMFco2tjHB3qgmGDn0yURbxgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1468&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;此时factoryBean就必须一定得有值，否则会报错。而这个factoryBean就是示例中的DemoConfig 。&lt;/span&gt;&lt;strong&gt;这就意味着DemoConfig在DemoBeanFactoryPostProcessor在实例化前，就得先创建好&lt;/strong&gt;&lt;span&gt;。而此时&lt;/span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6406844106463878&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxJSBicFEjBibbF3vnwwHibT9iae0RU949jFjlcZNInH8V4dPw1bESY0VST8n4Rs9pbyvGtkddxCnP3LUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot;/&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;span&gt;registerBeanPostProcessors还没执行到，意味着各种spring的bean后置处理器还没准备好。比如解析@Autowired注解的AutowiredAnnotationBeanPostProcessor以及解析@PostConstruct注解的CommonAnnotationBeanPostProcessor都还没准备好。因此@Autowired和@PostConstruct自然就不会生效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;04&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;解决方法&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;方法一：DemoBeanFactoryPostProcessor的创建方法改为静态方法&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tnNTe6QOaYx4HLiasWDSSibkvBwkySahn1jUGyrqSWWsCrd8WeibGicCbaDB9b5K4cTlaCxcmzv2uyEWNrQke47Vag/640?wx_fmt=png&quot; data-w=&quot;48&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public static DemoBeanFactoryPostProcessor demoBeanFactoryPostProcessor(){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;DemoBeanFactoryPostProcessor&lt;/span&gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为是静态方法，他依赖就是类本身而非类实例对象，DemoConfig此时就会让正常的spring bean的生命周期来&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;方法二：DemoBeanFactoryPostProcessor单独使用一个配置类&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tnNTe6QOaYx4HLiasWDSSibkvBwkySahn1jUGyrqSWWsCrd8WeibGicCbaDB9b5K4cTlaCxcmzv2uyEWNrQke47Vag/640?wx_fmt=png&quot; data-w=&quot;48&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;public class DemoBeanFactoryPostProcessorConfig {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public DemoBeanFactoryPostProcessor demoBeanFactoryPostProcessor(){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;DemoBeanFactoryPostProcessor&lt;/span&gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;方法三：使用@Import注入&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tnNTe6QOaYx4HLiasWDSSibkvBwkySahn1jUGyrqSWWsCrd8WeibGicCbaDB9b5K4cTlaCxcmzv2uyEWNrQke47Vag/640?wx_fmt=png&quot; data-w=&quot;48&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(DemoProperties.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@Import&lt;/span&gt;(DemoBeanFactoryPostProcessor.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;public class DemoConfig implements InitializingBean {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    private DemoProperties demoProperties;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public DemoService demoService(){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;DemoService&lt;/span&gt;(demoProperties);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;方法四：使用@Component + @ComponentScan&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/tnNTe6QOaYx4HLiasWDSSibkvBwkySahn1jUGyrqSWWsCrd8WeibGicCbaDB9b5K4cTlaCxcmzv2uyEWNrQke47Vag/640?wx_fmt=png&quot; data-w=&quot;48&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DemoBeanFactoryPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryPostProcessor&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanFactory&lt;/span&gt;&lt;span&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        BeanDefinition helloService = beanFactory.getBeanDefinition(&lt;span&gt;&quot;demoService&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        helloService.getPropertyValues().add(&lt;span&gt;&quot;version&quot;&lt;/span&gt;,&lt;span&gt;&quot;V1&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; demoService demoBeanFactoryPostProcessor&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(DemoProperties.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@ComponentScan&lt;/span&gt;(basePackageClasses = DemoBeanFactoryPostProcessor.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;public class DemoConfig implements InitializingBean {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    private DemoProperties demoProperties;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    public DemoService demoService(){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;DemoService&lt;/span&gt;(demoProperties);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;05&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;其实本文的解决思路就是对spring bean的创建过程要有一定了解。其次我们在利用spring的扩展点时候，我们多使用spring自带的内置扩展对象，比如我们在bean初始化时，要做一些扩展时，尽量使用InitializingBean而非使用@PostConstruct。这样可以避免当出现上面示例的坑时，导致代码不执行而出现bug，而这种bug往往隐藏比较深。当然如果有自信不会出现这种问题，用@PostConstruct也是可以，毕竟用注解的方式相对也简洁一些&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5818ccd39033cb7ef96f07aa6583d567</guid>
<title>记一次线上 FGC 问题排查</title>
<link>https://toutiao.io/k/jw0tejf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg3MTIwNjY3MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ylWmoHoic1N6VWVqet95D1VKZibeKjId2zCve2On5VBFRO6fMpdCYiaBgJstyKKxddFYEyOqhDSTCPWA/0?wx_fmt=png&quot; data-nickname=&quot;咕咕鸡技术专栏&quot; data-alias=&quot;guguji_fly&quot; data-signature=&quot;擅长风控领域系统研发，有着丰富的大型系统设计、开发和调优的经验，在不断探索和学习的过程中，积累了宝贵的编程经验，希望我分享的文章能够给每一位读者带来帮助！&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2&gt;引言&lt;/h2&gt;&lt;p&gt;本文记录一次线上 GC 问题的排查过程与思路，希望对各位读者有所帮助。过程中也走了一些弯路，现在有时间沉淀下来思考并总结出来分享给大家，希望对大家今后排查线上 GC 问题有帮助。&lt;/p&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;服务新功能发版一周后下午，突然收到 CMS GC 告警，导致单台节点被拉出，随后集群内每个节点先后都发生了一次 CMS GC，拉出后的节点垃圾回收后接入流量恢复正常（事后排查发现被重启了）。&lt;/p&gt;&lt;p&gt;告警信息如下（已脱敏）：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;322&quot; data-backw=&quot;319&quot; data-ratio=&quot;1.0102827763496145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ynOhF5Atoz92HrmEicafXLcUmC3WbxQibLnQn1XpCo9z5hX5LJ6diamWW5ooIyqPGLRU8YCPKrNBDRzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;778&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;多个节点几乎同时发生 GC 问题，且排查自然流量监控后发现并未有明显增高，基本可以确定是有 GC 问题的，需要解决。&lt;/p&gt;&lt;h2&gt;排查过程&lt;/h2&gt;&lt;h3&gt;GC 日志排查&lt;/h3&gt;&lt;p&gt;GC 问题首先排查的应该是 GC 日志，日志能能够清晰的判定发生 GC 的那一刻是什么导致的 GC，通过分析 GC 日志，能够清晰的得出 GC 哪一部分在出问题，如下是 GC 日志示例：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.514&lt;/span&gt;: [GC (Allocation Failure) [PSYoungGen: &lt;span class=&quot;code-snippet__number&quot;&gt;4445&lt;/span&gt;K-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;1386&lt;/span&gt;K(&lt;span class=&quot;code-snippet__number&quot;&gt;28672&lt;/span&gt;K)] &lt;span class=&quot;code-snippet__number&quot;&gt;168285&lt;/span&gt;K-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;165234&lt;/span&gt;K(&lt;span class=&quot;code-snippet__number&quot;&gt;200704&lt;/span&gt;K), &lt;span class=&quot;code-snippet__number&quot;&gt;0.0036830&lt;/span&gt; secs] [Times: user=&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt; sys=&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt;, real=&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt; secs]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.518&lt;/span&gt;: [&lt;span class=&quot;code-snippet__function&quot;&gt;Full &lt;span class=&quot;code-snippet__title&quot;&gt;GC&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(Ergonomics)&lt;/span&gt; [PSYoungGen: 1386K-&amp;gt;0&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;28672&lt;/span&gt;K)&lt;/span&gt;] [ParOldGen: 163848K-&amp;gt;165101&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;172032&lt;/span&gt;K)&lt;/span&gt;] 165234K-&amp;gt;165101&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;200704&lt;/span&gt;K)&lt;/span&gt;, [Metaspace: 3509K-&amp;gt;3509&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1056768&lt;/span&gt;K)&lt;/span&gt;], 0.0103061 secs] [Times: user&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;0.05&lt;/span&gt; sys=&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt;, real=&lt;span class=&quot;code-snippet__number&quot;&gt;0.01&lt;/span&gt; secs]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.528&lt;/span&gt;: [GC (Allocation Failure) [PSYoungGen: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;K-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;K(&lt;span class=&quot;code-snippet__number&quot;&gt;28672&lt;/span&gt;K)] &lt;span class=&quot;code-snippet__number&quot;&gt;165101&lt;/span&gt;K-&amp;gt;&lt;span class=&quot;code-snippet__number&quot;&gt;165101&lt;/span&gt;K(&lt;span class=&quot;code-snippet__number&quot;&gt;200704&lt;/span&gt;K), &lt;span class=&quot;code-snippet__number&quot;&gt;0.0019968&lt;/span&gt; secs] [Times: user=&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt; sys=&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt;, real=&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt; secs]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.530&lt;/span&gt;: [&lt;span class=&quot;code-snippet__function&quot;&gt;Full &lt;span class=&quot;code-snippet__title&quot;&gt;GC&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(Allocation Failure)&lt;/span&gt; [PSYoungGen: 0K-&amp;gt;0&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;28672&lt;/span&gt;K)&lt;/span&gt;] [ParOldGen: 165101K-&amp;gt;165082&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;172032&lt;/span&gt;K)&lt;/span&gt;] 165101K-&amp;gt;165082&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;200704&lt;/span&gt;K)&lt;/span&gt;, [Metaspace: 3509K-&amp;gt;3509&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1056768&lt;/span&gt;K)&lt;/span&gt;], 0.0108352 secs] [Times: user&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;0.03&lt;/span&gt; sys=&lt;span class=&quot;code-snippet__number&quot;&gt;0.00&lt;/span&gt;, real=&lt;span class=&quot;code-snippet__number&quot;&gt;0.01&lt;/span&gt; secs]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;如上 GC 日志能很明显发现导致 Full GC 的问题是：Full GC 之后，新生代内存没有变化，老年代内存使用从 165101K 降低到 165082K （几乎没有变化）。这个程序最后内存溢出了，因为没有可用的堆内存创建 70m 的大对象。&lt;/p&gt;&lt;p&gt;但是，生产环境总是有奇奇怪怪的问题，由于服务部署在 K8s 容器，且运维有对服务心跳检测，当程序触发 Full GC 时，整个系统 Stop World，连续多次心跳检测失败，则判定为当前节点可能出故障（硬件、网络、BUG 等等问题），则直接拉出当前节点，并立即重建，此时之前打印的 GC 日志都是在当前容器卷内，一旦重建，所有日志全部丢失，也就无法通过 GC 日志排查问题了。&lt;/p&gt;&lt;h3&gt;JVM 监控埋点排查&lt;/h3&gt;&lt;p&gt;上述 GC 日志丢失问题基本无解，发生 GC 则立即重建，除非人为干预，否则很难拿到当时的 GC 日志，且很难预知下次发生 GC 问题时间（如果能上报 GC 日子就不会有这样的问题，事后发现有，但是我没找到。。）。&lt;/p&gt;&lt;p&gt;此时，另一种办法就是通过 JVM 埋点监控来排查问题。企业应用都会配备完备的 JVM 监控看板，就是为了能清晰明了的看到“&lt;strong&gt;事故现场&lt;/strong&gt;”，通过监控，可以清楚的看到 JVM 内部在时间线上是如何分配内存及回收内存的。&lt;/p&gt;&lt;p&gt;JVM 监控用于监控重要的 JVM 指标，包括堆内存、非堆内存、直接缓冲区、内存映射缓冲区、GC 累计信息、线程数等。&lt;/p&gt;&lt;p&gt;主要关注的核心指标如下：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;GC（垃圾收集）瞬时和累计详情&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;FullGC 次数&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;YoungGC 次数&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;FullGC 耗时&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;YoungGC 耗时&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;堆内存详情&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;堆内存总和&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;堆内存老年代字节数&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;堆内存年轻代 Survivor 区字节数&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;堆内存年轻代 Eden 区字节数&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;已提交内存字节数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;元空间元空间字节数&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;非堆内存&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;非堆内存提交字节数&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;非堆内存初始字节数&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;非堆内存最大字节数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;直接缓冲区&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;DirectBuffer 总大小（字节）&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;DirectBuffer 使用大小（字节）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;JVM 线程数&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;线程总数量&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;死锁线程数量&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;新建线程数量&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;阻塞线程数量&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;可运行线程数量&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;终结线程数量&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;限时等待线程数量&lt;/span&gt;&lt;span&gt;    &lt;span&gt;•&lt;/span&gt;等待中线程数量&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;发生 GC 问题，重点关注的就是这几个指标，大致就能圈定 GC 问题了。&lt;/p&gt;&lt;h4&gt;堆内存排查&lt;/h4&gt;&lt;p&gt;首先查看堆内存，确认是否有&lt;strong&gt;内存溢出&lt;/strong&gt;（指无法申请足够的内存导致），对内监控如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;88&quot; data-backw=&quot;319&quot; data-ratio=&quot;0.27719821162444114&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ynOhF5Atoz92HrmEicafXLcUwCFCT0Z4Sj2EMyq863FEEuibtmBB6U8xyC6SVp6u73qP9ksUGujMPfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1342&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;可以看到发生 Full GC 后，堆内存明显降低了很多，但是在未发生大量 Full GC 后也有内存回收到和全量 GC 同等位置，所以可以断定堆内存是可以正常回收的，不是导致大量 Full GC 的元凶。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;非堆内存排查&lt;/h4&gt;&lt;p&gt;非堆内存指 Metaspace 区域，监控埋点如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;88&quot; data-backw=&quot;319&quot; data-ratio=&quot;0.27596439169139464&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ynOhF5Atoz92HrmEicafXLcUnI2jhwel1s8cUDEY8gGteB6ic73XZU4oK5BbuUJWnxKhGuM2SfAVeOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1348&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以看到发生告警后，非堆内存瞬间回收很多（因为服务器被健康检查判定失效后重建，相当于重新启动，JVM 重新初始化），此处如果有 GC 排查经验的人一定能立即笃定，metaspace 是有问题的。&lt;/p&gt;&lt;p&gt;Metaspace 是用来干嘛的？JDK8 的到来，JVM 不再有 PermGen（永久代），但类的元数据信息（metadata）还在，只不过不再是存储在连续的堆空间上，而是移动到叫做 “Metaspace” 的本地内存（Native memory）中。&lt;/p&gt;&lt;p&gt;那么何时会加载类信息呢？&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;程序运行时：当运行 Java 程序时，该程序所需的类和方法。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;类被引用时：当程序首次引用某个类时，加载该类。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;反射：当使用反射 API 访问某个类时，加载该类。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;动态代理：当使用动态代理创建代理对象时，加载该对象所需的类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;由上得出结论，如果一个服务内没有大量的反射或者动态代理等类加载需求时，讲道理，程序启动后，类的加载数量应该是波动很小的（不排除一些异常堆栈反射时也会加载类导致增加），但是如上监控显示，GC 后，metaspace 的内存使用量一直缓步增长，即程序内不停地制造“类”。&lt;/p&gt;&lt;p&gt;查看 JVM 加载类监控如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;88&quot; data-backw=&quot;319&quot; data-ratio=&quot;0.2746268656716418&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ynOhF5Atoz92HrmEicafXLcUQXWuflFQYDoMbBHKmAhTx9lJNR499iaEJGSJXGk1LR3m6VzQ1a4VDGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1340&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由上监控，确实是加载了大量的类，数量趋势和非堆使用量趋势吻合。&lt;/p&gt;&lt;p&gt;查看当前 JVM 设置的非堆内存大小如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;556&quot; data-backw=&quot;319&quot; data-ratio=&quot;1.7415143603133159&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ynOhF5Atoz92HrmEicafXLcUH0UU5BP2NJxQC0hPwnRQ8CbszOibibAx5qNGqBYW4dlWAeXNMfFAbgtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;766&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;MetaspaceSize &amp;amp; MaxMetaspaceSize = 1024 M，由上面非堆内存使用监控得出，使用量已接近 1000 M，无法在分配足够的内存来加载类，最终导致发生 Full GC 问题。&lt;/p&gt;&lt;h3&gt;程序代码排查&lt;/h3&gt;&lt;p&gt;由上面排查得出的结论：&lt;strong&gt;程序内在大量的创建类导致非堆内存被打爆&lt;/strong&gt;。结合当前服务内存在大量使用 Groovy 动态脚本功能，大概率应该是创建脚本出了问题，脚本创建动态类代码如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GroovyObject&lt;/span&gt;&lt;span&gt; buildGroovyObject&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; script&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;GroovyClassLoader&lt;/span&gt;&lt;span&gt; classLoader &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GroovyClassLoader&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Class&lt;/span&gt;&lt;span&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span&gt; groovyClass &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; classLoader&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;parseClass&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;GroovyObject&lt;/span&gt;&lt;span&gt; groovyObject &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;GroovyObject&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; groovyClass&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;newInstance&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        classLoader&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;clearCache&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;groovy buildScript success: {}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; groovyObject&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; groovyObject&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;RuntimeException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;buildScript error&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            classLoader&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;IOException&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;close GroovyClassLoader error&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;线上打开日志，确实证明了在不停的创建类。&lt;/p&gt;&lt;p&gt;脚本创建类导致堆内存被打爆，之间也是踩过坑的，针对同一个脚本（MD5 值相同），则会直接拿缓存，不会重复创建类，缓存 check 逻辑如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GroovyObject&lt;/span&gt;&lt;span&gt; buildScript&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; scriptId&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; script&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Validate&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;notEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scriptId&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;scriptId is empty&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Validate&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;notEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scriptId&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;script is empty&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// 尝试缓存获取&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; currScriptMD5 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DigestUtils&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;md5DigestAsHex&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getBytes&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;GROOVY_OBJECT_CACHE_MAP&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;containsKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scriptId&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; currScriptMD5&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;GROOVY_OBJECT_CACHE_MAP&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scriptId&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;getScriptMD5&lt;/span&gt;&lt;span&gt;()))&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;groovyObjectCache hit, scriptId: {}&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; scriptId&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GROOVY_OBJECT_CACHE_MAP&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scriptId&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;getGroovyObject&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// 创建&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;GroovyObject&lt;/span&gt;&lt;span&gt; groovyObject &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; buildGroovyObject&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// 塞入缓存&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        GROOVY_OBJECT_CACHE_MAP&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scriptId&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GroovyCacheData&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;builder&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;scriptMD5&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;currScriptMD5&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;groovyObject&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;groovyObject&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Exception&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;RuntimeException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;scriptId: %s buildGroovyObject error&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; scriptId&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GROOVY_OBJECT_CACHE_MAP&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;scriptId&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;getGroovyObject&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此处代码逻辑在之前的测试中都是反复验证过的，不会存在问题，即只有缓存 Key 出问题导致了类的重复加载。结合最近修改上线的逻辑，排查后发现，&lt;strong&gt;scriptId 存在重复的可能，导致不同脚本，相同 scriptId 不停重复加载&lt;/strong&gt;（加载的频次 10 分钟更新一次，所以非堆使用缓慢上升）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;此处埋了一个小坑&lt;/strong&gt;：加载的类使用 Map 存储的，即同一个 cacheKey 调用 Map.put() 方法，重复加载的类会被后面加载的类给替换掉，即之前加载的类已经不在被 Map 所“持有”，会被垃圾回收器回收掉，按理来说 Metaspace 不应该一直增长下去！？&lt;/p&gt;&lt;p&gt;提示：&lt;strong&gt;类加载与 Groovy 类加载、Metaspace 何时会被回收。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;由于篇幅原因，本文就不在此处细究原因了，感兴趣的朋友自行 Google 或者关注一下我，后续我再专门开一章详解下原因。&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;知其然知其所以然。&lt;/p&gt;&lt;p&gt;想要系统性地掌握 GC 问题处理方法，还是得了解 GC 的基础：基础概念、内存划分、分配对象、收集对象、收集器等。掌握常用的分析 GC 问题的工具，如 &lt;span&gt;gceasy.io&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 在线 GC 日志分析工具，此处笔者参照了美团技术团队文章 &lt;span&gt;Java 中 9 种常见的 CMS GC 问题分析与解决&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt; 收益匪浅，推荐大家阅读。&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; gceasy.io: &lt;em&gt;https://gceasy.io/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; Java 中 9 种常见的 CMS GC 问题分析与解决: &lt;em&gt;https://tech.meituan.com/2020/11/12/java-9-cms-gc.html&lt;/em&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3MTIwNjY3MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VaAN3q859ylWmoHoic1N6VWVqet95D1VKZibeKjId2zCve2On5VBFRO6fMpdCYiaBgJstyKKxddFYEyOqhDSTCPWA/0?wx_fmt=png&quot; data-nickname=&quot;咕咕鸡技术专栏&quot; data-alias=&quot;guguji_fly&quot; data-signature=&quot;擅长风控领域系统研发，有着丰富的大型系统设计、开发和调优的经验，在不断探索和学习的过程中，积累了宝贵的编程经验，希望我分享的文章能够给每一位读者带来帮助！&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;h2&gt;往期精彩&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3MTIwNjY3MA==&amp;amp;mid=2247483756&amp;amp;idx=1&amp;amp;sn=ad2ed1bb69de534299aa3e8f22ddee97&amp;amp;scene=21#wechat_redirect&quot; title=&quot;从 0 到 1 智能风控决策引擎构建&quot; data-linktype=&quot;2&quot;&gt;从 0 到 1 智能风控决策引擎构建&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3MTIwNjY3MA==&amp;amp;mid=2247483737&amp;amp;idx=1&amp;amp;sn=857c2fa9e3514e2da0d0a7298dfa7f7a&amp;amp;scene=21#wechat_redirect&quot; title=&quot;性能优化必备——火焰图&quot; data-linktype=&quot;2&quot;&gt;性能优化必备——火焰图&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3MTIwNjY3MA==&amp;amp;mid=2247483745&amp;amp;idx=1&amp;amp;sn=e10bec68e51a8dca226cacce9a5258d5&amp;amp;scene=21#wechat_redirect&quot; title=&quot;我是怎么入行做风控的&quot; data-linktype=&quot;2&quot;&gt;我是怎么入行做风控的&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;欢迎关注公众号：咕咕鸡技术专栏&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;个人技术博客：https:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3435185185185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VaAN3q859yl3FVnvL8iaQsBY76PNfeeEAibp11q60ibNNS04LsibAvpJEkPIno9qrxiaPcF1uDDUtM2icHAnJpyvK38Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8ee264fd966e6878821012383963e47c</guid>
<title>实时数仓架构在流利说的实践</title>
<link>https://toutiao.io/k/1a7x7ay</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;流利说最开始的实时数仓是基于 Flink 1.9 搭建的，彼时Flink SQL 的生态也不够成熟，我们投入了大量的精力，使用 Yarn 做资源管理，修改了 SQL-Client 等组件，优化提交方式来提高开发效率，但是随着 Flink 社区的快速发展，此时 Flink 1.13 版本已经相对稳定，Flink SQL connector 也更加完善，可以将 Flink on K8s 资源管理应用于生产环境，所以我们将实时数仓中 Flink 的版本往前推进了一大步，并随即带动了其他生态组件的引入或升级。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实时数仓可以为我们带来什么&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;得益于开源社区对实时计算的推动，针对我们当下的数据平台的情况，实时数仓能够为我们解决的是&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据同步&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;秒级别实时数据处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;打通湖上数据达到实时离线一体化&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;技术方案选型&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据存储方案选型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在主流的数据糊存储方案主要有 Delta、Hudi 和 Iceberg，Delta 与 Spark 是深度融合的，但由于我们已经选定了 Flink 作为实时计算引擎，故数据湖存储方案会在 Hudi 和 Iceberg 中进行比较，比较的详情如下。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;比较维度&lt;/th&gt;&lt;th&gt;Hudi&lt;/th&gt;&lt;th&gt;Iceberg&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;云厂商支持程度&lt;/td&gt;&lt;td&gt;阿里云、AWS&lt;/td&gt;&lt;td&gt;阿里云&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;小文件合并&lt;/td&gt;&lt;td&gt;自动处理&lt;/td&gt;&lt;td&gt;V1 版本表支持，需要手动处理&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;稳定性&lt;/td&gt;&lt;td&gt;稳定&lt;/td&gt;&lt;td&gt;稳定&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;是否支持sql&lt;/td&gt;&lt;td&gt;支持&lt;/td&gt;&lt;td&gt;支持&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;更新删除支持情况&lt;/td&gt;&lt;td&gt;支持&lt;/td&gt;&lt;td&gt;V2 版本表支持&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;主流执行引擎支持&lt;/td&gt;&lt;td&gt;Flink、Spark、Trino、Presto&lt;/td&gt;&lt;td&gt;Flink、Spark、Trino、Presto&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;语言支持程度&lt;/td&gt;&lt;td&gt;Java、Scala、Python 及 SQL&lt;/td&gt;&lt;td&gt;Java、Scala、Python 及 SQL&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 Iceberg V1 版本表不支持 Upsert ，Iceberg V2版本支持 Upsert 但是在小文件合并时存在问题，且 Iceberg 需要通过额外任务来进行小文件合并，最终选择 Hudi 作为数据湖存储方案。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Flink 开发平台选型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当前流利说大数据体系依托于 Aliyun EMR 集成 Hadoop 环境，维护实时数据运维平台成本较高，所以调研之后选择了阿里云实时计算 Flink （VVP）作为我们的开发平台。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们关注 VVP 具备的能力主要有如下几个方面：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;基于 K8s 进行部署，支持 Session 和 Appliction 模式提交任务，支持弹性伸缩&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Flink SQL 开发界面，交互式的 Debug 数据输出，代码版本控制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集群高可用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;元数据管理，支持接入独立的 Hive Metastore&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自定义 Connector 和 UDF&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Checkpoint 支持读写 OSS&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;任务监控支持外部的 Prometheus&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多版本任务&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VVP 提高了我们的开发效率，让我们更加专注于实现数据架构。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;维表存储方案选型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Flink 官方提供 Connector 的支持情况见官网 Supported Connectors，根据业务情况整理如下几种类型。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Version&lt;/th&gt;&lt;th&gt;Source&lt;/th&gt;&lt;th&gt;Sink&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;JDBC&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;Bounded Scan, Lookup&lt;/td&gt;&lt;td&gt;Streaming Sink, Batch Sink&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HBase&lt;/td&gt;&lt;td&gt;1.4.x &amp;amp; 2.2.x&lt;/td&gt;&lt;td&gt;Bounded Scan, Lookup&lt;/td&gt;&lt;td&gt;Streaming Sink, Batch Sink&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Elasticsearch&lt;/td&gt;&lt;td&gt;6.x &amp;amp; 7.x&lt;/td&gt;&lt;td&gt;Not supported&lt;/td&gt;&lt;td&gt;Streaming Sink, Batch Sink&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上表中可以看出，Flink 官方已经可以使用 JDBC 和 HBase 作为维表进行 Lookup Join，特性如下。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;优点&lt;/th&gt;&lt;th&gt;缺点&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;JDBC&lt;/td&gt;&lt;td&gt;官方支持，可直接使用业务库作为维表，无需数据同步&lt;/td&gt;&lt;td&gt;业务高峰时对数据库性能有较大损耗，可能对业务造成影响&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HBase&lt;/td&gt;&lt;td&gt;官方支持，分布式服务，可支持高QPS，通过 RowKey 可进行快速检索&lt;/td&gt;&lt;td&gt;仅支持通过 RowKey 进行关联，Flink 1.13.x 对删除操作存在一定争议&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Elasticsearch&lt;/td&gt;&lt;td&gt;分布式服务，可支持高 QPS，可通过唯一 Id 进行检索，也可通过其他字段进行关联&lt;/td&gt;&lt;td&gt;官方不支持，维表过大，效率较 HBase 低&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，因历史数据中存在需要通过多个字段进行关联的情况，需要通过非唯一 id 进行关联，如果使用 HBase 需将一份数据存储为多份数据，会造成一定资源浪费，且会导致系统比较复杂，不利于后续的维护和管理。对于 Elasticsearch 检索较慢，可以在业务允许的范围内，通过 Cache 来进行一定程度优化。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Connector 开发&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于官方提供的文档、接口和我们的需求，我们开发了 Flink-Elasticsearch-connector 并同时支持 Source (Scan, Lookup)和 Sink(Streaming Sink, Batch Sink)，即读取和写入数据。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实时数仓整体架构&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7686746987951807&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/IJlqcHFxF3Yib8Zns3nBy1RnTia7rUfiaoI32LUEFOeSsQd8cw5LHALHcY3hgHcuaytF1jYUocmf06ngWKKcibNJBA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;830&quot;/&gt;&lt;span&gt;实时数仓架构图&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实时数仓平台架构图如上，存储托管于 Kafka 和 OSS，OSS 中的表主要是 Hudi 类型，VVP 是阿里云托管的实时计算平台，主要提供开发，运维和资源管理等功能，实现 Flink 数据开发运维一体化，提高业务开发效率。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/IJlqcHFxF3Yib8Zns3nBy1RnTia7rUfiaoIYZcY7nN6EVwCaKribXOehwtOEzLXEuLj5LvOAkHzuf6oyTBVrGgW1vw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;span&gt;实时计算数据流图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实时计算数据流图如上，几个重要的关键点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;a. 业务数据库和日志数据分别通过 CDC 和 Flume 的方式采集到 Kafka 作为源数据；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;b. 维表数据通过 Flink 连接器同步存入 Elasticsearch；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;c. Flink Join 维表数据计算存储到 Kafka， 这里采用 Kafka 的原因主要是 User Profile Platform（用户画像系统）对实时性要求较高；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;d. Flink 从源数据中同步存入 Hudi 并进行分层处理计算；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;e. Hudi 表的所有源数据会自动同步到流利说独立部署的 Hive Metastore；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;f. 使用 Trino 引擎对数据做实时在线分析，Superset 报表可以自动生成 Trino SQL 来获取结果，SQL Buffet（流利说数据分析平台）提交自定义 SQL 交互式分析；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;g. Hudi 的数据也可以被其他系统所使用，例如数据质量，数据指标等。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据开发案例&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据接入&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先通过 CDC 将 Mysql 的 Binlog 实时同步到 Kafka 对应 Topic 中，相应数据格式为 Debezium Json。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Hudi 表接入开发流程&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用阿里云实时计算 Flink 作为流式任务调度和任务管理平台&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过 FlinkSQL 将历史数据同步到 Hudi 表中&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;-- Hudi 表 DDL 语句&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt; &lt;span&gt;`catalog`&lt;/span&gt;.&lt;span&gt;`db_name`&lt;/span&gt;.&lt;span&gt;`table_name`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;id&lt;/span&gt;           &lt;span&gt;BIGINT&lt;/span&gt;,&lt;br/&gt;  xxx          &lt;span&gt;STRING&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`data_date`&lt;/span&gt; &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;),&lt;br/&gt;  PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;id&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;ENFORCED&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;span&gt;WITH&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;&#x27;connector&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;hudi&#x27;&lt;/span&gt;, &lt;br/&gt;  &lt;span&gt;&#x27;table.type&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;COPY_ON_WRITE&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;write.tasks&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;2&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;index.global.enabled&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;true&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;index.bootstrap.enabled&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;true&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;read.streaming.enabled&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;true&#x27;&lt;/span&gt;,                         &lt;br/&gt;  &lt;span&gt;&#x27;oss.endpoint&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;,                         &lt;br/&gt;  &lt;span&gt;&#x27;accessKeyId&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;,           &lt;br/&gt;  &lt;span&gt;&#x27;accessKeySecret&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;path&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;oss://xxx&#x27;&lt;/span&gt;,    &lt;br/&gt;  &lt;span&gt;&#x27;hive_sync.enable&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;true&#x27;&lt;/span&gt;, &lt;br/&gt;  &lt;span&gt;&#x27;hive_sync.mode&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;hms&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;hive_sync.db&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;hudi&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;hive_sync.metastore.uris&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;hive_sync.table&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;, &lt;br/&gt;  &lt;span&gt;&#x27;compaction.tasks&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;1&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;hoodie.cleaner.commits.retained&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;10&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;hoodie.datasource.write.precombine.field&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;updated_at&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;hoodie.datasource.write.recordkey.field&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;id&#x27;&lt;/span&gt;&lt;br/&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;-- DML 语句&lt;/span&gt;&lt;br/&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &lt;span&gt;`catalog`&lt;/span&gt;.&lt;span&gt;`db_name`&lt;/span&gt;.&lt;span&gt;`table_name`&lt;/span&gt; &lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;,&lt;br/&gt;    xxx,&lt;br/&gt;    &lt;span&gt;`data_date`&lt;/span&gt; &lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt; kafka_streaming_table&lt;br/&gt;&lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; != &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过 Flink SQL 任务实时同步数据到 Hudi （使用 COPY_ON_WRITE 模式），时效性在分钟级别（Checkpoint 时间有关）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Hudi 表中已经有历史数据时，需要支持按照 &#x27;PRIMARY KEY&#x27;  进行去重时&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;首次接入流式数据需设置 &lt;code&gt;index.bootstrap.enabled=true&lt;/code&gt;，保证数据的唯一性，后续可直接通过状态进行恢复即可&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要支持更新和删除必须在 DDL 中指定 PRIMARY KEY，或者在 Table Properties 中设置 &lt;code&gt;hoodie.datasource.write.recordkey.field=${YouPrimaryKey}&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;需要指定更新的 Precombine Key 须在 Table Properties 中设置 &lt;code&gt;hoodie.datasource.write.precombine.field=${YouPrecombineKey}&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;表使用 COPY_ON_WRITE 对读友好，通过 &lt;code&gt;hoodie.cleaner.commits.retained&lt;/code&gt; 来设置保留的数据历史版本数量，对历史记录进行清理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同步元数据到 Hive Metastore 需设置如下参数&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;类型&lt;/th&gt;&lt;th&gt;备注&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;hive_sync.enable&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;是否允许进行元数据同步到 Hive&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hive_sync.mode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;指定元数据同步采用 hms（Hive Metastore）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hive_sync.metastore.uris&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Hive Metastore 地址&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hive_sync.db&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;同步到 Hive Metastore 中对应的数据库名&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hive_sync.table&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;同步到 Hive Metastore 中对应的表名&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;业务方可通过 Trino 直接对 Hudi 表进行交互式在线查询，需注意版本要支持对 Hudi 表的读取，我们使用的对应 Trino 版本为 359。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ES 维表接入&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将开发好的自定义 Flink-Elasticsearch-connector 打包，上传到阿里云实时平台进行注册。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过 FlinkSQL 读取 Kafka 中的数据，写入到 Elasticsearch 中，Flink SQL语句如下&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;-- ES 表 DDL语句&lt;br/&gt;DROP TABLE IF EXISTS es_dimension01;&lt;br/&gt;&lt;span&gt;CREATE TABLE IF NOT EXISTS &lt;span&gt;es_dimension01&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;    id             STRING,&lt;br/&gt;    xxx            STRING,&lt;br/&gt;    PRIMARY KEY (id)&lt;/span&gt; NOT ENFORCED&lt;br/&gt;) &lt;span&gt;WITH&lt;/span&gt; &lt;span&gt;(&lt;br/&gt;    &lt;span&gt;&#x27;connector&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;elasticsearch6-lls&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;format&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;json&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;hosts&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;http://xxx:9200&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;index&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;es_dimension01&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;username&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;password&#x27;&lt;/span&gt; = &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;-- DML 读取 Kafka 写出到 Elasticsearch&lt;br/&gt;INSERT INTO es_dimension01 &lt;br/&gt;  SELECT id, &lt;br/&gt;    xxx,&lt;br/&gt;  FROM kafka_xxx_dimension;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;其中 kafka_xxx_dimension 中为同步 binlog 数据，Flink 解析其中 Debezium Format 数据转换为 RowData(其中包含 RowKind — 标识该行数据的操作类型)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Elasticsearch-connector 支持 upsert，通过设置 es_dimension01 表设定 PRIMARY KEY 对应 Elasticsearch 中的唯一 Id&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在进行 upsert 操作时通过 Id 对数据进行修改和删除操作&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;数据处理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用一个标签任务来说明使用流程，该标签任务通过 Flink 消费 Kafka 对应 Topic 中数据，通过关联 Elasticsearch维表进行维度补全，最后将结果输出到指定的 Kafka topic 中，DML 语句如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; kafka_sink&lt;br/&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt; (a.id &lt;span&gt;as&lt;/span&gt; &lt;span&gt;BIGINT&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;lable0&#x27;&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; lable,&lt;br/&gt;  &lt;span&gt;CASE&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;WHEN&lt;/span&gt; f.id &lt;span&gt;is&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;THEN&lt;/span&gt; f.start_sec * &lt;span&gt;1000&lt;/span&gt; &lt;span&gt;ELSE&lt;/span&gt; e.start_sec * &lt;span&gt;1000&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;END&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; sourceTime,&lt;br/&gt;  &lt;span&gt;CASE&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;WHEN&lt;/span&gt; f.id &lt;span&gt;is&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;THEN&lt;/span&gt; f.end_sec * &lt;span&gt;1000&lt;/span&gt; &lt;span&gt;ELSE&lt;/span&gt; e.end_sec * &lt;span&gt;1000&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;END&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; expiredAt,  &lt;br/&gt;  a.updated_at &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;updated&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&#x27;dmp&#x27;&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;&lt;br/&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;br/&gt;  kafka_stream_source a&lt;br/&gt;  &lt;span&gt;JOIN&lt;/span&gt; es_llspay_order_items &lt;span&gt;FOR&lt;/span&gt; SYSTEM_TIME &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;OF&lt;/span&gt; a.proctime &lt;span&gt;AS&lt;/span&gt; b&lt;br/&gt;  &lt;span&gt;ON&lt;/span&gt; a.id = b.id&lt;br/&gt;  &lt;span&gt;JOIN&lt;/span&gt; es_dimension01 &lt;span&gt;FOR&lt;/span&gt; SYSTEM_TIME &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;OF&lt;/span&gt; a.proctime &lt;span&gt;AS&lt;/span&gt; c&lt;br/&gt;  &lt;span&gt;ON&lt;/span&gt; b.id = c.id&lt;br/&gt;  &lt;span&gt;JOIN&lt;/span&gt; es_dimension02 &lt;span&gt;FOR&lt;/span&gt; SYSTEM_TIME &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;OF&lt;/span&gt; a.proctime &lt;span&gt;AS&lt;/span&gt; d&lt;br/&gt;  &lt;span&gt;ON&lt;/span&gt; a.id = d.id &lt;span&gt;LEFT&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;JOIN&lt;/span&gt; es_dimension03 &lt;span&gt;FOR&lt;/span&gt; SYSTEM_TIME &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;OF&lt;/span&gt; a.proctime &lt;span&gt;AS&lt;/span&gt; e&lt;br/&gt;  &lt;span&gt;ON&lt;/span&gt; e.id = d.id &lt;span&gt;LEFT&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;JOIN&lt;/span&gt; kafka_stream_dimension01 &lt;span&gt;AS&lt;/span&gt; f&lt;br/&gt;  &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;CAST&lt;/span&gt; (f.id &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;STRING&lt;/span&gt;) = d.id&lt;br/&gt;  &lt;span&gt;AND&lt;/span&gt; a.proctime &lt;span&gt;between&lt;/span&gt; f.proctime - &lt;span&gt;interval&lt;/span&gt; &lt;span&gt;&#x27;1&#x27;&lt;/span&gt; &lt;span&gt;second&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;and&lt;/span&gt; f.proctime + &lt;span&gt;interval&lt;/span&gt; &lt;span&gt;&#x27;5&#x27;&lt;/span&gt; &lt;span&gt;second&lt;/span&gt;&lt;br/&gt;&lt;span&gt;WHERE&lt;/span&gt;&lt;br/&gt;  c.name&lt;br/&gt;&lt;span&gt;LIKE&lt;/span&gt; &lt;span&gt;&#x27;%label1%&#x27;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;OR&lt;/span&gt; c.name&lt;br/&gt;&lt;span&gt;LIKE&lt;/span&gt; &lt;span&gt;&#x27;%label2%&#x27;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;AND&lt;/span&gt; (&lt;br/&gt;    e.id &lt;span&gt;IS&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;OR&lt;/span&gt; f.id &lt;span&gt;IS&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;br/&gt;  );&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面标签任务中，kafka_stream_source 为流表，对应的为 Kafka 中的 topic，通过 Lookup Join 维表 es_dimension01、es_dimension02 和 es_dimension03 进行维度补全，因为 es_dimension03 对应的表更新较频繁，为避免数据未 Join 成功，在这里通过 Interval Join 流表 kafka_stream_dimension01 来进行补偿，当流表  kafka_stream_dimension01 和 es_dimension03 中数据同时 Join 到时，优先使用 kafka_stream_dimension01 中数据，尽可能保证数据的准确性，该标签任务的整体的延迟在秒级，可保证数据的时效性。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;展望&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实时数仓目前还不能解决所有的计算和存储问题，只能根据业务需求场景来选择离线计算还是实时计算，当前流利说整体数据架构采用的是 Lambda 架构，且离线计算以 Spark 2.4.5 为主（目前 Hive 任务数量已经清零，离线计算全面拥抱 Spark），从最初 Hive 2.X 到 Spark 2.X 一步步升级上来，Hudi 的引入让我们可以方便的查询实时数据，我们希望未来升级完 Spark 3.X 的时候，Hudi 可以继续作为离线批处理的存储，进而实现在流利说离线和实时数仓存储方面的统一。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>