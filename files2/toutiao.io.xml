<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a0596d7aeb052d67e342ed0c2a3ded15</guid>
<title>GOLANG 协程调度</title>
<link>https://toutiao.io/k/zxo0fle</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;本文基于go1.17.6&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1.什么是协程？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;协程，英文Coroutines，是一种基于线程之上，但又比线程更加轻量级的存在，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，&lt;br/&gt;具有对内核来说不可见的特性。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;1.1 协程的特点&lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;线程的切换由操作系统负责调度，协程由用户自己进行调度&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;线程的默认Stack大小是MB级别，而协程更轻量，接近KB级别。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在同一个线程上的多个协程，访问某些资源可以不需要锁&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;适用于被阻塞的，且需要大量并发的场景。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;1.2 Golang的GMP模型&lt;/span&gt;&lt;/h3&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQJIicpicy43ogomvCdfM4s3asgOV4mbX7iaDd54Ffqo6rHAresFhUCiclNg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; title=&quot;GMP模型&quot;/&gt;&lt;figcaption&gt;GMP模型&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CPU驱动线程上的任务执行&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;线程由操作系统内核进行调度，Goroutine由Golang运行时(runtime)进行调度&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;P的 &lt;code&gt;local runnable queue&lt;/code&gt;是无锁的，&lt;code&gt;global runnable queue&lt;/code&gt;是有锁的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;P的 &lt;code&gt;local runnable queue&lt;/code&gt;长度限制为256&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/span&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1. M和P是绑定关系&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2. M和G是绑定关系&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3. P只是暂存G，他们之间不是绑定关系&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;E-R图&lt;/span&gt;&lt;/h4&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5769764216366158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQicOaOpZB5mXDPxib7ibU0AsRdSDiaspviaqTFiafibrsGzekZDpREaiardNn3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;721&quot; title=&quot;E-R图&quot;/&gt;&lt;figcaption&gt;E-R图&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;简化后的E-R图&lt;/span&gt;&lt;/h4&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8207171314741036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQq978wibABwIiczacXQWdXGI3DuqYK0qlByIGHBmFaiaS6NFfqR8dtUYHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;251&quot; title=&quot;E-R图简化后&quot;/&gt;&lt;figcaption&gt;E-R图简化后&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 后面为了书写简单直接将&lt;/p&gt;&lt;h3&gt;&lt;span&gt;延伸&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;timer的四叉堆和内存分配器使用的mcache也是每个P一个&lt;/p&gt;&lt;h4&gt;&lt;span&gt;Q: 为什么默认情况下P的数量与CPU数量一致？&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;A:&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;这样可以避免把CPU时间浪费在上线文切换上&lt;/p&gt;&lt;h3&gt;&lt;span&gt;1.3 协程和线程的资源消耗对比&lt;/span&gt;&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类别&lt;/th&gt;&lt;th&gt;栈内存&lt;/th&gt;&lt;th&gt;上下文切换&lt;/th&gt;&lt;th&gt;备注&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Thread&lt;/td&gt;&lt;td&gt;1MB&lt;/td&gt;&lt;td&gt;1us&lt;/td&gt;&lt;td&gt;内存占用使用的是Java线程的默认栈大小&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Goroutine&lt;/td&gt;&lt;td&gt;4KB&lt;/td&gt;&lt;td&gt;0.2us&lt;/td&gt;&lt;td&gt;内存占用使用的是Linux+x86下的栈大小&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;span&gt;2. 常见的Goroutine 让出/调度/抢占场景&lt;/span&gt;&lt;/h2&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.631424375917768&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQZfObQhoLiaicZZdJ9jwpGdfZc8VxMSKunibns4sZOUyLpy9zhubBo8QJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;681&quot; title=&quot;Goroutine状态机&quot;/&gt;&lt;figcaption&gt;Goroutine状态机&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;2.1 协程被创建&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;2.2 主动让出&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;2.2.1 使用runtime.Gosched&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;gosched.go&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;runtime&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    runtime.GOMAXPROCS(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;100&lt;/span&gt;; i++ {&lt;br/&gt;        fmt.Println(&lt;span&gt;&quot;Goroutine1:&quot;&lt;/span&gt;, i)&lt;br/&gt;        &lt;span&gt;//time.Sleep(500 * time.Millisecond)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; i == &lt;span&gt;5&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;100&lt;/span&gt;; i++ {&lt;br/&gt;                    fmt.Println(&lt;span&gt;&quot;Goroutine2:&quot;&lt;/span&gt;, i)&lt;br/&gt;                    &lt;span&gt;//time.Sleep(500 * time.Millisecond)&lt;/span&gt;&lt;br/&gt;                }&lt;br/&gt;            }()&lt;br/&gt;            runtime.Gosched()&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体执行流程&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1.&lt;/span&gt;Gosched() -&amp;gt; &lt;span&gt;2.&lt;/span&gt;mcall(fn &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(*g)&lt;/span&gt;) -&amp;gt; 3.&lt;span&gt;gosched_m&lt;/span&gt;&lt;span&gt;(gp *g)&lt;/span&gt; -&amp;gt;&lt;br/&gt;4.&lt;span&gt;goschedImpl&lt;/span&gt;&lt;span&gt;(gp *g)&lt;/span&gt; -&amp;gt;  &lt;span&gt;dropg&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;                          &lt;span&gt;globrunqput&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;br/&gt;                          &lt;span&gt;schedule&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;step2 mcall(fn func(*g))&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;mcall函数是通过汇编实现的，&lt;br/&gt;在 asm_amd64.s 中&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：每个m上都有一个自己g0，仅用于调度，不指向任何可执行的函数&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;mcall returns to the original goroutine g later, when g has been rescheduled.&lt;br/&gt;fn must not return at all; typically it ends by calling schedule, to let the m&lt;br/&gt;run other goroutines.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;&lt;span&gt;step4 goschedImpl(gp *g)&lt;/span&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1)修改Goroutine的状态 _Grunning -&amp;gt; _Grunnable&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2)dropg() 将G和M解绑&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3)globrunqput(gp) 将G放入全局runnable队列&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;4)schedule()&lt;br/&gt;进行一轮调度，寻找一个runnable的G，并执行它，&lt;strong&gt;函数不会返回&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;span&gt;step4-4 schedule()&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;schedule&lt;/span&gt;() –&amp;gt; 1&lt;span&gt;.findrunnable&lt;/span&gt;()&lt;br/&gt;              2&lt;span&gt;.execute&lt;/span&gt;() –&amp;gt;&lt;span&gt;gogo&lt;/span&gt;()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;&lt;span&gt;step4-4 schedule() --&amp;gt; findrunnable()&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;gogo()&lt;/code&gt;&lt;br/&gt;汇编实现，用于恢复现场(PC/SP)，运行上一步找到的新的可运行的G&lt;/p&gt;&lt;h4&gt;&lt;span&gt;Q:为什么一定要单独设置一个g0来执行goschedImpl(gp *g)&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;A:  schedule()会将G的stack搞乱&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;另外有些文章说g0的栈会使用操作系统分配的线程栈，但是根据萌叔的研究，这个与操作系统有关的。&lt;br/&gt;macOS是使用的线程栈(8MB)，但是linux下g0的栈初始大小只有8KB。&lt;br/&gt;runtime/proc.go&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;//&lt;/span&gt; In case &lt;span&gt;of&lt;/span&gt; cgo &lt;span&gt;or&lt;/span&gt; Solaris &lt;span&gt;or&lt;/span&gt; illumos &lt;span&gt;or&lt;/span&gt; Darwin, pthread_create will make us a stack.&lt;br/&gt;    &lt;span&gt;//&lt;/span&gt; Windows &lt;span&gt;and&lt;/span&gt; Plan &lt;span&gt;9&lt;/span&gt; will layout sched stack &lt;span&gt;on&lt;/span&gt; OS stack.&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; iscgo || mStackIsSystemAllocated() {&lt;br/&gt;        mp.g0 = malg(&lt;span&gt;-1&lt;/span&gt;)&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        mp.g0 = malg(&lt;span&gt;8192&lt;/span&gt; * sys.StackGuardMultiplier)&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// mStackIsSystemAllocated indicates whether this runtime starts on a&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// system-allocated stack.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;mStackIsSystemAllocated&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;switch&lt;/span&gt; GOOS {&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;aix&quot;&lt;/span&gt;, &lt;span&gt;&quot;darwin&quot;&lt;/span&gt;, &lt;span&gt;&quot;plan9&quot;&lt;/span&gt;, &lt;span&gt;&quot;illumos&quot;&lt;/span&gt;, &lt;span&gt;&quot;ios&quot;&lt;/span&gt;, &lt;span&gt;&quot;solaris&quot;&lt;/span&gt;, &lt;span&gt;&quot;windows&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;openbsd&quot;&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;switch&lt;/span&gt; GOARCH {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;386&quot;&lt;/span&gt;, &lt;span&gt;&quot;amd64&quot;&lt;/span&gt;, &lt;span&gt;&quot;arm&quot;&lt;/span&gt;, &lt;span&gt;&quot;arm64&quot;&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;2.2.2 任务执行完毕&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;goexit1() -&amp;gt; mcall(fn &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(*g)&lt;/span&gt;) -&amp;gt; &lt;span&gt;goexit0&lt;/span&gt;&lt;span&gt;(gp *g)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// goexit continuation on g0.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;goexit0&lt;/span&gt;&lt;span&gt;(gp *g)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    _g_ := getg()&lt;br/&gt;    casgstatus(gp, _Grunning, _Gdead)&lt;br/&gt;    gp.m = &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;    dropg()&lt;br/&gt;    gfput(_g_.m.p.ptr(), gp)&lt;br/&gt;    schedule()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.3 抢占式调度&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;抢占式调度是由守护进程 sysmon() 触发的&lt;br/&gt;sysmon()是一个特殊的m，它不需要和P进行绑定。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;sysmon&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1. 运行计时器&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 2. 检查网络轮询器(netpoll)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 3. 触发抢占式调度&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 4. 触发GC&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最大时间片是10ms&lt;/p&gt;&lt;h4&gt;&lt;span&gt;推荐观看  幼麟实验室的视频&lt;/span&gt;&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;深度探索Go语言：抢占式调度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;深度探索Go语言：抢占式调度(2)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;span&gt;2.3.1 基于协作的抢占式调度&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;依赖栈增长监测代码&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.810126582278481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQBPTyFGOVUQOglhNsQZ8AlibaRJs0gCc1JQbDVEnUXeYkwVP1pgSeicicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;sysmon() -&amp;gt; retake() -&amp;gt; preemptone()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; g &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    stackguard0 &lt;span&gt;uintptr&lt;/span&gt; &lt;span&gt;// offset known to liblink&lt;/span&gt;&lt;br/&gt;    preempt     &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;// preemption signal, duplicates stackguard0 = stackpreempt&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;2.3.2 基于信号的抢占式调度&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;发出信号&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;sysmon() -&amp;gt; retake() -&amp;gt; preemptone() -&amp;gt; signalM(mp, sigPreempt)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;preemptone&lt;/span&gt;&lt;span&gt;(_p_ *p)&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    mp := _p_.m.ptr()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; mp == &lt;span&gt;nil&lt;/span&gt; || mp == getg().m {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    gp := mp.curg&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; gp == &lt;span&gt;nil&lt;/span&gt; || gp == mp.g0 {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    gp.preempt = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// Every call in a goroutine checks for stack overflow by&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// comparing the current stack pointer to gp-&amp;gt;stackguard0.&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// Setting gp-&amp;gt;stackguard0 to StackPreempt folds&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// preemption into the normal stack overflow check.&lt;/span&gt;&lt;br/&gt;    gp.stackguard0 = stackPreempt&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// Request an async preemption of this P.&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; preemptMSupported &amp;amp;&amp;amp; debug.asyncpreemptoff == &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;        _p_.preempt = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;        preemptM(mp)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;接收到信号&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;sighandler() -&amp;gt; doSigPreempt() -&amp;gt; asyncPreempt()-&amp;gt;  globalrunqput()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;asyncPreempt由汇编实现 preempt_amd64.s&lt;/p&gt;&lt;h3&gt;&lt;span&gt;2.4 hand off p&lt;/span&gt;&lt;/h3&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5653225806451613&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQrJ0oyhdEjFqszJVXIcCDGXoz4mjWSojOOhD8HjVuEt2481IruXQ0Lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;延伸阅读&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;disk io引起golang线程数暴涨的问题&lt;/p&gt;&lt;h4&gt;&lt;span&gt;场景读写磁盘文件&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;涉及syscall.Syscall()&lt;/p&gt;&lt;h4&gt;&lt;span&gt;注意:&lt;/span&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;由于handeroff机制的存在，读写磁盘文件的过程中，如果IO的压力过大可能会导致大量的系统线程被创建&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在Golang中(Linux平台)，读写网络连接是非阻塞式系统调用，并且是边缘触发&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在Golang中(Linux平台)，读写磁盘文件是阻塞式系统调用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;File&lt;/span&gt;&lt;span&gt;.Read&lt;/span&gt;() &lt;span&gt;-&lt;/span&gt;&amp;gt; &lt;span&gt;poll&lt;/span&gt;&lt;span&gt;.FD&lt;/span&gt;&lt;span&gt;.Read&lt;/span&gt;() &lt;span&gt;-&lt;/span&gt;&amp;gt; &lt;span&gt;syscall&lt;/span&gt;&lt;span&gt;.Read&lt;/span&gt;() &lt;span&gt;-&lt;/span&gt;&amp;gt; &lt;span&gt;syscall&lt;/span&gt;&lt;span&gt;.Syscall&lt;/span&gt;()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;poll/fd_unix.go&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Read implements io.Reader.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(fd *FD)&lt;/span&gt; &lt;span&gt;Read&lt;/span&gt;&lt;span&gt;(p []&lt;span&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(&lt;span&gt;int&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    ...&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;        n, err := ignoringEINTRIO(syscall.Read, fd.Sysfd, p) &lt;span&gt;// 执行syscall&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;            n = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; err == syscall.EAGAIN &amp;amp;&amp;amp; fd.pd.pollable() {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; err = fd.pd.waitRead(fd.isFile); err == &lt;span&gt;nil&lt;/span&gt; { &lt;span&gt;// gopark&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        err = fd.eofError(n, err)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; n, err&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;read&lt;/span&gt;&lt;span&gt;(fd &lt;span&gt;int&lt;/span&gt;, p []&lt;span&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(n &lt;span&gt;int&lt;/span&gt;, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; _p0 unsafe.Pointer&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;(p) &amp;gt; &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;        _p0 = unsafe.Pointer(&amp;amp;p[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        _p0 = unsafe.Pointer(&amp;amp;_zero)&lt;br/&gt;    }&lt;br/&gt;    r0, _, e1 := Syscall(SYS_READ, &lt;span&gt;uintptr&lt;/span&gt;(fd), &lt;span&gt;uintptr&lt;/span&gt;(_p0), &lt;span&gt;uintptr&lt;/span&gt;(&lt;span&gt;len&lt;/span&gt;(p)))&lt;br/&gt;    n = &lt;span&gt;int&lt;/span&gt;(r0)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; e1 != &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;        err = errnoErr(e1)&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;Syscall和RawSyscall的源码&lt;/span&gt;&lt;/h4&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQPicQflhnMM41SrxIJXURlXTsnzciaOnOS5ticBQTIxfUH3qngvRP9P0rA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;2.4.1 entersyscall()&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;.设置_g&lt;span&gt;_&lt;/span&gt;.m.locks++，禁止g被强占&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;.设置_g&lt;span&gt;_&lt;/span&gt;.stackguard&lt;span&gt;0&lt;/span&gt; = stackPreempt，禁止调用任何会导致栈增长/分裂的函数&lt;br/&gt;&lt;span&gt;3&lt;/span&gt;.保存现场，在 &lt;span&gt;syscall&lt;/span&gt; 之后会依据这些数据恢复现场&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;.更新G的状态为_Gsyscall&lt;br/&gt;&lt;span&gt;5&lt;/span&gt;.释放局部调度器P：解绑P与M的关系；&lt;br/&gt;&lt;span&gt;6&lt;/span&gt;.更新P状态为_Psyscall&lt;br/&gt;&lt;span&gt;7&lt;/span&gt;.g.m.locks–解除禁止强占。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入系统调用的goroutine会阻塞，导致内核M会阻塞。此时P会被剥离掉， 所以P可以继续去获取其余的空闲M执行其余的goroutine。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;2.4.2 阻塞式系统调用长期运行将会导致的流程&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;sysmon() -&amp;gt; retake() -&amp;gt; handoffp()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果P的本地队列不为空，handoffp()会尝试获取一个M来运行P&lt;br/&gt;M有2种来源:&lt;/p&gt;&lt;h4&gt;&lt;span&gt;2.4.3 exitsyscall()&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1.设置 &lt;span&gt;g&lt;/span&gt;&lt;span&gt;.m&lt;/span&gt;&lt;span&gt;.locks&lt;/span&gt;++ 禁止强占&lt;br/&gt;2.调用 &lt;span&gt;exitsyscallfast&lt;/span&gt;() 快速退出系统调用&lt;br/&gt;    2&lt;span&gt;.1&lt;/span&gt;. &lt;span&gt;Try&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; &lt;span&gt;re-acquire&lt;/span&gt; &lt;span&gt;the&lt;/span&gt; &lt;span&gt;last&lt;/span&gt; &lt;span&gt;P&lt;/span&gt;，如果成功就直接接&lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;    2&lt;span&gt;.2&lt;/span&gt;. &lt;span&gt;Try&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; &lt;span&gt;get&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span&gt;other&lt;/span&gt; &lt;span&gt;idle&lt;/span&gt; &lt;span&gt;P&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;allIdleP&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;;&lt;br/&gt;    2&lt;span&gt;.3&lt;/span&gt;. 没有获取到空闲的&lt;span&gt;P&lt;/span&gt;&lt;br/&gt;3.如果快速获取到了&lt;span&gt;P&lt;/span&gt;：&lt;br/&gt;    3&lt;span&gt;.1&lt;/span&gt;. 更新&lt;span&gt;G&lt;/span&gt; 的状态是_&lt;span&gt;Grunning&lt;/span&gt;&lt;br/&gt;    3&lt;span&gt;.2&lt;/span&gt;. 与&lt;span&gt;G&lt;/span&gt;绑定的&lt;span&gt;M&lt;/span&gt;会在退出系统调用之后继续执行&lt;br/&gt;4. 没有获取到空闲的&lt;span&gt;P&lt;/span&gt;：&lt;br/&gt;    4&lt;span&gt;.1&lt;/span&gt;. 调用&lt;span&gt;mcall&lt;/span&gt;()函数切换到&lt;span&gt;g0&lt;/span&gt;的栈空间；&lt;br/&gt;    4&lt;span&gt;.2&lt;/span&gt;. 调用&lt;span&gt;exitsyscall0&lt;/span&gt;函数：&lt;br/&gt;        4&lt;span&gt;.2&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;. 更新&lt;span&gt;G&lt;/span&gt; 的状态是_&lt;span&gt;Gwaiting&lt;/span&gt;&lt;br/&gt;        4&lt;span&gt;.2&lt;/span&gt;&lt;span&gt;.2&lt;/span&gt;. 调用&lt;span&gt;dropg&lt;/span&gt;()：解除当前&lt;span&gt;g&lt;/span&gt;与&lt;span&gt;M&lt;/span&gt;的绑定关系；&lt;br/&gt;        4&lt;span&gt;.2&lt;/span&gt;&lt;span&gt;.3&lt;/span&gt;. 调用&lt;span&gt;globrunqput&lt;/span&gt;将&lt;span&gt;G&lt;/span&gt;插入&lt;span&gt;global&lt;/span&gt; &lt;span&gt;queue&lt;/span&gt;的队尾，&lt;br/&gt;        4&lt;span&gt;.2&lt;/span&gt;&lt;span&gt;.4&lt;/span&gt;. 调用&lt;span&gt;stopm&lt;/span&gt;()释放&lt;span&gt;M&lt;/span&gt;，将&lt;span&gt;M&lt;/span&gt;加入全局的&lt;span&gt;idel&lt;/span&gt; &lt;span&gt;M&lt;/span&gt;列表，这个调用会阻塞，知道获取到可用的&lt;span&gt;P&lt;/span&gt;。&lt;br/&gt;        4&lt;span&gt;.2&lt;/span&gt;&lt;span&gt;.5&lt;/span&gt;. 如果4&lt;span&gt;.2&lt;/span&gt;&lt;span&gt;.4&lt;/span&gt;中阻塞结束，&lt;span&gt;M&lt;/span&gt;获取到了可用的&lt;span&gt;P&lt;/span&gt;，会调用&lt;span&gt;schedule&lt;/span&gt;()函数，执行一次新的调度。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.5 系统调用&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;以netpoll为例，linux操作系统下，netpoll基于epoll实现的&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#include &amp;lt;sys/epoll.h&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;epoll_create&lt;/span&gt;(&lt;span&gt;&lt;span&gt;int&lt;/span&gt; size&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;epoll_ctl&lt;/span&gt;(&lt;span&gt;&lt;span&gt;int&lt;/span&gt; epfd, &lt;span&gt;int&lt;/span&gt; op, &lt;span&gt;int&lt;/span&gt; fd, &lt;span&gt;struct&lt;/span&gt; epoll_event *&lt;span&gt;event&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;epoll_wait&lt;/span&gt;(&lt;span&gt;&lt;span&gt;int&lt;/span&gt; epfd, &lt;span&gt;struct&lt;/span&gt; epoll_event * events, &lt;span&gt;int&lt;/span&gt; maxevents, &lt;span&gt;int&lt;/span&gt; timeout&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5661914460285132&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQkDvrXywAXiaPLCMYiaFMWgCEnJM91rRoOJc7Gb4JVXvOBu9GF0svkcZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;2.5.1 让出流程&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;pollDesc.waitRead() -&amp;gt; runtime.poll_runtime_pollWait() -&amp;gt; runtime.gopark()&lt;br/&gt;-&amp;gt; mcall(fn func(*g)) -&amp;gt; park_m(gp *g)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;gopark()主要流程&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;2.5.2 放回 主动触发netpoll()&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;findrunnable()-&amp;gt;netpoll()-&amp;gt;injectglist()-&amp;gt;globrunqputbatch()/runqputbatch()&lt;br/&gt;pollWork()&lt;br/&gt;startTheWorldWithSema&lt;br/&gt;sysmon()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: netpoll函数是非阻塞的&lt;/p&gt;&lt;h3&gt;&lt;span&gt;2.6 定时器&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;场景&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;time&lt;/span&gt;.Sleep(&lt;span&gt;1&lt;/span&gt; * &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.868995633187773&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQrqzZaZpY5tD6APt4zQ9lfeYficLexQsphob8NX2UQicWqiaBDBIRvXO7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;458&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;2.6.1 让出&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;time.Sleep() -&amp;gt; runtime.timeSleep() -&amp;gt; mcall() -&amp;gt; park_m()&lt;br/&gt;-&amp;gt; resetForSleep() -&amp;gt; resettimer() -&amp;gt; doaddtimer()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;2.6.2 唤醒&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;checkTimers() -&amp;gt; runtimer() -&amp;gt; runOneTimer() -&amp;gt; goready() -&amp;gt; systemstack() -&amp;gt; ready()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;goready()主要流程&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: mcall()和systemstack()是对应的&lt;/p&gt;&lt;h3&gt;&lt;span&gt;2.7 Channel&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;场景&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ch := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;)&lt;br/&gt;ch &amp;lt;- &lt;span&gt;15&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37900128040973113&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQ9dTOEYrsenibicOiasjUUULandjLPfXibvPAT2Td2KhCph1ibxTx2rZ3R2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;781&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;2.7.1 写入channel并阻塞&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;chansend1() -&amp;gt; chansend() -&amp;gt;  hchan.sendq.enqueue() -&amp;gt; gopark()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;2.7.2 就绪&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;chanrecv1() -&amp;gt; chanrecv() -&amp;gt;  hchan.sendq.dequeue() -&amp;gt; recv() -&amp;gt; goready()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.8 同步原语&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;互斥锁与2.6、2.7的情况非常类似，只是G会存储在Treap中&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Treap是一种平衡二叉查找树&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;semaRoot 是全局唯一的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1146616541353382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQu3aNoqVCQN3CQJ9VTyZsamky3iad7swDyFF25fRbSDlpciboXcNKZDUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;532&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;3.参考资料&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;1.g0-特殊的goroutine&lt;br/&gt;2.golang syscall原理&lt;br/&gt;3.Linux中的EAGAIN含义&lt;br/&gt;4.Golang-gopark函数和goready函数原理分析&lt;br/&gt;5.幼麟实验室-协程让出、抢占、监控和调度&lt;br/&gt;6.Golang 调度器 GMP 原理与调度全分析&lt;br/&gt;7.time.Sleep(1) 后发生了什么&lt;br/&gt;8.mcall systemstack等汇编函数&lt;/p&gt;&lt;hr/&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.396078431372549&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/7K8YaGnlhQj5jbkmq1j5IxsZjFtJic6FQvSym7s3AAONnSPqibW0dkF4SCgMibPZ3zF2PenCKnxfl4bCpzrV0BurA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1020&quot; title=&quot;微信公众号&quot;/&gt;&lt;figcaption&gt;微信公众号&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aa67190d046f9a8679d3075dbaa684ec</guid>
<title>身处职场，一定要落落大方，不要畏手畏脚</title>
<link>https://toutiao.io/k/5s657wp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-track=&quot;3&quot; data-pm-slice=&quot;1 1 []&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家，InfoQ写作社区签约作者。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-track=&quot;3&quot; data-pm-slice=&quot;1 1 []&quot;&gt;&lt;span&gt;  hello，大家好，我是张张，「架构精进之路」公号作者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;记得刚参加工作的时候，胆小怕事，看到领导就害怕，躲得远远的，脸皮薄，还自尊心强，特别在意同事们的眼光，不敢得罪任何人，&lt;/span&gt;&lt;span&gt;对谁都低三下四的，做事畏手畏脚，工作干的那叫一个卑微。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;科室里一个要退休的老同事实在看不下去了，退休之前和我聊了许多，让我受益匪浅。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大体意思就是，在体制内工作，只要不犯原则性错误，就没有人能把你开除了，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;做事情一定要落落大方，而不是畏手畏脚，那样只会让别人更加看不起，让领导认为你懦弱无能，让同事对你得寸进尺！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgTpClHffIiae28puR3niclC0pZvWwXGFrE6dKxNX80RTYPIIdibqb1SgQ7lRz0Wice828hNI1xIX5ZDrA/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; &lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;不要怕做抛头露面的事情&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;会议上，领导让你汇报工作，不要扭扭捏捏的，大大方方的讲出来，就像公务员面试一样；&lt;/span&gt;&lt;span&gt;酒桌上，该说说，该笑笑，不要小家子气，该敬酒敬酒，该轮圈轮圈，偶尔喝多了也无所谓。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多抛头露面的事情都是一回生，二回熟，时间长了也就锻炼出来了！&lt;/span&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; &lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;不要在意别人的目光和议论&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;每个单位都有一些人喜欢嚼舌根，只要他们看不上你，无论你做什么，他们都会认为你是错的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你和领导走的近了，他们说你拍马屁；&lt;/span&gt;&lt;span&gt;你努力认真工作，他们说你装样子；&lt;/span&gt;&lt;span&gt;你帮助别人，他们说你假慈悲……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以不要在意他们的胡言乱语，做好自己的事情，&lt;/span&gt;&lt;span&gt;时间长了，大家也就知道了你的为人，这些谎言也就不攻自破！&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; &lt;strong&gt;3&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;不要害怕和领导交流&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在体制内工作，吃亏的往往是只会低头拉车，不会抬头看路的人。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;害怕和领导交流，不会和领导套近乎，即使再埋头苦干，最终吃亏的还是自己。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以要把领导当作一名长者，尊敬但不要畏惧，见面要打招呼，积极去汇报工作，私下也要经常来往，维持好关系，只有这样，你才能会被重用，或者躺的舒服。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; &lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;你遇到的大多数人，这辈子都不可能见到第二面&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;比如，地铁上的人，路边的人，你们永远只是擦肩而过。而剩下的小部分人里的大部分，就算你们现在经常见面，未来也不可能再见。比如，公司大部分同事，离职之后这辈子不会再见。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，你为什么要在意他们的眼光和看法？为什么要因为他们而改变你的人生选择?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想明白这件事之后，你就会“放肆”很多。我第一年工作时连带个饭上班都觉得不好意思偷偷摸摸的,但是后来敢在会议上提出自己的看法。&lt;/span&gt;&lt;span&gt;只要在规则允许的范围内，穿你爱穿的衣服，做你想做的事情，世界就是你的游乐场。&lt;/span&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; 5&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;不要害怕得罪老油条&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;为什么一些人被称为老油条，就是因为他们又老又油、又硬！工作时间长，年龄大，晋升无望，所以不好好工作，每天就混日子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于这些老油条完全不用搭理他们，他们只会欺软怕硬，你越不想得罪他们，他们越是把工作和责任推给你，所以该怼的时候就怼过去，即使闹到领导那里，也大可不必担心，因为领导也知道是怎么回事。&lt;/span&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; 6&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;别人对你的方式，都是被你惯的&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;当对方的语言，脱离事情本身，而是人身攻击时，必须给予反击。很多人讲话，都是在拿你出气，宣泄自己的情绪。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;你过度&lt;/span&gt;地&lt;span&gt;忍让，只会换来别人的变本加厉。&lt;/span&gt;&lt;span&gt;优秀的人一定很强势，世界上不存在不强势而&lt;/span&gt;又&lt;span&gt;优秀的人。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; 7&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;不要被动工作&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;总有人摆脱不了“学生”标签，万事只会等待而又畏手畏脚，总希望有人可以来告诉自己下一步做什么。这样的结果就是，老司机们忙到死，自己却总感觉手上没活，慌到不行。不光如此，总是需要别人来询问自己的工作进度，开始不懂得做好计划，中间不记得实时监控，事后不会总结复盘。像一支牙膏，挤一下出一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自己和老板是雇佣关系而非师徒关系，不能积极主动创造价值，总抱着学习的心态等待分配的，只会黯然离场。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; 8&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;允许自己犯错&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从小我们都被教育别犯错，错了就会挨骂，以至于很多人成年之后总是生怕自己犯错，不敢轻易做选择，不敢表现。不要对自己要求太严格，承认自己也是个普通人吧。谁不是一边犯错一边成长呢?从错误中获得成长，也许比任何方式都更快。&lt;/span&gt;&lt;/p&gt;&lt;section data-id=&quot;28357&quot; data-type=&quot;lspecial02,lspecial06&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;width:24px;height:24px;background-color: #666666;border-radius: 50%;&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt; 9&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;9d6cd&quot;&gt;&lt;p data-md5=&quot;9d6cd&quot;&gt;&lt;strong data-md5=&quot;9d6cd&quot;&gt;远离身边负能量的人&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;常常释放负能量的人，大多数是见不得身边的人过的比 ta好，所以把负能量分享给你，让你和ta一样满载。&lt;/span&gt;&lt;span&gt;当你身边亲朋好友总以玩笑名义一句句伤害你，嘲讽打击你，“就你?你可以吗?”久而久之你会更自卑敏感，&lt;/span&gt;&lt;span&gt;因为你觉得你们很亲近，他们不可能害你，所以你从没怀疑过他们的看法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;尝试和他们保持距离，悄悄努力，不试怎么知道不行呢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;667&quot; data-ratio=&quot;0.667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z2bVaFK6CgTpClHffIiae28puR3niclC0pgVLScEqFudr16Nr4PfPRzScgE5fRAfOh7mcoUF6XYWjkEfc2giadn5g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot; data-width=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;往期热文推荐：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家，InfoQ写作社区签约作者。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; has-insert-preloading=&quot;1&quot; data-index=&quot;1&quot; data-origin_num=&quot;109&quot; data-isban=&quot;0&quot; data-weui-theme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注公众号，免费领学习资料&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;28&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;28&quot;&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;如果您觉得还不错，欢迎关注和转发~     &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5163398692810458&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9TPn66HT930CzevNBb2yMhKjOn9yuJqsCPbyzicCBx6Zm9sNJCWibo6VzGRYbxrSfjJaaGibSRuyZFQmr3KcX07sw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;306&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>077cb0c7a530651d6fb60b88b681f8bb</guid>
<title>接口优化的常见方案实战总结</title>
<link>https://toutiao.io/k/0kwkbbt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h2&gt;一、背景&lt;/h2&gt;

&lt;p&gt;针对老项目，去年做了许多降本增效的事情，其中发现最多的就是接口耗时过长的问题，就集中搞了一次接口性能优化。本文将给小伙伴们分享一下接口优化的通用方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-02-15-15-20mNcnFhZrHpX157Uj.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;二、接口优化方案总结&lt;/h2&gt;

&lt;h3&gt;1.批处理&lt;/h3&gt;

&lt;p&gt;批量思想：批量操作数据库，这个很好理解，我们在循环插入场景的接口中，可以在批处理执行完成后一次性插入或更新数据库，避免多次IO。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//for循环单笔入库
list.stream().forEatch(msg-&amp;gt;{
    insert();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//批量入库
batchInsert();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2.异步处理&lt;/h3&gt;

&lt;p&gt;异步思想：针对耗时比较长且不是结果必须的逻辑，我们可以考虑放到异步执行，这样能降低接口耗时。&lt;/p&gt;

&lt;p&gt;例如一个理财的申购接口，&lt;strong&gt;入账&lt;/strong&gt;和&lt;strong&gt;写入申购文件&lt;/strong&gt;是同步执行的，因为是T+1交易，后面这两个逻辑其实不是结果必须的，我们并不需要关注它的实时结果，所以我们考虑把&lt;strong&gt;入账&lt;/strong&gt;和&lt;strong&gt;写入申购文件&lt;/strong&gt;改为异步处理。如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-02-15-15-41I90KhqlWAKdH6DX.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;至于异步的实现方式，可以用线程池，也可以用消息队列，还可以用一些调度任务框架。&lt;/p&gt;

&lt;h3&gt;3.空间换时间&lt;/h3&gt;

&lt;p&gt;一个很好理解的&lt;strong&gt;空间换时间&lt;/strong&gt;的例子是合理使用缓存，针对一些频繁使用且不频繁变更的数据，可以提前缓存起来，需要时直接查缓存，避免频繁地查询数据库或者重复计算。&lt;/p&gt;

&lt;p&gt;需要注意的事，这里用了合理二字，因为空间换时间也是一把双刃剑，需要综合考虑你的使用场景，毕竟缓存带来的数据一致性问题也挺令人头疼。&lt;/p&gt;

&lt;p&gt;这里的缓存可以是R2M，也可以是本地缓存、memcached，或者Map。&lt;/p&gt;

&lt;p&gt;举一个股票工具的查询例子：&lt;/p&gt;

&lt;p&gt;因为策略轮动的调仓信息，每周只更新一次，所以原来的调接口就去查库的逻辑并不合理，而且拿到调仓信息后，需要经过复杂计算，最终得出回测收益和跑赢沪深指数这些我们想要的结果。如果我们把查库操作和计算结果放入缓存，可以节省很多的执行时间。如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-02-15-15-53eCnCl9ecwF9wgX53.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;4.预处理&lt;/h3&gt;

&lt;p&gt;也就是预取思想，就是提前要把查询的数据，提前计算好，放入缓存或者表中的某个字段，用的时候会大幅提高接口性能。跟上面那个例子很像，但是关注点不同。&lt;/p&gt;

&lt;p&gt;举个简单的例子：理财产品，会有根据净值计算年化收益率的数据展示需求，利用净值去套用年化收益率计算公式计算的逻辑我们可以采用预处理，这样每一次接口调用直接取对应字段就可以了。&lt;/p&gt;

&lt;h3&gt;5.池化思想&lt;/h3&gt;

&lt;p&gt;我们都用过数据库连接池，线程池等，这就是池思想的体现，它们解决的问题就是避免重复创建对象或创建连接，可以重复利用，避免不必要的损耗，毕竟创建销毁也会占用时间。&lt;/p&gt;

&lt;p&gt;池化思想包含但并不局限于以上两种，总的来说池化思想的本质是&lt;strong&gt;预分配与循环使用，&lt;/strong&gt;明白这个原理后，我们即使是在做一些业务场景的需求时，也可以利用起来。&lt;/p&gt;

&lt;p&gt;比如：对象池&lt;/p&gt;

&lt;h3&gt;6.串行改并行&lt;/h3&gt;

&lt;p&gt;串行就是，当前执行逻辑必须等上一个执行逻辑结束之后才执行，并行就是两个执行逻辑互不干扰，所以并行相对来说就比较节省时间，当然是建立在没有结果参数依赖的前提下。&lt;/p&gt;

&lt;p&gt;比如，理财的持仓信息展示接口，我们既需要查询用户的账户信息，也需要查询商品信息和banner位信息等等来渲染持仓页，如果是串行，基本上接口耗时就是累加的。如果是并行，接口耗时将大大降低。&lt;/p&gt;

&lt;p&gt;如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-02-15-16-27TZL2iuGmfo15UJc8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;7.索引&lt;/h3&gt;

&lt;p&gt;加索引能大大提高数据查询效率，这个在接口设计之出也会考虑到，这里不再多赘述，随着需求的迭代，我们重点整理一下索引不生效的一些场景，希望对小伙伴们有所帮助。&lt;/p&gt;

&lt;p&gt;具体不生效场景不再一一举例，后面有时间的话，单独整理一下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-02-15-16-34ng34XPW6B9U8nTWR.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;8.避免大事务&lt;/h3&gt;

&lt;p&gt;所谓大事务问题，就是&lt;strong&gt;运行时间较长的事务，&lt;/strong&gt;由于事务一致不提交，会导致数据库连接被占用，影响到别的请求访问数据库，影响别的接口性能。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    @Transactional(value = &quot;taskTransactionManager&quot;, propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED, rollbackFor = {RuntimeException.class, Exception.class})
    public BasicResult purchaseRequest(PurchaseRecord record) {
        BasicResult result = new BasicResult();
        //插入账户任务
        taskMapper.insert(ManagerParamUtil.buildTask(record, TaskEnum.Task_type.pension_account.type(), TaskEnum.Account_bizType.purchase_request.type()));
        //插入同步任务
        taskMapper.insert(ManagerParamUtil.buildTask(record, TaskEnum.Task_type.pension_sync.type(), TaskEnum.Sync_bizType.purchase.type()));
        //插入影像件上传任务
        taskMapper.insert(ManagerParamUtil.buildTask(record, TaskEnum.Task_type.pension_sync.type(), TaskEnum.Sync_bizType.cert.type()));
        result.setInfo(ResultInfoEnum.SUCCESS);
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这块代码主要是申购申请完成后，执行一系列的后续操作，如果现在新增申购完成后，发送push通知用户的需求。很有可能我们会在后面直接追加，如下图所示：事务中嵌套RPC调用，即非DB操作，这些非DB操作如果耗时较大的话，可能会出现大事务问题。大数据引发的问题主要有：死锁、接口超时、主从延迟等。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    @Transactional(value = &quot;taskTransactionManager&quot;, propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED, rollbackFor = {RuntimeException.class, Exception.class})
    public BasicResult purchaseRequest(PurchaseRecord record) {
        BasicResult result = new BasicResult();
        ...
        pushRpc.doPush(record);        
        result.setInfo(ResultInfoEnum.SUCCESS);
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以为避免大事务问题，我们可以通过以下方案规避：&lt;/p&gt;

&lt;p&gt;1，RPC调用不放到事务里面&lt;/p&gt;

&lt;p&gt;2，查询操作尽量放到事务之外&lt;/p&gt;

&lt;p&gt;3，事务中避免处理太多数据&lt;/p&gt;

&lt;h3&gt;9.优化程序结构&lt;/h3&gt;

&lt;p&gt;程序结构问题一般出现在多次需求迭代后，代码叠加形成。会造成一些重复查询、多次创建对象等耗时问题。在多人维护一个项目时比较多见。解决起来也比较简单，我们需要针对接口整体做重构，评估每个代码块的作用和用途，调整执行顺序。&lt;/p&gt;

&lt;h3&gt;10.深分页问题&lt;/h3&gt;

&lt;p&gt;深分页问题比较常见，分页我们一般最先想到的就是 limit ，为什么会慢，我们可以看下这个SQL：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    select * from purchase_record where productCode = &#x27;PA9044&#x27; and status=4 order by orderTime desc limit 100000,200 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;limit 100000,200 意味着会扫描100200行，然后返回200行，丢弃掉前100000行。所以执行速度很慢。一般可以采用标签记录法来优化，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    select * from purchase_record where productCode = &#x27;PA9044&#x27; and status=4 and id &amp;gt; 100000 limit 200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样优化的好处是命中了主键索引，无论多少页，性能都还不错，但是局限性是需要一个连续自增的字段&lt;/p&gt;

&lt;h3&gt;11.SQL优化&lt;/h3&gt;

&lt;p&gt;sql优化能大幅提高接口的查询性能，由于本文重点讲述接口优化的方案，具体sql优化不再一一列举，小伙伴们可以结合索引、分页、等关注点考虑优化方案。&lt;/p&gt;

&lt;h3&gt;12.锁粒度避免过粗&lt;/h3&gt;

&lt;p&gt;锁一般是为了在高并发场景下保护共享资源采用的一种手段，但是如果锁的粒度太粗，会很影响接口性能。&lt;/p&gt;

&lt;p&gt;关于锁粒度：就是你要锁的范围有多大，不管是synchronized还是redis分布式锁，只需要在临界资源处加锁即可，不涉及共享资源的，不必要加锁，就好比你要上卫生间，只需要把卫生间的门锁上就可以，不需要把客厅的门也锁上。&lt;/p&gt;

&lt;p&gt;错误的加锁方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        //非共享资源
        private void notShare(){
        }
        //共享资源
        private void share(){
        }
        private int wrong(){
            synchronized (this) {
                share();
                notShare();
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正确的加锁方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       //非共享资源
        private void notShare(){
        }
        //共享资源
        private void share(){
        }
        private int right(){
            notShare();
            synchronized (this) {
                share();

            }
        } 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;三、最后&lt;/h2&gt;

&lt;h3&gt;接口性能问题形成的原因思考&lt;/h3&gt;

&lt;p&gt;我相信很多接口的效率问题不是一朝一夕形成的，在需求迭代的过程中，为了需求快速上线，采取直接累加代码的方式去实现功能，这样会造成以上这些接口性能问题。&lt;/p&gt;

&lt;p&gt;变换思路，更高一级思考问题，站在接口设计者的角度去开发需求，会避免很多这样的问题，也是降本增效的一种行之有效的方式。&lt;/p&gt;

&lt;p&gt;以上，共勉！&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>90dbdd1a31389237c3478f120ad655d1</guid>
<title>没写过复杂 React 组件？来实现下 AntD 的 Space 组件吧</title>
<link>https://toutiao.io/k/plt53qi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 React 技术栈的小伙伴基本每天都在写 React 组件，但是大多是是业务组件，并不是很复杂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本就是传入 props，render 出最终的视图，用 hooks 组织下逻辑，最多再用下 context 跨层传递数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那相对复杂的组件是什么样子的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实 antd 组件库里就有很多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天我们就来实现一个 antd 组件库里的组件 -- Space 组件吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先看下它是怎么用的：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个布局组件：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4683357879234168&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3iaWcruvsK9qfGS0iciaU49ty1bLLCfGcPJtia7ibFgkpz02x2QiaDqggnibCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1358&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文档里介绍它是设置组件的间距的，还可以设置多个组件怎么对齐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如这样 3 个盒子：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4816753926701571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3nc2aW1P25WYtYefnh5OO5hWFqYiaCiau9plA9icvPTdauC3FFYn9NrcdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;764&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3hUuZ7C0da13KvG6CMgVibhJTATTUjT8NvyX0bZId8kaexJcmPibDwOibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;628&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;渲染出来是这样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2627737226277371&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3tVfYq5Lrj9us0uRWj2cejYmuPhyWu6yWERfQZ6h4ACqzoYQWicLSJRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;548&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们用 Space 组件包一下，设置方向为水平，就变成这样了（漏了一张代码截图，看后面的吧）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4319526627218935&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3ZTx4qoKpdTZ4ic9AsQ9hpSN1f8libvJh52JUjRBytF1mAiaKSku6CH83Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;676&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，也可以竖直：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2824207492795389&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3EhIPVleHbpdXMvr44Mk1vS2lYFoW3TVqPU73ssAia4t97xlQ4s4S4icw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2082&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;水平和竖直的间距都可以通过 size 来设置：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.42965116279069765&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3bO7T6mib8NDTgickkBXico5Mz2t0DJZo3lsFbOzDg0z4NAKcVt9h52oaw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1720&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以设置 large、middle、small 或者任意数值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多个子节点可以设置对齐方式，比如 start、end、center 或者 baseline：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.38125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3VISQB98Lh6IpdmKJQiaHQUXhVD7fuo6uCHqQxSRB6hMtuqNtvKSLDTQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;2080&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外子节点过多可以设置换行：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3925423728813559&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3fac3HFwBkIq7EUUW6bVhB7cyb4uqia2uK0wOB84teaiaiaEs8gQ145Pdw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1475&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;space 也可以单独设置行列的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40694789081885857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3DykibIChTPQBxic59wAdAa4xicpVNCO6zIVb8nCbZbnaOoiaY9stV7XeSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2418&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，它还可以设置 split 分割线部分：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2768&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3ibYk5WTon0TQeezxcW9443CJ1RfTrMFug55rIsPOicGFznXPaOS5o0vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2500&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，你也可以不直接设置 size，而是通过 ConfigProvider 修改 context 中的默认值：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3918791312559018&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn397weOdkvKKpF3EeHzqIQOzeFBSsCMraxzwXm19EcUKZa8NksHSTgOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2118&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很明显，Space 内部会读取 context 中的 size 值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样如果有多个 Space 组件就不用每个都设置了，统一加个 ConfigProvider 就行了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4363459669582119&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3MHsICMBX8IvH2BMq2o0sX5BDMaFfszV3MmdxFr0dibuKVbqptEfJdUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是 Space 组件的全部用法，简单回顾下这几个参数和用法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;direction: 设置子组件方向，水平还是竖直排列&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;size：设置水平、竖直的间距&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;align：子组件的对齐方式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;wrap：超过一屏是否换行，只在水平时有用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;split：分割线的组件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多个 Space 组件的 size 可以通过 ConfigProvider 统一设置默认值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是过一遍就会用了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用起来还是挺简单的，但它的功能挺强大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那这样的布局组件是怎么实现的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看下它最终的 dom：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5539823008849557&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3sLJQeWarw1OzibqWJztR0RQRCQjwyEz8mQylRhY19qGPvvOtIpIxeeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1130&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对每个 box 包了一层 div，设置了 ant-space-item 的 class。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对 split 部分包了一层 span，设置了 ant-space-item-split 的 class。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最外层包了一层 div，设置了 ant-space 等 class。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些还是很容易想到的，毕竟设置布局嘛，不包一层怎么布局？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但虽然看起来挺简单，实现的话还是有不少东西的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们来写一下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先声明组件 props 的类型：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4394506866416979&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3xfJnnoibGuMXohicfjcd9TJF6MufQzKHkwgKEmeryT0ryuO1Ku2Cxtvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1602&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是 style 是 React.CSSProperties 类型，也就是各种 css 都可以写。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;split 是 React.ReactNode 类型，也就是可以传入 jsx。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其余的参数的类型就是根据取值来，我们上面都测试过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Space 组件会对所有子组件包一层 div，所以需要遍历传入的 children，做下修改：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;props 传入的 children 要转成数组可以用 React.Children.toArray 方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的同学说，children 不是已经是数组了么？为什么还要用 React.Children.toArray 转一下？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 toArray 可以对 children 做扁平化：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4824824824824825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3fwMibdFs7iaLicMXFvibM5BibBNxeTmA8Y9J5ub6VatxacGXosibiafNuFVew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;999&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更重要的是直接调用 children.sort() 会报错：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4814516129032258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3r62FdABH9PPSicgUhQ8dvdKTufLAr3Al3eaFKdagCJhjKJ9QLFMS8uQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2480&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 toArray 之后就不会了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38275499474237645&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3bqDvgRJlmWqbfAdNyuJb5aD4V7EmtqiaRKUnhxNsZMGUztcictXfg9XQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1902&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同理，&lt;strong&gt;我们会用 React.Children.forEach，React.Children.map 之类的方法操作 children，而不是直接操作。&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10119047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3eQGLsClWyaajVkVibmTGYbspA41TqjPs9QaiaVPCv2BP2dIk9wRpP28Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1344&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这里我们有一些特殊的需求，比如空节点不过滤掉，依然保留。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以用 React.Children.forEach 自己实现一下 toArray：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.740506329113924&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3icdF1xl4QxDVrPTW8SWV9aSSZQhGs6XpsMib4wqjTA4iagOr4wzicgv0aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1580&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分比较容易看懂，就是用 React.Children.forEach 遍历 jsx 节点，对每个节点做下判断，如果是数组或 fragment 就递归处理，否则 push 到数组里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保不保留空节点可以根据 keepEmpty 的 option 来控制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样用：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11480865224625623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn32X5Awia3pTGWjYewpt9oAno3G39xGdURZ9oJhjQHJAnC4PDAuMR9gMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;children 就可以遍历渲染 item 了，这部分是这样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3867069486404834&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3zRd5BYpmB33xJXfseGaHPd5xLQJBNiby4F3GJkFxIH3M674gmV6oIGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;662&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们单独封装个 Item 组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后 childNodes 遍历渲染这个 Item 就可以了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8026706231454006&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3RmHic5qicDH1V5uEEWJKxb0oNdqyrjEdQfIEeuuufMuyQ6en9Eialkz5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1348&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后把这所有的 Item 组件再放到最外层 div 里：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2099236641221374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3PmQYq7CIJasNVoiaf6CeWDicTgDbdHFlVak1erK9I2yrcjIPIia5Fb1MQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;524&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就可以分别控制整体的布局和 Item 的布局了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的布局还是通过 className 和样式来的：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;className 通过 props 计算而来：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5619834710743802&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3aRwV5KtUKzIeqSKWZYRB28mibWicHxJIM88MRVCNXe1VicODav8ozrtrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1210&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用到了 classnames 这个包，这个算是 react 生态很常用的包了，根据 props 动态生成 className 基本都用这个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个前缀是动态获取的，最终就是 ant-space 的前缀：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15897435897435896&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3YpibvSsLUUL1uhiaeGScROvwChKKJcMwuodHa2ESHpVCxIJTRXZmLt9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这些 class 的样式也都定义好：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$&lt;span&gt;ant-prefix&lt;/span&gt;: &#x27;&lt;span&gt;ant&lt;/span&gt;&#x27;;&lt;br/&gt;&lt;br/&gt;$&lt;span&gt;space-prefix-cls&lt;/span&gt;: #{$ant-prefix}&lt;span&gt;-space&lt;/span&gt;;&lt;br/&gt;$&lt;span&gt;space-item-prefix-cls&lt;/span&gt;: #{$ant-prefix}&lt;span&gt;-space-item&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt;.#{$space-prefix-cls} {&lt;br/&gt;  &lt;span&gt;display&lt;/span&gt;: inline-flex;&lt;br/&gt;&lt;br/&gt;  &amp;amp;-vertical {&lt;br/&gt;    &lt;span&gt;flex-direction&lt;/span&gt;: column;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &amp;amp;&lt;span&gt;-align&lt;/span&gt; {&lt;br/&gt;    &amp;amp;-center {&lt;br/&gt;      &lt;span&gt;align-items&lt;/span&gt;: center;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &amp;amp;&lt;span&gt;-start&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;align-items&lt;/span&gt;: flex-start;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &amp;amp;&lt;span&gt;-end&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;align-items&lt;/span&gt;: flex-end;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &amp;amp;&lt;span&gt;-baseline&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;align-items&lt;/span&gt;: baseline;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;.#{$space-prefix-cls} {&lt;br/&gt;  &amp;amp;-rtl {&lt;br/&gt;    &lt;span&gt;direction&lt;/span&gt;: rtl;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;整个容器 inline-flex，然后根据不同的参数设置 align-items 和 flex-direction 的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后一个 direction 的 css 可能大家没用过，是设置文本方向的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5205314009661836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3C8xywCibibXxuaTiatYeOa0DUQOUvLrWv8ibiaao1uBBj8Q5b6qCpvbkLLg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1656&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，就通过 props 动态给最外层 div 加上了相应的 className，设置了对应的样式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但还有一部分样式没设置，也就是间距：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这部分可以用 gap 设置：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7570621468926554&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3dfIjqaLxHT57oJqncCYPKtXhNhw9WCbKLaibk7WfRwlOKFD10v8VOJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1062&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，用 margin 也可以，只不过那个要单独处理下最后一个元素，比较麻烦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过 antd 这种组件自然要做的兼容性好点，所以两种都支持，支持 gap 就用 gap，否则用 margin。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题来了，antd 是怎么检测浏览器是否支持 gap 样式的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它是这么做的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.86084142394822&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3OJibgejVib3gNZ7Bca8kmQtnTjaInwHhUoGJLRyGLFv3AoNgiapibAVNMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1236&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个 div，设置样式，加到 body 下，看看 scrollHeight 是多少，最后把这个元素删掉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就能判断是是否支持 gap、column 等样式，因为不支持的话高度会是 0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后它又提供了这样一个 hook：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4716981132075472&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3fhp9VXICFV8dxGdSk8tsR7nHWtZOkVTtpP8R7SdO44Owm47iciawukPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1378&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一次会检测并设置 state 的值，之后直接返回这个检测结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样组件里就可以就可以用这个 hook 来判断是否支持 gap，从而设置不同的样式了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8677354709418837&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3Kg5LpCjXO6Tz3JfqjcbAwjG305HeViaWWd9OsibAtmB5tsibiaQgxnUQug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;998&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是很巧妙？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，这个组件还会从 ConfigProvider 中取值，这个我们见到过：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4363459669582119&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3MHsICMBX8IvH2BMq2o0sX5BDMaFfszV3MmdxFr0dibuKVbqptEfJdUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，再处理下这部分：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35165876777251187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3k8bgwG11xSJuhBiancSEyPOCf7NMmEZBmKXu6rlrRQk5wxCSDFGbuNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2110&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 useContext 读取 context 中的值，设置为 props 的解构默认值，这样如果传入了 props.size 就用传入的值，否则就用 context 里的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里给 Item 子组件传递数据也是通过 context，因为 Item 组件不一定会在哪一层。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用 createContext 创建 context 对象：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30868761552680224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3icfazblIFXicfVnpEYjInLe21mxsAsQCVNbek9YupQqyZKZTTxTFkmTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1082&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把计算出的 size：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.19579646017699115&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3UDFG9o8QoiaL3IEd5SQFmTSkEOOnen5LqtzecytqMKAoZJTKSmrjgLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1808&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有其他的一些值：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14596670934699105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3BJr3vdJY1smu6Cguheu8hvukyWZt3BMkjGoQWGZwGlXhrGYD46U4rQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1562&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;都通过 Provider 设置到 spaceContext 中：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3733955659276546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3oeCQROTBS5eylgB8ia8UjUeqLB8PKlXfWaOwvDxMhWaTxUmBIiaC3TKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1714&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样子组件就能拿到 spaceContext 中的值了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里 useMemo 很多同学不会用，其实很容易理解：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;props 变了会触发组件重新渲染，但有的时候 props 并不需要变化却每次都变，这样就可以通过 useMemo 来避免它没必要的变化了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;useCallback 也是同样的道理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算 size 的时候封装了一个 getNumberSize 方法，对于字符串枚举值设置了一些固定的数值：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34913793103448276&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3OQDJALznEeQj2og24NVNqYWX5ibA4WsiaibIWWNwrGunyt8136FNLtlGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1392&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，这个组件我们就完成了，当然，Item 组件还没展开讲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来欣赏下这个 Space 组件的全部源码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; classNames &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;classnames&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; * &lt;span&gt;as&lt;/span&gt; React &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;react&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { ConfigContext, SizeType } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./config-provider&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Item &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./Item&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; toArray &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./toArray&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&#x27;./index.scss&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; useFlexGapSupport &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./useFlexGapSupport&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; interface Option {&lt;br/&gt;  keepEmpty?: boolean;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; SpaceContext = React.createContext({&lt;br/&gt;  &lt;span&gt;latestIndex&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;horizontalSize&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;verticalSize&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;supportFlexGap&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; type SpaceSize = SizeType | number;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; interface SpaceProps extends React.HTMLAttributes&amp;lt;HTMLDivElement&amp;gt; {&lt;br/&gt;  className?: string;&lt;br/&gt;  style?: React.CSSProperties;&lt;br/&gt;  size?: SpaceSize | [SpaceSize, SpaceSize];&lt;br/&gt;  direction?: &lt;span&gt;&#x27;horizontal&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;vertical&#x27;&lt;/span&gt;;&lt;br/&gt;  align?: &lt;span&gt;&#x27;start&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;end&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;center&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;baseline&#x27;&lt;/span&gt;;&lt;br/&gt;  split?: React.ReactNode;&lt;br/&gt;  wrap?: boolean;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; spaceSize = {&lt;br/&gt;  &lt;span&gt;small&lt;/span&gt;: &lt;span&gt;8&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;middle&lt;/span&gt;: &lt;span&gt;16&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;large&lt;/span&gt;: &lt;span&gt;24&lt;/span&gt;,&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getNumberSize&lt;/span&gt;(&lt;span&gt;size: SpaceSize&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;typeof&lt;/span&gt; size === &lt;span&gt;&#x27;string&#x27;&lt;/span&gt; ? spaceSize[size] : size || &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Space: React.FC&amp;lt;SpaceProps&amp;gt; = &lt;span&gt;&lt;span&gt;props&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; { getPrefixCls, space, &lt;span&gt;direction&lt;/span&gt;: directionConfig } = React.useContext(ConfigContext);&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; {&lt;br/&gt;    size = space?.size || &lt;span&gt;&#x27;small&#x27;&lt;/span&gt;,&lt;br/&gt;    align,&lt;br/&gt;    className,&lt;br/&gt;    children,&lt;br/&gt;    direction = &lt;span&gt;&#x27;horizontal&#x27;&lt;/span&gt;,&lt;br/&gt;    split,&lt;br/&gt;    style,&lt;br/&gt;    wrap = &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;    ...otherProps&lt;br/&gt;  } = props;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; supportFlexGap = useFlexGapSupport();&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; [horizontalSize, verticalSize] = React.useMemo(&lt;br/&gt;    &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br/&gt;      ((&lt;span&gt;Array&lt;/span&gt;.isArray(size) ? size : [size, size]) &lt;span&gt;as&lt;/span&gt; [SpaceSize, SpaceSize]).map(&lt;span&gt;&lt;span&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br/&gt;        getNumberSize(item),&lt;br/&gt;      ),&lt;br/&gt;    [size],&lt;br/&gt;  );&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; childNodes = toArray(children, {&lt;span&gt;keepEmpty&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;});&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; mergedAlign = align === &lt;span&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; direction === &lt;span&gt;&#x27;horizontal&#x27;&lt;/span&gt; ? &lt;span&gt;&#x27;center&#x27;&lt;/span&gt; : align;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; prefixCls = getPrefixCls(&lt;span&gt;&#x27;space&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; cn = classNames(&lt;br/&gt;    prefixCls,&lt;br/&gt;    &lt;span&gt;`&lt;span&gt;${prefixCls}&lt;/span&gt;-&lt;span&gt;${direction}&lt;/span&gt;`&lt;/span&gt;,&lt;br/&gt;    {&lt;br/&gt;      [&lt;span&gt;`&lt;span&gt;${prefixCls}&lt;/span&gt;-rtl`&lt;/span&gt;]: directionConfig === &lt;span&gt;&#x27;rtl&#x27;&lt;/span&gt;,&lt;br/&gt;      [&lt;span&gt;`&lt;span&gt;${prefixCls}&lt;/span&gt;-align-&lt;span&gt;${mergedAlign}&lt;/span&gt;`&lt;/span&gt;]: mergedAlign,&lt;br/&gt;    },&lt;br/&gt;    className,&lt;br/&gt;  );&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; itemClassName = &lt;span&gt;`&lt;span&gt;${prefixCls}&lt;/span&gt;-item`&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; marginDirection = directionConfig === &lt;span&gt;&#x27;rtl&#x27;&lt;/span&gt; ? &lt;span&gt;&#x27;marginLeft&#x27;&lt;/span&gt; : &lt;span&gt;&#x27;marginRight&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// Calculate latest one&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; latestIndex = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; nodes = childNodes.map(&lt;span&gt;(&lt;span&gt;child: any, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (child !== &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; child !== &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;      latestIndex = i;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; key = (child &amp;amp;&amp;amp; child.key) || &lt;span&gt;`&lt;span&gt;${itemClassName}&lt;/span&gt;-&lt;span&gt;${i}&lt;/span&gt;`&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;      &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;Item&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;{itemClassName}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;key&lt;/span&gt;=&lt;span&gt;{key}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;direction&lt;/span&gt;=&lt;span&gt;{direction}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;index&lt;/span&gt;=&lt;span&gt;{i}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;marginDirection&lt;/span&gt;=&lt;span&gt;{marginDirection}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;split&lt;/span&gt;=&lt;span&gt;{split}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;wrap&lt;/span&gt;=&lt;span&gt;{wrap}&lt;/span&gt;&lt;br/&gt;      &amp;gt;&lt;/span&gt;&lt;br/&gt;        {child}&lt;br/&gt;      &lt;span&gt;&amp;lt;/&lt;span&gt;Item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;    );&lt;br/&gt;  });&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; spaceContext = React.useMemo(&lt;br/&gt;    &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({ horizontalSize, verticalSize, latestIndex, supportFlexGap }),&lt;br/&gt;    [horizontalSize, verticalSize, latestIndex, supportFlexGap],&lt;br/&gt;  );&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (childNodes.length === &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; gapStyle: React.CSSProperties = {};&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (wrap) {&lt;br/&gt;    gapStyle.flexWrap = &lt;span&gt;&#x27;wrap&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!supportFlexGap) {&lt;br/&gt;      gapStyle.marginBottom = -verticalSize;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (supportFlexGap) {&lt;br/&gt;    gapStyle.columnGap = horizontalSize;&lt;br/&gt;    gapStyle.rowGap = verticalSize;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;{cn}&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;{{&lt;/span&gt;&lt;br/&gt;        ...gapStyle,&lt;br/&gt;        ...style,&lt;br/&gt;      }}&lt;br/&gt;      {&lt;span&gt;...otherProps&lt;/span&gt;}&lt;br/&gt;    &amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;SpaceContext.Provider&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;{spaceContext}&lt;/span&gt;&amp;gt;&lt;/span&gt;{nodes}&lt;span&gt;&amp;lt;/&lt;span&gt;SpaceContext.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;  );&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; Space;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回顾下要点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;基于 React.Children.forEach 自己封装了 toArray 方法，做了一些特殊处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对 childNodes 遍历之后，包裹了一层 Item 组件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;封装了 useFlexGapSupport 的 hook，里面通过创建 div 检查 scrollHeight 的方式来确定是否支持 gap 样式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 useContext 读取 ConfigContext 的值，作为 props 的解构默认值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 createContext 创建 spaceContext，并通过 Provider 设置其中的值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 useMemo 缓存作为参数的对象，避免不必要的渲染&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 classnames 包来根据 props 动态生成 className&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思路理的差不多了，再来看下 Item 的实现：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分比较简单，直接上全部代码了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import * as React from &lt;span&gt;&#x27;react&#x27;&lt;/span&gt;;&lt;br/&gt;import { SpaceContext } from &lt;span&gt;&#x27;.&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; interface ItemProps {&lt;br/&gt;  className: string;&lt;br/&gt;  children: React.ReactNode;&lt;br/&gt;  index: number;&lt;br/&gt;  direction?: &lt;span&gt;&#x27;horizontal&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;vertical&#x27;&lt;/span&gt;;&lt;br/&gt;  marginDirection: &lt;span&gt;&#x27;marginLeft&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;marginRight&#x27;&lt;/span&gt;;&lt;br/&gt;  split?: string | React.ReactNode;&lt;br/&gt;  wrap?: boolean;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; default &lt;span&gt;function&lt;/span&gt; Item({&lt;br/&gt;  className,&lt;br/&gt;  direction,&lt;br/&gt;  index,&lt;br/&gt;  marginDirection,&lt;br/&gt;  children,&lt;br/&gt;  split,&lt;br/&gt;  wrap,&lt;br/&gt;}: ItemProps) {&lt;br/&gt;  const { horizontalSize, verticalSize, latestIndex, supportFlexGap } =&lt;br/&gt;    React.useContext(SpaceContext);&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; style: React.CSSProperties = {};&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!supportFlexGap) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (direction === &lt;span&gt;&#x27;vertical&#x27;&lt;/span&gt;) {&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (index &amp;lt; latestIndex) {&lt;br/&gt;        style = { marginBottom: horizontalSize / (split ? 2 : 1) };&lt;br/&gt;      }&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      style = {&lt;br/&gt;        ...(index &amp;lt; latestIndex &amp;amp;&amp;amp; { [marginDirection]: horizontalSize / (split ? 2 : 1) }),&lt;br/&gt;        ...(wrap &amp;amp;&amp;amp; { paddingBottom: verticalSize }),&lt;br/&gt;      };&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (children === null || children === undefined) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; null;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;    &amp;lt;&amp;gt;&lt;br/&gt;      &amp;lt;div className={className} style={style}&amp;gt;&lt;br/&gt;        {children}&lt;br/&gt;      &amp;lt;/div&amp;gt;&lt;br/&gt;      {index &amp;lt; latestIndex &amp;amp;&amp;amp; split &amp;amp;&amp;amp; (&lt;br/&gt;        &amp;lt;span className={`&lt;span&gt;${className}&lt;/span&gt;-split`} style={style}&amp;gt;&lt;br/&gt;          {split}&lt;br/&gt;        &amp;lt;/span&amp;gt;&lt;br/&gt;      )}&lt;br/&gt;    &amp;lt;/&amp;gt;&lt;br/&gt;  );&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 useContext 从 SpaceContext 中取出 Space 组件里设置的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据是否支持 gap 来分别使用 gap 或者 margin、padding 的样式来设置间距。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个元素都用 div 包裹下，设置 className。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不是最后一个元素并且有 split 部分，就渲染 split 部分，用 span 包裹下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这块还是比较清晰的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，还有 ConfigProvider 的部分没有看：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分就是创建一个 context，并初始化一些值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; React &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;react&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; type DirectionType = &lt;span&gt;&#x27;ltr&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;rtl&#x27;&lt;/span&gt; | &lt;span&gt;undefined&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; type SizeType = &lt;span&gt;&#x27;small&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;middle&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;large&#x27;&lt;/span&gt; | &lt;span&gt;undefined&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; interface ConfigConsumerProps {&lt;br/&gt;  &lt;span&gt;getPrefixCls&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;suffixCls?: string&lt;/span&gt;) =&amp;gt;&lt;/span&gt; string;&lt;br/&gt;  direction?: DirectionType;&lt;br/&gt;  space?: {&lt;br/&gt;    size?: SizeType | number;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; defaultGetPrefixCls = &lt;span&gt;(&lt;span&gt;suffixCls?: string&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; suffixCls ? &lt;span&gt;`ant-&lt;span&gt;${suffixCls}&lt;/span&gt;`&lt;/span&gt; : &lt;span&gt;&#x27;ant&#x27;&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; ConfigContext = React.createContext&amp;lt;ConfigConsumerProps&amp;gt;({&lt;br/&gt;    &lt;span&gt;getPrefixCls&lt;/span&gt;: defaultGetPrefixCls&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有没有感觉 antd 里用 context 简直太多了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确实。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为你不能保证组件和子组件隔着几层。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 Form 和 Form.Item：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1085450346420322&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3ic8kpvraTpTqN9YdsuzYiafauEmk0Qc6BM59RKSgcmmldic5dYqU5BxWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 ConfigProvider 和各种组件（这里是 Space）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4363459669582119&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3MHsICMBX8IvH2BMq2o0sX5BDMaFfszV3MmdxFr0dibuKVbqptEfJdUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有刚讲过的 Space 和 Item。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们能用 props 传数据么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不能，因为不知道隔几层。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 antd 里基本都是用 cotnext 传数据的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你会你在 antd 里会见到大量的用 createCotnext 创建 context，通过 Provider 修改 context 值，通过 Consumer 或者 useContext 读取 context 值的这类逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我们来测试下自己实现的这个 Space 组件吧：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; Space &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./space&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&#x27;./SpaceTest.css&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { ConfigContext, defaultGetPrefixCls,  } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./space/config-provider&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; React &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;react&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; SpaceTest = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;ConfigContext.Provider&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;getPrefixCls:&lt;/span&gt; &lt;span&gt;defaultGetPrefixCls&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;space:&lt;/span&gt; { &lt;span&gt;size:&lt;/span&gt; &#x27;&lt;span&gt;large&lt;/span&gt;&#x27;}&lt;br/&gt;    }&lt;br/&gt;  }&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;Space&lt;/span&gt; &lt;br/&gt;      &lt;span&gt;direction&lt;/span&gt;=&lt;span&gt;&quot;horizontal&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;align&lt;/span&gt;=&lt;span&gt;&quot;end&quot;&lt;/span&gt; &lt;br/&gt;      &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;{{height:&lt;/span&gt;&#x27;200px&#x27;}}&lt;br/&gt;      &lt;span&gt;split&lt;/span&gt;=&lt;span&gt;{&lt;/span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;box&quot;&lt;/span&gt; &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;{{background:&lt;/span&gt; &#x27;red&#x27;}}&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;} &lt;br/&gt;      wrap={true}&lt;br/&gt;    &amp;gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;Space&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;Space&lt;/span&gt; &lt;br/&gt;      &lt;span&gt;direction&lt;/span&gt;=&lt;span&gt;&quot;horizontal&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;align&lt;/span&gt;=&lt;span&gt;&quot;end&quot;&lt;/span&gt; &lt;br/&gt;      &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;{{height:&lt;/span&gt;&#x27;200px&#x27;}}&lt;br/&gt;      &lt;span&gt;split&lt;/span&gt;=&lt;span&gt;{&lt;/span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;box&quot;&lt;/span&gt; &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;{{background:&lt;/span&gt; &#x27;red&#x27;}}&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;} &lt;br/&gt;      wrap={true}&lt;br/&gt;    &amp;gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;Space&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;ConfigContext.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; SpaceTest;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分不咋用解释了。就是 ConfigProvider 包裹了俩 Space 组件，这俩 Space 组件没设置 size 值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置了 direction、align、split、wrap 等参数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;渲染结果是对的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9743589743589743&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGia0XOtYJf4I0mfN5OyDWUn3ibchXbbicMJH9qc4zVBVUKFkWzXHUYAdmqmWNe7aUYToS3w9YZz0vSSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这样，我们自己实现了 antd 的 Space 组件！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整代码在 github：https://github.com/QuarkGluonPlasma/my-antd-test&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一直写业务代码，可能很少写一些复杂的组件，而 antd 里就有很多复杂组件，我们挑 Space 组件来写了下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个布局组件，可以通过参数设置水平、竖直间距、对齐方式、分割线部分等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现这个组件的时候，我们用到了很多东西：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;用 React.Children.forEach 的 api 来修改每个 childNode。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用 useContext 读取 ConfigContext、SpaceContext 的值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用 createContext 创建 SpaceContext，并用 Provider 修改其中的值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用 useMemo 来避免没必要的渲染&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用 classnames 包来根据 props 动态生成 className&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自己封装了一个检测样式是否支持的自定义 hook&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多同学不会封装布局组件，其实就是对整体和每个 item 都包裹一层，分别设置不同的 class，实现不同的间距等的设置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想一下，这些东西以后写业务组件是不是也可以用上呢？&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>194b39a5355ae10154c20590b4cea973</guid>
<title>企业如何落地 DevOps（上）</title>
<link>https://toutiao.io/k/asz7ago</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;老张的求知思考世界&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;For-Think&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;专注互联网领域相关技术实践和思考，也分享职场成长、读书杂谈等内容。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>