<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>28fc40cd943751e32065612b2ebcd81a</guid>
<title>优质网站同好者周刊（第 094 期）</title>
<link>https://toutiao.io/k/0g3qhhh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%A7%86%E9%A2%91&quot;&gt;&lt;code&gt;视频&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%BD%AC%E5%8C%96&quot;&gt;&lt;code&gt;转化&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A state-of-the-art AI system generates high-quality videos from text prompts&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/makeavideo.studio.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Make A Video&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://makeavideo.studio/&quot;&gt;Make-A-Video&lt;/a&gt; ，是一个最先进的人工智能（&lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;AI&lt;/a&gt;）系统，可以从文本生成高质量视频（Meta 公司出品）。Make A Video 研究建立在文本到图像生成技术的最新进展之上，该技术旨在实现&lt;strong&gt;文本到视频的生成&lt;/strong&gt;，让你的想象力发挥出来，只需几个字或几行文字（超现实主义、现实、风格化）。该系统使用带有描述的图像，来了解世界是什么样子以及通常是如何描述的。它还使用未标记的视频来了解世界如何移动。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6388b6d16584a1758339bf0d&quot;&gt;倾城之链 - Make A Video&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%9C%A8%E7%BA%BF&quot;&gt;&lt;code&gt;在线&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%BC%96%E8%BE%91%E5%99%A8&quot;&gt;&lt;code&gt;编辑器&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%A7%86%E9%A2%91&quot;&gt;&lt;code&gt;视频&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Grape is an online code editor for auto-generating interactive coding videos.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.grape.codes.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Grape | A story-telling platform for programming&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;:https://nicelinks.site/redirect?url=https://www.grape.codes/&quot;&gt;Grape&lt;/a&gt; 是一个在线代码编辑器，用于一键自动&lt;strong&gt;生成互动编码视频&lt;/strong&gt;。用于让用户演示代码操作。它可以把操作过程录制下来，像视频一样播放，但实际是一个小体积的脚本，便于分享和传播。&lt;code&gt;grape&lt;/code&gt; 主要面向用户是：&lt;strong&gt;创作者&lt;/strong&gt;和&lt;strong&gt;学习者&lt;/strong&gt;。&lt;/p&gt;&lt;h3 id=&quot;创作者&quot;&gt;&lt;a href=&quot;#%E5%88%9B%E4%BD%9C%E8%80%85&quot; aria-label=&quot;创作者 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;创作者&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;告别在屏幕录制中翻阅标签，或花费数天时间编辑视频。&lt;/li&gt;&lt;li&gt;创建教程、文档、说明等 - 无需视频编辑或繁琐的逐步解释的麻烦。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;学习者&quot;&gt;&lt;a href=&quot;#%E5%AD%A6%E4%B9%A0%E8%80%85&quot; aria-label=&quot;学习者 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;学习者&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;以易于理解和交互的形式体验整个开发过程。&lt;/li&gt;&lt;li&gt;两全其美：视频与 IDE 的功能相结合。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;您如果对 Grape 感兴趣，可前往以&lt;a href=&quot;https://www.grape.codes/explore&quot;&gt;探索 Grape 效果&lt;/a&gt;，或者&lt;a href=&quot;https://www.grape.codes/create&quot;&gt;创作&lt;/a&gt;来自于你的代码分享（简单试用，体验还行）。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/638897f06584a1758339b9ad&quot;&gt;倾城之链 - Grape | A story-telling platform for programming&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%90%9C%E7%B4%A2&quot;&gt;&lt;code&gt;搜索&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%8F%91%E7%8E%B0&quot;&gt;&lt;code&gt;发现&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%9B%BE%E7%89%87&quot;&gt;&lt;code&gt;图片&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The Stable Diffusion search engine.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/lexica.art.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Lexica - The Stable Diffusion search engine&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://lexica.art/&quot;&gt;Lexica&lt;/a&gt; Stable Diffusion 模型的搜索引擎，可以搜索这个 &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;AI&lt;/a&gt; 作图模型所生成的各种图片。并且，支持上传图像以进行反向搜索。此外，描述你希望看到的图像，也可以&lt;strong&gt;生成图片&lt;/strong&gt;（需要登录）。当下（时值 2022 年末），基于「文字描述」来生成图片及视频，相关产品、AI 模型（Stable Diffusion，相当热门的 AI 作图模型）、创业都非常火爆；如果您对这方面感兴趣，不妨体验下，以汲取灵感。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/638892f56584a1758339b95b&quot;&gt;倾城之链 - Lexica - The Stable Diffusion search engine&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91%E5%99%A8&quot;&gt;&lt;code&gt;图片编辑器&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%9C%A8%E7%BA%BF&quot;&gt;&lt;code&gt;在线&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9&quot;&gt;&lt;code&gt;图片压缩&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：修改图片大小, 照片处理工具, 图片在线编辑&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;万能图片在线编辑器；AI, EPS, PSD, SVG 全格式支持。一键修改照片颜色大小尺寸，自定义尺寸图片裁剪，智能抠图添加水印文字...&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/img.logosc.cn.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 在线修改图片大小尺寸；免费抠图照片处理工具 - 改图神器&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://img.logosc.cn/&quot;&gt;改图神器&lt;/a&gt; ，一款在线 &lt;a href=&quot;https://nicelinks.site/tags/%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91%E5%99%A8&quot;&gt;图片编辑器&lt;/a&gt; 网站（基于 Vue、React、Next.js、Nginx 等搭建）；它支持在线修改图片颜色、尺寸，图片批量压缩，智能抠图去水印，GIF 制作，基于 AI 去水印， 格式转换，添加水印，证件照，漫画头像，透明 LOGO，放大变清晰，转矢量图，视频转 GIF，照片美化，照片变活等功能。有体验其「漫画头像」功能，效果还可以（每天免费使用 2 次）；但亦有不足，譬如脸部有头发等遮挡物等情形，所生成图片颇不忍睹，亟待改进提升。另外，值得一提的是，该公司旗下还有 &lt;a href=&quot;https://nicelinks.site/post/626e6b287d02b74eba0f09c2&quot;&gt;LOGO 设计神器&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://hao.logosc.cn/&quot;&gt;神器集&lt;/a&gt; 等产品。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6387730b6584a1758339af81&quot;&gt;倾城之链 - 在线修改图片大小尺寸；免费抠图照片处理工具 - 改图神器&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%8F%91%E7%8E%B0&quot;&gt;&lt;code&gt;发现&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E4%BA%A7%E5%93%81&quot;&gt;&lt;code&gt;产品&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%A4%BE%E5%8C%BA&quot;&gt;&lt;code&gt;社区&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：互联网工具, 智能神器, 高效工具, 神器导航&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这里收集了最新最酷的互联网产品和创意工具网站。一键提交网址和大家分享讨论你的发现的设计，开发，运营，智能神器吧！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/hao.logosc.cn.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 发现最酷的互联网产品工具和智能神器！ - 神器集&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://hao.logosc.cn/&quot;&gt;神器集&lt;/a&gt; 是一个发现 &amp;amp; 分享&lt;strong&gt;有趣在线工具&lt;/strong&gt;的网站。分享产品非常简单，只需提交一个产品链接并完善相关内容，审核通过后我们将微信自动通知你。其同类型产品，有 &lt;a href=&quot;https://nicelinks.site&quot;&gt;倾城之链&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/604a16ec5f9af714fe21dcc8&quot;&gt;新趣集&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/5db1d4aba7d64d01501bc72a&quot;&gt;创造者日报&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/631ebcae6d57c401f21d6713&quot;&gt;线圈&lt;/a&gt; 等。另外，值得一提的是，该公司旗下还有 &lt;a href=&quot;https://nicelinks.site/post/626e6b287d02b74eba0f09c2&quot;&gt;LOGO 设计神器&lt;/a&gt;、&lt;a href=&quot;https://nicelinks.site/post/6387730b6584a1758339af81&quot;&gt;改图神器&lt;/a&gt; 等产品。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63876dc76584a1758339ae7f&quot;&gt;倾城之链 - 发现最酷的互联网产品工具和智能神器！ - 神器集&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2&quot;&gt;&lt;code&gt;个人博客&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E5%8F%91%E8%80%85&quot;&gt;&lt;code&gt;开发者&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%95%B0%E6%8D%AE%E5%BA%93&quot;&gt;&lt;code&gt;数据库&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;编程小梦，专注数据库领域的技术博客。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/blog.bcmeng.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 编程小梦|康凯森的技术博客&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://blog.bcmeng.com/&quot;&gt;编程小梦&lt;/a&gt; ，康凯森的个人技术博客，基于 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot;&gt;Vue&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/6339a6aa35a9c117dacf2363&quot;&gt;Nginx&lt;/a&gt; 、Bootstrap 等搭建，专注&lt;a href=&quot;https://nicelinks.site/tags/%E6%95%B0%E6%8D%AE%E5%BA%93&quot;&gt;数据库&lt;/a&gt;领域。除了个人博客，作者还会在「知识星球」，分享数据库知识、程序员通用技能、程序员成长、面试经验、创业心得、投资心得等内容。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6386e3416584a1758339a79f&quot;&gt;倾城之链 - 编程小梦|康凯森的技术博客&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;山不在高，有仙则名。水不在深，有龙则灵。斯是陋室，惟吾德馨&lt;/strong&gt;。苔痕上阶绿，草色入帘青。谈笑有鸿儒，往来无白丁。可以调素琴，阅金经。无丝竹之乱耳，无案牍之劳形。南阳诸葛庐，西蜀子云亭。孔子云：何陋之有？── 唐 · 刘禹锡《陋室铭》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2c75096120eb55ecf052564098960a0b</guid>
<title>微服务注册中心设计原理与Golang实现</title>
<link>https://toutiao.io/k/5iegt7s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;微服务为什么要用注册中心搞注册发现？直接用域名不香吗？不好意思，还真不太香。这篇文章我们来一起看看，为啥微服务架构里要引入注册中心，以及服务注册和发现大致的原理是什么。&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzUzNTY5MzU2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4pGhLz2xEbRFHnAQon2QLYgbBibCJo1ibJHesLWshPJeRibateRtAqkaf6BgjlbhYiaxHLq6Zu07CRPw/0?wx_fmt=png&quot; data-nickname=&quot;网管叨bi叨&quot; data-alias=&quot;kevin_tech&quot; data-signature=&quot;分享软件开发和系统架构设计基础、Go 语言和Kubernetes。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;内容提要&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;通过本文您将 get 如下知识：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;微服务为什么引入服务注册发现&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务注册中心设计原理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Golang 代码实现服务注册中心&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么引入服务注册发现&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从单体架构转向微服务架构过程中，当服务调用其他服务时，如何找到正确的服务地址是最基础问题。服务拆分的早期，将服务调用域名写死到代码或配置文件中，然后通过 Host 配置或 DNS 域名解析进行路由寻址，服务有多个实例，还会加入负载均衡 （Nginx、F5）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5939849624060151&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd8pryNTRgvzFHpUlsPw9Tu0PsYlyHY9F1LsMAoJ7BEhX25PhoQSdBK0fR9A8LkuWfrS2r5cxOiaAVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;532&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;（服务域名配置模式）&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;但人工维护慢慢会出现瓶颈和问题：新增服务或服务扩容，所有依赖需要新增修改配置；某台服务器挂了还要手动摘流量；服务上下线变更时效慢；人工配置错误或漏配；RPC 类型服务不能满足 ... 这时你会想如果能让服务自动化完成配置（&lt;/span&gt;&lt;span&gt;注册&lt;/span&gt;&lt;span&gt;）和查找（&lt;/span&gt;&lt;span&gt;发现&lt;/span&gt;&lt;span&gt;）就好了，于是乎服务注册发现就应运而生。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6371681415929203&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd8pryNTRgvzFHpUlsPw9Tu06zFA7txzpbUcebOEYr5f0B8A6IxU8U5Ydll6Lu8iaaZzgHqrKdgW9eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;565&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;（服务注册发现模式）&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;可以看出，所有服务提供者在上下线时都会告知服务注册中心，服务消费者要查找服务直接从注册中心拉取。一切都变得更加美好，那么服务注册中心该如何实现呢？简单！优秀的开源项目已有一大把，大名鼎鼎的 &lt;/span&gt;&lt;span&gt;Zookeeper、Eureka&lt;/span&gt;&lt;span&gt;，还有后期之秀 &lt;/span&gt;&lt;span&gt;Consul、Nacos、Etcd&lt;/span&gt;&lt;span&gt;，当然有些算是分布式 KV 存储，要实现服务注册发现仍需些额外工作。如何技术选型，是 AP 模式更好还是 CP 模式更好？&lt;/span&gt;&lt;span&gt;今天先抛开这些开源项目，我们亲自动手&lt;span&gt;来&lt;/span&gt;实现一个服务注册中心，深入理解其设计原理，逐行代码分析与实践。PS：本文项目代码参考 &lt;/span&gt;&lt;span&gt;bilibili discover &lt;/span&gt;&lt;span&gt;开源项目进行改造。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注册中心实现原理&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;4&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;设计思想&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;首先进行功能需求分析，作为服务注册中心，要实现如下基本功能：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务注册：接受来自服务提交的注册信息，并保存起来&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务下线：接受服务的主动下线请求，并将服务从注册信息表中删除&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务获取：调用方从注册中心拉取服务信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务续约：服务健康检查，服务通过心跳保持（主动续约）告知注册中心服务可用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务剔除：注册中心将长时间不续约的服务实例从注册信息表中删除&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;5&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;构造注册表&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;服务中心首先要维护一个服务地址注册信息列表（简称&lt;/span&gt;&lt;span&gt;注册表&lt;/span&gt;&lt;span&gt;）。通俗理解注册表就像手机&lt;/span&gt;&lt;span&gt;通讯录&lt;/span&gt;&lt;span&gt;，记录了所有联系人（&lt;/span&gt;&lt;span&gt;服务&lt;/span&gt;&lt;span&gt;）的电话（&lt;/span&gt;&lt;span&gt;服务地址&lt;/span&gt;&lt;span&gt;），通过联系人姓名（&lt;/span&gt;&lt;span&gt;服务名称&lt;/span&gt;&lt;span&gt;）即可找到。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么如何存储注册表呢？最普遍认知想到存数据库（Redis 这种内存数据库），Zookeeper、Etcd 本身作为分布式 KV 存储天然具有成为注册中心的优势，但这些都会引入新组件，要考虑其稳定性及性能。那么我们可以直接将注册信息存到&lt;/span&gt;&lt;span&gt;内存&lt;/span&gt;&lt;span&gt;中，这时候你会想如果服务挂了内存数据丢了怎么办？这个问题后面我们会想办法解决。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先构建一个&lt;/span&gt;&lt;span&gt;&lt;strong&gt;注册表 Registry 数据结构&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，定义如下：&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Registry &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    apps &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]*Application&lt;br/&gt;    lock sync.RWMutex&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;apps  记录&lt;span&gt;应用服务 Application 的信息&lt;/span&gt;，使用 map 结构，key 为应用服务的唯一标识，值为应用服务结构类型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;lock  读写锁，保障并发读写安全&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;应用服务 Application&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;结构如下：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Application &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    appid           &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;    instances       &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]*Instance&lt;br/&gt;    latestTimestamp &lt;span&gt;int64&lt;/span&gt;&lt;br/&gt;    lock            sync.RWMutex&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;服务实例 Instance&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 的结构如下：&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Instance &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    Env      &lt;span&gt;string&lt;/span&gt;   &lt;span&gt;`json:&quot;env&quot;`&lt;/span&gt;&lt;br/&gt;    AppId    &lt;span&gt;string&lt;/span&gt;   &lt;span&gt;`json:&quot;appid&quot;`&lt;/span&gt;&lt;br/&gt;    Hostname &lt;span&gt;string&lt;/span&gt;   &lt;span&gt;`json:&quot;hostname&quot;`&lt;/span&gt;&lt;br/&gt;    Addrs    []&lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;addrs&quot;`&lt;/span&gt;&lt;br/&gt;    Version  &lt;span&gt;string&lt;/span&gt;   &lt;span&gt;`json:&quot;version&quot;`&lt;/span&gt;&lt;br/&gt;    Status   &lt;span&gt;uint32&lt;/span&gt;   &lt;span&gt;`json:&quot;status&quot;`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    RegTimestamp    &lt;span&gt;int64&lt;/span&gt; &lt;span&gt;`json:&quot;reg_timestamp&quot;`&lt;/span&gt;&lt;br/&gt;    UpTimestamp     &lt;span&gt;int64&lt;/span&gt; &lt;span&gt;`json:&quot;up_timestamp&quot;`&lt;/span&gt;&lt;br/&gt;    RenewTimestamp  &lt;span&gt;int64&lt;/span&gt; &lt;span&gt;`json:&quot;renew_timestamp&quot;`&lt;/span&gt;&lt;br/&gt;    DirtyTimestamp  &lt;span&gt;int64&lt;/span&gt; &lt;span&gt;`json:&quot;dirty_timestamp&quot;`&lt;/span&gt;&lt;br/&gt;    LatestTimestamp &lt;span&gt;int64&lt;/span&gt; &lt;span&gt;`json:&quot;latest_timestamp&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注册表及相关依赖的结构体构建完成了，梳理一下所有概念和关系。注册表 Registry 中存放多个应用服务 Application，每个应用服务又会有多个服务实例 Instance，服务实例中存储服务的具体地址和其他信息。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd8pryNTRgvzFHpUlsPw9Tu0TXiaBPBlibEpmEcUC8iaSGyK3lFE4zBZKibcN4McD1jHfmt1KcWjh9lVlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;480&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;5&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;服务注册&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;功能目标：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;接受来自服务提交的注册信息，并保存到注册表中。先&lt;/span&gt;初始化注册表 NewRegistry() ，根据提交信息构建实例 NewInstance()，然后进行注册写入。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewRegistry&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; *&lt;span&gt;Registry&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    registry := &amp;amp;Registry{&lt;br/&gt;        apps: &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]*Application),&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; registry&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewInstance&lt;/span&gt;&lt;span&gt;(req *RequestRegister)&lt;/span&gt; *&lt;span&gt;Instance&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    now := time.Now().UnixNano()&lt;br/&gt;    instance := &amp;amp;Instance{&lt;br/&gt;        Env:             req.Env,&lt;br/&gt;        AppId:           req.AppId,&lt;br/&gt;        Hostname:        req.Hostname,&lt;br/&gt;        Addrs:           req.Addrs,&lt;br/&gt;        Version:         req.Version,&lt;br/&gt;        Status:          req.Status,&lt;br/&gt;        RegTimestamp:    now,&lt;br/&gt;        UpTimestamp:     now,&lt;br/&gt;        RenewTimestamp:  now,&lt;br/&gt;        DirtyTimestamp:  now,&lt;br/&gt;        LatestTimestamp: now,&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; instance&lt;br/&gt;}&lt;br/&gt;r := NewRegistry()&lt;br/&gt;instance := NewInstance(&amp;amp;req)&lt;br/&gt;r.Register(instance, req.LatestTimestamp)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;注册时，先从 apps 中查找是否已注册过，根据唯一标识 key = appid + env  确定。如果没有注册过，先新建应用 app，然后将 instance 加入到 app 中，最后 app 放入注册表中。这里分别使用了读锁和写锁，保障数据安全同时，尽量减少锁时间和锁抢占影响。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Registry)&lt;/span&gt; &lt;span&gt;Register&lt;/span&gt;&lt;span&gt;(instance *Instance, latestTimestamp &lt;span&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*Application, *errcode.Error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    key := getKey(instance.AppId, instance.Env)&lt;br/&gt;    r.lock.RLock()&lt;br/&gt;    app, ok := r.apps[key]&lt;br/&gt;    r.lock.RUnlock()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok { &lt;span&gt;//new app&lt;/span&gt;&lt;br/&gt;        app = NewApplication(instance.AppId)&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//add instance&lt;/span&gt;&lt;br/&gt;    _, isNew := app.AddInstance(instance, latestTimestamp)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; isNew { &lt;span&gt;//todo }&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;//add into registry apps&lt;/span&gt;&lt;br/&gt;    r.lock.Lock()&lt;br/&gt;    r.apps[key] = app&lt;br/&gt;    r.lock.Unlock()&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; app, nil&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;新建应用服务 app，初始化 instances &lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewApplication&lt;/span&gt;&lt;span&gt;(appid &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; *&lt;span&gt;Application&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &amp;amp;Application{&lt;br/&gt;        appid:     appid,&lt;br/&gt;        instances: &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]*Instance),&lt;br/&gt;    }&lt;br/&gt;}   &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;将服务主机实例 instance 加入应用 app 中，注意判断是否已存在，存在根据脏时间戳  DirtyTimestamp 比对，是否进行替换，添加实例信息，更新最新时间 latestTimestamp ，并返回实例。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(app *Application)&lt;/span&gt; &lt;span&gt;AddInstance&lt;/span&gt;&lt;span&gt;(in *Instance, latestTimestamp &lt;span&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*Instance, &lt;span&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    app.lock.Lock() &lt;br/&gt;    &lt;span&gt;defer&lt;/span&gt; app.lock.Unlock()&lt;br/&gt;    appIns, ok := app.instances[in.Hostname]&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; ok { &lt;span&gt;//exist&lt;/span&gt;&lt;br/&gt;        in.UpTimestamp = appIns.UpTimestamp&lt;br/&gt;        &lt;span&gt;//dirtytimestamp&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; in.DirtyTimestamp &amp;lt; appIns.DirtyTimestamp {&lt;br/&gt;            log.Println(&lt;span&gt;&quot;register exist dirty timestamp&quot;&lt;/span&gt;)&lt;br/&gt;            in = appIns&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//add or update instances&lt;/span&gt;&lt;br/&gt;    app.instances[in.Hostname] = in&lt;br/&gt;    app.upLatestTimestamp(latestTimestamp)&lt;br/&gt;    returnIns := &lt;span&gt;new&lt;/span&gt;(Instance)&lt;br/&gt;    *returnIns = *in&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; returnIns, !ok&lt;br/&gt;}   &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;返回 !ok （isNew）表明，本次服务注册时，实例为新增还是替换，用来维护服务健康信息（后面会再次提到）。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;服务注册&lt;span&gt;完成了&lt;/span&gt;，编写测试用例看下效果。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; req = &amp;amp;model.RequestRegister{AppId: &lt;span&gt;&quot;com.xx.testapp&quot;&lt;/span&gt;, Hostname: &lt;span&gt;&quot;myhost&quot;&lt;/span&gt;, Addrs: []&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;http://testapp.xx.com/myhost&quot;&lt;/span&gt;}, Status: &lt;span&gt;1&lt;/span&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;TestRegister&lt;/span&gt;&lt;span&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    r := model.NewRegistry()&lt;br/&gt;    instance := model.NewInstance(req)&lt;br/&gt;    app, _ := r.Register(instance, req.LatestTimestamp)&lt;br/&gt;    t.Log(app)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.08342133051742344&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd8pryNTRgvzFHpUlsPw9Tu0ib3ic8lYLBc7pFrllZZyx3fXLQWM63GLxb1ibuuib7uszeOeUlxGG6kscw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;947&quot;/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;4&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;服务发现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;功能目标：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;查找已注册的服务获取信息，可以指定条件查找，也可以全量查找。这里以&lt;/span&gt;指定过滤条件 appid 、env 和 status 为例。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;r := model.NewRegistry()&lt;br/&gt;fetchData, err := r.Fetch(req.Env, req.AppId, req.Status, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;根据 appid 和 env 组合成 key，然后从注册表的 apps 中获取应用 app，然后通过 app 获取服务实例 GetInstance()&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Registry)&lt;/span&gt; &lt;span&gt;Fetch&lt;/span&gt;&lt;span&gt;(env, appid &lt;span&gt;string&lt;/span&gt;, status &lt;span&gt;uint32&lt;/span&gt;, latestTime &lt;span&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*FetchData, *errcode.Error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    app, ok := r.getApplication(appid, env)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errcode.NotFound&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; app.GetInstance(status, latestTime)&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Registry)&lt;/span&gt; &lt;span&gt;getApplication&lt;/span&gt;&lt;span&gt;(appid, env &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*Application, &lt;span&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    key := getKey(appid, env)&lt;br/&gt;    r.lock.RLock() &lt;br/&gt;    app, ok := r.apps[key]&lt;br/&gt;    r.lock.RUnlock()&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; app, ok&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;根据 app 获取所有应用实例，并用 status 过滤，这里对返回结果 instances 中的 Addr 进行了拷贝返回一个新的切片。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(app *Application)&lt;/span&gt; &lt;span&gt;GetInstance&lt;/span&gt;&lt;span&gt;(status &lt;span&gt;uint32&lt;/span&gt;, latestTime &lt;span&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*FetchData, *errcode.Error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    app.lock.RLock()&lt;br/&gt;    &lt;span&gt;defer&lt;/span&gt; app.lock.RUnlock()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; latestTime &amp;gt;= app.latestTimestamp {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errcode.NotModified&lt;br/&gt;    }&lt;br/&gt;    fetchData := FetchData{&lt;br/&gt;        Instances:       &lt;span&gt;make&lt;/span&gt;([]*Instance, &lt;span&gt;0&lt;/span&gt;),&lt;br/&gt;        LatestTimestamp: app.latestTimestamp,&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; exists &lt;span&gt;bool&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, instance := &lt;span&gt;range&lt;/span&gt; app.instances {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; status&amp;amp;instance.Status &amp;gt; &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;            exists = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;            newInstance := copyInstance(instance)&lt;br/&gt;            fetchData.Instances = &lt;span&gt;append&lt;/span&gt;(fetchData.Instances, newInstance)&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !exists {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errcode.NotFound&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &amp;amp;fetchData, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//deep copy&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;copyInstance&lt;/span&gt;&lt;span&gt;(src *Instance)&lt;/span&gt; *&lt;span&gt;Instance&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    dst := &lt;span&gt;new&lt;/span&gt;(Instance)&lt;br/&gt;    *dst = *src&lt;br/&gt;    &lt;span&gt;//copy addrs&lt;/span&gt;&lt;br/&gt;    dst.Addrs = &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;len&lt;/span&gt;(src.Addrs))&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i, addr := &lt;span&gt;range&lt;/span&gt; src.Addrs {&lt;br/&gt;        dst.Addrs[i] = addr&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; dst&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;编写测试用例，先注册再获取，看到可以正常获取到信息。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.09017132551848513&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd8pryNTRgvzFHpUlsPw9Tu0gIG3jbJkEpibDIoC05MuXKc4k2Evh0LZe10vYYpleokkhPAIUMBXA3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1109&quot;/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;4&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;服务下线&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;功能目标：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;接受服务的下线请求，并将服务从注册信息列表中删除&lt;/span&gt;。通过传入 env, appid, hostname 三要素信息进行对应服务实例的取消。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;r := model.NewRegistry()&lt;br/&gt;r.Cancel(req.Env, req.AppId, req.Hostname, 0)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;根据 appid 和 env 找到对象的 app，然后删除 app 中对应的 hostname。如果 hostname 后 app.instances 为空，那么将 app 从注册表中清除。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Registry)&lt;/span&gt; &lt;span&gt;Cancel&lt;/span&gt;&lt;span&gt;(env, appid, hostname &lt;span&gt;string&lt;/span&gt;, latestTimestamp &lt;span&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*Instance, *errcode.Error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    log.Println(&lt;span&gt;&quot;action cancel...&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;//find app&lt;/span&gt;&lt;br/&gt;    app, ok := r.getApplication(appid, env)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errcode.NotFound&lt;br/&gt;    }   &lt;br/&gt;    instance, ok, insLen := app.Cancel(hostname, latestTimestamp)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errcode.NotFound&lt;br/&gt;    }   &lt;br/&gt;    &lt;span&gt;//if instances is empty, delete app from apps&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; insLen == &lt;span&gt;0&lt;/span&gt; { &lt;br/&gt;        r.lock.Lock()&lt;br/&gt;        &lt;span&gt;delete&lt;/span&gt;(r.apps, getKey(appid, env))&lt;br/&gt;        r.lock.Unlock()&lt;br/&gt;    }   &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; instance, &lt;span&gt;nil&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(app *Application)&lt;/span&gt; &lt;span&gt;Cancel&lt;/span&gt;&lt;span&gt;(hostname &lt;span&gt;string&lt;/span&gt;, latestTimestamp &lt;span&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*Instance, &lt;span&gt;bool&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    newInstance := &lt;span&gt;new&lt;/span&gt;(Instance)&lt;br/&gt;    app.lock.Lock()&lt;br/&gt;    &lt;span&gt;defer&lt;/span&gt; app.lock.Unlock()&lt;br/&gt;    appIn, ok := app.instances[hostname]&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, ok, &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;    }   &lt;br/&gt;    &lt;span&gt;//delete hostname&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;delete&lt;/span&gt;(app.instances, hostname)&lt;br/&gt;    appIn.LatestTimestamp = latestTimestamp&lt;br/&gt;    app.upLatestTimestamp(latestTimestamp)&lt;br/&gt;    *newInstance = *appIn&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; newInstance, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;len&lt;/span&gt;(app.instances)&lt;br/&gt;}   &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;编写测试用例先注册，再取消，然后获取信息，发现 404 not found。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.22015503875968992&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd8pryNTRgvzFHpUlsPw9Tu0MBlGS0ZTSE206fZEgxGzL5H7zUmsEP6FRTeqWh9v3sgFQDEGY8I9ZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;645&quot;/&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;5&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;服务续约&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;功能目标：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;实现&lt;/span&gt;服务的健康检查机制，服务注册后，如果没有取消，那么就应该在注册表中，可以随时查到，如果某个服务实例挂了，能否自动的从注册表中删除，保障注册表中的服务实例都是正常的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常有两种方式做法：&lt;/span&gt;&lt;span&gt;注册中心（服务端）主动探活&lt;/span&gt;&lt;span&gt;，通过请求指定接口得到正常响应来确认；&lt;/span&gt;&lt;span&gt;服务实例（客户端）主动上报&lt;/span&gt;&lt;span&gt;，调用续约接口进行续约，续约设有时效 &lt;/span&gt;&lt;span&gt;TTL （time to live）&lt;/span&gt;&lt;span&gt;。两种方式各有优缺点，大家可以思考一下，不同的注册中心也采用了不同的方式，这里选型第二种方案。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;r := model.NewRegistry()&lt;br/&gt;r.Renew(req.Env, req.AppId, req.Hostname)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;根据 appid 和 env 找到对象的 app，再根据 hostname 找到对应主机实例，更新其 RenewTimestamp 为当前时间。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Registry)&lt;/span&gt; &lt;span&gt;Renew&lt;/span&gt;&lt;span&gt;(env, appid, hostname &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*Instance, *errcode.Error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    app, ok := r.getApplication(appid, env)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errcode.NotFound&lt;br/&gt;    }&lt;br/&gt;    in, ok := app.Renew(hostname)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errcode.NotFound&lt;br/&gt;    }       &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; in, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}  &lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(app *Application)&lt;/span&gt; &lt;span&gt;Renew&lt;/span&gt;&lt;span&gt;(hostname &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(*Instance, &lt;span&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    app.lock.Lock()&lt;br/&gt;    &lt;span&gt;defer&lt;/span&gt; app.lock.Unlock()&lt;br/&gt;    appIn, ok := app.instances[hostname]&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, ok&lt;br/&gt;    }&lt;br/&gt;    appIn.RenewTimestamp = time.Now().UnixNano()&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; copyInstance(appIn), &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;} &lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;4&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;服务剔除&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;功能目标：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span/&gt;既然有服务定期续约，那么对应的如果服务没有续约呢？服务如果下线可以使用 Cancel 进行取消，但如果服务因为网络故障或挂了导致不能提供服务，那么可以通过检查它是否按时续约来判断，把 TTL 达到阈值的服务实例剔除（Cancel），实现服务的被动下线。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;首先在新建注册表时开启一个定时任务，新启一个 goroutine 来实现。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;func NewRegistry() *Registry {&lt;br/&gt;&lt;span&gt;++ go r.evictTask()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;配置定时检查的时间间隔，默认 60 秒，通过 Tick 定时器开启 evict。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Registry)&lt;/span&gt; &lt;span&gt;evictTask&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    ticker := time.Tick(configs.CheckEvictInterval)&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &amp;lt;-ticker:&lt;br/&gt;            r.evict()&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;遍历注册表的所有 apps，然后再遍历其中的 instances，如果当前时间减去实例上一次续约时间 instance.RenewTimestamp 达到阈值（默认 90 秒），那么将其加入过期队列中。这里并没有直接将过期队列所有实例都取消，考虑 &lt;span&gt;GC&lt;/span&gt; 以及&lt;span&gt; 本地时间漂移&lt;/span&gt;的因素，设定了一个剔除的上限 evictionLimit，随机剔除一些过期实例。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Registry)&lt;/span&gt; &lt;span&gt;evict&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    now := time.Now().UnixNano()&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; expiredInstances []*Instance&lt;br/&gt;    apps := r.getAllApplications()&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; registryLen &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, app := &lt;span&gt;range&lt;/span&gt; apps {&lt;br/&gt;        registryLen += app.GetInstanceLen()&lt;br/&gt;        allInstances := app.GetAllInstances()&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; _, instance := &lt;span&gt;range&lt;/span&gt; allInstances {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; now-instance.RenewTimestamp &amp;gt; &lt;span&gt;int64&lt;/span&gt;(configs.InstanceExpireDuration) {&lt;br/&gt;                expiredInstances = &lt;span&gt;append&lt;/span&gt;(expiredInstances, instance)&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    evictionLimit := registryLen - &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;float64&lt;/span&gt;(registryLen)*configs.SelfProtectThreshold)&lt;br/&gt;    expiredLen := &lt;span&gt;len&lt;/span&gt;(expiredInstances)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; expiredLen &amp;gt; evictionLimit {&lt;br/&gt;        expiredLen = evictionLimit&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; expiredLen == &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; expiredLen; i++ {&lt;br/&gt;        j := i + rand.Intn(&lt;span&gt;len&lt;/span&gt;(expiredInstances)-i)&lt;br/&gt;        expiredInstances[i], expiredInstances[j] = expiredInstances[j], expiredInstances[i]&lt;br/&gt;        expiredInstance := expiredInstances[i]&lt;br/&gt;        r.Cancel(expiredInstance.Env, expiredInstance.AppId, expiredInstance.Hostname, now)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;剔除上限数量，是通过&lt;/span&gt;&lt;span&gt;当前注册表大小&lt;/span&gt;&lt;span&gt;（注册表所有 instances 实例数）&lt;/span&gt;&lt;span&gt;减去 &lt;/span&gt;&lt;span&gt;触发自我保护机制的阈值&lt;/span&gt;&lt;span&gt;（当前注册表大小 * 保护自我机制比例值），保护机制稍后会具体解释。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;剔除过期时，采用了 &lt;span&gt;Knuth-Shuffle 算法&lt;/span&gt;，也叫&lt;span&gt;公平洗牌算法&lt;/span&gt;来实现随机剔除。当然如果 expiredLen &amp;lt;= evictionLimit，随机剔除的意义不大，如果前者大于后者，随机剔除能最大程度保障，剔除的实例均匀分散到所有应用实例中，降低某服务被全部清空的风险。公平洗牌算法实现也比较简单，循环遍历过期列表，将当前数与特定随机数交换，和我们打牌时两两交换洗牌过程类似，它实现了 O(n) 的时间复杂度，由 &lt;span&gt;Knuth 发明。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;4&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;自我保护&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;功能目标：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span/&gt;既然服务会定期剔除超时未续约的服务，那么假设一种情况，网络一段时间发生了异常，所有服务都没成功续约，这时注册中心是否将所有服务&lt;/span&gt;&lt;span&gt;全部剔除&lt;/span&gt;&lt;span&gt;？当然不行！所以，我们需要一个&lt;/span&gt;&lt;span&gt;自我保护&lt;/span&gt;&lt;span&gt;的机制防止此类事情的发生。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;怎么设计自我保护机制呢？按短时间内失败的比例达到某特定阈值就开启保护，&lt;/span&gt;&lt;span&gt;保护模式下不进行服务剔除&lt;/span&gt;&lt;span&gt;。所以我们需要一个&lt;/span&gt;&lt;span&gt;统计模块&lt;/span&gt;&lt;span&gt;，续约成功 +1。默认情况下，服务剔除每 60 秒执行一次，服务续约每 30 秒执行一次，那么一个服务实例在检查时应该有 2 次续约。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Guard &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    renewCount     &lt;span&gt;int64&lt;/span&gt;&lt;br/&gt;    lastRenewCount &lt;span&gt;int64&lt;/span&gt;&lt;br/&gt;    needRenewCount &lt;span&gt;int64&lt;/span&gt;&lt;br/&gt;    threshold      &lt;span&gt;int64&lt;/span&gt;&lt;br/&gt;    lock           sync.RWMutex&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(gd *Guard)&lt;/span&gt; &lt;span&gt;incrNeed&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    gd.lock.Lock()&lt;br/&gt;    &lt;span&gt;defer&lt;/span&gt; gd.lock.Unlock()&lt;br/&gt;    gd.needRenewCount += &lt;span&gt;int64&lt;/span&gt;(configs.CheckEvictInterval / configs.RenewInterval)&lt;br/&gt;    gd.threshold = &lt;span&gt;int64&lt;/span&gt;(&lt;span&gt;float64&lt;/span&gt;(gd.needRenewCount) * configs.SelfProtectThreshold)&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(gd *Guard)&lt;/span&gt; &lt;span&gt;decrNeed&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    gd.lock.Lock()&lt;br/&gt;    &lt;span&gt;defer&lt;/span&gt; gd.lock.Unlock()&lt;br/&gt;    gd.needRenewCount -= &lt;span&gt;int64&lt;/span&gt;(configs.CheckEvictInterval / configs.RenewInterval)&lt;br/&gt;    gd.threshold = &lt;span&gt;int64&lt;/span&gt;(&lt;span&gt;float64&lt;/span&gt;(gd.needRenewCount) * configs.SelfProtectThreshold)&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(gd *Guard)&lt;/span&gt; &lt;span&gt;setNeed&lt;/span&gt;&lt;span&gt;(count &lt;span&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    gd.lock.Lock()&lt;br/&gt;    &lt;span&gt;defer&lt;/span&gt; gd.lock.Unlock()&lt;br/&gt;    gd.needRenewCount = count * &lt;span&gt;int64&lt;/span&gt;(configs.CheckEvictInterval/configs.RenewInterval)&lt;br/&gt;    gd.threshold = &lt;span&gt;int64&lt;/span&gt;(&lt;span&gt;float64&lt;/span&gt;(gd.needRenewCount) * configs.SelfProtectThreshold)&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(gd *Guard)&lt;/span&gt; &lt;span&gt;incrCount&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    atomic.AddInt64(&amp;amp;gd.renewCount, &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在注册表中增加&lt;/span&gt;&lt;span&gt; Guard 模块&lt;/span&gt;&lt;span&gt;并初始化，在服务注册成功，服务取消，服务续约时操作统计。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;type Registry struct {&lt;br/&gt;&lt;span&gt;++    gd   *Guard&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;func NewRegistry() *Registry {&lt;br/&gt;    r := &amp;amp;Registry{&lt;br/&gt;&lt;span&gt;++      gd:   new(Guard),&lt;/span&gt;&lt;br/&gt;    } &lt;br/&gt;}&lt;br/&gt;func (r *Registry) Register(...) {&lt;br/&gt;    if isNew {&lt;br/&gt;&lt;span&gt;++      r.gd.incrNeed()&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;func (r *Registry) Cancel(...) {&lt;br/&gt;&lt;span&gt;++   r.gd.decrNeed()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;func (r *Registry) Renew(...) {&lt;br/&gt;&lt;span&gt;++   r.gd.incrCount()&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在服务剔除前进行上一周期计数统计，并判断是否达到自我保护开启状态。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(gd *Guard)&lt;/span&gt; &lt;span&gt;storeLastCount&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    atomic.StoreInt64(&amp;amp;gd.lastRenewCount, atomic.SwapInt64(&amp;amp;gd.needRenewCount, &lt;span&gt;0&lt;/span&gt;))&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(gd *Guard)&lt;/span&gt; &lt;span&gt;selfProtectStatus&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; atomic.LoadInt64(&amp;amp;gd.lastRenewCount) &amp;lt; atomic.LoadInt64(&amp;amp;gd.threshold)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果开启自我保护，那么续约时间超过阈值（默认90 秒）忽略不会剔除。但如果续约时间超过最大阈值（默认3600 秒），&lt;/span&gt;&lt;span&gt;那么不管是否开启保护都要剔除。因为自我保护只是保护短时间由于网络原因未续约的服务，长时间未续约大概率已经有问题了。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;func (r *Registry) evictTask() {&lt;br/&gt;        case &amp;lt;-ticker:&lt;br/&gt;&lt;span&gt;++          r.gd.storeLastCount()&lt;/span&gt;&lt;br/&gt;            r.evict()&lt;br/&gt;        }&lt;br/&gt;}&lt;br/&gt;func (r *Registry) evict() {&lt;br/&gt;   delta := now - instance.RenewTimestamp&lt;br/&gt;&lt;span&gt;++ if !protectStatus &amp;amp;&amp;amp; delta &amp;gt; int64(configs.InstanceExpireDuration) ||&lt;/span&gt;&lt;br/&gt;      delta &amp;gt; int64(configs.InstanceMaxExpireDuration) {&lt;br/&gt;      expiredInstances = append(expiredInstances, instance)&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;思考下，服务续约比例未达到 85% 就会触发自我保护，还记不记得在服务剔除那块有一个剔除数量上限不能超过 15%，这里就 match 了，否则&lt;/span&gt;&lt;span&gt;还没来得及进入自我保护程序就把服务都剔除&lt;/span&gt;&lt;span&gt;了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后增加一个定时器，如果超过一定时间（15 分钟），重新计算下当前实例数，重置保护阈值，降低脏数据风险。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(r *Registry)&lt;/span&gt; &lt;span&gt;evictTask&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    resetTicker := time.Tick(configs.ResetGuardNeedCountInterval)&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;select&lt;/span&gt; { &lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &amp;lt;-resetTicker:&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; count &lt;span&gt;int64&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; _, app := &lt;span&gt;range&lt;/span&gt; r.getAllApplications() {&lt;br/&gt;                count += &lt;span&gt;int64&lt;/span&gt;(app.GetInstanceLen())&lt;br/&gt;            }&lt;br/&gt;            r.gd.setNeed(count)&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}   &lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;10&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注册中心对外提供服务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;目前注册中心基本功能已实现，需要对外提供服务了，我们采用 &lt;/span&gt;&lt;span&gt;gin &lt;/span&gt;&lt;span&gt;来实现一个 web 服务，接受 http 请求进行服务的注册、查找、续约、下线操作，这样保障注册中心可以方便的接受来自任何语言客户端请求。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;//init config&lt;/span&gt;&lt;br/&gt;    c := flag.String(&lt;span&gt;&quot;c&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;config file path&quot;&lt;/span&gt;)&lt;br/&gt;    flag.Parse()&lt;br/&gt;    config, err := configs.LoadConfig(*c)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        log.Println(&lt;span&gt;&quot;load config error:&quot;&lt;/span&gt;, err)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;    }  &lt;br/&gt;    &lt;span&gt;//global discovery&lt;/span&gt;&lt;br/&gt;    global.Discovery = model.NewDiscovery(config)&lt;br/&gt;    &lt;span&gt;//init router and start server&lt;/span&gt;&lt;br/&gt;    router := api.InitRouter()&lt;br/&gt;    srv := &amp;amp;http.Server{&lt;br/&gt;        Addr:    config.HttpServer,&lt;br/&gt;        Handler: router,&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; err := srv.ListenAndServe(); err != &lt;span&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; err != http.ErrServerClosed {&lt;br/&gt;            log.Fatalf(&lt;span&gt;&quot;listen:%s\n&quot;&lt;/span&gt;, err)&lt;br/&gt;        }&lt;br/&gt;    }()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;增加一个 discovery 结构，并开启一个全局变量  global.Discovery ，该结构中维护注册表 Registry，然后就可以根据注册表实现各种操作了。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Discovery &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    config    *configs.GlobalConfig&lt;br/&gt;    protected &lt;span&gt;bool&lt;/span&gt;&lt;br/&gt;    Registry  *Registry&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewDiscovery&lt;/span&gt;&lt;span&gt;(config *configs.GlobalConfig)&lt;/span&gt; *&lt;span&gt;Discovery&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    dis := &amp;amp;Discovery{&lt;br/&gt;        protected: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;        config:    config,&lt;br/&gt;        Registry:  NewRegistry(), &lt;span&gt;//init registry&lt;/span&gt;&lt;br/&gt;    }  &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; dis &lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//init discovery&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; Discovery *model.Discovery&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;api.InitRouter() 绑定 url 路由和 Handler，以注册为例，接受请求入参，调用 global.Discovery.Registry.Register() 进行注册，成功返回。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;router.POST(&lt;span&gt;&quot;api/register&quot;&lt;/span&gt;, handler.RegisterHandler)&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;RegisterHandler&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; req model.RequestRegister&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; e := c.ShouldBindJSON(&amp;amp;req); e != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        err := errcode.ParamError&lt;br/&gt;        c.JSON(http.StatusOK, gin.H{&lt;br/&gt;            &lt;span&gt;&quot;code&quot;&lt;/span&gt;:    err.Code(),&lt;br/&gt;            &lt;span&gt;&quot;message&quot;&lt;/span&gt;: err.Error(),&lt;br/&gt;        })&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//bind instance&lt;/span&gt;&lt;br/&gt;    instance := model.NewInstance(&amp;amp;req)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; instance.Status == &lt;span&gt;0&lt;/span&gt; || instance.Status &amp;gt; &lt;span&gt;2&lt;/span&gt; {&lt;br/&gt;        err := errcode.ParamError&lt;br/&gt;        c.JSON(http.StatusOK, gin.H{&lt;br/&gt;            &lt;span&gt;&quot;code&quot;&lt;/span&gt;:    err.Code(),&lt;br/&gt;            &lt;span&gt;&quot;message&quot;&lt;/span&gt;: err.Error(),&lt;br/&gt;        })&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//dirtytime&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; req.DirtyTimestamp &amp;gt; &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;        instance.DirtyTimestamp = req.DirtyTimestamp&lt;br/&gt;    }&lt;br/&gt;    global.Discovery.Registry.Register(instance, req.LatestTimestamp)&lt;br/&gt;    c.JSON(http.StatusOK, gin.H{&lt;br/&gt;        &lt;span&gt;&quot;code&quot;&lt;/span&gt;:    &lt;span&gt;200&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;message&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;data&quot;&lt;/span&gt;:    &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;    })&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接着要实现平滑重启，在 main 启动时增加接收信号后关闭服务。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;//...&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;//graceful restart&lt;/span&gt;&lt;br/&gt;    quit := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; os.Signal)&lt;br/&gt;    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM, syscall.SIGHUP, syscall.SIGQUIT)&lt;br/&gt;    &amp;lt;-quit&lt;br/&gt;    log.Println(&lt;span&gt;&quot;shutdown discovery server...&quot;&lt;/span&gt;)&lt;br/&gt;    ctx, cancel := context.WithTimeout(context.Background(), &lt;span&gt;5&lt;/span&gt;*time.Second)&lt;br/&gt;    &lt;span&gt;defer&lt;/span&gt; cancel()&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err := srv.Shutdown(ctx); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        log.Fatal(&lt;span&gt;&quot;server shutdown error:&quot;&lt;/span&gt;, err)&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;        log.Println(&lt;span&gt;&quot;timeout of 5 seconds&quot;&lt;/span&gt;)&lt;br/&gt;    }&lt;br/&gt;    log.Println(&lt;span&gt;&quot;server exiting&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;实现效果如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28614008941877794&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd8pryNTRgvzFHpUlsPw9Tu0yDIqNPdyia44Y2hDWMAM47Ft3HzPTfpyIia6Keq48zhOmUt6S9a4pBNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1342&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;4&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;工程实践&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd9BAt5ypL3rJjMuWHAcQn59EIGLD9okgYEGTn7EshtJBRRjb1Y3j2icjBzws68icC3eqKbicRdMQtZoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;160&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结与问题&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.661319073083779&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZCzuY9fbd9BAt5ypL3rJjMuWHAcQn59kYWXxxugTXdia5kiccNfywp1YFjOKrFIOaEQt5ibD0qpG0MP3ETYsyPJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;561&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注册中心功能实现&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此，一个&lt;/span&gt;&lt;span&gt;单机版&lt;/span&gt;&lt;span&gt;的注册中心就可以工作了，但生产环境单点肯定是不能容忍的，因此有必要实现一个注册中心集群。那么是否部署多个注册中心实例就可以了，当然 .... 不行！这只能保障有多个注册中心节点，而每个节点中维护自己的注册表，那么就需要进行注册表数据同步。多节点数据同步又会涉及著名的一致性问题，这时 &lt;/span&gt;&lt;span&gt;Paxos、Raft、ZAB、Gossip&lt;/span&gt;&lt;span&gt; 等算法名词涌现，而我们将使用 &lt;/span&gt;&lt;span&gt;P2P（Peer to Peer）&lt;/span&gt;&lt;span&gt;对等网络协议来实现。关于集群设计与实现我们将在后续文章中展开。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzUzNTY5MzU2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4pGhLz2xEbRFHnAQon2QLYgbBibCJo1ibJHesLWshPJeRibateRtAqkaf6BgjlbhYiaxHLq6Zu07CRPw/0?wx_fmt=png&quot; data-nickname=&quot;网管叨bi叨&quot; data-alias=&quot;kevin_tech&quot; data-signature=&quot;分享软件开发和系统架构设计基础、Go 语言和Kubernetes。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;扫码关注公众号「网管叨bi叨」&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0188679245283019&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4icJbGAQ8RjXUUVdUZsGADuMBVWePgn7tfrWjjHyc6b8kXTQ7Sdkp0QQFFK4mel5tniczqooMna1CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;318&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;给网管个星标，第一时间吸我的知识 👆&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网管整理了一本《Go 开发参考书》收集了70多条开发实践。去公众号回复【gocookbook】领取！还有一本《k8s 入门实践》讲解了常用软件在K8s上的部署过程，公众号回复【k8s&lt;/span&gt;&lt;span&gt;】即可领取！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;觉得有用就点个在看&lt;/span&gt;&lt;span&gt;  👇👇👇&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>23342544bb3f8d52c0d6ca5ee865ad3e</guid>
<title>深入分析和研究 MappedByteBuffer 的实现原理和开发指南</title>
<link>https://toutiao.io/k/ckbqdt4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h2&gt;&lt;a id=&quot;_0&quot;/&gt;前言介绍&lt;/h2&gt; 
&lt;p&gt;在Java编程语言中，操作文件IO的时候，通常采用BufferedReader，BufferedInputStream等带缓冲的IO类处理大文件，不过java nio中引入了一种基于MappedByteBuffer操作大文件的方式，其读写性能极高，比起bio的模型处理方式，它大大的加大了支持解析读取文件的数量和空间。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;OS_4&quot;/&gt;OS的内存管理&lt;/h2&gt; 
&lt;h3&gt;&lt;a id=&quot;_6&quot;/&gt;内存层面的技术名词概念&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt;MMU：CPU的内存管理单元。&lt;/li&gt;&lt;li&gt;物理内存：即内存条的内存空间。&lt;/li&gt;&lt;li&gt;虚拟内存：计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。&lt;/li&gt;&lt;li&gt;页面文件：操作系统反映构建并使用虚拟内存的硬盘空间大小而创建的文件，在windows下，即pagefile.sys文件，其存在意味着物理内存被占满后，将暂时不用的数据移动到硬盘上。&lt;/li&gt;&lt;li&gt;缺页中断：当程序试图访问已映射在虚拟地址空间中但未被加载至物理内存的一个分页时，由MMC发出的中断。如果操作系统判断此次访问是有效的，则尝试将相关的页从虚拟内存文件中载入物理内存。&lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;_14&quot;/&gt;虚拟内存和物理内存&lt;/h3&gt; 
&lt;p&gt;正在运行的一个进程，它所需的内存是有可能大于内存条容量之和的，如内存条是256M，程序却要创建一个2G的数据区，那么所有数据不可能都加载到内存（物理内存），必然有数据要放到其他介质中（比如硬盘），待进程需要访问那部分数据时，再调度进入物理内存，而这种场景下，被调度到硬盘的资源空间所占用的存储，我们便将他理解为虚拟内存。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;MappedByteBuffer_18&quot;/&gt;MappedByteBuffer&lt;/h2&gt; 
&lt;p&gt;从大体上讲一下MappedByteBuffer 究竟是什么。从继承结构上来讲，MappedByteBuffer 继承自 ByteBuffer，所以，ByteBuffer 有的能力它全有；像变动 position 和 limit 指针啦、包装一个其他种类Buffer的视图啦，内部维护了一个逻辑地址address。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;MappedByteBuffer__22&quot;/&gt;“MappedByteBuffer” 会提升速度，变快&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;为什么快？因为它使用 direct buffer 的方式读写文件内容，这种方式的学名叫做内存映射。这种方式直接调用系统底层的缓存，没有 JVM 和系统之间的复制操作，所以效率大大的提高了。而且由于它这么快，还可以用它来在进程（或线程）间传递消息，基本上能达到和 “共享内存页” 相同的作用，只不过它是依托实体文件来运行的。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;还有就是它可以让读写那些太大而不能放进内存中的文件。实现假定整个文件都放在内存中（实际上，大文件放在内存和虚拟内存中），基本上都可以将它当作一个特别大的数组来访问，这样极大的简化了对于大文件的修改等操作。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;MappedByteBuffer_28&quot;/&gt;MappedByteBuffer的案例用法&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;FileChannel 提供了 map 方法来把文件映射为 MappedByteBuffer： MappedByteBuffer map(int mode,long position,long size); 可以把文件的从 position 开始的 size 大小的区域映射为 MappedByteBuffer，mode 指出了可访问该内存映像文件的方式，共有三种，分别为：&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt;&lt;li&gt;MapMode.READ_ONLY（只读）： 试图修改得到的缓冲区将导致抛出 ReadOnlyBufferException。&lt;/li&gt;&lt;li&gt;MapMode.READ_WRITE（读 / 写）： 对得到的缓冲区的更改最终将写入文件；但该更改对映射到同一文件的其他程序不一定是可见的（无处不在的 “一致性问题” 又出现了）。&lt;/li&gt;&lt;li&gt;MapMode.PRIVATE（专用）： 可读可写, 但是修改的内容不会写入文件, 只是 buffer 自身的改变，这种能力称之为”copy on write”&lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;MappedByteBufferByteBuffer_36&quot;/&gt;MappedByteBuffer较之ByteBuffer新增的三个方法&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt;fore() 缓冲区是 READ_WRITE 模式下，此方法对缓冲区内容的修改强行写入文件&lt;/li&gt;&lt;li&gt;load() 将缓冲区的内容载入内存，并返回该缓冲区的引用&lt;/li&gt;&lt;li&gt;isLoaded() 如果缓冲区的内容在物理内存中，则返回真，否则返回假&lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;FileChannelMappedByteBuffer_42&quot;/&gt;采用FileChannel构建相关的MappedByteBuffer&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x8FFFFFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;/span&gt; channel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/c.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;READ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt; mapBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MapMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;READ_WRITE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; length&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;length&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   
   &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;a id=&quot;_60&quot;/&gt;实现相关的读写文件的对比处理&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;DataInputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;DataOutputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileInputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileOutputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;channels&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Paths&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestMappedByteBuffer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x2FFFFFFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tester&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tester&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;runTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; ms&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tester&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; testers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tester&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Stream RW&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileInputStream&lt;/span&gt; fis &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;src/a.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;DataInputStream&lt;/span&gt; dis &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fis&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;FileOutputStream&lt;/span&gt; fos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;src/a.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;DataOutputStream&lt;/span&gt; dos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataOutputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fos&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
dos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeByte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
dos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tester&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mapped RW&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;/span&gt; channel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/b.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;READ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt; mapBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MapMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;READ_WRITE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasRemaining&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tester&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mapped PRIVATE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;/span&gt; channel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/c.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;READ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StandardOpenOption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt; mapBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MapMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PRIVATE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasRemaining&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
mapBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Tester&lt;/span&gt; tester&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;testers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
tester&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;runTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;a id=&quot;_152&quot;/&gt;测试结果&lt;/h5&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;Stream RW-&amp;gt;用传统流的方式，最慢，应该是由于用的数据量是 1G，无法全部读入内存，所以它根本无法完成测试。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;MapMode.READ_WRITE，它的速度每次差别较大，在 0.6s 和 8s 之间波动，而且很不稳定。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;MapMode.PRIVATE就稳得出奇，一直是 1.1s 到 1.2s 之间。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;无论是哪个速度都是十分惊人的，但是 MappedByteBuffer 也有不足，就是在数据量很小的时候，表现比较糟糕，那是因为 direct buffer 的初始化时间较长，所以建议大家只有在数据量较大的时候，在用 MappedByteBuffer。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a id=&quot;map_163&quot;/&gt;map过程&lt;/h4&gt; 
&lt;p&gt;FileChannel提供了map方法把文件映射到虚拟内存，通常情况可以映射整个文件，如果文件比较大，可以进行分段映射。&lt;/p&gt; 
&lt;p&gt;FileChannel中的几个变量：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;MapMode mode：内存映像文件访问的方式，也就是上面说的三种方式。&lt;/li&gt;&lt;li&gt;position：文件映射时的起始位置。&lt;/li&gt;&lt;li&gt;allocationGranularity：Memory allocation size for mapping buffers，通过native函数initIDs初始化。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;接下去通过分析源码，了解一下map过程的内部实现。通过RandomAccessFile获取FileChannel。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;channel &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            channel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileChannelImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上述实现可以看出，由于synchronized ，只有一个线程能够初始化FileChannel。通过FileChannel.map方法，把文件映射到虚拟内存，并返回逻辑地址address，实现如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MapMode&lt;/span&gt; mode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; pagePosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;position &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; allocationGranularity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; mapPosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; position &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pagePosition&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; mapSize &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pagePosition&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            addr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mapPosition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mapSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OutOfMemoryError&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                addr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mapPosition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mapSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;OutOfMemoryError&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                
                &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Map failed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; isize &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Unmapper&lt;/span&gt; um &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unmapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mapSize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mfd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;writable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imode &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MAP_RO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newMappedByteBufferR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                             addr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pagePosition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                             mfd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                             um&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newMappedByteBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                            addr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pagePosition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                            mfd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                            um&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上述代码可以看出，最终map通过native函数map0完成文件的映射工作。&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt;如果第一次文件映射导致OOM，则手动触发垃圾回收，休眠100ms后再次尝试映射，如果失败，则抛出异常。&lt;/li&gt;&lt;li&gt;通过newMappedByteBuffer方法初始化MappedByteBuffer实例，不过其最终返回的是DirectByteBuffer的实例，实现如下：&lt;/li&gt;&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newMappedByteBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; addr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileDescriptor&lt;/span&gt; fd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Runnable&lt;/span&gt; unmapper&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt; dbb&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;directByteBufferConstructor &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;initDBBConstructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    dbb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;directByteBufferConstructor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                         fd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                         unmapper &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; dbb&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initDBBConstructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; cl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;java.nio.DirectByteBuffer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; ctor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredConstructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;token class-name&quot;&gt;FileDescriptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;token class-name&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                ctor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                directByteBufferConstructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ctor&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;由于FileChannelImpl和DirectByteBuffer不在同一个包中，所以有权限访问问题，通过AccessController类获取DirectByteBuffer的构造器进行实例化。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;DirectByteBuffer是MappedByteBuffer的一个子类，其实现了对内存的直接操作。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;get_261&quot;/&gt;get过程&lt;/h4&gt; 
&lt;p&gt;MappedByteBuffer的get方法最终通过DirectByteBuffer.get方法实现的。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsafe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextGetIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsafe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; address &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;map0()函数返回一个地址address，这样就无需调用read或write方法对文件进行读写，通过address就能够操作文件。底层采用unsafe.getByte方法，通过（address + 偏移量）获取指定内存的数据。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;第一次访问address所指向的内存区域，导致缺页中断，中断响应函数会在交换区中查找相对应的页面，如果找不到（也就是该文件从来没有被读入内存的情况），则从硬盘上将文件指定页读取到物理内存中（非jvm堆内存）。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;如果在拷贝数据时，发现物理内存不够用，则会通过虚拟内存机制（swap）将暂时不用的物理页面交换到硬盘的虚拟内存中。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;_283&quot;/&gt;性能分析&lt;/h3&gt; 
&lt;p&gt;从代码层面上看，从硬盘上将文件读入内存，都要经过文件系统进行数据拷贝，并且数据拷贝操作是由文件系统和硬件驱动实现的，理论上来说，拷贝数据的效率是一样的。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;readwrite_287&quot;/&gt;通过内存映射的方法访问硬盘上的文件，效率要比read和write系统调用高&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt;read()是系统调用，首先将文件从硬盘拷贝到内核空间的一个缓冲区，再将这些数据拷贝到用户空间，实际上进行了两次数据拷贝；&lt;/li&gt;&lt;li&gt;map()也是系统调用，但没有进行数据拷贝，当缺页中断发生时，直接将文件从硬盘拷贝到用户空间，只进行了一次数据拷贝。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;采用内存映射的读写效率要比传统的read/write性能高。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;RandomAccessFileMappedByteBuffer_294&quot;/&gt;采用RandomAccessFile构建相关的MappedByteBuffer&lt;/h4&gt; 
&lt;p&gt;通过MappedByteBuffer读取文件&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MappedByteBufferTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; file &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D://data.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; ds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;MappedByteBuffer&lt;/span&gt; mappedByteBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RandomAccessFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileChannel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MapMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;READ_ONLY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; offset&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mappedByteBuffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                ds&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; scan &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useDelimiter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;_320&quot;/&gt;总结&lt;/h3&gt; 
&lt;p&gt;MappedByteBuffer使用虚拟内存，因此分配(map)的内存大小不受JVM的-Xmx参数限制，但是也是有大小限制的。&lt;br/&gt; 如果当文件超出1.5G限制时，可以通过position参数重新map文件后面的内容。&lt;br/&gt; MappedByteBuffer在处理大文件时的确性能很高，但也存在一些问题，如内存占用、文件关闭不确定，被其打开的文件只有在垃圾回收的才会被关闭，而且这个时间点是不确定的。&lt;/p&gt; 
&lt;p&gt;javadoc中也提到：A mapped byte buffer and the file mapping that it represents remain valid until the buffer itself is garbage-collected.*&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_329&quot;/&gt;参考资料&lt;/h3&gt; 
&lt;p&gt;https://blog.csdn.net/qq_41969879/article/details/81629469&lt;/p&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0048991b6334114dddde320226e8ca10</guid>
<title>把 Redis 当作队列来用，真的合适吗？</title>
<link>https://toutiao.io/k/3m8lom8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我经常听到很多人讨论，关于「把 Redis 当作队列来用是否合适」的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些人表示赞成，他们认为 Redis 很轻量，用作队列很方便。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也些人则反对，认为 Redis 会「丢」数据，最好还是用「专业」的队列中间件更稳妥。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;究竟哪种方案更好呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章，我就和你聊一聊把 Redis 当作队列，究竟是否合适这个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我会从简单到复杂，一步步带你梳理其中的细节，把这个问题真正地讲清楚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看完这篇文章后，我希望你对这个问题你会有全新的认识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在文章的最后，我还会告诉你关于「技术选型」的思路，文章有点长，希望你可以耐心读完。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4188861985472155&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWmGodwpNsE4KsZ4XLRU2u9AmStUn9AIv3bHiarGSI8JtS2He3Irj5pZg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;826&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;从最简单的开始：List 队列&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们先从最简单的场景开始讲起。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的业务需求足够简单，想把 Redis 当作队列来使用，肯定最先想到的就是使用 List 这个数据类型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 List 底层的实现就是一个「链表」，在头部和尾部操作元素，时间复杂度都是 O(1)，这意味着它非常符合消息队列的模型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果把 List 当作队列，你可以这么来用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生产者使用 LPUSH 发布消息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; LPUSH queue msg1&lt;br/&gt;(integer) 1&lt;br/&gt;127.0.0.1:6379&amp;gt; LPUSH queue msg2&lt;br/&gt;(integer) 2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者这一侧，使用 RPOP 拉取消息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; RPOP queue&lt;br/&gt;&quot;msg1&quot;&lt;br/&gt;127.0.0.1:6379&amp;gt; RPOP queue&lt;br/&gt;&quot;msg2&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个模型非常简单，也很容易理解。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29515418502202645&quot; data-type=&quot;jpeg&quot; data-w=&quot;681&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWu8QC6wleS3iaKtD1iaHBCicxiapia7DfYWH1qzum9iaiaaf2MAxoE3dR4xicSA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这里有个小问题，当队列中已经没有消息了，消费者在执行 RPOP 时，会返回 NULL。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; RPOP queue&lt;br/&gt;(nil)   // 没消息了&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而我们在编写消费者逻辑时，一般是一个「死循环」，这个逻辑需要不断地从队列中拉取消息进行处理，伪代码一般会这么写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;while&lt;/span&gt; true:&lt;br/&gt;    msg = redis.rpop(&lt;span&gt;&quot;queue&quot;&lt;/span&gt;)&lt;br/&gt;    // 没有消息，继续循环&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; msg == null:&lt;br/&gt;        &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;    // 处理消息&lt;br/&gt;    handle(msg)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果此时队列为空，那消费者依旧会频繁拉取消息，这会造成「CPU 空转」，不仅浪费 CPU 资源，还会对 Redis 造成压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么解决这个问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也很简单，当队列为空时，我们可以「休眠」一会，再去尝试拉取消息。代码可以修改成这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;while&lt;/span&gt; true:&lt;br/&gt;    msg = redis.rpop(&lt;span&gt;&quot;queue&quot;&lt;/span&gt;)&lt;br/&gt;    // 没有消息，休眠&lt;span&gt;2&lt;/span&gt;s&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; msg == null:&lt;br/&gt;        sleep(&lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;    // 处理消息        &lt;br/&gt;    handle(msg)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就解决了 CPU 空转问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题虽然解决了，但又带来另外一个问题：当消费者在休眠等待时，有新消息来了，那消费者处理新消息就会存在「延迟」。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设设置的休眠时间是 2s，那新消息最多存在 2s 的延迟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要想缩短这个延迟，只能减小休眠的时间。但休眠时间越小，又有可能引发 CPU 空转问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鱼和熊掌不可兼得。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如何做，既能及时处理新消息，还能避免 CPU 空转呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 是否存在这样一种机制：如果队列为空，消费者在拉取消息时就「阻塞等待」，一旦有新消息过来，就通知我的消费者立即处理新消息呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幸运的是，Redis 确实提供了「阻塞式」拉取消息的命令：BRPOP / BLPOP，这里的 B 指的是阻塞（Block）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23641703377386197&quot; data-type=&quot;jpeg&quot; data-w=&quot;681&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWptBP43IUaOX9WHSibbIDMj4IIntO47FnUOCz94RQl6icCiaXlEaicxq7DQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，你可以这样来拉取消息了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;while&lt;/span&gt; true:&lt;br/&gt;    // 没消息阻塞等待，&lt;span&gt;0&lt;/span&gt;表示不设置超时时间&lt;br/&gt;    msg = redis.brpop(&lt;span&gt;&quot;queue&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; msg == null:&lt;br/&gt;        &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;    // 处理消息&lt;br/&gt;    handle(msg)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 BRPOP 这种阻塞式方式拉取消息时，还支持传入一个「超时时间」，如果设置为 0，则表示不设置超时，直到有新消息才返回，否则会在指定的超时时间后返回 NULL。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方案不错，既兼顾了效率，还避免了 CPU 空转问题，一举两得。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：如果设置的超时时间太长，这个连接太久没有活跃过，可能会被 Redis Server 判定为无效连接，之后 Redis Server 会强制把这个客户端踢下线。所以，采用这种方案，客户端要有重连机制。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决了消息处理不及时的问题，你可以再思考一下，这种队列模型，有什么缺点？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们一起来分析一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;不支持重复消费&lt;/strong&gt;：消费者拉取消息后，这条消息就从 List 中删除了，无法被其它消费者再次消费，即不支持多个消费者消费同一批数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息丢失&lt;/strong&gt;：消费者拉取到消息后，如果发生异常宕机，那这条消息就丢失了&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个问题是功能上的，使用 List 做消息队列，它仅仅支持最简单的，一组生产者对应一组消费者，不能满足多组生产者和消费者的业务场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个问题就比较棘手了，因为从 List 中 POP 一条消息出来后，这条消息就会立即从链表中删除了。也就是说，无论消费者是否处理成功，这条消息都没办法再次消费了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也意味着，如果消费者在处理消息时异常宕机，那这条消息就相当于丢失了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这 2 个问题怎么解决呢？我们一个个来看。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;发布/订阅模型：Pub/Sub&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从名字就能看出来，这个模块是 Redis 专门是针对「发布/订阅」这种队列模型设计的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它正好可以解决前面提到的第一个问题：重复消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即多组生产者、消费者的场景，我们来看它是如何做的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 提供了 PUBLISH / SUBSCRIBE 命令，来完成发布、订阅的操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40360610263522884&quot; data-type=&quot;jpeg&quot; data-w=&quot;721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWcVxxQr6pxO6UfDwAFgwicPNMFXicEOvBokFAsGbEMXUibzZNUAedQSnow/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设你想开启 2 个消费者，同时消费同一批数据，就可以按照以下方式来实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，使用 SUBSCRIBE 命令，启动 2 个消费者，并「订阅」同一个队列。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 2个消费者 都订阅一个队列&lt;br/&gt;127.0.0.1:6379&amp;gt; SUBSCRIBE queue&lt;br/&gt;Reading messages... (press Ctrl-C to quit)&lt;br/&gt;1) &quot;subscribe&quot;&lt;br/&gt;2) &quot;queue&quot;&lt;br/&gt;3) (integer) 1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，2 个消费者都会被阻塞住，等待新消息的到来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后，再启动一个生产者，发布一条消息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; PUBLISH queue msg1&lt;br/&gt;(integer) 1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，2 个消费者就会解除阻塞，收到生产者发来的新消息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SUBSCRIBE queue&lt;br/&gt;// 收到新消息&lt;br/&gt;1) &quot;message&quot;&lt;br/&gt;2) &quot;queue&quot;&lt;br/&gt;3) &quot;msg1&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到了么，使用 Pub/Sub 这种方案，既支持阻塞式拉取消息，还很好地满足了多组消费者，消费同一批数据的业务需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，Pub/Sub 还提供了「匹配订阅」模式，允许消费者根据一定规则，订阅「多个」自己感兴趣的队列。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 订阅符合规则的队列&lt;br/&gt;127.0.0.1:6379&amp;gt; PSUBSCRIBE queue.*&lt;br/&gt;Reading messages... (press Ctrl-C to quit)&lt;br/&gt;1) &quot;psubscribe&quot;&lt;br/&gt;2) &quot;queue.*&quot;&lt;br/&gt;3) (integer) 1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的消费者，订阅了 queue.* 相关的队列消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后，生产者分别向 queue.p1 和 queue.p2 发布消息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; PUBLISH queue.p1 msg1&lt;br/&gt;(integer) 1&lt;br/&gt;127.0.0.1:6379&amp;gt; PUBLISH queue.p2 msg2&lt;br/&gt;(integer) 1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时再看消费者，它就可以接收到这 2 个生产者的消息了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; PSUBSCRIBE queue.*&lt;br/&gt;Reading messages... (press Ctrl-C to quit)&lt;br/&gt;...&lt;br/&gt;// 来自queue.p1的消息&lt;br/&gt;1) &quot;pmessage&quot;&lt;br/&gt;2) &quot;queue.*&quot;&lt;br/&gt;3) &quot;queue.p1&quot;&lt;br/&gt;4) &quot;msg1&quot;&lt;br/&gt;&lt;br/&gt;// 来自queue.p2的消息&lt;br/&gt;1) &quot;pmessage&quot;&lt;br/&gt;2) &quot;queue.*&quot;&lt;br/&gt;3) &quot;queue.p2&quot;&lt;br/&gt;4) &quot;msg2&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3792172739541161&quot; data-type=&quot;jpeg&quot; data-w=&quot;741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWEgHBBbv2VxurLPcgDd9CJnzueRPuqLS6hugowGMlKvdzsvoYIDd0ibQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，Pub/Sub 最大的优势就是，支持多组生产者、消费者处理消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲完了它的优点，那它有什么缺点呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，Pub/Sub 最大问题是：&lt;strong&gt;丢数据&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果发生以下场景，就有可能导致数据丢失：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;消费者下线&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis 宕机&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息堆积&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;究竟是怎么回事？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这其实与 Pub/Sub 的实现方式有很大关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pub/Sub 在实现时非常简单，它没有基于任何数据类型，也没有做任何的数据存储，它只是单纯地为生产者、消费者建立「数据转发通道」，把符合规则的数据，从一端转发到另一端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个完整的发布、订阅消息处理流程是这样的：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;消费者订阅指定队列，Redis 就会记录一个映射关系：队列-&amp;gt;消费者&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产者向这个队列发布消息，那 Redis 就从映射关系中找出对应的消费者，把消息转发给它&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34876989869753977&quot; data-type=&quot;jpeg&quot; data-w=&quot;691&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWmvU2w2M5re8p6Dq5uPtHa0Ws9RJ6cGZd6oRhibia9cveicrrqcu5A36LA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到了么，整个过程中，没有任何的数据存储，一切都是实时转发的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种设计方案，就导致了上面提到的那些问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，如果一个消费者异常挂掉了，它再重新上线后，只能接收新的消息，在下线期间生产者发布的消息，因为找不到消费者，都会被丢弃掉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果所有消费者都下线了，那生产者发布的消息，因为找不到任何一个消费者，也会全部「丢弃」。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，当你在使用 Pub/Sub 时，一定要注意：&lt;strong&gt;消费者必须先订阅队列，生产者才能发布消息，否则消息会丢失。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也是前面讲例子时，我们让消费者先订阅队列，之后才让生产者发布消息的原因。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，因为 Pub/Sub 没有基于任何数据类型实现，所以它也不具备「数据持久化」的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，Pub/Sub 的相关操作，不会写入到 RDB 和 AOF 中，当 Redis 宕机重启，Pub/Sub 的数据也会全部丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我们来看 Pub/Sub 在处理「消息积压」时，为什么也会丢数据？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当消费者的速度，跟不上生产者时，就会导致数据积压的情况发生。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果采用 List 当作队列，消息积压时，会导致这个链表很长，最直接的影响就是，Redis 内存会持续增长，直到消费者把所有数据都从链表中取出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但 Pub/Sub 的处理方式却不一样，当消息积压时，有可能会导致&lt;strong&gt;消费失败和消息丢失&lt;/strong&gt;！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是怎么回事？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是回到 Pub/Sub 的实现细节上来说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个消费者订阅一个队列时，Redis 都会在 Server 上给这个消费者在分配一个「缓冲区」，这个缓冲区其实就是一块内存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当生产者发布消息时，Redis 先把消息写到对应消费者的缓冲区中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后，消费者不断地从缓冲区读取消息，处理消息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34876989869753977&quot; data-type=&quot;jpeg&quot; data-w=&quot;691&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFW6z62WCJjDASE4WaQ2Th4CkMnZlshf59DiakB84vTnHDkG24xmPGsPuw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，问题就出在这个缓冲区上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这个缓冲区其实是有「上限」的（可配置），如果消费者拉取消息很慢，就会造成生产者发布到缓冲区的消息开始积压，缓冲区内存持续增长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果超过了缓冲区配置的上限，此时，Redis 就会「强制」把这个消费者踢下线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时消费者就会消费失败，也会丢失数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你有看过 Redis 的配置文件，可以看到这个缓冲区的默认配置：client-output-buffer-limit pubsub 32mb 8mb 60。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的参数含义如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;32mb：缓冲区一旦超过 32MB，Redis 直接强制把消费者踢下线&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;8mb + 60：缓冲区超过 8MB，并且持续 60 秒，Redis 也会把消费者踢下线&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pub/Sub 的这一点特点，是与 List 作队列差异比较大的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这里你应该可以看出，&lt;strong&gt;List 其实是属于「拉」模型，而 Pub/Sub 其实属于「推」模型&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;List 中的数据可以一直积压在内存中，消费者什么时候来「拉」都可以。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但 Pub/Sub 是把消息先「推」到消费者在 Redis Server 上的缓冲区中，然后等消费者再来取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当生产、消费速度不匹配时，就会导致缓冲区的内存开始膨胀，Redis 为了控制缓冲区的上限，所以就有了上面讲到的，强制把消费者踢下线的机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，现在我们总结一下 Pub/Sub 的优缺点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;支持发布 / 订阅，支持多组生产者、消费者处理消息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费者下线，数据会丢失&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不支持数据持久化，Redis 宕机，数据也会丢失&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息堆积，缓冲区溢出，消费者会被强制踢下线，数据也会丢失&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有没有发现，除了第一个是优点之外，剩下的都是缺点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，很多人看到 Pub/Sub 的特点后，觉得这个功能很「鸡肋」。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也正是以上原因，Pub/Sub 在实际的应用场景中用得并不多。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;目前只有哨兵集群和 Redis 实例通信时，采用了 Pub/Sub 的方案，因为哨兵正好符合即时通讯的业务场景。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再来看一下，Pub/Sub 有没有解决，消息处理时异常宕机，无法再次消费的问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实也不行，Pub/Sub 从缓冲区取走数据之后，数据就从 Redis 缓冲区删除了，消费者发生异常，自然也无法再次重新消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好，现在我们重新梳理一下，我们在使用消息队列时的需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们在使用一个消息队列时，希望它的功能如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;支持阻塞等待拉取消息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持发布 / 订阅模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费失败，可重新消费，消息不丢失&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实例宕机，消息不丢失，数据可持久化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息可堆积&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 除了 List 和 Pub/Sub 之外，还有符合这些要求的数据类型吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，Redis 的作者也看到了以上这些问题，也一直在朝着这些方向努力着。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 作者在开发 Redis 期间，还另外开发了一个开源项目 disque。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个项目的定位，就是一个基于内存的分布式消息队列中间件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但由于种种原因，这个项目一直不温不火。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;终于，在 Redis 5.0 版本，作者把 disque 功能移植到了 Redis 中，并给它定义了一个新的数据类型：&lt;strong&gt;Stream&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们就来看看，它能符合上面提到的这些要求吗？&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;趋于成熟的队列：Stream&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看 Stream 是如何解决上面这些问题的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们依旧从简单到复杂，依次来看 Stream 在做消息队列时，是如何处理的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，Stream 通过 XADD 和 XREAD 完成最简单的生产、消费模型：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生产者发布 2 条消息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// *表示让Redis自动生成消息ID&lt;br/&gt;127.0.0.1:6379&amp;gt; XADD queue * name zhangsan&lt;br/&gt;&quot;1618469123380-0&quot;&lt;br/&gt;127.0.0.1:6379&amp;gt; XADD queue * name lisi&lt;br/&gt;&quot;1618469127777-0&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 XADD 命令发布消息，其中的「*」表示让 Redis 自动生成唯一的消息 ID。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个消息 ID 的格式是「时间戳-自增序号」。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者拉取消息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 从开头读取5条消息，0-0表示从开头读取&lt;br/&gt;127.0.0.1:6379&amp;gt; XREAD COUNT 5 STREAMS queue 0-0&lt;br/&gt;1) 1) &quot;queue&quot;&lt;br/&gt;   2) 1) 1) &quot;1618469123380-0&quot;&lt;br/&gt;         2) 1) &quot;name&quot;&lt;br/&gt;            2) &quot;zhangsan&quot;&lt;br/&gt;      2) 1) &quot;1618469127777-0&quot;&lt;br/&gt;         2) 1) &quot;name&quot;&lt;br/&gt;            2) &quot;lisi&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想继续拉取消息，需要传入上一条消息的 ID：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; XREAD COUNT 5 STREAMS queue 1618469127777-0&lt;br/&gt;(nil)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有消息，Redis 会返回 NULL。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23641703377386197&quot; data-type=&quot;jpeg&quot; data-w=&quot;681&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWTGjnYoFly2IbkMAqaicicVhtgFsPlBW9kibBzmbFJDHVzDRWFbmgSTd7A/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是 Stream 最简单的生产、消费。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这里不再重点介绍 Stream 命令的各种参数，我在例子中演示时，凡是大写的单词都是「固定」参数，凡是小写的单词，都是可以自己定义的，例如队列名、消息长度等等，下面的例子规则也是一样，为了方便你理解，这里有必要提醒一下。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们来看，针对前面提到的消息队列要求，Stream 都是如何解决的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;1) Stream 是否支持「阻塞式」拉取消息？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以的，在读取消息时，只需要增加 BLOCK 参数即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// BLOCK 0 表示阻塞等待，不设置超时时间&lt;br/&gt;127.0.0.1:6379&amp;gt; XREAD COUNT 5 BLOCK 0 STREAMS queue 1618469127777-0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，消费者就会阻塞等待，直到生产者发布新的消息才会返回。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2) Stream 是否支持发布 / 订阅模式？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也没问题，Stream 通过以下命令完成发布订阅：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;XGROUP：创建消费者组&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;XREADGROUP：在指定消费组下，开启消费者拉取消息&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们来看具体如何做？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，生产者依旧发布 2 条消息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; XADD queue * name zhangsan&lt;br/&gt;&quot;1618470740565-0&quot;&lt;br/&gt;127.0.0.1:6379&amp;gt; XADD queue * name lisi&lt;br/&gt;&quot;1618470743793-0&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后，我们想要开启 2 组消费者处理同一批数据，就需要创建 2 个消费者组：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 创建消费者组1，0-0表示从头拉取消息&lt;br/&gt;127.0.0.1:6379&amp;gt; XGROUP CREATE queue group1 0-0&lt;br/&gt;OK&lt;br/&gt;// 创建消费者组2，0-0表示从头拉取消息&lt;br/&gt;127.0.0.1:6379&amp;gt; XGROUP CREATE queue group2 0-0&lt;br/&gt;OK&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者组创建好之后，我们可以给每个「消费者组」下面挂一个「消费者」，让它们分别处理同一批数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个消费组开始消费：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// group1的consumer开始消费，&amp;gt;表示拉取最新数据&lt;br/&gt;127.0.0.1:6379&amp;gt; XREADGROUP GROUP group1 consumer COUNT 5 STREAMS queue &amp;gt;&lt;br/&gt;1) 1) &quot;queue&quot;&lt;br/&gt;   2) 1) 1) &quot;1618470740565-0&quot;&lt;br/&gt;         2) 1) &quot;name&quot;&lt;br/&gt;            2) &quot;zhangsan&quot;&lt;br/&gt;      2) 1) &quot;1618470743793-0&quot;&lt;br/&gt;         2) 1) &quot;name&quot;&lt;br/&gt;            2) &quot;lisi&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样地，第二个消费组开始消费：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// group2的consumer开始消费，&amp;gt;表示拉取最新数据&lt;br/&gt;127.0.0.1:6379&amp;gt; XREADGROUP GROUP group2 consumer COUNT 5 STREAMS queue &amp;gt;&lt;br/&gt;1) 1) &quot;queue&quot;&lt;br/&gt;   2) 1) 1) &quot;1618470740565-0&quot;&lt;br/&gt;         2) 1) &quot;name&quot;&lt;br/&gt;            2) &quot;zhangsan&quot;&lt;br/&gt;      2) 1) &quot;1618470743793-0&quot;&lt;br/&gt;         2) 1) &quot;name&quot;&lt;br/&gt;            2) &quot;lisi&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，这 2 组消费者，都可以获取同一批数据进行处理了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样一来，就达到了多组消费者「订阅」消费的目的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4008559201141227&quot; data-type=&quot;jpeg&quot; data-w=&quot;701&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWeoaD3ZnP3xHV4tazwd7AZvom0Cyjf5ZoibEBhnjlpKETib9ypLrhoyIg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;3) 消息处理时异常，Stream 能否保证消息不丢失，重新消费？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了上面拉取消息时用到了消息 ID，这里为了保证重新消费，也要用到这个消息 ID。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一组消费者处理完消息后，需要执行 XACK 命令告知 Redis，这时 Redis 就会把这条消息标记为「处理完成」。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// group1下的 1618472043089-0 消息已处理完成&lt;br/&gt;127.0.0.1:6379&amp;gt; XACK queue group1 1618472043089-0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42368045649072755&quot; data-type=&quot;jpeg&quot; data-w=&quot;701&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWnqicNAVrYEghyoiaZqwtSlphRJ5FX3lhPGYr6XANByxxk1PwfuW2k3jQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果消费者异常宕机，肯定不会发送 XACK，那么 Redis 就会依旧保留这条消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;待这组消费者重新上线后，Redis 就会把之前没有处理成功的数据，重新发给这个消费者。这样一来，即使消费者异常，也不会丢失数据了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 消费者重新上线，0-0表示重新拉取未ACK的消息&lt;br/&gt;127.0.0.1:6379&amp;gt; XREADGROUP GROUP group1 consumer1 COUNT 5 STREAMS queue 0-0&lt;br/&gt;// 之前没消费成功的数据，依旧可以重新消费&lt;br/&gt;1) 1) &quot;queue&quot;&lt;br/&gt;   2) 1) 1) &quot;1618472043089-0&quot;&lt;br/&gt;         2) 1) &quot;name&quot;&lt;br/&gt;            2) &quot;zhangsan&quot;&lt;br/&gt;      2) 1) &quot;1618472045158-0&quot;&lt;br/&gt;         2) 1) &quot;name&quot;&lt;br/&gt;            2) &quot;lisi&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;4) Stream 数据会写入到 RDB 和 AOF 做持久化吗？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Stream 是新增加的数据类型，它与其它数据类型一样，每个写操作，也都会写入到 RDB 和 AOF 中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只需要配置好持久化策略，这样的话，就算 Redis 宕机重启，Stream 中的数据也可以从 RDB 或 AOF 中恢复回来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;5) 消息堆积时，Stream 是怎么处理的？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，当消息队列发生消息堆积时，一般只有 2 个解决方案：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;生产者限流：避免消费者处理不及时，导致持续积压&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;丢弃消息：中间件丢弃旧消息，只保留固定长度的新消息&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 Redis 在实现 Stream 时，采用了第 2 个方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在发布消息时，你可以指定队列的最大长度，防止队列积压导致内存爆炸。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 队列长度最大10000&lt;br/&gt;127.0.0.1:6379&amp;gt; XADD queue MAXLEN 10000 * name zhangsan&lt;br/&gt;&quot;1618473015018-0&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当队列长度超过上限后，旧消息会被删除，只保留固定长度的新消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么来看，Stream 在消息积压时，如果指定了最大长度，还是有可能丢失消息的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;除了以上介绍到的命令，Stream 还支持查看消息长度（XLEN）、查看消费者状态（XINFO）等命令，使用也比较简单，你可以查询官方文档了解一下，这里就不过多介绍了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，通过以上介绍，我们可以看到，Redis 的 Stream 几乎覆盖到了消息队列的各种场景，是不是觉得很完美？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;既然它的功能这么强大，这是不是意味着，Redis 真的可以作为专业的消息队列中间件来使用呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是还「差一点」，就算 Redis 能做到以上这些，也只是「趋近于」专业的消息队列。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原因在于 Redis 本身的一些问题，如果把其定位成消息队列，还是有些欠缺的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，就不得不把 Redis 与专业的队列中间件做对比了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们就来看一下，Redis 在作队列时，到底还有哪些欠缺？&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;与专业的消息队列对比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，一个专业的消息队列，必须要做到两大块：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;消息不丢&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息可堆积&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们讨论的重点，很大篇幅围绕的是第一点展开的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们换个角度，从一个消息队列的「使用模型」来分析一下，怎么做，才能保证数据不丢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用一个消息队列，其实就分为三大块：&lt;strong&gt;生产者、队列中间件、消费者&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26265389876880985&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWcMh2Wso6LtJIzqfk87O0LwLsyOgGvBwJKiamJjrwALKUE47dqhBicdKw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;731&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息是否会发生丢失，其重点也就在于以下 3 个环节：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;生产者会不会丢消息？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费者会不会丢消息？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;队列中间件会不会丢消息？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;1) 生产者会不会丢消息？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当生产者在发布消息时，可能发生以下异常情况：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;消息没发出去：网络故障或其它问题导致发布失败，中间件直接返回失败&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不确定是否发布成功：网络问题导致发布超时，可能数据已发送成功，但读取响应结果超时了&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是情况 1，消息根本没发出去，那么重新发一次就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是情况 2，生产者没办法知道消息到底有没有发成功？所以，为了避免消息丢失，它也只能继续重试，直到发布成功为止。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;生产者一般会设定一个最大重试次数，超过上限依旧失败，需要记录日志报警处理。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，生产者为了避免消息丢失，只能采用失败重试的方式来处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但发现没有？这也意味着消息可能会重复发送。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是的，在使用消息队列时，要保证消息不丢，宁可重发，也不能丢弃。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那消费者这边，就需要多做一些逻辑了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于敏感业务，当消费者收到重复数据数据时，要设计幂等逻辑，保证业务的正确性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这个角度来看，生产者会不会丢消息，取决于生产者对于异常情况的处理是否合理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，无论是 Redis 还是专业的队列中间件，生产者在这一点上都是可以保证消息不丢的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2) 消费者会不会丢消息？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种情况就是我们前面提到的，消费者拿到消息后，还没处理完成，就异常宕机了，那消费者还能否重新消费失败的消息？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要解决这个问题，消费者在处理完消息后，必须「告知」队列中间件，队列中间件才会把标记已处理，否则仍旧把这些数据发给消费者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方案需要消费者和中间件互相配合，才能保证消费者这一侧的消息不丢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论是 Redis 的 Stream，还是专业的队列中间件，例如 RabbitMQ、Kafka，其实都是这么做的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，从这个角度来看，Redis 也是合格的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;3) 队列中间件会不会丢消息？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面 2 个问题都比较好处理，只要客户端和服务端配合好，就能保证生产端、消费端都不丢消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，如果队列中间件本身就不可靠呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毕竟生产者和消费这都依赖它，如果它不可靠，那么生产者和消费者无论怎么做，都无法保证数据不丢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个方面，Redis 其实没有达到要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Redis 在以下 2 个场景下，都会导致数据丢失。&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;AOF 持久化配置为每秒写盘，但这个写盘过程是异步的，Redis 宕机时会存在数据丢失的可能&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主从复制也是异步的，主从切换时，也存在丢失数据的可能（从库还未同步完成主库发来的数据，就被提成主库）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上原因我们可以看到，&lt;strong&gt;Redis 本身的无法保证严格的数据完整性&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果把 Redis 当作消息队列，在这方面是有可能导致数据丢失的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看那些专业的消息队列中间件是如何解决这个问题的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像 RabbitMQ 或 Kafka 这类专业的队列中间件，在使用时，一般是部署一个集群，生产者在发布消息时，队列中间件通常会写「多个节点」，以此保证消息的完整性。这样一来，即便其中一个节点挂了，也能保证集群的数据不丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也正因为如此，RabbitMQ、Kafka在设计时也更复杂。毕竟，它们是专门针对队列场景设计的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但 Redis 的定位则不同，它的定位更多是当作缓存来用，它们两者在这个方面肯定是存在差异的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我们来看消息积压怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;4) 消息积压怎么办？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 Redis 的数据都存储在内存中，这就意味着一旦发生消息积压，则会导致 Redis 的内存持续增长，如果超过机器内存上限，就会面临被 OOM 的风险。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，Redis 的 Stream 提供了可以指定队列最大长度的功能，就是为了避免这种情况发生。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但 Kafka、RabbitMQ 这类消息队列就不一样了，它们的数据都会存储在磁盘上，磁盘的成本要比内存小得多，当消息积压时，无非就是多占用一些磁盘空间，相比于内存，在面对积压时也会更加「坦然」。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，我们可以看到，把 Redis 当作队列来使用时，始终面临的 2 个问题：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Redis 本身可能会丢数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;面对消息积压，Redis 内存资源紧张&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，Redis 是否可以用作队列，我想这个答案你应该会比较清晰了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且，Redis 相比于 Kafka、RabbitMQ，部署和运维也更加轻量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的业务场景对于数据丢失非常敏感，而且写入量非常大，消息积压时会占用很多的机器资源，那么我建议你使用专业的消息队列中间件。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，总结一下。这篇文章我们从「Redis 能否用作队列」这个角度出发，介绍了 List、Pub/Sub、Stream 在做队列的使用方式，以及它们各自的优劣。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后又把 Redis 和专业的消息队列中间件做对比，发现 Redis 的不足之处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我们得出 Redis 做队列的合适场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我也列了一个表格，总结了它们各自的优缺点。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48043184885290147&quot; data-type=&quot;jpeg&quot; data-w=&quot;741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gB9Yvac5K3PnYugKyFT6iaYiaXnHG02HFWjjanXypYOraDsDSBTYkXHXLD2gribiamm2GYvPmciaia3ziaN8ZeU0cEdibA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;后记&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我想和你再聊一聊关于「&lt;strong&gt;技术方案选型&lt;/strong&gt;」的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你应该也看到了，这篇文章虽然始于 Redis，但并不止于 Redis。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在分析 Redis 细节时，一直在提出问题，然后寻找更好的解决方案，在文章最后，又聊到一个专业的消息队列应该怎么做。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，我们在讨论技术选型时，就是一个关于如何取舍的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这里我想传达给你的信息是，&lt;strong&gt;在面对技术选型时，不要不经过思考就觉得哪个方案好，哪个方案不好&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你需要根据具体场景具体分析，这里我把这个分析过程分为 2 个层面：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;业务功能角度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;技术资源角度&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章所讲到的内容，都是以业务功能角度出发做决策的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这里的第二点，从技术资源角度出发，其实也很重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术资源的角度是说，&lt;strong&gt;你所处的公司环境、技术资源能否匹配这些技术方案&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个怎么解释呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来讲，就是你所在的公司、团队，是否有匹配的资源能 hold 住这些技术方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道 Kafka、RabbitMQ 是非常专业的消息中间件，但它们的部署和运维，相比于 Redis 来说，也会更复杂一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你在一个大公司，公司本身就有优秀的运维团队，那么使用这些中间件肯定没问题，因为有足够优秀的人能 hold 住这些中间件，公司也会投入人力和时间在这个方向上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果你是在一个初创公司，业务正处在快速发展期，暂时没有能 hold 住这些中间件的团队和人，如果贸然使用这些组件，当发生故障时，排查问题也会变得很困难，甚至会阻碍业务的发展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这种情形下，如果公司的技术人员对于 Redis 都很熟，综合评估来看，Redis 也基本可以满足业务 90% 的需求，那当下选择 Redis 未必不是一个好的决策。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，&lt;strong&gt;做技术选型不只是技术问题，还与人、团队、管理、组织结构有关&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也正是因为这些原因，当你在和别人讨论技术选型问题时，你会发现每个公司的做法都不相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毕竟每个公司所处的环境和文化不一样，做出的决策当然就会各有差异。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你不了解这其中的逻辑，那在做技术选型时，只会趋于表面现象，无法深入到问题根源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而一旦你理解了这个逻辑，那么你在看待这个问题时，不仅对于技术会有更加深刻认识，对技术资源和人的把握，也会更加清晰。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望你以后在做技术选型时，能够把这些因素也考虑在内，这对你的技术成长之路也是非常有帮助的。&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651519607&amp;amp;idx=1&amp;amp;sn=9a6e498c86b2d966f1f80fbd364f6c4d&amp;amp;chksm=bd2596088a521f1e3a6b70915917ad333f1e505dabcc8e8688475e3c50ada0bec573bee95752&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;掘地三尺搞定 Redis 与 MySQL 数据一致性问题&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;掘地三尺搞定 Redis 与 MySQL 数据一致性问题&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651519012&amp;amp;idx=1&amp;amp;sn=b52c4e802bb8eac7445fbad361845be6&amp;amp;chksm=bd25945b8a521d4dca9dcefb90f0c5c08c00b606592e6cb3ce89f0a11ee64bcd76beba2ef7ab&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Redis 要被替代了？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Redis 要被替代了？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8efa72142b046d555522c5591974b54a</guid>
<title>浅谈数据血缘的实现原理</title>
<link>https://toutiao.io/k/2crw7k0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大数据时代，数据的来源极其广泛，各种类型的数据在快速产生，数据也是爆发性增长。从数据的产生，通过加工融合流转产生新的数据，到最终消亡，数据之间的关联关系可以称之为数据血缘关系。在数据中台的大背景下，数仓的开发者经常需要解决以下问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;其实，以上的这些问题都可以统一归类为数据发现问题。大部分企业会针对离线数仓任务进行SQL分析，构建表和字段的血缘关系，数据发现包括但不限于: 数据 表/列的业务分类分级和机密字段识别等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;数据血缘的基本概念&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据血缘(Data Lineage)，指的是数据从产生、ETL处理、加工、融合、流转到最终消亡，数据之间自然形成一种关系。这些关系就是描述数据的数据（元数据）。掌握了这个元数据，就能最大程度的做好数据的应用和管理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;tips：有童鞋对元数据感兴趣的，可以看这篇文章https://zhuanlan.zhihu.com/p/336504407&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;数据血缘的常见用途&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;业务域的划分&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;span&gt;针对任务的表和字段，通过血缘关系可以确定表的上下游，以及对应这个表所涵盖的业务范围包括哪些&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/h2&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;提升调度性能&lt;br/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;span&gt;通过收集调度任务的开始结束时间，了解任务ETL链路的时间瓶颈，在根据JOB的执行情况定位性能瓶颈，通过调整任务的基线、保证任务的资源提供，提升整条ETL链路的执行效率。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/h2&gt;&lt;/li&gt;&lt;li&gt;&lt;h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据异常定位&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;若在某天的调度中，发现数据异常，想确认是什么造成，可根据DQC和血缘关系了解底层数据波动情况，快速定位原因。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/h2&gt;&lt;/li&gt;&lt;li&gt;&lt;h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数仓链路优化&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;通过对表和字段的下游使用频次，找到使用较多的，分析其是否有重复计算、浪费资源的情况。再判断是否可以因此建设事实或维度表、或者把计算的指标或维度沉淀。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/h2&gt;&lt;/li&gt;&lt;li&gt;&lt;h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;调度依赖的准确性判断&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在平时的开发过程中，很可能修改过SQL，但是忘记在调度平台上配置相对应的依赖，这样很可能会出现问题，其实通过调度平台的调度关系的元数据，和收集到的血缘关系进行对比，可定时性的判断调度任务依赖是否准确。&lt;/span&gt;&lt;/section&gt;&lt;br/&gt;&lt;/h2&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;数据血缘的实现原理（表级别）&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文只阐述最基本的表级别的血缘关系的实现思路，真实的血缘实现，远比文章中的场景复杂。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在最开始时，刚毕业的小白，如果让你做好数仓的血缘元数据时，你会怎么做？&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在初期的小白根本就不懂编译器、语法分析、词法分析以及AST这些概念时，想到的唯一办法就是通过正则这个朴素的手段去解析SQL了，想法也非常直接，FROM或者JOIN后面就是源表，INSERT INTO/INSERT OVERWRITE TABLE后面就是目标表。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;source_table_regex = re.compile(&lt;span class=&quot;code-snippet__string&quot;&gt;r&quot;(?:from|join)\s+(\S*)(?:\s+|;)&quot;&lt;/span&gt;, re.IGNORECASE)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;target_table_regex = re.compile(&lt;span class=&quot;code-snippet__string&quot;&gt;r&quot;insert\s+(?:into|overwrite)\s+table\s+(\S*)\s+&quot;&lt;/span&gt;, re.IGNORECASE)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不过，若是我们的SQL是这样的呢？&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; tableB;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;或者是这样的：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; tableA&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; description = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;from Excel&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你会发现，这个思路有很多漏洞。事实上如果加上一些if-else的判断，这个方案其实也满足了大部分场景。但是！！！！&lt;/span&gt;&lt;strong&gt;身为开发人员一定要明白一个理念，当你在生产环境中只要有一个场景没有满足，那就是bug。&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先针对思路二，大家可以提前了解AST的概念，参考&lt;/span&gt;&lt;span&gt;https://blog.csdn.net/u013212754/article/details/106981084&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其次在了解思路二前提下，需要知道Hive SQL的执行过程（毕竟还是看的HQL的语法树）以及一些名词解释。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Hive根据Antlr定义的词法、语法规则完成词法、语法分析将HQL解析为AST Tree；&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;遍历AST Tree，抽象出查询的基本组成单元Query Block；&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;遍历Query Block解析为操作树Operator Tree(即，逻辑执行计划)；&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;逻辑优化器进行操作树变换，合并多余的ReduceSinkOperator，减少shuffle；&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;遍历Operator Tree，将操作树翻译为对应的MapReduce任务；&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;物理优化器进行MapReduce任务变换，生成最终的执行计划。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.44351851851851853&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74CPXicbLx5QiaKC935YPAxq5uIulXmNibGXmKQOfmNVvK2sZb8fXia7javMnfhchibnz81FqzzPwiaBVTrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;具体步骤：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;ol start=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对Hive SQL进行词法分析和语法分析，获取对应的AST 原始的抽象语法树&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;AST语法树剪枝优化，减少遍历次数，提高语义解析的效率，具体主要做两方面的优化：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;针对token中涉及到的无效解析节点进行删除,如order by，distributedby,cluster by,sort by以及limit；&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;针对token中where/having的子查询，在保证SQL语法正确性以及语义完整性的前提下，采用1=1 等价策略进行等价替换，降低了血缘关系解析的复杂性；&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过以上两种剪枝操作，既可以减少SQL语句的复杂性，又可以降低AST语法树的层级，进一步减少了遍历AST树递归次数，降低血缘分析的复杂性，提高了语句解析效率。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;遍历AST获取上游表名和下游表名，在SQL语句中存在大部分SQL语句片段即CTE。由于其在血缘关系解析中不起关键作用，且对SQL解析带来很大困扰，因此血缘关系解析需对CTE类型进行识别，并进行替换与删除。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;市面上其实针对数据血缘的产品有很多，像阿里DataWorks的数据地图、字节的DataLeap以及非常火的开源产品Apache Atlas都是非常好用工具产品。但是本质上是想通过这篇文章，让小伙伴们在使用这些产品的时候多去思考这些产品背后的实现原理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;strong mp-original-font-size=&quot;11&quot; mp-original-line-height=&quot;17.600000381469727&quot;&gt;&lt;span mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19.200000762939453&quot;&gt;*文&lt;/span&gt;&lt;/strong&gt;&lt;strong mp-original-font-size=&quot;11&quot; mp-original-line-height=&quot;17.600000381469727&quot;&gt;&lt;span mp-original-font-size=&quot;12&quot; mp-original-line-height=&quot;19.200000762939453&quot;&gt;/Weki&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;section mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;section mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;section mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关注得物技术，每周一三五晚18:30更新技术干货&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要是觉得文章对你有帮助的话，欢迎评论转发点赞～&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkxNTE3ODU0NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/AAQtmjCc74AlsHDtoVyU8hqzNTGS26fV9PmHAcZ8uib1GWNJibIuBiavPdAXw9IOzjlEAYRJUNjOEme5geMNPoZ1Q/0?wx_fmt=png&quot; data-nickname=&quot;得物技术&quot; data-alias=&quot;&quot; data-signature=&quot;技术知识分享交流平台，与你一同走向技术的云端。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;strong mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;span mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;活动推荐&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;strong&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;主题：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;得物无线技术沙龙（第三期）&lt;/span&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;strong&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;时间：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;12月4日 14:00 - 18:00&lt;/span&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;strong&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;报名方式：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;span mp-original-font-size=&quot;14&quot; mp-original-line-height=&quot;22.399999618530273&quot;&gt;更多详情，请点击&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzkxNTE3ODU0NA==&amp;amp;mid=2247490804&amp;amp;idx=2&amp;amp;sn=58079490afee7b01e5c69eb7b8a8c146&amp;amp;chksm=c16249abf615c0bd9735b6c1c063efe7f0a162d1f66067696c5bf1a5ba7a71f5482eff10ab25&amp;amp;token=1524677151&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;「沙龙详情」&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;「沙龙详情」&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mp-original-font-size=&quot;17&quot; mp-original-line-height=&quot;27.200000762939453&quot;&gt;&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_live_iframe&quot; data-pluginname=&quot;videosnap&quot; data-headimgurl=&quot;https://wx.qlogo.cn/finderhead/Q3auHgzwzM6A15Sbkl3fcb3MH3giciciaiaypmMpAKzLbz2rnKDXs4ia2bg/0&quot; data-username=&quot;v2_060000231003b20faec8cae28b1dc7d5cf02ea3db07785f6268ca44f543d593c9d5004c1e666@finder&quot; data-nickname=&quot;得物Tech&quot; data-desc=&quot;将在12月04日 14:00 直播&quot; data-intro=&quot;得物技术沙龙活动-无线技术主题专场（第三期），本次沙龙邀请来自美团、快手及得物App的四位技术专家和大家一起分享交流。&quot; data-noticeid=&quot;finderlivenotice-v2_060000231003b20faec8cae28b1dc7d5cf02ea3db07785f6268ca44f543d593c9d5004c1e666@finder-1668581345241493-384301884&quot; data-type=&quot;live&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>