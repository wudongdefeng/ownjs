<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>907a3f66a3c20f8785905e5fb6cb7555</guid>
<title>听说&quot;羊了个羊”很火，带大家写个代码快速加入羊群~</title>
<link>https://toutiao.io/k/udifd0q</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;因为公众号的交流群里其实已经有人给了答案，只需要请求加入羊群的接口就行了，所以这里我偷个懒，直接抄答案了：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;response = requests.get(f&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;https://cat-match.easygame2021.com/sheep/v1/game/game_over?rank_score=1&amp;amp;rank_state=1&amp;amp;rank_time={random.randint(1, 3600)}&amp;amp;rank_role=1&amp;amp;skin=1&#x27;&lt;/span&gt;, headers=&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.headers, timeout=&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;, verify=&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; response.json()[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;err_code&#x27;&lt;/span&gt;] == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.logging(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;闯关羊群成功&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.logging(f&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;闯关羊群失败, 返回内容为:\n{response.json()}&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;然后请求的headers里需要加入每个用户特有的t值：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;headers = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Host&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;cat-match.easygame2021.com&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;User-Agent&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 15_6_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/8.0.28(0x18001c27) NetType/WIFI Language/zh_CN&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;t&#x27;&lt;/span&gt;: user_t,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Referer&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;https://servicewechat.com/wx141bfb9b73c970a9/17/page-frame.html&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Accept-Encoding&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;gzip,compress,br,deflate&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Connection&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;close&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;随便找个抓包工具抓包就行了，比如我水果机上的抓包结果如下(同时打开小程序和抓包工具，随便玩下就能抓到，域名是cat-match.easygame2021.com)：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2524590163934426&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZTbkic2pYRo3qa21JrUYC1NSGcefA38MJrFeQ9vibII0l83WicQuLnhVAwJXHfDWAGSBxqVxbP3TibLahkd0CZpFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;305&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;把t值copy下来放到请求头对应的位置就行了，完整代码已经整合在pytools里了，你只需要pip安装一下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;pip&lt;/span&gt; install pikachupytools&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;然后写个简单的调用代码就ok啦，例如：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; pytools &lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; pytools&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tool_client = pytools.pytools()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tool_client.execute(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;sheepsheep&#x27;&lt;/span&gt;, {&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;user_t&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;xxx&#x27;&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;效果如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.16445623342175067&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZTbkic2pYRo3qa21JrUYC1NSGcefA38MI9KqkHRbAkFibM1fPmAHWfyOTSnjluF7OTYvm4TsdfoAZujic8DB7EvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;754&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.8592233009708738&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZTbkic2pYRo3qa21JrUYC1NSGcefA38MeFQEa1WGZicz6xgicwlaWmth3D5oFy87boPsmzgibXRiadGD7UibHwHqDWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;206&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ok，大功告成啦，完整源代码详见相关文件~&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>72857236e45129e064cc39abe1ed6210</guid>
<title>PostgreSQL 越来越流行</title>
<link>https://toutiao.io/k/ojs1csb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;具有 15 年以上经验的 PostgreSQL 用户中，有 44% 至少为 PostgreSQL 做出过一次贡献。“事实上，无论他们的经验如何，所有用户都为 PostgreSQL 社区做出了贡献。”&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;55% 的受访者表示如今 PostgreSQL 的使用量比一年前更多。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;超过 3/4 的受访者表示将 PostgreSQL 用于个人项目，95% 的受访者在工作中使用 PostgreSQL ，74% 的受访者将 PostgreSQL 用于个人和专业项目。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大多数受访者 (76.2%) 表示技术文档是他们学习 PostgreSQL 的首选方式，其次是长篇博文 (51.5%) 和短篇博文 (43.3%)。拥有少于 5 年 PostgreSQL 经验的受访者更喜欢视频而不是博客文章。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在社区互动上，虽然有一些受访者提到使用 PostgreSQL 邮件列表作为与核心团队和整个项目交互的主要方式存在困难，但超过 20% 的受访者表示邮件列表是他们与社区保持联系的方式之一。其他的一些参与渠道包括 Slack (10%)、Stack Overflow (8%)、博客 (8%)、Twitter (6%) 和 Reddit (6%)。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;受访者还分享了他们最喜欢的一些 PostgreSQL 扩展。排名靠前的依次有：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PostGIS&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;TimescaleDB&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;pg_stat_statements&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;pgcrypto&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;pg_trgm&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Citus&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;uuid-ossp&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SQL、Python、Java、shell 脚本和 JavaScript / TypeScript 被列为访问 PostgreSQL 最常用的语言。相较 Java，具有 0-5 年经验的 PostgreSQL 用户更有可能使用 JavaScript 或 TypeScript；拥有 6 年以上经验的用户更有可能使用 shell 脚本来访问数据库。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在使用工具连接 PostgreSQL 进行查询和管理任务的受访者中，psql (69.4%)、pgAdmin (35.3%) 和 DBeaver (26.2%) 是前三位的选择。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Grafana、pgAdmin 和 DBeaver 是最可能使用的可视化工具。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;与 2019 年和 2021 年相比，表示会自行管理 PostgreSQL 数据库的受访者越来越少。似乎 PostgreSQL 用户开始越来越多地使用 DBaaS 供应商来部署 PostgreSQL。在将 PostgreSQL 部署为 Kubernetes 容器的人中，44% 使用 Helm，16% 使用 Crunchy Operator，7% 使用 Zalando Operator。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cf56735e7daff22befebd7bde1f33f94</guid>
<title>字节跳动数据湖在实时数仓中的实践</title>
<link>https://toutiao.io/k/pvgyw02</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section draggable=&quot;false&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080E4BM5ibwjP1hqI0xUVA5I6XOiccVd1uib4icU5cicewwaTe7ichXVv4ZoI4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了数据湖更好的落地，我们在落地之前与业务做了一些深入的沟通，并根据不同业务的特点主要分为了三个场景：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①场景一典型的业务主要是短视频和直播&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，它的数据量级一般都比较大，例如大流量的日志数据，其计算周期一般是自然的天、小时或者分钟级别的，实时性的要求一般是五分钟内，主要诉求是批流的复用，可以容忍少量数据的不一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②场景二一般是直播或者电商的部分场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，数据量一般是中等体量，为长周期计算，对于实时性的要求一般是一分钟以内，主要诉求是低成本的数据回溯以及冷启动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③场景三主要是电商和教育的一些场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，一般都是小规模的业务数据，会对数据做全量计算，其实时性要求是秒级的，主要诉求是强一致性以及高QPS。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们结合这些特点基于数据湖做了一些成套的解决方案，接下来我们会基于实际的一些场景和案例一一去了解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实时数仓场景初探&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本节我们讨论的是&lt;strong&gt;字节实时数仓场景的初探以及遇到的问题和解决方案&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;坦白地讲，在最初落地时大家对数据湖能支持线上生产的态度都是存疑的，我们开始的方案也就比较保守。我们首先挑选一些对比现有解决方案，数据湖具有凸显的优势的场景，针对其中的一些痛点问题尝试小规模的落地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080TAiaPvib3jIylCTR47Pyc4MrDk1ZGrKLYMd8yZ6ElDdicDWtSfFh86TzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;离线数仓有两个比较大的问题，一个是时效性问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，现状一般是天或小时级；&lt;/span&gt;&lt;strong&gt;&lt;span&gt;第二个比较大的问题是更新问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，例如需要更新某个小时内的部分数据，现状需要将分区内数据全部重刷，这样的更新效率是很低的。对于这样的场景，数据湖兼具时效性和高效更新能力。同时相对于实时数仓来说，数据湖可以一份存储，批流两用，从而直接进行高效的数据分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于以上对业务的分析，我们会按照以下步骤来做一线的落地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080Rp1r5AQzOOV57Hy7QDxtGS5z7qxsco1SaQpuyzm3tI0DsE7Xs0kicdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 基于视频元数据的落地方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看上图我们原有的方案有三个Hive表，Hive Table 1，2，3。对于整个链路来说我们会把左边MySQL数据源的数据导到Table 1中，右边Redis的数据导到Table 2中，然后将两个表做Join。这里存在两个比较大的问题，一个是高峰期的资源占用率较高，因为天级 Dump 数据量较大，且都集中在凌晨；二是就绪时间比较长，因为存在去重逻辑，会将 T-1 天分区的数据和当天分区的数据合并去重计算后落到当天（T天）的分区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080RfmLdSvdA3icMgdBJj3soUib8fDcialSlZSxxgBictdobtzwBAnTuphfAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们通过引入Hudi把天级的Dump分摊到每个小时进行Upsert。由于Hudi自身可以支持去重的逻辑，我们可以将Table 1看成一个实时的全量数据，当小时级别（例如23点）的数据一旦Upsert完成之后，我们就可以直接进行下游的Join逻辑，这样的话我们可以将数据的就绪时间提前3.5个小时左右，高峰期的资源消耗可以减少40%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080XAu6d2Tc7sPh4BK4r39katVV7qXdIZeia8L3bDJicvEGKvPN1X3zlZ7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 近实时数据校验方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于实时场景来说，当实时任务进行一个比较频繁的变更，比如优化或者新增指标的改动，一般需要校验实时任务的产出是否符合预期。我们当前的方案是会跑一个小时级别的Job，将一个小时的数据从Kafka Dump到Hive之后再校验全量数据是否符合预期。在一些比较紧急的场景下，我们只能抽查部分数据，这时候就对时效性的要求就比较高。在使用基于的Hudi 方案后，我们可以通过Flink将数据直接Upsert到Hudi表中，之后直接通过Presto查询数据从而做到全量数据近实时的可见可测。从线上效果来看可以极大提高实时任务的开发效率，同时保证数据质量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080ztEresWp79bLHRlu7ML6f2MkdLF6joibsv7Wf1qW8KS7noRzKznrUiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在以上探索过程中遇到了比较多的问题，第一个问题就是易用性比较差，运维成本和解释成本比较高。对于易用性这一部分，我们起初是通过脚本来提交SQL，可以看到SQL中的参数是比较多的，并且包含DDL的Schema，这在当列数比较多的情况下是比较麻烦的，会导致易用性较差，并且对业务侧来说也是不可接受的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080dPSv22FPn1hX4OZPaaelWSic9qqtCCSw3giagbWzGebuTFkiagxPv7SSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于以上问题我们做了一个针对性的解决方案，首先我们对之前的任务提交方式替换为了纯SQL化提交，并且通过接入统一的Catalog自动化读取 Schema和必要参数，入湖的SQL就可以简化为如图的形式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;典型场景实践&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080zsEFT2C5cAOibCj9M31afsJAQnFh9CSTVFARcALk57PqIgSbe5YPcuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来让我们看&lt;strong&gt;字节目前基于Hudi的实时数仓整体链路&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看到，我们支持数据的实时入湖，例如MySQL，Kafka通过Flink可以直接落到Hudi；也支持进行一定的湖内计算，比如图中左下将MySQL数据通过Flink导入Hudi进一步通过Flink做一些计算后再落到Hudi。在数据分析方面，我们可以使用Spark和Presto连接看板BI进行一些交互式查询。当我们需要接到其他在线系统，尤其是QPS较高的场景，我们会先接入到KV存储，再接入业务系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;让我们来看具体场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf0804jdsH2GzL2ojDxlsdedT4SwMxsb2CJxaEMOvnmPYS7xekwXc3P25Lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 实时多维汇总&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于一个实时多维汇总的场景，我们可以把Kafka 数据增量写入到 Hudi 的轻度汇总层中。对于分析场景，可以基于 Presto 按需进行多维度的重度汇总计算，并可以直接构建对应的可视化看板。这个场景对QPS和延迟要求都不是很高，所以可以直接构建，但是对于高 QPS 和低延迟诉求的数据产品场景，目前的一个解决方案是通过 Presto 进行多维度预计算，然后导入到 KV 系统，进一步对接数据产品。从中长期来看我们会采取基于物化视图的方式，这样就可以进一步去简化业务侧的一些操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080YdoRByRc9CoCHktNIkFGcsDhfmvD4RGdV77jKW0UYFCeIgHQR4BGhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在以上链路中，我们也遇到了比较多的&lt;strong&gt;问题&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①写入稳定性差&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。第一点就是Flink在入湖的过程中任务占用资源比较大，第二点是任务频繁重启很容易导致失败，第三点是Compaction没有办法及时执行从而影响到查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②更新性能差&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。会导致任务的反压比较严重。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③并发度难提升&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。会对Hudi Metastore Service（目前字节内部自主研发的Hudi元数据服务，兼容Hive接口，准备贡献到社区）稳定性产生比较大的影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;④查询性能比较差&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。有十分钟的延迟甚至经常查询失败。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面对这些问题，我接下来简单介绍一下针对性的一些解决方案：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080lyjibXxMkqLjLZRp0abbBJge8EuMNs2gaibUctGTIsUFGIMicpoZWia18Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①写入稳定性治理&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一块我们通过异步的Compaction + Compaction Service的方案去解决这个问题。我们之前Flink入湖默认是在Flink内部去做Compaction，发现这一步是暴露以上一系列问题的关键。经过优化，Flink入湖任务只负责增量数据的写入，以及 Schedule Compaction逻辑，而Compaction执行则由Compaction Service负责。具体而言，Compaction Service 会从Hudi Metastore异步拉取Pending Compaction Plan，并提交Spark批任务完成实际的Compact。Compaction执行任务与Flink写入任务完全异步隔离，从而对稳定性有较大提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080OSNg5RmxAoDeq4vic5HdicLVHoSr2YcfA8vumsoLnr1n0bXLanjbCvEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②高效更新索引&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;支持数据量级的大幅提升。简单来说，我们可以基于哈希计算快速定位目标文件，提升写入性能；同时可以进行哈希过滤，从而也可以进行查询分析侧的优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080Dy9OFYTo9grHexmfhdfwq4RKh7j3bib2Un7X94rc9V76IpNZcJjZGibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③请求模型的优化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当前的Hudi社区版的WriteTask 会轮询Timeline，导致持续访问Hudi Metastore，从而造成拓展能力受限的问题。我们将WriteTask的轮询请求从Hudi Metastore转移到了对JobManager缓存的拉取，这样就能大幅降低对Hudi Metastore的影响。经过这个优化可以让我们从几十万量级的RPS(Request Per Sec)提升到近千万的量级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来我们来讲一下查询相关的优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080I9C4ibIa0bNQA8ZfXzJY8C8vZomBCRJ0icCJ9ib3TkWEOtsQUt8FsicG5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;④MergeOnRead列裁剪&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于原生的MergeOnRead来说，我们会在全量读取LogFile和BaseFile之后做合并，这在只查询部分列的时候会造成性能损耗，尤其是列比较多的情况。我们所做的优化是把列的读取下推到Scan层，同时在进行log文件合并时，会使用map结构存储K，V（K是主键，V是行记录），之后对行记录做列裁剪，最后再进行Log Merge的操作。这样会对序列化和反序列化开销以及内存使用率都有极大降低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080liaEWDLFB6FeH9yic25FHXeFx9XuJg2ibmRNrkVQLy7Kv4Nwq07vXwf4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;⑤并行读优化&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般引擎层在读Hudi时，一个Filegroup只对应一个Task，这样当单个 FileGroup 数据量较大时就极易造成性能瓶颈。我们对此的优化方案是对BaseFile进行切分，每个切分的文件对应一个Task从而提高读并行度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080Aia4NdR0Lc2NibtcicWQw46jNxm5PEYibmMDXVXWQ5jH6MTYMflIFrwm4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;⑥Combine Engine&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hudi社区版目前在内存中对数据的合并和传输的实现完全是基于Avro格式，这会造成与具体引擎对接时有大量的序列化与反序列化计算，从而导致比较大的性能问题。对于这个问题我们与社区合作做了Combine Engine的优化，具体做法就是将接口深入到了引擎层的数据结构。例如在读取FileGroup时我们直接读取的就是Spark的InternalRow或是Flink的RowData，从而尽量减少对Avro格式的依赖。这样的优化可以极大地提高MergeOnRead和Compaction的性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来两个优化由于时间原因就不做详细介绍了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080PNdqRzvYU0kfpwNJucM1EW6oCtPqlRvHLEId7IrqnU9g80hksqFmOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;⑦实时数据分析&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个场景我们可以把明细数据直接通过Flink导入到Hudi中，还会根据DIM表做一个宽表的处理从而落到Hudi表。这个场景的诉求主要有两点，一个是日志型数据的高效入湖，另一个是实时数据的关联。对于这两个场景的诉求，我们针对性的进行了一些优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080PzNFzrjWRUIkKNtAnvelzj93BmBqwuzYIDdo5m16x4o4unYNKOgnYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;⑧日志型数据高效入湖&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于日志型数据，我们支持了NonIndex的索引。Hudi社区版主要支持是基于有主键的索引，比如Bloom Filter或者是我们给社区提供的Bucket Index。生成基于主键的索引方式主要会有两个步骤，第一个步骤是数据在写进来的时候会先对数据做定位，查询是否有历史数据存在，如果有的话就Update，没有的话就Insert，之后会定位到对应的文件把数据Append到Log中。然后在Merge或者在Compaction的过程中要在内存中做合并与去重处理，这两个操作也是比较耗时的。对于NonIndex来说，是不存在主键的概念的，所以支持的也是没有主键的日志型数据入湖。这样对于日志型数据在写入时可以直接Append到Log File中，在合并的过程中，我们可以不做去重处理，直接将增量数据数据Append到Base File中。这样就对入湖的效率有了很大的提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080HgdmCYNVyS3QpmvLSsOzOWOlARg6sznbp2bwmlCaFvHRMP4X0ARz9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;⑨实时数据关联&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对目前实时Join出现的一系列问题，我们基于Hudi支持了存储层的关联。对Hudi来说不同的流可以完成其所对应列的写入，并在Merge的时候做拼接，这样对于外界查询来说就是一个完整的宽表。具体来说，在实时数据写入的过程中有一个比较大的问题是怎么处理多个流的写入冲突问题。我们主要是基于Hudi Metastore来做冲突检测。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf0803sj2xrhByvF7YAddjQ3NZfbohFm8HA8gOcnOUzgxMT6mI8cESic23oA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于读的流程，我们会先将多个LogFile读入内存进行Merge，然后再与BaseFile进行最终Merge，最后输出查询结果，Merge和Compaction都会使用到这个优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;未来规划&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080OTq8cGLiaLIBrxIlbRwRAdfIgGtIPocP7smtZnEEgVlLFXpq8o4ZSHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 弹性可扩展的索引系统&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们刚刚介绍了Bucket Index支持大数据量场景下的更新，Bucket Index也可以对数据进行分桶存储，但是对于桶数的计算是需要根据当前数据量的大小进行评估的，如果后续需要re-hash的话成本也会比较高。在这里我们预计通过建立Extensible Hash Index来提高哈希索引的可扩展能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080icub6cialOhno0IV7pib9ib4lOqSUwYg9yolibHVgHOB2uAP02PTRCqCzpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 自适应的表优化服务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了降低用户的理解和使用成本，我们会与社区深度合作推出Table Management Service来托管Compaction，Clean，Clustering以及Index Building的作业。这样对用户来说相关的优化都是透明的，从而降低用户的使用成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080wFWms6t7kbU3BB7yduKjv6ZlkxRoGwAtZqantT3iaNE0Axr1f5AGT1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 元数据服务增强&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前我们内部已经使用Hudi Metastore稳定支持了一些线上业务，但是也有更多需求随之而来，预计增强的元数据服务如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①Schema Evolution&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：支持业务对Hudi Schema变更的诉求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②Concurrency Control&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在Hudi Metastore中支持批流并发写入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5626666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080ibj5ekbun07ia1EKBEQxJ6svfGibXSYOydPLJ9FaPmtypSdqKCDts3huA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 批流一体&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于流批一体处理，我们的规划如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①Unified SQL&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：做到批流统一的SQL层，Runtime由Flink/Spark/Presto多引擎协同计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②Unified Storage&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于Hudi的实时数据湖存储，由Hudi来做统一的存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③Unified Catalog&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：统一元数据的构建以及接入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;问答环节&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q1：MergeOnRead 列裁剪的文件格式是列式的还是行式的？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A1：在没有优化前是基于Avro的行式存储我们目前已经支持了Parquet Log的列存格式，能够带来存储以及查询性能上的提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q2：Async Compaction的调度是在Flink内部访问的Hudi Metastore吗？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A2：Flink之前默认是做了三件事，第一件事是Hudi增量写，第二件事是在几次增量写之后会Schedule一个Compaction计划，第三件事是执行Compaction Plan。我们目前所做的事情是只把Compaction Plan执行的这一步拆分了出来使用Compaction Service拉取Hudi Metastore元数据来执行Compaction。（图见写入稳定性治理）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q3：Hudi 表是如何管理的？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A3：通过Hudi Metastore。目前我们使用的Hudi Metastore主要是部署在MySQL上面，支持文件与库表元数据的管理，Snapshot 服务，Hudi自有的Timeline 服务以及一些并发控制的处理。上层接口我们完全兼容Hive Metastore的接口标准，然后基于Hudi特性，我们拓展了Hudi特有的例如Timeline 相关的接口。同时我们支持流批应用统一接入到Hudi Metastore去做数据处理。（图见元数据服务增强）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q4：可以深入介绍一下多流写Hudi的流程以及冲突解决吗？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A4：多流Hudi增量写入，不同的流可以写到不同的Log文件中去，这一点是不冲突的，会产生冲突的点是二阶段的提交冲突，如果涉及到写的是同一个列的话是会产生列冲突的，这时我们会在Hudi Metastore中进行列级别的冲突检测，如果有冲突的话会直接拒绝提交，没有的话我们会认为是写两个流，就可以正常并发写入。（图见实时数据关联 — 写流程）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q5：实时数仓里的Kafka流表和Hudi流表是什么关系，以后是否会用Hudi表来代替Kafka的流表？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A5：我们今天介绍主要是Hudi支持的一些近实时（分钟级别）场景的落地和尝试，在某些场景我们需要秒级的响应，这样就需要我们做一些流批一体的规划和尝试。长期来看我们会使用Hudi 流式能力来替换Kafka的流式能力。（图见未来规划 – 流批一体）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q6：实时数仓是否每一层都用Hudi？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A6：湖内计算还在小范围的推广阶段，某些场景我们正在做POC，个别场景也在准备上线的过程中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q7：为何会使用Bucket Index？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A7：在使用Bucket Index前我们使用的是Bloom Filter Index，布隆过滤器在小数据量场景使用是没有问题的，但在百TB级别的数据下会有突出的假阳性的问题，当数据不存在的时候会扫描很多非必须的文件造成资源浪费。通过Bucket Index 我们可以直接通过hash值的计算能更加快速的定位数据所在的文件。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp wxw_wechannel_card_not_horizontal&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAvAszj9BnkwAAAAstQy6ubaLX4KHWvLEZgBPE_KF0NxRjcMyCzNPgMItsejQeO6Y1cF-bGOOUIgVo&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqzW7l3gQJrlN9UOvicGicAlF452K7BzON0a34Jgias73OLSicw5ttc1Q9ibN7pp9gcCGib7j4sibeI5XlJFmsOYlRBKsrdw&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdV4DcNhR0KCKQKmZ4MypNzNy1u4vpjzlt0nCvnhgia0zR0ibiabPthQibk7NBoHqALIb4A&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM65dPMvw5LV1YKkNSOYWPNEiax9tdVpZs627Us6C2b4W9A/0&quot; data-username=&quot;v2_060000231003b20faec8c7e18a1ec3ddcb0ceb33b07771cd1cb5408d3b3fdc0ac1072c28df1a@finder&quot; data-nickname=&quot;DataFunTalk&quot; data-desc=&quot;点击链接下载【多维分析PPT】Hudi表的管理是怎么做的？#数据湖 #实时数仓 #多维分析&quot; data-nonceid=&quot;2267253158257630400&quot; data-type=&quot;video&quot; data-width=&quot;1080&quot; data-height=&quot;1440&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;今天的分享就到这里，谢谢大家。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;在文末分享、点赞、在看，给个3连击呗~&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;分享嘉宾&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-id=&quot;40633&quot; data-tools=&quot;小蚂蚁编辑器&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;22b98&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;22b98&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47148148148148145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zHbzQPKIBPjzodGzicCkJoF62BXoHf080Ay2gej53PJdrbvh2aymcp5nJXADpZtVzBBnde9BCOGRu3otKibWarjg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-id=&quot;46143&quot; data-type=&quot;lspecial02&quot; data-tools=&quot;小蚂蚁编辑器&quot; powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;44f44&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;44f44&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;44f44&quot;&gt;&lt;section data-bastyle=&quot;display:inline-block;vertical-align:middle;width:5px;height:26px;background-color:rgb(168, 166, 209);margin-right:10px;transform:rotate(8deg);-webkit-transform:rotate(8deg);-moz-transform:rotate(8deg);-o-transform:rotate(8deg);&quot; data-md5=&quot;44f44&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;44f44&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-bastyle=&quot;background-color: rgba(168, 166, 209, 0.2);padding:0px 2px;box-sizing:border-box;&quot; data-md5=&quot;44f44&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;44f44&quot;&gt;&lt;p data-md5=&quot;44f44&quot;&gt;&lt;span&gt;&lt;strong data-md5=&quot;44f44&quot;&gt;张友军&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;44f44&quot;&gt;&lt;section powered-by=&quot;xmyeditor.com&quot; data-md5=&quot;44f44&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong data-md5=&quot;44f44&quot;&gt;字节跳动 &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;大数据引擎研发工程师&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;就职于字节跳动数据引擎部门数据湖团队，任数据湖高级工程师。先后从事 Spark 引擎研发，智能数仓研发，现负责基于 HUDI 的实时数据湖内核研发及在字节跳动的场景落地。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;&lt;span&gt;02&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;免费下载资料&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;704&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.47148148148148145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjzodGzicCkJoF62BXoHf080Mdq6edhicw5r4QE3wC4xIK8Lovy1uUkWp5oZeabqbD3icCrryVBAPm4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;大数据专题书.png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;&lt;span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;报名看直播 免费领PPT&lt;/span&gt;&lt;/strong&gt;
    &lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;1301&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1408&quot; data-ratio=&quot;2.25&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPgGRsbGKA2L4Yne25p6WNYz0GeWqdoTia10C745vtBorfAQNE1QrGYUKSMJXbknF8kAKicYnYIzCqgw/640?wx_fmt=png&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; title=&quot;公众号尾banner.jpg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;/&lt;/span&gt;&lt;/strong&gt;&lt;strong data-md5=&quot;9a9a0&quot;&gt;&lt;span&gt;关于我们&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DataFun：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;专注于大数据、人工智能技术应用的分享与交流。发起于2017年，在北京、上海、深圳、杭州等城市举办超过100+线下和100+线上沙龙、论坛及峰会，已邀请超过2000位专家和学者参与分享。其公众号 DataFunTalk 累计生产原创文章700+，百万+阅读，14万+精准粉丝&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1NTMyOTI4Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh87SyjsEtoRFs9iaLyPXYh9ls0BcsiaPDnFkg72xgLsvku13ZRYibyq93DgRoCaTaTkbJj7Hia4dvI1w/0?wx_fmt=png&quot; data-nickname=&quot;DataFunTalk&quot; data-alias=&quot;datafuntalk&quot; data-signature=&quot;专注于大数据、人工智能技术应用的分享与交流。致力于成就百万数据科学家。定期组织技术分享直播，并整理大数据、推荐/搜索算法、广告算法、NLP 自然语言处理算法、智能风控、自动驾驶、机器学习/深度学习等技术应用文章。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;🧐 &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;分享、点赞、在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，给个&lt;/span&gt;&lt;span&gt;&lt;strong&gt;3连击&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;呗&lt;/span&gt;&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;👇&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d1d98718847ba36ef2d015f3deea86b2</guid>
<title>go实现规则引擎</title>
<link>https://toutiao.io/k/w4tiunr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;dynamicMarkdown&quot; data-v-91bd6944=&quot;&quot; data-v-8fa177d6=&quot;&quot;&gt;&lt;p data-v-91bd6944=&quot;&quot;&gt;If you’ve been working on a product or business, a recurring scenario that happens is the changing business requirements. Developers build a solution based on set of conditions. Over time these logical conditions might change due to changing business needs or other external market factors. &lt;a href=&quot;https://en.wikipedia.org/wiki/Business_rules_engine&quot; data-v-91bd6944=&quot;&quot;&gt;Rule engines&lt;/a&gt; are a powerful way to solve such problems.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;In this article, you’ll learn about the rule engines and how can this system be leveraged to solve complicated business problems in a scalable and maintainable way.&lt;/p&gt; &lt;hr data-v-91bd6944=&quot;&quot;/&gt; &lt;h2 data-v-91bd6944=&quot;&quot;&gt;What is a Rule Engine?&lt;/h2&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;You can think of rule engines as a way of business logic and conditions that helps in growing your business over time. In very layman terms, these could be a bunch of &lt;strong data-v-91bd6944=&quot;&quot;&gt;if-else conditions closely associated with business attributes&lt;/strong&gt; that can vary and grow over time. So these are set of rules that check a condition and execute a action based on the result.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Each rule follows a basic structure&lt;/p&gt; &lt;pre class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;When
   &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;lt;&lt;/span&gt;Condition is true&lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;gt;&lt;/span&gt;
Then
   &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;lt;&lt;/span&gt;Take desired Action&lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Let’s take an example to understand this better. Assume you’re working on a problem where you want to give relevant offers to users for the food ordering service that your business provides. (Eg. Zomato, Swiggy, Uber Eats)&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;&lt;strong data-v-91bd6944=&quot;&quot;&gt;Condition:&lt;/strong&gt; When a user meets all of the following conditions:&lt;/p&gt; &lt;ul data-v-91bd6944=&quot;&quot;&gt;&lt;li data-v-91bd6944=&quot;&quot;&gt;User has made atleast 10 orders&lt;/li&gt; &lt;li data-v-91bd6944=&quot;&quot;&gt;Average order values is greater than Rs. 150&lt;/li&gt; &lt;li data-v-91bd6944=&quot;&quot;&gt;User age is between 20-30&lt;/li&gt;&lt;/ul&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;&lt;strong data-v-91bd6944=&quot;&quot;&gt;Action:&lt;/strong&gt; Offer user a discount of 20%&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;This logic can be modified easily as well as enhanced further to other attributes that belong to user.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Rule engines are useful in solving business oriented logic that result in some sort of decision using number of business attributes. You could argue that can’t we embed this logic in our code itself. Yes, we could do that but rule engines give &lt;strong data-v-91bd6944=&quot;&quot;&gt;flexibility&lt;/strong&gt; to modify conditions and add more logics. Since these conditions come from product/business, they have much more accessibily and don’t have to reach out to developers each time.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Also you have the flexibility where you want to define the rules. It could be in a JSON, text file or a web interface where anyone can easily perform CRUD operations. Another addition would be support of multiple version of rules for different set of users.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;In the next section, let’s learn how the rule engine actually works.&lt;/p&gt; &lt;hr data-v-91bd6944=&quot;&quot;/&gt; &lt;h2 data-v-91bd6944=&quot;&quot;&gt;Working of a Rule Engine&lt;/h2&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;As you must have understood the rule engine typically works as like multiple &lt;code data-v-91bd6944=&quot;&quot;&gt;if-else &lt;/code&gt; conditons. So the system runs input (aka fact) through defined set of rules, based on the result of the condition it decides whether to run corresponding action or not. To define it a bit formally, there are 3 phases in one execution.&lt;/p&gt; &lt;h3 data-v-91bd6944=&quot;&quot;&gt;3 phases in rule engine&lt;/h3&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;&lt;strong data-v-91bd6944=&quot;&quot;&gt;Match&lt;/strong&gt;&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;This is the phase of pattern matching where the system matches the facts and data against the set of defined conditions (rules). Some of the commonly used algorithm for pattern matching like &lt;a href=&quot;https://en.wikipedia.org/wiki/Rete_algorithm&quot; data-v-91bd6944=&quot;&quot;&gt;Rete&lt;/a&gt; (used in Drools), Treat, Leaps, etc. Various versions of Rete are used in modern business rule management solutions (BRMS) today. Going in-depth of Rete is out of scope for this blog (maybe another time).&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;&lt;strong data-v-91bd6944=&quot;&quot;&gt;Resolve&lt;/strong&gt;&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;There can be scenarios of conflicts from match phase, the engine handles the order of conflicting rules. Think of this like a &lt;strong data-v-91bd6944=&quot;&quot;&gt;priority&lt;/strong&gt; that allows engine to give more weightage to some conditons over others. Few of the algorithms used for resolving conflicts are Recency based, priority wise, refactor, etc.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;&lt;strong data-v-91bd6944=&quot;&quot;&gt;Execute&lt;/strong&gt;&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;In this phase, the engine executes the action corresponding to the selected rule and returns the final result.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;An important property of rule engines is &lt;strong data-v-91bd6944=&quot;&quot;&gt;chaining&lt;/strong&gt; - where the action part of one rule changes the state of the system in such a way that it alters the value of the condition part of other rules.&lt;/p&gt; &lt;hr data-v-91bd6944=&quot;&quot;/&gt; &lt;h2 data-v-91bd6944=&quot;&quot;&gt;Implementing a Rule Engine&lt;/h2&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Let’s try to implement a rule engine for hands-on experience. We’ll be using the &lt;strong data-v-91bd6944=&quot;&quot;&gt;&lt;a href=&quot;https://github.com/hyperjumptech/grule-rule-engine&quot; data-v-91bd6944=&quot;&quot;&gt;Grule&lt;/a&gt;&lt;/strong&gt; library and implementing a fairly simple rule engine in Golang. Grule has its own Domain Specific Language and is inspired from the popular Drools library.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;We’ll be implementing the offer example defined in previous section. Let’s get started by setting up a go project.&lt;/p&gt; &lt;pre class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;mkdir&lt;/span&gt; test_rule_engine
&lt;span class=&quot;token builtin class-name&quot; data-v-91bd6944=&quot;&quot;&gt;cd&lt;/span&gt; test_rule_engine
go mod init test_rule_engine
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;touch&lt;/span&gt; main.go
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Open &lt;code data-v-91bd6944=&quot;&quot;&gt;main.go&lt;/code&gt; in your editor and add following code.&lt;/p&gt; &lt;pre class=&quot;language-go&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-go&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
  fmt&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;TODO: implementing rule engine&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Now that are project is ready, let’s create a rule engine service.&lt;/p&gt; &lt;pre class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;mkdir&lt;/span&gt; rule_engine
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;touch&lt;/span&gt; rule_engine/service.go
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;touch&lt;/span&gt; rule_engine/offer.go
go get -u github.com/hyperjumptech/grule-rule-engine
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Let’s define our core rule engine service. Paste the following code in &lt;code data-v-91bd6944=&quot;&quot;&gt;service.go&lt;/code&gt;&lt;/p&gt; &lt;pre class=&quot;language-go&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-go&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// rule_engine/service.go&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;package&lt;/span&gt; rule_engine

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;github.com/hyperjumptech/grule-rule-engine/ast&quot;&lt;/span&gt;
&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;github.com/hyperjumptech/grule-rule-engine/builder&quot;&lt;/span&gt;
&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;github.com/hyperjumptech/grule-rule-engine/engine&quot;&lt;/span&gt;
&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;github.com/hyperjumptech/grule-rule-engine/pkg&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;var&lt;/span&gt; knowledgeLibrary &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;ast&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewKnowledgeLibrary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// Rule input object&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; RuleInput &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;DataKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// Rule output object&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; RuleOutput &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;DataKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// configs associated with each rule&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; RuleConfig &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; RuleInput
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleOutput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; RuleOutput
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; RuleEngineSvc &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewRuleEngineSvc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;RuleEngineSvc &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// you could add your cloud provider here instead of keeping rule file in your code.&lt;/span&gt;
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;buildRuleEngine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&lt;/span&gt;RuleEngineSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;buildRuleEngine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
ruleBuilder &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewRuleBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&lt;/span&gt;knowledgeLibrary&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// Read rule from file and build rules&lt;/span&gt;
ruleFile &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; pkg&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewFileResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;rules.grl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; ruleBuilder&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;BuildRuleFromResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;Rules&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; ruleFile&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;svc &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;RuleEngineSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;ruleConf RuleConfig&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// get KnowledgeBase instance to execute particular rule&lt;/span&gt;
knowledgeBase &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; knowledgeLibrary&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewKnowledgeBaseInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;Rules&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;

dataCtx &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; ast&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewDataContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// add input data context&lt;/span&gt;
err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; dataCtx&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;ruleConf&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;DataKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; ruleConf&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; err
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// add output data context&lt;/span&gt;
err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;=&lt;/span&gt; dataCtx&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;ruleConf&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleOutput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;DataKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; ruleConf&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleOutput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; err
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// create rule engine and execute on provided data and knowledge base&lt;/span&gt;
ruleEngine &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; engine&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewGruleEngine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;=&lt;/span&gt; ruleEngine&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;dataCtx&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; knowledgeBase&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; err
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;I’ve tried to document the code in a way that helps you understand the flow. Here we define a rule engine service. The rule engine execute as explained above in theory works in three parts.&lt;/p&gt; &lt;ul data-v-91bd6944=&quot;&quot;&gt;&lt;li data-v-91bd6944=&quot;&quot;&gt;Defining knowledge library (loading rules)&lt;/li&gt; &lt;li data-v-91bd6944=&quot;&quot;&gt;Defining the data attributes on which the rules will evaluate&lt;/li&gt; &lt;li data-v-91bd6944=&quot;&quot;&gt;Executing the rule engine and getting the result.&lt;/li&gt;&lt;/ul&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Let’s create our offer rule now that uses the interface we’ve defined in our core rule engine service.&lt;/p&gt; &lt;pre class=&quot;language-go&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-go&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// rule_engine/offer.go&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;package&lt;/span&gt; rule_engine

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; UserOfferContext &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
UserOfferInput  &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;UserOfferInput
UserOfferOutput &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;UserOfferOutput
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;uoc &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;UserOfferContext&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;user_offers&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;uoc &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;UserOfferContext&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; RuleInput &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; uoc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;UserOfferInput
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;uoc &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;UserOfferContext&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;RuleOutput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; RuleOutput &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; uoc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;UserOfferOutput
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// User data attributes&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; UserOfferInput &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
Name              &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;name&quot;`&lt;/span&gt;
Username          &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;username&quot;`&lt;/span&gt;
Email             &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;email&quot;`&lt;/span&gt;
Age               &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;age&quot;`&lt;/span&gt;
Gender            &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;gender&quot;`&lt;/span&gt;
TotalOrders       &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;total_orders&quot;`&lt;/span&gt;
AverageOrderValue &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;float64&lt;/span&gt; &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;average_order_value&quot;`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;u &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;UserOfferInput&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;DataKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;InputData&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// Offer output object&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; UserOfferOutput &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
IsOfferApplicable &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;is_offer_applicable&quot;`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;u &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;UserOfferOutput&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;DataKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;OutputData&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewUserOfferContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;UserOfferContext &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&lt;/span&gt;UserOfferContext&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
UserOfferInput&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&lt;/span&gt;UserOfferInput&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
UserOfferOutput&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&lt;/span&gt;UserOfferOutput&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Cool, so we’ve defined our offer rule construct. But we’re missing one step, we haven’t added any rule yet. Remember &lt;code data-v-91bd6944=&quot;&quot;&gt;rules.grl&lt;/code&gt; file that we read rules from. Let’s add that.&lt;/p&gt; &lt;pre class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;# go to root level in project&lt;/span&gt;
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;touch&lt;/span&gt; rules.grl
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Paste the following code in &lt;code data-v-91bd6944=&quot;&quot;&gt;rules.grl&lt;/code&gt;&lt;/p&gt; &lt;pre class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;rule CheckOffer &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;Check if offer can be applied for user&quot;&lt;/span&gt; salience &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
    when
        InputData.TotalOrders &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; InputData.AverageOrderValue &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; InputData.Age &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; InputData.Age &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;30&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;then&lt;/span&gt;
        OutputData.IsOfferApplicable &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;;&lt;/span&gt;
        Retract&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;CheckOffer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;There are couple of things that could be refactored here further. But i’ll leave that as an exercise. Now that we have our offer rule engine ready to be used, let’s see it in action.&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Go to &lt;code data-v-91bd6944=&quot;&quot;&gt;main.go&lt;/code&gt; and update it with following code.&lt;/p&gt; &lt;pre class=&quot;language-go&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-go&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// main.go&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;testgo/rule_engine&quot;&lt;/span&gt;

&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;github.com/hyperjumptech/grule-rule-engine/logger&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// can be part of user serice and a separate directory&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; User &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
Name              &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;name&quot;`&lt;/span&gt;
Username          &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;username&quot;`&lt;/span&gt;
Email             &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;email&quot;`&lt;/span&gt;
Age               &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;age&quot;`&lt;/span&gt;
Gender            &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;gender&quot;`&lt;/span&gt;
TotalOrders       &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;total_orders&quot;`&lt;/span&gt;
AverageOrderValue &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;float64&lt;/span&gt; &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;`json:&quot;average_order_value&quot;`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; data-v-91bd6944=&quot;&quot;&gt;// can be moved to offer directory&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; OfferService &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;CheckOfferForUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;user User&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;type&lt;/span&gt; OfferServiceClient &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
ruleEngineSvc &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;rule_engine&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;RuleEngineSvc
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewOfferService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;ruleEngineSvc &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;*&lt;/span&gt;rule_engine&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;RuleEngineSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; OfferService &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&lt;/span&gt;OfferServiceClient&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
ruleEngineSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt; ruleEngineSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;svc OfferServiceClient&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;CheckOfferForUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;user User&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot; data-v-91bd6944=&quot;&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
offerCard &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; rule_engine&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewUserOfferContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
offerCard&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;UserOfferInput &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;&amp;amp;&lt;/span&gt;rule_engine&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;UserOfferInput&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
Name&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;              user&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Username&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;          user&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;Username&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Email&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;             user&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Gender&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;            user&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;Gender&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Age&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;               user&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;Age&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
TotalOrders&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;       user&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;TotalOrders&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
AverageOrderValue&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;AverageOrderValue&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; svc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;ruleEngineSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;offerCard&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
logger&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;Log&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;get user offer rule engine failed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;return&lt;/span&gt; offerCard&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;UserOfferOutput&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;IsOfferApplicable
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
ruleEngineSvc &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; rule_engine&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewRuleEngineSvc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
offerSvc &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;NewOfferService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;ruleEngineSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;

userA &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
Name&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;              &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;Mohit Khare&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Username&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;mkfeuhrer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Email&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;me@mohitkhare.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Gender&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;Male&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Age&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
TotalOrders&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
AverageOrderValue&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;225&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

fmt&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;offer validity for user A: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; offerSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;CheckOfferForUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;userA&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;

userB &lt;span class=&quot;token operator&quot; data-v-91bd6944=&quot;&quot;&gt;:=&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;{&lt;/span&gt;
Name&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;              &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;Pranjal Sharma&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Username&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;pj&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Email&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;pj@abc.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Gender&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;Male&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
Age&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
TotalOrders&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
AverageOrderValue&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot; data-v-91bd6944=&quot;&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;

fmt&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; data-v-91bd6944=&quot;&quot;&gt;&quot;offer validity for user B: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;,&lt;/span&gt; offerSvc&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; data-v-91bd6944=&quot;&quot;&gt;CheckOfferForUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;(&lt;/span&gt;userB&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot; data-v-91bd6944=&quot;&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Just run the main file and you should see the output.&lt;/p&gt; &lt;pre class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;&lt;code class=&quot;language-bash&quot; data-v-91bd6944=&quot;&quot;&gt;go run main.go

offer validity &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;for&lt;/span&gt; user A:  &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;true&lt;/span&gt;
offer validity &lt;span class=&quot;token keyword&quot; data-v-91bd6944=&quot;&quot;&gt;for&lt;/span&gt; user B:  &lt;span class=&quot;token boolean&quot; data-v-91bd6944=&quot;&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Tada 🎉 Congrats, you’ve just implemented your first rule engine. Test your knowledge by adding more rules. You’ll need to add a new file similar as &lt;code data-v-91bd6944=&quot;&quot;&gt;offer.go&lt;/code&gt; with your own data attributes. Don’t forget to update the &lt;code data-v-91bd6944=&quot;&quot;&gt;rules.grl&lt;/code&gt; file.&lt;/p&gt; &lt;hr data-v-91bd6944=&quot;&quot;/&gt; &lt;h2 data-v-91bd6944=&quot;&quot;&gt;Benefits of Rule engine&lt;/h2&gt; &lt;ul data-v-91bd6944=&quot;&quot;&gt;&lt;li data-v-91bd6944=&quot;&quot;&gt;Easy &lt;strong data-v-91bd6944=&quot;&quot;&gt;understanding&lt;/strong&gt; for non-tech folks since rules are defined in normal logical statements.&lt;/li&gt; &lt;li data-v-91bd6944=&quot;&quot;&gt;Logic is independent from the code. This allows the same logic to be used at multiple places. (&lt;strong data-v-91bd6944=&quot;&quot;&gt;Reusability FTW&lt;/strong&gt;)&lt;/li&gt; &lt;li data-v-91bd6944=&quot;&quot;&gt;No changes in code are required if the business needs changes on same attributes. Frequent changes are feasible, you &lt;strong data-v-91bd6944=&quot;&quot;&gt;won’t need deployments&lt;/strong&gt; each time.&lt;/li&gt; &lt;li data-v-91bd6944=&quot;&quot;&gt;Central place for all your business rules instead of being distributed at multiple codebases.&lt;/li&gt;&lt;/ul&gt; &lt;h3 data-v-91bd6944=&quot;&quot;&gt;When to avoid Rule Engine&lt;/h3&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;Rule engines are not an alternate to your developers. In most situations building services, using AI models, proper system design is the way to go for scalable and efficient solutions. Rule engines are extra supplies that can help you in solving business problems.&lt;/p&gt; &lt;hr data-v-91bd6944=&quot;&quot;/&gt; &lt;h2 data-v-91bd6944=&quot;&quot;&gt;Resources&lt;/h2&gt;  &lt;h3 data-v-91bd6944=&quot;&quot;&gt;Popular Libraries&lt;/h3&gt;  &lt;blockquote data-v-91bd6944=&quot;&quot;&gt;&lt;p data-v-91bd6944=&quot;&quot;&gt;Do explore articles on &lt;a href=&quot;https://www.mohitkhare.com/categories/golang&quot; data-v-91bd6944=&quot;&quot;&gt;Golang&lt;/a&gt; and &lt;a href=&quot;https://www.mohitkhare.com/categories/system%20design&quot; data-v-91bd6944=&quot;&quot;&gt;System Design&lt;/a&gt;. You’ll learn something new 💡&lt;/p&gt;&lt;/blockquote&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;I hope you learned something new. Feel free to suggest improvements ✅&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;I share regular updates and resources on &lt;a href=&quot;https://twitter.com/mkfeuhrer&quot; data-v-91bd6944=&quot;&quot;&gt;Twitter&lt;/a&gt;. Let’s connect!&lt;/p&gt; &lt;p data-v-91bd6944=&quot;&quot;&gt;&lt;strong data-v-91bd6944=&quot;&quot;&gt;Keep exploring 🔎 Keep learning 🚀&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a420d76808f7916e2718521bb4b1c4ac</guid>
<title>前端各种调试工具的通用原理</title>
<link>https://toutiao.io/k/cbxriyx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为前端开发，调试是每天都会接触的概念。你觉得什么是调试呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有同学说，我用 Chrome DevTools 调试网页，可以查看元素，网络请求，断点运行 JS，用 Performance 工具分析性能等，这是网页的调试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有同学说，我用 VSCode Debugger 调试 Node.js，可以同时调试多个进程的代码。这是 Node.js 的调试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有同学说，我用 React DevTools 和 Vue DevTools 的 chrome 插件来调试 React、Vue 组件，还会用独立的 React DevTools 调试 React Native 应用。这是我常用的调试工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没错，这些都属于调试。那它们有什么共同特点呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们都是把运行的状态暴露给调试工具，做一些展示和交互。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，我们可以给调试下个定义：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代码在某个平台运行，把运行时的状态通过某种方式暴露出来，传递给开发工具做 UI 的展示和交互，辅助开发者排查问题、梳理流程、了解代码运行状态等，这个就是调试。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的某个平台，可以是浏览器、Node.js、Electron、小程序等任何能执行 JS 代码的平台。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;暴露出的运行时状态，可能是调用栈、执行上下文，或者 DOM 的结构，React 组件的状态等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;暴露出这些数据的方式一般是通过基于 WebSocket 的调试协议，当然也会有别的方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那常见的调试工具都是怎么实现的，有没有什么通用的原理呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们分别来看一下：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Chrome DevTools 原理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Chrome DevTools 分为两部分，backend 和 frontend：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;backend 和 Chrome 集成，负责把 Chrome 的网页运行时状态通过调试协议暴露出来。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;frontend 是独立的，负责对接调试协议，做 UI 的展示和交互。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两者之间的调试协议叫做 Chrome DevTools Protocol，简称 CDP。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传输协议数据的方式叫做信道（message channel），有很多种，比如 Chrome DevTools 嵌入在 Chrome 里时，两者通过全局的函数通信；当 Chrome DevTools 远程调试某个目标的代码时，两者通过 WebSocket 通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;frontend、backend、调试协议（CDP）、信道，这是 Chrome DevTools 的 4 个组成部分。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3231707317073171&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI3RoSkBHEpPXbAHZiafBxViaofczQ6cTpGsjxEOR7zsp9mMwBYNQrrTThQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1640&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;backend 可以是 Chromium，也可以是 Node.js 或者 V8，这些 JS 的运行时都支持 Chrome DevTools Protocol。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是 Chrome DevTools 的调试原理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了 Chrome DevTools 之外，VSCode Debugger 也是常用的调试工具：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;VSCode Debugger 原理&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VSCode Debugger 的原理和 Chrome DevTools 差不多，也是分为 frontend、backend、调试协议这几部分，只不过它多了一层适配器协议。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25997719498289623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI3ZXHR6Sicf7GicocK9n28SUOku8zr84eUwNGHDkSkT8QYMnnlokfqeFZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了能直接用 Chrome DevTools 调试 Node.js 代码，Node.js 6 以上就使用 Chrome DevTools Protocol 作为调试协议了，所以 VSCode Debugger 要调试 Node.js 也是通过这个协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是中间多了一层适配器协议 Debug Adapter Protocol，这是为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 VSCode 不是 JS 专用编辑器呀，它可能用来调试 Python 代码、Rust 代码等等，自然不能和某一种语言的调试协议深度耦合，所以多了一个适配器层。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4738598442714127&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI3RRoEmX2o2s23zlrxCziaFqPoHxpBbqpHbUC3OYPZG8K7UqHMrYblYuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1798&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样 VSCode Debugger 就可以用同一套 UI 和逻辑来调试各种语言的代码，只要对接不同的 Debug Apapter 做协议转换即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样还有另一个好处，就是别的编辑器也可以用这个 Debug Adapter Protocol 来实现调试，这样就可以直接复用 VSCode 的各种语言的 Debug Adapter 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VSCode Debugger 的 UI 的部分算是 frontend，而调试的目标语言算是 backend 部分，中间也是通过 WebSocket 传递调试协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整体和 Chrome DevTools 的调试原理差不多，只不过为了支持 frontend 的跨语言复用，多了一层适配器层。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了 Chrome DevTools 和 VSCode Debugger 外，平时我们开发 Vue 或 React 应用，还会用 Vue DevTools 和 React DevTools：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Vue/React DevTools&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue DevTools 或者 React DevTools 都是以 Chrome 插件（Chrome Extension）的形式存在的，要搞懂它们的原理就得了解 Chrome 插件的机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Chrome 插件中可以访问网页的 DOM 的部分叫做 Content Script，随页面启动而生效，可以写一些操作 DOM 的逻辑。还有一部分是后台运行的，叫做 Background，浏览器启动就生效了，生命周期比较长，可以做一些常驻的逻辑。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5270700636942676&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI381ff0ic8b3JFUfTUQUmOm5q0sqfd7nCNBC2y2o3B4Mbu2icxMM6ks4HA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1256&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是扩展 DevTools 的 Chrome 插件，那还有一部分 DevTools Page，是在 DevTools 里显示的页面：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7586726998491704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI3icurhhZqtJnXYs0Tz1Ox1r7osV9Ok89oRoVCg9h5TiaoLz36wnlMcjJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1326&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Content Script 部分可以操作 DOM，可以监听 DOM Event。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Backgroud 部分可以访问 extension api，可以和 Content Script 还有 DevTools Page 通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DevTools Page 部分可以访问 devtools api，可以向当前 window 注入 JS 执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是 Chrome 插件的大概架构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue DevTools 和 React DevTools 就是基于这个架构来实现的调试功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你看 Vue DevTools 的源码目录会发现，它也是分为 backend 和 frontend 的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3293269230769231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI3YuK9DhAcVvia3dTMMCs0abeAiaibTXevsDOaSun4dq0icqaU1898ekPvkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那 backend 运行在哪，frontend 运行在哪，两者怎么通信呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DevTools Page 是可以在页面 eval JS 的，那就可以注入 backend 的代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;backend 的代码可以拿到 Vue 组件的信息，通过 window message 的方式传递给 Background。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Background 可以和 DevTools Page 通信，从而实现消息转发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DevTools Page 根据拿到的数据，渲染组件的信息，实现交互功能。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5683544303797469&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI3mJjeyxpuyyTz5EuMgcu5PX1Zcib0uE5Oq84ScQtoGnxXZHtLj8atwlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1580&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4065533980582524&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI3xhe4329Z8icpeZF4x371z6kFkB07Yu5naWGQxx3EedQwxavyAVkNeDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1648&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;React DevTools 也是类似的，都是通过 backend 拿到组件信息，然后传递给 DevTools Page 做渲染和交互。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI360SsF2ScLJleJ3LCyaY3FiasbOQReOAefrvvKtpI1KnzoOBwKyGhBgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过 React DevTools 还有独立的 Electron 应用，可以用于 React Native 的调试。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7807017543859649&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGgVuEzFLr6NtkkI7OdaLYI3PKRUDBOV2cZDeR1KtKV65ZRsHnXSyhFmoBWmpu1IdPXKWYlX0XHYibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1824&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种自定义调试工具也是用的 Chrome DevTools Protocol 协议么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;明显不是，CDP 协议用来调试 DOM、JS 等挺不错的，但是不好扩展，如果有别的需求，一般都是自定义调试协议。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过了一遍 Chrome DevTools、VSCode Debugger、Vue/React DevTools 的原理，有没有发现它们有一些相同的地方？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没错，都有 backend 部分负责拿到运行时的信息，有 frontend 部分负责渲染和交互，也有调试协议用来规定不同数据的格式，还有不同的信道，比如 WebSocket 、Chrome 插件的 background 转发等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;frontend、backend、调试协议、信道，这是调试工具的四要素。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，不同的调试工具都会有不同的设计，比如 VSCode Debugger 为了跨语言复用，多了一层 Debugger Adapter，React DevTools 有独立的 electron 应用，用自定义调试协议，可以调试 React Native 代码。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们会用 Chrome DevTools、VSCode Debugger、Vue/React DevTools 等工具来调试网页、Node.js、React/Vue 的代码，它们都属于调试工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调试就是通过某种信道（比如 WebSocket）把运行时信息传递给开发工具，做 UI 的展示和交互，辅助开发者排查问题、了解代码运行状态等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们简单过了一遍这些调试工具的原理：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们有通用的部分，都有 frontend、backend、调试协议、信道这四要素。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也有不同的部分，比如 VSCode Debugger 多了一层 Debugger Adapter，用于跨语言的复用，Vue/React DevTools 通过向页面注入 backend 代码，然后通过 Background 实现双向通信等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抓住它们相同的部分来分析，理解不同的部分的设计原因，就很容易搞懂各种调试工具的原理了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;296&quot; data-ratio=&quot;0.5299270072992701&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/5Q3ZxrD2qNDvxh93JHfZD80m7GhBmGicoYpnLCanxmxvpVm4ACYNms63xnCgKt1Py5rvMCEDkWebYCTpfDVBq7g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong/&gt;&lt;strong&gt;&lt;span&gt;彦祖，亦菲，&lt;/span&gt;&lt;span&gt;点个&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;「在看」&lt;/strong&gt;&lt;span&gt;吧&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>