<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cecb4f43c840d6c42e70de04a8fe55b6</guid>
<title>业务逻辑编排服务设计——策略引擎</title>
<link>https://toutiao.io/k/s931wy4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42592592592592593&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/I8SfHxT94hVgjEN68yY4Zhxj0kIWqJDmc9ocGVby1xvLuXsv4scTyMapoqTeLhtMU0KwGevM1rAASFLtuRuHCQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;单维度的策略模型已经无法满足业务需求的演变，不能每次业务规则调整都要走迭代发布。&lt;/span&gt;&lt;span&gt;该如何快速支撑此类业务发展呢？本文将通过what-why-how三步走，介绍一种业务逻辑编排服务——策略引擎。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;119028&quot;&gt;&lt;section&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section hm_fix=&quot;218:327&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;&lt;strong data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;01&lt;/strong&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(149, 208, 205)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)|rgb(176, 245, 242)&quot;&gt;&lt;br data-darkmode-bgcolor-16678013048235=&quot;rgb(149, 208, 205)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)|rgb(176, 245, 242)&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;&lt;span&gt;&lt;strong&gt;什么是策略引擎&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;定义：将 可复用的业务逻辑 定义为 策略，将 策略的编排服务 定义为 策略引擎。&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;业务架构如下图所示：&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8037848605577689&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/I8SfHxT94hVgjEN68yY4Zhxj0kIWqJDmaXddiaz5CaprFYpia4p0nPePv7MyHFbump1PIm8VSZcfVHQUQfsicGUsw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1004&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;119028&quot;&gt;&lt;section&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section hm_fix=&quot;218:327&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;&lt;strong data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;02&lt;/strong&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(149, 208, 205)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)|rgb(176, 245, 242)&quot;&gt;&lt;br data-darkmode-bgcolor-16678013048235=&quot;rgb(149, 208, 205)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)|rgb(176, 245, 242)&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;&lt;span&gt;&lt;strong&gt;为什么要做策略引擎&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-style=&quot;background-color: rgb(255, 255, 255); letter-spacing: 1px; color: rgb(0, 128, 255); outline: 0px; max-width: 100%; font-size: 14px; caret-color: red; visibility: visible; font-family: &amp;quot;Tahoma For Number&amp;quot;, &amp;quot;Chinese Quote&amp;quot;, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;业务背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-style=&quot;background-color: rgb(255, 255, 255); letter-spacing: 1px; color: rgb(0, 128, 255); outline: 0px; max-width: 100%; font-size: 14px; caret-color: red; visibility: visible; font-family: &amp;quot;Tahoma For Number&amp;quot;, &amp;quot;Chinese Quote&amp;quot;, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;首先介绍下，我所在业务域是线下服务商推广作业域，用户涉及各种渠道的服务商和各种角色的服务商员工，小程序端上很多业务功能模块是针对指定人群（某渠道某角色）可见的，还有很多功能逻辑也是针对指定人群才会执行的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此代码里会有很多的渠道角色相关的判断逻辑，比如：某功能透出逻辑判断当前用户是否属于A渠道，某块代码逻辑执行前判断当前用户是否属于B角色。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着服务商渠道类别越来越多，这种代码判断逻辑也越写越多，明明是类似的判断逻辑，能不能复用呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此引入了策略的概念：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-style=&quot;background-color: rgb(255, 255, 255); letter-spacing: 1px; color: rgb(0, 128, 255); outline: 0px; max-width: 100%; font-size: 14px; caret-color: red; visibility: visible; font-family: &amp;quot;Tahoma For Number&amp;quot;, &amp;quot;Chinese Quote&amp;quot;, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;将渠道相关的判断逻辑统一封装到渠道策略类中，配之动态参数(白名单+黑名单)和当前用户上下文信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，就构成了最初的策略模型。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5107794361525705&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hVgjEN68yY4Zhxj0kIWqJDmXib5icQZVibukusMTakl0nkHcturxuvDVicAzqErdu2ibOiaZRgR2ialaYn5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1206&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-style=&quot;background-color: rgb(255, 255, 255); letter-spacing: 1px; color: rgb(0, 128, 255); outline: 0px; max-width: 100%; font-size: 14px; caret-color: red; visibility: visible; font-family: &amp;quot;Tahoma For Number&amp;quot;, &amp;quot;Chinese Quote&amp;quot;, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;业务调整&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;接着从一个业务需求调整讲起。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;需求1：需要对A渠道B角色隐藏地图模块展示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一个月后，新增了C渠道。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;需求2：需要对C渠道所有员工角色隐藏地图模块展示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;单维度的策略模型已经无法满足业务需求的演变，类似的需求后面会越来越多。不能每次业务规则调整都要走迭代发布。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该如何快速支撑此类业务发展呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-style=&quot;background-color: rgb(255, 255, 255); letter-spacing: 1px; color: rgb(0, 128, 255); outline: 0px; max-width: 100%; font-size: 14px; caret-color: red; visibility: visible; font-family: &amp;quot;Tahoma For Number&amp;quot;, &amp;quot;Chinese Quote&amp;quot;, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;模型升级&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;策略组合模型&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hVgjEN68yY4Zhxj0kIWqJDmVxn65JQE82wib2iaS8sqOFkV2Ob2dbLqF6u7CPbqBfJeq7JqEJRnxzqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上述业务场景的组合模型节点关系构建如下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7881188118811882&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hVgjEN68yY4Zhxj0kIWqJDm9ys8kIL93KOy5fdNM96nCjJTEEBcYjjZbzeplKQDqcIJtwI5YTYQjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1010&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;采用组合模式升级策略模型后，再也不担心业务规则扩展调整了。可支持策略子节点不断扩展，从而相应的业务逻辑规则可以不断嵌套叠加，策略之间可以自定义运算符（且/或）。假如后面增加D渠道E角色，也可以快速配置化调整策略组合，无需迭代发布。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;119028&quot;&gt;&lt;section&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section hm_fix=&quot;218:327&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;&lt;strong data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;03&lt;/strong&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(149, 208, 205)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)|rgb(176, 245, 242)&quot;&gt;&lt;br data-darkmode-bgcolor-16678013048235=&quot;rgb(149, 208, 205)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)|rgb(176, 245, 242)&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;&lt;span&gt;&lt;strong&gt;策略引擎怎么用&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-style=&quot;background-color: rgb(255, 255, 255); letter-spacing: 1px; color: rgb(0, 128, 255); outline: 0px; max-width: 100%; font-size: 14px; caret-color: red; visibility: visible; font-family: &amp;quot;Tahoma For Number&amp;quot;, &amp;quot;Chinese Quote&amp;quot;, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;一次注册——随处复用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;本节以业务逻辑中常见的疲劳度逻辑为例，来介绍新策略注册步骤。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实现策略功能&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;注册策略类型&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用新策略&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-style=&quot;background-color: rgb(255, 255, 255); letter-spacing: 1px; color: rgb(0, 128, 255); outline: 0px; max-width: 100%; font-size: 14px; caret-color: red; visibility: visible; font-family: &amp;quot;Tahoma For Number&amp;quot;, &amp;quot;Chinese Quote&amp;quot;, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;策略功能实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;疲劳度业务场景：在一段时间内，只能执行一次业务逻辑。举例：被惩戒的员工进入小程序时，每隔几小时警告弹窗一次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;疲劳度策略的实现主要是依赖缓存，在缓存中写入数据及设置过期时间。因为业务域的特点，疲劳度可能面向员工uid和服务商pid维度，因此疲劳度策略的动态参数格式如下表：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;疲劳度策略参数配置格式&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;时间配置|对象类型&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;时间配置格式&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;数值+单位（s秒/m分钟/h小时/d天）&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;对象类型&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;uid、pid&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;缓存key&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;strategy_tired_场景code_对象类型_对象具体id&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;缓存失效时间&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;时间配置&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-style=&quot;background-color: rgb(255, 255, 255); letter-spacing: 1px; color: rgb(0, 128, 255); outline: 0px; max-width: 100%; font-size: 14px; caret-color: red; visibility: visible; font-family: &amp;quot;Tahoma For Number&amp;quot;, &amp;quot;Chinese Quote&amp;quot;, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;策略注册及使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;将新策略类型注册至参数中心策略库配置。要使用疲劳度场景时，直接选择策略类型，配置相应的策略动态参数即可。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section hm_fix=&quot;218:327&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot;&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;&lt;strong data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;04&lt;/strong&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(149, 208, 205)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)|rgb(176, 245, 242)&quot;&gt;&lt;br data-darkmode-bgcolor-16678013048235=&quot;rgb(149, 208, 205)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)|rgb(176, 245, 242)&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16678013048235=&quot;rgb(187, 191, 195)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(255, 255, 255)|rgb(243, 248, 254)&quot; data-darkmode-color-16678013048235=&quot;rgb(6, 84, 234)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(6, 84, 234)&quot;&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;将某种可复用的业务逻辑封装注册成某类策略，并支持动态参数（白名单+黑名单）配置，通过策略引擎可快速编排组合各类策略，达到业务逻辑的组合复用，并支持策略扩展，这种低代码配置化调整业务逻辑的方式，最终可快速支持业务迭代发展，也提升了工作效率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;打个比方，把策略当作积木，不同类型的策略就是不同样式的积木，有长条的、正方形的、三角形的，那策略引擎就是一个自动积木搭建工厂，我们只需要告诉他要用到哪些积木，以及拼接顺序，它就能帮我们搭建出最终成果，免去了我们一步步手动拼的过程。（PS：如果你享受拼积木的过程，当我没说）&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/I8SfHxT94hVgjEN68yY4Zhxj0kIWqJDmNCKmw7TbBYuxZB6fUqUbtFPiamUWuPeCCgSETyh3KBDibY6syLsX6YSQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;综上所述，一句话解释WWH三个步骤。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;what：策略引擎是一种低代码、配置化、可扩展的业务逻辑编排服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;why：业务逻辑复用、快速支持业务调整&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;how：配置化快速调整&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot; data-style=&quot;margin-bottom: 0em; outline: 0px; max-width: 100%; box-sizing: border-box; color: rgb(34, 34, 34); letter-spacing: 0.544px; white-space: normal; caret-color: rgb(34, 34, 34); text-size-adjust: inherit; background-color: rgb(255, 255, 255); font-size: 16px; font-family: system-ui, -apple-system, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; overflow-wrap: break-word !important;&quot;&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16518176071663=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16518176071663=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-bgcolor-16526830592083=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16526830592083=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16526830592083=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16526830592083=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16532902304850=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16532902304850=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16532902304850=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16532902304850=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16538961289579=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16538961289579=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16538961289579=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16538961289579=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16544970019867=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16544970019867=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16544970019867=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16544970019867=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16569143641019=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16569143641019=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16569143641019=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16569143641019=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16575230563660=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(25, 25, 25)&quot;&gt;&lt;section data-darkmode-bgcolor-16518176071663=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16518176071663=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-bgcolor-16526830592083=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16526830592083=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16526830592083=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16526830592083=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16532902304850=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16532902304850=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16532902304850=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16532902304850=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16538961289579=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16538961289579=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16538961289579=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16538961289579=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16544970019867=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16544970019867=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16544970019867=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16544970019867=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16569143641019=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16569143641019=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16569143641019=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16569143641019=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16575230563660=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(25, 25, 25)&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; data-darkmode-bgcolor-16518176071663=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16518176071663=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-bgcolor-16526830592083=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16526830592083=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16526830592083=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16526830592083=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16532902304850=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16532902304850=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16532902304850=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16532902304850=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16538961289579=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16538961289579=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16538961289579=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16538961289579=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16544970019867=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16544970019867=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16544970019867=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16544970019867=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16569143641019=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16569143641019=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16569143641019=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16569143641019=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16575230563660=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(25, 25, 25)&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16518176071663=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16518176071663=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-bgcolor-16526830592083=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16526830592083=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16526830592083=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16526830592083=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16532902304850=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16532902304850=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16532902304850=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16532902304850=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16538961289579=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16538961289579=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16538961289579=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16538961289579=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16544970019867=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16544970019867=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16544970019867=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16544970019867=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16569143641019=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16569143641019=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16569143641019=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16569143641019=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16575230563660=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(25, 25, 25)&quot;&gt;&lt;section data-darkmode-bgcolor-16518176071663=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16518176071663=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-bgcolor-16526830592083=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16526830592083=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16526830592083=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16526830592083=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16532902304850=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16532902304850=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16532902304850=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16532902304850=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16538961289579=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16538961289579=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16538961289579=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16538961289579=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16544970019867=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16544970019867=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16544970019867=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16544970019867=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16569143641019=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16569143641019=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16569143641019=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16569143641019=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16575230563660=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(25, 25, 25)&quot;&gt;&lt;section data-darkmode-bgcolor-16518176071663=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16518176071663=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-bgcolor-16526830592083=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16526830592083=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16526830592083=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16526830592083=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16532902304850=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16532902304850=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16532902304850=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16532902304850=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16538961289579=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16538961289579=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16538961289579=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16538961289579=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16544970019867=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16544970019867=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16544970019867=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16544970019867=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16569143641019=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16569143641019=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16569143641019=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16569143641019=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16575230563660=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(25, 25, 25)&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1503267973856209&quot; data-type=&quot;gif&quot; data-w=&quot;306&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/I8SfHxT94hVCpsg0j390w6mNUrLXEicv7IzQCSd37F6kibGnqCe8PGp0iazd8Eo5ichyjuJmC6cWx9KDAJLXpPglDg/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot;&gt;&lt;section data-darkmode-bgcolor-16518176071663=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16518176071663=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-bgcolor-16526830592083=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16526830592083=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16526830592083=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16526830592083=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16532902304850=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16532902304850=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16532902304850=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16532902304850=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16538961289579=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16538961289579=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16538961289579=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16538961289579=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16544970019867=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16544970019867=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16544970019867=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16544970019867=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16569143641019=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16569143641019=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16569143641019=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16569143641019=&quot;#fff|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16575230563660=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16575230563660=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16575230563660=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16575230563660=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16587294727069=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16587294727069=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16587294727069=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16587294727069=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16593397383442=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16593397383442=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16593397383442=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16593397383442=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16599445342001=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16599445342001=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16599445342001=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16599445342001=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16605471479291=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16605471479291=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16605471479291=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16605471479291=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16665918596777=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)|rgb(109, 103, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)|rgb(25, 25, 25)&quot; data-darkmode-bgcolor-16678013048235=&quot;rgb(109, 103, 255)&quot; data-darkmode-original-bgcolor-16678013048235=&quot;#fff|rgb(109, 103, 255)&quot; data-darkmode-color-16678013048235=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-color-16678013048235=&quot;#fff|rgb(25, 25, 25)&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16665918596777=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16665918596777=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16665918596777=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16665918596777=&quot;#fff|rgb(34, 34, 34)&quot; data-style=&quot;margin-top: 8px; margin-bottom: 0em; outline: 0px; max-width: 100%; color: rgb(34, 34, 34); letter-spacing: 0.544px; white-space: normal; text-align: left; caret-color: rgb(34, 34, 34); text-size-adjust: inherit; background-color: rgb(255, 255, 255); font-family: system-ui, -apple-system, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;120481&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;更多代码设计内容&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3NzczMDI4Ng==&amp;amp;mid=2247486006&amp;amp;idx=1&amp;amp;sn=3e7d3f6d0fdfe06fd18702875931140d&amp;amp;chksm=fd0169b7ca76e0a10ac5e0725a762d3fdb051cbd9d958b2b43c2380936f95cb6fc3cbc95d1fa&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;业务团队如何统一架构设计‍风格？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;业务团队如何统一架构设计风格-实践篇&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3NzczMDI4Ng==&amp;amp;mid=2247485714&amp;amp;idx=1&amp;amp;sn=ebacd3dc35d1188598ef9b18284905ca&amp;amp;chksm=fd016a93ca76e385c15defbc8c2504923ca4d512fe0446682df9cb9fd46fef8930081426540b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;这么设计服务的幂等性就对了！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;这么设计服务的幂等性就对了！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3NzczMDI4Ng==&amp;amp;mid=2247485635&amp;amp;idx=1&amp;amp;sn=1eb844a012e3d68f9b08dcb3bd5d98d2&amp;amp;chksm=fd016b42ca76e2547ab662890e9b50d6ec64060103f62b888cdeaab41b2902ffa2b3f205ef45&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何通过代码重构让你的代码赏心悦目？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;如何通过代码重构让你的代码赏心悦目？&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzU3NzczMDI4Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/I8SfHxT94hU6P7Y4EMhbdHr7WDSMZt9wjEZfR28HDTcOac5u4A8ibiaIR2Miad2cCILq1FCH6NHZesEoOXLeuBopA/0?wx_fmt=png&quot; data-nickname=&quot;蚂蚁研发效能&quot; data-alias=&quot;AntLinkE&quot; data-signature=&quot;蚂蚁集团研发效能部有业界领先的工程和学术造诣，致力于为蚂蚁和多家金融企业提供核电级的全生命周期研发产品。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>404255775323207297ba4cd687887bb6</guid>
<title>vivo 服务端监控体系建设实践</title>
<link>https://toutiao.io/k/bo5kks4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;作者：vivo 互联网服务器团队- Chen Ningning&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;本文根据陈宁宁老师在“2022 vivo开发者大会&quot;现场演讲内容整理而成。公众号回复【2022 VDC】获取互联网技术分会场议题相关资料。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;经过几年的平台建设，vivo监控平台产品矩阵日趋完善，在vivo终端庞大的用户群体下，承载业务运行的服务数量众多，监控服务体系是业务可用性保障的重要一环，监控产品全场景覆盖生产环境各个环节。从事前发现，事中告警、定位、恢复，事后复盘总结，监控服务平台都提供了丰富的工具包。从以前的水平拆分，按场景建设，到后来的垂直划分，整合统一，降低平台割裂感。同时从可观测性、AIOps、云原生等方向，监控平台也进行了建设实践。未来vivo监控平台将会向着全场景、一站式、全链路、智能化方向不断探索前行。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;监控服务平台是自研的、覆盖全场景的可用性保障系统。经过多年深耕，vivo监控团队已经成体系构筑起一整套稳定性保障系统，随着云原生可观测技术变革不断深化，监控团队如何掌舵前行？下面就平台的建设历程、思考、探索，做一下简单介绍。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、监控体系建设之道&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;1.1 监控建设历程&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkGibqpKze751L8EicoN5gGHjlDfrEBWat0nGERxF89lMVb0MKSEjzIibXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;回顾监控建设历程，最初采用Zabbix，与告警中心的组合实现简易监控。随着业务的发展在复杂监控场景和数据量不断增长的情况下，这种简易的组合就显的捉襟见肘。所以从2018年开始我们开启了自研之路，最开始我们建设了应用监控、日志监控、拨测监控解决了很大一部分监控场景没有覆盖的问题；2019年我们建设了基础监控、自定义监控等，完成了主要监控场景的基本覆盖；2020年我们在完善前期监控产品的同时，进一步对周边产品进行了建设；随着AI技术的不断成熟，我们从2021年开始也进行了转型升级，先后建设了故障定位平台、统一告警平台有了这些平台后我们发现，要想进一步提升平台价值，数据和平台的统一至关重要；所以从2022年开始建设了统一监控平台，也就是将基础监控、应用监控和自定义监控进行了统一，统一监控包含了统一配置服务和统一检测服务。从监控的建设历程来看，我们一路覆盖了IaaS、PaaS、DaaS、CaaS等平台。我们的职能也从DevOps向AIOps迈进。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;1.2 监控能力矩阵&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPknBBb3X7I9A5icE1SpWnOpibUsIia2ic4VZLq8QoX1FibKUEicUXhsLOd1bDg/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;93.01038062283737&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.4898148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkYvBsjicjdgSf04rWgELaaObFP4ja8ibbNIzzITIrEsd8IkB1z03V2PNA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;讲了监控的发展历程，那么这些监控产品在我们的生产环境中是如何分布的呢？要想支撑数以万计的业务运行，需要庞杂的系统支撑，服务器、网络环境、基础组件等，都需要监控系统保障它的稳定性。我们将监控的对象分为五层，在基础设施层，包含了网络设备、服务器、存储硬件等，这一层我们通过VGW监控对网络设备进行监控，VGW是Vivo Gateway的缩写，类似于LVS；通过自定义监控，对机房进行监控；系统服务器层，我们定义的监控对象是服务运行依赖的环境，通过主机监控对物理机、虚拟机等监控，当前容器在云原生技术体系中，已然成为微服务运行的最佳载体，所以对容器的监控必不可少；系统服务层，包含了各种数据库产品、大数据组件等，在这一层主要通过自定义监控检测、告警；业务应用层，主要有应用服务，我们通过应用监控对业务链路信息进行监控；客户体验层，我们定义了端上的访问质量，由宙斯平台实现监控。前面我们讲了监控能力矩阵，下面我们具体介绍一下监控的范围和整个平台的能力。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;1.3 监控对象范围&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkibW7Gxfl4B3sHnHzKY5vRMmSea8tV6tl73sY7XLlNNXMPUrc21Dv2xg/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;90.79584775086506&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.4921875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkO1S1o2SIfvntUsnibDPaUicSb30RBibcm03UyOFOpcibrdia2MN7eqrw00A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;监控对象涉及网络、主机、基础服务等。面对各地机房我们做到了监控全覆盖，为满足各类环境部署诉求，我们可以做到针对不同环境的监控。我们支持多种采集方式，SDK和API采集主要应用在自定义监控场景，Agent主要采集主机类指标，采集上来的时序数据经过预聚合、统一的数据清洗，然后存储在TSDB数据库。针对海量数据存储我们采用了数据降精，宽表多维多指标等方案。我们常用的检测算法有恒值检测、突变检测、同比检测等，同时还支持了无数据检测、多指标组合检测，检测出现的异常我们会形成一个问题，问题在经过一系列的收敛后发出告警，我们有多种告警通道，支持告警合并、认领、升级等，需要展示的指标数据我们提供了丰富的自定义指标看板，对使用频率高 固化场景，我们提供了模板化配置方案。有了完备的监控体系，那么系统的关键指标和监控对象体量如何？&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;1.4 监控系统体量&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkeaBVbek5VU6Xvrq7ibpI0dTHrhnibEG224diaFdM2xbSnuia4O6jQnjyzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;当前监控服务体系保障着x万+的主机实例，x万+的DB实例，每天处理x千亿条各类指标和日志，对x千+的域名做到秒级监控，对x万+的容器实例监控，每天从统一告警发出的各类告警达到x十万+ ，对主机实例的监控覆盖率达到x %，监控平台通过不断的探索实践，实现了对海量数据计算存储，当前对核心业务的告警延迟在x秒以内，告警召回率大于x %。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;1.5 监控系统面临挑战&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkEq1uI9x1l6hFaLtvh1pOfLvibVXr2qTZ5zsYcLgochW1W8NXuHRg0Kw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;95.2249134948097&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.48828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkUCXj1qib5zuG8ekW9w4K57dicWbjOtVhEMpHxibyj6x7q5Go5slW4aR0Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;虽然现阶段取得了一些成果，但是目前仍然面临很多挑战，主要分为三大类：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、监控服务体系架构&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;2.1 产品架构&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkQIQpFeibquNiaEfia1oYMQwp1FD1aia4Z04jI1cYRicCljWKialxeYwialO9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;产品架构的能力服务层，我们定义了采集能力、检测能力、告警能力等；功能层我们对这些能力做了具体实现，我们将监控分为主机、容器、DB等9类场景，展示层主要由Dashboard提供灵活的图表配置能力，日志中心负责日志查询，移动端可以对告警信息进行认领、屏蔽。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;2.2 技术架构&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPklibRI2DUEYQCh9e0fxgEBMe2jGXxEzE6yTRDnE7NTnbL4OibWl2RDfrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;技术架构层分为采集、计算、存储、可视化几大块，首先在采集层我们通过各种采集方式进行指标采集；上报的数据主要通过Bees-Bus进行传输，Bees-Bus是一款公司自研的分布式、高可用的数据收集系统，指标经过Bees-Bus之后写入Kafka，随着Pulsar的受关注度与使用量的显著增加，我们也在这方面进行了一定的探索；计算层我们经历了Spark、Flink、KafkaStream几个阶段的探索，基本实现了计算层技术栈收归到KafkaStream；数据主要存储在Druid，当前有190+节点的Druid集群。Opentsdb和Hive早期应用在主机监控场景，随着业务发展其性能已经不能胜任当前的写入和查询需求，所以逐步被舍弃。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;当前我们选用了VictoriaMetrics作为Prometheus的远端存储，日志信息存储在ES中，目前我们有250+的ES节点。服务层中各类监控场景的元数据，都由统一元数据服务提供；各类检测规则、告警规则都由统一配置服务维护，统一告警服务则负责告警的收敛、合并、发送等。Grafana则主要用作自监控告警。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;2.3 交互流程&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkyia4RsoMhIpwp0XNRvWbeetyGGOabZwqObpRPble8urIKVr16haZwgw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;99.65397923875433&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.48515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkWYBHiaYub3URVjXbavXLq6vk4xicZ3YPtAibECXTd1gTErpNZU4gBX31A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在监控架构的基础上，我们介绍一下整体交互流程，采集规则由统一元数据服务管理，并主动下发到VCS-Master，VCS-Master主要用来任务下发，Agent执行结果数据接收，任务查询和配置管理等，Agent会定期从VCS-Master拉取缓存的采集规则，指标经过Bees-Bus双写到Kafka，由ETL程序对指标数据消费，然后做清洗和计算，最后统一写入到存储服务中，统一配置服务下发检测规则到异常检测服务，检测出的异常信息推送到Kafka，由告警代理服务对异常信息进行富化，处理好的数据推到Kafka，然后由统一告警服务消费处理。在存储服务之上，我们做了一层查询网关，所有的查询会经过网关代理。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、可用性体系构建与保障&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.1 可用性体系构建&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkGN1sJEQiazYvV6hQpQT3lydD9K9nvovhM3Rwgn1Zj4XVXg3EAbejEwg/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;90.79584775086506&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.4921875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkh0Kj2KlezJQ38qQNzQoIh5lfhEboU4ibH4x0AY452Mau94ib1hKzJziaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;前面说了监控服务体系整体架构，那么监控产品如何服务于业务可用性。我们将业务稳定性在时间轴上进行分割，不同的时段有不同的系统保障业务可用性，当前我们主要关注MTTD和MTTR，告警延迟越小发现故障的速度也就越快，系统维修时间越短说明系统恢复速度越快，我们将MTTR指标拆解细化然后各个击破，最终达成可用性保障要求。vivo监控服务体系提供了，涵盖在稳定性建设中需要的故障预防、故障发现等全场景工具包，监控平台提供了产品工具，那么与运维人员，研发人员是怎样协作配合的？&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.2 系统可用性保障&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkChh5hGNyDGFLefDI9frmdWtz4zICAOp1Nnpc1zt3I7PFVkbJicvI1IA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;106.29757785467129&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.4796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkQ1fmSGVRBCNWhOFBqVsevAx1kbe1EfuRyZwIKPBdczzuibVj1C3MTqg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;当监控对象有问题时，监控系统就会发送告警给运维人员或业务开发，他们通过查看相关指标修复问题。使用过程中运维人员的诉求和疑问，由监控平台产品和开发协同配合解决，我们通过运营指标，定期梳理出不合理的告警，将对应的检测规则同步给运维同学，然后制定调整计划，后期我们计划结合智能检测，做到零配置就能检测出异常指标。通过监控开发、运维人员和业务开发一起协同配合，保障业务的可用性。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.3 监控系统可用性&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkGuU9YCYbibRKnaGuKiamsIBnuFF6fmOo1ZwFiaiccevJGuYdYic3BHZVnWQ/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;86.36678200692042&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.4953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPktSAhTpRHiadtJqzU02Z20Acx2Ye7KUQ1eRdiamQhvSSHxqricQTu1Fa6w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;除了保障业务可用性外，监控系统自身的可用性保障也是一个重要的课题。为了保障Agent存活，我们构建了多种维活机制，保障端上指标采集正常。数据经过Bees-Bus之后，会双写到两个机房，当有一个机房出现故障，会快速切到另一个机房，保障核心业务不受损。数据链路的每一层都有自监控。监控平台通过Grafana监控告警。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.4 复杂场景下依托监控解决问题手段 监控能力矩阵&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkIwzdaN34vPw4ibUibynXkFkmMApxh2j7nyzfJAXc4D6QeR2O0KHOoeqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;随着公司业务发展，业务模型、部署架构越来越复杂，让故障定位很困难，定位问题成本高。而监控系统在面对复杂、异构、调用关系冗长的系统时就起到了重要作用。在问题发现阶段，例如多服务串联调用，如果某个阶段，出现耗时比较大的情况，可以通过应用监控，降低问题排查难度。在告警通知阶段，可以通过统一告警对异常统一收敛，然后根据告警策略，通知给运维或者开发。问题定位时，可以利用故障定位服务找到最可能出现问题的服务。解决问题时，类似磁盘打满这种比较常见的故障，可以通过回调作业快速排障。复盘改进阶段，故障管理平台可以统一管理，全流程复盘，使解决过程可追溯。预防演练阶段，在服务上线前，可以对服务进行压力测试，根据指标设置容量。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、行业变革下的监控探索实践及未来规划&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.1 云原生：Prometheus监控&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkxXOfAricjffKokJmm3lVUFia9OicLOEeJqsds5cibAUUVHtmbnTwwb9IxA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;86.36678200692042&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.4953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkVN2lu1D9R2pMsB4mzPRWLDaAgEzPHnyRypXV9IIQISsRicvf3p4ZZYg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;当前行业正迎来快速变革，我们在云原生、AIOps、可观性等方向均进行了探索实践。未来我们也想紧跟行业热点，继续深挖产品价值。随着Kubernetes成为容器编排领域的事实标准，Prometheus因为对容器监控良好的适配，使其成为云原生时代，容器监控的事实标准。下面我们介绍一下整体架构，我们将容器监控分为容器集群监控和容器业务监控，首先对于容器集群监控，每个生产集群都有独立的监控节点，用于部署监控组件，Prometheus按照采集目标服务划分为多组，数据存储采用VictoriaMetrics，我们简称VM，同一机房的Prometheus集群，均将监控数据Remote-Write到VM中，VM配置为多副本存储。通过拨测监控，实现对Prometheus自监控，保障Prometheus异常时能收到告警信息。容器业务监控方面，Agent部署在宿主机，并从Cadvisor拉取指标数据，上报到Bees-Bus，Bees-Bus将数据双写到两个Kafka集群，统一检测服务异步检测指标数据，业务监控指标数据采用VM做远端存储，Dashboard通过Promql语句查询展示指标数据。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.2 AIOps：故障定位&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkVlJicfRWCqt1JKbU0x26TSxLfH0Th1NwEAbbn7kpOHrmd8KEJ2Y2jkg/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;93.01038062283737&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.48984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkMzmlqzCrkBCLObFbRPqXAI1M8qlKpMFFeJsExklZl3WSh0SGIF6uqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;当前业界对AIOps的探索，大部分在一些细分场景，我们也在故障定位这个方向进行了探索。分析过程中首先通过CMDB节点树，选定需要分析的项目节点，然后选择需要分析的时段，就可以按组件和服务下钻分析，通过计算得出每个下游服务的波动方差，再利用K-Means聚类，过滤掉波动较小的聚类，找到可能出现异常的服务或组件。分析过程会形成一张原因链路图，方便用户快速找到异常服务，分析结果会推荐给用户，告知用户最可能出现异常的原因。详情查看功能可以看到被调用的下游服务、接口名、耗时等信息。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.3 &lt;/span&gt;&lt;span&gt;可观测性：可用性大盘&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkTgl1sJWYIhYica6PqEuFHLT6r4mHH0Syoq77icP3W3ec7ia02CzNDkUIA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;95.2249134948097&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.48828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPk0rhGfA096COosjy8vaV8xWibZK87GUgibuXxAQhfskhynsAytYJHKG3Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;由于CNCF在云原生的定义中提到了Observerbility，所以近两年可观性，成了技术圈很火热的关键词。当前业界基于Metrics、Logs、Traces对可观测性形成了一定共识。谷歌也给出了可观测的核心价值就是快速排障。我们认为指标、日志、追踪是实现可观测性的基础，在此基础上将三者有机融合，针对不同的场景将他们串联在一起，实现方便快捷的查找故障根因，综上我们建设了可用性大盘，它能查看服务的健康状况，通过下钻，可以看到上下游服务依赖关系、域名健康状况、后端服务分布等。通过串联跳转等方式可以看到对应服务的日志和指标信息。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.4 场景串联&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkDQ3cWzpfN1nJ8txW3MrwbibNEubWKHPLOmjju66YUWibb8MunFD5GgTA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;101.86851211072666&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.48359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkqJHmXTjiaQqHKueRhLVN6EaeO5T5EALRw0HIgJQq7zkCwAiciaI0tDAFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;未来我们希望在场景串联、可观测性、服务能力化进一步探索，深挖产品价值。场景串联上：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;首先我们希望告警能够与故障定位平台串联，帮助用户快速找到故障根因，缩短排查时间 ；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;告警记录能够一键转为事件，减少数据链路中人为操作的环节，保障数据的真实性；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我们希望能与CMDB等平台打通，将数据价值最大化。 &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.5 统一可观测&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkY3hEibRCZg59fxugfRT70YicIkR3APB1FyCldq0hog3sVzQOqKm7HvVw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;90.79584775086506&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.4921875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkHTg24o68sFDY8gRoqiblI1n1wEJGNgCVFVDsTgGbFQghWoAzEt37FVw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;现在，vivo监控服务体系的可观测产品没有完全融合在一起，所以后续我们希望构建统一可观测平台：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.6 能力服务化&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPk4HLticnKoqXlACTYgtIApHib1RY8ZXBmjibUuHjibkNNvzTOAsicaLpiaAFg/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;93.01038062283737&quot; data-cropy2=&quot;719.7231833910035&quot; data-ratio=&quot;0.48984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7LnVhfdibFibLBgwJLv20EPkvoaZ6ACTOEn830M2BPGVY5ichicMibMPmcvyLVQLX0H2m7aoSMUXaMicKQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;目前监控有很多服务，在公司构建混合云平台的大背景下，监控系统的服务应该具备以能力化的方式提供出去。未来我们希望指标、图表、告警等，以API或者独立服务的方式提供能力，例如在CICD服务部署过程中，就可以通过监控提供的图表能力，看到服务部署时关键指标变化情况，而不需要跳转到监控服务查看指标信息。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;最后，我们希望监控能更好的保障业务可用性，在此基础上，我们也希望通过监控系统提升业务服务质量。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:105.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzI4NjY4MTU5Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png&quot; data-nickname=&quot;vivo互联网技术&quot; data-alias=&quot;vivoVMIC&quot; data-signature=&quot;分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>514b40336c7ad5f725e29bf156f89e11</guid>
<title>分布式日志追踪框架！</title>
<link>https://toutiao.io/k/brnx5om</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是Tom哥。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着微服务盛行，很多公司都把系统按照业务边界拆成了很多微服务，在排错查日志的时候，因为业务链路贯穿着很多微服务节点，导致定位某个请求的日志以及上下游业务的日志会变得有些困难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候可能有的小伙伴就会想到使用SkyWalking，Pinpoint等分布式追踪系统来解决，并且这些系统通常都是无侵入性的，同时也会提供相对友好的管理界面来进行链路Span的查询，但是搭建分布式追踪系统还是需要一定的成本的，所以本文要说的并不是这些分布式追踪系统，而是一款简单、易用、几乎零侵入、适合中小型公司使用的日志追踪框架TLog。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;TLog简介&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TLog提供了一种最简单的方式来解决日志追踪问题，TLog会自动的对你的日志进行打标签，帮你自动生成traceId贯穿你微服务的一整条链路，在排查日志的时候，可以根据traceId来快速定位请求处理的链路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TLog不收集日志，只在对你原来打印的日志上增强，将请求链路信息traceId绑定到你打印的日志上。当出现微服务中那么多节点的情况，官方推荐使用TLog+日志收集方案来解决。当然分布式追踪系统其实是链路追踪一个最终的解决方案，如果项目中已经上了分布式追踪系统，那TLog并不适用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图，是ELK配合TLog，快速定位请求处理的链路的示例。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5448227936066713&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvjS9wORfkgzJyX1qhBDuN1liabrZZBOjevOoEicz9Lbtg9E524qEQAbKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2878&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;TLog接入&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、接入步骤&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1、引入依赖&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.yomahub&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;tlog-all-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.5.0&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2、替换logback配置项&lt;span/&gt;&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7491749174917491&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvJjtjtGA2g57ibneDf3WyLqePfibusccYxlWSZ8fbsZdZ8pHJX1ALAicxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1818&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这其实就已经完成了配置。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3、测试&lt;span/&gt;&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3539568345323741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvOY2vRttIueTxB2GvKVNfC5ZIuwsBJDBzJkNmK0Y4iayWxluReuXDjOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1390&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里是通过slf4j的LoggerFactory获取Logger对象，因为logback适配了slf4j，最终会通过logback来输出日志。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19771591720199858&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFviaK8A3f0FghyTsOViaQ8c3u52lImhWZ7f7iaJ8nWA61PBzYzmOXBX4eSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2802&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这可以看出，11794076298070144 就是本次日志输出的时候生成的一个请求的traceId，在排查日志的时候就可以通过这个traceId去搜索出整个请求的链路日志。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、TLog接入方式&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TLog总共提供了三种方式接入项目&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Javaagent接入方式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;字节码注入方式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;日志框架适配器方式&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面案例的接入方式其实是属于日志框架适配器方式，并且是对于Logback框架的适配。TLog除了适配了Logback框架，还适配了Log4j框架和Log4j2框架，项目中可自行选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Javaagent接入方式和字节码注入方式相比与日志框架适配器方式对代码的入侵性更小，但是这两种方式仅仅只支持SpringBoot项目，并且相较于日志框架适配器的方式，MDC和异步日志功能并不支持，所以要想完整体验TLog的功能，还是建议选择日志框架适配器方式，日志框架适配器方式其实接入也很快，其实也就是修改一下配置文件的事。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28807947019867547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvoA9jgP7sVk2JXrxtMGWNWKumIz5En5siayg57A2HUpEazaGzwYz7JfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1812&quot;/&gt;&lt;figcaption&gt;项目环境兼容对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36971830985915494&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFve4hkjXnKFc8fvNPcL4Gp9YjibBTszFIxFo6LzklVCFhe7hCiboyicUBqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1136&quot;/&gt;&lt;figcaption&gt;特性支持对比&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;TLog的基本原理&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、日志标签&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面在介绍TLog的时候，提到TLog会自动的对你的日志进行打标签，这个标签就是日志标签，一个日志标签最多可以包含如下信息：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;preApp：接口调用方服务名&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;preHost：接口调用方Host&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;preIp：接口调用方ip&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;currIp：当前服务ip&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;traceId：链路id，调用方如果传递就是传递的值，不传递就会重新生成&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spanId：链路spanId&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认是按照如下labelPattern进行数据拼接生成日志标签，所以默认只打出spanId和traceId。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35789473684210527&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvSsMia8hsp1FdE95Pk0PX4FLHw9WTtcEYAfHLe37Ekesqyg8g1tOgySA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1330&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也就是上面为什么示例中会输出 &amp;lt;0&amp;gt;&amp;lt;11794076298070144&amp;gt; 这种格式的原因，前面的0其实就是spanId。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想改变日志标签输出其它信息或者输出的顺序，只需要在SpringBoot配置文件中配置日志标签的生成样式就行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;tlog.pattern=[$preApp][$preIp][$spanId][$traceId]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、TLogContext&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5146396396396397&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvvkibB8aggvvYbMhqjvib8TuV2jBNQg5em91PZKOBFiaFv6bkJMXLp8IsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1776&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TLogContext是TLog是一个核心的组件，这个组件内部是使用了TransmittableThreadLocal来传递traceId、preApp等信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当有一个请求过来的时候，会从解析出traceId、preApp等信息，然后设置到TransmittableThreadLocal中，之后就可以在整个调用链路中从TLogContext中获取到traceId等信息。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、TLogRPCHandler&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9287410926365796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvk2yInTKVDqKFusd2xficAjzyib59UibpqeqiboqEWicc3fX5el7G5BMmiamg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1684&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个组件是用来处理调用方传递的traceId、preApp等信息，设置到TLogContext和MDC中，同时根据日志标签的格式生成日志标签。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;第三方框架的适配&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际项目中，一个请求处理过程可能会出现以下情况&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么对于这些情况来说，traceId应该需要在异步线程、跨服务、MQ等中传递，以便更好地排查一个请求的处理链路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而TLog对于以上可能出现的情况都做了大量的适配，保证traceId能够在异步线程、微服务间、MQ等中能够正确传递。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、异步线程&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1 一般异步线程&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓的一般异步线程就是指直接通过new Thread的方法来创建异步线程，然后来执行，这种方式TLog是天然支持携带traceId的，如图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.369901547116737&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFv33DKBMbusjiapaictA9DxUl1MVWfVXD5cTQFpibVrf0zXlxTzoCGZ0upA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1422&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行结果&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25469924812030076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFv7ibN1tpklPUg0kRlToib4yAtDR5DrpvUkiaIYY4sQDGiboFbzLvEtCQPFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2128&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这可以看出这种异步方式的确成功传递了traceId。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2 线程池&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于线程池来说，其实默认也是支持传递traceId，但是由于线程池中的线程是可以复用了，为了保证线程间的数据互不干扰，需要使用TLogInheritableTask将提交的任务进行包装。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ThreadPoolExecutor pool =&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, TimeUnit.SECONDS, &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;&amp;gt;(&lt;span&gt;10&lt;/span&gt;));&lt;br/&gt;pool.execute(&lt;span&gt;new&lt;/span&gt; TLogInheritableTask() {&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;runTask&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      logger.info(&lt;span&gt;&quot;异步执行&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述代码的写法会有点耦合，每次提交任务都需要创建一个TLogInheritableTask，比较麻烦，可以按如下写法进行简化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7491166077738516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvOjVrgm7qq9HIKD39c9oOpREZ2moUsDDGKmUl4mMtqiafhQ5sZWrr9PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1698&quot;/&gt;&lt;figcaption&gt;TLogThreadPoolExecutor&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自己写个TLogThreadPoolExecutor继承ThreadPoolExecutor，重写execute方法(submit最终也会调用execute方法执行)，然后将提交的任务统一包装成TLogInheritableTask，这样需要使用线程池的地方直接创建TLogThreadPoolExecutor就可以了，就不需要在提交任务的时候创建TLogInheritableTask了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ThreadPoolExecutor pool =&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; TLogThreadPoolExecutor(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, TimeUnit.SECONDS, &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;&amp;gt;(&lt;span&gt;10&lt;/span&gt;));&lt;br/&gt;pool.execute(() -&amp;gt; logger.info(&lt;span&gt;&quot;异步执行&quot;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、对RPC框架的支持&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了对异步线程的支持，TLog也支持常见的Dubbo，Dubbox，OpenFeign三大RPC框架，在SpringBoot项目中不需要任何配置，只需要引入依赖就可以实现traceId在服务之间的传递&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 对Dubbo和Dubbox的支持&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于Dubbo和Dubbox的支持是基于Dubbo的Filter扩展点来的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7354048964218456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvnKxZn3ye9ibkzNPPJaIOpZ1iaicG35JNXzjXsB61ttZD1f0tvknKpGolw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2124&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TLog通过SPI机制扩展Filter，在消费者发送请求前从TLogContext获取到traceId，然后将traceId和其它调用者数据设置请求数据中，服务提供者在处理请求的时候，也会经过Filter，从请求中获取到traceId等信息，然后设置到TLogContext中，从而实现了traceId在dubbo的消费者和提供者之间的传递。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 对OpenFeign的支持&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于OpenFeign的支持其实也是通过Feign提供的扩展点RequestInterceptor来实现的&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.578397212543554&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvZJTzeGov6ia9k7ypMjuTyRefvAaVCU5N56iaTzYAXFHq3jiaqINbFSXZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1722&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送请求之前，从TLogContext获取到traceId，将traceId等信息添加到请求头中，然后就可以通过Http请求将traceId等信息传递。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当被调用方接收到请求之后，会经过TLogWebInterceptor这个拦截器进行拦截，从请求头中获取到这些参数，设置到TLogContext中。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4793388429752066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvRLvdJRwcXGbpCIsaD9WqX86UUJEr69PLe9GU4pvYibVYR5uaCs3ia8zQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1936&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、对常用Http框架的支持&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了一些RPC框架，TLog也对一些Http框架进行了适配，比如&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;HttpClient&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Okhttp&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hutool-http&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RestTemplate&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;forest&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用这些Http框架也可以实现traceId的传递&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这些框架的适配跟Feign的适配都是大同小异，都是基于这些Http框架各自提供的扩展点进行适配的，将traceId等信息放到请求头中，这里都不举例了，具体的使用方法可以在官网查看。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4、对SpringCloud Gateway的支持&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的，TLog也适配了SpringCloud Gateway&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4128654970760234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFveoI33ibsD9KRgDn7icErWC2eQkZ7Na0bL3icuphkvG8k0EjO3Uak7ysPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1710&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原理也是一样的，就是适配了Gateway的GlobalFilter，从请求头中获取traceId等信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了适配了Gateway网关，TLog也适配了Soul网关。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5、对MQ的支持&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于MQ的支持跟异步线程差不多，需要将你发送的消息包装成TLogMqWrapBean对象&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7641509433962265&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/B279WL06QYznFpSu82ibrMLqPkiajibPmFvibwXoZOGHYDn9Wy4ZLvMocUywU3jjkzjsNg8tPUWZ7zJQsoxFfMLNog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1484&quot;/&gt;&lt;figcaption&gt;TLogMqWrapBean&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送的时候直接发送TLogMqWrapBean对象过去&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;TLogMqWrapBean&amp;lt;BizBean&amp;gt; tLogMqWrap = &lt;span&gt;new&lt;/span&gt; TLogMqWrapBean(bizBean);&lt;br/&gt;mqClient.send(tLogMqWrap);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TLogMqWrapBean会将traceId等信息携带，消费者接受到TLogMqWrapBean，然后通过TLogMqConsumerProcessor处理业务消息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;TLogMqConsumerProcessor.process(tLogMqWrapBean, &lt;span&gt;new&lt;/span&gt; TLogMqRunner&amp;lt;BizBean&amp;gt;() {&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;mqConsume&lt;/span&gt;&lt;span&gt;(BizBean o)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;     &lt;span&gt;//业务操作&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如此就实现了traceId通过MQ传递。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际使用中，根据不同的MQ的类型，可以将消息包装成TLogMqWrapBean对象的过程和处理消息的过程做统一的封装处理，以减少发送消息和处理消息对于TLog的耦合。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6、对任务框架的支持&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TLog主要是支持一下四种任务框架&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;JDK Timer&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Quartz框架&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;spring-scheduled&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;XXL-JOB框架&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，spring-scheduled和XXL-JOB在SpringBoot环境底下是无需任务配置的，只需要引入依赖即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Timer在使用的时候需要将任务包装成TLogTimerTask，Quartz需要把QuartzJobBean替换成TLogQuartzJobBean就可以了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小总结&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实从上面的各种适配可以看出，其实本质都是一样的，就是根据具体框架的扩展点，在发送请求之前从TLogContext获取到traceId，将traceId等调用者的信息在请求中携带，然后被调用方解析请求，取出traceId和调用者信息，设置到被调用方服务中的TLogContext中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果一旦需要遇到官方还未适配的框架或者组件，可以参照上述适配过程进行适配即可。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;最后&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的来说，TLog是一款非常优秀的日志追踪的框架，很适合中小公司使用。这里来总结一下TLog的特性&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过对日志打标签完成轻量级微服务日志追踪&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供三种接入方式：javaagent完全无侵入接入，字节码一行代码接入，基于配置文件的接入&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对业务代码无侵入式设计，使用简单，10分钟即可接入&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持常见的log4j，log4j2，logback三大日志框架，并提供自动检测，完成适配&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持dubbo，dubbox，feign三大RPC框架&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持Spring Cloud Gateway和Soul网关&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持HttpClient和Okhttp等http调用框架标签传递&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持多种任务框架，JDK的TimerTask，Quartz，XXL-JOB，spring-scheduled&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持日志标签的自定义模板的配置，提供多个系统级埋点标签的选择&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持异步线程的追踪，包括线程池，多级异步线程等场景&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;几乎无性能损耗，快速稳定，经过压测，损耗在0.01%&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于本文篇幅有限，无法全面对TLog进行讲解，如果想深入了解该框架，可自行阅读官网或者源码。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;h6&gt;&lt;span/&gt;官网：https://tlog.yomahub.com&lt;span/&gt;&lt;/h6&gt;&lt;h6&gt;&lt;span/&gt;github地址：https://github.com/dromara/TLog&lt;span/&gt;&lt;/h6&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>796bc56d2fd5452cb0fddbde04071469</guid>
<title>开源 | 携程机票跨端 Kotlin DSL 数据库框架 SQLlin</title>
<link>https://toutiao.io/k/155lmtg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;禹昂，携程机票移动端资深工程师，专注于 Kotlin 移动端跨平台领域，Kotlin 中文社区核心成员，图书《Kotlin 编程实践》译者。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;一、背景&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;2022年9月 Kotlin 1.7.20 发布之后，Kotlin Multiplatform Mobile（简称KMM）进入 Beta 阶段，Kotlin/Native new memory management 也变更为默认启用状态。无论从多端统一性还是性能上来看，Kotlin Multiplatform 都进入了下一个里程碑阶段。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;携程机票移动端团队在2021年介绍过 KMM 技术在机票产线的落地情况（参考链接 1），2022 年年中开源了团队首个 KMM 项目—— MMKV-Kotlin（参考链接 2），并撰文（参考链接 3）详述 MMKV-Kotlin 的研发过程和一些常见问题。目前继续在 Kotlin Multiplatform 开源领域发力，打造出了基于 DSL 及 Kotlin Symbol Processor（KSP）开发的 SQLite 框架—— SQLlin。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;12:1-12:43&quot; dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;二、需求调研&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;12:1-12:43&quot; dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-sourcepos=&quot;12:1-12:43&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;2.1 为什么要使用 SQLite 框架？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在移动端开发领域，在对 CRUD 操作有着复杂需求的数据存取场景上，SQLite 一直是首选方案。它同时内置于 Android 与 iOS 系统框架中，开发者无需增加额外的包大小。在数据的增删查改上它支持绝大部分 SQL 语法，功能足够强大。SQLite 本身是 C 语言库，虽然官方为它打造了多种语言及开发环境的 wrapper，但目前还不直接支持 Kotlin Multiplatform。因此，寻找或开发一款支持 Kotlin Multiplatform 的 SQLite 框架是我们的必选项。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;但同时我们也注意到，SQLite 框架本身的意义并不仅仅在于扩展其支持的技术栈。例如，在 Android 开发中，我们有 Android Framework
SQLite Java API，但是开发者们通常会在项目中使用 Jetpack Room 来操作数据库。在 iOS 开发中，开发者可以直接调用 SQLite C
API，但是大家也仍然倾向于选择类似 FMDB 这样的框架。原因主要在于以下三点：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）SQLite 的原始 API 颗粒度较细，直接在业务代码中使用较为繁琐且容易出错。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）SQL 语句以字符串的形式存在于代码中，不受编译器检查。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（3）SQLite 不支持直接存取对象，将基本数据类型与对象进行转换需要编写大量样板代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;我们期待我们未来使用的 SQLite 框架在支持 Kotlin Multiplatform 的同时可以解决掉以上三个痛点问题。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;29:1-29:26&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;2.2 开源方案调研&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在开发一个项目之前，我们通常会在开源社区寻找成熟的解决方案，如果可以完全契合我们的需求则没有必要重复造轮子。但如果我们调研的项目不完全符合我们的预期，则仍然可以学习其设计思想，为我们自己的设计与研发提供思路与参考。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;34:1-34:22&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;2.2.1 Jetpack Room&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;Jetpack Room（参考链接 4）是 Google 官方提供的 SQLite 框架，最初用 Java 打造，并非专为 Kotlin 而生。它仅能用于 Android 开发，暂不支持 Kotlin Multiplatform，因此不符合我们的期望，但我们可以参考它的 API 设计：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Entity&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@PrimaryKey&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; uid: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Int&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@ColumnInfo(name = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; firstName: String?,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@ColumnInfo(name = &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; lastName: String?&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Dao&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;UserDao&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Query(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;SELECT * FROM user&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: List&amp;lt;User&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Query(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;loadAllByIds&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(userIds: &lt;span class=&quot;code-snippet__type&quot;&gt;IntArray&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: List&amp;lt;User&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Query(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;SELECT * FROM user WHERE first_name LIKE :first AND &quot;&lt;/span&gt; +&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;last_name LIKE :last LIMIT 1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(first: &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt;, last: &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: User&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Insert&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;insertAll&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;vararg&lt;/span&gt; users: &lt;span class=&quot;code-snippet__type&quot;&gt;User&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Delete&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(user: &lt;span class=&quot;code-snippet__type&quot;&gt;User&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Database(entities = [User::class], version = 1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AppDatabase&lt;/span&gt; : &lt;span class=&quot;code-snippet__type&quot;&gt;RoomDatabase&lt;/span&gt;&lt;/span&gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: UserDao&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;它的 API 采用 DAO（Data Access objects）思想，它可以自动完成对象到 SQL 语句的序列化与查询结果 Cursor 到对象的反序列化。开发者只需要定义 DAO 的 interface，并用它提供的注解描述需要操作的对象即可。Room 采用 APT/KAPT（目前正在向 KSP 迁移）对注解进行处理并生成代码，可以避免用户手动编写大量样板代码。用户在使用 Room 时仅需要通过 DAO set/get 对象即可。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;不过它也有一些问题。例如：查询操作与按条件的更新和删除操作，用户仍然需要编写 SQL 语句，这些 SQL 语句虽然 Android Studio 提供了高亮，但是仍然是以字符串的形式存在，不受编译器静态类型检查。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;80:1-80:17&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;2.2.2 Exposed&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;Kotlin在正式发布时有一个主力卖点就是可以用来构建开发者自己的DSL。Exposed（参考链接 5）是当时官方宣传DSL的范例项目之一。Exposed主要场景是 JVM 后端，它使用 JDBC 可以连接多种数据库，包括：MySQL、Oracle、MariaDB、SQLite 等等。从场景上看 Exposed 也不符合我们的预期，但是我们仍然可以看一下它的 API 设计：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;object&lt;/span&gt; Users : Table() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; id = varchar(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; name = varchar(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;, length = &lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; cityId = (integer(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;city_id&quot;&lt;/span&gt;) references Cities.id).nullable() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; primaryKey = PrimaryKey(id, name = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;PK_User_ID&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Database.connect(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;jdbc:h2:mem:test&quot;&lt;/span&gt;, driver = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;org.h2.Driver&quot;&lt;/span&gt;, user = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;root&quot;&lt;/span&gt;, password = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    transaction {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addLogger(StdOutSqlLogger)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Users.insert {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            it[id] = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;andrey&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            it[name] = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Andrey&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            it[Users.cityId] = saintPetersburgId&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Users.update({ Users.id eq &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;alex&quot;&lt;/span&gt;}) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            it[name] = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Alexey&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Users.deleteWhere{ Users.name like &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%thing&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (city &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; Cities.selectAll()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&lt;span class=&quot;code-snippet__subst&quot;&gt;${city[Cities.id]}&lt;/span&gt;: &lt;span class=&quot;code-snippet__subst&quot;&gt;${city[Cities.name]}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;用户需要自己定义一个表示数据库表的对象，继承自 Table，然后手动编写代码，使用属性表示表中的列。在进行 CURD 的 SQL 构建时通过调用不同的 Table 成员函数，然后使用类似键值对 get/set 的方式完成 SQL 子句（clause）的构建。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;以当年的角度来看，Exposed 的 API 算是相当惊艳。但以今天的眼光来看，我认为 Exposed的 API 有如下不足：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）数据库不支持序列化与反序列化为对象，实际上的编程体验仍然像在操作一个 Map。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）用户需要手动定义 Table，需要编写大量样板代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（3）API 设计与 SQL 语句本身差异较大，部分 API 接收多个 lambda 表达式作为参数，看起来括号嵌套层级多，不够优雅。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;但总的的来说 Exposed 的设计思路的方向非常棒，使用 Kotlin 语法构建自己的 DSL API，对用户来说使用方便，且只要充分利用其潜力，API 也能设计的非常优雅。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;124:1-124:20&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;2.2.3 SQLDelight&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;SQLDelight（参考链接 6）由 Android 界的开源先锋 Square 开发，是我们目前调研过的最先进的 Kotlin 数据库框架。它支持 Kotlin Multiplatform，除了 Android、iOS 这样的移动端平台，还通过 Kotlin/Native 直接支持 macOS、Linux 以及 Windows 等桌面端平台，除此之外也有对 JavaScrip 以及 JVM 开发环境的支持。在所有平台上 SQLDelight 都支持 SQLite，但在 JVM 平台上还额外支持使用 JDBC 连接各种主流的服务端数据库。因此 SQLDelight 是一个能满足多种开发环境，多种技术栈的数据库框架。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在 API 的设计上，SQLDelight 更是一骑绝尘，它使用 Kotlin 官方尚未正式发布的技术 Kotlin Compiler Plugin（后简称 KCP）来构建 API。用户只需要在一个特殊的 .sq 文件中编写自己的
SQL 语句，并给 SQL 语句起一个名字，KCP 就可以在工程编译构建时对 SQL 语句进行语法检查及静态类型校验，并生成一个函数。用户直接在 Kotlin 代码中调用该函数即可完成 CRUD
操作。SQLDelight 示例代码如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.53984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1eib9bdZTNHmeg3eqOOotGhhh77ibiaw4seyjyvzpIemUkib45X09zgWzEUUS7Ma36kSB7vUjiarNibgWeg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;看上去 SQLDelight 完美适合我们的场景。但实际上我们对 SQLDelight 的调研非常早，那时它会在 iOS 上带来过大的 size 增长。携程 app 是一个多功能聚合类 app，而机票又只是其中一个团队，
因此在 size 的增长上会较为敏感。在近期我的调研中，在 x86 架构下 SQLDelight 带来的包 size 增长为 200 kb，比之前有所改善。如果你准备从 0 打造一个 KMM app
或者你是某项目的基础架构团队的成员，我非常建议你尝试 SQLDelight。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;此外在 API 上，虽然使用 KCP 帮助开发者生成大量代码非常惊艳，但是 SQLDelight 配置较为繁琐，使用方式的学习成本也较高，便利性上做不到开箱即用。因此许多开发者对其也持有一些不同的观点。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-sourcepos=&quot;142:1-142:19&quot; dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-sourcepos=&quot;142:1-142:19&quot; dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;strong&gt;2.3 需求确定&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;我们调研过的库与框架并不只有以上三款，在经过充分的对比后，我们决定仍然自己研发一款符合我们需求的 SQLite 框架，在取长补短与权衡利弊之后，我们认为它应该具有以下特性：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）支持 KMM（即至少支持 Android、iOS 两个平台）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）SQL 语句必须可以在某种程度上受编译器检查。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（3）支持直接将对象序列化为 SQL 语句（例如 UPDATE 语句中的 SET 子句），且支持将查询结果反序列化为 Kotlin 对象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（4）Size 不能过大。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1 data-sourcepos=&quot;151:1-151:28&quot; dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;strong&gt;三、 基本设计与实现&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-sourcepos=&quot;153:1-153:36&quot; dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1 架构设计与 module 划分&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在一个项目开发之前，我们首先需要做的是将项目的基本功能理清，然后进行适当的 module 划分：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1eib9bdZTNHmeg3eqOOotGhhVKYh15fIwibl2RPFT86SDWaUMXzzq9j0Sty0ekiaWtaGhhCv3tdqu5cA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;无论是 iOS 还是 Android，最底层调用的都是 SQLite C 库。再往上是应用程序层，iOS 应用层可以直接调用 SQLite C API，但是在 Android 上，由于应用层的代码运行在 ART 虚拟机上，因此我们需要通过 Android Framework 提供的 Java API 对 SQLite 进行操作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再往上就到了 KMM common 层，我们希望 DSL API 的实现应该是完全平台无关的， 因此我们需要 sqllin-dsl 的下层提供了一个叫做 sqllin-driver 的模块，它在不同的平台上提供不同的具体实现，但在 common source set 中提供了一层平台无关的 lower-level SQLite API 供 sqllin-dsl 层使用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.2 Driver 层的技术选型与实现&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;sqllin-driver 在 common source set 中提供了一套通用的 API，但其在不同平台的 source set 中需要采取不同的实现方式。在上面的架构中设计中，在 iOS source set 中可以直接调用 SQLite C API，而在 Android source set 中我们可以使用 Android Framework SQLite Java API。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用 Android Framework SQLite Java API 有个问题，在 Android P 以下的版本上有众多的 SQLite 参数配置都不支持，比如：日志模式、同步模式、lookaside、内存数据库等等。如果要在低版本的 Android 系统上支持这些参数配置，我们需要自行编写 JNI 代码，实现一套 JVM 层的 SQLite API。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是 Google 在 Android N 以上的版本中禁止在 NDK 开发中直接访问系统内置的 SQLite，如果坚持这么做，开发者必须自己重新打一份 SQLite 到自己的 apk 中，这不仅会增加一部分无谓的包大小，还会让这个项目变得过于复杂。所以最终我们仍然决定基于 Android Framework 来实现，不支持对低版本 Android 系统的 SQLite 多种个性化配置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 iOS 端的实现上我们也碰到了一些问题，虽然 Kotlin/Native 与 C 语言的互操作很完善，但是也非常繁琐，比如我们在 Kotlin/Native 上做一次 open database 的操作：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;openDatabase&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; = memScoped {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; dbPtr = alloc&amp;lt;CPointerVar&amp;lt;sqlite3&amp;gt;&amp;gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; openResult = sqlite3_open_v2(path, dbPtr.ptr, sqliteFlags, &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (openResult != SQLITE_OK) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; IllegalStateExcepetion(sqlite3_errmsg(dbPtr.value)?.toKString() ?: “”)     }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;由于 C 语言独有的运行时内存的特性以及其自身的概念，我们需要使用一些繁琐的 API 来完成对 C 的调用，比如上面示例中的：memScoped、alloc、ptr、toKString 等等。这导致这一块的开发工作量大幅上升。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;但好在我们在开源社区找到了解决方案—— SQLiter。SQLiter 是 TouchLab 的开源项目，它的作用在于使用 Kotlin 实现多个
Native 平台统一的 SQLite lower-level API，它的 API 设计与 Android Framework SQLite Java API 有些相似，但又融合了许多 Kotlin 的语法特性。它不仅仅支持
iOS，还支持 macOS、tvOS、watchOS、Linux、Windows 等多个操作系统，抹平了包括线程锁在内的多端差异。它同时也是 SQLDelight 在 Kotlin/Native
上的底层引擎。使用 SQLiter 可以把 Kotlin-C 之间的互操作转化为 Kotlin 语言内的互相调用，大大节约开发成本。并且我们也能通过 SQLiter 的多平台支持能力，扩展到除 iOS
外的多个 Native 平台。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;只要两个平台都可以完成对 SQLite 的操作，开发 common 层的通用 API 只需要声明 expect API，然后在各平台 source set 的 actual 实现中直接调用这些平台特有的实现即可，比如说还是以
open 数据库为例，我们在 common source set 中声明：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;openDatabase&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(config: &lt;span class=&quot;code-snippet__type&quot;&gt;DatabaseConfiguration&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: DatabaseConnection&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 Android source set 中可以这样实现：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; android.database.sqlite.SQLiteDatabase&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;openDatabase&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(config: &lt;span class=&quot;code-snippet__type&quot;&gt;DatabaseConfiguration&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: DatabaseConnection {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SQLiteDatabase.openDatabase()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 Native source set 中：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; co.touchlab.sqliter.createDatabaseManager&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;openDatabase&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(config: &lt;span class=&quot;code-snippet__type&quot;&gt;DatabaseConfiguration&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: DatabaseConnection {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    createDatabaseManager(configNative).createMultiThreadedConnection()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;上面的只是示例，在 sqllin-driver 的真实实现中会更为复杂一些。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;至此， sqllin-driver 的实现已经没有太多的困难，剩余的开发工作只需要通过封装来抹平两边的差异，并提供合适的 common API 即可。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-sourcepos=&quot;224:1-224:26&quot; dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3 DSL 设计与实现&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;226:1-226:22&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;3.3.1 基本设计&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在 driver 层的实现没有太大障碍后，我们就可以着手进行 DSL 层的设计和开发。SQLDelight 的完全生成式 DSL 实现起来过于复杂，使用 Kotlin
的语法潜力构建我们自己的 DSL 相对简单且易于使用。在上面的调研中我们看到 Exposed 的 DSL API 设计依赖 KV 操作语法，并且不少子句的构建有太多的
lambda 表达式应用，以及过多的括号嵌套，整体使用下来写出来的代码与 SQL 语句相去甚远。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在我的构思中，我希望 DSL 的设计可以尽量还原 SQL 语法，并且能最大程度的减少用户编写的样板代码。所以我初步构思了一套 DSL 语法的样貌，这样便于后续的实现还原：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; statement: SelectStatement&amp;lt;Person&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    database {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; table = Table&amp;lt;Person&amp;gt;(“person”)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        table INSERT listOf(tom, jerry, nick)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        table DELETE WHERE (name == “Jerry”)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        table UPDATE SET (age = &lt;span class=&quot;code-snippet__number&quot;&gt;27&lt;/span&gt;) WHERE (name == “Nick”)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        statement = table SELECT WHERE (name == “Tom”) ORDER_BY (age to DESC)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; result: List&amp;lt;Person&amp;gt; = statement.getResult()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;注意，上面的代码是伪代码，仅仅是初步构思。但我们在后续的实现中会尽量还原它的设计。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;总的来说，用户可以创建 Table 实例用来表示数据库表，在所有的 SQL 语句中，Table 实例都是主语，Table 同时约束序列化与反序列化对象的类型。Table 拥有
4 个谓语，分别代表增删改查等操作。谓语通过中缀函数实现，不同的表示操作的中缀函数接收不同类型的参数，例如我们看到 INSERT 直接接收一个对象的 List
即可完成插入操作。而 DELETE 和 SELECT 则接收 WHERE 子句来完成整条 SQL 语句的构建。此外，UPDATE 和 SELECT 语句可以连续连接多个子句，
这些多子句的连接也是通过中缀函数来实现的。最后，SELECT 语句返回了一个 SelectStatement 类型的对象，在整个 database {...} 作用域完结之后可以用它来提取查询结果。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;以这样的方式构建出的 API 可以最大程度的还原 SQL 的语法与语序。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;256:1-256:26&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;3.3.2 DSL 类型关系&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在确定了基本的语法规则后，我们需要定义一些基本的类型关系，这无论是在面向对象编程还是函数式编程中都非常重要。这些类型关系可以在代码编写阶段约束一些语法准则，避免将 SQL 的语法错误留到运行时暴露。例如，INSERT 语句不能连接子句、SELECT 语句中 ORDER BY 子句不能位于 WHERE 子句之前等等。我们以一条 SELECT语句为例来为它的每个部分定义一些类型：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.39296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1eib9bdZTNHmeg3eqOOotGhhfIal5EOk9uaJFarjCRGzBOKarcr8swa4Dan831diaS9VDo8uF0yIqpA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Statement 、Table、Operation、Clause 我们都已经在前文讨论过了。这里要解释一下的是 ClauseElement 和 ClauseCondition。ClauseElement 表示数据库的列名，而 ClauseCondition 则表示一个条件，条件通常会用在 WHERE 和 HAVING 子句中。基于以上的类型定义，我们可以得到一些基本的类型间的关系：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;+ Operation + Clause -&amp;gt; Statement&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;+ Clause -&amp;gt; Statement&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;ClauseElement&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;+ String/Number -&amp;gt; ClauseCondition&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;ClauseCondition&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;+ ClauseCondition -&amp;gt; ClauseCondition&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;当然，以上的类型在真实的代码中都是 interface 或 abstract class，不同的 SQL 语句的类型关系有所不同，这些约束的真正实现在其子类型当中。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;275:1-275:68&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;3.3.3 使用 Kotlin Symbol Processor 实现表与列元素生成&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在 3.3.1 小节的基本设计中，Table 实例是通过构造函数创建的，每次创建时用户都需要手动传入数据库的真实表名作为其参数，这并不方便易用。在 Exposed
中也有类似的 Table 设计，用户定义自己的 class 并继承自 Table 抽象类，还要在其中定义一些表达列名的属性。这种设计的最大问题在于用户总是要手动编写大量样板代码。为了使这一步操作更方便，我希望 SQLlin 可以根据用户期待序列化与反序列化的类型自动生成 Table 单例，以及其内部的列名属性。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;Kotlin Symbol Processor（后简称 KSP）是 Google 开发的元编程工具，基于前文所说的 KCP。它通常被用于注解处理及代码生成，它的功能虽然不如 KCP
强大，但拥有较为完整的教程与文档且更加易用。在 KSP 诞生之前，开发者通常使用 KAPT 来进行注解处理和代码生成，但其二者处理 Kotlin 的阶段不同，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.434375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1eib9bdZTNHmeg3eqOOotGhhjibPVr0GibJ3DFYTdRVvpSJ4vZibibcAdnIOmy71CAfNrSjCxRG5Hc7UxA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;Kotlin 的编译大概分为两个阶段，第一个阶段由编译器前端进行，它将 Kotlin 代码编译为中间表示码 IR，而编译器后端则将 IR 编译为各平台的产物，由此实现了 Kotlin
的跨平台。KAPT 技术基于 Java APT 技术，它处理的是 JVM Bytecode，因此它仅仅能用于 Kotlin/JVM，无法实现跨平台需求。并且将 Java 与 Kotlin
间的一些语法概念互相转化相当耗时，这导致了 KAPT 的性能不够好，导致了代码编译构建的耗时增加。而 KSP 处理的则是中间表示码 IR，相当于在 Kotlin
编译到各平台产物之前对其进行了处理，因此可以用于跨平台场景，并且 IR 是 Kotlin 代码的直接编译产物，无须概念转换，这使得 KSP 在一些较好的工况下性能可以比
KAPT 提升两倍之多。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;那我们如何实现注解处理？我们可以定义一个注解类，用户将注解添加到希望表示表的 data class 即可，比如：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@DBRow(&lt;span class=&quot;code-snippet__meta-string&quot;&gt;&quot;person&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; age: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Int&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; name: String,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;字符串&quot;person&quot;表示数据库中真实的表名，它作为参数传递给注解，这样 KSP 就能在代码处理阶段拿到它。在 KSP 处理后，可以生成以下代码：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;object&lt;/span&gt; PersonTable : Table&amp;lt;Person&amp;gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;person&quot;&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;&amp;lt;R&amp;gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(block: &lt;span class=&quot;code-snippet__type&quot;&gt;PersonTable&lt;/span&gt;.(&lt;span class=&quot;code-snippet__type&quot;&gt;table&lt;/span&gt;: &lt;span class=&quot;code-snippet__type&quot;&gt;PersonTable&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; -&amp;gt; R): R = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.block(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; name: ClauseString &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;() {…}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; age: ClauseNumber &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;() {…}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; SetClause&amp;lt;Person&amp;gt;.name: String &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(value) {…}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; SetClause&amp;lt;Person&amp;gt;.age: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(value) {…}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;我们可以发现，生成的 Table 中含有两个 name 以及两个 age。使用 val 声明的属性用于在条件语句中表示列名，而使用 var 声明的则是 SetClause 的扩展属性，用于在 SET 子句中设置一个新值。之所以将二者分开主要是因为如果想要在 SET 子句中使用赋值运算符 = 进行 set，那么接收的参数则必须与该属性类型相同。举例来说如果将属性声明为 ClauseString 类型，那么它的 setter 就无法接收 String 类型的参数。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;有了 KSP 的助力，用户再也无须手动编写大量的 Table 代码，为使用带来了极大的便利。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;321:1-321:49&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;3.3.4 如何实现查询结果的反序列化&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在纯 Android 库的开发中，我们通常会使用反射将某种格式的数据中的某个字段的值映射到与它名称相同的 class 中的某个属性，从而生成出该 class
的对象，这就是反序列化。反射是 JVM 的机制，无法跨平台。因此我们如果要在 Kotlin Multiplatform 的环境中进行反序列化，就必须另寻他路。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在 Kotlin Multiplatform 的开发中，最常见的 JSON 和 ProtoBuf 的序列化与反序列化库是官方的 kotlinx.serialization。它反序列化的原理是它通过
KCP 处理注解，并生成了每个被注解类的 KSerializer，KSerializer 是一个辅助类，它包含被注解类的属性名，属性类型等信息，kotlinx.serialization
正是通过它实现了非反射的序列化与反序列化。KCP 不仅使用门槛高，而且官方尚未正式发布（这意味着它没有文档且后续 API 可能会发生大的破坏性变更），因此使用
KCP 仿造编写一个类似的功能也同样很难。但我在调研 kotlinx.serialization 的原理时发现它开放了自定义数据格式的 API，我们可以直接复用 KSerializer。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在 sqllin-driver 中，查询语句将会返回一个 CommonCursor，这与 Android SQLite Java API 类似。它可以进行行迭代、获取指定列名的列号，以及 get 一些基本类型和 String
等数据，它的定义如下：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;CommonCursor&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(columnIndex: &lt;span class=&quot;code-snippet__type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(columnIndex: &lt;span class=&quot;code-snippet__type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: String?&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getColumnIndex&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(columnName: &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;forEachRow&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(block: (&lt;span class=&quot;code-snippet__type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Unit&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;而我们的目的则正是将 CommonCursor 反序列化为自己的 data class。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;自定义反序列化器非常简单，只需要继承自 kotlinx.serialization 中提供的 AbstractDecoder 即可，核心实现如下：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@OptIn(ExperimentalSerializationApi::class)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;QueryDecoder&lt;/span&gt;&lt;/span&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; cursor: CommonCursor&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) : AbstractDecoder() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; elementIndex = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; elementName = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; serializersModule: SerializersModule = EmptySerializersModule()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;tailrec&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;decodeElementIndex&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(descriptor: &lt;span class=&quot;code-snippet__type&quot;&gt;SerialDescriptor&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Int&lt;/span&gt; =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (elementIndex == descriptor.elementsCount)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            CompositeDecoder.DECODE_DONE&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            elementName = descriptor.getElementName(elementIndex)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; resultIndex = elementIndex++&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (cursorColumnIndex &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                resultIndex&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                decodeElementIndex(descriptor)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;beginStructure&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(descriptor: &lt;span class=&quot;code-snippet__type&quot;&gt;SerialDescriptor&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: CompositeDecoder = QueryDecoder(cursor)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; cursorColumnIndex&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;() = cursor.getColumnIndex(elementName)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;deserialize&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(block: (&lt;span class=&quot;code-snippet__type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; -&amp;gt; T): T = cursorColumnIndex.let {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (it &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) block(it) &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; SerializationException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;The Cursor doesn&#x27;t have this column&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;decodeBoolean&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Boolean&lt;/span&gt; = deserialize { cursor.getInt(it) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;decodeInt&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Int&lt;/span&gt; = deserialize { cursor.getInt(it) }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;decodeString&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: String = deserialize { cursor.getString(it) ?: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;decodeDouble&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;code-snippet__built_in&quot;&gt;Double&lt;/span&gt; = deserialize { cursor.getDouble(it) }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;我们自定义的 Decoder 接收一个 CommonCursor 作为参数。decodeElementIndex 函数驱动着整个反序列化流程。我们通过elementIndex 在该类的众多属性中查找到当前对应的属性名，再根据这个属性名查询到名称相同的列名的列号，如果列号大于等于 0
则表示列名合法，直接返回 elementIndex 即可，否则进行下一轮迭代。在针对各类型的基本数据的反序列化中，我们直接调用CommonCursor 对应的 get 函数取值并返回就可以了。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;关于自定义 kotlinx.serialization，我曾经写过一篇文章详细讨论，大家可以参考（参考链接 7），或者查看官方文档（参考链接 8）。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-sourcepos=&quot;395:1-395:22&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;3.3.5 最终效果&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;以上基本讨论完了 sqllin-dsl 设计过程中遇到的大部分难点。在真实的开发过程我们还解决了更多的问题，其中很大一部分在于类型设计。例如，某语句只能连接某子句，某子句后面不能连接某子句等等。利用 Kotlin 的语法规则可以在很大程度上保证在编译期间暴露出我们编写的
SQL 错误，并在绝大部分情况下阻止错误的 SQL 语句代码通过编译。但这不是 100% 的，使用者仍然可能使用 SQLlin 编写出错误的 SQL
语句，因此充分理解 SQL 知识对那些需要使用数据库的开发者来说非常重要。在开发完成之后，使用 sqllin-dsl 编写的真实代码如下所示：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; statement: SelectStatement&amp;lt;Person&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    database {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        PersonTable { table -&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            table INSERT listOf(tom, jerry, nick)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            table DELETE WHERE (name EQ &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Jerry&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            table UPDATE SET {age = &lt;span class=&quot;code-snippet__number&quot;&gt;27&lt;/span&gt;} WHERE (name NEQ &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Nick&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            statement = table SELECT WHERE (name EQ &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;) ORDER_BY (age to DESC)   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;val&lt;/span&gt; result: List&amp;lt;Person&amp;gt; = statement.getResult()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;我们大体还原了最初的设计构想，主要改变的地方有两点，首先是 Table 现在由 KSP 直接生成，不再依赖用户手动调用构造函数。其次是我们最终没能使用运算符重载来实现 ClauseElement 的运算符，例如 &amp;gt; 和 &amp;lt;，原因除了重载函数的返回值类型问题，也包括如果要重载&amp;gt; 和 &amp;lt;，我们需要实现 Comparable 接口，并覆盖 compareTo 函数。但在用户调用 compareTo 时，它的内部无法知道用户到底调用的是&amp;gt; 还是 &amp;lt;，因此无法准确构建正确的 SQL 语句。最终我们舍弃了运算符重载，转而采用中缀函数实现。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在完成最终的设计后，SQLlin 的架构设计图调整为如下所示：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.49453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kEeDgfCVf1eib9bdZTNHmeg3eqOOotGhhziaA3Q5D1KLn30k9rE7OEmepK4icMbVAHLAVibuNyiamMicauS7UtW3iaFmQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;我们加入了 sqllin-processor 模块，它主要包含 KSP 相关的代码，负责注解处理与代码生成。在与 Native 平台交互这边，架构图中添加了
SQLiter 的部分。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;得益于 SQLiter 对多个 Native 平台的支持，SQLlin 支持的平台数量也远超 Android、iOS 两个移动端平台：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-sourcepos=&quot;430:1-436:0&quot; dir=&quot;auto&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Android&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;iOS (x64, arm32, arm64, simulatorArm64)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;macOS (x64, arm64)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;watchOS (x86, x64, arm32, arm64, simulatorArm64)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;tvOS (x64, arm64, simulatorArm64)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Linux (x64)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-sourcepos=&quot;437:1-437:20&quot; dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-sourcepos=&quot;437:1-437:20&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;四、未来计划&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;SQLlin 目前已经在 Github 开源，大家可以前往它的主页（参考链接 9）查看它更多的信息。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;SQLlin 拥有全套的中英文文档以及 Sample
项目供大家学习如何使用。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;但 SQLlin 的开发仍未结束，它目前仍然有一些不足，例如它还有如下功能不支持：&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;（1）不支持子查询，包括不支持条件语句中的子查询和 JOIN 子查询。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;（2）不支持表创建、表删除、增加列、删除列等会导致数据库结构发生变化的 SQL 语句构建。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;只有将以上两个功能开发完成，SQLlin 才基本拥有应对各种场景的能力。这两项功能的实现会是当下 SQLlin 后续迭代的主要工作。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;此外，SQLiter 除了以上提到的 SQLlin 支持的平台外，还支持 Windows。由于目前我们是本地编译发布，而 Kotlin 当前不支持类
Unix 系统和 Windows 系统的交差编译，因此 SQLlin 暂时还不支持 Windows 平台。等 SQLlin 的 Github CI/CD 配置完成后，Windows
也将加入受支持行列。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;在最近的 Github issue 中我们发现，有一些开发者希望我们能考虑 JVM 后端场景，可以像 SQLDelight 一样在 JVM
上连接后端数据库，这是个不错的建议，我们可以将其列为长期规划，不过目前 SQLlin 还是需要集中精力把客户端上的事情做好。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;Kotlin Multiplatform 这项技术最近进展很快，特别是 compose-jb 在 iOS 上取得进步令人振奋。机票团队除 UI
层以外已经基本完成了基础架构建设，后续会继续调研 Kotlin Multiplatform 的 UI 跨端方案，并同步推进更多的业务代码向
KMM 的迁移。期待后续我们团队可以为社区带来更多的&lt;/span&gt;&lt;span&gt;贡献&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section dir=&quot;auto&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h2 data-sourcepos=&quot;460:1-460:20&quot; dir=&quot;auto&quot;&gt;&lt;strong&gt;&lt;span&gt;五. 参考链接&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;【推荐阅读】&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDI3MjA5MQ==&amp;amp;mid=2697273477&amp;amp;idx=1&amp;amp;sn=40c84b79f472624229cf06655e500cf5&amp;amp;chksm=8376dfb1b40156a758a23d6f64f12b00323bb24eb95c19a208a3cd2b16ce0d2b55166a6dc35f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;干货 | 携程分布式图数据库Nebula Graph运维治理实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9242c9ab8eff831112d72484b906996c</guid>
<title>聊聊如何利用管道模式来进行业务编排（下篇）</title>
<link>https://toutiao.io/k/6b3o1cw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aWEv8ibcecz10ds5EwtQffXdS61lhVphsGUGkvIJtefyDSaq46Wsos6X5iawp3q71c6R7d3ZqLGENlick9gMW1Tjw/640?wx_fmt=png&quot; data-w=&quot;8&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;span data-mid=&quot;&quot;&gt;蓝字&lt;/span&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mqRhkrSrAwAnvRp0Aj3UooSGvlLtPKSmozUu6CFziaMNhH73qjwkibD9cfnrHBD4YSTIenPo44vEeickkE43BiciaMw/640?wx_fmt=png&quot; data-w=&quot;8&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.7586206896551724&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uiaVvVpsycicxAAHC0fNNibJgMgIJGia5Ria3qHZEBx3MF7yYSR7NIaicL5hTBnFhiaYvYfiaxtpvwL9MTpiaOcWoIib2PFg/640?wx_fmt=png&quot; data-w=&quot;58&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-category=&quot;模板&quot; data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上篇文章我们介绍&lt;/span&gt;利用管道模式来进行业务编排&lt;span&gt;的2种实现方式。本文又来介绍其他实现方式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-category=&quot;模板&quot; data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;实现方式&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;方式一：利用springboot自动装配&lt;/h3&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.8709677419354839&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rL6zuS4YpOQ3Fiaon76KwsBNf1BrzAiaOeHHOo1dGWbrkYSS4vEW7d0IhOeDsWfOvCAcYib9xYuwW9JQa1ibaUMlVg/640?wx_fmt=png&quot; data-w=&quot;62&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;新建管道实体&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@NoArgsConstructor&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PipelineDefinition {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final &lt;span&gt;String&lt;/span&gt; PREFIX = &lt;span&gt;&quot;lybgeek_pipeline_&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; comsumePipelineName;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; List&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt; pipelineClassNames;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@NoArgsConstructor&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@ConfigurationProperties&lt;/span&gt;(prefix = PipelineDefinitionProperties.PREFIX)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PipelineDefinitionProperties&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String PREFIX = &lt;span&gt;&quot;lybgeek.pipeline&quot;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; List&amp;lt;PipelineDefinition&amp;gt; chain;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span/&gt;&lt;span&gt;编写自动装配类&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(PipelineDefinitionProperties.class)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PipelineAutoConfiguration&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryAware&lt;/span&gt;,&lt;span&gt;InitializingBean&lt;/span&gt;, &lt;span&gt;SmartInitializingSingleton&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; PipelineDefinitionProperties pipelineDefinitionProperties;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; DefaultListableBeanFactory defaultListableBeanFactory;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setBeanFactory&lt;/span&gt;&lt;span&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        defaultListableBeanFactory = (DefaultListableBeanFactory)beanFactory;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;registerPipeline&lt;/span&gt;&lt;span&gt;(DefaultListableBeanFactory defaultListableBeanFactory, PipelineDefinition pipelineDefinition)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        LinkedBlockingDeque linkedBlockingDeque = buildPipelineQuque(pipelineDefinition);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        GenericBeanDefinition beanDefinition = (GenericBeanDefinition) BeanDefinitionBuilder.genericBeanDefinition(ChannelPipeline.class).getBeanDefinition();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        beanDefinition.getPropertyValues().addPropertyValue(&lt;span&gt;&quot;channelHandlers&quot;&lt;/span&gt;,linkedBlockingDeque);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        defaultListableBeanFactory.registerBeanDefinition(PipelineDefinition.PREFIX + pipelineDefinition.getComsumePipelineName() ,beanDefinition);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; LinkedBlockingDeque &lt;span&gt;buildPipelineQuque&lt;/span&gt;&lt;span&gt;(PipelineDefinition pipelineDefinition)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        List&amp;lt;String&amp;gt; pipelineClassNames = pipelineDefinition.getPipelineClassNames();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(CollectionUtil.isEmpty(pipelineClassNames)){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;           &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; PipelineException(&lt;span&gt;&quot;pipelineClassNames must config&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        LinkedBlockingDeque linkedBlockingDeque = &lt;span&gt;new&lt;/span&gt; LinkedBlockingDeque();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;for&lt;/span&gt; (String pipelineClassName : pipelineClassNames) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            Class&amp;lt;?&amp;gt; pipelineClassClass = Class.forName(pipelineClassName);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt;(!AbstactChannelHandler.class.isAssignableFrom(pipelineClassClass)){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; PipelineException(&lt;span&gt;&quot;pipelineClassNames must be 【com.github.lybgeek.pipeline.handler.AbstactChannelHandler】 subclass&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            Object pipeline = pipelineClassClass.getDeclaredConstructor().newInstance();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            linkedBlockingDeque.addLast(pipeline);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; linkedBlockingDeque;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(CollectionUtil.isNotEmpty(pipelineDefinitionProperties.getChain())){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;for&lt;/span&gt; (PipelineDefinition pipelineDefinition : pipelineDefinitionProperties.getChain()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                registerPipeline(defaultListableBeanFactory, pipelineDefinition);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterSingletonsInstantiated&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        Map&amp;lt;String, ChannelPipeline&amp;gt; pipelineBeanMap = defaultListableBeanFactory.getBeansOfType(ChannelPipeline.class);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        pipelineBeanMap.forEach((key,bean)-&amp;gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            bean.setHandlerContext(ChannelHandlerContext.getCurrentContext());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        });&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;编写spring.factories&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=\&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;com&lt;/span&gt;.github.lybgeek.pipeline.spring.autoconfigure.PipelineAutoConfiguration\&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.5454545454545454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gdxAJ6zQsUYfldc9KVnrcQSOpyXRZEVepgnN1Ykwcia3wuOHibVmnRkSUNjygD8GZMLUCuCgdjn0EF6VibajENJrQ/640?wx_fmt=png&quot; data-w=&quot;22&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;业务项目如何使用该方式实现业务编排&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.972972972972973&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Xuz7cCrSxHUr4F6rIJJmUyiaCTDRkk8vhJocsm8Boar8kRkaicGNLVaY5y2RWVy1h5sV9tfDvvjOYwTmHMnKsxQw/640?wx_fmt=png&quot; data-w=&quot;74&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;创建管道执行器&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserCheckChannelHandler&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AbstactChannelHandler&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;handler&lt;/span&gt;&lt;span&gt;(ChannelHandlerContext chx)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        ChannelHandlerRequest channelHandlerRequest = chx.getChannelHandlerRequest();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;yml------------------------------------步骤一：用户数据校验【&quot;&lt;/span&gt;+channelHandlerRequest.getRequestId()+&lt;span&gt;&quot;】&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        Object params = channelHandlerRequest.getParams();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(params &lt;span&gt;instanceof&lt;/span&gt; User){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            User user = (User)params;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt;(StringUtils.isBlank(user.getFullname())){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                log.error(&lt;span&gt;&quot;用户名不能为空&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserFillUsernameAndEmailChannelHandler &lt;span&gt;extends&lt;/span&gt; AbstactChannelHandler {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; handler(ChannelHandlerContext chx) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        ChannelHandlerRequest channelHandlerRequest = chx.getChannelHandlerRequest();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;yml------------------------------------步骤二：用户名以及邮箱填充【将汉语转成拼音填充】【&quot;&lt;/span&gt;+channelHandlerRequest.getRequestId()+&lt;span&gt;&quot;】&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;Object&lt;/span&gt; params = channelHandlerRequest.getParams();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(params &lt;span&gt;instanceof&lt;/span&gt; User){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            User user = (User)params;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;String&lt;/span&gt; fullname = user.getFullname();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            HanyuPinyinOutputFormat hanyuPinyinOutputFormat = &lt;span&gt;new&lt;/span&gt; HanyuPinyinOutputFormat();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            hanyuPinyinOutputFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;String&lt;/span&gt; username = PinyinHelper.toHanYuPinyinString(fullname, hanyuPinyinOutputFormat);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            user.setUsername(username);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            user.setEmail(username + &lt;span&gt;&quot;@qq.com&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;。。。其他执行器具体查看链接代码&lt;/span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;配置yml文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;lybgeek&lt;/span&gt;:&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;pipeline&lt;/span&gt;:&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;chain&lt;/span&gt;:&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;comsumePipelineName&lt;/span&gt;: &lt;span&gt;userYmlService&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;pipelineClassNames&lt;/span&gt;:&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;-&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.pipeline&lt;/span&gt;&lt;span&gt;.spring&lt;/span&gt;&lt;span&gt;.test&lt;/span&gt;&lt;span&gt;.yml&lt;/span&gt;&lt;span&gt;.handler&lt;/span&gt;&lt;span&gt;.UserCheckChannelHandler&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;-&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.pipeline&lt;/span&gt;&lt;span&gt;.spring&lt;/span&gt;&lt;span&gt;.test&lt;/span&gt;&lt;span&gt;.yml&lt;/span&gt;&lt;span&gt;.handler&lt;/span&gt;&lt;span&gt;.UserFillUsernameAndEmailChannelHandler&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;-&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.pipeline&lt;/span&gt;&lt;span&gt;.spring&lt;/span&gt;&lt;span&gt;.test&lt;/span&gt;&lt;span&gt;.yml&lt;/span&gt;&lt;span&gt;.handler&lt;/span&gt;&lt;span&gt;.UserPwdEncryptChannelHandler&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;-&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.pipeline&lt;/span&gt;&lt;span&gt;.spring&lt;/span&gt;&lt;span&gt;.test&lt;/span&gt;&lt;span&gt;.yml&lt;/span&gt;&lt;span&gt;.handler&lt;/span&gt;&lt;span&gt;.UserMockSaveChannelHandler&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;          &lt;span&gt;-&lt;/span&gt; &lt;span&gt;com&lt;/span&gt;&lt;span&gt;.github&lt;/span&gt;&lt;span&gt;.lybgeek&lt;/span&gt;&lt;span&gt;.pipeline&lt;/span&gt;&lt;span&gt;.spring&lt;/span&gt;&lt;span&gt;.test&lt;/span&gt;&lt;span&gt;.yml&lt;/span&gt;&lt;span&gt;.handler&lt;/span&gt;&lt;span&gt;.UserPrintChannleHandler&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;具体业务service引入管道bean&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserYmlServiceImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;UserYmlService&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(User user)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        ChannelPipeline pipeline = applicationContext.getBean(ChannelPipeline.class,PipelineDefinition.PREFIX + StringUtils.uncapitalize(UserYmlService.class.getSimpleName()));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; pipeline.start(ChannelHandlerRequest.builder().params(user).build());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;04&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testPipelineYml&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;boolean&lt;/span&gt; isOk = userYmlService.save(user);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        Assert.assertTrue(isOk);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17292576419213973&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxJWfPaic0EXfiaM4v6mhpY7P0ZFhwmF4C3RFsqG5z37JSXpyQoEzxNXQ4OLLT8iaFCbibwNy0NFsMiccbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1145&quot;/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;方式二：利用spring自定义标签&lt;/h3&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.8709677419354839&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rL6zuS4YpOQ3Fiaon76KwsBNf1BrzAiaOeHHOo1dGWbrkYSS4vEW7d0IhOeDsWfOvCAcYib9xYuwW9JQa1ibaUMlVg/640?wx_fmt=png&quot; data-w=&quot;62&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;定义xsd约束文件pipeline.xsd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; standalone=&lt;span&gt;&quot;no&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;xsd:schema&lt;/span&gt; &lt;span&gt;xmlns:xsd&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;xmlns:beans&lt;/span&gt;=&lt;span&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;xmlns:tool&lt;/span&gt;=&lt;span&gt;&quot;http://www.springframework.org/schema/tool&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://lybgeek.github.com/schema/pipeline&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;targetNamespace&lt;/span&gt;=&lt;span&gt;&quot;http://lybgeek.github.com/schema/pipeline&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;xsd:import&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/XML/1998/namespace&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;xsd:import&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;xsd:import&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;=&lt;span&gt;&quot;http://www.springframework.org/schema/tool&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &amp;lt;![CDATA[ Namespace support for pipeline services ]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;xsd:complexType&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;pipelineType&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:choice&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:element&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;pipelineHandler&quot;&lt;/span&gt; &lt;span&gt;minOccurs&lt;/span&gt;=&lt;span&gt;&quot;1&quot;&lt;/span&gt; &lt;span&gt;maxOccurs&lt;/span&gt;=&lt;span&gt;&quot;unbounded&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:choice&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:attribute&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;id&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;xsd:ID&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[ The unique identifier for a bean. ]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:attribute&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:attribute&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;consumePipelinesServiceClassName&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;xsd:string&quot;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;=&lt;span&gt;&quot;required&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[ consumePipelinesService class name ]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:attribute&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:attribute&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;consumePipelinesMethod&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;xsd:string&quot;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;=&lt;span&gt;&quot;required&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[ consumePipelinesMethod name ]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:attribute&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:attribute&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;argsType&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;xsd:string&quot;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;=&lt;span&gt;&quot;required&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[ consumePipelinesMethod args type , multiple args types are separated by commas ]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:attribute&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:complexType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;xsd:complexType&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;pipelineHandlerType&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:attribute&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;className&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;xsd:string&quot;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;=&lt;span&gt;&quot;required&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[ pipelineHanlder class name]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:attribute&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:attribute&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;order&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;xsd:string&quot;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;=&lt;span&gt;&quot;required&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[ pipeline class name]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:attribute&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:complexType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;xsd:element&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;pipelineHandler&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;pipelineHandlerType&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[ The pipelineHandler config ]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:element&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;xsd:element&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;pipeline&quot;&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;pipelineType&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;lt;![CDATA[ The pipeline config ]]&amp;gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:documentation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:annotation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;xsd:element&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;xsd:schema&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;配置xsd约束文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;在classpath下的resources文件夹新建META-INF文件夹，再建立一个文件spring.schemas，内容如下&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;http\&lt;span&gt;://lybgeek&lt;/span&gt;.github.com/schema/pipeline/pipeline.xsd=META-INF/pipeline.xsd&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;定义解析自定义标签的类&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PipelineNamespaceHandler&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;NamespaceHandlerSupport&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       registerBeanDefinitionParser(&lt;span&gt;&quot;pipeline&quot;&lt;/span&gt;,&lt;span&gt;new&lt;/span&gt; PipelineBeanDefinitionParser());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PipelineBeanDefinitionParser&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanDefinitionParser&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; BeanDefinition &lt;span&gt;parse&lt;/span&gt;&lt;span&gt;(Element element, ParserContext parserContext)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        PipelineConfig pipelineConfig = buildPipelineConfig(element);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        List&amp;lt;HandlerInvotation&amp;gt; handlerInvotations = &lt;span&gt;this&lt;/span&gt;.buildHandlerInvotations(pipelineConfig);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        GenericBeanDefinition beanDefinition = getGenericBeanDefinition(element, parserContext, pipelineConfig, handlerInvotations);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; beanDefinition;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; GenericBeanDefinition &lt;span&gt;getGenericBeanDefinition&lt;/span&gt;&lt;span&gt;(Element element, ParserContext parserContext, PipelineConfig pipelineConfig, List&amp;lt;HandlerInvotation&amp;gt; handlerInvotations)&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        GenericBeanDefinition beanDefinition = (GenericBeanDefinition) BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        beanDefinition.getPropertyValues().addPropertyValue(&lt;span&gt;&quot;pipelineServiceClz&quot;&lt;/span&gt;,pipelineConfig.getConsumePipelinesService());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        beanDefinition.getPropertyValues().addPropertyValue(&lt;span&gt;&quot;handlerInvotations&quot;&lt;/span&gt;,handlerInvotations);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        beanDefinition.getPropertyValues().addPropertyValue(&lt;span&gt;&quot;createByXml&quot;&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        beanDefinition.setBeanClass(ComsumePipelineFactoryBean.class);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        String beanName = BeanUtils.generateBeanName(element,&lt;span&gt;&quot;id&quot;&lt;/span&gt;,parserContext,pipelineConfig.getConsumePipelinesService().getSimpleName());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        parserContext.getRegistry().registerBeanDefinition(beanName,beanDefinition);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; beanDefinition;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;HandlerInvotation&amp;gt; &lt;span&gt;buildHandlerInvotations&lt;/span&gt;&lt;span&gt;(PipelineConfig pipelineConfig)&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        List&amp;lt;HandlerInvotation&amp;gt; handlerInvotations = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;for&lt;/span&gt; (PipelineHandlerConfig pipelineHandlerConfig : pipelineConfig.getPipelineChain()) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt;(!AbstactChannelHandler.class.isAssignableFrom(pipelineHandlerConfig.getPipelineClass())){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; PipelineException(&lt;span&gt;&quot;pipelineHandler className must be 【com.github.lybgeek.pipeline.handler.AbstactChannelHandler】 subclass&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            AbstactChannelHandler channelHandler = (AbstactChannelHandler) pipelineHandlerConfig.getPipelineClass().getDeclaredConstructor().newInstance();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            HandlerInvotation invotation = HandlerInvotation.builder()&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .args(pipelineConfig.getArgs())&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .handler(channelHandler)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .order(pipelineHandlerConfig.getOrder())&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .consumePipelinesMethod(pipelineConfig.getConsumePipelinesMethod())&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    .build();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            handlerInvotations.add(invotation);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; handlerInvotations;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; PipelineConfig &lt;span&gt;buildPipelineConfig&lt;/span&gt;&lt;span&gt;(Element element)&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        String argsType = element.getAttribute(&lt;span&gt;&quot;argsType&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        String[] argsTypeArr = trimArrayElements(commaDelimitedListToStringArray(argsType));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        String consumePipelinesMethod = element.getAttribute(&lt;span&gt;&quot;consumePipelinesMethod&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        String consumePipelinesServiceClassName = element.getAttribute(&lt;span&gt;&quot;consumePipelinesServiceClassName&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        Class[] args = &lt;span&gt;null&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(ArrayUtil.isNotEmpty(argsTypeArr)){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            args = &lt;span&gt;new&lt;/span&gt; Class[argsTypeArr.length];&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; argsTypeArr.length; i++) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                Class argType = Class.forName(argsTypeArr[i]);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                args[i] = argType;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        List&amp;lt;PipelineHandlerConfig&amp;gt; pipelineHandlerConfigs = buildPipelineHandlerConfig(element);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; PipelineConfig.builder().args(args)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .consumePipelinesMethod(consumePipelinesMethod)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .consumePipelinesService(Class.forName(consumePipelinesServiceClassName))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .pipelineChain(pipelineHandlerConfigs)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                .build();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;PipelineHandlerConfig&amp;gt; &lt;span&gt;buildPipelineHandlerConfig&lt;/span&gt;&lt;span&gt;(Element element)&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        NodeList nodeList = element.getChildNodes();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt; (nodeList == &lt;span&gt;null&lt;/span&gt;) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; Collections.emptyList();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        List&amp;lt;PipelineHandlerConfig&amp;gt; pipelineHandlerConfigs = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; nodeList.getLength(); i++) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt; (!(nodeList.item(i) &lt;span&gt;instanceof&lt;/span&gt; Element)) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;continue&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            Element childElement = (Element) nodeList.item(i);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;pipelineHandler&quot;&lt;/span&gt;.equals(childElement.getNodeName()) || &lt;span&gt;&quot;pipelineHandler&quot;&lt;/span&gt;.equals(childElement.getLocalName())) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                String pipelineHanlderClassName = childElement.getAttribute(&lt;span&gt;&quot;className&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                String pipelineHanlderOrder = childElement.getAttribute(&lt;span&gt;&quot;order&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                Class pipelineHanlderClass = Class.forName(pipelineHanlderClassName);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                PipelineHandlerConfig pipelineHandlerConfig = PipelineHandlerConfig.builder()&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        .PipelineClass(pipelineHanlderClass)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        .order(Integer.valueOf(pipelineHanlderOrder))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        .build();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                pipelineHandlerConfigs.add(pipelineHandlerConfig);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; pipelineHandlerConfigs;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;04&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;注册解析类&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在META-INF文件夹新建spring.handlers文件，内容如下&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;http\&lt;span&gt;://lybgeek&lt;/span&gt;.github.com/schema/pipeline=com.github.lybgeek.pipeline.spring.shema.PipelineNamespaceHandler&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;业务项目如何使用该方式实现业务编排&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.972972972972973&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Xuz7cCrSxHUr4F6rIJJmUyiaCTDRkk8vhJocsm8Boar8kRkaicGNLVaY5y2RWVy1h5sV9tfDvvjOYwTmHMnKsxQw/640?wx_fmt=png&quot; data-w=&quot;74&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;创建管道执行器&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserCheckChannelHandler &lt;span&gt;extends&lt;/span&gt; AbstactChannelHandler {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; handler(ChannelHandlerContext chx) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        ChannelHandlerRequest channelHandlerRequest = chx.getChannelHandlerRequest();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;XML------------------------------------步骤一：用户数据校验【&quot;&lt;/span&gt;+channelHandlerRequest.getRequestId()+&lt;span&gt;&quot;】&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;String&lt;/span&gt; json = &lt;span&gt;JSON&lt;/span&gt;.toJSONString(channelHandlerRequest.getParams());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        List&amp;lt;User&amp;gt; users = &lt;span&gt;JSON&lt;/span&gt;.parseArray(json,User.class);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(CollectionUtil.isEmpty(users) || StringUtils.isBlank(users.get(&lt;span&gt;0&lt;/span&gt;).getFullname())){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            log.error(&lt;span&gt;&quot;用户名不能为空&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserFillUsernameAndEmailChannelHandler &lt;span&gt;extends&lt;/span&gt; AbstactChannelHandler {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; handler(ChannelHandlerContext chx) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        ChannelHandlerRequest channelHandlerRequest = chx.getChannelHandlerRequest();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.out.println(&lt;span&gt;&quot;XML------------------------------------步骤二：用户名以及邮箱填充【将汉语转成拼音填充】【&quot;&lt;/span&gt;+channelHandlerRequest.getRequestId()+&lt;span&gt;&quot;】&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;String&lt;/span&gt; json = &lt;span&gt;JSON&lt;/span&gt;.toJSONString(channelHandlerRequest.getParams());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        List&amp;lt;User&amp;gt; users = &lt;span&gt;JSON&lt;/span&gt;.parseArray(json,User.class);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(CollectionUtil.isNotEmpty(users)){&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            User user = users.get(&lt;span&gt;0&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;String&lt;/span&gt; fullname = user.getFullname();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            HanyuPinyinOutputFormat hanyuPinyinOutputFormat = &lt;span&gt;new&lt;/span&gt; HanyuPinyinOutputFormat();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            hanyuPinyinOutputFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;String&lt;/span&gt; username = PinyinHelper.toHanYuPinyinString(fullname, hanyuPinyinOutputFormat);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            user.setUsername(username);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            user.setEmail(username + &lt;span&gt;&quot;@qq.com&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;。。。其他执行器具体查看链接代码&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;定义管道xml&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;beans&lt;/span&gt; &lt;span&gt;xmlns:xsi&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;xmlns:lybgeek&lt;/span&gt;=&lt;span&gt;&quot;http://lybgeek.github.com/schema/pipeline&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       &lt;span&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span&gt;&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd&lt;br mpa-from-tpl=&quot;t&quot;/&gt;       http://lybgeek.github.com/schema/pipeline http://lybgeek.github.com/schema/pipeline/pipeline.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;lybgeek:pipeline&lt;/span&gt; &lt;span&gt;consumePipelinesServiceClassName&lt;/span&gt;=&lt;span&gt;&quot;com.github.lybgeek.pipeline.spring.test.xml.service.UserXmlService&quot;&lt;/span&gt; &lt;span&gt;consumePipelinesMethod&lt;/span&gt;=&lt;span&gt;&quot;save&quot;&lt;/span&gt; &lt;span&gt;argsType&lt;/span&gt;=&lt;span&gt;&quot;com.github.lybgeek.pipeline.spring.test.model.User&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;lybgeek:pipelineHandler&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;com.github.lybgeek.pipeline.spring.test.xml.handler.UserCheckChannelHandler&quot;&lt;/span&gt; &lt;span&gt;order&lt;/span&gt;=&lt;span&gt;&quot;1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;lybgeek:pipelineHandler&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;com.github.lybgeek.pipeline.spring.test.xml.handler.UserFillUsernameAndEmailChannelHandler&quot;&lt;/span&gt; &lt;span&gt;order&lt;/span&gt;=&lt;span&gt;&quot;2&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;lybgeek:pipelineHandler&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;com.github.lybgeek.pipeline.spring.test.xml.handler.UserPwdEncryptChannelHandler&quot;&lt;/span&gt; &lt;span&gt;order&lt;/span&gt;=&lt;span&gt;&quot;3&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;lybgeek:pipelineHandler&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;com.github.lybgeek.pipeline.spring.test.xml.handler.UserMockSaveChannelHandler&quot;&lt;/span&gt; &lt;span&gt;order&lt;/span&gt;=&lt;span&gt;&quot;4&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;lybgeek:pipelineHandler&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;com.github.lybgeek.pipeline.spring.test.xml.handler.UserPrintChannleHandler&quot;&lt;/span&gt; &lt;span&gt;order&lt;/span&gt;=&lt;span&gt;&quot;5&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;lybgeek:pipeline&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;创建业务管道类&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;UserXmlService&lt;/span&gt; &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(User user)&lt;/span&gt;&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直接定义接口即可&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;04&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;启动类如下配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;@ImportResource&lt;/span&gt;(&lt;span&gt;&quot;classpath:/pipeline.xml&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;public class SpringPipelineApplication {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(String[] args) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;SpringApplication&lt;/span&gt;&lt;span&gt;.run&lt;/span&gt;(SpringPipelineApplication.class);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icdkN5zDv0xCRzIgMSJh5wYKVFZJBvY1tPMtIfib5jAGA6ozWMx9DxxYFxzUdMBrh2zkJChfkTrPia3ibgcUicAg1Cw/640?wx_fmt=png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;05&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testPipelineXml&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;boolean&lt;/span&gt; isOk = userXmlService.save(user);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        Assert.assertTrue(isOk);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14272727272727273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxJWfPaic0EXfiaM4v6mhpY7P0ADcSWCzPMRv9llruic140bc0ELsFOYgPfROnFNYpxu6O9B12HHnIINA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-category=&quot;模板&quot; data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文的管道模式的核心逻辑内核和上篇文章是一样，只是把管道执行器通过配置文件集中管理起来，这个后续维护也比较不容易出错&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-category=&quot;模板&quot; data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;04&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;demo链接&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;ttps://github.com/lyb-geek/springboot-learning/tree/master/springboot-pipeline&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>