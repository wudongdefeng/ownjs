<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bbe69ae9b6fa8eee360dfb97830ebeeb</guid>
<title>分享16个我总结的思维模型（程序员必读，受用终身）</title>
<link>https://toutiao.io/k/f7r13v5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;内容&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;帕累托法则指出，通常 80% 的结果来自 20% 的原因。数字 80 和 20 无论如何都不是精确的，但该原则的总体思路是结果通常分布不均。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;我们可以看到生活的许多领域遵守着这条规则，例如：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;世界上最富有的 20% 的人创造了世界 80% 的收入。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;80% 的犯罪是由 20%的罪犯所为（自 2020 年以来）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;我们知道 80% 的病毒传播来自 20% 的受感染人群。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;如何应用在软件开发中？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;我们可以从帕累托法则中获得的主要好处是专注。&lt;/span&gt;&lt;span&gt;它可以帮助我们专注于重要的事情（20%），而不是在不重要的事情（其他 80%）上浪费时间和精力。&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;不重要的事情对我们来说往往很重要，因为这样的事情总是有太多（而且看起来很紧急） 。但是最好的结果往往是通过关注重要的少数来达成的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;在软件开发中，我们可以使用它来专注于构建正确的功能，例如：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;专注于实现 80% 产品价值的那 20% 的产品功能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;专注于导致 80% 用户使用异常的那 20% 的错误。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;专注于实现 80% 的产品功能需要的那 20%总构建时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;只要问“现在最重要的事情是什么？”就可以帮助建立下一个最重要的事情，而不是下一个最紧急的事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;顺便说一下，敏捷和 DevOps 等现代开发方法有助于获得这种关注！具有定期用户反馈的快速迭代允许对重要事项进行数据驱动的决策。诸如基于主干的带有功能标记的开发之类的实践可以帮助软件团队实现这一目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bdc8a567d7fa074ff1bb97f4f794bf2f</guid>
<title>自动化的艺术</title>
<link>https://toutiao.io/k/emvjd0m</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;对于基础设施来说，很多服务都有类似的架构、数据库交互和UI，本文介绍了Paypal通过模板自动化基础设施微服务脚手架代码的实践，最大化节约了开发服务的时间并保证了服务的一致性。原文：The Art of Automating Automation&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;简介&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为PayPal网站可靠性和云工程(SRCE, Site Reliability &amp;amp; Cloud Engineering)团队的一部分，我们一直致力于通过自动化提升效率。然而，编写能够让人凭直觉自动化完成工作的软件并不是一件简单的任务。在PayPal基础设施中，任何操作的自动化组件都必须提供最高级别的可靠性、安全性、效率和自助服务能力。本文我们将讨论如何在全球网络服务(GNS, Global Network Services)中实现自动化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GNS团队有大量的操作需要自动化，范围从需要几小时人力投入的普通任务，到需要运维团队投入很多天精力的复杂任务。对我们来说，最大的挑战是如何在不消耗大量开发周期的情况下自动化这些大大小小的操作，我们需要努力证明“ROI(投资回报)”的合理性，这点特别重要。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;软件服务需求&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要将任何网络功能转变为服务，需要完成以下一系列任务:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;用户界面开发&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;开放给PayPal开发社区的所有服务都必须具有某种形式的用户界面(UI)，以便用户像使用任何其他服务一样使用网络。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数据库交互和表管理&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;大多数服务需要设计数据库表以及编写数据库交互代码来操作数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;核心业务逻辑&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;与自动化工具Terraform集成&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们的基础用户包括网络运营团队，他们不会使用基于UI的服务。相反，他们基于GitOps模式运作，这意味着我们开发的所有服务都需要通过开发Terraform provider与Terraform集成。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;认证和授权&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;这涉及到与标准的企业身份验证(如单点登录、多因素身份验证、角色管理等)的集成。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务帐户，API消费者的节流和限速&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;我们决定为所有东西提供API。因此，我们开发的所有服务都必须提供服务帐户，并确保能够节流和限速。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面的列表可以看出，构建一个可行的网络服务需要花费大量时间开发重要的外围组件。在理想情况下，我们能够只把时间花在编写核心业务逻辑上，而不做其他事情。通过两种方式，我们达到了编写更少代码的理想状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决这个问题的第一种方法是迁移到真正的微服务组件以及构建可插拔的库架构，第二种方法是基于模板的自动代码生成，可以基于通用模板生成UI、后端和数据库层代码。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;代码生成&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;长期以来，数据建模一直是设计良好的软件产品的支柱。一旦确定了基本数据构建块，构建围绕数据工作的软件组件就比较容易了。如果数据是以标准格式获取的，那么围绕数据的各种软件组件就有很大的自动化空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这正是我们采用的方法。我们团队的所有项目都从识别数据模型开始。数据模型是用YAML格式定义的，这样我们的动态代码生成模块就可以为系统的各个部分生成代码。下图显示了这个过程:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.540625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UaBkuWXlf0qAyEZFgzWt99o2aSakxVEETDKE0icCsWTXrOeHz06eNMEzJW1oXvROn4dIKkHsiasicSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;figcaption&gt;GNS软件架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;UI代码生成&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;React框架已经被包括PayPal在内的业界广泛采用。PayPal应用程序团队有一个非常模块化的React库，用于构建面向客户的应用程序。我们以该库为基础，在任何合适的地方使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数系统程序员都不熟悉UI编程。为了促进快速UI组件开发，我们依赖于模型驱动设计。使用模型驱动设计，典型的GNS开发人员只需指定UI布局，不用编写任何UI代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GNS代码生成引擎采用用户定义的模型，并使用React框架，生成一个独立的React代码容器，带有功能完整的UI。这种方法允许开发人员专注于应用程序的业务逻辑。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;后端代码生成&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过去，开发提供REST API功能的微服务非常繁琐，开发人员需要为每个端点编写软件并配置web服务网关。然而，Flask框架作为标准框架已经得到了Python开发人员的广泛认可。类似的，Golang除了内置支持之外，还有gorilla/mux框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数GNS服务是用Golang或Python编写的。我们在上述框架的帮助下，设计了基于Jinja模板生成通用代码的GNS代码生成引擎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以YAML格式定义的数据模型，代码生成引擎使用预定义的Jinja模板来生成服务的基础代码。GNS开发人员可以在这些代码的基础上实现精确的业务逻辑，从而减少编程错误，并消除从头编写所有内容的乏味工作。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据库层代码生成&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大多数GNS服务需要某种形式的数据库来存储建模阶段所描述的信息。编写代码来添加、删除和修改数据库中的条目是很繁琐的，而且容易出现bug、风格不统一等。Python和Golang拥有处理对象关系映射(ORM, Object Relationship Mapper )的开源库，我们选择采用sqlalchemy来规范化数据库操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于模型是用YAML格式定义的，我们的代码生成引擎除了生成后端代码外，还生成数据库处理方法。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Terraform Provider代码生成&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Terraform已经成为自动化基础设施的最常用工具。作为GNS服务提供商，我们已经决定所有自动化服务都将有针对Terraform的接口，从而能够适配正被不断采用的持续部署流水线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Terraform体系架构灵活且方便扩展，能够为我们喜欢的任何自动化添加Provider。请参阅terrform文档了解更多细节。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21041666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UaBkuWXlf0qAyEZFgzWt99DHCYs2ey9ft2o0HtnhnNrhLS88N0D8yicgHNOBOlGCZP7qKD97JY5ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;figcaption&gt;Terraform Provider架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于Terraform Provider是一个构造良好的库，我们的代码生成引擎可以基于Jinja模板生成基于golang的Provider程序，然后将这些代码构建到一个可插拔模块中，该模块可以安装到正在运行的terraform实例中。一旦完成，用户就可以在GNS服务上进行标准的terraform操作，就像任何其他服务一样。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结论&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自动化任何网络服务所需的大部分任务已经由我们的代码生成引擎生成，从而允许我们只专注于服务的核心逻辑。转向微服务体系架构以及采用基于模板的代码生成和模型驱动的体系架构使我们能够以更快的速度生产服务。在撰写本文时，我们可以在一天之内完成任何服务的工作框架，从而帮助团队可以专注于核心逻辑，并在更短的时间内产生更多的服务。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt; &lt;br/&gt;[1] The Art of Automating Automation: https://medium.com/paypal-tech/the-art-of-automating-automation-17b32594a41f&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>607a6df158da8d3a188dfb119db61210</guid>
<title>很不起眼的6个bug，90%的程序员就算写了10年代码也肯定都踩过！</title>
<link>https://toutiao.io/k/mwa80s7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;section class=&quot;channels_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAATts3EcfI_wAAAAstQy6ubaLX4KHWvLEZgBPEq6NMW1ZnIeCDzNPgMItpp1U36kCS9yF3d3JL_1b6&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=S7s6ianIic0ia4PicKJSfB8EjyjpQibPUAXolLDL3OZlaibYXPUagkP6fIMst7VCjPziaK6CjibBPib3B5ONLy6YgfgiaOxtVvqp997UYmzLBR4J5FJ6oIla2Xp0OmJQ&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdUB6e8icG7HE9nry03h60UuxMy4h7YdDMicEjMgbAmgx8LLFz5nW2dNzSicTK2JTBvByg&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM5nv7YHhmhvPsGGX04JCIgibK2x2Ru0TOY9HeZTGSIL1KQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08a1fc3d5c807ec30b07756771265bc6b6234fb9e05062ae69ab4@finder&quot; data-nickname=&quot;儒猿IT&quot; data-desc=&quot;大家在对老系统维护的时候，一定要谨慎substring内存泄漏问题。#String #java #内存泄漏 @微信时刻 &quot; data-nonceid=&quot;13971069283874009270&quot; data-type=&quot;video&quot; data-width=&quot;1728&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt;文章来源：https://juejin.cn/post/7120570066856312839&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/3GHDOauYyUGbiaHXGx1ib5UxkKzSNtpMzY5tbbGdibG7icBSxlH783x1YTF0icAv8MWrmanB4u5qjyKfmYo1dDf7YbA/640?wx_fmt=gif&quot; data-w=&quot;100&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;前言&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5454545454545454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gdxAJ6zQsUYfldc9KVnrcQSOpyXRZEVepgnN1Ykwcia3wuOHibVmnRkSUNjygD8GZMLUCuCgdjn0EF6VibajENJrQ/640?wx_fmt=png&quot; data-w=&quot;22&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;作为Java程序员的你，不知道有没有踩过一些基础知识的坑。&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;有时候，某个bug查了半天，最后发现竟然是一个低级错误。&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;有时候，某些代码，这一批数据功能正常，但换了一批数据就出现异常了。&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;有时候，你可能会看着某行代码目瞪口呆，心里想：这行代码为什么会出错？&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;今天跟大家一起聊聊99%的Java程序员踩过，或者即将踩的6个坑。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.972972972972973&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Xuz7cCrSxHUr4F6rIJJmUyiaCTDRkk8vhJocsm8Boar8kRkaicGNLVaY5y2RWVy1h5sV9tfDvvjOYwTmHMnKsxQw/640?wx_fmt=png&quot; data-w=&quot;74&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 用==号比较的坑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不知道你在项目中有没有见过，有些同事&lt;/span&gt;&lt;span&gt;对Integer类型的两个&lt;/span&gt;&lt;span&gt;参数使用&lt;/span&gt;&lt;span&gt;==号比较&lt;/span&gt;&lt;span&gt;是否相等？&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;反正我见过的，那么这种用法对吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我的回答是看具体场景，不能说一定对，或不对。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有些状态字段，比如：orderStatus有：-1(未下单)，0（已下单），1（已支付），2（已完成），3（取消），5种状态。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这时如果用==判断是否相等：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;Integer orderStatus1 = &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;1&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Integer orderStatus2 = &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;1&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;System.out.&lt;span&gt;println&lt;/span&gt;(orderStatus1 == orderStatus2);&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;返回结果会是&lt;strong&gt;true&lt;/strong&gt;吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;答案：是&lt;strong&gt;false&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有些同学可能会反驳，Integer中不是有范围是：&lt;/span&gt;&lt;span&gt;-128-127的缓存&lt;/span&gt;&lt;span&gt;吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为什么是false？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;先看看Integer的构造方法：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2754237288135593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLYP0cJmqSzuCGuxSBWIVrRlx1vuRjvogia4HIsWicaqXIh3FKialia9Zx7Hj7QVnQgl9VXGaibZ269ScTQ/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;472&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;它其实并没有用到&lt;/span&gt;&lt;strong&gt;&lt;span&gt;缓存&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么缓存是在哪里用的？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;答案在&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;valueOf&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;方法中：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.226457399103139&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLYP0cJmqSzuCGuxSBWIVrRliajyRyk0TDwObFLSQ1AlldqHfaZZ35wTlVZphkFFcXzicMpJ5ks418yg/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;892&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果上面的判断改成这样：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt; orderStatus1 = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;(&lt;span&gt;&quot;1&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;String&lt;/span&gt; orderStatus2 = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;(&lt;span&gt;&quot;1&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;System.out.println(Integer.valueOf(orderStatus1) == Integer.valueOf(orderStatus2));&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;返回结果会是&lt;strong&gt;true&lt;/strong&gt;吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;答案：还真是&lt;strong&gt;true&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们要养成良好编码习惯，尽量少用==判断两个Integer类型数据是否相等，只有在上述非常特殊的场景下才相等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而应该改成使用&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;equals&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;方法判断：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;Integer orderStatus1 = &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;1&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;Integer orderStatus2 = &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;1&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;System.&lt;span&gt;out&lt;/span&gt;.println(orderStatus1.&lt;span&gt;equals&lt;/span&gt;(orderStatus2));&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;运行结果为&lt;strong&gt;true&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-2&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. Objects.equals的坑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设现在有这样一个需求：&lt;/span&gt;&lt;span&gt;判断当前登录的用户，如果是我们指定的系统管理员，则发送一封邮件。&lt;/span&gt;&lt;span&gt;系统管理员没有特殊的字段标识，他的用户id=888，在开发、测试、生产环境中该值都是一样的。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这个需求真的太容易实现了：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;UserInfo userInfo = CurrentUser.getUserInfo();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;if&lt;/span&gt;(Objects.isNull(userInfo)) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   &lt;span&gt;log&lt;/span&gt;.info(&lt;span&gt;&quot;请先登录&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   &lt;span&gt;return&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;if&lt;/span&gt;(Objects.equals(userInfo.getId(),&lt;span&gt;888L&lt;/span&gt;)) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   sendEmail(userInfo):&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;从当前登录用户的上下文中获取用户信息，判断一下，如果用户信息为空，则直接返回。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果获取到的用户信息不为空，接下来判断用户id是否等于888。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果等于888，则发送邮件。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果不等于888，则啥事也不干。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;当我们用id=888的系统管理员账号登录之后，做了相关操作，满怀期待的准备收邮件的时候，却发现收了个寂寞。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后来，发现UserInfo类是这样定义的：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserInfo {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; Integer id;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; name;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; Integer age;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; address;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;此时，有些小伙伴可能会说：没看出什么问题呀。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但我要说的是这个代码确实有问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;什么问题呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面我们重点看看它的equals方法：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; equals(&lt;span&gt;Object&lt;/span&gt; a, &lt;span&gt;Object&lt;/span&gt; b) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;return&lt;/span&gt; (a == b) || (a != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; a.equals(b));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;equals方法的判断逻辑如下：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;该方法先判断对象a和b的引用是否相等，如果相等则直接返回true。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果引用不相等，则判断a是否为空，如果a为空则返回false。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果a不为空，调用对象的equals方法进一步判断值是否相等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;这就要从&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;Integer&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;的&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;equals&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;方法说起来了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;它的equals方法具体代码如下：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; equals(&lt;span&gt;Object&lt;/span&gt; obj) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;if&lt;/span&gt; (obj &lt;span&gt;instanceof&lt;/span&gt; Integer) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; value == ((Integer)obj).intValue();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;先判断参数obj是否是Integer类型，如果不是，则直接返回false。如果是Integer类型，再进一步判断int值是否相等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而上面这个例子中b是long类型，所以Integer的equals方法直接返回了false。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也就是说，如果调用了Integer的equals方法，必须要求入参也是Integer类型，否则该方法会直接返回false。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除此之外，还有Byte、Short、Double、Float、Boolean和Character也有类似的equals方法判断逻辑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;常见的坑有：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Long类型和Integer类型比较，比如：用户id的场景。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Byte类型和Integer类型比较，比如：状态判断的场景。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Double类型和Integer类型比较，比如：金额为0的判断场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. BigDecimal的坑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading-3&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;通常我们会把一些小数类型的字段（比如：金额），定义成&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;BigDecimal&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;，而不是&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;Double&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;，避免丢失精度问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用Double时可能会有这种场景：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;double&lt;/span&gt; amount1 = &lt;span&gt;0.02&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;double&lt;/span&gt; amount2 = &lt;span&gt;0.03&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;System.&lt;span&gt;out&lt;/span&gt;.println(amount2 - amount1);&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;正常情况下预计amount2 - amount1应该等于0.01&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是执行结果，却为：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;0&lt;span&gt;.009999999999999998&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;实际结果小于预计结果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Double类型的两个参数相减会转换成二进制，因为Double有效位数为16位这就会出现存储小数位数不够的情况，这种情况下就会出现误差。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;常识告诉我们使用&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;BigDecimal&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;能避免丢失精度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是使用BigDecimal能避免丢失精度吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;答案是否定的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;为什么？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;BigDecimal amount1 = &lt;span&gt;new&lt;/span&gt; BigDecimal(&lt;span&gt;0.02&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;BigDecimal amount2 = &lt;span&gt;new&lt;/span&gt; BigDecimal(&lt;span&gt;0.03&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;System.out.&lt;span&gt;println&lt;/span&gt;(amount2.subtract(amount1));&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;这个例子中定义了两个BigDecimal类型参数，使用构造函数初始化数据，然后打印两个参数相减后的值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;结果：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;0&lt;span&gt;.0099999999999999984734433411404097569175064563751220703125&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;不科学呀，为啥还是丢失精度了？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;Jdk&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;中&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;BigDecimal&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;的&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;构造方法&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;上有这样一段描述：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2511013215859031&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLYP0cJmqSzuCGuxSBWIVrRl4NwNFvSc6G9X9VysYLNvpBDmqUl7lM51vjX7TIz6NGHSBK7fPaJiczQ/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;908&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大致的意思是此构造函数的结果可能不可预测，可能会出现创建时为0.1，但实际是0.1000000000000000055511151231257827021181583404541015625的情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由此可见，使用BigDecimal构造函数初始化对象，也会丢失精度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么，如何才能不丢失精度呢？&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;BigDecimal amount1 = &lt;span&gt;new&lt;/span&gt; BigDecimal(Double.toString(&lt;span&gt;0.02&lt;/span&gt;));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;BigDecimal amount2 = &lt;span&gt;new&lt;/span&gt; BigDecimal(Double.toString(&lt;span&gt;0.03&lt;/span&gt;));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;System.out.&lt;span&gt;println&lt;/span&gt;(amount2.subtract(amount1));&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;我们可以使用&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;Double.toString&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;方法，对double类型的小数进行转换，这样能保证精度不丢失。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实，还有更好的办法：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;BigDecimal amount1 = BigDecimal.valueOf(&lt;span&gt;0.02&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;BigDecimal amount2 = BigDecimal.valueOf(&lt;span&gt;0.03&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;System.out.&lt;span&gt;println&lt;/span&gt;(amount2.subtract(amount1));&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;使用&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;BigDecimal.valueOf&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;方法初始化BigDecimal类型参数，也能保证精度不丢失。在新版的阿里巴巴开发手册中，也推荐使用这种方式创建BigDecimal参数。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-4&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. Java8 filter的坑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading-4&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;对于&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;Java8&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;中的&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;Stream&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;用法，大家肯定再熟悉不过了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们通过对&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;集合&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;的&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;Stream&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;操作，可以实现：遍历集合、过滤数据、排序、判断、转换集合等等，N多功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里重点说说数据的过滤。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在没有Java8之前，我们过滤数据一般是这样做的：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&amp;lt;User&amp;gt; filterUser(&lt;span&gt;List&lt;/span&gt;&amp;lt;User&amp;gt; userList) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;if&lt;/span&gt;(CollectionUtils.isEmpty(userList)) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; Collections.emptyList();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;List&lt;/span&gt;&amp;lt;User&amp;gt; resultList = Lists.newArrayList();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;for&lt;/span&gt;(User user: userList) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;if&lt;/span&gt;(user.getId() &amp;gt; &lt;span&gt;1000&lt;/span&gt; &amp;amp;&amp;amp; user.getAge() &amp;gt; &lt;span&gt;18&lt;/span&gt;) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;           resultList.add(user);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;return&lt;/span&gt; resultList;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;通常需要另一个集合辅助完成这个功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但如果使用Java8的&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;filter&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;功能，代码会变得简洁很多，例如：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&amp;lt;User&amp;gt; filterUser(&lt;span&gt;List&lt;/span&gt;&amp;lt;User&amp;gt; userList) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;if&lt;/span&gt;(CollectionUtils.isEmpty(userList)) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; Collections.emptyList();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;return&lt;/span&gt; userList.stream()&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    .filter(user -&amp;gt; user.getId() &amp;gt; &lt;span&gt;1000&lt;/span&gt; &amp;amp;&amp;amp; user.getAge() &amp;gt; &lt;span&gt;18&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    .collect(Collectors.toList());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;代码简化了很多，完美。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但如果你对过滤后的数据，做修改了：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&amp;lt;User&amp;gt; userList = queryUser();&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;List&lt;/span&gt;&amp;lt;User&amp;gt; filterList = filterUser(userList);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;for&lt;/span&gt;(User user: filterList) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   user.setName(user.getName() + &lt;span&gt;&quot;测试&quot;&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;for&lt;/span&gt;(User user: userList) {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   System.out.println(user.getName());&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;你当时可能只是想修改过滤后的数据，但实际上，你会把元素数据一同修改了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;意不意外，惊不惊喜？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其根本原因是：&lt;strong&gt;过滤后的集合中，保存的是对象的引用，该引用只有一份数据。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也就是说，只要有一个地方，把该引用对象的&lt;/span&gt;&lt;code&gt;&lt;span&gt;成员变量&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的值，做修改了，其他地方也会同步修改。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如下图所示：&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5496575342465754&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLYP0cJmqSzuCGuxSBWIVrRljpYQPHROhZpmPoKnKB592X9oPDmbdD7sOVFh6gX4HBNY9l7O9Micjgg/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;1168&quot;/&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-5&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5. 自动拆箱的坑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading-5&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;Java5&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;之后，提供了&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;自动装箱&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;和&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;自动拆箱&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;的功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;自动装箱是指：JDK会把基本类型，自动变成包装类型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;Integer &lt;span&gt;integer&lt;/span&gt; = 1;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;等价于：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;Integer integer = &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;1&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;而自动拆箱是指：JDK会把包装类型，自动转换成基本类型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;Integer integer = &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;2&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;int&lt;/span&gt; sum = integer + &lt;span&gt;5&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;等价于：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;Integer integer = &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;2&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;int&lt;/span&gt; sum = integer.intValue() + &lt;span&gt;5&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;但实际工作中，我们在使用自动拆箱时，往往忘记了判空，导致出现&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;NullPointerException&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;异常。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-id=&quot;heading-6&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5.1 运算&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;很多时候，我们需要对传入的数据进行计算，例如：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Test2&lt;/span&gt; {&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;String[] args&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;add&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;1&lt;/span&gt;), &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;2&lt;/span&gt;)));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer &lt;span&gt;add&lt;/span&gt;(&lt;span&gt;Integer a, Integer b&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;return&lt;/span&gt; a + b;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    }&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;如果传入了null值：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;add&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;2&lt;/span&gt;)));&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;则会直接报错。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-id=&quot;heading-7&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5.2 传参&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;有时候，我们定义的某个方法是基本类型，但实际上传入了包装类，比如：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;String[] args&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Integer a = &lt;span&gt;new&lt;/span&gt; Integer(&lt;span&gt;1&lt;/span&gt;);&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    Integer b = &lt;span&gt;null&lt;/span&gt;;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;add&lt;/span&gt;(a, b));&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer &lt;span&gt;add&lt;/span&gt;(&lt;span&gt;&lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt; b&lt;/span&gt;) &lt;/span&gt;{&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;return&lt;/span&gt; a + b;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;如果出现add方法报&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;NullPointerException&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;异常，你可能会懵逼，int类型怎么会出现空指针异常呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实，这个问题出在：Integer类型的参数，其实际传入值为null，JDK字段拆箱，调用了它的&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;intValue&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;方法导致的问题。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-id=&quot;heading-8&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;blockquote mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6. replace的坑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading-8&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;很多时候我们在使用字符串时，想把字符串比如：ATYSDFA*Y中的字符A替换成字符B，第一个想到的可能是使用replace方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果想把所有的A都替换成B，很显然可以用replaceAll方法，因为非常直观，光从方法名就能猜出它的用途。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么问题来了：replace方法会替换所有匹配字符吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;jdk的官方给出了答案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21832358674463936&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/1J6IbIcPCLYP0cJmqSzuCGuxSBWIVrRl084wFgYiavej19JBibwYBBmR3ViajpZAhqMlfDZqUYN37oicknajnsGr6A/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;1026&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该方法会替换每一个匹配的字符串。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;既然replace和replaceAll都能替换所有匹配字符，那么他们有啥区别呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;replace&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;有两个&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;重载&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;的方法。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;其中一个方法的参数：char oldChar 和 char newChar，支持字符的替换。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt;.replace(&lt;span&gt;&#x27;A&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;B&#x27;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;另一个方法的参数是：CharSequence target 和 CharSequence replacement，支持字符串的替换。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt;.replace(&lt;span&gt;&quot;A&quot;&lt;/span&gt;, &lt;span&gt;&quot;B&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;而&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;方法的参数是：String regex 和 String replacement，即基于&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;正则表达式&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;的替换。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如对普通字符串进行替换：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt;.replaceAll(&lt;span&gt;&quot;A&quot;&lt;/span&gt;, &lt;span&gt;&quot;B&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;使用正则表达替换（将*替换成C）：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt;.replaceAll(&lt;span&gt;&quot;\\*&quot;&lt;/span&gt;, &lt;span&gt;&quot;C&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;顺便说一下，将&lt;/span&gt;&lt;code&gt;&lt;span&gt;*&lt;/span&gt;&lt;/code&gt;&lt;span&gt;替换成&lt;/span&gt;&lt;code&gt;&lt;span&gt;C&lt;/span&gt;&lt;/code&gt;&lt;span&gt;使用replace方法也可以实现：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt;.replace(&lt;span&gt;&quot;*&quot;&lt;/span&gt;, &lt;span&gt;&quot;C&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;小伙们看到看到二者的区别了没？使用replace方法无需对特殊字符进行转义。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不过，千万注意，切勿使用如下写法：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt;.replace(&lt;span&gt;&quot;\\*&quot;&lt;/span&gt;, &lt;span&gt;&quot;C&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;这种写法会导致字符串无法替换。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还有个小问题，如果我只想替换第一个匹配的字符串该怎么办?&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这时可以使用&lt;/span&gt;&lt;strong&gt;&lt;code&gt;&lt;span&gt;replaceFirst&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;span&gt;方法：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;source&lt;/span&gt;.replaceFirst(&lt;span&gt;&quot;A&quot;&lt;/span&gt;, &lt;span&gt;&quot;B&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;说实话，这里内容都很基础，但越基础的东西，越容易大意失荆州，更容易踩坑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，统计一下，这些坑一个都没踩过的同学，麻烦举个手。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAATts3EcfI_wAAAAstQy6ubaLX4KHWvLEZgBPEq6NMW1ZnIeCDzNPgMItpp1U36kCS9yF3d3JL_1b6&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=S7s6ianIic0ia4PicKJSfB8EjyjpQibPUAXolLDL3OZlaibYXPUagkP6fIMst7VCjPziaK6CjibBPib3B5ONLy6YgfgiaOxtVvqp997UYmzLBR4J5FJ6oIla2Xp0OmJQ&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdUB6e8icG7HE9jYBFLUUa7Rft04oIVpmoWc1fMV1ua8GZJzMuQUWvkeCrPXJMugT2yo&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/Q3auHgzwzM5nv7YHhmhvPsGGX04JCIgibK2x2Ru0TOY9HeZTGSIL1KQ/0&quot; data-username=&quot;v2_060000231003b20faec8c5e08a1fc3d5c807ec30b07756771265bc6b6234fb9e05062ae69ab4@finder&quot; data-nickname=&quot;儒猿IT&quot; data-desc=&quot;大家在对老系统维护的时候，一定要谨慎substring内存泄漏问题。#String #java #内存泄漏 @微信时刻 &quot; data-nonceid=&quot;13971069283874009270&quot; data-type=&quot;video&quot; data-width=&quot;1728&quot; data-height=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21428571428571427&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/84QSpkgaj14GBzMnf1ibXkydLwCmhrWBooDwrdnlqYlsyB5PetG1T1oXxJ63G8TK58dqkDo7uzR7bKic50DxbTQQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;336&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6538461538461539&quot; data-w=&quot;52&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BXOuoE8lPAIR47zmQ1XOqSQszO2PjLgkgakpDZQSsUkLLnGszEu0eyGjvHNRqu6picb2kicC4lo95WZGiaxqibqW4A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;欢迎扫码加入儒猿技术交流群，每天晚上20:00都有Java面试、Redis、MySQL、RocketMQ、SpringCloudAlibaba、Java架构等技术答疑分享，更能跟小伙伴们一起交流技术&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;267&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;267&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLbPrUTW4zORxkXJU3pH9mPiawH9oZtZGKTkHyVL2wemkqNmPoJKDZlAt5ibgr2CibGkffw2ozqicds4gw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;396&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;41056&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;41056&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94152&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-autoskip=&quot;1&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;另外推荐儒猿课堂的1元系列课程给您，欢迎加入一起学习~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;互联网Java工程师面试突击课&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295hjkFx86RFTZFibdBopicpMl5Scptaibp0pQAe5jUBMtXym9w4CncFBHsQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;SpringCloudAlibaba零基础入门到项目实战&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295NSLHaU5cHQTtyG2K5uK4iaA70v1g50BoQIRUVz4FBN1iahXdqc1M99Ww/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;亿级流量下的电商详情页系统实战项目&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295I9n8XXUWoEeuogklrbj2QN4JZ6cdgYeRys5CCsml2tkFfibLXdeqoFA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Kafka消息中间件内核源码精讲&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295yiaEcp1k5HBVycE8BGD0lGz5NZmKWmKXUtSBS7Jnm4FkTY8R5XFZkPw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;12个实战案例带你玩转Java并发编程&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295WWU9o0Pj51xAIa2qCs9xD2rdDIRLriaibePNSrWJVCknYn6b5lrF3CQQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Elasticsearch零基础入门到精通&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295QdxHC6HadPfaakPOo7DxxQpLH19lMZH0yAwRI3iajVXblNnwfMxBk9A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于Java手写分布式中间件系统实战&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295r0mR5hhVpAlXTAZzlVvSg1dxegAaZrIZ9ftePV5QQQg2ibIZbiaA6CCg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于ShardingSphere的分库分表实战课&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;（1元专享）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;160&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1J6IbIcPCLZn0ZLz1APC2Hxj148icL295hicEliaIKPfLpHqQAo4CdAorqyxd9HvqD8sADicO7wFHGJxNtRus6LlBA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>96c398c38307529827c256b6f817fbf4</guid>
<title>基于AOP模式实现系统告警</title>
<link>https://toutiao.io/k/t4w9d0y</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;blockquote&gt;&lt;p&gt;工作群里的消息怕过于安静，又怕过于频繁&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;一、业务背景&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;在开发的过程中会遇到各种各样的开发问题，服务器宕机、网络抖动、代码本身的bug等等。针对代码的bug，我们可以提前预支，通过发送告警信息来警示我们去干预，尽早处理。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、告警的方式&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、钉钉告警&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;通过在企业钉钉群，添加群机器人的方式，通过机器人向群内发送报警信息。至于钉钉机器人怎么创建，发送消息的api等等，请参考官方文档&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、企业微信告警&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;同样的套路，企业微信也是，在企业微信群中，添加群机器人。通过机器人发送告警信息。具体请看官方文档&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、邮件告警&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;与上述不同的是，邮件是发送给个人的，当然也可以是批量发送，只实现了发送文本格式的方式，至于markdown格式，有待考察。邮件发送相对比较简单，这里就不展开赘述。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、源码解析&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、Alarm自定义注解&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Target&lt;/span&gt;({ElementType.METHOD})&lt;br/&gt;&lt;span&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;br/&gt;&lt;span&gt;@Documented&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Inherited&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;@interface&lt;/span&gt; Alarm {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 报警标题&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; String&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;String &lt;span&gt;title&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送报警格式：目前支持text，markdown&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;MessageTye &lt;span&gt;messageType&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; MessageTye.TEXT&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 告警模板id&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;String &lt;span&gt;templateId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 成功是否通知：true-通知，false-不通知&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;successNotice&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;1.1、注解使用&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Alarm&lt;/code&gt;标记在方法上使用，被标记的方法发生异常，会根据配置，读取配置信息，发送异常堆栈信息。使用方法如下所示：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Alarm&lt;/span&gt;(title = &lt;span&gt;&quot;某某业务告警&quot;&lt;/span&gt;, messageType = MessageTye.MARKDOWN, templateId = &lt;span&gt;&quot;errorTemp&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;1.2、注解字段解析&lt;/span&gt;&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;告警消息标题：可以定义为业务信息，如导师身份计算&lt;/p&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;messageType&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;告警消息展示类型：目前支持text文本类型，markdown类型&lt;/p&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;templateId&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;消息模板id：与配置文件中配置的模板id一致&lt;/p&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;successNotice&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;正常情况是否也需要发送告警信息，默认值是fasle，表示不需要发送。当然，有些业务场景正常情况也需要发送，比如：支付出单通知等。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、配置文件分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;2.1、钉钉配置文件&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alarm:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;dingtalk:&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 开启钉钉发送告警&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 钉钉群机器人唯一的token&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;token:&lt;/span&gt; &lt;span&gt;xxxxxx&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 安全设置：加签的密钥&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;secret:&lt;/span&gt; &lt;span&gt;xxxxxxx&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.2、企业微信配置文件&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alarm:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;wechat:&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 开启企业微信告警&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 企业微信群机器人唯一key&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;key:&lt;/span&gt; &lt;span&gt;xxxxxdsf&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;# 被@人的手机号&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;to-user:&lt;/span&gt; &lt;span&gt;1314243&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.3、邮件配置文件&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alarm:&lt;/span&gt;    &lt;br/&gt;    &lt;span&gt;mail:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;smtpHost:&lt;/span&gt; &lt;span&gt;xxx@qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;smtpPort:&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;to:&lt;/span&gt; &lt;span&gt;xxx@qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;from:&lt;/span&gt; &lt;span&gt;132&lt;/span&gt;&lt;span&gt;@qq.com&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;username:&lt;/span&gt; &lt;span&gt;wsrf&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;password:&lt;/span&gt; &lt;span&gt;xxx&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;2.4、自定义模板配置&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;alarm:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;template:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 开启通过模板配置&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;enabled:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 配置模板来源为文件&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;source:&lt;/span&gt; &lt;span&gt;FILE&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;# 配置模板数据&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;templates:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;errorTemp:&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;templateId:&lt;/span&gt; &lt;span&gt;errorTemp&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;templateName:&lt;/span&gt; &lt;span&gt;服务异常模板&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;templateContent:&lt;/span&gt; &lt;span&gt;这里是配置模板的内容&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;spring:alarm:template:enabled&lt;/code&gt;，Boolean类型，表示开启告警消息使用模板发送。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;spring:alarm:template:source&lt;/code&gt;，模板来源，枚举类：JDBC（数据库）、FILE（配置文件）、MEMORY（内存），目前只支持FILE，其他两种可自行扩展。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;spring:alarm:template:templates&lt;/code&gt;，配置模板内容，是一个map，&lt;code&gt;errorTemp&lt;/code&gt;是模板id，需要使用哪种模板，就在&lt;code&gt;@Alarm&lt;/code&gt;中的templateId设置为对应配置文件中的templateId。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;3、核心AOP分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;3.1、原理分析&lt;/span&gt;&lt;/h3&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6061946902654868&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBibB9PbDKazdiafMDFsibRbLsA6Nshib4yQqDgkmGuWjyNtD0ibplD1tiaTag2Otv2uw4o0RPUZrrUt2Wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1356&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;span&gt;3.2、自定义切面&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Aspect&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AlarmAspect&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; AlarmTemplateProvider alarmTemplateProvider;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String ERROR_TEMPLATE = &lt;span&gt;&quot;\n\n&amp;lt;font color=\&quot;#F37335\&quot;&amp;gt;异常信息:&amp;lt;/font&amp;gt;\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;```java\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;#{[exception]}\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;```\n&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String TEXT_ERROR_TEMPLATE = &lt;span&gt;&quot;\n异常信息:\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;#{[exception]}&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String MARKDOWN_TITLE_TEMPLATE = &lt;span&gt;&quot;# 【#{[title]}】\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;\n请求状态：&amp;lt;font color=\&quot;#{[stateColor]}\&quot;&amp;gt;#{[state]}&amp;lt;/font&amp;gt;\n\n&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String TEXT_TITLE_TEMPLATE = &lt;span&gt;&quot;【#{[title]}】\n&quot;&lt;/span&gt; +&lt;br/&gt;            &lt;span&gt;&quot;请求状态：#{[state]}\n&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Pointcut&lt;/span&gt;(&lt;span&gt;&quot;@annotation(alarm)&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;alarmPointcut&lt;/span&gt;&lt;span&gt;(Alarm alarm)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Around&lt;/span&gt;(value = &lt;span&gt;&quot;alarmPointcut(alarm)&quot;&lt;/span&gt;, argNames = &lt;span&gt;&quot;joinPoint,alarm&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;around&lt;/span&gt;&lt;span&gt;(ProceedingJoinPoint joinPoint, Alarm alarm)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;{&lt;br/&gt;        Object result = joinPoint.proceed();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (alarm.successNotice()) {&lt;br/&gt;            String templateId = alarm.templateId();&lt;br/&gt;            String fileTemplateContent = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (Objects.nonNull(alarmTemplateProvider)) {&lt;br/&gt;                AlarmTemplate alarmTemplate = alarmTemplateProvider.loadingAlarmTemplate(templateId);&lt;br/&gt;                fileTemplateContent = alarmTemplate.getTemplateContent();&lt;br/&gt;            }&lt;br/&gt;            String templateContent = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;            MessageTye messageTye = alarm.messageType();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (messageTye.equals(MessageTye.TEXT)) {&lt;br/&gt;                templateContent = TEXT_TITLE_TEMPLATE.concat(fileTemplateContent);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (messageTye.equals(MessageTye.MARKDOWN)) {&lt;br/&gt;                templateContent = MARKDOWN_TITLE_TEMPLATE.concat(fileTemplateContent);&lt;br/&gt;            }&lt;br/&gt;            Map&amp;lt;String, Object&amp;gt; alarmParamMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;            alarmParamMap.put(&lt;span&gt;&quot;title&quot;&lt;/span&gt;, alarm.title());&lt;br/&gt;            alarmParamMap.put(&lt;span&gt;&quot;stateColor&quot;&lt;/span&gt;, &lt;span&gt;&quot;#45B649&quot;&lt;/span&gt;);&lt;br/&gt;            alarmParamMap.put(&lt;span&gt;&quot;state&quot;&lt;/span&gt;, &lt;span&gt;&quot;成功&quot;&lt;/span&gt;);&lt;br/&gt;            sendAlarm(alarm, templateContent, alarmParamMap);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@AfterThrowing&lt;/span&gt;(pointcut = &lt;span&gt;&quot;alarmPointcut(alarm)&quot;&lt;/span&gt;, argNames = &lt;span&gt;&quot;joinPoint,alarm,e&quot;&lt;/span&gt;, throwing = &lt;span&gt;&quot;e&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doAfterThrow&lt;/span&gt;&lt;span&gt;(JoinPoint joinPoint, Alarm alarm, Exception e)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        log.info(&lt;span&gt;&quot;请求接口发生异常 : [{}]&quot;&lt;/span&gt;, e.getMessage());&lt;br/&gt;        String templateId = alarm.templateId();&lt;br/&gt;        &lt;span&gt;// 加载模板中配置的内容，若有&lt;/span&gt;&lt;br/&gt;        String templateContent = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;        String fileTemplateContent = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (Objects.nonNull(alarmTemplateProvider)) {&lt;br/&gt;            AlarmTemplate alarmTemplate = alarmTemplateProvider.loadingAlarmTemplate(templateId);&lt;br/&gt;            fileTemplateContent = alarmTemplate.getTemplateContent();&lt;br/&gt;        }&lt;br/&gt;        MessageTye messageTye = alarm.messageType();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (messageTye.equals(MessageTye.TEXT)) {&lt;br/&gt;            templateContent = TEXT_TITLE_TEMPLATE.concat(fileTemplateContent).concat(TEXT_ERROR_TEMPLATE);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (messageTye.equals(MessageTye.MARKDOWN)) {&lt;br/&gt;            templateContent = MARKDOWN_TITLE_TEMPLATE.concat(fileTemplateContent).concat(ERROR_TEMPLATE);&lt;br/&gt;        }&lt;br/&gt;        Map&amp;lt;String, Object&amp;gt; alarmParamMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;        alarmParamMap.put(&lt;span&gt;&quot;title&quot;&lt;/span&gt;, alarm.title());&lt;br/&gt;        alarmParamMap.put(&lt;span&gt;&quot;stateColor&quot;&lt;/span&gt;, &lt;span&gt;&quot;#FF4B2B&quot;&lt;/span&gt;);&lt;br/&gt;        alarmParamMap.put(&lt;span&gt;&quot;state&quot;&lt;/span&gt;, &lt;span&gt;&quot;失败&quot;&lt;/span&gt;);&lt;br/&gt;        alarmParamMap.put(&lt;span&gt;&quot;exception&quot;&lt;/span&gt;, ExceptionUtil.stacktraceToString(e));&lt;br/&gt;        sendAlarm(alarm, templateContent, alarmParamMap);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sendAlarm&lt;/span&gt;&lt;span&gt;(Alarm alarm, String templateContent, Map&amp;lt;String, Object&amp;gt; alarmParamMap)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ExpressionParser parser = &lt;span&gt;new&lt;/span&gt; SpelExpressionParser();&lt;br/&gt;        TemplateParserContext parserContext = &lt;span&gt;new&lt;/span&gt; TemplateParserContext();&lt;br/&gt;        String message = parser.parseExpression(templateContent, parserContext).getValue(alarmParamMap, String&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        MessageTye messageTye = alarm.messageType();&lt;br/&gt;        NotifyMessage notifyMessage = &lt;span&gt;new&lt;/span&gt; NotifyMessage();&lt;br/&gt;        notifyMessage.setTitle(alarm.title());&lt;br/&gt;        notifyMessage.setMessageTye(messageTye);&lt;br/&gt;        notifyMessage.setMessage(message);&lt;br/&gt;        AlarmFactoryExecute.execute(notifyMessage);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;4、模板提供器&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;4.1、AlarmTemplateProvider&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;定义一个抽象接口&lt;code&gt;AlarmTemplateProvider&lt;/code&gt;，用于被具体的子类实现&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;AlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 加载告警模板&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; templateId 模板id&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; AlarmTemplate&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AlarmTemplate &lt;span&gt;loadingAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.2、BaseAlarmTemplateProvider&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;抽象类&lt;code&gt;BaseAlarmTemplateProvider&lt;/code&gt;实现该抽象接口&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BaseAlarmTemplateProvider&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AlarmTemplate &lt;span&gt;loadingAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (StringUtils.isEmpty(templateId)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmException(&lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;告警模板配置id不能为空&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; getAlarmTemplate(templateId);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 查询告警模板&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; templateId 模板id&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; AlarmTemplate&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;abstract&lt;/span&gt; AlarmTemplate &lt;span&gt;getAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.3、YamlAlarmTemplateProvider&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;具体实现类&lt;code&gt;YamlAlarmTemplateProvider&lt;/code&gt;，实现从配置文件中读取模板，该类在项目启动时，会被加载进spring的bean容器&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;YamlAlarmTemplateProvider&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseAlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; TemplateConfig templateConfig;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AlarmTemplate &lt;span&gt;getAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Map&amp;lt;String, AlarmTemplate&amp;gt; configTemplates = templateConfig.getTemplates();&lt;br/&gt;        AlarmTemplate alarmTemplate = configTemplates.get(templateId);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (ObjectUtils.isEmpty(alarmTemplate)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmException(&lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;未发现告警配置模板&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; alarmTemplate;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.4、MemoryAlarmTemplateProvider和JdbcAlarmTemplateProvider&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;抽象类&lt;code&gt;BaseAlarmTemplateProvider&lt;/code&gt;还有其他两个子类，分别是&lt;code&gt;MemoryAlarmTemplateProvider&lt;/code&gt;和&lt;code&gt;JdbcAlarmTemplateProvider&lt;/code&gt;。但是这两个子类暂时还未实现逻辑，后续可以自行扩展。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MemoryAlarmTemplateProvider&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseAlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Function&amp;lt;String, AlarmTemplate&amp;gt; function;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AlarmTemplate &lt;span&gt;getAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        AlarmTemplate alarmTemplate = function.apply(templateId);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (ObjectUtils.isEmpty(alarmTemplate)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmException(&lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;未发现告警配置模板&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; alarmTemplate;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JdbcAlarmTemplateProvider&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseAlarmTemplateProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Function&amp;lt;String, AlarmTemplate&amp;gt; function;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AlarmTemplate &lt;span&gt;getAlarmTemplate&lt;/span&gt;&lt;span&gt;(String templateId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        AlarmTemplate alarmTemplate = function.apply(templateId);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (ObjectUtils.isEmpty(alarmTemplate)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmException(&lt;span&gt;400&lt;/span&gt;, &lt;span&gt;&quot;未发现告警配置模板&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; alarmTemplate;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;两个类中都有Function&amp;lt;String, AlarmTemplate&amp;gt;接口，为函数式接口，可以供外部自行去实现逻辑。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;5、告警发送&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;5.1、AlarmFactoryExecute&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;该类内部保存了一个容器，主要用于缓存真正的发送类&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AlarmFactoryExecute&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;AlarmWarnService&amp;gt; serviceList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AlarmFactoryExecute&lt;/span&gt;&lt;span&gt;(List&amp;lt;AlarmWarnService&amp;gt; alarmLogWarnServices)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        serviceList = alarmLogWarnServices;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addAlarmLogWarnService&lt;/span&gt;&lt;span&gt;(AlarmWarnService alarmLogWarnService)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        serviceList.add(alarmLogWarnService);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;AlarmWarnService&amp;gt; &lt;span&gt;getServiceList&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; serviceList;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(NotifyMessage notifyMessage)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (AlarmWarnService alarmWarnService : getServiceList()) {&lt;br/&gt;            alarmWarnService.send(notifyMessage);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.2、AlarmWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;抽象接口，只提供一个发送的方法&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;AlarmWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送信息&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; notifyMessage message&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(NotifyMessage notifyMessage)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.3、BaseWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;与抽象的模板提供器&lt;code&gt;AlarmTemplateProvider&lt;/code&gt;一样的套路，该接口有一个抽象的实现类&lt;code&gt;BaseWarnService&lt;/code&gt;,该类对外暴露send方法，用于发送消息，内部用doSendMarkdown，doSendText方法实现具体的发送逻辑，当然具体发送逻辑还是得由其子类去实现。&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BaseWarnService&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AlarmWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(NotifyMessage notifyMessage)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (notifyMessage.getMessageTye().equals(MessageTye.TEXT)) {&lt;br/&gt;            CompletableFuture.runAsync(() -&amp;gt; {&lt;br/&gt;                &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                    doSendText(notifyMessage.getMessage());&lt;br/&gt;                } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;                    log.error(&lt;span&gt;&quot;send text warn message error&quot;&lt;/span&gt;, e);&lt;br/&gt;                }&lt;br/&gt;            });&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (notifyMessage.getMessageTye().equals(MessageTye.MARKDOWN)) {&lt;br/&gt;            CompletableFuture.runAsync(() -&amp;gt; {&lt;br/&gt;                &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                    doSendMarkdown(notifyMessage.getTitle(), notifyMessage.getMessage());&lt;br/&gt;                } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;                    log.error(&lt;span&gt;&quot;send markdown warn message error&quot;&lt;/span&gt;, e);&lt;br/&gt;                }&lt;br/&gt;            });&lt;br/&gt;        }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送Markdown消息&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; title   Markdown标题&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; message Markdown消息&lt;br/&gt;     * &lt;span&gt;@throws&lt;/span&gt; Exception 异常&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendMarkdown&lt;/span&gt;&lt;span&gt;(String title, String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送文本消息&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; message 文本消息&lt;br/&gt;     * &lt;span&gt;@throws&lt;/span&gt; Exception 异常&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendText&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.4、DingTalkWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;主要实现了钉钉发送告警信息的逻辑&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DingTalkWarnService&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ROBOT_SEND_URL = &lt;span&gt;&quot;https://oapi.dingtalk.com/robot/send?access_token=&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String token;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String secret;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;DingTalkWarnService&lt;/span&gt;&lt;span&gt;(String token, String secret)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.token = token;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.secret = secret;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sendRobotMessage&lt;/span&gt;&lt;span&gt;(DingTalkSendRequest dingTalkSendRequest)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        String json = JSONUtil.toJsonStr(dingTalkSendRequest);&lt;br/&gt;        String sign = getSign();&lt;br/&gt;        String body = HttpRequest.post(sign).contentType(ContentType.JSON.getValue()).body(json).execute().body();&lt;br/&gt;        log.info(&lt;span&gt;&quot;钉钉机器人通知结果：{}&quot;&lt;/span&gt;, body);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 获取签名&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; 返回签名&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;getSign&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; timestamp = System.currentTimeMillis();&lt;br/&gt;        String stringToSign = timestamp + &lt;span&gt;&quot;\n&quot;&lt;/span&gt; + secret;&lt;br/&gt;        Mac mac = Mac.getInstance(&lt;span&gt;&quot;HmacSHA256&quot;&lt;/span&gt;);&lt;br/&gt;        mac.init(&lt;span&gt;new&lt;/span&gt; SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), &lt;span&gt;&quot;HmacSHA256&quot;&lt;/span&gt;));&lt;br/&gt;        &lt;span&gt;byte&lt;/span&gt;[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ROBOT_SEND_URL + token + &lt;span&gt;&quot;&amp;amp;timestamp=&quot;&lt;/span&gt; + timestamp + &lt;span&gt;&quot;&amp;amp;sign=&quot;&lt;/span&gt; + URLEncoder.encode(&lt;span&gt;new&lt;/span&gt; String(Base64.getEncoder().encode(signData)), StandardCharsets.UTF_8.toString());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendText&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        DingTalkSendRequest param = &lt;span&gt;new&lt;/span&gt; DingTalkSendRequest();&lt;br/&gt;        param.setMsgtype(DingTalkSendMsgTypeEnum.TEXT.getType());&lt;br/&gt;        param.setText(&lt;span&gt;new&lt;/span&gt; DingTalkSendRequest.Text(message));&lt;br/&gt;        sendRobotMessage(param);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendMarkdown&lt;/span&gt;&lt;span&gt;(String title, String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        DingTalkSendRequest param = &lt;span&gt;new&lt;/span&gt; DingTalkSendRequest();&lt;br/&gt;        param.setMsgtype(DingTalkSendMsgTypeEnum.MARKDOWN.getType());&lt;br/&gt;        DingTalkSendRequest.Markdown markdown = &lt;span&gt;new&lt;/span&gt; DingTalkSendRequest.Markdown(title, message);&lt;br/&gt;        param.setMarkdown(markdown);&lt;br/&gt;        sendRobotMessage(param);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.5、WorkWeXinWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;主要实现了发送企业微信告警信息的逻辑&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WorkWeXinWarnService&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String SEND_MESSAGE_URL = &lt;span&gt;&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=%s&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String key;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String toUser;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;WorkWeXinWarnService&lt;/span&gt;&lt;span&gt;(String key, String toUser)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.key = key;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.toUser = toUser;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;createPostData&lt;/span&gt;&lt;span&gt;(WorkWeXinSendMsgTypeEnum messageTye, String contentValue)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        WorkWeXinSendRequest wcd = &lt;span&gt;new&lt;/span&gt; WorkWeXinSendRequest();&lt;br/&gt;        wcd.setMsgtype(messageTye.getType());&lt;br/&gt;        List&amp;lt;String&amp;gt; toUsers = Arrays.asList(&lt;span&gt;&quot;@all&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (StringUtils.isNotEmpty(toUser)) {&lt;br/&gt;            String[] split = toUser.split(&lt;span&gt;&quot;\\|&quot;&lt;/span&gt;);&lt;br/&gt;            toUsers = Arrays.asList(split);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (messageTye.equals(WorkWeXinSendMsgTypeEnum.TEXT)) {&lt;br/&gt;            WorkWeXinSendRequest.Text text = &lt;span&gt;new&lt;/span&gt; WorkWeXinSendRequest.Text(contentValue, toUsers);&lt;br/&gt;            wcd.setText(text);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (messageTye.equals(WorkWeXinSendMsgTypeEnum.MARKDOWN)) {&lt;br/&gt;            WorkWeXinSendRequest.Markdown markdown = &lt;span&gt;new&lt;/span&gt; WorkWeXinSendRequest.Markdown(contentValue, toUsers);&lt;br/&gt;            wcd.setMarkdown(markdown);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; JSONUtil.toJsonStr(wcd);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendText&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String data = createPostData(WorkWeXinSendMsgTypeEnum.TEXT, message);&lt;br/&gt;        String url = String.format(SEND_MESSAGE_URL, key);&lt;br/&gt;        String resp = HttpRequest.post(url).body(data).execute().body();&lt;br/&gt;        log.info(&lt;span&gt;&quot;send work weixin message call [{}], param:{}, resp:{}&quot;&lt;/span&gt;, url, data, resp);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendMarkdown&lt;/span&gt;&lt;span&gt;(String title, String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String data = createPostData(WorkWeXinSendMsgTypeEnum.MARKDOWN, message);&lt;br/&gt;        String url = String.format(SEND_MESSAGE_URL, key);&lt;br/&gt;        String resp = HttpRequest.post(url).body(data).execute().body();&lt;br/&gt;        log.info(&lt;span&gt;&quot;send work weixin message call [{}], param:{}, resp:{}&quot;&lt;/span&gt;, url, data, resp);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.6、MailWarnService&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;主要实现邮件告警逻辑&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MailWarnService&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseWarnService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String smtpHost;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String smtpPort;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String to;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String from;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String username;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String password;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Boolean ssl = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Boolean debug = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;MailWarnService&lt;/span&gt;&lt;span&gt;(String smtpHost, String smtpPort, String to, String from, String username, String password)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.smtpHost = smtpHost;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.smtpPort = smtpPort;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.to = to;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.from = from;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.username = username;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.password = password;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setSsl&lt;/span&gt;&lt;span&gt;(Boolean ssl)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.ssl = ssl;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setDebug&lt;/span&gt;&lt;span&gt;(Boolean debug)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.debug = debug;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendText&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        Properties props = &lt;span&gt;new&lt;/span&gt; Properties();&lt;br/&gt;        props.setProperty(&lt;span&gt;&quot;mail.smtp.auth&quot;&lt;/span&gt;, &lt;span&gt;&quot;true&quot;&lt;/span&gt;);&lt;br/&gt;        props.setProperty(&lt;span&gt;&quot;mail.transport.protocol&quot;&lt;/span&gt;, &lt;span&gt;&quot;smtp&quot;&lt;/span&gt;);&lt;br/&gt;        props.setProperty(&lt;span&gt;&quot;mail.smtp.host&quot;&lt;/span&gt;, smtpHost);&lt;br/&gt;        props.setProperty(&lt;span&gt;&quot;mail.smtp.port&quot;&lt;/span&gt;, smtpPort);&lt;br/&gt;        props.put(&lt;span&gt;&quot;mail.smtp.ssl.enable&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        Session session = Session.getInstance(props);&lt;br/&gt;        session.setDebug(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;        MimeMessage msg = &lt;span&gt;new&lt;/span&gt; MimeMessage(session);&lt;br/&gt;        msg.setFrom(&lt;span&gt;new&lt;/span&gt; InternetAddress(from));&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (String toUser : to.split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;)) {&lt;br/&gt;            msg.setRecipient(MimeMessage.RecipientType.TO, &lt;span&gt;new&lt;/span&gt; InternetAddress(toUser));&lt;br/&gt;        }&lt;br/&gt;        Map&amp;lt;String, String&amp;gt; map = JSONUtil.toBean(message, Map&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        msg.setSubject(map.get(&lt;span&gt;&quot;subject&quot;&lt;/span&gt;), &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;        msg.setContent(map.get(&lt;span&gt;&quot;content&quot;&lt;/span&gt;), &lt;span&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;        msg.setSentDate(&lt;span&gt;new&lt;/span&gt; Date());&lt;br/&gt;        Transport transport = session.getTransport();&lt;br/&gt;        transport.connect(username, password);&lt;br/&gt;        transport.sendMessage(msg, msg.getAllRecipients());&lt;br/&gt;        transport.close();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doSendMarkdown&lt;/span&gt;&lt;span&gt;(String title, String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        log.warn(&lt;span&gt;&quot;暂不支持发送Markdown邮件&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;6、AlarmAutoConfiguration自动装配类&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;运用了springboot自定义的starter，再&lt;code&gt;META-INF&lt;/code&gt;包下的配置文件&lt;code&gt;spring.factories&lt;/code&gt;下，配置上该类&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration=\&lt;br/&gt;    com.seven.buttemsg.autoconfigure.AlarmAutoConfiguration&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;自动装配类，用于装载自定义的bean&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AlarmAutoConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 邮件相关配置装载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = MailConfig.PREFIX, name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;, havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(MailConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MailWarnServiceMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;(MailWarnService&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;MailWarnService&lt;/span&gt; &lt;span&gt;mailWarnService&lt;/span&gt;(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;MailConfig&lt;/span&gt; &lt;span&gt;mailConfig&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            MailWarnService mailWarnService = &lt;span&gt;new&lt;/span&gt; MailWarnService(mailConfig.getSmtpHost(), mailConfig.getSmtpPort(), mailConfig.getTo(), mailConfig.getFrom(), mailConfig.getUsername(), mailConfig.getPassword());&lt;br/&gt;            mailWarnService.setSsl(mailConfig.getSsl());&lt;br/&gt;            mailWarnService.setDebug(mailConfig.getDebug());&lt;br/&gt;            AlarmFactoryExecute.addAlarmLogWarnService(mailWarnService);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; mailWarnService;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 企业微信相关配置装载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = WorkWeXinConfig.PREFIX, name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;, havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(WorkWeXinConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WorkWechatWarnServiceMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;(MailWarnService&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;WorkWeXinWarnService&lt;/span&gt; &lt;span&gt;workWechatWarnService&lt;/span&gt;(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;WorkWeXinConfig&lt;/span&gt; &lt;span&gt;workWeXinConfig&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; WorkWeXinWarnService(workWeXinConfig.getKey(), workWeXinConfig.getToUser());&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;setDataChangedListener&lt;/span&gt;&lt;span&gt;(WorkWeXinWarnService workWeXinWarnService)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            AlarmFactoryExecute.addAlarmLogWarnService(workWeXinWarnService);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 钉钉相关配置装载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = DingTalkConfig.PREFIX, name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;, havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(DingTalkConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;DingTalkWarnServiceMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;(DingTalkWarnService&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;DingTalkWarnService&lt;/span&gt; &lt;span&gt;dingTalkWarnService&lt;/span&gt;(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;DingTalkConfig&lt;/span&gt; &lt;span&gt;dingtalkConfig&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            DingTalkWarnService dingTalkWarnService = &lt;span&gt;new&lt;/span&gt; DingTalkWarnService(dingtalkConfig.getToken(), dingtalkConfig.getSecret());&lt;br/&gt;            AlarmFactoryExecute.addAlarmLogWarnService(dingTalkWarnService);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; dingTalkWarnService;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 消息模板配置装载&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ConditionalOnProperty&lt;/span&gt;(prefix = TemplateConfig.PREFIX, name = &lt;span&gt;&quot;enabled&quot;&lt;/span&gt;, havingValue = &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@EnableConfigurationProperties&lt;/span&gt;(TemplateConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;TemplateConfigServiceMethod&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AlarmTemplateProvider &lt;span&gt;alarmTemplateProvider&lt;/span&gt;&lt;span&gt;(TemplateConfig templateConfig)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (TemplateSource.FILE == templateConfig.getSource()) {&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; YamlAlarmTemplateProvider(templateConfig);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (TemplateSource.JDBC == templateConfig.getSource()) {&lt;br/&gt;                &lt;span&gt;// 数据库（如mysql）读取文件，未实现，可自行扩展&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; JdbcAlarmTemplateProvider(templateId -&amp;gt; &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (TemplateSource.MEMORY == templateConfig.getSource()) {&lt;br/&gt;                &lt;span&gt;// 内存（如redis，本地内存）读取文件，未实现，可自行扩展&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MemoryAlarmTemplateProvider(templateId -&amp;gt; &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; YamlAlarmTemplateProvider(templateConfig);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AlarmAspect &lt;span&gt;alarmAspect&lt;/span&gt;&lt;span&gt;(@Autowired(required = &lt;span&gt;false&lt;/span&gt;)&lt;/span&gt; AlarmTemplateProvider alarmTemplateProvider) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AlarmAspect(alarmTemplateProvider);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;主要借助spring的切面技术，以及springboot的自动装配原理，实现了发送告警逻辑。对业务代码无侵入，只需要在业务代码上标记注解，就可实现可插拔的功能，比较轻量。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、参考源码&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;编程文档：&lt;br/&gt;https://gitee.com/cicadasmile/butte-java-note&lt;br/&gt;&lt;br/&gt;应用仓库：&lt;br/&gt;https://gitee.com/cicadasmile/butte-flyer-parent&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>28f60f69ef55a3582c0b36c0fd4321d1</guid>
<title>亿级异构任务调度框架设计与实践</title>
<link>https://toutiao.io/k/kx3039a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKibmJCS3cWsNzjRxw5POWrQAy4JicpNWowshaTjqVPbChKEopP7eHeQXWYNOuQYJrxnLcSuu1yWkng/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;section&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/section&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;阿里云日志服务作为云原生可观测与分析平台。提供了一站式的数据采集、加工、查询分析、可视化、告警、消费与投递等功能。全面提升用户的研发、运维、运营、安全场景的数字化能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;日志服务平台作为可观测性平台提供了数据导入、数据加工、聚集加工、告警、智能巡检、导出等功能，这些功能在日志服务被称为任务，并且具有大规模的应用，接下来主要介绍下这些任务的调度框架的设计与实践。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3950617283950617&quot; data-type=&quot;png&quot; data-w=&quot;1458&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96FdU6uJNbL5KXXd6qPS0fCch5rKPVslL5etkZzLic1X4h9OlyJKGrsnA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本次介绍主要分为四个部分：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务调度背景&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可观测性平台的亿级任务调度框架设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务调度框架在日志服务的大规模应用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;展望&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;任务调度背景&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;通用调度&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调度在计算机里面是一个非常常见的技术，从单机到分布式再到大数据系统，调度的身影无处不在。这里尝试总结出调度的一些共同特征。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;操作系统：从单机操作系统Linux来看，内核通过时间片的方式来控制进程在处理器上的执行时间，进程的优先级与时间片挂钩，简单来说，进程的在单CPU或者某个CPU的执行由调度器来掌握；K8s被称为分布式时代的操作系统，在Pod创建后，K8s的控制面调度器通过对节点进行打分排序，最终选出适合的Node来运行Pod。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大数据分析系统：从最早的MapReduce使用公平调度器支持作业的优先级和抢占，到SQL计算引擎Presto通过Coordinator的调度器将执行计划中的任务分配到适合的worker上来执行，Spark通过DAGScheduler拆分成Stage，TaskScheduler将Stage对应的TaskSet最终调度到适合的Worker上来执行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务调度框架：在数据处理中常见的ETL处理任务、定时任务，这些任务具有多模的特点：定时执行、持续运行、一次性执行等。在任务执行过程中需要考虑任务的编排和状态一致性问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46503067484662575&quot; data-type=&quot;png&quot; data-w=&quot;1630&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96YzSUu0ibYkPS7rRtiaRsia570yicJM0bLEcMyR5X1rvtx89skgTtFpiaxKw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里简单的对调度做一个抽象，如上图所示，调度负责将不同的Task分配到不同的Resource上执行，Task可以是进程、Pod、子任务；Resource为具体执行Task任务的资源，可以是处理器、线程池、节点、机器。通过这个抽象，可以看出调度在系统中的位置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调度的覆盖面很广，本文主要集中在任务调度框架的设计与实践，这里先通过一些例子来看下任务调度的一些特点，以下主要讲任务分为定时类的任务和依赖类的任务两种来展开。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;任务调度&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;定时类任务&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6705035971223021&quot; data-type=&quot;png&quot; data-w=&quot;1390&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt963dxLFkb3836iamt5k5dIfiapfKicuyUK0MQav8UK3kb558krE2WOiaEeTg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;定时执行可以理解为每个任务之间有时间先后顺序，并且要在特定的时间点执行，比如每隔1小时对日志进行监控，00点的监控任务需要首先执行，01点的监控任务需要在01点准时执行；同样，类似的定时场景，还有仪表盘订阅、定时计算等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;依赖类任务&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5853658536585366&quot; data-type=&quot;png&quot; data-w=&quot;1558&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96RKaLujgOF6djft3ARz9XolxTKGibhbsOtGu7sgFON9pTH1zNQ8RbibxA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了定时执行，还有另外一种编排形式，比如顺序依赖，各个任务之间有先后执行的依赖，也叫Pipeline方式，还有一种比较常见的编排形式，拓扑依赖，也称为DAG，比如Task2/Task3需要等到Task1执行完成才可以执行，Task5需要等到Task3/Task4执行完才可以执行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;任务调度特点&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;任务调度在执行的过程中需要尽可能均衡的将任务分派到合适的机器或者执行器上去执行，比如要根据执行器的当前负载情况，要根据任务自身的特征进行分派执行；在执行器执行的过程中也可能会崩溃，退出，这时候需要将任务迁移到其他的执行器中。整个调度过程需要考虑到调度策略、FailOver、任务迁移等。接下来来看下任务调度的一个简单应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;任务调度应用：一条日志的历险&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4546925566343042&quot; data-type=&quot;png&quot; data-w=&quot;1236&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96UPDolgBG4nt23TgOiczcvTLFPyRlaoWmke2Rbh6ov9ZcxdC8mGHSbJg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图中原始日志为一条Nginx访问日志，其中包括IP、时间、Method、URL、UserAgent等信息，这样一些原始日志并不利于我们进行分析，比如我们想统计访问最高的Top 10 URL，通过命令处理是这样的：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cat nginx_access.log |awk &#x27;{&lt;span class=&quot;code-snippet__built_in&quot;&gt;print&lt;/span&gt; $&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;}&#x27;| &lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt;|uniq -&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;| &lt;span class=&quot;code-snippet__built_in&quot;&gt;sort&lt;/span&gt; -rn| head -&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt; | more&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;抛开命令的复杂性和原始日志的数据量不谈，即使需求稍微变化，命令就需要大量的改动，非常不利于维护，对日志进行分析的正确方式必然是使用分布式日志平台进行日志分析，原始日志蕴含着大量“信息”，但是这些信息的提取是需要一系列的流程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先是数据采集、需要通过Agent对分布在各个机器上的数据进行集中采集到日志平台，日志采集上来后需要进行清洗，比如对于Nginx访问日志使用正则提取，将时间、Method、URL等重要信息提取出来作为字段进行存储并进行索引构建，通过索引，我们可以使用类SQL的分析语法对日志进行分析、例如查看访问的Top 10 URL，用SQL来表达就会非常简洁清晰：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;url&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; cnt &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; cnt &lt;span class=&quot;code-snippet__keyword&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;业务系统只要在服务，日志就会不断产生，可以通过对流式的日志进行巡检，来达到系统异常的检测目的，当异常发生时，我们可以通过告警通知到系统运维人员。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;通用流程提取&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从这样一个日志分析系统可以提取出一些通用的流程，这些通用的流程可以概括为数据摄入、数据处理、数据监测、数据导出。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15151515151515152&quot; data-type=&quot;png&quot; data-w=&quot;1254&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96ichc5JvCp2icX8QJunj7tx2kM0LZDBE4ExrpM7QjQtzeu51amkkV0s6g/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;除了日志，系统还有Trace数据、Metric数据，它们是可观测性系统的三大支柱。这个流程也适用于可观测性服务平台，接下来来看下一个典型的可观测服务平台的流程构成。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;典型可观测服务平台数据流程&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4793741109530583&quot; data-type=&quot;png&quot; data-w=&quot;1406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96k3SZUbYQMXnEJKl6XbTWyCypPD5mB4Kz9RibXEA5PNnEONsR0zcwwmw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据摄入：在可观测服务平台首先需要扩展数据来源，数据源可能包括各类日志、消息队列Kafka、存储OSS、云监控数据等，也可以包括各类数据库数据，通过丰富数据源的摄入，可以对系统有全方位的观测。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据处理：在数据摄入到平台后，需要对数据进行清洗、加工，这个过程我们把他统称数据处理，数据加工可以理解为数据的各种变换和富华等，聚集加工支持对数据进行定时rolling up操作，比如每天计算过去一天汇总数据，提供信息密度更高的数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据监测：可观测性数据本身反应了系统的运行状态，系统通过对每个组件暴露特定的指标来暴露组件的健康程度，可以通过智能巡检算法对异常的指标进行监控，比如QPS或者Latency的陡增或陡降，当出现异常时可以通过告警通知给相关运维人员，在指标的基础上可以做出各种运维或者运营的大盘，在每天定时发送大盘到群里也是一种场景的需求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据导出：可观测性数据的价值往往随着时间产生衰减，那么对于长时间的日志类数据出于留档的目的可以进行导出到其他平台。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;从以上四个过程我们可以抽象出各类任务，分别负责摄入、处理、检测等，比如数据加工是一种常驻任务，需要持续对数据流进行处理，仪表盘订阅是一种定时任务，需要定时发出仪表盘到邮件或者工作群中。接下来将要介绍对各类任务的调度框架。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;可观测性平台的亿级任务调度框架设计可观测平台任务特点&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据上面对可观测平台任务的介绍，可以总结一个典型的可观测平台的任务的特点：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务复杂，任务类型多：数据摄入，仅数据摄入单个流程涉及数据源可能有几十上百个之多。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户量大，任务数数量多：由于是云上业务，每个客户都有大量的任务创建需求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SLA要求高：服务可用性要求高，后台服务是升级、迁移不能影响用户已有任务的运行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多租户：云上业务客户相互直接不能有影响。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;可观测平台任务调度设计目标&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5712328767123288&quot; data-type=&quot;png&quot; data-w=&quot;1460&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96yv9147kiaJtPevbjXO5xQeDjwzVknNnJ8YKjmPIZBh8vOxE1Qlgbe6Q/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据平台任务的特点，对于其调度框架，我们需要达到上图中的目标&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持异构任务：告警、仪表盘订阅、数据加工、聚集加工每种任务的特点不一样，比如告警是定时类任务、数据加工是常驻类任务，仪表盘订阅预览是一次性任务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;海量任务调度：对于单个告警任务，假如每分钟执行一次，一天就会有1440次调度，这个数量乘以用户数再乘以任务数，将是海量的任务调度；我们需要达到的目标是任务数的增加不会对打爆机器的性能，特别是要做到水平扩缩容，任务数或者调度次数增加只需要线性增加机器即可。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高可用：作为云上业务，需要达到后台服务升级或者重启、甚至宕机对用户任务运行无影响的目的，在用户层面和后台服务层面都需要具有任务运行的监控能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;简单高效的运维：对于后台服务需要提供可视化的运维大盘，可以直观的展示服务的问题；同时也要对服务进行告警配置，在服务升级、发布过程中可以尽量无人值守。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多租户：云上环境是天然有多租户场景，各个租户之间资源要做到严格隔离，相互之间不能有资源依赖、性能依赖。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可扩展性：面对客户的新增需求，未来需要支持更多的任务类型，比如已经有了MySQL、SqlServer的导入任务，在未来需要更多其他的数据库导入，这种情况下，我们需要做到不修改任务调度框架，只需要修改插件即可完成。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;API化：除了以上的需求，我们还需要做到任务的API化管控，对于云上用户，很多海外客户是使用API、Terraform来对云上资源做管控，所以要做到任务管理的API化。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;可观测平台任务调度框架总体概览&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.625&quot; data-type=&quot;png&quot; data-w=&quot;1504&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96k01l4EicwjicPSiatdz55gG8Nvhicic0cxicTFPGc7yL1M0iciaARvh191WIWw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于上述的调度设计目标，我们设计了可观测性任务调度框架，如上图所示，下面从下到上来介绍。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;存储层：主要包括任务的元数据存储和任务运行时的状态和快照存储。任务的元数据主要包括任务类型，任务配置、任务调度信息，都存储在了关系型数据库；任务的运行状态、快照存储在了分布式文件系统中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务层：提供了任务调度的核心功能，主要包括任务调度和任务执行两部分，分别对应前面讲的任务编排和任务执行模块。任务调度主要针对三种任务类型进行调度，包括常驻任务、定时任务、按需任务。任务执行支持多种执行引擎，包括presto、restful接口、K8s引擎和内部自研的ETL 2.0系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务层：业务层包括用户直接在控制台可以使用到的功能，包括告警监控、数据加工、重建索引、仪表盘订阅、聚集加工、各类数据源导入、智能巡检任务、和日志投递等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接入层：接入层使用Nginx和CGI对外提供服务，具有高可用，地域化部署等特性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;API/SDK/Terraform/控制台：在用户侧，可以使用控制台对各类任务进行管理，对于不同的任务提供了定制化的界面和监控，同时也可以使用API、SDK、Terraform对任务进行增删改查。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;任务可视化：在控制台我们提供了任务执行的可视化和任务监控的可视化，通过控制台用户可以看出看到任务的执行状态、执行历史等，还可以开启内置告警对任务进行监控。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;任务调度框架设计要点&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;接下来从几方面对任务调度框的设计要点进行介绍，主要包括以下几方面来介绍：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;异构任务模型抽象&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调度服务框架&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大规模任务支持&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务高可用设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;稳定性建设&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;任务模型抽象&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31985294117647056&quot; data-type=&quot;png&quot; data-w=&quot;1088&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96LichpZJeOl4BjfxhLWtXibD5nHEe8jibJa86l2na6fQZgpKyGtBsdv2icw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来看下任务模型的抽象：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;调度服务框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6776315789473685&quot; data-type=&quot;png&quot; data-w=&quot;1520&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96yiaibiaLkkOgtU0OO9CzE35Tz9lz0GjyFXKgy142AYiakXIPgG8aA4zuXQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;服务基础框架使用了Master-Worker架构，Master负责任务的分派和Worker的管控，Master将数据抽象为若干Partitions，然后将这些Partitions分派给不同的Worker，实现了对任务的分而治之，在Worker执行的过程中Master还也可以根据Worker的负载进行Partitions的动态迁移，同时在Worker重启升级过程中，Master也会对Partition进行移出和移入；&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;任务的调度主要在Worker层来实现，每个Worker负责拉取对应Partitions的任务，然后通过JobLoader对任务进行加载，注意：这里只会加载当前Worker对应Partitions的任务列表，然后Scheduler对任务进行调度的编排，这里会涉及常驻任务、定时任务、按需任务的调度，Scheduler将编排好的任务发送到JobExecutor进行执行，JobExecutor在执行的过程中需要实时对任务的状态进行持久化保存到RedoLog中,在下次Worker升级重新启动的过程中，需要从RedoLog中加载任务的状态，从而保证任务状态的准确性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;大规模任务支持&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5674603174603174&quot; data-type=&quot;png&quot; data-w=&quot;1512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96yDWLOpwBb3AicDymoyTLLYKgxGD8U1t9W5BcibocIRj1CgLLk7skQMXg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过任务服务框架的介绍，我们知道Partitions是Master与Worker沟通的桥梁，也是对大规模任务进行分而治之的介质。如上图所示，假设有N个任务，按照一定的哈希算法将N个任务映射到对应的Partition，因为Worker关联特定的Partition，这样Worker就可以跟任务关联起来，比如任务j1、j2对应的partition是p1，而p1对应的Worker是worker1，这样j1、j2就可以在worker1上执行。需要说明的如下：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Worker与Partition的对应关系并非一成不变，是一个动态的映射，在Worker重启或者负载较高时，其对应的Partition会迁移到其他的Worker上，所以Worker需要实现Partition的移入和移出操作。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务数量增加的时候，因为有Partition这个中间层，只需要增加Worker的数量就可以满足任务增长时的需求，达到水平扩展的目的。增加新Worker后，可以分担更多的Partition。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务高可用设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;服务的高可用主要是服务的可用性时间，作为后台服务肯定有重启、升级的需求，高可用场景主要涉及到Partition迁移的处理，在Worker重启、Worker负载较高时、Worker异常时，都会有Partition迁移的需求，在Partition迁移的过程中，任务也需要进行迁移，任务的迁移就涉及到状态的保留，类似CPU上进程的航线文切换。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41037735849056606&quot; data-type=&quot;png&quot; data-w=&quot;1272&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96TVe9vIF1olcX3ZQonEd4chGQjwqR3fnQt3ZRSXVhatHoNnw0lYUCdA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于任务的切换，我们使用了RedoLog的方式来保存任务的状态，一个任务可以被分为多个阶段，对应任务执行的状态机，在每个阶段执行时都对其进行内存Checkpoint的更新和RedoLog的更新，RedoLog是持久化到之前提到的分布式文件系统中，使用高性能的Append的方式进行顺序写入，在Partition迁移到新的Worker后，新的Worker在对RedoLog进行加载，就可以完成任务状态的恢复。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里涉及一个优化，RedoLog如果一直使用Append的方式进行写入，势必会造成RedoLog越来越膨胀，也会造成Worker加载Partition时速度变慢，对于这种情况，我们使用了Snapshot的方式，将过去一段时间的RedoLog进行合并，这样只需要在加载Partition时，加载Snapshot和Snaphost之后的RedoLog就可以减少文件读取的次数和开销，提高加载速度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;稳定性建设&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;稳定性建设主要涉及以下几方面内容：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户侧：在控制台我们针对各类任务提供了监控仪表盘和内置告警配置。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务侧：在后台，可以看到集群粒度任务的运行状态，便于后台运维人员进行服务的监控。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同时，对于任务的执行状态和历史都会存入特定的日志库中，以便出现问题时进行追溯和诊断。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;下面是一些服务侧的部分大盘示例，展示的是告警的一些执行状态。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5951704545454546&quot; data-type=&quot;png&quot; data-w=&quot;1408&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96KLAS9sqWe29KJ3AJJocQQYNG8ljZTWcw30yCMhMUAuDc3sr5iaI369A/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面是用户侧的任务监控状态和告警的展示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5486111111111112&quot; data-type=&quot;png&quot; data-w=&quot;1440&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96Pd3t2dvPUX9oyVk81iczfPiafWWTyId5eweExnSqOLiay4SsMA0z7sKrA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5861111111111111&quot; data-type=&quot;png&quot; data-w=&quot;1440&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96QziagM98V6uDEBtTIa9ItgnCc2wSUTfg5G4dJDFmPMBpRVzVuicxMvlg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;section&gt;&lt;span&gt;大规模应用&lt;/span&gt;&lt;/section&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在日志服务，任务的调度已经有了大规模的应用，下面是某地域单集群的任务的运行状态，因为告警是定时执行且使用场景广泛，其单日调度次数达到了千万级别，聚集加工在Rolling up场景中有很高场景的应用，也达到了百万级别；对于数据加工任务因为是常驻任务，调度频率低于类似告警类的定时任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来以一个聚集加工为例来看下任务的调度场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;典型任务：聚集加工&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5208333333333334&quot; data-type=&quot;png&quot; data-w=&quot;1056&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt961u7g82Qe6BibcjTgaAmClTh9Cz9FEsUIRv57PVDDS7xLl3oZ2lj0Scw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;聚集加工是通过定时对一段时间的数据进行聚集查询，然后将结果存入到另一个库中，从而将高信息密度的信息进行提取，相对于原始数据具有降维、低存储、高信息密度的特点。适合于定时分析、全局聚合的场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5569444444444445&quot; data-type=&quot;png&quot; data-w=&quot;1440&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96WPECcgQYsNg9FoTHazpt3iaAIyicOMIlKnfC81MuPia8tzxFeNSicR1TFw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里是一个聚集加工的执行状态示例，可以看到每个时间区间的执行情况，包括处理行数、处理数据量、处理结果情况，对于执行失败的任务，还可以进行手动重试。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于聚集加工并非定时执行这么简单的逻辑，在过程中需要处理超时、失败、延迟等场景，接下来对每种场景进行一个简单介绍。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;调度场景一：实例延迟执行&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;无论实例是否延迟执行，实例的调度时间都是根据调度规则预先生成的。虽然前面的实例发生延迟时，可能导致后面的实例也延迟执行，但通过追赶执行进度，可逐渐减少延迟，直到恢复准时运行。 &lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24199288256227758&quot; data-type=&quot;png&quot; data-w=&quot;1124&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96rEVTuhBiaSl4KvhRQIlEaO63lZyYVGH09jaicoDs33RPIostSeYWmibyw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调度场景二：从某个历史时间点开始执行聚集加工作业&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在当前时间点创建聚集加工作业后，按照调度规则对历史数据进行处理，从调度的开始时间创建补运行的实例，补运行的实例依次执行直到追上数据处理进度后，再按照预定计划执行新实例。 &lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2525597269624573&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96ibt88AHwlR2GuxU1AXvfzIh10EL4zgVuDDZe8ykwFm4w9diafLByHyIw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调度场景三：固定时间内执行聚集加工作业&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果需要对指定时间段的日志做调度，则可设置调度的时间范围。如果设置了调度的结束时间，则最后一个实例（调度时间小于调度结束时间）执行完成后，不再产生新的实例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24647887323943662&quot; data-type=&quot;png&quot; data-w=&quot;1136&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt96hvhaxOQ5LLxN0FMib3kSo9ruB1XsYEGdrNPK5Zq6n0xsLX4daCNuopw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调度场景四：修改调度配置对生成实例的影响&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;修改调度配置后，下一个实例按照新配置生成。一般建议同步修改SQL时间窗口、调度频率等配置，使得实例之间的SQL时间范围可以连续。 &lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26949152542372884&quot; data-type=&quot;png&quot; data-w=&quot;1180&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIPOVBF0ia0smk0cSTYxHt961nTY7RXkQXZg4Fw9jvRhr0eAM839c3UasD0kuia2QiauWb6414ojZBRQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调度场景五：重试失败的实例&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当重试次数超过您配置的最大重试次数或重试时间超过您配置的最大运行时间时，重试结束，该实例状态被置为失败，然后系统继续执行下一个实例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;展望&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;动态任务类型：增加对于动态任务类型的支持，例如更复杂的具有任务间依赖关系的任务调度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多租户优化：目前对于任务使用简单的Quota限制，未来对多租户的QoS进行的进一步细化，以支持更大的Quota设置。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;API优化、完善：目前的任务类型也在快速更新中，任务API的迭代速度还有些差距，需要增强任务API的优化，达到增加一种任务类型，不需要修改或者少量更新API的目的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;推荐阅读&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247508668&amp;amp;idx=1&amp;amp;sn=5a29aa4c1c5911a62696b6373d3650e0&amp;amp;chksm=e92a9fb3de5d16a5f018a32ca479528646cda1ac76c8625267fda75d986c1f613bd5817d05d5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何写出一篇好的技术方案？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;如何写出一篇好的技术方案？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;2.&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247508638&amp;amp;idx=1&amp;amp;sn=e6425733e85439970f6b94bbbda2e084&amp;amp;chksm=e92a9f91de5d1687a499d9714eaf6bea292171cafe7d9609cf64009e00e963ff5746cb4e4942&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;阿里10年沉淀｜那些技术实战中的架构设计方法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;阿里10年沉淀｜那些技术实战中的架构设计方法&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;3.&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247508471&amp;amp;idx=1&amp;amp;sn=0221ea266aa82519b0d1138bec7f7044&amp;amp;chksm=e92a9cf8de5d15ee9b3e1e02d36bc1dddad1c8edeca00744be5628a6986bac2cad58ad59ab72&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何做好“防御性编码”？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;如何做好“防御性编码”？&lt;/span&gt;&lt;span/&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;GTS云巧乘风者征文大赛上线！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;云巧是“组装式应用”理念的落地，助力大家提升交付速度，提高交付质量，降低用工成本。参加云巧征文大赛，不仅可以让专业导师团评估，更有888元猫超卡和天猫精灵Sound等你来～前100名参加就可获得38元天猫超市卡哦，先到先得！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;点击阅读原文查看详情。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;

          

          
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>