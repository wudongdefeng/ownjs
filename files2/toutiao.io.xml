<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>000d2d7c31d117de113d43ef073f86a1</guid>
<title>美团开放平台SDK自动生成技术与实践</title>
<link>https://toutiao.io/k/xh6e3lb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;89&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10841121495327102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsE4Nicq51WdnKEhcaEEYDS4h6jA6JOZ3fnENgFV1B6ianDTqaQ3nzNOjvHUB79ocldrVj4YlkAW6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总第549&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2023年 第001篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;103&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBic5ADGrKxgSd0tibyMiasOHXjb46qFBw7PTfuWAxXzWq32lDkL05icwkMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot; data-width=&quot;100%&quot; opacity=&quot;&quot; title=&quot;undefined&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; data-style=&quot;text-align: left; font-size: 14px; color: inherit;&quot;&gt;&lt;section&gt;&lt;span&gt;美团开放平台为整个美团提供了20+业务场景的开放API，为了使开发者能够快速且安全的接入美团开放平台，美团开放平台提供了多种语言的SDK来提高开发者的接入效率。本文介绍了美团开放平台如何自动生成SDK代码的相关技术实现方案，希望对大家能够有所帮助或者启发。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1. 引言&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2. SDK自动生成技术详解&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.1 整体设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.2 自动生成参数模型代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.3 自动生成API调用示例代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2.4 持续集成和持续发布&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3. 结语&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4. 写在后面&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 引言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://developer.meituan.com&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;美团开放平台&lt;/span&gt;&lt;/a&gt;&lt;span&gt;对外提供了外卖、团购、配送等20余个业务场景的OpenAPI，供第三方开发者搭建应用时使用，是美团系统与外部系统通讯的最重要平台。本文主要讲述开放平台如何通过技术手段自动生成支持接口参数富模型和多种编程语言的SDK，以提高开发者对接开放平台API的效率。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;286&quot; data-ratio=&quot;0.5628458498023715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCswloiaXQiasFBibFwk6tnC8sOgG4ew0zc66brDhXzvFSViad1jAgt94L9Q/640?wx_fmt=png&quot; data-w=&quot;1265&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;美团开放平台架构&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.1 背景&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;美团开放平台将美团各类业务提供的扩展服务封装成一系列应用程序编程接口（&lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt;）对外开放，供第三方开发者使用。开发者可通过调用开放平台提供的OpenAPI获取数据和能力，以实现自身系统与美团系统协同工作的业务逻辑。以外卖业务场景为例，开发者可以在自己为外卖商户开发的应用中通过调用美团开放平台提供的API，提供外卖订单查询、接单、订单管理等一系列功能。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;272&quot; data-ratio=&quot;0.487378640776699&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCYNO0D05VHlXRE22TvzdicY1XZTY4PrccEhACwtGcYuMBNUJGXm58rsA/640?wx_fmt=png&quot; data-w=&quot;1030&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;开放平台为开发者提供的OpenAPI以HTTP接口的形式提供。以平台提供的订单查询接口为例，对应的HTTP请求如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;POST https://api-open-cater.meituan.com/api/order/queryById&lt;br/&gt;Content-Type: application/x-www-form-urlencoded;charset=utf-8&lt;br/&gt;&lt;br/&gt;appAuthToken=eeee860a3d2a8b73cfb6604b136d6734283510c4e92282&amp;amp;&lt;br/&gt;charset=utf-8&amp;amp;&lt;br/&gt;developerId=106158&amp;amp;&lt;br/&gt;sign=4656285a4c2493e279d929b8b9f4e29310da8b2b&amp;amp;&lt;br/&gt;timestamp=1618543567&amp;amp;&lt;br/&gt;biz={&quot;orderId&quot;: &quot;10046789912119&quot;}&lt;br/&gt;&lt;br/&gt;Response:{&lt;br/&gt;  &quot;orderId&quot;:&quot;10046789912119&quot;,&lt;br/&gt;  &quot;payAmount&quot;:&quot;45.67&quot;,&lt;br/&gt;  &quot;status&quot;:7,&lt;br/&gt;  ......,&lt;br/&gt;  &quot;products&quot;:[{&quot;pid&quot;:&quot;8213&quot;,&quot;num&quot;:2,...,&quot;price&quot;:&quot;3.67&quot;}{&quot;pid&quot;:&quot;6556&quot;,&quot;num&quot;:1,...,&quot;price&quot;:&quot;11.99&quot;}]&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;由上述示例可以看出，美团开放平台提供给开发者的接口契约较为复杂，其中包含了业务规则复杂及安全性要求高等原因。若开发者需要直接从0到1编码对接平台提供的HTTP API，需要关注通信协议、接口契约规范、认证标识传递和安全签名等细节，成本较高。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着业务的发展，平台支持的OpenAPI数量在近两年增长约一倍，达到近1000个，平台运营和研发人员需要投入越来越多的精力去帮助开发者解决接口对接过程中的疑难问题。因此，提供SDK以帮助开发者提高开发对接效率，变得十分有必要。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.2 SDK目标概述&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;SDK，英文名称为 Software Development Kit，即软件开发工具包，广义上指辅助开发某一类软件的相关工具、文档和范例的集合。在开放平台的场景，我们为开发者提供的SDK应能为其屏蔽调用OpenAPI的通信协议、参数传递规范、接口基础契约（&lt;/span&gt;&lt;span&gt;如时间戳、安全签名&lt;/span&gt;&lt;span&gt;）等细节，以降低其对接平台API所需的开发成本。具备基本功能的开放平台SDK的架构和功能模块如下所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;377&quot; data-ratio=&quot;0.675392670157068&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCXPmm0D3weA0vqXsY0nV95bI76FAwm54IF63EshoZJz8shM4hDwbLYg/640?wx_fmt=png&quot; data-w=&quot;1146&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从使用SDK的开发者角度来看，基于SDK封装的基础功能来编写调用开放平台接口的代码，大致逻辑如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;MeituanClient client = DefaultMeituanClient.builder(developerId, signKey).build();&lt;br/&gt;&lt;span&gt;//设置请求参数&lt;/span&gt;&lt;br/&gt;MeituanRequest request = &lt;span&gt;new&lt;/span&gt; MeituanRequest(&lt;span&gt;&quot;/api/order/queryById&quot;&lt;/span&gt;);&lt;br/&gt;request.setParam(&lt;span&gt;&quot;orderId&quot;&lt;/span&gt;,&lt;span&gt;&quot;10046789912119&quot;&lt;/span&gt;);&lt;br/&gt;MeituanResponse response = client.invokeApi(req);&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(response.isSuccess()) {&lt;br/&gt;  &lt;span&gt;long&lt;/span&gt; price = (&lt;span&gt;long&lt;/span&gt;)response.getField(&lt;span&gt;&quot;price&quot;&lt;/span&gt;);&lt;br/&gt;  String phone = response.getField(&lt;span&gt;&quot;customerPhone&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; orderStatus = (&lt;span&gt;int&lt;/span&gt;)response.getField(&lt;span&gt;&quot;status&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;//完成业务逻辑&lt;/span&gt;&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  log.warn(&lt;span&gt;&quot;query order failed with response={}&quot;&lt;/span&gt;, response);&lt;br/&gt;  &lt;span&gt;//处理接口调用失败的逻辑&lt;/span&gt;&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;从上述代码可以看出，提供基础功能的SDK已经能够为使用者提供较大的便利。相比从零开始编码对接OpenAPI，使用SDK可以帮助开发者省去处理通信协议、公共参数放置、安全签名计算和返回状态码解析的工作量。但开发者在编写代码设置API的业务参数字段的环节，仍需对照API文档逐个手工填充字段名并按字段类型赋值，并且在获取API返回的业务字段时也需自主填充字段名并解析数据类型，存在较大的不便且易出错。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为解决此问题，我们需要在SDK的能力上更进一步提供对参数富模型的支持，即为每个API提供模型化封装的请求参数和返回参数结构，让使用SDK的开发者可以更加专注于业务逻辑的开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在SDK加入参数富模型的支持后，从使用者的角度来看，需要编写的代码如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;MeituanClient client = DefaultMeituanClient.builder(developerId, signKey).build();&lt;br/&gt;&lt;span&gt;//设置请求参数&lt;/span&gt;&lt;br/&gt;QueryOrderRequest request = &lt;span&gt;new&lt;/span&gt; QueryOrderRequest();&lt;br/&gt;request.setOrderId(&lt;span&gt;&quot;10046789912119&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;//调用接口&lt;/span&gt;&lt;br/&gt;MeituanResponse&amp;lt;QueryOrderResponse&amp;gt; response = client.invokeApi(req);&lt;br/&gt;&lt;span&gt;//处理接口返回&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(response.isSuccess()) {&lt;br/&gt;  QueryOrderResponse orderResponse = response.getData();&lt;br/&gt;  &lt;span&gt;long&lt;/span&gt; price = orderResponse.getPrice();&lt;br/&gt;  String phone = orderResponse.getCustomerPhone();&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; orderStatus = orderResponse.getStatus();&lt;br/&gt;  log.info(&lt;span&gt;&quot;query order finish, price={}, orderStatus={}&quot;&lt;/span&gt;, price, phone, orderStatus);&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  log.warn(&lt;span&gt;&quot;query order failed with response={}&quot;&lt;/span&gt;, response);&lt;br/&gt;  &lt;span&gt;//处理接口调用失败的逻辑&lt;/span&gt;&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;可以看出，参数富模型功能可以进一步减少开发者使用SDK的复杂度。以Java语言版本为例，QueryOrderRequest和QueryOrderResponse两个富模型类中封装了API的请求参数和返回参数的所有字段名、字段类型和字段校验规则等信息，开发者可简单使用字段的getter和setter方法完成对字段的赋值和取值操作，大幅降低了理解成本和出错可能。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;虽然在SDK中支持参数富模型功能，可以有效提高使用者的效率，但也会带来SDK的开发和维护成本增加。如果采用纯人工的方式去开发维护SDK中支持的所有API的参数模型代码，需要投入的开发维护成本与SDK支持的编程语言数量和API数量呈正相关性，其成本公式为：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.09154929577464789&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCje6InZY7bntu3YEEVDH6ATUFnVb377SaNXXCbm4IGSYs0l7bULicKYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;852&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上述公式可以看出，当SDK所需支持的API数量和编程语言数量达到一定数量时，通过纯人工编码去开发和维护SDK的成本会非常高。需要通过技术手段自动生成和测试SDK中的绝大部分代码，以达到在成本可控的前提下，为开发者提供支持多种编程语言版本的富模型SDK的目标。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. SDK自动生成技术详解&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.1 整体设计&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;要为开发者提供一个支持参数富模型功能的OpenAPI SDK，我们需要实现以下主要功能：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;通信协议封装&lt;/strong&gt;：让开发者无需关注调用API的通信协议和通信逻辑。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;接口基础契约封装&lt;/strong&gt;：让开发者无需关注调用API的参数传递格式、时间戳、安全签名、返回Code码处理等细节。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;请求参数模型封装&lt;/strong&gt;：让开发者便捷地设置API请求参数。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;返回参数模型封装&lt;/strong&gt;：让开发者便捷地使用API返回的数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;210&quot; data-ratio=&quot;0.36387782204515273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCdWzXGdYibuuUpz7vH7BQWVX490wqOFk3ldapdprmqicj6HxnpOZEjqBg/640?wx_fmt=png&quot; data-w=&quot;1506&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;其中，通信协议封装和接口基础契约封装是一次性工作，并且其逻辑是相对稳定的。&lt;/span&gt;&lt;span&gt;对于SDK所需支持的每一种编程语言，只需投入有限的成本开发一次对应代码逻辑，即可支撑SDK的整个生命周期。&lt;/span&gt;&lt;span&gt;而要为平台开放的1000余个API提供支持多种编程语言的参数富模型功能，靠人工编写和维护代码是极其低效的，我们考虑通过代码自动生成技术，对SDK中的参数富模型代码进行自动化生成。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;更进一步，在实现了参数富模型代码自动生成后，我们可以通过持续集成（&lt;/span&gt;&lt;span&gt;Continious Integration&lt;/span&gt;&lt;span&gt;）和持续发布（&lt;/span&gt;&lt;span&gt;Continuous Delivery&lt;/span&gt;&lt;span&gt;）技术，将SDK的生成、测试和发布流程也尽可能地做到自动化。整体的SDK自动生成流程设计如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;127&quot; data-ratio=&quot;0.22075782537067545&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCzEHMNSa3h1OYAS6oOSRM3IZaR2QaianP5737DyXIezZL7UBdErfg1xQ/640?wx_fmt=png&quot; data-w=&quot;2428&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;实现了以上流程后，即可做到在开放平台的任意API的参数模型发生变化时，由系统自动生成和发布最新版本的SDK供开发者使用。&lt;/span&gt;&lt;span&gt;我们将在下文详述如何通过代码自动生成、持续集成和持续发布等技术手段实现上述流程。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 自动生成参数模型代码&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我们最终的目标是为开放平台的每个OpenAPI，自动生成供SDK使用的请求参数模型代码（&lt;/span&gt;&lt;span&gt;Request类&lt;/span&gt;&lt;span&gt;）、返回参数模型代码（&lt;/span&gt;&lt;span&gt;Response类&lt;/span&gt;&lt;span&gt;）和调用示例代码（&lt;/span&gt;&lt;span&gt;Example&lt;/span&gt;&lt;span&gt;），并且代码自动生成机制要支持SDK适配的多种编程语言。以Java和C#编程语言为例，我们要生成的目标代码如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;379&quot; data-ratio=&quot;0.655705996131528&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCKopL8UOSYpXGbsENF2A4fBFb8RQrA9mbq1Z5KvOsYdN8ib4tJd1ibJdw/640?wx_fmt=png&quot; data-w=&quot;2068&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;从上面的示例中可以看出，在请求参数模型（&lt;/span&gt;&lt;span&gt;Request类&lt;/span&gt;&lt;span&gt;）中需要生成Request Path、鉴权配置、字段强类型定义、字段取值、赋值及校验逻辑等代码。在返回参数模型（&lt;/span&gt;&lt;span&gt;Response类&lt;/span&gt;&lt;span&gt;）中，需要生成接口返回的各个数据字段的强类型定义、取值逻辑及校验规则。调用示例代码则需要包含请求参数赋值、发起接口调用和处理接口返回数据等相关逻辑。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;要达成上述目标，首先需要考虑的是代码自动生成技术的选型，目前业界主流的代码生成技术分为以下几类：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;105&quot; data-ratio=&quot;0.18118466898954705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCX870DyOhMsWJwAUHf0ic504Xwf7EOjUibyNRmdWCzibxokM9iayFkJmEJA/640?wx_fmt=png&quot; data-w=&quot;1722&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于模版编排生成代码&lt;/strong&gt;：最原始最简单也是目前应用最广泛的一种代码生成方式。包括后端MVC框架的Controller、Service、DAO层模式化代码一键生成，还有前端Vue CLI 和Create-React-App两款脚手架的代码生成，都属于此类。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于可视化UI生成代码&lt;/strong&gt;：目前市场上运用得很广的一门技术，也被称为代码可视化生成工具。从Eclipse的Web可视化编辑器，到.NET Framework提供的MVC，及Winform界面及控件代码可视化拖拽生成，到汽车行业广泛使用的可视化原型搭建工具（&lt;/span&gt;&lt;span&gt;自动生成C代码&lt;/span&gt;&lt;span&gt;）都属于此类。在近几年比较火的低代码平台（&lt;/span&gt;&lt;span&gt;如aPaaS&lt;/span&gt;&lt;span&gt;）中，通过可视化UI生成代码的技术也被大量使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于代码语料生成代码&lt;/strong&gt;：基于代码语料生产代码的前提是要有足够的语料，例如伪代码/中间语言/描述性代码模板，再基于一套生成规则去生成目标代码。常见的落地场景包括RPC框架中基于IDL（&lt;/span&gt;&lt;span&gt;Interface description language，接口描述语言&lt;/span&gt;&lt;span&gt;）自动生成多种编程语言的RPC Client和Service代码，以及IDE插件中的代码自动生成功能（&lt;/span&gt;&lt;span&gt;例如Eclipse的&lt;/span&gt;&lt;a href=&quot;https://marketplace.eclipse.org/content/telosys-tools&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;telosys&lt;/span&gt;&lt;/a&gt;&lt;span&gt;插件可通过DSL生成多种语言代码&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;基于人工智能技术生成代码&lt;/strong&gt;：属于比较前沿的技术范畴，多和AI领域的图像识别和机器学习技术结合。现有的一些典型案例包括：微软开发的可将手绘图转化HTML代码的智能化代码生成工具&lt;/span&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/ai/ai-lab-sketch2code&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;sketch2code&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，基于AI技术自动生成UI逻辑的&lt;/span&gt;&lt;a href=&quot;https://github.com/teleporthq&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;teleporthq&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;考虑到开放平台SDK中，需要自动生成的OpenAPI参数富模型代码和调用示例代码均具备相对较强的规则性和模式性，我们选择基于代码语料自动生成代码的技术路线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于代码语料自动生成代码需要“语料”+“规则”两个核心元素，我们可以通过解析API元数据并结合领域专用语言（&lt;/span&gt;&lt;span&gt;DSL&lt;/span&gt;&lt;span&gt;）作为语料模板，生成代码语料，再基于语料特性为不同的编程语言定制代码生成规则，最终将“语料”+“规则”输入代码生成器以完成目标代码的生成。整体流程如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;560&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;351&quot; data-ratio=&quot;0.6261808367071525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCXm3kyATwXASmiaiamibzpZ2lVibUmMzvbUdDpMYTNM5OJVV7Bd6rlGnPKg/640?wx_fmt=png&quot; data-w=&quot;1482&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在上述流程中，首先关注作为代码语料生成数据源的API元数据，其来源于开放平台实现的零编码API网关底层维护的基础配置。开放平台网关基于API元数据配置化的技术，可做到零编码将业务服务的RPC接口转化为HTTP协议的API进行开放。其基本运行结构如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;440&quot; data-ratio=&quot;0.7612456747404844&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCFqOL3Cib5Hic26jTg1KFibdT0ib0fDf8SlibMmSWPOepzcKia9YiaVkGBPOiaA/640?wx_fmt=png&quot; data-w=&quot;1156&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;作为驱动开放平台网关运行的核心数据，API元数据中包含了HTTP Method、URL、请求参数、返回参数等信息。&lt;/span&gt;&lt;span&gt;在参数信息中，又以树形结构记录了每个参数字段的字段名、字段类型、字段描述、校验规则和示例值。&lt;/span&gt;&lt;span&gt;我们以“按订单id查询订单详情”的API为例，其元数据中和SDK生成相关的数据如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;APIGroup:waimai&lt;/span&gt;&lt;br/&gt;&lt;span&gt;APISubGroup:order&lt;/span&gt;&lt;br/&gt;&lt;span&gt;APIName:&lt;/span&gt; &lt;span&gt;order_query_by_id&lt;/span&gt;&lt;br/&gt;&lt;span&gt;HTTP METHOD:&lt;/span&gt; &lt;span&gt;POST&lt;/span&gt;&lt;br/&gt;&lt;span&gt;HTTP PATH:&lt;/span&gt; &lt;span&gt;/api/order/queryById&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Description:&lt;/span&gt; &lt;span&gt;按订单id查询订单详情&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Request&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;orderId&lt;/span&gt; &lt;span&gt;LONG&lt;/span&gt; &lt;span&gt;NOT_NULL&lt;/span&gt; &lt;span&gt;要查询的订单的id&lt;/span&gt; &lt;span&gt;example:1000224201796844308&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Response&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;orderId&lt;/span&gt;  &lt;span&gt;LONG&lt;/span&gt; &lt;span&gt;NOT_NULL&lt;/span&gt; &lt;span&gt;订单id&lt;/span&gt;  &lt;span&gt;example:1000224201796844308&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;price&lt;/span&gt;  &lt;span&gt;LONG&lt;/span&gt; &lt;span&gt;NOT_NULL&lt;/span&gt; &lt;span&gt;订单金额（单位为人民币“分”）&lt;/span&gt; &lt;span&gt;example:3308&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;phone&lt;/span&gt;  &lt;span&gt;STRING&lt;/span&gt;  &lt;span&gt;顾客联系电话&lt;/span&gt;   &lt;span&gt;example:&quot;13000000002&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;products&lt;/span&gt;  &lt;span&gt;ARRAY&amp;lt;Product&amp;gt;&lt;/span&gt;  &lt;span&gt;订单商品列表&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;pid&lt;/span&gt;  &lt;span&gt;LONG&lt;/span&gt;  &lt;span&gt;商品id&lt;/span&gt;   &lt;span&gt;example:&quot;13000000002&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;  &lt;span&gt;String&lt;/span&gt;  &lt;span&gt;商品名&lt;/span&gt;  &lt;span&gt;example:&quot;珍珠奶茶&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;num&lt;/span&gt;  &lt;span&gt;INTEGER&lt;/span&gt;  &lt;span&gt;商品数量&lt;/span&gt;  &lt;span&gt;example:1&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;price&lt;/span&gt;  &lt;span&gt;LONG&lt;/span&gt;  &lt;span&gt;商品单价&lt;/span&gt;   &lt;span&gt;example:1199&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;properties&lt;/span&gt;  &lt;span&gt;ARRAY&amp;lt;Property&amp;gt;&lt;/span&gt;  &lt;span&gt;商品属性列表&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;STRING&lt;/span&gt; &lt;span&gt;商品属性名&lt;/span&gt;  &lt;span&gt;example:&quot;甜度&quot;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;value&lt;/span&gt; &lt;span&gt;STRING&lt;/span&gt; &lt;span&gt;商品属性值&lt;/span&gt;  &lt;span&gt;example:&quot;七分糖&quot;&lt;/span&gt;&lt;br/&gt;     &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;remark&lt;/span&gt;  &lt;span&gt;STRING&lt;/span&gt;  &lt;span&gt;商品备注&lt;/span&gt;  &lt;span&gt;example:&quot;请做常温的&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;|-&lt;/span&gt; &lt;span&gt;status&lt;/span&gt;  &lt;span&gt;INTEGER&lt;/span&gt;  &lt;span&gt;订单状态&lt;/span&gt;  &lt;span&gt;example:7&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;以上信息足以支撑我们为SDK生成参数富模型和调用示例代码。下一步我们需要开始处理代码语料，并为最终的代码自动化生成做好准备。不同编程语言所需的代码语料有所差异，但同一类编程语言（&lt;/span&gt;&lt;span&gt;如Java和C#都是面向对象的编程语言&lt;/span&gt;&lt;span&gt;）大致相同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以生成Java SDK中的参数富模型代码为例，需要用到的代码语料包含两部分。第一部分为类的基本信息，由元数据解析器在解析API的元数据时生成，其包含的内容和具体生成方式如下表所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;234&quot; data-ratio=&quot;0.4040485829959514&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCdq5hBpSYPyawDoZYo7XJmb6WBAL510MibwoEuQx9luVdwqqdYlicvEpQ/640?wx_fmt=png&quot; data-w=&quot;2470&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;第二部分为语料模板，我们以DSL（&lt;/span&gt;&lt;span&gt;Domain Specific Language&lt;/span&gt;&lt;span&gt;）作为中间语言加以描述，如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&amp;lt;&lt;span&gt;@class&lt;/span&gt; className=className metaInfo=javaApiMeta baseClass=baseClass interfaces=interfaces classDesc=classDesc &lt;span&gt;package&lt;/span&gt;=packageName importPackages=importPackages&amp;gt;&lt;br/&gt;    &amp;lt;#-- 静态字段   --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; staticFields?? &amp;amp;&amp;amp; (staticFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;#list staticFields as param&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@staticField&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;        &amp;lt;/#list&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;#-- 字段   --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; privateFields?? &amp;amp;&amp;amp; (privateFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;#list privateFields as param&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@field&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;        &amp;lt;/#list&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;   &amp;lt;#-- Getter/Setter --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; privateFields?? &amp;amp;&amp;amp; (privateFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;#list privateFields as param&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@getterMethod&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@setterMethod&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;        &amp;lt;/#list&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;    &lt;br/&gt;    &amp;lt;#-- 静态字段Getter --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; staticFields?? &amp;amp;&amp;amp; (staticFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;#list staticFields as param&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;@getterMethod&lt;/span&gt; param=param/&amp;gt;&lt;br/&gt;        &amp;lt;/#list&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; javaApiMeta?has_content&amp;gt;&lt;br/&gt;        &amp;lt;&lt;span&gt;@deserializeResponse&lt;/span&gt; metaInfo=javaApiMeta/&amp;gt;&lt;br/&gt;        &amp;lt;&lt;span&gt;@serializeToJson&lt;/span&gt; metaInfo=javaApiMeta/&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;    &amp;lt;#-- toString方法 --&amp;gt;&lt;br/&gt;    &amp;lt;#&lt;span&gt;if&lt;/span&gt; privateFields?? &amp;amp;&amp;amp; (privateFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;gt;&lt;br/&gt;        &amp;lt;&lt;span&gt;@toString&lt;/span&gt; className=className params=privateFields/&amp;gt;&lt;br/&gt;    &amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/&lt;span&gt;@class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;有了上述的代码语料，我们即可通过语言转换引擎生成Java代码。我们将解析好的API元数据作为输入，执行基于DSL的语言转换引擎。语言转换引擎通过执行宏命令将要生成的代码类的基本信息在DSL语料模板中进行填充，最终得到Java编程语言的目标类及其附属类的代码。以生成Response类代码为例，代码生成的具体执行过程如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;161&quot; data-ratio=&quot;0.2789005658852061&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCgCsmGtGibEibCMSgpCBLyQMWKLNuiaBp7ibIFL57TOaS2G1F5YicXib8Kr4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2474&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;Request和Response类中其余的&lt;/span&gt;&lt;code&gt;&lt;span&gt;getter&lt;/span&gt;&lt;/code&gt;&lt;span&gt;方法、&lt;/span&gt;&lt;code&gt;&lt;span&gt;setter&lt;/span&gt;&lt;/code&gt;&lt;span&gt;方法、类注解等元素的生成原理和步骤均和以上相同，此处不再赘述。在DSL语料模板中所有的元素处理完成后，我们即可得到供Java编程语言使用的请求参数类和返回参数类的完整代码。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于其他的编程语言（&lt;/span&gt;&lt;span&gt;例如Python&lt;/span&gt;&lt;span&gt;），我们使用的API元数据和元数据解析逻辑和Java是一致的，不同点在于DSL语料模板和语言转换引擎。当需要对SDK新增一种编程语言的支持时，我们只需要对目标语言建立DSL语料模板并提供相应的转换逻辑，即可支持该语言的请求参数类和返回参数类的代码自动生成。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.3 自动生成API调用示例代码&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;通过同样的技术手段，我们还可以自动生成每个OpenAPI的调用示例代码，并将示例代码展示接口文档中供开发者参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;调用示例代码的生成的逻辑相对参数模型代码更加简单。我们使用API元数据中的类名和字段信息（&lt;/span&gt;&lt;span&gt;元数据中也包含了每个字段的examle值，可用于在代码示例中生成字段赋值的逻辑&lt;/span&gt;&lt;span&gt;）填入代码语料中，再执行语言转换引擎生成目标代码即可。以Java编程语言为例，用于生成API调用示例代码的DSL语料模板如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&amp;lt;#setting number_format=&lt;span&gt;&quot;computer&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;MeituanClient meituanClient = DefaultMeituanClient.builder(&lt;span&gt;10000L&lt;/span&gt;, &lt;span&gt;&quot;xxxxx&quot;&lt;/span&gt;).build();&lt;br/&gt;&lt;br/&gt;&amp;lt;#assign reqVarName = className?uncap_first/&amp;gt;&lt;br/&gt;${className} ${reqVarName} = &lt;span&gt;new&lt;/span&gt; ${className}();&lt;br/&gt;&lt;br/&gt;&amp;lt;#&lt;span&gt;if&lt;/span&gt; privateFields?? &amp;amp;&amp;amp; (privateFields?size &amp;gt; &lt;span&gt;0&lt;/span&gt;)&amp;gt;&lt;br/&gt;&amp;lt;#list privateFields as field&amp;gt;&lt;br/&gt;${reqVarName}.set${field.fieldName?cap_first}(${field.exampleValue!&lt;span&gt;&quot;&quot;&lt;/span&gt;});&lt;br/&gt;&amp;lt;/#list&amp;gt;&lt;br/&gt;&amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;#&lt;span&gt;if&lt;/span&gt; javaApiMeta.needAuth&amp;gt;&lt;br/&gt;String appAuthToken = &lt;span&gt;&quot;xxxx&quot;&lt;/span&gt;;&lt;br/&gt;MeituanResponse&amp;lt;${javaApiMeta.responseClass}&amp;gt; response = meituanClient.invokeApi(request, appAuthToken);&lt;br/&gt;&amp;lt;#&lt;span&gt;else&lt;/span&gt; &amp;gt;&lt;br/&gt;MeituanResponse&amp;lt;${javaApiMeta.responseClass}&amp;gt; response = meituanClient.invokeApi(request);&lt;br/&gt;&amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (response.isSuccess()) {&lt;br/&gt;&amp;lt;#&lt;span&gt;if&lt;/span&gt; javaApiMeta.responseClass == &lt;span&gt;&quot;Void&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;调用成功&quot;&lt;/span&gt;);&lt;br/&gt;&amp;lt;#&lt;span&gt;else&lt;/span&gt;&amp;gt;&lt;br/&gt;    ${javaApiMeta.responseClass} resp = response.getData();&lt;br/&gt;    System.out.println(resp);&lt;br/&gt;&amp;lt;/#&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;调用失败&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;在使用API元数据和代码语料模板执行基于DSL的语言转换引擎后，生成的API调用示例代码如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;MeituanClient client = DefaultMeituanClient.builder(developerId, signKey).build();&lt;br/&gt;&lt;span&gt;//设置请求参数&lt;/span&gt;&lt;br/&gt;OrderQueryByIdRequest request = &lt;span&gt;new&lt;/span&gt; OrderQueryByIdRequest();&lt;br/&gt;request.setOrderId(&lt;span&gt;1000224201796844308L&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;//调用接口&lt;/span&gt;&lt;br/&gt;MeituanResponse&amp;lt;OrderQueryByIdResponse&amp;gt; response = client.invokeApi(req);&lt;br/&gt;&lt;span&gt;//处理接口返回&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(response.isSuccess()) {&lt;br/&gt;  OrderQueryByIdResponse orderResponse = response.getData();&lt;br/&gt;  System.out.println(orderResponse);&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  System.out.println(&lt;span&gt;&quot;调用失败&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;可以看出，我们生成的API调用示例代码可以为开发者呈现出每个请求参数赋值的示例逻辑，可有效降低开发者在对接API时的理解成本。后续我们可以进一步优化DSL语料模板，在示例代码中增加对返回数据结构中各个字段的取值逻辑示范，以进一步降低开发者在处理API返回数据时的理解和开发成本。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.4 持续集成和持续发布&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;搞定参数富模型代码和调用示例代码的自动生成后，下一步是通过持续集成和持续发布技术，确保开发者在任何时刻均能获取到最新版本的SDK。传统由人工编译、测试和上传发布SDK的模式，开发者得到SDK版本更新的周期短则数周，长则数月。我们的目标是将这个周期缩短到分钟级别：当SDK的基础逻辑和API参数模型有任何变更发生时，通过持续集成和持续发布的能力，在数分钟内将包含此变更的新版本SDK发布给开发者使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们基于美团自研的流水线引擎来驱动SDK的持续集成和持续发布。流水线的执行可以看作是对生成SDK的“原材料”一步步加工，最终交付到线上的过程。先通过下图了解整体流程：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;374&quot; data-ratio=&quot;0.6477438136826783&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCnVcia1QTjYCJCMtcxgN8Vn40QibXSmzsCPw3hxPPTeEqiaaibA3DxT2XcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1374&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;首先我们监听可能导致SDK需要发布的变更，包括通过Binlog机制监听API元数据的变更，以及通过Git Hook机制监听SDK基础逻辑代码仓库Master分支的变更。一旦监听到有变更产生，通过触发器去触发SDK持续集成和发布流水线的运作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;流水线开始运作后，首先执行SDK构建组件，SDK构建组件会并发执行两个操作：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;获取SDK基础逻辑代码（&lt;/span&gt;&lt;span&gt;人工编写&lt;/span&gt;&lt;span&gt;）并完成静态代码检查；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;拉取API元数据并自动生成参数富模型代码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;以上两个操作完成后，执行代码合并和代码编译，将结果提交到流水线执行下一个步骤。接下来由自动化测试组件完成对SDK的单元测试和端到端自动化测试，通过后提交到流水线执行下一个步骤。最后由自动发布组件完成SDK的打包、上传、下载链接生成和版本信息生成等一系列操作，并最终将最新版本SDK发布到官网供开发者下载。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 结语&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;通过上述能力的建设，我们打通了SDK自动生成的整个环节，以自动化的方式完成代码生成、构建、测试、集成、发布等一系列行为，最终实现了在低人力投入的前提下持续向开发者交付最新版本SDK的目标。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;通过最近半年数据的对比，我们可以看出开发者使用SDK后在接口对接环节遇到的疑难问题明显减少。基本达到了我们最初提高开发者接入效率，降低平台研发和运营处理工单成本的目标。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;195&quot; data-ratio=&quot;0.33731739707835323&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCDJRlzM9Tk0vzxlLQ8niaUmWLnl63ibcqZhkj5jqYM5BBG2WqophIQiciaA/640?wx_fmt=png&quot; data-w=&quot;1506&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;后续，我们将会计划继续完善SDK的代码自动生成逻辑，并为SDK添加更多编程语言的支持，为接入美团开放平台的开发者提供更好的体验。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 写在后面&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;不久前，“美团开放平台”正式获批智慧生活国家新一代人工智能开放创新平台，&lt;/span&gt;&lt;span&gt;这是美团&lt;/span&gt;&lt;a href=&quot;https://developer.meituan.com/isv/announcement/detail?dockey=anno-all&amp;amp;id=announcement-1733&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;第一个国家级科研平台&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;span&gt;此前，已有百度、阿里、腾讯等15家公司先后获批建设。&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.66328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsWEIdq23IicZrgriarOAwyYNCRBERMBXwYDfJcXAqqgMwI9p0x9Iz61qzEXK7yRrlB2QCqS8Pia1tZtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;国家新一代人工智能开放创新平台被称为“人工智能国家队”，是聚焦人工智能重点细分领域，充分发挥行业领军企业的引领示范作用，有效整合技术资源、产业链资源和金融资源，持续输出人工智能核心研发能力和服务能力的重要创新载体。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. 本文作者&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;飞宏、照东、宇豪、王鸿等，均来自美团到店事业群/餐饮SaaS事业部。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;也许你还想看&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  | &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769938&amp;amp;idx=1&amp;amp;sn=6f6456ff0642815571e426639ef3af90&amp;amp;chksm=bd12151f8a659c09d273dd5e8d35bd915ee382d323329f3b0e6724139509723f32be359d26a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程效能CI/CD之流水线引擎的建设实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769938&amp;amp;idx=1&amp;amp;sn=6f6456ff0642815571e426639ef3af90&amp;amp;chksm=bd12151f8a659c09d273dd5e8d35bd915ee382d323329f3b0e6724139509723f32be359d26a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程效能CI/CD之流水线引擎的建设实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;工程效能CI/CD之流水线引擎的建设实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt;&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651769043&amp;amp;idx=1&amp;amp;sn=06214b6b59b894cf504a50ed4aacc02a&amp;amp;chksm=bd12119e8a6598885762f40ace12ef0bdf78c90a588a794c4363db79a3b8e45c14ac227e828b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据库全量SQL分析与审计系统性能优化之旅&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数据库全量SQL分析与审计系统性能优化之旅&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651750679&amp;amp;idx=1&amp;amp;sn=c204c3f7774c099f63860c04193cdc07&amp;amp;chksm=bd12585a8a65d14cd13390328f4410246a6f82caa46b80b394ab9c165ab4f50f8d610315c3f4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;降低软件复杂性的一般原则和方法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;降低软件复杂性的一般原则和方法&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阅读更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765958&amp;amp;idx=1&amp;amp;sn=8201546812e5a95a2bee9dffc6d12f00&amp;amp;chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;前端&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://t.1yb.co/jo7v&quot; textvalue=&quot; 安全&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765981&amp;amp;idx=1&amp;amp;sn=c2dd86f15dee2cbbc89e27677d985060&amp;amp;chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;算‍法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;算法&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765982&amp;amp;idx=1&amp;amp;sn=231b41f653ac7959f3e3b8213dcec2b0&amp;amp;chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;后端&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765964&amp;amp;idx=1&amp;amp;sn=ab6d8db147234fe57f27dd46eec40fef&amp;amp;chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数‍据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;数据&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765965&amp;amp;idx=1&amp;amp;sn=37e0c56c8b080146ce5249243bfd84d8&amp;amp;chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;安‍全&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;安全&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765972&amp;amp;idx=1&amp;amp;sn=afe02ec92762c1ce18740d03324c4ac3&amp;amp;chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;And‍roid&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;Android&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765973&amp;amp;idx=1&amp;amp;sn=32a23bf1d278dda0398f993ab60a697e&amp;amp;chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;iO‍S&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;iOS&lt;/a&gt;&lt;span&gt; &lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765963&amp;amp;idx=1&amp;amp;sn=a3de9ef267d07d94118c1611776a4b28&amp;amp;chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运‍维&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;运维&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765974&amp;amp;idx=1&amp;amp;sn=763c1e37d04acffd0142a2852ecfb000&amp;amp;chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;测‍试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MjM5NjQ5MTI5OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVGibnsaEib3aNlqF0tOrA2RGEmNSbia2nnohE4Tpf95UyTiaSjDVbHRfY8WNBeTuLLTaVdSckkNyEx1Q/0?wx_fmt=png&quot; data-nickname=&quot;美团技术团队&quot; data-alias=&quot;meituantech&quot; data-signature=&quot;10000+工程师，如何支撑中国领先的生活服务电子商务平台？数亿消费者、数百万商户、2000多个行业、几千亿交易额背后是哪些技术在支撑？这里是美团、大众点评、美团外卖、美团配送、美团优选等技术团队的对外窗口。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9e715facc761e37bf9690072e4795970</guid>
<title>Java 虚拟机内存优化实战案例分析指南</title>
<link>https://toutiao.io/k/gy1rlq0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h1&gt;&lt;a id=&quot;_0&quot;/&gt;问题总结&lt;/h1&gt; 
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;内存多占1G左右，CPU利用率没有明显变化，但随着CMS收集抖动，最高达40%，CPU load平均高出1.0左右&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;几乎0停顿，相比于之前每隔5分钟应用停顿3-4s，调优后的应用几乎没有停顿时间，每次”stop the world” 由 youngGC 引起，最高也不过200+ms&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;GC总时间开销显著减小20%多，吞吐量显著提升&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;应用超过500ms的请求响应时间减少3%&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt; 
&lt;h1&gt;&lt;a id=&quot;_6&quot;/&gt;参数对比&lt;/h1&gt; 
&lt;h2&gt;&lt;a id=&quot;_7&quot;/&gt;调优前&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;-Dfile.encoding=UTF-8 -server -Xms8000M -Xmx8000M -Xmn5000M -Xss256K - 
XX:ThreadStackSize=256 -XX:StackShadowPages=8  -verbose:gc -XX:+PrintGCDetails 
-XX:+PrintGCTimeStamps -XX:PermSize=128m -XX:MaxPermSize=128m -XX:+UseParallelGC
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_14&quot;/&gt;调优后&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;-Dfile.encoding=UTF-8 -server -Xms10000M -Xmx10000M -Xmn5000M -
XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=30 -XX:TargetSurvivorRatio=50 
-Xnoclassgc -Xss256K -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:PermSize=256m -
XX:MaxPermSize=256m  -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -
XX:CMSInitiatingOccupancyFraction=80  -XX:ParallelGCThreads=24  -XX:ConcGCThreads=24 
-XX:+CMSParallelRemarkEnabled -XX:+CMSScavengeBeforeRemark 
-XX:+ExplicitGCInvokesConcurrent -XX:+UseTLAB  -XX:TLABSize=64K
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_26&quot;/&gt;经验分享&lt;/h2&gt; 
&lt;p&gt;在开始前，我们需要一些数据，因为jvm调优没有一个标准的答案，根据实际应用不同而不同，但也不是完全没有章法可言，从一个实际的应用，我们也可以找出一些规律来，找出一些比较公用的，比如下面三条：&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;应用平均和最大暂停时间（stop the world）&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;吞吐量，真正运行时间/（GC时间+真正运行时间），而相对的GC开销为：GC时间/（GC时间+真正运行时间）&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;URL的请求响应时间&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt; 
&lt;h3&gt;&lt;a id=&quot;_34&quot;/&gt;查看可以设置的所有参数&lt;/h3&gt; 
&lt;p&gt;使用 &lt;code&gt;-XX:+PrintFlagsFinal&lt;/code&gt; 参数：可以查看当前版本的虚拟机所能设置的所有参数，还可以看到其默认值。&lt;strong&gt;我使用6u26版本的java虚拟机&lt;/strong&gt;，一共有663个参数，很多参数不必完全搞懂什么意思，而且很多优化项在JDK6版本中已经默认开启，所以我们只需要了解一些常用的即可。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_38&quot;/&gt;最大堆的设置&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;在单机web server的情况下，最大堆的设置建议在物理内存的1/2到2/3之间，如果是16G的物理内存的话，最大堆的设置应该在8000M-10000M之间&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;Java进程消耗的总内存肯定大于最大堆设置的内存：&lt;strong&gt;堆内存（Xmx）+ 方法区内存（MaxPermSize）+ 栈内存（Xss,包括虚拟机栈和本地方法栈）线程数 + NIO direct memory + socket 缓存区（receive37KB，send25KB）+ JNI代码 + 虚拟机和GC本身&lt;/strong&gt; = java的内存。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;我们经常碰到内存巨高的线上问题，留更多的内存给“意外情况”是一件好事也是一件坏事，好事是更多的内存可以给“错误”提供扩展空间，&lt;strong&gt;提升“容错性”，不至于马上宕机&lt;/strong&gt;，但另一方面来说技术人员不会第一时间收到“&lt;strong&gt;吃swap&lt;/strong&gt;”这个告警信息。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;GC_46&quot;/&gt;GC策略的选择&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;GC调优是JVM调优很重要的一步，当前比较成熟的GC基本上有三种选择，&lt;strong&gt;serial、Parallel和CMS&lt;/strong&gt;，大型互联网应用基本上选择后两种，&lt;strong&gt;但Parallel的暂停时间实在太长&lt;/strong&gt;，以 &lt;strong&gt;-Xmx 8000M -Xmn5000M&lt;/strong&gt; 为例，&lt;strong&gt;平均一次youngGC需要100ms-200ms，而FullGC最长需要6s，平均也要4s&lt;/strong&gt;，虽然当前没有哪种GC策略能完全做到没有暂停时间，&lt;strong&gt;但太长的“stop the world”时间也让人无法忍受&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;serial 和ParallelGC都是完全stop the world的GC，而CMS分为六步骤&lt;/strong&gt;：&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/350cc32f4f1f1cce0265829e72deb366.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;stop_the_world_54&quot;/&gt;初始标记（stop the world）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1093.220: [GC [1 CMS-initial-mark: 4113308K(5120000K)] 4180786K(10080000K), 0.0732930 
secs] [Times: user=0.07 sys=0.00, real=0.07 secs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_60&quot;/&gt;运行时标记（并发）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1094.275: [CMS-concurrent-mark: 0.980/0.980 secs]
[Times: user=19.95 sys=0.51, real=0.98 secs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_67&quot;/&gt;运行时清理（并发）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1094.305: [CMS-concurrent-preclean: 0.028/0.029 secs] 
[Times: user=0.10 sys=0.02, real=0.03 secs]

CMS: abort preclean due to time 1099.643:
[CMS-concurrent-abortable-preclean: 5.288/5.337 secs] 
[Times: user=12.64 sys=1.19, real=5.34 secs]

&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;重新标记（stop the world，这个例子remark前执行了一次youngGC）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1099.647: [GC [YG occupancy: 3308479 K (4960000 K)]
1099.648: [GC 1099.649: [ParNew: 3308479K-&amp;gt;42384K(4960000K), 0.1420310 secs]
7421787K-&amp;gt;4180693K(10080000K), 0.1447160 secs] [Times: user=2.69 sys=0.03, real=0.15 secs]

1099.793: [Rescan (parallel) , 0.0121000 secs]1099.805: [weak refs processing, 0.0664790 secs] 
[1 CMS-remark: 4138308K(5120000K)] 4180693K(10080000K), 0.2254870 secs] 
[Times: user=3.00 sys=0.05, real=0.23 secs]

&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_91&quot;/&gt;运行时清理（并发）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;1104.895: [CMS-concurrent-sweep: 4.970/5.020 secs] 
[Times: user=12.43 sys=1.05, real=5.02 secs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_99&quot;/&gt;复原（并发）&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;
1104.908: [CMS-concurrent-reset: 0.012/0.012 secs]
[Times: user=0.03 sys=0.01, real=0.01 secs]

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;要想知道应用真正的停顿时间，可以使用&lt;code&gt;PrintGCApplicationStoppedTime&lt;/code&gt; 参数：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;63043.344: [GC [PSYoungGen: 5009217K-&amp;gt;34119K(5049600K)] 
5985479K-&amp;gt;1034614K(8121600K), 0.1721890 secs] [Times: user=2.62 sys=0.01, real=0.18 secs]
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt;&lt;li&gt;Total time for which application threads were stopped: 0.1806210 seconds&lt;/li&gt;&lt;li&gt;Total time for which application threads were stopped: 0.0074870 seconds&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;这样看来，真正应用暂停的时间要比stop the world时间还要稍长一点点。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt;&lt;li&gt;本次调优我基本上放弃了ParallelGC而选择了CMS，CMS在old区很大的时候绝对是个利器，它不仅能大幅降低应用“stop the world”时间，而且还能增加应用的响应时间和小部分吞吐量。&lt;/li&gt;&lt;li&gt;CMS还有一种增量模式：iCMS，适用于单CPU模式，会将回收动作分作小块进行，但会增加回收时间，降低吞吐量，对于多CPU来说，可以不用考虑这种模式。&lt;/li&gt;&lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr/&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;年轻代（eden和Survivor）、年老代的设置选择了GC策略之后，年轻代和年老代的设置就很重要了，&lt;strong&gt;如果一味的追求响应时间，可以尽量把年轻代调大一点，youngGC的回收频率减小了，但回收时间也增大了，5000M的年轻代，平均回收时间在150+ms，3000M的年轻代平均回收时间在90+ms&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;如果一味的增大年轻代，CMS前提下的年老代的威力也发挥不出来，更容易出现promotion failed&lt;/strong&gt;，&lt;strong&gt;导致一次FullGC&lt;/strong&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;但如果一味的调小年轻代，虽然单次回收时间减小，但回收频率会陡增，应用STW时间也会增加，总体年轻代回收的时间也可能会增大，所以调整年轻代和年老代的比例就是一个找平衡的过程&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;我的经验是年轻代的比例在&lt;strong&gt;2/8到4/8&lt;/strong&gt;之间，具体情况要看实际应用情况而定。&lt;/p&gt; 
&lt;p&gt;我们都知道年轻代采用的是“copy”算法，有两个survivor空间，每次回收总有一个是空的，另一个存放的是前几次youngGC存留下来而且还不够提升到old资格的对象，所以有三个参数很重要：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;-XX:MaxTenuringThreshold=15&lt;/strong&gt;：对象晋升到old的年龄，&lt;strong&gt;parallelGC和Serial默认是15，CMS默认是4&lt;/strong&gt;，&lt;strong&gt;设置的越大，对象就越难进入到old区，youngGC反复copy的时间就会增大&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;-XX:SurvivorRatio=8，eden和survivor的比例，默认是8&lt;/strong&gt;，也就是说如果eden为2400M，&lt;strong&gt;那么两个survivor都为300M，如果MaxTenuringThreshold设置的很小，那么survivor区的使用率就会降低，反之，survivor的使用率就会增大&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;-XX:TargetSurvivorRatio=80，survivor空间的利用率，默认是50&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;如果设置SurvivorRatio为65536，MaxTenuringThreshold为0就表示禁止使用survivor空间&lt;/strong&gt;，在这种模式下，对象直接进入old区，而且我发现在这种模式下，photo的resin启动时间大大减少，以前170s在这种模式下只需要90+s，足足降低了一半，因为这个，我顿时对这种模式产生的兴趣，&lt;strong&gt;但CMS的压力就增大了，威力根本发挥不出来了，GC的时间没有减少反而增加，remark的时间也增大到3s，最后不得不忍痛割爱放弃了这种模式&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;-XX:+CMSScavengeBeforeRemark：这个参数还蛮重要的，它的意思是在执行CMS remark之前进行一次youngGC&lt;/strong&gt;，&lt;strong&gt;这样能有效降低remark的时间，之前我没有加这个参数，remark时间最大能达到3s，加上这个参数之后remark时间减少到1s之内&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;-XX:+UseCMSCompactAtFullCollection&lt;/strong&gt;，用于指定在Full GC之后进行内存整理，内存整理会使得垃圾收集停顿时间变长，CMS提供了另外一个参数。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;-XX:CMSFullGCsBeforeCompaction&lt;/strong&gt;，用于设置在执行多少次不压缩的Full GC之后，跟着再来一次内存整理。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;另外，我发现survivor空间并没有像预期的那样大（eden的1/8），通过跟踪JVM的启动过程中发现，JVM在一定的条件下（&lt;strong&gt;可能跟parallelGC和默认SurvivorRatio有关&lt;/strong&gt;）&lt;strong&gt;会动态调整survivor的大小&lt;/strong&gt;，避免内存浪费。&lt;/p&gt; 
&lt;/blockquote&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cb2cb6a7dac0c9c3a28312d02ee180d3</guid>
<title>独立开发变现周刊（第86期）：月收入4000美元的日程规划器</title>
<link>https://toutiao.io/k/vyxb3i9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;分享独立开发、产品变现相关内容，每周五发布。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;1、NotionReads: 在Notion中管理你的阅读书籍&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;2、Zaap.ai: 面向创作者的一站式工具&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;3、microfeed: 开源的可自我托管的轻量级内容管理系统(CMS)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;4、Reactive Resume：一个免费的开源简历生成器&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;5、一个月收入4000美元的日程规划器&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;1、NotionReads: 在Notion中管理你的阅读书籍&lt;/h2&gt;&lt;p&gt;你可能喜欢让事情有条理，总是对你读过的书有一个概述，跟踪你当前阅读的进度，并计划接下来要读什么。将书籍的所有信息(作者、页数、封面图片等)复制并粘贴到您的concept数据库中需要花费大量时间和精力。&lt;/p&gt;&lt;p&gt;所有这些都可以在Notion中实现。这就是NotionReads来拯救的地方。它为您提供了一个完整的图书搜索，集成到一个漂亮的Notion模板中。这样，你就可以找到世界上任何一本书，并将其添加到你的数字书架上，只需点击一下。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.587730451366815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwVibFDbdPY4U7hXMzTRApL13tia0yLqQn3nAoQhesk9kQ830yvY0ic3uTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3146&quot;/&gt;&lt;/p&gt;&lt;p&gt;NotionReads官网&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;2、Zaap.ai: 面向创作者的一站式工具&lt;/h2&gt;&lt;p&gt;Zaap是一个面向创作者的工具包:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;为你所有的链接建立一个页面&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;自动化显示最新内容&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;销售数字产品和下载&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;收集电邮地址&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;发送电子邮件简报&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;它就像是Linktree + Gumroad + Mailchimp的合体。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5472175379426644&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwfFfsAxd1rK6qNX8naUYZj1ODWRUuDd8bibmqAQibIaqN72lQbLQOpe8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2372&quot;/&gt;&lt;/p&gt;&lt;p&gt;Zaap.ai官网&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;3、microfeed: 开源的可自我托管的轻量级内容管理系统(CMS)&lt;/h2&gt;&lt;p&gt;Microfeed是基于Cloudflare的可以自我托管的轻量级内容管理系统(CMS)。是一个开源项目，可以轻松地将各种内容(如音频、视频、照片、文档、博客文章和外部url)以web、RSS和JSON的形式发布。对于那些精通技术的人来说，这是一个完美的解决方案，他们希望自己托管自己的CMS，而不必运行自己的服务器。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5973468591494343&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwIvITEEYGY4zuEUSQ0qpe7Agxt1RK4wHkpSiatfxaI85ic3kwOmPIIRNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2563&quot;/&gt;&lt;/p&gt;&lt;p&gt;microfeed开源项目地址&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;4、Reactive Resume：一个免费的开源简历生成器&lt;/h2&gt;&lt;p&gt;一个独一无二的简历生成器。安全，可定制，可移植，开源，永远免费。&lt;/p&gt;&lt;p&gt;Reactive Resume是一个免费的开源简历生成器，它可以让创建、更新和分享你的简历。有了这个应用程序，你可以创建多份简历，生成特定链接，并打印成PDF格式，所有这些都是免费的，没有广告，不会失去数据的完整性和隐私。&lt;/p&gt;&lt;p&gt;你可以完全控制简历的内容、外观、颜色、模板，甚至是各部分的布局。你输入的每一项内容，你修改的每一项内容，都会立即出现在你的简历上，并实时更新。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5211047420531527&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwabcScJib9JCG3lnobWmuH7DiaMNpt7nwNibJelPTOARgicJpHbh5OEQTnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1919&quot;/&gt;&lt;/p&gt;&lt;p&gt;Reactive Resume开源代码地址&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;h2&gt;5、一个月收入4000美元的日程规划器&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwOk718z1MrkdzVemiavTSjUpPwEMNxx1czFiaDHUIViaRh7J5fskxdpKeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;我是Ralu Petrea, Outline Planner的创始人，我花了一周时间推出无纸化规划器产品，之后用了两年时间来完善。我开始这个项目是作为一个测试，最早投入了499欧元，从第一周开始就收到了回报。两年后，这变成了我的全职工作。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.432753164556962&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwicwKTp2IU7dB0JRSE2LrcDawQZWqvG4rLjHO5gY9R4ACianiclzYOE99w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2528&quot;/&gt;&lt;/p&gt;&lt;p&gt;我总是制定适合自己的计划，所以，我创造了一个工具，他们可以插入并在他们的ipad上玩。我把我的想法加进去，以更有逻辑和有组织的方式制定可执行的计划。&lt;/p&gt;&lt;p&gt;我应该提一下什么是无纸化计划。从字面上看，它们就像你平板电脑上的纸质规划师。想象一个容易携带的笔记本，里面有你所有的生活;这感觉就像在纸上写字，但它允许你为笔记添加无尽的空间，排版，纠正错误，添加图像，在上面写写画画。这就是一个数字规划器。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3920265780730897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwDTIOJHiaAW6GzibqDXu5bD29gotNoHH1oMDID9cC7NQEaMSXy9PxXLlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;从技术上讲，数字记事本是一个PDF模板，只在应用程序中工作。&lt;/p&gt;&lt;p&gt;我的旗舰产品是WINNERS大纲计划表，这是一款适用于iPad的每月、每周和每日一体化数字计划表，可以插入Goodnotes 5和 Noteshelf Notability 应用程序。这个无纸化的生活工作计划表就像一个漏斗，帮助你把大蓝图和日常任务联系起来。&lt;/p&gt;&lt;p&gt;奇怪的是，一开始，我并不了解我的客户。直到项目的后期，我才了解到，企业家、首席执行官、校长、医生、蛋糕艺术家、职业母亲、健康博主都在使用我的数字计划来保持每天的计划。这些人中大部分是来自美国、德国、英国和澳大利亚。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwGNzicKNiaUUtjOPFUadSvP9R5n3xEuL3tR132K4y8RmXpRiahJicicXiaUNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;2018年11月，作为测试，我在Etsy上推出了第一个记事本，投资499欧元(用于购买我的iPad和Apple Pencil)，没有粉丝，没有商业计划。从2018年11月到2020年10月，我只通过我的Etsy商店销售我的产品，销售额达到8万欧元以上，利润率约为70%(主要是广告支出)。在两年的时间里，我获得了4K+的订单(15-20%是回头客)，平均客户价值为58欧元，而这一切都是在我的用户体验设计服务业务中完成的。&lt;/p&gt;&lt;h3&gt;你是怎么想到这个想法的?&lt;/h3&gt;&lt;p&gt;Outline Planner并不是我的第一个项目。&lt;/p&gt;&lt;p&gt;2011年，我创建了自己的数字设计公司(出于爱好)，并学习成为一名用户体验设计师。大部分项目都是为环境机构或欧洲网络安全机构提供的应用程序和工具。然而，并非一切都按计划进行。&lt;/p&gt;&lt;p&gt;我还创造了一个皮革装订的纸质记事本产品，由于缺乏客户和销售，它只存活了两年。&lt;/p&gt;&lt;p&gt;一天早上，我偶然在Etsy上发现(并买了)我的第一个电子记事本，我的旅程完全改变了。我震惊地发现，这个数字记事本只是一个PDF文件，里面有超链接，可以在一个注释应用程序中使用(当时我用的是Goodnotes 4);我还喜欢它看起来像平板电脑上的纸质记事本。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42358803986710963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwaMjEkFbNc9Sd6WpWr8A6rmbMr2GZZflZSJCickMarfmSKSNjY2WsZtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;当我告诉自己:“我也能做到!”我可以做得更好!”第二天，我花499欧元买了我的第一台iPad，配有兼容的苹果铅笔(Apple Pencil)。我决心开始设计我的新数码产品，但我向自己保证，如果我没有卖出任何记事本，我将在30天内退还iPad。一周后，我出版了我的第一本数字周计划，第一天就卖出了两本。在短短两周内，我卖出了499欧元多一点，所以我保住了我的iPad!!从那一刻起，我开始投入更多精力!&lt;/p&gt;&lt;h3&gt;带我们了解下你第一个产品开发的过程&lt;/h3&gt;&lt;p&gt;有了建筑学的背景和7年的UX设计经验，这是基础技能。但让它起作用的是我设定的理念:我必须在一周内推出一个基本的计划，并与使用它的人一起构建它。&lt;/p&gt;&lt;p&gt;再说一次，这个概念不是我发明的;我只是进入了一个已经存在的市场。我只是需要做得更好一点，使用我的设计技能，并将我的计划驱动的想法加载到工具中。从一开始，我的重点是创建一个易于使用的数字计划工具，使人们能够一步一步的编写计划，保持逻辑，简化他们的生活。&lt;/p&gt;&lt;p&gt;我花了三天时间研究现有的数字规划师，并学习如何做得更好。使用Adobe InDesign和Adobe Acrobat Pro，我建立了一个540页的周计划，有13421个流畅的超链接，可以直观地导航。再加上9折的独家发行价。我收到了很多要求改进的请求;我了解了人们的需求和困难。以下是对我早期工作有帮助的一些初步评价:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4069767441860465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwjzWXK0GsjsCGZ1icZ7DiaLiaPxWKVic3MGpfjNEo92TFlQibGnBqY5Jib8uA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;在发行后，我便不断更新数字计划器。我疯狂地测试着记事本的布局、要包含的逻辑功能、要使用的颜色以及按钮的最佳位置。我花了大量时间测试适合所有iPad屏幕的完美页面大小。有了这么多的变量，设计、测试和改进真的很痛苦。&lt;/p&gt;&lt;p&gt;在最初的六个月里，我发布了30多个数字计划的更新版本，最终创建了我今天使用的大纲计划结构的60%。在那之后，我每2-3个月才更新一次计划，而今天，我正在收集反馈，只更新下一年的计划。如今，大纲计划是一个1511页的PDF计划，有53,726个超链接。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwQsR3JhQ0vNMf6P5JJ9t4nb7v77xuqqtCbdticeWu4DfKrJbiagdYWKng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;好的方面是，除了购买iPad和苹果铅笔的499欧元，以及每天在Etsy广告上花费5-10美元外，我并不需要大量的成本。然而，对于一个人的企业来说，工作量太大了。有这么多信息和实时更新，前六个月的压力非常高。&lt;/p&gt;&lt;h3&gt;描述下创业的过程&lt;/h3&gt;&lt;p&gt;从第一天起，我就在Etsy上独家推出我的计划。在Etsy上有一大批的粉丝，他们已经知道这种类型的产品!所以我不需要教育他们什么是数字记事本以及如何使用它!此外，Etsy让这一切都变得简单!该平台负责运营数字业务的几乎所有基本事项——从交付、支付处理、发票、客户通信、数字增值税、基本统计信息等等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43853820598006643&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwV3J3LU94NQpWAlXcka5PJ0qBznLicYvRsd0PdWyTmsPP5lwtep5HVpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;回顾过去，我发现花更少的时间在技术上，把大部分时间花在外面，与人交谈，创建社区，虽然不舒服，但这是正确的做法。另一个教训是，独自做这件事是一个相当大的挑战，会对你的健康和精神造成损害，所以你最好做好准备。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6528239202657807&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwlnHFOScRA5HvbfhYnzbbiagnkBiaEfdfksAYGEKxEjl4z5QxObxpEd7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;h3&gt;是什么吸引和留住了客户?&lt;/h3&gt;&lt;p&gt;自从Etsy推出以来，帮助我获得更多客户的前三件事是: (1)通过Etsy广告 (2)提供一流的客户服务 (3)提供专业的产品&lt;/p&gt;&lt;p&gt;投资Etsy广告是吸引人们到我新的和不断增长的商店是必不可少的。在两年的时间里，我从Etsy广告中赚了44,560.63美元，而我只花了12,986.35美元。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7452631578947368&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwUg8sfK6BbvRuCOHwCvnfEHtvwib9jKsdqw0cmsURJwbT04Siasx8ZaEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;475&quot;/&gt;&lt;/p&gt;&lt;p&gt;花时间快速回答客户的问题，并提供详细的说明，帮助提高了我的商业信誉。客户服务让他们信任我，而产品的质量让他们回来买更多的东西。很快，人们开始向朋友和同事谈论我的数字规划器。&lt;/p&gt;&lt;p&gt;在过去的两年里，我测试了许多产品的缩略图，使我的计划在Etsy搜索中可见。我有一些产品根本卖不出去，当我把缩略图换成更简洁、更吸引人的东西时，它们表现得更好。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4209650582362729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwjJgFV83nEpsuCYmw7elXDHiaSvad1aDUmJ2VTqMI9rrF5vkXkOniat8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;/p&gt;&lt;p&gt;在这个过程中，我测试了很多促销渠道。我使用Instagram、Pinterest和Facebook，同时也在各种网站上付费发表文章。然而，我发现增加我的社区(和销售)的最好方法是:发展我的Newsletter，在Youtube上发布视频教程，以及投Facebook广告。&lt;/p&gt;&lt;p&gt;我的产品类型非常特别，我的利基市场很小。然而，在过去的8个月里，我成功地将我的订阅列表增加到3000个订阅者，打开率为33.1%，退订率为1.2%。&lt;/p&gt;&lt;p&gt;我的订阅社区对我的业务至关重要，因为这是我分享新数字产品更好折扣的唯一地方。&lt;/p&gt;&lt;p&gt;Facebook广告的情况则有所不同。在参加了弗兰克·克恩(Frank Kern)关于如何在Facebook上销售产品的在线课程后，我使用他的策略进行了测试，结果成功了。他们的计划是推广一些关于数字规划的意识视频，因为大多数人甚至不知道它的存在，然后通过教程和优惠重新定位这些潜在客户。我只在有限的时间内使用了这一策略，并成功地吸引了14万人，并卖出了大约110个我的计划，尽管我花的钱比计划多一些。然而，我可以看到这一战略的潜力，以及如何扩大规模，并在2021年发挥作用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3976342129208371&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicw8ibWKWIHqfgqdse726uJcCqsHlCsNpDXdlBKh61ZVwyiaenNU6r5QhMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2198&quot;/&gt;&lt;/p&gt;&lt;p&gt;在COVID-19大流行期间，我决定给人们一个全新的品牌，以激发改变和对未来的乐观。所以，在2020年4月开启新的品牌。我的新WordPress网站上线了。这是一个聪明的举动，因为人们对这个变化产生了很好的共鸣，当我推出新网站时，我还提供了一个免费的计划样本，这为谷歌搜索带来了相当大的流量。当我决定停止分发免费的计划时，流量急剧下降。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30564784053156147&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwAHURjEsCmrgJic02mia3bYouNzia79kGqnoLgj3y3rCqm8QiabohG1T15A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;h3&gt;通过创业，你学到了什么特别有用或有利的东西吗?&lt;/h3&gt;&lt;p&gt;自从2011年我开始自己创业以来，我的主要目的就是全力以赴，让客户满意。这也是我做Outline Planner的目的，但我现在明白，这可能不是最好的决定。&lt;/p&gt;&lt;p&gt;在构建产品时，为了满足所有需求，我创建了34个版本的同一个数字规划器。处理34个规划师不仅是对商店的挑战，而且对客户来说也是非常混乱和压倒性的。如今，人们希望在1分钟内买到一件产品，所以花5分钟比较版本对许多人来说是一种交易破坏者。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49750415973377704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwN69UuQSaxYIiavCbJLrA5dmQLNeYu10TFqFg7YpDShCtFsx3lrINshg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;/p&gt;&lt;p&gt;然而，到目前为止，与客户的持续沟通才是成功的决定。&lt;/p&gt;&lt;p&gt;第二个成功的决定是，在我还没准备好之前，我就强迫自己出去销售一个不完美的产品。开放地考虑所有的反馈(好的或坏的)，一次又一次地设计、测试和改进数字计划器，这帮助我很快地得到了实际的框架，而不是花费数年的时间来设计。&lt;/p&gt;&lt;p&gt;在构建产品时，来自真实客户的反馈是业务的整个基础。改进你的产品，你会创造一个喜欢你的社区，成为你所在领域的权威。&lt;/p&gt;&lt;h3&gt;对其他想要起步或刚刚起步的创业者的建议?&lt;/h3&gt;&lt;p&gt;你总是听到人们说:“get out of your own way”。虽然听起来很痛苦，但这是事实。勇敢的跳出舒适区，别想太多，这是一种对包括我在内的许多人都有效的思维方式。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/G4umk62oPLqibIBAsLdictKlDRg9NDtlicwBQqpTRn5qX9ItGQ7B7MqyO1BuV6hicFZQnn4dLS0vbMx4xWHMohzhwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;另外，不要让自己太分散精力。不要一开始就推出太多产品，也不要尝试一下子发展太多社交渠道。做测试很好，可以看看什么对你有用，但一次只能专注于一件事。&lt;/p&gt;&lt;p&gt;设计，构建，测试，重复。这是我开始用户体验设计之旅的口头禅。这是一个漫长的过程，所以要慢慢来。在设计产品时，相信你的直觉，但不要跳过测试步骤。&lt;/p&gt;&lt;p&gt;在构建产品时，来自真实客户的反馈是业务的整个基础。你会改进你的产品，你会创造一个喜欢你的社区，并成为你所在领域的权威。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;NotionReads官网: https://www.notionreads.com/&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Zaap.ai官网: https://www.zaap.ai/&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;microfeed开源项目地址: https://github.com/microfeed/microfeed&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Reactive Resume开源代码地址: https://github.com/AmruthPillai/Reactive-Resume&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649284865&amp;amp;idx=1&amp;amp;sn=7970d9a2ccc02fee5ba6fdf4eedcc92a&amp;amp;chksm=bf2020008857a916afd9a5b2aae4af2978df1f883a0a6a329d28fb259b130d9acc4679da3402&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;独立开发变现周刊（第85期）：一个会员服务的SaaS，月收入2万美金&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;（第85期）：一个会员服务的SaaS，月收入2万美金&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTM3NzAwNg==&amp;amp;mid=2649284834&amp;amp;idx=1&amp;amp;sn=8cbc139af66fdde68c93b5adae6fb106&amp;amp;chksm=bf2021e38857a8f5745f1129be95c7fa080c929c6894fffb81a803246afdbab1c5579c840606&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;7个基于ChatGPT的有意思小产品&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;7个基于ChatGPT的有意思小产品&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4010582010582011&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/G4umk62oPLqxplJYrINXumqtVdQcxYLtztgN2kZoYgTAbQCTEAkKmiaHicw4eTppCJfz4CibHYl3DTPlE2GmSXpxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加入知识星球，和我一起做自己产品的独立变现，内有独家资料&lt;/span&gt;&lt;br/&gt;&lt;span&gt;星球内分享最新个人实战和经验、成员专属福利&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1b86e8f850431b814b2d00087fb2edda</guid>
<title>如何实现一个用于查看 OpenSumi 通信消息的 Chrome 插件？| OpenSumi Contributor 专访</title>
<link>https://toutiao.io/k/8zwupau</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;PROFILE&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;唐烨男&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（GitHub：tyn1998）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;华东师范大学，数据科学与工程学院，X-lab开放实验室，硕士二年级&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;个人网站：&lt;/p&gt;&lt;p&gt;https://tyn1998.github.io/&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLmRPlJEf5vMFZdCiar0kTChfU2BLOj6LF8k4DxJDpoNVwbtlEP4W2FqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;935&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;可以简单说下你的开源项目经历吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;虽然早在大一我就注册了GitHub，但是直到2021年以前我的贡献图都是一片灰色。&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2021是我的贡献图由灰转绿的一年&lt;/span&gt;&lt;/strong&gt;，在这一年里：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;我将 Manjaro XFCE 作为主力桌面系统并一直在折腾 Vim 编辑器，为了解决使用 Linux 系统和 shell 工具时遇到的问题，我开始被动探索开源世界（回头看，我愿称之为 Unix 文化潜移默化的熏陶）；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由于保研我提前加入了现在所在的 X-lab 开放实验室，接触了实验室的开源浏览器插件项目 Hypercrx，第一次体验并爱上了 Work in public 的感觉。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这两个契机大大拉近了我与开源世界的距离，在 Hypercrx 项目中的摸爬滚打更是让我迅速成长。一年多后的今天，我已经&lt;span&gt;成为了 Hypercrx 的主要维护者并拥有了仓库的 Owner 权限&lt;/span&gt;。&lt;strong&gt;&lt;span&gt;在 Hypercrx 中亲身验证了开源洋葱模型是我目前最棒的开源项目经历&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;开源之夏有很多项目，&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;为什么选择参与 OpenSumi 项目？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;开源之夏中的项目的确很多，但是前端领域的项目占比却不高。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我本人喜欢折腾工具，用 Tmux+Vim 配了一个我叫它&lt;span&gt;「&lt;span&gt;tIDE&lt;/span&gt;」&lt;/span&gt;的东西，这就是我日用的开发环境。在折腾这套工具的过程中，我对&lt;span&gt;「&lt;/span&gt;&lt;span&gt;tIDE&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;三个字母中代表&lt;span&gt;「&lt;/span&gt;&lt;span&gt;Integrated&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;的&lt;span&gt;&lt;span&gt;「&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/span&gt;有了一定体会，并对 IDE 的原理产生了兴趣。而 &lt;span&gt;&lt;strong&gt;OpenSumi 是一个 IDE 框架，这是一个打造 IDE 的工具&lt;/strong&gt;&lt;/span&gt;，我没想太多就迫不及待地去 OpenSumi 的 Discussion 下留言了！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.31665062560153995&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLibPRld8JVKxyrD8ccGMZND2icDd9Qa6KmiaAgjm9NQpazfiarfBALJTgsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1039&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;遗憾的是我没有赶上 OpenSumi 在 OSPP Summer 2022 的第一趟车，因为那段时间忙着课程任务，我只能忍痛割爱。但是 ASoC 2022 让我看到第二次机会，其中 Yantze 老师指导的课题还是和 Chrome 插件相关的，我当时看到这个课题激动的不得了，赶紧在课题对应的Issue下留言。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有了更加充分的准备后，最终我如愿以偿拿到了&lt;span&gt;「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实现一个用于查看 OpenSumi 通信消息的 Chrome 插件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/span&gt;这个课题。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;可以介绍下参与的项目任务内容&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;以及自己所做的贡献吗？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;133&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;“OpenSumi 的架构是前后端分离的，桌面端前端要和多个进程进行通信，或者 Web 端要和后端服务通信。目前通信的方式有 IPC、RPC 等，但通信的问题会比较难以直观的看到或者调试。希望提供一个可视化的显示通信数据的 Chrome 插件，方便的查看通信流量。”&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该项目的最终产物是一个 Chrome DevTools 插件（名称为 “OpenSumi DevTools” ），实现时&lt;span&gt;分为三步：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;先设法捕获OpenSumi的通信消息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;再将它们传递到OpenSumi DevTools中&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最后将这些通信消息呈现在OpenSumi DevTools的UI中&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里我只展开讲一下第2步，即&lt;span&gt;&lt;strong&gt;如何将捕获到的 OpenSumi 内部通信消息传递给一个外部的Chrome 插件&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如下图灰色虚线框和蓝色虚线框重叠处所示，凭借 &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.devtools&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.inspectedWindow&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.eval&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;这个 Chrome 插件API，我们可以在 OpenSumi 前端运行环境和 OpenSumi DevTools 运行环境之间架起一座桥梁，这座桥梁就是全局变量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;window&lt;/span&gt;&lt;span&gt;.__OPENSUMI_DEVTOOLS_GLOBAL_HOOK__&lt;/span&gt;&lt;span&gt;，以下简称 &lt;/span&gt;&lt;span&gt;HOOK&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9157407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLYw1euBgPgeGwPmDdl74HsKWicAzZabnELmlrHlzV8Gkcwv4ls4ZvK4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;HOOK&lt;/span&gt;&lt;/section&gt;&lt;span&gt;由 OpenSumi 在初始化的时候注入到&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;window &lt;/span&gt;&lt;span/&gt;&lt;span&gt;中，并赋初&lt;/span&gt;&lt;span&gt;值为&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当Chrome DevTools被打开时，OpenSumi DevTools会首先判断当前页面是否存在该 &lt;span&gt;HOOK&lt;/span&gt;&lt;span&gt;，以此来判断当前应用是否为基于 OpenSumi 开发的 IDE 产品，进而决定是否继续加载。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;若加载成功，则向&lt;span&gt; HOOK &lt;/span&gt;&lt;span&gt;注入一些函数和变量，经过改造后的 OpenSumi 会调用 &lt;/span&gt;&lt;span&gt;HOOK &lt;/span&gt;&lt;span&gt;中的捕获函数，并将捕获到的 RPC 和 IPC 消息放到 &lt;/span&gt;&lt;span&gt;HOOK &lt;/span&gt;&lt;span&gt;中的数组变量中。&lt;/span&gt;&lt;span&gt;之后，OpenSumi DevTools 便能读取 &lt;/span&gt;&lt;span&gt;HOOK &lt;/span&gt;&lt;span&gt;中的数据并将他们呈现在 UI 中了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果大家对其他实现细节也感兴趣，可以看看这篇博客：&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://tyn1998.github.io/2023/01/02/ASoC2022-实现一个用于查看OpenSumi通信消息的Chrome插件&lt;/span&gt;。下图展示了结项时 OpenSumi DevTools 在 Electron 客户端的运行效果：&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7055555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLdO3McLqxBiau7b4rTPnMfFh5ZqNbEsJ37IY9huIxYl7oiaqLicGVIQJ4g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;由于该课题要实现一个全新的Chrome DevTools插件，所以新建了一个仓库&lt;span&gt;opensumi/devtools&lt;/span&gt; 用于开发；并且，由于需要在 OpenSumi 内部捕获通信消息，所以也对&lt;span&gt;opensumi/core&lt;/span&gt; 中的代码进行了改造。经过简单的统计，我在两个仓库一共提了40个 Issue和31个 PR。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLoIPLBtuNkMQhfibKnXyzWLgzSyjnCfqxVbajF7A0oUvzeSjB6Lz3ibDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;项目开发过程中，&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有遇到过什么困难吗？&lt;/strong&gt;&lt;strong&gt;是如何解决的？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我有写日记的习惯，这是2022年6月26日的日记开头：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;99&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;昨天晚上带着ipad上床，看了10分钟讲 js 的 Proxy 的视频后接着上 GitHub 看&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;opensumi/core/packages/connection&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;的代码，看到两点多，想到三点，有收获，有激动。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;回首整个开发周期，遇到的困难可太多了。其中，connection 模块是第一只拦路虎，因为当时的我：没有掌握依赖注入机制、对TypeScript不够熟悉、之前没有接触过RPC、对OpenSumi的生命周期不了解……&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那几天，我利用 LSP 服务在代码间跳来跳去，还创建了好几篇语雀文档用来小心地捕获偶尔闪过的灵光。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我在搜索引擎中既深搜又广搜，反复阅读 OpenSumi 的官方文档，翻阅过往 PR和 Commit 历史，在 Issue 中提问并得到了核心成员们的答复，使用开发者工具进行调试。有了更多的前置知识后再回头咀嚼 connection 模块的代码，如此反复使得我最后终于对 connection 有了一个基本的了解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结一下便是：&lt;strong&gt;&lt;span&gt;多查、多想、多记、多问、多调试&lt;/span&gt;&lt;/strong&gt;。这些方法对所有遇到的困难都适用。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;开发过程中，&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;导师有给予什么样的帮助吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Yantze 导师以及 OpenSumi 的其他小伙伴们（Dan、bytemain）在 GitHub、钉钉都解答过我的许多困惑，使我对 OpenSumi 源码的了解日益增加。在 PR review 时，我的代码在他们的帮助下变得更加规范和整洁。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我非常感谢 OpenSumi 核心开发者们的帮助，&lt;strong&gt;&lt;span&gt;他们让我感受到了开源社区的活力和友善&lt;/span&gt;&lt;/strong&gt;！&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;参与 OpenSumi 编程之夏活动后，&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;最大的收获是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;06&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过在 OpenSumi 社区三个月来的见闻和参与，无论大到项目的发版，还是小到 CSS 的样式细节，&lt;strong&gt;&lt;span&gt;我从核心开发者身上学到了太多书上没有的知识与技巧&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从6月份的试探，到7月份的摸索，再到8月份的发力，我在开源洋葱模型中慢慢从边缘向内靠拢。所有的困惑、焦虑、思索、灵感、激动、兴奋都化成文字和代码，散落在2个仓库、40个Issue 和31个 PR 中。这是一段绝佳的经历！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对了，Dan老师还邀请我加入了 OpenSumi 的 GitHub Organization，所以我现在还是OpenSumi 的一个 Member，很光荣！&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7509259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybL4n8b3GuxPSTTQE0VPaHK4E91SdGveAqtCGjhucmdlQqr2tmILhzvoQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;*OpenSumi 是阿里 &amp;amp; 蚂蚁集团联合开源的一款面向 IDE 定制化研发的框架。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;以后还会为 OpenSumi &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;提 PR 和 Issue 吗？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;07&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;必须的！我有 &lt;span&gt;opensumi/devtools&lt;/span&gt; 仓库的写权限，并 watch 着所有事件，如果有人提Issue反馈 Bug 我肯定尽快处理，ASAP。对于主仓库 &lt;span&gt;opensumi/core&lt;/span&gt;，我在 ASoC 期间只是解锁了其中很小一部分，希望未来我能搞懂整个架构，提更多有料的 PR。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;有什么其他想说的吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;08&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;“OpenSumi IDE框架”公众号的所有文章我都一一拜读，非常赞！&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;导师寄语&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;”&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;唐烨男在开源之夏 ASoC 2022 的 OpenSumi 课题中，很多问题都是自己在研究，面对困难有很好的劲头去解决。他也能很好地把碰到的问题沉淀到 issue 中，对自己或者对其他人都能提供帮助。可以看出来，他在开源的道路上比较成熟了，很多的协作方式都非常开源化，未来加油！&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;——BY 与天&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;👇欢迎了解 OpenSumi，参与开源共建～&lt;/p&gt;&lt;p&gt;GitHub 地址：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;https://github.com/opensumi &lt;/em&gt;&lt;/span&gt;&lt;br/&gt;（点击文末&lt;span&gt;阅读原文&lt;/span&gt;即可跳转）&lt;/p&gt;&lt;p&gt;OpenSumi 官网：&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;https://opensumi.com/zh&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;扫二维码，加入 OpenSumi 社区交流：&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4054316&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLjmnzpI1Z5eLNcXpZN25Rb8Ihyt1ias5mgJPUnlrayAibUiaNwc69ibWicRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1031&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;微信&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLolFZiavYfsAwibs4uy1nrPmribxWkn9VunvYzq1ibLM0W467HHxHym6j6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;247&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;钉钉&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybLsNzXuz0ibnDdLQj0lYITkzxa9FQF0fslt9NbOGAYicWDlia1BjPoF1BXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;410&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;QQ&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3Njg3NDQyNA==&amp;amp;mid=2247483685&amp;amp;idx=1&amp;amp;sn=adffdfd39e80ef01a9520b186bf2e3ac&amp;amp;chksm=cf2adef2f85d57e4827c359dd47012bf31637890606d280f95426d3f1c4b86f7a5ec039da688&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;231&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;143&quot; data-ratio=&quot;0.42592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIgLvRFibaXNjPvt3fYZcybL7uhGBzZZDSFz3h6Su9ZBNvgTDWhorxyic1mckdzz4TEyBkGCdawDk0A/640?wx_fmt=png&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3Njg3NDQyNA==&amp;amp;mid=2247483685&amp;amp;idx=1&amp;amp;sn=adffdfd39e80ef01a9520b186bf2e3ac&amp;amp;chksm=cf2adef2f85d57e4827c359dd47012bf31637890606d280f95426d3f1c4b86f7a5ec039da688&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;OpenSumi Contributor 专访 | 司徒永聪：开源让世界更美好&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;OpenSumi Contributor 专访 | 司徒永聪：开源让世界更美好&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg3Njg3NDQyNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/xab1PH8kCvIdtWPrVoqSEo6lMtkZGicv7D6tapDdbIEQlGT7D0ib4PjsfTcBXIUzO8MEJicsIibZpp99y8qxdwGxmA/0?wx_fmt=png&quot; data-nickname=&quot;OpenSumi IDE 框架&quot; data-alias=&quot;&quot; data-signature=&quot;OpenSumi 框架旨在解决阿里经济体内部 IDE 产品研发的重复建设问题，满足 IDE 在更多垂直场景的定制能力，同时实现 Web 与本地客户端共用底层，让 IDE 研发从早期的“刀耕火种”时代向“机器化大生产”时代迈进。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bb482c7e36ed3152d081f4b84bcf29da</guid>
<title>优雅应对故障：QQ音乐怎么做高可用架构体系？</title>
<link>https://toutiao.io/k/92sjc6f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;cb68174b95ed8560d671c480b244455d&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10084033613445378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/VY8SELNGe95czZhnamWia6rvd1aenicicPiasMmUOHHu1wyeNicNJsWGa4syzF2PoOAePZEYtZX8jicbEDRPW3KsUlOw/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-w=&quot;1071&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-lines=&quot;1&quot; data-sign=&quot;cb68174b95ed8560d671c480b244455d&quot;&gt;&lt;span&gt;&lt;span&gt;导语 | 故障是开发者高频关注的问题。&lt;span&gt;在分布式系统建设的过程中，我们思考的重点不是避免故障，而是拥抱故障，通过构建高可用架构体系来获得优雅应对故障的能力。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;本文作者冯煦亮从架构、工具链、可观测三个维度，介绍了QQ音乐多年来积累的高可用架构实践。期望对你有帮助。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9FiaZYIGick0nWJJXC1lSLI8zy2asbcicfNgvgJXexvB9rOnicPxbKFdEibPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;QQ音乐高可用架构体系全景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;故障无处不在，而且无法避免。&lt;/span&gt;&lt;span&gt;在分布式系统建设的过程中，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;我们思考的重点不是避免故障，而是拥抱故障，通过构建高可用架构体系来获得优雅应对故障的能力&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。QQ音乐高可用架构体系包含三个子系统：架构、工具链和可观测性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6934865900383141&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1hzwYAYTsyCha4KjZiaOQUXjqfINUTarOXCSYv5pnf6WsvOp8ZQnvrrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1566&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;架构&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：架构包括冗余架构、自动故障转移和稳定性策略。高可用架构的基础是通过冗余架构来避免单点故障。其中，基础设施的冗余包括集群部署、多机房部署，多中心部署等；软件架构上要支持横向扩展、负载均衡和自动故障转移。这样系统就具备了基础的容灾容错能力。在冗余架构的基础之上，可以通过一系列稳定性策略来进一步提升架构的可用性。稳定性策略包括分布式限流，熔断，动态超时等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;工具链&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：工具链指一套可互相集成和协作的工具，从外围对架构进行实验和测试以达到提升架构可用性的目的，包括混沌工程和全链路压测等。混沌工程通过注入故障的方式，来发现系统的脆弱环节并针对性地加固，帮助我们提升系统的可用性。全链路压测通过真实、高效的压测，来帮助业务完成性能测试任务，进行容量评估和瓶颈定位，保障系统稳定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;可观测性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过观测系统的详细运行状态来提升系统的可用性，包括日志、指标、全链路跟踪、性能分析和panic分析。可观测性可以用于服务生命周期的所有阶段，包括服务开发，测试，发布，线上运行，混沌工程，全链路压测等各种场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9F812pnpTVKsrLmlcKHlIuuBvuwqeIqmOLOsD9nTpkow7FlAh45LKRLA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;容灾架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业内主流的容灾方案，包括异地冷备，同城双活，两地三中心，异地双活/多活等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;异地冷备&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：冷备中心不工作，成本浪费，关键时刻不敢切换。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;同城双活&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：同城仍然存在很多故障因素(如自然灾害)导致整体不可用。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;异地双活/多活&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：双写/多写对数据一致性是个极大挑战。有些做法是按用户ID哈希，使用户跟数据中心绑定，避免写冲突问题，但这样一来舍弃了就近接入的原则，而且灾难发生时要手动调度流量，也无法做到API粒度的容灾。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;容灾架构的选型我们需要衡量投入产出比，不要为了预防哪些极低概率的风险事件而去投入过大的成本，毕竟业务的规模和收入才是重中之重。QQ音乐的核心体验是听歌以及围绕听歌的一系列行为，这部分业务以只读服务为主。而写容灾需要支持双写，带来的数据一致性风险较大，且有一定的实施成本。综合权衡，我们舍弃写容灾，采用一写&lt;/span&gt;&lt;strong&gt;&lt;span&gt;双读的异地双活&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;03b0f6cc4b72ded411f76496e04fe0ac&quot;&gt;&lt;strong&gt;&lt;span&gt;1）异地双中心&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在原有深圳中心的基础上，建设上海中心，覆盖接入层、逻辑层和存储层，形成异地双中心。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6864064602960969&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1F62r1DQLU3Oa4oyZptyLggicA8K9Jfd3cZXgaZA1YLNfrcHZEzrpyBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1486&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;接入层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：深圳中心和上海中心各部署一套STGW和API网关。通过GSLB把流量按就近原则划分为两份，分配给深圳中心和上海中心，深圳中心和上海中心做流量隔离。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;逻辑层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：服务做读写分离。深圳部署读/写服务，上海部署只读服务，上海的写请求由API网关路由到深圳中心处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;存储层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：深圳中心和上海中心各有一套存储。写服务从深圳写入存储，通过同步中心/存储组件同步到上海，同步中心/存储组件确保两地数据的一致性。同步方式有两种，对于有建设异地同步能力的组件Cmongo和CKV+，依赖存储组件的异地同步能力，其他不具备异地同步能力的，如ckv，tssd等老存储，使用同步中心进行同步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;517862dd94122a666fcaccb75b79e2a3&quot;&gt;&lt;strong&gt;&lt;span&gt;2）自动故障转移&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;异地容灾支持自动故障转移才有意义。如果灾难发生后，我们在灾难发现、灾难响应以及评估迁移风险上面浪费大量时间，灾难可能已经恢复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们最初的方案是，客户端对两地接入IP进行动态评分（请求成功加分，请求失败减分），取最优的IP接入来达到容灾的效果。经过近两年多的外网实践，遇到一些问题，动态评分算法敏感度高会导致流量在两地频繁漂移，算法敏感度低起不了容灾效果。而算法调优依赖客户端版本更新也导致成本很高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后来我们基于异地自适应重试对容灾方案做了优化，核心思想是在API网关上做故障转移，降低客户端参与度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.37962962962962965&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1LwsEDYEhJorepqM8HofmWy9ellODCOg2MaCibZTTH1IFl9RANByVkicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1512&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方案主要有两点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一点，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;API网关故障转移&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：当本地中心API返回失败时（包括触发熔断和限流），API网关把请求路由到异地处理。以此解决API故障的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二点，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;客户端故障转移&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：当API网关发生超时的时候，客户单进行异地重试。如果网关有回包，即使API返回失败，客户端也不重试。解决API网关故障的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用最新方案后，API网关重试比客户端调度更可控，双中心流量相对稳定，一系列自适应限流和熔断策略也抵消重试带来的请求量放大问题。接下来介绍方案细节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;ab93e96d7ab50e53c65e96d3e4289e9f&quot;&gt;&lt;strong&gt;&lt;span&gt;3）API网关故障转移&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;API网关故障转移需要考虑重试流量不能压垮异地，否则会造成双中心同时雪崩。这里我们做了一个自适应重试的方案，在异地成功率下降的时候，取消重试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;自适应重试方案&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;引入重试窗口：如果当前周期窗口为10，则最多只能重试10次，超过的部分丢弃。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网关请求服务失败，判断重试窗口是否耗光。如果耗光则不重试，如果还有余额，重试异地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上述方案中的重试窗口，由&lt;/span&gt;&lt;strong&gt;&lt;span&gt;探测及退避策略&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;决定：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;探测策略&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：当探测成功率正常时，增大下一次窗口并继续探测。通过控制窗口大小，避免重试流量瞬间把异地打垮。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;退避策略&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在探测成功率出现异常时，重试窗口快速退避。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;增加重试开关&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，控制整体及服务两个维度的重试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;探测策略及退避策略图示&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6460176991150443&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1zYWd0plQFpU5ltfmHAJo7FFQBInaficU8KpvwjNq5nicQicUjS9E8XRiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1130&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;探测策略及退避策略的算法描述&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;  s(i) = [&lt;span class=&quot;code-snippet__number&quot;&gt;98&lt;/span&gt;%, &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;%]       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;  g(i) &amp;gt;= f(i)      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f(i+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) = f(i) + &lt;span class=&quot;code-snippet__built_in&quot;&gt;max&lt;/span&gt; (&lt;span class=&quot;code-snippet__built_in&quot;&gt;min&lt;/span&gt; ( &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;% * t, f(i) ) , &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        f(i+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) = f(i)        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    f(i+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;code-snippet__built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,f(i)/&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自适应重试效果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8540925266903915&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1Kj7m7YNiaD8uiaqUd8h1lL5ibIlSnqcML2XicSH3CxxVcVWNH15Dsm8cicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;843&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;cb93d756e0d93b0432fa9fb4d20cb89e&quot;&gt;&lt;strong&gt;&lt;span&gt;4）客户端故障转移&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;当客户端未收到响应时，说明API网关异常或者网络不通，客户端重试异地。&lt;/span&gt;&lt;span&gt;当客户端收到响应，而http状态码为5xx，说明API网关异常，客户端重试异地。&lt;/span&gt;&lt;span&gt;当http状态码正常，说明API网关正常，此时即使API失败也不重试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当双中心均超时，探测网络是否正常，如果网络正常，说明两地API网关均异常，所有客户端请求冻结一段时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9Fl62j5eylelCcZwNOEv5HRg9xicSj2KIwvdQMPbwiau3eqyIUpKbjQ6nA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;strong&gt;&lt;span&gt;稳定性策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;c8d5ac7767482d7a6298c2658baf22dd&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;c8d5ac7767482d7a6298c2658baf22dd&quot;&gt;&lt;strong&gt;&lt;span&gt;1）分布式限流&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;即使我们在容量规划上投入大量精力，根据经验充分考虑各种请求来源，评估出合理的请求峰值，并在生产环境中准备好足够的设备。但预期外的突发流量总会出现，对我们规划的容量造成巨大冲击，极端情况下甚至会导致雪崩。我们对容量规划的结果需要坚守不信任原则，做好防御式架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;限流可以帮助我们应对突发流量，我们有几个选择：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;固定窗口计算器&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;优点是简单，但存在临界场景无法限流的情况。&lt;/span&gt;&lt;span&gt;第二，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;漏桶&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是通过排队来控制消费者的速率，适合瞬时突发流量的场景，面对恒定流量上涨的场景，排队中的请求容易超时饿死。&lt;/span&gt;&lt;span&gt;第三，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;令牌桶&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;允许一定的突发流量通过，如果下游（callee）处理不了会有风险。&lt;/span&gt;&lt;span&gt;第四，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;滑动窗口计数器&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;可以相对准确地完成限流。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们采用的是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;滑动窗口计数器&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，主要考虑以下几点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一点，超过限制后微服务框架直接丢弃请求。&lt;/span&gt;&lt;span&gt;第二点，对原有架构不引入关键依赖，用分布式限流的方式代替全局限流。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5170370370370371&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1eUHuwNSHX5P9DM3kfQcYqqCHLwOfFMUpm6kbic3SgHsiahexCLgOy4aQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1350&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图描述ServceA到ServiceB之间的RPC调用过程中的限流：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Sidecar用于接管微服务的信令控制，限流器则以插件的方式集成到Sidecar。限流器通过限流中心Agent，从限流中心获取限流结果数据。&lt;/span&gt;&lt;span&gt;ServiceA发起请求到ServiceB前，通过Sidecar的限流器判断是否超出限制，如果&lt;/span&gt;&lt;span&gt;超出，则进入降级逻辑。&lt;/span&gt;&lt;span&gt;限流中心采用滑动窗口的方式，计算每个Service的限流数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;限流算法的选择，还有一种可行的方案是，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;框架提供不同的限流组件，业务方根据业务场景来选择，但也要考虑成本&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。社区也有Sentinel等成熟解决方案，新业务可以考虑集成现成的方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;00b6175dbefdf4c1152423c0043e8aca&quot;&gt;&lt;strong&gt;&lt;span&gt;2）自适应限流&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;上一节的分布式限流是在Client-side限制流量，即请求量超出阈值后在主调直接丢弃请求，被调不需要承担拒绝请求的资源开销，可最大程度保护被调。然而，Client-side限制流量强依赖主调接入分布式限流，这一点比较难完全受控。同时，分布式限流在集群扩缩容后需要及时更新限流阈值，而全量微服务接入有一定的维护成本。而且分布式限流直接丢弃请求更偏刚性。作为分布式限流的互补能力，自适应限流是在Server-side对入口流量进行控制，自动嗅探负载、入口QPS、请求耗时等指标，让系统的入口QPS和负载达到一个平衡，确保系统以高水位QPS正常运行，而且不需要人工维护限流阈值。相比分布式限流，自适应限流更偏柔性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;指标说明&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4370179948586118&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1WtqTQ0EKOmWwUjCv1bu8GvLiaxX1eZ1JU1tORd2smjPXYFVn3ZIKdZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;389&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;算法原理&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;根据Little&#x27;s Law，inflight = 延时 QPS。则最优inflight为MaxPass MinRt，当系统当前inflight超过最优inflight，执行限流动作。&lt;/span&gt;&lt;span&gt;用公式表示为：&lt;/span&gt;&lt;span&gt;cpu &amp;gt; 800 AND InFlight &amp;gt; (MaxQPS * MinRt)。&lt;/span&gt;&lt;span&gt;其中MaxQPS和MinRt的估算需要增加平滑策略，避免秒杀场景下最优inflight的估算失真。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;限流效果： &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.47098214285714285&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib17KRtoTtHW7xOdY9D6KNkLpcZMMWibkUhPznfVruWAhu9VsTia8AF2tpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;896&quot;/&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;540cc5e6fa11f7fbe5dc5b9495b25413&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;540cc5e6fa11f7fbe5dc5b9495b25413&quot;&gt;&lt;strong&gt;&lt;span&gt;3）熔断&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在微服务系统中，服务会依赖于多个服务，并且有一些服务也依赖于它。如下图，“统一权限”服务，依赖歌曲权限配置、购买信息、会员身份等服务，综合判断用户是否拥有对某首歌曲进行播放/下载等操作的权限，而这些权限信息，又会被歌单、专辑等歌曲列表服务依赖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3738819320214669&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1XlxicMBWicQNpgeXuCyLWRIF6283PYxUyOtmKicDK8NfMbBf6sdHfl4fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1118&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当“统一权限”服务的其中一个依赖服务（比如歌曲权限配置服务）出现故障，“统一权限”服务只能被动的等待依赖服务报错或者请求超时，下游连接池会逐渐被耗光，入口请求大量堆积，CPU、内存等资源逐渐耗尽，导致服务宕掉。而依赖“统一权限”服务的上游服务，也会因为相同的原因出现故障，一系列的级联故障最终会导致整个系统宕掉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;合理的解决方案是断路器和优雅降级，通过尽早失败来避免局部不稳定而导致的整体雪崩。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统熔断器实现Closed、Half Open、Open三个状态，当进入Open状态时会拒绝所有请求，而进入Closed状态时瞬间会有大量请求，服务端可能还没有完全恢复，会导致熔断器又切换到Open状态，一种比较刚性的熔断策略。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;SRE熔断只有打Closed和Half-Open两种状态，根据请求成功率自适应地丢弃请求，尽可能多地让请求成功请求到服务端，是一种更弹性的熔断策略。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;QQ音乐采用更弹性的SRE熔断器：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5150316455696202&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1WNxLF0ibscxpzB1ghE4kSoqA8t5pJQovDRVROkgS26l9ZGaeCP2syxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2528&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;requests&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：窗口时间内的请求总数。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;accepts&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：正常处理的请求数量。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;K&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：敏感度，K越小丢弃概率越大，一般在1.5~2之间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正常情况下&lt;/span&gt;&lt;span&gt;&lt;strong&gt;，requests 等于 accepts，所以丢弃概率为0。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;随着正常处理的请求减少，直到 requests 等于 K * accepts ，一旦超过这个限制，熔断器就会打开，并按照概率丢弃请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;7e845c36d812bce3a34a20507a9fc6a2&quot;&gt;&lt;strong&gt;&lt;span&gt;4）动态超时&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;超时是一件很容易被忽视的事情。在早期架构发展阶段，相信大家都有因为遗漏设置超时或者超时设置太长导致系统被拖慢甚至挂起的经历。随着微服务架构的演进，超时逐渐被标准化到RPC中，并可通过微服务治理平台快捷调整超时参数。但仍有不足，传统超时会设定一个固定的阈值，响应时间超过阈值就返回失败。在网络短暂抖动的情况下，响应时间增加很容易产生大规模的成功率波动。另一方面，服务的响应时间并不是恒定的，在某些长尾条件下可能需要更多的计算时间，为了有足够的时间等待这种长尾请求响应，我们需要把超时设置足够长，但超时设置太长又会增加风险，超时的准确设置经常困扰我们。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;其实我们的微服务系统对这种短暂的延时上涨具备足够的容忍能力，可以考虑基于EMA算法动态调整超时时长。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;EMA算法引入“平均超时”的概念，用平均响应时间代替固定超时时间，只要平均响应时间没有超时即可，而不是要求每次都不能超时。主要算法：总体情况不能超标；平均情况表现越好，弹性越大；平均情况表现越差，弹性越小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下图，当平均响应时间(EMA)大于超时时间限制(Thwm)，说明平均情况表现很差，动态超时时长(Tdto)就会趋近至超时时间限制(Thwm)，降低弹性。当平均响应时间(EMA)小于超时时间限制(Thwm)，说明平均情况表现很好，动态超时时长(Tdto)就可以超出超时时间限制(Thwm)，但会低于最大弹性时间(Tmax)，具备一定的弹性。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8935251798561151&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1LRHPH75ABx6ewxQCbvlS591DJT0z11HKu83fJ77ic31HO1TufGwz8FQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;695&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为降低使用门槛，QQ音乐微服务只提供超时时间限制(Thwm)和最大弹性时间(Tmax)两个参数的设置，并可在微服务治理平台调整参数。算法实现参考：https://github.com/jiamao/ema-timeout&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;c2d585ff55fbb957c76d9e1bfefc8930&quot;&gt;&lt;strong&gt;&lt;span&gt;5）服务分级&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我们做了很多弹性能力比如限流。我们是否可以根据服务的重要程度来决策丢弃请求。此外，在架构迭代的过程中，有许多涉及整体系统的大工程，如微服务改造，容器化，限流熔断能力落地等项目，我们需要根据服务的重要程度来决策哪些服务先行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何为服务确定级别：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1级&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：系统中最关键的服务，如果出现故障会导致用户或业务产生重大损失，比如登录服务、流媒体服务、权限服务、数专服务等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2级&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：对于业务非常重要，如果出现故障会导致用户体验受到影响，但是不会完全无法使用我们的系统，比如排行榜服务、评论服务等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3级&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：会对用户造成较小的影响，不容易注意或很难发现，比如用户头像服务，弹窗服务等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4级&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：即使失败，也不会对用户体验造成影响，比如红点服务等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务分级的应用场景：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一，核心接口运营质量日报：每日邮件推送1级服务和2级服务的观测数据。&lt;/span&gt;&lt;span&gt;第二，SLA：&lt;/span&gt;&lt;span&gt;针对1级服务和2级服务，制定SLO。&lt;/span&gt;&lt;span&gt;第三，API网关根据服务分级限流，优先确保1级服务通过。&lt;/span&gt;&lt;span&gt;第四，重大项目参考服务重要程度制定优先级计划，如容灾演练，大型活动压测等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;bf871aeb7c89c54f77772bdb95c8c40f&quot;&gt;&lt;strong&gt;&lt;span&gt;6）API网关分级限流&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;API网关既是用户访问的流量入口，也是后台业务响应的最终出口，其可用性是QQ音乐架构体系的重中之重。除了支持自适应限流能力，针对服务重要程度，当触发限流时优先丢弃不重要的服务。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;效果如下图，网关高负载时，2级、3级、4级服务丢弃，只有1级服务通过。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7030033370411568&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1ibzPZrOu2zBtMiaRKJCIb2VnpAl2N24FgOTTrIGibqjwwW0IOx3sjic9Qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;899&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9FPB6mZB01WGXHsGUE2UYENHAJNeKa8y0qwiajZdfHR5lvk4rjnrQabwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;h2 data-lines=&quot;2&quot; data-sign=&quot;1c81a931f10f1c14dfd4e856124ec5a6&quot;&gt;&lt;strong&gt;&lt;span&gt;工具链&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;随着产品的迭代，系统不断在变更。性能、延时、业务逻辑、用户量等因素的变化都有可能引入新的风险，而现有的架构弹性能力可能不足以优雅地应对新的风险。事实上，即使架构考虑的场景再多，外网仍然存在很多未知的风险，在某些特殊条件满足后就会引发故障。一般情况下，我们只能等着告警出现。当告警出现后，复盘总结，讨论规避方案，进行下一轮的架构优化。应对故障的方式比较被动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，我们有没有办法变被动为主动？&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在故障触发之前，尽可能多地识别风险，针对性地加固和防范，而不是等着故障发生。业界有比较成熟的理论和工具，混沌工程和全链路压测。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;d81c77592e65f913a74fcecf7d3bf14e&quot;&gt;&lt;strong&gt;&lt;span&gt;1）混沌工程&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;混沌工程通过在生产环境上进行实验，注入网络超时等故障，主动找出系统中的脆弱环节，不断提升系统的弹性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;TMEChaos 以ChaosMesh为底层故障注入引擎，结合TME微服务架构、mTKE容器平台打造成云原生混沌工程实验平台。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;支持丰富的故障模拟类型，具有强大的故障场景编排能力，方便研发同事在开发测试中以及生产环境中模拟现实世界中可能出现的各类异常，帮助验证架构设计是否合理，系统容错能力是否符合预期，为组织提供常态化应急响应演练，帮助业务推进高可用建设。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6201329534662868&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1mgVGkTR8fzd6GIAPpicPibibfreZu7xdorhoqMTSf8hDmcQslZibfbzBww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2106&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;TMEChaos Dashboard Web&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：TMEChaos的可视化组件，提供了一套用户友好的 Web 界面，用户可通过该界面对混沌实验进行操作和观测。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;TMEChaos Dashboard Backend&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：NodeJS实现的Dashboard中间层，为Web提供Rest API接口，并进行TMEOA权限/微服务权限验证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;TMEChaos APIServer&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：TMEChaos的逻辑组件，主要负责服务维度的爆炸半径设置，ChaosMesh多集群管理、实验状态管理、Mock行为注入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Status Manager&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：负责查询各ChaosMesh集群中的实验状态同步到TMEChaos的存储组件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;SteadyState Monitor&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：稳态指标组件，负责监控混沌实验运行过程中IAAS层/服务相关指标，如果超出阈值自动终止相关实验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ChaosMesh Dashboard API&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：ChaosMesh 对外暴露的Rest API接口层，用于实验的增删改查，直接跟K8S APIServer交互。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Chaos Controller Manager&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：ChaosMesh 的核心逻辑组件，主要负责混沌实验的调度与管理。该组件包含多个 CRD Controller，例如 Workflow Controller、Scheduler Controller 以及各类故障类型的 Controller。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Chaos Daemon&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：ChaosMesh 的主要执行组件，以 DaemonSet 的方式运行。该组件主要通过侵入目标 Pod Namespace 的方式干扰具体的网络设备、文件系统、内核等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;ce5b3e72ed3f8bf5675b7e9e13f554c9&quot;&gt;&lt;strong&gt;&lt;span&gt;2）全链路压测&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;上一节的混沌工程是通过注入故障的方式，来发现系统的脆弱环节。而全链路压测，则是通过注入流量给系统施加压力的方式，来发现系统的性能瓶颈，并帮助我们进行容量规划，以应对生产环境各种流量冲击。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5107351984385166&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1HxZg0tO7ZAphF27cPt0IAMKEQGjOty7KZjG83ptJ85NI1DzSUeh5oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1537&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全链路压测的核心模块有4个：流量构造、流量染色、压测引擎和智能监控。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;流量构造&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：为了保证真实性，从正式环境API网关抽样采集真实流水，同时也提供自定义流量构造。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;流量染色&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：全链路压测在生产环境进行。生产环境需要具备数据与流量隔离能力，不能影响到原有的用户数据、BI报表以及推荐算法等等。要实现这个目标，首先要求压测流量能被识别，我们采用的做法是在RPC的context里面增加染色标记，所有的压测流量都带有这个染色标记，并且这些标记能够随RPC调用关系进行传递。然后，业务系统根据标记识别压测流量，在存储时，将压测数据存储到影子存储而不是覆盖原有数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;压测引擎&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：对接各类协议，管理发压资源，以可调节的速率发送请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;智能监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：依靠可观测能力，收集链路数据并展示，根据熔断规则智能熔断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9F9gEWETfj769ZEnnF4YHYbm1UBFpYldG1ibl6E9owa0M3yRB40WtEqLg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;可观测性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着微服务架构和基础设施变得越来越复杂，传统监控已经无法完整掌握系统的健康状况。此外，服务等级目标要求较小的故障恢复时间，所以我们需要具备快速发现和定位故障的能力。可观测性可以帮助我们解决这些问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;指标、日志和链路追踪构成可观测的三大基石，为我们提供架构感知、瓶颈定位、故障溯源等能力。借助可观测性，我们可以对系统有更全面和精细的洞察，发现更深层次的系统问题，从而提升可用性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在实践方面，目前业界已经有很多成熟的技术栈，包括Prometheus，Grafana，ELK，Jaeger等。基于这些技术栈，我们可以快速搭建起可观测系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;c65a72ac0fd41ca720dba41302e1c962&quot;&gt;&lt;strong&gt;&lt;span&gt;1）Metrics&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;指标监控能够从宏观上对系统的状态进行度量，借助QPS、成功率、延时、系统资源、业务指标等多维度监控来反映系统整体的健康状况和性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们基于Prometheus构建联邦集群，实现千万指标的采集和存储，提供秒级监控，搭配Grafana做可视化展示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5945558739255015&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1XBWXIznrxHQBlicshNpOjgWQXoq6mUqAXmHZgrja7gSSpSXP91WfwLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1396&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在微服务框架中重点提供四个黄金指标的观测：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;Traffic（QPS）、&lt;/span&gt;&lt;span&gt;Latency（延时）、Error（成功率）、Staturation（资源利用率）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.441399416909621&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1k3VZsia7cMcicJKEm55QaKhOyPN90UfQTjI1VRzubeIOmZ0TBgR96tng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3430&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.480625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1w47Mx85gSuq7xKdjjictRv3W9RY0fVlFHjZEG2O20gHEvJPRqJ1ibhicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.33625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1SJiawevpDjKpBDuDJpdhPDZEkRyick2uSJTqsBpyPplu3wWLQaXEFDFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;QQ音乐Metrics解决方案优势：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;秒级监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：QQ音乐存在多个高并发场景，数专、演唱会直播、明星空降评论/社区等，会带来比日常高出几倍甚至数十倍的流量，而且流量集中在活动开始头几秒，容量评估难度极大。我们通过搭建Prometheus联邦，每3秒抓取一次数据，实现了准实时监控。并对活动进行快照采集，记录活动发生时所有微服务的请求峰值，用于下次同级别艺人的峰值评估。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;历史数据回溯&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：QQ音乐海量用户及上万微服务，每天产生的数据量级很大。当我们需要回溯近一个月甚至一年前的指标趋势时，性能是个极大挑战。由于历史数据的精度要求不高，我们通过Prometheus联邦进行阶梯降采样，可以永久存放历史数据，同时也极大降低存储成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;f80126411d6ca31ee15e852f66c4a058&quot;&gt;&lt;strong&gt;&lt;span&gt;2）Logging&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;随着业务体量壮大，机器数量庞大，使用SSH检索日志的方式效率低下。我们需要有专门的日志处理平台，从庞大的集群中收集日志并提供集中式的日志检索。同时我们希望业务接入日志处理平台的方式是无侵入的，不需要使用特定的日志打印组件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们使用ELK（ElasticSearch、Logstash、Kibana）构建日志处理平台，提供无侵入、集中式的远程日志采集和检索系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3776290630975143&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib15AcRyjmSZWfw6r0Eqe8C8HRr8xbr5icDhTKnR652yk8YNVVhZicPmnNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Filebeat&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 作为日志采集和传送器。Filebeat监视服务日志文件并将日志数据发送到Kafka。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Kafka&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 在Filebeat和Logstash之间做解耦。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Logstash&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 解析多种日志格式并发送给下游。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;ElasticSearch&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 存储Logstash处理后的数据，并建立索引以便快速检索。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Kibana&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 是一个基于ElasticSearch查看日志的系统，可以使用查询语法来搜索日志，在查询时制定时间和日期范围或使用正则表达式来查找匹配的字符串。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图为音乐馆首页服务的远程日志： &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.45036455412226584&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1dWcDGhO8iaTePnPzjtSFHUC7pMT0E6ibqWicXpicaRXL5kPDh5OJrxaGRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3566&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;1764469a3deb581d2463320e6144e514&quot;&gt;&lt;strong&gt;&lt;span&gt;3）Tracing&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在微服务架构的复杂分布式系统中，一个客户端请求由系统中大量微服务配合完成处理，这增加了定位问题的难度。如果一个下游服务返回错误，我们希望找到整个上游的调用链来帮助我们复现和解决问题，类似gdb的backtrace查看函数的调用栈帧和层级关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Tracing在触发第一个调用时生成关联标识Trace ID，我们可以通过RPC把它传递给所有的后续调用，就能关联整条调用链。Tracing还通过Span来表示调用链中的各个调用之间的关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们基于jaeger构建分布式链路追踪系统，可以实现分布式架构下的事务追踪、性能分析、故障溯源、服务依赖拓扑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7060478199718706&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1lMCAxdA9aTOBibSqbpibhJaP1Gl5FwRKDoaPWSbzFXksy3PM0bw9JzsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;jaeger-agent&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 作为代理，把jaeger client发送的spans转发到&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;jaeger-collector。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;jaeger-collector&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 接收来自jaeger-agent上报的数据，验证和清洗数据后转发至kafka。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;jaeger-ingester &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;从kafka消费数据，并存储到ElasticSearch。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;jaeger-query&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 封装用于从ElasticSearch中检索traces的APIs。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图为音乐馆首页服务的链路图： &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4586894586894587&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1m2pCPW1mHYwfXwEfYuQjib3AfYRdqZJZqiccpvjzoxMZcVdaF7uq2icVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3510&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;89c1177f4e7535c23cef0a35499c5637&quot;&gt;&lt;strong&gt;&lt;span&gt;4）Profiles&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;想必大家都遇到过服务在凌晨三点出现CPU毛刺。一般情况下，我们需要增加pprof分析代码，然后等待问题复现，问题处理完后删掉pprof相关代码，效率底下。如果这是个偶现的问题，定位难度就更大。我们需要建设一个可在生产环境使用分析器的系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建设这个系统需要解决三个问题：&lt;/span&gt;&lt;span&gt;性能数据采集后需要持久化，方便回溯分析；&lt;/span&gt;&lt;span&gt;可视化检索和分&lt;/span&gt;&lt;span&gt;析性能数据；&lt;/span&gt;&lt;span&gt;分&lt;/span&gt;&lt;span&gt;析器在生产环境采集&lt;/span&gt;&lt;span&gt;数据会有额外开销，需要合理采样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3875968992248062&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1p93sP4EME5ia0aicOG8WFv2Bvd8nU0RiaibvM0vRNwPGQ2TmrZkTYwX2qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1548&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们基于conprof搭建持续性能分析系统：&lt;/span&gt;&lt;span&gt;线上服务根据负载以及采样决定采集时机，并暴露profile接口；&lt;/span&gt;&lt;span&gt;conprof定时将profile信息采集并存储；&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;onprof提供统一的可视化平台检索和分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下图，我们可以通过服务名、实例、时间区间来检索profile信息，每一个点对应一个记录。  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4500896592946802&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1FfUcIDpsprNSufGDjBceXCFl5T0UafFzicxQf92vVmQKLuVrkRROibEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3346&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40376175548589344&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1ELPOTvqKYtdvnQ6LCEuiaWNMhuibOZXd6KAgT7Qhk0Npw7VxsQiap2abg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3190&quot;/&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;7eeefe817efc57a6ad28f27c82479e29&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lines=&quot;2&quot; data-sign=&quot;7eeefe817efc57a6ad28f27c82479e29&quot;&gt;&lt;strong&gt;&lt;span&gt;5）Dumps&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;传统的方式是在进程崩溃时把进程内存写入一个镜像中以供分析，或者把panic信息写到日志中。core dumps的方式在容器环境中实施困难，panic信息写入日志则容易被其他日志冲掉且感知太弱。QQ音乐使用的方式是在RPC框架中以拦截器的方式注入，发生panic后上报到sentry平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7612312811980033&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe95HmicH0xLfIIHtvO8ezPKib1ZUW1uKo7Hl0NpV88ADXKaGOxibKJUlvNbDa8q2M5C0EOenfYZPoKrYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2404&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9FibDz8VdeMtTPP6QGg7Qg03rhEzsPz8nRZlEVnmBdT96EyJFHfMz0iavQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文从架构、工具链、可观测三个维度，介绍了QQ音乐多年来积累的高可用架构实践。先从架构出发，介绍了双中心容灾方案以及一系列稳定性策略。再从工具链维度，介绍如何通过工具平台对架构进行测试和风险管理。最后介绍如何通过可观测来提升架构可用性。这三个维度的子系统紧密联系，相互协同。架构的脆弱性是工具链和可观测性的建设动力，工具链和可观测性的不断完善又会反哺架构的可用性提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，QQ音乐微服务建设、Devops建设、容器化建设也是提升可用性的重要因素。单体应用不可用会导致所有的功能不可用，而微服务化按单一职责拆分服务，可以很好地处理服务不可用和功能降级问题。Devops把服务生命周期的管理自动化，通过持续集成、持续测试、持续发布等来降低人工失误的风险。容器化最大程度降低基础设施的影响，让我们能够将更多精力放在服务的可用性上，此外，资源隔离，HPA，健康检查等，也在一定程度上提升可用性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此，基础架构提供了各种高可用的能力，但可用性最终还是要回归业务架构本身。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;业务系统需要根据业务特性选择最优的可用性方案，并在系统架构中遵循一些原则，如最大限度减少关键依赖；幂等性等可重试设计；消除扩容瓶颈；预防和缓解流量峰值；过载时做好优雅降级等等&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。而更重要的一点是，开发者需要时刻思考架构如何支撑业务的长期增长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你可能感兴趣的腾讯工程师作品&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2&quot; data-w=&quot;24&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M6IC6IoU4PwMicRZB4dKAVUhfw1GR9CJvqeqIWic50hQeGiaVgjY4oK8BXrMNsMra2MQ3f4LAlLKT6ibW9GdTvibUtg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sPQicVg8nzU0ceHDyC83Jm2vibsTbUia3blLRW1z0KUrw4OIV2eOibRmEWfWJYVXuyN6TOno2sLg9ZU7meG4uAY2jg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;24&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247567393&amp;amp;idx=1&amp;amp;sn=d22b3cf3fb63bad935d2ab5d127c0611&amp;amp;chksm=eaa9d271ddde5b67b88d532dcd02ece7df95457ead8059a8dbcc85163625679a2ec1ed02106b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一文读懂Go函数调用&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;一文读懂Go函数调用&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247567442&amp;amp;idx=1&amp;amp;sn=e920acd5ce45e296c861fcf483c5caa0&amp;amp;chksm=eaa9d202ddde5b14d3c11615341c579f0164894bba29183e344d6b0ccf27c0ae0bd0bed2471f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;内存泄露？腾讯工程师2个压箱底的方法和工具&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;内存泄露？腾讯工程师2个压箱底的方法工具&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247567719&amp;amp;idx=1&amp;amp;sn=2ee81e40dc12385a15aa9be1aae77db5&amp;amp;chksm=eaa9d337ddde5a21d75e9b99953abf368cd34600b909b935495d746d717f7851cee02f93e620&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;十亿人都在用的健康码运维体系是怎么设计的&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;十亿人都在用的健康码，运维体系是怎么设计的&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;| &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247569309&amp;amp;idx=2&amp;amp;sn=1001a30de9df01bb282dfd21db398be2&amp;amp;chksm=eaa9d5cdddde5cdb904291fc948c397fdaeb0d2175c87e4d6489e7e0e810faf2bb2853b13a49&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;最全Go select底层原理，一文学透高频用法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247569309&amp;amp;idx=2&amp;amp;sn=1001a30de9df01bb282dfd21db398be2&amp;amp;chksm=eaa9d5cdddde5cdb904291fc948c397fdaeb0d2175c87e4d6489e7e0e810faf2bb2853b13a49&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;最全Go select底层原理，一文学透高频用法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;最全Go select底层原理，一文学透高频用法&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术盲盒：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568617&amp;amp;idx=1&amp;amp;sn=d3409583764c4877964765a6b774b1de&amp;amp;chksm=eaa9d6b9ddde5faff511c416033948f76b056b209df76c6eb12adfea3f618422297b9b11895b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;前端&lt;/a&gt;&lt;span&gt;&lt;strong&gt;｜&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568512&amp;amp;idx=1&amp;amp;sn=5a2e887c0ac511e9a4fe5cd68a388e48&amp;amp;chksm=eaa9d6d0ddde5fc6376f1ffcc6e7b050fefded23d5b24c5f7b801885f509df06cd53d99f0a45&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;后端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568656&amp;amp;idx=1&amp;amp;sn=98f7033418fc1fd7d019eeb18008b616&amp;amp;chksm=eaa9d740ddde5e56aa0b7df55dc2f70c65f329d37246453c2b3316356f3f84cc9f87eb6b8db4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;AI与算法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;AI与算法&lt;/a&gt;&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568672&amp;amp;idx=1&amp;amp;sn=85e4b3e1c46289058398b216edb40941&amp;amp;chksm=eaa9d770ddde5e669cfaa25c37887ae058c433e4296ca04f8ff5373184bc76d4420f1d2049a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运维｜&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;运维&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568677&amp;amp;idx=1&amp;amp;sn=e95255553777c53d38cb1e64c1c16432&amp;amp;chksm=eaa9d775ddde5e633a75d20eb484181c0e03cb6f8237a4141c599e4f13ad3af6748c5e8d1a9a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程师文化&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;工程师文化&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5294117647058824&quot; data-w=&quot;68&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/FBfnpCtdk5Ua19DY7eDCCw2Ib0OB5dRiclmhic9dsa8hk0M6mcNLn6oE88gJNz6hVhZGcvgbJyicQSuBsfr7ppw4w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzI2NDU4OTExOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe97ibOIthe2pvwt1H0HqX0HVJVFK9WPNQKNsibXynR5yT5S7b45uIpzN7xeZdeJIfOibPjOflZ35rKZyw/0?wx_fmt=png&quot; data-nickname=&quot;腾讯云开发者&quot; data-alias=&quot;QcloudCommunity&quot; data-signature=&quot;腾讯云官方社区公众号，汇聚技术开发者群体，分享技术干货，打造技术影响力交流社区。&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; data-index=&quot;0&quot; data-origin_num=&quot;661&quot; data-isban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;🔹&lt;/span&gt;关注我并点亮星标🔹&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;工作日晚8点 &lt;/span&gt;看腾讯技术、学专家经验&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14891774891774892&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe97cmzYib31ba8KU75MpjcP92FLPQsib6z3V0Hj3cdk4fEI2M9hCECN7ZCiasfYm0Nzo7S2OAiaZ0pAZiaw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1155&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>