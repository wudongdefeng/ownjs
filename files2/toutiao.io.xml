<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>87d58d3746964d4a7e6ce5a6866d84c7</guid>
<title>20+ 前端开发好用组件 &amp; 插件轮子</title>
<link>https://toutiao.io/k/eugemzz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry&quot;&gt;
      
        &lt;p&gt;对前端开发中常用的组件 &amp;amp; 插件，进行了整理，一个好的插件库可以大大的提升我们开发的效率。更不需要自己再花费时间创造重复的轮子。大家可以收藏，以备后用，也会持续更新~&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;
&lt;h2 id=&quot;Vue-UI-组件库&quot;&gt;&lt;a href=&quot;#Vue-UI-组件库&quot; class=&quot;headerlink&quot; title=&quot;Vue UI 组件库&quot;/&gt;Vue UI 组件库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Element UI&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt; Element Plus支持Vue3，国内用的非常多，组件丰富，且可以自定义覆盖样式的组件库，适合PC和桌面端应用。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://element-plus.org/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://element-plus.org/zh-CN/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vant&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 有赞公司旗下的开源组件库，适用于移动端开发。组件齐全，使用简单，UI设计也非常漂亮。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;http://youzan.github.io/vant/#/zh-C%E2%80%A6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;youzan.github.io/vant/#/zh-C…&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vuetify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 建立在Vue.js之上的完备的界面框架。符合 Material Design设计规范。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://vuetifyjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://vuetifyjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Naive UI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一个 Vue 3 组件库，主题可调，使用 TypeScript，快。只需要提供一个样式覆盖的对象，就可以自定义主题系统。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.naiveui.com/zh-CN/os-theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.naiveui.com/zh-CN/os-theme&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;React-UI-组件库&quot;&gt;&lt;a href=&quot;#React-UI-组件库&quot; class=&quot;headerlink&quot; title=&quot;React UI 组件库&quot;/&gt;React UI 组件库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ant Design&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt; 文档齐全，社区生态良好，有手机版，还有PC版。可以用来快速创建手机/后台/内部应用的UI组件库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://ant.design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ant.design/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mui&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 符合谷歌Material Design 设计语言的React组件UI库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://mui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mui.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;动画库&quot;&gt;&lt;a href=&quot;#动画库&quot; class=&quot;headerlink&quot; title=&quot;动画库&quot;/&gt;动画库&lt;/h2&gt;&lt;p&gt;1、&lt;strong&gt;Animate.css&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;纯css的动画库，内置了超多的动画效果，可以直接在线预览动画效果。&lt;/p&gt;
&lt;p&gt;网址：&lt;a href=&quot;https://animate.style/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://animate.style/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;Lottiefiles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动画效果的图片，小部件，可以在线创建编辑，生成Gif或者导出Svg。也有很多现成的很多动画效果部件，可以方便的将动画效果组件集成到产品里。&lt;/p&gt;
&lt;p&gt;网址：&lt;a href=&quot;https://lottiefiles.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lottiefiles.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;交互效果组件&quot;&gt;&lt;a href=&quot;#交互效果组件&quot; class=&quot;headerlink&quot; title=&quot;交互效果组件&quot;/&gt;交互效果组件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Swiper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 滑动特效插件，纯javascript打造，面向手机、平板电脑等移动终端。不依赖于公共库。支持流行的前端框架，如React，Svelte，Vue.js，Angular等&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.swiper.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.swiper.com.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mescroll&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 下拉刷新和上拉刷新的js框架，适用H5，原生js, 不依赖jquery,zepto，支持vue。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;http://www.mescroll.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mescroll.com/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;图标组件库&quot;&gt;&lt;a href=&quot;#图标组件库&quot; class=&quot;headerlink&quot; title=&quot;图标组件库&quot;/&gt;图标组件库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iconfont&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 千万矢量图标素材，支持单、多色图标。支持在线搜索，一键查询海量图标库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.iconfont.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.iconfont.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;xicons&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 整合自 fluentui-system-icons、ionicons、ant-design-icons、material-design-icons、Font-Awesome tabler-icons 和 carbon 的 SVG格式的 Vue/React 组件。可以很方便的将图标集成到产品里。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/07akioni/xicons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/07akioni/xicons&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Feather&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一个简单漂亮的开源SVG图标集合。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/feathericons/feather&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/feathericons/feather&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;日期时间&quot;&gt;&lt;a href=&quot;#日期时间&quot; class=&quot;headerlink&quot; title=&quot;日期时间&quot;/&gt;日期时间&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Day.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 解析、验证、操作和显示日期和时间。支持国际化。文件大小只有2KB左右，是一个极简的JavaScript库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://dayjs.fenxianglu.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dayjs.fenxianglu.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;timeago.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 显示(天、小时、分)之前效果，为了有更好的用户体验，xx time ago在很多产品里应用。i18n支持。文件小于2KB。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/hustcc/timeago.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hustcc/timeago.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Moment.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; JavaScript 日期处理类库。在浏览器和 Node.js 中都能工作。支持多语言。支持日期格式化、相对时间、日历时间。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;http://momentjs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://momentjs.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;工具类&quot;&gt;&lt;a href=&quot;#工具类&quot; class=&quot;headerlink&quot; title=&quot;工具类&quot;/&gt;工具类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lodash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 是一个一致性、模块化、高性能的JavaScript实用工具库。降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.lodashjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.lodashjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ECharts&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt; 一个基于 JavaScript 的开源可视化图表库。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://echarts.apache.org/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://echarts.apache.org/zh/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Ant Design Charts&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 简单好用的 React 图表库。蚂蚁集团全新一代数据可视化解决方案。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://charts.ant.design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://charts.ant.design/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MEditor.md&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一款开源在线 Markdown 编辑器&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://pandao.github.io/editor.md/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pandao.github.io/editor.md/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Validator.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 针对字符串的验证和串联库。比如：isEmail、isDate、isMobilePhone等&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/validatorjs/validator.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/validatorjs/validator.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vue.draggable.next&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Vue拖拽组件，基于Sortable.js的Vue 3 拖放组件。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/SortableJS/vue.draggable.next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/SortableJS/vue.draggable.next&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vue-qr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Vue组件，支持Vue2 / Vue3 /Vite。可以方便的生成各种格式二维码，包括彩色和自定义样式。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://www.npmjs.com/package/vue-qr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/package/vue-qr&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;vue-cropper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一个优雅的图片裁剪插件。&lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;https://github.com/xyxiao001/vue-cropper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xyxiao001/vue-cropper&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上，欢迎👏🏻收藏备用，如果有好的轮子可以留言分享~&lt;/p&gt;

      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8d8719256c2bd4866713a13a866ff733</guid>
<title>SpringBoot 在 IDEA 中同一个项目用不同端口启动</title>
<link>https://toutiao.io/k/kldllli</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot;&gt;
        
                &lt;div id=&quot;content_views&quot; class=&quot;htmledit_views&quot;&gt;
                    &lt;p&gt;在 IDEA 中开发或学习 Java 项目时，我们经常需要同一个项目以不同端口多此启动。比如，我们想测试 Nginx 的负载均衡，再比如我们想测试 OpenFeign 的负载均衡。&lt;/p&gt; 
&lt;p&gt;比如我们有一个 Test 项目，默认的端口是 8080,那么用 IDEA 可以启动它，但是再想启动它时貌似 IDEA 就没有办法了。导致我们会在命令行下使用 java -jar 的方式重新指定端口再启动一个实例。至少我就这么干过。&lt;/p&gt; 
&lt;p&gt;其实，IDEA 可以通过简单的配置来解决这样的问题，而且也非常的方便。&lt;/p&gt; 
&lt;p&gt;操作如下，在工具栏上选择edit configurations，如下图&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/f1e8c69fdd384bd884dafb843714cf24.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;然后， 添加新的配置，并选择 SpringBoot，如下图：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/2fc93b250787448081c6b7d1ddfeded3.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt; 添加后显示为 Unnamed，此时我们可以重命名，这里我们重命名为 TestApplication2，如下图&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/2f1f5606f34f4c598d707a11be562fb7.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;然后在 Main class 中选择我们的启动类，在 VM options 填写 -Dserver.port=8081，如下图：&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/fb91d762599c4df385cd22c023da3a0f.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;这样就可以点击 OK 按钮， 在工具栏的配置处可以看到有两个项目了，如下图&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/1a65968d8255432bb34b0aef5908d6f6.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;这时，就可以通过 IDEA 以 8081 端口号启动同一个项目了。 &lt;/p&gt; 
&lt;p/&gt;
                &lt;/div&gt;
        &lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d8c43c75aa16d647c228ad79cde40807</guid>
<title>经典的目标检测算法：CenterNet</title>
<link>https://toutiao.io/k/wxuzrud</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cf2c9f5753bbe470d56126d38476871f</guid>
<title>聊聊 K8S：K8S 集群搭建实战</title>
<link>https://toutiao.io/k/qap844a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2&gt;&lt;span&gt;一、环境准备&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;1.1 硬件要求&lt;/span&gt;&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;序号&lt;/th&gt;&lt;th&gt;硬件&lt;/th&gt;&lt;th&gt;硬件&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;CPU&lt;/td&gt;&lt;td&gt;至少2核&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;内存&lt;/td&gt;&lt;td&gt;至少2G&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;磁盘&lt;/td&gt;&lt;td&gt;至少50G&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;span&gt;1.2 集群节点&lt;/span&gt;&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;主机名&lt;/th&gt;&lt;th&gt;主机IP&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;k8s-master01&lt;/td&gt;&lt;td&gt;10.211.55.15&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node01&lt;/td&gt;&lt;td&gt;10.211.55.16&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node02&lt;/td&gt;&lt;td&gt;10.211.55.17&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;k8s-node03&lt;/td&gt;&lt;td&gt;10.211.55.18&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;span&gt;二、下载 centos&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;centos下载地址：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://mirrors.aliyun.com/centos/7/isos/x86_64/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;推荐大家使用 centos7.6 以上版本&lt;/p&gt;&lt;p&gt;查看 centos 系统版本命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cat /etc/centos-release&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置阿里云 yum 源：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 1.下载安装wget &lt;/span&gt;&lt;br/&gt;yum install -y wget &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 2.备份默认的yum &lt;/span&gt;&lt;br/&gt;mv /etc/yum.repos.d /etc/yum.repos.d.backup &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 3.设置新的yum目录 &lt;/span&gt;&lt;br/&gt;mkdir -p /etc/yum.repos.d &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 4.下载阿里yum配置到该目录中，选择对应版本 &lt;/span&gt;&lt;br/&gt;wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 5.更新epel源为阿里云epel源 &lt;/span&gt;&lt;br/&gt;mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup &lt;br/&gt;mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel- testing.repo.backup&lt;br/&gt;wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel- 7.repo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 6.重建缓存 &lt;/span&gt;&lt;br/&gt;yum clean all yum makecache &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 7.看一下yum仓库有多少包 &lt;/span&gt;&lt;br/&gt;yum repolist &lt;br/&gt;yum update&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;升级系统内核&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm &lt;br/&gt;yum --enablerepo=elrepo-kernel install -y kernel&lt;span&gt;-lt&lt;/span&gt; &lt;br/&gt;grep initrd16 /boot/grub2/grub.cfg &lt;br/&gt;grub2-set-default 0&lt;br/&gt;reboot&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看centos系统内核命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;uname -r &lt;br/&gt;uname -a&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看CPU命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lscpu&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看内存命令：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;free &lt;br/&gt;free -h&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看硬盘信息：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;fdisk -l&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;三、centos7 系统配置&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;3.1 关闭防火墙&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;systemctl stop firewalld &lt;br/&gt;systemctl &lt;span&gt;disable&lt;/span&gt; firewalld&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.2 关闭 selinux&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;sed -i &lt;span&gt;&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;&lt;/span&gt; /etc/sysconfig/selinux&lt;br/&gt;setenforce 0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.3 网桥过滤&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;vi /etc/sysctl.conf &lt;br/&gt;&lt;br/&gt;net.bridge.bridge-nf-call-ip6tables = 1 &lt;br/&gt;net.bridge.bridge-nf-call-iptables = 1 &lt;br/&gt;net.bridge.bridge-nf-call-arptables = 1 &lt;br/&gt;net.ipv4.ip_forward=1 net.ipv4.ip_forward_use_pmtu = 0 &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 生效命令 &lt;/span&gt;&lt;br/&gt;sysctl --system&lt;br/&gt;&lt;span&gt;# 查看效果 &lt;/span&gt;&lt;br/&gt;sysctl -a|grep &lt;span&gt;&quot;ip_forward&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.4 开启 IPVS&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 安装IPVS &lt;/span&gt;&lt;br/&gt;yum -y install ipset ipvsdm&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 编译ipvs.modules文件&lt;/span&gt;&lt;br/&gt;vi /etc/sysconfig/modules/ipvs.modules&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 文件内容如下&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#!/bin/bash &lt;/span&gt;&lt;br/&gt;modprobe -- ip_vs &lt;br/&gt;modprobe -- ip_vs_rr &lt;br/&gt;modprobe -- ip_vs_wrr &lt;br/&gt;modprobe -- ip_vs_sh &lt;br/&gt;modprobe -- nf_conntrack_ipv4&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 赋予权限并执行 &lt;/span&gt;&lt;br/&gt;chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;amp;&amp;amp; bash /etc/sysconfig/modules/ipvs.modules &amp;amp;&amp;amp;lsmod | grep -e ip_vs -e nf_conntrack_ipv4&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 重启电脑，检查是否生效&lt;/span&gt;&lt;br/&gt;reboot &lt;br/&gt;lsmod | grep ip_vs_rr&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.5 同步时间&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 安装软件&lt;/span&gt;&lt;br/&gt;yum -y install ntpdate&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 向阿里云服务器同步时间&lt;/span&gt;&lt;br/&gt;ntpdate time1.aliyun.com&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 删除本地时间并设置时区为上海&lt;/span&gt;&lt;br/&gt;rm -rf /etc/localtime &lt;br/&gt;ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 查看时间 &lt;/span&gt;&lt;br/&gt;date -R || date&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.6 命令补全&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 安装bash-completion &lt;/span&gt;&lt;br/&gt;yum -y install bash-completion bash-completion-extras &lt;br/&gt;&lt;span&gt;# 使用bash-completion &lt;/span&gt;&lt;br/&gt;&lt;span&gt;source&lt;/span&gt; /etc/profile.d/bash_completion.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.7 关闭 swap 分区&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 临时关闭&lt;/span&gt;&lt;br/&gt;swapoff -a&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 永久关闭&lt;/span&gt;&lt;br/&gt;vi /etc/fstab&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 将文件中的/dev/mapper/centos-swap这行代码注释掉&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# /dev/mapper/centos-swap swap swap defaults 0 0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 确认swap已经关闭：若swap行都显示 0 则表示关闭成功&lt;/span&gt;&lt;br/&gt;free -m&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;3.8 hosts 配置&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;vi /etc/hosts&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 文件内容如下: &lt;/span&gt;&lt;br/&gt;10.211.55.15 k8s-master01 &lt;br/&gt;10.211.55.16 k8s-node01 &lt;br/&gt;10.211.55.17 k8s-node02 &lt;br/&gt;10.211.55.18 k8s-node03&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;四、安装 docker&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;4.1 阿里云开发者平台&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;开发者平台官网地址：可以参考阿里云官网提供的docker安装教程进行安装。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;https://www.aliyun.com/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.2 安装 docker 前置条件&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;yum install -y yum-utils device-mapper-persistent-data lvm2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.3 添加源&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo &lt;br/&gt;&lt;br/&gt;yum makecache fast&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.4 查看 docker 更新版本&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;yum list docker-ce --showduplicates | sort -r&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.5 安装 docker 最新版本&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;yum -y install docker-ce&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 安装指定版本： &lt;/span&gt;&lt;br/&gt;yum -y install docker-ce-18.09.8&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.6 开启 docker 服务&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;systemctl start docker&lt;br/&gt;&lt;br/&gt;systemctl status docker&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.7 安装阿里云镜像加速器&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&lt;span&gt;&#x27;EOF&#x27;&lt;/span&gt; &lt;br/&gt;{ &lt;br/&gt;    &lt;span&gt;&quot;registry-mirrors&quot;&lt;/span&gt;: [&lt;span&gt;&quot;自己的阿里云镜像加速地址&quot;&lt;/span&gt;] &lt;br/&gt;}&lt;br/&gt;EOF&lt;br/&gt;&lt;br/&gt;systemctl daemon-reload &lt;br/&gt;systemctl restart docker&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.8 设置 docker 开机启动服务&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;systemctl &lt;span&gt;enable&lt;/span&gt; docker&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;4.9 修改 Cgroup Driver&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 修改daemon.json，新增：&lt;/span&gt;&lt;br/&gt;vi /etc/docker/daemon.json&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&quot;exec-opts&quot;&lt;/span&gt;: [&lt;span&gt;&quot;native.cgroupdriver=systemd&quot;&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 重启docker服务&lt;/span&gt;&lt;br/&gt;systemctl daemon-reload&lt;br/&gt;systemctl restart docker&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 查看修改后状态&lt;/span&gt;&lt;br/&gt;docker info | grep Cgroup&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;修改cgroupdriver是为了消除安装k8s集群时的告警：&lt;br/&gt;[WARNING IsDockerSystemdCheck]:&lt;br/&gt;detected “cgroupfs” as the Docker cgroup driver. The recommended driver is “systemd”.&lt;br/&gt;Please follow the guide at https://kubernetes.io/docs/setup/cri/……&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;span&gt;4.10 复习 docker 常用命令&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;docker -v &lt;br/&gt;docker version &lt;br/&gt;docker info&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;五、使用 kubeadm 快速安装&lt;/span&gt;&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;软件&lt;/th&gt;&lt;th&gt;kubeadm&lt;/th&gt;&lt;th&gt;kubelet&lt;/th&gt;&lt;th&gt;kubectl&lt;/th&gt;&lt;th&gt;docker-ce&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;版本&lt;/td&gt;&lt;td&gt;初始化集群管理集群，版本：1.17.5&lt;/td&gt;&lt;td&gt;用于接收api-server指令，对pod生命周期进行管理，版本：1.17.5&lt;/td&gt;&lt;td&gt;集群命令行管理工具，版本：1.17.5&lt;/td&gt;&lt;td&gt;推荐使用版本：19.03.8&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;&lt;span&gt;5.1 安装 yum 源&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;5.1.1 新建 repo 文件&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; vi /etc/yum.repos.d/kubernetes.repo&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.1.2 文件内容&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;[kubernetes]&lt;br/&gt;name=Kubernetes&lt;br/&gt;baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64&lt;br/&gt;enabled=1&lt;br/&gt;gpgcheck=1&lt;br/&gt;repo_gpgcheck=1&lt;br/&gt;gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg&lt;br/&gt;       https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果有报错，则把 gpgcheck、repo_gpgcheck 的值设置成0。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5.1.3 更新缓存&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;yum clean all &lt;br/&gt;yum -y makecache&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.1.4 验证源是否可用&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;yum list | grep kubeadm &lt;br/&gt;&lt;span&gt;# 如果提示要验证yum-key.gpg是否可用，输入y。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 查找到kubeadm。显示版本&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.1.5 查看 k8s 版本&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; yum list kubelet --showduplicates | sort -r&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.1.6 安装 k8s-1.17.5&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; yum install -y kubelet-1.17.5 kubeadm-1.17.5 kubectl-1.17.5&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.2 设置 kubelet&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;5.2.1 增加配置信息&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 如果不配置kubelet，可能会导致K8S集群无法启动。为实现docker使用的cgroupdriver与kubelet 使用的cgroup的一致性。&lt;/span&gt;&lt;br/&gt;vi /etc/sysconfig/kubelet &lt;br/&gt;&lt;br/&gt;KUBELET_EXTRA_ARGS=&lt;span&gt;&quot;--cgroup-driver=systemd&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.2.2 设置开机启动&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;systemctl &lt;span&gt;enable&lt;/span&gt; kubelet&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.3 初始化镜像&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;如果是第一次安装k8s，手里没有备份好的镜像，可以执行如下操作。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5.3.1 查看安装集群需要的镜像&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;kubeadm config images list&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.3.2 编写执行脚本&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;mkdir -p /data&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; /data &lt;br/&gt;vi k8s.1.17.5-images.sh&lt;br/&gt;&lt;br/&gt;images=( &lt;br/&gt;    kube-apiserver:v1.17.5 &lt;br/&gt;    kube-controller-manager:v1.17.5 &lt;br/&gt;    kube-scheduler:v1.17.5 &lt;br/&gt;    kube-proxy:v1.17.5 &lt;br/&gt;    pause:3.1 &lt;br/&gt;    etcd:3.4.3-0 &lt;br/&gt;    coredns:1.6.5 &lt;br/&gt;)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; imageName &lt;span&gt;in&lt;/span&gt; &lt;span&gt;${images[@]}&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;do&lt;/span&gt;&lt;br/&gt;    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/&lt;span&gt;$imageName&lt;/span&gt;&lt;br/&gt;    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/&lt;span&gt;$imageName&lt;/span&gt; k8s.gcr.io/&lt;span&gt;$imageName&lt;/span&gt;&lt;br/&gt;    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/&lt;span&gt;$imageName&lt;/span&gt;&lt;br/&gt;&lt;span&gt;done&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.3.3 执行脚本&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;cd&lt;/span&gt; /data &lt;br/&gt;&lt;span&gt;# 给脚本授权 &lt;/span&gt;&lt;br/&gt;chmod +x images.sh&lt;br/&gt;&lt;span&gt;# 执行脚本 &lt;/span&gt;&lt;br/&gt;./k8s.1.17.5-images.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.3.4 保存镜像&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;docker save -o k8s.1.17.5.tar \ &lt;br/&gt;k8s.gcr.io/kube-proxy:v1.17.5 \ &lt;br/&gt;k8s.gcr.io/kube-apiserver:v1.17.5 \ &lt;br/&gt;k8s.gcr.io/kube-controller-manager:v1.17.5 \ &lt;br/&gt;k8s.gcr.io/kube-scheduler:v1.17.5 \ &lt;br/&gt;k8s.gcr.io/coredns:1.6.5 \ &lt;br/&gt;k8s.gcr.io/etcd:3.4.3-0 \ &lt;br/&gt;k8s.gcr.io/pause:3.1 \&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.3.5 导入镜像&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;导入master节点镜像tar包&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# master节点需要全部镜像 &lt;/span&gt;&lt;br/&gt;docker load -i k8s.1.17.5.tar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;导入node节点镜像tar包&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# node节点需要kube-proxy:v1.17.5和pause:3.1,2个镜像 &lt;/span&gt;&lt;br/&gt;docker load -i k8s.1.17.5.node.tar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;5.4 初始化集群&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;配置k8s集群网络&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5.4.1 calico 官网地址&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;# 官网下载地址： &lt;/span&gt;&lt;br/&gt;https://docs.projectcalico.org/v3.14/manifests/calico.yaml &lt;br/&gt;&lt;span&gt;# github地址： &lt;/span&gt;&lt;br/&gt;https://github.com/projectcalico/calico &lt;br/&gt;&lt;span&gt;# 镜像下载： &lt;/span&gt;&lt;br/&gt;docker pull calico/cni:v3.14.2 &lt;br/&gt;docker pull calico/pod2daemon-flexvol:v3.14.2 &lt;br/&gt;docker pull calico/node:v3.14.2 &lt;br/&gt;docker pull calico/kube-controllers:v3.14.2&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 配置hostname： &lt;/span&gt;&lt;br/&gt;hostnamectl &lt;span&gt;set&lt;/span&gt;-hostname k8s-master01&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2980769230769231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/80icw67Ot0qIYpv4hZfPSMYw8wkhEJktk1PbbO3ffvpQDmVw9V7PTEEWSH67HvibRC34QBicnvylAJL6EhmPjNYhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1872&quot; title=&quot;在这里插入图片描述&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;需要这么多镜像&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;5.4.2 初始化集群信息:calico网络&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;kubeadm init --apiserver-advertise-address=192.168.198.156 --kubernetes- version v1.17.5 --service-cidr=10.1.0.0/16 --pod-network-cidr=10.81.0.0/16&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;192.168.198.156 替换成你主节点的IP地址。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39148073022312374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/80icw67Ot0qIYpv4hZfPSMYw8wkhEJktkQzd6LYcBtuwN4q53HMOLy23zNxyibWYLZ6CBribtIxYHV0HAF9NY2qiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1972&quot; title=&quot;在这里插入图片描述&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;5.4.3 执行配置命令&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;mkdir -p &lt;span&gt;$HOME&lt;/span&gt;/.kube &lt;br/&gt;sudo cp -i /etc/kubernetes/admin.conf &lt;span&gt;$HOME&lt;/span&gt;/.kube/config &lt;br/&gt;sudo chown $(id -u):$(id -g) &lt;span&gt;$HOME&lt;/span&gt;/.kube/config&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.4.4 node节点加入集群信息&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;kubeadm join 192.168.198.186:6443 --token kksfgq.b9bhf82y35ufw4np \ &lt;br/&gt;    --discovery-token-ca-cert-hash sha256:e1e347e6db1db5c13fcdc2c7d51a2f9029100a4cc13c2d89a2dbfa5077f5b07f&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.4.5 kubectl命令自动补全&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;source &amp;lt;(kubectl completion bash)&quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile &lt;br/&gt;&lt;span&gt;source&lt;/span&gt; ~/.bash_profile&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;5.4.6 测试 k8s 集群环境&lt;/span&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;kubectl get nodes&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.20722135007849293&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/80icw67Ot0qIYpv4hZfPSMYw8wkhEJktkPL30TibkwnOictmZXJBV14xfwz7QiaU86Jas0RmbQ5YnLowWK1syLg01Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot; title=&quot;在这里插入图片描述&quot;/&gt;&lt;/figure&gt;&lt;br/&gt;发现集群的节点都是 NotReady 的状态，这是因为你还没有应用 calico 网络的配置。&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>68583151fa8e9bcbf1d59b467bc64233</guid>
<title>Go 每日一库之调用外部命令的几种姿势</title>
<link>https://toutiao.io/k/c2st1a1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;引子&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在工作中，我时不时地会需要在Go中调用外部命令。前段时间我做了一个工具，在钉钉群中添加了一个机器人，@这个机器人可以让它执行一些写好的脚本程序完成指定的任务。机器人倒是不难，照着钉钉开发者文档添加好机器人，然后@这个机器人就会向一个你指定的服务器发送一个POST请求，请求中会附带文本消息。所以我要做的就是搭一个Web服务器，可以用go原生的net/http包，也可以用gin/fasthttp/fiber这些Web框架。收到请求之后，检查附带文本中的关键字去调用对应的程序，然后返回结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;go标准库中的os/exec包对调用外部程序提供了支持，本文详细介绍os/exec的使用姿势。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;运行命令&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux中有个&lt;code&gt;cal&lt;/code&gt;命令，它可以显示指定年、月的日历，如果不指定年、月，默认为当前时间对应的年月。如果使用的是Windows，推荐安装msys2，这个软件包含了绝大多数的Linux常用命令。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8791666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K8wfjf2LnNX879IkGB67JUE2eCTXgDQqtAERicjQ6Lm5icJDYzvu86yFPgQsLsNiaz33SRia2PCFKGLClmA0wGlJ0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;240&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9387755102040817&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K8wfjf2LnNX879IkGB67JUE2eCTXgDQqL8VTkzUsiaM9PPmcLsHibJsd2nlbD0mhaaQ1zciaWAyibkm839AN4T5AKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;245&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，在Go代码中怎么调用这个命令呢？其实也很简单：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;)&lt;br/&gt;  err := cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们调用&lt;code&gt;exec.Command&lt;/code&gt;传入命令名，创建一个命令对象&lt;code&gt;exec.Cmd&lt;/code&gt;。接着调用该命令对象的&lt;code&gt;Run()&lt;/code&gt;方法运行它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你实际运行了，你会发现什么也没有发生，哈哈。事实上，使用os/exec执行命令，标准输出和标准错误默认会被丢弃。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;显示输出&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;exec.Cmd&lt;/code&gt;对象有两个字段&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;，类型皆为&lt;code&gt;io.Writer&lt;/code&gt;。我们可以将任意实现了&lt;code&gt;io.Writer&lt;/code&gt;接口的类型实例赋给这两个字段，继而实现标准输出和标准错误的重定向。&lt;code&gt;io.Writer&lt;/code&gt;接口在 Go 标准库和第三方库中随处可见，例如&lt;code&gt;*os.File&lt;/code&gt;、&lt;code&gt;*bytes.Buffer&lt;/code&gt;、&lt;code&gt;net.Conn&lt;/code&gt;。所以我们可以将命令的输出重定向到文件、内存缓存甚至发送到网络中。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;显示到标准输出&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将&lt;code&gt;exec.Cmd&lt;/code&gt;对象的&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;这两个字段都设置为&lt;code&gt;os.Stdout&lt;/code&gt;，那么输出内容都将显示到标准输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;)&lt;br/&gt;  cmd.Stdout = os.Stdout&lt;br/&gt;  cmd.Stderr = os.Stderr&lt;br/&gt;  err := cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序。我在git bash运行，得到如下结果：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.83399209486166&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K8wfjf2LnNX879IkGB67JUE2eCTXgDQqrmsbycqrOw8uFZgKO9c04ibRC56R2qzgoMnKDZovnEoWkYlchlz1k0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;253&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出了中文，检查一下环境变量LANG的值，果然是&lt;code&gt;zh_CN.UTF-8&lt;/code&gt;。如果想输出英文，可以将环境变量LANG设置为&lt;code&gt;en_US.UTF-8&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$LANG&lt;/span&gt;&lt;br/&gt;zh_CN.UTF-8&lt;br/&gt;$ LANG=en_US.UTF-8 go run main.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;得到输出：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5454545454545454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K8wfjf2LnNX879IkGB67JUE2eCTXgDQq4RC6uCZmqs3wOfXFyBibaAr2j0jqXR5jzla1YneG4vHNJejPWWEUWKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;385&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;输出到文件&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开或创建文件，然后将文件句柄赋给&lt;code&gt;exec.Cmd&lt;/code&gt;对象的&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;这两个字段即可实现输出到文件的功能。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  f, err := os.OpenFile(&lt;span&gt;&quot;out.txt&quot;&lt;/span&gt;, os.O_WRONLY|os.O_CREATE, os.ModePerm)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;os.OpenFile() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;)&lt;br/&gt;  cmd.Stdout = f&lt;br/&gt;  cmd.Stderr = f&lt;br/&gt;  err = cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;os.OpenFile&lt;/code&gt;打开一个文件，指定&lt;code&gt;os.O_CREATE&lt;/code&gt;标志让操作系统在文件不存在时自动创建一个，返回该文件对象&lt;code&gt;*os.File&lt;/code&gt;。&lt;code&gt;*os.File&lt;/code&gt;实现了&lt;code&gt;io.Writer&lt;/code&gt;接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ go run main.go&lt;br/&gt;$ cat out.txt&lt;br/&gt;    November 2022   &lt;br/&gt;Su Mo Tu We Th Fr Sa&lt;br/&gt;       1  2  3  4  5&lt;br/&gt; 6  7  8  9 10 11 12&lt;br/&gt;13 14 15 16 17 18 19&lt;br/&gt;20 21 22 23 24 25 26&lt;br/&gt;27 28 29 30&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;发送到网络&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们来编写一个日历服务，接收年、月信息，返回该月的日历。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;cal&lt;/span&gt;&lt;span&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  year := r.URL.Query().Get(&lt;span&gt;&quot;year&quot;&lt;/span&gt;)&lt;br/&gt;  month := r.URL.Query().Get(&lt;span&gt;&quot;month&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;, month, year)&lt;br/&gt;  cmd.Stdout = w&lt;br/&gt;  cmd.Stderr = w&lt;br/&gt;&lt;br/&gt;  err := cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  http.HandleFunc(&lt;span&gt;&quot;/cal&quot;&lt;/span&gt;, cal)&lt;br/&gt;  http.ListenAndServe(&lt;span&gt;&quot;:8080&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里为了简单，错误处理都省略了。正常情况下，year和month参数都需要做合法性校验。&lt;code&gt;exec.Command&lt;/code&gt;函数接收一个字符串类型的可变参数作为命令的参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Command&lt;/span&gt;&lt;span&gt;(name &lt;span&gt;string&lt;/span&gt;, arg ...&lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; *&lt;span&gt;Cmd&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序，使用浏览器请求&lt;code&gt;localhost:8080/cal?year=2021&amp;amp;month=2&lt;/code&gt;得到：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.951048951048951&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K8wfjf2LnNX879IkGB67JUE2eCTXgDQqRx4E5n2k5J3rBV2kWBTxeicY7EpZWzSnVxlJMfYmAfJKuXlxCAiaBcTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;572&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;保存到内存对象中&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;*bytes.Buffer&lt;/code&gt;同样也实现了&lt;code&gt;io.Writer&lt;/code&gt;接口，故如果我们创建一个&lt;code&gt;*bytes.Buffer&lt;/code&gt;对象，并将其赋给&lt;code&gt;exec.Cmd&lt;/code&gt;的&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;这两个字段，那么命令执行之后，该&lt;code&gt;*bytes.Buffer&lt;/code&gt;对象中保存的就是命令的输出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  buf := bytes.NewBuffer(&lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;)&lt;br/&gt;  cmd.Stdout = buf&lt;br/&gt;  cmd.Stderr = buf&lt;br/&gt;  err := cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  fmt.Println(buf.String())&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ go run main.go&lt;br/&gt;    November 2022   &lt;br/&gt;Su Mo Tu We Th Fr Sa&lt;br/&gt;       1  2  3  4  5&lt;br/&gt; 6  7  8  9 10 11 12&lt;br/&gt;13 14 15 16 17 18 19&lt;br/&gt;20 21 22 23 24 25 26&lt;br/&gt;27 28 29 30&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行命令，然后得到输出的字符串或字节切片这种模式是如此的普遍，并且使用便利，&lt;code&gt;os/exec&lt;/code&gt;包提供了一个便捷方法：&lt;code&gt;CombinedOutput&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;输出到多个目的地&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时，我们希望能输出到文件和网络，同时保存到内存对象。使用go提供的&lt;code&gt;io.MultiWriter&lt;/code&gt;可以很容易实现这个需求。&lt;code&gt;io.MultiWriter&lt;/code&gt;很方便地将多个&lt;code&gt;io.Writer&lt;/code&gt;转为一个&lt;code&gt;io.Writer&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们稍微修改上面的web程序：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;cal&lt;/span&gt;&lt;span&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  year := r.URL.Query().Get(&lt;span&gt;&quot;year&quot;&lt;/span&gt;)&lt;br/&gt;  month := r.URL.Query().Get(&lt;span&gt;&quot;month&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;  f, _ := os.OpenFile(&lt;span&gt;&quot;out.txt&quot;&lt;/span&gt;, os.O_CREATE|os.O_WRONLY, os.ModePerm)&lt;br/&gt;  buf := bytes.NewBuffer(&lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;  mw := io.MultiWriter(w, f, buf)&lt;br/&gt;&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;, month, year)&lt;br/&gt;  cmd.Stdout = mw&lt;br/&gt;  cmd.Stderr = mw&lt;br/&gt;&lt;br/&gt;  err := cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  fmt.Println(buf.String())&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用&lt;code&gt;io.MultiWriter&lt;/code&gt;将多个&lt;code&gt;io.Writer&lt;/code&gt;整合成一个&lt;code&gt;io.Writer&lt;/code&gt;，然后将cmd对象的&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;都赋值为这个&lt;code&gt;io.Writer&lt;/code&gt;。这样，命令运行时产出的输出会分别送往&lt;code&gt;http.ResponseWriter&lt;/code&gt;、&lt;code&gt;*os.File&lt;/code&gt;以及&lt;code&gt;*bytes.Buffer&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;运行命令，获取输出&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到，我们常常需要运行命令，返回输出。&lt;code&gt;exec.Cmd&lt;/code&gt;对象提供了一个便捷方法：&lt;code&gt;CombinedOutput()&lt;/code&gt;。该方法运行命令，将输出内容以一个字节切片返回便于后续处理。所以，上面获取输出的程序可以简化为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;)&lt;br/&gt;  output, err := cmd.CombinedOutput()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  fmt.Println(&lt;span&gt;string&lt;/span&gt;(output))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;So easy!&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CombinedOutput()&lt;/code&gt;方法的实现很简单，先将标准输出和标准错误重定向到&lt;code&gt;*bytes.Buffer&lt;/code&gt;对象，然后运行程序，最后返回该对象中的字节切片：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *Cmd)&lt;/span&gt; &lt;span&gt;CombinedOutput&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; c.Stdout != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errors.New(&lt;span&gt;&quot;exec: Stdout already set&quot;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; c.Stderr != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, errors.New(&lt;span&gt;&quot;exec: Stderr already set&quot;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; b bytes.Buffer&lt;br/&gt;  c.Stdout = &amp;amp;b&lt;br/&gt;  c.Stderr = &amp;amp;b&lt;br/&gt;  err := c.Run()&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; b.Bytes(), err&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CombinedOutput&lt;/code&gt;方法前几行判断表明，&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;必须是未设置状态。这其实很好理解，一般情况下，如果已经打算使用&lt;code&gt;CombinedOutput&lt;/code&gt;方法获取输出内容，不会再自找麻烦地再去设置&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;字段了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与&lt;code&gt;CombinedOutput&lt;/code&gt;类似的还有&lt;code&gt;Output&lt;/code&gt;方法，区别是&lt;code&gt;Output&lt;/code&gt;只会返回运行命令产出的标准输出内容。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分别获取标准输出和标准错误&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建两个&lt;code&gt;*bytes.Buffer&lt;/code&gt;对象，分别赋给&lt;code&gt;exec.Cmd&lt;/code&gt;对象的&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;这两个字段，然后运行命令即可分别获取标准输出和标准错误。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;, &lt;span&gt;&quot;15&quot;&lt;/span&gt;, &lt;span&gt;&quot;2012&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; stdout, stderr bytes.Buffer&lt;br/&gt;  cmd.Stdout = &amp;amp;stdout&lt;br/&gt;  cmd.Stderr = &amp;amp;stderr&lt;br/&gt;  err := cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  fmt.Printf(&lt;span&gt;&quot;output:\n%s\nerror:\n%s\n&quot;&lt;/span&gt;, stdout.String(), stderr.String())&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;标准输入&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;exec.Cmd&lt;/code&gt;对象有一个类型为&lt;code&gt;io.Reader&lt;/code&gt;的字段&lt;code&gt;Stdin&lt;/code&gt;。命令运行时会从这个&lt;code&gt;io.Reader&lt;/code&gt;读取输入。先来看一个最简单的例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;cat&quot;&lt;/span&gt;)&lt;br/&gt;  cmd.Stdin = bytes.NewBufferString(&lt;span&gt;&quot;hello\nworld&quot;&lt;/span&gt;)&lt;br/&gt;  cmd.Stdout = os.Stdout&lt;br/&gt;  err := cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不带参数运行&lt;code&gt;cat&lt;/code&gt;命令，则进入交互模式，&lt;code&gt;cat&lt;/code&gt;按行读取输入，并且原样发送到输出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看一个复杂点的例子。Go标准库中&lt;code&gt;compress/bzip2&lt;/code&gt;包只提供解压方法，并没有压缩方法。我们可以利用Linux命令&lt;code&gt;bzip2&lt;/code&gt;实现压缩。&lt;code&gt;bzip2&lt;/code&gt;从标准输入中读取数据，将其压缩，并发送到标准输出。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;bzipCompress&lt;/span&gt;&lt;span&gt;(d []&lt;span&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; out bytes.Buffer&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;bzip2&quot;&lt;/span&gt;, &lt;span&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span&gt;&quot;-9&quot;&lt;/span&gt;)&lt;br/&gt;  cmd.Stdin = bytes.NewBuffer(d)&lt;br/&gt;  cmd.Stdout = &amp;amp;out&lt;br/&gt;  err := cmd.Run()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; out.Bytes(), &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参数&lt;code&gt;-c&lt;/code&gt;表示压缩，&lt;code&gt;-9&lt;/code&gt;表示压缩等级，9为最高。为了验证函数的正确性，写个简单的程序，先压缩&quot;hello world&quot;字符串，然后解压，看看是否能得到原来的字符串：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  data := []&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;&quot;hello world&quot;&lt;/span&gt;)&lt;br/&gt;  compressed, _ := bzipCompress(data)&lt;br/&gt;  r := bzip2.NewReader(bytes.NewBuffer(compressed))&lt;br/&gt;  decompressed, _ := ioutil.ReadAll(r)&lt;br/&gt;  fmt.Println(&lt;span&gt;string&lt;/span&gt;(decompressed))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序，输出&quot;hello world&quot;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;环境变量&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;环境变量可以在一定程度上微调程序的行为，当然这需要程序的支持。例如，设置&lt;code&gt;ENV=production&lt;/code&gt;会抑制调试日志的输出。每个环境变量都是一个键值对。&lt;code&gt;exec.Cmd&lt;/code&gt;对象中有一个类型为&lt;code&gt;[]string&lt;/code&gt;的字段&lt;code&gt;Env&lt;/code&gt;。我们可以通过修改它来达到控制命令运行时的环境变量的目的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;os&quot;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&quot;os/exec&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  cmd := exec.Command(&lt;span&gt;&quot;bash&quot;&lt;/span&gt;, &lt;span&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span&gt;&quot;./test.sh&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;  nameEnv := &lt;span&gt;&quot;NAME=darjun&quot;&lt;/span&gt;&lt;br/&gt;  ageEnv := &lt;span&gt;&quot;AGE=18&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  newEnv := &lt;span&gt;append&lt;/span&gt;(os.Environ(), nameEnv, ageEnv)&lt;br/&gt;  cmd.Env = newEnv&lt;br/&gt;&lt;br/&gt;  out, err := cmd.CombinedOutput()&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    log.Fatalf(&lt;span&gt;&quot;cmd.Run() failed: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  fmt.Println(&lt;span&gt;string&lt;/span&gt;(out))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码获取系统的环境变量，然后又添加了两个环境变量&lt;code&gt;NAME&lt;/code&gt;和&lt;code&gt;AGE&lt;/code&gt;。最后使用&lt;code&gt;bash&lt;/code&gt;运行脚本&lt;code&gt;test.sh&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/bin/bash&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;echo $NAME&lt;br/&gt;echo $AGE&lt;br/&gt;echo $GOPATH&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ go run main.go &lt;br/&gt;darjun&lt;br/&gt;18&lt;br/&gt;D:\workspace\code\go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;检查命令是否存在&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般在运行命令之前，我们通过希望能检查要运行的命令是否存在，如果存在则直接运行，否则提示用户安装此命令。&lt;code&gt;os/exec&lt;/code&gt;包提供了函数&lt;code&gt;LookPath&lt;/code&gt;可以获取命令所在目录，如果命令不存在，则返回一个error。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  path, err := exec.LookPath(&lt;span&gt;&quot;ls&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;no cmd ls: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;find ls in path:%s\n&quot;&lt;/span&gt;, path)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  path, err = exec.LookPath(&lt;span&gt;&quot;not-exist&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;no cmd not-exist: %v\n&quot;&lt;/span&gt;, err)&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    fmt.Printf(&lt;span&gt;&quot;find not-exist in path:%s\n&quot;&lt;/span&gt;, path)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ go run main.go &lt;br/&gt;find ls &lt;span&gt;in&lt;/span&gt; path:C:\Program Files\Git\usr\bin\ls.exe&lt;br/&gt;no cmd not-exist: &lt;span&gt;exec&lt;/span&gt;: &lt;span&gt;&quot;not-exist&quot;&lt;/span&gt;: executable file not found &lt;span&gt;in&lt;/span&gt; %PATH%&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;封装&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行外部命令的流程比较固定：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;调用&lt;code&gt;exec.Command()&lt;/code&gt;创建命令对象；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调用&lt;code&gt;Cmd.Run()&lt;/code&gt;执行命令&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要获取输出，需要调用&lt;code&gt;CombinedOutput/Output&lt;/code&gt;之类的方法，或者手动创建&lt;code&gt;bytes.Buffer&lt;/code&gt;对象并赋值给&lt;code&gt;exec.Cmd&lt;/code&gt;的&lt;code&gt;Stdout&lt;/code&gt;和&lt;code&gt;Stderr&lt;/code&gt;字段。为了使用方便，我编写了一个包&lt;code&gt;goexec&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 执行命令，丢弃标准输出和标准错误&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;RunCommand&lt;/span&gt;&lt;span&gt;(cmd &lt;span&gt;string&lt;/span&gt;, arg []&lt;span&gt;string&lt;/span&gt;, opts ...Option)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 执行命令，以[]byte类型返回输出&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;CombinedOutput&lt;/span&gt;&lt;span&gt;(cmd &lt;span&gt;string&lt;/span&gt;, arg []&lt;span&gt;string&lt;/span&gt;, opts ...Option)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 执行命令，以string类型返回输出&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;CombinedOutputString&lt;/span&gt;&lt;span&gt;(cmd &lt;span&gt;string&lt;/span&gt;, arg []&lt;span&gt;string&lt;/span&gt;, opts ...Option)&lt;/span&gt; &lt;span&gt;(&lt;span&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 执行命令，以[]byte类型返回标准输出&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Output&lt;/span&gt;&lt;span&gt;(cmd &lt;span&gt;string&lt;/span&gt;, arg []&lt;span&gt;string&lt;/span&gt;, opts ...Option)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 执行命令，以string类型返回标准输出&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;OutputString&lt;/span&gt;&lt;span&gt;(cmd &lt;span&gt;string&lt;/span&gt;, arg []&lt;span&gt;string&lt;/span&gt;, opts ...Option)&lt;/span&gt; &lt;span&gt;(&lt;span&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 执行命令，以[]byte类型分别返回标准输出和标准错误&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;SeparateOutput&lt;/span&gt;&lt;span&gt;(cmd &lt;span&gt;string&lt;/span&gt;, arg []&lt;span&gt;string&lt;/span&gt;, opts ...Option)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, []&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 执行命令，以string类型分别返回标准输出和标准错误&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;SeparateOutputString&lt;/span&gt;&lt;span&gt;(cmd &lt;span&gt;string&lt;/span&gt;, arg []&lt;span&gt;string&lt;/span&gt;, opts ...Option)&lt;/span&gt; &lt;span&gt;(&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相较于直接使用&lt;code&gt;os/exec&lt;/code&gt;包，我倾向于一次函数调用就能获得结果。对输入、设置环境变量这些功能，我通过&lt;strong&gt;Option模式&lt;/strong&gt;来提供支持。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Option &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(*exec.Cmd)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;WithStdin&lt;/span&gt;&lt;span&gt;(stdin io.Reader)&lt;/span&gt; &lt;span&gt;Option&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *exec.Cmd)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    c.Stdin = stdin&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Without&lt;/span&gt;&lt;span&gt;(stdout io.Writer)&lt;/span&gt; &lt;span&gt;Option&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *exec.Cmd)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    c.Stdout = stdout&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;WithStderr&lt;/span&gt;&lt;span&gt;(stderr io.Writer)&lt;/span&gt; &lt;span&gt;Option&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *exec.Cmd)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    c.Stderr = stderr&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;WithOutWriter&lt;/span&gt;&lt;span&gt;(out io.Writer)&lt;/span&gt; &lt;span&gt;Option&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *exec.Cmd)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    c.Stdout = out&lt;br/&gt;    c.Stderr = out&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;WithEnv&lt;/span&gt;&lt;span&gt;(key, value &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;Option&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *exec.Cmd)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    c.Env = &lt;span&gt;append&lt;/span&gt;(os.Environ(), fmt.Sprintf(&lt;span&gt;&quot;%s=%s&quot;&lt;/span&gt;, key, value))&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;applyOptions&lt;/span&gt;&lt;span&gt;(cmd *exec.Cmd, opts []Option)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; _, opt := &lt;span&gt;range&lt;/span&gt; opts {&lt;br/&gt;    opt(cmd)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用非常简单：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  fmt.Println(goexec.CombinedOutputString(&lt;span&gt;&quot;cal&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;, goexec.WithEnv(&lt;span&gt;&quot;LANG&quot;&lt;/span&gt;, &lt;span&gt;&quot;en_US.UTF-8&quot;&lt;/span&gt;)))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一点我不太满意，为了使用Option模式，本来可以用可变参数来传递命令参数，现在只能用切片了，即使不需要指定参数，也必须要传入一个&lt;code&gt;nil&lt;/code&gt;。暂时还没有想到比较优雅的解决方法。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文介绍了使用&lt;code&gt;os/exec&lt;/code&gt;这个标准库调用外部命令的各种姿势。同时为了便于使用，我编写了一个goexec包封装对&lt;code&gt;os/exec&lt;/code&gt;的调用。这个包目前for我自己使用是没有问题的，大家有其他需求可以提issue或者自己魔改😄。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家如果发现好玩、好用的 Go 语言库，欢迎到 Go 每日一库 GitHub 上提交 issue😄&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Advanced command execution in go with os/exec: https://blog.kowalczyk.info/article/wOYk/advanced-command-execution-in-go-with-osexec.html&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;goexec: https://github.com/darjun/goexec&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 每日一库 GitHub：https://github.com/darjun/go-daily-lib&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;&lt;strong&gt;福利&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span/&gt;&lt;span&gt;我为大家整理了一份&lt;/span&gt;&lt;span&gt;从入门到进阶的Go学习资料礼包&lt;/span&gt;&lt;span&gt;，包含学习建议：入门看什么，进阶看什么。&lt;/span&gt;&lt;span&gt;关注公众号 「polarisxu」，回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;ebook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 获取；还可以回复「&lt;strong&gt;进群&lt;/strong&gt;」，和数万 Gopher 交流学习。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UWba2ryLMqm8cgtrMXjG1BLGg46vQNmUompBL02uYYwic9RicPbCnlKdZiacBF5Wv6RLgmGIqnBnwuWyP82ibYusiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>