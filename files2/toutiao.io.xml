<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>49f81a094050d173cc12d18613bec208</guid>
<title>利用 Jackson 序列化实现数据脱敏</title>
<link>https://toutiao.io/k/5x6kx1h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h4&gt;作者：京东物流 张晓旭&lt;/h4&gt;

&lt;h1&gt;1.背景&lt;/h1&gt;

&lt;p&gt;在项目中有些敏感信息不能直接展示，比如客户手机号、身份证、车牌号等信息，展示时均需要进行数据脱敏，防止泄露客户隐私。脱敏即是对数据的部分信息用脱敏符号（*）处理。&lt;/p&gt;

&lt;h1&gt;2.目标&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  在服务端返回数据时，利用Jackson序列化完成数据脱敏，达到对敏感信息脱敏展示。&lt;/li&gt;
&lt;li&gt;  降低重复开发量，提升开发效率&lt;/li&gt;
&lt;li&gt;  形成统一有效的脱敏规则&lt;/li&gt;
&lt;li&gt;  可基于重写默认脱敏实现的desensitize方法，实现可扩展、可自定义的个性化业务场景的脱敏需求&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;3.主要实现&lt;/h1&gt;

&lt;h2&gt;3.1基于Jackson的自定义脱敏序列化实现&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;StdSerializer&lt;/strong&gt;：所有标准序列化程序所使用的基类，这个是编写自定义序列化程序所推荐使用的基类。&lt;br/&gt;
&lt;strong&gt;ContextualSerializer：&lt;/strong&gt;是Jackson 提供的另一个序列化相关的接口，它的作用是通过字段已知的上下文信息定制JsonSerializer。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints.serializer;




import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.jd.ccmp.ctm.constraints.Symbol;
import com.jd.ccmp.ctm.constraints.annotation.Desensitize;
import com.jd.ccmp.ctm.constraints.desensitization.Desensitization;
import com.jd.ccmp.ctm.constraints.desensitization.DesensitizationFactory;
import com.jd.ccmp.ctm.constraints.desensitization.DefaultDesensitization;




import java.io.IOException;




/**
 * 脱敏序列化器
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 11:10
 */
public class ObjectDesensitizeSerializer extends StdSerializer&amp;lt;Object&amp;gt; implements ContextualSerializer {
    private static final long serialVersionUID = -7868746622368564541L;
    private transient Desensitization&amp;lt;Object&amp;gt; desensitization;
    protected ObjectDesensitizeSerializer() {
        super(Object.class);
    }
    public Desensitization&amp;lt;Object&amp;gt; getDesensitization() {
        return desensitization;
    }
    public void setDesensitization(Desensitization&amp;lt;Object&amp;gt; desensitization) {
        this.desensitization = desensitization;
    }
    @Override
    public JsonSerializer&amp;lt;Object&amp;gt; createContextual(SerializerProvider prov, BeanProperty property) {
//获取属性注解
        Desensitize annotation = property.getAnnotation(Desensitize.class);
        return createContextual(annotation.desensitization());
    }
    @SuppressWarnings(&quot;unchecked&quot;)
    public JsonSerializer&amp;lt;Object&amp;gt; createContextual(Class&amp;lt;? extends Desensitization&amp;lt;?&amp;gt;&amp;gt; clazz) {
        ObjectDesensitizeSerializer serializer = new ObjectDesensitizeSerializer();
        if (clazz != DefaultDesensitization.class) {
            serializer.setDesensitization((Desensitization&amp;lt;Object&amp;gt;) DesensitizationFactory.getDesensitization(clazz));
        }
        return serializer;
    }
    @Override
    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
        Desensitization&amp;lt;Object&amp;gt; objectDesensitization = getDesensitization();
        if (objectDesensitization != null) {
            try {
                gen.writeObject(objectDesensitization.desensitize(value));
            } catch (Exception e) {
                gen.writeObject(value);
            }
        } else if (value instanceof String) {
            gen.writeString(Symbol.getSymbol(((String) value).length(), Symbol.STAR));
        } else {
            gen.writeObject(value);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：createContextual可以获得字段的类型以及注解。当字段拥有自定义注解时，取出注解中的值创建定制的序列化方式，这样在serialize方法中便可以得到这个值了。&lt;strong&gt;createContextual&lt;/strong&gt;方法只会在第一次序列化字段时调用（因为字段的上下文信息在运行期不会改变），所以无需关心性能问题。&lt;/p&gt;

&lt;h2&gt;3.2定义脱敏接口、以及工厂实现&lt;/h2&gt;

&lt;h3&gt;3.2.1脱敏器接口定义&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints.desensitization;


/**
 * 脱敏器
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 10:56
 */
public interface Desensitization&amp;lt;T&amp;gt; {
    /**
     * 脱敏实现
     *
     * @param target 脱敏对象
     * @return 脱敏返回结果
     */
    T desensitize(T target);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3.2.2脱敏器工厂实现&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints.desensitization;


import java.util.HashMap;
import java.util.Map;


/**
 * 工厂方法
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 10:58
 */
public class DesensitizationFactory {
    private DesensitizationFactory() {
    }
    private static final Map&amp;lt;Class&amp;lt;?&amp;gt;, Desensitization&amp;lt;?&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;();




    @SuppressWarnings(&quot;all&quot;)
    public static Desensitization&amp;lt;?&amp;gt; getDesensitization(Class&amp;lt;?&amp;gt; clazz) {
        if (clazz.isInterface()) {
            throw new UnsupportedOperationException(&quot;desensitization is interface, what is expected is an implementation class !&quot;);
        }
        return map.computeIfAbsent(clazz, key -&amp;gt; {
            try {
                return (Desensitization&amp;lt;?&amp;gt;) clazz.newInstance();
            } catch (InstantiationException | IllegalAccessException e) {
                throw new UnsupportedOperationException(e.getMessage(), e);
            }
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;3.3常用的脱敏器实现&lt;/h2&gt;

&lt;h3&gt;3.3.1默认脱敏实现&lt;/h3&gt;

&lt;p&gt;可基于默认实现，扩展实现个性化场景&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints.desensitization;


/**
 * 默认脱敏实现
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 11:01
 */
public interface DefaultDesensitization extends Desensitization&amp;lt;String&amp;gt; {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3.3.2手机号脱敏器&lt;/h3&gt;

&lt;p&gt;实现对手机号中间4位号码脱敏&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints.desensitization;
import com.jd.ccmp.ctm.constraints.Symbol;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * 手机号脱敏器，保留前3位和后4位
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 11:02
 */
public class MobileNoDesensitization implements DefaultDesensitization {
    /**
     * 手机号正则
     */
    private static final Pattern DEFAULT_PATTERN = Pattern.compile(&quot;(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\d{8}&quot;);




    @Override
    public String desensitize(String target) {
        Matcher matcher = DEFAULT_PATTERN.matcher(target);
        while (matcher.find()) {
            String group = matcher.group();
            target = target.replace(group, group.substring(0, 3) + Symbol.getSymbol(4, Symbol.STAR) + group.substring(7, 11));
        }
        return target;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;3.4注解定义&lt;/h2&gt;

&lt;p&gt;通过@JacksonAnnotationsInside实现自定义注解，提高易用性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints.annotation;
import com.fasterxml.jackson.annotation.JacksonAnnotationsInside;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.jd.ccmp.ctm.constraints.desensitization.Desensitization;
import com.jd.ccmp.ctm.constraints.serializer.ObjectDesensitizeSerializer;
import java.lang.annotation.*;


/**
 * 脱敏注解
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 11:09
 */
@Target({ElementType.FIELD, ElementType.ANNOTATION_TYPE})
@Retention(RetentionPolicy.RUNTIME)
@JacksonAnnotationsInside
@JsonSerialize(using = ObjectDesensitizeSerializer.class)
@Documented
public @interface Desensitize {
    /**
     * 对象脱敏器实现
     */
    @SuppressWarnings(&quot;all&quot;)
    Class&amp;lt;? extends Desensitization&amp;lt;?&amp;gt;&amp;gt; desensitization();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3.4.1默认脱敏注解&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints.annotation;
import com.fasterxml.jackson.annotation.JacksonAnnotationsInside;
import com.jd.ccmp.ctm.constraints.desensitization.DefaultDesensitization;
import java.lang.annotation.*;




/**
 * 默认脱敏注解
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 11:14
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@JacksonAnnotationsInside
@Desensitize(desensitization = DefaultDesensitization.class)
@Documented
public @interface DefaultDesensitize {
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;3.4.2手机号脱敏注解&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints.annotation;
import com.fasterxml.jackson.annotation.JacksonAnnotationsInside;
import com.jd.ccmp.ctm.constraints.desensitization.MobileNoDesensitization;
import java.lang.annotation.*;


/**
 * 手机号脱敏
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 11:18
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@JacksonAnnotationsInside
@Desensitize(desensitization = MobileNoDesensitization.class)
@Documented
public @interface MobileNoDesensitize {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;3.5定义脱敏符号&lt;/h2&gt;

&lt;p&gt;支持指定脱敏符号，例如* 或是 ^_^&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.jd.ccmp.ctm.constraints;
import java.util.stream.Collectors;
import java.util.stream.IntStream;


/**
 * 脱敏符号
 *
 * @author zhangxiaoxu15
 * @date 2022/2/8 10:53
 */
public class Symbol {
    /**
     * &#x27;*&#x27;脱敏符
     */
    public static final String STAR = &quot;*&quot;;
    private Symbol() {}
    /**
     * 获取符号
     *
     * @param number 符号个数
     * @param symbol 符号
     */
    public static String getSymbol(int number, String symbol) {
        return IntStream.range(0, number).mapToObj(i -&amp;gt; symbol).collect(Collectors.joining());
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;4.使用样例&amp;amp;执行流程剖析&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://mp.toutiao.com/mp/agw/article_material/open_image/get?code=YjlmMjI4NmM3Nzg4ZGUzMjRhOTI2ZjgwMzM2MGY2MzQsMTY4MDIyNjI0ODU2Mw==&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;程序类图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mp.toutiao.com/mp/agw/article_material/open_image/get?code=MTlmMTk3Y2RhM2MwOTkxZjZhZDYyNjA0YjEyNDlkYmUsMTY4MDIyNjI0ODU2Mw==&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;**执行流程剖析**
 1.调用JsonUtil.toJsonString()开始执行序列化
 2.识别属性mobile上的注解@MobileNoDesensitize(上文3.4.2)
 3.调用ObjectDesensitizeSerializer#createContextual(上文3.1 &amp;amp; 3.2)，返回JsonSerializer
 4.调用手机号脱敏实现MobileNoDesensitization#desensitize(上文3.3.2)
 5.输出脱敏后的序列化结果，{&quot;mobile&quot;:&quot;133****5678&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不难发现核心执行流程是第3步，但是@MobileNoDesensitize与ObjectDesensitizeSerializer又是如何联系起来的呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  尝试梳理下引用链路：@MobileNoDesensitize -&amp;gt; @Desensitize -&amp;gt; @JsonSerialize -&amp;gt; ObjectDesensitizeSerializer&lt;/li&gt;
&lt;li&gt;  但是，在ObjectDesensitizeSerializer的实现中，我们似乎却没有发现上述链路的直接调用关系&lt;/li&gt;
&lt;li&gt;  这就不得不说下Jackson元注解的概念&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;**Jackson元注解**
1.提到元注解这个词，大家会想到@Target、@Retention、@Documented、@Inherited
2.Jackson也以同样的思路设计了@JacksonAnnotationsInside


/**
 * Meta-annotation (annotations used on other annotations)
 * used for indicating that instead of using target annotation
 * (annotation annotated with this annotation),
 * Jackson should use meta-annotations it has.
 * This can be useful in creating &quot;combo-annotations&quot; by having
 * a container annotation, which needs to be annotated with this
 * annotation as well as all annotations it &#x27;contains&#x27;.
 * 
 * @since 2.0
 */
@Target({ElementType.ANNOTATION_TYPE})
@Retention(RetentionPolicy.RUNTIME)
@JacksonAnnotation
public @interface JacksonAnnotationsInside
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正是通过”combo-annotations”(组合注解、捆绑注解)的机制，实现了指示Jackson应该使用其拥有的元注释，而不是使用目标注释，从而实现了自定义脱敏实现设计目标。&lt;/p&gt;

&lt;h1&gt;5.总结&lt;/h1&gt;

&lt;p&gt;以上就是利用Jackson序列化实现数据脱敏的全过程，如有此类需求的同学可以借鉴上面的实现方法。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d2c440e3db4bf7620cb7747f8d079630</guid>
<title>ChatGPT4.0，基础生产力的变革！</title>
<link>https://toutiao.io/k/w00uzup</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;老张的求知思考世界&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;For-Think&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;专注互联网领域相关技术实践和思考，也分享职场成长、读书杂谈等内容。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a8216066d7e72a4cfef53bb84ceec668</guid>
<title>对比 5 种分布式事务方案，还是宠幸了阿里的 Seata（原理 + 实战）</title>
<link>https://toutiao.io/k/qk4488w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本来不知道写点啥，正好手头有个新项目试着用阿里的 &lt;code&gt;Seata&lt;/code&gt; 中间件做分布式事务，那就做一个实践分享吧！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;介绍 &lt;code&gt;Seata&lt;/code&gt; 之前在简单回顾一下分布式事务的基本概念。&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg3NTY2NDMwMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/iaPU220ia3N7QfHsbKk3mGa1lsrNh9kID5jJsopIGBnric9v4xKcFOv50y6N3A3CVRteuJ9tQI0IAIh37R3dpvGog/0?wx_fmt=png&quot; data-nickname=&quot;程序员田螺&quot; data-alias=&quot;&quot; data-signature=&quot;专注分享后端面试题，包括计算机网络、MySql数据库、Redis缓存、操作系统、Java后端、大厂面试真题等领域。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;分布式事务的产生&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看看百度上对于分布式事务的定义：分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.358695652173913&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodq8SZz23Pefv8YMdkzlIia5CgL5jlkvUz63MDVQAxwDbRmBXuq4WyKHTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;额~ 有点抽象，简单的画个图好理解一下，拿下单减库存、扣余额来说举例：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当系统的体量很小时，单体架构完全可以满足现有业务需求，所有的业务共用一个数据库，整个下单流程或许只用在一个方法里同一个事务下操作数据库即可。此时做到所有操作要么全部提交 或 要么全部回滚很容易。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3130016051364366&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodq9vcqWVCGyKaxS9GVCibYjKlDU6fKNTnptOWq3cHY47qVAujYtJvHYJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;623&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;分库分表、SOA&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可随着业务量的不断增长，单体架构渐渐扛不住巨大的流量，此时就需要对数据库、表做 &lt;code&gt;分库分表&lt;/code&gt;处理，将应用 &lt;code&gt;SOA&lt;/code&gt; 服务化拆分。也就产生了订单中心、用户中心、库存中心等，由此带来的问题就是业务间相互隔离，每个业务都维护着自己的数据库，数据的交换只能进行 &lt;code&gt;RPC&lt;/code&gt; 调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当用户再次下单时，需同时对订单库 &lt;code&gt;order&lt;/code&gt;、库存库 &lt;code&gt;storage&lt;/code&gt;、用户库 &lt;code&gt;account&lt;/code&gt; 进行操作，可此时我们只能保证自己本地的数据一致性，无法保证调用其他服务的操作是否成功，所以为了保证整个下单流程的数据一致性，就需要分布式事务介入。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.475&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqCsteq6adicxNcqm9Iia291aPOgqYibicbEThWwdwiaficVCedPNPtOZImu5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Seata 优势&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现分布式事务的方案比较多，常见的比如基于 &lt;code&gt;XA&lt;/code&gt; 协议的 &lt;code&gt;2PC&lt;/code&gt;、&lt;code&gt;3PC&lt;/code&gt;，基于业务层的 &lt;code&gt;TCC&lt;/code&gt;，还有应用消息队列 + 消息表实现的最终一致性方案，还有今天要说的 &lt;code&gt;Seata&lt;/code&gt; 中间件，下边看看各个方案的优缺点。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;2PC&lt;/code&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于 XA 协议实现的分布式事务，XA 协议中分为两部分：事务管理器和本地资源管理器。其中本地资源管理器往往由数据库实现，比如 Oracle、MYSQL 这些数据库都实现了 XA 接口，而事务管理器则作为一个全局的调度者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两阶段提交（&lt;code&gt;2PC&lt;/code&gt;），对业务侵⼊很小，它最⼤的优势就是对使⽤⽅透明，用户可以像使⽤本地事务⼀样使⽤基于 XA 协议的分布式事务，能够严格保障事务 ACID 特性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.40869565217391307&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqeuztqhQNjOKsOIg1hy6eMHSNZgySa0qZv1ooS5VHa7icrCD0n6bgjNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;575&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可 &lt;code&gt;2PC&lt;/code&gt;的缺点也是显而易见，它是一个强一致性的同步阻塞协议，事务执⾏过程中需要将所需资源全部锁定，也就是俗称的 &lt;code&gt;刚性事务&lt;/code&gt;。所以它比较适⽤于执⾏时间确定的短事务，整体性能比较差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一旦事务协调者宕机或者发生网络抖动，会让参与者一直处于锁定资源的状态或者只有一部分参与者提交成功，导致数据的不一致。因此，在⾼并发性能⾄上的场景中，基于 XA 协议的分布式事务并不是最佳选择。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4052631578947368&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqnGh1Liaeqo5umDH5WrxicrSqickia7bjbTLGscwHAQALPw9gdoNapXN5jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;570&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;3PC&lt;/code&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;三段提交（&lt;code&gt;3PC&lt;/code&gt;）是二阶段提交（&lt;code&gt;2PC&lt;/code&gt;）的一种改进版本 ，为解决两阶段提交协议的阻塞问题，上边提到两段提交，当协调者崩溃时，参与者不能做出最后的选择，就会一直保持阻塞锁定资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;2PC&lt;/code&gt; 中只有协调者有超时机制，&lt;code&gt;3PC&lt;/code&gt; 在协调者和参与者中都引入了超时机制，协调者出现故障后，参与者就不会一直阻塞。而且在第一阶段和第二阶段中又插入了一个准备阶段（如下图，看着有点啰嗦），保证了在最后提交阶段之前各参与节点的状态是一致的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4949698189134809&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqhIEcGVkBOh8CmDfpdPXMdLLPdhVIWbzCibrpHPQdkWL04VzFs3Z6wlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;497&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然 &lt;code&gt;3PC&lt;/code&gt; 用超时机制，解决了协调者故障后参与者的阻塞问题，但与此同时却多了一次网络通信，性能上反而变得更差，也不太推荐。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;TCC&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓的 &lt;code&gt;TCC&lt;/code&gt; 编程模式，也是两阶段提交的一个变种，不同的是 &lt;code&gt;TCC&lt;/code&gt; 为在业务层编写代码实现的两阶段提交。&lt;code&gt;TCC&lt;/code&gt; 分别指 &lt;code&gt;Try&lt;/code&gt;、&lt;code&gt;Confirm&lt;/code&gt;、&lt;code&gt;Cancel&lt;/code&gt; ，一个业务操作要对应的写这三个方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下单扣库存为例，&lt;code&gt;Try&lt;/code&gt; 阶段去占库存，&lt;code&gt;Confirm&lt;/code&gt; 阶段则实际扣库存，如果库存扣减失败 &lt;code&gt;Cancel&lt;/code&gt; 阶段进行回滚，释放库存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCC 不存在资源阻塞的问题，因为每个方法都直接进行事务的提交，一旦出现异常通过则 &lt;code&gt;Cancel&lt;/code&gt; 来进行回滚补偿，这也就是常说的补偿性事务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原本一个方法，现在却需要三个方法来支持，可以看到 TCC 对业务的侵入性很强，而且这种模式并不能很好地被复用，会导致开发量激增。还要考虑到网络波动等原因，为保证请求一定送达都会有重试机制，所以考虑到接口的幂等性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;消息事务（最终一致性）&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息事务其实就是基于消息中间件的两阶段提交，将本地事务和发消息放在同一个事务里，保证本地操作和发送消息同时成功。下单扣库存原理图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6339869281045751&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqW68j2d7YvF0u1O8nXEQqadIDVY3K34SM6kUn1EVS1s4onbCnrNb8aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;765&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;订单系统向 &lt;code&gt;MQ&lt;/code&gt; 发送一条预备扣减库存消息，&lt;code&gt;MQ&lt;/code&gt; 保存预备消息并返回成功 &lt;code&gt;ACK&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接收到预备消息执行成功 &lt;code&gt;ACK&lt;/code&gt;，订单系统执行本地下单操作，为防止消息发送成功而本地事务失败，订单系统会实现 &lt;code&gt;MQ&lt;/code&gt; 的回调接口，其内不断的检查本地事务是否执行成功，如果失败则 &lt;code&gt;rollback&lt;/code&gt; 回滚预备消息；成功则对消息进行最终 &lt;code&gt;commit&lt;/code&gt; 提交。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;库存系统消费扣减库存消息，执行本地事务，如果扣减失败，消息会重新投，一旦超出重试次数，则本地表持久化失败消息，并启动定时任务做补偿。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于消息中间件的两阶段提交方案，通常用在高并发场景下使用，牺牲数据的强一致性换取性能的大幅提升，不过实现这种方式的成本和复杂度是比较高的，还要看实际业务情况。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Seata&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Seata&lt;/code&gt; 也是从两段提交演变而来的一种分布式事务解决方案，提供了 &lt;code&gt;AT&lt;/code&gt;、&lt;code&gt;TCC&lt;/code&gt;、&lt;code&gt;SAGA&lt;/code&gt; 和 &lt;code&gt;XA&lt;/code&gt; 等事务模式，这里重点介绍 &lt;code&gt;AT&lt;/code&gt;模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然 &lt;code&gt;Seata&lt;/code&gt; 是两段提交，那我们看看它在每个阶段都做了点啥？下边我们还以下单扣库存、扣余额举例。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5037707390648567&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqcwMoz2YalibglDNoPrTSl7XL87WokFFfS4PDAAhPiabicyAkpfQGkavCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;663&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先介绍 &lt;code&gt;Seata&lt;/code&gt; 分布式事务的几种角色：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Transaction Coordinator(TC)&lt;/code&gt;:  全局事务协调者，用来协调全局事务和各个分支事务（不同服务）的状态， 驱动全局事务和各个分支事务的回滚或提交。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Transaction Manager™&lt;/code&gt;:  事务管理者，业务层中用来开启/提交/回滚一个整体事务（在调用服务的方法中用注解开启事务）。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;Resource Manager(RM)&lt;/code&gt;:  资源管理者，一般指业务数据库代表了一个分支事务（&lt;code&gt;Branch Transaction&lt;/code&gt;），管理分支事务与 &lt;code&gt;TC&lt;/code&gt; 进行协调注册分支事务并且汇报分支事务的状态，驱动分支事务的提交或回滚。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Seata 实现分布式事务，设计了一个关键角色 &lt;code&gt;UNDO_LOG&lt;/code&gt; （回滚日志记录表），我们在每个应用分布式事务的业务库中创建这张表，这个表的核心作用就是，将业务数据在更新前后的数据镜像组织成回滚日志，备份在 &lt;code&gt;UNDO_LOG&lt;/code&gt; 表中，以便业务异常能随时回滚。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;第一个阶段&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：下边我们更新 &lt;code&gt;user&lt;/code&gt; 表的 &lt;code&gt;name&lt;/code&gt; 字段。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;update&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; = &lt;span&gt;&#x27;小富最帅&#x27;&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; = &lt;span&gt;&#x27;程序员内点事&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先 Seata 的 &lt;code&gt;JDBC&lt;/code&gt; 数据源代理通过对业务 SQL 解析，提取 SQL 的元数据，也就是得到 SQL 的类型（&lt;code&gt;UPDATE&lt;/code&gt;），表（&lt;code&gt;user&lt;/code&gt;），条件（&lt;code&gt;where name = &#x27;程序员内点事&#x27;&lt;/code&gt;）等相关的信息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6458333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodq3uVia0CNy9BWFZA2CnKwic8VIv10rTaghRm5bxibZDRPz02zoW5d3hB3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;672&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;第一个阶段的流程图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先查询数据前镜像，根据解析得到的条件信息，生成查询语句，定位一条数据。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt;  &lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; = &lt;span&gt;&#x27;程序员内点事&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31210191082802546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodq5vYwQqQBKRXWTzsQG08EKVVMicQGyNOlIicHZ1wPDmW7mK6B7MTBsNlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;314&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;数据前镜像&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;紧接着执行业务 SQL，根据前镜像数据主键查询出后镜像数据&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3248407643312102&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqG38vt9PicquPFoGKO4icyXBMqtKRq0JFmGkHSibOafAfu6Np5ucJDASLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;314&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;数据后镜像&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把业务数据在更新前后的数据镜像组织成回滚日志，将业务数据的更新和回滚日志在同一个本地事务中提交，分别插入到业务表和 &lt;code&gt;UNDO_LOG&lt;/code&gt; 表中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回滚记录数据格式如下：包括 &lt;code&gt;afterImage&lt;/code&gt; 后镜像、&lt;code&gt;beforeImage&lt;/code&gt; 前镜像、 &lt;code&gt;branchId&lt;/code&gt; 分支事务ID、&lt;code&gt;xid&lt;/code&gt; 全局事务ID&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{&lt;br/&gt;    &lt;span&gt;&quot;branchId&quot;&lt;/span&gt;:641789253,&lt;br/&gt;    &lt;span&gt;&quot;xid&quot;&lt;/span&gt;:&lt;span&gt;&quot;xid:xxx&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;undoItems&quot;&lt;/span&gt;:[&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;&quot;afterImage&quot;&lt;/span&gt;:{&lt;br/&gt;                &lt;span&gt;&quot;rows&quot;&lt;/span&gt;:[&lt;br/&gt;                    {&lt;br/&gt;                        &lt;span&gt;&quot;fields&quot;&lt;/span&gt;:[&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;id&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;type&quot;&lt;/span&gt;:4,&lt;br/&gt;                                &lt;span&gt;&quot;value&quot;&lt;/span&gt;:1&lt;br/&gt;                            }&lt;br/&gt;                        ]&lt;br/&gt;                    }&lt;br/&gt;                ],&lt;br/&gt;                &lt;span&gt;&quot;tableName&quot;&lt;/span&gt;:&lt;span&gt;&quot;product&quot;&lt;/span&gt;&lt;br/&gt;            },&lt;br/&gt;            &lt;span&gt;&quot;beforeImage&quot;&lt;/span&gt;:{&lt;br/&gt;                &lt;span&gt;&quot;rows&quot;&lt;/span&gt;:[&lt;br/&gt;                    {&lt;br/&gt;                        &lt;span&gt;&quot;fields&quot;&lt;/span&gt;:[&lt;br/&gt;                            {&lt;br/&gt;                                &lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;id&quot;&lt;/span&gt;,&lt;br/&gt;                                &lt;span&gt;&quot;type&quot;&lt;/span&gt;:4,&lt;br/&gt;                                &lt;span&gt;&quot;value&quot;&lt;/span&gt;:1&lt;br/&gt;                            }&lt;br/&gt;                        ]&lt;br/&gt;                    }&lt;br/&gt;                ],&lt;br/&gt;                &lt;span&gt;&quot;tableName&quot;&lt;/span&gt;:&lt;span&gt;&quot;product&quot;&lt;/span&gt;&lt;br/&gt;            },&lt;br/&gt;            &lt;span&gt;&quot;sqlType&quot;&lt;/span&gt;:&lt;span&gt;&quot;UPDATE&quot;&lt;/span&gt;&lt;br/&gt;        }&lt;br/&gt;    ]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就可以保证，任何提交的业务数据的更新一定有相应的回滚日志。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在本地事务提交前，各分支事务需向 &lt;code&gt;全局事务协调者&lt;/code&gt; TC 注册分支 ( &lt;code&gt;Branch Id&lt;/code&gt;) ，为要修改的记录申请 &lt;strong&gt;全局锁&lt;/strong&gt; ，要为这条数据加锁，利用 &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt; 语句。而如果一直拿不到锁那就需要回滚本地事务。TM 开启事务后会生成全局唯一的 &lt;code&gt;XID&lt;/code&gt;，会在各个调用的服务间进行传递。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这样的机制，本地事务分支（&lt;code&gt;Branch Transaction&lt;/code&gt;）便可以在全局事务的第一阶段提交，并马上释放本地事务锁定的资源。相比于传统的 &lt;code&gt;XA&lt;/code&gt; 事务在第二阶段释放资源，&lt;code&gt;Seata&lt;/code&gt; 降低了锁范围提高效率，即使第二阶段发生异常需要回滚，也可以快速 从&lt;code&gt;UNDO_LOG&lt;/code&gt; 表中找到对应回滚数据并反解析成 SQL 来达到回滚补偿。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后本地事务提交，业务数据的更新和前面生成的 UNDO LOG 数据一并提交，并将本地事务提交的结果上报给全局事务协调者 TC。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;第二个阶段&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二阶段是根据各分支的决议做提交或回滚：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果决议是全局提交，此时各分支事务已提交并成功，这时 &lt;code&gt;全局事务协调者（TC）&lt;/code&gt; 会向分支发送第二阶段的请求。收到 TC 的分支提交请求，该请求会被放入一个异步任务队列中，并马上返回提交成功结果给 TC。异步队列中会异步和批量地根据 &lt;code&gt;Branch ID&lt;/code&gt; 查找并删除相应 &lt;code&gt;UNDO LOG&lt;/code&gt; 回滚记录。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5756172839506173&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqO5LjqZOic3Jgn99pNFzoibIzQ8cIbP35JRdIibaUic65dAibZEZ09iaEgItA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;648&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果决议是全局回滚，过程比全局提交麻烦一点，&lt;code&gt;RM&lt;/code&gt; 服务方收到 &lt;code&gt;TC&lt;/code&gt; 全局协调者发来的回滚请求，通过 &lt;code&gt;XID&lt;/code&gt; 和 &lt;code&gt;Branch ID&lt;/code&gt; 找到相应的回滚日志记录，通过回滚记录生成反向的更新 SQL 并执行，以完成分支的回滚。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：这里删除回滚日志记录操作，一定是在本地业务事务执行之后&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6957928802588996&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqpUAeyOd91VnsTJkeAkwdccNRaUt9X5Yg3IN7CGs4iapg1vN6iasHRD0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;618&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上边说了几种分布式事务各自的优缺点，下边实践一下分布式事务中间 Seata 感受一下。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Seata 实践&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Seata 是一个需独立部署的中间件，所以先搭 Seata Server，这里以最新的 &lt;code&gt;seata-server-1.4.0&lt;/code&gt; 版本为例，下载地址：&lt;code&gt;https://seata.io/en-us/blog/download.html&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解压后的文件我们只需要关心 &lt;code&gt;\seata\conf&lt;/code&gt; 目录下的 &lt;code&gt;file.conf&lt;/code&gt; 和  &lt;code&gt;registry.conf&lt;/code&gt; 文件。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Seata Server&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;file.conf&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;file.conf&lt;/code&gt; 文件用于配置持久化事务日志的模式，目前提供 &lt;code&gt;file&lt;/code&gt;、&lt;code&gt;db&lt;/code&gt;、&lt;code&gt;redis&lt;/code&gt; 三种方式。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8424036281179138&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqpYCtul95RcmrJwPbe8zZjdRSrlpaF5FRz7LmnlffCVBeqCycCX8lYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;882&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;file.conf 文件配置&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意&lt;/strong&gt;：在选择 &lt;code&gt;db&lt;/code&gt; 方式后，需要在对应数据库创建 &lt;code&gt;globalTable&lt;/code&gt;（持久化全局事务）、&lt;code&gt;branchTable&lt;/code&gt;（持久化各提交分支的事务）、 &lt;code&gt;lockTable&lt;/code&gt;（持久化各分支锁定资源事务）三张表。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;-- the table to store GlobalSession data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- 持久化全局事务&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt; &lt;span&gt;`global_table`&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;`xid`&lt;/span&gt;                       &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;128&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`transaction_id`&lt;/span&gt;            &lt;span&gt;BIGINT&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`status`&lt;/span&gt;                    &lt;span&gt;TINYINT&lt;/span&gt;      &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`application_id`&lt;/span&gt;            &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;32&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`transaction_service_group`&lt;/span&gt; &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;32&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`transaction_name`&lt;/span&gt;          &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;128&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`timeout`&lt;/span&gt;                   &lt;span&gt;INT&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`begin_time`&lt;/span&gt;                &lt;span&gt;BIGINT&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`application_data`&lt;/span&gt;          &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;2000&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`gmt_create`&lt;/span&gt;                DATETIME,&lt;br/&gt;    &lt;span&gt;`gmt_modified`&lt;/span&gt;              DATETIME,&lt;br/&gt;    PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`xid`&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_gmt_modified_status`&lt;/span&gt; (&lt;span&gt;`gmt_modified`&lt;/span&gt;, &lt;span&gt;`status`&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_transaction_id`&lt;/span&gt; (&lt;span&gt;`transaction_id`&lt;/span&gt;)&lt;br/&gt;) &lt;span&gt;ENGINE&lt;/span&gt; = &lt;span&gt;InnoDB&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt; = utf8;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;-- the table to store BranchSession data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- 持久化各提交分支的事务&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt; &lt;span&gt;`branch_table`&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;`branch_id`&lt;/span&gt;         &lt;span&gt;BIGINT&lt;/span&gt;       &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`xid`&lt;/span&gt;               &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;128&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`transaction_id`&lt;/span&gt;    &lt;span&gt;BIGINT&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`resource_group_id`&lt;/span&gt; &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;32&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`resource_id`&lt;/span&gt;       &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;256&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`branch_type`&lt;/span&gt;       &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;8&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`status`&lt;/span&gt;            &lt;span&gt;TINYINT&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`client_id`&lt;/span&gt;         &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`application_data`&lt;/span&gt;  &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;2000&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`gmt_create`&lt;/span&gt;        DATETIME(&lt;span&gt;6&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`gmt_modified`&lt;/span&gt;      DATETIME(&lt;span&gt;6&lt;/span&gt;),&lt;br/&gt;    PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`branch_id`&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_xid`&lt;/span&gt; (&lt;span&gt;`xid`&lt;/span&gt;)&lt;br/&gt;) &lt;span&gt;ENGINE&lt;/span&gt; = &lt;span&gt;InnoDB&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt; = utf8;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;-- the table to store lock data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- 持久化每个分支锁表事务&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt; &lt;span&gt;`lock_table`&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;`row_key`&lt;/span&gt;        &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;128&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`xid`&lt;/span&gt;            &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;96&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`transaction_id`&lt;/span&gt; &lt;span&gt;BIGINT&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`branch_id`&lt;/span&gt;      &lt;span&gt;BIGINT&lt;/span&gt;       &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`resource_id`&lt;/span&gt;    &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;256&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`table_name`&lt;/span&gt;     &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;32&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`pk`&lt;/span&gt;             &lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;36&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;`gmt_create`&lt;/span&gt;     DATETIME,&lt;br/&gt;    &lt;span&gt;`gmt_modified`&lt;/span&gt;   DATETIME,&lt;br/&gt;    PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`row_key`&lt;/span&gt;),&lt;br/&gt;    &lt;span&gt;KEY&lt;/span&gt; &lt;span&gt;`idx_branch_id`&lt;/span&gt; (&lt;span&gt;`branch_id`&lt;/span&gt;)&lt;br/&gt;) &lt;span&gt;ENGINE&lt;/span&gt; = &lt;span&gt;InnoDB&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt; = utf8;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;registry.conf&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;registry.conf&lt;/code&gt; 文件设置 注册中心 和 配置中心：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前注册中心支持 &lt;code&gt;nacos&lt;/code&gt; 、&lt;code&gt;eureka&lt;/code&gt;、&lt;code&gt;redis&lt;/code&gt;、&lt;code&gt;zk&lt;/code&gt;、&lt;code&gt;consul&lt;/code&gt;、&lt;code&gt;etcd3&lt;/code&gt;、&lt;code&gt;sofa&lt;/code&gt; 七种，这里我使用的 &lt;code&gt;eureka&lt;/code&gt;作为注册中心 ；配置中心支持 &lt;code&gt;nacos&lt;/code&gt; 、&lt;code&gt;apollo&lt;/code&gt;、&lt;code&gt;zk&lt;/code&gt;、&lt;code&gt;consul&lt;/code&gt;、&lt;code&gt;etcd3&lt;/code&gt; 五种方式。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4530612244897959&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqyia8OEu7sjyBz1G9pH4OsbgvYbvOEpoeXh6r4cul3MbGx3UEwvqnZrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot;/&gt;&lt;figcaption&gt;registry.conf 文件配置&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置完以后在 &lt;code&gt;\seata\bin&lt;/code&gt; 目录下启动 &lt;code&gt;seata-server&lt;/code&gt; 即可，到这 &lt;code&gt;Seata&lt;/code&gt; 的服务端就搭建好了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Seata Client&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Seata Server&lt;/code&gt; 环境搭建完，接下来我们新建三个服务 &lt;code&gt;order-server&lt;/code&gt;（下单服务）、&lt;code&gt;storage-server&lt;/code&gt;（扣减库存服务）、&lt;code&gt;account-server&lt;/code&gt;（账户金额服务），分别服务注册到 &lt;code&gt;eureka&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个服务的大体核心配置如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;spring:&lt;br/&gt;    application:&lt;br/&gt;        name: storage-server&lt;br/&gt;    cloud:&lt;br/&gt;        alibaba:&lt;br/&gt;            seata:&lt;br/&gt;                tx-service-group: my_test_tx_group&lt;br/&gt;    datasource:&lt;br/&gt;        driver-&lt;span&gt;&lt;span&gt;class&lt;/span&gt;-&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;com&lt;/span&gt;.&lt;span&gt;mysql&lt;/span&gt;.&lt;span&gt;jdbc&lt;/span&gt;.&lt;span&gt;Driver&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;url&lt;/span&gt;: &lt;span&gt;jdbc&lt;/span&gt;:&lt;span&gt;mysql&lt;/span&gt;://47.93.6.1:3306/&lt;span&gt;seat&lt;/span&gt;-&lt;span&gt;storage&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;username&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;password&lt;/span&gt;: &lt;span&gt;root&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;# &lt;span&gt;eureka&lt;/span&gt; 注册中心&lt;br/&gt;&lt;span&gt;eureka&lt;/span&gt;:&lt;br/&gt;    &lt;span&gt;client&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;serviceUrl&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;defaultZone&lt;/span&gt;: &lt;span&gt;http&lt;/span&gt;://$&lt;/span&gt;{eureka.instance.hostname}:&lt;span&gt;8761&lt;/span&gt;/eureka/&lt;br/&gt;    instance:&lt;br/&gt;        hostname: &lt;span&gt;47.93.6.5&lt;/span&gt;&lt;br/&gt;        prefer-ip-address: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务大致流程：用户发起下单请求，本地 order 订单服务创建订单记录，并通过 &lt;code&gt;RPC&lt;/code&gt; 远程调用 &lt;code&gt;storage&lt;/code&gt; 扣减库存服务和 &lt;code&gt;account&lt;/code&gt; 扣账户余额服务，只有三个服务同时执行成功，才是一个完整的下单流程。如果某个服执行失败，则其他服务全部回滚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Seata 对业务代码的侵入性非常小，代码中使用只需用 &lt;code&gt;@GlobalTransactional&lt;/code&gt; 注解开启一个全局事务即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@GlobalTransactional&lt;/span&gt;(name = &lt;span&gt;&quot;create-order&quot;&lt;/span&gt;, rollbackFor = Exception&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;create&lt;/span&gt;(&lt;span&gt;Order&lt;/span&gt; &lt;span&gt;order&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    String xid = RootContext.getXID();&lt;br/&gt;&lt;br/&gt;    LOGGER.info(&lt;span&gt;&quot;-------&amp;gt;交易开始&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;//本地方法&lt;/span&gt;&lt;br/&gt;    orderDao.create(order);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//远程方法 扣减库存&lt;/span&gt;&lt;br/&gt;    storageApi.decrease(order.getProductId(), order.getCount());&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;//远程方法 扣减账户余额&lt;/span&gt;&lt;br/&gt;    LOGGER.info(&lt;span&gt;&quot;-------&amp;gt;扣减账户开始order中&quot;&lt;/span&gt;);&lt;br/&gt;    accountApi.decrease(order.getUserId(), order.getMoney());&lt;br/&gt;    LOGGER.info(&lt;span&gt;&quot;-------&amp;gt;扣减账户结束order中&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    LOGGER.info(&lt;span&gt;&quot;-------&amp;gt;交易结束&quot;&lt;/span&gt;);&lt;br/&gt;    LOGGER.info(&lt;span&gt;&quot;全局事务 xid： {}&quot;&lt;/span&gt;, xid);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前边说过 Seata AT 模式实现分布式事务，必须在相关的业务库中创建 &lt;code&gt;undo_log&lt;/code&gt; 表来存数据回滚日志，表结构如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;-- &lt;span&gt;for&lt;/span&gt; AT mode you must to init &lt;span&gt;this&lt;/span&gt; sql &lt;span&gt;for&lt;/span&gt; you business database. the seata server not need it.&lt;br/&gt;CREATE TABLE IF NOT EXISTS &lt;span&gt;`undo_log`&lt;/span&gt;&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;`id`&lt;/span&gt;            BIGINT(&lt;span&gt;20&lt;/span&gt;)   NOT NULL AUTO_INCREMENT COMMENT &lt;span&gt;&#x27;increment id&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`branch_id`&lt;/span&gt;     BIGINT(&lt;span&gt;20&lt;/span&gt;)   NOT NULL COMMENT &lt;span&gt;&#x27;branch transaction id&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`xid`&lt;/span&gt;           VARCHAR(&lt;span&gt;100&lt;/span&gt;) NOT NULL COMMENT &lt;span&gt;&#x27;global transaction id&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`context`&lt;/span&gt;       VARCHAR(&lt;span&gt;128&lt;/span&gt;) NOT NULL COMMENT &lt;span&gt;&#x27;undo_log context,such as serialization&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`rollback_info`&lt;/span&gt; LONGBLOB     NOT NULL COMMENT &lt;span&gt;&#x27;rollback info&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`log_status`&lt;/span&gt;    INT(&lt;span&gt;11&lt;/span&gt;)      NOT NULL COMMENT &lt;span&gt;&#x27;0:normal status,1:defense status&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`log_created`&lt;/span&gt;   DATETIME     NOT NULL COMMENT &lt;span&gt;&#x27;create datetime&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;`log_modified`&lt;/span&gt;  DATETIME     NOT NULL COMMENT &lt;span&gt;&#x27;modify datetime&#x27;&lt;/span&gt;,&lt;br/&gt;    PRIMARY KEY (&lt;span&gt;`id`&lt;/span&gt;),&lt;br/&gt;    UNIQUE KEY &lt;span&gt;`ux_undo_log`&lt;/span&gt; (&lt;span&gt;`xid`&lt;/span&gt;, &lt;span&gt;`branch_id`&lt;/span&gt;)&lt;br/&gt;) ENGINE = InnoDB&lt;br/&gt;  AUTO_INCREMENT = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;  DEFAULT CHARSET = utf8 COMMENT =&lt;span&gt;&#x27;AT transaction mode undo table&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;到这环境搭建的工作就完事了，完整案例会在后边贴出 &lt;code&gt;GitHub&lt;/code&gt; 地址，就不在这占用篇幅了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;测试 Seata&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目中的服务调用过程如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5037707390648567&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqcwMoz2YalibglDNoPrTSl7XL87WokFFfS4PDAAhPiabicyAkpfQGkavCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;663&quot;/&gt;&lt;figcaption&gt;服务调用过程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动各个服务后，我们直接请求下单接口看看效果，只要 &lt;code&gt;order&lt;/code&gt; 订单表创建记录成功，&lt;code&gt;storage&lt;/code&gt; 库存表 &lt;code&gt;used&lt;/code&gt; 字段数量递增、&lt;code&gt;account&lt;/code&gt; 余额表 &lt;code&gt;used&lt;/code&gt; 字段数量递增则表示下单流程成功。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5860284605433377&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqQX9waWREelGO3oTaw0oPdmz8tWWb0rS8Cu0TDOAd2JaaERDqUY39XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;773&quot;/&gt;&lt;figcaption&gt;原始数据&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求后正向流程是没问题的，数据和预想的一样&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.362962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqQD9QMgxJ6ibVF1PriapRoKxAzYBT8huHheiaq3GEj9KlJT40Ljga97rmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;下单数据&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且发现 &lt;code&gt;TM&lt;/code&gt; 事务管理者 &lt;code&gt;order-server&lt;/code&gt; 服务的控制台也打印出了两阶段提交的日志&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.26851851851851855&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodquO4GmicLHKl9O8ibYo0C9Vn5FZMwicoDwSdANtY1BXbFiaicgAV8pVfWISw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;控制台两次提交&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么再看看如果其中一个服务异常，会不会正常回滚呢？在 &lt;code&gt;account-server&lt;/code&gt; 服务中模拟超时异常，看能否实现全局事务回滚。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5806451612903226&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqhumedWUmvWozlAVCjYTqBf4uaQ7cHIgdF0r1p9lN2qibRIic3bOFWQmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;806&quot;/&gt;&lt;figcaption&gt;全局事务回滚&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发现数据全没执行成功，说明全局事务回滚也成功了&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4671201814058957&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqkGPX61DFWSgIUGafCS9Fb5h8iayNNzvqrvCZpF7H3uN3Q0hdyeXDR7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;882&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那看一下 &lt;code&gt;undo_log&lt;/code&gt; 回滚记录表的变化情况，由于 &lt;code&gt;Seata&lt;/code&gt; 删除回滚日志的速度很快，所以要想在表中看见回滚日志，必须要在某一个服务上打断点才看的更明显。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0OzaL5uW2aNGkHVg4LhAXRj3TPULZodqr5rOUKhGFYjj1oMaLicKMibVo3C23icsF1xVkaIopibr28o6ZsPhpKKu4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;回滚记录&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上边简单介绍了 &lt;code&gt;2PC&lt;/code&gt;、&lt;code&gt;3PC&lt;/code&gt;、&lt;code&gt;TCC&lt;/code&gt;、&lt;code&gt;MQ&lt;/code&gt;、&lt;code&gt;Seata&lt;/code&gt; 这五种分布式事务解决方案，还详细的实践了 &lt;code&gt;Seata&lt;/code&gt; 中间件。但不管我们选哪一种方案，在项目中应用都要谨慎再谨慎，除特定的数据强一致性场景外，能不用尽量就不要用，因为无论它们性能如何优越，一旦项目套上分布式事务，整体效率会几倍的下降，在高并发情况下弊端尤为明显。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本案例 github 地址：https://github.com/chengxy-nds/Springboot-Notebook/tree/master/springboot-seata-transaction&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;如果有一丝收获，欢迎 在看、点赞、转发 ，您的认可是我最大的动力。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;96293&quot; data-tools=&quot;135编辑器&quot; data-width=&quot;98%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg3NzU5NTIwNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpxpY5pHeUUaicHSaqaylBb25Rbib0ocE4ZmXWdicS9tbGvFc9qvbiaNDibKKvuFYqlUdSW6VicXhoLNHfMQ/0?wx_fmt=png&quot; data-nickname=&quot;捡田螺的小男孩&quot; data-alias=&quot;&quot; data-signature=&quot;专注后端技术栈，热爱分享，热爱交朋友，热爱工作总结。毕业于华南理工大学，软件工程专业~&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>da45b343ceaab155765b11e1ebf66929</guid>
<title>Flink 的重试机制</title>
<link>https://toutiao.io/k/h61szaq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-1g0fqss&quot; options=&quot;[object Object]&quot;&gt;&lt;blockquote data-first-child=&quot;&quot; data-pid=&quot;qCcxlrR6&quot;&gt;当 Task 发生故障时，Flink 需要重启出错的 Task 以及其他受到影响的 Task ，以使得作业恢复到正常执行状态。Flink 通过重启策略和故障恢复策略来控制 Task 重启：重启策略决定是否可以重启以及重启的间隔；故障恢复策略决定哪些 Task 需要重启。&lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f98a3ccee5e0842fe475a6d4fec3a7c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;315&quot; data-rawheight=&quot;164&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;315&quot; data-rawheight=&quot;164&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f98a3ccee5e0842fe475a6d4fec3a7c3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;Flink重启策略&lt;/h2&gt;&lt;p data-pid=&quot;YBbKwhR-&quot;&gt;Flink的重试机制主要体现在，Flink Task出现错误的时候，需要恢复异常的Task和受影响的Task，故此需要一定的策略来进行发现和解决。&lt;/p&gt;&lt;h2&gt;Flink重启策略配置方式&lt;/h2&gt;&lt;p data-pid=&quot;xDnW28BL&quot;&gt;通过 Flink 的配置文件&lt;code&gt;flink-conf.yaml&lt;/code&gt;来设置默认的重启策略。配置参数&lt;i&gt;restart-strategy&lt;/i&gt;定义了采取何种策略。 如果没有启用 checkpoint，就采用“不重启”策略。如果启用了 checkpoint 且没有配置重启策略，那么就采用固定延时重启策略， 此时最大尝试重启次数由&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;参数设置。下表列出了可用的重启策略和与其对应的配置值。&lt;/p&gt;&lt;p data-pid=&quot;1VyFm6XT&quot;&gt;除了定义默认的重启策略以外，还可以为每个 Flink 作业单独定义重启策略。 这个重启策略通过在程序中的 &lt;code&gt;ExecutionEnvironment&lt;/code&gt; 对象上调用 &lt;code&gt;setRestartStrategy&lt;/code&gt; 方法来设置。 当然，对于 &lt;code&gt;StreamExecutionEnvironment&lt;/code&gt; 也同样适用。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRestartStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestartStrategies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fixedDelayRestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;j__8JcSz&quot;&gt;下例展示了如何给我们的作业设置固定延时重启策略。 如果发生故障，系统会重启作业 3 次，每两次连续的重启尝试之间等待 10 秒钟。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;bdZuTqFP&quot;&gt;在Flink中提供了3种重启策略：&lt;/p&gt;&lt;p data-pid=&quot;enEwDeKY&quot;&gt;1、none：在不配置chechpoint的情况下默认采用的是 不启用策略 即出现错误即停止任务。&lt;/p&gt;&lt;p data-pid=&quot;n81QLA49&quot;&gt;2、固定延迟策略&lt;/p&gt;&lt;p data-pid=&quot;ClpGcI3D&quot;&gt;3、故障率策略&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h2&gt;Flink重启策略详情&lt;/h2&gt;&lt;p data-pid=&quot;88yvb4l-&quot;&gt;1、固定延迟&lt;/p&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;default&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;restart-strategy.fixed-delay.attempts&lt;/td&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;重试次数如果超过则任务退出&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;restart-strategy.fixed-delay.delay&lt;/td&gt;&lt;td&gt;Duration&lt;/td&gt;&lt;td&gt;1s&lt;/td&gt;&lt;td&gt;两个任务之间的延迟&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;xS3-ugTw&quot;&gt;2、故障率重启&lt;/p&gt;&lt;p data-pid=&quot;TwmS5mto&quot;&gt;故障率重启策略在故障发生之后重启作业，但是当&lt;b&gt;故障率&lt;/b&gt;（每个时间间隔发生故障的次数）超过设定的限制时，作业会最终失败。 在连续的两次重启尝试之间，重启策略等待一段固定长度的时间。&lt;/p&gt;&lt;table data-draft-node=&quot;block&quot; data-draft-type=&quot;table&quot; data-size=&quot;normal&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;default&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;restart-strategy.failure-rate.delay&lt;/td&gt;&lt;td&gt;Duration&lt;/td&gt;&lt;td&gt;1 s&lt;/td&gt;&lt;td&gt;重试的时间间隔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;restart-strategy.failure-rate.failure-rate-interval&lt;/td&gt;&lt;td&gt;Duration&lt;/td&gt;&lt;td&gt;1 min&lt;/td&gt;&lt;td&gt;时间间隔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;restart-strategy.failure-rate.max-failures-per-interval&lt;/td&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;时间间隔内最大的错误&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;WVQYKCjf&quot;&gt;默认配置&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;restart-strategy.failure-rate.max-failures-per-interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;nt&quot;&gt;restart-strategy.failure-rate.failure-rate-interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;l&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;nt&quot;&gt;restart-strategy.failure-rate.delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;l&quot;&gt;s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRestartStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestartStrategies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;failureRateRestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 每个时间间隔的最大故障次数
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;  &lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MINUTES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 测量故障率的时间间隔
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;  &lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 延时
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;hI3FMLZZ&quot;&gt;3、无重启策略&lt;/p&gt;&lt;p data-pid=&quot;k8Wdwz5-&quot;&gt;作业直接失败，不尝试重启。&lt;/p&gt;&lt;p data-pid=&quot;JcPO-ZT0&quot;&gt;不重启策略也可以在程序中设置：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Environmentalist env = ExecutionEnvironment.getExecutionEnvironment(); 
env.setRestartStrategy(RestartStrategies.noRestart());&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;LFJGVEbs&quot;&gt;4、Fallback 重启策略&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5d0f65d08a38a4c859a9eb5548c29c9b</guid>
<title>如何与 ChatGPT4 结对编程提升研发效率</title>
<link>https://toutiao.io/k/n480mjc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：cheney&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;ChatGPT4 相比 ChatGPT3.5 在逻辑推理能力上有了很大的进步，他的代码生成能力更是让我非常震撼，因此我尝试在工作中某些不涉密的基础工作应用 ChatGPT4 来提升研发效率，简单尝试之后发现确实有不少场景是有效的。本文将向大家展示如何充分利用 ChatGPT-4 这一强大的 AI 工具，并结合结对编程方法，从而在研发过程中实现显著的效率提升。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重要提示：大家在作相应尝试的时候，一定要注意信息安全。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;场景一：正则表达式编写&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们团队负责 PCG 可观测平台-伽利略的研发，PromQL 是可观测领域常用的查询语言，Protobuf 这种协议有自带基于正则表达式的参数检查器，因此我们需要写一个正则表达式，来检测 PromQL 的合法性，以便于尽早的发现不合法的 PromQL，抛出错误，降低底层引擎的压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个需求，按经验至少得花超过一小时编码及单元测试，得翻阅不少 PromQL 手册，正则表达式的手册。我们试着把这个任务交给 ChatGPT4。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9527777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheEQEJTpYhMb6GjtefZuhzjzb4NiaBfhGZ5G7CPHO6qtUq17FXib6annIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ChatGPT4 写了一个很复杂的表达式，并且告诉我们这个需求是不合理的，完美的语法检测得要实现一个语法分析器，而不是正则表达式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我完善我的需求，我们在接入层的正则应该在乎精确率，忽略召回率，旨在尽早发现一部份错误，而不是全部错误。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WhenwElkcTJ3PmrP7Y2VOn6PLfFXO44yIhkUEO0kqzHKGo7h53kicNyrng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这一次，看上去还不错，但是我懒，不想仔细看，我又不放心他写。所以我要求他自己写个单测，进行充分的自测。&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheibsR9IcvYsjCeFW1NLGbceQIib4Ewn1MzfF2r8VyA2K0ac7wUiazsXlCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ChatGPT4 写的单测非常的 Readability，他还知道表驱动的方式写测试数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;咱们把代码 run 起来：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6259259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheVg4yXIBb9ictkQntkB8ZOEa2lsCiakpDiaSiceqibs1tRhMTnba0vUocnpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一个测试用例没过，把这种情况告诉 ChatGPT4，让他自己解决吧。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.662962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheOsc8unarU7IbuxNEaLPhkjuDicGqHdsVJag7Cj9QStyu49EOLicvw7rA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ChatGPT4 说要解决这个问题，必须引入更复杂的表达式。这不是我们想要的结果，因此我们还是选择了更简单的正则表达式交付需求，做一些简单的检查，更复杂的检查就交给 promql 语法解析器去做。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我花 5 分钟，发现了需求的不合理，选择了最符合业务需求的方案，并且还写完了我们想要的正则表达式。并且代码非常 Readability，同时有单测。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;场景二：重构代码&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们写代码的过程中，往往会因为疏忽，而产出各种 bug 和坏味道。我们来试试 ChatGPT4 能帮我们做什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面随机找了一段我们代码仓库里面的不涉密基础代码，发给 ChatGPT4。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; strings&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;regexp&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;strconv&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; reOfByte = regexp.MustCompile(&lt;span&gt;`(\d+)([GgMmKkBb]?)`&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// ParseByteNumber 解析带有容量的字符串&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ParseByteNumber&lt;/span&gt;&lt;span&gt;(s &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;int64&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; arr := reOfByte.FindAllStringSubmatch(s, &lt;span&gt;-1&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;(arr) &amp;lt; &lt;span&gt;1&lt;/span&gt; || &lt;span&gt;len&lt;/span&gt;(arr[&lt;span&gt;0&lt;/span&gt;]) &amp;lt; &lt;span&gt;3&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; n, err := strconv.Atoi(arr[&lt;span&gt;0&lt;/span&gt;][&lt;span&gt;1&lt;/span&gt;])&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-2&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; n &amp;lt;= &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-3&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; arr[&lt;span&gt;0&lt;/span&gt;][&lt;span&gt;2&lt;/span&gt;] {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;G&quot;&lt;/span&gt;, &lt;span&gt;&quot;g&quot;&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;int64&lt;/span&gt;(n) * (&lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;1024&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;M&quot;&lt;/span&gt;, &lt;span&gt;&quot;m&quot;&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;int64&lt;/span&gt;(n) * (&lt;span&gt;1024&lt;/span&gt; * &lt;span&gt;1024&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;K&quot;&lt;/span&gt;, &lt;span&gt;&quot;k&quot;&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;int64&lt;/span&gt;(n) * (&lt;span&gt;1024&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;B&quot;&lt;/span&gt;, &lt;span&gt;&quot;b&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;int64&lt;/span&gt;(n)&lt;br/&gt; &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-4&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先让 ChatGPT 看一眼代码。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WhelTXnq1Vwn7OPAibgEuZxE3y59xqSgJFJicmHTFTQN94tQsdvm3NeHuCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ChatGPT4 表示他看懂了，接下来给 ChatGPT4 提一下重构的需求，看看 ChatGPT4 的表现。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.131853785900783&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheephF9O72KEhibgqkhpUic2G4ND97PzzQThcakQXE71U8b7c7ef4A7BNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;766&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不得不说，ChatGPT4 这些优化，使得代码 Readability 了很多，特别是错误码返回这里，原来的代码真是天坑。但同时我们也发现这个函数实现是不太符合需求的，他只匹配了 substring。例如 XXXX100KBXXX 这类参数也会被错误匹配。我们把这些情况告诉 GPT4，看看他的表现。（毕竟是结对编程，我也得动点脑子做点贡献！！！）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.2720403022670026&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WhezvTZ7mlbpGMicWzzozQFxLDLuXdfmcZKDlmXCABzZMR8vQtcXPn8yJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;794&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这里我们看到，GPT4 不仅仅完成了需求，他还做到了兼容浮点数输入，使得返回的精度更高了。例如 1.5MB 实际是 1536B，按我们最初的实现确实会丢失精度，变成 1024B。这还帮我们发现了个 BUG，捂脸。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后照例，让他补充一下单测。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.728624535315985&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheRsEVESQbhVxEvoYURLlSUzT6aooV26m4lVElEuulJrCVw0agBLA27Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;807&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 15 分钟的简单交流，我和 ChatGPT 一起完成了这次代码重构！！！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;场景三：实现业务逻辑&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然要求 chatGPT4 一次性给我们交付整个完整需求有点过分，但我们依然可以把需求拆分成小的逻辑单元给 chatGPT 实现，并要求他编写单测。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次，我们找了我们项目里面最新的需求来做个实验，让 ChatGPT 帮我们完成需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需求是要做一个事件的聚合能力，伽利略会收集各个平台的事件数据，聚合之后以更加可视化的方式给用户展示。来吧，GPT4！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.286111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8Whe7J6ZFGicwv3PxtnTbWG9fbrILOhmHJ8icpNYX8rjWD5iarGhcIRjicQgdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.327777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheZdBdA1OzXlBrbXxia0TNclys1E8l7x3FqONOREy6Be6mw8mIDl9KgUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.3361111111111112&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WhePRvxCL4z5h2MUBllOdiam8wGjW0fpjk9ibS2ibOQmmQNgPn6NjVQJfsUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;3.142483660130719&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheHhOBzhCzfnVoEFj4318zn7cAAiaOAibx3rlaFdwe26DvvLibuEKZ8DOwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;765&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我不断的追加我的需求细节之后，chatGPT4 交付了一个还算可以的东西，当然这里我们也发现这段代码有个 BUG，当然，我是不会自己动手修复的，让 GPT4 自己来吧。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;3.3997005988023954&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheH86foPJjoSK4wI1N64CM0KeM4TP7O4z8micn3TFDRIHMTOvduLYG60w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;668&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整体代码虽然不算特别清晰，但做一些修改还是可以用的，当然我觉得这跟我本身没把需求描述的太清楚也有关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;场景四：改 BUG&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们伽利略平台支持自定义指标，底层识别的变量类型是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;1,&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -666 778 860&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(500, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;2,$3 这种形式，UI 为了用户可读性，是表现为 A,B,C。最近出现了一个 BUG，A+B+C+D+E+F+G+H+I+J+K 配置下去再加载上来之后编程 A+B+C+D+E+F+G+H+I+J+B0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原因 K 是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;11，但是前端转码的实现，是for循环遍历处理的，所有处理两位数字有BUG，转回来识别成了 &quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 40767.9 955&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot; transform=&quot;translate(500, 0)&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1277.8, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;，&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;但&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;是&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(2803.9, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;前&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(3738.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;端&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(4673.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;转&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(5607.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;码&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(6542.3, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;的&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(7477, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;实&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(8411.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;现&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(9346.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;，&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(10280.8, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;是&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(12771, 0)&quot;&gt;&lt;path data-c=&quot;66&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(13321, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(13806, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(14534.8, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;循&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;环&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;遍&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(2803.9, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;历&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(3738.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;处&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(4673.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;理&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(5607.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;的&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(6542.3, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;，&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(7477, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;所&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(8411.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;有&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(9346.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;处&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(10280.8, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;理&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(11215.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;两&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(12150.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;位&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(13084.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;数&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(14019.3, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;字&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(14953.9, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;有&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(30701.1, 0)&quot;&gt;&lt;path data-c=&quot;42&quot; d=&quot;M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(31460.1, 0)&quot;&gt;&lt;path data-c=&quot;55&quot; d=&quot;M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(32227.1, 0)&quot;&gt;&lt;path data-c=&quot;47&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(33290.9, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;，&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(934.6, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;转&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(1869.2, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;回&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(2803.9, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;来&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(3738.5, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;识&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(4673.1, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;别&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(5607.7, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;成&lt;/text&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;translate(6542.3, 0) matrix(1 0 0 -1 0 0)&quot; font-size=&quot;934.6px&quot; font-family=&quot;serif&quot;&gt;了&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;1 和 0。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16296296296296298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WhemGIQsrtCMPQTGKUTiaicNcWMKo6GibLyOusZibMhjpPv4T7kP6AUzUwhicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们把这个问题给 ChatGPT，看他怎么解决。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.136111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WheBESSz7Bu5fukCicyuiaJwvQzbRqzEItqAZ7UyxWWLd1SI8JEksSFZccg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0398148148148147&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WhepZkQAP9UYic0Am7QibYqsbgrzUgCsVjFpaIk2Zhje9lbNLPELgjYwGvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;场景五：写单测&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我相信上面的例子也足够体现 GPT4 写单测的能力了，它不管是表驱动、测试用例的构造能力、代码的 Readability 能力都非常强！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;场景六：取名字&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道取变量名和函数名是工程师们最头疼的问题，这个 ChatGPT4 非常擅长，毕竟这是它的母语呀，例如上面的解析存储容量的函数，它给的建议确实比原名好太多了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.262037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvatIsgeoBLPgOibgyuvop8WhecZDKGc2CEYPtZwTICyWdyfhJSGC87PJMWywcUvjAJoyamHicM9mdjAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GPT3 我感觉他还是网上搜了一些代码组合给我的，GPT4 给我的感觉是他真的 get 到我的意思了，而且他能根据我的反馈不断的优化他给我的代码。虽然不能完全替代工程师编码，但在很多繁琐且不需要交代太多背景的独立工作上，GPT4 还是完成的非常不错的。作为一个技术人员，尝试下与 GPT4 结对编程的方式，有可能在某些方面真的能提升自身生产效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微软在生产力工具这个方向上的成就真的是不错，也期待我们公司能搞出这么牛的成果！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PS：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证它是 GPT3 还是 GPT4 最简单的一句话：昨天的今天是明天的什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp wxw_wechannel_card_not_horizontal&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe videosnap_video_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAJoIsbFwM2QAAAAstQy6ubaLX4KHWvLEZgBPEs6IcJERUBa-AzNPgMIsjI09_jZwN8t68TAxuuvTv&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7Ym3K77SEULgkiaoiaC1mUkMNibiccNmE8EgeKazQl7ickIzWlQOzHEx1J1d3BUW3soGGMXZLudia1Lia1jG5ibiaXd8O1wswyPtyficJOHXmw&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SZ&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdXaObpjdNoDStQG0zibC02RqGmMobo6ChLHSr65oCAPdicUribDM8V6mPabvMKApgz5aI&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/PiajxSqBRaEJwYFFeoAibGV5rXRwu0YFpYU1SP4GicV8g5lhBOT7elWSw/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;五个ChatGPT实用有趣的效率工具！&amp;#10;&amp;#10;⬇️速速码住⬇️&amp;#10;1.ChatDoc：AI快速PDF阅读&amp;#10;2.名人聊天机器人：对话乔布斯等&amp;#10;3.Hotoke：AI 求佛&amp;#10;4.ChaGPT搜索引擎插件&amp;#10;5.ChatGPT常用快捷指令&amp;#10;&amp;#10;🤖️关于ChatGPT 你怎么看呢？&amp;#10;#科普 #AI #涨知识 #ChatGPT&amp;#10;&quot; data-nonceid=&quot;8272662907654671796&quot; data-type=&quot;video&quot; data-authiconurl=&quot;https://dldir1v6.qq.com/weixin/checkresupdate/icons_filled_channels_authentication_enterprise_a2658032368245639e666fb11533a600.png&quot; data-width=&quot;1080&quot; data-height=&quot;1440&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>