<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>12bc28e0023e40f8a4ca87c4ff851f83</guid>
<title>Springboot+WebSocket 实现IM及时通讯</title>
<link>https://toutiao.io/k/yxpbsc7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;项目中碰到需要及时通讯的场景，使用springboot集成websocket，即可实现简单的及时通讯。本文介绍springboot如何集成websocket、IM及时通讯需要哪些模块、开发和部署过程中遇到的问题、以及实现小型IM及时通讯的代码。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、Springboot集成Websocket&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集成分为三步：添加依赖、增加配置类和消息核心类、前端集成。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1、添加依赖&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-websocket&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1.13.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2、增加WebSocket配置类&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.web.socket.server.standard.ServerEndpointExporter;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * WebSocket配置&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebSocketConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ServerEndpointExporter &lt;span&gt;serverEndpointExporter&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ServerEndpointExporter();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3、增加消息核心类WebSocketServer&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@ServerEndpoint&lt;/span&gt;(&lt;span&gt;&quot;/trtc/websocket/{userId}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebSocketServer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 消息存储&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MessageStore messageStore;&lt;br/&gt;    &lt;span&gt;// 消息发送&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MessageSender messageSender;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessageStore&lt;/span&gt;&lt;span&gt;(MessageStore messageStore)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        WebSocketServer.messageStore = messageStore;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessageSender&lt;/span&gt;&lt;span&gt;(MessageSender messageSender)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        WebSocketServer.messageSender = messageSender;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 连接建立成功调用的方法&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@OnOpen&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onOpen&lt;/span&gt;&lt;span&gt;(Session session, @PathParam(&lt;span&gt;&quot;userId&quot;&lt;/span&gt;)&lt;/span&gt; String userId) &lt;/span&gt;{&lt;br/&gt;        messageStore.saveSession(session);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 连接关闭调用的方法&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@OnClose&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onClose&lt;/span&gt;&lt;span&gt;(Session session, @PathParam(&lt;span&gt;&quot;userId&quot;&lt;/span&gt;)&lt;/span&gt; String userId) &lt;/span&gt;{&lt;br/&gt;        messageStore.deleteSession(session);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 收到客户端消息后调用的方法&lt;br/&gt;     *&lt;br/&gt;     * @ Param message 客户端发送过来的消息&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@OnMessage&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onMessage&lt;/span&gt;&lt;span&gt;(String message, Session session)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        log.warn(&lt;span&gt;&quot;=========== 收到来自窗口&quot;&lt;/span&gt; + session.getId() + &lt;span&gt;&quot;的信息:&quot;&lt;/span&gt; + message);&lt;br/&gt;        handleTextMessage(session, &lt;span&gt;new&lt;/span&gt; TextMessage(message));&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; session&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; error&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@OnError&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onError&lt;/span&gt;&lt;span&gt;(Session session, @PathParam(&lt;span&gt;&quot;userId&quot;&lt;/span&gt;)&lt;/span&gt; String userId, Throwable error) &lt;/span&gt;{&lt;br/&gt;        log.error(&lt;span&gt;&quot;=========== 发生错误&quot;&lt;/span&gt;);&lt;br/&gt;        error.printStackTrace();&lt;br/&gt;&lt;span&gt;//        msgStore.deleteSession(session);&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;handleTextMessage&lt;/span&gt;&lt;span&gt;(Session session, TextMessage message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        log.warn(&lt;span&gt;&quot;=========== Received message: {}&quot;&lt;/span&gt;, message.getPayload());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.4、前端页面加入socket&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!DOCTYPE &lt;span&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;html&lt;/span&gt; &lt;span&gt;xmlns&lt;/span&gt;=&lt;span&gt;&quot;http://www.w3.org/1999/html&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;WebSocket Example&lt;span&gt;&amp;lt;/&lt;span&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    登录用户ID：&lt;span&gt;&amp;lt;&lt;span&gt;input&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text&quot;&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;sendUserId&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    接受用户ID：&lt;span&gt;&amp;lt;&lt;span&gt;input&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text&quot;&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;receivedUserId&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    发送消息内容：&lt;span&gt;&amp;lt;&lt;span&gt;input&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text&quot;&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;messageInput&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    接受消息内容：&lt;span&gt;&amp;lt;&lt;span&gt;input&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;text&quot;&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;messageReceive&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onclick&lt;/span&gt;=&lt;span&gt;&quot;sendMessage()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Send&lt;span&gt;&amp;lt;/&lt;span&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;      &lt;span&gt;var&lt;/span&gt; socket = &lt;span&gt;new&lt;/span&gt; WebSocket(&lt;span&gt;&quot;ws://localhost:8080/trtc/websocket/aaa&quot;&lt;/span&gt;);&lt;br/&gt;      &lt;span&gt;var&lt;/span&gt; roomId = &lt;span&gt;&quot;123456&quot;&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;// 随机产出六位数字&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;var&lt;/span&gt; sendUserId = &lt;span&gt;Math&lt;/span&gt;.floor(&lt;span&gt;Math&lt;/span&gt;.random() * &lt;span&gt;1000000&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;      &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&quot;sendUserId&quot;&lt;/span&gt;).value = sendUserId;&lt;br/&gt;      &lt;span&gt;var&lt;/span&gt; messageReceive = &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&quot;messageReceive&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;      socket.onopen = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;WebSocket is open now.&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; loginInfo = {&lt;br/&gt;          &lt;span&gt;msgType&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;//登录消息&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;sendUserId&lt;/span&gt;: sendUserId,&lt;br/&gt;          &lt;span&gt;bizType&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;//业务类型&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;bizOptModule&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;//业务模块&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;roomId&lt;/span&gt;: roomId,&lt;br/&gt;          &lt;span&gt;msgBody&lt;/span&gt;: {},&lt;br/&gt;        };&lt;br/&gt;        socket.send(&lt;span&gt;JSON&lt;/span&gt;.stringify(loginInfo));&lt;br/&gt;      };&lt;br/&gt;&lt;br/&gt;      socket.onmessage = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; message = event.data;&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;Received message: &quot;&lt;/span&gt; + message);&lt;br/&gt;        messageReceive.value = message;&lt;br/&gt;      };&lt;br/&gt;&lt;br/&gt;      socket.onclose = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;event&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;WebSocket is closed now.&quot;&lt;/span&gt;);&lt;br/&gt;      };&lt;br/&gt;&lt;br/&gt;      &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;sendMessage&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; message = &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&quot;messageInput&quot;&lt;/span&gt;).value;&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; receivedUserId = &lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&quot;receivedUserId&quot;&lt;/span&gt;).value;&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; operateInfo = {&lt;br/&gt;          &lt;span&gt;msgType&lt;/span&gt;: &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;//业务消息&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;sendUserId&lt;/span&gt;: sendUserId,&lt;br/&gt;          &lt;span&gt;bizType&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;//业务类型&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;bizOptModule&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;//业务模块&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;roomId&lt;/span&gt;: roomId,&lt;br/&gt;          &lt;span&gt;receivedUserId&lt;/span&gt;: receivedUserId,&lt;br/&gt;          &lt;span&gt;msgBody&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;operateType&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;//操作类型：禁言&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;operateContent&lt;/span&gt;: &lt;span&gt;&quot;1&quot;&lt;/span&gt;,&lt;br/&gt;          },&lt;br/&gt;        };&lt;br/&gt;        socket.send(&lt;span&gt;JSON&lt;/span&gt;.stringify(operateInfo));&lt;br/&gt;      }&lt;br/&gt;&lt;br/&gt;      setInterval(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        socket.send(&lt;span&gt;&quot;ping&quot;&lt;/span&gt;);&lt;br/&gt;      }, &lt;span&gt;30000&lt;/span&gt;);&lt;br/&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、小型及时通讯包含的模块&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上只是集成了websocket框架，实现了基本的全双工通信，服务器和客户端都可以同时发送和接收数据。要想实现一些小型完整的及时通讯，还需要具备以下几个核心模块。也通过一张流程图展示了其中过程。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1、消息对象模型&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;组织消息内容，比如消息类型、发送者用户ID、接受者用户ID、具体的消息体等。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SocketMsg&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 消息类型：1心跳  2登录 3业务操作&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer msgType;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发送者用户ID&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String sendUserId;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 接受者用户ID&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String receivedUserId;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 业务类型&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer bizType;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 业务操作模块&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer bizOptModule;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 消息内容&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; T msgBody;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2、消息存储模块&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;负责存储消息内容、用户ID和sessionID的关系，防止数据丢失或者服务器重启等。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3、消息发送模块&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;功能开发完毕，一般部署到分布式集群环境，所以通讯时session会分布在多台服务器。比如用户A的session在机器1，用户B的session在机器2，此时A发送给B，就无法单独通过机器1完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为机器1拿不到机器2里的session，所以消息发不过去。此时只能借助别的中间件来实现，比如借助消息中间件kafka实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;机器1将消息发送给kafka，然后机器1和机器2都监听kafka，然后查看用户对应的session是否在本机，如果在本机则发送出去。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4、消息推送模块&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块3提到的消息发送流程中，消息发送给 消息中间件，然后服务器消费到消费，在通过本机的session推送给客户端。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.5、架构图&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47191011235955055&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/iaKiaGaGnVlcHhlL9pR1WDhfstDCaNIYdZyZhJ479x6VY5TwPJNnNCUyBPQInpibJzqWsGAI6yNWlDcV2pWtuGYRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2136&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、遇到的几个问题&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1、连接自动断开&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;webSocket连接之后，发现一个问题：就是每隔一段时间如果不传送数据的话，与前端的连接就会自动断开。采用心跳消息的方式，就可以解决这个问题。比如客服端每隔30秒自动发送ping消息给服务端，服务端返回pong。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2、Session无法被序列化&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式场景会存在这样一个问题，当一次请求负载到第一台服务器时，session在第一台服务器线程上，第二次请求，负载到第二台服务器上，此时通过userId查找当前用户的session时，是查找不到的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本来想着把session存入到redis中，就可以从redis获取用户的session，希望用这种方式来解决分布式场景下消息发送的问题。结果出现如下错误：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;The remote endpoint was in state [STREAM_WRITING] which is an invalid state &lt;span&gt;for&lt;/span&gt; called method&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;翻看了session源码，发现session无法被序列化。所以这个方案只能放弃。解决方案请看下面的&lt;code&gt;问题5&lt;/code&gt;或者上面的&lt;code&gt;架构图&lt;/code&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3、对象无法自动注入&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用了&lt;code&gt;@ServerEndpoint&lt;/code&gt;注解的类中使用&lt;code&gt;@Resource&lt;/code&gt;或&lt;code&gt;@Autowired&lt;/code&gt;注入对象都会失败，并且报空指针异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原因是&lt;code&gt;WebSocket&lt;/code&gt;服务是线程安全的，那么当我们去发起一个&lt;code&gt;ws&lt;/code&gt;连接时，就会创建一个端点对象。&lt;code&gt;WebSocket&lt;/code&gt;服务是多对象的，不是单例的。而我们的&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;Bean&lt;/code&gt;默认就是单例的，在非单例类中注入一个单例的&lt;code&gt;Bean&lt;/code&gt;是冲突的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者说：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring管理采用单例模式（&lt;code&gt;singleton&lt;/code&gt;），而 WebSocket 是多对象的，即每个客户端对应后台的一个 WebSocket 对象，也可以理解成 new 了一个 WebSocket，这样当然是不能获得自动注入的对象了，因为这两者刚好冲突。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@Autowired &lt;/code&gt;注解注入对象操作是在启动时执行的，而不是在使用时，而 WebSocket 是只有连接使用时才实例化对象，且有多个连接就有多个对象。所以我们可以得出结论，这个 Service 根本就没有注入到 WebSocket 当中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如何解决呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用静态对象，并且对外暴露set方法，这样在对象初始化的时候，将其注入到&lt;code&gt;WebSocketServer&lt;/code&gt;中。比如说这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@ServerEndpoint&lt;/span&gt;(&lt;span&gt;&quot;/trtc/websocket/{userId}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebSocketServer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MessageStore messageStore;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MessageSender messageSender;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessageStore&lt;/span&gt;&lt;span&gt;(MessageStore messageStore)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      WebSocketServer.messageStore = messageStore;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessageSender&lt;/span&gt;&lt;span&gt;(MessageSender messageSender)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      WebSocketServer.messageSender = messageSender;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MessageStore&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        WebSocketServer.setMessageStore(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.4、分布式场景消息如何发给客户端&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;问题2&lt;/code&gt;中提到了分布式场景下存在的session不在本机的问题，这种场景可以通过发送消息中间件的方式解决。具体这样解决：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次连接时，都将userId和对应的session存入到本机，发送消息时，直接发送给MQ-Broker，然后每台应用负载都去消费这个消息，拿到消息之后，判断在本机能根据userId是否能找到session，找到则推送到客户端。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.5、部署时Nginx配置问题&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码开发完毕之后，本机跑通后，然后部署到服务器之后，还差很重要的一步：配置nginx代理。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.5.1、给后端应用部署独立域名&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要给后端应用部署独立域名，nginx代理直接转发到应用的独立域名，不要走微服务的gateway网关转发过去。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.5.2、多层nginx转发问题&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当只有一层nginx的时候，配置比较简单，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;location ~* ^/api/websocket/* {&lt;br/&gt;      proxy_pass http://mangodwsstest.mangod.top;&lt;br/&gt;      &lt;br/&gt;      proxy_read_timeout 300s;&lt;br/&gt;      proxy_send_timeout 300s;&lt;br/&gt;      proxy_set_header Host mangodwsstest.mangod.top;&lt;br/&gt;      proxy_http_version 1.1;&lt;br/&gt;      proxy_set_header Upgrade $http_upgrade;&lt;br/&gt;      proxy_set_header Connection &quot;Upgrade&quot;;&lt;br/&gt;      proxy_set_header X-Real-IP $remote_addr;&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，当有两层nginx转发的时候，问题就出现了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在最外层的nginx需要使用如下配置，不能照抄后面一层的配置。&lt;code&gt;proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for&lt;/code&gt;和&lt;code&gt;proxy_set_header  X-Forwarded-Proto $scheme&lt;/code&gt;这两个配置不能少，用来将协议和真实IP传递给后面一层的nginx。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;location ~* ^/api/websocket/* {&lt;br/&gt;      proxy_pass http://mangodwsstest.mangod.top;&lt;br/&gt;&lt;br/&gt;      proxy_read_timeout 300s;&lt;br/&gt;      proxy_send_timeout 300s;&lt;br/&gt;      proxy_set_header  Host $http_host;&lt;br/&gt;      proxy_set_header  X-Real-IP  $remote_addr;&lt;br/&gt;      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;&lt;br/&gt;      proxy_set_header  X-Forwarded-Proto $scheme;&lt;br/&gt;      proxy_http_version 1.1;&lt;br/&gt;      proxy_set_header Upgrade $http_upgrade;&lt;br/&gt;      proxy_set_header Connection $connection_upgrade;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、完整代码&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;页面效果如下&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开启两个web页面，用户1输入用户2的用户ID，输入发送消息内容，点击发送。在用户2的页面的接受消息内容可以看到发送的消息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/iaKiaGaGnVlcHhlL9pR1WDhfstDCaNIYdZOaMnzicib5PGWyD2B6icUJiaa9XxKcbcpn9oLjeqicTpAJ6nsS2PX9FT5kA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;906&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3575418994413408&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/iaKiaGaGnVlcHhlL9pR1WDhfstDCaNIYdZgRngTAlicdkQstQ5IU6HnN92dy6sBjFaQvsHiaqMibHPbsNlTp8xibY7ZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1074&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代码结构&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4831275720164609&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/iaKiaGaGnVlcHhlL9pR1WDhfstDCaNIYdZI3TSAB9jY8N5nXJ4oVJFLqb7ql2icpbZIMbz60bjqT4ibia85ue2ZlG7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2430&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代码地址&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/yclxiao/spring-websocket.git&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;：本文介绍springboot如何集成websocket、IM及时通讯需要哪些模块、开发和部署过程中遇到的问题、以及实现小型IM及时通讯的代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本篇完结！感谢你的阅读，欢迎点赞  关注  收藏  私信！！！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;原文链接：&lt;/strong&gt;http://www.mangod.top/articles/2023/08/27/1693094046480.html&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/iaKiaGaGnVlcHhlL9pR1WDhfstDCaNIYdZf0dY4Hkrpvll4Ja8lOL1XrBEeNaMam0Sx4KVAxEs18VzaFoHSH523Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ebe1e2f1bb9a71535ac3fec1933a6e5e</guid>
<title>【低开】基于Vue3搭建的低代码数据可视化开发平台</title>
<link>https://toutiao.io/k/jkurmwr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content&amp;#10;                       autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;GoView &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;GoView 是一个Vue3搭建的低代码数据可视化开发平台，将图表或页面元素封装为基础组件，无需编写代码即可完成业务需求。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;它的技术栈为：Vue3 + TypeScript4 + Vite2 + NaiveUI + ECharts5 + Axios + Pinia2 + PlopJS&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5657439446366782&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTaQbVeLb6HF9zPHqA55Fu90DIcCtsLg2oLyZia43KuRtnRC2yicRu7bpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;578&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Goview是一个基于golanghtml/template语法的轻量级、极简且惯用的模板库，用于构建GoWeb应用程序。它使用golang/html/template语法，并且在此基础上增加了一些功能，使得在Go语言中编写HTML模板更加方便和易用。&lt;br/&gt;&lt;br/&gt;同时，Goview也是一个拖拽式低代码数据可视化开发平台，旨在帮助用户快速构建数据大屏，同时减少心智负担。通过将图表和页面元素封装为基础组件，用户无需编写大量的代码，即可轻松地创建数据可视化。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;整体介绍&lt;/span&gt;&lt;/h4&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;框架：基于 Vue3 框架编写，使用 hooks 写法抽离部分逻辑，使代码结构更加清晰；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类型：使用 TypeScript 进行类型约束，减少未知错误发生概率，可以大胆修改逻辑内容；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;性能：多处性能优化，使用页面懒加载、组件动态注册、数据滚动加载等方式，提升页面渲染速度；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;存储：拥有本地记忆，部分配置项采用 storage 存储本地，提升使用体验；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;封装：项目进行了详细的工具类封装如：路由、存储、加/解密、文件处理、主题、NaiveUI 全局方法、组件等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.32037037037037036&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wT1icc8a2ehBZcqicBAtkLMAkCW0pbKL58ULxOAqxdAibEvV0NSeRbYhmJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;说明文档： &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wT5KFnvRVtKCbRV0KKTUyHXyibwIh3F9UVX7jRGXibObjZDvoIz3T6zqRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;工作台： &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5361111111111111&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTKb1biah4HOoH0TqzTiblkCTLPnWIvqVGcLCPLZdc2ibbEj7geLbL8OgoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;请求配置： &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.537962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTIIrvptNbdYcr2rLTYzJD6oIMQFvh8ABIBYTGibkr6A55PN49ZQLdq5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;数据过滤： &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wT5Jp3WYeBiaCMYKxmCmfr8yHYNAXrZNV6FibrI05TKcD1z0zfHG8Bfg6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;高级事件编辑: &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5101851851851852&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTwwIGfDU1MPibAcHVib2ulZ96dZHibAFlwvtGofKicjnVp2d5ED7YOWyyzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;自定义组件颜色: &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6259259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTqZHIwiaTN4Lgasa4padTx0rxoBUsWS2ubeE97gAetbMMxWMKDSrMDjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;快捷主页： &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTqDHXDAVSbEicV7Hc93QhTJJnTq7YhRAsE8iaC5dA7yibyuIFfW0dU0mEw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;主题色： &lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTIyVCy88B2HibsC3jwicialIyVKOcd17wFTneD9pXlBiciaft1a0FHA9N20A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;亮白主题： &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5444444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTaJw3PMMrBCleib3RZsCvBB2w9WemusAvxE7iaDXCsyI4k1t69NPkWqNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;主要技术栈为：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;版本&lt;/th&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;版本&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Vue&lt;/td&gt;&lt;td&gt;3.2.x&lt;/td&gt;&lt;td&gt;TypeScript4&lt;/td&gt;&lt;td&gt;4.6.x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Vite&lt;/td&gt;&lt;td&gt;4.2.x&lt;/td&gt;&lt;td&gt;NaiveUI&lt;/td&gt;&lt;td&gt;2.34.x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ECharts&lt;/td&gt;&lt;td&gt;5.3.x&lt;/td&gt;&lt;td&gt;Pinia&lt;/td&gt;&lt;td&gt;2.0.x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;详见 &lt;code&gt;package.json&lt;/code&gt;&lt;/td&gt;&lt;td&gt;😁&lt;/td&gt;&lt;td&gt;🥰&lt;/td&gt;&lt;td&gt;🤗&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;开发环境:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;版本&lt;/th&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;版本&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;node&lt;/td&gt;&lt;td&gt;16.16.x&lt;/td&gt;&lt;td&gt;npm&lt;/td&gt;&lt;td&gt;8.5.x&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pnpm&lt;/td&gt;&lt;td&gt;7.1.x&lt;/td&gt;&lt;td&gt;windows&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;已完成图表：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;分类&lt;/th&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;名称&lt;/th&gt;&lt;th&gt;名称&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;图表&lt;/td&gt;&lt;td&gt;柱状图&lt;/td&gt;&lt;td&gt;横向柱状图&lt;/td&gt;&lt;td&gt;折线图&lt;/td&gt;&lt;td&gt;单/多 折线面积图(渐变色)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;饼图&lt;/td&gt;&lt;td&gt;环形图&lt;/td&gt;&lt;td&gt;水球图&lt;/td&gt;&lt;td&gt;雷达图&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;NaiveUI 多种进度&lt;/td&gt;&lt;td&gt;散点图&lt;/td&gt;&lt;td&gt;对数回归散点图&lt;/td&gt;&lt;td&gt;热力图&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;漏斗图&lt;/td&gt;&lt;td&gt;中国地图&lt;/td&gt;&lt;td&gt;高德地图&lt;/td&gt;&lt;td&gt;🦊&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;信息&lt;/td&gt;&lt;td&gt;文字&lt;/td&gt;&lt;td&gt;渐变文字&lt;/td&gt;&lt;td&gt;词云&lt;/td&gt;&lt;td&gt;嵌套网页&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;图片&lt;/td&gt;&lt;td&gt;视频&lt;/td&gt;&lt;td&gt;😺&lt;/td&gt;&lt;td&gt;🐯&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;列表&lt;/td&gt;&lt;td&gt;滚动排名列表&lt;/td&gt;&lt;td&gt;滚动表格&lt;/td&gt;&lt;td&gt;🐮&lt;/td&gt;&lt;td&gt;🐐&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;小组件&lt;/td&gt;&lt;td&gt;边框-01~13&lt;/td&gt;&lt;td&gt;装饰-01~05&lt;/td&gt;&lt;td&gt;数字翻牌&lt;/td&gt;&lt;td&gt;通用时间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;数字计数&lt;/td&gt;&lt;td&gt;倒计时&lt;/td&gt;&lt;td&gt;时钟&lt;/td&gt;&lt;td&gt;🦁&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;浏览器支持&lt;/h2&gt;&lt;p&gt;开发和测试平台均在 &lt;code&gt;Google&lt;/code&gt; 和最新版 &lt;code&gt;EDGE&lt;/code&gt; 上完成，暂未测试 &lt;code&gt;IE11&lt;/code&gt; 等其它浏览器，如有需求请自行测试与兼容。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.35185185185185186&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KmEUbWy7RO8wWjlC5PotUYcRamSG73wTF82Fu1DKoZ6sIlrgOSekHJzv4gvltL0ibR4qYQYc8jtvZkTrPEvuPcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平台的特点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种平台的目标是简化数据可视化的开发过程，使没有编程背景的用户也能创建出复杂的可视化应用。下面是一些拖拽式低代码数据可视化开发平台的特点：&lt;br/&gt;&lt;br/&gt;1. &lt;/span&gt;&lt;span&gt;&lt;strong&gt;易于使用&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：平台通常提供直观的用户界面和拖拽功能，用户可以直接在界面上选择和拖动不同的元素来创建可视化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. &lt;/span&gt;&lt;span&gt;&lt;strong&gt;预设计的模板和组件&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：平台通常提供各种预设计的模板和可视化元素，如图表、地图、表格等，用户可以根据需要选择和修改。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. &lt;/span&gt;&lt;span&gt;&lt;strong&gt;自定义能力&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：虽然平台提供预设计的模板和组件，但用户通常也可以根据需要自定义元素，以满足特定的设计需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. &lt;/span&gt;&lt;span&gt;&lt;strong&gt;强大的数据处理能力&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：平台可以处理各种来源的数据，包括数据库、API、Excel文件等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5. &lt;/span&gt;&lt;span&gt;&lt;strong&gt;交互性&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：用户可以通过点击、滑动等手势来与可视化交互，如放大、缩小、筛选数据等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6. &lt;/span&gt;&lt;span&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：平台可以集成到现有的系统或应用中，也可以通过API与其他系统或服务进行交互。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;7. &lt;/span&gt;&lt;span&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：平台需要保证数据的安全性，确保只有经过授权的用户才能访问和处理数据。&lt;br/&gt;&lt;br/&gt;一些常见的拖拽式低代码数据可视化开发平台包括Tableau, Power BI, Datawrapper等。这些平台都提供了强大的数据可视化功能，同时保持了易用性和灵活性，使得任何人都可以创建和理解数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;猜您喜欢：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MTQyNDc5MA==&amp;amp;mid=2247489830&amp;amp;idx=1&amp;amp;sn=2736acf08126131a2454b416a98034b2&amp;amp;chksm=eac3555fddb4dc498e29f5df0ebafcc946081d2079a39a1276e42b491c0e91379f1b957c04f2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【低开】低开平台的数据模型驱动&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;【低开】低开平台的数据模型驱动&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MTQyNDc5MA==&amp;amp;mid=2247490713&amp;amp;idx=1&amp;amp;sn=05b8b6b026511862c0924b42680e6acc&amp;amp;chksm=eac350e0ddb4d9f628a8ae96a204210a44c186472f90176eefe5ec0ab7f446238325cd15a999&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【开源】海量数据的实时 CDC 和批量同步，可以稳定高效地同步万亿级数据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;【开源】海量数据的实时 CDC 和批量同步，可以稳定高效地同步万亿级数据&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MTQyNDc5MA==&amp;amp;mid=2247491298&amp;amp;idx=1&amp;amp;sn=700dad1b09bfec7c229a3c22d32d8b1a&amp;amp;chksm=eac3529bddb4db8dd5e93fd1b60a820b573ae45b91ff16dbed67f954953c5860c3da6fc4ed2f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【应用】Milvus 向量数据库的应用场景&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;【应用】Milvus 向量数据库的应用场景&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MTQyNDc5MA==&amp;amp;mid=2247491242&amp;amp;idx=1&amp;amp;sn=d0aae049b1268bf8150df09bd6674219&amp;amp;chksm=eac352d3ddb4dbc59d23adc147f2b180a233e1faf6f3c9f7094a64a16402a84e7708d9ec37d0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【解读】数字中国2522框架和数据治理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;【解读】数字中国2522框架和数据治理&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MTQyNDc5MA==&amp;amp;mid=2247491228&amp;amp;idx=1&amp;amp;sn=9f01734f21a1edc2398f491da1175d53&amp;amp;chksm=eac352e5ddb4dbf388d06e6559afb0fc7c1469959f596ae28a13d9324f1be4524edb4c26a048&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;[AI]数据治理中的人工智能&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;  [AI]数据治理中的人工智能&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;添加微信进相关交流群&lt;/span&gt;，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;备注“&lt;span&gt;微服务&lt;/span&gt;”进群交流&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;备注“&lt;span&gt;低开&lt;/span&gt;”进低开群交流&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;备注“AI”进AI大数据，数据治理群交流&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;备注“数字”进物联网和数字孪生群交流&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;备注“安全”进安全相关群交流&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;备注“商务”进行商务交流&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100003496&quot; data-ratio=&quot;1.2074074074074075&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KmEUbWy7RO9icbfoYK0eiakZOquUgsBqvQf0q6NBoGO8YARSPwcHLGibnl35GU9jgE992B5NMDNcuhyqoSwreQ2cA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注公众号 soft张三丰 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100003495&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmEUbWy7RO9mWCDq1S7EibsdIcr4FgZNLYlfp5VJNCX004apD8wXhsuiaia5Tmz0xwE2aCP5Z6mhVwtvXFcknaB2w/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;258&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0e1e42a587492d520d1e880a34407437</guid>
<title>项目管理全流程！</title>
<link>https://toutiao.io/k/bkfubev</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content&amp;#10;                       autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;下面这张图，项目管理的全流程做了详细的解析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从图中可以看到一个完整的项目流程全貌，以及在不同流程需要项目经理重点关注的内容。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;4.157647058823529&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sIdiaFJdqrPQwDg5rZ8FVl4AyFrGYuuRwHD9arzkfUmyLDotNDSKgX3wqkFYDk4nrceEqtdZkU0KXyC24bIYzWQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;4.324705882352941&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sIdiaFJdqrPQwDg5rZ8FVl4AyFrGYuuRwz6DIJwErsrEHcXHJ7CiaD7aPwwjDfibjB7ibch8eadXrzYaNGYGsS8hRA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;4.423529411764706&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sIdiaFJdqrPQwDg5rZ8FVl4AyFrGYuuRwDqY1zcRHWVgyzoIBjEDux60dxRnanDiaRgEBNwTZ7rNsiceYnibMBa17w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;4.496470588235294&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sIdiaFJdqrPQwDg5rZ8FVl4AyFrGYuuRwH0tmIcOibGT4l0MtiaN5dibKXLn1K2jMjexhPaXdkKoPwfbqlzlNFQx4w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;3.9035294117647057&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sIdiaFJdqrPQwDg5rZ8FVl4AyFrGYuuRw0BnmnjqoAMq6HvuAK3Jibb6jDmAgHHGAArherVaSQ6GfXk0icLEFp1Jg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，理清了项目管理全流程还远远不够，项目经理还需要通过学习和不断的实践，加深理解，积累经验，这样才能&lt;/span&gt;&lt;strong&gt;&lt;span&gt;真正掌握项目管理的精髓&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;别忘了点赞，收藏&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;就喜欢这种知识划过脑子&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不留痕迹的感觉&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;-THE END-&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIuDMLOISu7uwT5IL33cIqbWfpOFGav8paT7zc6ZsgFEJAz0xJqUsHbOGIl2Qswicn5SJZZLzb8PhsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8647cf51b6c61715186081b94faa1171</guid>
<title>这些天，我们前端组一起处理的项目优化</title>
<link>https://toutiao.io/k/8myztg9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content&amp;#10;                       autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NjY2NTcyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjaCTEjQdxnaIlEWiaGcw9zNV7AHZGgp5q9U0zPf3cmcIgBRYG1n2ydEBHJGgl8nEA1bKiaj1fibK2EA/0?wx_fmt=png&quot; data-nickname=&quot;前端之神&quot; data-alias=&quot;Sunshine_Lin_God&quot; data-signature=&quot;一位前端小菜鸡，写过100多篇原创文章，全网有5w+个前端朋友，梦想是成为”前端之神“~&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;模拟面试、简历指导、入职指导、项目指导、答疑解惑&lt;/strong&gt;可私信找我~已帮助100+名同学完成改造！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;大家好，我是林三心，用最通俗易懂的话讲最难的知识点是我的座右铭，基础是进阶的前提是我的初心~&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF4H6vz4oIyicTgBo0a4UHZd1egY3CDTRjF7479VuyctWzJegNtRDFcTfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p&gt;很早一段时间，我们前端组做了一些国外系统的小优化(&lt;code&gt;集中表现在代码执行速度，系统安全等方面&lt;/code&gt;)，故新建一篇文章来记录这次优化的经历。如果本文对您有帮助，烦请大家一键三连哦, &lt;strong&gt;蟹蟹大家~&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1. 减小文件体积/网络请求&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;方法一：删除需要预先加载和预先获取的资源，一般使用这种方法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;link&lt;/strong&gt;标签中的&lt;code&gt;preload&lt;/code&gt;和&lt;code&gt;prefetch&lt;/code&gt;：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;code&gt;preload&lt;/code&gt;插件用于预加载资源。&lt;/strong&gt; 即在当前页面加载完成后，立即加载并缓存指定的资源。预加载的资源被认为是当前页面所需的关键资源，因此会优先下载和缓存。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;code&gt;prefetch&lt;/code&gt;插件用于预获取资源。&lt;/strong&gt; 即在当前页面加载完成后，异步地加载并缓存指定的资源，以供将来可能需要的页面使用。预获取的资源被认为是可能会在未来的导航中使用的资源，但不是当前页面所必需的。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;`vue.config.js`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;chainWebpack&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;config&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;`删除需要预先加载(当前页面)的资源，当需要这些资源的时候，页面会自动加载`&lt;/span&gt;&lt;br/&gt;    config.plugins.delete(&lt;span&gt;&#x27;preload&#x27;&lt;/span&gt;)  &lt;br/&gt;    &lt;span&gt;`删除需要预先获取(将来的页面)的资源`&lt;/span&gt;&lt;br/&gt;    config.plugins.delete(&lt;span&gt;&#x27;prefetch&#x27;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;方法二：使用&lt;code&gt;webpack&lt;/code&gt;合并小文件&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;合并&lt;code&gt;js&lt;/code&gt;代码的意义：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;减少网络请求：&lt;/strong&gt; 每个文件都需要通过网络进行单独的请求和响应。通过将多个文件合并为一个文件，可以减少页面需要发起的网络请求次数，从而降低延迟和提高加载速度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;缓存优化：&lt;/strong&gt; 合并代码可以提高浏览器缓存的效率。当多个页面共享同一个文件时，浏览器只需要下载并缓存一次该文件，而不是针对每个页面都下载一次。这样可以减少整体的重复下载和提高缓存命中率。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;减少页面渲染阻塞：&lt;/strong&gt; 当浏览器下载和执行&lt;code&gt;js&lt;/code&gt;代码时，它会阻塞页面的渲染过程。通过合并&lt;code&gt;js&lt;/code&gt;代码，可以减少因为多个&lt;code&gt;js&lt;/code&gt;文件的下载和执行而造成的页面渲染阻塞时间，提高页面的响应速度和用户体验。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;代码优化和压缩：&lt;/strong&gt; 在合并&lt;code&gt;js&lt;/code&gt;代码之前，可以对代码进行优化和压缩，去除空格、注释和不必要的代码，从而减少文件大小，并提高代码的执行效率。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;`vue.config.js: `&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; webpack = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;webpack&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; ENV = process.env.NODE_ENV&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;chainWebpack&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;config&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    config.when(ENV === &lt;span&gt;&#x27;production&#x27;&lt;/span&gt;, config =&amp;gt; {&lt;br/&gt;      config.plugin(&lt;span&gt;&#x27;webpackOptimize&#x27;&lt;/span&gt;)&lt;br/&gt;      .use(&lt;br/&gt;        webpack.optimize.LimitChunkCountPlugin, &lt;br/&gt;        &lt;span&gt;`限制生成的代码块(chunks)的数量`&lt;/span&gt;&lt;br/&gt;        [{ &lt;span&gt;maxChunks&lt;/span&gt;: &lt;span&gt;10&lt;/span&gt; }]&lt;br/&gt;      )&lt;br/&gt;      .use(&lt;br/&gt;        webpack.optimize.MinChunkSizePlugin, &lt;br/&gt;        &lt;span&gt;`指定代码块的最小字节数`&lt;/span&gt;&lt;br/&gt;        [{ &lt;span&gt;minChunkSize&lt;/span&gt;: &lt;span&gt;50000&lt;/span&gt; }]&lt;br/&gt;      )&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;优化前的本地环境：&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4620976116303219&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF449u6fyX3KzVuK37ow1aq4EFVuJLY68JSu8D7UO4Mun9cib0Vz7Sibhqw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;963&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;优化后的本地环境(&lt;code&gt;app.js&lt;/code&gt;文件较大，是由于&lt;code&gt;main.js&lt;/code&gt;引入了大量的第三方库)：&lt;/strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45556690500510727&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF4ohl8V2s33nHjMYXibNak6dFTmxfBpONYvKmTiaiaia6KLjHDBymd4xPWXQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;979&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;优化后的线上环境(首先，打包后有对这些文件进行压缩处理，&lt;code&gt;app.js&lt;/code&gt;被压缩至&lt;code&gt;1.24MB&lt;/code&gt;。&lt;code&gt;&quot;inspect&quot;: &quot;vue inspect &amp;gt; output.js&quot;&lt;/code&gt;，使用&lt;code&gt;npm run inspect&lt;/code&gt;可以查看&lt;code&gt;webPack&lt;/code&gt;的配置信息。其次，运维都有对这些文件作&lt;code&gt;gzip&lt;/code&gt;压缩处理, 所以体积都减小了很多, 最终&lt;code&gt;app.js&lt;/code&gt;的体积减小至&lt;code&gt;405KB&lt;/code&gt;):&lt;/strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4425144747725393&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF4zGzG5AsJ9YcA0Dqu0SXicnhx64fFicTyXguEvfcDicpV1yvSGOXcQpcXQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1209&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.1268462206776716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF4fJOBoCuOy9kGvWgU2s6ic1ej7xmkRGxHqpGwyUjhSMJEwQ5ho0yrxqg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1151&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;2. &lt;code&gt;加减乘除&lt;/code&gt;运算集成&lt;span&gt;`big.js`&lt;/span&gt;&lt;span&gt;[1]&lt;/span&gt;，解决&lt;code&gt;js&lt;/code&gt;小数精度问题&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;当涉及到浮点数计算时，&lt;code&gt;js&lt;/code&gt;中的精度丢失问题, 是由于使用&lt;code&gt;IEEE 754&lt;/code&gt;标准来表示和计算浮点数的方式引起的。&lt;strong&gt;这个问题不仅仅在&lt;code&gt;js&lt;/code&gt;中存在，而是在所有使用&lt;code&gt;IEEE 754&lt;/code&gt;标准的编程语言中都会遇到。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;IEEE 754&lt;/code&gt;标准定义了两种常见的浮点数表示形式：单精度（&lt;code&gt;32&lt;/code&gt;位）和双精度（&lt;code&gt;64&lt;/code&gt;位）。在 &lt;code&gt;js&lt;/code&gt;中，采用的是双精度表示法，即&lt;code&gt;64&lt;/code&gt;位。&lt;/p&gt;&lt;p&gt;然而，由于二进制和十进制之间的转换存在差异，&lt;strong&gt;某些十进制分数无法精确表示为有限位的二进制浮点数。这导致了舍入误差和精度丢失。&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;安装依赖：&lt;/strong&gt; &lt;code&gt;npm install --save big.js&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;方法封装：&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; Big &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;big.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;accFactory&lt;/span&gt;(&lt;span&gt;method = &lt;span&gt;&#x27;add&#x27;&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;...nums&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;`将传入的参数转换为Number类型，并过滤掉不是Number类型的结果`&lt;/span&gt;&lt;br/&gt;    nums = nums.map(&lt;span&gt;Number&lt;/span&gt;).filter(&lt;span&gt;(&lt;span&gt;num&lt;/span&gt;) =&amp;gt;&lt;/span&gt; num || num === &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;`如果过滤后的结果是长度为1的数组，那就返回数组的第一项`&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;`如果过滤后的结果为空数组，则返回0`&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (nums.length &amp;lt; &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; nums[&lt;span&gt;0&lt;/span&gt;] || &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;`需要为reduce方法赋初值，是因为big.js的运算操作，是基于new Big格式的数字`&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;`可以将Big对象转换为浮点数，方便后续Number.toFixed()的操作`&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;parseFloat&lt;/span&gt;(nums.slice(&lt;span&gt;1&lt;/span&gt;).reduce(&lt;span&gt;(&lt;span&gt;prev, num&lt;/span&gt;) =&amp;gt;&lt;/span&gt; prev[method](num), &lt;span&gt;new&lt;/span&gt; Big(nums[&lt;span&gt;0&lt;/span&gt;]))) || &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;`plus、minus、times、div为big.js中的计算方法，分别对应加减乘除这四个运算操作`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;`浮点数求和`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; accAdd = accFactory(&lt;span&gt;&#x27;plus&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;`浮点数相减`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; accSub = accFactory(&lt;span&gt;&#x27;minus&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;`浮点数相乘`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; accMul = accFactory(&lt;span&gt;&#x27;times&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;`浮点数相除`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; accDiv = accFactory(&lt;span&gt;&#x27;div&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { accAdd, accSub, accMul, accDiv } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/utils/calculate&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;mounted() {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.calTestHandler()&lt;br/&gt;},&lt;br/&gt;&lt;br/&gt;&lt;span&gt;methods&lt;/span&gt;: {&lt;br/&gt;  calTestHandler() {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; operations = [&lt;br/&gt;      { &lt;span&gt;operator&lt;/span&gt;: &lt;span&gt;&#x27;+&#x27;&lt;/span&gt;, &lt;span&gt;method&lt;/span&gt;: accAdd, &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;0.1&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt;: &lt;span&gt;0.2&lt;/span&gt; },&lt;br/&gt;      { &lt;span&gt;operator&lt;/span&gt;: &lt;span&gt;&#x27;-&#x27;&lt;/span&gt;, &lt;span&gt;method&lt;/span&gt;: accSub, &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;0.1&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt;: &lt;span&gt;0.3&lt;/span&gt; },&lt;br/&gt;      { &lt;span&gt;operator&lt;/span&gt;: &lt;span&gt;&#x27;*&#x27;&lt;/span&gt;, &lt;span&gt;method&lt;/span&gt;: accMul, &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;0.1&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt;: &lt;span&gt;0.2&lt;/span&gt; },&lt;br/&gt;      { &lt;span&gt;operator&lt;/span&gt;: &lt;span&gt;&#x27;/&#x27;&lt;/span&gt;, &lt;span&gt;method&lt;/span&gt;: accDiv, &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;0.1&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt;: &lt;span&gt;0.3&lt;/span&gt; }&lt;br/&gt;    ]&lt;br/&gt; &lt;br/&gt;    operations.forEach(&lt;span&gt;(&lt;span&gt;operation&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;const&lt;/span&gt; { operator, method, a, b } = operation&lt;br/&gt;      &lt;span&gt;const&lt;/span&gt; result = method(a, b)&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`原生js &lt;span&gt;${operator}&lt;/span&gt; 运算：&lt;span&gt;${a}&lt;/span&gt; &lt;span&gt;${operator}&lt;/span&gt; &lt;span&gt;${b}&lt;/span&gt;的值是&lt;span&gt;${&lt;span&gt;eval&lt;/span&gt;(a + operator + b)}&lt;/span&gt;`&lt;/span&gt;)&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`big.js &lt;span&gt;${operator}&lt;/span&gt; 运算：&lt;span&gt;${a}&lt;/span&gt; &lt;span&gt;${operator}&lt;/span&gt; &lt;span&gt;${b}&lt;/span&gt;的值是&lt;span&gt;${result}&lt;/span&gt;`&lt;/span&gt;)&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果展示：&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43799472295514513&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF4s1O7HuQQMKuyZK8YHwFm30Dvic7WQV0OhuIqPlyh7mT9AEB9XG6UpHw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;379&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;3. 使用&lt;span&gt;`bluebird`&lt;/span&gt;&lt;span&gt;[2]&lt;/span&gt;提升&lt;code&gt;promise&lt;/code&gt;的执行速度&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;bluebird&lt;/code&gt;是一个流行的&lt;code&gt;Promise&lt;/code&gt;库，用于处理异步操作。它提供了强大的异步编程工具，使得编写和管理异步代码变得更加简单和可靠。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;code&gt;Promise&lt;/code&gt;功能增强：&lt;/strong&gt; &lt;code&gt;bluebird&lt;/code&gt;提供了许多额外的功能和操作，超出了原生&lt;code&gt;Promise&lt;/code&gt;的范围。它支持超时控制、并发控制、错误处理、重试、进度报告和取消等功能。这些功能使得处理复杂的异步控制流变得更加容易。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;性能优化：&lt;code&gt;bluebird&lt;/code&gt;在性能方面进行了优化，比原生&lt;code&gt;Promise&lt;/code&gt;更快。&lt;/strong&gt; 它实现了高效的异步调度和内存管理，以提供更快的执行速度和更低的资源消耗。这使得在大规模异步操作的情况下，&lt;code&gt;bluebird&lt;/code&gt;可以提供更高效的性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;错误追踪和调试：&lt;code&gt;bluebird&lt;/code&gt;提供了更好的错误追踪和调试支持。&lt;/strong&gt; 当使用&lt;code&gt;bluebird&lt;/code&gt;进行异步操作时，它会生成详细的错误堆栈跟踪信息，包括异步操作链的每个步骤。这使得在调试和排查错误时更容易定位问题所在。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;可互操作性：&lt;code&gt;bluebird&lt;/code&gt;的&lt;code&gt;api&lt;/code&gt;与原生&lt;code&gt;Promise&lt;/code&gt;相似，因此可以与其他使用&lt;code&gt;Promise&lt;/code&gt;的库和代码进行互操作。&lt;/strong&gt; 这使得在现有的代码基础上，迁移到&lt;code&gt;bluebird&lt;/code&gt;更加容易，并且可以充分利用&lt;code&gt;bluebird&lt;/code&gt;提供的额外功能。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;安装依赖：&lt;/strong&gt; &lt;code&gt;npm install --save bluebird&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;方法封装(全局挂载)：&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;bluebird&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Promise&lt;/span&gt;.config({&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;`确定是否启用警告输出。当设置为true，bluebird会在控制台输出警告，例如不推荐使用的方法或潜在问题`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;warnings&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;`确定是否启用长堆栈跟踪, bluebird会生成详细的异步调用堆栈信息，包括Promise链中的每个步骤。`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;`这对于调试和错误追踪非常有用, 但启用长堆栈跟踪，可能会对性能产生一些影响`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;longStackTraces&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;`确定是否启用取消功能。当设置为true时，bluebird允许取消异步操作。`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;`取消一个Promise将导致其相关的操作被中断或忽略，有助于优化资源使用和控制异步流程。`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;cancellation&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;`确定是否启用性能监视。当设置为true时，bluebird可以收集异步操作的性能数据，例如执行时间、调用次数等。`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;`这对于分析和优化异步操作的性能非常有用。`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;monitoring&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;`确定是否启用异步挂钩。异步挂钩是node.js提供的一种机制，可以在异步操作的不同阶段执行回调函数。`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;`当设置为true时，bluebird将使用异步挂钩来跟踪和管理异步操作`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;asyncHooks&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;window&lt;/span&gt;.bluePromise = &lt;span&gt;Promise&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;`main.js`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; bluebird &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/utils/bluebird&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;mounted() {&lt;br/&gt; &lt;span&gt;this&lt;/span&gt;.proTestHandler()&lt;br/&gt;},&lt;br/&gt;&lt;br/&gt;&lt;span&gt;methods&lt;/span&gt;: {&lt;br/&gt;  &lt;span&gt;async&lt;/span&gt; proTestHandler() {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; promises = []&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; bluebirds = []&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; promiseList = &lt;span&gt;(&lt;span&gt;promise, count, arr&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; count; i++) {&lt;br/&gt;        arr.push(&lt;span&gt;new&lt;/span&gt; promise(&lt;span&gt;(&lt;span&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; resolve(i)))&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; generatePromises = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      promiseList(&lt;span&gt;Promise&lt;/span&gt;, &lt;span&gt;1000000&lt;/span&gt;, promises)&lt;br/&gt;      promiseList(bluePromise, &lt;span&gt;1000000&lt;/span&gt;, bluebirds)&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    generatePromises()&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;promise&#x27;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.time()&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;.all(promises)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.timeEnd()&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;bluebirds&#x27;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.time()&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; bluePromise.all(bluebirds)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.timeEnd()&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果展示&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.42346938775510207&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF40CQr7ZdEjePDPUsMa27uMolPQTjwNVuGLQmUcrvLoH5DJiaZic1dtyJw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;196&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;4. 使用&lt;span&gt;`hashids`&lt;/span&gt;&lt;span&gt;[3]&lt;/span&gt;加密路由&lt;code&gt;id&lt;/code&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在网址上应用&lt;code&gt;hashids&lt;/code&gt;有以下&lt;code&gt;4&lt;/code&gt;点重要意义：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;加密隐藏真实id：&lt;/strong&gt; 在某些情况下，你可能希望隐藏网址中的真实&lt;code&gt;id&lt;/code&gt;，以增加安全性和防止直接暴露敏感信息。使用&lt;code&gt;hashids&lt;/code&gt;，可以将真实的数字&lt;code&gt;id&lt;/code&gt;转换为短字符串，并在网址中使用该短字符串代替原始&lt;code&gt;id&lt;/code&gt;。这样，外部用户只能看到短字符串，而无法直接推断出真实的&lt;code&gt;id&lt;/code&gt;值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;可读性和美观性：&lt;/strong&gt; 长的数字&lt;code&gt;id&lt;/code&gt;在网址中可能显得冗长和难以理解。使用&lt;code&gt;hashids&lt;/code&gt;将其转换为短字符串，可以大大提升网址的可读性和美观性。短字符串通常包含字母和数字的组合，更易于记忆和分享。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;防止猜测和遍历：&lt;/strong&gt; 使用连续的数字&lt;code&gt;id&lt;/code&gt;在网址中可能导致猜测和遍历的风险，因为攻击者可以通过递增&lt;code&gt;id&lt;/code&gt;来尝试访问和暴露数据。通过使用&lt;code&gt;hashids&lt;/code&gt;生成的短字符串作为&lt;code&gt;id&lt;/code&gt;，可以有效地防止这种攻击。由于短字符串是随机生成的，攻击者无法根据短字符串推断出下一个&lt;code&gt;id&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;URL缩短和分享：&lt;/strong&gt; &lt;code&gt;hashids&lt;/code&gt;生成的短字符串可以用作&lt;code&gt;url&lt;/code&gt;缩短服务的替代方案。你可以将长的&lt;code&gt;url&lt;/code&gt;转换为短字符串，并在分享时使用该短字符串。这对于限制字符数、简化链接以及在社交媒体和短信中共享链接都非常有用。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;安装依赖：&lt;/strong&gt; &lt;code&gt;npm install --save hashids&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;方法封装(全局挂载)：&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;`短码方法封装：`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Hashids &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;hashids&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; hashids = &lt;span&gt;new&lt;/span&gt; Hashids(&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;`盐值是一个可选的字符串参数，用于增加生成的短码的唯一性和安全性。每个不同的盐值将产生不同的短码序列,`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;`可以将盐值视为项目的名称或标识符。如果不提供盐值，则默认为一个空字符串。`&lt;/span&gt;&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;&#x27;toadditWeb&#x27;&lt;/span&gt;, &lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;`是一个可选的整数参数，用于指定生成的短码的最小长度。如果生成的短码长度小于指定的最小长度，`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;`hashids会自动填充短码以达到最小长度。这只是一个最小长度的限制，实际生成的短码长度可能更长。`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;`如果不提供最小长度，则默认为0，即没有最小长度限制。`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;8&lt;/span&gt;, &lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;`字母表是一个可选的字符串参数，用于定义生成短码时使用的字符集。该字符串包含所有可用于生成短码的字符。`&lt;/span&gt; &lt;br/&gt;  &lt;span&gt;`通常，字母表中应包含一组不容易混淆的字符，以避免生成的短码产生歧义。如果不提供字母表，则默认为`&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;`&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;`&lt;/span&gt;。&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;`短码封装`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;encode&lt;/span&gt;(&lt;span&gt;val&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; hashids.encode(val)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;`短码解析`&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decode&lt;/span&gt;(&lt;span&gt;val&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; hashids.decode(val)[&lt;span&gt;0&lt;/span&gt;]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;`glboal.js: 全局注册`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { encode, decode } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/utils/hashids&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; {&lt;br/&gt;  install(Vue) {&lt;br/&gt;    Vue.prototype.$encode = &lt;span&gt;window&lt;/span&gt;.$encode = &lt;span&gt;(&lt;span&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; encode(data)&lt;br/&gt;    Vue.prototype.$decode = &lt;span&gt;window&lt;/span&gt;.$decode = &lt;span&gt;(&lt;span&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; decode(data)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;`在main.js中挂载：`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Vue &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;vue&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; App &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./App&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; globalConst &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@/commons/globalConst&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;Vue.use(globalConst)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;new&lt;/span&gt; Vue({&lt;br/&gt;  &lt;span&gt;el&lt;/span&gt;: &lt;span&gt;&#x27;#app&#x27;&lt;/span&gt;,&lt;br/&gt;  router,&lt;br/&gt;  store,&lt;br/&gt;  &lt;span&gt;render&lt;/span&gt;: &lt;span&gt;(&lt;span&gt;h&lt;/span&gt;) =&amp;gt;&lt;/span&gt; h(App)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;mounted() {&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.hashTestHandler()&lt;br/&gt;},&lt;br/&gt;&lt;br/&gt;&lt;span&gt;methods&lt;/span&gt;: {&lt;br/&gt;  hashTestHandler() {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; testId = &lt;span&gt;18&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; encode = $encode(testId)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`hashids编码前: &lt;span&gt;${testId}&lt;/span&gt;`&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`hashids编码: &lt;span&gt;${encode}&lt;/span&gt;`&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`hashids解码: &lt;span&gt;${$decode(encode)}&lt;/span&gt;`&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;结果展示(&lt;code&gt;在同一个盐值下，不管页面是否刷新，编码结果都不会改变&lt;/code&gt;):&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.35802469135802467&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF4BrkMfNWsakOoLNBYKOaN92Laxq8E0h7rjiczfag0K0I0rQQIod2cfSQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;162&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;5. 登陆时使用&lt;span&gt;`行为验证码`&lt;/span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;登陆时使用&lt;code&gt;行为验证码&lt;/code&gt;有以下&lt;code&gt;5&lt;/code&gt;点重要意义：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;增强安全性：&lt;/strong&gt; 传统的验证码可以被自动化的机器人或恶意程序轻易地破解或绕过。而&lt;code&gt;行为验证码&lt;/code&gt;通过分析用户的行为模式，可以更准确地识别是否是真实用户，从而提高安全性，防止恶意活动和机器人攻击。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;用户友好性：&lt;/strong&gt; 相比于传统的验证码，&lt;code&gt;行为验证码&lt;/code&gt;通常对用户来说更加友好和便捷。用户无需输入复杂的文本或解析模糊的图像，而是通过正常的交互行为完成验证，例如简单的滑动、点击、拖拽等操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;无感知验证：&lt;/strong&gt; &lt;code&gt;行为验证码&lt;/code&gt;可以在用户进行正常的操作过程中进行验证，几乎无需用户额外的干预或注意。这样可以减少对用户的干扰和阻碍，提升用户体验。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;自适应性：&lt;/strong&gt; &lt;code&gt;行为验证码&lt;/code&gt;可以根据用户的行为模式自适应地进行验证。它可以根据用户的设备、IP地址、浏览器指纹、鼠标移动轨迹等因素来综合评估用户的真实性，从而提高准确性和安全性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;防止数据滥用：&lt;/strong&gt; &lt;code&gt;行为验证码&lt;/code&gt;可以用于防止恶意用户或攻击者滥用系统或服务。通过分析用户的行为模式和交互方式，可以及时识别和阻止异常行为，保护系统和数据的安全。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;前端参考文档：https:&lt;span&gt;//github.com/Yunlingfly/vue-captcha/tree/master&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;最终效果：&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5865384615384616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdiaxHCwGjFomGgrcdx8jRjF4ciaZtLZn7GRWeAZlT0826KDoHKRajTV2YibO58iaxXpcxOlHL9tutPFpQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;728&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;作者：沐浴在曙光下的贰货道士 &lt;/p&gt;&lt;p&gt;链接：https://juejin.cn/post/7264440609129119804 &lt;/p&gt;&lt;p&gt;来源：稀土掘金 &lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;结语&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;结语&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;我是林三心&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一个待过&lt;strong&gt;小型toG型外包公司、大型外包公司、小公司、潜力型创业公司、大公司&lt;/strong&gt;的作死型前端选手；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个偏前端的全干工程师；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个不正经的掘金作者；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;逗比的B站up主；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不帅的小红书博主；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;喜欢打铁的篮球菜鸟；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;喜欢历史的乏味少年；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;喜欢rap的五音不全弱鸡&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果你想一起学习前端，一起摸鱼，一起研究简历优化，一起研究面试进步，一起交流历史音乐篮球rap，可以来俺的摸鱼学习群哈哈，点这个，有7000多名前端小伙伴在等着一起学习哦 --&amp;gt; &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3190954773869348&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TZL4BdZpLdgpicInf3LddZb1L01E3HchGy1pbwyVicwoh59PQnIC5s7kuReOU1mchh2uiaWPFeUjtlvvmmtbB8few/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1194&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NjY2NTcyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjaCTEjQdxnaIlEWiaGcw9zNV7AHZGgp5q9U0zPf3cmcIgBRYG1n2ydEBHJGgl8nEA1bKiaj1fibK2EA/0?wx_fmt=png&quot; data-nickname=&quot;前端之神&quot; data-alias=&quot;Sunshine_Lin_God&quot; data-signature=&quot;一位前端小菜鸡，写过100多篇原创文章，全网有5w+个前端朋友，梦想是成为”前端之神“~&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;p&gt;广州的兄弟可以约饭哦，或者约球~我负责打铁，你负责进球，谢谢~&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;模拟面试、简历指导、入职指导、项目指导、答疑解惑&lt;/strong&gt;可私信找我~已帮助100+名同学完成改造！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8f552a38f80501e94819493208aa79e3</guid>
<title>JVM 内存大对象监控和优化实践</title>
<link>https://toutiao.io/k/b8nerwy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;作者：&lt;/p&gt;&lt;p&gt;vivo 互联网服务器团队 - Liu Zhen、Ye Wenhao&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;服务器内存问题是影响应用程序性能和稳定性的重要因素之一，需要及时排查和优化。本文介绍了某核心服务内存问题排查与解决过程。首先在JVM与大对象优化上进行了有效的实践，其次在故障转移与大对象监控上提出了可靠的落地方案。最后，总结了内存优化需要考虑的其他问题。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、问题描述&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;音乐业务中，core服务主要提供歌曲、歌手等元数据与用户资产查询。随着元数据与用户资产查询量的增长，一些JVM内存问题也逐渐显露，例如GC频繁、耗时长，在高峰期RPC调用超时等问题，导致业务核心功能受损。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3388888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/4g5IMGibSxt5nibZianRN5pckGaRIKNvG94CttVva2gc08zTscL7xtI65tXfrqkhxnts7as51BOibrM4utib95MtUKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图1 业务异常数量变化&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、分析与解决&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过对日志，机器CPU、内存等监控数据分析发现：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;YGC平均每分钟次数12次，峰值为24次，平均每次的耗时在327毫秒。FGC平均每10分钟0.08次，峰值1次，平均耗时30秒。可以看到GC问题较为突出。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在问题期间，机器的CPU并没有明显的变化，但是堆内存出现较大异常。图2，黄色圆圈处，内存使用急速上升，FGC变的频繁，释放的内存越来越少。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.29074074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/4g5IMGibSxt5nibZianRN5pckGaRIKNvG94UQJX4ibiahJfV7y3r9FGs8amY7P2cSJowuzOvV8fVrQOwWoMvIgmrOjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图2 老年代内存使用异常&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;因此，我们认为业务功能异常是机器的内存问题导致的，需要对服务的内存做一次专项优化。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;步骤1  JVM优化&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;以下是默认的JVM参数：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-Xms4096M -Xmx4096M -Xmn1024M -XX:MetaspaceSize=&lt;span class=&quot;code-snippet__number&quot;&gt;256&lt;/span&gt;M -Djava.security.egd=file:&lt;span class=&quot;code-snippet__regexp&quot;&gt;/dev/&lt;/span&gt;./urandom -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=&lt;span class=&quot;code-snippet__regexp&quot;&gt;/data/&lt;/span&gt;{runuser}/logs/other&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如果不指定垃圾收集器，那么JDK 8默认采用的是Parallel Scavenge（新生代） +Parallel Old（老年代），这种组合在多核CPU上充分利用多线程并行的优势，提高垃圾回收的效率和吞吐量。但是，由于采用多线程并行方式，会造成一定的停顿时间，不适合对响应时间要求较高的应用程序。然而，core这类的服务特点是对象数量多，生命周期短。在系统特点上，吞吐量较低，要求时延低。因此，默认的JVM参数并不适合core服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据业务的特点和多次对照实验，选择了如下参数进行JVM优化（4核8G的机器）。该参数将young区设为原来的1.5倍，减少了进入老年代的对象数量。将垃圾回收器换成ParNew+CMS，可以减少YGC的次数，降低停顿时间。此外还开启了CMSScavengeBeforeRemark，在CMS的重新标记阶段进行一次YGC，以减少重新标记的时间。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;-Xms4096M -Xmx4096M -Xmn1536M -XX:MetaspaceSize=&lt;span class=&quot;code-snippet__number&quot;&gt;256&lt;/span&gt;M -XX:+UseConcMarkSweepGC -XX:+CMSScavengeBeforeRemark -Djava.security.egd=file:&lt;span class=&quot;code-snippet__regexp&quot;&gt;/dev/&lt;/span&gt;./urandom -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=&lt;span class=&quot;code-snippet__regexp&quot;&gt;/data/&lt;/span&gt;{runuser}/logs/other&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.275&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/4g5IMGibSxt5nibZianRN5pckGaRIKNvG942x1efThPHuPOiaE11HstGaXlyHy4mxOibAyh3WwWnxWz69wpfZazylMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图3 JVM优化前后的堆内存对比&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;优化后效果如图3，堆内存的使用明显降低，但是Dubbo超时仍然存在。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们推断，在业务高峰期，该节点出现了大对象晋升到了老年代，导致内存使用迅速上升，并且大对象没有被及时回收。那如何找到这个大对象及其产生的原因呢？为了降低问题排查期间业务的损失，提出了临时的故障转移策略，尽量降低异常数量。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;步骤2  故障转移策略&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在api服务调用core服务出现异常时，将出现异常的机器ip上报给监控平台。然后利用监控平台的统计与告警能力，配置相应的告警规则与回调函数。当异常触发告警，通过配置的回调函数将告警ip传递给api服务，此时api服务可以将core服务下的该ip对应的机器视为“故障”，进而通过自定义的故障转移策略（实现Dubbo的AbstractLoadBalance抽象类，并且配置在项目），自动将该ip从提供者集群中剔除，从而达到不去调用问题机器。图 4 是整个措施的流程。在该措施上线前，每当有机器内存告警时，将会人工重启该机器。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9898148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/4g5IMGibSxt5nibZianRN5pckGaRIKNvG94XXYicnlbh1UV4Hxq9BChpGCGaXeTCPg37j5yy6UKMP9bRfxvCK7SVLA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图4 故障转移策略&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;步骤3  大对象优化&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;大对象占用了较多的内存，导致内存空间无法被有效利用，甚至造成OOM（Out Of Memory）异常。在优化过程中，先是查看了异常期间的线程信息，然后对堆内存进行了分析，最终确定了大对象身份以及产生的接口。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;（1） Dump Stack 查看线程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从监控平台上Dump Stack文件，发现一定数量的如下线程调用。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;5612&lt;/span&gt;: (state = IN_JAVA)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; - org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encodeResponse(org.apache.dubbo.remoting.Channel, org.apache.dubbo.remoting.buffer.ChannelBuffer, org.apache.dubbo.remoting.exchange.Response) &lt;span class=&quot;code-snippet__variable&quot;&gt;@bci&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;, line=&lt;span class=&quot;code-snippet__number&quot;&gt;282&lt;/span&gt; (Compiled frame; &lt;span class=&quot;code-snippet__attribute&quot;&gt;information&lt;/span&gt; may be imprecise)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; - org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encode(org.apache.dubbo.remoting.Channel, org.apache.dubbo.remoting.buffer.ChannelBuffer, java.lang.Object) &lt;span class=&quot;code-snippet__variable&quot;&gt;@bci&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;34&lt;/span&gt;, line=&lt;span class=&quot;code-snippet__number&quot;&gt;73&lt;/span&gt; (Compiled frame)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; - org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(org.apache.dubbo.remoting.Channel, org.apache.dubbo.remoting.buffer.ChannelBuffer, java.lang.Object) &lt;span class=&quot;code-snippet__variable&quot;&gt;@bci&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;, line=&lt;span class=&quot;code-snippet__number&quot;&gt;40&lt;/span&gt; (Compiled frame)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; - org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter&lt;span class=&quot;code-snippet__variable&quot;&gt;$InternalEncoder&lt;/span&gt;.encode(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.buffer.ByteBuf) &lt;span class=&quot;code-snippet__variable&quot;&gt;@bci&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;51&lt;/span&gt;, line=&lt;span class=&quot;code-snippet__number&quot;&gt;69&lt;/span&gt; (Compiled frame)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; - io.netty.handler.codec.MessageToByteEncoder.write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) &lt;span class=&quot;code-snippet__variable&quot;&gt;@bci&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;33&lt;/span&gt;, line=&lt;span class=&quot;code-snippet__number&quot;&gt;107&lt;/span&gt; (Compiled frame)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; - io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(java.lang.Object, io.netty.channel.ChannelPromise) &lt;span class=&quot;code-snippet__variable&quot;&gt;@bci&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;, line=&lt;span class=&quot;code-snippet__number&quot;&gt;717&lt;/span&gt; (Compiled frame)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; - io.netty.channel.AbstractChannelHandlerContext.invokeWrite(java.lang.Object, io.netty.channel.ChannelPromise) &lt;span class=&quot;code-snippet__variable&quot;&gt;@bci&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;, line=&lt;span class=&quot;code-snippet__number&quot;&gt;709&lt;/span&gt; (Compiled frame)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;state = IN_JAVA 表示Java虚拟机正在执行Java程序。从线程调用信息可以看到，Dubbo正在调用Netty，将输出写入到缓冲区。此时的响应可能是一个大对象，因而在对响应进行编码、写缓冲区时，需要耗费较长的时间，导致抓取到的此类线程较多。另外耗时长，也即是大对象存活时间长，导致full gc 释放的内存越来越小，空闲的堆内存变小，这又会加剧full gc 次数。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这一系列的连锁反应与图2相吻合，那么接下来的任务就是找到这个大对象。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;（2）Dump Heap 查看内存&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对core服务的堆内存进行了多次查看，其中比较有代表性的一次快照的大对象列表如下，&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.46111111111111114&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/4g5IMGibSxt5nibZianRN5pckGaRIKNvG94VFDKP4s4GJicBR9gnS42wKw7a0ew8qiatbadicDcibWz5s3ETxDicUY6wgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;图5 core服务的堆内存快照&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;整个Netty的taskQueue有258MB。并且从图中绿色方框处可以发现，单个的Response竟达到了9M，红色方框处，显示了调用方的服务名以及URI。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;进一步排查，发现该接口会通过core服务查询大量信息，至此基本排查清楚了大对象的身份以及产生原因。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;（3）优化结果&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在对接口进行优化后，整个core服务也出现了非常明显的改进。YGC全天总次数降低了76.5%，高峰期累计耗时降低了75.5%。FGC三天才会发生一次，并且高峰期累计耗时降低了90.1%。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6601851851851852&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/4g5IMGibSxt5nibZianRN5pckGaRIKNvG94RaP25DrtaI9BbhmhJtnzrw8obryLpsUtGRZY1YVNvIElk0MbfbKSnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;图6 大对象优化后的core服务GC情况&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;尽管优化后，因内部异常导致获取核心业务失败的异常请求数显著减少，但是依然存在。为了找到最后这一点异常产生的原因，我们打算对core服务内存中的对象大小进行监控。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3435185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/4g5IMGibSxt5nibZianRN5pckGaRIKNvG94Y1eog2vWOg4pP1KWGE91ShJZRpmibicvUxNxyxXVyqELObu73KEhKIKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图7 系统内部异常导致核心业务失败的异常请求数&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;步骤4  无侵入式内存对象监控&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;Debug Dubbo 源码的过程中，发现在网络层，Dubbo通过encodeResponse方法对响应进行编码并写入缓冲区，通过checkPayload方法去检查响应的大小，当超过payload时，会抛出ExceedPayloadLimitException异常。在外层对异常进行了捕获，重置buffer位置，而且如果是ExceedPayloadLimitException异常，重新发送一个空响应，这里需要注意，&lt;strong&gt;空响应没有原始的响应结果信息&lt;/strong&gt;，源码如下。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;encodeResponse&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Channel channel, ChannelBuffer buffer, Response res)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        checkPayload(channel, len);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        buffer.writerIndex(savedWriteIndex);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Response r = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Response(res.getId(), res.getVersion());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        r.setStatus(Response.BAD_RESPONSE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (t &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; ExceedPayloadLimitException) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            r.setErrorMessage(t.getMessage());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            channel.send(r);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;checkPayload&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Channel channel, &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; size)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; payload = getPayload(channel);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; overPayload = isOverPayload(payload, size);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (overPayload) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ExceedPayloadLimitException e = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ExceedPayloadLimitException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Data length too large: &quot;&lt;/span&gt; + size + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;, max payload: &quot;&lt;/span&gt; + payload + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;, channel: &quot;&lt;/span&gt; + channel);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        logger.error(e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;受此启发，自定义了编解码类（实现org.apache.dubbo.remoting.Codec2接口，并且配置在项目），去监控超出阈值的对象，并打印请求的详细信息，方便排查问题。在具体实现中，如果特意去计算每个对象的大小，那么势必是对服务性能造成影响。经过分析，采取了和checkPayload一样的方式，根据编码前后buffer的writerIndex位置去判断有没有超过设定的阈值。代码如下。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MusicDubboCountCodec&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Codec2&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Cache&amp;lt;Long, String&amp;gt; EXCEED_PAYLOAD_LIMIT_CACHE = Caffeine.newBuilder()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .maximumSize(&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .expireAfterWrite(&lt;span class=&quot;code-snippet__number&quot;&gt;300&lt;/span&gt;, TimeUnit.SECONDS)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .softValues()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .build();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Channel channel, ChannelBuffer buffer, Object message)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; writeBefore = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; == buffer ? &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; : buffer.writerIndex();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dubboCountCodec.encode(channel, buffer, message);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        checkOverPayload(message);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; writeAfter = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; == buffer ? &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; : buffer.writerIndex();    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; length = writeAfter - writeBefore;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        warningLengthTooLong(length, message);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;checkOverPayload&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Object message)&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(!(message &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; Response)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Response response = (Response) message;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(Response.BAD_RESPONSE == response.getStatus() &amp;amp;&amp;amp; StrUtil.contains(response.getErrorMessage(), OVER_PAYLOAD_ERROR_MESSAGE)){          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            EXCEED_PAYLOAD_LIMIT_CACHE.put(response.getId(), response.getErrorMessage());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(Response.OK == response.getStatus() &amp;amp;&amp;amp;  EXCEED_PAYLOAD_LIMIT_CACHE.getIfPresent(response.getId()) != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;){      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            String responseMessage = getResponseMessage(response);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            log.warn(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dubbo序列化对象大小超过payload,errorMsg is {},response is {}&quot;&lt;/span&gt;, EXCEED_PAYLOAD_LIMIT_CACHE.getIfPresent(response.getId()),responseMessage);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在上文中提到，当捕获到超过payload的异常时，会重新生成空响应，导致失去了原始的响应结果，此时再去打印日志，是无法获取到调用方法和入参的，但是encodeResponse方法步骤4中，重新发送这个Response，给了我们机会去获取到想要的信息，因为重新发送意味着会再去走一遍自定义的编码类。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;假设有一个超出payload的请求，执行到自定编码类encode方法的步骤2（Dubbo源码中的编码方法），在这里会调用encodeResponse方法重置buffer，发送新的空响应。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;（1）当这个新的空响应再次进入自定义encode方法，执行 checkOverPayload方法的步骤3.1时，就会记录异常响应的id到本地缓存。由于在encodeResponse中buffer被重置，无法计算对象的大小，所以步骤4、5不会起到实际作用，就此结束新的发送过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）原先的发送过程回到步骤2 继续执行，到了步骤3.2 时，发现本地缓存的异常池中有当前的响应id，这时就可以打印调用信息了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;综上，对于大小在告警阈值和payload之间的对象，由于响应信息成功写入了buffer，可以直接进行大小判断，并且打印响应中的关键信息；对于超过payload的对象，在重新发送中记录异常响应id到本地，在原始发送过程中访问异常id池识别是否是异常响应，进行关键信息打印。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在监控措施上线后，通过日志很快速的发现了一部分产生大对象的接口，当前也正在根据接口特点做针对性优化。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在对服务JVM内存进行调优时，要充分利用日志、监控工具、堆栈信息等，分析与定位问题。尽量降低问题排查期间的业务损失，引入对象监控手段也不能影响现有业务。除此之外，还可以在定时任务、代码重构、缓存等方面进行优化。优化服务内存不仅仅是JVM调参，而是一个全方面的持续过程。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:68.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>