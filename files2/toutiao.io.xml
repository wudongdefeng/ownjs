<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e9e5cf1b3cef89e3768c589dbe75ff8d</guid>
<title>项目经理必备的 25 张管理分析卡</title>
<link>https://toutiao.io/k/9grr194</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content              autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;在做项目管理时，层出不穷的问题需要项目经理作出各种决策和分析，以便推动问题解决。&lt;/span&gt;&lt;span&gt;如果项目经理能够掌握并灵活使用以下这25个管理分析卡片，那么分析和解决问题的效率都会大大提高——&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2I5YGDZcaQ9mthAMGYYAXib9Lgd0h2KM7OcywricqRZ17FFORwf69hoqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;决策&lt;/span&gt;&lt;span&gt;树是在已知各种情况发生概率的基础上，通过构成决策树来求取净现值的期望值大于零的概率，评价项目风险，判断其可行性的决策分析方法，是直观运用概率分析的一种图解法。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2u9iaMcibsvR2bDVjWGb12mw2l43UUassh8uic2nNpyLz9XicDPoUtkd3IA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;鱼骨图，帮助发现问题根本原因的分析方法，问题或缺陷（即后果）标在“鱼头”处，在鱼骨上长出鱼刺，上面按出现机会多寡列出产生问题额可能原因，有助于说明各个原因是如何影响后果的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia26HdRRDroqaQKlQwt4zxmDGrkJHFAnzkg10DOp0JTBHGkGpNKFlkFEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;DCA&lt;/span&gt;&lt;span&gt;循环是美国质量管理专家休哈特博士首先提出的，由戴明采纳、宣传并获得普及，所以又叫作“戴明环”。全面质量管理的思想基础和方法依据就是PDCA循环。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2rZBCNEGDuIGkwhmYiaYYgAfqoL4umRRulqay51GsHHmGBJIgZ3NiaickQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GREP模型是进行组织内环境分析的有效工具，是分析企业竞争优势的内生战略分析法，即将企业的战略分为四个部分构成：治理结构、资源、企业家、产品或服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2yA08hZE9GN6WswictRiczZXEvas5viaCzUl6saMXeD6vCedNYrpXjlXwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;麦肯锡7S模型指出，企业在发展过程中必须全面的考虑各方面的情况，包括结构（structure）、制度（system）、风格（style）、员工（staff）、技能（skill）、战略（strategy）、共同的价值观（shared value）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2qiblA8icP4wiaYSb07RKdicU72ibF4j3ibl3e9RNWLN3OKFxRbp3WnFA4DAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行业的生命周期指行业从出现到完全退出社会经济活动所经历的时间。行业的生命周期曲线忽略了具体的产品型号、质量、规格等差异，仅从整个行业的角度考虑问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2AXyC7prIb3z4AgMs5PrrOdGIgIDeQwXsfJCLvLKyyUCPgd7Ts868MQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SWOT分析就是基于内外部竞争环境和竞争条件下的态势分析，通过这种方法，可以对研究对象所处的情境进行全面、系统、准确的研究，从而根据研究结果制定相应的发展战略、计划以及对策等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2prUc5YwrmFuyoicnOgMPdddGRjDptfPcaFwptRiaUd3uL7dU7ls9iafjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即&lt;/span&gt;&lt;span&gt;目标与关键成果法，是一套明确和跟踪目标极其完成情况的工作方法，旨在确保员工共同工作，并集中精力做出可衡量的贡献。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2YHfwc4GoJHbnnKyN6FZ9sbFGaXwfclzuclqVb5SCT2WDDicaNMIdS7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SCQA即情景（Situation）、冲突（Complication）、问题（Question）、答案（Answer），它能够引导你站在消费者的角度考虑问题，提升消费者的兴趣和接受意愿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2hWcyPicLP1UHIrDm0lT5TMSh2MyfXnXG9dIJqFkuiaibo388oEfUv7FvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;MECE”是对于一个重大的议题，能够做到不重叠、不遗漏的分类，而且能够借此有效把握问题的核心，最终有效解决问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2sQTNYUlGoJJUTK4AOKSouLTicshribOlPYAubWPCS9iaiaP7XYUTcPu0jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通用矩阵法可以根据事业单位在市场上的实力和所在时长的吸引力对这些事业单位进行评估，也可以表述一个公司的事业单位组合判断其强项和弱点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2M4kkYnMHdUVOUbj1oTghicklxCp0WRYTYNn0tLENxzxC0LTcgBclic9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;波士顿矩阵认为，一般决定产品结构的基本因素有两个：即市场引力与企业实力，其中最主要的&lt;/span&gt;&lt;span&gt;是&lt;/span&gt;&lt;span&gt;反映市场引力的综合指标——销售增长率，这是决定企业产品结构是否合理的外在因素。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2iaLeVZ13ZXvElg6R7uAEkpGiboM5YGpFsI7waiaflgGGEvU80aHgND7OA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;波特的五力模型由迈克尔·波特提出，他认为行业中存在决定竞争规模和程度的五种力量，这五种力量综合起来影响着产业吸引力和现有企业的竞争战略决策。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2hiaWx0Lg7dKlbaybW1r8aDgoyjR334ozCf2sEZtoGRlQZ1CtEO3rVSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一种在企业竞争力“资源观”的观照下对企业内部的静态属性和外部的动态属性做系统分析的工具，从而对企业目前的竞争力有全面的认识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2GHCL6sQ9VWVRqGoGAfXs34IcShldtLptLr2t7CugvgLzSThkM8FUPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种方法把企业内外价值增加的活动分为基本活动和支持性活动，实际上只有某些特定的活动才真正创造价值，这就是价值链上的“战略环节”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2Zf2A3fN3yYxA65iakCsBfy7k9voiakDAxUaIohkUMTAnyFOibpFIs7Xyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是对企业经营状况进行系统分析的一种有效方法，从经营收益性、安全性、流动性、生产性、成长性等五个方面分析企业的经营成果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia29iaqraTQ0gV6KYct6h0AD070V0Bf4QV630L9ZlFebwl6kwHFhDID4wQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2zVfq6lljb5A6w6vAMIzQHHickU64O3JuTCRhX6e8DAd0VIzWGWHfAFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;战略地位与行动评价矩阵主要分析企业外部环境及企业应该采用的战略组合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2Yeg19Eb7nJSl39ib4bw6MdyjvO4iat8G9J3ibH7sRfbFBFl2ZIElvichdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关键路径是指设计中从输入到输出经过的延时最长的逻辑路径，优化关键路径是一种提高工作速度的有效方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2I5byA6JE7k28eu2eSJmXczG8BJHbiaNdVuZIHklUXWBjYYp9ORPu4icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5W2H分析法又叫七问分析法，简单方便、易于使用，被广泛用于企业管理和技术活动，对于决策和执行性的活动措施也非常有帮助，更有助于弥补考虑问题的疏漏。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2Le61N3UH6viboREMhefSGDCd5ucbhiabNEE0KMEV6vdOjKH6wv9Y791Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直方图又称”质量分布图“，是一种统计报告图，一般用横轴表示数据类型，纵轴表示分布情况。通过直方图对所收集的貌似无序的数据进行处理，可以反映出产品质量的分布情况，判断和预测产品质量及不合格率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2aEqicI3qrK3eIYkHaibLWtVnLLDUBkQ4rWGtPIDpI4udyByibJbu3KBbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;RACI是一个相对直观的模型，用以明确组织变革过程中的各个角色及其相关责任，分配个每项工作的资源可以是个人或小组，项目经理也可根据项目需要，选择“领导”或“资源”等适用词汇。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2hLU2MWAgUdAIuwYAyY0DicN0hwD4U030TmvsBOqia9l11PF5F9UI833w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即目标管理原则，这是使管理者的工作由被动变主动的一个很好的手段，不但能让员工更明确高效的工作，还能保证绩效考核的公平、公正与公开。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2QzjkDXZMicSCD7kib2IlTU8icg78btiaCP5QRXojXApIVuXyRIxy8knVbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该理论&lt;/span&gt;&lt;span&gt;由&lt;/span&gt;&lt;span&gt;日本战略研究的领军人物大前研一提出，他强调成功的战略有三个关键因素，分别是公司自身、顾客和竞争者，在制定任何经营战略时，都必须考虑这三个因素。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.787037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsnf5hwK5sKqgM3FfiaNHicia2rLviaQR0y49jNqsjT6SiaLLlnoGt6V5pfUeh42c7KJXPI8Cz260pInhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;PEST分析是指对宏观环境的分析，P是政治（Politics）、E是经济（Economy）、S是社会（Society）、T是技术（Technology）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;◆◆◆&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上就是比较常用的25张种管理分析卡片，要想让这些方法发挥出最大的效果，关键在于项目经理能否灵活使用，我们建议大家可以收藏文章或把图片保存下来，方便随时查阅学习哦&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;-THE END-&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;38806&quot;&gt;&lt;section&gt;&lt;section data-bcless=&quot;darken&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;近期热文&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NTE3NTgyNA==&amp;amp;mid=2650943423&amp;amp;idx=1&amp;amp;sn=6f51525df240db7b83df8f4393f92d40&amp;amp;chksm=f157d9c0c62050d6768c202217aae2f50dfdf7d466b5b7641ff69d962ceab59523dd586385ac&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;能做项目经理的个个都是人才&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;能做项目经理的个个都是人才&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NTE3NTgyNA==&amp;amp;mid=2650943099&amp;amp;idx=1&amp;amp;sn=a96b8ce5065ea9037d105eb973862efa&amp;amp;chksm=f157d804c6205112227406612f1f79dfe2a6207db6796364e72fe6e56b8f69ee874aa0b576d4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;小心，别让敏捷，搞垮你的团队！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;小心，别让敏捷，搞垮你的团队！&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NTE3NTgyNA==&amp;amp;mid=2650943046&amp;amp;idx=1&amp;amp;sn=505e7946f10263e39a8bd4770cec55df&amp;amp;chksm=f157d839c620512faaeb329dd657d9c05802be5aa6416064b02cc396da93ced170f6fcdeacf2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;PM可收藏，华为内部【流程管理体系】详解&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;PM可收藏，华为内部【流程管理体系】详解&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NTE3NTgyNA==&amp;amp;mid=2650942725&amp;amp;idx=1&amp;amp;sn=f0c22c850b119832796c2a46282e280c&amp;amp;chksm=f157db7ac620526cf4663288863dc72f1197f6fed734147852d2708a94fc8c5e92e2a66d22a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;项目经理长点心吧，小心办公室里的任何人！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;项目经理长点心吧，小心办公室里的任何人！&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzI2NTE3NTgyNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/EKK4IJyFJIsNhx9CkDnx7PsAXGw6oHDUq1cpFKtAuEFWyWgON8W5BU7CHKibM5Y8VgDSOHaYSw8ibEC4UXJ7WCmA/0?wx_fmt=png&quot; data-nickname=&quot;PM圈子&quot; data-alias=&quot;pm1178&quot; data-signature=&quot;洞察150W项目经理的苦与乐&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1ae27bdd50b818791e6465a5b7a44fe5</guid>
<title>GPT-4 加持，GitHub Copilot X：AI 赋能的开发</title>
<link>https://toutiao.io/k/pt1unof</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-1g0fqss&quot; options=&quot;[object Object]&quot;&gt;&lt;p data-first-child=&quot;&quot;/&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//github.blog/2023-03-22-github-copilot-x-the-ai-powered-developer-experience/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-text=&quot;GitHub Copilot X: The AI-powered developer experience | The GitHub Blog&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;h2&gt;GitHub Copilot X&lt;/h2&gt;&lt;p data-pid=&quot;7je33TQF&quot;&gt;虽然 2021 年发布的 Codex API 已不再更新，作为产品的 GtiHub Copilot 还将继续进化，并利用 GPT-4 支持新特性。&lt;/p&gt;&lt;p data-pid=&quot;cKYlcYBy&quot;&gt;GitHub Copilot 正在尝试带来聊天和语音交互，支持拉动请求（Pull Request），回答关于文档的问题，并采用 OpenAI 的 GPT-4 以获得更个性化的开发者体验，即四项正在进行预览的特性：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;U79NCiKb&quot;&gt;&lt;b&gt;GitHub Copilot Chat&lt;/b&gt;：为编辑器带来了一个聊天界面，专注于开发人员的场景，并与 VS Code 和 Visual Studio 进行了原生整合。这远比建议代码的作用要大得多。GitHub Copilot Chat 不仅仅是一个聊天窗口。它能识别开发者输入的代码，显示的错误信息，并深入嵌入到 IDE 中。开发者可以得到深入的分析和解释，了解代码块要做什么，生成单元测试，甚至得到对错误的建议修复。&lt;/li&gt;&lt;li data-pid=&quot;71vpKQml&quot;&gt;&lt;b&gt;Copilot for Pull Requests&lt;/b&gt;：人工智能生成的拉动请求描述（descriptions for Pull Request）的技术预览。这项新功能由 OpenAI 的新 GPT-4 模型驱动，并通过组织管理员和个人仓库所有者可以安装的 GitHub 应用程序，在拉动请求描述中增加了对 AI 驱动的标签的支持。这些标签是由 GitHub Copilot 根据更改的代码自动填写的。然后，开发人员可以审查或修改建议的描述。&lt;/li&gt;&lt;li data-pid=&quot;0rQs-xfe&quot;&gt;&lt;b&gt;Copilot for Docs&lt;/b&gt;：使用聊天界面为用户提供人工智能生成的关于文档的问答，包括开发者关于他们正在使用的语言、框架和技术的问题。GitHub 从 React、Azure Docs 和 MDN的文档开始，因此可以与这些项目的开发者和用户一起快速学习和迭代。&lt;/li&gt;&lt;li data-pid=&quot;s9RT3Nr8&quot;&gt;&lt;b&gt;Copilot for the command line interface (CLI)&lt;/b&gt;：除了编辑器和 pull request 之外，终端是开发者花费时间最多的地方。但即使是最熟练的开发者也需要翻阅许多页面来记住许多命令的精确语法。GitHub Copilot CLI 可以组成命令和循环，并抛出晦涩的查找标志来满足你的查询。&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;h2&gt;GitHub Next&lt;/h2&gt;&lt;p data-pid=&quot;BalxUswz&quot;&gt;现在，这几项功能提供 waitlist 可加入。更多的 GitHub 技术预览还可以在以下网页找到。&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//githubnext.com/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-46501e97975fe3d9a191fb745511b112_180x120.jpg&quot; data-image-width=&quot;1200&quot; data-image-height=&quot;630&quot; data-text=&quot;GitHub Next&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b5142f232d114688d2b34d02b2fa8d4e</guid>
<title>当你对 redis 说你中意的女孩是 Mia</title>
<link>https://toutiao.io/k/6p23apk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h1&gt;作者：京东科技 周新智&lt;/h1&gt;

&lt;h1&gt;一、Redis&lt;/h1&gt;

&lt;p&gt;众所周知，Redis = Remote Dictionary Server，即远程字典服务。&lt;/p&gt;

&lt;p&gt;是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;

&lt;h1&gt;二、当你对 redis 说你中意的女孩是 Mia 时&lt;/h1&gt;

&lt;h2&gt;1、set myLove Mia&lt;/h2&gt;

&lt;p&gt;redis 会将 key：myLove value：Mia&lt;/p&gt;

&lt;p&gt;包装成一个 dictEntry 对象、一个 redisObject 对象，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-40YvDAsILGIzdBFtl.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;•&lt;code&gt;dictEntry&lt;/code&gt;：众所周知，Redis是Key-Value数据库，因此对每个键值对都会有一个dictEntry，里面存储了指向Key和Value的指针；next指向下一个dictEntry，与本Key-Value无关。&lt;/p&gt;

&lt;p&gt;•&lt;code&gt;Key&lt;/code&gt;：图中右上角可见，Key（&quot;myLove&quot;）并不是直接以字符串存储，而是存储在SDS结构中。&lt;/p&gt;

&lt;p&gt;•&lt;code&gt;redisObject&lt;/code&gt;：Value(&quot;Mia&quot;)既不是直接以字符串存储，也不是像Key一样直接存储在SDS中，而是存储在redisObject中。实际上，不论Value是5种类型的哪一种，都是通过redisObject来存储的；而redisObject中的type字段指明了Value对象的类型，ptr字段则指向对象所在的地址。不过可以看出，字符串对象虽然经过了redisObject的包装，但仍然需要通过SDS存储。&lt;/p&gt;

&lt;h3&gt;1.1、对 myLove 进行对象封装&lt;/h3&gt;

&lt;h4&gt;1.1.1、dictEntry&lt;/h4&gt;

&lt;p&gt;redis内部整体的存储结构是一个大的hashmap，内部是数组实现的hash，key冲突通过挂链表去实现，每个dictEntry为一个key/value对象，value为定义的redisObject。&lt;/p&gt;

&lt;p&gt;结构图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-42Rhu6GoQtKwvu9Qm.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;dictEntry是存储key-&amp;gt;value的地方，再让我们看一下dictEntry结构体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * 字典
 */
typedef struct dictEntry {
    // 键
    void *key;
    // 值
    union {
        // 指向具体redisObject
        void *val;
        // 
        uint64_t u64;
        int64_t s64;
    } v;
    // 指向下个哈希表节点，形成链表
    struct dictEntry *next;
} dictEntry;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.1.2、对象封装 redisObject&lt;/h4&gt;

&lt;p&gt;我们接着再往下看redisObject究竟是什么结构的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * Redis 对象
 */
typedef struct redisObject {
    // 类型 4bits
    unsigned type:4;
    // 编码方式 4bits
    unsigned encoding:4;
    // LRU 时间（相对于 server.lruclock） 24bits
    unsigned lru:22;
    // 引用计数 Redis里面的数据可以通过引用计数进行共享 32bits
    int refcount;
    // 指向对象的值 64-bit
    void *ptr;
} robj;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*ptr指向具体的数据结构的地址；type表示该对象的类型，即String,List,Hash,Set,Zset中的一个，但为了提高存储效率与程序执行效率，每种对象的底层数据结构实现都可能不止一种，encoding 表示对象底层所使用的编码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;redis对象底层的八种数据结构：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; REDIS_ENCODING_INT（long 类型的整数）
 REDIS_ENCODING_EMBSTR embstr （编码的简单动态字符串）
 REDIS_ENCODING_RAW （简单动态字符串）
 REDIS_ENCODING_HT （字典）
 REDIS_ENCODING_LINKEDLIST （双端链表）
 REDIS_ENCODING_ZIPLIST （压缩列表）
 REDIS_ENCODING_INTSET （整数集合）
 REDIS_ENCODING_SKIPLIST （跳跃表和字典）

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;查看 redisObject 详细信息 ：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 查看 key对应value的 redisObject 类型
type key
    type myLove

# 查看 key对应value的redisObject 详细信息
debug object key
     debug object myLove

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;value 为 string 、int 类型是 redisObject 中的 type、encoding 不同表现形式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Value 为 string 类型时：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-46dUTN11rPplovEaq6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Value 为 int类型时：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-46o20fZ866E5WQLn46N.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以上两种不同 value 类型，type 相同，encoding 不同&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;1.2、对 myLove 进行持久化&lt;/h3&gt;

&lt;h4&gt;1.2.1、rdb 文件写入&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-4779uwjNLXbqyWDHa.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;1.2.2、aof 缓存写入 文件保存&lt;/h4&gt;

&lt;p&gt;默认情况下 没有开启 AOF ( append only file)&lt;/p&gt;

&lt;p&gt;开启 AOF 持久化后，每执行一条会更改 redis 数据的命令，redis就会将写入、修改、删除命令写入到硬盘中的 AOF 文件（当然并不是立即写入文件，而是立即写入aof缓存中，再根据aof配置的数据持久化条件进行写入），这一过程显然会降低 redis 的性能，但大部分情况下这个影响是能够接受的，&lt;/p&gt;

&lt;p&gt;另外使用快的硬盘可以提高 AOF 的性能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配置 redis.conf&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 可以通过修改redis.conf配置文件中的appendonly参数开启 
    appendonly yes
# AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的。 dir ./
# 默认的文件名是appendonly.aof，可以通过appendfilename参数修改 appendfilename appendonly.aof

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;AOF文件中存储的是redis的命令 原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redis 将所有对数据库进行过写入的命令(及其参数)记录到 AOF 文件， 以此达到记录数据库状态的 目的， 为了方便起见， 我们称呼这种记录过程为同步。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;同步命令到 AOF 文件的整个过程可以分为三个阶段:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;命令传播:Redis 将执行完的命令、命令的参数、命令的参数个数等信息发送到 AOF 程序中。 缓存追 加:AOF 程序根据接收到的命令数据，将命令转换为网络通讯协议 RESP 的格式，然后将协议内容追加到服务器的 AOF 缓存中。 文件写入和保存: AOF 缓存中的内容被写入到 AOF 文件末尾，如果设定的 AOF 保存条件被满足的话， fsync 函数或者 fdatasync 函数会被调用，将写入的内容真正地保存到磁盘中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;命令传播:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当一个 Redis 客户端需要执行命令时， 它通过网络连接， 将协议文本发送给 Redis 服务器。服务器在 接到客户端的请求之后， 它会根据协议文本的内容， 选择适当的命令函数， 并将各个参数从字符串文 本转换为 Redis 字符串对象( StringObject )。每当命令函数成功执行之后， 命令参数都会被传播到 AOF 程序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缓存追加：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当命令被传播到 AOF 程序之后， 程序会根据命令以及命令的参数， 将命令从字符串对象转换回原来的 协议文本。协议文本生成之后， 它会被追加到 redis.h/redisServer 结构的 aof_buf 末尾。&lt;/p&gt;

&lt;p&gt;redisServer 结构维持着 Redis 服务器的状态， aof_buf 域则保存着所有等待写入到 AOF 文件的协 议文本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RESP 协议：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redis客户端使用RESP(Redis的序列化协议)协议与Redis的服务器端进行通信。 虽然该协议是专门为 Redis设计的，但是该协议也可以用于其他 客户端-服务器 (Client-Server)软件项目。&lt;/p&gt;

&lt;p&gt;可以通过特殊符号来区分出数据的类型：&lt;/p&gt;

&lt;p&gt;单行回复：以+号开头。&lt;/p&gt;

&lt;p&gt;错误回复：以-号开头。&lt;/p&gt;

&lt;p&gt;整数回复：以:号开头。&lt;/p&gt;

&lt;p&gt;批量回复：以$号开头。&lt;/p&gt;

&lt;p&gt;多条批量回复：以*号开头。&lt;/p&gt;

&lt;p&gt;1、间隔符号，在Linux下是\r\n，在Windows下是\n&lt;/p&gt;

&lt;p&gt;2、简单字符串 Simple Strings, 以 &quot;+&quot;加号 开头&lt;/p&gt;

&lt;p&gt;3、错误 Errors, 以&quot;-&quot;减号 开头&lt;/p&gt;

&lt;p&gt;4、整数型 Integer， 以 &quot;:&quot; 冒号开头&lt;/p&gt;

&lt;p&gt;5、大字符串类型 Bulk Strings, 以 &quot;$&quot;美元符号开头，长度限制512M 6、数组类型 Arrays，以 &quot;*&quot;星号开头 用SET命令来举例说明RESP协议的格式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实际发送的请求数据:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redis&amp;gt; SET myLove &quot;Mia&quot;
&quot;OK&quot;
*3\r\n$3\r\nSET\r\n$6\r\nmyLove\r\n$3\r\nMia\r\n
*3
$3
SET
$5
mykey
$5
Hello

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;实际收到的响应数据:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+OK\r\n

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;文件写入和保存：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每当服务器常规任务函数被执行、 或者事件处理器被执行时， aof.c/flushAppendOnlyFile 函数都会被 调用， 这个函数执行以下两个工作:&lt;/p&gt;

&lt;p&gt;WRITE:根据条件，将 aof_buf 中的缓存写入到 AOF 文件。 SAVE:根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-50Mi9TQLEsTx50lHIw.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2、给你的爱一个期限 expire myLove 999999999&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-51vuqnWp51K6MhZNNR.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;从图可知，在redis的数据库中，redisDb结构中的expires字典中保存了数据库中所有键的过期时间，所以叫过期字典。&lt;/p&gt;

&lt;p&gt;过期字典的key是一个指针，指向键空间的某个键对象（就是数据库键）&lt;/p&gt;

&lt;p&gt;过期字典的value是一个long类型的整数，这个整数保存了键所指向的数据库键的过期时间，一个毫秒精度的UNIX时间戳&lt;/p&gt;

&lt;p&gt;过期键判定&lt;/p&gt;

&lt;p&gt;通过过期字典，我们可以得到一个key是否过期：&lt;/p&gt;

&lt;p&gt;判断key是否存在于过期字典中&lt;/p&gt;

&lt;p&gt;通过过期字典拿到key的过期时间，判断当前UNIX时间戳是否大于key时间&lt;/p&gt;

&lt;p&gt;过期key如何删除&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;惰性删除策略&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;过期键的惰性删除策略由db.c/expireIfNeeded函数实现，所有读写数据库的Redis命令在执行之前都会调用expireIfNeeded函数对输入键进行检查：&lt;/p&gt;

&lt;p&gt;如果输入键已经过期，那么expireIfNeeded函数将输入键从数据库中删除。&lt;/p&gt;

&lt;p&gt;如果输入键未过期，那么expireIfNeeded函数不做动作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-527kNbKiTUTDxdwfn.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;expireIfNeeded函数就像一个过滤器，它可以在命令真正执行之前，过滤掉过期的输入键，从而避免命令接触到过期键。&lt;/p&gt;

&lt;p&gt;另外，因为每个被访问的键都可能因为过期而被expireIfNeeded函数删除，所以每个命令的实现函数都必须能同时处理键存在以及键不存在这两种情况：&lt;/p&gt;

&lt;p&gt;当键存在时，命令按照键存在的情况执行。&lt;/p&gt;

&lt;p&gt;当键不存在或者键因为过期而被expireIfNeeded函数删除时，命令按照键不存在的情况执行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://storage.jd.com/shendengbucket1/2022-07-08-17-536ujlMkjYZzaZIyd.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;定期删除策略的实现&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;过期键的定期删除策略由redis.c/activeExpireCycle函数实现，每当Redis的服务器周期性操作redis.c/serverCron函数执行时，activeExpireCycle函数就会被调用，它在规定的时间内，分多次遍历服务器中的各个数据库，从数据库的expires字典中随机检查一部分键的过期时间，并删除其中的过期键。&lt;/p&gt;

&lt;h2&gt;3、del myLove&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;不好意思，哥们的爱无法删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d3f9c133f84d8dcb4802f7ecf7742731</guid>
<title>时区处理与东八区的程序员们</title>
<link>https://toutiao.io/k/2nvc6me</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content              autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;在和前端同学联调的过程中，我们通常会遇到与时间有关的场景：为什么传过来的时间落库的时候总是1970年？为什么相同的时间戳在不同的区域里转换成的时间字符串不一样？为什么不同的转换方法换成的结果一会是GMT，一会是UTC？&lt;/p&gt;&lt;p&gt;时间，这个在开发中不起眼的一环，却又往往会让很多开发者在遇到时犹豫不决。&lt;/p&gt;&lt;p&gt;在本文开始之前，先抛出一个问题：在日常的业务场景中，什么场景使用北京时间？什么场景使用本地时间？&lt;/p&gt;&lt;h2&gt;GMT与UTC&lt;/h2&gt;&lt;p&gt;我们先来复习一下以前的地理知识：&lt;/p&gt;&lt;p&gt;我们知道，地球分为24 个时区，一个时区的范围是十五个经度，地球又分东西半球，东西半球各占十二个时区；每个时区相差一个小时，最多相差24小时，也就是一天。&lt;/p&gt;&lt;p&gt;凡向西走，每过一个时区，时间要慢一个小时，就要把表拨慢1小时（就是说你所在的位置是两点，向西一个时区就减去一个小时，也就是一点）；凡向东走，每过一个时区，时间要快一个小时，就要把表拨快1小时（比如1点拨到2点）。&lt;/p&gt;&lt;p&gt;而这一切的起点，就在英国伦敦，那里有一条世界上著名的线，叫&lt;strong&gt;&lt;span&gt;本初子午线&lt;/span&gt;&lt;/strong&gt;，是&lt;strong&gt;人类世界计算时间的起点(时区的划分)以及经度的起点&lt;/strong&gt;。而这条线的划定是由格林尼治天文台确定的，因此格林尼治天文台所在的地方叫零时区。零时区表示为GMT+00,零时区缩写叫z。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1skeHK2Gyby3e7IwTSYuydPAGcGY8N8FAee6faKncSyGwTRxu6vALGal6AuSsF11MgFibBx5Y8fRdIZUMG7DB4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1&quot; data-w=&quot;512&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;所以GMT，即Greenwich Mean Time，格林尼治标准时间(格林尼治所在地的标准时间)。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;以格林尼治天文台所在的时区为中心(GMT+00)，向东为正，向西为负；零时区比东时区晚，比西时区早。&lt;/p&gt;&lt;p&gt;北京所在的时区叫东八区，东八区表示形式是：GMT+08。0时区比东八区的时间晚8小时，比西五区的时间早5小时。美国华盛顿比北京慢13小时。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;UTC全称Universal Time Coordinated&lt;/strong&gt;，是国际无线电咨询委员会制定和推荐的，UTC相当于本初子午线(即经度0度)上的平均太阳时。它是经过平均太阳时(以格林威治标准时间GMT)、地轴运动修正后的新时标以及以「秒」为单位的国际原子时所综合精算而成的时间，计算过程相当严谨精密，因此若以「世界标准时间」的角度来说，UTC比GMT来得更加精准。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;所以，简单来说，UTC就是一个比GMT更加精确的时间表述。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;说完了人类世界的时间表示，我们来看看计算机世界的时间表述。&lt;/p&gt;&lt;h2&gt;认识二进制世界中的时间&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1skeHK2Gyby3e7IwTSYuydPAGcGY8N8FpFI4CS95X5icFMIfek1K46lTFicZTIjIDxmT6zbreicctSMvUGNHhldxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6175925925925926&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;这种表述方式被称为&lt;strong&gt;Unix时间(Unix Time)&lt;/strong&gt;，也叫做&lt;strong&gt;POSIX时间或&lt;/strong&gt;，是用来记录时间的流逝，定义为从UTC时间&lt;strong&gt;&lt;span&gt;1970年1月1日0时0分&lt;/span&gt;&lt;/strong&gt;开始流逝的秒数，不考虑闰秒。&lt;/p&gt;&lt;p&gt;上述图中，有一个很不起眼但很关键的一个点：&lt;strong&gt;t=0时刻&lt;/strong&gt;。这个时刻为&lt;strong&gt;&lt;span&gt;1970年1月1日0时0分&lt;/span&gt;&lt;/strong&gt;，被称为&lt;strong&gt;纪元时间(epoch time)&lt;/strong&gt;。从定义可以看到它只代表了从Unix纪元开始流逝的秒数，&lt;strong&gt;&lt;span&gt;所以你身处地球上何处，这个时间都是一样的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;有一点值得注意的是，Unix纪元是Unix或类Unix系统，一些C/C++，Java等编程语言使用的纪元。而其他的操作系统或者编程语言，使用的就是不一样的纪元起始日期了。&lt;/p&gt;&lt;p&gt;例如：Microsoft C/C++ 7.0 使用的是 1899年十二月31号&lt;/p&gt;&lt;h2&gt;时区转换&lt;/h2&gt;&lt;p&gt;既然地球上的不同时区所处的时间是不一样的，那么计算机在处理跨时区问题时就需要做时区的转换。在我们对时区问题抽象之前，我们可以先看看跨时区可能会出现什么异常？&lt;/p&gt;&lt;h3&gt;跨时区可能会出现什么异常？&lt;/h3&gt;&lt;h4&gt;问题1：跨时区引发的展示异常&lt;/h4&gt;&lt;p&gt;如果在日本(比北京时间快1小时)使用淘宝下单，看到的时间是日本时间还是北京时间？支付服务是按照北京时间还是日本时间执行？&lt;/p&gt;&lt;h4&gt;问题2：时间错乱引发的处理异常&lt;/h4&gt;&lt;p&gt;在旧金山（比北京时间慢16小时）的用户A计划在2023-01-01给北京的用户B预约一笔转账计划，但后端收到之后当做北京时间处理，于是在北京时间&quot;2023-01-01&quot;(对应旧金山时间 2022-12-31)进行了转账，于是用户B提前了1天2022-12-31就收到了转账。 &lt;/p&gt;&lt;h2&gt;对跨时区问题的抽象处理&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1skeHK2Gyby3e7IwTSYuydPAGcGY8N8F5hoG6Rl7luIV4K8NDtbs2phJfQgNIZ0b3R6qmjMuePmFtrMH7k6lqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;1.0898148148148148&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;在上述场景中，有几个不同的时间，接下来我们一一阐述&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;用户的时间（客户端）与服务器的时间（展示与计算）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务器与服务器的时间（跨时区计算）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务器与数据库的时间（计算与存储）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;span&gt;Client &amp;lt;=&amp;gt; Web Server&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;Web Server =&amp;gt; Client&lt;/span&gt;&lt;/h4&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;若二者时区相同(已将server服务器设置为当地时区)，那么可以在server端将时间格式化为字符串字面量直接传输到client端展示。其中，若server端时间为其他时区的字符串字面量时，需转为当前时区；若为Date对象，直接format，Java默认取当前系统时区；若为毫秒long，转为Date再格式化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;若时区不同，server端将时间转换成毫秒数long或者字面量+时区，传输到client，由client所处的时区进行转换处理，最终展示。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;span&gt;Client =&amp;gt; Web Server&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;如用户通过前端时间控件选择的时间，需要转化为毫秒数long或者字面量+时区，传输到server端。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;Server-n &amp;lt;=&amp;gt;Server-k&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;取决于时间的序列化和反序列方式，如dubbo所使用的hession序列化方式会将Date对象序列化为毫秒数、json将时间序列化为字符串(需要指定时区)&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;Server-n &amp;lt;=&amp;gt; DB&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1skeHK2Gyby3e7IwTSYuydPAGcGY8N8Ff5exKXibxFQQ7TxJCiakzhcFibYXMD5twGpOg4natgJ7k8Qn5O34TVnpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.3592592592592593&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库时间最常用的字段类型有bigint、datetime和timestamp&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;bigint用于&lt;/span&gt;&lt;span&gt;自己维护一个时间戳&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;8字节的长度让其使用几乎无上限&lt;/span&gt;&lt;span&gt;，因此使用bigint不存在时区问题，可以使用；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;datetime字段以字符串格式存储，对应应用层String，无时区属性，在&lt;/span&gt;&lt;strong&gt;&lt;span&gt;多时区场景&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;下传输与转换不建议使用；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;timestamp字段以时间戳格式存储，对应应用层Date类型，与系统时区无关，但需要注意的是，由于4字节的长度导致存储的时间上限为&lt;/span&gt;&lt;span&gt;2038-01-19 03:14:07，需做好对应的处理。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;有关2038-01-19 03:14:07这个著名的时间点，详情可参考我之前写过的一篇&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2ODAyNTgyMQ==&amp;amp;mid=2247484245&amp;amp;idx=1&amp;amp;sn=722227215c32fdf65013c55434171833&amp;amp;scene=21#wechat_redirect&quot; data-href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2ODAyNTgyMQ==&amp;amp;mid=2247484245&amp;amp;idx=1&amp;amp;sn=722227215c32fdf65013c55434171833&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《聊一聊2038年问题》&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;时间序列化和反序列化&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;上文提到使用bigint不存在时区问题，因此这里我们来重点讨论下datetime和timestamp在时间存储与读取时所遇到的序列化与反序列化的情况&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DateTime类型字段，MySQL存储时不存时区信息，并且怎么存就怎么取，不做任何处理和转换。所以时区timeZone1的server1插入MySQL一条记录后，时区timeZone2的server2读取出来的时间就不对了。这里只能将所有的server的时区设置为一样的，或者在数据库表中添加一个字段存储时区信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;TimeStamp类型字段，这个比较特殊。当server创建connection时，可以在数据库URL中手动指定时区信息，即不同时区的server连接MySQL时，指定connection时区使用自己所在时区。当MySQL处理不同的connection时，就有了时间字符串和发出请求的时区，然后转换为UTC时间进行存储。从MySQL中读取时也是基于connection的时区设置进行转换。但是如果不指定connection时区，那么MySQL就将存储的UTC时间，按MySQL服务器所在时区进行转换和展示或者传输，此时若MySQL服务器和server的时区不一致，就会出现时区问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;由上可知，产生时区问题的根本原因在于&lt;/span&gt;&lt;strong&gt;&lt;span&gt;不同时区的机器对时间进行序列化和反序列化时，Date对象或者毫秒数long与字符串之间的转换，丢失了时区信息&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，最终导致问题。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;跨时区场景应用调研&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;了解了跨时区场景的处理后，我们来看看业内产品是如何处理跨时区业务的。&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;行业&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;业内App&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;通讯类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;微信、QQ&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微信统一了app内所有的时间：使用&lt;/span&gt;&lt;span&gt;设备本地时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;QQ消息、QQ空间、收藏中的时间是&lt;/span&gt;&lt;span&gt;设备本地时间，&lt;/span&gt;&lt;span&gt;消息中的登录时间、交易记录的时间是&lt;/span&gt;&lt;span&gt;北京时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;电商类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;抖音、淘宝、拼多多、亚马逊&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;会话消息、退款详情、退款、交易通知、评论等服务使用&lt;/span&gt;&lt;span&gt;设备本地时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;订单、交易详情使用北京时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;金融类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;招银、中银、工银、paypal&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;银行统一使用&lt;span&gt;北京时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;paypal 支持&lt;/span&gt; 手动 &lt;span&gt;设置时区&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;分析&lt;/h3&gt;&lt;h4&gt;1. 非金融类的app不太关心跨时区场景？&lt;/h4&gt;&lt;p&gt;常规业务对于时间点信息的感知偏弱，更倾向于&lt;strong&gt;感知距离“现在”的时间差&lt;/strong&gt;（消息、评论等），不同的服务有各自对应的最佳“时区”搭配。&lt;/p&gt;&lt;h4&gt;2. 银行类App的时间是统一使用“北京时间”？&lt;/h4&gt;&lt;p&gt;国内银行类服务、金融类服务（基金、股票）有强制使用北京时间的诉求。&lt;/p&gt;&lt;h4&gt;3. 国际化业务有时区设置能力？&lt;/h4&gt;&lt;p&gt;可选，国际化业务中一般在时间信息之后回携带上时区信息（如：时区偏移量、城市信息）, 移动端服务 常见的是跟随设备的时区，部分服务商会在业务中提供出选择时区的能力。&lt;/p&gt;&lt;h4&gt;4. 衡量使用北京时间和设备本地时间的标准是什么？&lt;/h4&gt;&lt;p&gt;业内暂无具体的标准，合规、安全也没有详细要求，最佳的是站在用户体验角度case by case去分析。&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;&lt;span&gt;国际化背景下多时区问题日益严重，多时区引发的问题一般不易发现，发现时已经灾难性问题，应对及改造成本也较高。架构层面尽量规避时区问题，在系统设计阶段需要考虑并遵循相应的原则。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;DB层面:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新增表或字段时需要对时间类型慎重选择，非跨时区场景建议选择datetime，跨时区场景可以选择timestamp或bigint。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于VARCHAR类型时间字符串都必须使用iso标准时间格式。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新建库的DB时区需为UTC时区，不能使用其他时区（如LA时区）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;应用层面:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fb32caecace2cbcefcb9af82187c7d28</guid>
<title>为啥我的代码库那么大？聊聊 Git 使用坏习惯</title>
<link>https://toutiao.io/k/9c0wmix</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content              autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naIff4DEKMpQB8W0zJFKKmTEVciaeSfgHqNfRlEc8V60PvIsBGzPMcyZDo3cycLLmngeGRnicSWcp90g/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;阿里妹导读&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;本文作者用幽默又真实的文字总结了开发者日常工作中遇到的那些事儿。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;说点真实的&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;众所周知啊🤔，&lt;/span&gt;&lt;span&gt;很多公司的度量系统&lt;/span&gt;&lt;span&gt;可以展示你提交了多少次commit，以及每一次提交包含多少行代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;搞得部分兄弟一天可劲 add commit push。他那一个变更发上线，你打开Git Log，好家伙那一大串都是他。加加减减缝缝补补，最后一共改了&lt;strong&gt;20行代码，硬是刷出了200行的功德。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一串Git commit message如下：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;AoneBuild Merge feautre/777_平台赋能牛逼新特性 to master&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Fix老板CR中建议&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;fix again&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;fix2&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;fix&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;save&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;update&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;new feature&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;典！典中典！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;仿佛能看到他信心满满，直接发预发！一刷新， 哦豁，白屏！ &lt;br/&gt;哦忘了传这个了，fix，push，部署，玩手机，抬头一刷新，哦豁，白屏！&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.35&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;560&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIff4DEKMpQB8W0zJFKKmTEWwRic35wX86j3dUfichicibw7MwekHmebibCGOa0HiaOLoWTnRNygTb6IHuw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;好活！&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下次 OC 再搞脱口秀我提个节目！随机找几个这种上去对着这种 git log 现场即兴模仿表演。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;他们欢快而自信的时候，以及受痛苦和绝望所折磨的时候，生活中的痛苦和压迫会像血汗一样，一行行地全写在了他们的Git Log里。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你们好不好奇， 一个代码库几百个文件，为啥能用一两个G？小小一个系统，下个代码都十几分钟？&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;部署和CI场景可以 depth=1 &lt;/span&gt;浅&lt;span&gt;克隆加速&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;完全没有意义的Git 提交历史，极速膨胀的代码库大小，混乱的分支关系。正在压死你的代码库和项目！&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每一个程序员，在遇到一个可爱而热心的代码仓看门大爷前，都会随意的对待自己的commit，因为大家都这么做。没见过怎么best practice，所以就doesn&#x27;t matter。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;求求你们了！好好写你的Git commit message！squash你的 fixfixfix！删删你已经没用的分支！重构拆掉哪些超大文件和几万行的类！&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;让Git Log能做到写清楚你到底改了啥！而不是你的草纸！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;阿里很多资深Coder都是野生哆啦A梦，技能树包括但不限于：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;ol ne-level=&quot;1&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;手里维护的代码库，托前人的福，一堆方法 JsonObject 出入参，他能如特工，手持密码本相互通信。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;系统日志print全是不带id的sout，也能靠口袋里的见都没见过的神奇道具和监控线条里波纹感应定位故障源头。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一个代码文件3万行，硬是一眼扫找出在哪儿再加个if else能5分钟hotfix一下线上Bug。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&quot;线上bug！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很急，来不及加单测了，帮忙过一下！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对代码系统机魂, 了如指掌，深谙取悦机魂之道。知道一些外人看来十分玄妙的独特逻辑。掌握很多，“&lt;strong&gt;又不是不能用，只是你不会用，要这么这么就能用”&lt;/strong&gt;的高级黑盒功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;虽然兄弟们这么用Git “&lt;strong&gt;又不是不能用&lt;/strong&gt;”，但是要我说 “&lt;strong&gt;那是你不会用&lt;/strong&gt;”，“&lt;strong&gt;要这么这么用&lt;/strong&gt;”&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;到这里，聪明的小朋友就要问了。为啥几百个文件，为啥能用一两个G呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;Git的结构，图文实例解说&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;众所周知，Git 主要数据结构是一颗树，在你的.git文件夹里，结构是这样的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.06851851851851852&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIff4DEKMpQB8W0zJFKKmTEd8vKjcgwf7sKFaMv1KZYNiaTOrapczdRibaCCYQF0OQpnc6PHmflzHWA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;.git文件内部结构&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其中的 refs中保存有分支的信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5662650602409639&quot; data-type=&quot;png&quot; data-w=&quot;332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIff4DEKMpQB8W0zJFKKmTERhibNHnSEhULPPHicx9o3ibBs3rqYlnbiaox5aaFkB2kZTQBcKPXolEtmA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;refs文件内部结构&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其中的  &lt;/span&gt;&lt;span&gt;heads，本地分支，remotes，远程分支（用git fetch更新）&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt; tags 不可变的版本指针，&lt;/span&gt;&lt;span&gt;他们都是指向一个commit的指针。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5116279069767442&quot; data-type=&quot;png&quot; data-w=&quot;602&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIff4DEKMpQB8W0zJFKKmTEnvZlsib8tjEZdqAmJ1S3Z16DoyibdUTmFjP1SGfVD7akHMbl6BA3Xhrw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;master的内容物&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如 这里， master，就是一个commit id。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;你可能注意到了，分支似乎不是一个分支一个文件的。而是按/分割，当成文件夹存储的。 &lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如feature是不是个分支？其实不是，假设 我新建一个名为 feature/newaCTO的分支，会在feature文件夹里建一个newaCTO, 而不是直接新建一个feature/newaCTO。&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;小zips， linux文件系统中，文件与文件夹是不能重名的。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;所以， 一旦谁建了一个叫做feature的分支。那么，在第一个小聪明删掉他之前。就没人能拉出任何feature/*的分支了。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;分支是指向commit的指针，那让我们更近一步， commit是啥呢？&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.20967741935483872&quot; data-type=&quot;png&quot; data-w=&quot;992&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIff4DEKMpQB8W0zJFKKmTERpZmgTRvk06HnnEBNF9rjSxv7f1QK0BUCEGiaO1072AjzqibuL3VviaiaQ/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;master节点的详情&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是一个merge 节点。和普通的commit节点不同，merge节点有两个parent。&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;除此之外，有author和committer， author是作者，committer是提交人。在本地开发中，这两者基本上是一样的。注意，这里使用的，是gitConfig中的name 和 email。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;这里parent指向的是另一个commit， 典型的树状数据结构。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么Tree中有什么呢。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6748582230623819&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIff4DEKMpQB8W0zJFKKmTEd5d4QrHAcumKdvIOpWzicJa7ibeXbZR8AgzKjA3icziaeJfL6RwtqMSTGw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;tree的结构&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7597765363128491&quot; data-type=&quot;png&quot; data-w=&quot;1074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIff4DEKMpQB8W0zJFKKmTEZZMeO5GxSZeSZLRCTezic4gFjGuNkXz5icfUfpWmcejs9qicCKkojO8Ug/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;tree的详情&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看到展示了一个列表，&lt;strong&gt;与GIt Log中展示不同， Tree里其实包含了完整的文件树&lt;/strong&gt;。树的末端，指向一个文件的oid。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;列表中四个字段分别是：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、mode：&lt;strong&gt; 权限&lt;/strong&gt;（chmod加的东西）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、type：  &lt;strong&gt;类型&lt;/strong&gt;，&lt;/span&gt;&lt;span&gt;tree说明是文件夹，blob则是文件&lt;/span&gt;&lt;span&gt;，大部分情况下就是代码，也可能是图片或其他文件。&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;游戏团队的代码库中就会包含很多美术素材图片。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是，Git不是文件存储系统，大文件建议使用Git LFS技术，上传OSS，Git仅管理文件链接。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;3、revision（oid）：每当你提交commit时，你在这个commit中改动的文件，git会把文件的二进制数据加个信息头，然后算个hash，从而产生一个新的oid。然后这个commit会指向他。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;所以，每当你commit，就算提交一行的改动。就会存整个文件！（把代码文件，把类拆小点吧！不小心摸一下触摸板，代码就不知道去哪儿找了！）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;然后你在每一改个两行，就来个commit，存储膨胀能不快么！&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;就不谈没维护好 gitIgonre，胡乱git add .把编译文件，摸鱼刷的leetcode代码或者其他奇奇怪怪的东西提交到Git中的情况了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;你可能会问，我这的文件已经都删掉了，为啥.git还有这么大？你们是不是有Bug？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为Git会保存你历史的所有版本！&lt;strong&gt;除非没有一个任何一个commit指向这个blob&lt;/strong&gt;，才会成为游离节点，在Git Gc的时候被处理掉。&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;当然Git也没那么呆，是可以存增量的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;你在Git pc的时候会执行repack，repack会压缩一部分到增量，不过一般没人这么做，所以一般都是存了完整的离散文件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;git gc是个好课题，存储未来可能可以智能化的全自动gc，但是现在还不行。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;因此！&lt;/span&gt;&lt;span&gt;没事删删分支！&lt;/span&gt;&lt;span&gt;不小心提上来的大东西，得把对应的commit squash掉！&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;本地也可以允许git gc清理掉游离节点释放空间。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;我们并不是说要squash到一个变更一个commit，或者一个feature分支就一个commit。&lt;/span&gt;&lt;span&gt;就像游戏存档一样。&lt;/span&gt;&lt;span&gt;你可以在关中频繁存档，但是一大关打完了，你可以存一个然后把关中的存档都删了。&lt;/span&gt;&lt;strong&gt; 只留关键节点&lt;/strong&gt;&lt;span&gt;，这样万一你后悔选了这条命运线，可以&lt;/span&gt;&lt;span&gt;读&lt;/span&gt;&lt;span&gt;档重来。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这也是为什么那些大库需要严格执行主干开发的原因。要是我们公司几万研发都用一个大库，还都是用Git记日记的憨批， 我觉得我们会被迫在存储技术上卷死OSS。坏了，顺手把多版本云盘做成主营业务了。以后新人来了先发一块移动硬盘好了， 微服务那么多系统，下代码不得先下个半个月？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;一是&lt;strong&gt;git log和commit message是很重要的信息来源，要保持整洁，用的正确，这个比发布文档还清晰。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;二是代码存储膨胀问题是很现实的， 随着系统发展，代码库一个G你还能下下，再大点咋办呢。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;虽然我们存代码不收费，说到这儿dataworks的兄弟们可能有同感， 不要钱就使劲造，狠角色拿git当oss用的都有几个。&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;主要影响的，还是可见的未来，不治理的话，clone代码越来越慢。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Best practice：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、Code Owner要建立 &lt;strong&gt;代码库统一的commit messgae 格式规范&lt;/strong&gt;，例如 Feature(commit): write an article to introduce git&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、打完Boss，单测通过，squash掉你之前上厕所或者测试时候的commit！化零为整但也不要矫枉过正！团队应该根据自己业务情况探索&lt;strong&gt;合适commit的大小和规范。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、&lt;strong&gt;重构掉“巨石类”！&lt;/strong&gt;他们早就不够内聚了！把能拆掉功能拆出来吧！我先替管存代码的那个亘古和其他用这个类的开发先感谢你！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、&lt;strong&gt;大文件用Git LFS！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5、及时&lt;strong&gt;维护GitIgonre！&lt;/strong&gt;误提交的文件一定要清理掉！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6、用心维护主干分支的Git Log！让改动清晰可见！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;7、删掉没用的分支！Later Equals Never！当机立断舍离！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;8、&lt;strong&gt;Readme要持续更新！&lt;/strong&gt;怎么启动，格式规范都可以写在readme里！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Bad Practice: &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、&lt;strong&gt;不要建 feature，release这两个分支&lt;/strong&gt;，虽然git没有保留关键字，但是后人发现为啥建不出来分支的时候肯定会问候你的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、&lt;strong&gt;不要多分支并行开发的时候merge 来 merge去， git会脏合并&lt;/strong&gt;&lt;strong&gt;！&lt;/strong&gt; 保持提交历史干净简单！业务太复杂不行咱就上主干开发！&lt;/span&gt;&lt;span&gt;&lt;strong&gt;不要每次代码合并不符合预期就跑去找管代码的同学说Git丢代码，这种侦探服务的难度挺大的，在我建议按次收费！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>