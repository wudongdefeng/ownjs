<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>206c429057321e6b733ec07c77a00ddb</guid>
<title>Go 语言开发的超强企业级爬虫管理平台</title>
<link>https://toutiao.io/k/skczdmd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Crawlab&lt;/code&gt; 是强大的网络爬虫管理平台（WCMP），它能够运行多种编程语言（包括 Python、Go、Node.js、Java、C#）或爬虫框架（包括 Scrapy、Colly、Selenium、Puppeteer）开发的网络爬虫。它能够用来运行、管理和监控网络爬虫，特别是对可溯性、可扩展性以及稳定性要求较高的生产环境。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5736175882744837&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5tqrztXFpumelibPDr7RicqajBGiarOuM9iceOHJETTS1GjPbicN7ib671iaEic0asz8qnzNwtkY6YYj1TpibpK6DibzyribQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3002&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab 项目自 2019 年 3 月开始一直在不断迭代，并且经历了多次大的更新。它最初是用来解决调度和运行大量爬虫时出现的管理问题。随着大量的优化和新功能加入，Crawlab 越来越受到开发者社区的欢迎，尤其是网路爬虫工程师。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab 非常适合以下用户使用：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;网路爬虫工程师：通过集成爬虫程序到 Crawlab，您可以聚焦于爬虫的核心解析逻辑，从而避免浪费过多时间在开发通用模块上，例如任务队列、存储、日志、消息通知等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;运维工程师：Crawlab 对于运维工程师来说最大的好处是部署便利（对于爬虫程序和 Crawlab 本身）。Crawlab 支持 Docker 或 Kubernetes 一键安装。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据分析师：数据分析师如果能写代码（例如 Python），则可以开发爬虫程序（例如 Scrapy）然后上传到 Crawlab，然后就可以把所有脏活累活交给 Crawlab，它能够自动帮您抓取数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他：准确的说，任何人都能够享受 Crawlab 自动化带来的便利。虽然 Crawlab 尤其擅长执行网络爬虫任务，但它不仅限于此，它能够被用来运行其他类型的任务，例如数据处理和自动化。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;核心功能&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.884375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5tqrztXFpumelibPDr7RicqajBGiarOuM9ichnc0VzzJDbrRdz0sKRlWdqsvBXlbql0kicLIW1ePSLRvt94swmXsN7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;架构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Crawlab 的整体架构如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7453488372093023&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5tqrztXFpumelibPDr7RicqajBGiarOuM9iciaeCqia8ADO6DBZibmSriaNviaOdWhVNw6P4BJiceoibyXpFfOVTsX2aNCNoQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1720&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为分布式系统，Crawlab 由几个模块组成，其中包括主节点、工作节点、数据库、文件系统以及前端。每个模块（目前除了节点）都具有可扩展性，因此整个分布式系统能够被灵活扩展以支持高性能需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，爬虫抓取任务被分配到工作节点集群，然后工作节点集群可以根据资源需求的变化来调整节点数量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主节点&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点是 Crawlab 分布式系统中的中心部分，主要负责管理工作节点、派发爬虫任务、以及接受发送信息给工作节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点由很多自模块组成，相比于工作节点更为复杂。您可以参考下图查看主节点的子模块。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1383108935128519&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5tqrztXFpumelibPDr7RicqajBGiarOuM9ic8GPXMfkKjrLaUyjGB6YmWy38Rcg6gZneBUyvxrhVeP2O5TlUrV4jhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1634&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;工作节点&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工作节点的主要负责任务执行，它从主节点接收爬虫任务并执行目标网站抓取爬虫程序。因此，您可以将工作节点看作执行器。它们并不会处理 API 请求、任务派发、以及其他主节点上的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;您可以查看下图工作节点子模块。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13953488372093023&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5tqrztXFpumelibPDr7RicqajBGiarOuM9ic5rXJnpxa0h8q6IJDa7BxvkOoibuaOaBEdicMwZznyCTcFRBrMdkfD9fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1634&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;节点通信&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点通过高性能 RPC 框架 &lt;code&gt;gRPC&lt;/code&gt; 与工作节点进行通信。下图展示了 Crawlab 中节点通信的原理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5276200309757356&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5tqrztXFpumelibPDr7RicqajBGiarOuM9icIEhD1hxhfTSuH9WibeXWQaLvScJOEqau785p54SUgx3ut6cTwaDBHAg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1937&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;快速使用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Docker 是安装部署 Crawlab 最便捷的方式。Docker 部署有多种模式，不过其主流程是相似的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保证你已经安装好 Docker，并能够拉取 Crawlab 和 MongoDB 的镜像。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker pull crawlabteam/crawlab&lt;br/&gt;docker pull mongo&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果还没安装 Docker Compose，您可以执行以下命令。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;pip install docker-compose&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后创建配置文件并命名为 &lt;code&gt;docker-compose.yml&lt;/code&gt;，内容如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;3.3&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;services:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;master:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;crawlabteam/crawlab&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;container_name:&lt;/span&gt; &lt;span&gt;crawlab_master&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;environment:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_NODE_MASTER:&lt;/span&gt; &lt;span&gt;&quot;Y&quot;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;CRAWLAB_MONGO_HOST:&lt;/span&gt; &lt;span&gt;&quot;mongo&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;&quot;8080:8080&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;depends_on:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;mongo&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;mongo:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;mongo:4.2&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行以下命令启动 Crawlab 以及 MongoDB 即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker-compose up -d&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在就可以打开浏览器并导航到 &lt;code&gt;http://localhost:8080&lt;/code&gt; 并开始使用 Crawlab 了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5714285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5tqrztXFpumelibPDr7RicqajBGiarOuM9iczy9pnxGUaAscphbjrcb1TXBuWciavbBR1U9tTBv06icf9Aug8LYNwEng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3024&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Crawlab 中，&lt;strong&gt;爬虫&lt;/strong&gt;是网络爬虫程序的基本单位。您可以将其看作一个爬虫软件项目，它由代码文件组成，例如 Scrapy 项目。&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1668308782866&quot; data-category_id_list=&quot;50|47|28|55|56|39|8|1|64|66|35|29|5|31|6|63|59|51|7|57|46|41|24|37|42|58|61|62|48|65|36|60|21|43|16|2|17&quot; data-id=&quot;1668308782866&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户在 Crawlab 操作爬虫的典型流程如下所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16068052930056712&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5tqrztXFpumelibPDr7RicqajBGiarOuM9icTJaj3wToXcZlia3nokzoyDiaCWYG0FxkbD62IQ6PCqbtmlicSoPdFHwKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要创建爬虫也是非常简单的，导航到 &lt;code&gt;Spiders&lt;/code&gt; 页面，再点左上方的 &lt;code&gt;New Spider&lt;/code&gt; 按钮，输入 &lt;code&gt;Name&lt;/code&gt;、&lt;code&gt;Command&lt;/code&gt; 等相关信息，点击 &lt;code&gt;Confirm&lt;/code&gt; 即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.572&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5tqrztXFpumelibPDr7RicqajBGiarOuM9icIyiags91OPzPichmZO7icjAYLLdlV0S0dibLpOtNZpBMaKDFv8r6EFG0sQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3000&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后上传爬虫有几种方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;上传目录&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;导航到爬虫详情页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击 文件 标签&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击导航条上的 上传文件 按钮&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择 目录&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击 点击选择目录上传&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择爬虫文件所在目录&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击 确认&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;上传文件&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;导航到爬虫详情页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击 文件 标签&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击导航条上的 上传文件 按钮&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择 文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拖拽爬虫文件到放置区，或直接点击放置区并选择爬虫文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击 确认&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;上传文件 (拖拽)&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;导航到爬虫详情页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击 文件 标签&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拖拽爬虫文件或目录到左侧导航栏的目录里&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5714285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5tqrztXFpumelibPDr7RicqajBGiarOuM9icsFqH3ibBFWOSxWt1kXQIYDAfwRTuF90YKuEFrW2natIhXpQSxPEXOrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3024&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后可以根据以下步骤来运行爬虫&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果您在爬虫详情页，点击导航条上名为 运行 的播放按钮&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果您在 爬虫列表 页面，点击右侧名为 运行 的播放按钮&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择合适的爬虫运行设置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击 确认&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是爬虫运行设置的解释。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;执行命令: 将被实际运行的 cmd/bash/shell 基础命令&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;执行参数: 被传入 执行命令 的参数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模式: 运行模式，默认为 随机节点.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;优先级: 任务优先级，默认为 5&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5617743376004763&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5tqrztXFpumelibPDr7RicqajBGiarOuM9ic6J7jk1tHVRzibNOeTPbw58gxGXia1OL582iajk6LvZejEickMkaQYghZwA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3359&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Git 仓库：https://github.com/crawlab-team/crawlab&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MTgzNTQwNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/5tqrztXFpulnjUO595yPz4ia90X3ejHwUszAk04ff0hsfuQl0D3RPFNiagEQbV9oib8OVvepsibXPVEddGPz4DyPbA/0?wx_fmt=png&quot; data-nickname=&quot;Github爱好者&quot; data-alias=&quot;gitfan&quot; data-signature=&quot;我们是一群 Github 爱好者，专注分享有价值、有趣的开源项目和学习资料，包括 Python、Golang、Java、Rust、AI、前端、运维、数据分析、大数据、云计算、Kubernetes、Service Mesh 等领域资源。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;▲ 点击上方卡片关注Github爱好者，获取前沿开源作品&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>698da3cc1377cee2fdf2ce1c7236ac47</guid>
<title>Raft 算法实现原理详解（图文全解析）</title>
<link>https://toutiao.io/k/qlow8gy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mid=&quot;&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;关注&lt;/span&gt;&lt;span&gt;△&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;mikechen的互联网架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;△&lt;/span&gt;&lt;span&gt;，一起精进架构技术&lt;/span&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.400352733686067&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZmpxrDVcAsnBvaSq9WP9pn4hIB38fSu8VJ3UG3LwlGDtVp8ibQf2dXPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;分布式系统架构会涉及到分布式数据的一致性，如果要解决分布式数据一致性，就会涉及到比较重要的Raft，今天重点详解Raft算法以及底层实现原理@mikechen&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;Raft算法简介&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;Raft算法是Paxos算法的工程实现，主要特点就是通过较为简单的算法实现分布式系统的数据一致性和高可用。&lt;/p&gt;&lt;p&gt;Raft 算法是解决分布式系统一致性问题的，与 Paxos 实现的功能相同，相对来说更容易实现和理解。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;为什么需要Raft?&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;Raft 算法是解决分布式系统一致性问题的，比如：大家熟悉的很多中间件Etcd、Consul、Zookeeper、Tikv等，都会涉及到分布式场景的数据一致性问题。&lt;/p&gt;&lt;p&gt;共识算法是实现这类组件的关键算法，共识算法是协调多个节点达成共识的算法，这是构建高可用系统的基石。&lt;/p&gt;&lt;p&gt;共识算法有很多种，比如：paxos、raft、zab等，paxos以复杂和难以理解著称，通常来说raft是更容易理解的算法，也更容易在工程实践中采用。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h2&gt;&lt;span/&gt;Raft算法角色&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在Raft算法中，一个集群里面的所有节点有以下三种状态：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5716911764705882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZ2qpOErU4OLYPNia56jP47EjGzIRuX6LRVBUunahbQBT6P3H5zrwbfGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;544&quot; title=&quot;Raft算法实现原理详解(图文全解析)-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.跟随者(follower)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;类似选民，完全被动的角色，这样的服务器等待被通知投票。&lt;/p&gt;&lt;p data-track=&quot;9&quot;&gt;&lt;strong&gt;2.候选者(candidate)&lt;/strong&gt;&lt;/p&gt;&lt;p data-track=&quot;10&quot;&gt;候选者就是在选举过程中提名自己的实体，一旦选举成功，则成为领导者。&lt;/p&gt;&lt;p data-track=&quot;6&quot;&gt;&lt;strong&gt;3.领导者(leader)&lt;/strong&gt;&lt;/p&gt;&lt;p data-track=&quot;7&quot;&gt;领导者的作用：处理客户端交互，日志复制等动作，Raft 要求系统在任何一个时刻最多只有一个 Leader，正常工作期间只有 Leader 和 Follower。&lt;/p&gt;&lt;p data-track=&quot;7&quot;&gt;每一次开始一次新的选举时，称为一个“任期”，每个任期都有一个对应的整数与之关联，称为“任期号”，任期号用单词“Term”表示，这个值是一个严格递增的整数值。&lt;/p&gt;&lt;p data-track=&quot;7&quot;&gt;Raft 算法角色状态转换，如下图所示：&lt;/p&gt;&lt;p data-track=&quot;7&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5150631681243926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZibibnY1I4Nka28wQ7HMs07iaDsPdHpdXvL52icpC7Rs6KdOmSfq3DfAFicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot; title=&quot;Raft算法实现原理详解(图文全解析)-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span/&gt;Raft算法实现原理&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;实现 Raft 算法两个最重要的事是：一个是leader选举(选主)，一个是日志复制，下面我重点详解。&lt;/p&gt;&lt;h3&gt;&lt;span/&gt;leader选举&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;Raft通过心跳机制来触发leader选举，当一个服务器启动时，默认位于followers状态，并且一直持续知道它一直接受到leader的RPC请求。&lt;/p&gt;&lt;p&gt;leader会周期性发送心跳给所有的followers，如果follower一段时间内没有接受到心跳，那么就认为当前没有leader应该开始leader selection。&lt;/p&gt;&lt;p data-track=&quot;17&quot;&gt;一个最小的 Raft集群需要三个参与者，这样才可能投出多数票，如下图所示：&lt;/p&gt;&lt;p data-track=&quot;17&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7511627906976744&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZnMfnlibz29LGMDm5nf5ibdshx923uH8t5kpl77otvReHL3UWgHicdrNug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot; title=&quot;Raft算法实现原理详解(图文全解析)-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;初始状态下 ABC三个节点开始选举Leader，Leader选举过程中有三种可能的情形发生。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一种：&lt;/strong&gt;A节点要投自己一票，并把提议拉票请求发给B和C，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9862637362637363&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZGUzMeP1SBQaWU0JXmjvkS3iauVUCJNAiaicBE8LNvujRNdSicCjZeric8nA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;364&quot; title=&quot;Raft算法实现原理详解(图文全解析)-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;B和C接受了A的提议，也投票给A，最终A成为Leader。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二种：&lt;/strong&gt;A节点投了自己一票，B节点也投了自己一票，C节点支持A节点的提议，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8738317757009346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZXX4dMpO2iaC9iaiaOy0ENHot43gMDicWA6WtuznNIryBbhqm9Nydy2DnJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;428&quot; title=&quot;Raft算法实现原理详解(图文全解析)-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;第二种少数服从多数，最终A成为Leader。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三种：&lt;/strong&gt;A节点、B节点、C节点都各自投了自己一票，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8322295805739515&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZTqibia2T9MuP6yP7jeH9YaHBZAxyOibU7m8ZeZsKibqAoLoLz80qBlWlUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;453&quot; title=&quot;Raft算法实现原理详解(图文全解析)-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;这样就没有节点获得多数票，第三种情况本轮投票无效，出现了平票（Split Votes），因为没有任何一方获得多数票，所以要发起新的一轮投票。&lt;/p&gt;&lt;p data-track=&quot;106&quot;&gt;Raft协议为了不让选举机制反复出现平票，定义了一个&lt;strong&gt;随机超时机制（randomized election timeouts），&lt;/strong&gt;一旦发生平票，平票的节点会各自再来一次随机timeout倒数，然后重新拉票，先发起拉票的节点就可以优先获得了多数节点的投票。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;h3&gt;&lt;span/&gt;日志复制&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;在 Raft 算法中需要实现分布式一致性的数据被称作日志， Raft 算法中的数据提交记录，会按照时间顺序进行追加，Raft 也是严格按照时间顺序并已一定的格式写入日志文件中。&lt;/p&gt;&lt;p&gt;下面这张图就描述了Raft集群中日志的组成结构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6930983847283406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZ3sUblfwqgQC8RhuW10Lv3D76CRMXmO9esOJaWs9TsAUQsMlDBRibrpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1362&quot; title=&quot;Raft算法实现原理详解(图文全解析)-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;每一个小方框就是entry，每个日志项包含一条命令、任期信息、日志项在日志中的位置信息(索引值 LogIndex)。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;指令：由客户端请求发送的执行指令，有点绕口，我觉得理解成客户端需要存储的日志数据即可。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;索引值：日志项在日志中的位置，需要注意索引值是一个连续并且单调递增的整数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;任期编号：创建这条日志项的领导者的任期编号。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Raft 的日志复制过程，大致如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3841870824053452&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZDficUicyiaicwCw2Pxq08UTK4ic9d4ibia3NicYuChRPFEkcpu3GXdQKCj5Blw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot; title=&quot;Raft算法实现原理详解(图文全解析)-mikechen的互联网架构&quot;/&gt;&lt;/p&gt;&lt;p&gt;1.领导者接收到客户端发来的请求，创建一个新的日志项，并将其追加到本地日志中；&lt;/p&gt;&lt;p&gt;2.接着领导者通过追加条目 RPC 请求，将新的日志项复制到跟随者的本地日志中；&lt;/p&gt;&lt;p&gt;3.当领导者收到大多数跟随者的成功响应之后，则将这条日志项应用到状态机中，可以理解成该条日志写成功了；&lt;/p&gt;&lt;p&gt;4.最后领导者返回日志写成功的消息响应客户端。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上！&lt;span/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;关注「mikechen的互联网架构」公众号，回复【&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;】，即可获取《mikechen的互联网架构●原创技术合集》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span/&gt;&lt;span/&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4109375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibfV79yhUw5DxwAFXWEHHzNZXpH9HicPqWFSYDibQrhuW4N9iccCj2YvA8Ficaic667WfVeFZkDfbtrEXcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NTg1NTQ2NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/222fVT9YtibcRtTrsC5JiaSPhUnLowkBUeHiaTWNqaEibV9Y7wwjhaCxLMz0Nu66RniaLicz1op9MSAdeAEt9CNXuacQ/0?wx_fmt=png&quot; data-nickname=&quot;mikechen的互联网架构&quot; data-alias=&quot;mikechenjiagou&quot; data-signature=&quot;十余年BAT架构经验倾囊相授!&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>32cbd855b192fff01c504d4d12acf1d6</guid>
<title>深入浅出学习透析 Nginx 服务器的基本原理和配置指南（初级实践篇 ）</title>
<link>https://toutiao.io/k/bl8b11a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-atom-one-dark&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h2&gt;&lt;a id=&quot;_Nginx_0&quot;/&gt;什么是 Nginx?&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Nginx (Engine X)是一个轻量级的Web服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器、高性能的HTTP服务器，它以高稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名&lt;/strong&gt;。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_4&quot;/&gt;什么是反向代理？&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;反向代理&lt;/strong&gt;（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器，在做HTTP反向代理和负载均衡时，特意要注意开启HTTP长连接的支持。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/f5b8776f30a56a4144686a27374d96d6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;Web_10&quot;/&gt;Web服务器&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Apache应该为大家所熟知，而Nginx就是类似Apache的提供静态网页的Web服务器，相比于Apache的多进程多线程的并发模型，而Nginx是基于事件的异步IO的并发模型，性能更好，而且Nginx是一个轻量级的服务器&lt;/strong&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;针对于Nginx的介绍我们就不过多赘述了，现在开始针对于Nginx的配置进行相关的介绍说明。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;a id=&quot;Nginx_16&quot;/&gt;Nginx原理简介&lt;/h2&gt; 
&lt;p&gt;Nginx有一个主进程（Master）和几个工作进程（Worker），采用了基于事件模型和依赖于操作系统的机制来有效地在工作进程之间分配请求。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;主进程（Master）目的是读取和评估配置，并维护工作进程。&lt;/li&gt;&lt;li&gt;工作进程（Worker）对请求进行处理，工作进程的数量可在配置文件中定义，并且可以针对给定的配置进行修改，或者自动调整到可用 CPU 内核的数量 worker_processes。&lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;Nginx_23&quot;/&gt;Nginx模块化机制&lt;/h3&gt; 
&lt;p&gt;Nginx是模块化的系统，整个系统是分成一个个模块的，每个模块负责不同的功能。在上面的configure指令中带了很多参数，就是在这里编译之前可以加入某些模块或去掉某些模块的。我们会把要用的模块再源码编译的时候就编译进入到Nginx了，那要怎么用这些模块呢？那就得通过配置文件来实现。接下来我们就开始使用入门配置实践指南阶段，进行学习。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;_27&quot;/&gt;入门配置说明指南&lt;/h2&gt; 
&lt;p&gt;配置文件决定了Nginx及其模块的工作方式。默认情况下，配置文件名为 nginx.conf，默认安装目录为 /usr/local/nginx/conf，/etc/nginx 或 /usr/local/etc/nginx 中，整个配置文件都是由指令来控制的。nginx也有自己内置的指令，比如events, http, server, 和 location等，下面会提到的。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;Nginx_31&quot;/&gt;Nginx文件配置说明&lt;/h3&gt; 
&lt;p&gt;首先，我们先不考虑复杂的配置，仅仅是完成一个http反向代理，Nginx.conf配置文件如下：&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注：conf/nginx.conf 是 nginx 的默认配置文件，你也可以使用 nginx -c 指定你的配置文件。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a id=&quot;Nginx_37&quot;/&gt;Nginx文件书写规则&lt;/h4&gt; 
&lt;p&gt;Nginx是由配置文件中指定的指令控制模块组成。指令可分为简单指令和块指令。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_41&quot;/&gt;简单指令&lt;/h5&gt; 
&lt;p&gt;一个简单的指令是由空格分隔的名称和参数组成，并以分号 ; 结尾。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_45&quot;/&gt;块指令&lt;/h5&gt; 
&lt;p&gt;块指令具有与简单指令相同的结构，但不是以分号结尾，而是以大括号{}包围的一组附加指令结尾。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_49&quot;/&gt;指令上下文&lt;/h5&gt; 
&lt;p&gt;如果块指令的大括号内部可以有其它指令，则称这个块指令为上下文（例如：events，http，server 和 location）。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;_53&quot;/&gt;主上下文&lt;/h5&gt; 
&lt;p&gt;配置文件中被放置在任何上下文之外的指令都被认为是主上下文 main。events 和 http 指令在主 main 上下文中，server 在 http 中，location 又在 server 中。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;_57&quot;/&gt;注释&lt;/h6&gt; 
&lt;p&gt;井号 # 之后的行的内容被视为注释。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;_61&quot;/&gt;入门配置实战案例&lt;/h2&gt; 
&lt;h3&gt;&lt;a id=&quot;_63&quot;/&gt;配置文件大致格式结构&lt;/h3&gt; 
&lt;p&gt;在这个文件中，在这个文件中，主要由三个部分组成：events，http、mail。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;events {
}
http {
}
mail {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;和块之间还可以嵌套的。例如http下面可以放server。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;http {
 server {
 }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;html_85&quot;/&gt;实现转图片和html的映射路由&lt;/h3&gt; 
&lt;h4&gt;&lt;a id=&quot;_87&quot;/&gt;需求介绍&lt;/h4&gt; 
&lt;p&gt;首先根据请求，将提供来自不同的本地目录的文件： /data/htmls（可能包含 HTML 文件）和 /data/images（包含图片）。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_91&quot;/&gt;配置实现&lt;/h4&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;创建 /data/htmls目录并且将包含index.html文件放入。之后，创建 /data/images目录然后放一些图片进去。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;打开这个nginx.conf这个配置文件，我们首先通过http块指令嵌入一个块指令server。&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;http {
    server {
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;包含几个由监听listen端口和服务器域名server names区分的server块指令。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;当Nginx决定由哪个server来处理请求，它会根据 server 块中定义的 location 指令的参数来检验请求头中指定的URI。&lt;/p&gt; 
&lt;p&gt;添加如下 location 块指令到 server 块指令中：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;location / {
    root /data/htmls;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;a id=&quot;location_116&quot;/&gt;location块指令&lt;/h5&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;对于匹配的请求，URI 将被添加到根指令 root 中指定的路径，即 /data/htmls，以形成本地文件系统上所请求文件的路径。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;如果有几个匹配上的 location 块指令，Nginx将选择具有最长前缀的 location 块。上面的位置块提供最短的前缀，长度为 1，因此只有当所有其它 location 块不能匹配时，才会使用该块。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;接下来，添加第二个 location 指令快：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;location /images/ {
    root /data;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;以 /images/ 为开头的请求将会被匹配上（虽然 location / 也能匹配上此请求，但是它的前缀更短）&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;&lt;a id=&quot;server_134&quot;/&gt;最后的server块指令&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;server {
    location / {
        root /data/htmls;
    }
    location /images/ {
        root /data;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;结论：监听标准 80 端口并且可以在本地机器上通过 http://localhost/ 地址来访问的有效配置。响应以 /images/ 开头的URI请求，服务器将从 /data/images 目录发送文件，由于使用了标准 80 端口，所以没有指定 listen 指令&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;&lt;a id=&quot;_148&quot;/&gt;案例结论介绍说明&lt;/h5&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;例如，响应http://localhost/images/example.png 请求，nginx 将发送 /data/images/example.png 文件。如果此文件不存在，nginx 将发送一个404错误响应。不以 / images/ 开头的 URI 的请求将映射到 /data/htmls 目录。例如，响应 http://localhost/some/example.html 请求，nginx 将发送 /data/www/some/example.html 文件&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;要让新配置立刻生效，如果nginx尚未启动可以启动它，否则通过执行以下命令将重新加载配置信号发送到 nginx 的主进程：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;nginx -s reload
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;如果运行的效果没有在预期之中，您可以尝试从 /usr/local/nginx/logs 或 /var/log/ nginx 中的 access.log 和 error.log 日志文件中查找原因。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;h3&gt;&lt;a id=&quot;_160&quot;/&gt;案例实践配置简单的代理服务器&lt;/h3&gt; 
&lt;h4&gt;&lt;a id=&quot;_162&quot;/&gt;需求案例&lt;/h4&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Nginx的一个常见用途是作为一个代理服务器，作用是接收请求并转发给被代理的服务器，从中取得响应，并将其发送回客户端，我们会将图片请求提供的文件来自本地目录，并将所有其它请求发送给代理的服务器。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;首先，通过向 nginx 的配置文件添加一个 server 块来定义代理服务器，其中包含以下内容：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;server {
    listen 8080;
    root /data/up1;
    location / {
    }
}
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;p&gt;创建此目录并将 index.html 文件放入其中。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意，root 指令位于 server 上下文中。当选择用于处理请求的location块自身不包含root指令时，将使用此 root 指令&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在之前的服务器配置基础上进行修改，使其成为代理服务器配置。在第一个 location 块中，使用参数指定的代理服务器的协议，域名和端口（ http://localhost:8080）放置在proxy_pass 指令处：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;server {
    location / {
        proxy_pass http://localhost:8080;
    }
    location /images/ {
        root /data;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt;&lt;li&gt;proxy_pass：设置对应的下游服务请求url根目录地址。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;修改使用了/images/前缀将请求映射到/data/images目录下的文件的第二个location块，使其与图片文件扩展名的请求相匹配。修改后的 location 块如下所示：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;location ~ \.(gif|jpg|png)$ {
    root /data/images;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;该参数是一个正则表达式，匹配所有以.gif，.jpg 或 .png 结尾的 URI。正则表达式之前应该是 ~。相应的请求将映射到 /data/images 目录。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;当Nginx选择一个location块来提供请求时，它首先检查指定前缀的 location 指令，记住具有最长前缀的 location，然后检查正则表达式。如果与正则表达式匹配，nginx 会选择此 location，否则选择更早之前记住的那一个&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;&lt;a id=&quot;_211&quot;/&gt;代理服务器的最终配置如下：&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;server {
    location / {
        proxy_pass http://localhost:8080/;
    }
    location ~ \.(gif|jpg|png)$ {
        root /data/images;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;此 server 将过滤以 .gif，.jpg 或 .png 结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加 URI），并将所有其它请求传递到上面配置的代理服务器。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;Host_227&quot;/&gt;案例配置-基于Host名称的虚拟服务器&lt;/h3&gt; 
&lt;p&gt;Nginx首先要决定哪个服务器应该处理请求。让我们从一个简单的配置开始，三个虚拟服务器都监听在端口*:80:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;server {
    listen      80;
    server_name example.org www.example.org;
    ...
}
server {
    listen      80;
    server_name example.net www.example.net;
    ...
}
server {
    listen      80;
    server_name example.com www.example.com;
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在这个配置中，Nginx仅仅检验请求header中的”Host”域来决定请求应该路由到哪个服务器。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果它的值不能匹配任何服务器，或者请求完全没有包含这个header域，那么nginx将把这个请求路由到这个端口的默认服务器。在上面的配置中，默认服务器是第一个 - 这是nginx标准的默认行为。也可以通过listen指令的default_server属性来显式的设置默认服务器，例如下面配置&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;server {
    listen      80 default_server;
    server_name example.net www.example.net;
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;default_server 参数从版本0.8.21开始可用，在更早的版本中要使用default参数&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a id=&quot;_264&quot;/&gt;防止使用未定义的服务器名称来处理请求&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果容许请求没有”Host” header 域，放弃这些请求的服务器可以定义为：&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;server {
    listen      80;
    server_name &quot;&quot;;
    return      444;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;服务器名称被设置为空字符串，这样将匹配没有”Host”header域的请求， 并返回一个特殊的nginx的非标准码404，然后关闭连接。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;IP_279&quot;/&gt;基于名称和基于IP混合的虚拟服务器&lt;/h3&gt; 
&lt;p&gt;让我们看一下更复杂的配置，有一些虚拟服务器监听在不同的地址：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;server {
    listen      192.168.1.1:80;
    server_name example.org www.example.org;
    ...
}
server {
    listen      192.168.1.1:80;
    server_name example.net www.example.net;
    ...
}
server {
    listen      192.168.1.2:80;
    server_name example.com www.example.com;
    ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在这个配置中，nginx首先通过server块的listen指令检验请求的IP地址和端口。然后在通过server块的server_name入口检验请求的”Host”header域。如果服务器名称没有找到，请求将被默认服务器处理。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;例如，在端口192.168.1.1:80接收到的去www.example.com的请求将被端口192.168.1.1:80的默认服务器处理。&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;默认服务器是监听端口的属性，并且不同的端口可以定义不同的默认服务器：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;server {
    listen      192.168.1.1:80;
    server_name example.org www.example.org;
    ...
}
server {
    listen      192.168.1.1:80 default_server;
    server_name example.net www.example.net;
    ...
}
server {
    listen      192.168.1.2:80 default_server;
    server_name example.com www.example.com;
    ...
}
&lt;/code&gt;&lt;/pre&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>12394aba3ac9131a9f4ea770b6162f33</guid>
<title>人生架构</title>
<link>https://toutiao.io/k/3ha5rj8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;点击↑上方↑蓝色“&lt;strong&gt;编了个程&lt;/strong&gt;”关注我~&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22957198443579765&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qpibArhCOoxABuNLfB901uIoTzt4Y8f7GRG4C2GdWf9yCQuiaY5KoTEXg65libu2FPX4bRMBC1fK6T7VSMmV8iaGnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;257&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;这是Yasin的第 &lt;strong&gt;77&lt;/strong&gt; 篇原创文章&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qpibArhCOoxAeWIsicCy5k36z0I0DXCUqDe6WXAdPY506b0NSUUnY0RZmXU9ztNMhu7eCP5e267xASr5ustwhpBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;54&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间我写了一篇关于如何画技术图的文章。里面有些图是在网上找的，今天想自己再画一些图来补充。其中架构图我认为是非常重要的，因为它具有更&lt;strong&gt;「全局的视野」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建筑行业和软件行业都会有“架构师”这种角色。架构师主要负责的是梳理整体的脉络，各个系统的组成关系，以及做好未来的规划。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构这件事情，需要对事情的本质有全面清晰的认知，以及对未来有合理的规划。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如果把架构放到“人生”这个命题上，会是怎样的呢？这篇文章尝试给出笔者的一份答案。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;整体架构&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我认为如果人生要有一张架构图的话，应该分三层。最底层是核心的思维，包含了你对自己和世界的认知。中间是核心动作，包含了你在一生中需要做的事情。最上层是表现，包括你的职业、身份、经验、别人对你的评价等等。最终我画出来了这样一张图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5552147239263804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qpibArhCOoxCmqfhxjc89T4gl1CFAodBXib640pE1Ufb2tic3l4QhDicBf2ibK1pezicb1nVEQqHkN6BtLsTYDZ9Nh7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1956&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，我觉得最重要的还是底层思维，只有底层思维清晰了，才能指导自己应该做什么，如何做。尤其是自我认知，要学会肯定自己和接纳自己。在这一层，可能每个人有每个人的答案，但它绝对是值得花时间和精力去探索的，希望每个人最终都会找到一份属于自己的答案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在核心动作这一层，我把它分为了两部分，一部分是通过持续成长迭代自己的个人能力，另一部分是参与世界的构建当中去，发挥自己的价值，获取应得的报酬，组建属于自己的独特的社会关系，在这个过程中应该抓住机会，也要不断认识更优秀的人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最右边是一些比较好的工具或者理论，可以帮助我们培养底层思维，也能让我们在各种各样的核心动作中不断成长，扩大自己的优势，起到一种赋能的作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上层表现是你当前在社会中表露出来的属性，也可能是别人对你的看法，这些东西我认为不是那么重要，它们可能随时会被改变。比如你可以换职业，你也可以改变别人对你的印象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以在整张图中，重要性是从下到上依次递减的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;时间规划&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间规划表述的是在什么阶段应该做什么事。我粗略地把人的一生分为了下面六个阶段。每个阶段再不同的维度应该做的事情如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5456570155902004&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qpibArhCOoxCmqfhxjc89T4gl1CFAodBXrdvMoo33EAnxoh8GPqVk1zZKVIY0sBYp2a2Ua4byN8GmPJqGMicBDeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1796&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从安身立命这个维度，到毕业以前其实主要是身体在生长，财富更多还是来源于父母的馈赠。大多数人在毕业前几年能养活自己就可以了，在后面的黄金十年厚积薄发或者抓住机会，完成财富积累，如果足够幸运，能够积累到一些财富，在后面可以保守一点，守住这份财富就可以了，这样退休后就可以享受生活了~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从终身学习这个角度，毕业前应该去认识世界，学习知识。在毕业后需要在自己的专业领域不断沉淀，有了一定的沉淀后，可以发挥自己的专业影响力，甚至回馈这个专业，做出自己的贡献。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;习惯和规则放到一块了，因为习惯其实是个人的规则，图里面的规则指的是社会规则。在毕业以前，应该进行习惯的养成和纠正，这里主要需要靠父母和老师。在毕业以后，需要了解和遵守社会的规则，甚至在后面尝试去利用规则，在自己的能力范围内改变或制定规则（这种估计只有极少数人有这个能力）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在社会关系层面，小时候感受爱，主要来源于父母。然后在整个人生中会不断认识新的人，有些可能只是一面之交，有些可能会成为朋友。在自己成家立业或者有了能力之后，会给与爱。&lt;strong&gt;「人可以从给与别人爱中得到精神上的快乐」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从认知层面来讲，婴儿阶段基本上是没有形成自己独立认知的。在上学阶段会慢慢形成自我的个性和三观。在毕业进入社会后，少部分人会重新思考自己和世界，迭代自我认知和三观，最终形成属于自己的比较稳定和圆满的底层思维。在退休阶段，也许会再回顾自己的底层思维形成过程，甚至著书立传，或者言谈身教传授这宝贵的经验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最下面的“感受&amp;amp;体验”或许是笔者自己认为的人生观。它代表了人生是一个感受和体验的过程。也许会有很多很多的经历，也许平平淡淡，也许是开心的，也许是难过的，但它们都是一个人的经历，它们同样宝贵。正是这些经历，塑造了独一无二的人生。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文通过对人生的三层架构和时间规划，梳理了自己对人生的理解。可能&lt;strong&gt;「不一定适合所有人」&lt;/strong&gt;，但这个梳理和思考的过程是值得大家去尝试的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自己最近几年花了很多的时间去迭代自己的底层思维，包括现在仍然在学习和迭代。因为我认为它是非常重要的，是人生的基石。如果根基不稳，上层建筑也就很容易倒塌。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顺便聊两句自己的人生观。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「人生在于感受和体验」&lt;/strong&gt;是我最近才转变的人生观。之前我认为人生在于追寻快乐和幸福，但发现人不总是快乐和幸福的，会有大量的平淡，会有少量的不幸、焦虑。如果我的人生观里只有追寻快乐和幸福，那面对平淡和不幸的时候，就会感到不安，无所适从。如果我理解的人生在于感受和体验，那这些平淡和不幸也是我生命中的一部分，我应该去观察它，接纳它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家如果有其它的观点，欢迎找我交流~&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.618421052631579&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qpibArhCOoxBU74pBVDBJTWoWnu22XWQZVZDR3SzcmgcQJecs9cujQ3fENYpC03atTzwKCs3xeic5zLqndA6E3gA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;76&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;关于作者&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;我是Yasin，&lt;span&gt;一个爱写博客的技术人&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;微信公众号：编了个程(blgcheng)&lt;/p&gt;&lt;p&gt;个人网站：https://yasinshaw.com&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;欢迎&lt;/span&gt;&lt;span&gt;关注&lt;/span&gt;&lt;span/&gt;&lt;span&gt;这个公众号&lt;img data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;20&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qpibArhCOoxDvKuKt37twcIPREYo8kCeqooaYdgPkED8s8EwHuWKjJY2kLjur0mia69tBa8d0DMh9FDZ4B4aOWnw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;516&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;251&quot; data-ratio=&quot;0.3649122807017544&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qpibArhCOoxAeWIsicCy5k36z0I0DXCUqD7sSQ2d17Ccd49ibAhxMribCtgOZXNqLSOeC1GDv53z40MkIkibMFENsyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1710&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9e5f8080eb282e73e0b73e87f8773b05</guid>
<title>C#/.Net 不要再使用 Aspose 和 iTextSharp 啦！QuestPDF 操作生成 PDF 更快更高效</title>
<link>https://toutiao.io/k/rbeclli</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iciaibxtQYFyysWw5ibkiaeyDv4NAKL9iaEc6EXjWXsiaKMzVaO7uvxEIIic9N1o5nXHKXmWH0j9DUxfR5pibGncLz6KvNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;QuestPDF&lt;br/&gt;&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;QuestPDF是一个开源的工具库，可以在.NET或者.Net Core中生成pdf文档&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它提供了一个布局引擎，设计时考虑到了完整的分页支持以及灵活性要求！比市面上常见的Aspose和iTextSharp好用太多了！GitHub地址&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;安装&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Install-Package QuestPDF&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6576354679802956&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iciaibxtQYFyysWw5ibkiaeyDv4NAKL9iaEc6E05OdcxKic3DkIFR3avqztNsj0icibDkUcKXszfUTnB7PSLvJ6TtQd5wDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;例子&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成Pdf文档一共分为三部分，Header(页眉)，Content（内容）,Footer（页脚）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Document.Create(container =&amp;gt;&lt;br/&gt;{&lt;br/&gt;    container.Page(page =&amp;gt;&lt;br/&gt;    {&lt;br/&gt;        page.Size(PageSizes.A4);&lt;br/&gt;        page.Margin(2, Unit.Centimetre);&lt;br/&gt;        page.Background(Colors.White);&lt;br/&gt;        page.DefaultTextStyle(x =&amp;gt; x.FontSize(20));&lt;br/&gt;        &lt;br/&gt;        page.Header()&lt;br/&gt;            .Text(&lt;span&gt;&quot;Hello PDF!&quot;&lt;/span&gt;)&lt;br/&gt;            .SemiBold().FontSize(36).FontColor(Colors.Blue.Medium);&lt;br/&gt;        &lt;br/&gt;        page.Content()&lt;br/&gt;            .PaddingVertical(1, Unit.Centimetre)&lt;br/&gt;            .Column(x =&amp;gt;&lt;br/&gt;            {&lt;br/&gt;                x.Spacing(20);&lt;br/&gt;                &lt;br/&gt;                x.Item().Text(Placeholders.LoremIpsum());&lt;br/&gt;                x.Item().Image(Placeholders.Image(200, 100));&lt;br/&gt;            });&lt;br/&gt;        &lt;br/&gt;        page.Footer()&lt;br/&gt;            .AlignCenter()&lt;br/&gt;            .Text(x =&amp;gt;&lt;br/&gt;            {&lt;br/&gt;                x.Span(&lt;span&gt;&quot;Page &quot;&lt;/span&gt;);&lt;br/&gt;                x.CurrentPageNumber();&lt;br/&gt;            });&lt;br/&gt;    });&lt;br/&gt;})&lt;br/&gt;.GeneratePdf(&lt;span&gt;&quot;hello.pdf&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;h4&gt;&lt;span/&gt;&lt;/h4&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4151260504201681&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iciaibxtQYFyysWw5ibkiaeyDv4NAKL9iaEc6EJDt01iaBnibjia1vh9NiaPJJ9wOI990p3ib6t0qNMaFmE6Xtyr2HcfMGcCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1190&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用模板生成一共设计三个应用层的工作:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;文档Model(一组描述 PDF 文档内容的类)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据源(将域实体映射到文档模型的层)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模板(描述如何可视化信息并将其转换为 PDF 文件的表示层)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们设计一个基本的发票信息
要设计一个购物清单，一个卖家买家的地址，以及发票编号等等
我们设计这样的3个Model类&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;   public class InvoiceModel&lt;br/&gt;    {&lt;br/&gt;        public int InvoiceNumber { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public DateTime IssueDate { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public DateTime DueDate { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;&lt;br/&gt;        public Address SellerAddress { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public Address CustomerAddress { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;&lt;br/&gt;        public List&amp;lt;OrderItem&amp;gt; Items { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public string Comments { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public class OrderItem&lt;br/&gt;    {&lt;br/&gt;        public string Name { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public decimal Price { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public int Quantity { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public class Address&lt;br/&gt;    {&lt;br/&gt;        public string CompanyName { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public string Street { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public string City { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public string State { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public object Email { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;        public string Phone { get; &lt;span&gt;set&lt;/span&gt;; }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Model定义好了之后我们就定义一些假数据来填充pdf&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; public static class InvoiceDocumentDataSource&lt;br/&gt;    {&lt;br/&gt;        private static Random Random = new Random();&lt;br/&gt;&lt;br/&gt;        public static InvoiceModel &lt;span&gt;&lt;span&gt;GetInvoiceDetails&lt;/span&gt;&lt;/span&gt;()&lt;br/&gt;        {&lt;br/&gt;            var items = Enumerable&lt;br/&gt;                .Range(1, 8)&lt;br/&gt;                .Select(i =&amp;gt; GenerateRandomOrderItem())&lt;br/&gt;                .ToList();&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; new InvoiceModel&lt;br/&gt;            {&lt;br/&gt;                InvoiceNumber = Random.Next(1_000, 10_000),&lt;br/&gt;                IssueDate = DateTime.Now,&lt;br/&gt;                DueDate = DateTime.Now + TimeSpan.FromDays(14),&lt;br/&gt;&lt;br/&gt;                SellerAddress = GenerateRandomAddress(),&lt;br/&gt;                CustomerAddress = GenerateRandomAddress(),&lt;br/&gt;&lt;br/&gt;                Items = items,&lt;br/&gt;                Comments =&lt;span&gt;&quot;测试备注&quot;&lt;/span&gt;&lt;br/&gt;            };&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        private static OrderItem &lt;span&gt;&lt;span&gt;GenerateRandomOrderItem&lt;/span&gt;&lt;/span&gt;()&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; new OrderItem&lt;br/&gt;            {&lt;br/&gt;                Name = &lt;span&gt;&quot;商品&quot;&lt;/span&gt;,&lt;br/&gt;                Price = (decimal)Math.Round(Random.NextDouble() * 100, 2),&lt;br/&gt;                Quantity = Random.Next(1, 10)&lt;br/&gt;            };&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        private static Address &lt;span&gt;&lt;span&gt;GenerateRandomAddress&lt;/span&gt;&lt;/span&gt;()&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; new Address&lt;br/&gt;            {&lt;br/&gt;                CompanyName = &lt;span&gt;&quot;测试商店&quot;&lt;/span&gt;,&lt;br/&gt;                Street = &lt;span&gt;&quot;测试街道&quot;&lt;/span&gt;,&lt;br/&gt;                City = &lt;span&gt;&quot;测试城市&quot;&lt;/span&gt;,&lt;br/&gt;                State = &lt;span&gt;&quot;测试状态&quot;&lt;/span&gt;,&lt;br/&gt;                Email = &lt;span&gt;&quot;测试邮件&quot;&lt;/span&gt;,&lt;br/&gt;                Phone = &lt;span&gt;&quot;测试电话&quot;&lt;/span&gt;&lt;br/&gt;            };&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后搭建我们的模板脚手架
我们要使用模板脚手架,就要定义一个实现IDocument接口的新类开始。该接口包含两个方法&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;DocumentMetadata GetMetadata();&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;void Compose(IDocumentContainer container);&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个是模板文档的一些基础信息
第二个是模板的容器
基于这些原则我们设计一个模板层类&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; public class InvoiceDocument : IDocument&lt;br/&gt;    {&lt;br/&gt;        public InvoiceModel Model { get; }&lt;br/&gt;&lt;br/&gt;        public InvoiceDocument(InvoiceModel model)&lt;br/&gt;        {&lt;br/&gt;            Model = model;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        public DocumentMetadata GetMetadata() =&amp;gt; DocumentMetadata.Default;&lt;br/&gt;&lt;br/&gt;        public void Compose(IDocumentContainer container)&lt;br/&gt;        {&lt;br/&gt;            container&lt;br/&gt;                .Page(page =&amp;gt;&lt;br/&gt;                {&lt;br/&gt;                    page.PageColor(Colors.Red.Lighten1);&lt;br/&gt;                    page.Size(PageSizes.A4);&lt;br/&gt;                    page.Margin(10);//外边距&lt;br/&gt;&lt;br/&gt;      &lt;br/&gt;                    page.Header().Height(100).Background(Colors.LightBlue.Lighten1);&lt;br/&gt;                    page.Content().Background(Colors.Grey.Lighten3);&lt;br/&gt;                    page.Footer().Height(50).Background(Colors.Grey.Lighten1);&lt;br/&gt;                });&lt;br/&gt;        }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;pdf的page页面总是有三个元素:页眉,页脚，内容。查看一下我们生成的文档&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3848631239935587&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iciaibxtQYFyysWw5ibkiaeyDv4NAKL9iaEc6EiaqicIXh0LKx1x2HNoLrpgDeAGGwQS7PPLTBnhCPyQAicWjZxkGhriasiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;621&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到目前为止，我们已经搭建了一个非常简单的页面，其中每个部分都有不同的颜色或大小&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们来填充他的页眉,我们把数据源整理好了之后，就可以调用Element方法填充&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; public void Compose(IDocumentContainer container)&lt;br/&gt;        {&lt;br/&gt;            container&lt;br/&gt;                .Page(page =&amp;gt;&lt;br/&gt;                {&lt;br/&gt;                    page.PageColor(Colors.Red.Lighten1);&lt;br/&gt;                    page.Size(PageSizes.A4);&lt;br/&gt;                    page.Margin(10);//外边距&lt;br/&gt;&lt;br/&gt;      &lt;br/&gt;                    page.Header().Height(100).Background(Colors.LightBlue.Lighten1).Element(ComposeHeader);&lt;br/&gt;                    page.Content().Background(Colors.Grey.Lighten3);&lt;br/&gt;                    page.Footer().Height(50).Background(Colors.Grey.Lighten1);&lt;br/&gt;                });&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;        void ComposeHeader(IContainer container)&lt;br/&gt;        {&lt;br/&gt;            var titleStyle = TextStyle.Default.FontSize(20).SemiBold().FontColor(Colors.Blue.Medium);&lt;br/&gt;&lt;br/&gt;            container.Row(row =&amp;gt;&lt;br/&gt;            {&lt;br/&gt;                row.RelativeItem().Column(column =&amp;gt;&lt;br/&gt;                {&lt;br/&gt;                    column.Item().Text($&lt;span&gt;&quot;发票 #{Model.InvoiceNumber}&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;).Style(titleStyle);&lt;br/&gt;&lt;br/&gt;                    column.Item().Text(text =&amp;gt;&lt;br/&gt;                    {&lt;br/&gt;                        text.Span(&lt;span&gt;&quot;发行日期: &quot;&lt;/span&gt;).SemiBold().FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                        text.Span($&lt;span&gt;&quot;{Model.IssueDate:d}&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    });&lt;br/&gt;&lt;br/&gt;                    column.Item().Text(text =&amp;gt;&lt;br/&gt;                    {&lt;br/&gt;                        text.Span(&lt;span&gt;&quot;支付日期: &quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;).SemiBold();&lt;br/&gt;                        text.Span($&lt;span&gt;&quot;{Model.DueDate:d}&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    });&lt;br/&gt;&lt;br/&gt;                })&lt;br/&gt;                ;&lt;br/&gt;&lt;br/&gt;            });&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.300455235204856&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iciaibxtQYFyysWw5ibkiaeyDv4NAKL9iaEc6EfWlkMNhXtHeqh0tbicd2Ej4g5DcX7rnuJSZ3qUTYibLYKJzBUruVCEZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;659&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后我们来实现内容，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  public void Compose(IDocumentContainer container)&lt;br/&gt;        {&lt;br/&gt;            container&lt;br/&gt;                .Page(page =&amp;gt;&lt;br/&gt;                {&lt;br/&gt;                    page.PageColor(Colors.Red.Lighten1);&lt;br/&gt;                    page.Size(PageSizes.A4);&lt;br/&gt;                    page.Margin(10);//外边距&lt;br/&gt;&lt;br/&gt;      &lt;br/&gt;                    page.Header().Height(100).Background(Colors.LightBlue.Lighten1).Element(ComposeHeader);&lt;br/&gt;                    page.Content().Background(Colors.Grey.Lighten3).Element(ComposeContent);&lt;br/&gt;                    page.Footer().Height(50).Background(Colors.Grey.Lighten1);&lt;br/&gt;                });&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;        void ComposeHeader(IContainer container)&lt;br/&gt;        {&lt;br/&gt;            var titleStyle = TextStyle.Default.FontSize(20).SemiBold().FontColor(Colors.Blue.Medium);&lt;br/&gt;&lt;br/&gt;            container.Row(row =&amp;gt;&lt;br/&gt;            {&lt;br/&gt;                row.RelativeItem().Column(column =&amp;gt;&lt;br/&gt;                {&lt;br/&gt;                    column.Item().Text($&lt;span&gt;&quot;发票 #{Model.InvoiceNumber}&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;).Style(titleStyle);&lt;br/&gt;&lt;br/&gt;                    column.Item().Text(text =&amp;gt;&lt;br/&gt;                    {&lt;br/&gt;                        text.Span(&lt;span&gt;&quot;发行日期: &quot;&lt;/span&gt;).SemiBold().FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                        text.Span($&lt;span&gt;&quot;{Model.IssueDate:d}&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    });&lt;br/&gt;&lt;br/&gt;                    column.Item().Text(text =&amp;gt;&lt;br/&gt;                    {&lt;br/&gt;                        text.Span(&lt;span&gt;&quot;支付日期: &quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;).SemiBold();&lt;br/&gt;                        text.Span($&lt;span&gt;&quot;{Model.DueDate:d}&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    });&lt;br/&gt;&lt;br/&gt;                })&lt;br/&gt;                ;&lt;br/&gt;&lt;br/&gt;            });&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        void ComposeContent(IContainer container)&lt;br/&gt;        {&lt;br/&gt;            container.Table(table =&amp;gt;&lt;br/&gt;            {&lt;br/&gt;                // step 1&lt;br/&gt;                table.ColumnsDefinition(columns =&amp;gt;&lt;br/&gt;                {&lt;br/&gt;                    columns.ConstantColumn(25);&lt;br/&gt;                    columns.RelativeColumn(3);&lt;br/&gt;                    columns.RelativeColumn();&lt;br/&gt;                    columns.RelativeColumn();&lt;br/&gt;                    columns.RelativeColumn();&lt;br/&gt;                });&lt;br/&gt;&lt;br/&gt;                // step 2&lt;br/&gt;                table.Header(header =&amp;gt;&lt;br/&gt;                {&lt;br/&gt;                    header.Cell().Text(&lt;span&gt;&quot;#&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    header.Cell().Text(&lt;span&gt;&quot;商品&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    header.Cell().AlignRight().Text(&lt;span&gt;&quot;价格&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    header.Cell().AlignRight().Text(&lt;span&gt;&quot;数量&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    header.Cell().AlignRight().Text(&lt;span&gt;&quot;总价&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;                    header.Cell().ColumnSpan(5)&lt;br/&gt;                        .PaddingVertical(5).BorderBottom(1).BorderColor(Colors.Black);&lt;br/&gt;                });&lt;br/&gt;&lt;br/&gt;                // step 3&lt;br/&gt;                foreach (var item &lt;span&gt;in&lt;/span&gt; Model.Items)&lt;br/&gt;                {&lt;br/&gt;                    table.Cell().Element(CellStyle).Text(Model.Items.IndexOf(item) + 1).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    table.Cell().Element(CellStyle).Text(item.Name).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    table.Cell().Element(CellStyle).AlignRight().Text($&lt;span&gt;&quot;{item.Price}$&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    table.Cell().Element(CellStyle).AlignRight().Text(item.Quantity).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;                    table.Cell().Element(CellStyle).AlignRight().Text($&lt;span&gt;&quot;{item.Price * item.Quantity}$&quot;&lt;/span&gt;).FontFamily(&lt;span&gt;&quot;simhei&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;                    static IContainer CellStyle(IContainer container)&lt;br/&gt;                    {&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; container.BorderBottom(1).BorderColor(Colors.Grey.Lighten2).PaddingVertical(5);&lt;br/&gt;                    }&lt;br/&gt;                }&lt;br/&gt;            });&lt;br/&gt;&lt;br/&gt;        }&lt;br/&gt;       &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这些准备工作做完了之后我们就可以生成Pdf文档了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;     var filePath = &lt;span&gt;&quot;invoice.pdf&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;            var model = InvoiceDocumentDataSource.GetInvoiceDetails();&lt;br/&gt;            var document = new InvoiceDocument(model);&lt;br/&gt;            document.GeneratePdf(filePath);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2724505327245053&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iciaibxtQYFyysWw5ibkiaeyDv4NAKL9iaEc6EkG4R0iaZAIayjrfF3IsjrQes9knBTGia6ibq3M1yUMW20BbpX5lnNOv8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;657&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然还有很多好玩的功能，今天就给大家讲个概念，让大家对这个东西有个印象，后面我会继续输出该库的相关功能。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>