<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>556f09ed2efa61aeb25acd384c333e2a</guid>
<title>优质网站同好者周刊（第 103 期） | 倾城博客</title>
<link>https://toutiao.io/k/byr6gky</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;前端开发&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B9%B3%E5%8F%B0&quot;&gt;&lt;code&gt;平台&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Vercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/vercel.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Vercel: Develop. Preview. Ship. For the best frontend teams&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vercel.com/&quot;&gt;Vercel&lt;/a&gt; 一个免费的、针对前端开发人员的网站托管平台，## 提供创新者在灵感迸发时所需的速度和可靠性。它将开发人员从拖慢工作速度的耗时、不必要的流程中解放出来，这样您和您的团队就可以专注于创作。它具有如下功能特征：&lt;/p&gt;&lt;h3 id=&quot;灵感来袭时构建&quot;&gt;&lt;a href=&quot;#%E7%81%B5%E6%84%9F%E6%9D%A5%E8%A2%AD%E6%97%B6%E6%9E%84%E5%BB%BA&quot; aria-label=&quot;灵感来袭时构建 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;灵感来袭时构建&lt;/h3&gt;&lt;h4 id=&quot;完整的-web-工具包&quot;&gt;&lt;a href=&quot;#%E5%AE%8C%E6%95%B4%E7%9A%84-web-%E5%B7%A5%E5%85%B7%E5%8C%85&quot; aria-label=&quot;完整的 web 工具包 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;完整的 Web 工具包&lt;/h4&gt;&lt;p&gt;完全按照您的想象构建站点所需的一切，从自动 API 处理到内置图像和性能优化。&lt;/p&gt;&lt;h4 id=&quot;轻松与您的后端集成&quot;&gt;&lt;a href=&quot;#%E8%BD%BB%E6%9D%BE%E4%B8%8E%E6%82%A8%E7%9A%84%E5%90%8E%E7%AB%AF%E9%9B%86%E6%88%90&quot; aria-label=&quot;轻松与您的后端集成 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;轻松与您的后端集成&lt;/h4&gt;&lt;p&gt;将您的页面连接到任何数据源、无头 CMS 或 API，并使其在每个人的开发环境中工作。&lt;/p&gt;&lt;h4 id=&quot;在-localhost-上进行端到端测试&quot;&gt;&lt;a href=&quot;#%E5%9C%A8-localhost-%E4%B8%8A%E8%BF%9B%E8%A1%8C%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%8B%E8%AF%95&quot; aria-label=&quot;在 localhost 上进行端到端测试 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;在 Localhost 上进行端到端测试&lt;/h4&gt;&lt;p&gt;从缓存到无服务器功能，我们所有的云原语都可以在本地主机上完美运行。&lt;/p&gt;&lt;h3 id=&quot;与您的团队一起迭代&quot;&gt;&lt;a href=&quot;#%E4%B8%8E%E6%82%A8%E7%9A%84%E5%9B%A2%E9%98%9F%E4%B8%80%E8%B5%B7%E8%BF%AD%E4%BB%A3&quot; aria-label=&quot;与您的团队一起迭代 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;与您的团队一起迭代&lt;/h3&gt;&lt;p&gt;通过与 GitHub、GitLab 和 Bitbucket 无缝集成，为每个代码更改自动预览部署，使前端开发成为一种协作体验。&lt;/p&gt;&lt;h4 id=&quot;推送部署&quot;&gt;&lt;a href=&quot;#%E6%8E%A8%E9%80%81%E9%83%A8%E7%BD%B2&quot; aria-label=&quot;推送部署 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;推送部署&lt;/h4&gt;&lt;p&gt;每次部署都会自动生成一个可共享的实时预览站点，该站点与您的更改保持同步。&lt;/p&gt;&lt;h4 id=&quot;每个分支的自动预览&quot;&gt;&lt;a href=&quot;#%E6%AF%8F%E4%B8%AA%E5%88%86%E6%94%AF%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A2%84%E8%A7%88&quot; aria-label=&quot;每个分支的自动预览 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;每个分支的自动预览&lt;/h4&gt;&lt;p&gt;每个新分支都会收到一个实时的、类似于生产的 URL，您团队中的每个人都可以访问该 URL。&lt;/p&gt;&lt;h4 id=&quot;ui-上的协作审查&quot;&gt;&lt;a href=&quot;#ui-%E4%B8%8A%E7%9A%84%E5%8D%8F%E4%BD%9C%E5%AE%A1%E6%9F%A5&quot; aria-label=&quot;ui 上的协作审查 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;UI 上的协作审查&lt;/h4&gt;&lt;p&gt;与 GitHub 和 Slack 无缝集成，在真实上下文中实时直接评论组件、布局、副本等。&lt;/p&gt;&lt;h3 id=&quot;取悦每一位来访者&quot;&gt;&lt;a href=&quot;#%E5%8F%96%E6%82%A6%E6%AF%8F%E4%B8%80%E4%BD%8D%E6%9D%A5%E8%AE%BF%E8%80%85&quot; aria-label=&quot;取悦每一位来访者 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;取悦每一位来访者&lt;/h3&gt;&lt;h4 id=&quot;速度对客户和-seo-至关重要&quot;&gt;&lt;a href=&quot;#%E9%80%9F%E5%BA%A6%E5%AF%B9%E5%AE%A2%E6%88%B7%E5%92%8C-seo-%E8%87%B3%E5%85%B3%E9%87%8D%E8%A6%81&quot; aria-label=&quot;速度对客户和 seo 至关重要 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;速度对客户和 SEO 至关重要&lt;/h4&gt;&lt;p&gt;Next.js 和 Vercel 协同工作，为您的最终用户提供最佳性能，同时保持一流的 SEO 实践。Vercel 建立在尖端的无服务器技术之上，可以承受任何流量高峰，并具有自动故障转移和资产全球复制功能。&lt;/p&gt;&lt;h4 id=&quot;全球边缘网络&quot;&gt;&lt;a href=&quot;#%E5%85%A8%E7%90%83%E8%BE%B9%E7%BC%98%E7%BD%91%E7%BB%9C&quot; aria-label=&quot;全球边缘网络 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;全球边缘网络&lt;/h4&gt;&lt;p&gt;您的网站，处处快速。在全球部署内容并在 300 毫秒内更新。&lt;/p&gt;&lt;h4 id=&quot;第一方监控和可观察性&quot;&gt;&lt;a href=&quot;#%E7%AC%AC%E4%B8%80%E6%96%B9%E7%9B%91%E6%8E%A7%E5%92%8C%E5%8F%AF%E8%A7%82%E5%AF%9F%E6%80%A7&quot; aria-label=&quot;第一方监控和可观察性 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;第一方监控和可观察性&lt;/h4&gt;&lt;p&gt;分析日志、了解流量和使用情况并轻松优化您的应用程序，无需额外的工具或代码。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vercel.com/&quot;&gt;Vercel&lt;/a&gt; 类似于 Github Page，但远比它还强大，速度也快得多，而且将 &lt;a href=&quot;https://nicelinks.site/post/59ba80d93df6765c75b77911&quot;&gt;Github&lt;/a&gt; 授权给 vercel 后，基于其内置 CI/CD，可以达到最优雅的发布体验：只需将代码推送，项目就自动更新部署。&lt;code&gt;vercel&lt;/code&gt; 还支持部署 &lt;a href=&quot;https://nicelinks.site/post/5bc4c2136d02e84b14b5e4cb&quot;&gt;ServerLess&lt;/a&gt; 接口。那代表着，其不仅仅可以部署静态网站，甚至可以&lt;strong&gt;部署动态网站&lt;/strong&gt;，而这些功能，统统是免费的。Vercel 提供了免费的域名，省去了申请域名的问题，如果拥有自己的域名，还可以将域名解析到 Vercel 平台；更棒的 vercel 还支持自动配置 &lt;code&gt;https&lt;/code&gt;，不用自己去申请免费 SSL 证书，更是省去了一大堆证书的配置，简直是懒人的福利。如果您有部署网站服务，&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vercel.com/&quot;&gt;Vercel&lt;/a&gt; 绝对当下首选平台。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63dba9f93b0bd5224de21d36&quot;&gt;倾城之链 - Vercel: Develop. Preview. Ship. For the best frontend teams&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/API&quot;&gt;&lt;code&gt;API&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;🚀 The Node.js Framework highly focused on developer ergonomics, stability and confidence.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/adonisjs.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - AdonisJS - A fully featured web framework for Node.js&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://adonisjs.com/&quot;&gt;AdonisJS&lt;/a&gt; ，功能齐全的  Node.js、 Web 框架，号称包含创建功能齐全的网络应用程序或 API 服务器所需的一切，使用 AdonisJS，从第一天起就可以高效工作。同类型的框架有 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://expressjs.com/&quot;&gt;Express&lt;/a&gt;（一个最小且灵活的 Node.js Web 应用程序框架）、&lt;a href=&quot;https://nicelinks.site/redirect?url=https://koajs.com/&quot;&gt;Koa2&lt;/a&gt; （用于 node.js 的下一代 Web 框架，&lt;a href=&quot;https://nicelinks.site&quot;&gt;倾城之链&lt;/a&gt;后台用的便是 &lt;code&gt;Koa2&lt;/code&gt;）、&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.eggjs.org/&quot;&gt;Egg.js&lt;/a&gt; （为企业级框架和应用而生）等等。&lt;/p&gt;&lt;p&gt;AdonisJS 是一个后端框架，它专注于&lt;strong&gt;人体工程学和速度&lt;/strong&gt;的全栈 Web 框架。它解决了很多 Web 开发难题，为您提供干净稳定的 API 来构建 Web 应用程序和微服务；可以帮助您创建数据驱动的动态 Web 应用程序。使用 AdonisJS，您可以&lt;strong&gt;处理 HTTP 请求&lt;/strong&gt;、&lt;strong&gt;查询数据库&lt;/strong&gt;、&lt;strong&gt;验证用户&lt;/strong&gt;、&lt;strong&gt;上传文件&lt;/strong&gt;、&lt;strong&gt;发送电子邮件&lt;/strong&gt;，以及做更多的事情。&lt;/p&gt;&lt;p&gt;如果您曾经使用过不同的后端框架，如 Rails、Laravel 或 Django，那么您可以考虑将 AdonisJS 放在同一条船上。AdonisJS 在 Github 开源，支持 TypeScript，截止 2023 年 02 月 01 日拥有超过 13kb Star、15+ 个核心包.....，如果您有基于 Node.js 搭建应用后台的诉求，或可以考虑。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63da5d303b0bd5224de2140f&quot;&gt;倾城之链 - AdonisJS - A fully featured web framework for Node.js&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%8F%91%E7%8E%B0&quot;&gt;&lt;code&gt;发现&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%88%86%E4%BA%AB&quot;&gt;&lt;code&gt;分享&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BA%94%E7%94%A8&quot;&gt;&lt;code&gt;应用&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Discover the apps everyone is docking about，Share your dock and see who else has docked the apps you use.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.dockhunt.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Dockhunt - What&#x27;s in your dock?&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.dockhunt.com/&quot;&gt;Dockhunt&lt;/a&gt;，发现每个人都在停靠（Docking）的应用程序，即发现其他人 macOS dock（程序坞）；如果要添加您自己的 dock（程序坞），只需在您的终端中运行“npx dockhunt”，或运行他们的桌面应用程序，它是 100% 开源的。&lt;/p&gt;&lt;p&gt;Dockhunt 是一个很妙的想法，如同为优质网站或 AI 产品做的导航，只不过它针对的是 MacOS Dock；粗略浏览会发现、Chrome、&lt;a href=&quot;https://nicelinks.site/post/5cbd4e8b7855f80ea42ea6ab&quot;&gt;Notion&lt;/a&gt;、&lt;a href=&quot;https://nicelinks.site/post/605b4055bffb5e532f3be233&quot;&gt;Slack&lt;/a&gt;、&lt;a href=&quot;https://nicelinks.site/post/5af55777979f626ea3d37917&quot;&gt;Visual Studio Code&lt;/a&gt;、&lt;a href=&quot;https://nicelinks.site/post/605f1c61bffb5e532f3be23c&quot;&gt;Figma&lt;/a&gt;、以及生产力相关应用出现频率很高，可见分享者多是互联网从业人员（程序员、设计师）。在分享同时，您可以发现其他人的选择（好些应用程序未曾听闻），或可以为您带来效率提升、应用参考、乃至创造灵感。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63d9cb953b0bd5224de20c31&quot;&gt;倾城之链 - Dockhunt - What&#x27;s in your dock?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%81%B5%E6%84%9F&quot;&gt;&lt;code&gt;灵感&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%8F%91%E7%8E%B0&quot;&gt;&lt;code&gt;发现&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：GPT3 Apps, GPT-3, GPT-3 Examples, AI, ChatGPT, 500+ ChatGPT and GPT-3 Examples, Demos, Apps, Showcase, and AI Use-cases&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;GPT-3 is the world&#x27;s most sophisticated natural language technology. Discover how companies are implementing the AI to power new use cases.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/gpt3demo.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 500+ ChatGPT and GPT-3 Examples, Demos, Apps, Showcase, and AI Use-cases | Discover AI use cases&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://gpt3demo.com/&quot;&gt;GPT-3 DEMO&lt;/a&gt;，承载 ChatGPT、AI 和 GPT-3 应用程序和用例的网站。&lt;code&gt;GPT-3&lt;/code&gt; （&lt;strong&gt;Generative Pre-trained Transformer 3&lt;/strong&gt;）是世界上最复杂的自然语言技术，您可以在该网站获取灵感，并了解各公司如何实施人工智能以推动新的用例（Use Cases）。截止目前（2023 年 01 月 31 日），该网站已收录超过 580 款应用，涵盖 A/B 测试、广告生成、聊天机器人、GPT-3 替代大型语言模型 (LLM)、ChatGPT 替代品、编码助理、人工智能文案、决策助手、创意生成器、图片生成、游戏开发等仅百个类别，可见智能化发展之快，涉及范围之广。&lt;/p&gt;&lt;p&gt;Generative Pre-trained Transformer 3 ( GPT-3 ) 是 2020 年发布的一种自回归 语言模型，它使用深度学习来生成类似人类的文本。给定初始文本作为提示，它将生成继续提示的文本。&lt;/p&gt;&lt;p&gt;该架构是一个标准的转换器网络（经过一些工程调整），具有当时前所未有的 2048 令牌长上下文和 1750 亿个参数（需要 800 GB 存储空间）的大小。训练方式是“生成式预训练”，意思是训练它预测下一个 token 是什么。该模型在许多基于文本的任务上 展示了强大的少样本学习。GPT-3 于 2020 年 5 月推出，截至 2020 年 7 月正在进行 Beta 测试，是预训练语言表示的自然语言处理(NLP) 系统趋势的一部分。&lt;/p&gt;&lt;p&gt;它是 GPT-n 系列中的第三代语言预测模型，是旧金山人工智能研究实验室 OpenAI 创建的 GPT-2 的继任者。GPT-3 生成的文本质量非常高，很难确定它是否是人写的，这既有好处也有风险。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63d917d83b0bd5224de20562&quot;&gt;倾城之链 - 500+ ChatGPT and GPT-3 Examples, Demos, Apps, Showcase, and AI Use-cases | Discover AI use cases&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Tailwind&quot;&gt;&lt;code&gt;Tailwind&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%BB%84%E4%BB%B6%E5%BA%93&quot;&gt;&lt;code&gt;组件库&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E6%BA%90&quot;&gt;&lt;code&gt;开源&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Beautifully designed components built with Radix UI and Tailwind CSS.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/ui.shadcn.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - shadcn/ui - Beautifully designed components built with Radix UI and Tailwind CSS.&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://ui.shadcn.com/&quot;&gt;shadcn/ui&lt;/a&gt;，使用 Radix UI 和 Tailwind CSS 构建的设计精美的组件库；您可以将可访问和可自定义的组件复制并粘贴到您的应用程序中。完全开源，自由使用，Next.js 13 已准备就绪。直接目前已提供 30 余种组件，样式精美，可直接用于生产，支持黑暗模式、&lt;a href=&quot;https://lucide.dev/&quot;&gt;Lucide&lt;/a&gt; 的图标等等。如果你有意基于 &lt;a href=&quot;https://nicelinks.site/post/61c928af5be6454b4e3d5146&quot;&gt;Next.js&lt;/a&gt; 框架搭建网站，&lt;a href=&quot;https://nicelinks.site/redirect?url=https://ui.shadcn.com/&quot;&gt;shadcn/ui&lt;/a&gt; 组件库非常值得考虑；如果您对其感兴趣，可移步 Github 开源仓库 &lt;a href=&quot;https://github.com/shadcn/ui&quot;&gt;shadcn/ui&lt;/a&gt;以了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63d9140a3b0bd5224de204a9&quot;&gt;倾城之链 - shadcn/ui - Beautifully designed components built with Radix UI and Tailwind CSS.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%88%86%E4%BA%AB&quot;&gt;&lt;code&gt;分享&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%95%B0%E5%AD%97%E6%B8%B8%E6%B0%91&quot;&gt;&lt;code&gt;数字游民&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%94%9F%E6%B4%BB%E6%8C%87%E5%8D%97&quot;&gt;&lt;code&gt;生活指南&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;中文互联网最权威的数字游民生活方式设计主题内容品牌&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/jarodise.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 数字游民部落&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://jarodise.com/&quot;&gt;数字游民部落&lt;/a&gt; ，为数字游民 &lt;a href=&quot;https://github.com/jarodise&quot;&gt;Jarod&lt;/a&gt; （内容创作者，数字游民生活方式倡导者与践行者）所创建；承载中文互联网数字游民生活方式相关分享内容。&lt;strong&gt;数字游民&lt;/strong&gt;（英语：Digital Nomads）这个词首次由前日立公司的 CEO 牧本次雄在其 1997 年出版的同名著作中提出；它是指通过电信技术(尤其是互联网）来移动办公，以支持生活和旅行的一种生活方式。&lt;/p&gt;&lt;p&gt;中文数字游民生活方式主题博客 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://jarodise.com/&quot;&gt;数字游民部落&lt;/a&gt; 给这种生活方式下了一个更为具体的定义: 数字游民是一种被数字信息技术赋能的全新生活方式，它的受众特指那些完全依靠互联网创造收入，并借此打破工作与工作地点间的强关系，达成地理位置自由和时间自由，并尽享地理套利红利，全球移动生活的人群。&lt;/p&gt;&lt;p&gt;数字游民们通常在不同的城市，甚至在不同的国家进行远程工作。他们可能在咖啡店、公共图书馆、公用办公空间甚至露营车工作。他们通过使用连接互联网的计算机、智能手机进行工作。成功的数字游民一般具有对应各种紧急状态的财务缓冲能力，同时也具有较好的自力更生和自律能力。&lt;/p&gt;&lt;p&gt;人们因为多种不同的原因成为 &lt;a href=&quot;https://nicelinks.site/tags/%E6%95%B0%E5%AD%97%E6%B8%B8%E6%B0%91&quot;&gt;数字游民&lt;/a&gt; ，常见的原因包括财务自由和一个允许长期远程工作的职业类型。虽然数字游民因时间、地点的灵活性享有更低的生活成本、更多样的生活乐趣，他们有时也受到孤独等心理问题的困扰。这种工作生活方式也面临一些其他挑战，例如在外国保持国际健康保险，熟悉和遵守当地法律，以及保持合法工作的签证身份等。&lt;/p&gt;&lt;p&gt;由于 COVID-19 疫情，不少国家大城市的居民开始考虑在其他地方开始工作。一些旅游胜地也开始聚焦于数字游民市场，以弥补疫情造成的游客缺失。包括百慕大、安提瓜和巴布达、巴巴多斯、爱沙尼亚（参见爱沙尼亚 e 居民签证）、泰国、格鲁吉亚在内的多国，都通过特殊的签证项目来欢迎高收入、高素质的数字游民前往其领土生活居住。与佳人相伴，过快乐、幸福的 &lt;a href=&quot;https://nicelinks.site/tags/%E6%95%B0%E5%AD%97%E6%B8%B8%E6%B0%91&quot;&gt;数字游民&lt;/a&gt; 式生活，是目前所憧憬的幸福之一。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63d7b166ac46415757ac7efb&quot;&gt;倾城之链 - 数字游民部落&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%9C%A8%E7%BA%BF&quot;&gt;&lt;code&gt;在线&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%8F%AF%E8%A7%86%E5%8C%96&quot;&gt;&lt;code&gt;可视化&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot;&gt;&lt;code&gt;工具&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：zip, unzip, zip online, unzip online, preview zip, code&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;View zip file online.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/ziptool.app.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - ZipTool - View zip file online&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://ziptool.app/&quot;&gt;ZipTool&lt;/a&gt; ，在线查看压缩文件的网站（基于 &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;React&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/61c928af5be6454b4e3d5146&quot;&gt;Next.js&lt;/a&gt; 等框架搭建）。一键拖动 zip 文件至网页，或「&lt;strong&gt;点击选择&lt;/strong&gt;」按钮选择本地 zip 文件 📃，即可快速查看该压缩文件（支持预览图片、视频、PDF、文本、音频）。它具有以下功能特征：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;瞬间快速&lt;/strong&gt;：无需上传；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;100% 隐私安全&lt;/strong&gt;：一切都发生在您的浏览器中；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;媒体支持&lt;/strong&gt;：支持 PDF、音频、视频代码文件等；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;潜逃 Zips&lt;/strong&gt;：支持在 zip 文件中潜逃其他 zip；&lt;/li&gt;&lt;li&gt;ZipTool 支持预览在线 zip 文件；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ZIP 是&lt;strong&gt;一种广泛使用的存档文件格式，用于将一个或多个文件压缩到一个位置，从而减小整体大小，并使得文件更易于传输&lt;/strong&gt;。 ZIP 文件的工作方式与您电脑上的标准文件夹基本上相同。 但是，对于 ZIP 压缩文件而言，文件夹的内容经过了压缩，因而减小了电脑使用的数据量。&lt;/p&gt;&lt;p&gt;ZIP 是目前比较主流的压缩&lt;strong&gt;文件&lt;/strong&gt;格式。不能直接打开，需要借助一个支持 &lt;code&gt;.zip&lt;/code&gt; 解压缩工具才能&lt;strong&gt;打开&lt;/strong&gt;，才能提取里面的文件出来。如果您的设备上未安装解压工具，&lt;a href=&quot;https://nicelinks.site/redirect?url=https://ziptool.app/&quot;&gt;ZipTool&lt;/a&gt; ，可以为您提供很大便利。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/63d61a89ac46415757ac769f&quot;&gt;倾城之链 - ZipTool - View zip file online&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;昔之善战者，先为不可胜，以待敌之可胜。不可胜在己，可胜在敌。故善战者，能为不可胜，不能使敌之必可胜。故曰：&lt;strong&gt;胜可知，而不可为&lt;/strong&gt;。── 春秋时期 · 孙武《孙子兵法 · 行篇》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6456d12cebcecd55bdbcb4d97ab05319</guid>
<title>Crossplane 和 Terraform 的区别</title>
<link>https://toutiao.io/k/zm64ilu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3043867502238138&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K1sI6IqaK7YM2EQc2MlYdpAVl8l2XtZvM6J8BebaEwPwxTibWULr1WeIIee7O0GPJC6sMJNBq1umazycxLoDAnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1117&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Crossplane 经常被比作 HashiCorp 的 Terraform。对于企业平台团队来说随着&lt;span&gt;平台增长寻找替代方案过程中&lt;/span&gt;，通常会用 Crossplane替代&lt;span&gt;Terraform&lt;/span&gt;。这两个项目之间有相似之处：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关键区别在于 Crossplane 是一个控制平面，而 Terraform 是一个命令行工具——控制平面的客户端。&lt;/span&gt;&lt;span&gt;这篇文章触及了企业在扩展 Terraform 时通常面临的一些痛点，并强调了 Crossplane 如何解决这些问题。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、协作&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;企业通常通过其运维团队采用 Terraform。对于一个小型团队来说，这是管理的基础设施的好方法。将基础设施表示为声明性配置允许运维团队从软件工程最佳实践中获益——将配置通过Git等工具管理，在必要时可以引入代码评审和回滚机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Terraform 是个人运维的瑞士军刀，但是在较多工程师需要协作的环境就有点力不从心了。因为&lt;/span&gt;&lt;span&gt;Terraform 依赖于一个单一的状态文件来将记录基础设施的状态映射。在应用配置时必须Lock状态文件，因此这是一个阻塞过程时间可能需要几分钟。&lt;/span&gt;&lt;span&gt;在此期间，没有其他工程师只能进行摸鱼操作。此外Terraform 使用的是梭哈的方式部署基础设施——因此&lt;span&gt;没有推荐的方法来修改配置中的某一个基础设施。比如缓存和数据库的配置只能基于同一个状态文件进行同时更新、而无法分开更新运维。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Terraform 建议将整体配置分解为越来越细化的配置。虽然运维团队可能从“&lt;span&gt;production&lt;/span&gt;” 配置开始，但我们鼓励他们将其分解为范围内的配置，例如“&lt;span&gt;production billing&lt;/span&gt;”和“&lt;span&gt;production auth&lt;/span&gt;”。很难一开始就做到这一点，因此随着时间的推移可能需要进行大量重构，并且通常会导致 Terraform 配置的复杂依赖与其输入和输出相耦合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而Crossplane的跨平面资源模型 (XRM) 促进了松散耦合和最终一致性。在 Crossplane 中，每个基础设施都是一个支持创建、读取、更新和删除操作的 API 端点。Crossplane 并不需要向Terraform那样计算依赖关系图来进行更改，因此您可以轻松针对单个数据库进行运维操作，即使您使用 Crossplane 管理整个生产环境。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;二、自助服务&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;现代组织正在从基础设施的集中管理演变为自助服务模型，在该模型中，平台运维团队定义了他们支持的基础设施抽象。Terraform 已经采用&lt;/span&gt;&lt;em&gt;模块&lt;/em&gt;&lt;span&gt;&lt;span&gt;来支持这种模型。模块与软件库没有什么不同，与 Crossplane 一样，Terraform 资源是外部 API 资源的抽象表示。一个模块在这些资源的配置之上提供了一个简化的抽象——例如&lt;/span&gt;，RDS 模块将多个不同的 Terraform 资源抽象为一个单一的“RDS 实例”概念。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;将应用程序团队视为 Terraform 配置“库”的消费者，也意味着他们受制于 Terraform 的协作限制。因此应用程序开发人员被邀请在其组织的基础架构上进行协作，这样就被绑架到了部分运维的工作。&lt;/span&gt;&lt;span&gt;平台团队是将应用程序开发团队拉入了日常的工作会议，而不是为他们提供平台服务。这意味着应用应用团队又被安排了新的学习任务——Terraform 和 HashiCorp 配置语言 (HCL)。当然，对于应用开发人员来说获得了更高级的配置抽象，但是平台的访问管理并没有同步跟上（这是工具和平台脱轨导致）。&lt;/span&gt;&lt;span&gt;虽然平台团队可以发布允许应用程序团队管理“RDS 实例”的模块，但访问控制仍然在云提供商 API 级别，还围绕“&lt;span&gt;database subnet groups” 和 “database parameter groups&lt;/span&gt;”这些细节运维&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Crossplane 的&lt;span&gt;XR&lt;/span&gt;复合资源和&lt;span&gt; Terraform 模&lt;/span&gt;块等价，每个 XR 资源都作为 API 端点独立公开。平台团队可以定义和记录每个 XR 的 OpenAPI 架构，并在 API 级别实施基于角色的访问控制 (RBAC)。&lt;/span&gt;&lt;span&gt;这意味着，如果平台团队决定将他们提供给开发团队的抽象构建为“AcmeCo PostgreSQL 数据库”，他们可以同时授予 RBAC 访问权限以创建、读取、更新或删除 AcmeCo PostgreSQL 数据库，而不必再操心&lt;span&gt;如 RDS 实例或子网组等&lt;/span&gt;各种底层云概念。由于 Crossplane 是建立在久经沙场的 Kubernetes RBAC 系统之上，平台团队可以轻松地为应用程序开发团队服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且自服务在 Crossplane 中被进一步扩展，任何一个 XR 都可以提供多种服务类别。Crossplane 基于&lt;span&gt; Kubernetes 的 spec 和 status &lt;/span&gt;将 XR 的输入和输出和它的实现解耦。如果应用程序开发人员已被授予创建数据库的权限，他们可以轻松地从任何服务类别中进行选择。这些服务类别可以是生产、预发或和开发；AWS、Azure 或和 GCP；或其任何组合。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、集成与自动化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Terraform 虽然封装了很多 API 能力，但是它自己不提供 API。这导致许多团队无法通过 API 的方式将&lt;span&gt;他们的 Terraform 配置提交到修订控制工作自动化&lt;/span&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;相对于从笔记本电脑运行 Terraform 的团队而言，这是一个改进，但它暴露了云原生时代尝试扩展 Terraform 使用时面临的一个关键问题。Terraform 是一个命令行工具——而不是控制平面。因为它是一个短暂的、一次性的过程，所以它只会在调用时尝试将您所需的配置与实际基础设施相协调。无论是从 CI/CD 管道还是笔记本电脑运行 Terraform 通常仅在&lt;/span&gt;&lt;span&gt;基础设施需要更新时才会被调用。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K1sI6IqaK7YM2EQc2MlYdpAVl8l2XtZvHA8rpvvmGSIKdulbib3GJkyKcuAb4tkoXkz9JcCAFCWX1NBB6zqpFgQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Terraform 保守的、“按需”的方法来协调所需的实际基础设施状态可能会导致新的僵局。回想一下，应用 Terraform 配置的过程是全有或全无——如果在同一配置中描述缓存和数据库，则必须始终更新两者以更新其中一个。但是如果某个同学直接绕过 Terraform执行了某些运维操作，这将导致&lt;span&gt;Terraform本地辛辛苦苦记录的状态文件失效。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;span&gt;例如&lt;/span&gt;&lt;span&gt;这样一个场景：&lt;/span&gt;&lt;span&gt;一名工程师在半夜被呼叫处理一个事件，通过 AWS &lt;/span&gt;&lt;span&gt;控制台对生产缓存配置进行一些快速编辑，却忘记在 Terraform 中&lt;/span&gt;&lt;span&gt;同步&lt;/span&gt;&lt;span&gt;这些更改。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一方面，Crossplane 构建为一系列长寿命、始终在线的控制回路。它不断地观察和纠正基础设施以匹配其所需的配置，无论是否预期会发生变化。这有效限制了团队绕过 Crossplane进行秘密运维操作。当 Crossplane 被要求管理一块基础设施时，在它之外所做的任何更改都将自动并持续地恢复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Terraform 因为不提供API导致与其他系统集成成为一个痛点，此外它是使用域特定&lt;span&gt;HCL&lt;/span&gt;语言的也提高了协作门槛。&lt;/span&gt;&lt;span&gt;而Crossplane 公开的是 REST API，集成团队可以自由选择Go、Ruby或其他语言来进行集成工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K1sI6IqaK7YM2EQc2MlYdpAVl8l2XtZvQaau8xOjGCViaIxk4uxGyFNoFCg0eL2VN4J9aBv4IDDksUmQ0Ftz7Og/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时Crossplane 不公开任何旧的 REST API。在 Kubernetes API 上构建意味着团队可以使用 kubectl 等工具来编排他们所有的基础设施。他们用来编排容器化应用程序的相同工具。Crossplane 甚至可以将应用程序连接到基础设施所需的详细信息，以简化集成工作。它可以与 ArgoCD、Gatekeeper 或 Velero 等项目配对，以启用 GitOps、高级策略和备份。如果需要定制自动化，&lt;span&gt;与 Crossplane 集成的 Kubernetes operator 来进行扩展。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、为什么不可兼得？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Crossplane 和 Terraform &lt;/span&gt;&lt;/span&gt;&lt;span&gt;都可以编排组织的基础设施。两者之间有相似之处，但每个项目采用不同的编排方式。Terraform 为控制平面 API 提供命令行界面，而 Crossplane本身就是一个控制平面，可用于在其他控制平面之上构建抽象。因为 Crossplane 使平台团队能够提供自己的控制平面，所以它避免了在扩展 Terraform 时&lt;/span&gt;&lt;span&gt;&lt;span&gt;面临的许多挑战。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/K1sI6IqaK7YM2EQc2MlYdpAVl8l2XtZvMTox2gfTDoBpqic6bRToXTCQ7nmtpibD9WxM3SUpzl9xoNz3GndJugNA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;精明的读者可能会注意到，&lt;/span&gt;&lt;span&gt;这两个项目可以相互补充——Terraform 作为 Corssplane 的客户端界面，通过 Kubernetes Provider 允许编排 Kubernetes 控制平面！&lt;/span&gt;&lt;span&gt;这意味着可以将 Terraform 与 Crossplane 配对，例如，如果你的小伙伴喜欢写 HCL 而不是 YAML，则可以使用 Terraform 来定义 XR 和组合。并且依然可以使用 Terraform 来plan和apply对 Crossplane 所需的状态&lt;span&gt;更改&lt;/span&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原文：&lt;/span&gt;&lt;span&gt;&lt;em&gt;https://blog.crossplane.io/crossplane-vs-terraform/&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5057471264367817&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K1sI6IqaK7a9yqzqNrGQzz5syNFibkOyDxRn4uEFpsricnNLBiaefqqgxlB9wDibGHhHiaM5PVtBHaY2obIhpSCnicdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;522&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f2bb60e89d3a7726e8ce2eea1a9ba0f9</guid>
<title>Code：美团代码托管平台的演进与实践</title>
<link>https://toutiao.io/k/twivqth</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;89&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10841121495327102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVsE4Nicq51WdnKEhcaEEYDS4h6jA6JOZ3fnENgFV1B6ianDTqaQ3nzNOjvHUB79ocldrVj4YlkAW6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总第550&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2023年 第002篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;103&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU2zk0q52HtKQjubeUEyZHBic5ADGrKxgSd0tibyMiasOHXjb46qFBw7PTfuWAxXzWq32lDkL05icwkMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot; data-width=&quot;100%&quot; opacity=&quot;&quot; title=&quot;undefined&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; data-style=&quot;text-align: left; font-size: 14px; color: inherit;&quot;&gt;&lt;section&gt;&lt;span&gt;美团代码托管平台经过长期的打磨，完成了分布式架构的改造落地，托管数以万计的仓库，日均Git相关请求达到千万级别。本文主要介绍了美团代码托管平台在迭代演进过程中面临的挑战及解决思路，希望对大家有所帮助或启发。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1. 引言&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2. 美团代码托管平台建设之路&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3. 美团代码托管平台架构演进的落地和挑战&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4. 总结&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5. 未来展望&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 引言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Code是美团自研的代码托管平台，其中包括了代码版本管理、分支管理及代码评审等功能，协同众多研发流程工具平台，支撑内部所有工程师的日常研发工作。经过近3年的建设，目前Code托管了数以万计的仓库，日常处理千万级的Git相关请求，稳定支撑着美团研发流程规范的持续落地。本文主要介绍美团在建设代码托管平台过程中面临的一些挑战和实践经验。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 美团代码托管平台建设之路&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2.1 代码托管平台的发展史&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;回顾美团代码托管平台的发展史，整个历程可以划分为三个阶段：单机部署、多机部署以及自研分布式代码托管平台。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;第一阶段：单机部署&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;美团最初的代码托管平台，和绝大多数Web系统一样，单机部署即可运行，所有用户的请求均通过Web应用进行响应。由于Git使用基于文件组织形式的存储模式，无论是通过页面访问还是执行Git命令操作，最终都会表现为磁盘的文件读写，高IO磁盘尤为重要。整体架构如下图1所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;371&quot; data-ratio=&quot;0.66484375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjyHj7OqYfCRHNXxmPyZiaZGjnhG1ygmdibrzECj9WDiaf00u4s0tcpO5zg/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图1 单机部署&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二阶段：多机部署&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;在访问规模不大的情况下，第一阶段这种单机架构可以满足日常的开发需求。但随着研发团队业务需求的不断增长，测试自动化流程的逐步完善，扩展性瓶颈也愈发明显，主要表现为以下2个方面：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;存储&lt;/strong&gt;：由于公司资源限制和地域分配不均等因素，代码托管平台部署机器已配置最大容量的可用SSD磁盘，使用率仍高达80%，可用空间严重不足。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;负载&lt;/strong&gt;：随着研发人员的不断增多，在访问高峰期，CPU和IO负载高达95%以上，页面出现严重的卡顿，仅能通过限流保障系统的持续服务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;因而，单机部署无法再承载高峰期的访问量，系统扩容刻不容缓。于是，我们开始设计了一套能够通过多机负载同一仓库IO的读写分离架构方案，以解决较为严重的IO负载问题。在读写分离架构中，最重要的是要保证用户视角的数据一致性（&lt;/span&gt;&lt;span&gt;用户随时可以读取提交的最新代码&lt;/span&gt;&lt;span&gt;），这里采取了以下措施：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;写操作仅发生在主节点。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;采用懒汉同步模式，在读取数据时触发从节点同步数据，若失败，则路由到主节点。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;采用独主兜底模式，遇到突发情况时可以迅速禁用从节点，保障数据安全。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;176&quot; data-ratio=&quot;0.315625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjMwicuk1hxwqK5OKdrfrq4Frduico2f8Kdc7hfqVvlibibjdC8IPjQcmapQ/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图2 多机部署&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如图2所示，我们将仓库访问形式按照应用层协议区分为HTTP和SSH，分别由对应的解析代理模块进行读写分发操作后再下发到主从节点（&lt;/span&gt;&lt;span&gt;此处采用了Round-Bobin的算法分发读请求&lt;/span&gt;&lt;span&gt;），使得整体读吞吐量扩大了2倍。对于从节点，我们部署了Agent，在用户发起读请求时会触发同步仓库数据的Fetch操作，以保证数据的一致性。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;第三阶段：自研分布式代码托管平台&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;在第二阶段，虽然通过多机负载IO的读写分离架构短暂性地解决了扩展性瓶颈问题，但仓库数据仍在持续不断地指数增长。同时，除扩展性问题之外，可用性瓶颈也凸显出来，主要表现在以下2个方面：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;运维&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：无论是日常迭代更新版本还是热修复紧急Bug，都需要停服才能部署系统，停服期间用户无法使用代码托管平台。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;备份&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：系统采用冷备份的方式多副本存储Git数据，无法保证核心数据的实时恢复，异常情况下存在数据丢失风险。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;因此，搭建具备高可用性和水平扩展性的分布式架构迫在眉睫。我们调研了业界主流代码托管平台的分布式方案，并结合公司内部的业务特性，最终选择了基于应用层分片的分布式架构，该架构满足了以下2个特性：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高可用&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：采用三副本多活模式，规避代码丢失风险，且系统版本更新无需停服，单机断电、宕机均可正常提供服务。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;水平扩展&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：可通过扩容分片集群的方式进行存储和负载扩展，实现广义下的“无限”容量。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;综上所述，Code基于GitLab生态开源组件二次开发，并采用了应用层分片多活模式的分布式架构方案，简介如下：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;底层存储服务基于GitLab生态开源组件二次开发，有良好的生态和丰富的功能支持。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;各服务间均通过gRPC进行交互通信，主要考虑点是Git大多数为二进制数据通信，gRPC基于HTTP 2.0，有良好的传输性能和流式支持。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过路由模块实现逻辑层与存储层有效隔离，逻辑层对物理分片无感知，存储层如同一个整体提供服务。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;采用了多活复制模式的数据保障架构，提高读写吞吐量，满足日均千万级的请求量需求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;针对于应用层分片的劣势，在架构设计时也做了相应的针对性优化，具体如下：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;热点库：提供了自动化的分片迁移能力，在发现仓库出现热点时，可进行分片迁移达到分片均衡。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;跨分片数据交互：通过业务层的Git事务包装，我们使用共享Object的模式并确保相互关联的仓库均落在同一分片上，既避免了跨分片通信的问题，也减少了磁盘空间占用和访问时延。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;557&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;439&quot; data-ratio=&quot;0.78671875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjl9vv6sic6ibL4Q52icwpQ5OWdZUGLib7sJEiaJk9bphgKg1Wld819vAG2vw/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图3 Code系统架构图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 美团代码托管平台架构演进的落地和挑战&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;代码托管平台在架构演进过程中，最终完成了以下两个目标：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高扩展&lt;/strong&gt;：针对计算和存储资源，可以实现水平扩展。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高可用&lt;/strong&gt;：缩短停机时间，提高可用性，系统稳定可靠。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;接下来，针对于每个目标，本文分别从技术挑战、方案选型、设计及解决方案等方面详细介绍我们的实践经验。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 扩展性目标&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1.1 技术挑战&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;在进行水平扩展改造时，主要面临了以下两类挑战：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;规模性&lt;/strong&gt;：在研发流程自动化等背景下，美团代码托管平台需要具备千万级吞吐、低延迟及高可用的系统性能，以提高研发效率。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：技术改造涉及的场景比较多，主要有两方面的考量：（1）用户低感知，新老系统保证现有通信方式及平台使用方式不变；（2）兼顾过渡时期底层存储介质多样性、运维体系兼容等问题，并保障上下游系统的正常运行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1.2 方案选型&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;经过对主流代码托管平台（&lt;span&gt;GitHub、GitLab、Bitbucket等&lt;/span&gt;）的调研分析，发现各大平台主要采用了以下两种架构解决扩展性问题。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;219&quot; data-ratio=&quot;0.37890625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjqSNFk42ZAYb0JkLmicxcoBkUD1UdkKSIGKhNJzVxyPTF1kUBum2wbJw/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图4 架构设计方案对比&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过上述对比可以发现，如果直接接入共享存储，暂时无法满足代码托管平台的稳定性和性能要求（&lt;/span&gt;&lt;span&gt;若Git机制进行并行优化，且使用更高读写性能的分布式存储系统，或许是一个不错的选择&lt;/span&gt;&lt;span&gt;）。在共享存储优化改造成本较高的前提下，我们最终采用了应用层分片的分布式架构，它既满足扩展性的要求，也更加成熟和稳定，并表现出不错的性能。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1.3 方案设计&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;我们通过代理模块实现了请求分发，通过路由模块实现了仓库分片，通过应用模块的无状态改造实现了弹性伸缩，从而达成了水平扩展的架构目标。下面将对这些模块进行详细的介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;代理模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;SSH Proxy&lt;/strong&gt;：提供Git-SSH请求代理，通过路由模块获取路由信息，到目标机器执行SSH操作。SSH Proxy组件基于go-crypto库开发，实现了公钥识别用户，流量控制，长连接超时处理，SSH转gRPC等功能。后续计划引入signature校验，以应对不同的使用场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;HTTP Proxy&lt;/strong&gt;：提供Git-HTTP/Web请求代理，通过路由模块存储的仓库分片映射关系，决策仓库路由节点。HTTP Proxy基于Go-Gin开发，实现了请求甄别，流量控制，多层代理等功能。最初HTTP Proxy还被作为灰度迁移的核心组件，通过流量统一收口，支持请求分发到新老Code系统，以确保请求和数据的平滑迁移。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;191&quot; data-ratio=&quot;0.33046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjGQLYKSia9O4cHle8ibpuaP5UEXeoWPF6vM4SdDv3ukgIibfM5iag733NRw/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图5 代理模块&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;路由模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;建立仓库和分片的映射关系，为了避免由于仓库路径更新造成文件夹拷贝/移动等行为带来一定的复杂性，这里采用了仓库ID作为唯一标识。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;利用Go Routine获取节点的数据同步状态，并通过超时机制保障用户非无限时等待。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用Key-Value Cache存储仓库和分片的映射，以降低映射关系的请求时延。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;405&quot; data-ratio=&quot;0.7&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjGc0dEcTp5dfDrAegdwYT76PPjZZibjArqiaqIyqSYX4TVungzzVwrqVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图6 路由模块&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;应用模块主要包括以下两点功能：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提供Git相关的业务逻辑接口处理代码内容信息、代码评审等复杂性业务请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;监听代码和分支变更消息，发送事件通知打通第三方业务系统和收集度量信息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;整体模块架构如下图7所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;186&quot; data-ratio=&quot;0.32109375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBj6bdrWqt0Yy0obhUEYmQXh4FPhhFYWb8u6JtLxg5jy0lGNI4WsZjyqw/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图7 应用模块&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1.4 解决思路&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;规模性解决思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;规模化的主要目标是：&lt;strong&gt;具备支撑千万级请求的系统能力，并支持计算、存储等资源的水平扩展能力&lt;/strong&gt;，其中路由均衡是必不可少的一环。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;a. 路由均衡&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Code系统对数据源可靠性要求较高，而对性能要求相对比较低，因而我们采用了&lt;strong&gt;严格仲裁&lt;/strong&gt;的路由模式，具体的逻辑配置如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;使用版本号判定哪个节点提供的代码内容最新&lt;/strong&gt;：版本号越大，代表数据越新，当版本最大时即为最新的数据。当W+R &amp;gt; N时总能读到最新的数据（&lt;/span&gt;&lt;span&gt;N：总节点个数，W：判断写入成功需要的响应节点数，R：读取数据时至少要成功读取的个数&lt;/span&gt;&lt;span&gt;），当W越小时，写入的可用性就越高，R越小，读取的可用性就越高。我们选择了N=3，R=W=2的常规推荐配置，根据概率推算可达到99.999%的可用性水平。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;采用读修复模式&lt;/strong&gt;：当读取数据时，若发现节点数据不一致，此时触发数据同步逻辑，以修复落后节点的数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;该功能内置于路由模块的Shard服务，架构如下图8所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;321&quot; data-ratio=&quot;0.5559030492572322&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjmBYwJAcKK6U0SxSjFicm01oqpZRUc8iantAc3dNA3jmOTcAJpALQT88g/640?wx_fmt=jpeg&quot; data-w=&quot;1279&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图8 路由逻辑示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;兼容性解决思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;兼容性目标总结为一句话就是：&lt;strong&gt;业务使用无感知&lt;/strong&gt;。因此，我们主要从以下三个方面考虑兼容性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;a. 与各系统交互方式及现有基础设施兼容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Code系统的众多下游系统（&lt;/span&gt;&lt;span&gt;多套前端UI、业务研发流程工具平台等&lt;/span&gt;&lt;span&gt;）依赖系统提供的开放API、Hook机制等扩展功能，为了减少系统升级对业务方造成影响，需要保证系统交互方式兼容；同时还要确保系统运维监控体系正常运行，维持可监测状态，我们主要做了以下四件事情：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;兼容核心功能&lt;/strong&gt;：使用频度高的功能平移到新系统，而使用中低频的功能，与业务沟通使用场景，再评估是否兼容。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong/&gt;&lt;strong&gt;重新设计部分功能&lt;/strong&gt;：提供更为合理的WebHook配置能力及崭新的代码评审功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;边缘功能运营下线&lt;/strong&gt;：推进废弃和历史遗留功能的下线，并提供合理的替代方案。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;打通运维体系&lt;/strong&gt;：保持现有监控埋点及运维接口接入方式，使系统处于可维护、可监测的状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;b. 非分布式版本无缝切换到分布式版本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Code系统仓库众多，需要有低成本的用户自主切换方式保障数据逐步迁移，我们主要做了以下三件事情：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;可视化自动切换&lt;/strong&gt;：通过页面一键迁移按钮，低成本实现从非分布式版本切换到分布式版本（&lt;/span&gt;&lt;span&gt;迁移进度可感知，执行过程中仓库可读不可写，确保数据完整&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Proxy屏蔽底层存储介质多样性&lt;/strong&gt;：通过Proxy保持单一的调用方式不变，可兼顾获取非分布式版本和分布式版本的存储数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;特殊数据共享存储&lt;/strong&gt;：用户和SSH Public Key等数据与仓库数据没有强制关联关系，可实现数据共享。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;c. 历史数据平滑迁移&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Code系统存在众多的历史代码数据和业务数据，如何有效、完整地将历史数据平滑迁移到新的分布式系统，变得尤为重要。为了达成业务使用无感知的目标，主要做了以下两件事情：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;优先迁移“轻量”仓库&lt;/strong&gt;：先迁移使用功能单一的仓库，根据用户反馈逐步完善迁移能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;业务维度批次迁移&lt;/strong&gt;：按照业务线划分迁移批次，同类使用模式的仓库同期迁移，以规避反馈问题多样性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 可用性目标&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.1 技术挑战&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;在进行可用性改造时，我们主要面临&lt;strong&gt;数据安全性&lt;/strong&gt;层面的挑战。代码作为公司的重要资产之一，需达到两方面的要求：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码单点丢失可数据恢复。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;用户视角可以读到正确的代码数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.2 方案选型&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;目前，业界主要有以下三种主流的数据复制模式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;1&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;273&quot; data-ratio=&quot;0.48671875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjnCI5gIAkBJianAWEqmsqvfTFFn37BDcWVnIc3dRccq7GQoUbzJgv2Ww/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图9 数据保障方案对比&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;业界大多数分布式Git系统采用的是单主复制模式保障数据安全，随着美团内部研发流程的逐步完善，对于创建代码注释Tag等需求逐步增加，读写比从最初的10:1缩短到现在的5:1，因此需要较高的写入性能。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们权衡了高吞吐量和数据强一致性的双重目标，在单主复制架构的基础上，采用以仓库维度单主复制为核心，节点多活为特性的复制模式（&lt;/span&gt;&lt;span&gt;下文简称为多活模式&lt;/span&gt;&lt;span&gt;），从而保证了数据安全和系统可用性。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.3 方案设计&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;我们主要通过存储模块中，对Git的读、写及初始化三类不同的请求分别采取相对应的数据处理机制，并结合多活复制模式，达成了高可用性的目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;存储模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Git Server&lt;/strong&gt;：主要存储和管理Git仓库数据，提供Git相关的gRPC接口。该服务基于GitLab生态开源组件二次开发，主要在数据同步机制、容灾模块、部分底层命令上做了适配性优化，共涉及以下4个逻辑模块：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Replication Manager&lt;/strong&gt;：数据复制核心模块，根据不同的请求（&lt;/span&gt;&lt;span&gt;读、写或初始化&lt;/span&gt;&lt;span&gt;）执行不同的复制逻辑，从而保障数据一致性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Code Core&lt;/strong&gt;：Git Server的核心服务模块，主要提供了Git的gRPC API供上游模块使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Git Core&lt;/strong&gt;：实现扩展性和高可用性的重要组件，这里通过源码的方式将GitLab生态开源组件引入到项目中，作为第三方Git API供项目使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Git Command Factory&lt;/strong&gt;：Git命令的中枢控制器，提供控制Git进程数量、传递参数上下文，隔离执行环境及格式化输出数据等功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;各个逻辑模块间关联如下图10所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;443&quot; data-ratio=&quot;0.7671875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjTxibibGmPkicib6gXgNFRKJC8bfD8PJnG2cEs2wX8GOXpVpIQxYyIibRugA/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图10 存储模块&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Git Cluster&lt;/strong&gt;：又称为分片，它由三个Git Server节点组成。三个节点间通过各自的Replication Manager模块获取到集群中其余节点的IP等信息，使用gRPC协议进行数据复制备份，可以保证用户视角的数据一致性，逻辑架构如下图11所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;358&quot; data-ratio=&quot;0.61953125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjQLJBBbEGjepvqxlsaU5lkfnDDs8m0HdYcCVdYKDbIhAZ4lK4flWswA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图11 Git Cluster&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.4 解决思路&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据安全性解决思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Code系统要解决的问题中，数据安全问题尤为重要，是保证研发流程安全可靠的关键。在考虑数据安全性解决思路之前，先要明确数据一致性判别准则，Code采用以下准则评判两个仓库数据一致。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据一致评判准则&lt;/strong&gt;：若仓库所在两个节点存储的refs数据完全一致，则称为这两个节点上的仓库数据一致。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;目前系统数据安全机制主要有以下几个特点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;a. 多活复制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前Code系统每个分片包含3个节点，即代码数据保证三副本，即使出现1~2台节点故障导致数据不可恢复的情况，也可通过其他节点进行数据恢复。我们采用了多活复制模式，即任何一个满足必要条件（&lt;/span&gt;&lt;span&gt;当前访问仓库在该节点的数据均重演至最新版本&lt;/span&gt;&lt;span&gt;）的机器节点均可以进行读写操作，与单主模式相比提高了写操作的吞吐量，节省了主备切换的成本，使部署、节点替换及异常恢复更加简单。多活复制模式约束有以下两点：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;“单写”机制&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在同一时刻，同一个仓库的写操作须在同一节点进行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据安全锁机制&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：若某仓库底层Git的操作出现异常错误，则在数据未恢复前，其后对该仓库的所有操作均会在该节点进行，会产生局部热点。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;多活复制主要由数据存储和数据压缩两个部分组成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;01 数据存储&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Git主要由objects和refs两类数据组成。objects数据为不可变数据，创建后为只读模式，以文件的形式存储于本地磁盘中；refs数据为可变数据，可以进行更新。两类数据分别采用不同数据源进行存储。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户在访问仓库时，如果某个objects没有在任何一个分支的关联链中，那么判定为不可达，对于不可达的objects，无需维护其一致性。不可达object的示例如下：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;289&quot; data-ratio=&quot;0.50078125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjRjAQbWEtcJe8fSicSVsp13FvQR12NYCcdJWM68s2bLB5NyqyEwe7CNA/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图12 不可达object示例图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02 数据压缩&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Code系统中，需要记录refs的变更日志以进行数据回放，保证系统的数据一致性。由于每个仓库的refs数据变换是比较频繁的，会产生大量的日志，从而造成存储压力。因而我们采用了日志压缩技术，减少不必要的数据开销，压缩方式如下图13所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;316&quot; data-ratio=&quot;0.546875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjw91z6LqgicxXnzibsQo3Y3YLEGquUYhMiboeSicFicMiaFYibrgTnfjXTmvQA/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图13 数据压缩&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;例如上图中的main分支，其初始状态为&lt;/span&gt;&lt;code&gt;&lt;span&gt;main -&amp;gt; a&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，第4个log为&lt;/span&gt;&lt;code&gt;&lt;span&gt;main -&amp;gt; e&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，第5个log为&lt;/span&gt;&lt;code&gt;&lt;span&gt;main -&amp;gt; f&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，则这3个log可以压缩为一个log，即&lt;/span&gt;&lt;code&gt;&lt;span&gt;main -&amp;gt; f&lt;/span&gt;&lt;/code&gt;&lt;span&gt;并将其应用于初始状态，与压缩前回放触发的结果是一致的，main都将指向值为f的commit。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;03 相关优化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在实践过程中，我们发现采用纯Git命令执行数据复制操作无法有效控制资源分配，因而从通信方式、并发形式及复制粒度等方面做了优化，从而提高了整体的数据复制效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;b. 跨机房备份&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Code系统每组分片的3个节点至少来自于两个不同的机房（&lt;/span&gt;&lt;span&gt;目前按照规范化部署，均改造为3机房&lt;/span&gt;&lt;span&gt;），若其中一个机房发生故障，仍可提供服务。我们对该架构做了针对性的容灾演练，通过演练验证了节点掉线对系统的影响较小，结合灵活的节点替换能力，可在30分钟内上线新的节点，达到容灾平衡状态。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;345&quot; data-ratio=&quot;0.5981235340109461&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjh5F0k5wwgh6udsibd3nssiaIrVhjJXKiaZhDefbY9m7Q5a3TUEdY1Lerg/640?wx_fmt=jpeg&quot; data-w=&quot;1279&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图14 跨机房备份&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;c. 数据热备&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Code系统提供数据热备机制，通过数据复制的方式，任何写入的新数据会立即同步到其余副本节点，基本“0”延迟，保证了用户视角的强一致性。数据同步机制是热备的关键，我们主要通过以下步骤实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;01 写操作阶段&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过引入仓库粒度的写锁，保证同一个仓库同时只能在一个节点执行写入操作，然后通过Git Internal Hook机制触发object数据的同步，并持久化记录refs数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;副本节点通过读取持久化的refs数据，重演操作，从而保持了refs数据与写入节点一致。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;126&quot; data-ratio=&quot;0.21796875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBj5FySl97Au0stDR8ACoKrpBKJ6XQPyVasaE8icBg1ibN8dSEz5F209xmw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图15 写操作步骤&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02 读操作阶段&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果当前仓库持有写锁，则直接路由至持有写锁的节点读取数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果未持有写锁，则用各个节点的版本和数据源存储的版本数据进行对比，将版本大于等于数据源存储的最新版本的所有节点作为候选路由节点，并采用负载均衡算法进行路由；如果没有符合条件的节点则需进行同步补偿，待补偿成功后再进行路由选择 。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;262&quot; data-ratio=&quot;0.45390625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjlmZxIXqnZbByO3Xo4QMyGldXlicSAwKzamv6OibDPoRlknGia59RyvbBQ/640?wx_fmt=jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图16 读操作步骤&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;03 相关优化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在最初实现中，我们采用了无状态同步，发现存在同步任务被多次执行的情况，后续通过任务前置检查等方式避免了不必要的数据同步任务，最终减少了50%的同步任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;d. 数据巡检&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据巡检是保证系统平稳运行，数据安全可靠必不可少的一个环节，它可以及早地发现系统中潜在的隐患。巡检服务作为Code系统的核心服务，在降低数据风险，提高系统服务的稳定性方面起到了关键作用。对于巡检服务，我们主要从以下几个方面进行考虑：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;透明性&lt;/strong&gt;：尽可能地避免对用户的正常请求产生影响，减少不必要的干扰，对于系统访问可以做到平稳可控。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;可靠性&lt;/strong&gt;：作为数据安全的重要服务，它自身也要做到弹性伸缩，多点容灾，具有高可用的特性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;可维护性&lt;/strong&gt;：对于数据巡检发现的问题，能够通过有效手段进行处理。同时要提高巡检服务的效率，随着系统架构的迭代出新、模块升级，巡检服务要随之更新，从而做到有效的保障。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;综合以上几点，我们采用了无状态的服务架构，提供定点巡检、全量巡检、定时巡检等模式保障数据安全。其中巡检的数据主要分为以下两类：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;refs数据&lt;/strong&gt;：根据数据一致性评判准则，refs数据是Git核心数据，因而它的检验是必不可少的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;版本数据&lt;/strong&gt;：Code系统是基于版本进行读写路由的，因而当版本过大时，可能会产生大量的数据同步，为了避免突增同步请求对系统造成一定的IO抖动，监控版本差距是尤为必要的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;巡检服务的整体架构如下图17所示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;577&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;303&quot; data-ratio=&quot;0.52421875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUAY0nsu0tns1VKRLjV5iaBjjaia6A28ZTiaIuHHVQRBk9OLGLBhJ47U3UmNurSfXmmb5XZHJkkHjANw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图17 巡检模块&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 总结&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;本文系统性地介绍了美团在Code系统演进过程中面临的扩展性和可用性两大瓶颈，并分别针对上述两类瓶颈和对应的挑战，详细阐述了解决方案和落地的实践经验。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;基于上述的架构改造实践，目前美团代码托管平台实现了仓库容量水平扩展、负载自主均衡等特性，稳定支撑着研发流程规范的落地。我们未来会在支撑研发效率，保障研发安全方面继续进行探索和演进，争取积累更多宝贵的实践经验，后续再跟大家分享。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. 未来展望&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong/&gt;&lt;strong&gt;自动化运维&lt;/strong&gt;：目前系统的运维机制自动化程度低，我们希望未来可以自动检出系统异常并进行恢复，其中包括数据修复、自动扩容及热点迁移等功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong/&gt;&lt;strong&gt;提供代码领域最佳实践&lt;/strong&gt;：依托研发工具平台，持续推动美团研发流程规范的迭代更新，沉淀最佳实践并提供有力的工具支撑。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;代码安全&lt;/strong&gt;：与信息安全团队紧密合作，提供更为完备的安全控制策略，包括代码扫描、漏洞自动修复、危险行为预警等功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6. 本文作者及团队简介&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;潘陶、费翔、丹丹、毛强等，来自基础研发平台-研发质量与效率团队。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;美团研发质量与效率团队，负责公司研发效能领域平台和工具的建设（&lt;/span&gt;&lt;span&gt;包括研发需求管理工具、CI/CD流水线、分布式代码托管平台、多语言构建工具、发布平台、测试环境管理平台、全链路压测平台等&lt;/span&gt;&lt;span&gt;），致力于不断推进优秀的研发理念和工程实践，建设一流的工程基础设施。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;也许你还想看&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  | &lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651750945&amp;amp;idx=1&amp;amp;sn=713f16c46065db1f831a495ffb1d9a78&amp;amp;chksm=bd125b6c8a65d27adb13bb234f027d619950a979259ae1c035427c4c025c95e26d7485194232&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;美团BERT的探索和实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt;&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651751586&amp;amp;idx=1&amp;amp;sn=a61c9da125e9b7e68473b32e0278b0ea&amp;amp;chksm=bd125def8a65d4f9d20b682345365d5001e9c863d5046acf683da6116b265d168c0340754fc9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Transformer 在美团搜索排序中的实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651763427&amp;amp;idx=1&amp;amp;sn=b06da2382ffb70bfab0a9ecabe36c540&amp;amp;chksm=bd126bae8a65e2b845a615f5d192d97d027321a9f350caca607ccd696962fb655fbbc73e4b3b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;常识性概念图谱建设以及在美团场景中的应用&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阅读更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765958&amp;amp;idx=1&amp;amp;sn=8201546812e5a95a2bee9dffc6d12f00&amp;amp;chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;前端&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://t.1yb.co/jo7v&quot; textvalue=&quot; 安全&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765981&amp;amp;idx=1&amp;amp;sn=c2dd86f15dee2cbbc89e27677d985060&amp;amp;chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;算‍法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;算法&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765982&amp;amp;idx=1&amp;amp;sn=231b41f653ac7959f3e3b8213dcec2b0&amp;amp;chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;后端&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765964&amp;amp;idx=1&amp;amp;sn=ab6d8db147234fe57f27dd46eec40fef&amp;amp;chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数‍据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;数据&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765965&amp;amp;idx=1&amp;amp;sn=37e0c56c8b080146ce5249243bfd84d8&amp;amp;chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;安‍全&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;安全&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765972&amp;amp;idx=1&amp;amp;sn=afe02ec92762c1ce18740d03324c4ac3&amp;amp;chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;And‍roid&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;Android&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765973&amp;amp;idx=1&amp;amp;sn=32a23bf1d278dda0398f993ab60a697e&amp;amp;chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;iO‍S&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;iOS&lt;/a&gt;&lt;span&gt; &lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765963&amp;amp;idx=1&amp;amp;sn=a3de9ef267d07d94118c1611776a4b28&amp;amp;chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运‍维&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;运维&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765974&amp;amp;idx=1&amp;amp;sn=763c1e37d04acffd0142a2852ecfb000&amp;amp;chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;测‍试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MjM5NjQ5MTI5OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVGibnsaEib3aNlqF0tOrA2RGEmNSbia2nnohE4Tpf95UyTiaSjDVbHRfY8WNBeTuLLTaVdSckkNyEx1Q/0?wx_fmt=png&quot; data-nickname=&quot;美团技术团队&quot; data-alias=&quot;meituantech&quot; data-signature=&quot;10000+工程师，如何支撑中国领先的生活服务电子商务平台？数亿消费者、数百万商户、2000多个行业背后是哪些技术在支撑？这里是美团、大众点评、美团外卖、美团优选等技术团队对外交流的窗口。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>90740a030df61f1f5499388e35d5029c</guid>
<title>通过Java技术手段，某程序员发现自己被绿了！</title>
<link>https://toutiao.io/k/nvkx1zu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89434&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMzgxOTQ5NA==&amp;amp;mid=2247553377&amp;amp;idx=2&amp;amp;sn=90c23da74328753c43d46f9983da9230&amp;amp;chksm=e8fd8d68df8a047eb0379b17ef619ad2e8d05b0c0ba1e571b57b13c85edd0a004128e20fb366&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;今早看到CSDN里推荐的Python获取女朋友发来加班拍照定位地址是酒店的段子，本来准备验证下，顺便练练手的，最后安装执行pip install json报没有指定版本号。一怒之下搞我大JAVA，验证可行与场景体遐想。废话不多说，先上硬货。&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;今早，看到CSDN里推荐的Python获取女朋友发来加班拍照定位地址是酒店的段子，本来准备验证下，顺便练练手的，最后，安装执行pip install json报没有指定版本号。一怒之下搞我大JAVA，验证可行与场景体遐想。废话不多说，先上硬货。&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;# 依赖导入&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从博文上看是exifread模块，找我大java的对应的jar，发现metadata-extractor，而且官方还在持续更新，最近的jar是今年的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.284375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Kj1ENURrLMxaq8ysNFe12Cib37CupZJHJhfeKdaIVEp7KzSO0wQ7tVyEibLbFU9I00ArNDOLlqh1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个元数据提取jar非常强大，还支持视频信息的提取，看看官方介绍：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看到没，第一个示例，就写的支持我大JAVA，让我犹如鸡血冲顶，在支持同事联调事件工单的同时，大肝这块。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.drewnoakes&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;metadata-extractor&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.16.0&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;# 准备工作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、室外空旷地点打开GPS&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、百度地图、北斗伴验证已连接到GPS定位&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.870020964360587&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Kj1ENURrLMxaq8ysNFe12d6CRjVThKLhK23Lvq8SNaljWeek1AUibzxianJaBHr83CUaWzD6rYRcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;477&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.8778947368421053&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Kj1ENURrLMxaq8ysNFe12ru8B28tfT7X2I4uyRwic4oKBzxnXWmbcLR6TU6XmyRkE3eo4xAjlQIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;475&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、设置手机带的照相机开启位置信息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.7890466531440161&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Kj1ENURrLMxaq8ysNFe12wrCu4Xlk2ticjzlbeYcR7Xvq2BN88nWTMfQB9ycxJEpYnJKQAC6SI8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、拍照一张顺便查看照片详情&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.793939393939394&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Kj1ENURrLMxaq8ysNFe12VYnSaHRGqvlqhl4ErasETefyM8MnGfXVHKqShJBMpb1H6XQZxr6ic4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;495&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里一定要确定拍的照片的详情时有经纬度信息的，如果没有，你针对你的手机在CSDN里搜索下怎么设置。这里顺便提下，CSDN的浏览器插件真香。简直就是我们技术人事的福音，再以不用担心某某度的广告之类导致找东西费劲了，而且它很包容，还时可以选择自己喜欢的搜索引擎的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.58046875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Kj1ENURrLMxaq8ysNFe12ypX2CvXafdLlfiaiaiaVFugtBByQpaTBwP1IgDyl8Yg4O3qCDVyib878rg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;# 示例demo&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里先演示这个元数据提取jar能提取到的信息，顺便把取到的经纬度通过百度转地址。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为是demo，没有业务，我这里就直接在测试类里干了。没有什么业务，不涉及什么机密，可以上全码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;package com.easylinkin.bm.extractor;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.alibaba.fastjson.JSONObject;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.drew.imaging.ImageMetadataReader;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.drew.imaging.ImageProcessingException;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.drew.metadata.Directory;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.drew.metadata.Metadata;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.drew.metadata.Tag;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.easylinkin.bm.util.HttpUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; lombok.extern.slf4j.Slf4j;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__type&quot;&gt;Slf4j&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ImgTestCode&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;File&lt;/span&gt; file = new &lt;span class=&quot;code-snippet__type&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;C:\\Users\\zhengwen\\Desktop\\test\\IMG_20210820_093958.jpg&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        readImageInfo(file);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; void readImageInfo(&lt;span class=&quot;code-snippet__type&quot;&gt;File&lt;/span&gt; file) &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;ImageProcessingException&lt;/span&gt;, &lt;span class=&quot;code-snippet__type&quot;&gt;Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Metadata&lt;/span&gt; metadata = &lt;span class=&quot;code-snippet__type&quot;&gt;ImageMetadataReader&lt;/span&gt;.readMetadata(file);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.out.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;---打印全部详情---&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__type&quot;&gt;Directory&lt;/span&gt; directory : metadata.getDirectories()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__type&quot;&gt;Tag&lt;/span&gt; tag : directory.getTags()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.out.format(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;[%s] - %s = %s\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        directory.getName(), tag.getTagName(), tag.getDescription());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (directory.hasErrors()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; error : directory.getErrors()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.format(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ERROR: %s&quot;&lt;/span&gt;, error);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.out.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;--打印常用信息---&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt; lat = null;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt; lng = null;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__type&quot;&gt;Directory&lt;/span&gt; directory : metadata.getDirectories()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__type&quot;&gt;Tag&lt;/span&gt; tag : directory.getTags()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; tagName = tag.getTagName();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; desc = tag.getDescription(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (tagName.equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Image Height&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;图片高度: &quot;&lt;/span&gt; + desc);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (tagName.equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Image Width&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;图片宽度: &quot;&lt;/span&gt; + desc);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (tagName.equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Date/Time Original&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;拍摄时间: &quot;&lt;/span&gt; + desc);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (tagName.equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GPS Latitude&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;纬度 : &quot;&lt;/span&gt; + desc);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;纬度(度分秒格式) : &quot;&lt;/span&gt; + pointToLatlong(desc));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    lat = latLng2Decimal(desc);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (tagName.equals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GPS Longitude&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;经度: &quot;&lt;/span&gt; + desc);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;经度(度分秒格式): &quot;&lt;/span&gt; + pointToLatlong(desc));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    lng = latLng2Decimal(desc);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;--经纬度转地址--&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        convertGpsToLoaction(lat, lng);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; pointToLatlong(&lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; point) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt; du = &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt;.parseDouble(point.substring(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, point.indexOf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;°&quot;&lt;/span&gt;)).trim());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt; fen = &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt;.parseDouble(point.substring(point.indexOf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;°&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, point.indexOf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&#x27;&quot;&lt;/span&gt;)).trim());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt; miao = &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt;.parseDouble(point.substring(point.indexOf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&#x27;&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, point.indexOf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;)).trim());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt; duStr = du + fen / &lt;span class=&quot;code-snippet__number&quot;&gt;60&lt;/span&gt; + miao / &lt;span class=&quot;code-snippet__number&quot;&gt;60&lt;/span&gt; / &lt;span class=&quot;code-snippet__number&quot;&gt;60&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; duStr.&lt;span class=&quot;code-snippet__built_in&quot;&gt;toString&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; double latLng2Decimal(&lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; gps) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; a = gps.&lt;span class=&quot;code-snippet__built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;°&quot;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].replace(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; b = gps.&lt;span class=&quot;code-snippet__built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;°&quot;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;code-snippet__built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&#x27;&quot;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].replace(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; = gps.&lt;span class=&quot;code-snippet__built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;°&quot;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;code-snippet__built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&#x27;&quot;&lt;/span&gt;)[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;].replace(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;).replace(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        double gps_dou = &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt;.parseDouble(a) + &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt;.parseDouble(b) / &lt;span class=&quot;code-snippet__number&quot;&gt;60&lt;/span&gt; + &lt;span class=&quot;code-snippet__type&quot;&gt;Double&lt;/span&gt;.parseDouble(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;) / &lt;span class=&quot;code-snippet__number&quot;&gt;60&lt;/span&gt; / &lt;span class=&quot;code-snippet__number&quot;&gt;60&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; gps_dou;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; void convertGpsToLoaction(double gps_latitude, double gps_longitude) &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;code-snippet__type&quot;&gt;IOException&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; apiKey = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;YNxcSCAphFvuPD4LwcgWXwC3SEZZc7Ra&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; res = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;String&lt;/span&gt; url = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://api.map.baidu.com/reverse_geocoding/v3/?ak=&quot;&lt;/span&gt; + apiKey + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&amp;amp;output=json&amp;amp;coordtype=wgs84ll&amp;amp;location=&quot;&lt;/span&gt; + (gps_latitude + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;,&quot;&lt;/span&gt; + gps_longitude);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;【url】&quot;&lt;/span&gt; + url);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        res = &lt;span class=&quot;code-snippet__type&quot;&gt;HttpUtils&lt;/span&gt;.httpGet(url);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;JSONObject&lt;/span&gt; object = &lt;span class=&quot;code-snippet__type&quot;&gt;JSONObject&lt;/span&gt;.parseObject(res);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (object.containsKey(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;result&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__type&quot;&gt;JSONObject&lt;/span&gt; result = object.getJSONObject(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;result&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (result.containsKey(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;addressComponent&quot;&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__type&quot;&gt;JSONObject&lt;/span&gt; address = object.getJSONObject(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;result&quot;&lt;/span&gt;).getJSONObject(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;addressComponent&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__type&quot;&gt;System&lt;/span&gt;.err.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;拍摄地点：&quot;&lt;/span&gt; + address.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;country&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt; + address.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;province&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt; + address.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;city&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt; + address.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;district&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        + address.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;street&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt; + result.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;formatted_address&quot;&lt;/span&gt;) + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; &quot;&lt;/span&gt; + result.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;business&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;控制台打印：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd5Kj1ENURrLMxaq8ysNFe12YoOpFnOhbgtErqD27975QKTV14OLW5udtsQeGJbs8B3NGuWQcxf0iag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMzgxOTQ5NA==&amp;amp;mid=2247553377&amp;amp;idx=2&amp;amp;sn=90c23da74328753c43d46f9983da9230&amp;amp;chksm=e8fd8d68df8a047eb0379b17ef619ad2e8d05b0c0ba1e571b57b13c85edd0a004128e20fb366&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;下面贴出详细内容：&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;下面贴出详细内容：&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;com.easylinkin.bm.extractor.ImgTestCode&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;---打印全部详情---&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[JPEG] - Compression Type = Baseline&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[JPEG] - Data Precision = 8 bits&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[JPEG] - Image Height = 4032 pixels&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[JPEG] - Image Width = 3024 pixels&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[JPEG] - Number of Components = 3&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[JPEG] - Component 1 = Y component: Quantization table 0, Sampling factors 2 horiz/2 vert&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[JPEG] - Component 2 = Cb component: Quantization table 1, Sampling factors 1 horiz/1 vert&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[JPEG] - Component 3 = Cr component: Quantization table 1, Sampling factors 1 horiz/1 vert&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif IFD0] - Date/Time = 2021:08:20 09:39:58&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif IFD0] - Model = YOTA Y3&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif IFD0] - YCbCr Positioning = Center of pixel array&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif IFD0] - Resolution Unit = Inch&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif IFD0] - Y Resolution = 72 dots per inch&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif IFD0] - X Resolution = 72 dots per inch&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif IFD0] - Make = YOTA&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Date Stamp = 2021:08:20&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Altitude Ref = Below sea level&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Longitude Ref = E&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Longitude = 114° 24&#x27; 9.61&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Processing Method = ASCII&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Latitude Ref = N&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Time-Stamp = 01:39:46.000 UTC&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Altitude = 21 metres&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GPS] - GPS Latitude = 30° 28&#x27; 40.67&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Color Space = sRGB&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - F-Number = f/1.9&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Date/Time Digitized = 2021:08:20 09:39:58&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Focal Length = 3.9 mm&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Aperture Value = f/1.9&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Exposure Mode = Auto exposure&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Sub-Sec Time Digitized = 819350&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Exif Image Height = 4032 pixels&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Focal Length 35 = 23 mm&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Scene Capture Type = Standard&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Sub-Sec Time Original = 819350&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Exposure Program = Unknown (0)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - White Balance Mode = Auto white balance&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Exif Image Width = 3024 pixels&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Sub-Sec Time = 819350&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Shutter Speed Value = 1/1022 sec&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Metering Mode = Center weighted average&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Date/Time Original = 2021:08:20 09:39:58&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Components Configuration = YCbCr&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Exif Version = 2.20&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Flash = Flash did not fire&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Brightness Value = 0.0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - ISO Speed Ratings = 103&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Sensing Method = One-chip color area sensor&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - FlashPix Version = 1.00&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif SubIFD] - Exposure Time = 1/1023 sec&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Interoperability] - Interoperability Index = Recommended Exif Interoperability Rules (ExifR98)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Interoperability] - Interoperability Version = 1.00&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif Thumbnail] - Y Resolution = 72 dots per inch&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif Thumbnail] - Thumbnail Length = 21538 bytes&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif Thumbnail] - Thumbnail Offset = 959 bytes&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif Thumbnail] - Compression = JPEG (old-style)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif Thumbnail] - Resolution Unit = Inch&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Exif Thumbnail] - X Resolution = 72 dots per inch&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Huffman] - Number of Tables = 4 Huffman tables&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[File Type] - Detected File Type Name = JPEG&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[File Type] - Detected File Type Long Name = Joint Photographic Experts Group&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[File Type] - Detected MIME Type = image/jpeg&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[File Type] - Expected File Name Extension = jpg&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[File] - File Name = IMG_20210820_093958.jpg&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[File] - File Size = 5215044 bytes&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[File] - File Modified Date = 星期五 八月 20 09:39:59 +08:00 2021&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;--打印常用信息---&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;初始化HttpClientTest~~~开始&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;图片高度: 4032 pixels&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;图片宽度: 3024 pixels&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;经度: 114° 24&#x27; 9.61&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;经度(度分秒格式): 114.40266944444446&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;纬度 : 30° 28&#x27; 40.67&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;纬度(度分秒格式) : 30.477963888888887&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;拍摄时间: 2021:08:20 09:39:58&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;--经纬度转地址--&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;【url】http://api.map.baidu.com/reverse_geocoding/v3/?ak=YNxcSCAphFvuPD4LwcgWXwC3SEZZc7Ra&amp;amp;output=json&amp;amp;coordtype=wgs84ll&amp;amp;location=30.477963888888887,114.40266944444446&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;初始化HttpClientTest~~~结束&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;拍摄地点：中国 湖北省 武汉市 洪山区 软件园路 湖北省武汉市洪山区软件园路9 关山,光谷天地&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的提取到的内容我就不解释了,应该看得懂，不懂的，可以翻译英文，或者查API看打印的是啥。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其他文件我就不演示了，有兴趣的可以自己试试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的百度地图的AK就先放这里，方便大家验证，免得说我骗人，反正我也是免费用的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后再说一句，图片发送要么压缩到压缩包再发送，要么用数据线从手机里拷出来。我这里先用微信发的，基本上信息都被抹除了（在电脑上查看图片详情，其实也可以看到经纬度信息的）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还有，我还有个苹果手机，其实也是可以拍有地理位置信息的照片的，要打开隐私里的定位，授权照相机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;# 总结与衍生想法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个怎么说呢，还是很不错的。用到我们的工作中的话，我们觉得可以替代我们之前做的一个打点巡检的，到达巡检位置拍张照片再配合机器码，不怕你让别人代拍照片了。还有考勤的公出单、外勤等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外还想到这出门在外爱拍照的娃们，你们的照片放到云存储上，然后如果有无良服务商，基本可以把你的轨迹通过你上传的照片时间绘制出来。。。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好了，这个就分享到这里。这里其实还给我一个最大的感受就是，如果我不知道A就不会想到B。要是我早知道图片可以携带的信息，或者知道照相机软件可以获取的信息，可能可以针对这些早点做点什么。。。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>458230540b9adaed315ee541216bdbd4</guid>
<title>两万字长文，史上最全 C++ 年度总结！</title>
<link>https://toutiao.io/k/0bv2aok</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05669291338582677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3nr1VNxfeqxVOw2nPJHVH4xeZibzPY5F4ibOuOZLMsUMrzIibGB6KMw7EurSKv6DkrtLzuhYdBa30A9Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;635&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-mpa-category=&quot;正文&quot; data-mpa-template-id=&quot;1440&quot;&gt;&lt;section label=&quot;powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;【编者按】C++ 四十年，历久弥新长盛不衰。几日前 CSDN 组织了一次 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;amp;mid=2650950355&amp;amp;idx=2&amp;amp;sn=7a08619413ede08779002798bb00648f&amp;amp;chksm=bd5a3b008a2db2167eb4e4565c03714dffa0aa4fd690526b0e847a2d6e5789b119d3faf78300&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;C++ 直播对话&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;C++ 直播对话&lt;/a&gt;，在非常短的时间内就吸引了两万多开发者观看，足以说明 C++ 在开发者中的影响力。本文的四位作者联合撰文，写下了这篇两万字的长文，深度总结了 C++ 的新进展，以及未来的演进方向，值得所有开发者收藏。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作者 | 祁宇  许传奇 袁秩昊 卜恪&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;责编 | 唐小引&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;出品 | 《新程序员》编辑部&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不平凡的 2022 年已经过去了，受到疫情影响，C++ 标准委员会（&lt;/span&gt;&lt;span&gt;以下简称委员会&lt;/span&gt;&lt;span&gt;）只能在线上 Review 提案，效率较低，但在新标准的制定上仍然取得了一些进展。同时，C++20 的 Modules 和 Coroutine 也有一些新的突破，本文将集中介绍 C++ 最新的进展以及大家极为关注的点，譬如：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;过去的一年 C++ 社区也有一些大新闻，比如 Google 推出的编程语言 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;amp;mid=2650930879&amp;amp;idx=1&amp;amp;sn=6faab3ff738f20c06e9532fd7e0bbfcd&amp;amp;chksm=bd598f6c8a2e067a490c99816942697d33061d60086f9540cab71ebf5cddff4ab51b9a669c23&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Carbon&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Carbon&lt;/a&gt; 号称下一个 C++，它又会对 C++造成什么影响呢？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;C++20 发布已经快两年了，相应的 C++20 库有没有跟上呢？过去这一年里 C++ 社区有哪些值得推荐的 C++20 库呢？我们也会重点推荐一些 C++20 基础库，可以帮助用户快速构建高性能 C++ 应用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们已经进入了 2023 年，C++23 会在今年发布，它又有哪些值得关注的新特性呢？本文也将介绍 C++23 相关的特性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;C++ 未来比较重要特性（&lt;/span&gt;&lt;span&gt;如 executors&lt;/span&gt;&lt;span&gt;）现在又是什么状态？相信这也是大家比较关心的，在本篇 C++ 的年度总结中，我们都将为你细细道来。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qkyxEibG4Uy3ibtP06LgbDfGUObnDFMEz9icU556dwCZyNgtwXH29EwH6Q/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;23&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;38&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.6521739130434783&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3mt1fiaOMf2g03Alvsd2Mviae2vicgS4NeBQzQy1oUS7qdLcD5uYRsJIpfqB1oZIOY3yXunqoBnantPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;23&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2022 年度 C++ 标准关键新进展&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 2022 年 2 月，C++23 就进入了 feature freeze（&lt;/span&gt;&lt;span&gt;功能冻结期&lt;/span&gt;&lt;span&gt;），即在这之后 C++23 将不会接受除了 Defect Resolution 之外的任何更改。委员会的精力将主要集中在现有的 Bug Fix 以及 C++26 中。在 2022 年 11 月，委员会也开启自全球大疫情以来的第一次线下集会。在过去的三年，因为疫情的原因，委员会放弃了往常线下聚会为主的工作方式，改为以线上工作为主。根据大家的反馈以及最后没能达成 C++23 的规划来看，疫情还是对委员会的工作效率造成了不小的影响。而 11 月重启的线下聚会或许也能表明委员会的工作将会重新走入正轨。本节将会提及一些过去一年中在标准方面相对比较重大或较为有意思的改动。由于笔者能力与兴趣原因，可能会有遗漏，望大家见谅。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（1）C++23 的探险者&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;三年前我们在给 C++23 圈定目标时，谁也不知道这个新版本到底要以何种方式应对未来世界的挑战。但现在，事情已经很清楚了：&lt;strong&gt;C++23 要从其他编程语言社区抢人。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;std&lt;/span&gt;::println(&lt;span&gt;&quot;hello, world&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;用到的新特性：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;语言核心的现代化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果说 C++11 看起来像一个新语言，C++23 看起来就像是某个你很熟悉的编程语言。&lt;strong&gt;是的，我们连 Hello World 都改了，学校里教 C++ 的书都得重写了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Path&lt;/span&gt;&lt;br/&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;auto&lt;/span&gt; &lt;span&gt;exists&lt;/span&gt;&lt;span&gt;(&lt;span&gt;this&lt;/span&gt; Path&amp;amp; self)&lt;/span&gt; -&amp;gt; &lt;span&gt;bool&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;auto&lt;/span&gt; &lt;span&gt;rename&lt;/span&gt;&lt;span&gt;(&lt;span&gt;this&lt;/span&gt; Path&amp;amp; self, string_view target)&lt;/span&gt; -&amp;gt; &lt;span&gt;void&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;auto&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt;(&lt;span&gt;this&lt;/span&gt; Path&amp;amp; self, &lt;span&gt;mode_t&lt;/span&gt; mode = &lt;span&gt;0777&lt;/span&gt;)&lt;/span&gt; -&amp;gt; &lt;span&gt;void&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;};&lt;strong/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你熟悉 Rust，它看起来就像是 Rust；如果你习惯加了 type hints 的 Python，它看起来就像 Python。这里的 this 仅仅是堆在 self 参数前一个关键字；self 不过是笔者自顾自取的一个参数名。这下 self.mode 和 mode 不会搞混了，至少在构造函数和虚函数之外的地方是如此。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用到的新特性：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但光看着像是不够的。C++ 这个名字就意味着，凡事都要做到更好，不单是和 C 相比。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;标准库与其他部分的协作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;谈谈我最近写 Python 遇到的事情，我看到一个 review 里有很多这样的语句：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;print(list(mapping.keys()))&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果 mapping == {&#x27;nice&#x27;: 1, &#x27;boat&#x27;: 2}，这个 print 就会打印 [&#x27;nice&#x27;, &#x27;boat&#x27;]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但为什么 print(mapping.keys()) 不行？试了一下，结果打印出：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;dict_keys([&#x27;nice&#x27;, &#x27;boat&#x27;])&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;好吧，虽然不是自己想要的，但也不算太糟。要说太糟的话，这个就有点太糟了：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(iter(mapping))&lt;br/&gt;&amp;lt;dict_keyiterator object at &lt;span&gt;0x6ffffe9683b0&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;除非是你自定义的生成器类型，否则都打印不出有意义的东西。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;fib&lt;/span&gt;&lt;span&gt;(n: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;...     a, b = &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;...     &lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; range(n):&lt;br/&gt;...         &lt;span&gt;yield&lt;/span&gt; a&lt;br/&gt;...         a, b = b, a + b&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; print(&lt;span&gt;f&#x27;fib: &lt;span&gt;{fib(&lt;span&gt;5&lt;/span&gt;)}&lt;/span&gt;&#x27;&lt;/span&gt;)&lt;br/&gt;fib: &amp;lt;generator object fib at &lt;span&gt;0x6ffffeeb19e0&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;但是 C++ 的话则灵活了许多：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;std&lt;/span&gt;::println(&lt;span&gt;&quot;{}&quot;&lt;/span&gt;, mapping | views::keys);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;打印：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;[&quot;nice&quot;, &quot;boat&quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;生成器：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;auto&lt;/span&gt; &lt;span&gt;fib&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; n)&lt;/span&gt; -&amp;gt; &lt;span&gt;std&lt;/span&gt;::generator&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;auto&lt;/span&gt; [a, b] = &lt;span&gt;std&lt;/span&gt;::tuple(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;auto&lt;/span&gt; _ : views::iota(&lt;span&gt;0&lt;/span&gt;, n))&lt;br/&gt;    {&lt;br/&gt;        co_yield a;&lt;br/&gt;        &lt;span&gt;std&lt;/span&gt;::tie(a, b) = &lt;span&gt;std&lt;/span&gt;::tuple(b, a + b);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/* ... */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;std&lt;/span&gt;::println(&lt;span&gt;&quot;fib: {}&quot;&lt;/span&gt;, fib(&lt;span&gt;5&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;打印：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;fib: [0, 1, 1, 2, 3]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不管是容器、view、生成器，还是 tuple 一类的异质容器，不论来自标准库还是第三方，都不需要为看到一点合理的输出从头实现一整个算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用到的新特性：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标准库生成器 std::generator&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;std::format 支持 ranges&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不足之处&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;黑了这么久 Python，还是得承认 Python 和 Rust 这样这样的语言，在让用户上手方面是积累了很多经验的。比如在程序遇到意料之外的错误时，runtime 能打印栈回溯。如果你在 Rust 中把一个字符串解析为 32 位整数：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; v = arg1.parse::&lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;i32&lt;/span&gt;&amp;gt;&lt;/span&gt;().unwrap();&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;若解析失败，程序运行时就可能看到这样的东西：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;thread &#x27;main&#x27; panicked at &#x27;called `Result::unwrap()` on an `Err` value: ParseIntError { kind: InvalidDigit }&#x27;, src/main.rs:5:37&lt;br/&gt;note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;设置环境变量 RUST_BACKTRACE=1 重新跑，没有调试器也能看到不少诊断信息：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;thread &#x27;main&#x27; panicked at &#x27;called `Result::unwrap()` on an `Err` value: ParseIntError { kind: InvalidDigit }&#x27;, src/main.rs:5:37&lt;br/&gt;stack backtrace:&lt;br/&gt;   0: rust_begin_unwind&lt;br/&gt;             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/std/src/panicking.rs:575:5&lt;br/&gt;   1: core::panicking::panic_fmt&lt;br/&gt;             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/core/src/panicking.rs:65:14&lt;br/&gt;   2: core::result::unwrap_failed&lt;br/&gt;             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/core/src/result.rs:1791:5&lt;br/&gt;   3: core::result::Result&amp;lt;T,E&amp;gt;::unwrap&lt;br/&gt;             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/core/src/result.rs:1113:23&lt;br/&gt;   4: playground::main&lt;br/&gt;             at ./src/main.rs:5:17&lt;br/&gt;   5: core::ops::function::FnOnce::call_once&lt;br/&gt;             at /rustc/90743e7298aca107ddaa0c202a4d3604e29bfeb6/library/core/src/ops/function.rs:251:5&lt;br/&gt;note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们可以在 C++ 里写一个几乎等价的 parse 函数：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;template&lt;/span&gt;&amp;lt;&lt;span&gt;std&lt;/span&gt;::integral T&amp;gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;auto&lt;/span&gt; &lt;span&gt;parse&lt;/span&gt;&lt;span&gt;(&lt;span&gt;std&lt;/span&gt;::string_view from)&lt;/span&gt; -&amp;gt; &lt;span&gt;std&lt;/span&gt;::expected&amp;lt;T, &lt;span&gt;std&lt;/span&gt;::errc&amp;gt; &lt;/span&gt;{&lt;br/&gt;    T to;&lt;br/&gt;    &lt;span&gt;auto&lt;/span&gt; ed = &lt;span&gt;std&lt;/span&gt;::to_address(from.end());&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;auto&lt;/span&gt; [ptr, ec] = &lt;span&gt;std&lt;/span&gt;::from_chars(from.data(), ed, to);&lt;br/&gt;        ec != &lt;span&gt;std&lt;/span&gt;::errc())&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::unexpected{ec};&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (ptr != ed)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::unexpected{&lt;span&gt;std&lt;/span&gt;::errc::invalid_argument};&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; to;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;然后试一试：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;auto&lt;/span&gt; v = parse&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;(arg1).value();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;但你只会看到：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;terminate called after throwing an instance of &lt;span&gt;&#x27;std::bad_expected_access&amp;lt;std::errc&amp;gt;&#x27;&lt;/span&gt;&lt;br/&gt;  what():  bad access to &lt;span&gt;std&lt;/span&gt;::expected without expected value&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;和 Rust 程序没开 RUST_BACKTRACE=1 时差不多，甚至没有行号。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;C++23 做了一些努力。你可以直接打印当前的栈回溯：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;std&lt;/span&gt;::println(&lt;span&gt;stderr&lt;/span&gt;, &lt;span&gt;&quot;{}&quot;&lt;/span&gt;, &lt;span&gt;std&lt;/span&gt;::stacktrace::current());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;但当前的栈 != 异常抛出时的栈；我期待 C++26 给出一个开箱即用的解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用到的新特性：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于 C++23，以上提到的许多特性，文章只展示了浮光掠影的一小部分，它们对 C++ 特殊的意义远远超出「制造一点熟悉感」；让一个语言的新版本中或大或小的特性保持正交、挖掘协同作用，是一项大工程。期待你能在 C++23 对 C++ 的应用产生深远影响之时从中获益。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）Executors&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Executors 算得上 C++ 标准提案中的明星提案了。它能获得如此高的期望度的原因之一可能是包括网络库、协程库在内的提案都需要依赖 Executors 提案。另一方面可能也说明大家对于一个统一的调度器接口的期望。在过去的三年内，由于提案过大、疫情导致只能线上 Review 等诸多缘由，Executors 提案的进度并不算快。在 2021 年 12 月至 2022 年 2 月，Executors 提案的作者们以时间不足、Executor 十分重大为由，发起了罕见的冲锋式 Review。然而委员会还是以提案过大、无法完成 Review 的理由拒绝了该提案进入 C++23，将其放入了 C++26 的周期内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然这一结果后续导致了不少微词，笔者依然觉得委员会的决定是理智和冷静的。一方面在过去包括 Modules、Concepts、Reflections 在内的诸多提案都被反复延迟过，感觉不到 Executors 需要特事特办的理由。另一方面，个人认为，“慢” 与其说是 C++ 特性发展的 Defect（&lt;/span&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;span&gt;），不如说是 C++ 特性发展的 Feature（&lt;/span&gt;&lt;span&gt;特征&lt;/span&gt;&lt;span&gt;）。毕竟对于程序语言来说，“乱” 是比 “慢” 可怕得多的事。更何况今年来 C++ 标准的发展速度其实已经非常快了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（3）SIMD&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;跳出 C++ 标准本身，&lt;strong&gt;异步化和并行化是当今 C++ 世界的两大浪潮&lt;/strong&gt;。对于 C++ 程序员来说，当你想显著地提高程序性能时，从异步化和并行化这两个方面开始思考是比较稳妥的方式。对于异步化而言，上面提到的 Executors 和下面提到的 Coroutines 都可算是相关的话题。对于并行化而言，无论是 GPU 加速、CPU SVE、编译器向量化优化亦或者是各种并行编程库（&lt;/span&gt;&lt;span&gt;例如 Open_MP&lt;/span&gt;&lt;span&gt;）都与并行化有关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再让我们回到 C++ 标准本身，与并行化相关的概念则在 Parallelism TS 当中。而 Parallelism TS 中的 SIMD 库则是距离我们最近的一部分。目前 SIMD 库已经脱离了 Parallelism TS ，之后的所有改动都将直接在 LEWG 中讨论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SIMD 库的意义在于将各种之前需要手写 SIMD instrinsic 的操作封装成跨平台的标准化街口。一方面调用函数接口肯定比手写 SIMD 指令要友好的多，而且库实现大概率会比手写的效率高。另一方面 SIMD 库的封装对于编译器向量化也会有好处。最后，SIMD 库的出现对于目前国内存在体系结构迁移需求的开发者们来说，会是一个非常大的福音。不然任何之前通过手写 SIMD 指令以获取性能提升的项目都会付出当初难以预料的成本。希望 SIMD 库可以如期进入 C++26。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（4）Concurrency v2 TS&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2022 年 2 月发布的 TS：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4895.pdf&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 2022 年 11 月的会议中，Concurrency v2 TS 的两个比较重要的变动是：RCU&lt;span&gt;（&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Read-copy-update&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;以及 std::hazard_pointers 将会脱离 Concurrency v2 TS，作为独立的 feature targeting C++26。RCU本身是 Linux 内核中的一种同步技术，支持并发地执行一个 Updater 以及多个 Reader 而不需要上锁，是一种很高效的同步机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而 hazard pointer 则是一种只允许单个写线程持有，多个读线程共享的指针，是 lock-free 编程中的重要数据结构。RCU 和 hazard pointer 都是在实践中被长期验证过的高效、经典的同步数据结构，如果能成功被加入标准的话，想必对于 C++ 的用户们来说会带来不少用处。哪怕我们在日常开发中不会用到这种高级的同步数据结构，我们在引用的库中应该也能得到 RCU 和 hazard pointer 标准化的好处。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了 RCU 和 std::hazard_pointer 之外，Concurrency TS 中还将包含 synchronized_value&amp;lt;T&amp;gt;，byte-wise atomic memcpy 以及 asymetric fence 等等组件。总体来说，值得期待。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（5）Library Fundamentals v3 TS&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2022 年 7 月通过的基础库扩展 v3：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4908.html&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Library Fundamentals v2 TS，即 Library Fundamntals TS 的上一次发布，还是在 2017 年。而 Library Fundamentals v3 TS 相比较于 Library Fundamentals v2 TS 相比，只增加了一个新 feature：（scope guard）。同时 Library Fundamentals v3 TS 还保留着以下 Library Fundamentals v2 TS 中的组件：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;detection idiom&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;propagate_const&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;observer_ptr&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ostream joiner&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;sample&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;shuffle&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;randint&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;reseed&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;委员会认为 Library Fundamentals TS 的发展效率总体比较低，同时在委员会的讨论中，Library Fundamentals TS 组件的优先级也低于直接单独发的库提案。最后在 2022 年 11 月的会议中，委员会宣布 Library Fundamentals v3 TS 将会是最后的 Library Fundamentals TS，这表示 Library Fundamentals TS 将不会再有任何发展。之后，如果 Library Fundamentals TS 中的某些组件比较引人感兴趣的话，就应该直接作为单独的提案提出了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（6）Transactional Memory TS&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2022 年 11 月发布的 Transaction Memory v2 TS：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4923.pdf&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Transactional Memory 是计算机科学中的重要概念。在有了并发编程之后，Transactional Memory 将会容易很多。但如果没有 hardware 支持的 transcational memory，依靠软件模拟的 Transactional Memory 的开销很大而显得使用 Transactional Memory 的好处并不明显，不太有意思。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而随着支持 Transactional Memory 的商用级处理器日渐出现之后（&lt;/span&gt;&lt;span&gt;例如 Arm 的 Hardware Transactional Memory Extension 以及 Intel 的 Transactional Synchronization Extensions &lt;/span&gt;&lt;span&gt;），Transactional Memory 的分量与前景也在肉眼可见的加重。C++委员会也及时地加快了对 Transactional Memory 标准化的设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在对 Transactional Memory 具体的设计上，C++ 委员会的选择出人意料地非常简洁和克制。基本只引入了一个语法：atomic do {}。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    atomic &lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;        ++i;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; i;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不需要任何解释，读者看到这段代码后的理解与实际的语义基本差不了多少。而且和其他 C++ 近年新引入的语法相比，背后并没有那么多的弯弯绕绕。在笔者所知的近年来所有新 C++ feature 当中，Transactional Memory 的设计是最简洁的，对标准文本的影响也是最小的。而在具体的语义上，委员会的设计也给实现者留下了非常巨大的空间。唯一美中不足的是，目前还看不到任何实现和实现的迹象，可能只能等硬件公司的开发者们将此事提上日程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（7）C++ Ecosystem International Standard&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;C++ 标准委员会的核心产出是一份说明 C++ 核心语言与 C++ 标准库定义的文档。除此之外的事情，原则上都不归委员会管了。虽然 C++ 程序员们谈起 C++ 标准时往往会带着敬畏的态度，但 &lt;strong&gt;C++ 今日的成功决不只取决于 C++ 语言本身，更取决于 C++ 的生态。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，对于绝大多数 C++ 程序员来说，他们阅读标准的时间应该是远小于他们与编译器、链接器、构建系统、包管理器、调试器、静态分析工具与动态分析工具等等工具打交道的时间的。这里我们暂且将 C++ 生态的概念限制为 C++ 工具的生态。然而与有着统一标准 C++ 语言规范不同，C++ 工具间的交互能力（&lt;/span&gt;&lt;span&gt;interoperability&lt;/span&gt;&lt;span&gt;）的规范只能说是经验主义、约定俗成的。这对于现有 C++ 工具的维护者来说是个不小的负担。而对于新 C++ 工具的开发者而言，更是要花上大量的时间去关注非规范的 C++ 工具生态，这给新 C++ 工具的开发带来了非常重的、额外的、其实本不必要的负担。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个问题在 C++ 引入 Modules 后变得更严峻了，因为 Modules 会给现有的几乎所有 C++ 工具带来全新的挑战。为了解决以上提到的这些问题，委员会提出有必要制订 C++ Ecosystem International Standard&lt;/span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;span&gt;来为 C++ 生态制订明确的规范。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然目前距离第一版规范的面世还遥遥无期，或者说 C++ Ecosystem International Standard 应该包含那些部分都还没有完全确定下来。但我们相信，这一定是 C++ 发展历史上极为重要的一步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qOfecjttGpW3J3tvO19FFTIAqx9ibBwTIZv6fzIvOlLJUicfaicjQJpZ1w/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;28&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;39&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4444444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3mt1fiaOMf2g03Alvsd2MviaemoVIqLoypYreD7xkViahTg0h9JABibWE7NeZOzo06xiaPUhZQPxCKdCicA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;27&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Modules&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-mpa-category=&quot;正文&quot; data-mpa-template-id=&quot;1440&quot;&gt;&lt;section label=&quot;powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Header files are a major source of complexity, errors caused by dependencies, and slow compilation. Modules address all three problems.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;头文件是复杂性、依赖错误、编译太慢的主要根源，而 Modules 则能够解决了这三个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;—— Bjarne Stroustrup，C++ 之父&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Modules 被很多人认为是 C++20 中最重要的特性，同时也是对 C++未来影响最大的特性。原因之一可能是因为只能使用文本替换以引入依赖的 C++ 看起来确实很不 Modern。在笔者所知的所有主流高级语言中，除了 C++ 之外，唯一还使用 Modules 的语言是 C 语言，就连 Fortran 也都早就用上了 Modules。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但与之相对应的，Modules 也是 C++20 四大特性（&lt;/span&gt;&lt;span&gt;Modules、Coroutines、Concepts 和 Ranges&lt;/span&gt;&lt;span&gt;）中被各个编译器支持地最慢、最不完善的一个特性。我们在本节中会先对 Modules 语法做一个简单的介绍、之后会介绍 Modules 在编译器、构建系统及其他工具中的支持情况，再对 Modules 的未来做一个展望。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）语法简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Modules 可简单分类为 Named Modules 和 Header Units。对文字比较敏感的朋友看到这句话肯定会觉得很难受。为什么 Units 和  Modules 是并列的呢？这里指的其实是 import 关键字后可接的内容。import后可接 module-name（&lt;/span&gt;&lt;span&gt;及 partition-name&lt;/span&gt;&lt;span&gt;）和 header-name。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;严格来说，Modules 可分为 Named Modules 和 Unnamed Modules（&lt;/span&gt;&lt;span&gt;也叫 Global Modules&lt;/span&gt;&lt;span&gt;）。Named Modules 是由 module-unit 声明的。module-unit 是一类特殊的 translation-unit。而 header-unit 则是在 import header-name; 时合成（&lt;/span&gt;&lt;span&gt;Synthesized&lt;/span&gt;&lt;span&gt;）的一种特殊 translation-unit，同时 header-unit 中的声明均视为位于 Global Module 中。这样一来，大家也就能理解为什么 Modules 会被分类为 Named Modules 和 Header Units 了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来我们会简单介绍下 Modules 的语法，但不会引入所有细节，只是希望大家通过这一小节能对 Modules 有个直观的感受。大家感兴趣的话可以再找更进阶的材料学习。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Header Units&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Header Units 的语法为：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; header-name;&lt;br/&gt;header-name:&lt;br/&gt;    &amp;lt; h-&lt;span&gt;char&lt;/span&gt;-sequence &amp;gt;&lt;br/&gt;    &lt;span&gt;&quot; q-char-sequence &quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;h-&lt;span&gt;char&lt;/span&gt;-sequence:&lt;br/&gt;    h-&lt;span&gt;char&lt;/span&gt;&lt;br/&gt;    h-&lt;span&gt;char&lt;/span&gt;-sequence h-&lt;span&gt;char&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;h-&lt;span&gt;char&lt;/span&gt;:&lt;br/&gt;    any member of the translation character &lt;span&gt;set&lt;/span&gt; except &lt;span&gt;new&lt;/span&gt;-line &lt;span&gt;and&lt;/span&gt; U+&lt;span&gt;003&lt;/span&gt;E GREATER-THAN SIGN&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &amp;lt;iostream&amp;gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;importable-header&quot;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;看上去很简单，似乎只需要把 #include 换成 import 再加个分号就好了。但事实远没这么简单。观察例子的第二行，这里写的是 import &quot;importable-header&quot;; 即 Header Units 只能 import 所谓的 importable-header。但什么是 importable-header 呢？C++ 标准的说法是 implementation-defined。只有标准库中的头文件需要是 importable-header。这给包括工具链开发者在内的广泛用户带来了非常深的困扰。意味着我们无法确定任何使用了 Header Units 的代码是否是符合标准的、跨编译器与跨平台兼容的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Header Units 的问题还不止于此，来看下面这个例子：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// a.cpp&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// Compile flags: -std=c++20 -DFOO&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;foo.h&quot;&lt;/span&gt;;&lt;br/&gt;...&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// b.cpp&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// Compile flags: -std=c++20&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;foo.h&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这个例子中有两个源文件 a.cpp 和 b.cpp，它们都 import 了 foo.h，但它们的编译选项是不一致的。此时将 a.cpp 和 b.cpp 中的 import &quot;foo.h&quot;; 编译为同一个 header unit 明显是不合适的。但如果将  a.cpp 和 b.cpp 中的 import &quot;foo.h&quot;; 编译为两个不同的 header unit，那么一方面编译速度不但不会更快还会更慢，因为我们需要付出额外的序列化和反序列化的时间。另一方面这个做法也与我们的原则：“在一个项目中，一个 module 只编译一次”相违背，还会增加 One-Definition-Rule Violation 的可能性。除此之外，header units 还有不少其他的问题，这里不再展开。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直到 2022 年 11 月的会议上，委员会的工具链小组依然花了很多时间讨论编译器与构建系统该如何合作来让 Header Units 可用。而这个问题直到今天也没有达成共识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Named Modules&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以 module-unit 中声明 Named Modules。module-unit 是包含 module declaration 的 translation unit。module-unit 的语法为：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;module&lt;/span&gt;-unit:&lt;br/&gt;    &lt;span&gt;module&lt;/span&gt;-declaration declaration-seq&lt;br/&gt;    global-&lt;span&gt;module&lt;/span&gt;-fragment &lt;span&gt;module&lt;/span&gt;-declaration declaration-seq&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这个语法的含义是，module-unit 要么由 module-declaration 开头，要么由 global-module-fragment 开头后接 module-declaration。这里的 declaration-seq 表示后续的各种声明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;global-module-fragment 的语法为：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;global-&lt;span&gt;module&lt;/span&gt;-fragment:&lt;br/&gt;    &lt;span&gt;module&lt;/span&gt; preprocessing-directives &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这里的 preprocessing-directives 指 #include、#define 等各种 # 开头的 directives 以及 import、export 等语句（&lt;/span&gt;&lt;span&gt;觉得奇怪的话，可以暂且忘掉&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;module-declaration 的语法为：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;[&lt;span&gt;export&lt;/span&gt;] &lt;span&gt;module&lt;/span&gt; module_name[:partition_name];&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;根据 module-declaration 的不同，可将该 module unit 分为：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Primary Module Interface Unit&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Module Implementation Unit&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Module Interface Partition Unit&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Internal Module Partition Unit&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;让我们用一个例子来理解下这些概念：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// M.cppm&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;module&lt;/span&gt; M;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; :interface_part;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; :impl_part;&lt;br/&gt;&lt;span&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;Hello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// interface_part.cppm&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;module&lt;/span&gt; M:interface_part;&lt;br/&gt;&lt;span&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;World&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// impl_part.cppm&lt;/span&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt; M:impl_part;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; :interface_part;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;std&lt;/span&gt;::&lt;span&gt;string&lt;/span&gt; W = &lt;span&gt;&quot;World.&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;World&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; W &amp;lt;&amp;lt; &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;endl&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Impl.cpp&lt;/span&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt; M;&lt;br/&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;Hello&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;Hello &quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// User.cpp&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; M;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  Hello();&lt;br/&gt;  World();&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在例子中的 M.cppm 是一个 Primary Module Interface Unit。Primary Module Interface Unit 将声明一个 Module，一个 Module 中只可包含一个 Primary Module Interface Unit。例子中的 interface_part.cppm 和 impl_part.cppm 分别是 Module Interface Partition Unit 和 Internal Module Partition Unit（&lt;/span&gt;&lt;span&gt;它们之间的区别比较复杂，大家可以暂且不用在意&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总之，Module Partition Unit 将会声明一个 Module 的一个 Partition。一个 Module 中的 Partition 需要是唯一的。Module 外的用户无法直接 import Module Partition。例子中的 Impl.cpp 是一个 Module Implementation Unit。一个 Module 可以有多个 Module Implementation Unit。Module Implementation Unit 会隐式的 import 对应的 primary module。Module Implementation Unit 可用于定义各种 Module Interface Unit 中声明的实现。在例子中的 interface_part.cppm 和 impl_part.cppm 包含了 Global module fragment 用以依赖所需的头文件。这也正是 Global module fragment 的设计用途，用以后向兼容各种所需的头文件。在 M.cppm 和 interface_part.cppm 中，函数 Hello() 与函数 World() 前有关键字 export，表面这两个声明是可被 Module 的用户使用的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然本节看上去有些长，但稍微总结下 Module 的定义即先写个  module; 引入 Global Module Fragment，之后引入所需的头文件，再使用 export module module-name; 声明 Module 的名字。之后在需要对外可见的声明前加上 export 关键字就好了。如果当前文件写得太长了，还可以另起一个文件声明下 Partition 就好，export module module-name:partition-name 也可以将具体实现放到 Module Implementation Unit 当中。至于 Module 的使用就更简单了，需要什么 Module，直接 import 进来即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然读者们可能也能感觉到还会有各式各样的细节，但起码看上去 Modules 确实不难对吧？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）Modules 的好处&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;封装性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们以 asio 库中的 asio::string_view 为例进行说明。以下是 asio::string_view 的实现：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;namespace&lt;/span&gt; asio {&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;if&lt;/span&gt; defined(ASIO_HAS_STD_STRING_VIEW)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::basic_string_view;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::string_view;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;elif&lt;/span&gt; defined(ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::experimental::basic_string_view;&lt;br/&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::experimental::string_view;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt; &lt;span&gt;// defined(ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;} &lt;span&gt;// namespace asio&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# &lt;span&gt;define&lt;/span&gt; ASIO_STRING_VIEW_PARAM asio::string_view&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;else&lt;/span&gt; &lt;span&gt;// defined(ASIO_HAS_STRING_VIEW)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# &lt;span&gt;define&lt;/span&gt; ASIO_STRING_VIEW_PARAM const std::string&amp;amp;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt; &lt;span&gt;// defined(ASIO_HAS_STRING_VIEW)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;该文件的位置是 /asio/detail/string_view.hpp，位于 detail 目录下。同时我们从 asio 的官方文档&lt;/span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;span&gt;中也找不到 string_view 的痕迹。所以基本可以判断 asio::string_view 这个组件在 asio 中是不对外提供的，只在库内部使用，作为在 C++ 标准不够高时的备选。然而使用者们确可能将 asio::string_view 作为一个组件单独使用 Examples&lt;/span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;span&gt;，这违背了库作者的设计意图。从长远来看，类似的问题可能会导致库用户代码不稳定。因为库作者很可能不会对没有暴露的功能做兼容性保证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个问题的本质是头文件的机制根本无法保证封装。用户想拿什么就拿什么。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8263736263736263&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtfSKduNYMqFoXkvvElZicP6nG137kSrmSvzWrwaH4QsCQ7YgXpQ4Os91A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而 Modules 的机制可以保障用户无法使用我们不让他们使用的东西，极强地增强了封装性：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7663755458515283&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtfCVRLy50H6NBkxBmRXYicQibhbX7nrZH6YTMGSOicUhXfAZ0MtAyu5UueA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;916&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;隔离性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这指的是 import module; 不会受到上下文所影响。例如每一个人都能看出下面代码的问题：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;define&lt;/span&gt; true false&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;header.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;header.h 中的实现将严重受到影响。当然这个例子可能过于极端了，真实世界也不会有人这么写代码。但可以看一个更真实的案例：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;headerA.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;headerB.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 以及&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;headerB.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;headerA.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这个例子说的是由于 #include 头文件顺序不同导致的行为差异。没踩过这个坑的 C++ 程序员想必不多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9367720465890182&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtfIp9BqJsLNotfy1S0RGSibEDs3rEva8kA1t85rVIclV1V5ibXFWLEjuCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而在使用 Modules 之后，不会再受到外界定义的宏的影响，同时 import modules; 的顺序也不会改变程序的行为。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;更强的一致性检查&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;One Definition Rule（ODR）是 C++ 的重要规则。ODR 可以简单理解为在一个程序中一个 Entity 只应该拥有一个定义。违反 ODR 可能给 C++ 程序带来很严重同时很难查的 bug。但在之前的编译模型当中，每个 TU 都是单独编译的，互不干扰。这使得编译器只能在当前 TU 中检查 ODR，对于跨 TU 的 ODR Violation，之前的编译器是无能为力的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前的实践方式都是将跨 TU 的 ODR violation 检查交给链接器来做。但由于从高级语言到链接器之间已经损失了非常多的信息，链接器能检查到的 ODR violation 是有限的。而在 Modules 进入 C++ 之后，我们就拥有了在编译器前端进行跨 TU 检查 ODR violation 的能力，这是一个很大的进步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编译加速&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Modules 很吸引 C++ 程序员的一个特性即是 Modules 的编译加速能力。从定性的角度分析 Modules 编译加速能力时，我比较喜欢用这个例子来解释：如果一个项目中存在 N 个头文件与 M 个源文件，每个源文件都 include 了每个头文件，那么这个项目的编译时间复杂度可以表示为 O(N*M)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6368613138686131&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtfKs9bZ7zDj4m10radh4nOc2z0oibibhpLFC51JEcCPP2CKs3iczF3yAM7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1096&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而如果将项目以一个头文件对应一个 Module Unit 的方式重构之后的话，因为每个 Module Unit 中的代码不会被重复编译，我们可以将整个项目的编译时间复杂度表示为 O(N+M)。从 O(N*M) 到 O(N+M) 的改进是非常巨大的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然这个模型显然是太过于粗糙了，有很多的因素都没有考虑，例如模版、inline 函数、编译器优化等等，但我们应该还是能看出 Modules 在 C++ 项目编译加速方面的潜力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;能预计到很多读者会好奇使用 Modules 到底具体地能给我们的项目带来多大的编译加速比？大概是一个什么样的数字？这样直观的数据当然是非常吸引人的。然而在当下的环境中，直接给出一个 Modules 编译加速能力的数字是不负责任的和误导人的。一方面每个项目的代码结构和组织方式都天差地别，另一方面编译器中相关的实现无论宏观架构或者细节部分可能都有较大的调整空间，再者目前对于 Modules 使用的实践的方式不够多、规模也不够大。在这样的情况下，具体数字的价值就很小了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这段话本身想对读者表达的是大家目前不应该被 Modules 具体的加速比数字所迷惑了。当前在网上能搜到的数据中，从百分之几到几十倍都有。在笔者所做的实验中，根据配置与代码的不同，从百分之十几到几倍的数据都有。大家如果好奇自己的项目在 Modules 中能得到多大的加速比的话，最好的办法还是自己上手试一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（3）std modules&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;std modules 是 C++23 的一个重要特性。在由于疫情导致产出下降的 C++23 中，std modules 可能是其中最亮眼的特性了。std modules 允许用户直接 import std; 而导入标准库中的所有声明（&lt;/span&gt;&lt;span&gt;宏除外&lt;/span&gt;&lt;span&gt;）。例如：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;Hello World.\n&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于用户来说，这个语法并没有太多需要值得关心的地方。如果你在 import std; 后出了任何问题，那大概率都会是工具链的问题而不会是你的问题。当然了，工具链什么时候 ready 就是另一个问题了。目前 MSVC 已经推出了需要用户自行安装的 std.ixx&lt;/span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;span&gt;；libc++ 正在做非常初期的探索；暂时没有听到 libstdc++ 相关的传闻。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有人可能还有疑问，之后的新特性都会不会只加到 std module 中而不会加到标准库头文件中？或者说标准库头文件在未来是否会被逐渐 deprecate？无论从 Modules 在工具链方面的实际进度还是从向后兼容性这两个角度来看，目前都没有这个征兆。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（4）目前编译器支持状态&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总体来说 MSVC 对 Modules 的支持状态是最领先的，其次是 Clang 和 GCC。笔者对于 Modules 在 Clang 中的状态相对比较熟悉些，这里就描述下 Modules 在 Clang 中的状态吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Modules 技术在某种程度上可以理解为对 C++ 代码的序列化和反序列化。目前 Clang 和 GCC 的做法都是对 C++ 代码对应的 AST 进行序列化和反序列化。在 Clang 中相关的技术最早可以追述到 Clang 开发时用于帮助 Debugging 的技术。之后 PCH（&lt;/span&gt;&lt;span&gt;Precompiled Header&lt;/span&gt;&lt;span&gt;）技术也复用了这个技术。然后 Apple 开发了 Objective-C++ Modules。后续 Apple 和 Google 在这之上开发了 Clang C++ Modules 技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Clang C++ Modules 是 Clang 的一个 C++ 扩展，可以将 Header 隐式地转换为 Modules，所以也叫 Clang Header Modules 以及 Clang Implicit Modules。后来当 Modules 确认进入 C++ 标准后，Google 在 Clang 中做了 Standard C++ Modules 初步的支持。不过之后因为各种原因，Google 在 C++ 标准方面的投入放缓，Clang 中 Standard C++ Modules 的支持也陷入了停滞。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从 2021 年下半年开始，笔者和 GCC 的 maintainers 对 Clang 中 Standard C++ Modules 进行了完善。在 2022 年 9 月，Clang15 发布，这也是首个号称支持 Standard C++ Modules 的 Clang 版本。在 Clang15 中，对 Modules 主要的语法都进行了支持。在预计于 2023 年 3 月发布的 Clang16 中，也将会包含更多 Modules 相关的 bug 修复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然号称对 Standard C++ Modules 的语法进行了较为完整的支持，但我们还是得承认目前 Modules 的支持中存在较多的缺陷以及 Bug。这与 Modules 庞大的规模以及编译器社区对于语言新特性的工作方式是有关系的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先是编译器社区对新特性支持的工作方式，一般流程是：开发者们看着提案实现特性 -&amp;gt; Reviewer 们觉得没问题之后就合入 -&amp;gt; 宣布该特性已得到支持（&lt;/span&gt;&lt;span&gt;注意：此时该特性一般并未得到广泛用户大规模的使用&lt;/span&gt;&lt;span&gt;）-&amp;gt; 新版本发布 -&amp;gt; 如有 Bug Report 则根据 Bug Report 进行修复和迭代。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里的关键点是一个特性是否得到支持的宣称是由开发者和 Reviewer 们经过 Review 和相对有限的测试决定的。以往对于很多规模较小的特性而言，靠着开发者们的经验，一般大家都觉得没问题的话那问题确实也不大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但对于 Modules 这种规模的特性而言，就必然需要长时间大规模的、基于用户反馈的迭代才能到达一个高可用的状态。特别是 Modules 的本质是对 C++ 语言的序列化和反序列化，这意味着只要 C++ 语言本身依然保持着演化，那 Modules 的开发就不存在 “完成” 这个说法。例如我们现在发现的不少 Modules 的 Bug 与 Concept 这样的新语法相关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然上面这段话可能显得 Clang 中对 Modules 的支持相对较差，但笔者感觉目前三大编译器对 Modules 的支持水平的差距可能并不大。起码近几天三大编译器的开发者碰头交流情况时，大家都表示最近在修 Bug。所以感觉进度其实都差不太多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然大家可能还是很好奇何时才能用上一个稳固、丝滑、高可用的 Modules。一方面感觉这个问题没法回答，因为现在 Clang 编译器没有 Stable Release 的概念也不会专门宣布像 Modules 这样的 feature 已经完成了。另一方面我个人套用软件发布生命周期的概念的话，目前 Clang 中 Modules 的状态可能处于 Alpha 或 Beta 的状态，再经过一两个版本就能达到较为稳定的水平了，大概是 Clang17 或 Clang18 左右（&lt;/span&gt;&lt;span&gt;注意：这并非官方概念&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.1166666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtfGCPVEyct0bnlqicu2oA9Lnbp3ICAIWp4OBsiccWfMcEKJLsZgV53Vb6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;480&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外比起看各种各样的文章（&lt;/span&gt;&lt;span&gt;包括本篇&lt;/span&gt;&lt;span&gt;）和评测，还是很推荐大家上手试一试 Modules。一方面如果用的语法不太小众的话，应该问题不大。另一方面如果遇到了编译器问题的话，能做 Minimal Reproducer 向社区发 Issue Report 的话，也很有帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（5）当前构建工具支持状态&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实，阻碍大家使用 Modules 的另一个重要原因还是构建工具的支持不太够。毕竟对大多数人来说无论是手写 makefile 还是写 CMake 或其他构建工具的脚本都还是比较煎熬的事。大家还是希望能有一个开箱即用的工具可以让自己专注于新 feature 本身。本节就简单介绍下我们所知的构建工具对 Modules 的支持情况。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;MSBuild&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。VS 中自带的构建工具。较早的支持了 Modules。不过只支持 MSVC。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Build2&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。早在 19 年就支持了 GCC Maintainer 提出的 Server-Client 模型。不过只支持 GCC 而且似乎最近没有更新的消息了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;XMake&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。XMake 是一个轻量级、跨平台的基于 Lua 构建工具。XMake 的更新频率很高且对新 feature 的跟近也很及时。看介绍已经支持了 MSVC、GCC 以及 Clang 三大编译器。XMake 的风评很不错，推荐感兴趣的朋友看一下。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CMake&lt;/strong&gt;。老牌 C++ 构建工具，不必多说。虽然之前对 Modules 的支持显得略慢，但在过去的半年内开始发力。如果一切顺利的话，在今年春天发布的 CMake 3.26 中将包含对 MSVC、GCC 以及 Clang 三大编译器的支持。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Bazel&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。暂时没听到 Bazel 官方对 C++20 Modules 进行支持的消息。但得益于 Bazel 的扩展性，目前已经有一些基于 Bazel 的工具开始支持 C++20 Modules。其中我个人最推荐的是 rules_ll&lt;/span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;span&gt; 这个工具。与其他玩具性质的扩展不同，rules_ll 似乎是想做一个长期的、针对异构代码编译的工具，对 C++20 Modules 的支持是其中的一个（重要）feature。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（6）对其他工具的影响&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 C++ 生态当中，除了编译器和构建系统之外，还有许许多多的其他工具。在这些工具中，几乎所有与项目构建以及以 C++ 代码作为输入的静态分析工具都将会受到 Modules 的强烈冲击。即这些工具如果不对 Modules 做适配，那这些工具面对使用了 Modules 的代码就基本完全没法用。这类工具数量非常多，完全无法列举，这里仅简单举几个例子：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;clangd&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。clangd 是一个 Language Server。clangd 可以为程序员进行代码自动补全、高亮提示、语法提示和代码跳转等功能。而可以想象的，如果不对 Modules 做特殊适配，以上这些功能在面对使用 Modules 的代码时都将失效。市场上的其他类似的工具也都是一样。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ccache&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。ccache 是一款对编译结果进行 cache 以提升编译速度的工具。ccache 的关键是通过依赖分析以保证做一致性判断时不会误判。但 Modules 恰好会引入新的依赖关系。这就产生了冲突。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;distcc&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。distcc 是一个分布式编译工具。与 ccache 类似，这样的工具必然需要处理依赖关系而与 Modules 产生冲突。而对于 distcc 另一个更大的问题是，目前 Modules 产生的 module file 的体积要远大于预处理后的头文件体积。这使得在网络中传递 module file 可能会成为一个瓶颈。而如果网络传输速度成为瓶颈的话，分布式编译的意义也就受到挑战了。当然，这本质是 Modules 技术的一个挑战而不是分布式编译的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;这当然是很多的问题，但对于工具开发者们来说，这也是一个难得的机遇。而这些问题在 Modules 设计之时都已经被考虑到了。最终的结果大家也都看到了。委员会的想法是，这些确实都是很严肃的问题。但经过评估，这些都不是不能解决的问题。我们不能因此止步不前。C++ 语言要朝着更现代化的方向发展，C++ 生态也自然需要向着更现代化的方式去发展才行。C++ 语言的愿景或者说目标用户是：“能够长久运行数十年的大型高效率软件”。为达成这个目标，C++ 生态也需要与之相对应的变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（7）未来的方向：兼容性、分发以及包管理器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Modules 受人期待的一个重要原因即大家觉得 Modules 有希望解决 C++ 长久以来的受人诟病的分发问题。可能大多数构建过大型 C++ 项目的朋友都会有一个相同的感受：快被环境问题整吐了。不知道有多少 C++ 程序员在开始一个大型的 C++ 项目时都怀疑过自己到底是一个 C++ 程序员还是一个系统运维。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;导致这种问题出现的一个本质原因即是 C++ 生态中的依赖传递方式要么是全源码依赖要么是半源码半二进制依赖。而库的开发人员所考虑的环境、库的编译环境以及用户环境则很可能是不一致的。这导致了各种各样的源码没法编译、没法链接、一运行就挂等等问题。这个问题的本质是大家的环境不一致，但 C++ 语言又使得各种环境要混在一起导致的。在一些拥有良好的基础设施的大公司，这个问题的解决方式是通过强行让大家的环境一致来避免环境不一致带来的混乱问题。但这种方式一方面需要很强的技术能力，另一方面却也增加了技术交流的壁垒。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而 Modules 的出现使得我们有机会从另一个角度来解决这个问题。Modules 能够将库的开发环境（&lt;/span&gt;&lt;span&gt;或者说库的编译环境&lt;/span&gt;&lt;span&gt;）与用户环境隔离开来，降低了环境冲突的风险。另一方面 Modules 能够将库所需的开发环境描述在 metadata 里，这让用户遇到无法兼容的环境时可以尽可能早的得到报错信息而不是各种链接错误或者说运行时错误时满脸茫然。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过这节既然被放到了「未来的方向」中，即说明这个想法目前还只是个美好的愿景。本质原因是想要达到上述的美好环境，我们需要支持 Modules 的二进制分发。但任何二进制分发都需要涉及到兼容性问题。而目前 Modules 的二进制兼容性，基本等价于 0。别说 Clang 与 GCC 编译的 Modules 的二进制兼容，就连 Clang 任意不同版本编译后的 Modules 的二进制都是不兼容的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是因为目前编译器实现 Modules 的方式基本是对 AST 的序列化和反序列化。而 AST 作为编译器内部的数据结构，其必然是没有什么格式要求的。不然一个开发者交个 patch 简单改下 AST 都需要发提案进行修改，这样的模式显然太低效了。据我所知目前 MSVC，Clang 和 GCC 都处于这个状态。开发者们目前的共识是，起码现在  Modules 的二进制分发是不现实的，还是推荐大家源码分发吧。另外听说 MSVC 在弄 Modules 的二进制格式规范，但进度应该非常慢，不知何时才能有比较具体的东西可以看看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然统一的二进制格式显得遥遥无期，但大家都觉得这应该是未来的方向，也是 Modules 诞生的重要意义。个人觉得，未来可期。&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（8）Carbon 与 “下一个 C++”&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 22 年的夏天，Google 向大家隆重地介绍了号称 “下一个 C++” Carbon 语言。这里由于篇幅与主题原因，不对 Carbon 语言做过多介绍，但非常建议感兴趣的朋友们可以去看看 Carbon 官方的文档。Carbon 官方的文档丰富而流畅，笔者认为这是学习工业界系统级编程语言设计的绝佳材料，特别是 Carbon 目前还处于设计中的状态，这种机会并不多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回过头来，Carbon 的核心概念其实可以简单概括为 “C++ 的未来就是现有的 C++ 代码库”。现在当我们问为什么要用 C++ 写产品级代码时，我们能得到的其中两个较多答案是“因为我们依赖的库是用 C++ 写的” “我加入的时候这个产品就是用 C++ 写的了，后来代码太多改不过来了”。对于这两个答案，翻译一下就是，“如果依赖的库不是 C++，那么我不会使用 C++” “如果我们改得过来的话，那我们就不用 C++了”。将这两句话再延伸下就是，“我们现在及之后编写 C++代码的理由是因为之前的 C++代码”。再延伸一步即是上面提到的这句话，“C++的未来就是现有的 C++代码库”。而如果有一个可以完全兼容现有 C++代码的新语言，对于抱有以上两种心态的用户而言，他们确实不用再写 C++代码了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要注意，笔者并不赞同以上这个观点。但无论笔者是否赞同，都确实有以及将会有为数不少的人认同这个想法。在这里提到这个话题的原因是，Carbon 能做到完全兼容现有 C++ 代码的原因之一即是 Modules 技术背后的对 C++ 代码进行预编译后序列化以及反序列化的技术，而不是再 Carbon 语言里再塞一堆内置的 C++ 语法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以预见的是，未来某日 Modules 技术成熟之后，实现完全兼容 C++ 的新语言的成本将会低很多。可能像目前自制语言已不稀奇一样，也许未来的 “下一个 C++” 将会俯仰皆是。你的 “下一个 C++” 又何必是 Carbon？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qgxOukGzL6akS7ibtpEgg5xkibkgpJxVwylfcDicBABiaXlgBLsd1Afds1w/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;28&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;40&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4814814814814814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3mt1fiaOMf2g03Alvsd2Mviaex0pmgiallpicKwnv6WGaWSgCZ7kI6ZAssXyl4NpyojRwe8bHBWDxib8zw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;27&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Coroutines&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;协程 （&lt;/span&gt;&lt;span&gt;Coroutines&lt;/span&gt;&lt;span&gt;） 是 C++20 引入的 4 大特性（&lt;/span&gt;&lt;span&gt;Modules、Coroutines、Concepts 和 Ranges&lt;/span&gt;&lt;span&gt;）之一。协程本身也是计算机科学中的经典概念，在上个世纪 60 年代就出现了。协程的本意是一个可中断的执行流，而根据这个执行流的上下文中是否包含栈的信息，又可将协程分为有栈协程（&lt;/span&gt;&lt;span&gt;stackful coroutines&lt;/span&gt;&lt;span&gt;） 和无栈协程（&lt;/span&gt;&lt;span&gt;stackless coroutines&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于有栈协程，既然它是一个可中断的带有栈的执行流，那这个概念和我们所熟知的线程就非常相似了。为了避免混淆，在一般语境中，我们说线程指的是由操作系统管理中断和唤醒的线程。而有栈协程的中断和唤醒则是通过用户态代码实现的，所以有栈协程也被叫做用户态线程，也有 fibers、green threads 这样的名字。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Go 语言中的杀手级特性 Goroutines 就是一种有栈协程。因为有栈协程是用户态线程，所以能理解线程概念的朋友理解有栈协程应该会很容易。有栈协程相比于线程的价值即是有栈协程的切换是用户态的、不需要陷入内核态。这用户态切换相比于内核态切换所节约的成本就是有栈协程的价值。当然，与之相对的，线程的切换和调度由内核控制而有栈协程的切换和调度则由用户预先设置好，即有栈协程应该调度但没有调度或有栈协程不应调度但调度时所产生的成本则是有栈协程的成本和代价。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于无栈协程，它没有栈，它执行的上下文就是开始函数本身，即无栈协程是一个可中断和唤醒的函数。由于有栈协程更容易被大家理解和接受，所以有些地方也叫无栈协程作第二代协程（&lt;/span&gt;&lt;span&gt;但似乎无栈协程出现的时间并不比有栈协程晚&lt;/span&gt;&lt;span&gt;）。无栈协程因为没有栈，无栈协程在切换时的代价非常低，基本等价于两个函数调用，而有栈协程切换时还需要保存各种寄存器，相比起来就慢很多了。但无栈协程也有其代价，由于无栈协程天然没有栈，而我们编程时的逻辑往往自然是有调用关系概念的，这使得我们用无栈协程时需要显式的语法来表示这种特殊的调用关系。这也是常说的无栈协程的传染性。在其他语言中，像 JavaScript 与 Rust 中的 await 与 async 都是用无栈协程来实现的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再回到协程进入 C++ 标准时，当时协程这个概念在各个语言中都很火，特别是 Go 中 Goroutine 非常火爆，大家都觉得 C++ 也应该有协程特性才对（&lt;/span&gt;&lt;span&gt;当然事实和这个不一定有逻辑关系，协程进入 C++ 标准很早就开始筹备了&lt;/span&gt;&lt;span&gt;）。很自然地，C++ 标准中的协程应该是无栈协程还是有栈协程就成为了一个自然的选择。当时有 Google 提出的有栈协程方案与微软提出的无栈协程方案。最终由于 C++ 的零抽象原则以及无栈协程方案更高的扩展性，委员会最终选择了无栈协程的方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此，在 C++语境中提及协程（&lt;/span&gt;&lt;span&gt;Coroutines&lt;/span&gt;&lt;span&gt;）都默认为无栈协程。而在此之前，在 C++语境中提到协程时则可能指代更好理解的有栈协程。比如很多 C++20 之前的协程库其实指的是有栈协程库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得一题的是，目前依然有提案尝试将有栈协程加入到 C++ 标准中。毕竟有栈协程和无栈协程终归不是一个东西，语义的差别也比较大。所以现在标准中已有无栈协程不是一个拒绝有栈协程进入标准的很强的理由。但目前委员会的状态似乎是没有明确反对但也没有很大兴趣的状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）语法简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;委员会希望 C++20 协程有着尽可能高的可扩展性，所以在 C++20 中只设计了协程的语义框架而没有设计任何的协程语义。这也和其他很多的语言不同，其他语言就算选择了底层使用无栈协程实现，最终提供给用户的都是封装好的接口。C++20 的协程的用户本质上是协程库作者而非广大的用户。按照设计者的想法，C++协程的最终用户（&lt;/span&gt;&lt;span&gt;end user&lt;/span&gt;&lt;span&gt;）只需要学习所需的、封装好的协程库即可而不必学习繁复的 C++20 协程语法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果大家对 C++20 协程语法感兴趣的话，个人建议看看 Lewis Baker 的博客&lt;/span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;span&gt;。这是我见过对 Coroutine 语法的解读最好的材料了，就不在此拾人牙慧了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）用途&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;异步场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;协程或者说 C++20 协程最吸引人的地方在于可用同步的方式写异步的代码。正如之前提到的，当前 C++世界的两大浪潮是异步化和并行化。当我们想提高一个 IO 密集型的同步程序的性能时，将其异步化能得到很好的效果。在我们的实践中，这一般可以得到一个数量级以上的 QPS 的提升。异步化当然不是个新概念。但之前在 C++项目中想写异步程序往往需要基于回调的方式。但回调的写法不直观、对程序员有很大的心智负担。会增加出 Bug 的概率，对程序性能可能也有影响。接下来通过一个简单的例子说明下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们先来看看同步的代码，这个代码会读若干个文件后返回总的文件体积。代码还是很简单的：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;uint64_t&lt;/span&gt; ReadSync(&lt;span&gt;std&lt;/span&gt;::&lt;span&gt;vector&lt;/span&gt;&amp;lt;File&amp;gt; Inputs) {&lt;br/&gt;    &lt;span&gt;uint64_t&lt;/span&gt; read_size = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;Input : Inputs)&lt;br/&gt;        read_size += ReadImplSync(Input);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; read_size;&lt;br/&gt;} &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;接下来我们再看下一个基于回调的版本：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;template&lt;/span&gt; &amp;lt;RangeT Range, Callable Lambda&amp;gt;&lt;br/&gt;future&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt; do_for_each(Range, Lambda);                    &lt;span&gt;// We need introduce another API.&lt;/span&gt;&lt;br/&gt;future&amp;lt;&lt;span&gt;uint64_t&lt;/span&gt;&amp;gt; ReadAsync(&lt;span&gt;vector&lt;/span&gt;&amp;lt;File&amp;gt; Inputs) {&lt;br/&gt;    &lt;span&gt;auto&lt;/span&gt; read_size = &lt;span&gt;std&lt;/span&gt;::make_shared&amp;lt;&lt;span&gt;uint64_t&lt;/span&gt;&amp;gt;(&lt;span&gt;0&lt;/span&gt;);        &lt;span&gt;// We need introduce shared_ptr.&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; do_for_each(Inputs,                                           &lt;span&gt;// Otherwise read_size would be&lt;/span&gt;&lt;br/&gt;                   [read_size] (&lt;span&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;Input){            &lt;span&gt;// released after ReadAsync ends.&lt;/span&gt;&lt;br/&gt;                                    &lt;span&gt;return&lt;/span&gt; ReadImplAsync(Input).then([read_size](&lt;span&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;size){&lt;br/&gt;                                             *read_size += size;&lt;br/&gt;                                             &lt;span&gt;return&lt;/span&gt; make_ready_future();&lt;br/&gt;                                       });&lt;br/&gt;                                })&lt;br/&gt;      .then([read_size] { &lt;span&gt;return&lt;/span&gt; make_ready_future&amp;lt;&lt;span&gt;uint64_t&lt;/span&gt;&amp;gt;(*read_size); });&lt;br/&gt;} &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;肉眼可见地，异步写法麻烦了非常多。同时这里还使用到了 std::shared_ptr。但 std::shared_ptr 会有额外的开销。如果用户不想要这个开销的话需要自己实现一个非线程安全的 shared_ptr，还是比较麻烦的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再来看下对应的协程版本：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;Lazy&amp;lt;&lt;span&gt;uint64_t&lt;/span&gt;&amp;gt; ReadCoro(&lt;span&gt;std&lt;/span&gt;::&lt;span&gt;vector&lt;/span&gt;&amp;lt;File&amp;gt; Inputs) {&lt;br/&gt;    &lt;span&gt;uint64_t&lt;/span&gt; read_size = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;Input : Inputs)&lt;br/&gt;        read_size += co_await ReadImplCoro(Input);&lt;br/&gt;    co_return read_size;&lt;br/&gt;} &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;与同步版代码几乎一致！但这份代码在执行时实际是异步的。这也是协程的好处：使用同步方式写异步代码，兼具开发效率和运行效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;同步场景与动态分配&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然在语言层面上，协程的设计和异步是没有关系的。但在实践中，协程发挥大作用的地方一般往往都是在异步场景中。当然既然语言层面没有限制，那用协程来写同步代码也是可以的。例如 C++23 中的新协程组件 `std::generator`就是一个同步的协程组件。但用协程写同步代码的一个天然劣势在于，协程的创建会动态申请内存以维护生命周期。虽然在异步场景下这个动态申请的开销可以被摊平。但在同步场景下，这样的动态申请可能还是会&lt;/span&gt;&lt;span&gt;有严重的影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个问题委员会之前也考虑到了，对此协程的设计者给出的回应是编译器有能力将动态分配优化掉，这个优化叫做 Coroutine Elision。距离编译器中协程的初次实现已经过去了 4 年，编译器对于某些经典场景下协程的优化能力达到了一个令人惊叹的水平，比如这个例子&lt;/span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.555431131019037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtf16NAxk6ibAEJK2yYNYQPSTC09GJMWWxoIJzwpNxhOjgjbj3mxhm070Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3572&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如对于左边这个经典的 generator 实现与几个 ranges 操作，Clang 编译器能将其优化到右边加上 label 和 ret 一共只有 3 条指令的水平。可以说是非常棒了。委员会当年对于类似的结果也非常满意，通过了协程的设计。但问题在于 Coroutine Elision 并不是个标准的一部分。也就是说一个不实现 Coroutine Elision 的编译器也是完全符合标准的要求的，例如对于上面相同的例子&lt;/span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.536571747627024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtfuPKZ0LKLlD8Agk3wrnaV5IUS0jbWw4V1evmOKc1veKGTMMHWDnuuRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3582&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GCC 和 MSVC 都无法将其优化到与 Clang 相同的水准。而这点是无可指责的，因为 Coroutine Elision 并不是标准的一部分，现在看起来基本是 Clang/LLVM 的扩展。GCC 与 MSVC 并没有实现这个特性的义务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而就算在 Clang 上，因为这不是语言规范的一部分，用户在编写代码时也没法确定自己的代码是否会被优化。即使用户通过 hack 编译器确定自己所写的代码可被某个版本的编译器优化，他也无法确认这个代码在之后的版本里是否会被一直优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即使是 Clang 的优化场景也是有限的，Clang 无法优化其他的同步场景的动态分配的情况也比比皆是。例如，协程是可中断的函数这个特性其实很适合用于实现各种状态机。例如实现 Parser。但某位实现者表示，他基于 C++20 Coroutines 所写的 Parser 比起纯 C 手写的 Parser 性能下降了 50%-60%，主要原因都出在动态分配上。对此我觉得可以理解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事实上，Coroutine 的动态分配无法被程序员取消也是 Executors 提案的初衷之一。虽然笔者也提出了相关的提案以试图解决这个问题，但从目前的 Review 进度来说可能是遥遥无期了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（3）协程库&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本节简单介绍下一些协程库。对协程感兴趣的朋友们而言，这些协程库可能比各种协程的语法条款要有意义得多：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;cppcoro&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。cppcoro 是 Lewis Baker 之前用于 POC 的作品。为协程的发展做了很多贡献，但目前已经不被维护了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;folly&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。folly 的 Coroutines 模块应该是目前最大的开源协程库，包含了非常非常多的东西，功能也很多。也有不少开发人员，Lewis Baker 也曾被邀请到 facebook 开发 folly。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;async_simple&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。async_simple 是阿里巴巴开源的轻量级 C++ 异步框架。提供了基于 C++20 无栈协程（&lt;/span&gt;&lt;span&gt;Lazy&lt;/span&gt;&lt;span&gt;），有栈协程（&lt;/span&gt;&lt;span&gt;Uthread&lt;/span&gt;&lt;span&gt;）以及 Future/Promise 等异步组件。个人认为对于觉得 folly 太重的朋友们来说，async_simple 会是个很不错的选择。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;标准协程库&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。标准协程库是 C++23 的规划之一，目前因为 Executors 提案迟迟没有落地而一直延期。正如之前所提到的，虽然协程在语言层面和异步没有关系，但在实践中协程出现一般都是在异步化场景中。而没有 Executors 提案提供的调度器接口的话，异步协程组件自然也无法开始设计。所以目前在 C++23 中存在的协程组件只包含和异步无关的同步 std::generator。与我们在开发中所说的协程库相比，个人感觉 std::generator 更像是 Ranges 的一部分。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qA3wIF4M1rgJPLkc2t7tiatN4Txs9MPGEdYzyfH069BSHiatSpOjibBKlg/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;31&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;38&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2258064516129032&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3mt1fiaOMf2g03Alvsd2MviaeXBdqHdbiaIjicJAUlxDIJHN8xrATs4xrhsSkp431EDwHpkEKv35kuHEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;31&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;雅兰亭库（yaLantinglibs）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前 C++20 标准正在普及，而相应的 C++20 库却很少，这导致使用 C++20 新特性如用协程开发网络开发网络应用是一件困难的事，但协程对于简化异步代码来说又是非常好的，这时候就急需一些 C++20 库来简化使用，提高开发效率了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，我们开源了一个跨平台（Linux、macOS、Windows）的 C++20 基础库——yaLantingLibs（雅兰亭库），它是一个 C++20 基础库合集，已经在 GitHub 上开源&lt;/span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;span&gt;，库名字灵感正是来源于“兰亭集序”，雅兰亭库里面有平时开发中常用的库，如协程库async_simple&lt;/span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;span&gt;、序列化库（struct_pack）、json 库（struct_json）、更高效易用的 protobuf 库 struct_pb 和 rpc(coro_rpc)库，后面还会不断增加新的基础库如 http、orm 等库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总之，雅兰亭库的目标是帮助 C++用户快速构建高性能 C++应用，易用性、性能和安全性是它的主要特色！&lt;span&gt;雅兰亭库&lt;/span&gt;的长期目标是完善 C++开发的生态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为雅兰亭库是基础库的合集，所以里面的每个子库都是可以独立使用的，如果你只需要序列化功能，只需要包含 struct_pack 的头文件就行，如果只需要 rpc 功能，就包含 coro_rpc 的头文件，如果只想使用协程库，那就只包含 async_simple 头文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;coro_rpc 库是 C++20 新特性应用的集大成者，它大量使用 C++20 新特性，如 concepts、coroutine、非类型的模版参数、generic lambda 等特性，还使用了一些 C++23 的特性，如 std::expected、std::source_location 等，还有正在标准化的编译期反射特性。大家可以从代码中了解到这些新特性是如何应用的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）雅兰亭库的序列化库&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一句话来概括雅兰亭库的序列化库那就是：高性能易用的序列化库。以二进制序列化库 struct_pack 为例，它的性能比 protobuf 要高一个数量级，易用性也更好。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;person&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;int64_t&lt;/span&gt; id;&lt;br/&gt;  &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;string&lt;/span&gt; name;&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;  &lt;span&gt;double&lt;/span&gt; salary;&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;person person1{.id = &lt;span&gt;1&lt;/span&gt;, .name = &lt;span&gt;&quot;hello struct pack&quot;&lt;/span&gt;, .age = &lt;span&gt;20&lt;/span&gt;, .salary = &lt;span&gt;1024.42&lt;/span&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// one line code serialize&lt;/span&gt;&lt;br/&gt;&lt;span&gt;std&lt;/span&gt;::&lt;span&gt;vector&lt;/span&gt;&amp;lt;&lt;span&gt;char&lt;/span&gt;&amp;gt; buffer = struct_pack::serialize(person1);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// one line code deserialization&lt;/span&gt;&lt;br/&gt;&lt;span&gt;auto&lt;/span&gt; person2 = deserialize&amp;lt;person&amp;gt;(buffer);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;无需定义 proto 文件，也没有宏，一行代码就可以完成对象的序列化和反序列化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;得益于编译期反射的能力，struct_pack 的性能和易用性才会大幅超过 protobuf。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除此之外，还有 json 库 struct_json，也一行代码既可实现 json 字符串和对象的相互转换。还有 struct_pb 库，它可以将普通 C++对象序列化成 protobuf 格式，比原生 pb 的性能更好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）雅兰亭库的 rpc 库&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异步代码协程化是大势所趋，通过协程可以大幅降低异步代码的编写难度，提高代码的可读性、可维护性和易用性，雅兰亭库基于协程开发了高性能易用的 rpc 库 coro_rpc，几行代码就可以完成一个 rpc 服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;rpc 服务端：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 定义 rpc 服务 rpc_service.hpp&lt;/span&gt;&lt;br/&gt;&lt;span&gt;inline&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;&lt;span&gt;string&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt;&lt;span&gt;(&lt;span&gt;std&lt;/span&gt;::&lt;span&gt;string&lt;/span&gt; str)&lt;/span&gt; &lt;/span&gt;{ &lt;span&gt;return&lt;/span&gt; str; }&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 注册 rpc 服务&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;rpc_service.hpp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;coro_rpc/coro_rpc_server.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  register_handler&amp;lt;echo&amp;gt;();&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;coro_rpc_server &lt;span&gt;server&lt;/span&gt;&lt;span&gt;(&lt;span&gt;/*thread_num =*/&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;/*port =*/&lt;/span&gt;&lt;span&gt;9000&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;  server.start();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;rpc 客户端：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;rpc_service.hpp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;coro_rpc/coro_rpc_client.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;Lazy&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt; test_client() {&lt;br/&gt;  coro_rpc_client client;&lt;br/&gt;  co_await client.connect(&lt;span&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span&gt;/*port =*/&lt;/span&gt;&lt;span&gt;&quot;9000&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;auto&lt;/span&gt; r = co_await client.call&amp;lt;echo&amp;gt;(&lt;span&gt;&quot;hello coro_rpc&quot;&lt;/span&gt;); &lt;span&gt;//传参数调用 rpc 函数&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; r.result.value() &amp;lt;&amp;lt; &lt;span&gt;&quot;\n&quot;&lt;/span&gt;; &lt;span&gt;//will print &quot;hello coro_rpc&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  syncAwait(test_client());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从异步连接到异步请求全部协程化，异步代码和同步代码逻辑类似，简洁易用。基于协程的 coro_rpc 的性能也是很优秀的，在 96 核服务器上 echo 测试 qps 超过 2000 万。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;真心希望 yaLanTingLibs 能帮助大家快速开发 C++应用，希望大家能积极去使用 yaLanTingLibs，感受一下它带来的开发效率和高性能！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qZDicaoukpArCbp8E1Z8kCR4PoiazstRK6YZq6iaon8P2yaG3tqgjBNt9w/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;27&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;39&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4444444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3mt1fiaOMf2g03Alvsd2MviaeezAVcRXuwvPrAjXc62RIyMeYdRrIjajkJYR86xYmRqBtj130LDcibqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;27&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Executors&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）std::execution&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很可惜，std::execution&lt;/span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;span&gt;最终没能进入 C++23，但这并不妨碍它依旧是令人期待和兴奋的语言特性。C++社区一直以来都没有一个好用的异步编程模型，以应对与日俱增的异步和并行的需求带来的挑战。虽然各个细分领域，都有着一套独到的异步编程模型，但它们存在着各种各样的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）std::execution 要解决哪些问题？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自 C++11 标准以来，标准库就涵盖了许多多线程的底层基础设施，例如 thread、atomic 和 mutex 等。这些设施过于底层，并不适合直接基于底层设施之上构建业务。稍后引入的 async/future/promise 模型则很低效，而且很难让用户正确使用，并且严重缺乏对泛型的支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;C++17 引入的并行算法（&lt;/span&gt;&lt;span&gt;Parrallel Algorithm&lt;/span&gt;&lt;span&gt;），本质上还是同步的，并缺乏算法之间组合的能力。业内许多第三方的基于构造任务节点的框架，大多也缺乏对泛型的支持，抽象不够直观，无法作为基础的编程模型。所以 The C++ Executors&lt;/span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;span&gt;应运而生，距离首个提案至今，也已发展了十余载，旨在为 C++ 社区提供一个标准的异步编程模型框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（3）Hello std::execution&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来看一个例子：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::execution;&lt;br/&gt;sender &lt;span&gt;auto&lt;/span&gt; s = &lt;br/&gt;    just(&lt;span&gt;1&lt;/span&gt;) |&lt;br/&gt;    transfer(thread_pool_scheduler) |&lt;br/&gt;    then([](&lt;span&gt;int&lt;/span&gt; value){ &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2.0&lt;/span&gt; * value; });&lt;br/&gt;&lt;br/&gt;&lt;span&gt;auto&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; result = &lt;span&gt;std&lt;/span&gt;::this_thread::sync_wait(s);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上述示例直观地展示了如何通过 std::execution 将常量 1 调度到线程池的调度器中，然后执行与浮点常数 2.0 相乘的运算，最后在发起任务的线程同步等待结果返回。从接口上看，它与市面上一些 future extension 类库并没有多少差别，但它的底层设计与实现确有天壤之别。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（4）std::execution 是泛型的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;熟悉 future 和 future extension 的读者应该都知道，这些类库都是类型擦除的。而在 std::execution 里面，一切都是泛型的，类型擦除需要用户显式的指定。例如上述例子中，senders 推导出的类型结构如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.501779359430605&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtfaY3pnWAdHvVUjrjhFcjHoOrX0F8WAAlibttE8LW2IUIiaib0d3g8icFUfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;562&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;泛型可以带来诸多好处，例如提供足够的信息给予编译器进行激进的优化条件。优化之后，代码创建的中间结构，可以被编译器几乎全数裁切。这种类似的优化手段在 C++ coroutine 中也有，参考Naked Coroutine Live&lt;/span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;span&gt;。如上述示例，优化的结果可能如下图结构所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6680555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/Pn4Sm0RsAujBPv25LUT4jKUbD7CBvEtfoSM3629ZkZc25RcpU0qzbbib17P0pliclEpiayzGb0EhSwYZm5iaPkHBZg/640?wx_fmt=jpeg&quot; data-type=&quot;other&quot; data-w=&quot;720&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（5）Schedulers/Senders/Receivers 模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面的例子虽然简单，但把 std::execution 的模型的核心都展示出来了，也就是 Schedulers/Senders/Receivers 模型。这个模型可以完整描述了三个核心的要素：执行什么任务，在哪里执行以及如何调度。Schedulers 是对底层 Execution Context 的浅层封装，一个轻量的可拷贝的 Handler，回答了如何调度的问题。而底层的 Execution Context 则回答在哪里执行的问题。最后的 Senders/Receivers 则回答要执行哪些任务。其中 Senders 表达的是任务本体；Recievers 则是扮演 callback 的角色，把前置 Sender 生产的结果或者错误传递给后置的 Sender。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户需要把 Senders 组合起来，以表达复杂的任务结构。比如任务的后继，fork 和 join. 组合 Senders 的算法是泛型的，也是 Lazy 的，同样也是轻量的 Handler. 与用户直接打交道的是 Schedulers 和 Senders，还有组合 Senders 的各种工厂（&lt;/span&gt;&lt;span&gt;Factories&lt;/span&gt;&lt;span&gt;）和适配器（&lt;/span&gt;&lt;span&gt;Adaptors&lt;/span&gt;&lt;span&gt;）算法，但并不与 Receivers 直接打交道。因为 Receivers 是 Senders 之间组合关系连接的纽带，它们通常由工厂和适配器算法负责创建，只有类库作者在扩展算法的时候，才需要设计和实现特定的 Receivers。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Schedulers/Senders/Receivers 模型不仅能充分表达异步执行任务的三个核心要素，还将这三个要素进行了有效的解耦。使得类库和框架的开发者可以在三个切面独立考虑将要面临的问题，也增强了模型的表达能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（6）std::execution 是惰性的（Lazy）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;惰性（&lt;/span&gt;&lt;span&gt;Lazy&lt;/span&gt;&lt;span&gt;），先构建任务的结构再发起任务，则是 std::exectuion 的另一个重要的目标。在 Lazy 的假设下，std::execution 的设计与实现可以获得很多收益。首当其冲的就是对数据竞争的避免。如果任务的创建是立即地，激进地执行，那么后继任务的创建就要考虑数据竞争的情况。例如，前置任务是否已经被调度，是否已经返回结构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（7）未来的展望&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然 std::execution 的特性强大，但这也意味着设计较为复杂。std::execution 这次没能顺利进入 C++23 标准，带来些许遗憾，也带来了 std::networking 的延期，同时也表达了标准委员会对该提案复杂性与成熟度的担忧。期待 std::execution 在 C++26 能够给出一份更优秀更完整的答卷。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugJkibeIkBwI7feN33tcTm1qVYsK9rW3PnGicfctGFTuTNMT7ZAnZriaDjnwZnQbs6fPlWEkhHFoOsfw/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;30&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;40&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3mt1fiaOMf2g03Alvsd2MviaeTMjhoVNW3S2hPD9Aqibq5JnfPP7G6CtkbUW4bjeREAOFZuricddmicvfA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;30&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;展望与总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;C++ 是一门历久弥新的语言，40 年来仍然在迭代更新，以顺应时代潮流，并在 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;amp;mid=2650949793&amp;amp;idx=1&amp;amp;sn=1d51a81941a5c9c2059e1587f4234a7e&amp;amp;chksm=bd5a39728a2db064e4ca6cb557135cea882ce5891d54b086b7a14e88a63cdc53b3c7c343ad2b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2022 年一举拿下 TIOBE 编程语言冠军&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;2022 年一举拿下 TIOBE 编程语言冠军&lt;/a&gt;，须知上一次拿冠军是在 20 年前，这发出了一个强劲的信号：C++ 仍然充满活力，并且越来越好，未来的 C++将是使用越来越简单，复杂度越来越低，同时生态也越来越完善的一门语言，未来可期！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[1] https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2656r0.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[2] https://think-async.com/Asio/asio-1.22.1/doc/asio/index.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[3] https://github.com/search?q=asio%3A%3Astring_view+extension%3A.cpp+extension%3A.h&amp;amp;type=Code&amp;amp;ref=advsearch&amp;amp;l=&amp;amp;l=&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[4] https://learn.microsoft.com/en-us/cpp/cpp/tutorial-import-stl-named-module?view=msvc-170&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[5] https://ll.eomii.org/guides/modules/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[6] https://lewissbaker.github.io/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[7] https://godbolt.org/z/aPaesWW65&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[8] https://godbolt.org/z/hs6szacbe&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[9] https://github.com/alibaba/yalantinglibs&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[10] https://github.com/alibaba/async_simple&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[11] https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r5.html#design-lazy-algorithms-complexity&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[12] https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r5.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[13] https://www.youtube.com/watch?v=UL3TtTgt3oU&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作者信息：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;祁宇，purecpp 社区发起人、《深入应用 C++11》作者&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;许传奇，C++ 标准委员会成员&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;袁秩昊，C++ 标准委员会成员&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;卜恪，purecpp社区联合发起人&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;93355&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;50%&quot;&gt;&lt;img data-ratio=&quot;0.8428571428571429&quot; data-w=&quot;140&quot; data-width=&quot;25%&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ldFaBNSkvHhBCS6gKD3G0bw0mcAHyH1uJGVdiaI89TibcaDY6iaafaOkZJIXcUDDRcnvMEaWQCpKMClyHvbCkIbDA/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;C&amp;amp;C++书单&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.195744680851064&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3nwuCPnd3icS6MaRyWxXrrtOvc6gibQPzQhlajFkuj9eRDPv6WFsicNZSPO4mz1oht0lYqBp9f0xToTQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;235&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;C++ Primer中文版（第5版）&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Stanley B. Lippman,Josee Lajoie,Barbara E. Moo 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;王刚 杨巨峰 译 &lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果只读一本C++书，本书将是你永不局悔的选择&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;征服全球数千万读者的大师之作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;C++学习头牌，技术影响力图书冠军&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;真正畅行全球20年的C++入门必读经典，惠及数百万高校师生启蒙5代国产程序员，语言缔造者与常青藤名校数版迭代的杰作，系统透彻：从初学到专家可全程案头备用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;102&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;102&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;c++ primer二维码.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZ4Nt0KI5tic06GqKceCXZ6miaQc4E6KStCVQCVsGic8TaBZrll9n4QEgbw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（京东满100减50，快快扫码抢购吧！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;8&quot; data-cropselx2=&quot;242&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;306&quot; data-ratio=&quot;1.2224938875305624&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3kKolEJ02IEmh8snj1iasYia2K1Ce0GibNOOf9Tj9Yic5nia5CzhUiah6IpP08ibSPb1eY4JmNcg177E7hwA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;818&quot; title=&quot;了不起的JavaScript工程师：从前端到全端高级进阶.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;Effective C++：改善程序与设计的55个具体做法（第三版）中文版&lt;/strong&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Scott Meyers 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;侯捷 译&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot; data-width=&quot;100%&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一本轻薄短小高密度的“专家经验累积”&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;国际影响力波及了整个计算机技术出版领域&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书&lt;span&gt;不是读完一遍就可以束之高阁的快餐读物，也不是用以解决手边问题的参考手册，而是需要您去反复阅读体会的，C++是真正程序员的语言，背后后精神的思想与无以伦比的表达能力，这使得它具有类似宗教般的魅力。希望这本书能够帮您跨越C++的重重险阻，领略高处才有的壮美风光，做一个成功而快乐的C++程序员。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;108&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;108&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZZ5SCyRZibMlAg4teH9uyl5I40AyMd28bGiacNia401sgbKz0dEsKxC4Ng/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;effective c++二维码.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;span&gt;京东&lt;/span&gt;&lt;span&gt;满100减50&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;快快扫码抢购吧&lt;/span&gt;！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;33&quot; data-cropselx2=&quot;287&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;321&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3kKolEJ02IEmh8snj1iasYia20vo0kcQZo4ia9NB9R8uC114KuY4KRntcKvicYYZwNciciao7lzdibsO5rDA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;310&quot; title=&quot;9787121387074.png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;More Effective C++：35个改善编程与设计的有效方法（中文版）&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Scott Meyers 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;侯捷 译&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;继Effective C++之后，Scott Meyers于1996推出这本“续集”。条款变得比较少，页数倒是多了一些，原因是这次选材比“第一集”更高阶&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_img_placeholder&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;103&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;103&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZZpn8uqGonKOqhIODgvLmibrcU66k4via5jicJ99WZib8FYo2wv0R6FYPIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;more effective二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;span&gt;京东&lt;/span&gt;&lt;span&gt;满100减50&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;快快扫码抢购吧&lt;/span&gt;&lt;span/&gt;！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3289036544850499&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3mjCkJ264rq5nOFod30q9sLicaFNOibB7qHBF86LnCYmDwNHwW645Zc0uqcSskhicL0q5FViboBq0fL9Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;深度探索C++对象模型》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Stanley，B. Lippman 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;侯捷 译&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本书&lt;span&gt;专注于C++面向对象程序设计的底层机制，包括结构式语意、临时性对象的生成、封装、继承，以及虚拟――虚拟函数和虚拟继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这本书让你知道：一旦你能够了解底层实现模型，你的程序代码将获得多么大的效率。Lippman澄清了那些关于C++额外负荷与复杂度的各种错误信息和迷思，但也指出其中某些成本和利益交换确实存在。他阐述了各式各样的实现模型，指出它们的进化之道及其本质因素。书中涵盖了C++对象模型的语意暗示，并指出这个模型是如何影响你的程序的&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;108&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;108&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZ8HhGCkV6JYje34MJ9WhBgrLjYpTrwtOszwcoOdWM7lUW0Pib5icgtj1Q/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;深度探索C++二维码.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;span&gt;京东&lt;/span&gt;&lt;span&gt;满100减50&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;快快扫码抢购吧&lt;/span&gt;&lt;span/&gt;！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;357&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;357&quot; data-ratio=&quot;1.1832669322709164&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3kKolEJ02IEmh8snj1iasYia2jB3tGO5UlfprdUTcMI7jjBRxIqnfYeo0fGlaWjLyYG5UTVs6NicZRDg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;251&quot; title=&quot;高性能JavaScript.jpg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;▊《&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;C++标准库（第2版）&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;【德】Nicolai M. Josuttis 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;侯捷 译&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;标准库提供了一组公共类和接口，极大地拓展了C++语言核心功能。本书详细讲解了每一标准库组件，包括其设计目的和方法、复杂概念的剖析、实用而高效的编程细节、存在的陷阱、重要的类和函数，又辅以大量用C++11标准实现的实用代码范例。除覆盖全新组件、特性外，本书一如前版，重点着眼于标准模板库（STL），涉及容器、迭代器、函数对象以及STL算法。此外，本书同样关注lambda表达式、基于区间的for循环、move语义及可变参数模板等标准库中的新式C++编程风格及其影响&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;120&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;120&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZD4rYNulU0WCFhQFM2TFVqneZMP57wvvoqHIQuGMN9ibe4sUECz7zFng/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;C++标准库二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;span&gt;京东&lt;/span&gt;&lt;span&gt;满100减50&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;快快扫码抢购吧&lt;/span&gt;&lt;span/&gt;！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;258&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;258&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3m4ydwEyqMQUtnMkGJrPcIA9TubQFIttIyLr7ia5zQXUiapSgYkHA7VbV0xlg0WMPXs3oUHEyrCEGUw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;284&quot; data-width=&quot;305px&quot; title=&quot;C++服务器开发精髓.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊《C++服务器开发精髓》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;张远龙&lt;/span&gt;&lt;span&gt; 著&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从操作系统原理角度讲解C++服务器开发技术栈&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内容详尽细致、版本新&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重磅级C++服务器开发红宝书&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;本书详细讲解如何掌握C++服务器开发技术，以及如何成为合格的C++开发者，秉承的思想是，通过掌握技术原理，可以轻松制造“轮子”，灵活设计出优雅、鲁棒的服务，并快速学习新技术。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;无论是对于C/C++开发者、计算机专业的学生，还是对于想了解操作系统原理的读者，本书都极具参考价值。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;108&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;108&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZTOdqzHozcB6x5UcrcXfZVZts48wBVWaXbXYMO1uHx2xUTp4rGvMjQw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;C++服务器开发二维码.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（&lt;span&gt;&lt;span&gt;京东满100减50，快快扫码抢购吧！&lt;/span&gt;&lt;/span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3licUOs7Micbu60sSDWicK0PBaeIwYgWJUFkNaRiaF752Xiaibwb02snk7KTeJ2REsVddQjV69BDhCqbGKg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; data-width=&quot;327px&quot; title=&quot;9787121442315.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊&lt;/strong&gt;&lt;strong&gt;《&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;假如C语言是我发明的：讲给孩子听的大师编程课》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;王洋，徐俊，王瑞 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;一位从未接触过计算机编程的小学生提问，作者尝试站在编程语言发明者的角度来回答，提问有趣活泼，从不懂计算机编程到能参加信息学奥林匹克比赛；回答清晰深刻，描述正确的编程思维并能学以致用——本书在这样的一问一答中带领大家开启一次C语言入门之旅。本书不仅叙述C语言的全部语法规则，而且包含编程涉及的计算机科学的相关知识和基础概念，还精心编排大量短小精悍、循序渐进的编程任务，分布在本书的每个部分。读者如果认真地跟随本书实现每段程序，将具备C语言基础编程的能力。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;C语言历来被认为是为编程高手而生的语言，本书写给希望学习C语言的读者。无论你是小学中高年级的学生，还是计算机专业的大学生，或者是完全没有C语言基础和编程知识的人，本书都能带领你从零开始掌握C语言的全部语法，感受用0和1实现自己想法的成就感。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;115&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;115&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZV2CFWE14rsTLeK4twQoWk1da8aP0mUNUFNZkXiaojtKdcciamQpibBjtQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;假如C语言二维码 (2).png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（京东满100减50，快快扫码抢购吧！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3lqI689PZD8h1fErIibflosZkiaK6WewLbnIGIoU2oLkclic2f1lEkGm5JZfHACCKUYiaSowQn3iadGljg/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot; data-width=&quot;258px&quot; title=&quot;啊哈C语言9787121304620.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊&lt;/strong&gt;&lt;strong&gt;《&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;啊哈C语言！逻辑的挑战（修订版）》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;啊哈磊 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这是一本非常有趣的编程启蒙书，全书从中小学生的角度来讲述，没有生涩的内容，取而代之的是生动活泼的漫画和风趣幽默的文字。并配合超萌的编程软件，从开始学习与计算机对话到自己独立制作一个游戏，由浅入深地讲述编程的思维。同时，与计算机展开的逻辑较量一定会让你觉得很有意思。你可以在茶余饭后阅读本书，甚至蹲在马桶上时也可以看得津津有味。编程将会改变我们的思维，教会我们如何思考，让我们的思维插上计算机的翅膀，以一种全新的方式来看世界。现在就让我们一起走进计算机编程的神奇世界，探索和发现计算机编程的魔力吧！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;115&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;115&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZu7Tu7SexoMFyeV1fVsapS0aIBlWEqvVB29bice2cDyEpYpgZs4hewqg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;啊哈C语言二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（京东满100减50，快快扫码抢购吧！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.32375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3lqI689PZD8h1fErIibflosZg3kySHV1YLiczJm2oI6yfklc1libycROw5ZpRZKaWDJNZharHiaLczjAA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot; data-width=&quot;288px&quot; title=&quot;啊哈编程星球9787121371691.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;▊&lt;/strong&gt;&lt;strong&gt;《&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;啊哈编程星球：一本书入门Python和C++》&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;啊哈磊 著&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;90239&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;欢迎来到“啊哈编程星球”。《啊哈编程星球：一本书入门Python和C++》是面向中小学生的编程入门书籍。在这里，你将使用循环结构解救被困的人工智能小女孩，使用条件判断躲避邪恶反派的陷阱，使用函数和递归逃离迷宫，还要学习各种逻辑和算法与数据黑客们并肩作战。《啊哈编程星球：一本书入门Python和C++》不但包含同名游戏化编程学习软件《啊哈编程星球》中所有关卡的思路讲解及通关代码，在每章结尾还有关于学习内容的总结。通过跌宕起伏的剧情、生动有趣的故事和风趣幽默的语言，你便能轻松入门Python和C++语言编程。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;115&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;115&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3lqI689PZD8h1fErIibflosZPTWbcKFz2q5ABJyov31cNDiaT9eHRhNTON4hGvS8ekQ79FqeJR3NGBw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; title=&quot;啊哈编程星球二维码.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（京东满100减50，快快扫码抢购吧！）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;发布：刘恩惠&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;审核：陈歆懿&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3ntPMYAJur3UuYzhSDgO7Puv74VHDtgNjyJbpQvt1gicgSpjrlpDy6BheYoAmtjiaF7cdIuPkuUlFkw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1920&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;29.8961937716263&quot; data-ratio=&quot;0.01574074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PW0wIHxgg3ntPMYAJur3UuYzhSDgO7Pu8DQL5f0FQIuDZC87yrAuNLy4frEdlMeWkthrlzczb0RbMOBQCAwDrA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果喜欢本文&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;欢迎&lt;/span&gt; &lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;留言&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;丨&lt;/span&gt;&lt;span&gt;&lt;strong&gt;分享至朋友圈&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 三连&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;92644&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt; &lt;strong&gt;热文推荐 &lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;574&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;244&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PW0wIHxgg3m3jibtjia3lCrCvUY6N19QMZ3FjCcpuHouXkdLicQVUiaLicgR8cgSbk7RA8G427GKowhbEvVefuJp53g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>