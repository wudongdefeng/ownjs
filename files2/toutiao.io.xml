<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2abc8e8cc87c50af1533df43ca209a28</guid>
<title>MySQL 基于 binlake 同步 ES 积压解决方案</title>
<link>https://toutiao.io/k/qkyv5bw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;1 背景与目标
1.1 背景
国际财务泰国每月月初账单任务生成，或者重算账单数据，数据同步方案为mysql通过binlake同步ES数据，在同步过程中发现计费事件表，计费结果表均有延迟，ES数据与Mysql数据不一致，导致业务页面查询数据不准确，部分核心计算通过ES校验失败&lt;/p&gt;

&lt;p&gt;1.2目标
解决binlake到JMQ积压同步ES延迟问题&lt;/p&gt;

&lt;p&gt;2 当前业务流程
2.1 流程图
现有业务基本流程如下图，包含运营端和外部数据接入，整体操作到数据存储流程
&lt;img src=&quot;https://img.toutiao.io/attachment/3465e2d8ae1d4461ab95bf47740d09aa/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2.2 数据流
&lt;img src=&quot;https://img.toutiao.io/attachment/6a1adfa7fd204ea2871fd9b6177400a7/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3 问题分析
3.1 问题现象
jmq积压，报警
国内站截图如下
&lt;img src=&quot;https://img.toutiao.io/attachment/4f0cca1410cc491ab6aebd27b533d6bb/w600&quot; alt=&quot;file&quot;/&gt;
&lt;img src=&quot;https://img.toutiao.io/attachment/c400c96c9ad8495db500bd5208158ca6/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.2 筛查分析
普及：JMQ默认生产者发送消息QPS受到主题的broker数量影响，(8w/s)/broker&lt;/p&gt;

&lt;p&gt;3.2.1 MQ积压分析
1）分析原因一、ES写入量大，导致ES写入QPS瓶颈&lt;/p&gt;

&lt;p&gt;ES写入瓶颈需要进行压测，才能确定实际是否达到瓶颈；
通过查询集群负载，写入队列有无积压，cpu高不高，来定位
以下为调整MQ批量消费大小后的ES监控
写入队列无积压，CPU不高，写入QPS没有达到瓶颈
&lt;img src=&quot;https://img.toutiao.io/attachment/15a3000b4a164f3bba38483dcd3ca25a/w600&quot; alt=&quot;file&quot;/&gt;
&lt;img src=&quot;https://img.toutiao.io/attachment/ae1d31475e8e43568ec5b37f7214351c/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2）分析原因二、ES写入慢导致消费积压&lt;/p&gt;

&lt;p&gt;ES解析服务解析慢，瓶颈在ES解析处
根据当前系统CPU、负载信息定位是否服务器性能满负荷，是否扩容
无报警信息，整体运行平稳，基本排除业务资源达到瓶颈问题引起写入慢
&lt;img src=&quot;https://img.toutiao.io/attachment/594ccba9d16145f586043e86cc35c03d/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;MQ消费端消费慢，瓶颈在消费并发处
当前主题分片数3，队列数为15，默认最大并发数为15*10，报警当时入队数500~700/s
定位问题，为MQ消费慢，其根本原因为受到ES-Parse业务系统处理速度影响&lt;/p&gt;

&lt;p&gt;3.3 临时处理方案
开启mq并行消费策略，写入QPS显著增加
&lt;img src=&quot;https://img.toutiao.io/attachment/263a4085f4e84f619015be05b69f860c/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4 如何提升消费速率，提升写入ES速率
造成问题原因核心点是MQ积压，业务系统消费慢，MQ入队数大于出队数，导致积压&lt;/p&gt;

&lt;p&gt;4.1 原理分析
4.1.1 存储流程解析
第一步：binlake订阅mysql binlog
第二步：发MQ，JMQ数据传输
第三步：消费JMQ数据，ES Paser数据解析，
第四步：数据存储
&lt;img src=&quot;https://img.toutiao.io/attachment/f0804f579ed247e8afbdd587b9104a04/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4.1.2 binlake基本原理
&lt;img src=&quot;https://img.toutiao.io/attachment/f04d4b87f5554409b0a3ca150b76b157/w600&quot; alt=&quot;file&quot;/&gt;
4.1.3 binlake发送MQ过程
&lt;img src=&quot;https://img.toutiao.io/attachment/645ad819166440f8a655b64a4a2ef569/w600&quot; alt=&quot;file&quot;/&gt;
4.1.4 JMQ消费原理
JMQ消费默认就是批量消费
消费原理如下图
&lt;img src=&quot;https://img.toutiao.io/attachment/ef459a73289c46e0b31f742cce9a6145/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;批量消费与并行消费原理如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/attachment/57ac77d9dfdf43c3ba072e36a7c7977a/w600&quot; alt=&quot;file&quot;/&gt;
通过分析，在未开启并行消费前提下，当前主题最大处并发的消费处理能力即是队列数&lt;/p&gt;

&lt;p&gt;4.2 提升消费速率的几种方案
4.2.1MQ增加消费速度方法
扩容，增加并发消费能力
针对MQ默认情况下，一切扩容都能解决问题，增大分片数，增加队列数
需要额外资源，申请扩容新的broker，同时考虑增加消费端实例&lt;/p&gt;

&lt;p&gt;增加批量大小
首先保证，业务系统(ES-Parse)消费MQ消息，处理10条和处理100条速度基本一样
实践：国际财务针对此方法进行代码逻辑改造&lt;/p&gt;

&lt;p&gt;开启并行数
理论上增加（并行数/批量数）的倍数并发处理能力
要求数据无序，针对乱序，数据存储，不影响业务&lt;/p&gt;

&lt;p&gt;4.2.2 并行有序的方案
1）实现数据幂等性，增加缓存，并行消费策略&lt;/p&gt;

&lt;p&gt;方案流程
&lt;img src=&quot;https://img.toutiao.io/attachment/7262ffeb9b974621862e1a39ee261b6a/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;基础实现流程：&lt;/p&gt;

&lt;p&gt;1）根据binlake发送mq，在mq端开启并行消费，确保并行消费
2）根据业务单号对，单号加锁（如麦哲伦对运单号加锁，即对单号加分布式锁），根据对应的ID获取ES数据。
3）校验数据是否有效，若查询无数据，则直接新增；若查询的数据状态大于当前数据状态，则直接抛弃，若查询状态小于当前数据状态，则直接更新数据
4）更新缓存并释放锁&lt;/p&gt;

&lt;p&gt;优点&lt;/p&gt;

&lt;p&gt;指定资源情况下，增大消费端并发
可以开启并行消费，且保证顺序消费
可以使得资源充分利用，增加消费性能
缺点&lt;/p&gt;

&lt;p&gt;增加毫秒级缓存额外开销
实践：麦哲伦运单中心针对此方案实现binlake数据同步ES&lt;/p&gt;

&lt;p&gt;2）binlake主题分发子主题，显示增大并发策略
&lt;img src=&quot;https://img.toutiao.io/attachment/ae1b05308d2c4f51ba62654bb2008f7d/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;p&gt;逻辑相对简单，不需要开发复杂逻辑，无需引入额外中间件
预估转发消息速率即是实际处理速率
提升速率计算:&lt;/p&gt;

&lt;p&gt;原主题单线程处理一条数据存储到ES时间为es_time，举例为50ms，每秒吞吐量是20条
现单线程转发MQ一条数据时间为trans_time，举例为20ms，每秒转发吞吐量50条
假设转发topic为N个子主题，则吞吐量理论为n*20实际小于转发吞吐量50，此处多子主题对cpu核数竞争
提升吞吐量为=(1000ms/trans_time )转发吞吐量 - (1000ms/es_time)原有吞吐量
缺点&lt;/p&gt;

&lt;p&gt;扩展性不好，实际结果有待验证，小于预估值
实践：跨境赤道分发中心实现类似功能实践，消息转发，其他MQ实现&lt;/p&gt;

&lt;p&gt;3）俩种方案对比&lt;/p&gt;

&lt;p&gt;主题较少一个俩个主题情况下，且业务处理比较耗时情况下，不想额外开发，可选方案二
长期方案选择方案一，并行消费策略，可伸缩性，可扩展，支持动态扩容&lt;/p&gt;

&lt;p&gt;5.总结
针对MQ积压问题，并行消费可以是解决问题的一大利器，本文从binlake同步ES进行分析，同时针对积压推荐俩种方案，并从性能合理利用及扩展性分析，简要介绍方案二并行有序消费策略，希望能够帮助大家，如有问题，请随时指出！&lt;/p&gt;

&lt;p&gt;作者：任洪波&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bcefd62871fe139081891f981b97b693</guid>
<title>Go 十年了，终于想起要统一 log 库了</title>
<link>https://toutiao.io/k/pljw7jn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在日常工作中，打日志是很常见的动作。毕竟不打日志，从内部来讲，一旦出问题，定位、排查都会变的非常困难。谁也不想大半夜在那靠猜解决问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在其他方面，对日志的存储的内容、时长、安全均有不同程度的合规要求，应对客户诉求和提单上门的事件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志好不好用，就成了重要的诉求了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;标准库 log 很痛&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思考一个问题：&lt;strong&gt;平时你在写 Go 工程时，是否很少直接使用官方标准库 log？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在正式项目中，大多是优先使用几个爆款第三方库，例如：Logrus、Zap、zerolog，毕竟又快又猛。而标准库 log，在临时调试，屏幕输出的场景居多，占比较少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这问题出在了哪里？主要集中在以下方面：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;没有日志分级。&lt;/strong&gt;不便于分类、定位、排查问题，例如：Error、Warn、Info、Debug 等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;没有结构化日志。&lt;/strong&gt;只提供格式化日志，不提供结构化，不便于程序读取、解析，例如：Json 格式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;没有扩展性，灵活度差。&lt;/strong&gt;标准库 log 的日志输出都是固定格式，没有一个 Logger 接口规范，让大家都遵守，以至于现在社区纯自然演进，难互相兼容。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，在用户场景上，有着不包含上下文（context）信息、性能不够强劲、无法引入自定义插件等扩展诉求。基本上第三方库均有实现的，基本都用户的痛点之一。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么不早点解决&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可能会想，标准库 log 作为 Go 生态里的核心库，为什么不早点解决？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上在 2017 年时，有在社区进行了大规模讨论，可惜放弃了。原因是：“我们还没有找到足够多的导入和使用具体 Logger 的 Go 库，因此没有理由继续开展这项工作”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jG92ia02oqylf3OVgltjSge9VyiaOaZE4hdBLibRVAibTopXSgaqAY9X1QYyadGxDa6uzAft5DPw1JIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;figcaption&gt;g/golang-dev/c/F3l9Iz1JX4g/m/t0J0loRaDQAJ&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续摆烂，再鸽几年。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;救星 slog 库诞生&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;讨论和目标&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2022 年 8 月，Go 团队的 @
Jonathan Amsterdam 发起了 &lt;span&gt;discussion: structured, leveled logging&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 的讨论，试图与这个乱象再度一决雌雄。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5169082125603864&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jG92ia02oqylf3OVgltjSgeqbJLq2prUC2qkBGEibtETbC7nHaibicPVDloJZuia6VVVbb3no1JOFQHSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1656&quot;/&gt;&lt;figcaption&gt;discussions/54763&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提案（含讨论）的目标是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;使用方便。&lt;/strong&gt;对现有 Logger 库的调查说明，开发人员更想要一个简洁且易懂的日志 API。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;高性能。&lt;/strong&gt;新的 API 希望做到最大限度的减少内存分配和锁定。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;与运行时跟踪集成。&lt;/strong&gt;Go 团队正在开发和改进运行时跟踪系统，基于新 Logger 库的日志将可以无缝衔接到这个跟踪系统中，开发人员能够实现程序操作与运行时的行为相关联。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目标涵盖了前文背景中提到的痛点。我关注到上述的第三点，来自 Go 团队自己的需求，果然最优先要做的需求都是自己想要 PUSH 的需求？雾了雾了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毕竟已经 10 年了，本讨论中得到了许多人的建议和推进，成功孵化。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;快速 Demo&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该库目前已经经过 “石锤” 阶段，非常快速地进入了实验库，导入地址是：golang.org/x/exp/slog，推荐大家试用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2561105207226355&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jG92ia02oqylf3OVgltjSgeWSVh5DEDuWVFlJbKjvk8keiak2rJWpicA6iaiaw0ftjc1aHvtxibInrTf4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1882&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先上手新日志库 slog 的快速 Demo，便于大家快速了解和熟悉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;log/slog&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    slog.SetDefault(slog.New(slog.NewTextHandler(os.Stderr)))&lt;br/&gt;    slog.Info(&lt;span&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;Al&quot;&lt;/span&gt;)&lt;br/&gt;    slog.Error(&lt;span&gt;&quot;oops&quot;&lt;/span&gt;, net.ErrClosed, &lt;span&gt;&quot;status&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;)&lt;br/&gt;    slog.LogAttrs(slog.ErrorLevel, &lt;span&gt;&quot;oops&quot;&lt;/span&gt;,&lt;br/&gt;        slog.Int(&lt;span&gt;&quot;status&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;), slog.Any(&lt;span&gt;&quot;err&quot;&lt;/span&gt;, net.ErrClosed))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不设置 &lt;code&gt;slog.SetDefault&lt;/code&gt; 将会默认输出到标准输出。由于上述程序设置了 &lt;code&gt;os.Stderr&lt;/code&gt;，因此会在此输出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序运行结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;time=2022-10-24T16:05:48.054-04:00 level=INFO msg=hello name=Al&lt;br/&gt;time=2022-10-24T16:05:48.054-04:00 level=ERROR msg=oops status=500 err=&lt;span&gt;&quot;use of closed network connection&quot;&lt;/span&gt;&lt;br/&gt;time=2022-10-24T16:05:48.054-04:00 level=ERROR msg=oops status=500 err=&lt;span&gt;&quot;use of closed network connection&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看到了日志分级（Level）、自定义字段追加、设置输出地等特性。在输出格式上，新的 slog 库，将会采取与 &lt;span&gt;logfmt&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 库类似的方式来实现，内置至少两种格式，也可以自定义实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认的 logfmt 消息格式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;foo=bar a=14 baz=&lt;span&gt;&quot;hello kitty&quot;&lt;/span&gt; cool%story=bro f %^asdf&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想调整为 JSON 格式，可进行设置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;slog.SetDefault(slog.New(slog.NewJSONHandler(os.Stderr)))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会使用 JSON 格式输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{ &lt;span&gt;&quot;foo&quot;&lt;/span&gt;: &lt;span&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span&gt;&quot;a&quot;&lt;/span&gt;: &lt;span&gt;14&lt;/span&gt;, &lt;span&gt;&quot;baz&quot;&lt;/span&gt;: &lt;span&gt;&quot;hello kitty&quot;&lt;/span&gt;, &lt;span&gt;&quot;cool%story&quot;&lt;/span&gt;: &lt;span&gt;&quot;bro&quot;&lt;/span&gt;, &lt;span&gt;&quot;f&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;&quot;%^asdf&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;设计思路&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者将 slog 库的设计分为：前端、后端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前端，slog 认为你常用且能看得见的 API 都是前端，例如：Info、Debug 等日志分级的，设置上下文内容的 Context 和自定义字段注入等都包含在前端的范畴内。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下方法：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8975265017667845&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jG92ia02oqylf3OVgltjSgeticmqwzQOotWHzbkJTXKTeboN9Leb4UicHpu9icTJdjM6ZpdQcpWadfOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1132&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后端，slog 认为实际干具体业务逻辑的 Handler 是后端，并将其抽象成了 Handler 接口，只需要实现 Handler 接口，就可以注入自定义 Handler。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下 Handler 接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Handler &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// 启用记录的日志级别&lt;/span&gt;&lt;br/&gt; Enabled(Level) &lt;span&gt;bool&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 具体的处理方法，需要 Enabled 返回 true&lt;/span&gt;&lt;br/&gt; Handle(r Record) error&lt;br/&gt;&lt;br/&gt; WithAttrs(attrs []Attr) Handler&lt;br/&gt;&lt;br/&gt; WithGroup(name &lt;span&gt;string&lt;/span&gt;) Handler&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中你可以看到 Handle 函数有一个 Record 属性，它是一个核心的数据结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Record &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; Time time.Time&lt;br/&gt;&lt;br/&gt; Message &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; Level Level&lt;br/&gt;&lt;br/&gt; Context context.Context&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新的 slog 的内部流程如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;前端方法（例如：Info）将所传属性封装为 Record 类型的变量。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将 Record 类型的变量传递给后端方法（例如：Handle）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后端 Handle 方法根据所得 Record，进行对应的格式化、方法调用、日志输出等具体日志动作。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;与其他 Logger 交互&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那回到最开始的问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们现在要写一个私有的 Logger，或是复用 Zap。要怎么做？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后端方法，有两条路：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;要不走 Record，调用 NewRecord 将其包装成 Record 类型的变量，再往下传。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要不走 Handle，将处理逻辑写到自定义 Handle 中去完成。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实两者是&lt;span&gt;同一条路。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是想在前端方法来处理，很遗憾，Go 没有计划将 slog 前端开放。确保了前端稳态，后端可变可扩展的灵活性。我个人觉得有利有弊了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有兴趣了解如何实现自定义 Handle，可以查看 &lt;span&gt;TextHandler&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 和 &lt;span&gt;JSONHandler&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 即可，是官方最佳实践。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;上下文注入&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经典的 context 场景，slog 库直接内置了相关的函数进行支持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;FromContext&lt;/span&gt;&lt;span&gt;(ctx context.Context)&lt;/span&gt; &lt;span&gt;Logger&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;    FromContext returns the Logger stored in ctx by NewContext, or the &lt;span&gt;default&lt;/span&gt;&lt;br/&gt;    Logger &lt;span&gt;if&lt;/span&gt; there is none.&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewContext&lt;/span&gt;&lt;span&gt;(ctx context.Context, l Logger)&lt;/span&gt; &lt;span&gt;context&lt;/span&gt;.&lt;span&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;    NewContext returns a context that contains the given Logger. Use FromContext&lt;br/&gt;    to retrieve the Logger.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的 Demo：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;handle&lt;/span&gt;&lt;span&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    rlogger := slog.FromContext(r.Context()).With(&lt;br/&gt;        &lt;span&gt;&quot;method&quot;&lt;/span&gt;, r.Method,&lt;br/&gt;        &lt;span&gt;&quot;url&quot;&lt;/span&gt;, r.URL,&lt;br/&gt;        &lt;span&gt;&quot;traceID&quot;&lt;/span&gt;, getTraceID(r),&lt;br/&gt;    )&lt;br/&gt;    ctx := slog.NewContext(r.Context(), rlogger)&lt;br/&gt;    &lt;span&gt;// ... use slog.FromContext(ctx) ...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是比较方便的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在此刻，Go 社区中的 log 库们已经基本成熟，格局已定的 7788。此时 Go 官方的 slog 库推出，很明显吸取了前者的大量丰富经验（提案有声明）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我相信在未来 slog 库，会和更多的 Go 生态的工具链打通，提供更丰富的关联场景。解决 Go 没有一个靠谱 log 库的痛点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你觉得这个新库能在未来统一乱象吗？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;discussion: structured, leveled logging: &lt;em&gt;https://github.com/golang/go/discussions/54763&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;logfmt: &lt;em&gt;https://pkg.go.dev/github.com/kr/logfmt&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;TextHandler: &lt;em&gt;https://cs.opensource.google/go/x/exp/+/c99f073a:slog/text_handler.go&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;JSONHandler: &lt;em&gt;https://cs.opensource.google/go/x/exp/+/c99f073a:slog/json_handler.go&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>422b0de3d00ee33886efa4d36c9db9fb</guid>
<title>实时数仓架构设计</title>
<link>https://toutiao.io/k/7w1ndgi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86013&quot;&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3ODg2NjI1MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/BIxNE69adGlfmBqRibDFy1BvC3ibkjsrBZMkmFsHsz5k5uuTSNy9Cic4KxklugDtggrwgJQLf360A9GCMOglwSNWg/0?wx_fmt=png&quot; data-nickname=&quot;数据万有引力&quot; data-alias=&quot;&quot; data-signature=&quot;数据知行合一 知：掌握数据建设方法论、技术体系； 行：将数据建设方法论、技术体系与业务场景结合落地&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;259&quot; data-ratio=&quot;0.6246200607902735&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/BIxNE69adGlSoruXKZvicec8DaRT4WgbA8mfziaAhUscyBDuZVoGVfVswDmcqjRttDKRuQgtLbKH6PMhOVM4AnvQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;658&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;数据知行合一 &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;知：&lt;/span&gt;&lt;span&gt;掌握数据建设方法论、技术体系；&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行：&lt;/span&gt;&lt;span&gt;将数据建设方法论、技术体系与业务场景结合落地&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;关注“数据万有引力”公众号&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;正文共：3198字 11图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;预计阅读时间：8分钟&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;span&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;156&quot; data-backw=&quot;562&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;156&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BIxNE69adGm1JKlx2yWPAic9picTW8sjvARAKHs5tfEzHhWF1ic4nD6937iaSiaosYOJsaB9h11atLdryQ1WNu9oBicA/640?wx_fmt=png&quot; data-w=&quot;900&quot; title=&quot;WechatIMG968.jpeg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;71&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;71&quot; data-ratio=&quot;0.12239089184060721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Udyic3dg81RNia0qRe5yAJFibK1veggg8WB3UU4bR7WRv0LgPcFaoicHSzciadFOW65QC1xnwVRnF5fp4kmqCYQ79aw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1054&quot; title=&quot;1.jpg&quot;/&gt;&lt;/p&gt;&lt;h2 data-pm-slice=&quot;1 1 []&quot;/&gt;&lt;h2 data-id=&quot;heading0&quot; data-type=&quot;heading&quot; top=&quot;211&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;什么是实时数仓&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;首先需要明确什么是实时数仓，百度百科与维基百科都没有给出具体说明，&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;哪究竟什么才是实时数仓呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;是不是可以通过实时流实时获取数据就是实时数仓？&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;或者说流批一体就是实时数仓？&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;再或者全链路实现实时数据采集和实时计算才是实时数仓？&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;这个问题在不同企业可能会有不同答案，有些将实时数仓定义为提供实时看板或实时报表；另外一些可能觉得数仓提供出去数据必须都是实时才算实时数仓。其实这个问题没有一个标准答案，不同人、场景、企业对它理解是不一样的。记得之前有位上司讲管理岗与技术岗区别，其中一点是&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;对待一件事情或需求，T 岗答案都是明确：要么可以做，要么不可以做；M 岗的回答看似明确，其实会有多种解读角度。【这不就是老油条么，哈哈】&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;所以从不同角度去解读实时数仓，对什么是实时数仓定义是不一样；一般会有一些几种定义：&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;ul data-type=&quot;bulletedlist&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;具备实时数据处理能力，并能够根据业务需求提供实时数据的数仓能力，如可以为运营侧提供实时业务变化、实时营销效果数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;数仓中所有数据，从数据采集、加工处理、数据分发都采用实时方式。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;从数据建设、数据质量、数据血缘、数据治理等都是采用实时方式。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;从中可以看出不同理解，建设实时数仓复杂程度是不一样。但最终建设一套什么样实时数仓还是由业务驱动，需要综合考虑投入产出。&lt;/span&gt;&lt;/p&gt;&lt;p data-pm-slice=&quot;1 1 []&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;71&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.12239089184060721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Udyic3dg81RNia0qRe5yAJFibK1veggg8WBiaNibKjeejdtOuhnR3sumyfsUAjIqVJwO54fQ1aX834h0ZibvjAickqn6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1054&quot;/&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading1&quot; data-type=&quot;heading&quot; top=&quot;825&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;实时数仓架构设计思路&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;数据流转与处理，在实时或者离线数仓基本上都是类似下图的，因为分层是一种非常有效的数据治理方式，所以在实时数仓如何进行管理的问题上，首先考虑的也是分层的处理逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BIxNE69adGlSoruXKZvicec8DaRT4WgbAt1fu4a9LtiaxpEL7HtF1ueYrbPjHrwsXpjREuBiaukBqibEAVkvSpUg2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1212&quot;/&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;从上图可以看出，在设计实时数仓方案时，需要对以下几点进行思考（不是为了设计出最牛逼技术方案，而是所设计方案是最切合业务场景与资源情况的；有时候牛逼技术方案会加大技术复杂程度与运维难度，会很考验我们驾驭能力；因此我们选择的不是技术最牛逼方案，而且最切合我们实际情况方案）：&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;ul data-type=&quot;bulletedlist&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;数据集成&lt;/span&gt;是否流批一体&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：离线与实时是否使用统一数据采集方式；如统一通过 CDC 或者 OGG 将数据实时捕获推送到 kafka，批与流在从 kafka 中消费数据，载入明细层。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;存储层&lt;/span&gt;是否流批一体&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：离线与实时数据是否统一分层、统一存储；如离线与实时数据经过 ETL 处理之后根据统一分层（ODS、DMD、DMS）持久化到同一个数据存储中。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;ETL 逻辑&lt;/span&gt;是否 流批一体：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;流与批处理是否使用统一 SQL 语法或者 ETL 组件，再通过底层分别适配流与批计算引擎。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;计算&lt;/span&gt;&lt;span&gt;引擎&lt;/span&gt;是否 ETL 流批一体：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;流与批使用同一套计算引擎，从根本上避免同一个处理逻辑流批两套代码问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;数据集成与存储层流批一体主要产生以下问题：&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;71&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.12239089184060721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Udyic3dg81RNF7gAscgWtPxguCF3fO3ZmwiayXpRBZCiaw7HufXpYAFSY9dddKVU7B9ViaGtOMYuvnk2AdcvtrdFVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1054&quot;/&gt;    &lt;strong&gt;&lt;span&gt;实时数仓架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;根据这几个是否一体：“是否数据集成流批一体、“是否存储层流批一体”、“是否 ETL 逻辑流批一体”、“是否 ETL 计算引擎流批一体”，不同流批一体组合会设计出不一样的实时数仓架构。比较经典的架构有 &lt;strong&gt;Lambda、Kappa&lt;/strong&gt;；还有美团实时数仓架构&lt;strong&gt;（实时数据生产 + 实时分析引擎）&lt;/strong&gt;与&lt;strong&gt;阿里的流批一体架构（Lambda+Kappa）&lt;/strong&gt;。下面分别对这几个实时数仓架构概括说明。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id=&quot;heading3&quot; data-type=&quot;heading&quot; top=&quot;1775&quot;&gt;&lt;span data-type=&quot;strong&quot;&gt;Lambda 数仓架构&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span data-type=&quot;strong&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.635593220338983&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/BIxNE69adGlSoruXKZvicec8DaRT4WgbAKicKia4TgjRLsl0UqjeAtzL86zY0ia3tKrdXlE9Ru0rEJIF26XR8KQ6Rw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1062&quot;/&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;Lambda 有 Batch Layer（批处理）和 Speed Layer（流式处理）。然后通过将批、和流的结果拼接在一起。Lambda 架构具备有数据不可变性质避免人为引入错误问题、支持数据重跑、将复杂的流处理分离出来。而 Batch Layer 和 Speed Layer 由于需要满足不同的场景，往往会选择不同的组件。而且，大家写过 Storm 就会知道，Storm 的代码写起来的是挺痛苦的（Trident 会有所改善）。所以，我们需要准备两套代码。同样的逻辑，针对批处理、和流处理要实现两次。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;Lambda 架构问题：&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;ul data-type=&quot;bulletedlist&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;两套架构、各自独立&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;一种逻辑两套代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;组件太&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;数据散布在多个系统中，互相访问困难&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-id=&quot;heading4&quot; data-type=&quot;heading&quot; top=&quot;2224&quot;&gt;Kappa 架构&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;Kreps 提出了另一个维度的思考，我们是否能够改进，采用流处理系统来建设大数据系统呢？提出完全可以通过建设以流为核心来建设数据系统。并且，通过重放历史数据来实现数据重跑。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;这种以流处理为核心来建设数据系统，Kreps 称之为「Kappa 架构」。Kappa 和 Lambda 都是希腊字母符号。这套架构远比 Lambda 架构简单。就是把原先批处理，改成流处理。它没有了 Lambda 架构中的 Batch Layer、Speed Layer、以及 Serve Layer。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.740029542097489&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BIxNE69adGlSoruXKZvicec8DaRT4WgbA181bqNGxrSrzDxCQp86u8PpbmN9nxibFPwHz37d6twRYkQNLDe9TZgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;677&quot;/&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;Lambda 架构问题：&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-id=&quot;heading5&quot; data-type=&quot;heading&quot; top=&quot;2674.5&quot;&gt;实时数据生产 + 实时分析引擎&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3638888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BIxNE69adGlSoruXKZvicec8DaRT4WgbAI8REUnxrxfUNiaicWrdamChQiakvYcY6XwOlaG3gfw8goOibXdhhiaKricFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;上图是美团实时数仓架构设计，数据从日志统一采集到消息队列，再到数据流的 ETL 过程，作为基础数据流的建设是统一的。之后对于日志类实时特征，实时大屏类应用走实时流计算。对于 Binlog 类业务分析走实时 OLAP 批处理。美团实时数仓架构主要是将一些在实时处理面临的难点，由实时 OLAP 处理。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;实时处理面临的几个难点：&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;ul data-type=&quot;bulletedlist&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;业务的多状态性：业务过程从开始到结束是不断变化的，比如从下单-&amp;gt;支付-&amp;gt;配送，业务库是在原始基础上进行变更的，Binlog 会产生很多变化的日志。而业务分析更加关注最终状态，由此产生数据回撤计算的问题，例如 10 点下单，13 点取消，但希望在 10 点减掉取消单&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;业务集成：业务分析数据一般无法通过单一主体表达，往往是很多表进行关联，才能得到想要的信息，在实时流中进行数据的合流对齐，往往需要较大的缓存处理且复杂。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;分析是批量的，处理过程是流式的：对单一数据，无法形成分析，因此分析对象一定是批量的，而数据加工是逐条的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-id=&quot;heading6&quot; data-type=&quot;heading&quot; top=&quot;3185&quot;&gt;Lambda+Kappa&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5643459915611815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BIxNE69adGlSoruXKZvicec8DaRT4WgbAKZWAACOeRIVv3Gj3lIvOUsnrrLoY21xpZwDHVW8lJs0JUgCoGx1Hww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;948&quot;/&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;从上图可以看出，阿里的实时数仓架构是同时 Lambda 与 Kappa 结合；数据集成没有使用流批一体，分别通过实时采集、数据同步方式实现流与批数据采集。ETL 逻辑流批一体，实现用户只写一套代码，平台自动翻译成 Flink Batch 任务和 Flink Stream 任务，同时写到一张 Holo 表，完成计算层表达的统一。存储层流与批是分开存储，但可以实现流批存储透明化，查询逻辑完全一致。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12239089184060721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Udyic3dg81RNF7gAscgWtPxguCF3fO3Zm9VrP2W3jIPfODZGhgks9XZyPLiaAiaWps97G7EwNrogxC95umicUqZ1zA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;1054&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-id=&quot;101&quot;&gt;&lt;section data-id=&quot;85626&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1666952171832=&quot;154&quot; data-index-1666952171832=&quot;4571&quot; data-textnode-notemoji-index-1666952171832=&quot;4571&quot; class=&quot;character&quot;&gt;  总结&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;架构设计不是为了设计出最牛逼技术方案，而是&lt;strong&gt;所设计方案是最切合业务场景与资源情况的&lt;/strong&gt;；有时候牛逼技术方案会加大技术复杂程度与运维难度，需要投入更高成本驾驭它；因此我们选择的不是技术最牛逼方案，而且最切合我们实际情况技术架构。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;在实时数仓架构设计时，主要是思考“是否数据集成流批一体、“是否存储层流批一体”、“是否 ETL 逻辑流批一体”、“是否 ETL 计算引擎流批一体”；权衡这几个一体带来问题，而设计出符合业务场景的实时数仓架构。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12239089184060721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Udyic3dg81RNF7gAscgWtPxguCF3fO3ZmjyHxLkg3UYGy4FWoErzLmIxoFzYWmcRVzJwYFhvyxhcBEqzplCSE4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1054&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-id=&quot;101&quot;&gt;&lt;section data-id=&quot;85626&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  写在最后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;企业在进行架构设计与技术选型时，需要了解所选型技术使用场景，脱离使用场景的技术选型就如无源之水，无本之末；对技术使用场景认知程度，决定了我们所选择的解决方案；如“盲人摸象”的例子，如果你只摸到了象的耳朵，那么你的解决方案就是拿一个筐，把耳朵拎走。如果你摸到的是整头大象，你的解决方案就会是集装箱，用卡车把它运走。但是如果你摸到了整个象群，你的解决方案可能是修桥、修路。&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;你的世界有多大，在于你发现的世界有多大，然后你的解决方案就有多大。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构设计如此，做人做事也是如此；我们&lt;span&gt;&lt;em&gt;认知能力就可以让我们以多个角度观察事物，并接近事物真相的能力。&lt;/em&gt;推荐可以提升认知能力、重塑思维书单给大家。点击关注下方公众号可以免费下载电子书。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6574074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/BIxNE69adGlfmBqRibDFy1BvC3ibkjsrBZCPYqPksuVo2ia9gicakS0BucjlhJgbJZa5c3qOwd2Dibtb3AF47mUoZAQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-id=&quot;101&quot;&gt;&lt;section data-id=&quot;85626&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;147&quot; data-backw=&quot;530&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;530&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;147&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/BIxNE69adGm1JKlx2yWPAic9picTW8sjvARAKHs5tfEzHhWF1ic4nD6937iaSiaosYOJsaB9h11atLdryQ1WNu9oBicA/640?wx_fmt=png&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;点击关注“数据万有引力”&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3ODg2NjI1MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/BIxNE69adGlfmBqRibDFy1BvC3ibkjsrBZMkmFsHsz5k5uuTSNy9Cic4KxklugDtggrwgJQLf360A9GCMOglwSNWg/0?wx_fmt=png&quot; data-nickname=&quot;数据万有引力&quot; data-alias=&quot;&quot; data-signature=&quot;数据知行合一 知：掌握数据建设方法论、技术体系； 行：将数据建设方法论、技术体系与业务场景结合落地&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;71&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;71&quot; data-ratio=&quot;0.12239089184060721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Udyic3dg81RNia0qRe5yAJFibK1veggg8WBmtlMViadKjokxS6fl0OTkRf1eH9ODI42n9yjwS93k05lELvMdDZRzzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1054&quot; title=&quot;推荐.jpg&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9e1a69116f4d8e6ffa1462b738cec9cd</guid>
<title>如何实现一个 SQL 解析器</title>
<link>https://toutiao.io/k/6ynbonf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;作者：vivo 互联网搜索团队- Deng Jie&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、背景&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;随着技术的不断的发展，在大数据领域出现了越来越多的技术框架。而为了降低大数据的学习成本和难度，越来越多的大数据技术和应用开始支持SQL进行数据查询。SQL作为一个学习成本很低的语言，支持SQL进行数据查询可以降低用户使用大数据的门槛，让更多的用户能够使用大数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本篇文章主要介绍如何实现一个SQL解析器来应用的业务当中，同时结合具体的案例来介绍SQL解析器的实践过程。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、为什么需要SQL解析器？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在设计项目系统架构时，我们通常会做一些技术调研。我们会去考虑为什么需要SQL解析器？怎么判断选择的 SQL 解析器可以满足当前的技术要求？&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;2.1 传统的SQL查询&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;传统的SQL查询，依赖完整的数据库协议。比如数据存储在MySQL、Oracle等关系型数据库中，有标准的SQL语法。我们可以通过不同的SQL语句来实现业务需求，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41061224489795917&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUPZKtrrm6EVAhbYmCjdEXeFQzOMHAJwla0OvPQu5fkw6TNYnfibIA2SQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1225&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;但是，在处理海量数据的时候，关系型数据库是难以满足实际的业务需求的，我们需要借助大数据生态圈的技术组件来解决实际的业务需求。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;2.2 实际应用场景&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在使用大数据生态圈的技术组件时，有些技术组件是自带SQL的，比如Hive、Spark、Flink等；而有些技术组件本身是不带SQL的，比如Kafka、HBase。下面，我们可以通过对比不带SQL和使用SQL解析器后的场景，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5156118143459916&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUia7FWK22a61dTHsNibaQXctgNTk0ZcWfXLBafQTpJf7TzTonm7Z1PWcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1185&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;从上图中，我们可以看到，图左边在我们使用不带SQL的技术组件时，实现一个查询时，需要我们编写不同的业务逻辑接口，来与Kafka、HBase这些技术组件来进行数据交互。如果随着这类组件的增加，查询功能复杂度的增加，那边每套接口的复杂度也会随之增加，对于后续的扩展和维护也是很不方便的。而图右边在我们引入SQL解析器后，只需要一套接口来完成业务逻辑，对于不同的技术组件进行适配即可。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、什么是SQL解析器？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在选择SQL解析器应用到我们实际的业务场景之前，我们先来了解一下SQL解析器的核心知识点。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;3.1 SQL解析器包含哪些内容？&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在使用SQL解析器时，解析SQL的步骤与我们解析Java/Python程序的步骤是非常的相似的，比如：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section/&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在我们使用解析器的过程当中，通常解析器主要包括三部分，它们分别是：词法解析、语法解析、语义解析。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.1 什么词法解析？&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;如何理解词法解析呢？词法解析我们可以这么来进行理解，在启动词法解析任务时，它将从左到右把字符一个个的读取并加载到解析程序里面，然后对字节流进行扫描，接着根据构词规则识别字符并切割成一个个的词条，切词的规则是遇到空格进行分割，遇到分号时结束词法解析。比如一个简单的SQL如下所示：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;SQL示例&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; tab;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;通过词法解析后，结果如下所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1991869918699187&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUN2ialicCSK9gGUnUicYXsIqW8zWZEd6iaUZHiaMrfialUZCM0UjC1lWtuu9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;246&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.2 什么是语法解析？&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;如何理解语法解析呢？语法解析我们可以这么来进行理解，在启动语法解析任务时，语法分析的任务会在词法分析的结果上将词条序列组合成不同语法短句，组成的语法短句将与相应的语法规则进行适配，若适配成功则生成对应的抽象语法树，否则报会抛出语法错误异常。比如如下SQL语句：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;SQL示例&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; tab &lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;1001&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;约定规则如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.09692671394799054&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUvVPLjhd1NJzHV4c3M2SFnKyejSDwYPHAWVLNrOibBPT9IiasYlmSXKyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;423&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;上表中，红色的内容通常表示终结符，它们一般是大写的关键字或者符号等，小写的内容是非终结符，一般用作规则的命名，比如字段、表名等。具体AST数据结构如下图所示：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.515527950310559&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUkFWXXpYtP24ODxxxry2SFDAPSOIic7eo8IjKYibyYRFg5v3qibwUnoT7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1127&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;3.1.3 什么是语义解析？&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;如何理解语义解析呢？语义解析我们可以这么来进行理解，语义分析的任务是对语法解析得到的抽象语法树进行有效的校验，比如字段、字段类型、函数、表等进行检查。比如如下语句：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;SQL示例&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; tab &lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;1001&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;上述SQL语句，语义分析任务会做如下检查：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section/&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;上述检查结束后，语义解析会生成对应的表达式供优化器去使用。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、 如何选择SQL解析器？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;在了解了解析器的核心知识点后，如何选择合适的SQL解析器来应用到我们的实际业务当中呢？下面，我们来对比一下主流的两种SQL解析器。它们分别是ANTLR和Calcite。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.1 ANTLR&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;ANTLR是一款功能强大的语法分析器生成器，可以用来读取、处理、执行和转换结构化文本或者二进制文件。在大数据的一些SQL框架里面有有广泛的应用，比如Hive的词法文件是ANTLR3写的，Presto词法文件也是ANTLR4实现的，SparkSQLambda词法文件也是用Presto的词法文件改写的，另外还有HBase的SQL工具Phoenix也是用ANTLR工具进行SQL解析的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用ANTLR来实现一条SQL，执行或者实现的过程大致是这样的，实现词法文件（.g4），生成词法分析器和语法分析器，生成抽象语法树（也就是我常说的AST），然后再遍历抽象语法树，生成语义树，访问统计信息，优化器生成逻辑执行计划，再生成物理执行计划去执行。&lt;/p&gt;&lt;p&gt;                                                      &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.46600181323662737&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgU0NHx0omvgp63D1F4jS1pb0vWyknKXrTtuC4qDfeEXSiazINJZ54V2Nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1103&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;官网示例：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;ANTLR表达式&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;assign&lt;/span&gt; : ID &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;=&#x27;&lt;/span&gt; expr &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;;&#x27;&lt;/span&gt; ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;解析器的代码类似于下面这样：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;ANTLR解析器代码&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  match(ID);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  match(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;=&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  expr();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  match(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;;&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.1.1 Parser&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;Parser是用来识别语言的程序，其本身包含两个部分：词法分析器和语法分析器。词法分析阶段主要解决的问题是关键字以及各种标识符，比如INT（类型关键字）和ID（变量标识符）。语法分析主要是基于词法分析的结果，构造一颗语法分析数，流程大致如下：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.38173302107728335&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUkDZWpCmgBYrglu2n1liasMoRTCYszrficbfD9Rumr8iba3HmHI9BxC9iaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;854&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;因此，为了让词法分析和语法分析能够正常工作，在使用ANTLR4的时候，需要定义语法（Grammar）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们可以把字符流（CharStream），转换成一棵语法分析树，字符流经过词法分析会变成Token流。Token流再最终组装成一棵语法分析树，其中包含叶子节点（TerminalNode）和非叶子节点（RuleNode）。具体语法分析树如下图所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7122128174123338&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgU55qibxZCJohBHC338OWq0578NXqVhK4AySIA5ibJZtOtjvpOkkica9MZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;827&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.1.2 Grammar&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;ANTLR官方提供了很多常用的语言的语法文件，可以进行修改后直接进行复用：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/antlr/grammars-v4&quot; data-linktype=&quot;2&quot;&gt;https://github.com/antlr/grammars-v4&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在使用语法的时候，需要注意以下事项：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ul class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;语法名称和文件名要一致；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;语法分析器规则以小写字母开始；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;词法分析器规则以大写字母开始；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用&#x27;string&#x27;单引号引出字符串；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不需要指定开始符号；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;规则以分号结束；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;...&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.1.3 ANTLR4实现简单计算功能&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;下面通过简单示例，说明ANTLR4的用法，需要实现的功能效果如下：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;ANTLR示例&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt; =&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-5&lt;/span&gt; =&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-5&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-5&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; =&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-5&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)*&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt; =&amp;gt; (&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;)*&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;通过ANTLR处理流程如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5411471321695761&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUjz4Zqd6R4je5QsibqpCcvln0LibJxhQCS1tR6GicVSjOexnVaDoVCP78A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1203&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;整体来说一个原则，递归下降。即定义一个表达式(如expr)，可以循环调用直接也可以调用其他表达式，但是最终肯定会有一个最核心的表达式不能再继续往下调用了。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;&lt;span&gt;步骤一：定义词法规则文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;CommonLexerRules.g4&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;lexer grammar CommonLexerRules;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ID     : [a-zA-Z]+ ;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;INT    : [&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;-9&lt;/span&gt;]+    ;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;NEWLINE: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\n&#x27;&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\r&#x27;&lt;/span&gt;?);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;WS     : [ \t\n\r]+ -&amp;gt; skip;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;DIV:&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;/&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;MUL:&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;*&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ADD:&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;+&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SUB:&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;-&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;EQU:&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;=&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;strong&gt;步骤二：定义语法规则文件（LibExpr.g4）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;LibExpr.g4&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;grammar LibExpr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import CommonLexerRules;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;prog:stat+ EOF?;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;stat:expr (NEWLINE)?         &lt;span class=&quot;code-snippet__meta&quot;&gt;# printExpr&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    | ID &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;=&#x27;&lt;/span&gt; expr (NEWLINE)? &lt;span class=&quot;code-snippet__meta&quot;&gt;# assign&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    | NEWLINE                &lt;span class=&quot;code-snippet__meta&quot;&gt;# blank&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;expr:expr op=(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;*&#x27;&lt;/span&gt;|&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;/&#x27;&lt;/span&gt;) expr &lt;span class=&quot;code-snippet__meta&quot;&gt;# MulDiv&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    |expr op=(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;+&#x27;&lt;/span&gt;|&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;-&#x27;&lt;/span&gt;) expr &lt;span class=&quot;code-snippet__meta&quot;&gt;# AddSub&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    |&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;(&#x27;&lt;/span&gt; expr &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;)&#x27;&lt;/span&gt;           &lt;span class=&quot;code-snippet__meta&quot;&gt;# Parens&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    |ID                     &lt;span class=&quot;code-snippet__meta&quot;&gt;# Id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    |INT                    &lt;span class=&quot;code-snippet__meta&quot;&gt;# Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤三：编译生成文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果是Maven工程，这里在pom文件中添加如下依赖：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;ANTLR依赖JAR&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.antlr&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;antlr4&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.9.3&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.antlr&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;antlr4-runtime&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.9.3&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;然后，执行Maven编译命令即可：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Maven编译命令&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;mvn&lt;/span&gt; generate-sources&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;&lt;span&gt;步骤四：编写简单的示例代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;待预算的示例文本：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;示例文本&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1+2&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1+2*4&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1+2*4-5&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;1+2*4-5+20/5&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(1+2)*4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;加减乘除逻辑类：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;逻辑实现类&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; com.vivo.learn.sql;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;LibExprVisitorImpl&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;LibExprBaseVisitor&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Integer&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Map&amp;lt;String,Integer&amp;gt; data = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String,Integer&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;visitPrintExpr&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(LibExprParser.PrintExprContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(ctx.expr().getText()+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=&quot;&lt;/span&gt;+visit(ctx.expr()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; visit(ctx.expr());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;visitAssign&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(LibExprParser.AssignContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String id = ctx.ID().getText();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; value = Integer.valueOf(visit(ctx.expr()));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        data.put(id,value);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(id+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;=&quot;&lt;/span&gt;+value);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;visitBlank&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(LibExprParser.BlankContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;visitMulDiv&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(LibExprParser.MulDivContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; left = Integer.valueOf(visit(ctx.expr(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; right = Integer.valueOf(visit(ctx.expr(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; opType = ctx.op.getType();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(LibExprParser.MUL==opType){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; left*right;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; left/right;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;visitAddSub&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(LibExprParser.AddSubContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; left = Integer.valueOf(visit(ctx.expr(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; right = Integer.valueOf(visit(ctx.expr(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; opType = ctx.op.getType();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(LibExprParser.ADD==opType){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; left+right;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; left-right;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;visitParens&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(LibExprParser.ParensContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; visit(ctx.expr());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;visitId&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(LibExprParser.IdContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String id = ctx.ID().getText();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(data.containsKey(id)){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; data.get(id);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;code-snippet__title&quot;&gt;visitInt&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(LibExprParser.IntContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Integer.valueOf(ctx.INT().getText());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;Main函数打印输出结果类：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;package com.vivo.learn.sql;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import org.antlr.v4.runtime.tree.ParseTree;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import java.io.FileNotFoundException;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import java.io.IOException;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import org.antlr.v4.runtime.*;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TestLibExprPrint&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String args[]&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        printTree(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;E:\\smartloli\\hadoop\\sql-parser-example\\src\\main\\resources\\testCase.txt&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;printTree&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String fileName&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ANTLRInputStream input = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(fileName!=&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                input = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ANTLRFileStream(fileName);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt;(FileNotFoundException fnfe){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;文件不存在，请检查后重试！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt;(IOException ioe){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;文件读取异常，请检查后重试！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                input = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ANTLRInputStream(System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt;(FileNotFoundException fnfe){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;文件不存在，请检查后重试！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt;(IOException ioe){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;文件读取异常，请检查后重试！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        LibExprLexer lexer = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; LibExprLexer(input);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        CommonTokenStream tokens = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; CommonTokenStream(lexer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        LibExprParser parser = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; LibExprParser(tokens);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ParseTree tree = parser.prog();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        LibExprVisitorImpl visitor = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; LibExprVisitorImpl();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        visitor.visit(tree);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;执行代码，最终输出结果如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.16702586206896552&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUohO9hHGQSw7B4CDStMvYGhgDr9XcQuIBkH8mDsTWYheiaYjx6DttyPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;928&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.2 Calcite&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;上述ANTLR内容演示了词法分析和语法分析的简单流程，但是由于ANTLR要实现SQL查询，需要自己定义词法和语法相关文件，然后再使用ANTLR的插件对文件进行编译，然后再生成代码（与Thrift的使用类似，也是先定义接口，然后编译成对应的语言文件，最后再继承或者实现这些生成好的类或者接口）。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.2.1 原理及优势&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;而Apache Calcite的出现，大大简化了这些复杂的工程。Calcite可以让用户很方便的给自己的系统套上一个SQL的外壳，并且提供足够高效的查询性能优化。&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ul class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;query language；&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;query optimization；&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;query execution；&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;data management；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;data storage；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;上述这五个功能，通常是数据库系统包含的常用功能。Calcite在设计的时候就确定了自己只关注绿色的三个部分，而把下面数据管理和数据存储留给各个外部的存储或计算引擎。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据管理和数据存储，尤其是数据存储是很复杂的，也会由于数据本身的特性导致实现上的多样性。Calcite抛弃这两部分的设计，而是专注于上层更加通用的模块，使得自己能够足够的轻量化，系统复杂性得到控制，开发人员的精力也不至于耗费的太多。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;同时，Calcite也没有重复去早轮子，能复用的东西，都是直接拿来复用。这也是让开发者能够接受去使用它的一个原因。比如，如下两个例子：&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;例子1：&lt;/strong&gt;作为一个SQL解析器，关键的SQL解析，Calcite没有重复造轮子，而是直接使用了开源的JavaCC，来将SQL语句转化为Java代码，然后进一步转化成一棵抽象语法树（AST）以供下一阶段使用；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;例子2：为了&lt;/strong&gt;支持后面会提到的灵活的元数据功能，Calcite需要支持运行时编译Java代码。默认的JavaC太重，需要一个更轻量级的编译器，Calcite同样没有选择造轮子，而是使用了开源了Janino方案。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5332278481012658&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUH6Utc3NTQZhETL32PxkVDxlWia9QlwV6oB3g8aWibwP5f07bfYXeyW2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1264&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;上面的图是Calcite官方给出的架构图，从图中我们可以获取到的信息是，一方面印证了我们上面提到的，Calcite足够的简单，没有做自己不该做的事情；另一方面，也是更重要的，Calcite被设计的足够模块化和可插拔。&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ul class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;【&lt;span&gt;JDBC Client&lt;/span&gt;】：这个模块用来支持使用JDBC Client的应用；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;【&lt;span&gt;SQL Parser and Validator&lt;/span&gt;】：该模块用来做SQL解析和校验；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;【&lt;span&gt;Expressions Builder&lt;/span&gt;】：用来支持自己做SQL解析和校验的框架对接；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;【&lt;span&gt;Operator Expressions&lt;/span&gt;】：该模块用来处理关系表达式；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;【&lt;span&gt;Metadata Provider&lt;/span&gt;】：该模块用来支持外部自定义元数据；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;【&lt;span&gt;Pluggable Rules&lt;/span&gt;】：该模块用来定义优化规则；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;【&lt;strong&gt;Query Optimizer&lt;/strong&gt;】：&lt;/strong&gt;最核心的模块，专注于查询优化。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;功能模块的划分足够合理，也足够独立，使得不用完整集成，而是可以只选择其中的一部分使用，而基本上每个模块都支持自定义，也使得用户能够更多的定制系统。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3788546255506608&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgU9L42plCP0mZh1HnKuEfsBxq47UlqEZRIR0TqrHWRuR7VZiaxUIEIhjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;681&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;上面列举的这些大数据常用的组件都Calcite均有集成，可以看到Hive就是自己做了SQL解析，只使用了Calcite的查询优化功能。而像Flink则是从解析到优化都直接使用了Calcite。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面介绍的Calcite集成方法，都是把Calcite的模块当做库来使用。如果觉得太重量级，可以选择更简单的适配器功能。通过类似Spark这些框架里自定义的Source或Sink的方式，来实现和外部系统的数据交互操作。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8475452196382429&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUBSsfiaAIOgAEdRk9rxRJzoLSa5ULekZrOLhibSwpibheciczia2z3aA3OLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;387&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;上图就是比较典型的适配器用法，比如通过Kafka的适配器就能直接在应用层通过SQL，而底层自动转换成Java和Kafka进行数据交互（后面部分有个案例操作）。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.2.2 Calcite实现KSQL查询Kafk&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;参考了EFAK（原Kafka Eagle开源项目）的SQL实现，来查询Kafka中Topic里面的数据。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;1.常规SQL查询&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;SQL查询&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; video_search_query &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`partition`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;预览截图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.45234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUpRBzEFbLKRhozeDBfpXNPvVlzxV3Q5XLfyKvbnj6aO79icFxgfJrZ2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;2.UDF查询&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;SQL查询&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;JSON&lt;/span&gt;(msg,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;query&#x27;&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;query&lt;/span&gt;,&lt;span class=&quot;code-snippet__keyword&quot;&gt;JSON&lt;/span&gt;(msg,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;pv&#x27;&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; pv &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; video_search_query &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`partition`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;预览截图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.45546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgU7VDTSca5fjJ3Wxcm2rCnptt0GAr7zLqV9b9Og44mWxicJayXABN0UNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;4.3 ANTLR4 和 Calcite SQL解析对比&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.3.1 ANTLR4解析SQL&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;ANTLR4解析SQL的主要流程包含：定义词法和语法文件、编写SQL解析逻辑类、主服务调用SQL逻辑类。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;strong&gt;1.定义词法和语法文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;可参考官网提供的开源地址：&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/antlr/grammars-v4/tree/master/sql/&quot; textvalue=&quot;详情&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;详情&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;&lt;span&gt;2.编写SQL解析逻辑类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;这里，我们编写一个实现解析SQL表名的类，具体实现代码如下所示：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;解析表名&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TableListener&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;antlr4&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;sql&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;MySqlParserBaseListener&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; String tableName = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;enterQueryCreateTable&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(antlr4.sql.MySqlParser.QueryCreateTableContext ctx)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        List&amp;lt;MySqlParser.TableNameContext&amp;gt; tableSourceContexts = ctx.getRuleContexts(antlr4.sql.MySqlParser.TableNameContext.class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (antlr4.sql.MySqlParser.TableNameContext tableSource : tableSourceContexts) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            tableName = tableSource.getText();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;code-snippet__title&quot;&gt;getTableName&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; tableName;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;&lt;span&gt;3.主服务调用SQL逻辑类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;对实现SQL解析的逻辑类进行调用，具体代码如下所示：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;主服务&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AntlrClient&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        antlr4.sql.MySqlLexer lexer = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; antlr4.sql.MySqlLexer(CharStreams.fromString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;create table table2 select tid from table1;&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        antlr4.sql.MySqlParser parser = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; antlr4.sql.MySqlParser(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; CommonTokenStream(lexer));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        TableListener listener = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TableListener();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ParseTreeWalker.DEFAULT.walk(listener, parser.sqlStatements());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String tableName= listener.getTableName();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(tableName);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.3.2 Calcite解析SQL&lt;/strong&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;Calcite解析SQL的流程相比较ANTLR是比较简单的，开发中无需关注词法和语法文件的定义和编写，只需关注具体的业务逻辑实现。比如实现一个SQL的COUNT操作，Calcite实现步骤如下所示。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;strong&gt;1.pom依赖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Calcite依赖JAR&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.smartloli&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jsql-client&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0.0&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;strong&gt;2.实现代码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Calcite示例代码&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;package com.vivo.learn.sql.calcite;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.alibaba.fastjson.JSON;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.alibaba.fastjson.JSONArray;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; com.alibaba.fastjson.JSONObject;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.smartloli.util.JSqlUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; JSqlClient {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;[] args) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        JSONObject tabSchema = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; JSONObject();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        tabSchema.put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;integer&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        tabSchema.put(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;varchar&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        JSONArray datasets = &lt;span class=&quot;code-snippet__built_in&quot;&gt;JSON&lt;/span&gt;.parseArray(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;[{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;aaa\&quot;,\&quot;age\&quot;:20},{\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;bbb\&quot;,\&quot;age\&quot;:21},{\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;ccc\&quot;,\&quot;age\&quot;:22}]&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; tabName = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;userinfo&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; sql = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;select count(*) as cnt from \&quot;userinfo\&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; result = JSqlUtils.query(tabSchema,tabName,datasets,sql);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;result: &quot;&lt;/span&gt;+result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;strong&gt;3.预览截图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.17556346381969157&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUAOKaQphHXCbiboplgSEM0LaIqAm1ARPJhEIbfAeSpYnSjtDL9zj27YA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;843&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;4.3.3 对比结果&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6391752577319587&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUXibVu5efj2NjavAziaRsSq9eicUve0jzbfSn0iaYsjyNvU07WiaaNhoQpTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;291&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;综合对比，我们从对两种技术的学习成本、使用复杂度、以及灵活度来对比，可以优先选择Calcite来作为SQL解析器来处理实际的业务需求。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;另外，在单机模式的情况下，执行计划可以较为简单的翻译成执行代码，但是在分布式领域中，因为计算引擎多种多样，因此，还需要一个更加贴近具体计算引擎的描述，也就是物理计划。换言之，逻辑计划只是抽象的一层描述，而物理计划则和具体的计算引擎直接挂钩。&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4531693472090823&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7s57QVJC5jiarGFqAEIUTgUO5lvPEqHBEgjicq0L7GkeKrR7iaPkChXmS5K3qVjPSBXkohPwQiaiak9Qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1057&quot;/&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;满足上述场景，通常都可以引入SQL解析器：&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ul class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;给关系型数据库（比如MySQL、Oracle）这类提供定制化的SQL来作为交互查询；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;给开发人员提供了JDBC、ODBC之类和各种数据库的标准接口；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对数据分析师等不太会编程语言的但又需要使用数据的人；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;大数据技术组件不自带SQL的；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;&lt;span&gt;参考资料：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/smartloli/EFAK&quot; textvalue=&quot;https://github.com/smartloli/EFAK&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://github.com/smartloli/EFAK&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/antlr/antlr4&quot; textvalue=&quot;https://github.com/antlr/antlr4&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://github.com/antlr/antlr4&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/antlr/grammars-v4&quot; textvalue=&quot;https://github.com/antlr/grammars-v4&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://github.com/antlr/grammars-v4&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/apache/calcite&quot; textvalue=&quot;https://github.com/apache/calcite&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://github.com/apache/calcite&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:232.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>51b3909f7d530eba20fe5909bb36bb33</guid>
<title>面试官：你懂 HTTP 缓存，那说下浏览器强制刷新是怎么实现的？</title>
<link>https://toutiao.io/k/63uiuvh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HTTP 缓存是前端面试必问的知识点，大多数前端也都能答出强缓存和协商缓存来，但如果换个问法呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如问浏览器的强制刷新实现原理是什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你还能答出来么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这也是考察缓存相关的知识点，看完这篇文章你就有答案了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在网站设置缓存都是通过 Cache-Control 这个 header，他有很多指令（directive）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 max-age 是指定强缓存的时间，no-cache 是会用本地的缓存但每次都会协商，no-store 是禁用掉缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然还有其他的指令，这里就不展开了，感兴趣可以看&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&amp;amp;mid=2247490336&amp;amp;idx=1&amp;amp;sn=fc9a3fcd2e0263308577127cb1820590&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网站的缓存设置一般是这样的：&lt;strong&gt;入口设置 no-cache 其他资源设置 max-age，这样入口文件会缓存但是每次都协商，保证能及时更新，而其他资源不发请求，减轻服务端压力。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你随便找个网站看看都是这样的，比如 https://www.bilibili.com/&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5604311008468053&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YprkEU0TtGg3aGbII4P31z2JYaBib7UhY8icaIYD6aENT2BORO97gXe0g7ESbU5o89laKGj61mHcyFkxqfeRA3Gw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2598&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到入口请求，也就是 html 的请求设置了 no-cache，其他所有的后续的资源都设置了强缓存 max-age。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样第一次访问把资源下载下来之后，再次访问就只有 html 会发请求了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2201195219123506&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhY6Ztz5RiaMvZHECvaxw9mKWASnvicibYjNibsVqszfT8AWp8y77p9x5ANGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2008&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里 memory cache 和 disk cache 不用做啥区分，只是刚开始是存在内存里的，关闭浏览器再打开就变成从磁盘加载的了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过 is 过滤器来过滤 from-cache 的请求，也就是所有直接拿了强缓存的请求：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29923664122137406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhYhyaVwpb5BzFOnhj5kib4ULiaOadg0UApNNISS7Y50xVUrpqFk9Ef8zgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2620&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那问题来了，这些资源都做了强缓存，那万一资源有更新怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种只要更新入口 html 就好了，业务资源文件名字里是有 hash 的，新的 html 引用不同 hash 的资源即可：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4845360824742268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhYTlHicibqpRHcRgS72Eee2VJg3TvX2QlePGfp4BvTuYT5S3IX7pqcVxYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;582&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，&lt;strong&gt;入口 html 文件是绝对不能强缓存的，不然就更新不了了&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种入口 html 文件设置 no-cache，其他资源文件设置 max-age 的缓存方式算是最佳实践了，你随便找一个网站看看都是这种方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们开发的时候，这些强缓存的文件想更新怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般我们都会用强制刷新，也就是 command + shift + R。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么这样就可以拿到最新的资源了呢？为啥不走强缓存了呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;探究这个的原理就要抓包来看了：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 zhihu 的网站里用到了 react-dom.production.min.js 这个文件，它被缓存了，所以普通刷新直接拿的本地强缓存：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38088012139605465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhYALPpFNgDKzjZo89h4DLhR2H3ucGTNAEQZicDuxko708W2U22xqtOQMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2636&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果你强制刷新，这里的 Cache-Control 的 header 还是一样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2646604938271605&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhY5yM4d6cOkYibcno8EVcscfGaHiaUXibfRVuxUq7dAf8jjMvfSk8Vpffhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2592&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;明明缓存设置没有变，怎么缓存就失效了呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个用 Chrome DevTools 是看不到的，它给隐藏了，我们要用别的抓包工具来看，比如 charles。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何用 charles 抓 https 网页的请求，在&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&amp;amp;mid=2247492108&amp;amp;idx=1&amp;amp;sn=525ad9bf283055d39d3c528ab1c94419&amp;amp;chksm=cf032d37f874a421d64bcc10e70393c8a90f97a26e4b9c4e71fd0311748e49032c6494f9bad5&amp;amp;token=965494574&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;之前一篇文章里&lt;/a&gt;写过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再次强制刷新，你会在 charles 里看到这个请求：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24198250728862974&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhYbxn0rm2libyzNGPXzJ6HBKWpvS8BB901HcCuv7t0THd9d6RIWGfNiabg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;你会发现这个请求的 Cache-Control 变成了 no-cache，也就是和服务端协商是否要更新本地缓存，这就是强制刷新的实现原理！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但你现在在 Chrome DevTools 里看到的依然是之前的 Cache-Control：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1015748031496063&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhY2fansHrmdtDIVV2Hrrbyr1y5nNyqG57dEbpstPAQeP6nPHz0a6VVGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2540&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明 Chrome DevTools 隐藏了这个行为，就像它隐藏了 sourcemap 文件的请求一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;sourcemap 文件的请求也可以在 charles 里看到：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2317429406037001&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhYzAURpic28UaMvkoPqYyRiczvCct6LwFLYic8fNqiaoMbmeVtLHH0xGOzcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2054&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Chrome DevTools 还有个禁用缓存的功能，也是通过设置 Cache-Control 为 no-cache 实现的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14933837429111532&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhYsOEuel9wydVianvSdQZ3PFDUtR9CdBiabZicSKmajwxGA5X7m1lYWDADA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的同学可能问了，浏览器除了强制刷新，还有一个清空缓存并强制刷新呀，那个是啥意思？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YprkEU0TtGg3aGbII4P31z2JYaBib7UhYJ71sFHTBj5eGVxia7dnrInHfTNuUt9gAKk5UtEP3s6UpNIAJjF0WlkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;768&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实很容易理解，强制刷新是设置 no-cache，也就是和服务端协商决定用本地的缓存还是下载新的，但有的时候你想更新本地的缓存结果服务端让你用本地的缓存呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候就可以清空本地强缓存再刷新了，也就是这个选项的意思。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网站的缓存设置的最佳实践是入口 html 文件 Cache-Control 设置 no-cache，其他文件 max-age，这样入口文件会用本地缓存但每次都协商，能及时更新，而其他资源不会发请求，能减少服务端压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要更新的话，html 文件协商后发现有更新会下载新 html，这时候关联了其他 hash 的文件，浏览器会下载新的，不会走到之前文件的缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而强制刷新的实现原理就是设置了 Cache-Control 为 no-cache，这个行为被 Chrome DevTools 隐藏了，用 Charles 抓包就能看到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有个清空缓存并强制刷新的功能，那个是清掉本地的缓存再去协商，能保证一定是拿到最新的资源。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;能答出网站缓存设置的最佳实践，也知道强制刷新的实现原理，就算是理论结合实践，真正搞懂 http 缓存了。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>